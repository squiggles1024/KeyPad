
KeyPad.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000eba8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000221e4  0800ed48  0800ed48  0001ed48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08030f2c  08030f2c  000502e4  2**0
                  CONTENTS
  4 .ARM          00000008  08030f2c  08030f2c  00040f2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08030f34  08030f34  000502e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08030f34  08030f34  00040f34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08030f38  08030f38  00040f38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002e4  20000000  08030f3c  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000190c  200002e4  08031220  000502e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001bf0  08031220  00051bf0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000502e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000271bc  00000000  00000000  00050314  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000063c8  00000000  00000000  000774d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f38  00000000  00000000  0007d898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001c18  00000000  00000000  0007f7d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001faa2  00000000  00000000  000813e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002b4b3  00000000  00000000  000a0e8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a6c45  00000000  00000000  000cc33d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00172f82  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000085f0  00000000  00000000  00172fd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002e4 	.word	0x200002e4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ed30 	.word	0x0800ed30

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002e8 	.word	0x200002e8
 80001dc:	0800ed30 	.word	0x0800ed30

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <FT6206_Init>:
const FT6206_Reg_t RELEASE_CODE_ID = 0xAF;
const FT6206_Reg_t STATE = 0xBC;

static uint8_t touch_screen_buffer[4];

void FT6206_Init(FT6206_Handle_t *Dev, FT6206_IO_Drv_t IO_Drv){
 8000584:	b084      	sub	sp, #16
 8000586:	b5b0      	push	{r4, r5, r7, lr}
 8000588:	b082      	sub	sp, #8
 800058a:	af00      	add	r7, sp, #0
 800058c:	6078      	str	r0, [r7, #4]
 800058e:	f107 001c 	add.w	r0, r7, #28
 8000592:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	Dev->P1_XPos = 0;
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	2200      	movs	r2, #0
 800059a:	801a      	strh	r2, [r3, #0]
	Dev->P1_YPos = 0;
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	2200      	movs	r2, #0
 80005a0:	805a      	strh	r2, [r3, #2]
	Dev->P1_EventFlag = 0;
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	2200      	movs	r2, #0
 80005a6:	711a      	strb	r2, [r3, #4]
	Dev->IO_Driver = IO_Drv;
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	f103 0408 	add.w	r4, r3, #8
 80005ae:	f107 051c 	add.w	r5, r7, #28
 80005b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005b6:	682b      	ldr	r3, [r5, #0]
 80005b8:	6023      	str	r3, [r4, #0]
	Dev->IO_Driver.init();
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	689b      	ldr	r3, [r3, #8]
 80005be:	4798      	blx	r3
	Dev->IO_Driver.read(P1_XH, touch_screen_buffer, 4);
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	695b      	ldr	r3, [r3, #20]
 80005c4:	2003      	movs	r0, #3
 80005c6:	2204      	movs	r2, #4
 80005c8:	4904      	ldr	r1, [pc, #16]	; (80005dc <FT6206_Init+0x58>)
 80005ca:	4798      	blx	r3
	//FT6206_ReadScreen(Dev);
}
 80005cc:	bf00      	nop
 80005ce:	3708      	adds	r7, #8
 80005d0:	46bd      	mov	sp, r7
 80005d2:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80005d6:	b004      	add	sp, #16
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop
 80005dc:	20000300 	.word	0x20000300

080005e0 <FT6206_DeInit>:

void FT6206_DeInit(FT6206_Handle_t *Dev){
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
	Dev->IO_Driver.deinit();
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	68db      	ldr	r3, [r3, #12]
 80005ec:	4798      	blx	r3
	Dev->IO_Driver.init = '\0';
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	2200      	movs	r2, #0
 80005f2:	609a      	str	r2, [r3, #8]
	Dev->IO_Driver.deinit = '\0';
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	2200      	movs	r2, #0
 80005f8:	60da      	str	r2, [r3, #12]
	Dev->IO_Driver.read = '\0';
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	2200      	movs	r2, #0
 80005fe:	615a      	str	r2, [r3, #20]
	Dev->IO_Driver.write = '\0';
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	2200      	movs	r2, #0
 8000604:	611a      	str	r2, [r3, #16]
	Dev->IO_Driver.ioctl = '\0';
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	2200      	movs	r2, #0
 800060a:	619a      	str	r2, [r3, #24]
}
 800060c:	bf00      	nop
 800060e:	3708      	adds	r7, #8
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}

08000614 <FT6206_ReadScreen>:

void FT6206_ReadScreen(FT6206_Handle_t *Dev){
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
	//uint8_t buffer[4];
	Dev->P1_YPos = 240 - ((touch_screen_buffer[0] << 8 | touch_screen_buffer[1]) & 0x0FFF);
 800061c:	4b18      	ldr	r3, [pc, #96]	; (8000680 <FT6206_ReadScreen+0x6c>)
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	021b      	lsls	r3, r3, #8
 8000622:	b21a      	sxth	r2, r3
 8000624:	4b16      	ldr	r3, [pc, #88]	; (8000680 <FT6206_ReadScreen+0x6c>)
 8000626:	785b      	ldrb	r3, [r3, #1]
 8000628:	b21b      	sxth	r3, r3
 800062a:	4313      	orrs	r3, r2
 800062c:	b21b      	sxth	r3, r3
 800062e:	b29b      	uxth	r3, r3
 8000630:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000634:	b29b      	uxth	r3, r3
 8000636:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 800063a:	b29a      	uxth	r2, r3
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	805a      	strh	r2, [r3, #2]
	Dev->P1_EventFlag = touch_screen_buffer[0] >> 6;
 8000640:	4b0f      	ldr	r3, [pc, #60]	; (8000680 <FT6206_ReadScreen+0x6c>)
 8000642:	781b      	ldrb	r3, [r3, #0]
 8000644:	099b      	lsrs	r3, r3, #6
 8000646:	b2da      	uxtb	r2, r3
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	711a      	strb	r2, [r3, #4]
	Dev->P1_XPos = (touch_screen_buffer[2] << 8 | touch_screen_buffer[3]) & 0x0FFF;
 800064c:	4b0c      	ldr	r3, [pc, #48]	; (8000680 <FT6206_ReadScreen+0x6c>)
 800064e:	789b      	ldrb	r3, [r3, #2]
 8000650:	021b      	lsls	r3, r3, #8
 8000652:	b21a      	sxth	r2, r3
 8000654:	4b0a      	ldr	r3, [pc, #40]	; (8000680 <FT6206_ReadScreen+0x6c>)
 8000656:	78db      	ldrb	r3, [r3, #3]
 8000658:	b21b      	sxth	r3, r3
 800065a:	4313      	orrs	r3, r2
 800065c:	b21b      	sxth	r3, r3
 800065e:	b29b      	uxth	r3, r3
 8000660:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000664:	b29a      	uxth	r2, r3
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	801a      	strh	r2, [r3, #0]
	Dev->IO_Driver.read(P1_XH, touch_screen_buffer, 4);
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	695b      	ldr	r3, [r3, #20]
 800066e:	2003      	movs	r0, #3
 8000670:	2204      	movs	r2, #4
 8000672:	4903      	ldr	r1, [pc, #12]	; (8000680 <FT6206_ReadScreen+0x6c>)
 8000674:	4798      	blx	r3
}
 8000676:	bf00      	nop
 8000678:	3708      	adds	r7, #8
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	20000300 	.word	0x20000300

08000684 <FT6206_IO_Init>:
#include "gpio.h"
#include "dma.h"

static const uint8_t DevAddr = 0x70;

static void FT6206_IO_Init(void){
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
	I2C2_DMA_Init();
 8000688:	f001 fce8 	bl	800205c <I2C2_DMA_Init>
	I2C_GPIO_Init();
 800068c:	f001 fd06 	bl	800209c <I2C_GPIO_Init>
	I2C2_Init();
 8000690:	f001 febc 	bl	800240c <I2C2_Init>
}
 8000694:	bf00      	nop
 8000696:	bd80      	pop	{r7, pc}

08000698 <FT6206_IO_DeInit>:

static void FT6206_IO_DeInit(void){
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
	HAL_NVIC_DisableIRQ(DMA1_Stream2_IRQn);
 800069c:	200d      	movs	r0, #13
 800069e:	f003 ff00 	bl	80044a2 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_ClearPendingIRQ(DMA1_Stream2_IRQn);
 80006a2:	200d      	movs	r0, #13
 80006a4:	f003 ff17 	bl	80044d6 <HAL_NVIC_ClearPendingIRQ>
}
 80006a8:	bf00      	nop
 80006aa:	bd80      	pop	{r7, pc}

080006ac <FT6206_IO_Write>:

static FT6206_Status_t FT6206_IO_Write(uint8_t Reg, uint8_t* pdata, uint8_t length){
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b086      	sub	sp, #24
 80006b0:	af04      	add	r7, sp, #16
 80006b2:	4603      	mov	r3, r0
 80006b4:	6039      	str	r1, [r7, #0]
 80006b6:	71fb      	strb	r3, [r7, #7]
 80006b8:	4613      	mov	r3, r2
 80006ba:	71bb      	strb	r3, [r7, #6]
	if(HAL_I2C_Mem_Write(&hi2c2, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pdata, length, 100) != HAL_OK){
 80006bc:	2370      	movs	r3, #112	; 0x70
 80006be:	b299      	uxth	r1, r3
 80006c0:	79fb      	ldrb	r3, [r7, #7]
 80006c2:	b29a      	uxth	r2, r3
 80006c4:	79bb      	ldrb	r3, [r7, #6]
 80006c6:	b29b      	uxth	r3, r3
 80006c8:	2064      	movs	r0, #100	; 0x64
 80006ca:	9002      	str	r0, [sp, #8]
 80006cc:	9301      	str	r3, [sp, #4]
 80006ce:	683b      	ldr	r3, [r7, #0]
 80006d0:	9300      	str	r3, [sp, #0]
 80006d2:	2301      	movs	r3, #1
 80006d4:	4806      	ldr	r0, [pc, #24]	; (80006f0 <FT6206_IO_Write+0x44>)
 80006d6:	f004 fee1 	bl	800549c <HAL_I2C_Mem_Write>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <FT6206_IO_Write+0x38>
		return FT6206_Err;
 80006e0:	2301      	movs	r3, #1
 80006e2:	e000      	b.n	80006e6 <FT6206_IO_Write+0x3a>
	}
	return FT6206_Ok;
 80006e4:	2300      	movs	r3, #0
}
 80006e6:	4618      	mov	r0, r3
 80006e8:	3708      	adds	r7, #8
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	20000d90 	.word	0x20000d90

080006f4 <FT6206_IO_Read>:

static FT6206_Status_t FT6206_IO_Read(uint8_t Reg, uint8_t* pdata, uint8_t length){
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b084      	sub	sp, #16
 80006f8:	af02      	add	r7, sp, #8
 80006fa:	4603      	mov	r3, r0
 80006fc:	6039      	str	r1, [r7, #0]
 80006fe:	71fb      	strb	r3, [r7, #7]
 8000700:	4613      	mov	r3, r2
 8000702:	71bb      	strb	r3, [r7, #6]
	if(HAL_I2C_Mem_Read_DMA(&hi2c2, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pdata, length) != HAL_OK){
 8000704:	2370      	movs	r3, #112	; 0x70
 8000706:	b299      	uxth	r1, r3
 8000708:	79fb      	ldrb	r3, [r7, #7]
 800070a:	b29a      	uxth	r2, r3
 800070c:	79bb      	ldrb	r3, [r7, #6]
 800070e:	b29b      	uxth	r3, r3
 8000710:	9301      	str	r3, [sp, #4]
 8000712:	683b      	ldr	r3, [r7, #0]
 8000714:	9300      	str	r3, [sp, #0]
 8000716:	2301      	movs	r3, #1
 8000718:	4806      	ldr	r0, [pc, #24]	; (8000734 <FT6206_IO_Read+0x40>)
 800071a:	f004 ffb9 	bl	8005690 <HAL_I2C_Mem_Read_DMA>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <FT6206_IO_Read+0x34>
		return FT6206_Err;
 8000724:	2301      	movs	r3, #1
 8000726:	e000      	b.n	800072a <FT6206_IO_Read+0x36>
	}
	return FT6206_Ok;
 8000728:	2300      	movs	r3, #0
}
 800072a:	4618      	mov	r0, r3
 800072c:	3708      	adds	r7, #8
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	20000d90 	.word	0x20000d90

08000738 <FT6206_IO_ioctl>:

static uint8_t FT6206_IO_ioctl(FT6206_IO_Cmd_t Command){
 8000738:	b480      	push	{r7}
 800073a:	b083      	sub	sp, #12
 800073c:	af00      	add	r7, sp, #0
 800073e:	4603      	mov	r3, r0
 8000740:	71fb      	strb	r3, [r7, #7]
	return FT6206_Ok;
 8000742:	2300      	movs	r3, #0
}
 8000744:	4618      	mov	r0, r3
 8000746:	370c      	adds	r7, #12
 8000748:	46bd      	mov	sp, r7
 800074a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074e:	4770      	bx	lr

08000750 <ILI9341_Init>:
 *@brief: Initializes the LCD Hardware and prepares it to receive image data
 * See https://cdn-shop.adafruit.com/datasheets/ILI9341.pdf for details regarding commands and data
 * Credit to ST Micro ILI9341.c Driver for initilization sequence
 ******************************************************************/

void ILI9341_Init(ILI9341_Init_Struct_t Settings, ILI9341_Handle_t *Dev, ILI9341_IO_Drv_t IO_Driver){
 8000750:	b5b0      	push	{r4, r5, r7, lr}
 8000752:	b08a      	sub	sp, #40	; 0x28
 8000754:	af00      	add	r7, sp, #0
 8000756:	1d3c      	adds	r4, r7, #4
 8000758:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800075c:	603b      	str	r3, [r7, #0]
	Dev->Orientation = Settings.Orientation;
 800075e:	793a      	ldrb	r2, [r7, #4]
 8000760:	683b      	ldr	r3, [r7, #0]
 8000762:	701a      	strb	r2, [r3, #0]
	Dev->ScreenHeight = Settings.ScreenHeight;
 8000764:	68fa      	ldr	r2, [r7, #12]
 8000766:	683b      	ldr	r3, [r7, #0]
 8000768:	609a      	str	r2, [r3, #8]
	Dev->ScreenWidth = Settings.ScreenWidth;
 800076a:	68ba      	ldr	r2, [r7, #8]
 800076c:	683b      	ldr	r3, [r7, #0]
 800076e:	605a      	str	r2, [r3, #4]
	Dev->Cursor.X = 0;
 8000770:	683b      	ldr	r3, [r7, #0]
 8000772:	2200      	movs	r2, #0
 8000774:	819a      	strh	r2, [r3, #12]
	Dev->Cursor.Y = 0;
 8000776:	683b      	ldr	r3, [r7, #0]
 8000778:	2200      	movs	r2, #0
 800077a:	81da      	strh	r2, [r3, #14]
	Dev->IO_Drv = IO_Driver;
 800077c:	683b      	ldr	r3, [r7, #0]
 800077e:	f103 0410 	add.w	r4, r3, #16
 8000782:	f107 0538 	add.w	r5, r7, #56	; 0x38
 8000786:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000788:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800078a:	682b      	ldr	r3, [r5, #0]
 800078c:	6023      	str	r3, [r4, #0]

	Dev->IO_Drv.init();
 800078e:	683b      	ldr	r3, [r7, #0]
 8000790:	691b      	ldr	r3, [r3, #16]
 8000792:	4798      	blx	r3
	uint8_t buffer[20];


	Dev->IO_Drv.write(ILI9341_SWRESET, buffer, 0);
 8000794:	683b      	ldr	r3, [r7, #0]
 8000796:	699b      	ldr	r3, [r3, #24]
 8000798:	f107 0114 	add.w	r1, r7, #20
 800079c:	2200      	movs	r2, #0
 800079e:	2001      	movs	r0, #1
 80007a0:	4798      	blx	r3
	Dev->IO_Drv.ioctl(ILI9341_Delay1000);
 80007a2:	683b      	ldr	r3, [r7, #0]
 80007a4:	6a1b      	ldr	r3, [r3, #32]
 80007a6:	2001      	movs	r0, #1
 80007a8:	4798      	blx	r3
    

	//Power Control A - Page 195
    buffer[0] = 0x39;
 80007aa:	2339      	movs	r3, #57	; 0x39
 80007ac:	753b      	strb	r3, [r7, #20]
    buffer[1] = 0x2C;
 80007ae:	232c      	movs	r3, #44	; 0x2c
 80007b0:	757b      	strb	r3, [r7, #21]
    buffer[2] = 0x00;
 80007b2:	2300      	movs	r3, #0
 80007b4:	75bb      	strb	r3, [r7, #22]
    buffer[3] = 0x34;
 80007b6:	2334      	movs	r3, #52	; 0x34
 80007b8:	75fb      	strb	r3, [r7, #23]
    buffer[4] = 0x02;
 80007ba:	2302      	movs	r3, #2
 80007bc:	763b      	strb	r3, [r7, #24]
	Dev->IO_Drv.write(ILI9341_PWRCONTROLA, buffer, 5);
 80007be:	683b      	ldr	r3, [r7, #0]
 80007c0:	699b      	ldr	r3, [r3, #24]
 80007c2:	f107 0114 	add.w	r1, r7, #20
 80007c6:	2205      	movs	r2, #5
 80007c8:	20cb      	movs	r0, #203	; 0xcb
 80007ca:	4798      	blx	r3


	//Power Control B - Page 196
    buffer[0] = 0x00;
 80007cc:	2300      	movs	r3, #0
 80007ce:	753b      	strb	r3, [r7, #20]
    buffer[1] = 0xC1;
 80007d0:	23c1      	movs	r3, #193	; 0xc1
 80007d2:	757b      	strb	r3, [r7, #21]
    buffer[2] = 0x30;
 80007d4:	2330      	movs	r3, #48	; 0x30
 80007d6:	75bb      	strb	r3, [r7, #22]
    Dev->IO_Drv.write(ILI9341_PWRCONTROLB, buffer, 3);
 80007d8:	683b      	ldr	r3, [r7, #0]
 80007da:	699b      	ldr	r3, [r3, #24]
 80007dc:	f107 0114 	add.w	r1, r7, #20
 80007e0:	2203      	movs	r2, #3
 80007e2:	20cf      	movs	r0, #207	; 0xcf
 80007e4:	4798      	blx	r3

    //Driver Timing Control A - Page 197
    buffer[0] = 0x85;
 80007e6:	2385      	movs	r3, #133	; 0x85
 80007e8:	753b      	strb	r3, [r7, #20]
    buffer[1] = 0x00;
 80007ea:	2300      	movs	r3, #0
 80007ec:	757b      	strb	r3, [r7, #21]
    buffer[2] = 0x78;
 80007ee:	2378      	movs	r3, #120	; 0x78
 80007f0:	75bb      	strb	r3, [r7, #22]
    Dev->IO_Drv.write(ILI9341_TIMINGCONTROLA, buffer, 3);
 80007f2:	683b      	ldr	r3, [r7, #0]
 80007f4:	699b      	ldr	r3, [r3, #24]
 80007f6:	f107 0114 	add.w	r1, r7, #20
 80007fa:	2203      	movs	r2, #3
 80007fc:	20e8      	movs	r0, #232	; 0xe8
 80007fe:	4798      	blx	r3

    //Driver Timing Control B - Page 199
    buffer[0] = 0x00;
 8000800:	2300      	movs	r3, #0
 8000802:	753b      	strb	r3, [r7, #20]
    buffer[1] = 0x00;
 8000804:	2300      	movs	r3, #0
 8000806:	757b      	strb	r3, [r7, #21]
    Dev->IO_Drv.write(ILI9341_TIMINGCONTROLB, buffer, 2);
 8000808:	683b      	ldr	r3, [r7, #0]
 800080a:	699b      	ldr	r3, [r3, #24]
 800080c:	f107 0114 	add.w	r1, r7, #20
 8000810:	2202      	movs	r2, #2
 8000812:	20ea      	movs	r0, #234	; 0xea
 8000814:	4798      	blx	r3

    //Power on Sequence Control - Page 200
    buffer[0] = 0x64;
 8000816:	2364      	movs	r3, #100	; 0x64
 8000818:	753b      	strb	r3, [r7, #20]
    buffer[1] = 0x03;
 800081a:	2303      	movs	r3, #3
 800081c:	757b      	strb	r3, [r7, #21]
    buffer[2] = 0x12;
 800081e:	2312      	movs	r3, #18
 8000820:	75bb      	strb	r3, [r7, #22]
    buffer[3] = 0x81;
 8000822:	2381      	movs	r3, #129	; 0x81
 8000824:	75fb      	strb	r3, [r7, #23]
    Dev->IO_Drv.write(ILI9341_Pwr_on_sequence_control, buffer, 4);
 8000826:	683b      	ldr	r3, [r7, #0]
 8000828:	699b      	ldr	r3, [r3, #24]
 800082a:	f107 0114 	add.w	r1, r7, #20
 800082e:	2204      	movs	r2, #4
 8000830:	20ed      	movs	r0, #237	; 0xed
 8000832:	4798      	blx	r3

    //Pump Ratio Control - Page 202
    buffer[0] = 0x20;
 8000834:	2320      	movs	r3, #32
 8000836:	753b      	strb	r3, [r7, #20]
    Dev->IO_Drv.write(ILI9341_Pump_ratio_control, buffer, 1);
 8000838:	683b      	ldr	r3, [r7, #0]
 800083a:	699b      	ldr	r3, [r3, #24]
 800083c:	f107 0114 	add.w	r1, r7, #20
 8000840:	2201      	movs	r2, #1
 8000842:	20f7      	movs	r0, #247	; 0xf7
 8000844:	4798      	blx	r3

    //Power Control 1 - Page 178
    buffer[0] = 0x10;
 8000846:	2310      	movs	r3, #16
 8000848:	753b      	strb	r3, [r7, #20]
    Dev->IO_Drv.write(ILI9341_PWCTRL_1, buffer, 1);
 800084a:	683b      	ldr	r3, [r7, #0]
 800084c:	699b      	ldr	r3, [r3, #24]
 800084e:	f107 0114 	add.w	r1, r7, #20
 8000852:	2201      	movs	r2, #1
 8000854:	20c0      	movs	r0, #192	; 0xc0
 8000856:	4798      	blx	r3

    //Power Control 2 - Page 179
    buffer[0] = 0x10;
 8000858:	2310      	movs	r3, #16
 800085a:	753b      	strb	r3, [r7, #20]
    Dev->IO_Drv.write(ILI9341_PWCTRL_2, buffer, 1);
 800085c:	683b      	ldr	r3, [r7, #0]
 800085e:	699b      	ldr	r3, [r3, #24]
 8000860:	f107 0114 	add.w	r1, r7, #20
 8000864:	2201      	movs	r2, #1
 8000866:	20c1      	movs	r0, #193	; 0xc1
 8000868:	4798      	blx	r3

    //VCOM Control 1 - Page 180
    buffer[0] = 0x45;
 800086a:	2345      	movs	r3, #69	; 0x45
 800086c:	753b      	strb	r3, [r7, #20]
    buffer[1] = 0x15;
 800086e:	2315      	movs	r3, #21
 8000870:	757b      	strb	r3, [r7, #21]
    Dev->IO_Drv.write(ILI9341_VMCTRL1, buffer, 2);
 8000872:	683b      	ldr	r3, [r7, #0]
 8000874:	699b      	ldr	r3, [r3, #24]
 8000876:	f107 0114 	add.w	r1, r7, #20
 800087a:	2202      	movs	r2, #2
 800087c:	20c5      	movs	r0, #197	; 0xc5
 800087e:	4798      	blx	r3

    //VCOM Control 2 - Page 182
    buffer[0] = 0x90;
 8000880:	2390      	movs	r3, #144	; 0x90
 8000882:	753b      	strb	r3, [r7, #20]
    Dev->IO_Drv.write(ILI9341_VMCTRL2, buffer, 1);
 8000884:	683b      	ldr	r3, [r7, #0]
 8000886:	699b      	ldr	r3, [r3, #24]
 8000888:	f107 0114 	add.w	r1, r7, #20
 800088c:	2201      	movs	r2, #1
 800088e:	20c7      	movs	r0, #199	; 0xc7
 8000890:	4798      	blx	r3

    //Memory Access Control - Page 127
    buffer[0] = 0x30;
 8000892:	2330      	movs	r3, #48	; 0x30
 8000894:	753b      	strb	r3, [r7, #20]
    Dev->IO_Drv.write(ILI9341_MADCTL, buffer, 1);
 8000896:	683b      	ldr	r3, [r7, #0]
 8000898:	699b      	ldr	r3, [r3, #24]
 800089a:	f107 0114 	add.w	r1, r7, #20
 800089e:	2201      	movs	r2, #1
 80008a0:	2036      	movs	r0, #54	; 0x36
 80008a2:	4798      	blx	r3

    //Pixel Format Set - Page 134
    buffer[0] = 0x66;
 80008a4:	2366      	movs	r3, #102	; 0x66
 80008a6:	753b      	strb	r3, [r7, #20]
    Dev->IO_Drv.write(ILI9341_PIXSET, buffer, 1);
 80008a8:	683b      	ldr	r3, [r7, #0]
 80008aa:	699b      	ldr	r3, [r3, #24]
 80008ac:	f107 0114 	add.w	r1, r7, #20
 80008b0:	2201      	movs	r2, #1
 80008b2:	203a      	movs	r0, #58	; 0x3a
 80008b4:	4798      	blx	r3

    //Frame Rate Control (In Normal Mode/Full Colors) - Page 155
    buffer[0] = 0x00;
 80008b6:	2300      	movs	r3, #0
 80008b8:	753b      	strb	r3, [r7, #20]
    buffer[1] = 0x18;
 80008ba:	2318      	movs	r3, #24
 80008bc:	757b      	strb	r3, [r7, #21]
    Dev->IO_Drv.write(ILI9341_FRMCTR1, buffer, 2);
 80008be:	683b      	ldr	r3, [r7, #0]
 80008c0:	699b      	ldr	r3, [r3, #24]
 80008c2:	f107 0114 	add.w	r1, r7, #20
 80008c6:	2202      	movs	r2, #2
 80008c8:	20b1      	movs	r0, #177	; 0xb1
 80008ca:	4798      	blx	r3

    // Display Function Control - Page 164
    buffer[0] = 0x08;
 80008cc:	2308      	movs	r3, #8
 80008ce:	753b      	strb	r3, [r7, #20]
    buffer[1] = 0x82;
 80008d0:	2382      	movs	r3, #130	; 0x82
 80008d2:	757b      	strb	r3, [r7, #21]
    buffer[2] = 0x27;
 80008d4:	2327      	movs	r3, #39	; 0x27
 80008d6:	75bb      	strb	r3, [r7, #22]
    Dev->IO_Drv.write(ILI9341_DISCTRL, buffer, 3);
 80008d8:	683b      	ldr	r3, [r7, #0]
 80008da:	699b      	ldr	r3, [r3, #24]
 80008dc:	f107 0114 	add.w	r1, r7, #20
 80008e0:	2203      	movs	r2, #3
 80008e2:	20b6      	movs	r0, #182	; 0xb6
 80008e4:	4798      	blx	r3

    //Enable 3G - Page 201
    buffer[0] = 0x00;
 80008e6:	2300      	movs	r3, #0
 80008e8:	753b      	strb	r3, [r7, #20]
    Dev->IO_Drv.write(ILI9341_Enable_3G, buffer, 1);
 80008ea:	683b      	ldr	r3, [r7, #0]
 80008ec:	699b      	ldr	r3, [r3, #24]
 80008ee:	f107 0114 	add.w	r1, r7, #20
 80008f2:	2201      	movs	r2, #1
 80008f4:	20f2      	movs	r0, #242	; 0xf2
 80008f6:	4798      	blx	r3

    //Gamma Set - Page 107
    buffer[0] = 0x01;
 80008f8:	2301      	movs	r3, #1
 80008fa:	753b      	strb	r3, [r7, #20]
    Dev->IO_Drv.write(ILI9341_GAMSET, buffer, 1);
 80008fc:	683b      	ldr	r3, [r7, #0]
 80008fe:	699b      	ldr	r3, [r3, #24]
 8000900:	f107 0114 	add.w	r1, r7, #20
 8000904:	2201      	movs	r2, #1
 8000906:	2026      	movs	r0, #38	; 0x26
 8000908:	4798      	blx	r3

    //Positive Gamma Correction - Page 188
    buffer[0] = 0x0F;
 800090a:	230f      	movs	r3, #15
 800090c:	753b      	strb	r3, [r7, #20]
    buffer[1] = 0x29;
 800090e:	2329      	movs	r3, #41	; 0x29
 8000910:	757b      	strb	r3, [r7, #21]
    buffer[2] = 0x24;
 8000912:	2324      	movs	r3, #36	; 0x24
 8000914:	75bb      	strb	r3, [r7, #22]
    buffer[3] = 0x0C;
 8000916:	230c      	movs	r3, #12
 8000918:	75fb      	strb	r3, [r7, #23]
    buffer[4] = 0x0E;
 800091a:	230e      	movs	r3, #14
 800091c:	763b      	strb	r3, [r7, #24]
    buffer[5] = 0x09;
 800091e:	2309      	movs	r3, #9
 8000920:	767b      	strb	r3, [r7, #25]
    buffer[6] = 0x4E;
 8000922:	234e      	movs	r3, #78	; 0x4e
 8000924:	76bb      	strb	r3, [r7, #26]
    buffer[7] = 0x78;
 8000926:	2378      	movs	r3, #120	; 0x78
 8000928:	76fb      	strb	r3, [r7, #27]
    buffer[8] = 0x3C;
 800092a:	233c      	movs	r3, #60	; 0x3c
 800092c:	773b      	strb	r3, [r7, #28]
    buffer[9] = 0x09;
 800092e:	2309      	movs	r3, #9
 8000930:	777b      	strb	r3, [r7, #29]
    buffer[10] = 0x13;
 8000932:	2313      	movs	r3, #19
 8000934:	77bb      	strb	r3, [r7, #30]
    buffer[11] = 0x05;
 8000936:	2305      	movs	r3, #5
 8000938:	77fb      	strb	r3, [r7, #31]
    buffer[12] = 0x17;
 800093a:	2317      	movs	r3, #23
 800093c:	f887 3020 	strb.w	r3, [r7, #32]
    buffer[13] = 0x11;
 8000940:	2311      	movs	r3, #17
 8000942:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    buffer[14] = 0x00;
 8000946:	2300      	movs	r3, #0
 8000948:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    Dev->IO_Drv.write(ILI9341_PGAMCTRL, buffer, 15);
 800094c:	683b      	ldr	r3, [r7, #0]
 800094e:	699b      	ldr	r3, [r3, #24]
 8000950:	f107 0114 	add.w	r1, r7, #20
 8000954:	220f      	movs	r2, #15
 8000956:	20e0      	movs	r0, #224	; 0xe0
 8000958:	4798      	blx	r3

    //Negative Gamma Correction - Page 189
    buffer[0] = 0x00;
 800095a:	2300      	movs	r3, #0
 800095c:	753b      	strb	r3, [r7, #20]
    buffer[1] = 0x16;
 800095e:	2316      	movs	r3, #22
 8000960:	757b      	strb	r3, [r7, #21]
    buffer[2] = 0x1B;
 8000962:	231b      	movs	r3, #27
 8000964:	75bb      	strb	r3, [r7, #22]
    buffer[3] = 0x04;
 8000966:	2304      	movs	r3, #4
 8000968:	75fb      	strb	r3, [r7, #23]
    buffer[4] = 0x11;
 800096a:	2311      	movs	r3, #17
 800096c:	763b      	strb	r3, [r7, #24]
    buffer[5] = 0x07;
 800096e:	2307      	movs	r3, #7
 8000970:	767b      	strb	r3, [r7, #25]
    buffer[6] = 0x31;
 8000972:	2331      	movs	r3, #49	; 0x31
 8000974:	76bb      	strb	r3, [r7, #26]
    buffer[7] = 0x33;
 8000976:	2333      	movs	r3, #51	; 0x33
 8000978:	76fb      	strb	r3, [r7, #27]
    buffer[8] = 0x42;
 800097a:	2342      	movs	r3, #66	; 0x42
 800097c:	773b      	strb	r3, [r7, #28]
    buffer[9] = 0x05;
 800097e:	2305      	movs	r3, #5
 8000980:	777b      	strb	r3, [r7, #29]
    buffer[10] = 0x0C;
 8000982:	230c      	movs	r3, #12
 8000984:	77bb      	strb	r3, [r7, #30]
    buffer[11] = 0x0A;
 8000986:	230a      	movs	r3, #10
 8000988:	77fb      	strb	r3, [r7, #31]
    buffer[12] = 0x28;
 800098a:	2328      	movs	r3, #40	; 0x28
 800098c:	f887 3020 	strb.w	r3, [r7, #32]
    buffer[13] = 0x2F;
 8000990:	232f      	movs	r3, #47	; 0x2f
 8000992:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    buffer[14] = 0x0F;
 8000996:	230f      	movs	r3, #15
 8000998:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    Dev->IO_Drv.write(ILI9341_NGAMCTRL, buffer, 15);
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	699b      	ldr	r3, [r3, #24]
 80009a0:	f107 0114 	add.w	r1, r7, #20
 80009a4:	220f      	movs	r2, #15
 80009a6:	20e1      	movs	r0, #225	; 0xe1
 80009a8:	4798      	blx	r3

    //Sleep Out - Page 101
    Dev->IO_Drv.write(ILI9341_SLPOUT, buffer, 0);
 80009aa:	683b      	ldr	r3, [r7, #0]
 80009ac:	699b      	ldr	r3, [r3, #24]
 80009ae:	f107 0114 	add.w	r1, r7, #20
 80009b2:	2200      	movs	r2, #0
 80009b4:	2011      	movs	r0, #17
 80009b6:	4798      	blx	r3
    Dev->IO_Drv.ioctl(ILI9341_Delay150);
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	6a1b      	ldr	r3, [r3, #32]
 80009bc:	2000      	movs	r0, #0
 80009be:	4798      	blx	r3


    //Display ON - Page 109
    Dev->IO_Drv.write(ILI9341_DISPON, buffer, 0);
 80009c0:	683b      	ldr	r3, [r7, #0]
 80009c2:	699b      	ldr	r3, [r3, #24]
 80009c4:	f107 0114 	add.w	r1, r7, #20
 80009c8:	2200      	movs	r2, #0
 80009ca:	2029      	movs	r0, #41	; 0x29
 80009cc:	4798      	blx	r3

    Dev->IO_Drv.write(ILI9341_MADCTL, &Settings.Orientation,1);
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	699b      	ldr	r3, [r3, #24]
 80009d2:	1d39      	adds	r1, r7, #4
 80009d4:	2201      	movs	r2, #1
 80009d6:	2036      	movs	r0, #54	; 0x36
 80009d8:	4798      	blx	r3
}
 80009da:	bf00      	nop
 80009dc:	3728      	adds	r7, #40	; 0x28
 80009de:	46bd      	mov	sp, r7
 80009e0:	bdb0      	pop	{r4, r5, r7, pc}

080009e2 <ILI9341_FillSceen>:
void ILI9341_DrawPixel(ILI9341_Handle_t *Dev, ILI9341_Color_t Color, ILI9341_Coordinate_t Position){
    ILI9341_SetCoordinates(Dev,Position,Position);
    Dev->IO_Drv.write(ILI9341_RAMWR,(uint8_t*)&Color,3);
}

void ILI9341_FillSceen(ILI9341_Handle_t *Dev, ILI9341_Color_t Color){
 80009e2:	b580      	push	{r7, lr}
 80009e4:	b084      	sub	sp, #16
 80009e6:	af00      	add	r7, sp, #0
 80009e8:	6078      	str	r0, [r7, #4]
 80009ea:	6039      	str	r1, [r7, #0]
    ILI9341_Coordinate_t CoordinateStart = {.X = 0, .Y = 0};
 80009ec:	2300      	movs	r3, #0
 80009ee:	81bb      	strh	r3, [r7, #12]
 80009f0:	2300      	movs	r3, #0
 80009f2:	81fb      	strh	r3, [r7, #14]
    ILI9341_Coordinate_t CoordinateEnd = {.X = Dev->ScreenWidth-1, .Y = Dev->ScreenHeight-1};
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	685b      	ldr	r3, [r3, #4]
 80009f8:	b29b      	uxth	r3, r3
 80009fa:	3b01      	subs	r3, #1
 80009fc:	b29b      	uxth	r3, r3
 80009fe:	b21b      	sxth	r3, r3
 8000a00:	813b      	strh	r3, [r7, #8]
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	689b      	ldr	r3, [r3, #8]
 8000a06:	b29b      	uxth	r3, r3
 8000a08:	3b01      	subs	r3, #1
 8000a0a:	b29b      	uxth	r3, r3
 8000a0c:	b21b      	sxth	r3, r3
 8000a0e:	817b      	strh	r3, [r7, #10]
    ILI9341_SetCoordinates(Dev, CoordinateStart, CoordinateEnd);
 8000a10:	68ba      	ldr	r2, [r7, #8]
 8000a12:	68f9      	ldr	r1, [r7, #12]
 8000a14:	6878      	ldr	r0, [r7, #4]
 8000a16:	f000 f811 	bl	8000a3c <ILI9341_SetCoordinates>
    Dev->IO_Drv.write(ILI9341_RAMWR,(uint8_t*)&Color, 0);
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	699b      	ldr	r3, [r3, #24]
 8000a1e:	4639      	mov	r1, r7
 8000a20:	2200      	movs	r2, #0
 8000a22:	202c      	movs	r0, #44	; 0x2c
 8000a24:	4798      	blx	r3
    Dev->IO_Drv.write(ILI9341_NOCOMMAND, (uint8_t*)&Color, TOTAL_SCREEN_BYTES);
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	699b      	ldr	r3, [r3, #24]
 8000a2a:	4639      	mov	r1, r7
 8000a2c:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8000a30:	20ff      	movs	r0, #255	; 0xff
 8000a32:	4798      	blx	r3
}
 8000a34:	bf00      	nop
 8000a36:	3710      	adds	r7, #16
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}

08000a3c <ILI9341_SetCoordinates>:
    uint32_t TotalBytes = width*height*3;
    Dev->IO_Drv.write(ILI9341_RAMWR,(uint8_t*)&Color,0);
    Dev->IO_Drv.write(ILI9341_NOCOMMAND, (uint8_t*)&Color, TotalBytes);
}

static void ILI9341_SetCoordinates(ILI9341_Handle_t *Dev, ILI9341_Coordinate_t StartCorner, ILI9341_Coordinate_t EndCorner){
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b086      	sub	sp, #24
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	60f8      	str	r0, [r7, #12]
 8000a44:	60b9      	str	r1, [r7, #8]
 8000a46:	607a      	str	r2, [r7, #4]
    ILI9341_DrawBounds_t Coordinate = {.S_MSB = StartCorner.X >> 8, .S_LSB = StartCorner.X, .E_MSB = EndCorner.X >> 8, .E_LSB = EndCorner.X};
 8000a48:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000a4c:	121b      	asrs	r3, r3, #8
 8000a4e:	b21b      	sxth	r3, r3
 8000a50:	b2db      	uxtb	r3, r3
 8000a52:	753b      	strb	r3, [r7, #20]
 8000a54:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000a58:	b2db      	uxtb	r3, r3
 8000a5a:	757b      	strb	r3, [r7, #21]
 8000a5c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000a60:	121b      	asrs	r3, r3, #8
 8000a62:	b21b      	sxth	r3, r3
 8000a64:	b2db      	uxtb	r3, r3
 8000a66:	75bb      	strb	r3, [r7, #22]
 8000a68:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000a6c:	b2db      	uxtb	r3, r3
 8000a6e:	75fb      	strb	r3, [r7, #23]
    Dev->IO_Drv.write(ILI9341_CASET,(uint8_t*)&Coordinate,4);
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	699b      	ldr	r3, [r3, #24]
 8000a74:	f107 0114 	add.w	r1, r7, #20
 8000a78:	2204      	movs	r2, #4
 8000a7a:	202a      	movs	r0, #42	; 0x2a
 8000a7c:	4798      	blx	r3
    Coordinate.S_MSB = StartCorner.Y >> 8;
 8000a7e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000a82:	121b      	asrs	r3, r3, #8
 8000a84:	b21b      	sxth	r3, r3
 8000a86:	b2db      	uxtb	r3, r3
 8000a88:	753b      	strb	r3, [r7, #20]
    Coordinate.S_LSB = StartCorner.Y;
 8000a8a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000a8e:	b2db      	uxtb	r3, r3
 8000a90:	757b      	strb	r3, [r7, #21]
    Coordinate.E_MSB = EndCorner.Y >> 8;
 8000a92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a96:	121b      	asrs	r3, r3, #8
 8000a98:	b21b      	sxth	r3, r3
 8000a9a:	b2db      	uxtb	r3, r3
 8000a9c:	75bb      	strb	r3, [r7, #22]
    Coordinate.E_LSB = EndCorner.Y;
 8000a9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000aa2:	b2db      	uxtb	r3, r3
 8000aa4:	75fb      	strb	r3, [r7, #23]
    Dev->IO_Drv.write(ILI9341_PASET,(uint8_t*)&Coordinate,4);
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	699b      	ldr	r3, [r3, #24]
 8000aaa:	f107 0114 	add.w	r1, r7, #20
 8000aae:	2204      	movs	r2, #4
 8000ab0:	202b      	movs	r0, #43	; 0x2b
 8000ab2:	4798      	blx	r3
}
 8000ab4:	bf00      	nop
 8000ab6:	3718      	adds	r7, #24
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}

08000abc <ILI9341_DisplayImage>:
        return DimensionsInvalid;
    }
    return DimensionsValid;
}

void ILI9341_DisplayImage(ILI9341_Handle_t *Dev, const ILI9341_Image_t Image){
 8000abc:	b084      	sub	sp, #16
 8000abe:	b580      	push	{r7, lr}
 8000ac0:	b084      	sub	sp, #16
 8000ac2:	af00      	add	r7, sp, #0
 8000ac4:	6078      	str	r0, [r7, #4]
 8000ac6:	f107 001c 	add.w	r0, r7, #28
 8000aca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    ILI9341_Coordinate_t CoordinateStart = {.X = Dev->Cursor.X, .Y = Dev->Cursor.Y};
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8000ad4:	81bb      	strh	r3, [r7, #12]
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000adc:	81fb      	strh	r3, [r7, #14]
    ILI9341_Coordinate_t CoordinateEnd = {.X = CoordinateStart.X + Image.Width - 1, .Y = CoordinateStart.Y + Image.Height - 1};
 8000ade:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000ae2:	b29a      	uxth	r2, r3
 8000ae4:	69fb      	ldr	r3, [r7, #28]
 8000ae6:	b29b      	uxth	r3, r3
 8000ae8:	4413      	add	r3, r2
 8000aea:	b29b      	uxth	r3, r3
 8000aec:	3b01      	subs	r3, #1
 8000aee:	b29b      	uxth	r3, r3
 8000af0:	b21b      	sxth	r3, r3
 8000af2:	813b      	strh	r3, [r7, #8]
 8000af4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000af8:	b29a      	uxth	r2, r3
 8000afa:	6a3b      	ldr	r3, [r7, #32]
 8000afc:	b29b      	uxth	r3, r3
 8000afe:	4413      	add	r3, r2
 8000b00:	b29b      	uxth	r3, r3
 8000b02:	3b01      	subs	r3, #1
 8000b04:	b29b      	uxth	r3, r3
 8000b06:	b21b      	sxth	r3, r3
 8000b08:	817b      	strh	r3, [r7, #10]
    ILI9341_SetCoordinates(Dev,CoordinateStart,CoordinateEnd);
 8000b0a:	68ba      	ldr	r2, [r7, #8]
 8000b0c:	68f9      	ldr	r1, [r7, #12]
 8000b0e:	6878      	ldr	r0, [r7, #4]
 8000b10:	f7ff ff94 	bl	8000a3c <ILI9341_SetCoordinates>
    //Dev->IO_Drv.write(ILI9341_RAMWR,(uint8_t*)&dummy,0);
    Dev->IO_Drv.write(ILI9341_RAMWR, (uint8_t*)Image.ImageData, Image.ImageLength);
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	699b      	ldr	r3, [r3, #24]
 8000b18:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000b1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b1c:	202c      	movs	r0, #44	; 0x2c
 8000b1e:	4798      	blx	r3
}
 8000b20:	bf00      	nop
 8000b22:	3710      	adds	r7, #16
 8000b24:	46bd      	mov	sp, r7
 8000b26:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000b2a:	b004      	add	sp, #16
 8000b2c:	4770      	bx	lr

08000b2e <ILI9341_IO_Init>:
#include "gpio.h"

static void ILI9341_CSState(uint8_t state);
static void ILI9341_DCRSState(uint8_t state);

static void ILI9341_IO_Init(void){
 8000b2e:	b580      	push	{r7, lr}
 8000b30:	af00      	add	r7, sp, #0
  ILI9341_GPIO_Init();
 8000b32:	f001 fb01 	bl	8002138 <ILI9341_GPIO_Init>
  ILI9341_SPI_Init();
 8000b36:	f001 ff5d 	bl	80029f4 <ILI9341_SPI_Init>
}
 8000b3a:	bf00      	nop
 8000b3c:	bd80      	pop	{r7, pc}

08000b3e <ILI9341_IO_DeInit>:

static void ILI9341_IO_DeInit(void){
 8000b3e:	b580      	push	{r7, lr}
 8000b40:	af00      	add	r7, sp, #0
	ILI9341_GPIO_DeInit();
 8000b42:	f001 fb3b 	bl	80021bc <ILI9341_GPIO_DeInit>
}
 8000b46:	bf00      	nop
 8000b48:	bd80      	pop	{r7, pc}

08000b4a <ILI9341_IO_ioctl>:

static ILI9341_Status_t ILI9341_IO_ioctl(ILI9341_Cmd_t Command){
 8000b4a:	b580      	push	{r7, lr}
 8000b4c:	b082      	sub	sp, #8
 8000b4e:	af00      	add	r7, sp, #0
 8000b50:	4603      	mov	r3, r0
 8000b52:	71fb      	strb	r3, [r7, #7]
    switch(Command){
 8000b54:	79fb      	ldrb	r3, [r7, #7]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d002      	beq.n	8000b60 <ILI9341_IO_ioctl+0x16>
 8000b5a:	2b01      	cmp	r3, #1
 8000b5c:	d005      	beq.n	8000b6a <ILI9341_IO_ioctl+0x20>
 8000b5e:	e00a      	b.n	8000b76 <ILI9341_IO_ioctl+0x2c>
    case(ILI9341_Delay150):
    		HAL_Delay(150);
 8000b60:	2096      	movs	r0, #150	; 0x96
 8000b62:	f002 fed7 	bl	8003914 <HAL_Delay>
            return ILI9341_Ok;
 8000b66:	2300      	movs	r3, #0
 8000b68:	e006      	b.n	8000b78 <ILI9341_IO_ioctl+0x2e>
    case(ILI9341_Delay1000):
    		HAL_Delay(1000);
 8000b6a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b6e:	f002 fed1 	bl	8003914 <HAL_Delay>
            return ILI9341_Ok;
 8000b72:	2300      	movs	r3, #0
 8000b74:	e000      	b.n	8000b78 <ILI9341_IO_ioctl+0x2e>
    default:
    	return ILI9341_Ok;
 8000b76:	2300      	movs	r3, #0
    }
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	3708      	adds	r7, #8
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}

08000b80 <ILI9341_IO_WriteReg>:

static ILI9341_Status_t ILI9341_IO_WriteReg(uint8_t reg, uint8_t* pdata, uint32_t length){
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b086      	sub	sp, #24
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	4603      	mov	r3, r0
 8000b88:	60b9      	str	r1, [r7, #8]
 8000b8a:	607a      	str	r2, [r7, #4]
 8000b8c:	73fb      	strb	r3, [r7, #15]
	ILI9341_CSState(GPIO_PIN_RESET);
 8000b8e:	2000      	movs	r0, #0
 8000b90:	f000 f8ae 	bl	8000cf0 <ILI9341_CSState>
	if(reg != 0xFF){
 8000b94:	7bfb      	ldrb	r3, [r7, #15]
 8000b96:	2bff      	cmp	r3, #255	; 0xff
 8000b98:	d00f      	beq.n	8000bba <ILI9341_IO_WriteReg+0x3a>
		ILI9341_DCRSState(GPIO_PIN_RESET);
 8000b9a:	2000      	movs	r0, #0
 8000b9c:	f000 f8c2 	bl	8000d24 <ILI9341_DCRSState>
		if(HAL_SPI_Transmit(&hspi1, &reg, 1, 1000) != HAL_OK){
 8000ba0:	f107 010f 	add.w	r1, r7, #15
 8000ba4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ba8:	2201      	movs	r2, #1
 8000baa:	4834      	ldr	r0, [pc, #208]	; (8000c7c <ILI9341_IO_WriteReg+0xfc>)
 8000bac:	f007 fa75 	bl	800809a <HAL_SPI_Transmit>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <ILI9341_IO_WriteReg+0x3a>
			return ILI9341_Err;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	e05c      	b.n	8000c74 <ILI9341_IO_WriteReg+0xf4>
		}
	}

	ILI9341_DCRSState(GPIO_PIN_SET);
 8000bba:	2001      	movs	r0, #1
 8000bbc:	f000 f8b2 	bl	8000d24 <ILI9341_DCRSState>
	if(length != 0 && reg != 0xFF){
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d00f      	beq.n	8000be6 <ILI9341_IO_WriteReg+0x66>
 8000bc6:	7bfb      	ldrb	r3, [r7, #15]
 8000bc8:	2bff      	cmp	r3, #255	; 0xff
 8000bca:	d00c      	beq.n	8000be6 <ILI9341_IO_WriteReg+0x66>
		if(HAL_SPI_Transmit(&hspi1, pdata, length, 1000) != HAL_OK){
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	b29a      	uxth	r2, r3
 8000bd0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bd4:	68b9      	ldr	r1, [r7, #8]
 8000bd6:	4829      	ldr	r0, [pc, #164]	; (8000c7c <ILI9341_IO_WriteReg+0xfc>)
 8000bd8:	f007 fa5f 	bl	800809a <HAL_SPI_Transmit>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d047      	beq.n	8000c72 <ILI9341_IO_WriteReg+0xf2>
			return ILI9341_Err;
 8000be2:	2301      	movs	r3, #1
 8000be4:	e046      	b.n	8000c74 <ILI9341_IO_WriteReg+0xf4>
		}
	}else if(length != 0 && reg == 0xFF){
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d03f      	beq.n	8000c6c <ILI9341_IO_WriteReg+0xec>
 8000bec:	7bfb      	ldrb	r3, [r7, #15]
 8000bee:	2bff      	cmp	r3, #255	; 0xff
 8000bf0:	d13c      	bne.n	8000c6c <ILI9341_IO_WriteReg+0xec>
        for(uint32_t i = 0; i < length; i = i + 3){
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	617b      	str	r3, [r7, #20]
 8000bf6:	e034      	b.n	8000c62 <ILI9341_IO_WriteReg+0xe2>
    		if(HAL_SPI_Transmit(&hspi1, pdata, 1, 1000) != HAL_OK){
 8000bf8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	68b9      	ldr	r1, [r7, #8]
 8000c00:	481e      	ldr	r0, [pc, #120]	; (8000c7c <ILI9341_IO_WriteReg+0xfc>)
 8000c02:	f007 fa4a 	bl	800809a <HAL_SPI_Transmit>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <ILI9341_IO_WriteReg+0x90>
    			return ILI9341_Err;
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	e031      	b.n	8000c74 <ILI9341_IO_WriteReg+0xf4>
    		}

    		if(HAL_SPI_Transmit(&hspi1, pdata + 1, 1, 1000) != HAL_OK){
 8000c10:	68bb      	ldr	r3, [r7, #8]
 8000c12:	1c59      	adds	r1, r3, #1
 8000c14:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c18:	2201      	movs	r2, #1
 8000c1a:	4818      	ldr	r0, [pc, #96]	; (8000c7c <ILI9341_IO_WriteReg+0xfc>)
 8000c1c:	f007 fa3d 	bl	800809a <HAL_SPI_Transmit>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <ILI9341_IO_WriteReg+0xaa>
    			return ILI9341_Err;
 8000c26:	2301      	movs	r3, #1
 8000c28:	e024      	b.n	8000c74 <ILI9341_IO_WriteReg+0xf4>
    		}

    		if(HAL_SPI_Transmit(&hspi1, pdata + 2, 1, 1000) != HAL_OK){
 8000c2a:	68bb      	ldr	r3, [r7, #8]
 8000c2c:	1c99      	adds	r1, r3, #2
 8000c2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c32:	2201      	movs	r2, #1
 8000c34:	4811      	ldr	r0, [pc, #68]	; (8000c7c <ILI9341_IO_WriteReg+0xfc>)
 8000c36:	f007 fa30 	bl	800809a <HAL_SPI_Transmit>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <ILI9341_IO_WriteReg+0xc4>
    			return ILI9341_Err;
 8000c40:	2301      	movs	r3, #1
 8000c42:	e017      	b.n	8000c74 <ILI9341_IO_WriteReg+0xf4>
    		}
    		if(i == length - 10000){
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	f5a3 531c 	sub.w	r3, r3, #9984	; 0x2700
 8000c4a:	3b10      	subs	r3, #16
 8000c4c:	697a      	ldr	r2, [r7, #20]
 8000c4e:	429a      	cmp	r2, r3
 8000c50:	d104      	bne.n	8000c5c <ILI9341_IO_WriteReg+0xdc>
    			uint8_t j =0;
 8000c52:	2300      	movs	r3, #0
 8000c54:	74fb      	strb	r3, [r7, #19]
    			j++;
 8000c56:	7cfb      	ldrb	r3, [r7, #19]
 8000c58:	3301      	adds	r3, #1
 8000c5a:	74fb      	strb	r3, [r7, #19]
        for(uint32_t i = 0; i < length; i = i + 3){
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	3303      	adds	r3, #3
 8000c60:	617b      	str	r3, [r7, #20]
 8000c62:	697a      	ldr	r2, [r7, #20]
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	429a      	cmp	r2, r3
 8000c68:	d3c6      	bcc.n	8000bf8 <ILI9341_IO_WriteReg+0x78>
 8000c6a:	e002      	b.n	8000c72 <ILI9341_IO_WriteReg+0xf2>
    		}
        }
	}else {
		ILI9341_CSState(GPIO_PIN_SET);
 8000c6c:	2001      	movs	r0, #1
 8000c6e:	f000 f83f 	bl	8000cf0 <ILI9341_CSState>
	}
	return ILI9341_Ok;
 8000c72:	2300      	movs	r3, #0
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	3718      	adds	r7, #24
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	20000ec8 	.word	0x20000ec8

08000c80 <ILI9341_IO_ReadReg>:

static ILI9341_Status_t ILI9341_IO_ReadReg(uint8_t reg, uint8_t* pdata, uint32_t length){
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b084      	sub	sp, #16
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	4603      	mov	r3, r0
 8000c88:	60b9      	str	r1, [r7, #8]
 8000c8a:	607a      	str	r2, [r7, #4]
 8000c8c:	73fb      	strb	r3, [r7, #15]
	ILI9341_CSState(GPIO_PIN_RESET);
 8000c8e:	2000      	movs	r0, #0
 8000c90:	f000 f82e 	bl	8000cf0 <ILI9341_CSState>
	ILI9341_DCRSState(GPIO_PIN_RESET);
 8000c94:	2000      	movs	r0, #0
 8000c96:	f000 f845 	bl	8000d24 <ILI9341_DCRSState>
	if(HAL_SPI_Transmit(&hspi1, &reg, 1, 1000) != HAL_OK){
 8000c9a:	f107 010f 	add.w	r1, r7, #15
 8000c9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	4811      	ldr	r0, [pc, #68]	; (8000cec <ILI9341_IO_ReadReg+0x6c>)
 8000ca6:	f007 f9f8 	bl	800809a <HAL_SPI_Transmit>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d001      	beq.n	8000cb4 <ILI9341_IO_ReadReg+0x34>
        return ILI9341_Err;
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	e016      	b.n	8000ce2 <ILI9341_IO_ReadReg+0x62>
	}
	ILI9341_DCRSState(GPIO_PIN_SET);
 8000cb4:	2001      	movs	r0, #1
 8000cb6:	f000 f835 	bl	8000d24 <ILI9341_DCRSState>

	if(length != 0){
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d00c      	beq.n	8000cda <ILI9341_IO_ReadReg+0x5a>
		if(HAL_SPI_Receive(&hspi1, pdata, length, 1000) != HAL_OK){
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	b29a      	uxth	r2, r3
 8000cc4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cc8:	68b9      	ldr	r1, [r7, #8]
 8000cca:	4808      	ldr	r0, [pc, #32]	; (8000cec <ILI9341_IO_ReadReg+0x6c>)
 8000ccc:	f007 fb21 	bl	8008312 <HAL_SPI_Receive>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <ILI9341_IO_ReadReg+0x5a>
			return ILI9341_Err;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	e003      	b.n	8000ce2 <ILI9341_IO_ReadReg+0x62>
		}
	}
	ILI9341_CSState(GPIO_PIN_SET);
 8000cda:	2001      	movs	r0, #1
 8000cdc:	f000 f808 	bl	8000cf0 <ILI9341_CSState>
	return ILI9341_Ok;
 8000ce0:	2300      	movs	r3, #0
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	3710      	adds	r7, #16
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	20000ec8 	.word	0x20000ec8

08000cf0 <ILI9341_CSState>:

static void ILI9341_CSState(uint8_t state){
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	71fb      	strb	r3, [r7, #7]
  if(state){
 8000cfa:	79fb      	ldrb	r3, [r7, #7]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d005      	beq.n	8000d0c <ILI9341_CSState+0x1c>
    HAL_GPIO_WritePin(SPI1_CSN_GPIO_Port, SPI1_CSN_Pin, GPIO_PIN_SET);
 8000d00:	2201      	movs	r2, #1
 8000d02:	2101      	movs	r1, #1
 8000d04:	4806      	ldr	r0, [pc, #24]	; (8000d20 <ILI9341_CSState+0x30>)
 8000d06:	f004 fa6b 	bl	80051e0 <HAL_GPIO_WritePin>
  } else {
    HAL_GPIO_WritePin(SPI1_CSN_GPIO_Port, SPI1_CSN_Pin, GPIO_PIN_RESET);
  }
}
 8000d0a:	e004      	b.n	8000d16 <ILI9341_CSState+0x26>
    HAL_GPIO_WritePin(SPI1_CSN_GPIO_Port, SPI1_CSN_Pin, GPIO_PIN_RESET);
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	2101      	movs	r1, #1
 8000d10:	4803      	ldr	r0, [pc, #12]	; (8000d20 <ILI9341_CSState+0x30>)
 8000d12:	f004 fa65 	bl	80051e0 <HAL_GPIO_WritePin>
}
 8000d16:	bf00      	nop
 8000d18:	3708      	adds	r7, #8
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	40020400 	.word	0x40020400

08000d24 <ILI9341_DCRSState>:

static void ILI9341_DCRSState(uint8_t state){
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	71fb      	strb	r3, [r7, #7]
  if(state){
 8000d2e:	79fb      	ldrb	r3, [r7, #7]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d005      	beq.n	8000d40 <ILI9341_DCRSState+0x1c>
    HAL_GPIO_WritePin(DCRS_GPIO_Port, DCRS_Pin, GPIO_PIN_SET);
 8000d34:	2201      	movs	r2, #1
 8000d36:	2102      	movs	r1, #2
 8000d38:	4806      	ldr	r0, [pc, #24]	; (8000d54 <ILI9341_DCRSState+0x30>)
 8000d3a:	f004 fa51 	bl	80051e0 <HAL_GPIO_WritePin>
  } else {
    HAL_GPIO_WritePin(DCRS_GPIO_Port, DCRS_Pin, GPIO_PIN_RESET);
  }
}
 8000d3e:	e004      	b.n	8000d4a <ILI9341_DCRSState+0x26>
    HAL_GPIO_WritePin(DCRS_GPIO_Port, DCRS_Pin, GPIO_PIN_RESET);
 8000d40:	2200      	movs	r2, #0
 8000d42:	2102      	movs	r1, #2
 8000d44:	4803      	ldr	r0, [pc, #12]	; (8000d54 <ILI9341_DCRSState+0x30>)
 8000d46:	f004 fa4b 	bl	80051e0 <HAL_GPIO_WritePin>
}
 8000d4a:	bf00      	nop
 8000d4c:	3708      	adds	r7, #8
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	40020400 	.word	0x40020400

08000d58 <MCP23017_Init>:
 *@Params: Init Struct with desired settings, Device handle to initialize, a low level IO Driver struct
 *@Return: None
 *@Precondition: Init Struct should have desired settings
 *@Postcondition: Device struct will be intialized and ready to use
 **************************************//**************************************/
void MCP23017_Init(MCP23017_Init_Struct_t Settings, MCP23017_Handle_t *Dev, MCP23017_IO_Drv_t IO_Driver){
 8000d58:	b590      	push	{r4, r7, lr}
 8000d5a:	b085      	sub	sp, #20
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	463c      	mov	r4, r7
 8000d60:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	Dev->IO_Driver.Init = IO_Driver.Init;
 8000d64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d66:	6a3b      	ldr	r3, [r7, #32]
 8000d68:	605a      	str	r2, [r3, #4]
	Dev->IO_Driver.DeInit = IO_Driver.DeInit;
 8000d6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000d6c:	6a3b      	ldr	r3, [r7, #32]
 8000d6e:	609a      	str	r2, [r3, #8]
	Dev->IO_Driver.ReadReg = IO_Driver.ReadReg;
 8000d70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000d72:	6a3b      	ldr	r3, [r7, #32]
 8000d74:	611a      	str	r2, [r3, #16]
	Dev->IO_Driver.WriteReg = IO_Driver.WriteReg;
 8000d76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000d78:	6a3b      	ldr	r3, [r7, #32]
 8000d7a:	60da      	str	r2, [r3, #12]
	Dev->IO_Driver.ioctl = IO_Driver.ioctl;
 8000d7c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000d7e:	6a3b      	ldr	r3, [r7, #32]
 8000d80:	615a      	str	r2, [r3, #20]
	Dev->IO_Driver.Init();
 8000d82:	6a3b      	ldr	r3, [r7, #32]
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	4798      	blx	r3

	if(Dev->IO_Driver.WriteReg(MCP23017_IOCON, (uint8_t*)&Settings.Config,1) != MCP23017_Ok){
 8000d88:	6a3b      	ldr	r3, [r7, #32]
 8000d8a:	68db      	ldr	r3, [r3, #12]
 8000d8c:	200a      	movs	r0, #10
 8000d8e:	463a      	mov	r2, r7
 8000d90:	f102 010c 	add.w	r1, r2, #12
 8000d94:	2201      	movs	r2, #1
 8000d96:	4798      	blx	r3
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d003      	beq.n	8000da6 <MCP23017_Init+0x4e>
		_log(log_mcp23017, "Initialization: IOCON Write Failed");
 8000d9e:	492e      	ldr	r1, [pc, #184]	; (8000e58 <MCP23017_Init+0x100>)
 8000da0:	2005      	movs	r0, #5
 8000da2:	f001 fb77 	bl	8002494 <_log>
	}

	if(Dev->IO_Driver.WriteReg(MCP23017_IODIRA, (uint8_t*)&Settings.Mode,2) != MCP23017_Ok){
 8000da6:	6a3b      	ldr	r3, [r7, #32]
 8000da8:	68db      	ldr	r3, [r3, #12]
 8000daa:	2000      	movs	r0, #0
 8000dac:	4639      	mov	r1, r7
 8000dae:	2202      	movs	r2, #2
 8000db0:	4798      	blx	r3
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d003      	beq.n	8000dc0 <MCP23017_Init+0x68>
		_log(log_mcp23017, "Initialization: IODIR Write Failed");
 8000db8:	4928      	ldr	r1, [pc, #160]	; (8000e5c <MCP23017_Init+0x104>)
 8000dba:	2005      	movs	r0, #5
 8000dbc:	f001 fb6a 	bl	8002494 <_log>
	}

	if(Dev->IO_Driver.WriteReg(MCP23017_IPOLA, (uint8_t*)&Settings.Polarity,2) != MCP23017_Ok){
 8000dc0:	6a3b      	ldr	r3, [r7, #32]
 8000dc2:	68db      	ldr	r3, [r3, #12]
 8000dc4:	2002      	movs	r0, #2
 8000dc6:	463a      	mov	r2, r7
 8000dc8:	1c91      	adds	r1, r2, #2
 8000dca:	2202      	movs	r2, #2
 8000dcc:	4798      	blx	r3
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d003      	beq.n	8000ddc <MCP23017_Init+0x84>
		_log(log_mcp23017, "Initialization: IPOL Write Failed");
 8000dd4:	4922      	ldr	r1, [pc, #136]	; (8000e60 <MCP23017_Init+0x108>)
 8000dd6:	2005      	movs	r0, #5
 8000dd8:	f001 fb5c 	bl	8002494 <_log>
	}

	if(Dev->IO_Driver.WriteReg(MCP23017_GPINTENA, (uint8_t*)&Settings.IntEnable,2) != MCP23017_Ok){
 8000ddc:	6a3b      	ldr	r3, [r7, #32]
 8000dde:	68db      	ldr	r3, [r3, #12]
 8000de0:	2004      	movs	r0, #4
 8000de2:	463a      	mov	r2, r7
 8000de4:	1d11      	adds	r1, r2, #4
 8000de6:	2202      	movs	r2, #2
 8000de8:	4798      	blx	r3
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d003      	beq.n	8000df8 <MCP23017_Init+0xa0>
		_log(log_mcp23017, "Initialization: INTENA Write Failed");
 8000df0:	491c      	ldr	r1, [pc, #112]	; (8000e64 <MCP23017_Init+0x10c>)
 8000df2:	2005      	movs	r0, #5
 8000df4:	f001 fb4e 	bl	8002494 <_log>
	}

	if(Dev->IO_Driver.WriteReg(MCP23017_DEFVALA, (uint8_t*)&Settings.DefaultValue,2) != MCP23017_Ok){
 8000df8:	6a3b      	ldr	r3, [r7, #32]
 8000dfa:	68db      	ldr	r3, [r3, #12]
 8000dfc:	2006      	movs	r0, #6
 8000dfe:	463a      	mov	r2, r7
 8000e00:	1d91      	adds	r1, r2, #6
 8000e02:	2202      	movs	r2, #2
 8000e04:	4798      	blx	r3
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d003      	beq.n	8000e14 <MCP23017_Init+0xbc>
		_log(log_mcp23017, "Initialization: DEFVAL Write Failed");
 8000e0c:	4916      	ldr	r1, [pc, #88]	; (8000e68 <MCP23017_Init+0x110>)
 8000e0e:	2005      	movs	r0, #5
 8000e10:	f001 fb40 	bl	8002494 <_log>
	}

	if(Dev->IO_Driver.WriteReg(MCP23017_INTCONA, (uint8_t*)&Settings.IRQControl,2) != MCP23017_Ok){
 8000e14:	6a3b      	ldr	r3, [r7, #32]
 8000e16:	68db      	ldr	r3, [r3, #12]
 8000e18:	2008      	movs	r0, #8
 8000e1a:	463a      	mov	r2, r7
 8000e1c:	f102 0108 	add.w	r1, r2, #8
 8000e20:	2202      	movs	r2, #2
 8000e22:	4798      	blx	r3
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d003      	beq.n	8000e32 <MCP23017_Init+0xda>
		_log(log_mcp23017, "Initialization: INTCON Write Failed");
 8000e2a:	4910      	ldr	r1, [pc, #64]	; (8000e6c <MCP23017_Init+0x114>)
 8000e2c:	2005      	movs	r0, #5
 8000e2e:	f001 fb31 	bl	8002494 <_log>
	}

	if(Dev->IO_Driver.WriteReg(MCP23017_GPPUA, (uint8_t*)&Settings.PullUp,2) != MCP23017_Ok){
 8000e32:	6a3b      	ldr	r3, [r7, #32]
 8000e34:	68db      	ldr	r3, [r3, #12]
 8000e36:	200c      	movs	r0, #12
 8000e38:	463a      	mov	r2, r7
 8000e3a:	f102 010a 	add.w	r1, r2, #10
 8000e3e:	2202      	movs	r2, #2
 8000e40:	4798      	blx	r3
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d003      	beq.n	8000e50 <MCP23017_Init+0xf8>
		_log(log_mcp23017, "Initialization: GPPU Write Failed");
 8000e48:	4909      	ldr	r1, [pc, #36]	; (8000e70 <MCP23017_Init+0x118>)
 8000e4a:	2005      	movs	r0, #5
 8000e4c:	f001 fb22 	bl	8002494 <_log>
	}

}
 8000e50:	bf00      	nop
 8000e52:	3714      	adds	r7, #20
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd90      	pop	{r4, r7, pc}
 8000e58:	0800ed48 	.word	0x0800ed48
 8000e5c:	0800ed6c 	.word	0x0800ed6c
 8000e60:	0800ed90 	.word	0x0800ed90
 8000e64:	0800edb4 	.word	0x0800edb4
 8000e68:	0800edd8 	.word	0x0800edd8
 8000e6c:	0800edfc 	.word	0x0800edfc
 8000e70:	0800ee20 	.word	0x0800ee20

08000e74 <MCP23017_DeInit>:
 *@Params: MCP23017 Device handle to deinitialize
 *@Return: None
 *@Precondition: Device handle should be initialized
 *@Postcondition: Device handle will be deinitialized and device registers set to default settings
 **************************************//**************************************/
void MCP23017_DeInit(MCP23017_Handle_t *Dev){
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
	MCP23017_Reset(Dev);
 8000e7c:	6878      	ldr	r0, [r7, #4]
 8000e7e:	f000 f813 	bl	8000ea8 <MCP23017_Reset>
	Dev->IO_Driver.Init = '\0';
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	2200      	movs	r2, #0
 8000e86:	605a      	str	r2, [r3, #4]
	Dev->IO_Driver.DeInit = '\0';
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	609a      	str	r2, [r3, #8]
	Dev->IO_Driver.ReadReg = '\0';
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	2200      	movs	r2, #0
 8000e92:	611a      	str	r2, [r3, #16]
	Dev->IO_Driver.WriteReg = '\0';
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	2200      	movs	r2, #0
 8000e98:	60da      	str	r2, [r3, #12]
	Dev->IO_Driver.ioctl = '\0';
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	615a      	str	r2, [r3, #20]
}
 8000ea0:	bf00      	nop
 8000ea2:	3708      	adds	r7, #8
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}

08000ea8 <MCP23017_Reset>:
 *@Params: MCP23017 Device Handle to reset
 *@Return: None
 *@Precondition: Device handle should be initialized
 *@Postcondition: Device registers will be set to default settings
 **************************************//**************************************/
void MCP23017_Reset(MCP23017_Handle_t *Dev){
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b084      	sub	sp, #16
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
	uint16_t Settings = 0;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	81fb      	strh	r3, [r7, #14]
	Dev->IO_Driver.DeInit(); //Turn off DMA IRQ and clear pending IRQ
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	689b      	ldr	r3, [r3, #8]
 8000eb8:	4798      	blx	r3
	if(Dev->IO_Driver.WriteReg(MCP23017_IOCON, (uint8_t*)&Settings,1) != MCP23017_Ok){
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	68db      	ldr	r3, [r3, #12]
 8000ebe:	200a      	movs	r0, #10
 8000ec0:	f107 010e 	add.w	r1, r7, #14
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	4798      	blx	r3
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d003      	beq.n	8000ed6 <MCP23017_Reset+0x2e>
		_log(log_mcp23017, "DeInitialization: IOCON Write Failed");
 8000ece:	4930      	ldr	r1, [pc, #192]	; (8000f90 <MCP23017_Reset+0xe8>)
 8000ed0:	2005      	movs	r0, #5
 8000ed2:	f001 fadf 	bl	8002494 <_log>
	}

	Settings = 0xFFFF;
 8000ed6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000eda:	81fb      	strh	r3, [r7, #14]
	if(Dev->IO_Driver.WriteReg(MCP23017_IODIRA, (uint8_t*)&Settings,2) != MCP23017_Ok){
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	68db      	ldr	r3, [r3, #12]
 8000ee0:	2000      	movs	r0, #0
 8000ee2:	f107 010e 	add.w	r1, r7, #14
 8000ee6:	2202      	movs	r2, #2
 8000ee8:	4798      	blx	r3
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d003      	beq.n	8000ef8 <MCP23017_Reset+0x50>
		_log(log_mcp23017, "DeInitialization: IODIR Write Failed");
 8000ef0:	4928      	ldr	r1, [pc, #160]	; (8000f94 <MCP23017_Reset+0xec>)
 8000ef2:	2005      	movs	r0, #5
 8000ef4:	f001 face 	bl	8002494 <_log>
	}

	Settings = 0x0000;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	81fb      	strh	r3, [r7, #14]
	if(Dev->IO_Driver.WriteReg(MCP23017_IPOLA, (uint8_t*)&Settings,2) != MCP23017_Ok){
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	68db      	ldr	r3, [r3, #12]
 8000f00:	2002      	movs	r0, #2
 8000f02:	f107 010e 	add.w	r1, r7, #14
 8000f06:	2202      	movs	r2, #2
 8000f08:	4798      	blx	r3
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d003      	beq.n	8000f18 <MCP23017_Reset+0x70>
		_log(log_mcp23017, "DeInitialization: IPOL Write Failed");
 8000f10:	4921      	ldr	r1, [pc, #132]	; (8000f98 <MCP23017_Reset+0xf0>)
 8000f12:	2005      	movs	r0, #5
 8000f14:	f001 fabe 	bl	8002494 <_log>
	}

	if(Dev->IO_Driver.WriteReg(MCP23017_GPINTENA, (uint8_t*)&Settings,2) != MCP23017_Ok){
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	68db      	ldr	r3, [r3, #12]
 8000f1c:	2004      	movs	r0, #4
 8000f1e:	f107 010e 	add.w	r1, r7, #14
 8000f22:	2202      	movs	r2, #2
 8000f24:	4798      	blx	r3
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d003      	beq.n	8000f34 <MCP23017_Reset+0x8c>
		_log(log_mcp23017, "DeInitialization: INTENA Write Failed");
 8000f2c:	491b      	ldr	r1, [pc, #108]	; (8000f9c <MCP23017_Reset+0xf4>)
 8000f2e:	2005      	movs	r0, #5
 8000f30:	f001 fab0 	bl	8002494 <_log>
	}

	if(Dev->IO_Driver.WriteReg(MCP23017_DEFVALA, (uint8_t*)&Settings,2) != MCP23017_Ok){
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	68db      	ldr	r3, [r3, #12]
 8000f38:	2006      	movs	r0, #6
 8000f3a:	f107 010e 	add.w	r1, r7, #14
 8000f3e:	2202      	movs	r2, #2
 8000f40:	4798      	blx	r3
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d003      	beq.n	8000f50 <MCP23017_Reset+0xa8>
		_log(log_mcp23017, "DeInitialization: DEFVAL Write Failed");
 8000f48:	4915      	ldr	r1, [pc, #84]	; (8000fa0 <MCP23017_Reset+0xf8>)
 8000f4a:	2005      	movs	r0, #5
 8000f4c:	f001 faa2 	bl	8002494 <_log>
	}

	if(Dev->IO_Driver.WriteReg(MCP23017_INTCONA, (uint8_t*)&Settings,2) != MCP23017_Ok){
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	68db      	ldr	r3, [r3, #12]
 8000f54:	2008      	movs	r0, #8
 8000f56:	f107 010e 	add.w	r1, r7, #14
 8000f5a:	2202      	movs	r2, #2
 8000f5c:	4798      	blx	r3
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d003      	beq.n	8000f6c <MCP23017_Reset+0xc4>
		_log(log_mcp23017, "DeInitialization: INTCON Write Failed");
 8000f64:	490f      	ldr	r1, [pc, #60]	; (8000fa4 <MCP23017_Reset+0xfc>)
 8000f66:	2005      	movs	r0, #5
 8000f68:	f001 fa94 	bl	8002494 <_log>
	}

	if(Dev->IO_Driver.WriteReg(MCP23017_GPPUA, (uint8_t*)&Settings,2) != MCP23017_Ok){
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	68db      	ldr	r3, [r3, #12]
 8000f70:	200c      	movs	r0, #12
 8000f72:	f107 010e 	add.w	r1, r7, #14
 8000f76:	2202      	movs	r2, #2
 8000f78:	4798      	blx	r3
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d003      	beq.n	8000f88 <MCP23017_Reset+0xe0>
		_log(log_mcp23017, "DeInitialization: GPPU Write Failed");
 8000f80:	4909      	ldr	r1, [pc, #36]	; (8000fa8 <MCP23017_Reset+0x100>)
 8000f82:	2005      	movs	r0, #5
 8000f84:	f001 fa86 	bl	8002494 <_log>
	}
}
 8000f88:	bf00      	nop
 8000f8a:	3710      	adds	r7, #16
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	0800ee44 	.word	0x0800ee44
 8000f94:	0800ee6c 	.word	0x0800ee6c
 8000f98:	0800ee94 	.word	0x0800ee94
 8000f9c:	0800eeb8 	.word	0x0800eeb8
 8000fa0:	0800eee0 	.word	0x0800eee0
 8000fa4:	0800ef08 	.word	0x0800ef08
 8000fa8:	0800ef30 	.word	0x0800ef30

08000fac <MCP23017_ReadPins>:
 *@Params: MCP23017 Device Handle
 *@Return: Err if read fails, Ok otherwise
 *@Precondition: Device handle must be initialized
 *@Postcondition: Device Handle PinStates will contain new states of pins
 **************************************//**************************************/
MCP23017_Status_t MCP23017_ReadPins(MCP23017_Handle_t *Dev){
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
	if(Dev->IO_Driver.ReadReg(MCP23017_GPIOA, (uint8_t*)&Dev->PinStates, 2) != MCP23017_Ok){
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	691b      	ldr	r3, [r3, #16]
 8000fb8:	2012      	movs	r0, #18
 8000fba:	6879      	ldr	r1, [r7, #4]
 8000fbc:	2202      	movs	r2, #2
 8000fbe:	4798      	blx	r3
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d005      	beq.n	8000fd2 <MCP23017_ReadPins+0x26>
		_log(log_mcp23017, "Read Pins Failed");
 8000fc6:	4905      	ldr	r1, [pc, #20]	; (8000fdc <MCP23017_ReadPins+0x30>)
 8000fc8:	2005      	movs	r0, #5
 8000fca:	f001 fa63 	bl	8002494 <_log>
		return MCP23017_Err;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	e000      	b.n	8000fd4 <MCP23017_ReadPins+0x28>
	}
	return MCP23017_Ok;
 8000fd2:	2300      	movs	r3, #0
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	3708      	adds	r7, #8
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	0800efa0 	.word	0x0800efa0

08000fe0 <MCP23017_IO_Init>:
 *@Params: None
 *@Return: None
 *@Precondition: None
 *@Postcondition: GPIO B Clk will be enabled and I2C1 Peripheral will be initialized
 **************************************//**************************************/
static void MCP23017_IO_Init(){
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
	I2C1_DMA_Init();
 8000fe4:	f000 ffde 	bl	8001fa4 <I2C1_DMA_Init>
	I2C_GPIO_Init();
 8000fe8:	f001 f858 	bl	800209c <I2C_GPIO_Init>
	I2C1_Init();
 8000fec:	f001 f9e0 	bl	80023b0 <I2C1_Init>
}
 8000ff0:	bf00      	nop
 8000ff2:	bd80      	pop	{r7, pc}

08000ff4 <MCP23017_IO_DeInit>:
 *@Params: None
 *@Return: None
 *@Precondition: None
 *@Postcondition: None
 **************************************//**************************************/
static void MCP23017_IO_DeInit(){
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
	HAL_NVIC_DisableIRQ(DMA1_Stream0_IRQn);
 8000ff8:	200b      	movs	r0, #11
 8000ffa:	f003 fa52 	bl	80044a2 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_ClearPendingIRQ(DMA1_Stream0_IRQn);
 8000ffe:	200b      	movs	r0, #11
 8001000:	f003 fa69 	bl	80044d6 <HAL_NVIC_ClearPendingIRQ>
}
 8001004:	bf00      	nop
 8001006:	bd80      	pop	{r7, pc}

08001008 <MCP23017_IO_WriteReg>:
 *@Params: MCP23017 Device Address, Register to write to, data to write, data length in bytes
 *@Return: Error if the write fails, otherwise Ok
 *@Precondition: I2C Bus should be initialized
 *@Postcondition: Device register will be written to
 **************************************//**************************************/
static MCP23017_Status_t MCP23017_IO_WriteReg(uint8_t DevAddr, uint8_t RegAddr, uint8_t *Data, uint8_t Length){
 8001008:	b580      	push	{r7, lr}
 800100a:	b086      	sub	sp, #24
 800100c:	af04      	add	r7, sp, #16
 800100e:	603a      	str	r2, [r7, #0]
 8001010:	461a      	mov	r2, r3
 8001012:	4603      	mov	r3, r0
 8001014:	71fb      	strb	r3, [r7, #7]
 8001016:	460b      	mov	r3, r1
 8001018:	71bb      	strb	r3, [r7, #6]
 800101a:	4613      	mov	r3, r2
 800101c:	717b      	strb	r3, [r7, #5]
	if(HAL_I2C_Mem_Write(&hi2c1, DevAddr, RegAddr, I2C_MEMADD_SIZE_8BIT, Data, Length, 50) != HAL_OK){
 800101e:	79fb      	ldrb	r3, [r7, #7]
 8001020:	b299      	uxth	r1, r3
 8001022:	79bb      	ldrb	r3, [r7, #6]
 8001024:	b29a      	uxth	r2, r3
 8001026:	797b      	ldrb	r3, [r7, #5]
 8001028:	b29b      	uxth	r3, r3
 800102a:	2032      	movs	r0, #50	; 0x32
 800102c:	9002      	str	r0, [sp, #8]
 800102e:	9301      	str	r3, [sp, #4]
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	9300      	str	r3, [sp, #0]
 8001034:	2301      	movs	r3, #1
 8001036:	4809      	ldr	r0, [pc, #36]	; (800105c <MCP23017_IO_WriteReg+0x54>)
 8001038:	f004 fa30 	bl	800549c <HAL_I2C_Mem_Write>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d007      	beq.n	8001052 <MCP23017_IO_WriteReg+0x4a>
		_log(log_i2c,"Write to MCP23017 Reg address %x failed.", RegAddr);
 8001042:	79bb      	ldrb	r3, [r7, #6]
 8001044:	461a      	mov	r2, r3
 8001046:	4906      	ldr	r1, [pc, #24]	; (8001060 <MCP23017_IO_WriteReg+0x58>)
 8001048:	2000      	movs	r0, #0
 800104a:	f001 fa23 	bl	8002494 <_log>
		return MCP23017_Err;
 800104e:	2301      	movs	r3, #1
 8001050:	e000      	b.n	8001054 <MCP23017_IO_WriteReg+0x4c>
	}
	return MCP23017_Ok;
 8001052:	2300      	movs	r3, #0
}
 8001054:	4618      	mov	r0, r3
 8001056:	3708      	adds	r7, #8
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	20000d3c 	.word	0x20000d3c
 8001060:	0800efb4 	.word	0x0800efb4

08001064 <MCP23017_IO_ReadReg>:
 *@Params: MCP23017 Device Address, Register to read to, data buffer to read into, data length in bytes,
 *@Return: Error if the read fails, otherwise Ok
 *@Precondition: I2C Bus must be initialized
 *@Postcondition: Data buffer will have the read data
 **************************************//**************************************/
static MCP23017_Status_t MCP23017_IO_ReadReg(uint8_t DevAddr, uint8_t RegAddr, uint8_t *Data, uint8_t Length){
 8001064:	b580      	push	{r7, lr}
 8001066:	b084      	sub	sp, #16
 8001068:	af02      	add	r7, sp, #8
 800106a:	603a      	str	r2, [r7, #0]
 800106c:	461a      	mov	r2, r3
 800106e:	4603      	mov	r3, r0
 8001070:	71fb      	strb	r3, [r7, #7]
 8001072:	460b      	mov	r3, r1
 8001074:	71bb      	strb	r3, [r7, #6]
 8001076:	4613      	mov	r3, r2
 8001078:	717b      	strb	r3, [r7, #5]
	//HAL_I2C_Mem_Read_DMA(hi2c, DevAddress, MemAddress, MemAddSize, pData, Size)
	//if(HAL_I2C_Mem_Read(&hi2c1, DevAddr, RegAddr, I2C_MEMADD_SIZE_8BIT, Data, Length, 50) != HAL_OK){
	if(HAL_I2C_Mem_Read_DMA(&hi2c1, DevAddr, RegAddr, I2C_MEMADD_SIZE_8BIT, Data, Length) != HAL_OK){
 800107a:	79fb      	ldrb	r3, [r7, #7]
 800107c:	b299      	uxth	r1, r3
 800107e:	79bb      	ldrb	r3, [r7, #6]
 8001080:	b29a      	uxth	r2, r3
 8001082:	797b      	ldrb	r3, [r7, #5]
 8001084:	b29b      	uxth	r3, r3
 8001086:	9301      	str	r3, [sp, #4]
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	9300      	str	r3, [sp, #0]
 800108c:	2301      	movs	r3, #1
 800108e:	4809      	ldr	r0, [pc, #36]	; (80010b4 <MCP23017_IO_ReadReg+0x50>)
 8001090:	f004 fafe 	bl	8005690 <HAL_I2C_Mem_Read_DMA>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d007      	beq.n	80010aa <MCP23017_IO_ReadReg+0x46>
		_log(log_i2c,"Read from MCP23017 Reg address %x failed.", RegAddr);
 800109a:	79bb      	ldrb	r3, [r7, #6]
 800109c:	461a      	mov	r2, r3
 800109e:	4906      	ldr	r1, [pc, #24]	; (80010b8 <MCP23017_IO_ReadReg+0x54>)
 80010a0:	2000      	movs	r0, #0
 80010a2:	f001 f9f7 	bl	8002494 <_log>
		return MCP23017_Err;
 80010a6:	2301      	movs	r3, #1
 80010a8:	e000      	b.n	80010ac <MCP23017_IO_ReadReg+0x48>
	}
	return MCP23017_Ok;
 80010aa:	2300      	movs	r3, #0
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3708      	adds	r7, #8
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	20000d3c 	.word	0x20000d3c
 80010b8:	0800efe0 	.word	0x0800efe0

080010bc <MCP23017_IO_ioctl>:
 *@Params: Command
 *@Return: None
 *@Precondition: None
 *@Postcondition: None
 **************************************//**************************************/
static uint8_t MCP23017_IO_ioctl(MCP23017_IO_Cmd_t command){
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	4603      	mov	r3, r0
 80010c4:	71fb      	strb	r3, [r7, #7]
	return MCP23017_Ok;
 80010c6:	2300      	movs	r3, #0
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	370c      	adds	r7, #12
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr

080010d4 <MCP23017_IO1_WriteReg>:
 *@Params: Register to write to, data to write, length of data in bytes
 *@Return: Err if write fails, Ok otherwise
 *@Precondition: I2C Bus must be initialized
 *@Postcondition: Device (w/ Address1) register will be modified
 **************************************//**************************************/
static MCP23017_Status_t MCP23017_IO1_WriteReg(uint8_t RegAddr, uint8_t *Data, uint8_t Length){
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	4603      	mov	r3, r0
 80010dc:	6039      	str	r1, [r7, #0]
 80010de:	71fb      	strb	r3, [r7, #7]
 80010e0:	4613      	mov	r3, r2
 80010e2:	71bb      	strb	r3, [r7, #6]
	static const uint8_t address = MCP23017_Address1;
    return MCP23017_IO_WriteReg(address, RegAddr, Data, Length);
 80010e4:	4b05      	ldr	r3, [pc, #20]	; (80010fc <MCP23017_IO1_WriteReg+0x28>)
 80010e6:	7818      	ldrb	r0, [r3, #0]
 80010e8:	79bb      	ldrb	r3, [r7, #6]
 80010ea:	79f9      	ldrb	r1, [r7, #7]
 80010ec:	683a      	ldr	r2, [r7, #0]
 80010ee:	f7ff ff8b 	bl	8001008 <MCP23017_IO_WriteReg>
 80010f2:	4603      	mov	r3, r0
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	3708      	adds	r7, #8
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	0800f1a0 	.word	0x0800f1a0

08001100 <MCP23017_IO1_ReadReg>:
 *@Params: Register to read from, data buffer to read into, length of data in bytes
 *@Return: Err if read fails, Ok otherwise
 *@Precondition: I2C Bus must be initialized
 *@Postcondition: Data buffer will contain data from device (w/ Address1) register
 **************************************//**************************************/
static MCP23017_Status_t MCP23017_IO1_ReadReg(uint8_t RegAddr, uint8_t *Data, uint8_t Length){
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	4603      	mov	r3, r0
 8001108:	6039      	str	r1, [r7, #0]
 800110a:	71fb      	strb	r3, [r7, #7]
 800110c:	4613      	mov	r3, r2
 800110e:	71bb      	strb	r3, [r7, #6]
	static const uint8_t address = MCP23017_Address1;
	return MCP23017_IO_ReadReg(address, RegAddr, Data, Length);
 8001110:	4b05      	ldr	r3, [pc, #20]	; (8001128 <MCP23017_IO1_ReadReg+0x28>)
 8001112:	7818      	ldrb	r0, [r3, #0]
 8001114:	79bb      	ldrb	r3, [r7, #6]
 8001116:	79f9      	ldrb	r1, [r7, #7]
 8001118:	683a      	ldr	r2, [r7, #0]
 800111a:	f7ff ffa3 	bl	8001064 <MCP23017_IO_ReadReg>
 800111e:	4603      	mov	r3, r0
}
 8001120:	4618      	mov	r0, r3
 8001122:	3708      	adds	r7, #8
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	0800f1a1 	.word	0x0800f1a1

0800112c <MCP23017_IO2_WriteReg>:
 *@Params: Register to write to, data to write, length of data in bytes
 *@Return: Err if write fails, Ok otherwise
 *@Precondition: I2C Bus must be initialized
 *@Postcondition: Device (w/ Address2) register will be modified
 **************************************//**************************************/
static MCP23017_Status_t MCP23017_IO2_WriteReg(uint8_t RegAddr, uint8_t *Data, uint8_t Length){
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	4603      	mov	r3, r0
 8001134:	6039      	str	r1, [r7, #0]
 8001136:	71fb      	strb	r3, [r7, #7]
 8001138:	4613      	mov	r3, r2
 800113a:	71bb      	strb	r3, [r7, #6]
	static const uint8_t address = MCP23017_Address2;
    return MCP23017_IO_WriteReg(address, RegAddr, Data, Length);
 800113c:	4b05      	ldr	r3, [pc, #20]	; (8001154 <MCP23017_IO2_WriteReg+0x28>)
 800113e:	7818      	ldrb	r0, [r3, #0]
 8001140:	79bb      	ldrb	r3, [r7, #6]
 8001142:	79f9      	ldrb	r1, [r7, #7]
 8001144:	683a      	ldr	r2, [r7, #0]
 8001146:	f7ff ff5f 	bl	8001008 <MCP23017_IO_WriteReg>
 800114a:	4603      	mov	r3, r0
}
 800114c:	4618      	mov	r0, r3
 800114e:	3708      	adds	r7, #8
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	0800f1a2 	.word	0x0800f1a2

08001158 <MCP23017_IO2_ReadReg>:
 *@Params: Register to read from, data buffer to read into, length of data in bytes
 *@Return: Err if read fails, Ok otherwise
 *@Precondition: I2C Bus must be initialized
 *@Postcondition: Data buffer will contain data from device (w/ Address2) register
 **************************************//**************************************/
static MCP23017_Status_t MCP23017_IO2_ReadReg(uint8_t RegAddr, uint8_t *Data, uint8_t Length){
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	4603      	mov	r3, r0
 8001160:	6039      	str	r1, [r7, #0]
 8001162:	71fb      	strb	r3, [r7, #7]
 8001164:	4613      	mov	r3, r2
 8001166:	71bb      	strb	r3, [r7, #6]
	static const uint8_t address = MCP23017_Address2;
	return MCP23017_IO_ReadReg(address, RegAddr, Data, Length);
 8001168:	4b05      	ldr	r3, [pc, #20]	; (8001180 <MCP23017_IO2_ReadReg+0x28>)
 800116a:	7818      	ldrb	r0, [r3, #0]
 800116c:	79bb      	ldrb	r3, [r7, #6]
 800116e:	79f9      	ldrb	r1, [r7, #7]
 8001170:	683a      	ldr	r2, [r7, #0]
 8001172:	f7ff ff77 	bl	8001064 <MCP23017_IO_ReadReg>
 8001176:	4603      	mov	r3, r0
}
 8001178:	4618      	mov	r0, r3
 800117a:	3708      	adds	r7, #8
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	0800f1a3 	.word	0x0800f1a3

08001184 <MCP23017_IO3_WriteReg>:
 *@Params: Register to write to, data to write, length of data in bytes
 *@Return: Err if write fails, Ok otherwise
 *@Precondition: I2C Bus must be initialized
 *@Postcondition: Device (w/ Address3) register will be modified
 **************************************//**************************************/
static MCP23017_Status_t MCP23017_IO3_WriteReg(uint8_t RegAddr, uint8_t *Data, uint8_t Length){
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	4603      	mov	r3, r0
 800118c:	6039      	str	r1, [r7, #0]
 800118e:	71fb      	strb	r3, [r7, #7]
 8001190:	4613      	mov	r3, r2
 8001192:	71bb      	strb	r3, [r7, #6]
	static const uint8_t address = MCP23017_Address3;
    return MCP23017_IO_WriteReg(address, RegAddr, Data, Length);
 8001194:	4b05      	ldr	r3, [pc, #20]	; (80011ac <MCP23017_IO3_WriteReg+0x28>)
 8001196:	7818      	ldrb	r0, [r3, #0]
 8001198:	79bb      	ldrb	r3, [r7, #6]
 800119a:	79f9      	ldrb	r1, [r7, #7]
 800119c:	683a      	ldr	r2, [r7, #0]
 800119e:	f7ff ff33 	bl	8001008 <MCP23017_IO_WriteReg>
 80011a2:	4603      	mov	r3, r0
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	3708      	adds	r7, #8
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	0800f1a4 	.word	0x0800f1a4

080011b0 <MCP23017_IO3_ReadReg>:
 *@Params: Register to read from, data buffer to read into, length of data in bytes
 *@Return: Err if read fails, Ok otherwise
 *@Precondition: I2C Bus must be initialized
 *@Postcondition: Data buffer will contain data from device (w/ Address3) register
 **************************************//**************************************/
static MCP23017_Status_t MCP23017_IO3_ReadReg(uint8_t RegAddr, uint8_t *Data, uint8_t Length){
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	4603      	mov	r3, r0
 80011b8:	6039      	str	r1, [r7, #0]
 80011ba:	71fb      	strb	r3, [r7, #7]
 80011bc:	4613      	mov	r3, r2
 80011be:	71bb      	strb	r3, [r7, #6]
	static const uint8_t address = MCP23017_Address3;
	return MCP23017_IO_ReadReg(address, RegAddr, Data, Length);
 80011c0:	4b05      	ldr	r3, [pc, #20]	; (80011d8 <MCP23017_IO3_ReadReg+0x28>)
 80011c2:	7818      	ldrb	r0, [r3, #0]
 80011c4:	79bb      	ldrb	r3, [r7, #6]
 80011c6:	79f9      	ldrb	r1, [r7, #7]
 80011c8:	683a      	ldr	r2, [r7, #0]
 80011ca:	f7ff ff4b 	bl	8001064 <MCP23017_IO_ReadReg>
 80011ce:	4603      	mov	r3, r0
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	3708      	adds	r7, #8
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	0800f1a5 	.word	0x0800f1a5

080011dc <MCP23017_IO4_WriteReg>:
 *@Params: Register to write to, data to write, length of data in bytes
 *@Return: Err if write fails, Ok otherwise
 *@Precondition: I2C Bus must be initialized
 *@Postcondition: Device (w/ Address4) register will be modified
 **************************************//**************************************/
static MCP23017_Status_t MCP23017_IO4_WriteReg(uint8_t RegAddr, uint8_t *Data, uint8_t Length){
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	4603      	mov	r3, r0
 80011e4:	6039      	str	r1, [r7, #0]
 80011e6:	71fb      	strb	r3, [r7, #7]
 80011e8:	4613      	mov	r3, r2
 80011ea:	71bb      	strb	r3, [r7, #6]
	static const uint8_t address = MCP23017_Address4;
    return MCP23017_IO_WriteReg(address, RegAddr, Data, Length);
 80011ec:	4b05      	ldr	r3, [pc, #20]	; (8001204 <MCP23017_IO4_WriteReg+0x28>)
 80011ee:	7818      	ldrb	r0, [r3, #0]
 80011f0:	79bb      	ldrb	r3, [r7, #6]
 80011f2:	79f9      	ldrb	r1, [r7, #7]
 80011f4:	683a      	ldr	r2, [r7, #0]
 80011f6:	f7ff ff07 	bl	8001008 <MCP23017_IO_WriteReg>
 80011fa:	4603      	mov	r3, r0
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	3708      	adds	r7, #8
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	0800f1a6 	.word	0x0800f1a6

08001208 <MCP23017_IO4_ReadReg>:
 *@Params: Register to read from, data buffer to read into, length of data in bytes
 *@Return: Err if read fails, Ok otherwise
 *@Precondition: I2C Bus must be initialized
 *@Postcondition: Data buffer will contain data from device (w/ Address4) register
 **************************************//**************************************/
static MCP23017_Status_t MCP23017_IO4_ReadReg(uint8_t RegAddr, uint8_t *Data, uint8_t Length){
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	4603      	mov	r3, r0
 8001210:	6039      	str	r1, [r7, #0]
 8001212:	71fb      	strb	r3, [r7, #7]
 8001214:	4613      	mov	r3, r2
 8001216:	71bb      	strb	r3, [r7, #6]
	static const uint8_t address = MCP23017_Address4;
	return MCP23017_IO_ReadReg(address, RegAddr, Data, Length);
 8001218:	4b05      	ldr	r3, [pc, #20]	; (8001230 <MCP23017_IO4_ReadReg+0x28>)
 800121a:	7818      	ldrb	r0, [r3, #0]
 800121c:	79bb      	ldrb	r3, [r7, #6]
 800121e:	79f9      	ldrb	r1, [r7, #7]
 8001220:	683a      	ldr	r2, [r7, #0]
 8001222:	f7ff ff1f 	bl	8001064 <MCP23017_IO_ReadReg>
 8001226:	4603      	mov	r3, r0
}
 8001228:	4618      	mov	r0, r3
 800122a:	3708      	adds	r7, #8
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	0800f1a7 	.word	0x0800f1a7

08001234 <KeyPadInit>:
static void KeypadInitButtons();
static void KeypadInitLEDs();
static void KeypadInitTouchButtons();
static void KeypadInitJoystick();

void KeyPadInit(){
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
	  KeyPad.MouseUSBBuffer.button_reg = 0;
 800123a:	4b17      	ldr	r3, [pc, #92]	; (8001298 <KeyPadInit+0x64>)
 800123c:	2200      	movs	r2, #0
 800123e:	f883 298b 	strb.w	r2, [r3, #2443]	; 0x98b
	  KeyPad.MouseUSBBuffer.wheel_movement = 0;
 8001242:	4b15      	ldr	r3, [pc, #84]	; (8001298 <KeyPadInit+0x64>)
 8001244:	2200      	movs	r2, #0
 8001246:	f883 298e 	strb.w	r2, [r3, #2446]	; 0x98e
	  KeyPad.MouseUSBBuffer.x_movement = 0;
 800124a:	4b13      	ldr	r3, [pc, #76]	; (8001298 <KeyPadInit+0x64>)
 800124c:	2200      	movs	r2, #0
 800124e:	f883 298c 	strb.w	r2, [r3, #2444]	; 0x98c
	  KeyPad.MouseUSBBuffer.y_movement = 0;
 8001252:	4b11      	ldr	r3, [pc, #68]	; (8001298 <KeyPadInit+0x64>)
 8001254:	2200      	movs	r2, #0
 8001256:	f883 298d 	strb.w	r2, [r3, #2445]	; 0x98d
	  KeyPad.KeyboardUSBBuffer.modifiers = 0;
 800125a:	4b0f      	ldr	r3, [pc, #60]	; (8001298 <KeyPadInit+0x64>)
 800125c:	2200      	movs	r2, #0
 800125e:	f883 2964 	strb.w	r2, [r3, #2404]	; 0x964
	  for(uint8_t i = 0; i < SIMULTANEOUS_BUTTONS; i++){
 8001262:	2300      	movs	r3, #0
 8001264:	71fb      	strb	r3, [r7, #7]
 8001266:	e008      	b.n	800127a <KeyPadInit+0x46>
          KeyPad.KeyboardUSBBuffer.keycodes[i] = KEY_NONE;
 8001268:	79fb      	ldrb	r3, [r7, #7]
 800126a:	4a0b      	ldr	r2, [pc, #44]	; (8001298 <KeyPadInit+0x64>)
 800126c:	4413      	add	r3, r2
 800126e:	2200      	movs	r2, #0
 8001270:	f883 2966 	strb.w	r2, [r3, #2406]	; 0x966
	  for(uint8_t i = 0; i < SIMULTANEOUS_BUTTONS; i++){
 8001274:	79fb      	ldrb	r3, [r7, #7]
 8001276:	3301      	adds	r3, #1
 8001278:	71fb      	strb	r3, [r7, #7]
 800127a:	79fb      	ldrb	r3, [r7, #7]
 800127c:	2b24      	cmp	r3, #36	; 0x24
 800127e:	d9f3      	bls.n	8001268 <KeyPadInit+0x34>
	  }
	  KeypadInitLEDs();
 8001280:	f000 fcf8 	bl	8001c74 <KeypadInitLEDs>
	  KeypadInitTouchButtons();
 8001284:	f000 fd4e 	bl	8001d24 <KeypadInitTouchButtons>
	  KeypadInitButtons();
 8001288:	f000 fc6c 	bl	8001b64 <KeypadInitButtons>
	  KeypadInitJoystick();
 800128c:	f000 fc9e 	bl	8001bcc <KeypadInitJoystick>
}
 8001290:	bf00      	nop
 8001292:	3708      	adds	r7, #8
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	20000304 	.word	0x20000304

0800129c <UpdateKeyPadTxBuffers>:

void UpdateKeyPadTxBuffers(){
 800129c:	b580      	push	{r7, lr}
 800129e:	b084      	sub	sp, #16
 80012a0:	af00      	add	r7, sp, #0
	uint8_t PressedKeys = 0;           //Track number of pressed keys (For adding KeyScanCodes to KeyboardUSBBuffer)
 80012a2:	2300      	movs	r3, #0
 80012a4:	73fb      	strb	r3, [r7, #15]
	uint8_t MouseButtons = 0;          //Stores Mouse buttons clicked (will later be added to MouseUSBBuffer
 80012a6:	2300      	movs	r3, #0
 80012a8:	73bb      	strb	r3, [r7, #14]
	uint8_t KeyBoardModKeys = 0;       //Stores Modifier Keys pressed (will later be added to KeyboardUSBBuffer)
 80012aa:	2300      	movs	r3, #0
 80012ac:	737b      	strb	r3, [r7, #13]


	KeypadFlagStatus_t KeyboardStatus = NoKeypadChange; //Keep track of whether a keyboard button has changed. Assigned to KeyPad.KeyboardFlag later.
 80012ae:	2300      	movs	r3, #0
 80012b0:	733b      	strb	r3, [r7, #12]
	KeypadFlagStatus_t MouseStatus = NoKeypadChange;    //Keep track of whether a keyboard button has changed. Assigned to KeyPad.KeyboardFlag later.
 80012b2:	2300      	movs	r3, #0
 80012b4:	72fb      	strb	r3, [r7, #11]

	MouseWheel_t WheelMovement = 0;
 80012b6:	2300      	movs	r3, #0
 80012b8:	72bb      	strb	r3, [r7, #10]
    ButtonStatus_t ButtonStatus;

    //Loop through all buttons
    for(uint8_t i = 0; i < NUMBER_OF_BUTTONS; i++){
 80012ba:	2300      	movs	r3, #0
 80012bc:	727b      	strb	r3, [r7, #9]
 80012be:	e0a7      	b.n	8001410 <UpdateKeyPadTxBuffers+0x174>
    	//Update Button State and store its status
        ButtonStatus = ButtonRead(&KeyPad.Buttons[i]);
 80012c0:	7a7a      	ldrb	r2, [r7, #9]
 80012c2:	4613      	mov	r3, r2
 80012c4:	00db      	lsls	r3, r3, #3
 80012c6:	1a9b      	subs	r3, r3, r2
 80012c8:	009b      	lsls	r3, r3, #2
 80012ca:	4a55      	ldr	r2, [pc, #340]	; (8001420 <UpdateKeyPadTxBuffers+0x184>)
 80012cc:	4413      	add	r3, r2
 80012ce:	3304      	adds	r3, #4
 80012d0:	4618      	mov	r0, r3
 80012d2:	f001 fe52 	bl	8002f7a <ButtonRead>
 80012d6:	4603      	mov	r3, r0
 80012d8:	713b      	strb	r3, [r7, #4]
        if(KeyPad.Buttons[i].State == ButtonPressed){
 80012da:	7a7a      	ldrb	r2, [r7, #9]
 80012dc:	4950      	ldr	r1, [pc, #320]	; (8001420 <UpdateKeyPadTxBuffers+0x184>)
 80012de:	4613      	mov	r3, r2
 80012e0:	00db      	lsls	r3, r3, #3
 80012e2:	1a9b      	subs	r3, r3, r2
 80012e4:	009b      	lsls	r3, r3, #2
 80012e6:	440b      	add	r3, r1
 80012e8:	3309      	adds	r3, #9
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	2b01      	cmp	r3, #1
 80012ee:	d164      	bne.n	80013ba <UpdateKeyPadTxBuffers+0x11e>
            if(KeyPad.Buttons[i].KeyFunction.KeyScanCode != KEY_NONE){
 80012f0:	7a7a      	ldrb	r2, [r7, #9]
 80012f2:	494b      	ldr	r1, [pc, #300]	; (8001420 <UpdateKeyPadTxBuffers+0x184>)
 80012f4:	4613      	mov	r3, r2
 80012f6:	00db      	lsls	r3, r3, #3
 80012f8:	1a9b      	subs	r3, r3, r2
 80012fa:	009b      	lsls	r3, r3, #2
 80012fc:	440b      	add	r3, r1
 80012fe:	3305      	adds	r3, #5
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d00d      	beq.n	8001322 <UpdateKeyPadTxBuffers+0x86>
                KeyPad.KeyboardUSBBuffer.keycodes[PressedKeys] = KeyPad.Buttons[i].KeyFunction.KeyScanCode;
 8001306:	7a7a      	ldrb	r2, [r7, #9]
 8001308:	7bf9      	ldrb	r1, [r7, #15]
 800130a:	4845      	ldr	r0, [pc, #276]	; (8001420 <UpdateKeyPadTxBuffers+0x184>)
 800130c:	4613      	mov	r3, r2
 800130e:	00db      	lsls	r3, r3, #3
 8001310:	1a9b      	subs	r3, r3, r2
 8001312:	009b      	lsls	r3, r3, #2
 8001314:	4403      	add	r3, r0
 8001316:	3305      	adds	r3, #5
 8001318:	781a      	ldrb	r2, [r3, #0]
 800131a:	4b41      	ldr	r3, [pc, #260]	; (8001420 <UpdateKeyPadTxBuffers+0x184>)
 800131c:	440b      	add	r3, r1
 800131e:	f883 2966 	strb.w	r2, [r3, #2406]	; 0x966
            }

            if(KeyPad.Buttons[i].KeyFunction.ModifierKey != KEY_MOD_NOMOD){
 8001322:	7a7a      	ldrb	r2, [r7, #9]
 8001324:	493e      	ldr	r1, [pc, #248]	; (8001420 <UpdateKeyPadTxBuffers+0x184>)
 8001326:	4613      	mov	r3, r2
 8001328:	00db      	lsls	r3, r3, #3
 800132a:	1a9b      	subs	r3, r3, r2
 800132c:	009b      	lsls	r3, r3, #2
 800132e:	440b      	add	r3, r1
 8001330:	3306      	adds	r3, #6
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d00b      	beq.n	8001350 <UpdateKeyPadTxBuffers+0xb4>
            	KeyBoardModKeys |= KeyPad.Buttons[i].KeyFunction.ModifierKey;
 8001338:	7a7a      	ldrb	r2, [r7, #9]
 800133a:	4939      	ldr	r1, [pc, #228]	; (8001420 <UpdateKeyPadTxBuffers+0x184>)
 800133c:	4613      	mov	r3, r2
 800133e:	00db      	lsls	r3, r3, #3
 8001340:	1a9b      	subs	r3, r3, r2
 8001342:	009b      	lsls	r3, r3, #2
 8001344:	440b      	add	r3, r1
 8001346:	3306      	adds	r3, #6
 8001348:	781a      	ldrb	r2, [r3, #0]
 800134a:	7b7b      	ldrb	r3, [r7, #13]
 800134c:	4313      	orrs	r3, r2
 800134e:	737b      	strb	r3, [r7, #13]
            }

            if(KeyPad.Buttons[i].KeyFunction.MouseClick != MOUSE_CLICK_NONE){
 8001350:	7a7a      	ldrb	r2, [r7, #9]
 8001352:	4933      	ldr	r1, [pc, #204]	; (8001420 <UpdateKeyPadTxBuffers+0x184>)
 8001354:	4613      	mov	r3, r2
 8001356:	00db      	lsls	r3, r3, #3
 8001358:	1a9b      	subs	r3, r3, r2
 800135a:	009b      	lsls	r3, r3, #2
 800135c:	440b      	add	r3, r1
 800135e:	3307      	adds	r3, #7
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d00b      	beq.n	800137e <UpdateKeyPadTxBuffers+0xe2>
            	MouseButtons |= KeyPad.Buttons[i].KeyFunction.MouseClick;
 8001366:	7a7a      	ldrb	r2, [r7, #9]
 8001368:	492d      	ldr	r1, [pc, #180]	; (8001420 <UpdateKeyPadTxBuffers+0x184>)
 800136a:	4613      	mov	r3, r2
 800136c:	00db      	lsls	r3, r3, #3
 800136e:	1a9b      	subs	r3, r3, r2
 8001370:	009b      	lsls	r3, r3, #2
 8001372:	440b      	add	r3, r1
 8001374:	3307      	adds	r3, #7
 8001376:	781a      	ldrb	r2, [r3, #0]
 8001378:	7bbb      	ldrb	r3, [r7, #14]
 800137a:	4313      	orrs	r3, r2
 800137c:	73bb      	strb	r3, [r7, #14]
            }

            if(KeyPad.Buttons[i].KeyFunction.MouseWheel != MOUSE_WHEEL_NO_MOVE){
 800137e:	7a7a      	ldrb	r2, [r7, #9]
 8001380:	4927      	ldr	r1, [pc, #156]	; (8001420 <UpdateKeyPadTxBuffers+0x184>)
 8001382:	4613      	mov	r3, r2
 8001384:	00db      	lsls	r3, r3, #3
 8001386:	1a9b      	subs	r3, r3, r2
 8001388:	009b      	lsls	r3, r3, #2
 800138a:	440b      	add	r3, r1
 800138c:	3308      	adds	r3, #8
 800138e:	f993 3000 	ldrsb.w	r3, [r3]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d00e      	beq.n	80013b4 <UpdateKeyPadTxBuffers+0x118>
                WheelMovement += KeyPad.Buttons[i].KeyFunction.MouseWheel;
 8001396:	7a7a      	ldrb	r2, [r7, #9]
 8001398:	4921      	ldr	r1, [pc, #132]	; (8001420 <UpdateKeyPadTxBuffers+0x184>)
 800139a:	4613      	mov	r3, r2
 800139c:	00db      	lsls	r3, r3, #3
 800139e:	1a9b      	subs	r3, r3, r2
 80013a0:	009b      	lsls	r3, r3, #2
 80013a2:	440b      	add	r3, r1
 80013a4:	3308      	adds	r3, #8
 80013a6:	f993 3000 	ldrsb.w	r3, [r3]
 80013aa:	b2da      	uxtb	r2, r3
 80013ac:	7abb      	ldrb	r3, [r7, #10]
 80013ae:	4413      	add	r3, r2
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	72bb      	strb	r3, [r7, #10]
            }
            PressedKeys++;
 80013b4:	7bfb      	ldrb	r3, [r7, #15]
 80013b6:	3301      	adds	r3, #1
 80013b8:	73fb      	strb	r3, [r7, #15]
        }

        if(ButtonStatus == ButtonChanged){
 80013ba:	793b      	ldrb	r3, [r7, #4]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d124      	bne.n	800140a <UpdateKeyPadTxBuffers+0x16e>
        	if(KeyPad.Buttons[i].KeyFunction.KeyScanCode != KEY_NONE || KeyPad.Buttons[i].KeyFunction.ModifierKey != KEY_MOD_NOMOD){
 80013c0:	7a7a      	ldrb	r2, [r7, #9]
 80013c2:	4917      	ldr	r1, [pc, #92]	; (8001420 <UpdateKeyPadTxBuffers+0x184>)
 80013c4:	4613      	mov	r3, r2
 80013c6:	00db      	lsls	r3, r3, #3
 80013c8:	1a9b      	subs	r3, r3, r2
 80013ca:	009b      	lsls	r3, r3, #2
 80013cc:	440b      	add	r3, r1
 80013ce:	3305      	adds	r3, #5
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d10a      	bne.n	80013ec <UpdateKeyPadTxBuffers+0x150>
 80013d6:	7a7a      	ldrb	r2, [r7, #9]
 80013d8:	4911      	ldr	r1, [pc, #68]	; (8001420 <UpdateKeyPadTxBuffers+0x184>)
 80013da:	4613      	mov	r3, r2
 80013dc:	00db      	lsls	r3, r3, #3
 80013de:	1a9b      	subs	r3, r3, r2
 80013e0:	009b      	lsls	r3, r3, #2
 80013e2:	440b      	add	r3, r1
 80013e4:	3306      	adds	r3, #6
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <UpdateKeyPadTxBuffers+0x154>
        		KeyboardStatus = KeyboardDataAvailable;
 80013ec:	2302      	movs	r3, #2
 80013ee:	733b      	strb	r3, [r7, #12]
        	}

        	if(KeyPad.Buttons[i].KeyFunction.MouseClick != MOUSE_CLICK_NONE){
 80013f0:	7a7a      	ldrb	r2, [r7, #9]
 80013f2:	490b      	ldr	r1, [pc, #44]	; (8001420 <UpdateKeyPadTxBuffers+0x184>)
 80013f4:	4613      	mov	r3, r2
 80013f6:	00db      	lsls	r3, r3, #3
 80013f8:	1a9b      	subs	r3, r3, r2
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	440b      	add	r3, r1
 80013fe:	3307      	adds	r3, #7
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <UpdateKeyPadTxBuffers+0x16e>
        		MouseStatus = MouseDataAvailable;
 8001406:	2301      	movs	r3, #1
 8001408:	72fb      	strb	r3, [r7, #11]
    for(uint8_t i = 0; i < NUMBER_OF_BUTTONS; i++){
 800140a:	7a7b      	ldrb	r3, [r7, #9]
 800140c:	3301      	adds	r3, #1
 800140e:	727b      	strb	r3, [r7, #9]
 8001410:	7a7b      	ldrb	r3, [r7, #9]
 8001412:	2b3f      	cmp	r3, #63	; 0x3f
 8001414:	f67f af54 	bls.w	80012c0 <UpdateKeyPadTxBuffers+0x24>
        }
    }

    TouchButton_Status_t TouchButtonStatus;
    //Loop through all touch buttons
    for(uint8_t i = 0; i < NUMBER_OF_TOUCH_BUTTONS; i++){
 8001418:	2300      	movs	r3, #0
 800141a:	723b      	strb	r3, [r7, #8]
 800141c:	e0b8      	b.n	8001590 <UpdateKeyPadTxBuffers+0x2f4>
 800141e:	bf00      	nop
 8001420:	20000304 	.word	0x20000304
    	//Update Button State and store its status
    	TouchButtonStatus = TouchButtonRead(&KeyPad.TouchButton[i]);
 8001424:	7a3a      	ldrb	r2, [r7, #8]
 8001426:	4613      	mov	r3, r2
 8001428:	00db      	lsls	r3, r3, #3
 800142a:	4413      	add	r3, r2
 800142c:	009b      	lsls	r3, r3, #2
 800142e:	f503 63f6 	add.w	r3, r3, #1968	; 0x7b0
 8001432:	4ab6      	ldr	r2, [pc, #728]	; (800170c <UpdateKeyPadTxBuffers+0x470>)
 8001434:	4413      	add	r3, r2
 8001436:	3304      	adds	r3, #4
 8001438:	4618      	mov	r0, r3
 800143a:	f002 f944 	bl	80036c6 <TouchButtonRead>
 800143e:	4603      	mov	r3, r0
 8001440:	717b      	strb	r3, [r7, #5]
        if(KeyPad.TouchButton[i].State == TouchButtonPressed){
 8001442:	7a3a      	ldrb	r2, [r7, #8]
 8001444:	49b1      	ldr	r1, [pc, #708]	; (800170c <UpdateKeyPadTxBuffers+0x470>)
 8001446:	4613      	mov	r3, r2
 8001448:	00db      	lsls	r3, r3, #3
 800144a:	4413      	add	r3, r2
 800144c:	009b      	lsls	r3, r3, #2
 800144e:	440b      	add	r3, r1
 8001450:	f503 63f8 	add.w	r3, r3, #1984	; 0x7c0
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d16c      	bne.n	8001534 <UpdateKeyPadTxBuffers+0x298>
            if(KeyPad.TouchButton[i].KeyFunction.KeyScanCode != KEY_NONE){
 800145a:	7a3a      	ldrb	r2, [r7, #8]
 800145c:	49ab      	ldr	r1, [pc, #684]	; (800170c <UpdateKeyPadTxBuffers+0x470>)
 800145e:	4613      	mov	r3, r2
 8001460:	00db      	lsls	r3, r3, #3
 8001462:	4413      	add	r3, r2
 8001464:	009b      	lsls	r3, r3, #2
 8001466:	440b      	add	r3, r1
 8001468:	f203 73bc 	addw	r3, r3, #1980	; 0x7bc
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d00e      	beq.n	8001490 <UpdateKeyPadTxBuffers+0x1f4>
                KeyPad.KeyboardUSBBuffer.keycodes[PressedKeys] = KeyPad.TouchButton[i].KeyFunction.KeyScanCode;
 8001472:	7a3a      	ldrb	r2, [r7, #8]
 8001474:	7bf9      	ldrb	r1, [r7, #15]
 8001476:	48a5      	ldr	r0, [pc, #660]	; (800170c <UpdateKeyPadTxBuffers+0x470>)
 8001478:	4613      	mov	r3, r2
 800147a:	00db      	lsls	r3, r3, #3
 800147c:	4413      	add	r3, r2
 800147e:	009b      	lsls	r3, r3, #2
 8001480:	4403      	add	r3, r0
 8001482:	f203 73bc 	addw	r3, r3, #1980	; 0x7bc
 8001486:	781a      	ldrb	r2, [r3, #0]
 8001488:	4ba0      	ldr	r3, [pc, #640]	; (800170c <UpdateKeyPadTxBuffers+0x470>)
 800148a:	440b      	add	r3, r1
 800148c:	f883 2966 	strb.w	r2, [r3, #2406]	; 0x966
            }

            if(KeyPad.TouchButton[i].KeyFunction.ModifierKey != KEY_MOD_NOMOD){
 8001490:	7a3a      	ldrb	r2, [r7, #8]
 8001492:	499e      	ldr	r1, [pc, #632]	; (800170c <UpdateKeyPadTxBuffers+0x470>)
 8001494:	4613      	mov	r3, r2
 8001496:	00db      	lsls	r3, r3, #3
 8001498:	4413      	add	r3, r2
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	440b      	add	r3, r1
 800149e:	f203 73bd 	addw	r3, r3, #1981	; 0x7bd
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d00c      	beq.n	80014c2 <UpdateKeyPadTxBuffers+0x226>
            	KeyBoardModKeys |= KeyPad.TouchButton[i].KeyFunction.ModifierKey;
 80014a8:	7a3a      	ldrb	r2, [r7, #8]
 80014aa:	4998      	ldr	r1, [pc, #608]	; (800170c <UpdateKeyPadTxBuffers+0x470>)
 80014ac:	4613      	mov	r3, r2
 80014ae:	00db      	lsls	r3, r3, #3
 80014b0:	4413      	add	r3, r2
 80014b2:	009b      	lsls	r3, r3, #2
 80014b4:	440b      	add	r3, r1
 80014b6:	f203 73bd 	addw	r3, r3, #1981	; 0x7bd
 80014ba:	781a      	ldrb	r2, [r3, #0]
 80014bc:	7b7b      	ldrb	r3, [r7, #13]
 80014be:	4313      	orrs	r3, r2
 80014c0:	737b      	strb	r3, [r7, #13]
            }

            if(KeyPad.TouchButton[i].KeyFunction.MouseClick != MOUSE_CLICK_NONE){
 80014c2:	7a3a      	ldrb	r2, [r7, #8]
 80014c4:	4991      	ldr	r1, [pc, #580]	; (800170c <UpdateKeyPadTxBuffers+0x470>)
 80014c6:	4613      	mov	r3, r2
 80014c8:	00db      	lsls	r3, r3, #3
 80014ca:	4413      	add	r3, r2
 80014cc:	009b      	lsls	r3, r3, #2
 80014ce:	440b      	add	r3, r1
 80014d0:	f203 73be 	addw	r3, r3, #1982	; 0x7be
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d00c      	beq.n	80014f4 <UpdateKeyPadTxBuffers+0x258>
            	MouseButtons |= KeyPad.TouchButton[i].KeyFunction.MouseClick;
 80014da:	7a3a      	ldrb	r2, [r7, #8]
 80014dc:	498b      	ldr	r1, [pc, #556]	; (800170c <UpdateKeyPadTxBuffers+0x470>)
 80014de:	4613      	mov	r3, r2
 80014e0:	00db      	lsls	r3, r3, #3
 80014e2:	4413      	add	r3, r2
 80014e4:	009b      	lsls	r3, r3, #2
 80014e6:	440b      	add	r3, r1
 80014e8:	f203 73be 	addw	r3, r3, #1982	; 0x7be
 80014ec:	781a      	ldrb	r2, [r3, #0]
 80014ee:	7bbb      	ldrb	r3, [r7, #14]
 80014f0:	4313      	orrs	r3, r2
 80014f2:	73bb      	strb	r3, [r7, #14]
            }

            if(KeyPad.TouchButton[i].KeyFunction.MouseWheel != MOUSE_WHEEL_NO_MOVE){
 80014f4:	7a3a      	ldrb	r2, [r7, #8]
 80014f6:	4985      	ldr	r1, [pc, #532]	; (800170c <UpdateKeyPadTxBuffers+0x470>)
 80014f8:	4613      	mov	r3, r2
 80014fa:	00db      	lsls	r3, r3, #3
 80014fc:	4413      	add	r3, r2
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	440b      	add	r3, r1
 8001502:	f203 73bf 	addw	r3, r3, #1983	; 0x7bf
 8001506:	f993 3000 	ldrsb.w	r3, [r3]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d00f      	beq.n	800152e <UpdateKeyPadTxBuffers+0x292>
                WheelMovement += KeyPad.TouchButton[i].KeyFunction.MouseWheel;
 800150e:	7a3a      	ldrb	r2, [r7, #8]
 8001510:	497e      	ldr	r1, [pc, #504]	; (800170c <UpdateKeyPadTxBuffers+0x470>)
 8001512:	4613      	mov	r3, r2
 8001514:	00db      	lsls	r3, r3, #3
 8001516:	4413      	add	r3, r2
 8001518:	009b      	lsls	r3, r3, #2
 800151a:	440b      	add	r3, r1
 800151c:	f203 73bf 	addw	r3, r3, #1983	; 0x7bf
 8001520:	f993 3000 	ldrsb.w	r3, [r3]
 8001524:	b2da      	uxtb	r2, r3
 8001526:	7abb      	ldrb	r3, [r7, #10]
 8001528:	4413      	add	r3, r2
 800152a:	b2db      	uxtb	r3, r3
 800152c:	72bb      	strb	r3, [r7, #10]
            }
            PressedKeys++;
 800152e:	7bfb      	ldrb	r3, [r7, #15]
 8001530:	3301      	adds	r3, #1
 8001532:	73fb      	strb	r3, [r7, #15]
        }

        if(TouchButtonStatus == TouchButtonChanged){
 8001534:	797b      	ldrb	r3, [r7, #5]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d127      	bne.n	800158a <UpdateKeyPadTxBuffers+0x2ee>
        	if(KeyPad.TouchButton[i].KeyFunction.KeyScanCode != KEY_NONE || KeyPad.TouchButton[i].KeyFunction.ModifierKey != KEY_MOD_NOMOD){
 800153a:	7a3a      	ldrb	r2, [r7, #8]
 800153c:	4973      	ldr	r1, [pc, #460]	; (800170c <UpdateKeyPadTxBuffers+0x470>)
 800153e:	4613      	mov	r3, r2
 8001540:	00db      	lsls	r3, r3, #3
 8001542:	4413      	add	r3, r2
 8001544:	009b      	lsls	r3, r3, #2
 8001546:	440b      	add	r3, r1
 8001548:	f203 73bc 	addw	r3, r3, #1980	; 0x7bc
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d10b      	bne.n	800156a <UpdateKeyPadTxBuffers+0x2ce>
 8001552:	7a3a      	ldrb	r2, [r7, #8]
 8001554:	496d      	ldr	r1, [pc, #436]	; (800170c <UpdateKeyPadTxBuffers+0x470>)
 8001556:	4613      	mov	r3, r2
 8001558:	00db      	lsls	r3, r3, #3
 800155a:	4413      	add	r3, r2
 800155c:	009b      	lsls	r3, r3, #2
 800155e:	440b      	add	r3, r1
 8001560:	f203 73bd 	addw	r3, r3, #1981	; 0x7bd
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <UpdateKeyPadTxBuffers+0x2d2>
        		KeyboardStatus = KeyboardDataAvailable;
 800156a:	2302      	movs	r3, #2
 800156c:	733b      	strb	r3, [r7, #12]
        	}

        	if(KeyPad.TouchButton[i].KeyFunction.MouseClick != MOUSE_CLICK_NONE){
 800156e:	7a3a      	ldrb	r2, [r7, #8]
 8001570:	4966      	ldr	r1, [pc, #408]	; (800170c <UpdateKeyPadTxBuffers+0x470>)
 8001572:	4613      	mov	r3, r2
 8001574:	00db      	lsls	r3, r3, #3
 8001576:	4413      	add	r3, r2
 8001578:	009b      	lsls	r3, r3, #2
 800157a:	440b      	add	r3, r1
 800157c:	f203 73be 	addw	r3, r3, #1982	; 0x7be
 8001580:	781b      	ldrb	r3, [r3, #0]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <UpdateKeyPadTxBuffers+0x2ee>
        		MouseStatus = MouseDataAvailable;
 8001586:	2301      	movs	r3, #1
 8001588:	72fb      	strb	r3, [r7, #11]
    for(uint8_t i = 0; i < NUMBER_OF_TOUCH_BUTTONS; i++){
 800158a:	7a3b      	ldrb	r3, [r7, #8]
 800158c:	3301      	adds	r3, #1
 800158e:	723b      	strb	r3, [r7, #8]
 8001590:	7a3b      	ldrb	r3, [r7, #8]
 8001592:	2b0b      	cmp	r3, #11
 8001594:	f67f af46 	bls.w	8001424 <UpdateKeyPadTxBuffers+0x188>

    }

    //Handle Joystick
    JoystickStatus_t JoystickStatus;
    JoystickStatus = JoystickRead(&KeyPad.Joystick);
 8001598:	485d      	ldr	r0, [pc, #372]	; (8001710 <UpdateKeyPadTxBuffers+0x474>)
 800159a:	f001 fe45 	bl	8003228 <JoystickRead>
 800159e:	4603      	mov	r3, r0
 80015a0:	71bb      	strb	r3, [r7, #6]

	switch(KeyPad.Joystick.Position){
 80015a2:	4b5a      	ldr	r3, [pc, #360]	; (800170c <UpdateKeyPadTxBuffers+0x470>)
 80015a4:	f893 3708 	ldrb.w	r3, [r3, #1800]	; 0x708
 80015a8:	3b01      	subs	r3, #1
 80015aa:	2b07      	cmp	r3, #7
 80015ac:	f200 827e 	bhi.w	8001aac <UpdateKeyPadTxBuffers+0x810>
 80015b0:	a201      	add	r2, pc, #4	; (adr r2, 80015b8 <UpdateKeyPadTxBuffers+0x31c>)
 80015b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015b6:	bf00      	nop
 80015b8:	08001715 	.word	0x08001715
 80015bc:	08001673 	.word	0x08001673
 80015c0:	080015d9 	.word	0x080015d9
 80015c4:	08001a17 	.word	0x08001a17
 80015c8:	08001981 	.word	0x08001981
 80015cc:	080018e3 	.word	0x080018e3
 80015d0:	08001849 	.word	0x08001849
 80015d4:	080017af 	.word	0x080017af
			case(Joystick_Up):
                            if(KeyPad.Joystick.UpFunction.KeyScanCode != KEY_NONE){
 80015d8:	4b4c      	ldr	r3, [pc, #304]	; (800170c <UpdateKeyPadTxBuffers+0x470>)
 80015da:	f893 3715 	ldrb.w	r3, [r3, #1813]	; 0x715
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d008      	beq.n	80015f4 <UpdateKeyPadTxBuffers+0x358>
                                KeyPad.KeyboardUSBBuffer.keycodes[PressedKeys] = KeyPad.Joystick.UpFunction.KeyScanCode;
 80015e2:	7bfb      	ldrb	r3, [r7, #15]
 80015e4:	4a49      	ldr	r2, [pc, #292]	; (800170c <UpdateKeyPadTxBuffers+0x470>)
 80015e6:	f892 1715 	ldrb.w	r1, [r2, #1813]	; 0x715
 80015ea:	4a48      	ldr	r2, [pc, #288]	; (800170c <UpdateKeyPadTxBuffers+0x470>)
 80015ec:	4413      	add	r3, r2
 80015ee:	460a      	mov	r2, r1
 80015f0:	f883 2966 	strb.w	r2, [r3, #2406]	; 0x966
                            }

                            if(KeyPad.Joystick.UpFunction.ModifierKey != KEY_MOD_NOMOD){
 80015f4:	4b45      	ldr	r3, [pc, #276]	; (800170c <UpdateKeyPadTxBuffers+0x470>)
 80015f6:	f893 3716 	ldrb.w	r3, [r3, #1814]	; 0x716
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d005      	beq.n	800160a <UpdateKeyPadTxBuffers+0x36e>
                            	KeyBoardModKeys |= KeyPad.Joystick.UpFunction.ModifierKey;
 80015fe:	4b43      	ldr	r3, [pc, #268]	; (800170c <UpdateKeyPadTxBuffers+0x470>)
 8001600:	f893 2716 	ldrb.w	r2, [r3, #1814]	; 0x716
 8001604:	7b7b      	ldrb	r3, [r7, #13]
 8001606:	4313      	orrs	r3, r2
 8001608:	737b      	strb	r3, [r7, #13]
                            }

                            if(KeyPad.Joystick.UpFunction.MouseClick != MOUSE_CLICK_NONE){
 800160a:	4b40      	ldr	r3, [pc, #256]	; (800170c <UpdateKeyPadTxBuffers+0x470>)
 800160c:	f893 3717 	ldrb.w	r3, [r3, #1815]	; 0x717
 8001610:	2b00      	cmp	r3, #0
 8001612:	d005      	beq.n	8001620 <UpdateKeyPadTxBuffers+0x384>
                            	MouseButtons |= KeyPad.Joystick.UpFunction.MouseClick;
 8001614:	4b3d      	ldr	r3, [pc, #244]	; (800170c <UpdateKeyPadTxBuffers+0x470>)
 8001616:	f893 2717 	ldrb.w	r2, [r3, #1815]	; 0x717
 800161a:	7bbb      	ldrb	r3, [r7, #14]
 800161c:	4313      	orrs	r3, r2
 800161e:	73bb      	strb	r3, [r7, #14]
                            }

                            if(KeyPad.Joystick.UpFunction.MouseWheel != MOUSE_WHEEL_NO_MOVE){
 8001620:	4b3a      	ldr	r3, [pc, #232]	; (800170c <UpdateKeyPadTxBuffers+0x470>)
 8001622:	f993 3718 	ldrsb.w	r3, [r3, #1816]	; 0x718
 8001626:	2b00      	cmp	r3, #0
 8001628:	d007      	beq.n	800163a <UpdateKeyPadTxBuffers+0x39e>
                                WheelMovement += KeyPad.Joystick.UpFunction.MouseWheel;
 800162a:	4b38      	ldr	r3, [pc, #224]	; (800170c <UpdateKeyPadTxBuffers+0x470>)
 800162c:	f993 3718 	ldrsb.w	r3, [r3, #1816]	; 0x718
 8001630:	b2da      	uxtb	r2, r3
 8001632:	7abb      	ldrb	r3, [r7, #10]
 8001634:	4413      	add	r3, r2
 8001636:	b2db      	uxtb	r3, r3
 8001638:	72bb      	strb	r3, [r7, #10]
                            }
                            PressedKeys++;
 800163a:	7bfb      	ldrb	r3, [r7, #15]
 800163c:	3301      	adds	r3, #1
 800163e:	73fb      	strb	r3, [r7, #15]

                            if(JoystickStatus == JoystickChanged){
 8001640:	79bb      	ldrb	r3, [r7, #6]
 8001642:	2b00      	cmp	r3, #0
 8001644:	f040 823a 	bne.w	8001abc <UpdateKeyPadTxBuffers+0x820>
                            	if(KeyPad.Joystick.UpFunction.KeyScanCode != KEY_NONE || KeyPad.Joystick.UpFunction.ModifierKey != KEY_MOD_NOMOD){
 8001648:	4b30      	ldr	r3, [pc, #192]	; (800170c <UpdateKeyPadTxBuffers+0x470>)
 800164a:	f893 3715 	ldrb.w	r3, [r3, #1813]	; 0x715
 800164e:	2b00      	cmp	r3, #0
 8001650:	d104      	bne.n	800165c <UpdateKeyPadTxBuffers+0x3c0>
 8001652:	4b2e      	ldr	r3, [pc, #184]	; (800170c <UpdateKeyPadTxBuffers+0x470>)
 8001654:	f893 3716 	ldrb.w	r3, [r3, #1814]	; 0x716
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <UpdateKeyPadTxBuffers+0x3c4>
                            		KeyboardStatus = KeyboardDataAvailable;
 800165c:	2302      	movs	r3, #2
 800165e:	733b      	strb	r3, [r7, #12]
                            	}

                            	if(KeyPad.Joystick.UpFunction.MouseClick != MOUSE_CLICK_NONE){
 8001660:	4b2a      	ldr	r3, [pc, #168]	; (800170c <UpdateKeyPadTxBuffers+0x470>)
 8001662:	f893 3717 	ldrb.w	r3, [r3, #1815]	; 0x717
 8001666:	2b00      	cmp	r3, #0
 8001668:	f000 8228 	beq.w	8001abc <UpdateKeyPadTxBuffers+0x820>
                            		MouseStatus = MouseDataAvailable;
 800166c:	2301      	movs	r3, #1
 800166e:	72fb      	strb	r3, [r7, #11]
                            	}
                            }
					break;
 8001670:	e224      	b.n	8001abc <UpdateKeyPadTxBuffers+0x820>
			case(Joystick_UpRight):
                            if(KeyPad.Joystick.UpRightFunction.KeyScanCode != KEY_NONE){
 8001672:	4b26      	ldr	r3, [pc, #152]	; (800170c <UpdateKeyPadTxBuffers+0x470>)
 8001674:	f893 3711 	ldrb.w	r3, [r3, #1809]	; 0x711
 8001678:	2b00      	cmp	r3, #0
 800167a:	d008      	beq.n	800168e <UpdateKeyPadTxBuffers+0x3f2>
                                KeyPad.KeyboardUSBBuffer.keycodes[PressedKeys] = KeyPad.Joystick.UpRightFunction.KeyScanCode;
 800167c:	7bfb      	ldrb	r3, [r7, #15]
 800167e:	4a23      	ldr	r2, [pc, #140]	; (800170c <UpdateKeyPadTxBuffers+0x470>)
 8001680:	f892 1711 	ldrb.w	r1, [r2, #1809]	; 0x711
 8001684:	4a21      	ldr	r2, [pc, #132]	; (800170c <UpdateKeyPadTxBuffers+0x470>)
 8001686:	4413      	add	r3, r2
 8001688:	460a      	mov	r2, r1
 800168a:	f883 2966 	strb.w	r2, [r3, #2406]	; 0x966
                            }

                            if(KeyPad.Joystick.UpRightFunction.ModifierKey != KEY_MOD_NOMOD){
 800168e:	4b1f      	ldr	r3, [pc, #124]	; (800170c <UpdateKeyPadTxBuffers+0x470>)
 8001690:	f893 3712 	ldrb.w	r3, [r3, #1810]	; 0x712
 8001694:	2b00      	cmp	r3, #0
 8001696:	d005      	beq.n	80016a4 <UpdateKeyPadTxBuffers+0x408>
                            	KeyBoardModKeys |= KeyPad.Joystick.UpRightFunction.ModifierKey;
 8001698:	4b1c      	ldr	r3, [pc, #112]	; (800170c <UpdateKeyPadTxBuffers+0x470>)
 800169a:	f893 2712 	ldrb.w	r2, [r3, #1810]	; 0x712
 800169e:	7b7b      	ldrb	r3, [r7, #13]
 80016a0:	4313      	orrs	r3, r2
 80016a2:	737b      	strb	r3, [r7, #13]
                            }

                            if(KeyPad.Joystick.UpRightFunction.MouseClick != MOUSE_CLICK_NONE){
 80016a4:	4b19      	ldr	r3, [pc, #100]	; (800170c <UpdateKeyPadTxBuffers+0x470>)
 80016a6:	f893 3713 	ldrb.w	r3, [r3, #1811]	; 0x713
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d005      	beq.n	80016ba <UpdateKeyPadTxBuffers+0x41e>
                            	MouseButtons |= KeyPad.Joystick.UpRightFunction.MouseClick;
 80016ae:	4b17      	ldr	r3, [pc, #92]	; (800170c <UpdateKeyPadTxBuffers+0x470>)
 80016b0:	f893 2713 	ldrb.w	r2, [r3, #1811]	; 0x713
 80016b4:	7bbb      	ldrb	r3, [r7, #14]
 80016b6:	4313      	orrs	r3, r2
 80016b8:	73bb      	strb	r3, [r7, #14]
                            }

                            if(KeyPad.Joystick.UpRightFunction.MouseWheel != MOUSE_WHEEL_NO_MOVE){
 80016ba:	4b14      	ldr	r3, [pc, #80]	; (800170c <UpdateKeyPadTxBuffers+0x470>)
 80016bc:	f993 3714 	ldrsb.w	r3, [r3, #1812]	; 0x714
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d007      	beq.n	80016d4 <UpdateKeyPadTxBuffers+0x438>
                                WheelMovement += KeyPad.Joystick.UpRightFunction.MouseWheel;
 80016c4:	4b11      	ldr	r3, [pc, #68]	; (800170c <UpdateKeyPadTxBuffers+0x470>)
 80016c6:	f993 3714 	ldrsb.w	r3, [r3, #1812]	; 0x714
 80016ca:	b2da      	uxtb	r2, r3
 80016cc:	7abb      	ldrb	r3, [r7, #10]
 80016ce:	4413      	add	r3, r2
 80016d0:	b2db      	uxtb	r3, r3
 80016d2:	72bb      	strb	r3, [r7, #10]
                            }
                            PressedKeys++;
 80016d4:	7bfb      	ldrb	r3, [r7, #15]
 80016d6:	3301      	adds	r3, #1
 80016d8:	73fb      	strb	r3, [r7, #15]

                            if(JoystickStatus == JoystickChanged){
 80016da:	79bb      	ldrb	r3, [r7, #6]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	f040 81ef 	bne.w	8001ac0 <UpdateKeyPadTxBuffers+0x824>
                            	if(KeyPad.Joystick.UpRightFunction.KeyScanCode != KEY_NONE || KeyPad.Joystick.UpRightFunction.ModifierKey != KEY_MOD_NOMOD){
 80016e2:	4b0a      	ldr	r3, [pc, #40]	; (800170c <UpdateKeyPadTxBuffers+0x470>)
 80016e4:	f893 3711 	ldrb.w	r3, [r3, #1809]	; 0x711
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d104      	bne.n	80016f6 <UpdateKeyPadTxBuffers+0x45a>
 80016ec:	4b07      	ldr	r3, [pc, #28]	; (800170c <UpdateKeyPadTxBuffers+0x470>)
 80016ee:	f893 3712 	ldrb.w	r3, [r3, #1810]	; 0x712
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <UpdateKeyPadTxBuffers+0x45e>
                            		KeyboardStatus = KeyboardDataAvailable;
 80016f6:	2302      	movs	r3, #2
 80016f8:	733b      	strb	r3, [r7, #12]
                            	}

                            	if(KeyPad.Joystick.UpRightFunction.MouseClick != MOUSE_CLICK_NONE){
 80016fa:	4b04      	ldr	r3, [pc, #16]	; (800170c <UpdateKeyPadTxBuffers+0x470>)
 80016fc:	f893 3713 	ldrb.w	r3, [r3, #1811]	; 0x713
 8001700:	2b00      	cmp	r3, #0
 8001702:	f000 81dd 	beq.w	8001ac0 <UpdateKeyPadTxBuffers+0x824>
                            		MouseStatus = MouseDataAvailable;
 8001706:	2301      	movs	r3, #1
 8001708:	72fb      	strb	r3, [r7, #11]
                            	}
                            }
					break;
 800170a:	e1d9      	b.n	8001ac0 <UpdateKeyPadTxBuffers+0x824>
 800170c:	20000304 	.word	0x20000304
 8001710:	20000a08 	.word	0x20000a08
			case(Joystick_Right):
                            if(KeyPad.Joystick.RightFunction.KeyScanCode != KEY_NONE){
 8001714:	4b99      	ldr	r3, [pc, #612]	; (800197c <UpdateKeyPadTxBuffers+0x6e0>)
 8001716:	f893 370d 	ldrb.w	r3, [r3, #1805]	; 0x70d
 800171a:	2b00      	cmp	r3, #0
 800171c:	d008      	beq.n	8001730 <UpdateKeyPadTxBuffers+0x494>
                                KeyPad.KeyboardUSBBuffer.keycodes[PressedKeys] = KeyPad.Joystick.RightFunction.KeyScanCode;
 800171e:	7bfb      	ldrb	r3, [r7, #15]
 8001720:	4a96      	ldr	r2, [pc, #600]	; (800197c <UpdateKeyPadTxBuffers+0x6e0>)
 8001722:	f892 170d 	ldrb.w	r1, [r2, #1805]	; 0x70d
 8001726:	4a95      	ldr	r2, [pc, #596]	; (800197c <UpdateKeyPadTxBuffers+0x6e0>)
 8001728:	4413      	add	r3, r2
 800172a:	460a      	mov	r2, r1
 800172c:	f883 2966 	strb.w	r2, [r3, #2406]	; 0x966
                            }

                            if(KeyPad.Joystick.RightFunction.ModifierKey != KEY_MOD_NOMOD){
 8001730:	4b92      	ldr	r3, [pc, #584]	; (800197c <UpdateKeyPadTxBuffers+0x6e0>)
 8001732:	f893 370e 	ldrb.w	r3, [r3, #1806]	; 0x70e
 8001736:	2b00      	cmp	r3, #0
 8001738:	d005      	beq.n	8001746 <UpdateKeyPadTxBuffers+0x4aa>
                            	KeyBoardModKeys |= KeyPad.Joystick.RightFunction.ModifierKey;
 800173a:	4b90      	ldr	r3, [pc, #576]	; (800197c <UpdateKeyPadTxBuffers+0x6e0>)
 800173c:	f893 270e 	ldrb.w	r2, [r3, #1806]	; 0x70e
 8001740:	7b7b      	ldrb	r3, [r7, #13]
 8001742:	4313      	orrs	r3, r2
 8001744:	737b      	strb	r3, [r7, #13]
                            }

                            if(KeyPad.Joystick.RightFunction.MouseClick != MOUSE_CLICK_NONE){
 8001746:	4b8d      	ldr	r3, [pc, #564]	; (800197c <UpdateKeyPadTxBuffers+0x6e0>)
 8001748:	f893 370f 	ldrb.w	r3, [r3, #1807]	; 0x70f
 800174c:	2b00      	cmp	r3, #0
 800174e:	d005      	beq.n	800175c <UpdateKeyPadTxBuffers+0x4c0>
                            	MouseButtons |= KeyPad.Joystick.RightFunction.MouseClick;
 8001750:	4b8a      	ldr	r3, [pc, #552]	; (800197c <UpdateKeyPadTxBuffers+0x6e0>)
 8001752:	f893 270f 	ldrb.w	r2, [r3, #1807]	; 0x70f
 8001756:	7bbb      	ldrb	r3, [r7, #14]
 8001758:	4313      	orrs	r3, r2
 800175a:	73bb      	strb	r3, [r7, #14]
                            }

                            if(KeyPad.Joystick.RightFunction.MouseWheel != MOUSE_WHEEL_NO_MOVE){
 800175c:	4b87      	ldr	r3, [pc, #540]	; (800197c <UpdateKeyPadTxBuffers+0x6e0>)
 800175e:	f993 3710 	ldrsb.w	r3, [r3, #1808]	; 0x710
 8001762:	2b00      	cmp	r3, #0
 8001764:	d007      	beq.n	8001776 <UpdateKeyPadTxBuffers+0x4da>
                                WheelMovement += KeyPad.Joystick.RightFunction.MouseWheel;
 8001766:	4b85      	ldr	r3, [pc, #532]	; (800197c <UpdateKeyPadTxBuffers+0x6e0>)
 8001768:	f993 3710 	ldrsb.w	r3, [r3, #1808]	; 0x710
 800176c:	b2da      	uxtb	r2, r3
 800176e:	7abb      	ldrb	r3, [r7, #10]
 8001770:	4413      	add	r3, r2
 8001772:	b2db      	uxtb	r3, r3
 8001774:	72bb      	strb	r3, [r7, #10]
                            }
                            PressedKeys++;
 8001776:	7bfb      	ldrb	r3, [r7, #15]
 8001778:	3301      	adds	r3, #1
 800177a:	73fb      	strb	r3, [r7, #15]

                            if(JoystickStatus == JoystickChanged){
 800177c:	79bb      	ldrb	r3, [r7, #6]
 800177e:	2b00      	cmp	r3, #0
 8001780:	f040 81a0 	bne.w	8001ac4 <UpdateKeyPadTxBuffers+0x828>
                            	if(KeyPad.Joystick.RightFunction.KeyScanCode != KEY_NONE || KeyPad.Joystick.RightFunction.ModifierKey != KEY_MOD_NOMOD){
 8001784:	4b7d      	ldr	r3, [pc, #500]	; (800197c <UpdateKeyPadTxBuffers+0x6e0>)
 8001786:	f893 370d 	ldrb.w	r3, [r3, #1805]	; 0x70d
 800178a:	2b00      	cmp	r3, #0
 800178c:	d104      	bne.n	8001798 <UpdateKeyPadTxBuffers+0x4fc>
 800178e:	4b7b      	ldr	r3, [pc, #492]	; (800197c <UpdateKeyPadTxBuffers+0x6e0>)
 8001790:	f893 370e 	ldrb.w	r3, [r3, #1806]	; 0x70e
 8001794:	2b00      	cmp	r3, #0
 8001796:	d001      	beq.n	800179c <UpdateKeyPadTxBuffers+0x500>
                            		KeyboardStatus = KeyboardDataAvailable;
 8001798:	2302      	movs	r3, #2
 800179a:	733b      	strb	r3, [r7, #12]
                            	}

                            	if(KeyPad.Joystick.RightFunction.MouseClick != MOUSE_CLICK_NONE){
 800179c:	4b77      	ldr	r3, [pc, #476]	; (800197c <UpdateKeyPadTxBuffers+0x6e0>)
 800179e:	f893 370f 	ldrb.w	r3, [r3, #1807]	; 0x70f
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	f000 818e 	beq.w	8001ac4 <UpdateKeyPadTxBuffers+0x828>
                            		MouseStatus = MouseDataAvailable;
 80017a8:	2301      	movs	r3, #1
 80017aa:	72fb      	strb	r3, [r7, #11]
                            	}
                            }
					break;
 80017ac:	e18a      	b.n	8001ac4 <UpdateKeyPadTxBuffers+0x828>
			case(Joystick_DownRight):
                            if(KeyPad.Joystick.DownRightFunction.KeyScanCode != KEY_NONE){
 80017ae:	4b73      	ldr	r3, [pc, #460]	; (800197c <UpdateKeyPadTxBuffers+0x6e0>)
 80017b0:	f893 3729 	ldrb.w	r3, [r3, #1833]	; 0x729
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d008      	beq.n	80017ca <UpdateKeyPadTxBuffers+0x52e>
                                KeyPad.KeyboardUSBBuffer.keycodes[PressedKeys] = KeyPad.Joystick.DownRightFunction.KeyScanCode;
 80017b8:	7bfb      	ldrb	r3, [r7, #15]
 80017ba:	4a70      	ldr	r2, [pc, #448]	; (800197c <UpdateKeyPadTxBuffers+0x6e0>)
 80017bc:	f892 1729 	ldrb.w	r1, [r2, #1833]	; 0x729
 80017c0:	4a6e      	ldr	r2, [pc, #440]	; (800197c <UpdateKeyPadTxBuffers+0x6e0>)
 80017c2:	4413      	add	r3, r2
 80017c4:	460a      	mov	r2, r1
 80017c6:	f883 2966 	strb.w	r2, [r3, #2406]	; 0x966
                            }

                            if(KeyPad.Joystick.DownRightFunction.ModifierKey != KEY_MOD_NOMOD){
 80017ca:	4b6c      	ldr	r3, [pc, #432]	; (800197c <UpdateKeyPadTxBuffers+0x6e0>)
 80017cc:	f893 372a 	ldrb.w	r3, [r3, #1834]	; 0x72a
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d005      	beq.n	80017e0 <UpdateKeyPadTxBuffers+0x544>
                            	KeyBoardModKeys |= KeyPad.Joystick.DownRightFunction.ModifierKey;
 80017d4:	4b69      	ldr	r3, [pc, #420]	; (800197c <UpdateKeyPadTxBuffers+0x6e0>)
 80017d6:	f893 272a 	ldrb.w	r2, [r3, #1834]	; 0x72a
 80017da:	7b7b      	ldrb	r3, [r7, #13]
 80017dc:	4313      	orrs	r3, r2
 80017de:	737b      	strb	r3, [r7, #13]
                            }

                            if(KeyPad.Joystick.DownRightFunction.MouseClick != MOUSE_CLICK_NONE){
 80017e0:	4b66      	ldr	r3, [pc, #408]	; (800197c <UpdateKeyPadTxBuffers+0x6e0>)
 80017e2:	f893 372b 	ldrb.w	r3, [r3, #1835]	; 0x72b
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d005      	beq.n	80017f6 <UpdateKeyPadTxBuffers+0x55a>
                            	MouseButtons |= KeyPad.Joystick.DownRightFunction.MouseClick;
 80017ea:	4b64      	ldr	r3, [pc, #400]	; (800197c <UpdateKeyPadTxBuffers+0x6e0>)
 80017ec:	f893 272b 	ldrb.w	r2, [r3, #1835]	; 0x72b
 80017f0:	7bbb      	ldrb	r3, [r7, #14]
 80017f2:	4313      	orrs	r3, r2
 80017f4:	73bb      	strb	r3, [r7, #14]
                            }

                            if(KeyPad.Joystick.DownRightFunction.MouseWheel != MOUSE_WHEEL_NO_MOVE){
 80017f6:	4b61      	ldr	r3, [pc, #388]	; (800197c <UpdateKeyPadTxBuffers+0x6e0>)
 80017f8:	f993 372c 	ldrsb.w	r3, [r3, #1836]	; 0x72c
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d007      	beq.n	8001810 <UpdateKeyPadTxBuffers+0x574>
                                WheelMovement += KeyPad.Joystick.DownRightFunction.MouseWheel;
 8001800:	4b5e      	ldr	r3, [pc, #376]	; (800197c <UpdateKeyPadTxBuffers+0x6e0>)
 8001802:	f993 372c 	ldrsb.w	r3, [r3, #1836]	; 0x72c
 8001806:	b2da      	uxtb	r2, r3
 8001808:	7abb      	ldrb	r3, [r7, #10]
 800180a:	4413      	add	r3, r2
 800180c:	b2db      	uxtb	r3, r3
 800180e:	72bb      	strb	r3, [r7, #10]
                            }
                            PressedKeys++;
 8001810:	7bfb      	ldrb	r3, [r7, #15]
 8001812:	3301      	adds	r3, #1
 8001814:	73fb      	strb	r3, [r7, #15]

                            if(JoystickStatus == JoystickChanged){
 8001816:	79bb      	ldrb	r3, [r7, #6]
 8001818:	2b00      	cmp	r3, #0
 800181a:	f040 8155 	bne.w	8001ac8 <UpdateKeyPadTxBuffers+0x82c>
                            	if(KeyPad.Joystick.DownRightFunction.KeyScanCode != KEY_NONE || KeyPad.Joystick.DownRightFunction.ModifierKey != KEY_MOD_NOMOD){
 800181e:	4b57      	ldr	r3, [pc, #348]	; (800197c <UpdateKeyPadTxBuffers+0x6e0>)
 8001820:	f893 3729 	ldrb.w	r3, [r3, #1833]	; 0x729
 8001824:	2b00      	cmp	r3, #0
 8001826:	d104      	bne.n	8001832 <UpdateKeyPadTxBuffers+0x596>
 8001828:	4b54      	ldr	r3, [pc, #336]	; (800197c <UpdateKeyPadTxBuffers+0x6e0>)
 800182a:	f893 372a 	ldrb.w	r3, [r3, #1834]	; 0x72a
 800182e:	2b00      	cmp	r3, #0
 8001830:	d001      	beq.n	8001836 <UpdateKeyPadTxBuffers+0x59a>
                            		KeyboardStatus = KeyboardDataAvailable;
 8001832:	2302      	movs	r3, #2
 8001834:	733b      	strb	r3, [r7, #12]
                            	}

                            	if(KeyPad.Joystick.DownRightFunction.MouseClick != MOUSE_CLICK_NONE){
 8001836:	4b51      	ldr	r3, [pc, #324]	; (800197c <UpdateKeyPadTxBuffers+0x6e0>)
 8001838:	f893 372b 	ldrb.w	r3, [r3, #1835]	; 0x72b
 800183c:	2b00      	cmp	r3, #0
 800183e:	f000 8143 	beq.w	8001ac8 <UpdateKeyPadTxBuffers+0x82c>
                            		MouseStatus = MouseDataAvailable;
 8001842:	2301      	movs	r3, #1
 8001844:	72fb      	strb	r3, [r7, #11]
                            	}
                            }
					break;
 8001846:	e13f      	b.n	8001ac8 <UpdateKeyPadTxBuffers+0x82c>
			case(Joystick_Down):
                            if(KeyPad.Joystick.DownFunction.KeyScanCode != KEY_NONE){
 8001848:	4b4c      	ldr	r3, [pc, #304]	; (800197c <UpdateKeyPadTxBuffers+0x6e0>)
 800184a:	f893 3725 	ldrb.w	r3, [r3, #1829]	; 0x725
 800184e:	2b00      	cmp	r3, #0
 8001850:	d008      	beq.n	8001864 <UpdateKeyPadTxBuffers+0x5c8>
                                KeyPad.KeyboardUSBBuffer.keycodes[PressedKeys] = KeyPad.Joystick.DownFunction.KeyScanCode;
 8001852:	7bfb      	ldrb	r3, [r7, #15]
 8001854:	4a49      	ldr	r2, [pc, #292]	; (800197c <UpdateKeyPadTxBuffers+0x6e0>)
 8001856:	f892 1725 	ldrb.w	r1, [r2, #1829]	; 0x725
 800185a:	4a48      	ldr	r2, [pc, #288]	; (800197c <UpdateKeyPadTxBuffers+0x6e0>)
 800185c:	4413      	add	r3, r2
 800185e:	460a      	mov	r2, r1
 8001860:	f883 2966 	strb.w	r2, [r3, #2406]	; 0x966
                            }

                            if(KeyPad.Joystick.DownFunction.ModifierKey != KEY_MOD_NOMOD){
 8001864:	4b45      	ldr	r3, [pc, #276]	; (800197c <UpdateKeyPadTxBuffers+0x6e0>)
 8001866:	f893 3726 	ldrb.w	r3, [r3, #1830]	; 0x726
 800186a:	2b00      	cmp	r3, #0
 800186c:	d005      	beq.n	800187a <UpdateKeyPadTxBuffers+0x5de>
                            	KeyBoardModKeys |= KeyPad.Joystick.DownFunction.ModifierKey;
 800186e:	4b43      	ldr	r3, [pc, #268]	; (800197c <UpdateKeyPadTxBuffers+0x6e0>)
 8001870:	f893 2726 	ldrb.w	r2, [r3, #1830]	; 0x726
 8001874:	7b7b      	ldrb	r3, [r7, #13]
 8001876:	4313      	orrs	r3, r2
 8001878:	737b      	strb	r3, [r7, #13]
                            }

                            if(KeyPad.Joystick.DownFunction.MouseClick != MOUSE_CLICK_NONE){
 800187a:	4b40      	ldr	r3, [pc, #256]	; (800197c <UpdateKeyPadTxBuffers+0x6e0>)
 800187c:	f893 3727 	ldrb.w	r3, [r3, #1831]	; 0x727
 8001880:	2b00      	cmp	r3, #0
 8001882:	d005      	beq.n	8001890 <UpdateKeyPadTxBuffers+0x5f4>
                            	MouseButtons |= KeyPad.Joystick.DownFunction.MouseClick;
 8001884:	4b3d      	ldr	r3, [pc, #244]	; (800197c <UpdateKeyPadTxBuffers+0x6e0>)
 8001886:	f893 2727 	ldrb.w	r2, [r3, #1831]	; 0x727
 800188a:	7bbb      	ldrb	r3, [r7, #14]
 800188c:	4313      	orrs	r3, r2
 800188e:	73bb      	strb	r3, [r7, #14]
                            }

                            if(KeyPad.Joystick.DownFunction.MouseWheel != MOUSE_WHEEL_NO_MOVE){
 8001890:	4b3a      	ldr	r3, [pc, #232]	; (800197c <UpdateKeyPadTxBuffers+0x6e0>)
 8001892:	f993 3728 	ldrsb.w	r3, [r3, #1832]	; 0x728
 8001896:	2b00      	cmp	r3, #0
 8001898:	d007      	beq.n	80018aa <UpdateKeyPadTxBuffers+0x60e>
                                WheelMovement += KeyPad.Joystick.DownFunction.MouseWheel;
 800189a:	4b38      	ldr	r3, [pc, #224]	; (800197c <UpdateKeyPadTxBuffers+0x6e0>)
 800189c:	f993 3728 	ldrsb.w	r3, [r3, #1832]	; 0x728
 80018a0:	b2da      	uxtb	r2, r3
 80018a2:	7abb      	ldrb	r3, [r7, #10]
 80018a4:	4413      	add	r3, r2
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	72bb      	strb	r3, [r7, #10]
                            }
                            PressedKeys++;
 80018aa:	7bfb      	ldrb	r3, [r7, #15]
 80018ac:	3301      	adds	r3, #1
 80018ae:	73fb      	strb	r3, [r7, #15]

                            if(JoystickStatus == JoystickChanged){
 80018b0:	79bb      	ldrb	r3, [r7, #6]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	f040 810a 	bne.w	8001acc <UpdateKeyPadTxBuffers+0x830>
                            	if(KeyPad.Joystick.DownFunction.KeyScanCode != KEY_NONE || KeyPad.Joystick.DownFunction.ModifierKey != KEY_MOD_NOMOD){
 80018b8:	4b30      	ldr	r3, [pc, #192]	; (800197c <UpdateKeyPadTxBuffers+0x6e0>)
 80018ba:	f893 3725 	ldrb.w	r3, [r3, #1829]	; 0x725
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d104      	bne.n	80018cc <UpdateKeyPadTxBuffers+0x630>
 80018c2:	4b2e      	ldr	r3, [pc, #184]	; (800197c <UpdateKeyPadTxBuffers+0x6e0>)
 80018c4:	f893 3726 	ldrb.w	r3, [r3, #1830]	; 0x726
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d001      	beq.n	80018d0 <UpdateKeyPadTxBuffers+0x634>
                            		KeyboardStatus = KeyboardDataAvailable;
 80018cc:	2302      	movs	r3, #2
 80018ce:	733b      	strb	r3, [r7, #12]
                            	}

                            	if(KeyPad.Joystick.DownFunction.MouseClick != MOUSE_CLICK_NONE){
 80018d0:	4b2a      	ldr	r3, [pc, #168]	; (800197c <UpdateKeyPadTxBuffers+0x6e0>)
 80018d2:	f893 3727 	ldrb.w	r3, [r3, #1831]	; 0x727
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	f000 80f8 	beq.w	8001acc <UpdateKeyPadTxBuffers+0x830>
                            		MouseStatus = MouseDataAvailable;
 80018dc:	2301      	movs	r3, #1
 80018de:	72fb      	strb	r3, [r7, #11]
                            	}
                            }
					break;
 80018e0:	e0f4      	b.n	8001acc <UpdateKeyPadTxBuffers+0x830>
			case(Joystick_DownLeft):
                            if(KeyPad.Joystick.DownLeftFunction.KeyScanCode != KEY_NONE){
 80018e2:	4b26      	ldr	r3, [pc, #152]	; (800197c <UpdateKeyPadTxBuffers+0x6e0>)
 80018e4:	f893 3721 	ldrb.w	r3, [r3, #1825]	; 0x721
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d008      	beq.n	80018fe <UpdateKeyPadTxBuffers+0x662>
                                KeyPad.KeyboardUSBBuffer.keycodes[PressedKeys] = KeyPad.Joystick.DownLeftFunction.KeyScanCode;
 80018ec:	7bfb      	ldrb	r3, [r7, #15]
 80018ee:	4a23      	ldr	r2, [pc, #140]	; (800197c <UpdateKeyPadTxBuffers+0x6e0>)
 80018f0:	f892 1721 	ldrb.w	r1, [r2, #1825]	; 0x721
 80018f4:	4a21      	ldr	r2, [pc, #132]	; (800197c <UpdateKeyPadTxBuffers+0x6e0>)
 80018f6:	4413      	add	r3, r2
 80018f8:	460a      	mov	r2, r1
 80018fa:	f883 2966 	strb.w	r2, [r3, #2406]	; 0x966
                            }

                            if(KeyPad.Joystick.DownLeftFunction.ModifierKey != KEY_MOD_NOMOD){
 80018fe:	4b1f      	ldr	r3, [pc, #124]	; (800197c <UpdateKeyPadTxBuffers+0x6e0>)
 8001900:	f893 3722 	ldrb.w	r3, [r3, #1826]	; 0x722
 8001904:	2b00      	cmp	r3, #0
 8001906:	d005      	beq.n	8001914 <UpdateKeyPadTxBuffers+0x678>
                            	KeyBoardModKeys |= KeyPad.Joystick.DownLeftFunction.ModifierKey;
 8001908:	4b1c      	ldr	r3, [pc, #112]	; (800197c <UpdateKeyPadTxBuffers+0x6e0>)
 800190a:	f893 2722 	ldrb.w	r2, [r3, #1826]	; 0x722
 800190e:	7b7b      	ldrb	r3, [r7, #13]
 8001910:	4313      	orrs	r3, r2
 8001912:	737b      	strb	r3, [r7, #13]
                            }

                            if(KeyPad.Joystick.DownLeftFunction.MouseClick != MOUSE_CLICK_NONE){
 8001914:	4b19      	ldr	r3, [pc, #100]	; (800197c <UpdateKeyPadTxBuffers+0x6e0>)
 8001916:	f893 3723 	ldrb.w	r3, [r3, #1827]	; 0x723
 800191a:	2b00      	cmp	r3, #0
 800191c:	d005      	beq.n	800192a <UpdateKeyPadTxBuffers+0x68e>
                            	MouseButtons |= KeyPad.Joystick.DownLeftFunction.MouseClick;
 800191e:	4b17      	ldr	r3, [pc, #92]	; (800197c <UpdateKeyPadTxBuffers+0x6e0>)
 8001920:	f893 2723 	ldrb.w	r2, [r3, #1827]	; 0x723
 8001924:	7bbb      	ldrb	r3, [r7, #14]
 8001926:	4313      	orrs	r3, r2
 8001928:	73bb      	strb	r3, [r7, #14]
                            }

                            if(KeyPad.Joystick.DownLeftFunction.MouseWheel != MOUSE_WHEEL_NO_MOVE){
 800192a:	4b14      	ldr	r3, [pc, #80]	; (800197c <UpdateKeyPadTxBuffers+0x6e0>)
 800192c:	f993 3724 	ldrsb.w	r3, [r3, #1828]	; 0x724
 8001930:	2b00      	cmp	r3, #0
 8001932:	d007      	beq.n	8001944 <UpdateKeyPadTxBuffers+0x6a8>
                                WheelMovement += KeyPad.Joystick.DownLeftFunction.MouseWheel;
 8001934:	4b11      	ldr	r3, [pc, #68]	; (800197c <UpdateKeyPadTxBuffers+0x6e0>)
 8001936:	f993 3724 	ldrsb.w	r3, [r3, #1828]	; 0x724
 800193a:	b2da      	uxtb	r2, r3
 800193c:	7abb      	ldrb	r3, [r7, #10]
 800193e:	4413      	add	r3, r2
 8001940:	b2db      	uxtb	r3, r3
 8001942:	72bb      	strb	r3, [r7, #10]
                            }
                            PressedKeys++;
 8001944:	7bfb      	ldrb	r3, [r7, #15]
 8001946:	3301      	adds	r3, #1
 8001948:	73fb      	strb	r3, [r7, #15]

                            if(JoystickStatus == JoystickChanged){
 800194a:	79bb      	ldrb	r3, [r7, #6]
 800194c:	2b00      	cmp	r3, #0
 800194e:	f040 80bf 	bne.w	8001ad0 <UpdateKeyPadTxBuffers+0x834>
                            	if(KeyPad.Joystick.DownLeftFunction.KeyScanCode != KEY_NONE || KeyPad.Joystick.DownLeftFunction.ModifierKey != KEY_MOD_NOMOD){
 8001952:	4b0a      	ldr	r3, [pc, #40]	; (800197c <UpdateKeyPadTxBuffers+0x6e0>)
 8001954:	f893 3721 	ldrb.w	r3, [r3, #1825]	; 0x721
 8001958:	2b00      	cmp	r3, #0
 800195a:	d104      	bne.n	8001966 <UpdateKeyPadTxBuffers+0x6ca>
 800195c:	4b07      	ldr	r3, [pc, #28]	; (800197c <UpdateKeyPadTxBuffers+0x6e0>)
 800195e:	f893 3722 	ldrb.w	r3, [r3, #1826]	; 0x722
 8001962:	2b00      	cmp	r3, #0
 8001964:	d001      	beq.n	800196a <UpdateKeyPadTxBuffers+0x6ce>
                            		KeyboardStatus = KeyboardDataAvailable;
 8001966:	2302      	movs	r3, #2
 8001968:	733b      	strb	r3, [r7, #12]
                            	}

                            	if(KeyPad.Joystick.DownLeftFunction.MouseClick != MOUSE_CLICK_NONE){
 800196a:	4b04      	ldr	r3, [pc, #16]	; (800197c <UpdateKeyPadTxBuffers+0x6e0>)
 800196c:	f893 3723 	ldrb.w	r3, [r3, #1827]	; 0x723
 8001970:	2b00      	cmp	r3, #0
 8001972:	f000 80ad 	beq.w	8001ad0 <UpdateKeyPadTxBuffers+0x834>
                            		MouseStatus = MouseDataAvailable;
 8001976:	2301      	movs	r3, #1
 8001978:	72fb      	strb	r3, [r7, #11]
                            	}
                            }
					break;
 800197a:	e0a9      	b.n	8001ad0 <UpdateKeyPadTxBuffers+0x834>
 800197c:	20000304 	.word	0x20000304
			case(Joystick_Left):
                            if(KeyPad.Joystick.LeftFunction.KeyScanCode != KEY_NONE){
 8001980:	4b77      	ldr	r3, [pc, #476]	; (8001b60 <UpdateKeyPadTxBuffers+0x8c4>)
 8001982:	f893 371d 	ldrb.w	r3, [r3, #1821]	; 0x71d
 8001986:	2b00      	cmp	r3, #0
 8001988:	d008      	beq.n	800199c <UpdateKeyPadTxBuffers+0x700>
                                KeyPad.KeyboardUSBBuffer.keycodes[PressedKeys] = KeyPad.Joystick.LeftFunction.KeyScanCode;
 800198a:	7bfb      	ldrb	r3, [r7, #15]
 800198c:	4a74      	ldr	r2, [pc, #464]	; (8001b60 <UpdateKeyPadTxBuffers+0x8c4>)
 800198e:	f892 171d 	ldrb.w	r1, [r2, #1821]	; 0x71d
 8001992:	4a73      	ldr	r2, [pc, #460]	; (8001b60 <UpdateKeyPadTxBuffers+0x8c4>)
 8001994:	4413      	add	r3, r2
 8001996:	460a      	mov	r2, r1
 8001998:	f883 2966 	strb.w	r2, [r3, #2406]	; 0x966
                            }

                            if(KeyPad.Joystick.LeftFunction.ModifierKey != KEY_MOD_NOMOD){
 800199c:	4b70      	ldr	r3, [pc, #448]	; (8001b60 <UpdateKeyPadTxBuffers+0x8c4>)
 800199e:	f893 371e 	ldrb.w	r3, [r3, #1822]	; 0x71e
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d005      	beq.n	80019b2 <UpdateKeyPadTxBuffers+0x716>
                            	KeyBoardModKeys |= KeyPad.Joystick.LeftFunction.ModifierKey;
 80019a6:	4b6e      	ldr	r3, [pc, #440]	; (8001b60 <UpdateKeyPadTxBuffers+0x8c4>)
 80019a8:	f893 271e 	ldrb.w	r2, [r3, #1822]	; 0x71e
 80019ac:	7b7b      	ldrb	r3, [r7, #13]
 80019ae:	4313      	orrs	r3, r2
 80019b0:	737b      	strb	r3, [r7, #13]
                            }

                            if(KeyPad.Joystick.LeftFunction.MouseClick != MOUSE_CLICK_NONE){
 80019b2:	4b6b      	ldr	r3, [pc, #428]	; (8001b60 <UpdateKeyPadTxBuffers+0x8c4>)
 80019b4:	f893 371f 	ldrb.w	r3, [r3, #1823]	; 0x71f
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d005      	beq.n	80019c8 <UpdateKeyPadTxBuffers+0x72c>
                            	MouseButtons |= KeyPad.Joystick.LeftFunction.MouseClick;
 80019bc:	4b68      	ldr	r3, [pc, #416]	; (8001b60 <UpdateKeyPadTxBuffers+0x8c4>)
 80019be:	f893 271f 	ldrb.w	r2, [r3, #1823]	; 0x71f
 80019c2:	7bbb      	ldrb	r3, [r7, #14]
 80019c4:	4313      	orrs	r3, r2
 80019c6:	73bb      	strb	r3, [r7, #14]
                            }

                            if(KeyPad.Joystick.LeftFunction.MouseWheel != MOUSE_WHEEL_NO_MOVE){
 80019c8:	4b65      	ldr	r3, [pc, #404]	; (8001b60 <UpdateKeyPadTxBuffers+0x8c4>)
 80019ca:	f993 3720 	ldrsb.w	r3, [r3, #1824]	; 0x720
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d007      	beq.n	80019e2 <UpdateKeyPadTxBuffers+0x746>
                                WheelMovement += KeyPad.Joystick.LeftFunction.MouseWheel;
 80019d2:	4b63      	ldr	r3, [pc, #396]	; (8001b60 <UpdateKeyPadTxBuffers+0x8c4>)
 80019d4:	f993 3720 	ldrsb.w	r3, [r3, #1824]	; 0x720
 80019d8:	b2da      	uxtb	r2, r3
 80019da:	7abb      	ldrb	r3, [r7, #10]
 80019dc:	4413      	add	r3, r2
 80019de:	b2db      	uxtb	r3, r3
 80019e0:	72bb      	strb	r3, [r7, #10]
                            }
                            PressedKeys++;
 80019e2:	7bfb      	ldrb	r3, [r7, #15]
 80019e4:	3301      	adds	r3, #1
 80019e6:	73fb      	strb	r3, [r7, #15]

                            if(JoystickStatus == JoystickChanged){
 80019e8:	79bb      	ldrb	r3, [r7, #6]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d172      	bne.n	8001ad4 <UpdateKeyPadTxBuffers+0x838>
                            	if(KeyPad.Joystick.LeftFunction.KeyScanCode != KEY_NONE || KeyPad.Joystick.LeftFunction.ModifierKey != KEY_MOD_NOMOD){
 80019ee:	4b5c      	ldr	r3, [pc, #368]	; (8001b60 <UpdateKeyPadTxBuffers+0x8c4>)
 80019f0:	f893 371d 	ldrb.w	r3, [r3, #1821]	; 0x71d
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d104      	bne.n	8001a02 <UpdateKeyPadTxBuffers+0x766>
 80019f8:	4b59      	ldr	r3, [pc, #356]	; (8001b60 <UpdateKeyPadTxBuffers+0x8c4>)
 80019fa:	f893 371e 	ldrb.w	r3, [r3, #1822]	; 0x71e
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d001      	beq.n	8001a06 <UpdateKeyPadTxBuffers+0x76a>
                            		KeyboardStatus = KeyboardDataAvailable;
 8001a02:	2302      	movs	r3, #2
 8001a04:	733b      	strb	r3, [r7, #12]
                            	}

                            	if(KeyPad.Joystick.LeftFunction.MouseClick != MOUSE_CLICK_NONE){
 8001a06:	4b56      	ldr	r3, [pc, #344]	; (8001b60 <UpdateKeyPadTxBuffers+0x8c4>)
 8001a08:	f893 371f 	ldrb.w	r3, [r3, #1823]	; 0x71f
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d061      	beq.n	8001ad4 <UpdateKeyPadTxBuffers+0x838>
                            		MouseStatus = MouseDataAvailable;
 8001a10:	2301      	movs	r3, #1
 8001a12:	72fb      	strb	r3, [r7, #11]
                            	}
                            }
					break;
 8001a14:	e05e      	b.n	8001ad4 <UpdateKeyPadTxBuffers+0x838>
			case(Joystick_UpLeft):
                            if(KeyPad.Joystick.UpLeftFunction.KeyScanCode != KEY_NONE){
 8001a16:	4b52      	ldr	r3, [pc, #328]	; (8001b60 <UpdateKeyPadTxBuffers+0x8c4>)
 8001a18:	f893 3719 	ldrb.w	r3, [r3, #1817]	; 0x719
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d008      	beq.n	8001a32 <UpdateKeyPadTxBuffers+0x796>
                                KeyPad.KeyboardUSBBuffer.keycodes[PressedKeys] = KeyPad.Joystick.UpLeftFunction.KeyScanCode;
 8001a20:	7bfb      	ldrb	r3, [r7, #15]
 8001a22:	4a4f      	ldr	r2, [pc, #316]	; (8001b60 <UpdateKeyPadTxBuffers+0x8c4>)
 8001a24:	f892 1719 	ldrb.w	r1, [r2, #1817]	; 0x719
 8001a28:	4a4d      	ldr	r2, [pc, #308]	; (8001b60 <UpdateKeyPadTxBuffers+0x8c4>)
 8001a2a:	4413      	add	r3, r2
 8001a2c:	460a      	mov	r2, r1
 8001a2e:	f883 2966 	strb.w	r2, [r3, #2406]	; 0x966
                            }

                            if(KeyPad.Joystick.UpLeftFunction.ModifierKey != KEY_MOD_NOMOD){
 8001a32:	4b4b      	ldr	r3, [pc, #300]	; (8001b60 <UpdateKeyPadTxBuffers+0x8c4>)
 8001a34:	f893 371a 	ldrb.w	r3, [r3, #1818]	; 0x71a
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d005      	beq.n	8001a48 <UpdateKeyPadTxBuffers+0x7ac>
                            	KeyBoardModKeys |= KeyPad.Joystick.UpLeftFunction.ModifierKey;
 8001a3c:	4b48      	ldr	r3, [pc, #288]	; (8001b60 <UpdateKeyPadTxBuffers+0x8c4>)
 8001a3e:	f893 271a 	ldrb.w	r2, [r3, #1818]	; 0x71a
 8001a42:	7b7b      	ldrb	r3, [r7, #13]
 8001a44:	4313      	orrs	r3, r2
 8001a46:	737b      	strb	r3, [r7, #13]
                            }

                            if(KeyPad.Joystick.UpLeftFunction.MouseClick != MOUSE_CLICK_NONE){
 8001a48:	4b45      	ldr	r3, [pc, #276]	; (8001b60 <UpdateKeyPadTxBuffers+0x8c4>)
 8001a4a:	f893 371b 	ldrb.w	r3, [r3, #1819]	; 0x71b
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d005      	beq.n	8001a5e <UpdateKeyPadTxBuffers+0x7c2>
                            	MouseButtons |= KeyPad.Joystick.UpLeftFunction.MouseClick;
 8001a52:	4b43      	ldr	r3, [pc, #268]	; (8001b60 <UpdateKeyPadTxBuffers+0x8c4>)
 8001a54:	f893 271b 	ldrb.w	r2, [r3, #1819]	; 0x71b
 8001a58:	7bbb      	ldrb	r3, [r7, #14]
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	73bb      	strb	r3, [r7, #14]
                            }

                            if(KeyPad.Joystick.UpLeftFunction.MouseWheel != MOUSE_WHEEL_NO_MOVE){
 8001a5e:	4b40      	ldr	r3, [pc, #256]	; (8001b60 <UpdateKeyPadTxBuffers+0x8c4>)
 8001a60:	f993 371c 	ldrsb.w	r3, [r3, #1820]	; 0x71c
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d007      	beq.n	8001a78 <UpdateKeyPadTxBuffers+0x7dc>
                                WheelMovement += KeyPad.Joystick.UpLeftFunction.MouseWheel;
 8001a68:	4b3d      	ldr	r3, [pc, #244]	; (8001b60 <UpdateKeyPadTxBuffers+0x8c4>)
 8001a6a:	f993 371c 	ldrsb.w	r3, [r3, #1820]	; 0x71c
 8001a6e:	b2da      	uxtb	r2, r3
 8001a70:	7abb      	ldrb	r3, [r7, #10]
 8001a72:	4413      	add	r3, r2
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	72bb      	strb	r3, [r7, #10]
                            }
                            PressedKeys++;
 8001a78:	7bfb      	ldrb	r3, [r7, #15]
 8001a7a:	3301      	adds	r3, #1
 8001a7c:	73fb      	strb	r3, [r7, #15]

                            if(JoystickStatus == JoystickChanged){
 8001a7e:	79bb      	ldrb	r3, [r7, #6]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d129      	bne.n	8001ad8 <UpdateKeyPadTxBuffers+0x83c>
                            	if(KeyPad.Joystick.UpLeftFunction.KeyScanCode != KEY_NONE || KeyPad.Joystick.UpLeftFunction.ModifierKey != KEY_MOD_NOMOD){
 8001a84:	4b36      	ldr	r3, [pc, #216]	; (8001b60 <UpdateKeyPadTxBuffers+0x8c4>)
 8001a86:	f893 3719 	ldrb.w	r3, [r3, #1817]	; 0x719
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d104      	bne.n	8001a98 <UpdateKeyPadTxBuffers+0x7fc>
 8001a8e:	4b34      	ldr	r3, [pc, #208]	; (8001b60 <UpdateKeyPadTxBuffers+0x8c4>)
 8001a90:	f893 371a 	ldrb.w	r3, [r3, #1818]	; 0x71a
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d001      	beq.n	8001a9c <UpdateKeyPadTxBuffers+0x800>
                            		KeyboardStatus = KeyboardDataAvailable;
 8001a98:	2302      	movs	r3, #2
 8001a9a:	733b      	strb	r3, [r7, #12]
                            	}

                            	if(KeyPad.Joystick.UpLeftFunction.MouseClick != MOUSE_CLICK_NONE){
 8001a9c:	4b30      	ldr	r3, [pc, #192]	; (8001b60 <UpdateKeyPadTxBuffers+0x8c4>)
 8001a9e:	f893 371b 	ldrb.w	r3, [r3, #1819]	; 0x71b
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d018      	beq.n	8001ad8 <UpdateKeyPadTxBuffers+0x83c>
                            		MouseStatus = MouseDataAvailable;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	72fb      	strb	r3, [r7, #11]
                            	}
                            }
                    break;
 8001aaa:	e015      	b.n	8001ad8 <UpdateKeyPadTxBuffers+0x83c>
			default:
                if(JoystickStatus == JoystickChanged){
 8001aac:	79bb      	ldrb	r3, [r7, #6]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d114      	bne.n	8001adc <UpdateKeyPadTxBuffers+0x840>
                	KeyboardStatus = KeyboardDataAvailable;
 8001ab2:	2302      	movs	r3, #2
 8001ab4:	733b      	strb	r3, [r7, #12]
                	MouseStatus = MouseDataAvailable;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	72fb      	strb	r3, [r7, #11]
                }
				break;
 8001aba:	e00f      	b.n	8001adc <UpdateKeyPadTxBuffers+0x840>
					break;
 8001abc:	bf00      	nop
 8001abe:	e00e      	b.n	8001ade <UpdateKeyPadTxBuffers+0x842>
					break;
 8001ac0:	bf00      	nop
 8001ac2:	e00c      	b.n	8001ade <UpdateKeyPadTxBuffers+0x842>
					break;
 8001ac4:	bf00      	nop
 8001ac6:	e00a      	b.n	8001ade <UpdateKeyPadTxBuffers+0x842>
					break;
 8001ac8:	bf00      	nop
 8001aca:	e008      	b.n	8001ade <UpdateKeyPadTxBuffers+0x842>
					break;
 8001acc:	bf00      	nop
 8001ace:	e006      	b.n	8001ade <UpdateKeyPadTxBuffers+0x842>
					break;
 8001ad0:	bf00      	nop
 8001ad2:	e004      	b.n	8001ade <UpdateKeyPadTxBuffers+0x842>
					break;
 8001ad4:	bf00      	nop
 8001ad6:	e002      	b.n	8001ade <UpdateKeyPadTxBuffers+0x842>
                    break;
 8001ad8:	bf00      	nop
 8001ada:	e000      	b.n	8001ade <UpdateKeyPadTxBuffers+0x842>
				break;
 8001adc:	bf00      	nop
	 }



    //Zero all unused buffer space
    for(uint8_t i = PressedKeys; i < SIMULTANEOUS_BUTTONS; i++){
 8001ade:	7bfb      	ldrb	r3, [r7, #15]
 8001ae0:	71fb      	strb	r3, [r7, #7]
 8001ae2:	e008      	b.n	8001af6 <UpdateKeyPadTxBuffers+0x85a>
         KeyPad.KeyboardUSBBuffer.keycodes[i] = KEY_NONE;
 8001ae4:	79fb      	ldrb	r3, [r7, #7]
 8001ae6:	4a1e      	ldr	r2, [pc, #120]	; (8001b60 <UpdateKeyPadTxBuffers+0x8c4>)
 8001ae8:	4413      	add	r3, r2
 8001aea:	2200      	movs	r2, #0
 8001aec:	f883 2966 	strb.w	r2, [r3, #2406]	; 0x966
    for(uint8_t i = PressedKeys; i < SIMULTANEOUS_BUTTONS; i++){
 8001af0:	79fb      	ldrb	r3, [r7, #7]
 8001af2:	3301      	adds	r3, #1
 8001af4:	71fb      	strb	r3, [r7, #7]
 8001af6:	79fb      	ldrb	r3, [r7, #7]
 8001af8:	2b24      	cmp	r3, #36	; 0x24
 8001afa:	d9f3      	bls.n	8001ae4 <UpdateKeyPadTxBuffers+0x848>
    }

    if(KeyPad.MouseUSBBuffer.wheel_movement != WheelMovement){
 8001afc:	4b18      	ldr	r3, [pc, #96]	; (8001b60 <UpdateKeyPadTxBuffers+0x8c4>)
 8001afe:	f993 398e 	ldrsb.w	r3, [r3, #2446]	; 0x98e
 8001b02:	f997 200a 	ldrsb.w	r2, [r7, #10]
 8001b06:	429a      	cmp	r2, r3
 8001b08:	d005      	beq.n	8001b16 <UpdateKeyPadTxBuffers+0x87a>
    	MouseStatus = MouseDataAvailable;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	72fb      	strb	r3, [r7, #11]
    	KeyPad.MouseUSBBuffer.wheel_movement = WheelMovement;
 8001b0e:	4a14      	ldr	r2, [pc, #80]	; (8001b60 <UpdateKeyPadTxBuffers+0x8c4>)
 8001b10:	7abb      	ldrb	r3, [r7, #10]
 8001b12:	f882 398e 	strb.w	r3, [r2, #2446]	; 0x98e
    }

    if(KeyPad.KeyboardUSBBuffer.modifiers != KeyBoardModKeys){
 8001b16:	4b12      	ldr	r3, [pc, #72]	; (8001b60 <UpdateKeyPadTxBuffers+0x8c4>)
 8001b18:	f893 3964 	ldrb.w	r3, [r3, #2404]	; 0x964
 8001b1c:	7b7a      	ldrb	r2, [r7, #13]
 8001b1e:	429a      	cmp	r2, r3
 8001b20:	d003      	beq.n	8001b2a <UpdateKeyPadTxBuffers+0x88e>
        KeyPad.KeyboardUSBBuffer.modifiers = KeyBoardModKeys;
 8001b22:	4a0f      	ldr	r2, [pc, #60]	; (8001b60 <UpdateKeyPadTxBuffers+0x8c4>)
 8001b24:	7b7b      	ldrb	r3, [r7, #13]
 8001b26:	f882 3964 	strb.w	r3, [r2, #2404]	; 0x964
    }

    if(KeyPad.MouseUSBBuffer.button_reg != MouseButtons){
 8001b2a:	4b0d      	ldr	r3, [pc, #52]	; (8001b60 <UpdateKeyPadTxBuffers+0x8c4>)
 8001b2c:	f893 398b 	ldrb.w	r3, [r3, #2443]	; 0x98b
 8001b30:	7bba      	ldrb	r2, [r7, #14]
 8001b32:	429a      	cmp	r2, r3
 8001b34:	d003      	beq.n	8001b3e <UpdateKeyPadTxBuffers+0x8a2>
        KeyPad.MouseUSBBuffer.button_reg = MouseButtons;
 8001b36:	4a0a      	ldr	r2, [pc, #40]	; (8001b60 <UpdateKeyPadTxBuffers+0x8c4>)
 8001b38:	7bbb      	ldrb	r3, [r7, #14]
 8001b3a:	f882 398b 	strb.w	r3, [r2, #2443]	; 0x98b
    }

    if(KeyboardStatus == KeyboardDataAvailable){
 8001b3e:	7b3b      	ldrb	r3, [r7, #12]
 8001b40:	2b02      	cmp	r3, #2
 8001b42:	d102      	bne.n	8001b4a <UpdateKeyPadTxBuffers+0x8ae>
    	KeyPad.KeyboardFlag = KeyboardDataAvailable;
 8001b44:	4b06      	ldr	r3, [pc, #24]	; (8001b60 <UpdateKeyPadTxBuffers+0x8c4>)
 8001b46:	2202      	movs	r2, #2
 8001b48:	705a      	strb	r2, [r3, #1]
    }

    if(MouseStatus == MouseDataAvailable){
 8001b4a:	7afb      	ldrb	r3, [r7, #11]
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d102      	bne.n	8001b56 <UpdateKeyPadTxBuffers+0x8ba>
        KeyPad.MouseFlag = MouseDataAvailable;
 8001b50:	4b03      	ldr	r3, [pc, #12]	; (8001b60 <UpdateKeyPadTxBuffers+0x8c4>)
 8001b52:	2201      	movs	r2, #1
 8001b54:	701a      	strb	r2, [r3, #0]
    }

}
 8001b56:	bf00      	nop
 8001b58:	3710      	adds	r7, #16
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	20000304 	.word	0x20000304

08001b64 <KeypadInitButtons>:

static void KeypadInitButtons(){
 8001b64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b66:	b087      	sub	sp, #28
 8001b68:	af04      	add	r7, sp, #16
	Button_Init_Struct_t Settings;
	for(uint8_t i = 0; i < NUMBER_OF_BUTTONS; i++){
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	71fb      	strb	r3, [r7, #7]
 8001b6e:	e01f      	b.n	8001bb0 <KeypadInitButtons+0x4c>
		Settings.ButtonIDNumber = i;
 8001b70:	79fb      	ldrb	r3, [r7, #7]
 8001b72:	703b      	strb	r3, [r7, #0]
		Settings.KeyFunction = ButtonFunctionsDefault[i];
 8001b74:	79fb      	ldrb	r3, [r7, #7]
 8001b76:	4912      	ldr	r1, [pc, #72]	; (8001bc0 <KeypadInitButtons+0x5c>)
 8001b78:	1c7a      	adds	r2, r7, #1
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	440b      	add	r3, r1
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	6013      	str	r3, [r2, #0]
        ButtonInit(Settings, &KeyPad.Buttons[i], ButtonIO_Driver);
 8001b82:	79fa      	ldrb	r2, [r7, #7]
 8001b84:	4613      	mov	r3, r2
 8001b86:	00db      	lsls	r3, r3, #3
 8001b88:	1a9b      	subs	r3, r3, r2
 8001b8a:	009b      	lsls	r3, r3, #2
 8001b8c:	4a0d      	ldr	r2, [pc, #52]	; (8001bc4 <KeypadInitButtons+0x60>)
 8001b8e:	4413      	add	r3, r2
 8001b90:	1d1e      	adds	r6, r3, #4
 8001b92:	4d0d      	ldr	r5, [pc, #52]	; (8001bc8 <KeypadInitButtons+0x64>)
 8001b94:	466c      	mov	r4, sp
 8001b96:	1d2b      	adds	r3, r5, #4
 8001b98:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b9a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001b9e:	682b      	ldr	r3, [r5, #0]
 8001ba0:	4632      	mov	r2, r6
 8001ba2:	4639      	mov	r1, r7
 8001ba4:	c903      	ldmia	r1, {r0, r1}
 8001ba6:	f001 f9b9 	bl	8002f1c <ButtonInit>
	for(uint8_t i = 0; i < NUMBER_OF_BUTTONS; i++){
 8001baa:	79fb      	ldrb	r3, [r7, #7]
 8001bac:	3301      	adds	r3, #1
 8001bae:	71fb      	strb	r3, [r7, #7]
 8001bb0:	79fb      	ldrb	r3, [r7, #7]
 8001bb2:	2b3f      	cmp	r3, #63	; 0x3f
 8001bb4:	d9dc      	bls.n	8001b70 <KeypadInitButtons+0xc>
	}
}
 8001bb6:	bf00      	nop
 8001bb8:	bf00      	nop
 8001bba:	370c      	adds	r7, #12
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001bc0:	20000028 	.word	0x20000028
 8001bc4:	20000304 	.word	0x20000304
 8001bc8:	0800f1c0 	.word	0x0800f1c0

08001bcc <KeypadInitJoystick>:

static void KeypadInitJoystick(){
 8001bcc:	b5b0      	push	{r4, r5, r7, lr}
 8001bce:	b096      	sub	sp, #88	; 0x58
 8001bd0:	af0c      	add	r7, sp, #48	; 0x30
    Joystick_Init_Struct_t Settings = {
 8001bd2:	f640 53ac 	movw	r3, #3500	; 0xdac
 8001bd6:	80bb      	strh	r3, [r7, #4]
 8001bd8:	2301      	movs	r3, #1
 8001bda:	71bb      	strb	r3, [r7, #6]
 8001bdc:	4a22      	ldr	r2, [pc, #136]	; (8001c68 <KeypadInitJoystick+0x9c>)
 8001bde:	1dfb      	adds	r3, r7, #7
 8001be0:	3208      	adds	r2, #8
 8001be2:	6812      	ldr	r2, [r2, #0]
 8001be4:	601a      	str	r2, [r3, #0]
 8001be6:	4a20      	ldr	r2, [pc, #128]	; (8001c68 <KeypadInitJoystick+0x9c>)
 8001be8:	f107 030b 	add.w	r3, r7, #11
 8001bec:	3204      	adds	r2, #4
 8001bee:	6812      	ldr	r2, [r2, #0]
 8001bf0:	601a      	str	r2, [r3, #0]
 8001bf2:	4a1d      	ldr	r2, [pc, #116]	; (8001c68 <KeypadInitJoystick+0x9c>)
 8001bf4:	f107 030f 	add.w	r3, r7, #15
 8001bf8:	6812      	ldr	r2, [r2, #0]
 8001bfa:	601a      	str	r2, [r3, #0]
 8001bfc:	4a1a      	ldr	r2, [pc, #104]	; (8001c68 <KeypadInitJoystick+0x9c>)
 8001bfe:	f107 0313 	add.w	r3, r7, #19
 8001c02:	321c      	adds	r2, #28
 8001c04:	6812      	ldr	r2, [r2, #0]
 8001c06:	601a      	str	r2, [r3, #0]
 8001c08:	4a17      	ldr	r2, [pc, #92]	; (8001c68 <KeypadInitJoystick+0x9c>)
 8001c0a:	f107 0317 	add.w	r3, r7, #23
 8001c0e:	3218      	adds	r2, #24
 8001c10:	6812      	ldr	r2, [r2, #0]
 8001c12:	601a      	str	r2, [r3, #0]
 8001c14:	4a14      	ldr	r2, [pc, #80]	; (8001c68 <KeypadInitJoystick+0x9c>)
 8001c16:	f107 031b 	add.w	r3, r7, #27
 8001c1a:	3214      	adds	r2, #20
 8001c1c:	6812      	ldr	r2, [r2, #0]
 8001c1e:	601a      	str	r2, [r3, #0]
 8001c20:	4a11      	ldr	r2, [pc, #68]	; (8001c68 <KeypadInitJoystick+0x9c>)
 8001c22:	f107 031f 	add.w	r3, r7, #31
 8001c26:	3210      	adds	r2, #16
 8001c28:	6812      	ldr	r2, [r2, #0]
 8001c2a:	601a      	str	r2, [r3, #0]
 8001c2c:	4a0e      	ldr	r2, [pc, #56]	; (8001c68 <KeypadInitJoystick+0x9c>)
 8001c2e:	f107 0323 	add.w	r3, r7, #35	; 0x23
 8001c32:	320c      	adds	r2, #12
 8001c34:	6812      	ldr	r2, [r2, #0]
 8001c36:	601a      	str	r2, [r3, #0]
			.DownFunction = JoystickFunctionsDefault[4],
			.DownLeftFunction = JoystickFunctionsDefault[5],
			.LeftFunction = JoystickFunctionsDefault[6],
			.UpLeftFunction = JoystickFunctionsDefault[7]
    };
    JoystickInit(Settings, &KeyPad.Joystick, JoystickIO_Driver);
 8001c38:	4b0c      	ldr	r3, [pc, #48]	; (8001c6c <KeypadInitJoystick+0xa0>)
 8001c3a:	ac06      	add	r4, sp, #24
 8001c3c:	461d      	mov	r5, r3
 8001c3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c42:	682b      	ldr	r3, [r5, #0]
 8001c44:	6023      	str	r3, [r4, #0]
 8001c46:	4b0a      	ldr	r3, [pc, #40]	; (8001c70 <KeypadInitJoystick+0xa4>)
 8001c48:	9305      	str	r3, [sp, #20]
 8001c4a:	466d      	mov	r5, sp
 8001c4c:	f107 0414 	add.w	r4, r7, #20
 8001c50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c52:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c54:	6823      	ldr	r3, [r4, #0]
 8001c56:	602b      	str	r3, [r5, #0]
 8001c58:	1d3b      	adds	r3, r7, #4
 8001c5a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c5c:	f001 fa86 	bl	800316c <JoystickInit>
}
 8001c60:	bf00      	nop
 8001c62:	3728      	adds	r7, #40	; 0x28
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bdb0      	pop	{r4, r5, r7, pc}
 8001c68:	20000158 	.word	0x20000158
 8001c6c:	0800f1d4 	.word	0x0800f1d4
 8001c70:	20000a08 	.word	0x20000a08

08001c74 <KeypadInitLEDs>:

static void KeypadInitLEDs(){
 8001c74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c76:	b08d      	sub	sp, #52	; 0x34
 8001c78:	af04      	add	r7, sp, #16
	SerialLED_InitStruct_t LED_Settings[4] = {
 8001c7a:	1d3b      	adds	r3, r7, #4
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	601a      	str	r2, [r3, #0]
 8001c80:	605a      	str	r2, [r3, #4]
 8001c82:	609a      	str	r2, [r3, #8]
 8001c84:	60da      	str	r2, [r3, #12]
 8001c86:	611a      	str	r2, [r3, #16]
 8001c88:	615a      	str	r2, [r3, #20]
 8001c8a:	23ff      	movs	r3, #255	; 0xff
 8001c8c:	71fb      	strb	r3, [r7, #7]
 8001c8e:	23ff      	movs	r3, #255	; 0xff
 8001c90:	733b      	strb	r3, [r7, #12]
 8001c92:	23ff      	movs	r3, #255	; 0xff
 8001c94:	753b      	strb	r3, [r7, #20]
 8001c96:	23ff      	movs	r3, #255	; 0xff
 8001c98:	763b      	strb	r3, [r7, #24]
 8001c9a:	23ff      	movs	r3, #255	; 0xff
 8001c9c:	767b      	strb	r3, [r7, #25]
			{.red = 0xFF,
			 .green = 0xFF,
			 .blue = 0x00
			}
	};
	for(uint8_t i = 0; i < NUMBER_OF_LEDS; i++){
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	77fb      	strb	r3, [r7, #31]
 8001ca2:	e033      	b.n	8001d0c <KeypadInitLEDs+0x98>
		LED_Settings[i].address = i;
 8001ca4:	7ffa      	ldrb	r2, [r7, #31]
 8001ca6:	7ffb      	ldrb	r3, [r7, #31]
 8001ca8:	b299      	uxth	r1, r3
 8001caa:	4613      	mov	r3, r2
 8001cac:	005b      	lsls	r3, r3, #1
 8001cae:	4413      	add	r3, r2
 8001cb0:	005b      	lsls	r3, r3, #1
 8001cb2:	3320      	adds	r3, #32
 8001cb4:	443b      	add	r3, r7
 8001cb6:	3b1c      	subs	r3, #28
 8001cb8:	460a      	mov	r2, r1
 8001cba:	801a      	strh	r2, [r3, #0]
		SerialLEDInit(LED_Settings[i],&KeyPad.LED[i],LED_Drv);
 8001cbc:	7ffa      	ldrb	r2, [r7, #31]
 8001cbe:	7ff9      	ldrb	r1, [r7, #31]
 8001cc0:	460b      	mov	r3, r1
 8001cc2:	00db      	lsls	r3, r3, #3
 8001cc4:	1a5b      	subs	r3, r3, r1
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	f503 63e8 	add.w	r3, r3, #1856	; 0x740
 8001ccc:	4913      	ldr	r1, [pc, #76]	; (8001d1c <KeypadInitLEDs+0xa8>)
 8001cce:	440b      	add	r3, r1
 8001cd0:	f103 0c04 	add.w	ip, r3, #4
 8001cd4:	4e12      	ldr	r6, [pc, #72]	; (8001d20 <KeypadInitLEDs+0xac>)
 8001cd6:	4613      	mov	r3, r2
 8001cd8:	005b      	lsls	r3, r3, #1
 8001cda:	4413      	add	r3, r2
 8001cdc:	005b      	lsls	r3, r3, #1
 8001cde:	3320      	adds	r3, #32
 8001ce0:	443b      	add	r3, r7
 8001ce2:	3b1c      	subs	r3, #28
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	4696      	mov	lr, r2
 8001ce8:	889b      	ldrh	r3, [r3, #4]
 8001cea:	2400      	movs	r4, #0
 8001cec:	f363 040f 	bfi	r4, r3, #0, #16
 8001cf0:	466d      	mov	r5, sp
 8001cf2:	1d33      	adds	r3, r6, #4
 8001cf4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001cf6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001cfa:	6833      	ldr	r3, [r6, #0]
 8001cfc:	4662      	mov	r2, ip
 8001cfe:	4670      	mov	r0, lr
 8001d00:	4621      	mov	r1, r4
 8001d02:	f001 fbe1 	bl	80034c8 <SerialLEDInit>
	for(uint8_t i = 0; i < NUMBER_OF_LEDS; i++){
 8001d06:	7ffb      	ldrb	r3, [r7, #31]
 8001d08:	3301      	adds	r3, #1
 8001d0a:	77fb      	strb	r3, [r7, #31]
 8001d0c:	7ffb      	ldrb	r3, [r7, #31]
 8001d0e:	2b03      	cmp	r3, #3
 8001d10:	d9c8      	bls.n	8001ca4 <KeypadInitLEDs+0x30>
	}
}
 8001d12:	bf00      	nop
 8001d14:	bf00      	nop
 8001d16:	3724      	adds	r7, #36	; 0x24
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d1c:	20000304 	.word	0x20000304
 8001d20:	20000184 	.word	0x20000184

08001d24 <KeypadInitTouchButtons>:

static void KeypadInitTouchButtons(){
 8001d24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d26:	b08b      	sub	sp, #44	; 0x2c
 8001d28:	af06      	add	r7, sp, #24
	TouchButton_Init_Struct_t Settings;
	for(uint8_t i = 0; i < NUMBER_OF_TOUCH_BUTTONS; i++){                                                                                                     // Coefficients:
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	73fb      	strb	r3, [r7, #15]
 8001d2e:	e052      	b.n	8001dd6 <KeypadInitTouchButtons+0xb2>
        Settings.TopLeftBound.X_Position = (TOUCH_BUTTON1_X_CENTER - TOUCH_BUTTON_HALFWIDTH) + TOUCH_BUTTON_ROW_PITCH * ((i % TOUCH_BUTTONS_PER_ROW));        // 012301230123
 8001d30:	7bfb      	ldrb	r3, [r7, #15]
 8001d32:	b29b      	uxth	r3, r3
 8001d34:	f003 0303 	and.w	r3, r3, #3
 8001d38:	b29b      	uxth	r3, r3
 8001d3a:	461a      	mov	r2, r3
 8001d3c:	0092      	lsls	r2, r2, #2
 8001d3e:	4413      	add	r3, r2
 8001d40:	011b      	lsls	r3, r3, #4
 8001d42:	b29b      	uxth	r3, r3
 8001d44:	3309      	adds	r3, #9
 8001d46:	b29b      	uxth	r3, r3
 8001d48:	803b      	strh	r3, [r7, #0]
        Settings.BottomRightBound.X_Position = (TOUCH_BUTTON1_X_CENTER + TOUCH_BUTTON_HALFWIDTH) + TOUCH_BUTTON_ROW_PITCH * ((i % TOUCH_BUTTONS_PER_ROW));    // 012301230123
 8001d4a:	7bfb      	ldrb	r3, [r7, #15]
 8001d4c:	b29b      	uxth	r3, r3
 8001d4e:	f003 0303 	and.w	r3, r3, #3
 8001d52:	b29b      	uxth	r3, r3
 8001d54:	461a      	mov	r2, r3
 8001d56:	0092      	lsls	r2, r2, #2
 8001d58:	4413      	add	r3, r2
 8001d5a:	011b      	lsls	r3, r3, #4
 8001d5c:	b29b      	uxth	r3, r3
 8001d5e:	3347      	adds	r3, #71	; 0x47
 8001d60:	b29b      	uxth	r3, r3
 8001d62:	80bb      	strh	r3, [r7, #4]
        Settings.TopLeftBound.Y_Position = (TOUCH_BUTTON1_Y_CENTER - TOUCH_BUTTON_HALFWIDTH) + TOUCH_BUTTON_COLUMN_PITCH * ((i / TOUCH_BUTTONS_PER_ROW));     // 111122223333
 8001d64:	7bfb      	ldrb	r3, [r7, #15]
 8001d66:	089b      	lsrs	r3, r3, #2
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	b29b      	uxth	r3, r3
 8001d6c:	461a      	mov	r2, r3
 8001d6e:	0112      	lsls	r2, r2, #4
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	b29b      	uxth	r3, r3
 8001d76:	331d      	adds	r3, #29
 8001d78:	b29b      	uxth	r3, r3
 8001d7a:	807b      	strh	r3, [r7, #2]
        Settings.BottomRightBound.Y_Position = (TOUCH_BUTTON1_Y_CENTER + TOUCH_BUTTON_HALFWIDTH) + TOUCH_BUTTON_COLUMN_PITCH * ((i / TOUCH_BUTTONS_PER_ROW)); // 111122223333
 8001d7c:	7bfb      	ldrb	r3, [r7, #15]
 8001d7e:	089b      	lsrs	r3, r3, #2
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	b29b      	uxth	r3, r3
 8001d84:	461a      	mov	r2, r3
 8001d86:	0112      	lsls	r2, r2, #4
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	b29b      	uxth	r3, r3
 8001d8e:	335b      	adds	r3, #91	; 0x5b
 8001d90:	b29b      	uxth	r3, r3
 8001d92:	80fb      	strh	r3, [r7, #6]
        Settings.KeyFunction = TouchButtonFunctionsDefault[i];
 8001d94:	7bfb      	ldrb	r3, [r7, #15]
 8001d96:	4914      	ldr	r1, [pc, #80]	; (8001de8 <KeypadInitTouchButtons+0xc4>)
 8001d98:	f107 0208 	add.w	r2, r7, #8
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	440b      	add	r3, r1
 8001da0:	6818      	ldr	r0, [r3, #0]
 8001da2:	6010      	str	r0, [r2, #0]
        TouchButtonInit(Settings, &KeyPad.TouchButton[i], TouchButton_IO_Driver);
 8001da4:	7bfa      	ldrb	r2, [r7, #15]
 8001da6:	4613      	mov	r3, r2
 8001da8:	00db      	lsls	r3, r3, #3
 8001daa:	4413      	add	r3, r2
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	f503 63f6 	add.w	r3, r3, #1968	; 0x7b0
 8001db2:	4a0e      	ldr	r2, [pc, #56]	; (8001dec <KeypadInitTouchButtons+0xc8>)
 8001db4:	4413      	add	r3, r2
 8001db6:	1d1e      	adds	r6, r3, #4
 8001db8:	4b0d      	ldr	r3, [pc, #52]	; (8001df0 <KeypadInitTouchButtons+0xcc>)
 8001dba:	466c      	mov	r4, sp
 8001dbc:	461d      	mov	r5, r3
 8001dbe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001dc0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001dc2:	682b      	ldr	r3, [r5, #0]
 8001dc4:	6023      	str	r3, [r4, #0]
 8001dc6:	4633      	mov	r3, r6
 8001dc8:	463a      	mov	r2, r7
 8001dca:	ca07      	ldmia	r2, {r0, r1, r2}
 8001dcc:	f001 fc58 	bl	8003680 <TouchButtonInit>
	for(uint8_t i = 0; i < NUMBER_OF_TOUCH_BUTTONS; i++){                                                                                                     // Coefficients:
 8001dd0:	7bfb      	ldrb	r3, [r7, #15]
 8001dd2:	3301      	adds	r3, #1
 8001dd4:	73fb      	strb	r3, [r7, #15]
 8001dd6:	7bfb      	ldrb	r3, [r7, #15]
 8001dd8:	2b0b      	cmp	r3, #11
 8001dda:	d9a9      	bls.n	8001d30 <KeypadInitTouchButtons+0xc>

	}
}
 8001ddc:	bf00      	nop
 8001dde:	bf00      	nop
 8001de0:	3714      	adds	r7, #20
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001de6:	bf00      	nop
 8001de8:	20000128 	.word	0x20000128
 8001dec:	20000304 	.word	0x20000304
 8001df0:	0800f1e8 	.word	0x0800f1e8

08001df4 <HAL_ADC_MspInit>:
  /* USER CODE END ADC1_Init 2 */

}

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b08a      	sub	sp, #40	; 0x28
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dfc:	f107 0314 	add.w	r3, r7, #20
 8001e00:	2200      	movs	r2, #0
 8001e02:	601a      	str	r2, [r3, #0]
 8001e04:	605a      	str	r2, [r3, #4]
 8001e06:	609a      	str	r2, [r3, #8]
 8001e08:	60da      	str	r2, [r3, #12]
 8001e0a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a2f      	ldr	r2, [pc, #188]	; (8001ed0 <HAL_ADC_MspInit+0xdc>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d157      	bne.n	8001ec6 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001e16:	2300      	movs	r3, #0
 8001e18:	613b      	str	r3, [r7, #16]
 8001e1a:	4b2e      	ldr	r3, [pc, #184]	; (8001ed4 <HAL_ADC_MspInit+0xe0>)
 8001e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e1e:	4a2d      	ldr	r2, [pc, #180]	; (8001ed4 <HAL_ADC_MspInit+0xe0>)
 8001e20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e24:	6453      	str	r3, [r2, #68]	; 0x44
 8001e26:	4b2b      	ldr	r3, [pc, #172]	; (8001ed4 <HAL_ADC_MspInit+0xe0>)
 8001e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e2e:	613b      	str	r3, [r7, #16]
 8001e30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e32:	2300      	movs	r3, #0
 8001e34:	60fb      	str	r3, [r7, #12]
 8001e36:	4b27      	ldr	r3, [pc, #156]	; (8001ed4 <HAL_ADC_MspInit+0xe0>)
 8001e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3a:	4a26      	ldr	r2, [pc, #152]	; (8001ed4 <HAL_ADC_MspInit+0xe0>)
 8001e3c:	f043 0301 	orr.w	r3, r3, #1
 8001e40:	6313      	str	r3, [r2, #48]	; 0x30
 8001e42:	4b24      	ldr	r3, [pc, #144]	; (8001ed4 <HAL_ADC_MspInit+0xe0>)
 8001e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e46:	f003 0301 	and.w	r3, r3, #1
 8001e4a:	60fb      	str	r3, [r7, #12]
 8001e4c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = ADC_VX_Pin|ADC_VY_Pin;
 8001e4e:	2318      	movs	r3, #24
 8001e50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e52:	2303      	movs	r3, #3
 8001e54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e56:	2300      	movs	r3, #0
 8001e58:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e5a:	f107 0314 	add.w	r3, r7, #20
 8001e5e:	4619      	mov	r1, r3
 8001e60:	481d      	ldr	r0, [pc, #116]	; (8001ed8 <HAL_ADC_MspInit+0xe4>)
 8001e62:	f002 ff55 	bl	8004d10 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001e66:	4b1d      	ldr	r3, [pc, #116]	; (8001edc <HAL_ADC_MspInit+0xe8>)
 8001e68:	4a1d      	ldr	r2, [pc, #116]	; (8001ee0 <HAL_ADC_MspInit+0xec>)
 8001e6a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001e6c:	4b1b      	ldr	r3, [pc, #108]	; (8001edc <HAL_ADC_MspInit+0xe8>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e72:	4b1a      	ldr	r3, [pc, #104]	; (8001edc <HAL_ADC_MspInit+0xe8>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e78:	4b18      	ldr	r3, [pc, #96]	; (8001edc <HAL_ADC_MspInit+0xe8>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001e7e:	4b17      	ldr	r3, [pc, #92]	; (8001edc <HAL_ADC_MspInit+0xe8>)
 8001e80:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e84:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001e86:	4b15      	ldr	r3, [pc, #84]	; (8001edc <HAL_ADC_MspInit+0xe8>)
 8001e88:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e8c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001e8e:	4b13      	ldr	r3, [pc, #76]	; (8001edc <HAL_ADC_MspInit+0xe8>)
 8001e90:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e94:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001e96:	4b11      	ldr	r3, [pc, #68]	; (8001edc <HAL_ADC_MspInit+0xe8>)
 8001e98:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e9c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001e9e:	4b0f      	ldr	r3, [pc, #60]	; (8001edc <HAL_ADC_MspInit+0xe8>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ea4:	4b0d      	ldr	r3, [pc, #52]	; (8001edc <HAL_ADC_MspInit+0xe8>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001eaa:	480c      	ldr	r0, [pc, #48]	; (8001edc <HAL_ADC_MspInit+0xe8>)
 8001eac:	f002 fb22 	bl	80044f4 <HAL_DMA_Init>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d001      	beq.n	8001eba <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001eb6:	f000 fd4f 	bl	8002958 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4a07      	ldr	r2, [pc, #28]	; (8001edc <HAL_ADC_MspInit+0xe8>)
 8001ebe:	639a      	str	r2, [r3, #56]	; 0x38
 8001ec0:	4a06      	ldr	r2, [pc, #24]	; (8001edc <HAL_ADC_MspInit+0xe8>)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001ec6:	bf00      	nop
 8001ec8:	3728      	adds	r7, #40	; 0x28
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	40012000 	.word	0x40012000
 8001ed4:	40023800 	.word	0x40023800
 8001ed8:	40020000 	.word	0x40020000
 8001edc:	20000cdc 	.word	0x20000cdc
 8001ee0:	40026410 	.word	0x40026410

08001ee4 <ADC1_Init>:
  /* USER CODE END ADC1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void ADC1_Init(void){
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b084      	sub	sp, #16
 8001ee8:	af00      	add	r7, sp, #0
	  ADC_ChannelConfTypeDef sConfig = {0};
 8001eea:	463b      	mov	r3, r7
 8001eec:	2200      	movs	r2, #0
 8001eee:	601a      	str	r2, [r3, #0]
 8001ef0:	605a      	str	r2, [r3, #4]
 8001ef2:	609a      	str	r2, [r3, #8]
 8001ef4:	60da      	str	r2, [r3, #12]


	  hadc1.Instance = ADC1;
 8001ef6:	4b28      	ldr	r3, [pc, #160]	; (8001f98 <ADC1_Init+0xb4>)
 8001ef8:	4a28      	ldr	r2, [pc, #160]	; (8001f9c <ADC1_Init+0xb8>)
 8001efa:	601a      	str	r2, [r3, #0]
	  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001efc:	4b26      	ldr	r3, [pc, #152]	; (8001f98 <ADC1_Init+0xb4>)
 8001efe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001f02:	605a      	str	r2, [r3, #4]
	  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001f04:	4b24      	ldr	r3, [pc, #144]	; (8001f98 <ADC1_Init+0xb4>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	609a      	str	r2, [r3, #8]
	  hadc1.Init.ScanConvMode = ENABLE;
 8001f0a:	4b23      	ldr	r3, [pc, #140]	; (8001f98 <ADC1_Init+0xb4>)
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	611a      	str	r2, [r3, #16]
	  hadc1.Init.ContinuousConvMode = ENABLE;
 8001f10:	4b21      	ldr	r3, [pc, #132]	; (8001f98 <ADC1_Init+0xb4>)
 8001f12:	2201      	movs	r2, #1
 8001f14:	761a      	strb	r2, [r3, #24]
	  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001f16:	4b20      	ldr	r3, [pc, #128]	; (8001f98 <ADC1_Init+0xb4>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	f883 2020 	strb.w	r2, [r3, #32]
	  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001f1e:	4b1e      	ldr	r3, [pc, #120]	; (8001f98 <ADC1_Init+0xb4>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	62da      	str	r2, [r3, #44]	; 0x2c
	  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001f24:	4b1c      	ldr	r3, [pc, #112]	; (8001f98 <ADC1_Init+0xb4>)
 8001f26:	4a1e      	ldr	r2, [pc, #120]	; (8001fa0 <ADC1_Init+0xbc>)
 8001f28:	629a      	str	r2, [r3, #40]	; 0x28
	  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001f2a:	4b1b      	ldr	r3, [pc, #108]	; (8001f98 <ADC1_Init+0xb4>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	60da      	str	r2, [r3, #12]
	  hadc1.Init.NbrOfConversion = 2;
 8001f30:	4b19      	ldr	r3, [pc, #100]	; (8001f98 <ADC1_Init+0xb4>)
 8001f32:	2202      	movs	r2, #2
 8001f34:	61da      	str	r2, [r3, #28]
	  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001f36:	4b18      	ldr	r3, [pc, #96]	; (8001f98 <ADC1_Init+0xb4>)
 8001f38:	2201      	movs	r2, #1
 8001f3a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001f3e:	4b16      	ldr	r3, [pc, #88]	; (8001f98 <ADC1_Init+0xb4>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	615a      	str	r2, [r3, #20]
	  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001f44:	4814      	ldr	r0, [pc, #80]	; (8001f98 <ADC1_Init+0xb4>)
 8001f46:	f001 fd09 	bl	800395c <HAL_ADC_Init>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d001      	beq.n	8001f54 <ADC1_Init+0x70>
	  {
	    Error_Handler();
 8001f50:	f000 fd02 	bl	8002958 <Error_Handler>
	  }

	  sConfig.Channel = ADC_CHANNEL_3;
 8001f54:	2303      	movs	r3, #3
 8001f56:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = 1;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	607b      	str	r3, [r7, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001f5c:	2307      	movs	r3, #7
 8001f5e:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f60:	463b      	mov	r3, r7
 8001f62:	4619      	mov	r1, r3
 8001f64:	480c      	ldr	r0, [pc, #48]	; (8001f98 <ADC1_Init+0xb4>)
 8001f66:	f001 fea5 	bl	8003cb4 <HAL_ADC_ConfigChannel>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d001      	beq.n	8001f74 <ADC1_Init+0x90>
	  {
	    Error_Handler();
 8001f70:	f000 fcf2 	bl	8002958 <Error_Handler>
	  }

	  sConfig.Channel = ADC_CHANNEL_4;
 8001f74:	2304      	movs	r3, #4
 8001f76:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = 2;
 8001f78:	2302      	movs	r3, #2
 8001f7a:	607b      	str	r3, [r7, #4]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f7c:	463b      	mov	r3, r7
 8001f7e:	4619      	mov	r1, r3
 8001f80:	4805      	ldr	r0, [pc, #20]	; (8001f98 <ADC1_Init+0xb4>)
 8001f82:	f001 fe97 	bl	8003cb4 <HAL_ADC_ConfigChannel>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d001      	beq.n	8001f90 <ADC1_Init+0xac>
	  {
	    Error_Handler();
 8001f8c:	f000 fce4 	bl	8002958 <Error_Handler>
	  }

}
 8001f90:	bf00      	nop
 8001f92:	3710      	adds	r7, #16
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	20000c94 	.word	0x20000c94
 8001f9c:	40012000 	.word	0x40012000
 8001fa0:	0f000001 	.word	0x0f000001

08001fa4 <I2C1_DMA_Init>:
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);

}

/* USER CODE BEGIN 2 */
void I2C1_DMA_Init(void){
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b082      	sub	sp, #8
 8001fa8:	af00      	add	r7, sp, #0
	__HAL_RCC_DMA1_CLK_ENABLE();
 8001faa:	2300      	movs	r3, #0
 8001fac:	607b      	str	r3, [r7, #4]
 8001fae:	4b0c      	ldr	r3, [pc, #48]	; (8001fe0 <I2C1_DMA_Init+0x3c>)
 8001fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb2:	4a0b      	ldr	r2, [pc, #44]	; (8001fe0 <I2C1_DMA_Init+0x3c>)
 8001fb4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001fb8:	6313      	str	r3, [r2, #48]	; 0x30
 8001fba:	4b09      	ldr	r3, [pc, #36]	; (8001fe0 <I2C1_DMA_Init+0x3c>)
 8001fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fbe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fc2:	607b      	str	r3, [r7, #4]
 8001fc4:	687b      	ldr	r3, [r7, #4]
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 1, 0);
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	2101      	movs	r1, #1
 8001fca:	200b      	movs	r0, #11
 8001fcc:	f002 fa3f 	bl	800444e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001fd0:	200b      	movs	r0, #11
 8001fd2:	f002 fa58 	bl	8004486 <HAL_NVIC_EnableIRQ>
}
 8001fd6:	bf00      	nop
 8001fd8:	3708      	adds	r7, #8
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	40023800 	.word	0x40023800

08001fe4 <ADC_DMA_Init>:
void ADC_DMA_Init(void){
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0
	__HAL_RCC_DMA2_CLK_ENABLE();
 8001fea:	2300      	movs	r3, #0
 8001fec:	607b      	str	r3, [r7, #4]
 8001fee:	4b0a      	ldr	r3, [pc, #40]	; (8002018 <ADC_DMA_Init+0x34>)
 8001ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff2:	4a09      	ldr	r2, [pc, #36]	; (8002018 <ADC_DMA_Init+0x34>)
 8001ff4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001ff8:	6313      	str	r3, [r2, #48]	; 0x30
 8001ffa:	4b07      	ldr	r3, [pc, #28]	; (8002018 <ADC_DMA_Init+0x34>)
 8001ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002002:	607b      	str	r3, [r7, #4]
 8002004:	687b      	ldr	r3, [r7, #4]
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 1, 0);
 8002006:	2200      	movs	r2, #0
 8002008:	2101      	movs	r1, #1
 800200a:	2038      	movs	r0, #56	; 0x38
 800200c:	f002 fa1f 	bl	800444e <HAL_NVIC_SetPriority>
	//HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
}
 8002010:	bf00      	nop
 8002012:	3708      	adds	r7, #8
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	40023800 	.word	0x40023800

0800201c <TIM_DMA_Init>:

void TIM_DMA_Init(void){
 800201c:	b580      	push	{r7, lr}
 800201e:	b082      	sub	sp, #8
 8002020:	af00      	add	r7, sp, #0
	__HAL_RCC_DMA1_CLK_ENABLE();
 8002022:	2300      	movs	r3, #0
 8002024:	607b      	str	r3, [r7, #4]
 8002026:	4b0c      	ldr	r3, [pc, #48]	; (8002058 <TIM_DMA_Init+0x3c>)
 8002028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202a:	4a0b      	ldr	r2, [pc, #44]	; (8002058 <TIM_DMA_Init+0x3c>)
 800202c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002030:	6313      	str	r3, [r2, #48]	; 0x30
 8002032:	4b09      	ldr	r3, [pc, #36]	; (8002058 <TIM_DMA_Init+0x3c>)
 8002034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002036:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800203a:	607b      	str	r3, [r7, #4]
 800203c:	687b      	ldr	r3, [r7, #4]
	HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 1, 0);
 800203e:	2200      	movs	r2, #0
 8002040:	2101      	movs	r1, #1
 8002042:	200f      	movs	r0, #15
 8002044:	f002 fa03 	bl	800444e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8002048:	200f      	movs	r0, #15
 800204a:	f002 fa1c 	bl	8004486 <HAL_NVIC_EnableIRQ>
}
 800204e:	bf00      	nop
 8002050:	3708      	adds	r7, #8
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	40023800 	.word	0x40023800

0800205c <I2C2_DMA_Init>:

void I2C2_DMA_Init(void){
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0
	__HAL_RCC_DMA1_CLK_ENABLE();
 8002062:	2300      	movs	r3, #0
 8002064:	607b      	str	r3, [r7, #4]
 8002066:	4b0c      	ldr	r3, [pc, #48]	; (8002098 <I2C2_DMA_Init+0x3c>)
 8002068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206a:	4a0b      	ldr	r2, [pc, #44]	; (8002098 <I2C2_DMA_Init+0x3c>)
 800206c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002070:	6313      	str	r3, [r2, #48]	; 0x30
 8002072:	4b09      	ldr	r3, [pc, #36]	; (8002098 <I2C2_DMA_Init+0x3c>)
 8002074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002076:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800207a:	607b      	str	r3, [r7, #4]
 800207c:	687b      	ldr	r3, [r7, #4]
	  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 1, 0);
 800207e:	2200      	movs	r2, #0
 8002080:	2101      	movs	r1, #1
 8002082:	200d      	movs	r0, #13
 8002084:	f002 f9e3 	bl	800444e <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8002088:	200d      	movs	r0, #13
 800208a:	f002 f9fc 	bl	8004486 <HAL_NVIC_EnableIRQ>
}
 800208e:	bf00      	nop
 8002090:	3708      	adds	r7, #8
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	40023800 	.word	0x40023800

0800209c <I2C_GPIO_Init>:

}

/* USER CODE BEGIN 2 */
void I2C_GPIO_Init(void)
{
 800209c:	b480      	push	{r7}
 800209e:	b083      	sub	sp, #12
 80020a0:	af00      	add	r7, sp, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020a2:	2300      	movs	r3, #0
 80020a4:	607b      	str	r3, [r7, #4]
 80020a6:	4b09      	ldr	r3, [pc, #36]	; (80020cc <I2C_GPIO_Init+0x30>)
 80020a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020aa:	4a08      	ldr	r2, [pc, #32]	; (80020cc <I2C_GPIO_Init+0x30>)
 80020ac:	f043 0302 	orr.w	r3, r3, #2
 80020b0:	6313      	str	r3, [r2, #48]	; 0x30
 80020b2:	4b06      	ldr	r3, [pc, #24]	; (80020cc <I2C_GPIO_Init+0x30>)
 80020b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b6:	f003 0302 	and.w	r3, r3, #2
 80020ba:	607b      	str	r3, [r7, #4]
 80020bc:	687b      	ldr	r3, [r7, #4]

}
 80020be:	bf00      	nop
 80020c0:	370c      	adds	r7, #12
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr
 80020ca:	bf00      	nop
 80020cc:	40023800 	.word	0x40023800

080020d0 <ADC_GPIO_Init>:

void ADC_GPIO_Init(void){
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020d6:	2300      	movs	r3, #0
 80020d8:	607b      	str	r3, [r7, #4]
 80020da:	4b09      	ldr	r3, [pc, #36]	; (8002100 <ADC_GPIO_Init+0x30>)
 80020dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020de:	4a08      	ldr	r2, [pc, #32]	; (8002100 <ADC_GPIO_Init+0x30>)
 80020e0:	f043 0302 	orr.w	r3, r3, #2
 80020e4:	6313      	str	r3, [r2, #48]	; 0x30
 80020e6:	4b06      	ldr	r3, [pc, #24]	; (8002100 <ADC_GPIO_Init+0x30>)
 80020e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ea:	f003 0302 	and.w	r3, r3, #2
 80020ee:	607b      	str	r3, [r7, #4]
 80020f0:	687b      	ldr	r3, [r7, #4]

}
 80020f2:	bf00      	nop
 80020f4:	370c      	adds	r7, #12
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr
 80020fe:	bf00      	nop
 8002100:	40023800 	.word	0x40023800

08002104 <TIM3_GPIO_Init>:

void TIM3_GPIO_Init(void){
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800210a:	2300      	movs	r3, #0
 800210c:	607b      	str	r3, [r7, #4]
 800210e:	4b09      	ldr	r3, [pc, #36]	; (8002134 <TIM3_GPIO_Init+0x30>)
 8002110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002112:	4a08      	ldr	r2, [pc, #32]	; (8002134 <TIM3_GPIO_Init+0x30>)
 8002114:	f043 0302 	orr.w	r3, r3, #2
 8002118:	6313      	str	r3, [r2, #48]	; 0x30
 800211a:	4b06      	ldr	r3, [pc, #24]	; (8002134 <TIM3_GPIO_Init+0x30>)
 800211c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211e:	f003 0302 	and.w	r3, r3, #2
 8002122:	607b      	str	r3, [r7, #4]
 8002124:	687b      	ldr	r3, [r7, #4]
}
 8002126:	bf00      	nop
 8002128:	370c      	adds	r7, #12
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr
 8002132:	bf00      	nop
 8002134:	40023800 	.word	0x40023800

08002138 <ILI9341_GPIO_Init>:

void ILI9341_GPIO_Init(void){
 8002138:	b580      	push	{r7, lr}
 800213a:	b088      	sub	sp, #32
 800213c:	af00      	add	r7, sp, #0
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 800213e:	2300      	movs	r3, #0
 8002140:	60bb      	str	r3, [r7, #8]
 8002142:	4b1c      	ldr	r3, [pc, #112]	; (80021b4 <ILI9341_GPIO_Init+0x7c>)
 8002144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002146:	4a1b      	ldr	r2, [pc, #108]	; (80021b4 <ILI9341_GPIO_Init+0x7c>)
 8002148:	f043 0301 	orr.w	r3, r3, #1
 800214c:	6313      	str	r3, [r2, #48]	; 0x30
 800214e:	4b19      	ldr	r3, [pc, #100]	; (80021b4 <ILI9341_GPIO_Init+0x7c>)
 8002150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002152:	f003 0301 	and.w	r3, r3, #1
 8002156:	60bb      	str	r3, [r7, #8]
 8002158:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 800215a:	2300      	movs	r3, #0
 800215c:	607b      	str	r3, [r7, #4]
 800215e:	4b15      	ldr	r3, [pc, #84]	; (80021b4 <ILI9341_GPIO_Init+0x7c>)
 8002160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002162:	4a14      	ldr	r2, [pc, #80]	; (80021b4 <ILI9341_GPIO_Init+0x7c>)
 8002164:	f043 0302 	orr.w	r3, r3, #2
 8002168:	6313      	str	r3, [r2, #48]	; 0x30
 800216a:	4b12      	ldr	r3, [pc, #72]	; (80021b4 <ILI9341_GPIO_Init+0x7c>)
 800216c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216e:	f003 0302 	and.w	r3, r3, #2
 8002172:	607b      	str	r3, [r7, #4]
 8002174:	687b      	ldr	r3, [r7, #4]
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002176:	f107 030c 	add.w	r3, r7, #12
 800217a:	2200      	movs	r2, #0
 800217c:	601a      	str	r2, [r3, #0]
 800217e:	605a      	str	r2, [r3, #4]
 8002180:	609a      	str	r2, [r3, #8]
 8002182:	60da      	str	r2, [r3, #12]
 8002184:	611a      	str	r2, [r3, #16]
	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(GPIOB, SPI1_CSN_Pin|DCRS_Pin, GPIO_PIN_SET);
 8002186:	2201      	movs	r2, #1
 8002188:	2103      	movs	r1, #3
 800218a:	480b      	ldr	r0, [pc, #44]	; (80021b8 <ILI9341_GPIO_Init+0x80>)
 800218c:	f003 f828 	bl	80051e0 <HAL_GPIO_WritePin>

	  /*Configure GPIO pins : PBPin PBPin */
	  GPIO_InitStruct.Pin = SPI1_CSN_Pin|DCRS_Pin;
 8002190:	2303      	movs	r3, #3
 8002192:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002194:	2301      	movs	r3, #1
 8002196:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002198:	2300      	movs	r3, #0
 800219a:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800219c:	2303      	movs	r3, #3
 800219e:	61bb      	str	r3, [r7, #24]
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021a0:	f107 030c 	add.w	r3, r7, #12
 80021a4:	4619      	mov	r1, r3
 80021a6:	4804      	ldr	r0, [pc, #16]	; (80021b8 <ILI9341_GPIO_Init+0x80>)
 80021a8:	f002 fdb2 	bl	8004d10 <HAL_GPIO_Init>

}
 80021ac:	bf00      	nop
 80021ae:	3720      	adds	r7, #32
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	40023800 	.word	0x40023800
 80021b8:	40020400 	.word	0x40020400

080021bc <ILI9341_GPIO_DeInit>:

void ILI9341_GPIO_DeInit(void){
 80021bc:	b580      	push	{r7, lr}
 80021be:	af00      	add	r7, sp, #0
	HAL_GPIO_DeInit(GPIOB, SPI1_CSN_Pin|DCRS_Pin);
 80021c0:	2103      	movs	r1, #3
 80021c2:	4802      	ldr	r0, [pc, #8]	; (80021cc <ILI9341_GPIO_DeInit+0x10>)
 80021c4:	f002 ff28 	bl	8005018 <HAL_GPIO_DeInit>
}
 80021c8:	bf00      	nop
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	40020400 	.word	0x40020400

080021d0 <HAL_I2C_MspInit>:
  /* USER CODE END I2C2_Init 2 */

}

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b08c      	sub	sp, #48	; 0x30
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021d8:	f107 031c 	add.w	r3, r7, #28
 80021dc:	2200      	movs	r2, #0
 80021de:	601a      	str	r2, [r3, #0]
 80021e0:	605a      	str	r2, [r3, #4]
 80021e2:	609a      	str	r2, [r3, #8]
 80021e4:	60da      	str	r2, [r3, #12]
 80021e6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a68      	ldr	r2, [pc, #416]	; (8002390 <HAL_I2C_MspInit+0x1c0>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d15a      	bne.n	80022a8 <HAL_I2C_MspInit+0xd8>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021f2:	2300      	movs	r3, #0
 80021f4:	61bb      	str	r3, [r7, #24]
 80021f6:	4b67      	ldr	r3, [pc, #412]	; (8002394 <HAL_I2C_MspInit+0x1c4>)
 80021f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fa:	4a66      	ldr	r2, [pc, #408]	; (8002394 <HAL_I2C_MspInit+0x1c4>)
 80021fc:	f043 0302 	orr.w	r3, r3, #2
 8002200:	6313      	str	r3, [r2, #48]	; 0x30
 8002202:	4b64      	ldr	r3, [pc, #400]	; (8002394 <HAL_I2C_MspInit+0x1c4>)
 8002204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002206:	f003 0302 	and.w	r3, r3, #2
 800220a:	61bb      	str	r3, [r7, #24]
 800220c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800220e:	23c0      	movs	r3, #192	; 0xc0
 8002210:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002212:	2312      	movs	r3, #18
 8002214:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002216:	2301      	movs	r3, #1
 8002218:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800221a:	2303      	movs	r3, #3
 800221c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800221e:	2304      	movs	r3, #4
 8002220:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002222:	f107 031c 	add.w	r3, r7, #28
 8002226:	4619      	mov	r1, r3
 8002228:	485b      	ldr	r0, [pc, #364]	; (8002398 <HAL_I2C_MspInit+0x1c8>)
 800222a:	f002 fd71 	bl	8004d10 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800222e:	2300      	movs	r3, #0
 8002230:	617b      	str	r3, [r7, #20]
 8002232:	4b58      	ldr	r3, [pc, #352]	; (8002394 <HAL_I2C_MspInit+0x1c4>)
 8002234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002236:	4a57      	ldr	r2, [pc, #348]	; (8002394 <HAL_I2C_MspInit+0x1c4>)
 8002238:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800223c:	6413      	str	r3, [r2, #64]	; 0x40
 800223e:	4b55      	ldr	r3, [pc, #340]	; (8002394 <HAL_I2C_MspInit+0x1c4>)
 8002240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002242:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002246:	617b      	str	r3, [r7, #20]
 8002248:	697b      	ldr	r3, [r7, #20]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 800224a:	4b54      	ldr	r3, [pc, #336]	; (800239c <HAL_I2C_MspInit+0x1cc>)
 800224c:	4a54      	ldr	r2, [pc, #336]	; (80023a0 <HAL_I2C_MspInit+0x1d0>)
 800224e:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8002250:	4b52      	ldr	r3, [pc, #328]	; (800239c <HAL_I2C_MspInit+0x1cc>)
 8002252:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002256:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002258:	4b50      	ldr	r3, [pc, #320]	; (800239c <HAL_I2C_MspInit+0x1cc>)
 800225a:	2200      	movs	r2, #0
 800225c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800225e:	4b4f      	ldr	r3, [pc, #316]	; (800239c <HAL_I2C_MspInit+0x1cc>)
 8002260:	2200      	movs	r2, #0
 8002262:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002264:	4b4d      	ldr	r3, [pc, #308]	; (800239c <HAL_I2C_MspInit+0x1cc>)
 8002266:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800226a:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800226c:	4b4b      	ldr	r3, [pc, #300]	; (800239c <HAL_I2C_MspInit+0x1cc>)
 800226e:	2200      	movs	r2, #0
 8002270:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002272:	4b4a      	ldr	r3, [pc, #296]	; (800239c <HAL_I2C_MspInit+0x1cc>)
 8002274:	2200      	movs	r2, #0
 8002276:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8002278:	4b48      	ldr	r3, [pc, #288]	; (800239c <HAL_I2C_MspInit+0x1cc>)
 800227a:	2200      	movs	r2, #0
 800227c:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800227e:	4b47      	ldr	r3, [pc, #284]	; (800239c <HAL_I2C_MspInit+0x1cc>)
 8002280:	2200      	movs	r2, #0
 8002282:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002284:	4b45      	ldr	r3, [pc, #276]	; (800239c <HAL_I2C_MspInit+0x1cc>)
 8002286:	2200      	movs	r2, #0
 8002288:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800228a:	4844      	ldr	r0, [pc, #272]	; (800239c <HAL_I2C_MspInit+0x1cc>)
 800228c:	f002 f932 	bl	80044f4 <HAL_DMA_Init>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d001      	beq.n	800229a <HAL_I2C_MspInit+0xca>
    {
      Error_Handler();
 8002296:	f000 fb5f 	bl	8002958 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4a3f      	ldr	r2, [pc, #252]	; (800239c <HAL_I2C_MspInit+0x1cc>)
 800229e:	639a      	str	r2, [r3, #56]	; 0x38
 80022a0:	4a3e      	ldr	r2, [pc, #248]	; (800239c <HAL_I2C_MspInit+0x1cc>)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80022a6:	e06f      	b.n	8002388 <HAL_I2C_MspInit+0x1b8>
  else if(i2cHandle->Instance==I2C2)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a3d      	ldr	r2, [pc, #244]	; (80023a4 <HAL_I2C_MspInit+0x1d4>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d16a      	bne.n	8002388 <HAL_I2C_MspInit+0x1b8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022b2:	2300      	movs	r3, #0
 80022b4:	613b      	str	r3, [r7, #16]
 80022b6:	4b37      	ldr	r3, [pc, #220]	; (8002394 <HAL_I2C_MspInit+0x1c4>)
 80022b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ba:	4a36      	ldr	r2, [pc, #216]	; (8002394 <HAL_I2C_MspInit+0x1c4>)
 80022bc:	f043 0302 	orr.w	r3, r3, #2
 80022c0:	6313      	str	r3, [r2, #48]	; 0x30
 80022c2:	4b34      	ldr	r3, [pc, #208]	; (8002394 <HAL_I2C_MspInit+0x1c4>)
 80022c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c6:	f003 0302 	and.w	r3, r3, #2
 80022ca:	613b      	str	r3, [r7, #16]
 80022cc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80022ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80022d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022d4:	2312      	movs	r3, #18
 80022d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d8:	2300      	movs	r3, #0
 80022da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022dc:	2303      	movs	r3, #3
 80022de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80022e0:	2304      	movs	r3, #4
 80022e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022e4:	f107 031c 	add.w	r3, r7, #28
 80022e8:	4619      	mov	r1, r3
 80022ea:	482b      	ldr	r0, [pc, #172]	; (8002398 <HAL_I2C_MspInit+0x1c8>)
 80022ec:	f002 fd10 	bl	8004d10 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80022f0:	2308      	movs	r3, #8
 80022f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022f4:	2312      	movs	r3, #18
 80022f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f8:	2300      	movs	r3, #0
 80022fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022fc:	2303      	movs	r3, #3
 80022fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8002300:	2309      	movs	r3, #9
 8002302:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002304:	f107 031c 	add.w	r3, r7, #28
 8002308:	4619      	mov	r1, r3
 800230a:	4823      	ldr	r0, [pc, #140]	; (8002398 <HAL_I2C_MspInit+0x1c8>)
 800230c:	f002 fd00 	bl	8004d10 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002310:	2300      	movs	r3, #0
 8002312:	60fb      	str	r3, [r7, #12]
 8002314:	4b1f      	ldr	r3, [pc, #124]	; (8002394 <HAL_I2C_MspInit+0x1c4>)
 8002316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002318:	4a1e      	ldr	r2, [pc, #120]	; (8002394 <HAL_I2C_MspInit+0x1c4>)
 800231a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800231e:	6413      	str	r3, [r2, #64]	; 0x40
 8002320:	4b1c      	ldr	r3, [pc, #112]	; (8002394 <HAL_I2C_MspInit+0x1c4>)
 8002322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002324:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002328:	60fb      	str	r3, [r7, #12]
 800232a:	68fb      	ldr	r3, [r7, #12]
    hdma_i2c2_rx.Instance = DMA1_Stream2;
 800232c:	4b1e      	ldr	r3, [pc, #120]	; (80023a8 <HAL_I2C_MspInit+0x1d8>)
 800232e:	4a1f      	ldr	r2, [pc, #124]	; (80023ac <HAL_I2C_MspInit+0x1dc>)
 8002330:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Channel = DMA_CHANNEL_7;
 8002332:	4b1d      	ldr	r3, [pc, #116]	; (80023a8 <HAL_I2C_MspInit+0x1d8>)
 8002334:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8002338:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800233a:	4b1b      	ldr	r3, [pc, #108]	; (80023a8 <HAL_I2C_MspInit+0x1d8>)
 800233c:	2200      	movs	r2, #0
 800233e:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002340:	4b19      	ldr	r3, [pc, #100]	; (80023a8 <HAL_I2C_MspInit+0x1d8>)
 8002342:	2200      	movs	r2, #0
 8002344:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002346:	4b18      	ldr	r3, [pc, #96]	; (80023a8 <HAL_I2C_MspInit+0x1d8>)
 8002348:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800234c:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800234e:	4b16      	ldr	r3, [pc, #88]	; (80023a8 <HAL_I2C_MspInit+0x1d8>)
 8002350:	2200      	movs	r2, #0
 8002352:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002354:	4b14      	ldr	r3, [pc, #80]	; (80023a8 <HAL_I2C_MspInit+0x1d8>)
 8002356:	2200      	movs	r2, #0
 8002358:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 800235a:	4b13      	ldr	r3, [pc, #76]	; (80023a8 <HAL_I2C_MspInit+0x1d8>)
 800235c:	2200      	movs	r2, #0
 800235e:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002360:	4b11      	ldr	r3, [pc, #68]	; (80023a8 <HAL_I2C_MspInit+0x1d8>)
 8002362:	2200      	movs	r2, #0
 8002364:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002366:	4b10      	ldr	r3, [pc, #64]	; (80023a8 <HAL_I2C_MspInit+0x1d8>)
 8002368:	2200      	movs	r2, #0
 800236a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 800236c:	480e      	ldr	r0, [pc, #56]	; (80023a8 <HAL_I2C_MspInit+0x1d8>)
 800236e:	f002 f8c1 	bl	80044f4 <HAL_DMA_Init>
 8002372:	4603      	mov	r3, r0
 8002374:	2b00      	cmp	r3, #0
 8002376:	d001      	beq.n	800237c <HAL_I2C_MspInit+0x1ac>
      Error_Handler();
 8002378:	f000 faee 	bl	8002958 <Error_Handler>
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c2_rx);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	4a0a      	ldr	r2, [pc, #40]	; (80023a8 <HAL_I2C_MspInit+0x1d8>)
 8002380:	639a      	str	r2, [r3, #56]	; 0x38
 8002382:	4a09      	ldr	r2, [pc, #36]	; (80023a8 <HAL_I2C_MspInit+0x1d8>)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002388:	bf00      	nop
 800238a:	3730      	adds	r7, #48	; 0x30
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}
 8002390:	40005400 	.word	0x40005400
 8002394:	40023800 	.word	0x40023800
 8002398:	40020400 	.word	0x40020400
 800239c:	20000de4 	.word	0x20000de4
 80023a0:	40026010 	.word	0x40026010
 80023a4:	40005800 	.word	0x40005800
 80023a8:	20000e44 	.word	0x20000e44
 80023ac:	40026040 	.word	0x40026040

080023b0 <I2C1_Init>:
  /* USER CODE END I2C2_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void I2C1_Init(void){
 80023b0:	b580      	push	{r7, lr}
 80023b2:	af00      	add	r7, sp, #0

	  hi2c1.Instance = I2C1;
 80023b4:	4b12      	ldr	r3, [pc, #72]	; (8002400 <I2C1_Init+0x50>)
 80023b6:	4a13      	ldr	r2, [pc, #76]	; (8002404 <I2C1_Init+0x54>)
 80023b8:	601a      	str	r2, [r3, #0]
	  hi2c1.Init.ClockSpeed = 400000;
 80023ba:	4b11      	ldr	r3, [pc, #68]	; (8002400 <I2C1_Init+0x50>)
 80023bc:	4a12      	ldr	r2, [pc, #72]	; (8002408 <I2C1_Init+0x58>)
 80023be:	605a      	str	r2, [r3, #4]
	  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80023c0:	4b0f      	ldr	r3, [pc, #60]	; (8002400 <I2C1_Init+0x50>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	609a      	str	r2, [r3, #8]
	  hi2c1.Init.OwnAddress1 = 0;
 80023c6:	4b0e      	ldr	r3, [pc, #56]	; (8002400 <I2C1_Init+0x50>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	60da      	str	r2, [r3, #12]
	  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80023cc:	4b0c      	ldr	r3, [pc, #48]	; (8002400 <I2C1_Init+0x50>)
 80023ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80023d2:	611a      	str	r2, [r3, #16]
	  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80023d4:	4b0a      	ldr	r3, [pc, #40]	; (8002400 <I2C1_Init+0x50>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	615a      	str	r2, [r3, #20]
	  hi2c1.Init.OwnAddress2 = 0;
 80023da:	4b09      	ldr	r3, [pc, #36]	; (8002400 <I2C1_Init+0x50>)
 80023dc:	2200      	movs	r2, #0
 80023de:	619a      	str	r2, [r3, #24]
	  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80023e0:	4b07      	ldr	r3, [pc, #28]	; (8002400 <I2C1_Init+0x50>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	61da      	str	r2, [r3, #28]
	  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80023e6:	4b06      	ldr	r3, [pc, #24]	; (8002400 <I2C1_Init+0x50>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	621a      	str	r2, [r3, #32]
	  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80023ec:	4804      	ldr	r0, [pc, #16]	; (8002400 <I2C1_Init+0x50>)
 80023ee:	f002 ff11 	bl	8005214 <HAL_I2C_Init>
 80023f2:	4603      	mov	r3, r0
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d001      	beq.n	80023fc <I2C1_Init+0x4c>
	  {
	    Error_Handler();
 80023f8:	f000 faae 	bl	8002958 <Error_Handler>
	  }

}
 80023fc:	bf00      	nop
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	20000d3c 	.word	0x20000d3c
 8002404:	40005400 	.word	0x40005400
 8002408:	00061a80 	.word	0x00061a80

0800240c <I2C2_Init>:

void I2C2_Init(void){
 800240c:	b580      	push	{r7, lr}
 800240e:	af00      	add	r7, sp, #0
	  hi2c2.Instance = I2C2;
 8002410:	4b12      	ldr	r3, [pc, #72]	; (800245c <I2C2_Init+0x50>)
 8002412:	4a13      	ldr	r2, [pc, #76]	; (8002460 <I2C2_Init+0x54>)
 8002414:	601a      	str	r2, [r3, #0]
	  hi2c2.Init.ClockSpeed = 100000;
 8002416:	4b11      	ldr	r3, [pc, #68]	; (800245c <I2C2_Init+0x50>)
 8002418:	4a12      	ldr	r2, [pc, #72]	; (8002464 <I2C2_Init+0x58>)
 800241a:	605a      	str	r2, [r3, #4]
	  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800241c:	4b0f      	ldr	r3, [pc, #60]	; (800245c <I2C2_Init+0x50>)
 800241e:	2200      	movs	r2, #0
 8002420:	609a      	str	r2, [r3, #8]
	  hi2c2.Init.OwnAddress1 = 0;
 8002422:	4b0e      	ldr	r3, [pc, #56]	; (800245c <I2C2_Init+0x50>)
 8002424:	2200      	movs	r2, #0
 8002426:	60da      	str	r2, [r3, #12]
	  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002428:	4b0c      	ldr	r3, [pc, #48]	; (800245c <I2C2_Init+0x50>)
 800242a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800242e:	611a      	str	r2, [r3, #16]
	  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002430:	4b0a      	ldr	r3, [pc, #40]	; (800245c <I2C2_Init+0x50>)
 8002432:	2200      	movs	r2, #0
 8002434:	615a      	str	r2, [r3, #20]
	  hi2c2.Init.OwnAddress2 = 0;
 8002436:	4b09      	ldr	r3, [pc, #36]	; (800245c <I2C2_Init+0x50>)
 8002438:	2200      	movs	r2, #0
 800243a:	619a      	str	r2, [r3, #24]
	  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800243c:	4b07      	ldr	r3, [pc, #28]	; (800245c <I2C2_Init+0x50>)
 800243e:	2200      	movs	r2, #0
 8002440:	61da      	str	r2, [r3, #28]
	  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002442:	4b06      	ldr	r3, [pc, #24]	; (800245c <I2C2_Init+0x50>)
 8002444:	2200      	movs	r2, #0
 8002446:	621a      	str	r2, [r3, #32]
	  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002448:	4804      	ldr	r0, [pc, #16]	; (800245c <I2C2_Init+0x50>)
 800244a:	f002 fee3 	bl	8005214 <HAL_I2C_Init>
 800244e:	4603      	mov	r3, r0
 8002450:	2b00      	cmp	r3, #0
 8002452:	d001      	beq.n	8002458 <I2C2_Init+0x4c>
	  {
	    Error_Handler();
 8002454:	f000 fa80 	bl	8002958 <Error_Handler>
	  }
}
 8002458:	bf00      	nop
 800245a:	bd80      	pop	{r7, pc}
 800245c:	20000d90 	.word	0x20000d90
 8002460:	40005800 	.word	0x40005800
 8002464:	000186a0 	.word	0x000186a0

08002468 <__io_putchar>:
#include "stm32f4xx_hal.h"
#include "usart.h"
#include <stdio.h>
#include <stdarg.h>

int __io_putchar(int ch){
 8002468:	b580      	push	{r7, lr}
 800246a:	b084      	sub	sp, #16
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
	uint8_t pchar = ch;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	b2db      	uxtb	r3, r3
 8002474:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart1, &pchar, 1, HAL_MAX_DELAY);
 8002476:	f107 010f 	add.w	r1, r7, #15
 800247a:	f04f 33ff 	mov.w	r3, #4294967295
 800247e:	2201      	movs	r2, #1
 8002480:	4803      	ldr	r0, [pc, #12]	; (8002490 <__io_putchar+0x28>)
 8002482:	f007 fbf9 	bl	8009c78 <HAL_UART_Transmit>
	return ch;
 8002486:	687b      	ldr	r3, [r7, #4]
}
 8002488:	4618      	mov	r0, r3
 800248a:	3710      	adds	r7, #16
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}
 8002490:	20000fcc 	.word	0x20000fcc

08002494 <_log>:

void _log(Log_Subsystem_t subsystem, const char* msg, ...){
 8002494:	b40e      	push	{r1, r2, r3}
 8002496:	b580      	push	{r7, lr}
 8002498:	b085      	sub	sp, #20
 800249a:	af00      	add	r7, sp, #0
 800249c:	4603      	mov	r3, r0
 800249e:	71fb      	strb	r3, [r7, #7]
    va_list args;
	va_start(args, msg);
 80024a0:	f107 0320 	add.w	r3, r7, #32
 80024a4:	60fb      	str	r3, [r7, #12]
	switch(subsystem){
 80024a6:	79fb      	ldrb	r3, [r7, #7]
 80024a8:	2b05      	cmp	r3, #5
 80024aa:	d827      	bhi.n	80024fc <_log+0x68>
 80024ac:	a201      	add	r2, pc, #4	; (adr r2, 80024b4 <_log+0x20>)
 80024ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024b2:	bf00      	nop
 80024b4:	080024cd 	.word	0x080024cd
 80024b8:	080024d5 	.word	0x080024d5
 80024bc:	080024dd 	.word	0x080024dd
 80024c0:	080024e5 	.word	0x080024e5
 80024c4:	080024ed 	.word	0x080024ed
 80024c8:	080024f5 	.word	0x080024f5
		case(log_i2c):
			printf("Debug Subsystem I2C: ");
 80024cc:	4816      	ldr	r0, [pc, #88]	; (8002528 <_log+0x94>)
 80024ce:	f00b ff31 	bl	800e334 <iprintf>
				break;
 80024d2:	e016      	b.n	8002502 <_log+0x6e>
		case(log_lps22hh):
			printf("Debug Subsystem LPS22HH: ");
 80024d4:	4815      	ldr	r0, [pc, #84]	; (800252c <_log+0x98>)
 80024d6:	f00b ff2d 	bl	800e334 <iprintf>
				break;
 80024da:	e012      	b.n	8002502 <_log+0x6e>
		case(log_iis2mdc):
			printf("Debug Subsystem IIS2MDC: ");
 80024dc:	4814      	ldr	r0, [pc, #80]	; (8002530 <_log+0x9c>)
 80024de:	f00b ff29 	bl	800e334 <iprintf>
				break;
 80024e2:	e00e      	b.n	8002502 <_log+0x6e>
		case(log_hts221):
			printf("Debug Subsystem HTS221: ");
 80024e4:	4813      	ldr	r0, [pc, #76]	; (8002534 <_log+0xa0>)
 80024e6:	f00b ff25 	bl	800e334 <iprintf>
				break;
 80024ea:	e00a      	b.n	8002502 <_log+0x6e>
		case(log_ism330dhcx):
			printf("Debug Subsystem ISM330DHCX: ");
 80024ec:	4812      	ldr	r0, [pc, #72]	; (8002538 <_log+0xa4>)
 80024ee:	f00b ff21 	bl	800e334 <iprintf>
				break;
 80024f2:	e006      	b.n	8002502 <_log+0x6e>
		case(log_mcp23017):
			printf("Debug Subsystem MCP23017: ");
 80024f4:	4811      	ldr	r0, [pc, #68]	; (800253c <_log+0xa8>)
 80024f6:	f00b ff1d 	bl	800e334 <iprintf>
		        break;
 80024fa:	e002      	b.n	8002502 <_log+0x6e>
		default:
			printf("Unknown Debug Subsystem: ");
 80024fc:	4810      	ldr	r0, [pc, #64]	; (8002540 <_log+0xac>)
 80024fe:	f00b ff19 	bl	800e334 <iprintf>
	}
	vfprintf(stdout, msg, args);
 8002502:	4b10      	ldr	r3, [pc, #64]	; (8002544 <_log+0xb0>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	68fa      	ldr	r2, [r7, #12]
 800250a:	69f9      	ldr	r1, [r7, #28]
 800250c:	4618      	mov	r0, r3
 800250e:	f00b fd73 	bl	800dff8 <vfiprintf>
	printf("\n");
 8002512:	200a      	movs	r0, #10
 8002514:	f00b ff26 	bl	800e364 <putchar>
	va_end(args);
}
 8002518:	bf00      	nop
 800251a:	3714      	adds	r7, #20
 800251c:	46bd      	mov	sp, r7
 800251e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002522:	b003      	add	sp, #12
 8002524:	4770      	bx	lr
 8002526:	bf00      	nop
 8002528:	0800f00c 	.word	0x0800f00c
 800252c:	0800f024 	.word	0x0800f024
 8002530:	0800f040 	.word	0x0800f040
 8002534:	0800f05c 	.word	0x0800f05c
 8002538:	0800f078 	.word	0x0800f078
 800253c:	0800f098 	.word	0x0800f098
 8002540:	0800f0b4 	.word	0x0800f0b4
 8002544:	20000280 	.word	0x20000280

08002548 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800254c:	f001 f970 	bl	8003830 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002550:	f000 f80a 	bl	8002568 <SystemClock_Config>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */

  /* USER CODE BEGIN 2 */
  MX_USB_DEVICE_Init();
 8002554:	f00a ff64 	bl	800d420 <MX_USB_DEVICE_Init>
  InitScreen();
 8002558:	f000 f86e 	bl	8002638 <InitScreen>
  KeyPadInit();
 800255c:	f7fe fe6a 	bl	8001234 <KeyPadInit>
	 for(uint8_t i = 0; i < 12; i++){
		 TouchButtonRead(&KeyPad.TouchButton[i]);
	 }
	JoystickRead(&KeyPad.Joystick);
	*/
	 UpdateKeyPadTxBuffers();
 8002560:	f7fe fe9c 	bl	800129c <UpdateKeyPadTxBuffers>
 8002564:	e7fc      	b.n	8002560 <main+0x18>
	...

08002568 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b094      	sub	sp, #80	; 0x50
 800256c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800256e:	f107 0320 	add.w	r3, r7, #32
 8002572:	2230      	movs	r2, #48	; 0x30
 8002574:	2100      	movs	r1, #0
 8002576:	4618      	mov	r0, r3
 8002578:	f00b fbdc 	bl	800dd34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800257c:	f107 030c 	add.w	r3, r7, #12
 8002580:	2200      	movs	r2, #0
 8002582:	601a      	str	r2, [r3, #0]
 8002584:	605a      	str	r2, [r3, #4]
 8002586:	609a      	str	r2, [r3, #8]
 8002588:	60da      	str	r2, [r3, #12]
 800258a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800258c:	2300      	movs	r3, #0
 800258e:	60bb      	str	r3, [r7, #8]
 8002590:	4b27      	ldr	r3, [pc, #156]	; (8002630 <SystemClock_Config+0xc8>)
 8002592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002594:	4a26      	ldr	r2, [pc, #152]	; (8002630 <SystemClock_Config+0xc8>)
 8002596:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800259a:	6413      	str	r3, [r2, #64]	; 0x40
 800259c:	4b24      	ldr	r3, [pc, #144]	; (8002630 <SystemClock_Config+0xc8>)
 800259e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025a4:	60bb      	str	r3, [r7, #8]
 80025a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80025a8:	2300      	movs	r3, #0
 80025aa:	607b      	str	r3, [r7, #4]
 80025ac:	4b21      	ldr	r3, [pc, #132]	; (8002634 <SystemClock_Config+0xcc>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a20      	ldr	r2, [pc, #128]	; (8002634 <SystemClock_Config+0xcc>)
 80025b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80025b6:	6013      	str	r3, [r2, #0]
 80025b8:	4b1e      	ldr	r3, [pc, #120]	; (8002634 <SystemClock_Config+0xcc>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80025c0:	607b      	str	r3, [r7, #4]
 80025c2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80025c4:	2301      	movs	r3, #1
 80025c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80025c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80025cc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80025ce:	2302      	movs	r3, #2
 80025d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80025d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80025d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80025d8:	2319      	movs	r3, #25
 80025da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80025dc:	23c0      	movs	r3, #192	; 0xc0
 80025de:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80025e0:	2302      	movs	r3, #2
 80025e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80025e4:	2304      	movs	r3, #4
 80025e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80025e8:	f107 0320 	add.w	r3, r7, #32
 80025ec:	4618      	mov	r0, r3
 80025ee:	f005 f887 	bl	8007700 <HAL_RCC_OscConfig>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d001      	beq.n	80025fc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80025f8:	f000 f9ae 	bl	8002958 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80025fc:	230f      	movs	r3, #15
 80025fe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002600:	2302      	movs	r3, #2
 8002602:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002604:	2300      	movs	r3, #0
 8002606:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002608:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800260c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800260e:	2300      	movs	r3, #0
 8002610:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002612:	f107 030c 	add.w	r3, r7, #12
 8002616:	2103      	movs	r1, #3
 8002618:	4618      	mov	r0, r3
 800261a:	f005 fae9 	bl	8007bf0 <HAL_RCC_ClockConfig>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	d001      	beq.n	8002628 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002624:	f000 f998 	bl	8002958 <Error_Handler>
  }
}
 8002628:	bf00      	nop
 800262a:	3750      	adds	r7, #80	; 0x50
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}
 8002630:	40023800 	.word	0x40023800
 8002634:	40007000 	.word	0x40007000

08002638 <InitScreen>:

/* USER CODE BEGIN 4 */

void InitScreen(){
 8002638:	b5b0      	push	{r4, r5, r7, lr}
 800263a:	b08e      	sub	sp, #56	; 0x38
 800263c:	af06      	add	r7, sp, #24
	ILI9341_Init_Struct_t Settings = {
 800263e:	4a9c      	ldr	r2, [pc, #624]	; (80028b0 <InitScreen+0x278>)
 8002640:	f107 0314 	add.w	r3, r7, #20
 8002644:	ca07      	ldmia	r2, {r0, r1, r2}
 8002646:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			.Orientation = XYExchangeXYMirror,
			.ScreenHeight = 240,
			.ScreenWidth = 320
	};
	ILI9341_Init(Settings, &LCD, ILI931_IO);
 800264a:	4b9a      	ldr	r3, [pc, #616]	; (80028b4 <InitScreen+0x27c>)
 800264c:	466c      	mov	r4, sp
 800264e:	461d      	mov	r5, r3
 8002650:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002652:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002654:	682b      	ldr	r3, [r5, #0]
 8002656:	6023      	str	r3, [r4, #0]
 8002658:	4b97      	ldr	r3, [pc, #604]	; (80028b8 <InitScreen+0x280>)
 800265a:	f107 0214 	add.w	r2, r7, #20
 800265e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002660:	f7fe f876 	bl	8000750 <ILI9341_Init>
    ILI9341_Color_t Color = {
 8002664:	2300      	movs	r3, #0
 8002666:	743b      	strb	r3, [r7, #16]
 8002668:	2300      	movs	r3, #0
 800266a:	747b      	strb	r3, [r7, #17]
 800266c:	2300      	movs	r3, #0
 800266e:	74bb      	strb	r3, [r7, #18]
    		.red = 0,
    		.green = 0,
			.blue = 0
    };
    ILI9341_FillSceen(&LCD, Color);
 8002670:	6939      	ldr	r1, [r7, #16]
 8002672:	4891      	ldr	r0, [pc, #580]	; (80028b8 <InitScreen+0x280>)
 8002674:	f7fe f9b5 	bl	80009e2 <ILI9341_FillSceen>
    ILI9341_Image_t Image = {
 8002678:	4b90      	ldr	r3, [pc, #576]	; (80028bc <InitScreen+0x284>)
 800267a:	463c      	mov	r4, r7
 800267c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800267e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    		.Height = 62,
			.Width = 62,
			.ImageLength = 62*62*3,
			.ImageData = char_image
    };
    HAL_Delay(100);
 8002682:	2064      	movs	r0, #100	; 0x64
 8002684:	f001 f946 	bl	8003914 <HAL_Delay>
    LCD.Cursor.X = 40 - Image.Width / 2;
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	085b      	lsrs	r3, r3, #1
 800268c:	b29b      	uxth	r3, r3
 800268e:	f1c3 0328 	rsb	r3, r3, #40	; 0x28
 8002692:	b29b      	uxth	r3, r3
 8002694:	b21a      	sxth	r2, r3
 8002696:	4b88      	ldr	r3, [pc, #544]	; (80028b8 <InitScreen+0x280>)
 8002698:	819a      	strh	r2, [r3, #12]
    LCD.Cursor.Y = 40 - Image.Height / 2;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	085b      	lsrs	r3, r3, #1
 800269e:	b29b      	uxth	r3, r3
 80026a0:	f1c3 0328 	rsb	r3, r3, #40	; 0x28
 80026a4:	b29b      	uxth	r3, r3
 80026a6:	b21a      	sxth	r2, r3
 80026a8:	4b83      	ldr	r3, [pc, #524]	; (80028b8 <InitScreen+0x280>)
 80026aa:	81da      	strh	r2, [r3, #14]
    ILI9341_DisplayImage(&LCD, Image);
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	9300      	str	r3, [sp, #0]
 80026b0:	463b      	mov	r3, r7
 80026b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026b4:	4880      	ldr	r0, [pc, #512]	; (80028b8 <InitScreen+0x280>)
 80026b6:	f7fe fa01 	bl	8000abc <ILI9341_DisplayImage>

    Image.ImageData = bag_image;
 80026ba:	4b81      	ldr	r3, [pc, #516]	; (80028c0 <InitScreen+0x288>)
 80026bc:	60fb      	str	r3, [r7, #12]
    LCD.Cursor.X = 120 - Image.Width / 2;
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	085b      	lsrs	r3, r3, #1
 80026c2:	b29b      	uxth	r3, r3
 80026c4:	f1c3 0378 	rsb	r3, r3, #120	; 0x78
 80026c8:	b29b      	uxth	r3, r3
 80026ca:	b21a      	sxth	r2, r3
 80026cc:	4b7a      	ldr	r3, [pc, #488]	; (80028b8 <InitScreen+0x280>)
 80026ce:	819a      	strh	r2, [r3, #12]
    LCD.Cursor.Y = 40 - Image.Height / 2;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	085b      	lsrs	r3, r3, #1
 80026d4:	b29b      	uxth	r3, r3
 80026d6:	f1c3 0328 	rsb	r3, r3, #40	; 0x28
 80026da:	b29b      	uxth	r3, r3
 80026dc:	b21a      	sxth	r2, r3
 80026de:	4b76      	ldr	r3, [pc, #472]	; (80028b8 <InitScreen+0x280>)
 80026e0:	81da      	strh	r2, [r3, #14]
    ILI9341_DisplayImage(&LCD, Image);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	9300      	str	r3, [sp, #0]
 80026e6:	463b      	mov	r3, r7
 80026e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026ea:	4873      	ldr	r0, [pc, #460]	; (80028b8 <InitScreen+0x280>)
 80026ec:	f7fe f9e6 	bl	8000abc <ILI9341_DisplayImage>

    Image.ImageData = mounts_image;
 80026f0:	4b74      	ldr	r3, [pc, #464]	; (80028c4 <InitScreen+0x28c>)
 80026f2:	60fb      	str	r3, [r7, #12]
    LCD.Cursor.X = 200 - Image.Width / 2;
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	085b      	lsrs	r3, r3, #1
 80026f8:	b29b      	uxth	r3, r3
 80026fa:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
 80026fe:	b29b      	uxth	r3, r3
 8002700:	b21a      	sxth	r2, r3
 8002702:	4b6d      	ldr	r3, [pc, #436]	; (80028b8 <InitScreen+0x280>)
 8002704:	819a      	strh	r2, [r3, #12]
    LCD.Cursor.Y = 40 - Image.Height / 2;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	085b      	lsrs	r3, r3, #1
 800270a:	b29b      	uxth	r3, r3
 800270c:	f1c3 0328 	rsb	r3, r3, #40	; 0x28
 8002710:	b29b      	uxth	r3, r3
 8002712:	b21a      	sxth	r2, r3
 8002714:	4b68      	ldr	r3, [pc, #416]	; (80028b8 <InitScreen+0x280>)
 8002716:	81da      	strh	r2, [r3, #14]
    ILI9341_DisplayImage(&LCD, Image);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	9300      	str	r3, [sp, #0]
 800271c:	463b      	mov	r3, r7
 800271e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002720:	4865      	ldr	r0, [pc, #404]	; (80028b8 <InitScreen+0x280>)
 8002722:	f7fe f9cb 	bl	8000abc <ILI9341_DisplayImage>

    Image.ImageData = LFD_image;
 8002726:	4b68      	ldr	r3, [pc, #416]	; (80028c8 <InitScreen+0x290>)
 8002728:	60fb      	str	r3, [r7, #12]
    LCD.Cursor.X = 280 - Image.Width / 2;
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	085b      	lsrs	r3, r3, #1
 800272e:	b29b      	uxth	r3, r3
 8002730:	f5c3 738c 	rsb	r3, r3, #280	; 0x118
 8002734:	b29b      	uxth	r3, r3
 8002736:	b21a      	sxth	r2, r3
 8002738:	4b5f      	ldr	r3, [pc, #380]	; (80028b8 <InitScreen+0x280>)
 800273a:	819a      	strh	r2, [r3, #12]
    LCD.Cursor.Y = 40 - Image.Height / 2;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	085b      	lsrs	r3, r3, #1
 8002740:	b29b      	uxth	r3, r3
 8002742:	f1c3 0328 	rsb	r3, r3, #40	; 0x28
 8002746:	b29b      	uxth	r3, r3
 8002748:	b21a      	sxth	r2, r3
 800274a:	4b5b      	ldr	r3, [pc, #364]	; (80028b8 <InitScreen+0x280>)
 800274c:	81da      	strh	r2, [r3, #14]
    ILI9341_DisplayImage(&LCD, Image);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	9300      	str	r3, [sp, #0]
 8002752:	463b      	mov	r3, r7
 8002754:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002756:	4858      	ldr	r0, [pc, #352]	; (80028b8 <InitScreen+0x280>)
 8002758:	f7fe f9b0 	bl	8000abc <ILI9341_DisplayImage>

    Image.ImageData = spells_image;
 800275c:	4b5b      	ldr	r3, [pc, #364]	; (80028cc <InitScreen+0x294>)
 800275e:	60fb      	str	r3, [r7, #12]
    LCD.Cursor.X = 40 - Image.Width / 2;
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	085b      	lsrs	r3, r3, #1
 8002764:	b29b      	uxth	r3, r3
 8002766:	f1c3 0328 	rsb	r3, r3, #40	; 0x28
 800276a:	b29b      	uxth	r3, r3
 800276c:	b21a      	sxth	r2, r3
 800276e:	4b52      	ldr	r3, [pc, #328]	; (80028b8 <InitScreen+0x280>)
 8002770:	819a      	strh	r2, [r3, #12]
    LCD.Cursor.Y = 120 - Image.Height / 2;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	085b      	lsrs	r3, r3, #1
 8002776:	b29b      	uxth	r3, r3
 8002778:	f1c3 0378 	rsb	r3, r3, #120	; 0x78
 800277c:	b29b      	uxth	r3, r3
 800277e:	b21a      	sxth	r2, r3
 8002780:	4b4d      	ldr	r3, [pc, #308]	; (80028b8 <InitScreen+0x280>)
 8002782:	81da      	strh	r2, [r3, #14]
    ILI9341_DisplayImage(&LCD, Image);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	9300      	str	r3, [sp, #0]
 8002788:	463b      	mov	r3, r7
 800278a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800278c:	484a      	ldr	r0, [pc, #296]	; (80028b8 <InitScreen+0x280>)
 800278e:	f7fe f995 	bl	8000abc <ILI9341_DisplayImage>

    Image.ImageData = talents_image;
 8002792:	4b4f      	ldr	r3, [pc, #316]	; (80028d0 <InitScreen+0x298>)
 8002794:	60fb      	str	r3, [r7, #12]
    LCD.Cursor.X = 120 - Image.Width / 2;
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	085b      	lsrs	r3, r3, #1
 800279a:	b29b      	uxth	r3, r3
 800279c:	f1c3 0378 	rsb	r3, r3, #120	; 0x78
 80027a0:	b29b      	uxth	r3, r3
 80027a2:	b21a      	sxth	r2, r3
 80027a4:	4b44      	ldr	r3, [pc, #272]	; (80028b8 <InitScreen+0x280>)
 80027a6:	819a      	strh	r2, [r3, #12]
    LCD.Cursor.Y = 120 - Image.Height / 2;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	085b      	lsrs	r3, r3, #1
 80027ac:	b29b      	uxth	r3, r3
 80027ae:	f1c3 0378 	rsb	r3, r3, #120	; 0x78
 80027b2:	b29b      	uxth	r3, r3
 80027b4:	b21a      	sxth	r2, r3
 80027b6:	4b40      	ldr	r3, [pc, #256]	; (80028b8 <InitScreen+0x280>)
 80027b8:	81da      	strh	r2, [r3, #14]
    ILI9341_DisplayImage(&LCD, Image);
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	9300      	str	r3, [sp, #0]
 80027be:	463b      	mov	r3, r7
 80027c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80027c2:	483d      	ldr	r0, [pc, #244]	; (80028b8 <InitScreen+0x280>)
 80027c4:	f7fe f97a 	bl	8000abc <ILI9341_DisplayImage>

    Image.ImageData = social_image;
 80027c8:	4b42      	ldr	r3, [pc, #264]	; (80028d4 <InitScreen+0x29c>)
 80027ca:	60fb      	str	r3, [r7, #12]
    LCD.Cursor.X = 200 - Image.Width / 2;
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	085b      	lsrs	r3, r3, #1
 80027d0:	b29b      	uxth	r3, r3
 80027d2:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
 80027d6:	b29b      	uxth	r3, r3
 80027d8:	b21a      	sxth	r2, r3
 80027da:	4b37      	ldr	r3, [pc, #220]	; (80028b8 <InitScreen+0x280>)
 80027dc:	819a      	strh	r2, [r3, #12]
    LCD.Cursor.Y = 120 - Image.Height / 2;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	085b      	lsrs	r3, r3, #1
 80027e2:	b29b      	uxth	r3, r3
 80027e4:	f1c3 0378 	rsb	r3, r3, #120	; 0x78
 80027e8:	b29b      	uxth	r3, r3
 80027ea:	b21a      	sxth	r2, r3
 80027ec:	4b32      	ldr	r3, [pc, #200]	; (80028b8 <InitScreen+0x280>)
 80027ee:	81da      	strh	r2, [r3, #14]
    ILI9341_DisplayImage(&LCD, Image);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	9300      	str	r3, [sp, #0]
 80027f4:	463b      	mov	r3, r7
 80027f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80027f8:	482f      	ldr	r0, [pc, #188]	; (80028b8 <InitScreen+0x280>)
 80027fa:	f7fe f95f 	bl	8000abc <ILI9341_DisplayImage>

    Image.ImageData = guild_image;
 80027fe:	4b36      	ldr	r3, [pc, #216]	; (80028d8 <InitScreen+0x2a0>)
 8002800:	60fb      	str	r3, [r7, #12]
    LCD.Cursor.X = 280 - Image.Width / 2;
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	085b      	lsrs	r3, r3, #1
 8002806:	b29b      	uxth	r3, r3
 8002808:	f5c3 738c 	rsb	r3, r3, #280	; 0x118
 800280c:	b29b      	uxth	r3, r3
 800280e:	b21a      	sxth	r2, r3
 8002810:	4b29      	ldr	r3, [pc, #164]	; (80028b8 <InitScreen+0x280>)
 8002812:	819a      	strh	r2, [r3, #12]
    LCD.Cursor.Y = 120 - Image.Height / 2;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	085b      	lsrs	r3, r3, #1
 8002818:	b29b      	uxth	r3, r3
 800281a:	f1c3 0378 	rsb	r3, r3, #120	; 0x78
 800281e:	b29b      	uxth	r3, r3
 8002820:	b21a      	sxth	r2, r3
 8002822:	4b25      	ldr	r3, [pc, #148]	; (80028b8 <InitScreen+0x280>)
 8002824:	81da      	strh	r2, [r3, #14]
    ILI9341_DisplayImage(&LCD, Image);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	9300      	str	r3, [sp, #0]
 800282a:	463b      	mov	r3, r7
 800282c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800282e:	4822      	ldr	r0, [pc, #136]	; (80028b8 <InitScreen+0x280>)
 8002830:	f7fe f944 	bl	8000abc <ILI9341_DisplayImage>

    Image.ImageData = map_image;
 8002834:	4b29      	ldr	r3, [pc, #164]	; (80028dc <InitScreen+0x2a4>)
 8002836:	60fb      	str	r3, [r7, #12]
    LCD.Cursor.X = 40 - Image.Width / 2;
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	085b      	lsrs	r3, r3, #1
 800283c:	b29b      	uxth	r3, r3
 800283e:	f1c3 0328 	rsb	r3, r3, #40	; 0x28
 8002842:	b29b      	uxth	r3, r3
 8002844:	b21a      	sxth	r2, r3
 8002846:	4b1c      	ldr	r3, [pc, #112]	; (80028b8 <InitScreen+0x280>)
 8002848:	819a      	strh	r2, [r3, #12]
    LCD.Cursor.Y = 200 - Image.Height / 2;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	085b      	lsrs	r3, r3, #1
 800284e:	b29b      	uxth	r3, r3
 8002850:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
 8002854:	b29b      	uxth	r3, r3
 8002856:	b21a      	sxth	r2, r3
 8002858:	4b17      	ldr	r3, [pc, #92]	; (80028b8 <InitScreen+0x280>)
 800285a:	81da      	strh	r2, [r3, #14]
    ILI9341_DisplayImage(&LCD, Image);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	9300      	str	r3, [sp, #0]
 8002860:	463b      	mov	r3, r7
 8002862:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002864:	4814      	ldr	r0, [pc, #80]	; (80028b8 <InitScreen+0x280>)
 8002866:	f7fe f929 	bl	8000abc <ILI9341_DisplayImage>

    Image.ImageData = achievements_image;
 800286a:	4b1d      	ldr	r3, [pc, #116]	; (80028e0 <InitScreen+0x2a8>)
 800286c:	60fb      	str	r3, [r7, #12]
    LCD.Cursor.X = 120 - Image.Width / 2;
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	085b      	lsrs	r3, r3, #1
 8002872:	b29b      	uxth	r3, r3
 8002874:	f1c3 0378 	rsb	r3, r3, #120	; 0x78
 8002878:	b29b      	uxth	r3, r3
 800287a:	b21a      	sxth	r2, r3
 800287c:	4b0e      	ldr	r3, [pc, #56]	; (80028b8 <InitScreen+0x280>)
 800287e:	819a      	strh	r2, [r3, #12]
    LCD.Cursor.Y = 200 - Image.Height / 2;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	085b      	lsrs	r3, r3, #1
 8002884:	b29b      	uxth	r3, r3
 8002886:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
 800288a:	b29b      	uxth	r3, r3
 800288c:	b21a      	sxth	r2, r3
 800288e:	4b0a      	ldr	r3, [pc, #40]	; (80028b8 <InitScreen+0x280>)
 8002890:	81da      	strh	r2, [r3, #14]
    ILI9341_DisplayImage(&LCD, Image);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	9300      	str	r3, [sp, #0]
 8002896:	463b      	mov	r3, r7
 8002898:	cb0e      	ldmia	r3, {r1, r2, r3}
 800289a:	4807      	ldr	r0, [pc, #28]	; (80028b8 <InitScreen+0x280>)
 800289c:	f7fe f90e 	bl	8000abc <ILI9341_DisplayImage>

    Image.ImageData = adventureguide_image;
 80028a0:	4b10      	ldr	r3, [pc, #64]	; (80028e4 <InitScreen+0x2ac>)
 80028a2:	60fb      	str	r3, [r7, #12]
    LCD.Cursor.X = 200 - Image.Width / 2;
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	085b      	lsrs	r3, r3, #1
 80028a8:	b29b      	uxth	r3, r3
 80028aa:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
 80028ae:	e01b      	b.n	80028e8 <InitScreen+0x2b0>
 80028b0:	0800f0d0 	.word	0x0800f0d0
 80028b4:	20000014 	.word	0x20000014
 80028b8:	20000ea4 	.word	0x20000ea4
 80028bc:	0800f0dc 	.word	0x0800f0dc
 80028c0:	08011f08 	.word	0x08011f08
 80028c4:	08014c14 	.word	0x08014c14
 80028c8:	08017920 	.word	0x08017920
 80028cc:	0801a62c 	.word	0x0801a62c
 80028d0:	0801d338 	.word	0x0801d338
 80028d4:	08020044 	.word	0x08020044
 80028d8:	08022d50 	.word	0x08022d50
 80028dc:	08025a5c 	.word	0x08025a5c
 80028e0:	08028768 	.word	0x08028768
 80028e4:	0802b474 	.word	0x0802b474
 80028e8:	b29b      	uxth	r3, r3
 80028ea:	b21a      	sxth	r2, r3
 80028ec:	4b18      	ldr	r3, [pc, #96]	; (8002950 <InitScreen+0x318>)
 80028ee:	819a      	strh	r2, [r3, #12]
    LCD.Cursor.Y = 200 - Image.Height / 2;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	085b      	lsrs	r3, r3, #1
 80028f4:	b29b      	uxth	r3, r3
 80028f6:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
 80028fa:	b29b      	uxth	r3, r3
 80028fc:	b21a      	sxth	r2, r3
 80028fe:	4b14      	ldr	r3, [pc, #80]	; (8002950 <InitScreen+0x318>)
 8002900:	81da      	strh	r2, [r3, #14]
    ILI9341_DisplayImage(&LCD, Image);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	9300      	str	r3, [sp, #0]
 8002906:	463b      	mov	r3, r7
 8002908:	cb0e      	ldmia	r3, {r1, r2, r3}
 800290a:	4811      	ldr	r0, [pc, #68]	; (8002950 <InitScreen+0x318>)
 800290c:	f7fe f8d6 	bl	8000abc <ILI9341_DisplayImage>

    Image.ImageData = menu_image;
 8002910:	4b10      	ldr	r3, [pc, #64]	; (8002954 <InitScreen+0x31c>)
 8002912:	60fb      	str	r3, [r7, #12]
    LCD.Cursor.X = 280 - Image.Width / 2;
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	085b      	lsrs	r3, r3, #1
 8002918:	b29b      	uxth	r3, r3
 800291a:	f5c3 738c 	rsb	r3, r3, #280	; 0x118
 800291e:	b29b      	uxth	r3, r3
 8002920:	b21a      	sxth	r2, r3
 8002922:	4b0b      	ldr	r3, [pc, #44]	; (8002950 <InitScreen+0x318>)
 8002924:	819a      	strh	r2, [r3, #12]
    LCD.Cursor.Y = 200 - Image.Height / 2;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	085b      	lsrs	r3, r3, #1
 800292a:	b29b      	uxth	r3, r3
 800292c:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
 8002930:	b29b      	uxth	r3, r3
 8002932:	b21a      	sxth	r2, r3
 8002934:	4b06      	ldr	r3, [pc, #24]	; (8002950 <InitScreen+0x318>)
 8002936:	81da      	strh	r2, [r3, #14]
    ILI9341_DisplayImage(&LCD, Image);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	9300      	str	r3, [sp, #0]
 800293c:	463b      	mov	r3, r7
 800293e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002940:	4803      	ldr	r0, [pc, #12]	; (8002950 <InitScreen+0x318>)
 8002942:	f7fe f8bb 	bl	8000abc <ILI9341_DisplayImage>
}
 8002946:	bf00      	nop
 8002948:	3720      	adds	r7, #32
 800294a:	46bd      	mov	sp, r7
 800294c:	bdb0      	pop	{r4, r5, r7, pc}
 800294e:	bf00      	nop
 8002950:	20000ea4 	.word	0x20000ea4
 8002954:	0802e180 	.word	0x0802e180

08002958 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002958:	b480      	push	{r7}
 800295a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800295c:	b672      	cpsid	i
}
 800295e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002960:	e7fe      	b.n	8002960 <Error_Handler+0x8>
	...

08002964 <HAL_SPI_MspInit>:
  /* USER CODE END SPI1_Init 2 */

}

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b08a      	sub	sp, #40	; 0x28
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800296c:	f107 0314 	add.w	r3, r7, #20
 8002970:	2200      	movs	r2, #0
 8002972:	601a      	str	r2, [r3, #0]
 8002974:	605a      	str	r2, [r3, #4]
 8002976:	609a      	str	r2, [r3, #8]
 8002978:	60da      	str	r2, [r3, #12]
 800297a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a19      	ldr	r2, [pc, #100]	; (80029e8 <HAL_SPI_MspInit+0x84>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d12b      	bne.n	80029de <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002986:	2300      	movs	r3, #0
 8002988:	613b      	str	r3, [r7, #16]
 800298a:	4b18      	ldr	r3, [pc, #96]	; (80029ec <HAL_SPI_MspInit+0x88>)
 800298c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800298e:	4a17      	ldr	r2, [pc, #92]	; (80029ec <HAL_SPI_MspInit+0x88>)
 8002990:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002994:	6453      	str	r3, [r2, #68]	; 0x44
 8002996:	4b15      	ldr	r3, [pc, #84]	; (80029ec <HAL_SPI_MspInit+0x88>)
 8002998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800299a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800299e:	613b      	str	r3, [r7, #16]
 80029a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029a2:	2300      	movs	r3, #0
 80029a4:	60fb      	str	r3, [r7, #12]
 80029a6:	4b11      	ldr	r3, [pc, #68]	; (80029ec <HAL_SPI_MspInit+0x88>)
 80029a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029aa:	4a10      	ldr	r2, [pc, #64]	; (80029ec <HAL_SPI_MspInit+0x88>)
 80029ac:	f043 0301 	orr.w	r3, r3, #1
 80029b0:	6313      	str	r3, [r2, #48]	; 0x30
 80029b2:	4b0e      	ldr	r3, [pc, #56]	; (80029ec <HAL_SPI_MspInit+0x88>)
 80029b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b6:	f003 0301 	and.w	r3, r3, #1
 80029ba:	60fb      	str	r3, [r7, #12]
 80029bc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80029be:	23e0      	movs	r3, #224	; 0xe0
 80029c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029c2:	2302      	movs	r3, #2
 80029c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c6:	2300      	movs	r3, #0
 80029c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029ca:	2303      	movs	r3, #3
 80029cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80029ce:	2305      	movs	r3, #5
 80029d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029d2:	f107 0314 	add.w	r3, r7, #20
 80029d6:	4619      	mov	r1, r3
 80029d8:	4805      	ldr	r0, [pc, #20]	; (80029f0 <HAL_SPI_MspInit+0x8c>)
 80029da:	f002 f999 	bl	8004d10 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80029de:	bf00      	nop
 80029e0:	3728      	adds	r7, #40	; 0x28
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	40013000 	.word	0x40013000
 80029ec:	40023800 	.word	0x40023800
 80029f0:	40020000 	.word	0x40020000

080029f4 <ILI9341_SPI_Init>:
  /* USER CODE END SPI1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void ILI9341_SPI_Init(void){
 80029f4:	b580      	push	{r7, lr}
 80029f6:	af00      	add	r7, sp, #0
	  hspi1.Instance = SPI1;
 80029f8:	4b17      	ldr	r3, [pc, #92]	; (8002a58 <ILI9341_SPI_Init+0x64>)
 80029fa:	4a18      	ldr	r2, [pc, #96]	; (8002a5c <ILI9341_SPI_Init+0x68>)
 80029fc:	601a      	str	r2, [r3, #0]
	  hspi1.Init.Mode = SPI_MODE_MASTER;
 80029fe:	4b16      	ldr	r3, [pc, #88]	; (8002a58 <ILI9341_SPI_Init+0x64>)
 8002a00:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002a04:	605a      	str	r2, [r3, #4]
	  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002a06:	4b14      	ldr	r3, [pc, #80]	; (8002a58 <ILI9341_SPI_Init+0x64>)
 8002a08:	2200      	movs	r2, #0
 8002a0a:	609a      	str	r2, [r3, #8]
	  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002a0c:	4b12      	ldr	r3, [pc, #72]	; (8002a58 <ILI9341_SPI_Init+0x64>)
 8002a0e:	2200      	movs	r2, #0
 8002a10:	60da      	str	r2, [r3, #12]
	  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a12:	4b11      	ldr	r3, [pc, #68]	; (8002a58 <ILI9341_SPI_Init+0x64>)
 8002a14:	2200      	movs	r2, #0
 8002a16:	611a      	str	r2, [r3, #16]
	  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002a18:	4b0f      	ldr	r3, [pc, #60]	; (8002a58 <ILI9341_SPI_Init+0x64>)
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	615a      	str	r2, [r3, #20]
	  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002a1e:	4b0e      	ldr	r3, [pc, #56]	; (8002a58 <ILI9341_SPI_Init+0x64>)
 8002a20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a24:	619a      	str	r2, [r3, #24]
	  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002a26:	4b0c      	ldr	r3, [pc, #48]	; (8002a58 <ILI9341_SPI_Init+0x64>)
 8002a28:	2218      	movs	r2, #24
 8002a2a:	61da      	str	r2, [r3, #28]
	  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002a2c:	4b0a      	ldr	r3, [pc, #40]	; (8002a58 <ILI9341_SPI_Init+0x64>)
 8002a2e:	2200      	movs	r2, #0
 8002a30:	621a      	str	r2, [r3, #32]
	  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002a32:	4b09      	ldr	r3, [pc, #36]	; (8002a58 <ILI9341_SPI_Init+0x64>)
 8002a34:	2200      	movs	r2, #0
 8002a36:	625a      	str	r2, [r3, #36]	; 0x24
	  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a38:	4b07      	ldr	r3, [pc, #28]	; (8002a58 <ILI9341_SPI_Init+0x64>)
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	629a      	str	r2, [r3, #40]	; 0x28
	  hspi1.Init.CRCPolynomial = 10;
 8002a3e:	4b06      	ldr	r3, [pc, #24]	; (8002a58 <ILI9341_SPI_Init+0x64>)
 8002a40:	220a      	movs	r2, #10
 8002a42:	62da      	str	r2, [r3, #44]	; 0x2c
	  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002a44:	4804      	ldr	r0, [pc, #16]	; (8002a58 <ILI9341_SPI_Init+0x64>)
 8002a46:	f005 fa9f 	bl	8007f88 <HAL_SPI_Init>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d001      	beq.n	8002a54 <ILI9341_SPI_Init+0x60>
	  {
	    Error_Handler();
 8002a50:	f7ff ff82 	bl	8002958 <Error_Handler>
	  }
}
 8002a54:	bf00      	nop
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	20000ec8 	.word	0x20000ec8
 8002a5c:	40013000 	.word	0x40013000

08002a60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b083      	sub	sp, #12
 8002a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a66:	2300      	movs	r3, #0
 8002a68:	607b      	str	r3, [r7, #4]
 8002a6a:	4b10      	ldr	r3, [pc, #64]	; (8002aac <HAL_MspInit+0x4c>)
 8002a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a6e:	4a0f      	ldr	r2, [pc, #60]	; (8002aac <HAL_MspInit+0x4c>)
 8002a70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a74:	6453      	str	r3, [r2, #68]	; 0x44
 8002a76:	4b0d      	ldr	r3, [pc, #52]	; (8002aac <HAL_MspInit+0x4c>)
 8002a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a7e:	607b      	str	r3, [r7, #4]
 8002a80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a82:	2300      	movs	r3, #0
 8002a84:	603b      	str	r3, [r7, #0]
 8002a86:	4b09      	ldr	r3, [pc, #36]	; (8002aac <HAL_MspInit+0x4c>)
 8002a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8a:	4a08      	ldr	r2, [pc, #32]	; (8002aac <HAL_MspInit+0x4c>)
 8002a8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a90:	6413      	str	r3, [r2, #64]	; 0x40
 8002a92:	4b06      	ldr	r3, [pc, #24]	; (8002aac <HAL_MspInit+0x4c>)
 8002a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a9a:	603b      	str	r3, [r7, #0]
 8002a9c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a9e:	bf00      	nop
 8002aa0:	370c      	adds	r7, #12
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr
 8002aaa:	bf00      	nop
 8002aac:	40023800 	.word	0x40023800

08002ab0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002ab4:	e7fe      	b.n	8002ab4 <NMI_Handler+0x4>

08002ab6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ab6:	b480      	push	{r7}
 8002ab8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002aba:	e7fe      	b.n	8002aba <HardFault_Handler+0x4>

08002abc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002abc:	b480      	push	{r7}
 8002abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ac0:	e7fe      	b.n	8002ac0 <MemManage_Handler+0x4>

08002ac2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ac2:	b480      	push	{r7}
 8002ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ac6:	e7fe      	b.n	8002ac6 <BusFault_Handler+0x4>

08002ac8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002acc:	e7fe      	b.n	8002acc <UsageFault_Handler+0x4>

08002ace <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ace:	b480      	push	{r7}
 8002ad0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ad2:	bf00      	nop
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr

08002adc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002adc:	b480      	push	{r7}
 8002ade:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ae0:	bf00      	nop
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr

08002aea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002aea:	b480      	push	{r7}
 8002aec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002aee:	bf00      	nop
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr

08002af8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002afc:	f000 feea 	bl	80038d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b00:	bf00      	nop
 8002b02:	bd80      	pop	{r7, pc}

08002b04 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8002b08:	4802      	ldr	r0, [pc, #8]	; (8002b14 <DMA1_Stream0_IRQHandler+0x10>)
 8002b0a:	f001 fe8b 	bl	8004824 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002b0e:	bf00      	nop
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	20000de4 	.word	0x20000de4

08002b18 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 8002b1c:	4802      	ldr	r0, [pc, #8]	; (8002b28 <DMA1_Stream2_IRQHandler+0x10>)
 8002b1e:	f001 fe81 	bl	8004824 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8002b22:	bf00      	nop
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	20000e44 	.word	0x20000e44

08002b2c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 8002b30:	4802      	ldr	r0, [pc, #8]	; (8002b3c <DMA1_Stream4_IRQHandler+0x10>)
 8002b32:	f001 fe77 	bl	8004824 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8002b36:	bf00      	nop
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	20000f6c 	.word	0x20000f6c

08002b40 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002b44:	4802      	ldr	r0, [pc, #8]	; (8002b50 <DMA2_Stream0_IRQHandler+0x10>)
 8002b46:	f001 fe6d 	bl	8004824 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002b4a:	bf00      	nop
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	20000cdc 	.word	0x20000cdc

08002b54 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002b58:	4802      	ldr	r0, [pc, #8]	; (8002b64 <OTG_FS_IRQHandler+0x10>)
 8002b5a:	f003 fcbc 	bl	80064d6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002b5e:	bf00      	nop
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	bf00      	nop
 8002b64:	200016b8 	.word	0x200016b8

08002b68 <HAL_I2C_MemRxCpltCallback>:

/* USER CODE BEGIN 1 */
void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c){
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b082      	sub	sp, #8
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
	if(hi2c == &hi2c1){
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	4a08      	ldr	r2, [pc, #32]	; (8002b94 <HAL_I2C_MemRxCpltCallback+0x2c>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d102      	bne.n	8002b7e <HAL_I2C_MemRxCpltCallback+0x16>
	    ButtonIRQCallback();
 8002b78:	f000 fadc 	bl	8003134 <ButtonIRQCallback>
	} else if (hi2c == &hi2c2){
        TouchScreenIRQCallback();
	}
}
 8002b7c:	e005      	b.n	8002b8a <HAL_I2C_MemRxCpltCallback+0x22>
	} else if (hi2c == &hi2c2){
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4a05      	ldr	r2, [pc, #20]	; (8002b98 <HAL_I2C_MemRxCpltCallback+0x30>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d101      	bne.n	8002b8a <HAL_I2C_MemRxCpltCallback+0x22>
        TouchScreenIRQCallback();
 8002b86:	f000 fe1f 	bl	80037c8 <TouchScreenIRQCallback>
}
 8002b8a:	bf00      	nop
 8002b8c:	3708      	adds	r7, #8
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	20000d3c 	.word	0x20000d3c
 8002b98:	20000d90 	.word	0x20000d90

08002b9c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b086      	sub	sp, #24
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	60f8      	str	r0, [r7, #12]
 8002ba4:	60b9      	str	r1, [r7, #8]
 8002ba6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ba8:	2300      	movs	r3, #0
 8002baa:	617b      	str	r3, [r7, #20]
 8002bac:	e00a      	b.n	8002bc4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002bae:	f3af 8000 	nop.w
 8002bb2:	4601      	mov	r1, r0
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	1c5a      	adds	r2, r3, #1
 8002bb8:	60ba      	str	r2, [r7, #8]
 8002bba:	b2ca      	uxtb	r2, r1
 8002bbc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	3301      	adds	r3, #1
 8002bc2:	617b      	str	r3, [r7, #20]
 8002bc4:	697a      	ldr	r2, [r7, #20]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	dbf0      	blt.n	8002bae <_read+0x12>
	}

return len;
 8002bcc:	687b      	ldr	r3, [r7, #4]
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3718      	adds	r7, #24
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}

08002bd6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002bd6:	b580      	push	{r7, lr}
 8002bd8:	b086      	sub	sp, #24
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	60f8      	str	r0, [r7, #12]
 8002bde:	60b9      	str	r1, [r7, #8]
 8002be0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002be2:	2300      	movs	r3, #0
 8002be4:	617b      	str	r3, [r7, #20]
 8002be6:	e009      	b.n	8002bfc <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	1c5a      	adds	r2, r3, #1
 8002bec:	60ba      	str	r2, [r7, #8]
 8002bee:	781b      	ldrb	r3, [r3, #0]
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f7ff fc39 	bl	8002468 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	3301      	adds	r3, #1
 8002bfa:	617b      	str	r3, [r7, #20]
 8002bfc:	697a      	ldr	r2, [r7, #20]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	429a      	cmp	r2, r3
 8002c02:	dbf1      	blt.n	8002be8 <_write+0x12>
	}
	return len;
 8002c04:	687b      	ldr	r3, [r7, #4]
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3718      	adds	r7, #24
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}

08002c0e <_close>:

int _close(int file)
{
 8002c0e:	b480      	push	{r7}
 8002c10:	b083      	sub	sp, #12
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	6078      	str	r0, [r7, #4]
	return -1;
 8002c16:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	370c      	adds	r7, #12
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr

08002c26 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002c26:	b480      	push	{r7}
 8002c28:	b083      	sub	sp, #12
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	6078      	str	r0, [r7, #4]
 8002c2e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002c36:	605a      	str	r2, [r3, #4]
	return 0;
 8002c38:	2300      	movs	r3, #0
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	370c      	adds	r7, #12
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr

08002c46 <_isatty>:

int _isatty(int file)
{
 8002c46:	b480      	push	{r7}
 8002c48:	b083      	sub	sp, #12
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	6078      	str	r0, [r7, #4]
	return 1;
 8002c4e:	2301      	movs	r3, #1
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	370c      	adds	r7, #12
 8002c54:	46bd      	mov	sp, r7
 8002c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5a:	4770      	bx	lr

08002c5c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b085      	sub	sp, #20
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	60f8      	str	r0, [r7, #12]
 8002c64:	60b9      	str	r1, [r7, #8]
 8002c66:	607a      	str	r2, [r7, #4]
	return 0;
 8002c68:	2300      	movs	r3, #0
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	3714      	adds	r7, #20
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr
	...

08002c78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b086      	sub	sp, #24
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c80:	4a14      	ldr	r2, [pc, #80]	; (8002cd4 <_sbrk+0x5c>)
 8002c82:	4b15      	ldr	r3, [pc, #84]	; (8002cd8 <_sbrk+0x60>)
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c8c:	4b13      	ldr	r3, [pc, #76]	; (8002cdc <_sbrk+0x64>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d102      	bne.n	8002c9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c94:	4b11      	ldr	r3, [pc, #68]	; (8002cdc <_sbrk+0x64>)
 8002c96:	4a12      	ldr	r2, [pc, #72]	; (8002ce0 <_sbrk+0x68>)
 8002c98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c9a:	4b10      	ldr	r3, [pc, #64]	; (8002cdc <_sbrk+0x64>)
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4413      	add	r3, r2
 8002ca2:	693a      	ldr	r2, [r7, #16]
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d207      	bcs.n	8002cb8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ca8:	f00b f81a 	bl	800dce0 <__errno>
 8002cac:	4603      	mov	r3, r0
 8002cae:	220c      	movs	r2, #12
 8002cb0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002cb2:	f04f 33ff 	mov.w	r3, #4294967295
 8002cb6:	e009      	b.n	8002ccc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002cb8:	4b08      	ldr	r3, [pc, #32]	; (8002cdc <_sbrk+0x64>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002cbe:	4b07      	ldr	r3, [pc, #28]	; (8002cdc <_sbrk+0x64>)
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4413      	add	r3, r2
 8002cc6:	4a05      	ldr	r2, [pc, #20]	; (8002cdc <_sbrk+0x64>)
 8002cc8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002cca:	68fb      	ldr	r3, [r7, #12]
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3718      	adds	r7, #24
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	20020000 	.word	0x20020000
 8002cd8:	00000400 	.word	0x00000400
 8002cdc:	20000f20 	.word	0x20000f20
 8002ce0:	20001bf0 	.word	0x20001bf0

08002ce4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ce8:	4b06      	ldr	r3, [pc, #24]	; (8002d04 <SystemInit+0x20>)
 8002cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cee:	4a05      	ldr	r2, [pc, #20]	; (8002d04 <SystemInit+0x20>)
 8002cf0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002cf4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002cf8:	bf00      	nop
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr
 8002d02:	bf00      	nop
 8002d04:	e000ed00 	.word	0xe000ed00

08002d08 <HAL_TIM_Base_MspInit>:
  HAL_TIM_MspPostInit(&htim3);

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b084      	sub	sp, #16
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a25      	ldr	r2, [pc, #148]	; (8002dac <HAL_TIM_Base_MspInit+0xa4>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d144      	bne.n	8002da4 <HAL_TIM_Base_MspInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	60fb      	str	r3, [r7, #12]
 8002d1e:	4b24      	ldr	r3, [pc, #144]	; (8002db0 <HAL_TIM_Base_MspInit+0xa8>)
 8002d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d22:	4a23      	ldr	r2, [pc, #140]	; (8002db0 <HAL_TIM_Base_MspInit+0xa8>)
 8002d24:	f043 0302 	orr.w	r3, r3, #2
 8002d28:	6413      	str	r3, [r2, #64]	; 0x40
 8002d2a:	4b21      	ldr	r3, [pc, #132]	; (8002db0 <HAL_TIM_Base_MspInit+0xa8>)
 8002d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2e:	f003 0302 	and.w	r3, r3, #2
 8002d32:	60fb      	str	r3, [r7, #12]
 8002d34:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH1_TRIG Init */
    hdma_tim3_ch1_trig.Instance = DMA1_Stream4;
 8002d36:	4b1f      	ldr	r3, [pc, #124]	; (8002db4 <HAL_TIM_Base_MspInit+0xac>)
 8002d38:	4a1f      	ldr	r2, [pc, #124]	; (8002db8 <HAL_TIM_Base_MspInit+0xb0>)
 8002d3a:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Channel = DMA_CHANNEL_5;
 8002d3c:	4b1d      	ldr	r3, [pc, #116]	; (8002db4 <HAL_TIM_Base_MspInit+0xac>)
 8002d3e:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8002d42:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002d44:	4b1b      	ldr	r3, [pc, #108]	; (8002db4 <HAL_TIM_Base_MspInit+0xac>)
 8002d46:	2240      	movs	r2, #64	; 0x40
 8002d48:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d4a:	4b1a      	ldr	r3, [pc, #104]	; (8002db4 <HAL_TIM_Base_MspInit+0xac>)
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 8002d50:	4b18      	ldr	r3, [pc, #96]	; (8002db4 <HAL_TIM_Base_MspInit+0xac>)
 8002d52:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d56:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002d58:	4b16      	ldr	r3, [pc, #88]	; (8002db4 <HAL_TIM_Base_MspInit+0xac>)
 8002d5a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002d5e:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002d60:	4b14      	ldr	r3, [pc, #80]	; (8002db4 <HAL_TIM_Base_MspInit+0xac>)
 8002d62:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002d66:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Mode = DMA_CIRCULAR;
 8002d68:	4b12      	ldr	r3, [pc, #72]	; (8002db4 <HAL_TIM_Base_MspInit+0xac>)
 8002d6a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d6e:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_LOW;
 8002d70:	4b10      	ldr	r3, [pc, #64]	; (8002db4 <HAL_TIM_Base_MspInit+0xac>)
 8002d72:	2200      	movs	r2, #0
 8002d74:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1_trig.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d76:	4b0f      	ldr	r3, [pc, #60]	; (8002db4 <HAL_TIM_Base_MspInit+0xac>)
 8002d78:	2200      	movs	r2, #0
 8002d7a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 8002d7c:	480d      	ldr	r0, [pc, #52]	; (8002db4 <HAL_TIM_Base_MspInit+0xac>)
 8002d7e:	f001 fbb9 	bl	80044f4 <HAL_DMA_Init>
 8002d82:	4603      	mov	r3, r0
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d001      	beq.n	8002d8c <HAL_TIM_Base_MspInit+0x84>
    {
      Error_Handler();
 8002d88:	f7ff fde6 	bl	8002958 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	4a09      	ldr	r2, [pc, #36]	; (8002db4 <HAL_TIM_Base_MspInit+0xac>)
 8002d90:	625a      	str	r2, [r3, #36]	; 0x24
 8002d92:	4a08      	ldr	r2, [pc, #32]	; (8002db4 <HAL_TIM_Base_MspInit+0xac>)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	4a06      	ldr	r2, [pc, #24]	; (8002db4 <HAL_TIM_Base_MspInit+0xac>)
 8002d9c:	639a      	str	r2, [r3, #56]	; 0x38
 8002d9e:	4a05      	ldr	r2, [pc, #20]	; (8002db4 <HAL_TIM_Base_MspInit+0xac>)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002da4:	bf00      	nop
 8002da6:	3710      	adds	r7, #16
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}
 8002dac:	40000400 	.word	0x40000400
 8002db0:	40023800 	.word	0x40023800
 8002db4:	20000f6c 	.word	0x20000f6c
 8002db8:	40026070 	.word	0x40026070

08002dbc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b088      	sub	sp, #32
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dc4:	f107 030c 	add.w	r3, r7, #12
 8002dc8:	2200      	movs	r2, #0
 8002dca:	601a      	str	r2, [r3, #0]
 8002dcc:	605a      	str	r2, [r3, #4]
 8002dce:	609a      	str	r2, [r3, #8]
 8002dd0:	60da      	str	r2, [r3, #12]
 8002dd2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a12      	ldr	r2, [pc, #72]	; (8002e24 <HAL_TIM_MspPostInit+0x68>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d11d      	bne.n	8002e1a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dde:	2300      	movs	r3, #0
 8002de0:	60bb      	str	r3, [r7, #8]
 8002de2:	4b11      	ldr	r3, [pc, #68]	; (8002e28 <HAL_TIM_MspPostInit+0x6c>)
 8002de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de6:	4a10      	ldr	r2, [pc, #64]	; (8002e28 <HAL_TIM_MspPostInit+0x6c>)
 8002de8:	f043 0302 	orr.w	r3, r3, #2
 8002dec:	6313      	str	r3, [r2, #48]	; 0x30
 8002dee:	4b0e      	ldr	r3, [pc, #56]	; (8002e28 <HAL_TIM_MspPostInit+0x6c>)
 8002df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df2:	f003 0302 	and.w	r3, r3, #2
 8002df6:	60bb      	str	r3, [r7, #8]
 8002df8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002dfa:	2310      	movs	r3, #16
 8002dfc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dfe:	2302      	movs	r3, #2
 8002e00:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e02:	2300      	movs	r3, #0
 8002e04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e06:	2303      	movs	r3, #3
 8002e08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002e0a:	2302      	movs	r3, #2
 8002e0c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e0e:	f107 030c 	add.w	r3, r7, #12
 8002e12:	4619      	mov	r1, r3
 8002e14:	4805      	ldr	r0, [pc, #20]	; (8002e2c <HAL_TIM_MspPostInit+0x70>)
 8002e16:	f001 ff7b 	bl	8004d10 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002e1a:	bf00      	nop
 8002e1c:	3720      	adds	r7, #32
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	40000400 	.word	0x40000400
 8002e28:	40023800 	.word	0x40023800
 8002e2c:	40020400 	.word	0x40020400

08002e30 <TIM3_Init>:
  /* USER CODE END TIM3_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void TIM3_Init(void){
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b08e      	sub	sp, #56	; 0x38
 8002e34:	af00      	add	r7, sp, #0

	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e36:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	601a      	str	r2, [r3, #0]
 8002e3e:	605a      	str	r2, [r3, #4]
 8002e40:	609a      	str	r2, [r3, #8]
 8002e42:	60da      	str	r2, [r3, #12]
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e44:	f107 0320 	add.w	r3, r7, #32
 8002e48:	2200      	movs	r2, #0
 8002e4a:	601a      	str	r2, [r3, #0]
 8002e4c:	605a      	str	r2, [r3, #4]
	  TIM_OC_InitTypeDef sConfigOC = {0};
 8002e4e:	1d3b      	adds	r3, r7, #4
 8002e50:	2200      	movs	r2, #0
 8002e52:	601a      	str	r2, [r3, #0]
 8002e54:	605a      	str	r2, [r3, #4]
 8002e56:	609a      	str	r2, [r3, #8]
 8002e58:	60da      	str	r2, [r3, #12]
 8002e5a:	611a      	str	r2, [r3, #16]
 8002e5c:	615a      	str	r2, [r3, #20]
 8002e5e:	619a      	str	r2, [r3, #24]


	  htim3.Instance = TIM3;
 8002e60:	4b2c      	ldr	r3, [pc, #176]	; (8002f14 <TIM3_Init+0xe4>)
 8002e62:	4a2d      	ldr	r2, [pc, #180]	; (8002f18 <TIM3_Init+0xe8>)
 8002e64:	601a      	str	r2, [r3, #0]
	  htim3.Init.Prescaler = 0;
 8002e66:	4b2b      	ldr	r3, [pc, #172]	; (8002f14 <TIM3_Init+0xe4>)
 8002e68:	2200      	movs	r2, #0
 8002e6a:	605a      	str	r2, [r3, #4]
	  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e6c:	4b29      	ldr	r3, [pc, #164]	; (8002f14 <TIM3_Init+0xe4>)
 8002e6e:	2200      	movs	r2, #0
 8002e70:	609a      	str	r2, [r3, #8]
	  htim3.Init.Period = 120 - 1;
 8002e72:	4b28      	ldr	r3, [pc, #160]	; (8002f14 <TIM3_Init+0xe4>)
 8002e74:	2277      	movs	r2, #119	; 0x77
 8002e76:	60da      	str	r2, [r3, #12]
	  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e78:	4b26      	ldr	r3, [pc, #152]	; (8002f14 <TIM3_Init+0xe4>)
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	611a      	str	r2, [r3, #16]
	  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e7e:	4b25      	ldr	r3, [pc, #148]	; (8002f14 <TIM3_Init+0xe4>)
 8002e80:	2200      	movs	r2, #0
 8002e82:	619a      	str	r2, [r3, #24]
	  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002e84:	4823      	ldr	r0, [pc, #140]	; (8002f14 <TIM3_Init+0xe4>)
 8002e86:	f005 fe27 	bl	8008ad8 <HAL_TIM_Base_Init>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d001      	beq.n	8002e94 <TIM3_Init+0x64>
	  {
	    Error_Handler();
 8002e90:	f7ff fd62 	bl	8002958 <Error_Handler>
	  }
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e98:	62bb      	str	r3, [r7, #40]	; 0x28
	  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002e9a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002e9e:	4619      	mov	r1, r3
 8002ea0:	481c      	ldr	r0, [pc, #112]	; (8002f14 <TIM3_Init+0xe4>)
 8002ea2:	f006 f9f9 	bl	8009298 <HAL_TIM_ConfigClockSource>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d001      	beq.n	8002eb0 <TIM3_Init+0x80>
	  {
	    Error_Handler();
 8002eac:	f7ff fd54 	bl	8002958 <Error_Handler>
	  }
	  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002eb0:	4818      	ldr	r0, [pc, #96]	; (8002f14 <TIM3_Init+0xe4>)
 8002eb2:	f005 fe60 	bl	8008b76 <HAL_TIM_PWM_Init>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d001      	beq.n	8002ec0 <TIM3_Init+0x90>
	  {
	    Error_Handler();
 8002ebc:	f7ff fd4c 	bl	8002958 <Error_Handler>
	  }
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	623b      	str	r3, [r7, #32]
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	627b      	str	r3, [r7, #36]	; 0x24
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002ec8:	f107 0320 	add.w	r3, r7, #32
 8002ecc:	4619      	mov	r1, r3
 8002ece:	4811      	ldr	r0, [pc, #68]	; (8002f14 <TIM3_Init+0xe4>)
 8002ed0:	f006 fe64 	bl	8009b9c <HAL_TIMEx_MasterConfigSynchronization>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d001      	beq.n	8002ede <TIM3_Init+0xae>
	  {
	    Error_Handler();
 8002eda:	f7ff fd3d 	bl	8002958 <Error_Handler>
	  }
	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002ede:	2360      	movs	r3, #96	; 0x60
 8002ee0:	607b      	str	r3, [r7, #4]
	  sConfigOC.Pulse = 0;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	60bb      	str	r3, [r7, #8]
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	60fb      	str	r3, [r7, #12]
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002eea:	2300      	movs	r3, #0
 8002eec:	617b      	str	r3, [r7, #20]
	  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002eee:	1d3b      	adds	r3, r7, #4
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	4619      	mov	r1, r3
 8002ef4:	4807      	ldr	r0, [pc, #28]	; (8002f14 <TIM3_Init+0xe4>)
 8002ef6:	f006 f90d 	bl	8009114 <HAL_TIM_PWM_ConfigChannel>
 8002efa:	4603      	mov	r3, r0
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d001      	beq.n	8002f04 <TIM3_Init+0xd4>
	  {
	    Error_Handler();
 8002f00:	f7ff fd2a 	bl	8002958 <Error_Handler>
	  }

	  HAL_TIM_MspPostInit(&htim3);
 8002f04:	4803      	ldr	r0, [pc, #12]	; (8002f14 <TIM3_Init+0xe4>)
 8002f06:	f7ff ff59 	bl	8002dbc <HAL_TIM_MspPostInit>
}
 8002f0a:	bf00      	nop
 8002f0c:	3738      	adds	r7, #56	; 0x38
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	bf00      	nop
 8002f14:	20000f24 	.word	0x20000f24
 8002f18:	40000400 	.word	0x40000400

08002f1c <ButtonInit>:
 *@Params: Init struct with settings, Handle to initialized, low level IO driver
 *@Return: None
 *@Precondition: None
 *@Postcondition: Button handle will be initialized and ready to use
 **************************************//**************************************/
void ButtonInit(Button_Init_Struct_t Settings, Button_Handle_t *Button, Button_IO_Drv_t IO){
 8002f1c:	b082      	sub	sp, #8
 8002f1e:	b590      	push	{r4, r7, lr}
 8002f20:	b085      	sub	sp, #20
 8002f22:	af00      	add	r7, sp, #0
 8002f24:	f107 0408 	add.w	r4, r7, #8
 8002f28:	e884 0003 	stmia.w	r4, {r0, r1}
 8002f2c:	607a      	str	r2, [r7, #4]
 8002f2e:	627b      	str	r3, [r7, #36]	; 0x24
	Button->IO_Driver.init   = IO.init;
 8002f30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	609a      	str	r2, [r3, #8]
	Button->IO_Driver.deinit = IO.deinit;
 8002f36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	60da      	str	r2, [r3, #12]
	Button->IO_Driver.read   = IO.read;
 8002f3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	611a      	str	r2, [r3, #16]
	Button->IO_Driver.write  = IO.write;
 8002f42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	615a      	str	r2, [r3, #20]
	Button->IO_Driver.ioctl  = IO.ioctl;
 8002f48:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	619a      	str	r2, [r3, #24]
	Button->IO_Driver.init();
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	4798      	blx	r3

	Button->ButtonIDNumber = Settings.ButtonIDNumber;
 8002f54:	7a3a      	ldrb	r2, [r7, #8]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	701a      	strb	r2, [r3, #0]
	Button->KeyFunction = Settings.KeyFunction;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	3301      	adds	r3, #1
 8002f5e:	f107 0209 	add.w	r2, r7, #9
 8002f62:	6812      	ldr	r2, [r2, #0]
 8002f64:	601a      	str	r2, [r3, #0]
	Button->State = ButtonUnpressed;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	715a      	strb	r2, [r3, #5]
}
 8002f6c:	bf00      	nop
 8002f6e:	3714      	adds	r7, #20
 8002f70:	46bd      	mov	sp, r7
 8002f72:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8002f76:	b002      	add	sp, #8
 8002f78:	4770      	bx	lr

08002f7a <ButtonRead>:
 *@Params: Button handle to read
 *@Return: ButtonChanged if the button changed states, otherwise ButtonUnchanged
 *@Precondition: ButtonHandle should be initialized/
 *@Postcondition: ButtonState in the ButtonHandle will be updated.
 **************************************//**************************************/
ButtonStatus_t ButtonRead(Button_Handle_t *Button){
 8002f7a:	b580      	push	{r7, lr}
 8002f7c:	b084      	sub	sp, #16
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	6078      	str	r0, [r7, #4]
    ButtonState_t Previous_State = Button->State;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	795b      	ldrb	r3, [r3, #5]
 8002f86:	73fb      	strb	r3, [r7, #15]
    Button->State = Button->IO_Driver.read(Button->ButtonIDNumber);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	691b      	ldr	r3, [r3, #16]
 8002f8c:	687a      	ldr	r2, [r7, #4]
 8002f8e:	7812      	ldrb	r2, [r2, #0]
 8002f90:	4610      	mov	r0, r2
 8002f92:	4798      	blx	r3
 8002f94:	4603      	mov	r3, r0
 8002f96:	461a      	mov	r2, r3
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	715a      	strb	r2, [r3, #5]
    if(Previous_State != Button->State){
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	795b      	ldrb	r3, [r3, #5]
 8002fa0:	7bfa      	ldrb	r2, [r7, #15]
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d001      	beq.n	8002faa <ButtonRead+0x30>
    	return ButtonChanged;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	e000      	b.n	8002fac <ButtonRead+0x32>
    } else {
    	return ButtonUnchanged;
 8002faa:	2301      	movs	r3, #1
    }
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	3710      	adds	r7, #16
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}

08002fb4 <Button_IO_init>:
 *@Params: None
 *@Return: None
 *@Precondition: None
 *@Postcondition: GPIO, I2C, DMA Peripherals and clocks will be enabled and ready to use
 **************************************//**************************************/
static void Button_IO_init(void){
 8002fb4:	b5b0      	push	{r4, r5, r7, lr}
 8002fb6:	b08a      	sub	sp, #40	; 0x28
 8002fb8:	af06      	add	r7, sp, #24
	const MCP23017_Init_Struct_t InitSettings = {
 8002fba:	4b2b      	ldr	r3, [pc, #172]	; (8003068 <Button_IO_init+0xb4>)
 8002fbc:	881b      	ldrh	r3, [r3, #0]
 8002fbe:	803b      	strh	r3, [r7, #0]
 8002fc0:	4b29      	ldr	r3, [pc, #164]	; (8003068 <Button_IO_init+0xb4>)
 8002fc2:	881b      	ldrh	r3, [r3, #0]
 8002fc4:	807b      	strh	r3, [r7, #2]
 8002fc6:	4b29      	ldr	r3, [pc, #164]	; (800306c <Button_IO_init+0xb8>)
 8002fc8:	881b      	ldrh	r3, [r3, #0]
 8002fca:	80bb      	strh	r3, [r7, #4]
 8002fcc:	4b27      	ldr	r3, [pc, #156]	; (800306c <Button_IO_init+0xb8>)
 8002fce:	881b      	ldrh	r3, [r3, #0]
 8002fd0:	80fb      	strh	r3, [r7, #6]
 8002fd2:	4b26      	ldr	r3, [pc, #152]	; (800306c <Button_IO_init+0xb8>)
 8002fd4:	881b      	ldrh	r3, [r3, #0]
 8002fd6:	813b      	strh	r3, [r7, #8]
 8002fd8:	4b23      	ldr	r3, [pc, #140]	; (8003068 <Button_IO_init+0xb4>)
 8002fda:	881b      	ldrh	r3, [r3, #0]
 8002fdc:	817b      	strh	r3, [r7, #10]
 8002fde:	2300      	movs	r3, #0
 8002fe0:	733b      	strb	r3, [r7, #12]
			.Mode = MCP23017_AllPins,
			.PullUp = MCP23017_AllPins,
			.Polarity = MCP23017_AllPins
	};

	if(initialize_status == ButtonIO_Uninitialized){
 8002fe2:	4b23      	ldr	r3, [pc, #140]	; (8003070 <Button_IO_init+0xbc>)
 8002fe4:	781b      	ldrb	r3, [r3, #0]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d139      	bne.n	800305e <Button_IO_init+0xaa>
	    MCP23017_Init(InitSettings, &Expander[0], MCP23017_IO1_Drv);
 8002fea:	4b22      	ldr	r3, [pc, #136]	; (8003074 <Button_IO_init+0xc0>)
 8002fec:	ac01      	add	r4, sp, #4
 8002fee:	461d      	mov	r5, r3
 8002ff0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ff2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002ff4:	682b      	ldr	r3, [r5, #0]
 8002ff6:	6023      	str	r3, [r4, #0]
 8002ff8:	4b1f      	ldr	r3, [pc, #124]	; (8003078 <Button_IO_init+0xc4>)
 8002ffa:	9300      	str	r3, [sp, #0]
 8002ffc:	463b      	mov	r3, r7
 8002ffe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003000:	f7fd feaa 	bl	8000d58 <MCP23017_Init>
	    MCP23017_Init(InitSettings, &Expander[1], MCP23017_IO2_Drv);
 8003004:	4b1d      	ldr	r3, [pc, #116]	; (800307c <Button_IO_init+0xc8>)
 8003006:	ac01      	add	r4, sp, #4
 8003008:	461d      	mov	r5, r3
 800300a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800300c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800300e:	682b      	ldr	r3, [r5, #0]
 8003010:	6023      	str	r3, [r4, #0]
 8003012:	4b1b      	ldr	r3, [pc, #108]	; (8003080 <Button_IO_init+0xcc>)
 8003014:	9300      	str	r3, [sp, #0]
 8003016:	463b      	mov	r3, r7
 8003018:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800301a:	f7fd fe9d 	bl	8000d58 <MCP23017_Init>
	    MCP23017_Init(InitSettings, &Expander[2], MCP23017_IO3_Drv);
 800301e:	4b19      	ldr	r3, [pc, #100]	; (8003084 <Button_IO_init+0xd0>)
 8003020:	ac01      	add	r4, sp, #4
 8003022:	461d      	mov	r5, r3
 8003024:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003026:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003028:	682b      	ldr	r3, [r5, #0]
 800302a:	6023      	str	r3, [r4, #0]
 800302c:	4b16      	ldr	r3, [pc, #88]	; (8003088 <Button_IO_init+0xd4>)
 800302e:	9300      	str	r3, [sp, #0]
 8003030:	463b      	mov	r3, r7
 8003032:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003034:	f7fd fe90 	bl	8000d58 <MCP23017_Init>
	    MCP23017_Init(InitSettings, &Expander[3], MCP23017_IO4_Drv);
 8003038:	4b14      	ldr	r3, [pc, #80]	; (800308c <Button_IO_init+0xd8>)
 800303a:	ac01      	add	r4, sp, #4
 800303c:	461d      	mov	r5, r3
 800303e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003040:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003042:	682b      	ldr	r3, [r5, #0]
 8003044:	6023      	str	r3, [r4, #0]
 8003046:	4b12      	ldr	r3, [pc, #72]	; (8003090 <Button_IO_init+0xdc>)
 8003048:	9300      	str	r3, [sp, #0]
 800304a:	463b      	mov	r3, r7
 800304c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800304e:	f7fd fe83 	bl	8000d58 <MCP23017_Init>
	    MCP23017_ReadPins(&Expander[0]); //Start the Button-Read-DMA Engine
 8003052:	4809      	ldr	r0, [pc, #36]	; (8003078 <Button_IO_init+0xc4>)
 8003054:	f7fd ffaa 	bl	8000fac <MCP23017_ReadPins>
	    initialize_status = ButtonIO_Initialized;
 8003058:	4b05      	ldr	r3, [pc, #20]	; (8003070 <Button_IO_init+0xbc>)
 800305a:	2201      	movs	r2, #1
 800305c:	701a      	strb	r2, [r3, #0]
	}
}
 800305e:	bf00      	nop
 8003060:	3710      	adds	r7, #16
 8003062:	46bd      	mov	sp, r7
 8003064:	bdb0      	pop	{r4, r5, r7, pc}
 8003066:	bf00      	nop
 8003068:	0800f14a 	.word	0x0800f14a
 800306c:	0800f14c 	.word	0x0800f14c
 8003070:	20001010 	.word	0x20001010
 8003074:	0800f150 	.word	0x0800f150
 8003078:	20001014 	.word	0x20001014
 800307c:	0800f164 	.word	0x0800f164
 8003080:	2000102c 	.word	0x2000102c
 8003084:	0800f178 	.word	0x0800f178
 8003088:	20001044 	.word	0x20001044
 800308c:	0800f18c 	.word	0x0800f18c
 8003090:	2000105c 	.word	0x2000105c

08003094 <Button_IO_deinit>:

static void Button_IO_deinit(void){
 8003094:	b580      	push	{r7, lr}
 8003096:	af00      	add	r7, sp, #0

	if(initialize_status == ButtonIO_Initialized){
 8003098:	4b0a      	ldr	r3, [pc, #40]	; (80030c4 <Button_IO_deinit+0x30>)
 800309a:	781b      	ldrb	r3, [r3, #0]
 800309c:	2b01      	cmp	r3, #1
 800309e:	d10e      	bne.n	80030be <Button_IO_deinit+0x2a>
	    MCP23017_DeInit(&Expander[0]);
 80030a0:	4809      	ldr	r0, [pc, #36]	; (80030c8 <Button_IO_deinit+0x34>)
 80030a2:	f7fd fee7 	bl	8000e74 <MCP23017_DeInit>
	    MCP23017_DeInit(&Expander[1]);
 80030a6:	4809      	ldr	r0, [pc, #36]	; (80030cc <Button_IO_deinit+0x38>)
 80030a8:	f7fd fee4 	bl	8000e74 <MCP23017_DeInit>
	    MCP23017_DeInit(&Expander[2]);
 80030ac:	4808      	ldr	r0, [pc, #32]	; (80030d0 <Button_IO_deinit+0x3c>)
 80030ae:	f7fd fee1 	bl	8000e74 <MCP23017_DeInit>
	    MCP23017_DeInit(&Expander[3]);
 80030b2:	4808      	ldr	r0, [pc, #32]	; (80030d4 <Button_IO_deinit+0x40>)
 80030b4:	f7fd fede 	bl	8000e74 <MCP23017_DeInit>
	    initialize_status = ButtonIO_Uninitialized;
 80030b8:	4b02      	ldr	r3, [pc, #8]	; (80030c4 <Button_IO_deinit+0x30>)
 80030ba:	2200      	movs	r2, #0
 80030bc:	701a      	strb	r2, [r3, #0]
	}
}
 80030be:	bf00      	nop
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	bf00      	nop
 80030c4:	20001010 	.word	0x20001010
 80030c8:	20001014 	.word	0x20001014
 80030cc:	2000102c 	.word	0x2000102c
 80030d0:	20001044 	.word	0x20001044
 80030d4:	2000105c 	.word	0x2000105c

080030d8 <Button_IO_Read>:
 *@Params: Number of the button to read
 *@Return: ButtonUnpressed if the button is not pressed, ButtonPressed if it is pressed.
 *@Precondition: Button IO should be initialized
 *@Postcondition: None
 **************************************//**************************************/
static ButtonState_t Button_IO_Read(uint8_t ButtonNumber){
 80030d8:	b480      	push	{r7}
 80030da:	b085      	sub	sp, #20
 80030dc:	af00      	add	r7, sp, #0
 80030de:	4603      	mov	r3, r0
 80030e0:	71fb      	strb	r3, [r7, #7]
	uint8_t ExpanderNumber = ButtonNumber / PINS_PER_EXPANDER;
 80030e2:	79fb      	ldrb	r3, [r7, #7]
 80030e4:	091b      	lsrs	r3, r3, #4
 80030e6:	73fb      	strb	r3, [r7, #15]
	if(ExpanderNumber >= NUMBER_OF_IO_EXPANDERS){
 80030e8:	7bfb      	ldrb	r3, [r7, #15]
 80030ea:	2b03      	cmp	r3, #3
 80030ec:	d901      	bls.n	80030f2 <Button_IO_Read+0x1a>
		return ButtonUnpressed;
 80030ee:	2300      	movs	r3, #0
 80030f0:	e018      	b.n	8003124 <Button_IO_Read+0x4c>
	}

    uint16_t ButtonStates = Expander[ExpanderNumber].PinStates;
 80030f2:	7bfa      	ldrb	r2, [r7, #15]
 80030f4:	490e      	ldr	r1, [pc, #56]	; (8003130 <Button_IO_Read+0x58>)
 80030f6:	4613      	mov	r3, r2
 80030f8:	005b      	lsls	r3, r3, #1
 80030fa:	4413      	add	r3, r2
 80030fc:	00db      	lsls	r3, r3, #3
 80030fe:	440b      	add	r3, r1
 8003100:	881b      	ldrh	r3, [r3, #0]
 8003102:	81bb      	strh	r3, [r7, #12]
    uint16_t ButtonPosition = ButtonNumber % PINS_PER_EXPANDER;
 8003104:	79fb      	ldrb	r3, [r7, #7]
 8003106:	b29b      	uxth	r3, r3
 8003108:	f003 030f 	and.w	r3, r3, #15
 800310c:	817b      	strh	r3, [r7, #10]
    if((ButtonStates & (1 << ButtonPosition)) != 0){
 800310e:	89ba      	ldrh	r2, [r7, #12]
 8003110:	897b      	ldrh	r3, [r7, #10]
 8003112:	fa42 f303 	asr.w	r3, r2, r3
 8003116:	f003 0301 	and.w	r3, r3, #1
 800311a:	2b00      	cmp	r3, #0
 800311c:	d001      	beq.n	8003122 <Button_IO_Read+0x4a>
    	return ButtonPressed;
 800311e:	2301      	movs	r3, #1
 8003120:	e000      	b.n	8003124 <Button_IO_Read+0x4c>
    } else {
    	return ButtonUnpressed;
 8003122:	2300      	movs	r3, #0
    }
}
 8003124:	4618      	mov	r0, r3
 8003126:	3714      	adds	r7, #20
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr
 8003130:	20001014 	.word	0x20001014

08003134 <ButtonIRQCallback>:
 *@Params: I2C Handle used to communicate with MCP23017 IC
 *@Return: None
 *@Precondition: Button IO should be initialized.
 *@Postcondition: MCP23017 Pin states will be updated.
 **************************************//**************************************/
void ButtonIRQCallback(){
 8003134:	b580      	push	{r7, lr}
 8003136:	af00      	add	r7, sp, #0
//void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c){
	static uint8_t counter = 1;
	MCP23017_ReadPins(&Expander[counter % NUMBER_OF_IO_EXPANDERS]);
 8003138:	4b0a      	ldr	r3, [pc, #40]	; (8003164 <ButtonIRQCallback+0x30>)
 800313a:	781b      	ldrb	r3, [r3, #0]
 800313c:	f003 0203 	and.w	r2, r3, #3
 8003140:	4613      	mov	r3, r2
 8003142:	005b      	lsls	r3, r3, #1
 8003144:	4413      	add	r3, r2
 8003146:	00db      	lsls	r3, r3, #3
 8003148:	4a07      	ldr	r2, [pc, #28]	; (8003168 <ButtonIRQCallback+0x34>)
 800314a:	4413      	add	r3, r2
 800314c:	4618      	mov	r0, r3
 800314e:	f7fd ff2d 	bl	8000fac <MCP23017_ReadPins>
	counter++;
 8003152:	4b04      	ldr	r3, [pc, #16]	; (8003164 <ButtonIRQCallback+0x30>)
 8003154:	781b      	ldrb	r3, [r3, #0]
 8003156:	3301      	adds	r3, #1
 8003158:	b2da      	uxtb	r2, r3
 800315a:	4b02      	ldr	r3, [pc, #8]	; (8003164 <ButtonIRQCallback+0x30>)
 800315c:	701a      	strb	r2, [r3, #0]

}
 800315e:	bf00      	nop
 8003160:	bd80      	pop	{r7, pc}
 8003162:	bf00      	nop
 8003164:	2000017c 	.word	0x2000017c
 8003168:	20001014 	.word	0x20001014

0800316c <JoystickInit>:
 *@Params: Init struct with desired user settings, Joystick handle to initialize, Low level IO Driver
 *@Return: None
 *@Precondition: None
 *@Postcondition: Joystick handle and low level hardware will be initialized and ready to use.
 **************************************//**************************************/
void JoystickInit(Joystick_Init_Struct_t Settings, Joystick_Handle_t *Joystick, Joystick_IO_Drv_t IO){
 800316c:	b084      	sub	sp, #16
 800316e:	b580      	push	{r7, lr}
 8003170:	af00      	add	r7, sp, #0
 8003172:	f107 0c08 	add.w	ip, r7, #8
 8003176:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	Joystick->IO_Driver.init = IO.init;
 800317a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800317c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800317e:	62da      	str	r2, [r3, #44]	; 0x2c
	Joystick->IO_Driver.deinit = IO.deinit;
 8003180:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003184:	631a      	str	r2, [r3, #48]	; 0x30
	Joystick->IO_Driver.read = IO.read;
 8003186:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800318a:	635a      	str	r2, [r3, #52]	; 0x34
	Joystick->IO_Driver.write = IO.write;
 800318c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800318e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003190:	639a      	str	r2, [r3, #56]	; 0x38
	Joystick->IO_Driver.ioctl = IO.ioctl;
 8003192:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003196:	63da      	str	r2, [r3, #60]	; 0x3c
	Joystick->IO_Driver.init();
 8003198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800319a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800319c:	4798      	blx	r3

	Joystick->DeadZone          = Settings.DeadZone;
 800319e:	893a      	ldrh	r2, [r7, #8]
 80031a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031a2:	80da      	strh	r2, [r3, #6]
	Joystick->UpFunction        = Settings.UpFunction;
 80031a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031a6:	3311      	adds	r3, #17
 80031a8:	f107 0213 	add.w	r2, r7, #19
 80031ac:	6812      	ldr	r2, [r2, #0]
 80031ae:	601a      	str	r2, [r3, #0]
	Joystick->LeftFunction      = Settings.LeftFunction;
 80031b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031b2:	3319      	adds	r3, #25
 80031b4:	f107 021b 	add.w	r2, r7, #27
 80031b8:	6812      	ldr	r2, [r2, #0]
 80031ba:	601a      	str	r2, [r3, #0]
	Joystick->RightFunction     = Settings.RightFunction;
 80031bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031be:	3309      	adds	r3, #9
 80031c0:	f107 020b 	add.w	r2, r7, #11
 80031c4:	6812      	ldr	r2, [r2, #0]
 80031c6:	601a      	str	r2, [r3, #0]
	Joystick->UpRightFunction   = Settings.UpRightFunction;
 80031c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031ca:	330d      	adds	r3, #13
 80031cc:	f107 020f 	add.w	r2, r7, #15
 80031d0:	6812      	ldr	r2, [r2, #0]
 80031d2:	601a      	str	r2, [r3, #0]
	Joystick->UpLeftFunction    = Settings.UpLeftFunction;
 80031d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031d6:	3315      	adds	r3, #21
 80031d8:	f107 0217 	add.w	r2, r7, #23
 80031dc:	6812      	ldr	r2, [r2, #0]
 80031de:	601a      	str	r2, [r3, #0]
	Joystick->DownFunction      = Settings.DownFunction;
 80031e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031e2:	3321      	adds	r3, #33	; 0x21
 80031e4:	f107 0223 	add.w	r2, r7, #35	; 0x23
 80031e8:	6812      	ldr	r2, [r2, #0]
 80031ea:	601a      	str	r2, [r3, #0]
	Joystick->DownLeftFunction  = Settings.DownLeftFunction;
 80031ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031ee:	331d      	adds	r3, #29
 80031f0:	f107 021f 	add.w	r2, r7, #31
 80031f4:	6812      	ldr	r2, [r2, #0]
 80031f6:	601a      	str	r2, [r3, #0]
	Joystick->DownRightFunction = Settings.DownRightFunction;
 80031f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031fa:	3325      	adds	r3, #37	; 0x25
 80031fc:	f107 0227 	add.w	r2, r7, #39	; 0x27
 8003200:	6812      	ldr	r2, [r2, #0]
 8003202:	601a      	str	r2, [r3, #0]
	Joystick->Mode = Settings.Mode;
 8003204:	7aba      	ldrb	r2, [r7, #10]
 8003206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003208:	721a      	strb	r2, [r3, #8]
	Joystick->Position = JoystickNeutral;
 800320a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800320c:	2200      	movs	r2, #0
 800320e:	711a      	strb	r2, [r3, #4]
	Joystick->X_PosRaw = 0;
 8003210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003212:	2200      	movs	r2, #0
 8003214:	801a      	strh	r2, [r3, #0]
	Joystick->Y_PosRaw = 0;
 8003216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003218:	2200      	movs	r2, #0
 800321a:	805a      	strh	r2, [r3, #2]
}
 800321c:	bf00      	nop
 800321e:	46bd      	mov	sp, r7
 8003220:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003224:	b004      	add	sp, #16
 8003226:	4770      	bx	lr

08003228 <JoystickRead>:
 *@Params: Joystick Handle
 *@Return: JoystickChanged if previous position != new position. Uses XPosRaw/YPosRaw in analog mode
 *@Precondition: JoystickHandle must be initialized
 *@Postcondition: Joystick XPosRaw/YPosRaw/State will be updated.
 **************************************//**************************************/
JoystickStatus_t JoystickRead(Joystick_Handle_t *Joystick){
 8003228:	b580      	push	{r7, lr}
 800322a:	b084      	sub	sp, #16
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
	JoystickState_t PreviousState = Joystick->Position;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	791b      	ldrb	r3, [r3, #4]
 8003234:	73fb      	strb	r3, [r7, #15]
	int16_t PreviousX = Joystick->X_PosRaw;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	881b      	ldrh	r3, [r3, #0]
 800323a:	81bb      	strh	r3, [r7, #12]
	int16_t PreviousY = Joystick->Y_PosRaw;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	885b      	ldrh	r3, [r3, #2]
 8003240:	817b      	strh	r3, [r7, #10]
	Joystick->Position = Joystick->IO_Driver.read(Joystick->DeadZone, &Joystick->X_PosRaw, &Joystick->Y_PosRaw);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003246:	687a      	ldr	r2, [r7, #4]
 8003248:	88d0      	ldrh	r0, [r2, #6]
 800324a:	6879      	ldr	r1, [r7, #4]
 800324c:	687a      	ldr	r2, [r7, #4]
 800324e:	3202      	adds	r2, #2
 8003250:	4798      	blx	r3
 8003252:	4603      	mov	r3, r0
 8003254:	461a      	mov	r2, r3
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	711a      	strb	r2, [r3, #4]

	if(Joystick->Mode == Joystick4Way || Joystick->Mode == Joystick8Way){
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	7a1b      	ldrb	r3, [r3, #8]
 800325e:	2b01      	cmp	r3, #1
 8003260:	d003      	beq.n	800326a <JoystickRead+0x42>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	7a1b      	ldrb	r3, [r3, #8]
 8003266:	2b02      	cmp	r3, #2
 8003268:	d108      	bne.n	800327c <JoystickRead+0x54>
	    if(Joystick->Position != PreviousState){
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	791b      	ldrb	r3, [r3, #4]
 800326e:	7bfa      	ldrb	r2, [r7, #15]
 8003270:	429a      	cmp	r2, r3
 8003272:	d001      	beq.n	8003278 <JoystickRead+0x50>
		    return JoystickChanged;
 8003274:	2300      	movs	r3, #0
 8003276:	e012      	b.n	800329e <JoystickRead+0x76>
	    } else {
		    return JoystickUnchanged;
 8003278:	2301      	movs	r3, #1
 800327a:	e010      	b.n	800329e <JoystickRead+0x76>
	    }
	}

	if(Joystick->X_PosRaw != PreviousX || Joystick->Y_PosRaw != PreviousY){
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003282:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8003286:	429a      	cmp	r2, r3
 8003288:	d106      	bne.n	8003298 <JoystickRead+0x70>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003290:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003294:	429a      	cmp	r2, r3
 8003296:	d001      	beq.n	800329c <JoystickRead+0x74>
		return JoystickChanged;
 8003298:	2300      	movs	r3, #0
 800329a:	e000      	b.n	800329e <JoystickRead+0x76>
	} else {
		return JoystickUnchanged;
 800329c:	2301      	movs	r3, #1
	}
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3710      	adds	r7, #16
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
	...

080032a8 <JoystickIOInit>:
 *@Params: None
 *@Return: None
 *@Precondition: None
 *@Postcondition: Low level hardware will be initialized. (DMA, ADC, GPIO)
 **************************************//**************************************/
static void JoystickIOInit(){
 80032a8:	b580      	push	{r7, lr}
 80032aa:	af00      	add	r7, sp, #0
	ADC_GPIO_Init();
 80032ac:	f7fe ff10 	bl	80020d0 <ADC_GPIO_Init>
	ADC_DMA_Init();
 80032b0:	f7fe fe98 	bl	8001fe4 <ADC_DMA_Init>
	ADC1_Init();
 80032b4:	f7fe fe16 	bl	8001ee4 <ADC1_Init>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buffer, 2);
 80032b8:	2202      	movs	r2, #2
 80032ba:	4903      	ldr	r1, [pc, #12]	; (80032c8 <JoystickIOInit+0x20>)
 80032bc:	4803      	ldr	r0, [pc, #12]	; (80032cc <JoystickIOInit+0x24>)
 80032be:	f000 fb91 	bl	80039e4 <HAL_ADC_Start_DMA>
}
 80032c2:	bf00      	nop
 80032c4:	bd80      	pop	{r7, pc}
 80032c6:	bf00      	nop
 80032c8:	20000180 	.word	0x20000180
 80032cc:	20000c94 	.word	0x20000c94

080032d0 <JoystickIODeInit>:
 *@Params: None
 *@Return: None
 *@Precondition: None
 *@Postcondition: DMA transfers from Joystick will be stopped.
 **************************************//**************************************/
static void JoystickIODeInit(void){
 80032d0:	b580      	push	{r7, lr}
 80032d2:	af00      	add	r7, sp, #0
   HAL_ADC_Stop_DMA(&hadc1);
 80032d4:	4805      	ldr	r0, [pc, #20]	; (80032ec <JoystickIODeInit+0x1c>)
 80032d6:	f000 fc75 	bl	8003bc4 <HAL_ADC_Stop_DMA>
   HAL_NVIC_DisableIRQ(DMA2_Stream0_IRQn);
 80032da:	2038      	movs	r0, #56	; 0x38
 80032dc:	f001 f8e1 	bl	80044a2 <HAL_NVIC_DisableIRQ>
   HAL_NVIC_ClearPendingIRQ(DMA2_Stream0_IRQn);
 80032e0:	2038      	movs	r0, #56	; 0x38
 80032e2:	f001 f8f8 	bl	80044d6 <HAL_NVIC_ClearPendingIRQ>
}
 80032e6:	bf00      	nop
 80032e8:	bd80      	pop	{r7, pc}
 80032ea:	bf00      	nop
 80032ec:	20000c94 	.word	0x20000c94

080032f0 <JoystickIORead>:
 *@Params: Joystick Deadzone, X Position buffer, Y Position buffer
 *@Return: Position of the joystick
 *@Precondition: Joystick IO should be initialized
 *@Postcondition: X_Pos and Y_Pos will contain raw joystick value.
 **************************************//**************************************/
static JoystickState_t JoystickIORead(uint16_t Deadzone, int16_t *X_Pos, int16_t *Y_Pos){
 80032f0:	b480      	push	{r7}
 80032f2:	b087      	sub	sp, #28
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	4603      	mov	r3, r0
 80032f8:	60b9      	str	r1, [r7, #8]
 80032fa:	607a      	str	r2, [r7, #4]
 80032fc:	81fb      	strh	r3, [r7, #14]
	//Handle Deadzone values that are too large.
    if(Deadzone > INT16_MAX - 1){
 80032fe:	89fb      	ldrh	r3, [r7, #14]
 8003300:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8003304:	4293      	cmp	r3, r2
 8003306:	d902      	bls.n	800330e <JoystickIORead+0x1e>
    	Deadzone = INT16_MAX - 1;
 8003308:	f647 73fe 	movw	r3, #32766	; 0x7ffe
 800330c:	81fb      	strh	r3, [r7, #14]
    }

    //Calculate X Position
	int16_t temp = adc_buffer[ADC_X_INDEX] - 2048 + ADC_X_OFFSET;
 800330e:	2301      	movs	r3, #1
 8003310:	461a      	mov	r2, r3
 8003312:	4b6b      	ldr	r3, [pc, #428]	; (80034c0 <JoystickIORead+0x1d0>)
 8003314:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8003318:	b21b      	sxth	r3, r3
 800331a:	b29a      	uxth	r2, r3
 800331c:	2305      	movs	r3, #5
 800331e:	b29b      	uxth	r3, r3
 8003320:	4413      	add	r3, r2
 8003322:	b29b      	uxth	r3, r3
 8003324:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8003328:	b29b      	uxth	r3, r3
 800332a:	82fb      	strh	r3, [r7, #22]
	if(temp > ADC_UPPER_LIMIT){
 800332c:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8003330:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003334:	4293      	cmp	r3, r2
 8003336:	dd03      	ble.n	8003340 <JoystickIORead+0x50>
		temp = ADC_UPPER_LIMIT;
 8003338:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800333c:	82fb      	strh	r3, [r7, #22]
 800333e:	e007      	b.n	8003350 <JoystickIORead+0x60>
	} else if (temp < ADC_LOWER_LIMIT){
 8003340:	4a60      	ldr	r2, [pc, #384]	; (80034c4 <JoystickIORead+0x1d4>)
 8003342:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003346:	4293      	cmp	r3, r2
 8003348:	da02      	bge.n	8003350 <JoystickIORead+0x60>
		temp = ADC_LOWER_LIMIT;
 800334a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800334e:	82fb      	strh	r3, [r7, #22]
	}
	temp = temp * 16; //convert to 16 bit number
 8003350:	8afb      	ldrh	r3, [r7, #22]
 8003352:	011b      	lsls	r3, r3, #4
 8003354:	b29b      	uxth	r3, r3
 8003356:	82fb      	strh	r3, [r7, #22]
	if(temp > Deadzone || temp < -(int16_t)Deadzone){
 8003358:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800335c:	89fb      	ldrh	r3, [r7, #14]
 800335e:	429a      	cmp	r2, r3
 8003360:	dc06      	bgt.n	8003370 <JoystickIORead+0x80>
 8003362:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003366:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800336a:	425b      	negs	r3, r3
 800336c:	429a      	cmp	r2, r3
 800336e:	da03      	bge.n	8003378 <JoystickIORead+0x88>
	    *X_Pos = temp;
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	8afa      	ldrh	r2, [r7, #22]
 8003374:	801a      	strh	r2, [r3, #0]
 8003376:	e002      	b.n	800337e <JoystickIORead+0x8e>
	} else {
        *X_Pos = 0;
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	2200      	movs	r2, #0
 800337c:	801a      	strh	r2, [r3, #0]
	}

	//Calculate Y Position
	temp = adc_buffer[ADC_Y_INDEX] - 2048 + ADC_Y_OFFSET;
 800337e:	2300      	movs	r3, #0
 8003380:	461a      	mov	r2, r3
 8003382:	4b4f      	ldr	r3, [pc, #316]	; (80034c0 <JoystickIORead+0x1d0>)
 8003384:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8003388:	b21b      	sxth	r3, r3
 800338a:	b29a      	uxth	r2, r3
 800338c:	f06f 031d 	mvn.w	r3, #29
 8003390:	b29b      	uxth	r3, r3
 8003392:	4413      	add	r3, r2
 8003394:	b29b      	uxth	r3, r3
 8003396:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 800339a:	b29b      	uxth	r3, r3
 800339c:	82fb      	strh	r3, [r7, #22]
	if(temp > ADC_UPPER_LIMIT){
 800339e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80033a2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80033a6:	4293      	cmp	r3, r2
 80033a8:	dd03      	ble.n	80033b2 <JoystickIORead+0xc2>
		temp = ADC_UPPER_LIMIT;
 80033aa:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80033ae:	82fb      	strh	r3, [r7, #22]
 80033b0:	e007      	b.n	80033c2 <JoystickIORead+0xd2>
	} else if (temp < ADC_LOWER_LIMIT){
 80033b2:	4a44      	ldr	r2, [pc, #272]	; (80034c4 <JoystickIORead+0x1d4>)
 80033b4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80033b8:	4293      	cmp	r3, r2
 80033ba:	da02      	bge.n	80033c2 <JoystickIORead+0xd2>
		temp = ADC_LOWER_LIMIT;
 80033bc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80033c0:	82fb      	strh	r3, [r7, #22]
	}
	temp = temp * 16; //convert to 16 bit number
 80033c2:	8afb      	ldrh	r3, [r7, #22]
 80033c4:	011b      	lsls	r3, r3, #4
 80033c6:	b29b      	uxth	r3, r3
 80033c8:	82fb      	strh	r3, [r7, #22]
	if(temp > Deadzone || temp < -(int16_t)Deadzone){
 80033ca:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80033ce:	89fb      	ldrh	r3, [r7, #14]
 80033d0:	429a      	cmp	r2, r3
 80033d2:	dc06      	bgt.n	80033e2 <JoystickIORead+0xf2>
 80033d4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80033d8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80033dc:	425b      	negs	r3, r3
 80033de:	429a      	cmp	r2, r3
 80033e0:	da03      	bge.n	80033ea <JoystickIORead+0xfa>
	    *Y_Pos = temp;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	8afa      	ldrh	r2, [r7, #22]
 80033e6:	801a      	strh	r2, [r3, #0]
 80033e8:	e002      	b.n	80033f0 <JoystickIORead+0x100>
	} else {
        *Y_Pos = 0;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2200      	movs	r2, #0
 80033ee:	801a      	strh	r2, [r3, #0]
	}

	if(*X_Pos == 0 && *Y_Pos == 0){
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d106      	bne.n	8003408 <JoystickIORead+0x118>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d101      	bne.n	8003408 <JoystickIORead+0x118>
		return JoystickNeutral;
 8003404:	2300      	movs	r3, #0
 8003406:	e054      	b.n	80034b2 <JoystickIORead+0x1c2>
	} else if(*X_Pos > 0 && *Y_Pos == 0){
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800340e:	2b00      	cmp	r3, #0
 8003410:	dd06      	ble.n	8003420 <JoystickIORead+0x130>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d101      	bne.n	8003420 <JoystickIORead+0x130>
		return Joystick_Right;
 800341c:	2301      	movs	r3, #1
 800341e:	e048      	b.n	80034b2 <JoystickIORead+0x1c2>

	} else if(*X_Pos > 0 && *Y_Pos > 0){
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003426:	2b00      	cmp	r3, #0
 8003428:	dd06      	ble.n	8003438 <JoystickIORead+0x148>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003430:	2b00      	cmp	r3, #0
 8003432:	dd01      	ble.n	8003438 <JoystickIORead+0x148>
		return Joystick_UpRight;
 8003434:	2302      	movs	r3, #2
 8003436:	e03c      	b.n	80034b2 <JoystickIORead+0x1c2>

	} else if(*X_Pos == 0 && *Y_Pos > 0){
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d106      	bne.n	8003450 <JoystickIORead+0x160>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003448:	2b00      	cmp	r3, #0
 800344a:	dd01      	ble.n	8003450 <JoystickIORead+0x160>
		return Joystick_Up;
 800344c:	2303      	movs	r3, #3
 800344e:	e030      	b.n	80034b2 <JoystickIORead+0x1c2>

	} else if(*X_Pos < 0 && *Y_Pos > 0){
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003456:	2b00      	cmp	r3, #0
 8003458:	da06      	bge.n	8003468 <JoystickIORead+0x178>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003460:	2b00      	cmp	r3, #0
 8003462:	dd01      	ble.n	8003468 <JoystickIORead+0x178>
		return Joystick_UpLeft;
 8003464:	2304      	movs	r3, #4
 8003466:	e024      	b.n	80034b2 <JoystickIORead+0x1c2>

	} else if(*X_Pos < 0 && *Y_Pos == 0){
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800346e:	2b00      	cmp	r3, #0
 8003470:	da06      	bge.n	8003480 <JoystickIORead+0x190>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d101      	bne.n	8003480 <JoystickIORead+0x190>
		return Joystick_Left;
 800347c:	2305      	movs	r3, #5
 800347e:	e018      	b.n	80034b2 <JoystickIORead+0x1c2>

	} else if(*X_Pos < 0 && *Y_Pos < 0){
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003486:	2b00      	cmp	r3, #0
 8003488:	da06      	bge.n	8003498 <JoystickIORead+0x1a8>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003490:	2b00      	cmp	r3, #0
 8003492:	da01      	bge.n	8003498 <JoystickIORead+0x1a8>
		return Joystick_DownLeft;
 8003494:	2306      	movs	r3, #6
 8003496:	e00c      	b.n	80034b2 <JoystickIORead+0x1c2>

	} else if(*X_Pos == 0 && *Y_Pos < 0){
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d106      	bne.n	80034b0 <JoystickIORead+0x1c0>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	da01      	bge.n	80034b0 <JoystickIORead+0x1c0>
		return Joystick_Down;
 80034ac:	2307      	movs	r3, #7
 80034ae:	e000      	b.n	80034b2 <JoystickIORead+0x1c2>
	}
	else{
		return Joystick_DownRight;
 80034b0:	2308      	movs	r3, #8
	}

}
 80034b2:	4618      	mov	r0, r3
 80034b4:	371c      	adds	r7, #28
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr
 80034be:	bf00      	nop
 80034c0:	20000180 	.word	0x20000180
 80034c4:	fffff800 	.word	0xfffff800

080034c8 <SerialLEDInit>:
 *  Created on: May 22, 2022
 *      Author: evanl
 */
#include "SerialLED.h"

void SerialLEDInit(SerialLED_InitStruct_t Settings, SerialLED_Handle_t *LED, SerialLED_IO_Drv_t IO){
 80034c8:	b082      	sub	sp, #8
 80034ca:	b5b0      	push	{r4, r5, r7, lr}
 80034cc:	b084      	sub	sp, #16
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	f107 0408 	add.w	r4, r7, #8
 80034d4:	e884 0003 	stmia.w	r4, {r0, r1}
 80034d8:	607a      	str	r2, [r7, #4]
 80034da:	627b      	str	r3, [r7, #36]	; 0x24
    LED->IO_Driver = IO;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	f103 0408 	add.w	r4, r3, #8
 80034e2:	f107 0524 	add.w	r5, r7, #36	; 0x24
 80034e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80034e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80034ea:	682b      	ldr	r3, [r5, #0]
 80034ec:	6023      	str	r3, [r4, #0]
    LED->Address = Settings.address;
 80034ee:	893a      	ldrh	r2, [r7, #8]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	801a      	strh	r2, [r3, #0]
    LED->red = Settings.red;
 80034f4:	7afa      	ldrb	r2, [r7, #11]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	70da      	strb	r2, [r3, #3]
    LED->green = Settings.green;
 80034fa:	7aba      	ldrb	r2, [r7, #10]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	709a      	strb	r2, [r3, #2]
    LED->blue = Settings.blue;
 8003500:	7b3a      	ldrb	r2, [r7, #12]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	711a      	strb	r2, [r3, #4]
    LED->IO_Driver.init();
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	4798      	blx	r3
    LED->IO_Driver.write(LED->Address, LED->red, LED->green, LED->blue);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	695c      	ldr	r4, [r3, #20]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	8818      	ldrh	r0, [r3, #0]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	78d9      	ldrb	r1, [r3, #3]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	789a      	ldrb	r2, [r3, #2]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	791b      	ldrb	r3, [r3, #4]
 8003520:	47a0      	blx	r4
}
 8003522:	bf00      	nop
 8003524:	3710      	adds	r7, #16
 8003526:	46bd      	mov	sp, r7
 8003528:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800352c:	b002      	add	sp, #8
 800352e:	4770      	bx	lr

08003530 <SerialLED_IO_Init>:
//static const uint8_t TIM_PERIOD = 119;     //1.25uS with 96MHz clock
static const uint8_t ZERO_DUTY_CYCLE = 29; //.3uS
static const uint8_t ONE_DUTY_CYCLE = 58;  //.6uS
static const uint8_t RESET_DUTY_CYCLE = 0;

static void SerialLED_IO_Init(void){
 8003530:	b580      	push	{r7, lr}
 8003532:	b082      	sub	sp, #8
 8003534:	af00      	add	r7, sp, #0
	//ensure reset signal is 0
	for(uint32_t i = NUMBER_OF_LEDS * BITS_PER_LED; i < LED_DMA_BUFFER_LENGTH; i++){
 8003536:	2360      	movs	r3, #96	; 0x60
 8003538:	607b      	str	r3, [r7, #4]
 800353a:	e008      	b.n	800354e <SerialLED_IO_Init+0x1e>
		LED_DMA_BUFFER[i] = RESET_DUTY_CYCLE;
 800353c:	2300      	movs	r3, #0
 800353e:	b299      	uxth	r1, r3
 8003540:	4a0d      	ldr	r2, [pc, #52]	; (8003578 <SerialLED_IO_Init+0x48>)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(uint32_t i = NUMBER_OF_LEDS * BITS_PER_LED; i < LED_DMA_BUFFER_LENGTH; i++){
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	3301      	adds	r3, #1
 800354c:	607b      	str	r3, [r7, #4]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2b9f      	cmp	r3, #159	; 0x9f
 8003552:	d9f3      	bls.n	800353c <SerialLED_IO_Init+0xc>
	}
	TIM3_GPIO_Init();
 8003554:	f7fe fdd6 	bl	8002104 <TIM3_GPIO_Init>
	TIM_DMA_Init();
 8003558:	f7fe fd60 	bl	800201c <TIM_DMA_Init>
    if(initialize_status == LED_uninitialized){
 800355c:	4b07      	ldr	r3, [pc, #28]	; (800357c <SerialLED_IO_Init+0x4c>)
 800355e:	781b      	ldrb	r3, [r3, #0]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d104      	bne.n	800356e <SerialLED_IO_Init+0x3e>
	    TIM3_Init();
 8003564:	f7ff fc64 	bl	8002e30 <TIM3_Init>
	    initialize_status = LED_initialized;
 8003568:	4b04      	ldr	r3, [pc, #16]	; (800357c <SerialLED_IO_Init+0x4c>)
 800356a:	2201      	movs	r2, #1
 800356c:	701a      	strb	r2, [r3, #0]
    }

}
 800356e:	bf00      	nop
 8003570:	3708      	adds	r7, #8
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}
 8003576:	bf00      	nop
 8003578:	20001074 	.word	0x20001074
 800357c:	200011b4 	.word	0x200011b4

08003580 <SerialLED_IO_DeInit>:

static void SerialLED_IO_DeInit(void){
 8003580:	b580      	push	{r7, lr}
 8003582:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop_DMA(&htim3, TIM_CHANNEL_1);
 8003584:	2100      	movs	r1, #0
 8003586:	4802      	ldr	r0, [pc, #8]	; (8003590 <SerialLED_IO_DeInit+0x10>)
 8003588:	f005 fcfe 	bl	8008f88 <HAL_TIM_PWM_Stop_DMA>
}
 800358c:	bf00      	nop
 800358e:	bd80      	pop	{r7, pc}
 8003590:	20000f24 	.word	0x20000f24

08003594 <SerialLED_IO_Write>:

static void SerialLED_IO_Write(uint16_t Address, uint8_t red, uint8_t green, uint8_t blue){
 8003594:	b590      	push	{r4, r7, lr}
 8003596:	b085      	sub	sp, #20
 8003598:	af00      	add	r7, sp, #0
 800359a:	4604      	mov	r4, r0
 800359c:	4608      	mov	r0, r1
 800359e:	4611      	mov	r1, r2
 80035a0:	461a      	mov	r2, r3
 80035a2:	4623      	mov	r3, r4
 80035a4:	80fb      	strh	r3, [r7, #6]
 80035a6:	4603      	mov	r3, r0
 80035a8:	717b      	strb	r3, [r7, #5]
 80035aa:	460b      	mov	r3, r1
 80035ac:	713b      	strb	r3, [r7, #4]
 80035ae:	4613      	mov	r3, r2
 80035b0:	70fb      	strb	r3, [r7, #3]
	//HAL_TIM_PWM_Stop_DMA(&htim3, TIM_CHANNEL_1);
    for(uint16_t i = 0; i < 8; i++){
 80035b2:	2300      	movs	r3, #0
 80035b4:	81fb      	strh	r3, [r7, #14]
 80035b6:	e052      	b.n	800365e <SerialLED_IO_Write+0xca>
    	LED_DMA_BUFFER[(Address * BITS_PER_LED) + 0  + i] = green & (1 << (7 - i)) ? ONE_DUTY_CYCLE : ZERO_DUTY_CYCLE;
 80035b8:	793a      	ldrb	r2, [r7, #4]
 80035ba:	89fb      	ldrh	r3, [r7, #14]
 80035bc:	f1c3 0307 	rsb	r3, r3, #7
 80035c0:	fa42 f303 	asr.w	r3, r2, r3
 80035c4:	f003 0301 	and.w	r3, r3, #1
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d002      	beq.n	80035d2 <SerialLED_IO_Write+0x3e>
 80035cc:	233a      	movs	r3, #58	; 0x3a
 80035ce:	b29a      	uxth	r2, r3
 80035d0:	e001      	b.n	80035d6 <SerialLED_IO_Write+0x42>
 80035d2:	231d      	movs	r3, #29
 80035d4:	b29a      	uxth	r2, r3
 80035d6:	88f9      	ldrh	r1, [r7, #6]
 80035d8:	460b      	mov	r3, r1
 80035da:	005b      	lsls	r3, r3, #1
 80035dc:	440b      	add	r3, r1
 80035de:	00db      	lsls	r3, r3, #3
 80035e0:	4619      	mov	r1, r3
 80035e2:	89fb      	ldrh	r3, [r7, #14]
 80035e4:	440b      	add	r3, r1
 80035e6:	4924      	ldr	r1, [pc, #144]	; (8003678 <SerialLED_IO_Write+0xe4>)
 80035e8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    	LED_DMA_BUFFER[(Address * BITS_PER_LED) + 8  + i] = red   & (1 << (7 - i)) ? ONE_DUTY_CYCLE : ZERO_DUTY_CYCLE;
 80035ec:	797a      	ldrb	r2, [r7, #5]
 80035ee:	89fb      	ldrh	r3, [r7, #14]
 80035f0:	f1c3 0307 	rsb	r3, r3, #7
 80035f4:	fa42 f303 	asr.w	r3, r2, r3
 80035f8:	f003 0301 	and.w	r3, r3, #1
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d002      	beq.n	8003606 <SerialLED_IO_Write+0x72>
 8003600:	233a      	movs	r3, #58	; 0x3a
 8003602:	b29a      	uxth	r2, r3
 8003604:	e001      	b.n	800360a <SerialLED_IO_Write+0x76>
 8003606:	231d      	movs	r3, #29
 8003608:	b29a      	uxth	r2, r3
 800360a:	88f9      	ldrh	r1, [r7, #6]
 800360c:	460b      	mov	r3, r1
 800360e:	005b      	lsls	r3, r3, #1
 8003610:	440b      	add	r3, r1
 8003612:	00db      	lsls	r3, r3, #3
 8003614:	4619      	mov	r1, r3
 8003616:	89fb      	ldrh	r3, [r7, #14]
 8003618:	440b      	add	r3, r1
 800361a:	3308      	adds	r3, #8
 800361c:	4916      	ldr	r1, [pc, #88]	; (8003678 <SerialLED_IO_Write+0xe4>)
 800361e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    	LED_DMA_BUFFER[(Address * BITS_PER_LED) + 16 + i] = blue  & (1 << (7 - i)) ? ONE_DUTY_CYCLE : ZERO_DUTY_CYCLE;
 8003622:	78fa      	ldrb	r2, [r7, #3]
 8003624:	89fb      	ldrh	r3, [r7, #14]
 8003626:	f1c3 0307 	rsb	r3, r3, #7
 800362a:	fa42 f303 	asr.w	r3, r2, r3
 800362e:	f003 0301 	and.w	r3, r3, #1
 8003632:	2b00      	cmp	r3, #0
 8003634:	d002      	beq.n	800363c <SerialLED_IO_Write+0xa8>
 8003636:	233a      	movs	r3, #58	; 0x3a
 8003638:	b29a      	uxth	r2, r3
 800363a:	e001      	b.n	8003640 <SerialLED_IO_Write+0xac>
 800363c:	231d      	movs	r3, #29
 800363e:	b29a      	uxth	r2, r3
 8003640:	88f9      	ldrh	r1, [r7, #6]
 8003642:	460b      	mov	r3, r1
 8003644:	005b      	lsls	r3, r3, #1
 8003646:	440b      	add	r3, r1
 8003648:	00db      	lsls	r3, r3, #3
 800364a:	4619      	mov	r1, r3
 800364c:	89fb      	ldrh	r3, [r7, #14]
 800364e:	440b      	add	r3, r1
 8003650:	3310      	adds	r3, #16
 8003652:	4909      	ldr	r1, [pc, #36]	; (8003678 <SerialLED_IO_Write+0xe4>)
 8003654:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    for(uint16_t i = 0; i < 8; i++){
 8003658:	89fb      	ldrh	r3, [r7, #14]
 800365a:	3301      	adds	r3, #1
 800365c:	81fb      	strh	r3, [r7, #14]
 800365e:	89fb      	ldrh	r3, [r7, #14]
 8003660:	2b07      	cmp	r3, #7
 8003662:	d9a9      	bls.n	80035b8 <SerialLED_IO_Write+0x24>
    }
    HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, (uint32_t*)LED_DMA_BUFFER, LED_DMA_BUFFER_LENGTH);
 8003664:	23a0      	movs	r3, #160	; 0xa0
 8003666:	4a04      	ldr	r2, [pc, #16]	; (8003678 <SerialLED_IO_Write+0xe4>)
 8003668:	2100      	movs	r1, #0
 800366a:	4804      	ldr	r0, [pc, #16]	; (800367c <SerialLED_IO_Write+0xe8>)
 800366c:	f005 fadc 	bl	8008c28 <HAL_TIM_PWM_Start_DMA>
}
 8003670:	bf00      	nop
 8003672:	3714      	adds	r7, #20
 8003674:	46bd      	mov	sp, r7
 8003676:	bd90      	pop	{r4, r7, pc}
 8003678:	20001074 	.word	0x20001074
 800367c:	20000f24 	.word	0x20000f24

08003680 <TouchButtonInit>:
 *  Created on: May 26, 2022
 *      Author: evanl
 */
#include "TouchButton.h"

void TouchButtonInit(TouchButton_Init_Struct_t Settings, TouchButton_Handle_t *Dev, TouchButton_IO_Drv_t IO_Driver){
 8003680:	b5b0      	push	{r4, r5, r7, lr}
 8003682:	b084      	sub	sp, #16
 8003684:	af00      	add	r7, sp, #0
 8003686:	1d3c      	adds	r4, r7, #4
 8003688:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800368c:	603b      	str	r3, [r7, #0]
    Dev->IO_Driver = IO_Driver;
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	f103 0410 	add.w	r4, r3, #16
 8003694:	f107 0520 	add.w	r5, r7, #32
 8003698:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800369a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800369c:	682b      	ldr	r3, [r5, #0]
 800369e:	6023      	str	r3, [r4, #0]
    Dev->KeyFunction = Settings.KeyFunction;
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	68fa      	ldr	r2, [r7, #12]
 80036a4:	609a      	str	r2, [r3, #8]
    Dev->TopLeftBound = Settings.TopLeftBound;
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	687a      	ldr	r2, [r7, #4]
 80036aa:	601a      	str	r2, [r3, #0]
    Dev->BottomRightBound = Settings.BottomRightBound;
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	68ba      	ldr	r2, [r7, #8]
 80036b0:	605a      	str	r2, [r3, #4]
    Dev->State = TouchButtonUnpressed;
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	2201      	movs	r2, #1
 80036b6:	731a      	strb	r2, [r3, #12]
    Dev->IO_Driver.init();
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	691b      	ldr	r3, [r3, #16]
 80036bc:	4798      	blx	r3
}
 80036be:	bf00      	nop
 80036c0:	3710      	adds	r7, #16
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bdb0      	pop	{r4, r5, r7, pc}

080036c6 <TouchButtonRead>:

void TouchButtonSetFunction(TouchButton_Handle_t* Dev, KeyFunction_t NewFunction){
    Dev->KeyFunction = NewFunction;
}

TouchButton_Status_t TouchButtonRead(TouchButton_Handle_t *Dev){
 80036c6:	b580      	push	{r7, lr}
 80036c8:	b084      	sub	sp, #16
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	6078      	str	r0, [r7, #4]
	TouchButtonState_t Previous_State = Dev->State;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	7b1b      	ldrb	r3, [r3, #12]
 80036d2:	73fb      	strb	r3, [r7, #15]
    Dev->State = Dev->IO_Driver.read(Dev->TopLeftBound, Dev->BottomRightBound);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	699b      	ldr	r3, [r3, #24]
 80036d8:	6879      	ldr	r1, [r7, #4]
 80036da:	687a      	ldr	r2, [r7, #4]
 80036dc:	6849      	ldr	r1, [r1, #4]
 80036de:	6810      	ldr	r0, [r2, #0]
 80036e0:	4798      	blx	r3
 80036e2:	4603      	mov	r3, r0
 80036e4:	461a      	mov	r2, r3
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	731a      	strb	r2, [r3, #12]
    if(Previous_State != Dev->State){
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	7b1b      	ldrb	r3, [r3, #12]
 80036ee:	7bfa      	ldrb	r2, [r7, #15]
 80036f0:	429a      	cmp	r2, r3
 80036f2:	d001      	beq.n	80036f8 <TouchButtonRead+0x32>
    	return TouchButtonChanged;
 80036f4:	2300      	movs	r3, #0
 80036f6:	e000      	b.n	80036fa <TouchButtonRead+0x34>
    } else {
    	return TouchButtonUnchanged;
 80036f8:	2301      	movs	r3, #1
    }
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3710      	adds	r7, #16
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
	...

08003704 <TouchButton_IO_Init>:
	TouchButton_Initialized
}TouchButton_Init_Status_t;

static TouchButton_Init_Status_t TouchButton_Init = TouchButton_Uninitialized;

static void TouchButton_IO_Init(void){;
 8003704:	b590      	push	{r4, r7, lr}
 8003706:	b083      	sub	sp, #12
 8003708:	af02      	add	r7, sp, #8
	if(TouchButton_Init == TouchButton_Uninitialized){
 800370a:	4b0b      	ldr	r3, [pc, #44]	; (8003738 <TouchButton_IO_Init+0x34>)
 800370c:	781b      	ldrb	r3, [r3, #0]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d10e      	bne.n	8003730 <TouchButton_IO_Init+0x2c>
		FT6206_Init(&TouchScreen, FT6202_Drv);
 8003712:	4b0a      	ldr	r3, [pc, #40]	; (800373c <TouchButton_IO_Init+0x38>)
 8003714:	466c      	mov	r4, sp
 8003716:	f103 020c 	add.w	r2, r3, #12
 800371a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800371e:	e884 0003 	stmia.w	r4, {r0, r1}
 8003722:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003724:	4806      	ldr	r0, [pc, #24]	; (8003740 <TouchButton_IO_Init+0x3c>)
 8003726:	f7fc ff2d 	bl	8000584 <FT6206_Init>
		TouchButton_Init = TouchButton_Initialized;
 800372a:	4b03      	ldr	r3, [pc, #12]	; (8003738 <TouchButton_IO_Init+0x34>)
 800372c:	2201      	movs	r2, #1
 800372e:	701a      	strb	r2, [r3, #0]
	}
}
 8003730:	bf00      	nop
 8003732:	3704      	adds	r7, #4
 8003734:	46bd      	mov	sp, r7
 8003736:	bd90      	pop	{r4, r7, pc}
 8003738:	200011b5 	.word	0x200011b5
 800373c:	20000000 	.word	0x20000000
 8003740:	200011b8 	.word	0x200011b8

08003744 <TouchButton_IO_DeInit>:

static void TouchButton_IO_DeInit(void){
 8003744:	b580      	push	{r7, lr}
 8003746:	af00      	add	r7, sp, #0
	if(TouchButton_Init == TouchButton_Initialized){
 8003748:	4b05      	ldr	r3, [pc, #20]	; (8003760 <TouchButton_IO_DeInit+0x1c>)
 800374a:	781b      	ldrb	r3, [r3, #0]
 800374c:	2b01      	cmp	r3, #1
 800374e:	d105      	bne.n	800375c <TouchButton_IO_DeInit+0x18>
		FT6206_DeInit(&TouchScreen);
 8003750:	4804      	ldr	r0, [pc, #16]	; (8003764 <TouchButton_IO_DeInit+0x20>)
 8003752:	f7fc ff45 	bl	80005e0 <FT6206_DeInit>
		TouchButton_Init = TouchButton_Uninitialized;
 8003756:	4b02      	ldr	r3, [pc, #8]	; (8003760 <TouchButton_IO_DeInit+0x1c>)
 8003758:	2200      	movs	r2, #0
 800375a:	701a      	strb	r2, [r3, #0]
	}
}
 800375c:	bf00      	nop
 800375e:	bd80      	pop	{r7, pc}
 8003760:	200011b5 	.word	0x200011b5
 8003764:	200011b8 	.word	0x200011b8

08003768 <TouchButton_IO_Read>:

static TouchButtonState_t TouchButton_IO_Read(TouchButtonCoordinate_t TopLeftBound, TouchButtonCoordinate_t BottomRightBound){
 8003768:	b480      	push	{r7}
 800376a:	b083      	sub	sp, #12
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
 8003770:	6039      	str	r1, [r7, #0]
	if(TouchScreen.P1_XPos >= TopLeftBound.X_Position && TouchScreen.P1_XPos <= BottomRightBound.X_Position && TouchScreen.P1_YPos >= TopLeftBound.Y_Position && TouchScreen.P1_YPos <= BottomRightBound.Y_Position){
 8003772:	4b14      	ldr	r3, [pc, #80]	; (80037c4 <TouchButton_IO_Read+0x5c>)
 8003774:	881b      	ldrh	r3, [r3, #0]
 8003776:	b29a      	uxth	r2, r3
 8003778:	88bb      	ldrh	r3, [r7, #4]
 800377a:	429a      	cmp	r2, r3
 800377c:	d31a      	bcc.n	80037b4 <TouchButton_IO_Read+0x4c>
 800377e:	4b11      	ldr	r3, [pc, #68]	; (80037c4 <TouchButton_IO_Read+0x5c>)
 8003780:	881b      	ldrh	r3, [r3, #0]
 8003782:	b29a      	uxth	r2, r3
 8003784:	883b      	ldrh	r3, [r7, #0]
 8003786:	429a      	cmp	r2, r3
 8003788:	d814      	bhi.n	80037b4 <TouchButton_IO_Read+0x4c>
 800378a:	4b0e      	ldr	r3, [pc, #56]	; (80037c4 <TouchButton_IO_Read+0x5c>)
 800378c:	885b      	ldrh	r3, [r3, #2]
 800378e:	b29a      	uxth	r2, r3
 8003790:	88fb      	ldrh	r3, [r7, #6]
 8003792:	429a      	cmp	r2, r3
 8003794:	d30e      	bcc.n	80037b4 <TouchButton_IO_Read+0x4c>
 8003796:	4b0b      	ldr	r3, [pc, #44]	; (80037c4 <TouchButton_IO_Read+0x5c>)
 8003798:	885b      	ldrh	r3, [r3, #2]
 800379a:	b29a      	uxth	r2, r3
 800379c:	887b      	ldrh	r3, [r7, #2]
 800379e:	429a      	cmp	r2, r3
 80037a0:	d808      	bhi.n	80037b4 <TouchButton_IO_Read+0x4c>
		if(TouchScreen.P1_EventFlag == Contact){
 80037a2:	4b08      	ldr	r3, [pc, #32]	; (80037c4 <TouchButton_IO_Read+0x5c>)
 80037a4:	791b      	ldrb	r3, [r3, #4]
 80037a6:	b2db      	uxtb	r3, r3
 80037a8:	2b02      	cmp	r3, #2
 80037aa:	d101      	bne.n	80037b0 <TouchButton_IO_Read+0x48>
	        return TouchButtonPressed;
 80037ac:	2300      	movs	r3, #0
 80037ae:	e002      	b.n	80037b6 <TouchButton_IO_Read+0x4e>
		} else {
			return TouchButtonUnpressed;
 80037b0:	2301      	movs	r3, #1
 80037b2:	e000      	b.n	80037b6 <TouchButton_IO_Read+0x4e>
		}
	} else {
		return TouchButtonUnpressed;
 80037b4:	2301      	movs	r3, #1
	}
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	370c      	adds	r7, #12
 80037ba:	46bd      	mov	sp, r7
 80037bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c0:	4770      	bx	lr
 80037c2:	bf00      	nop
 80037c4:	200011b8 	.word	0x200011b8

080037c8 <TouchScreenIRQCallback>:
		.read = TouchButton_IO_Read,
		.write = '\0',
		.ioctl = '\0'
};

void TouchScreenIRQCallback(){
 80037c8:	b580      	push	{r7, lr}
 80037ca:	af00      	add	r7, sp, #0
	FT6206_ReadScreen(&TouchScreen);
 80037cc:	4802      	ldr	r0, [pc, #8]	; (80037d8 <TouchScreenIRQCallback+0x10>)
 80037ce:	f7fc ff21 	bl	8000614 <FT6206_ReadScreen>
}
 80037d2:	bf00      	nop
 80037d4:	bd80      	pop	{r7, pc}
 80037d6:	bf00      	nop
 80037d8:	200011b8 	.word	0x200011b8

080037dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80037dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003814 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80037e0:	480d      	ldr	r0, [pc, #52]	; (8003818 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80037e2:	490e      	ldr	r1, [pc, #56]	; (800381c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80037e4:	4a0e      	ldr	r2, [pc, #56]	; (8003820 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80037e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80037e8:	e002      	b.n	80037f0 <LoopCopyDataInit>

080037ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80037ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80037ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80037ee:	3304      	adds	r3, #4

080037f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80037f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80037f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80037f4:	d3f9      	bcc.n	80037ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80037f6:	4a0b      	ldr	r2, [pc, #44]	; (8003824 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80037f8:	4c0b      	ldr	r4, [pc, #44]	; (8003828 <LoopFillZerobss+0x26>)
  movs r3, #0
 80037fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80037fc:	e001      	b.n	8003802 <LoopFillZerobss>

080037fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80037fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003800:	3204      	adds	r2, #4

08003802 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003802:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003804:	d3fb      	bcc.n	80037fe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003806:	f7ff fa6d 	bl	8002ce4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800380a:	f00a fa6f 	bl	800dcec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800380e:	f7fe fe9b 	bl	8002548 <main>
  bx  lr    
 8003812:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003814:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003818:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800381c:	200002e4 	.word	0x200002e4
  ldr r2, =_sidata
 8003820:	08030f3c 	.word	0x08030f3c
  ldr r2, =_sbss
 8003824:	200002e4 	.word	0x200002e4
  ldr r4, =_ebss
 8003828:	20001bf0 	.word	0x20001bf0

0800382c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800382c:	e7fe      	b.n	800382c <ADC_IRQHandler>
	...

08003830 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003834:	4b0e      	ldr	r3, [pc, #56]	; (8003870 <HAL_Init+0x40>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a0d      	ldr	r2, [pc, #52]	; (8003870 <HAL_Init+0x40>)
 800383a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800383e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003840:	4b0b      	ldr	r3, [pc, #44]	; (8003870 <HAL_Init+0x40>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a0a      	ldr	r2, [pc, #40]	; (8003870 <HAL_Init+0x40>)
 8003846:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800384a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800384c:	4b08      	ldr	r3, [pc, #32]	; (8003870 <HAL_Init+0x40>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a07      	ldr	r2, [pc, #28]	; (8003870 <HAL_Init+0x40>)
 8003852:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003856:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003858:	2003      	movs	r0, #3
 800385a:	f000 fded 	bl	8004438 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800385e:	2001      	movs	r0, #1
 8003860:	f000 f808 	bl	8003874 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003864:	f7ff f8fc 	bl	8002a60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003868:	2300      	movs	r3, #0
}
 800386a:	4618      	mov	r0, r3
 800386c:	bd80      	pop	{r7, pc}
 800386e:	bf00      	nop
 8003870:	40023c00 	.word	0x40023c00

08003874 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b082      	sub	sp, #8
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800387c:	4b12      	ldr	r3, [pc, #72]	; (80038c8 <HAL_InitTick+0x54>)
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	4b12      	ldr	r3, [pc, #72]	; (80038cc <HAL_InitTick+0x58>)
 8003882:	781b      	ldrb	r3, [r3, #0]
 8003884:	4619      	mov	r1, r3
 8003886:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800388a:	fbb3 f3f1 	udiv	r3, r3, r1
 800388e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003892:	4618      	mov	r0, r3
 8003894:	f000 fe13 	bl	80044be <HAL_SYSTICK_Config>
 8003898:	4603      	mov	r3, r0
 800389a:	2b00      	cmp	r3, #0
 800389c:	d001      	beq.n	80038a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e00e      	b.n	80038c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2b0f      	cmp	r3, #15
 80038a6:	d80a      	bhi.n	80038be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80038a8:	2200      	movs	r2, #0
 80038aa:	6879      	ldr	r1, [r7, #4]
 80038ac:	f04f 30ff 	mov.w	r0, #4294967295
 80038b0:	f000 fdcd 	bl	800444e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80038b4:	4a06      	ldr	r2, [pc, #24]	; (80038d0 <HAL_InitTick+0x5c>)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80038ba:	2300      	movs	r3, #0
 80038bc:	e000      	b.n	80038c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80038be:	2301      	movs	r3, #1
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	3708      	adds	r7, #8
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}
 80038c8:	20000178 	.word	0x20000178
 80038cc:	2000019c 	.word	0x2000019c
 80038d0:	20000198 	.word	0x20000198

080038d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80038d4:	b480      	push	{r7}
 80038d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80038d8:	4b06      	ldr	r3, [pc, #24]	; (80038f4 <HAL_IncTick+0x20>)
 80038da:	781b      	ldrb	r3, [r3, #0]
 80038dc:	461a      	mov	r2, r3
 80038de:	4b06      	ldr	r3, [pc, #24]	; (80038f8 <HAL_IncTick+0x24>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4413      	add	r3, r2
 80038e4:	4a04      	ldr	r2, [pc, #16]	; (80038f8 <HAL_IncTick+0x24>)
 80038e6:	6013      	str	r3, [r2, #0]
}
 80038e8:	bf00      	nop
 80038ea:	46bd      	mov	sp, r7
 80038ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f0:	4770      	bx	lr
 80038f2:	bf00      	nop
 80038f4:	2000019c 	.word	0x2000019c
 80038f8:	200011d4 	.word	0x200011d4

080038fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80038fc:	b480      	push	{r7}
 80038fe:	af00      	add	r7, sp, #0
  return uwTick;
 8003900:	4b03      	ldr	r3, [pc, #12]	; (8003910 <HAL_GetTick+0x14>)
 8003902:	681b      	ldr	r3, [r3, #0]
}
 8003904:	4618      	mov	r0, r3
 8003906:	46bd      	mov	sp, r7
 8003908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390c:	4770      	bx	lr
 800390e:	bf00      	nop
 8003910:	200011d4 	.word	0x200011d4

08003914 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b084      	sub	sp, #16
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800391c:	f7ff ffee 	bl	80038fc <HAL_GetTick>
 8003920:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	f1b3 3fff 	cmp.w	r3, #4294967295
 800392c:	d005      	beq.n	800393a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800392e:	4b0a      	ldr	r3, [pc, #40]	; (8003958 <HAL_Delay+0x44>)
 8003930:	781b      	ldrb	r3, [r3, #0]
 8003932:	461a      	mov	r2, r3
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	4413      	add	r3, r2
 8003938:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800393a:	bf00      	nop
 800393c:	f7ff ffde 	bl	80038fc <HAL_GetTick>
 8003940:	4602      	mov	r2, r0
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	1ad3      	subs	r3, r2, r3
 8003946:	68fa      	ldr	r2, [r7, #12]
 8003948:	429a      	cmp	r2, r3
 800394a:	d8f7      	bhi.n	800393c <HAL_Delay+0x28>
  {
  }
}
 800394c:	bf00      	nop
 800394e:	bf00      	nop
 8003950:	3710      	adds	r7, #16
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}
 8003956:	bf00      	nop
 8003958:	2000019c 	.word	0x2000019c

0800395c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b084      	sub	sp, #16
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003964:	2300      	movs	r3, #0
 8003966:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d101      	bne.n	8003972 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e033      	b.n	80039da <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003976:	2b00      	cmp	r3, #0
 8003978:	d109      	bne.n	800398e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f7fe fa3a 	bl	8001df4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2200      	movs	r2, #0
 8003984:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2200      	movs	r2, #0
 800398a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003992:	f003 0310 	and.w	r3, r3, #16
 8003996:	2b00      	cmp	r3, #0
 8003998:	d118      	bne.n	80039cc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800399e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80039a2:	f023 0302 	bic.w	r3, r3, #2
 80039a6:	f043 0202 	orr.w	r2, r3, #2
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f000 fab2 	bl	8003f18 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2200      	movs	r2, #0
 80039b8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039be:	f023 0303 	bic.w	r3, r3, #3
 80039c2:	f043 0201 	orr.w	r2, r3, #1
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	641a      	str	r2, [r3, #64]	; 0x40
 80039ca:	e001      	b.n	80039d0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2200      	movs	r2, #0
 80039d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80039d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3710      	adds	r7, #16
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}
	...

080039e4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b086      	sub	sp, #24
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	60f8      	str	r0, [r7, #12]
 80039ec:	60b9      	str	r1, [r7, #8]
 80039ee:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80039f0:	2300      	movs	r3, #0
 80039f2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d101      	bne.n	8003a02 <HAL_ADC_Start_DMA+0x1e>
 80039fe:	2302      	movs	r3, #2
 8003a00:	e0ce      	b.n	8003ba0 <HAL_ADC_Start_DMA+0x1bc>
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2201      	movs	r2, #1
 8003a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	f003 0301 	and.w	r3, r3, #1
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d018      	beq.n	8003a4a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	689a      	ldr	r2, [r3, #8]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f042 0201 	orr.w	r2, r2, #1
 8003a26:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003a28:	4b5f      	ldr	r3, [pc, #380]	; (8003ba8 <HAL_ADC_Start_DMA+0x1c4>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a5f      	ldr	r2, [pc, #380]	; (8003bac <HAL_ADC_Start_DMA+0x1c8>)
 8003a2e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a32:	0c9a      	lsrs	r2, r3, #18
 8003a34:	4613      	mov	r3, r2
 8003a36:	005b      	lsls	r3, r3, #1
 8003a38:	4413      	add	r3, r2
 8003a3a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003a3c:	e002      	b.n	8003a44 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	3b01      	subs	r3, #1
 8003a42:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d1f9      	bne.n	8003a3e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a58:	d107      	bne.n	8003a6a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	689a      	ldr	r2, [r3, #8]
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a68:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	f003 0301 	and.w	r3, r3, #1
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	f040 8086 	bne.w	8003b86 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a7e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003a82:	f023 0301 	bic.w	r3, r3, #1
 8003a86:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d007      	beq.n	8003aac <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003aa4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ab4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ab8:	d106      	bne.n	8003ac8 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003abe:	f023 0206 	bic.w	r2, r3, #6
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	645a      	str	r2, [r3, #68]	; 0x44
 8003ac6:	e002      	b.n	8003ace <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2200      	movs	r2, #0
 8003acc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003ad6:	4b36      	ldr	r3, [pc, #216]	; (8003bb0 <HAL_ADC_Start_DMA+0x1cc>)
 8003ad8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ade:	4a35      	ldr	r2, [pc, #212]	; (8003bb4 <HAL_ADC_Start_DMA+0x1d0>)
 8003ae0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ae6:	4a34      	ldr	r2, [pc, #208]	; (8003bb8 <HAL_ADC_Start_DMA+0x1d4>)
 8003ae8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aee:	4a33      	ldr	r2, [pc, #204]	; (8003bbc <HAL_ADC_Start_DMA+0x1d8>)
 8003af0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003afa:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	685a      	ldr	r2, [r3, #4]
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003b0a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	689a      	ldr	r2, [r3, #8]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b1a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	334c      	adds	r3, #76	; 0x4c
 8003b26:	4619      	mov	r1, r3
 8003b28:	68ba      	ldr	r2, [r7, #8]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	f000 fd90 	bl	8004650 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	f003 031f 	and.w	r3, r3, #31
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d10f      	bne.n	8003b5c <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d129      	bne.n	8003b9e <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	689a      	ldr	r2, [r3, #8]
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003b58:	609a      	str	r2, [r3, #8]
 8003b5a:	e020      	b.n	8003b9e <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a17      	ldr	r2, [pc, #92]	; (8003bc0 <HAL_ADC_Start_DMA+0x1dc>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d11b      	bne.n	8003b9e <HAL_ADC_Start_DMA+0x1ba>
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d114      	bne.n	8003b9e <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	689a      	ldr	r2, [r3, #8]
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003b82:	609a      	str	r2, [r3, #8]
 8003b84:	e00b      	b.n	8003b9e <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b8a:	f043 0210 	orr.w	r2, r3, #16
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b96:	f043 0201 	orr.w	r2, r3, #1
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003b9e:	2300      	movs	r3, #0
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	3718      	adds	r7, #24
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd80      	pop	{r7, pc}
 8003ba8:	20000178 	.word	0x20000178
 8003bac:	431bde83 	.word	0x431bde83
 8003bb0:	40012300 	.word	0x40012300
 8003bb4:	08004111 	.word	0x08004111
 8003bb8:	080041cb 	.word	0x080041cb
 8003bbc:	080041e7 	.word	0x080041e7
 8003bc0:	40012000 	.word	0x40012000

08003bc4 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b084      	sub	sp, #16
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	d101      	bne.n	8003bde <HAL_ADC_Stop_DMA+0x1a>
 8003bda:	2302      	movs	r3, #2
 8003bdc:	e048      	b.n	8003c70 <HAL_ADC_Stop_DMA+0xac>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2201      	movs	r2, #1
 8003be2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	689a      	ldr	r2, [r3, #8]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f022 0201 	bic.w	r2, r2, #1
 8003bf4:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	f003 0301 	and.w	r3, r3, #1
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d130      	bne.n	8003c66 <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	689a      	ldr	r2, [r3, #8]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c12:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c18:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c1c:	b2db      	uxtb	r3, r3
 8003c1e:	2b02      	cmp	r3, #2
 8003c20:	d10f      	bne.n	8003c42 <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c26:	4618      	mov	r0, r3
 8003c28:	f000 fd6a 	bl	8004700 <HAL_DMA_Abort>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8003c30:	7bfb      	ldrb	r3, [r7, #15]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d005      	beq.n	8003c42 <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c3a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	685a      	ldr	r2, [r3, #4]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8003c50:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c56:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003c5a:	f023 0301 	bic.w	r3, r3, #1
 8003c5e:	f043 0201 	orr.w	r2, r3, #1
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003c6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	3710      	adds	r7, #16
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}

08003c78 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b083      	sub	sp, #12
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8003c80:	bf00      	nop
 8003c82:	370c      	adds	r7, #12
 8003c84:	46bd      	mov	sp, r7
 8003c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8a:	4770      	bx	lr

08003c8c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b083      	sub	sp, #12
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003c94:	bf00      	nop
 8003c96:	370c      	adds	r7, #12
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9e:	4770      	bx	lr

08003ca0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b083      	sub	sp, #12
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003ca8:	bf00      	nop
 8003caa:	370c      	adds	r7, #12
 8003cac:	46bd      	mov	sp, r7
 8003cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb2:	4770      	bx	lr

08003cb4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b085      	sub	sp, #20
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
 8003cbc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d101      	bne.n	8003cd0 <HAL_ADC_ConfigChannel+0x1c>
 8003ccc:	2302      	movs	r3, #2
 8003cce:	e113      	b.n	8003ef8 <HAL_ADC_ConfigChannel+0x244>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	2b09      	cmp	r3, #9
 8003cde:	d925      	bls.n	8003d2c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	68d9      	ldr	r1, [r3, #12]
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	b29b      	uxth	r3, r3
 8003cec:	461a      	mov	r2, r3
 8003cee:	4613      	mov	r3, r2
 8003cf0:	005b      	lsls	r3, r3, #1
 8003cf2:	4413      	add	r3, r2
 8003cf4:	3b1e      	subs	r3, #30
 8003cf6:	2207      	movs	r2, #7
 8003cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cfc:	43da      	mvns	r2, r3
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	400a      	ands	r2, r1
 8003d04:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	68d9      	ldr	r1, [r3, #12]
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	689a      	ldr	r2, [r3, #8]
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	b29b      	uxth	r3, r3
 8003d16:	4618      	mov	r0, r3
 8003d18:	4603      	mov	r3, r0
 8003d1a:	005b      	lsls	r3, r3, #1
 8003d1c:	4403      	add	r3, r0
 8003d1e:	3b1e      	subs	r3, #30
 8003d20:	409a      	lsls	r2, r3
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	430a      	orrs	r2, r1
 8003d28:	60da      	str	r2, [r3, #12]
 8003d2a:	e022      	b.n	8003d72 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	6919      	ldr	r1, [r3, #16]
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	b29b      	uxth	r3, r3
 8003d38:	461a      	mov	r2, r3
 8003d3a:	4613      	mov	r3, r2
 8003d3c:	005b      	lsls	r3, r3, #1
 8003d3e:	4413      	add	r3, r2
 8003d40:	2207      	movs	r2, #7
 8003d42:	fa02 f303 	lsl.w	r3, r2, r3
 8003d46:	43da      	mvns	r2, r3
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	400a      	ands	r2, r1
 8003d4e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	6919      	ldr	r1, [r3, #16]
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	689a      	ldr	r2, [r3, #8]
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	b29b      	uxth	r3, r3
 8003d60:	4618      	mov	r0, r3
 8003d62:	4603      	mov	r3, r0
 8003d64:	005b      	lsls	r3, r3, #1
 8003d66:	4403      	add	r3, r0
 8003d68:	409a      	lsls	r2, r3
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	430a      	orrs	r2, r1
 8003d70:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	2b06      	cmp	r3, #6
 8003d78:	d824      	bhi.n	8003dc4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	685a      	ldr	r2, [r3, #4]
 8003d84:	4613      	mov	r3, r2
 8003d86:	009b      	lsls	r3, r3, #2
 8003d88:	4413      	add	r3, r2
 8003d8a:	3b05      	subs	r3, #5
 8003d8c:	221f      	movs	r2, #31
 8003d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d92:	43da      	mvns	r2, r3
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	400a      	ands	r2, r1
 8003d9a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	b29b      	uxth	r3, r3
 8003da8:	4618      	mov	r0, r3
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	685a      	ldr	r2, [r3, #4]
 8003dae:	4613      	mov	r3, r2
 8003db0:	009b      	lsls	r3, r3, #2
 8003db2:	4413      	add	r3, r2
 8003db4:	3b05      	subs	r3, #5
 8003db6:	fa00 f203 	lsl.w	r2, r0, r3
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	430a      	orrs	r2, r1
 8003dc0:	635a      	str	r2, [r3, #52]	; 0x34
 8003dc2:	e04c      	b.n	8003e5e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	2b0c      	cmp	r3, #12
 8003dca:	d824      	bhi.n	8003e16 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	685a      	ldr	r2, [r3, #4]
 8003dd6:	4613      	mov	r3, r2
 8003dd8:	009b      	lsls	r3, r3, #2
 8003dda:	4413      	add	r3, r2
 8003ddc:	3b23      	subs	r3, #35	; 0x23
 8003dde:	221f      	movs	r2, #31
 8003de0:	fa02 f303 	lsl.w	r3, r2, r3
 8003de4:	43da      	mvns	r2, r3
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	400a      	ands	r2, r1
 8003dec:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	b29b      	uxth	r3, r3
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	685a      	ldr	r2, [r3, #4]
 8003e00:	4613      	mov	r3, r2
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	4413      	add	r3, r2
 8003e06:	3b23      	subs	r3, #35	; 0x23
 8003e08:	fa00 f203 	lsl.w	r2, r0, r3
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	430a      	orrs	r2, r1
 8003e12:	631a      	str	r2, [r3, #48]	; 0x30
 8003e14:	e023      	b.n	8003e5e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	685a      	ldr	r2, [r3, #4]
 8003e20:	4613      	mov	r3, r2
 8003e22:	009b      	lsls	r3, r3, #2
 8003e24:	4413      	add	r3, r2
 8003e26:	3b41      	subs	r3, #65	; 0x41
 8003e28:	221f      	movs	r2, #31
 8003e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e2e:	43da      	mvns	r2, r3
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	400a      	ands	r2, r1
 8003e36:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	b29b      	uxth	r3, r3
 8003e44:	4618      	mov	r0, r3
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	685a      	ldr	r2, [r3, #4]
 8003e4a:	4613      	mov	r3, r2
 8003e4c:	009b      	lsls	r3, r3, #2
 8003e4e:	4413      	add	r3, r2
 8003e50:	3b41      	subs	r3, #65	; 0x41
 8003e52:	fa00 f203 	lsl.w	r2, r0, r3
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	430a      	orrs	r2, r1
 8003e5c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003e5e:	4b29      	ldr	r3, [pc, #164]	; (8003f04 <HAL_ADC_ConfigChannel+0x250>)
 8003e60:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a28      	ldr	r2, [pc, #160]	; (8003f08 <HAL_ADC_ConfigChannel+0x254>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d10f      	bne.n	8003e8c <HAL_ADC_ConfigChannel+0x1d8>
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	2b12      	cmp	r3, #18
 8003e72:	d10b      	bne.n	8003e8c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a1d      	ldr	r2, [pc, #116]	; (8003f08 <HAL_ADC_ConfigChannel+0x254>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d12b      	bne.n	8003eee <HAL_ADC_ConfigChannel+0x23a>
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a1c      	ldr	r2, [pc, #112]	; (8003f0c <HAL_ADC_ConfigChannel+0x258>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d003      	beq.n	8003ea8 <HAL_ADC_ConfigChannel+0x1f4>
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	2b11      	cmp	r3, #17
 8003ea6:	d122      	bne.n	8003eee <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a11      	ldr	r2, [pc, #68]	; (8003f0c <HAL_ADC_ConfigChannel+0x258>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d111      	bne.n	8003eee <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003eca:	4b11      	ldr	r3, [pc, #68]	; (8003f10 <HAL_ADC_ConfigChannel+0x25c>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a11      	ldr	r2, [pc, #68]	; (8003f14 <HAL_ADC_ConfigChannel+0x260>)
 8003ed0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ed4:	0c9a      	lsrs	r2, r3, #18
 8003ed6:	4613      	mov	r3, r2
 8003ed8:	009b      	lsls	r3, r3, #2
 8003eda:	4413      	add	r3, r2
 8003edc:	005b      	lsls	r3, r3, #1
 8003ede:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003ee0:	e002      	b.n	8003ee8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	3b01      	subs	r3, #1
 8003ee6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d1f9      	bne.n	8003ee2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003ef6:	2300      	movs	r3, #0
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	3714      	adds	r7, #20
 8003efc:	46bd      	mov	sp, r7
 8003efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f02:	4770      	bx	lr
 8003f04:	40012300 	.word	0x40012300
 8003f08:	40012000 	.word	0x40012000
 8003f0c:	10000012 	.word	0x10000012
 8003f10:	20000178 	.word	0x20000178
 8003f14:	431bde83 	.word	0x431bde83

08003f18 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b085      	sub	sp, #20
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003f20:	4b79      	ldr	r3, [pc, #484]	; (8004108 <ADC_Init+0x1f0>)
 8003f22:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	685a      	ldr	r2, [r3, #4]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	431a      	orrs	r2, r3
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	685a      	ldr	r2, [r3, #4]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f4c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	6859      	ldr	r1, [r3, #4]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	691b      	ldr	r3, [r3, #16]
 8003f58:	021a      	lsls	r2, r3, #8
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	430a      	orrs	r2, r1
 8003f60:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	685a      	ldr	r2, [r3, #4]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003f70:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	6859      	ldr	r1, [r3, #4]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	689a      	ldr	r2, [r3, #8]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	430a      	orrs	r2, r1
 8003f82:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	689a      	ldr	r2, [r3, #8]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f92:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	6899      	ldr	r1, [r3, #8]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	68da      	ldr	r2, [r3, #12]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	430a      	orrs	r2, r1
 8003fa4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003faa:	4a58      	ldr	r2, [pc, #352]	; (800410c <ADC_Init+0x1f4>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d022      	beq.n	8003ff6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	689a      	ldr	r2, [r3, #8]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003fbe:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	6899      	ldr	r1, [r3, #8]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	430a      	orrs	r2, r1
 8003fd0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	689a      	ldr	r2, [r3, #8]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003fe0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	6899      	ldr	r1, [r3, #8]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	430a      	orrs	r2, r1
 8003ff2:	609a      	str	r2, [r3, #8]
 8003ff4:	e00f      	b.n	8004016 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	689a      	ldr	r2, [r3, #8]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004004:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	689a      	ldr	r2, [r3, #8]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004014:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	689a      	ldr	r2, [r3, #8]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f022 0202 	bic.w	r2, r2, #2
 8004024:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	6899      	ldr	r1, [r3, #8]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	7e1b      	ldrb	r3, [r3, #24]
 8004030:	005a      	lsls	r2, r3, #1
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	430a      	orrs	r2, r1
 8004038:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d01b      	beq.n	800407c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	685a      	ldr	r2, [r3, #4]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004052:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	685a      	ldr	r2, [r3, #4]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004062:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	6859      	ldr	r1, [r3, #4]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800406e:	3b01      	subs	r3, #1
 8004070:	035a      	lsls	r2, r3, #13
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	430a      	orrs	r2, r1
 8004078:	605a      	str	r2, [r3, #4]
 800407a:	e007      	b.n	800408c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	685a      	ldr	r2, [r3, #4]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800408a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800409a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	69db      	ldr	r3, [r3, #28]
 80040a6:	3b01      	subs	r3, #1
 80040a8:	051a      	lsls	r2, r3, #20
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	430a      	orrs	r2, r1
 80040b0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	689a      	ldr	r2, [r3, #8]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80040c0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	6899      	ldr	r1, [r3, #8]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80040ce:	025a      	lsls	r2, r3, #9
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	430a      	orrs	r2, r1
 80040d6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	689a      	ldr	r2, [r3, #8]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040e6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	6899      	ldr	r1, [r3, #8]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	695b      	ldr	r3, [r3, #20]
 80040f2:	029a      	lsls	r2, r3, #10
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	430a      	orrs	r2, r1
 80040fa:	609a      	str	r2, [r3, #8]
}
 80040fc:	bf00      	nop
 80040fe:	3714      	adds	r7, #20
 8004100:	46bd      	mov	sp, r7
 8004102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004106:	4770      	bx	lr
 8004108:	40012300 	.word	0x40012300
 800410c:	0f000001 	.word	0x0f000001

08004110 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b084      	sub	sp, #16
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800411c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004122:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004126:	2b00      	cmp	r3, #0
 8004128:	d13c      	bne.n	80041a4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800412e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004140:	2b00      	cmp	r3, #0
 8004142:	d12b      	bne.n	800419c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004148:	2b00      	cmp	r3, #0
 800414a:	d127      	bne.n	800419c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004152:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004156:	2b00      	cmp	r3, #0
 8004158:	d006      	beq.n	8004168 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004164:	2b00      	cmp	r3, #0
 8004166:	d119      	bne.n	800419c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	685a      	ldr	r2, [r3, #4]
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f022 0220 	bic.w	r2, r2, #32
 8004176:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800417c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004188:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800418c:	2b00      	cmp	r3, #0
 800418e:	d105      	bne.n	800419c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004194:	f043 0201 	orr.w	r2, r3, #1
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800419c:	68f8      	ldr	r0, [r7, #12]
 800419e:	f7ff fd6b 	bl	8003c78 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80041a2:	e00e      	b.n	80041c2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a8:	f003 0310 	and.w	r3, r3, #16
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d003      	beq.n	80041b8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80041b0:	68f8      	ldr	r0, [r7, #12]
 80041b2:	f7ff fd75 	bl	8003ca0 <HAL_ADC_ErrorCallback>
}
 80041b6:	e004      	b.n	80041c2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	4798      	blx	r3
}
 80041c2:	bf00      	nop
 80041c4:	3710      	adds	r7, #16
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}

080041ca <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80041ca:	b580      	push	{r7, lr}
 80041cc:	b084      	sub	sp, #16
 80041ce:	af00      	add	r7, sp, #0
 80041d0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041d6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80041d8:	68f8      	ldr	r0, [r7, #12]
 80041da:	f7ff fd57 	bl	8003c8c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80041de:	bf00      	nop
 80041e0:	3710      	adds	r7, #16
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}

080041e6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80041e6:	b580      	push	{r7, lr}
 80041e8:	b084      	sub	sp, #16
 80041ea:	af00      	add	r7, sp, #0
 80041ec:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041f2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	2240      	movs	r2, #64	; 0x40
 80041f8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041fe:	f043 0204 	orr.w	r2, r3, #4
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004206:	68f8      	ldr	r0, [r7, #12]
 8004208:	f7ff fd4a 	bl	8003ca0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800420c:	bf00      	nop
 800420e:	3710      	adds	r7, #16
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}

08004214 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004214:	b480      	push	{r7}
 8004216:	b085      	sub	sp, #20
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	f003 0307 	and.w	r3, r3, #7
 8004222:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004224:	4b0c      	ldr	r3, [pc, #48]	; (8004258 <__NVIC_SetPriorityGrouping+0x44>)
 8004226:	68db      	ldr	r3, [r3, #12]
 8004228:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800422a:	68ba      	ldr	r2, [r7, #8]
 800422c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004230:	4013      	ands	r3, r2
 8004232:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800423c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004240:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004244:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004246:	4a04      	ldr	r2, [pc, #16]	; (8004258 <__NVIC_SetPriorityGrouping+0x44>)
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	60d3      	str	r3, [r2, #12]
}
 800424c:	bf00      	nop
 800424e:	3714      	adds	r7, #20
 8004250:	46bd      	mov	sp, r7
 8004252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004256:	4770      	bx	lr
 8004258:	e000ed00 	.word	0xe000ed00

0800425c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800425c:	b480      	push	{r7}
 800425e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004260:	4b04      	ldr	r3, [pc, #16]	; (8004274 <__NVIC_GetPriorityGrouping+0x18>)
 8004262:	68db      	ldr	r3, [r3, #12]
 8004264:	0a1b      	lsrs	r3, r3, #8
 8004266:	f003 0307 	and.w	r3, r3, #7
}
 800426a:	4618      	mov	r0, r3
 800426c:	46bd      	mov	sp, r7
 800426e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004272:	4770      	bx	lr
 8004274:	e000ed00 	.word	0xe000ed00

08004278 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004278:	b480      	push	{r7}
 800427a:	b083      	sub	sp, #12
 800427c:	af00      	add	r7, sp, #0
 800427e:	4603      	mov	r3, r0
 8004280:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004286:	2b00      	cmp	r3, #0
 8004288:	db0b      	blt.n	80042a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800428a:	79fb      	ldrb	r3, [r7, #7]
 800428c:	f003 021f 	and.w	r2, r3, #31
 8004290:	4907      	ldr	r1, [pc, #28]	; (80042b0 <__NVIC_EnableIRQ+0x38>)
 8004292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004296:	095b      	lsrs	r3, r3, #5
 8004298:	2001      	movs	r0, #1
 800429a:	fa00 f202 	lsl.w	r2, r0, r2
 800429e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80042a2:	bf00      	nop
 80042a4:	370c      	adds	r7, #12
 80042a6:	46bd      	mov	sp, r7
 80042a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ac:	4770      	bx	lr
 80042ae:	bf00      	nop
 80042b0:	e000e100 	.word	0xe000e100

080042b4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b083      	sub	sp, #12
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	4603      	mov	r3, r0
 80042bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	db12      	blt.n	80042ec <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80042c6:	79fb      	ldrb	r3, [r7, #7]
 80042c8:	f003 021f 	and.w	r2, r3, #31
 80042cc:	490a      	ldr	r1, [pc, #40]	; (80042f8 <__NVIC_DisableIRQ+0x44>)
 80042ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042d2:	095b      	lsrs	r3, r3, #5
 80042d4:	2001      	movs	r0, #1
 80042d6:	fa00 f202 	lsl.w	r2, r0, r2
 80042da:	3320      	adds	r3, #32
 80042dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80042e0:	f3bf 8f4f 	dsb	sy
}
 80042e4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80042e6:	f3bf 8f6f 	isb	sy
}
 80042ea:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80042ec:	bf00      	nop
 80042ee:	370c      	adds	r7, #12
 80042f0:	46bd      	mov	sp, r7
 80042f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f6:	4770      	bx	lr
 80042f8:	e000e100 	.word	0xe000e100

080042fc <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b083      	sub	sp, #12
 8004300:	af00      	add	r7, sp, #0
 8004302:	4603      	mov	r3, r0
 8004304:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800430a:	2b00      	cmp	r3, #0
 800430c:	db0c      	blt.n	8004328 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800430e:	79fb      	ldrb	r3, [r7, #7]
 8004310:	f003 021f 	and.w	r2, r3, #31
 8004314:	4907      	ldr	r1, [pc, #28]	; (8004334 <__NVIC_ClearPendingIRQ+0x38>)
 8004316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800431a:	095b      	lsrs	r3, r3, #5
 800431c:	2001      	movs	r0, #1
 800431e:	fa00 f202 	lsl.w	r2, r0, r2
 8004322:	3360      	adds	r3, #96	; 0x60
 8004324:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004328:	bf00      	nop
 800432a:	370c      	adds	r7, #12
 800432c:	46bd      	mov	sp, r7
 800432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004332:	4770      	bx	lr
 8004334:	e000e100 	.word	0xe000e100

08004338 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004338:	b480      	push	{r7}
 800433a:	b083      	sub	sp, #12
 800433c:	af00      	add	r7, sp, #0
 800433e:	4603      	mov	r3, r0
 8004340:	6039      	str	r1, [r7, #0]
 8004342:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004344:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004348:	2b00      	cmp	r3, #0
 800434a:	db0a      	blt.n	8004362 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	b2da      	uxtb	r2, r3
 8004350:	490c      	ldr	r1, [pc, #48]	; (8004384 <__NVIC_SetPriority+0x4c>)
 8004352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004356:	0112      	lsls	r2, r2, #4
 8004358:	b2d2      	uxtb	r2, r2
 800435a:	440b      	add	r3, r1
 800435c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004360:	e00a      	b.n	8004378 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	b2da      	uxtb	r2, r3
 8004366:	4908      	ldr	r1, [pc, #32]	; (8004388 <__NVIC_SetPriority+0x50>)
 8004368:	79fb      	ldrb	r3, [r7, #7]
 800436a:	f003 030f 	and.w	r3, r3, #15
 800436e:	3b04      	subs	r3, #4
 8004370:	0112      	lsls	r2, r2, #4
 8004372:	b2d2      	uxtb	r2, r2
 8004374:	440b      	add	r3, r1
 8004376:	761a      	strb	r2, [r3, #24]
}
 8004378:	bf00      	nop
 800437a:	370c      	adds	r7, #12
 800437c:	46bd      	mov	sp, r7
 800437e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004382:	4770      	bx	lr
 8004384:	e000e100 	.word	0xe000e100
 8004388:	e000ed00 	.word	0xe000ed00

0800438c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800438c:	b480      	push	{r7}
 800438e:	b089      	sub	sp, #36	; 0x24
 8004390:	af00      	add	r7, sp, #0
 8004392:	60f8      	str	r0, [r7, #12]
 8004394:	60b9      	str	r1, [r7, #8]
 8004396:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	f003 0307 	and.w	r3, r3, #7
 800439e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80043a0:	69fb      	ldr	r3, [r7, #28]
 80043a2:	f1c3 0307 	rsb	r3, r3, #7
 80043a6:	2b04      	cmp	r3, #4
 80043a8:	bf28      	it	cs
 80043aa:	2304      	movcs	r3, #4
 80043ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80043ae:	69fb      	ldr	r3, [r7, #28]
 80043b0:	3304      	adds	r3, #4
 80043b2:	2b06      	cmp	r3, #6
 80043b4:	d902      	bls.n	80043bc <NVIC_EncodePriority+0x30>
 80043b6:	69fb      	ldr	r3, [r7, #28]
 80043b8:	3b03      	subs	r3, #3
 80043ba:	e000      	b.n	80043be <NVIC_EncodePriority+0x32>
 80043bc:	2300      	movs	r3, #0
 80043be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043c0:	f04f 32ff 	mov.w	r2, #4294967295
 80043c4:	69bb      	ldr	r3, [r7, #24]
 80043c6:	fa02 f303 	lsl.w	r3, r2, r3
 80043ca:	43da      	mvns	r2, r3
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	401a      	ands	r2, r3
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80043d4:	f04f 31ff 	mov.w	r1, #4294967295
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	fa01 f303 	lsl.w	r3, r1, r3
 80043de:	43d9      	mvns	r1, r3
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043e4:	4313      	orrs	r3, r2
         );
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	3724      	adds	r7, #36	; 0x24
 80043ea:	46bd      	mov	sp, r7
 80043ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f0:	4770      	bx	lr
	...

080043f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b082      	sub	sp, #8
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	3b01      	subs	r3, #1
 8004400:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004404:	d301      	bcc.n	800440a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004406:	2301      	movs	r3, #1
 8004408:	e00f      	b.n	800442a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800440a:	4a0a      	ldr	r2, [pc, #40]	; (8004434 <SysTick_Config+0x40>)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	3b01      	subs	r3, #1
 8004410:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004412:	210f      	movs	r1, #15
 8004414:	f04f 30ff 	mov.w	r0, #4294967295
 8004418:	f7ff ff8e 	bl	8004338 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800441c:	4b05      	ldr	r3, [pc, #20]	; (8004434 <SysTick_Config+0x40>)
 800441e:	2200      	movs	r2, #0
 8004420:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004422:	4b04      	ldr	r3, [pc, #16]	; (8004434 <SysTick_Config+0x40>)
 8004424:	2207      	movs	r2, #7
 8004426:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004428:	2300      	movs	r3, #0
}
 800442a:	4618      	mov	r0, r3
 800442c:	3708      	adds	r7, #8
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}
 8004432:	bf00      	nop
 8004434:	e000e010 	.word	0xe000e010

08004438 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b082      	sub	sp, #8
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004440:	6878      	ldr	r0, [r7, #4]
 8004442:	f7ff fee7 	bl	8004214 <__NVIC_SetPriorityGrouping>
}
 8004446:	bf00      	nop
 8004448:	3708      	adds	r7, #8
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}

0800444e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800444e:	b580      	push	{r7, lr}
 8004450:	b086      	sub	sp, #24
 8004452:	af00      	add	r7, sp, #0
 8004454:	4603      	mov	r3, r0
 8004456:	60b9      	str	r1, [r7, #8]
 8004458:	607a      	str	r2, [r7, #4]
 800445a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800445c:	2300      	movs	r3, #0
 800445e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004460:	f7ff fefc 	bl	800425c <__NVIC_GetPriorityGrouping>
 8004464:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004466:	687a      	ldr	r2, [r7, #4]
 8004468:	68b9      	ldr	r1, [r7, #8]
 800446a:	6978      	ldr	r0, [r7, #20]
 800446c:	f7ff ff8e 	bl	800438c <NVIC_EncodePriority>
 8004470:	4602      	mov	r2, r0
 8004472:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004476:	4611      	mov	r1, r2
 8004478:	4618      	mov	r0, r3
 800447a:	f7ff ff5d 	bl	8004338 <__NVIC_SetPriority>
}
 800447e:	bf00      	nop
 8004480:	3718      	adds	r7, #24
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}

08004486 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004486:	b580      	push	{r7, lr}
 8004488:	b082      	sub	sp, #8
 800448a:	af00      	add	r7, sp, #0
 800448c:	4603      	mov	r3, r0
 800448e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004490:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004494:	4618      	mov	r0, r3
 8004496:	f7ff feef 	bl	8004278 <__NVIC_EnableIRQ>
}
 800449a:	bf00      	nop
 800449c:	3708      	adds	r7, #8
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}

080044a2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80044a2:	b580      	push	{r7, lr}
 80044a4:	b082      	sub	sp, #8
 80044a6:	af00      	add	r7, sp, #0
 80044a8:	4603      	mov	r3, r0
 80044aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80044ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044b0:	4618      	mov	r0, r3
 80044b2:	f7ff feff 	bl	80042b4 <__NVIC_DisableIRQ>
}
 80044b6:	bf00      	nop
 80044b8:	3708      	adds	r7, #8
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}

080044be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80044be:	b580      	push	{r7, lr}
 80044c0:	b082      	sub	sp, #8
 80044c2:	af00      	add	r7, sp, #0
 80044c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f7ff ff94 	bl	80043f4 <SysTick_Config>
 80044cc:	4603      	mov	r3, r0
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	3708      	adds	r7, #8
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}

080044d6 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80044d6:	b580      	push	{r7, lr}
 80044d8:	b082      	sub	sp, #8
 80044da:	af00      	add	r7, sp, #0
 80044dc:	4603      	mov	r3, r0
 80044de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 80044e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044e4:	4618      	mov	r0, r3
 80044e6:	f7ff ff09 	bl	80042fc <__NVIC_ClearPendingIRQ>
}
 80044ea:	bf00      	nop
 80044ec:	3708      	adds	r7, #8
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}
	...

080044f4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b086      	sub	sp, #24
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80044fc:	2300      	movs	r3, #0
 80044fe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004500:	f7ff f9fc 	bl	80038fc <HAL_GetTick>
 8004504:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d101      	bne.n	8004510 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800450c:	2301      	movs	r3, #1
 800450e:	e099      	b.n	8004644 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2202      	movs	r2, #2
 8004514:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2200      	movs	r2, #0
 800451c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f022 0201 	bic.w	r2, r2, #1
 800452e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004530:	e00f      	b.n	8004552 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004532:	f7ff f9e3 	bl	80038fc <HAL_GetTick>
 8004536:	4602      	mov	r2, r0
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	1ad3      	subs	r3, r2, r3
 800453c:	2b05      	cmp	r3, #5
 800453e:	d908      	bls.n	8004552 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2220      	movs	r2, #32
 8004544:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2203      	movs	r2, #3
 800454a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800454e:	2303      	movs	r3, #3
 8004550:	e078      	b.n	8004644 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f003 0301 	and.w	r3, r3, #1
 800455c:	2b00      	cmp	r3, #0
 800455e:	d1e8      	bne.n	8004532 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004568:	697a      	ldr	r2, [r7, #20]
 800456a:	4b38      	ldr	r3, [pc, #224]	; (800464c <HAL_DMA_Init+0x158>)
 800456c:	4013      	ands	r3, r2
 800456e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	685a      	ldr	r2, [r3, #4]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800457e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	691b      	ldr	r3, [r3, #16]
 8004584:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800458a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	699b      	ldr	r3, [r3, #24]
 8004590:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004596:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6a1b      	ldr	r3, [r3, #32]
 800459c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800459e:	697a      	ldr	r2, [r7, #20]
 80045a0:	4313      	orrs	r3, r2
 80045a2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a8:	2b04      	cmp	r3, #4
 80045aa:	d107      	bne.n	80045bc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045b4:	4313      	orrs	r3, r2
 80045b6:	697a      	ldr	r2, [r7, #20]
 80045b8:	4313      	orrs	r3, r2
 80045ba:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	697a      	ldr	r2, [r7, #20]
 80045c2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	695b      	ldr	r3, [r3, #20]
 80045ca:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	f023 0307 	bic.w	r3, r3, #7
 80045d2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d8:	697a      	ldr	r2, [r7, #20]
 80045da:	4313      	orrs	r3, r2
 80045dc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e2:	2b04      	cmp	r3, #4
 80045e4:	d117      	bne.n	8004616 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045ea:	697a      	ldr	r2, [r7, #20]
 80045ec:	4313      	orrs	r3, r2
 80045ee:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d00e      	beq.n	8004616 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80045f8:	6878      	ldr	r0, [r7, #4]
 80045fa:	f000 fb0d 	bl	8004c18 <DMA_CheckFifoParam>
 80045fe:	4603      	mov	r3, r0
 8004600:	2b00      	cmp	r3, #0
 8004602:	d008      	beq.n	8004616 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2240      	movs	r2, #64	; 0x40
 8004608:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2201      	movs	r2, #1
 800460e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004612:	2301      	movs	r3, #1
 8004614:	e016      	b.n	8004644 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	697a      	ldr	r2, [r7, #20]
 800461c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f000 fac4 	bl	8004bac <DMA_CalcBaseAndBitshift>
 8004624:	4603      	mov	r3, r0
 8004626:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800462c:	223f      	movs	r2, #63	; 0x3f
 800462e:	409a      	lsls	r2, r3
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2200      	movs	r2, #0
 8004638:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2201      	movs	r2, #1
 800463e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004642:	2300      	movs	r3, #0
}
 8004644:	4618      	mov	r0, r3
 8004646:	3718      	adds	r7, #24
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}
 800464c:	f010803f 	.word	0xf010803f

08004650 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b086      	sub	sp, #24
 8004654:	af00      	add	r7, sp, #0
 8004656:	60f8      	str	r0, [r7, #12]
 8004658:	60b9      	str	r1, [r7, #8]
 800465a:	607a      	str	r2, [r7, #4]
 800465c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800465e:	2300      	movs	r3, #0
 8004660:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004666:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800466e:	2b01      	cmp	r3, #1
 8004670:	d101      	bne.n	8004676 <HAL_DMA_Start_IT+0x26>
 8004672:	2302      	movs	r3, #2
 8004674:	e040      	b.n	80046f8 <HAL_DMA_Start_IT+0xa8>
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2201      	movs	r2, #1
 800467a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004684:	b2db      	uxtb	r3, r3
 8004686:	2b01      	cmp	r3, #1
 8004688:	d12f      	bne.n	80046ea <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	2202      	movs	r2, #2
 800468e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	2200      	movs	r2, #0
 8004696:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	687a      	ldr	r2, [r7, #4]
 800469c:	68b9      	ldr	r1, [r7, #8]
 800469e:	68f8      	ldr	r0, [r7, #12]
 80046a0:	f000 fa56 	bl	8004b50 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046a8:	223f      	movs	r2, #63	; 0x3f
 80046aa:	409a      	lsls	r2, r3
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	681a      	ldr	r2, [r3, #0]
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f042 0216 	orr.w	r2, r2, #22
 80046be:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d007      	beq.n	80046d8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	681a      	ldr	r2, [r3, #0]
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f042 0208 	orr.w	r2, r2, #8
 80046d6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	681a      	ldr	r2, [r3, #0]
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f042 0201 	orr.w	r2, r2, #1
 80046e6:	601a      	str	r2, [r3, #0]
 80046e8:	e005      	b.n	80046f6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	2200      	movs	r2, #0
 80046ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80046f2:	2302      	movs	r3, #2
 80046f4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80046f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	3718      	adds	r7, #24
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}

08004700 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b084      	sub	sp, #16
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800470c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800470e:	f7ff f8f5 	bl	80038fc <HAL_GetTick>
 8004712:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800471a:	b2db      	uxtb	r3, r3
 800471c:	2b02      	cmp	r3, #2
 800471e:	d008      	beq.n	8004732 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2280      	movs	r2, #128	; 0x80
 8004724:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2200      	movs	r2, #0
 800472a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800472e:	2301      	movs	r3, #1
 8004730:	e052      	b.n	80047d8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	681a      	ldr	r2, [r3, #0]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f022 0216 	bic.w	r2, r2, #22
 8004740:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	695a      	ldr	r2, [r3, #20]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004750:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004756:	2b00      	cmp	r3, #0
 8004758:	d103      	bne.n	8004762 <HAL_DMA_Abort+0x62>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800475e:	2b00      	cmp	r3, #0
 8004760:	d007      	beq.n	8004772 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	681a      	ldr	r2, [r3, #0]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f022 0208 	bic.w	r2, r2, #8
 8004770:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f022 0201 	bic.w	r2, r2, #1
 8004780:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004782:	e013      	b.n	80047ac <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004784:	f7ff f8ba 	bl	80038fc <HAL_GetTick>
 8004788:	4602      	mov	r2, r0
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	1ad3      	subs	r3, r2, r3
 800478e:	2b05      	cmp	r3, #5
 8004790:	d90c      	bls.n	80047ac <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2220      	movs	r2, #32
 8004796:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2203      	movs	r2, #3
 800479c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2200      	movs	r2, #0
 80047a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80047a8:	2303      	movs	r3, #3
 80047aa:	e015      	b.n	80047d8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f003 0301 	and.w	r3, r3, #1
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d1e4      	bne.n	8004784 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047be:	223f      	movs	r2, #63	; 0x3f
 80047c0:	409a      	lsls	r2, r3
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2201      	movs	r2, #1
 80047ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2200      	movs	r2, #0
 80047d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80047d6:	2300      	movs	r3, #0
}
 80047d8:	4618      	mov	r0, r3
 80047da:	3710      	adds	r7, #16
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}

080047e0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b083      	sub	sp, #12
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80047ee:	b2db      	uxtb	r3, r3
 80047f0:	2b02      	cmp	r3, #2
 80047f2:	d004      	beq.n	80047fe <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2280      	movs	r2, #128	; 0x80
 80047f8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	e00c      	b.n	8004818 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2205      	movs	r2, #5
 8004802:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f022 0201 	bic.w	r2, r2, #1
 8004814:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004816:	2300      	movs	r3, #0
}
 8004818:	4618      	mov	r0, r3
 800481a:	370c      	adds	r7, #12
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr

08004824 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b086      	sub	sp, #24
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800482c:	2300      	movs	r3, #0
 800482e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004830:	4b8e      	ldr	r3, [pc, #568]	; (8004a6c <HAL_DMA_IRQHandler+0x248>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a8e      	ldr	r2, [pc, #568]	; (8004a70 <HAL_DMA_IRQHandler+0x24c>)
 8004836:	fba2 2303 	umull	r2, r3, r2, r3
 800483a:	0a9b      	lsrs	r3, r3, #10
 800483c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004842:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800484e:	2208      	movs	r2, #8
 8004850:	409a      	lsls	r2, r3
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	4013      	ands	r3, r2
 8004856:	2b00      	cmp	r3, #0
 8004858:	d01a      	beq.n	8004890 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f003 0304 	and.w	r3, r3, #4
 8004864:	2b00      	cmp	r3, #0
 8004866:	d013      	beq.n	8004890 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	681a      	ldr	r2, [r3, #0]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f022 0204 	bic.w	r2, r2, #4
 8004876:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800487c:	2208      	movs	r2, #8
 800487e:	409a      	lsls	r2, r3
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004888:	f043 0201 	orr.w	r2, r3, #1
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004894:	2201      	movs	r2, #1
 8004896:	409a      	lsls	r2, r3
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	4013      	ands	r3, r2
 800489c:	2b00      	cmp	r3, #0
 800489e:	d012      	beq.n	80048c6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	695b      	ldr	r3, [r3, #20]
 80048a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d00b      	beq.n	80048c6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048b2:	2201      	movs	r2, #1
 80048b4:	409a      	lsls	r2, r3
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048be:	f043 0202 	orr.w	r2, r3, #2
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048ca:	2204      	movs	r2, #4
 80048cc:	409a      	lsls	r2, r3
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	4013      	ands	r3, r2
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d012      	beq.n	80048fc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f003 0302 	and.w	r3, r3, #2
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d00b      	beq.n	80048fc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048e8:	2204      	movs	r2, #4
 80048ea:	409a      	lsls	r2, r3
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048f4:	f043 0204 	orr.w	r2, r3, #4
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004900:	2210      	movs	r2, #16
 8004902:	409a      	lsls	r2, r3
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	4013      	ands	r3, r2
 8004908:	2b00      	cmp	r3, #0
 800490a:	d043      	beq.n	8004994 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f003 0308 	and.w	r3, r3, #8
 8004916:	2b00      	cmp	r3, #0
 8004918:	d03c      	beq.n	8004994 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800491e:	2210      	movs	r2, #16
 8004920:	409a      	lsls	r2, r3
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004930:	2b00      	cmp	r3, #0
 8004932:	d018      	beq.n	8004966 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800493e:	2b00      	cmp	r3, #0
 8004940:	d108      	bne.n	8004954 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004946:	2b00      	cmp	r3, #0
 8004948:	d024      	beq.n	8004994 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	4798      	blx	r3
 8004952:	e01f      	b.n	8004994 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004958:	2b00      	cmp	r3, #0
 800495a:	d01b      	beq.n	8004994 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004960:	6878      	ldr	r0, [r7, #4]
 8004962:	4798      	blx	r3
 8004964:	e016      	b.n	8004994 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004970:	2b00      	cmp	r3, #0
 8004972:	d107      	bne.n	8004984 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	681a      	ldr	r2, [r3, #0]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f022 0208 	bic.w	r2, r2, #8
 8004982:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004988:	2b00      	cmp	r3, #0
 800498a:	d003      	beq.n	8004994 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004990:	6878      	ldr	r0, [r7, #4]
 8004992:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004998:	2220      	movs	r2, #32
 800499a:	409a      	lsls	r2, r3
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	4013      	ands	r3, r2
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	f000 808f 	beq.w	8004ac4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f003 0310 	and.w	r3, r3, #16
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	f000 8087 	beq.w	8004ac4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049ba:	2220      	movs	r2, #32
 80049bc:	409a      	lsls	r2, r3
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80049c8:	b2db      	uxtb	r3, r3
 80049ca:	2b05      	cmp	r3, #5
 80049cc:	d136      	bne.n	8004a3c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	681a      	ldr	r2, [r3, #0]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f022 0216 	bic.w	r2, r2, #22
 80049dc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	695a      	ldr	r2, [r3, #20]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80049ec:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d103      	bne.n	80049fe <HAL_DMA_IRQHandler+0x1da>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d007      	beq.n	8004a0e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	681a      	ldr	r2, [r3, #0]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f022 0208 	bic.w	r2, r2, #8
 8004a0c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a12:	223f      	movs	r2, #63	; 0x3f
 8004a14:	409a      	lsls	r2, r3
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2201      	movs	r2, #1
 8004a1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2200      	movs	r2, #0
 8004a26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d07e      	beq.n	8004b30 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	4798      	blx	r3
        }
        return;
 8004a3a:	e079      	b.n	8004b30 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d01d      	beq.n	8004a86 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d10d      	bne.n	8004a74 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d031      	beq.n	8004ac4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a64:	6878      	ldr	r0, [r7, #4]
 8004a66:	4798      	blx	r3
 8004a68:	e02c      	b.n	8004ac4 <HAL_DMA_IRQHandler+0x2a0>
 8004a6a:	bf00      	nop
 8004a6c:	20000178 	.word	0x20000178
 8004a70:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d023      	beq.n	8004ac4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a80:	6878      	ldr	r0, [r7, #4]
 8004a82:	4798      	blx	r3
 8004a84:	e01e      	b.n	8004ac4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d10f      	bne.n	8004ab4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	681a      	ldr	r2, [r3, #0]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f022 0210 	bic.w	r2, r2, #16
 8004aa2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d003      	beq.n	8004ac4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ac0:	6878      	ldr	r0, [r7, #4]
 8004ac2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d032      	beq.n	8004b32 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ad0:	f003 0301 	and.w	r3, r3, #1
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d022      	beq.n	8004b1e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2205      	movs	r2, #5
 8004adc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f022 0201 	bic.w	r2, r2, #1
 8004aee:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	3301      	adds	r3, #1
 8004af4:	60bb      	str	r3, [r7, #8]
 8004af6:	697a      	ldr	r2, [r7, #20]
 8004af8:	429a      	cmp	r2, r3
 8004afa:	d307      	bcc.n	8004b0c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f003 0301 	and.w	r3, r3, #1
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d1f2      	bne.n	8004af0 <HAL_DMA_IRQHandler+0x2cc>
 8004b0a:	e000      	b.n	8004b0e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004b0c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2201      	movs	r2, #1
 8004b12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d005      	beq.n	8004b32 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	4798      	blx	r3
 8004b2e:	e000      	b.n	8004b32 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004b30:	bf00      	nop
    }
  }
}
 8004b32:	3718      	adds	r7, #24
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bd80      	pop	{r7, pc}

08004b38 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b083      	sub	sp, #12
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	370c      	adds	r7, #12
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4e:	4770      	bx	lr

08004b50 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b085      	sub	sp, #20
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	60f8      	str	r0, [r7, #12]
 8004b58:	60b9      	str	r1, [r7, #8]
 8004b5a:	607a      	str	r2, [r7, #4]
 8004b5c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	681a      	ldr	r2, [r3, #0]
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004b6c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	683a      	ldr	r2, [r7, #0]
 8004b74:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	689b      	ldr	r3, [r3, #8]
 8004b7a:	2b40      	cmp	r3, #64	; 0x40
 8004b7c:	d108      	bne.n	8004b90 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	687a      	ldr	r2, [r7, #4]
 8004b84:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	68ba      	ldr	r2, [r7, #8]
 8004b8c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004b8e:	e007      	b.n	8004ba0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	68ba      	ldr	r2, [r7, #8]
 8004b96:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	687a      	ldr	r2, [r7, #4]
 8004b9e:	60da      	str	r2, [r3, #12]
}
 8004ba0:	bf00      	nop
 8004ba2:	3714      	adds	r7, #20
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004baa:	4770      	bx	lr

08004bac <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b085      	sub	sp, #20
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	b2db      	uxtb	r3, r3
 8004bba:	3b10      	subs	r3, #16
 8004bbc:	4a14      	ldr	r2, [pc, #80]	; (8004c10 <DMA_CalcBaseAndBitshift+0x64>)
 8004bbe:	fba2 2303 	umull	r2, r3, r2, r3
 8004bc2:	091b      	lsrs	r3, r3, #4
 8004bc4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004bc6:	4a13      	ldr	r2, [pc, #76]	; (8004c14 <DMA_CalcBaseAndBitshift+0x68>)
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	4413      	add	r3, r2
 8004bcc:	781b      	ldrb	r3, [r3, #0]
 8004bce:	461a      	mov	r2, r3
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2b03      	cmp	r3, #3
 8004bd8:	d909      	bls.n	8004bee <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004be2:	f023 0303 	bic.w	r3, r3, #3
 8004be6:	1d1a      	adds	r2, r3, #4
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	659a      	str	r2, [r3, #88]	; 0x58
 8004bec:	e007      	b.n	8004bfe <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004bf6:	f023 0303 	bic.w	r3, r3, #3
 8004bfa:	687a      	ldr	r2, [r7, #4]
 8004bfc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004c02:	4618      	mov	r0, r3
 8004c04:	3714      	adds	r7, #20
 8004c06:	46bd      	mov	sp, r7
 8004c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0c:	4770      	bx	lr
 8004c0e:	bf00      	nop
 8004c10:	aaaaaaab 	.word	0xaaaaaaab
 8004c14:	08030e8c 	.word	0x08030e8c

08004c18 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b085      	sub	sp, #20
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c20:	2300      	movs	r3, #0
 8004c22:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c28:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	699b      	ldr	r3, [r3, #24]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d11f      	bne.n	8004c72 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	2b03      	cmp	r3, #3
 8004c36:	d856      	bhi.n	8004ce6 <DMA_CheckFifoParam+0xce>
 8004c38:	a201      	add	r2, pc, #4	; (adr r2, 8004c40 <DMA_CheckFifoParam+0x28>)
 8004c3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c3e:	bf00      	nop
 8004c40:	08004c51 	.word	0x08004c51
 8004c44:	08004c63 	.word	0x08004c63
 8004c48:	08004c51 	.word	0x08004c51
 8004c4c:	08004ce7 	.word	0x08004ce7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d046      	beq.n	8004cea <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c60:	e043      	b.n	8004cea <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c66:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004c6a:	d140      	bne.n	8004cee <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c70:	e03d      	b.n	8004cee <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	699b      	ldr	r3, [r3, #24]
 8004c76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c7a:	d121      	bne.n	8004cc0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	2b03      	cmp	r3, #3
 8004c80:	d837      	bhi.n	8004cf2 <DMA_CheckFifoParam+0xda>
 8004c82:	a201      	add	r2, pc, #4	; (adr r2, 8004c88 <DMA_CheckFifoParam+0x70>)
 8004c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c88:	08004c99 	.word	0x08004c99
 8004c8c:	08004c9f 	.word	0x08004c9f
 8004c90:	08004c99 	.word	0x08004c99
 8004c94:	08004cb1 	.word	0x08004cb1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	73fb      	strb	r3, [r7, #15]
      break;
 8004c9c:	e030      	b.n	8004d00 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ca2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d025      	beq.n	8004cf6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004caa:	2301      	movs	r3, #1
 8004cac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004cae:	e022      	b.n	8004cf6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cb4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004cb8:	d11f      	bne.n	8004cfa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004cbe:	e01c      	b.n	8004cfa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	2b02      	cmp	r3, #2
 8004cc4:	d903      	bls.n	8004cce <DMA_CheckFifoParam+0xb6>
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	2b03      	cmp	r3, #3
 8004cca:	d003      	beq.n	8004cd4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004ccc:	e018      	b.n	8004d00 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	73fb      	strb	r3, [r7, #15]
      break;
 8004cd2:	e015      	b.n	8004d00 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cd8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d00e      	beq.n	8004cfe <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	73fb      	strb	r3, [r7, #15]
      break;
 8004ce4:	e00b      	b.n	8004cfe <DMA_CheckFifoParam+0xe6>
      break;
 8004ce6:	bf00      	nop
 8004ce8:	e00a      	b.n	8004d00 <DMA_CheckFifoParam+0xe8>
      break;
 8004cea:	bf00      	nop
 8004cec:	e008      	b.n	8004d00 <DMA_CheckFifoParam+0xe8>
      break;
 8004cee:	bf00      	nop
 8004cf0:	e006      	b.n	8004d00 <DMA_CheckFifoParam+0xe8>
      break;
 8004cf2:	bf00      	nop
 8004cf4:	e004      	b.n	8004d00 <DMA_CheckFifoParam+0xe8>
      break;
 8004cf6:	bf00      	nop
 8004cf8:	e002      	b.n	8004d00 <DMA_CheckFifoParam+0xe8>
      break;   
 8004cfa:	bf00      	nop
 8004cfc:	e000      	b.n	8004d00 <DMA_CheckFifoParam+0xe8>
      break;
 8004cfe:	bf00      	nop
    }
  } 
  
  return status; 
 8004d00:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3714      	adds	r7, #20
 8004d06:	46bd      	mov	sp, r7
 8004d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0c:	4770      	bx	lr
 8004d0e:	bf00      	nop

08004d10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d10:	b480      	push	{r7}
 8004d12:	b089      	sub	sp, #36	; 0x24
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
 8004d18:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004d22:	2300      	movs	r3, #0
 8004d24:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004d26:	2300      	movs	r3, #0
 8004d28:	61fb      	str	r3, [r7, #28]
 8004d2a:	e159      	b.n	8004fe0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004d2c:	2201      	movs	r2, #1
 8004d2e:	69fb      	ldr	r3, [r7, #28]
 8004d30:	fa02 f303 	lsl.w	r3, r2, r3
 8004d34:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	697a      	ldr	r2, [r7, #20]
 8004d3c:	4013      	ands	r3, r2
 8004d3e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004d40:	693a      	ldr	r2, [r7, #16]
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	429a      	cmp	r2, r3
 8004d46:	f040 8148 	bne.w	8004fda <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	f003 0303 	and.w	r3, r3, #3
 8004d52:	2b01      	cmp	r3, #1
 8004d54:	d005      	beq.n	8004d62 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004d5e:	2b02      	cmp	r3, #2
 8004d60:	d130      	bne.n	8004dc4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004d68:	69fb      	ldr	r3, [r7, #28]
 8004d6a:	005b      	lsls	r3, r3, #1
 8004d6c:	2203      	movs	r2, #3
 8004d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d72:	43db      	mvns	r3, r3
 8004d74:	69ba      	ldr	r2, [r7, #24]
 8004d76:	4013      	ands	r3, r2
 8004d78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	68da      	ldr	r2, [r3, #12]
 8004d7e:	69fb      	ldr	r3, [r7, #28]
 8004d80:	005b      	lsls	r3, r3, #1
 8004d82:	fa02 f303 	lsl.w	r3, r2, r3
 8004d86:	69ba      	ldr	r2, [r7, #24]
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	69ba      	ldr	r2, [r7, #24]
 8004d90:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004d98:	2201      	movs	r2, #1
 8004d9a:	69fb      	ldr	r3, [r7, #28]
 8004d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8004da0:	43db      	mvns	r3, r3
 8004da2:	69ba      	ldr	r2, [r7, #24]
 8004da4:	4013      	ands	r3, r2
 8004da6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	091b      	lsrs	r3, r3, #4
 8004dae:	f003 0201 	and.w	r2, r3, #1
 8004db2:	69fb      	ldr	r3, [r7, #28]
 8004db4:	fa02 f303 	lsl.w	r3, r2, r3
 8004db8:	69ba      	ldr	r2, [r7, #24]
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	69ba      	ldr	r2, [r7, #24]
 8004dc2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	f003 0303 	and.w	r3, r3, #3
 8004dcc:	2b03      	cmp	r3, #3
 8004dce:	d017      	beq.n	8004e00 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	68db      	ldr	r3, [r3, #12]
 8004dd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004dd6:	69fb      	ldr	r3, [r7, #28]
 8004dd8:	005b      	lsls	r3, r3, #1
 8004dda:	2203      	movs	r2, #3
 8004ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8004de0:	43db      	mvns	r3, r3
 8004de2:	69ba      	ldr	r2, [r7, #24]
 8004de4:	4013      	ands	r3, r2
 8004de6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	689a      	ldr	r2, [r3, #8]
 8004dec:	69fb      	ldr	r3, [r7, #28]
 8004dee:	005b      	lsls	r3, r3, #1
 8004df0:	fa02 f303 	lsl.w	r3, r2, r3
 8004df4:	69ba      	ldr	r2, [r7, #24]
 8004df6:	4313      	orrs	r3, r2
 8004df8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	69ba      	ldr	r2, [r7, #24]
 8004dfe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	f003 0303 	and.w	r3, r3, #3
 8004e08:	2b02      	cmp	r3, #2
 8004e0a:	d123      	bne.n	8004e54 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004e0c:	69fb      	ldr	r3, [r7, #28]
 8004e0e:	08da      	lsrs	r2, r3, #3
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	3208      	adds	r2, #8
 8004e14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e18:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004e1a:	69fb      	ldr	r3, [r7, #28]
 8004e1c:	f003 0307 	and.w	r3, r3, #7
 8004e20:	009b      	lsls	r3, r3, #2
 8004e22:	220f      	movs	r2, #15
 8004e24:	fa02 f303 	lsl.w	r3, r2, r3
 8004e28:	43db      	mvns	r3, r3
 8004e2a:	69ba      	ldr	r2, [r7, #24]
 8004e2c:	4013      	ands	r3, r2
 8004e2e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	691a      	ldr	r2, [r3, #16]
 8004e34:	69fb      	ldr	r3, [r7, #28]
 8004e36:	f003 0307 	and.w	r3, r3, #7
 8004e3a:	009b      	lsls	r3, r3, #2
 8004e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e40:	69ba      	ldr	r2, [r7, #24]
 8004e42:	4313      	orrs	r3, r2
 8004e44:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004e46:	69fb      	ldr	r3, [r7, #28]
 8004e48:	08da      	lsrs	r2, r3, #3
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	3208      	adds	r2, #8
 8004e4e:	69b9      	ldr	r1, [r7, #24]
 8004e50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004e5a:	69fb      	ldr	r3, [r7, #28]
 8004e5c:	005b      	lsls	r3, r3, #1
 8004e5e:	2203      	movs	r2, #3
 8004e60:	fa02 f303 	lsl.w	r3, r2, r3
 8004e64:	43db      	mvns	r3, r3
 8004e66:	69ba      	ldr	r2, [r7, #24]
 8004e68:	4013      	ands	r3, r2
 8004e6a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	f003 0203 	and.w	r2, r3, #3
 8004e74:	69fb      	ldr	r3, [r7, #28]
 8004e76:	005b      	lsls	r3, r3, #1
 8004e78:	fa02 f303 	lsl.w	r3, r2, r3
 8004e7c:	69ba      	ldr	r2, [r7, #24]
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	69ba      	ldr	r2, [r7, #24]
 8004e86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	f000 80a2 	beq.w	8004fda <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e96:	2300      	movs	r3, #0
 8004e98:	60fb      	str	r3, [r7, #12]
 8004e9a:	4b57      	ldr	r3, [pc, #348]	; (8004ff8 <HAL_GPIO_Init+0x2e8>)
 8004e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e9e:	4a56      	ldr	r2, [pc, #344]	; (8004ff8 <HAL_GPIO_Init+0x2e8>)
 8004ea0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004ea4:	6453      	str	r3, [r2, #68]	; 0x44
 8004ea6:	4b54      	ldr	r3, [pc, #336]	; (8004ff8 <HAL_GPIO_Init+0x2e8>)
 8004ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004eae:	60fb      	str	r3, [r7, #12]
 8004eb0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004eb2:	4a52      	ldr	r2, [pc, #328]	; (8004ffc <HAL_GPIO_Init+0x2ec>)
 8004eb4:	69fb      	ldr	r3, [r7, #28]
 8004eb6:	089b      	lsrs	r3, r3, #2
 8004eb8:	3302      	adds	r3, #2
 8004eba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004ec0:	69fb      	ldr	r3, [r7, #28]
 8004ec2:	f003 0303 	and.w	r3, r3, #3
 8004ec6:	009b      	lsls	r3, r3, #2
 8004ec8:	220f      	movs	r2, #15
 8004eca:	fa02 f303 	lsl.w	r3, r2, r3
 8004ece:	43db      	mvns	r3, r3
 8004ed0:	69ba      	ldr	r2, [r7, #24]
 8004ed2:	4013      	ands	r3, r2
 8004ed4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	4a49      	ldr	r2, [pc, #292]	; (8005000 <HAL_GPIO_Init+0x2f0>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d019      	beq.n	8004f12 <HAL_GPIO_Init+0x202>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	4a48      	ldr	r2, [pc, #288]	; (8005004 <HAL_GPIO_Init+0x2f4>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d013      	beq.n	8004f0e <HAL_GPIO_Init+0x1fe>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	4a47      	ldr	r2, [pc, #284]	; (8005008 <HAL_GPIO_Init+0x2f8>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d00d      	beq.n	8004f0a <HAL_GPIO_Init+0x1fa>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	4a46      	ldr	r2, [pc, #280]	; (800500c <HAL_GPIO_Init+0x2fc>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d007      	beq.n	8004f06 <HAL_GPIO_Init+0x1f6>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	4a45      	ldr	r2, [pc, #276]	; (8005010 <HAL_GPIO_Init+0x300>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d101      	bne.n	8004f02 <HAL_GPIO_Init+0x1f2>
 8004efe:	2304      	movs	r3, #4
 8004f00:	e008      	b.n	8004f14 <HAL_GPIO_Init+0x204>
 8004f02:	2307      	movs	r3, #7
 8004f04:	e006      	b.n	8004f14 <HAL_GPIO_Init+0x204>
 8004f06:	2303      	movs	r3, #3
 8004f08:	e004      	b.n	8004f14 <HAL_GPIO_Init+0x204>
 8004f0a:	2302      	movs	r3, #2
 8004f0c:	e002      	b.n	8004f14 <HAL_GPIO_Init+0x204>
 8004f0e:	2301      	movs	r3, #1
 8004f10:	e000      	b.n	8004f14 <HAL_GPIO_Init+0x204>
 8004f12:	2300      	movs	r3, #0
 8004f14:	69fa      	ldr	r2, [r7, #28]
 8004f16:	f002 0203 	and.w	r2, r2, #3
 8004f1a:	0092      	lsls	r2, r2, #2
 8004f1c:	4093      	lsls	r3, r2
 8004f1e:	69ba      	ldr	r2, [r7, #24]
 8004f20:	4313      	orrs	r3, r2
 8004f22:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004f24:	4935      	ldr	r1, [pc, #212]	; (8004ffc <HAL_GPIO_Init+0x2ec>)
 8004f26:	69fb      	ldr	r3, [r7, #28]
 8004f28:	089b      	lsrs	r3, r3, #2
 8004f2a:	3302      	adds	r3, #2
 8004f2c:	69ba      	ldr	r2, [r7, #24]
 8004f2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004f32:	4b38      	ldr	r3, [pc, #224]	; (8005014 <HAL_GPIO_Init+0x304>)
 8004f34:	689b      	ldr	r3, [r3, #8]
 8004f36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	43db      	mvns	r3, r3
 8004f3c:	69ba      	ldr	r2, [r7, #24]
 8004f3e:	4013      	ands	r3, r2
 8004f40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d003      	beq.n	8004f56 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004f4e:	69ba      	ldr	r2, [r7, #24]
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	4313      	orrs	r3, r2
 8004f54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004f56:	4a2f      	ldr	r2, [pc, #188]	; (8005014 <HAL_GPIO_Init+0x304>)
 8004f58:	69bb      	ldr	r3, [r7, #24]
 8004f5a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004f5c:	4b2d      	ldr	r3, [pc, #180]	; (8005014 <HAL_GPIO_Init+0x304>)
 8004f5e:	68db      	ldr	r3, [r3, #12]
 8004f60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f62:	693b      	ldr	r3, [r7, #16]
 8004f64:	43db      	mvns	r3, r3
 8004f66:	69ba      	ldr	r2, [r7, #24]
 8004f68:	4013      	ands	r3, r2
 8004f6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d003      	beq.n	8004f80 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004f78:	69ba      	ldr	r2, [r7, #24]
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004f80:	4a24      	ldr	r2, [pc, #144]	; (8005014 <HAL_GPIO_Init+0x304>)
 8004f82:	69bb      	ldr	r3, [r7, #24]
 8004f84:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004f86:	4b23      	ldr	r3, [pc, #140]	; (8005014 <HAL_GPIO_Init+0x304>)
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	43db      	mvns	r3, r3
 8004f90:	69ba      	ldr	r2, [r7, #24]
 8004f92:	4013      	ands	r3, r2
 8004f94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d003      	beq.n	8004faa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004fa2:	69ba      	ldr	r2, [r7, #24]
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004faa:	4a1a      	ldr	r2, [pc, #104]	; (8005014 <HAL_GPIO_Init+0x304>)
 8004fac:	69bb      	ldr	r3, [r7, #24]
 8004fae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004fb0:	4b18      	ldr	r3, [pc, #96]	; (8005014 <HAL_GPIO_Init+0x304>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	43db      	mvns	r3, r3
 8004fba:	69ba      	ldr	r2, [r7, #24]
 8004fbc:	4013      	ands	r3, r2
 8004fbe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d003      	beq.n	8004fd4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004fcc:	69ba      	ldr	r2, [r7, #24]
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004fd4:	4a0f      	ldr	r2, [pc, #60]	; (8005014 <HAL_GPIO_Init+0x304>)
 8004fd6:	69bb      	ldr	r3, [r7, #24]
 8004fd8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004fda:	69fb      	ldr	r3, [r7, #28]
 8004fdc:	3301      	adds	r3, #1
 8004fde:	61fb      	str	r3, [r7, #28]
 8004fe0:	69fb      	ldr	r3, [r7, #28]
 8004fe2:	2b0f      	cmp	r3, #15
 8004fe4:	f67f aea2 	bls.w	8004d2c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004fe8:	bf00      	nop
 8004fea:	bf00      	nop
 8004fec:	3724      	adds	r7, #36	; 0x24
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff4:	4770      	bx	lr
 8004ff6:	bf00      	nop
 8004ff8:	40023800 	.word	0x40023800
 8004ffc:	40013800 	.word	0x40013800
 8005000:	40020000 	.word	0x40020000
 8005004:	40020400 	.word	0x40020400
 8005008:	40020800 	.word	0x40020800
 800500c:	40020c00 	.word	0x40020c00
 8005010:	40021000 	.word	0x40021000
 8005014:	40013c00 	.word	0x40013c00

08005018 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005018:	b480      	push	{r7}
 800501a:	b087      	sub	sp, #28
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
 8005020:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005022:	2300      	movs	r3, #0
 8005024:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8005026:	2300      	movs	r3, #0
 8005028:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800502a:	2300      	movs	r3, #0
 800502c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800502e:	2300      	movs	r3, #0
 8005030:	617b      	str	r3, [r7, #20]
 8005032:	e0bb      	b.n	80051ac <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005034:	2201      	movs	r2, #1
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	fa02 f303 	lsl.w	r3, r2, r3
 800503c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800503e:	683a      	ldr	r2, [r7, #0]
 8005040:	693b      	ldr	r3, [r7, #16]
 8005042:	4013      	ands	r3, r2
 8005044:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8005046:	68fa      	ldr	r2, [r7, #12]
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	429a      	cmp	r2, r3
 800504c:	f040 80ab 	bne.w	80051a6 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8005050:	4a5c      	ldr	r2, [pc, #368]	; (80051c4 <HAL_GPIO_DeInit+0x1ac>)
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	089b      	lsrs	r3, r3, #2
 8005056:	3302      	adds	r3, #2
 8005058:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800505c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	f003 0303 	and.w	r3, r3, #3
 8005064:	009b      	lsls	r3, r3, #2
 8005066:	220f      	movs	r2, #15
 8005068:	fa02 f303 	lsl.w	r3, r2, r3
 800506c:	68ba      	ldr	r2, [r7, #8]
 800506e:	4013      	ands	r3, r2
 8005070:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	4a54      	ldr	r2, [pc, #336]	; (80051c8 <HAL_GPIO_DeInit+0x1b0>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d019      	beq.n	80050ae <HAL_GPIO_DeInit+0x96>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	4a53      	ldr	r2, [pc, #332]	; (80051cc <HAL_GPIO_DeInit+0x1b4>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d013      	beq.n	80050aa <HAL_GPIO_DeInit+0x92>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	4a52      	ldr	r2, [pc, #328]	; (80051d0 <HAL_GPIO_DeInit+0x1b8>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d00d      	beq.n	80050a6 <HAL_GPIO_DeInit+0x8e>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	4a51      	ldr	r2, [pc, #324]	; (80051d4 <HAL_GPIO_DeInit+0x1bc>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d007      	beq.n	80050a2 <HAL_GPIO_DeInit+0x8a>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	4a50      	ldr	r2, [pc, #320]	; (80051d8 <HAL_GPIO_DeInit+0x1c0>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d101      	bne.n	800509e <HAL_GPIO_DeInit+0x86>
 800509a:	2304      	movs	r3, #4
 800509c:	e008      	b.n	80050b0 <HAL_GPIO_DeInit+0x98>
 800509e:	2307      	movs	r3, #7
 80050a0:	e006      	b.n	80050b0 <HAL_GPIO_DeInit+0x98>
 80050a2:	2303      	movs	r3, #3
 80050a4:	e004      	b.n	80050b0 <HAL_GPIO_DeInit+0x98>
 80050a6:	2302      	movs	r3, #2
 80050a8:	e002      	b.n	80050b0 <HAL_GPIO_DeInit+0x98>
 80050aa:	2301      	movs	r3, #1
 80050ac:	e000      	b.n	80050b0 <HAL_GPIO_DeInit+0x98>
 80050ae:	2300      	movs	r3, #0
 80050b0:	697a      	ldr	r2, [r7, #20]
 80050b2:	f002 0203 	and.w	r2, r2, #3
 80050b6:	0092      	lsls	r2, r2, #2
 80050b8:	4093      	lsls	r3, r2
 80050ba:	68ba      	ldr	r2, [r7, #8]
 80050bc:	429a      	cmp	r2, r3
 80050be:	d132      	bne.n	8005126 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80050c0:	4b46      	ldr	r3, [pc, #280]	; (80051dc <HAL_GPIO_DeInit+0x1c4>)
 80050c2:	681a      	ldr	r2, [r3, #0]
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	43db      	mvns	r3, r3
 80050c8:	4944      	ldr	r1, [pc, #272]	; (80051dc <HAL_GPIO_DeInit+0x1c4>)
 80050ca:	4013      	ands	r3, r2
 80050cc:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80050ce:	4b43      	ldr	r3, [pc, #268]	; (80051dc <HAL_GPIO_DeInit+0x1c4>)
 80050d0:	685a      	ldr	r2, [r3, #4]
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	43db      	mvns	r3, r3
 80050d6:	4941      	ldr	r1, [pc, #260]	; (80051dc <HAL_GPIO_DeInit+0x1c4>)
 80050d8:	4013      	ands	r3, r2
 80050da:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80050dc:	4b3f      	ldr	r3, [pc, #252]	; (80051dc <HAL_GPIO_DeInit+0x1c4>)
 80050de:	68da      	ldr	r2, [r3, #12]
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	43db      	mvns	r3, r3
 80050e4:	493d      	ldr	r1, [pc, #244]	; (80051dc <HAL_GPIO_DeInit+0x1c4>)
 80050e6:	4013      	ands	r3, r2
 80050e8:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80050ea:	4b3c      	ldr	r3, [pc, #240]	; (80051dc <HAL_GPIO_DeInit+0x1c4>)
 80050ec:	689a      	ldr	r2, [r3, #8]
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	43db      	mvns	r3, r3
 80050f2:	493a      	ldr	r1, [pc, #232]	; (80051dc <HAL_GPIO_DeInit+0x1c4>)
 80050f4:	4013      	ands	r3, r2
 80050f6:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	f003 0303 	and.w	r3, r3, #3
 80050fe:	009b      	lsls	r3, r3, #2
 8005100:	220f      	movs	r2, #15
 8005102:	fa02 f303 	lsl.w	r3, r2, r3
 8005106:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8005108:	4a2e      	ldr	r2, [pc, #184]	; (80051c4 <HAL_GPIO_DeInit+0x1ac>)
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	089b      	lsrs	r3, r3, #2
 800510e:	3302      	adds	r3, #2
 8005110:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	43da      	mvns	r2, r3
 8005118:	482a      	ldr	r0, [pc, #168]	; (80051c4 <HAL_GPIO_DeInit+0x1ac>)
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	089b      	lsrs	r3, r3, #2
 800511e:	400a      	ands	r2, r1
 8005120:	3302      	adds	r3, #2
 8005122:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681a      	ldr	r2, [r3, #0]
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	005b      	lsls	r3, r3, #1
 800512e:	2103      	movs	r1, #3
 8005130:	fa01 f303 	lsl.w	r3, r1, r3
 8005134:	43db      	mvns	r3, r3
 8005136:	401a      	ands	r2, r3
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	08da      	lsrs	r2, r3, #3
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	3208      	adds	r2, #8
 8005144:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	f003 0307 	and.w	r3, r3, #7
 800514e:	009b      	lsls	r3, r3, #2
 8005150:	220f      	movs	r2, #15
 8005152:	fa02 f303 	lsl.w	r3, r2, r3
 8005156:	43db      	mvns	r3, r3
 8005158:	697a      	ldr	r2, [r7, #20]
 800515a:	08d2      	lsrs	r2, r2, #3
 800515c:	4019      	ands	r1, r3
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	3208      	adds	r2, #8
 8005162:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	68da      	ldr	r2, [r3, #12]
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	005b      	lsls	r3, r3, #1
 800516e:	2103      	movs	r1, #3
 8005170:	fa01 f303 	lsl.w	r3, r1, r3
 8005174:	43db      	mvns	r3, r3
 8005176:	401a      	ands	r2, r3
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	685a      	ldr	r2, [r3, #4]
 8005180:	2101      	movs	r1, #1
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	fa01 f303 	lsl.w	r3, r1, r3
 8005188:	43db      	mvns	r3, r3
 800518a:	401a      	ands	r2, r3
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	689a      	ldr	r2, [r3, #8]
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	005b      	lsls	r3, r3, #1
 8005198:	2103      	movs	r1, #3
 800519a:	fa01 f303 	lsl.w	r3, r1, r3
 800519e:	43db      	mvns	r3, r3
 80051a0:	401a      	ands	r2, r3
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	3301      	adds	r3, #1
 80051aa:	617b      	str	r3, [r7, #20]
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	2b0f      	cmp	r3, #15
 80051b0:	f67f af40 	bls.w	8005034 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80051b4:	bf00      	nop
 80051b6:	bf00      	nop
 80051b8:	371c      	adds	r7, #28
 80051ba:	46bd      	mov	sp, r7
 80051bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c0:	4770      	bx	lr
 80051c2:	bf00      	nop
 80051c4:	40013800 	.word	0x40013800
 80051c8:	40020000 	.word	0x40020000
 80051cc:	40020400 	.word	0x40020400
 80051d0:	40020800 	.word	0x40020800
 80051d4:	40020c00 	.word	0x40020c00
 80051d8:	40021000 	.word	0x40021000
 80051dc:	40013c00 	.word	0x40013c00

080051e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b083      	sub	sp, #12
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
 80051e8:	460b      	mov	r3, r1
 80051ea:	807b      	strh	r3, [r7, #2]
 80051ec:	4613      	mov	r3, r2
 80051ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80051f0:	787b      	ldrb	r3, [r7, #1]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d003      	beq.n	80051fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80051f6:	887a      	ldrh	r2, [r7, #2]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80051fc:	e003      	b.n	8005206 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80051fe:	887b      	ldrh	r3, [r7, #2]
 8005200:	041a      	lsls	r2, r3, #16
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	619a      	str	r2, [r3, #24]
}
 8005206:	bf00      	nop
 8005208:	370c      	adds	r7, #12
 800520a:	46bd      	mov	sp, r7
 800520c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005210:	4770      	bx	lr
	...

08005214 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b084      	sub	sp, #16
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d101      	bne.n	8005226 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005222:	2301      	movs	r3, #1
 8005224:	e12b      	b.n	800547e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800522c:	b2db      	uxtb	r3, r3
 800522e:	2b00      	cmp	r3, #0
 8005230:	d106      	bne.n	8005240 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2200      	movs	r2, #0
 8005236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f7fc ffc8 	bl	80021d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2224      	movs	r2, #36	; 0x24
 8005244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	681a      	ldr	r2, [r3, #0]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f022 0201 	bic.w	r2, r2, #1
 8005256:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	681a      	ldr	r2, [r3, #0]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005266:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	681a      	ldr	r2, [r3, #0]
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005276:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005278:	f002 fe72 	bl	8007f60 <HAL_RCC_GetPCLK1Freq>
 800527c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	4a81      	ldr	r2, [pc, #516]	; (8005488 <HAL_I2C_Init+0x274>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d807      	bhi.n	8005298 <HAL_I2C_Init+0x84>
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	4a80      	ldr	r2, [pc, #512]	; (800548c <HAL_I2C_Init+0x278>)
 800528c:	4293      	cmp	r3, r2
 800528e:	bf94      	ite	ls
 8005290:	2301      	movls	r3, #1
 8005292:	2300      	movhi	r3, #0
 8005294:	b2db      	uxtb	r3, r3
 8005296:	e006      	b.n	80052a6 <HAL_I2C_Init+0x92>
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	4a7d      	ldr	r2, [pc, #500]	; (8005490 <HAL_I2C_Init+0x27c>)
 800529c:	4293      	cmp	r3, r2
 800529e:	bf94      	ite	ls
 80052a0:	2301      	movls	r3, #1
 80052a2:	2300      	movhi	r3, #0
 80052a4:	b2db      	uxtb	r3, r3
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d001      	beq.n	80052ae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80052aa:	2301      	movs	r3, #1
 80052ac:	e0e7      	b.n	800547e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	4a78      	ldr	r2, [pc, #480]	; (8005494 <HAL_I2C_Init+0x280>)
 80052b2:	fba2 2303 	umull	r2, r3, r2, r3
 80052b6:	0c9b      	lsrs	r3, r3, #18
 80052b8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	68ba      	ldr	r2, [r7, #8]
 80052ca:	430a      	orrs	r2, r1
 80052cc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	6a1b      	ldr	r3, [r3, #32]
 80052d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	4a6a      	ldr	r2, [pc, #424]	; (8005488 <HAL_I2C_Init+0x274>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d802      	bhi.n	80052e8 <HAL_I2C_Init+0xd4>
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	3301      	adds	r3, #1
 80052e6:	e009      	b.n	80052fc <HAL_I2C_Init+0xe8>
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80052ee:	fb02 f303 	mul.w	r3, r2, r3
 80052f2:	4a69      	ldr	r2, [pc, #420]	; (8005498 <HAL_I2C_Init+0x284>)
 80052f4:	fba2 2303 	umull	r2, r3, r2, r3
 80052f8:	099b      	lsrs	r3, r3, #6
 80052fa:	3301      	adds	r3, #1
 80052fc:	687a      	ldr	r2, [r7, #4]
 80052fe:	6812      	ldr	r2, [r2, #0]
 8005300:	430b      	orrs	r3, r1
 8005302:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	69db      	ldr	r3, [r3, #28]
 800530a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800530e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	495c      	ldr	r1, [pc, #368]	; (8005488 <HAL_I2C_Init+0x274>)
 8005318:	428b      	cmp	r3, r1
 800531a:	d819      	bhi.n	8005350 <HAL_I2C_Init+0x13c>
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	1e59      	subs	r1, r3, #1
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	005b      	lsls	r3, r3, #1
 8005326:	fbb1 f3f3 	udiv	r3, r1, r3
 800532a:	1c59      	adds	r1, r3, #1
 800532c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005330:	400b      	ands	r3, r1
 8005332:	2b00      	cmp	r3, #0
 8005334:	d00a      	beq.n	800534c <HAL_I2C_Init+0x138>
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	1e59      	subs	r1, r3, #1
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	005b      	lsls	r3, r3, #1
 8005340:	fbb1 f3f3 	udiv	r3, r1, r3
 8005344:	3301      	adds	r3, #1
 8005346:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800534a:	e051      	b.n	80053f0 <HAL_I2C_Init+0x1dc>
 800534c:	2304      	movs	r3, #4
 800534e:	e04f      	b.n	80053f0 <HAL_I2C_Init+0x1dc>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	689b      	ldr	r3, [r3, #8]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d111      	bne.n	800537c <HAL_I2C_Init+0x168>
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	1e58      	subs	r0, r3, #1
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6859      	ldr	r1, [r3, #4]
 8005360:	460b      	mov	r3, r1
 8005362:	005b      	lsls	r3, r3, #1
 8005364:	440b      	add	r3, r1
 8005366:	fbb0 f3f3 	udiv	r3, r0, r3
 800536a:	3301      	adds	r3, #1
 800536c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005370:	2b00      	cmp	r3, #0
 8005372:	bf0c      	ite	eq
 8005374:	2301      	moveq	r3, #1
 8005376:	2300      	movne	r3, #0
 8005378:	b2db      	uxtb	r3, r3
 800537a:	e012      	b.n	80053a2 <HAL_I2C_Init+0x18e>
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	1e58      	subs	r0, r3, #1
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6859      	ldr	r1, [r3, #4]
 8005384:	460b      	mov	r3, r1
 8005386:	009b      	lsls	r3, r3, #2
 8005388:	440b      	add	r3, r1
 800538a:	0099      	lsls	r1, r3, #2
 800538c:	440b      	add	r3, r1
 800538e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005392:	3301      	adds	r3, #1
 8005394:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005398:	2b00      	cmp	r3, #0
 800539a:	bf0c      	ite	eq
 800539c:	2301      	moveq	r3, #1
 800539e:	2300      	movne	r3, #0
 80053a0:	b2db      	uxtb	r3, r3
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d001      	beq.n	80053aa <HAL_I2C_Init+0x196>
 80053a6:	2301      	movs	r3, #1
 80053a8:	e022      	b.n	80053f0 <HAL_I2C_Init+0x1dc>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	689b      	ldr	r3, [r3, #8]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d10e      	bne.n	80053d0 <HAL_I2C_Init+0x1bc>
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	1e58      	subs	r0, r3, #1
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6859      	ldr	r1, [r3, #4]
 80053ba:	460b      	mov	r3, r1
 80053bc:	005b      	lsls	r3, r3, #1
 80053be:	440b      	add	r3, r1
 80053c0:	fbb0 f3f3 	udiv	r3, r0, r3
 80053c4:	3301      	adds	r3, #1
 80053c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053ce:	e00f      	b.n	80053f0 <HAL_I2C_Init+0x1dc>
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	1e58      	subs	r0, r3, #1
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6859      	ldr	r1, [r3, #4]
 80053d8:	460b      	mov	r3, r1
 80053da:	009b      	lsls	r3, r3, #2
 80053dc:	440b      	add	r3, r1
 80053de:	0099      	lsls	r1, r3, #2
 80053e0:	440b      	add	r3, r1
 80053e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80053e6:	3301      	adds	r3, #1
 80053e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80053f0:	6879      	ldr	r1, [r7, #4]
 80053f2:	6809      	ldr	r1, [r1, #0]
 80053f4:	4313      	orrs	r3, r2
 80053f6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	69da      	ldr	r2, [r3, #28]
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6a1b      	ldr	r3, [r3, #32]
 800540a:	431a      	orrs	r2, r3
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	430a      	orrs	r2, r1
 8005412:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	689b      	ldr	r3, [r3, #8]
 800541a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800541e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005422:	687a      	ldr	r2, [r7, #4]
 8005424:	6911      	ldr	r1, [r2, #16]
 8005426:	687a      	ldr	r2, [r7, #4]
 8005428:	68d2      	ldr	r2, [r2, #12]
 800542a:	4311      	orrs	r1, r2
 800542c:	687a      	ldr	r2, [r7, #4]
 800542e:	6812      	ldr	r2, [r2, #0]
 8005430:	430b      	orrs	r3, r1
 8005432:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	68db      	ldr	r3, [r3, #12]
 800543a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	695a      	ldr	r2, [r3, #20]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	699b      	ldr	r3, [r3, #24]
 8005446:	431a      	orrs	r2, r3
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	430a      	orrs	r2, r1
 800544e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	681a      	ldr	r2, [r3, #0]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f042 0201 	orr.w	r2, r2, #1
 800545e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2200      	movs	r2, #0
 8005464:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2220      	movs	r2, #32
 800546a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2200      	movs	r2, #0
 8005472:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2200      	movs	r2, #0
 8005478:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800547c:	2300      	movs	r3, #0
}
 800547e:	4618      	mov	r0, r3
 8005480:	3710      	adds	r7, #16
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}
 8005486:	bf00      	nop
 8005488:	000186a0 	.word	0x000186a0
 800548c:	001e847f 	.word	0x001e847f
 8005490:	003d08ff 	.word	0x003d08ff
 8005494:	431bde83 	.word	0x431bde83
 8005498:	10624dd3 	.word	0x10624dd3

0800549c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b088      	sub	sp, #32
 80054a0:	af02      	add	r7, sp, #8
 80054a2:	60f8      	str	r0, [r7, #12]
 80054a4:	4608      	mov	r0, r1
 80054a6:	4611      	mov	r1, r2
 80054a8:	461a      	mov	r2, r3
 80054aa:	4603      	mov	r3, r0
 80054ac:	817b      	strh	r3, [r7, #10]
 80054ae:	460b      	mov	r3, r1
 80054b0:	813b      	strh	r3, [r7, #8]
 80054b2:	4613      	mov	r3, r2
 80054b4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80054b6:	f7fe fa21 	bl	80038fc <HAL_GetTick>
 80054ba:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054c2:	b2db      	uxtb	r3, r3
 80054c4:	2b20      	cmp	r3, #32
 80054c6:	f040 80d9 	bne.w	800567c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	9300      	str	r3, [sp, #0]
 80054ce:	2319      	movs	r3, #25
 80054d0:	2201      	movs	r2, #1
 80054d2:	496d      	ldr	r1, [pc, #436]	; (8005688 <HAL_I2C_Mem_Write+0x1ec>)
 80054d4:	68f8      	ldr	r0, [r7, #12]
 80054d6:	f000 fd27 	bl	8005f28 <I2C_WaitOnFlagUntilTimeout>
 80054da:	4603      	mov	r3, r0
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d001      	beq.n	80054e4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80054e0:	2302      	movs	r3, #2
 80054e2:	e0cc      	b.n	800567e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054ea:	2b01      	cmp	r3, #1
 80054ec:	d101      	bne.n	80054f2 <HAL_I2C_Mem_Write+0x56>
 80054ee:	2302      	movs	r3, #2
 80054f0:	e0c5      	b.n	800567e <HAL_I2C_Mem_Write+0x1e2>
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	2201      	movs	r2, #1
 80054f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f003 0301 	and.w	r3, r3, #1
 8005504:	2b01      	cmp	r3, #1
 8005506:	d007      	beq.n	8005518 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	681a      	ldr	r2, [r3, #0]
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f042 0201 	orr.w	r2, r2, #1
 8005516:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	681a      	ldr	r2, [r3, #0]
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005526:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	2221      	movs	r2, #33	; 0x21
 800552c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	2240      	movs	r2, #64	; 0x40
 8005534:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	2200      	movs	r2, #0
 800553c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	6a3a      	ldr	r2, [r7, #32]
 8005542:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005548:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800554e:	b29a      	uxth	r2, r3
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	4a4d      	ldr	r2, [pc, #308]	; (800568c <HAL_I2C_Mem_Write+0x1f0>)
 8005558:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800555a:	88f8      	ldrh	r0, [r7, #6]
 800555c:	893a      	ldrh	r2, [r7, #8]
 800555e:	8979      	ldrh	r1, [r7, #10]
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	9301      	str	r3, [sp, #4]
 8005564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005566:	9300      	str	r3, [sp, #0]
 8005568:	4603      	mov	r3, r0
 800556a:	68f8      	ldr	r0, [r7, #12]
 800556c:	f000 fa4c 	bl	8005a08 <I2C_RequestMemoryWrite>
 8005570:	4603      	mov	r3, r0
 8005572:	2b00      	cmp	r3, #0
 8005574:	d052      	beq.n	800561c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005576:	2301      	movs	r3, #1
 8005578:	e081      	b.n	800567e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800557a:	697a      	ldr	r2, [r7, #20]
 800557c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800557e:	68f8      	ldr	r0, [r7, #12]
 8005580:	f000 fda8 	bl	80060d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005584:	4603      	mov	r3, r0
 8005586:	2b00      	cmp	r3, #0
 8005588:	d00d      	beq.n	80055a6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800558e:	2b04      	cmp	r3, #4
 8005590:	d107      	bne.n	80055a2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	681a      	ldr	r2, [r3, #0]
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055a0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80055a2:	2301      	movs	r3, #1
 80055a4:	e06b      	b.n	800567e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055aa:	781a      	ldrb	r2, [r3, #0]
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b6:	1c5a      	adds	r2, r3, #1
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055c0:	3b01      	subs	r3, #1
 80055c2:	b29a      	uxth	r2, r3
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055cc:	b29b      	uxth	r3, r3
 80055ce:	3b01      	subs	r3, #1
 80055d0:	b29a      	uxth	r2, r3
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	695b      	ldr	r3, [r3, #20]
 80055dc:	f003 0304 	and.w	r3, r3, #4
 80055e0:	2b04      	cmp	r3, #4
 80055e2:	d11b      	bne.n	800561c <HAL_I2C_Mem_Write+0x180>
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d017      	beq.n	800561c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f0:	781a      	ldrb	r2, [r3, #0]
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055fc:	1c5a      	adds	r2, r3, #1
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005606:	3b01      	subs	r3, #1
 8005608:	b29a      	uxth	r2, r3
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005612:	b29b      	uxth	r3, r3
 8005614:	3b01      	subs	r3, #1
 8005616:	b29a      	uxth	r2, r3
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005620:	2b00      	cmp	r3, #0
 8005622:	d1aa      	bne.n	800557a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005624:	697a      	ldr	r2, [r7, #20]
 8005626:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005628:	68f8      	ldr	r0, [r7, #12]
 800562a:	f000 fd94 	bl	8006156 <I2C_WaitOnBTFFlagUntilTimeout>
 800562e:	4603      	mov	r3, r0
 8005630:	2b00      	cmp	r3, #0
 8005632:	d00d      	beq.n	8005650 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005638:	2b04      	cmp	r3, #4
 800563a:	d107      	bne.n	800564c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	681a      	ldr	r2, [r3, #0]
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800564a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800564c:	2301      	movs	r3, #1
 800564e:	e016      	b.n	800567e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	681a      	ldr	r2, [r3, #0]
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800565e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	2220      	movs	r2, #32
 8005664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	2200      	movs	r2, #0
 800566c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	2200      	movs	r2, #0
 8005674:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005678:	2300      	movs	r3, #0
 800567a:	e000      	b.n	800567e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800567c:	2302      	movs	r3, #2
  }
}
 800567e:	4618      	mov	r0, r3
 8005680:	3718      	adds	r7, #24
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}
 8005686:	bf00      	nop
 8005688:	00100002 	.word	0x00100002
 800568c:	ffff0000 	.word	0xffff0000

08005690 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b08c      	sub	sp, #48	; 0x30
 8005694:	af02      	add	r7, sp, #8
 8005696:	60f8      	str	r0, [r7, #12]
 8005698:	4608      	mov	r0, r1
 800569a:	4611      	mov	r1, r2
 800569c:	461a      	mov	r2, r3
 800569e:	4603      	mov	r3, r0
 80056a0:	817b      	strh	r3, [r7, #10]
 80056a2:	460b      	mov	r3, r1
 80056a4:	813b      	strh	r3, [r7, #8]
 80056a6:	4613      	mov	r3, r2
 80056a8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80056aa:	f7fe f927 	bl	80038fc <HAL_GetTick>
 80056ae:	6278      	str	r0, [r7, #36]	; 0x24
  __IO uint32_t count = 0U;
 80056b0:	2300      	movs	r3, #0
 80056b2:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056ba:	b2db      	uxtb	r3, r3
 80056bc:	2b20      	cmp	r3, #32
 80056be:	f040 8176 	bne.w	80059ae <HAL_I2C_Mem_Read_DMA+0x31e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80056c2:	4b95      	ldr	r3, [pc, #596]	; (8005918 <HAL_I2C_Mem_Read_DMA+0x288>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	08db      	lsrs	r3, r3, #3
 80056c8:	4a94      	ldr	r2, [pc, #592]	; (800591c <HAL_I2C_Mem_Read_DMA+0x28c>)
 80056ca:	fba2 2303 	umull	r2, r3, r2, r3
 80056ce:	0a1a      	lsrs	r2, r3, #8
 80056d0:	4613      	mov	r3, r2
 80056d2:	009b      	lsls	r3, r3, #2
 80056d4:	4413      	add	r3, r2
 80056d6:	009a      	lsls	r2, r3, #2
 80056d8:	4413      	add	r3, r2
 80056da:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 80056dc:	69fb      	ldr	r3, [r7, #28]
 80056de:	3b01      	subs	r3, #1
 80056e0:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 80056e2:	69fb      	ldr	r3, [r7, #28]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d116      	bne.n	8005716 <HAL_I2C_Mem_Read_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	2200      	movs	r2, #0
 80056ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	2220      	movs	r2, #32
 80056f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	2200      	movs	r2, #0
 80056fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005702:	f043 0220 	orr.w	r2, r3, #32
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	2200      	movs	r2, #0
 800570e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005712:	2301      	movs	r3, #1
 8005714:	e14c      	b.n	80059b0 <HAL_I2C_Mem_Read_DMA+0x320>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	699b      	ldr	r3, [r3, #24]
 800571c:	f003 0302 	and.w	r3, r3, #2
 8005720:	2b02      	cmp	r3, #2
 8005722:	d0db      	beq.n	80056dc <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800572a:	2b01      	cmp	r3, #1
 800572c:	d101      	bne.n	8005732 <HAL_I2C_Mem_Read_DMA+0xa2>
 800572e:	2302      	movs	r3, #2
 8005730:	e13e      	b.n	80059b0 <HAL_I2C_Mem_Read_DMA+0x320>
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2201      	movs	r2, #1
 8005736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f003 0301 	and.w	r3, r3, #1
 8005744:	2b01      	cmp	r3, #1
 8005746:	d007      	beq.n	8005758 <HAL_I2C_Mem_Read_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	681a      	ldr	r2, [r3, #0]
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f042 0201 	orr.w	r2, r2, #1
 8005756:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	681a      	ldr	r2, [r3, #0]
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005766:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	2222      	movs	r2, #34	; 0x22
 800576c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	2240      	movs	r2, #64	; 0x40
 8005774:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	2200      	movs	r2, #0
 800577c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005782:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005788:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800578e:	b29a      	uxth	r2, r3
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	4a62      	ldr	r2, [pc, #392]	; (8005920 <HAL_I2C_Mem_Read_DMA+0x290>)
 8005798:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800579a:	897a      	ldrh	r2, [r7, #10]
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 80057a0:	893a      	ldrh	r2, [r7, #8]
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 80057a6:	88fa      	ldrh	r2, [r7, #6]
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2200      	movs	r2, #0
 80057b0:	651a      	str	r2, [r3, #80]	; 0x50

    if (hi2c->XferSize > 0U)
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	f000 80cc 	beq.w	8005954 <HAL_I2C_Mem_Read_DMA+0x2c4>
    {
      if (hi2c->hdmarx != NULL)
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d02d      	beq.n	8005820 <HAL_I2C_Mem_Read_DMA+0x190>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057c8:	4a56      	ldr	r2, [pc, #344]	; (8005924 <HAL_I2C_Mem_Read_DMA+0x294>)
 80057ca:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057d0:	4a55      	ldr	r2, [pc, #340]	; (8005928 <HAL_I2C_Mem_Read_DMA+0x298>)
 80057d2:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057d8:	2200      	movs	r2, #0
 80057da:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057e0:	2200      	movs	r2, #0
 80057e2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057e8:	2200      	movs	r2, #0
 80057ea:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057f0:	2200      	movs	r2, #0
 80057f2:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	3310      	adds	r3, #16
 80057fe:	4619      	mov	r1, r3
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005804:	461a      	mov	r2, r3
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800580a:	f7fe ff21 	bl	8004650 <HAL_DMA_Start_IT>
 800580e:	4603      	mov	r3, r0
 8005810:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8005814:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005818:	2b00      	cmp	r3, #0
 800581a:	f040 8087 	bne.w	800592c <HAL_I2C_Mem_Read_DMA+0x29c>
 800581e:	e013      	b.n	8005848 <HAL_I2C_Mem_Read_DMA+0x1b8>
        hi2c->State     = HAL_I2C_STATE_READY;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	2220      	movs	r2, #32
 8005824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	2200      	movs	r2, #0
 800582c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005834:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	2200      	movs	r2, #0
 8005840:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8005844:	2301      	movs	r3, #1
 8005846:	e0b3      	b.n	80059b0 <HAL_I2C_Mem_Read_DMA+0x320>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8005848:	88f8      	ldrh	r0, [r7, #6]
 800584a:	893a      	ldrh	r2, [r7, #8]
 800584c:	8979      	ldrh	r1, [r7, #10]
 800584e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005850:	9301      	str	r3, [sp, #4]
 8005852:	2323      	movs	r3, #35	; 0x23
 8005854:	9300      	str	r3, [sp, #0]
 8005856:	4603      	mov	r3, r0
 8005858:	68f8      	ldr	r0, [r7, #12]
 800585a:	f000 f96b 	bl	8005b34 <I2C_RequestMemoryRead>
 800585e:	4603      	mov	r3, r0
 8005860:	2b00      	cmp	r3, #0
 8005862:	d023      	beq.n	80058ac <HAL_I2C_Mem_Read_DMA+0x21c>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005868:	4618      	mov	r0, r3
 800586a:	f7fe ffb9 	bl	80047e0 <HAL_DMA_Abort_IT>
 800586e:	4603      	mov	r3, r0
 8005870:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005878:	2200      	movs	r2, #0
 800587a:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	681a      	ldr	r2, [r3, #0]
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800588a:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	2200      	movs	r2, #0
 8005890:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount = 0U;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	2200      	movs	r2, #0
 8005896:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	681a      	ldr	r2, [r3, #0]
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f022 0201 	bic.w	r2, r2, #1
 80058a6:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 80058a8:	2301      	movs	r3, #1
 80058aa:	e081      	b.n	80059b0 <HAL_I2C_Mem_Read_DMA+0x320>
        }

        if (hi2c->XferSize == 1U)
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058b0:	2b01      	cmp	r3, #1
 80058b2:	d108      	bne.n	80058c6 <HAL_I2C_Mem_Read_DMA+0x236>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	681a      	ldr	r2, [r3, #0]
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058c2:	601a      	str	r2, [r3, #0]
 80058c4:	e007      	b.n	80058d6 <HAL_I2C_Mem_Read_DMA+0x246>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	685a      	ldr	r2, [r3, #4]
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80058d4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058d6:	2300      	movs	r3, #0
 80058d8:	61bb      	str	r3, [r7, #24]
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	695b      	ldr	r3, [r3, #20]
 80058e0:	61bb      	str	r3, [r7, #24]
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	699b      	ldr	r3, [r3, #24]
 80058e8:	61bb      	str	r3, [r7, #24]
 80058ea:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	2200      	movs	r2, #0
 80058f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	685a      	ldr	r2, [r3, #4]
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005902:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	685a      	ldr	r2, [r3, #4]
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005912:	605a      	str	r2, [r3, #4]
 8005914:	e049      	b.n	80059aa <HAL_I2C_Mem_Read_DMA+0x31a>
 8005916:	bf00      	nop
 8005918:	20000178 	.word	0x20000178
 800591c:	14f8b589 	.word	0x14f8b589
 8005920:	ffff0000 	.word	0xffff0000
 8005924:	08005d05 	.word	0x08005d05
 8005928:	08005eaf 	.word	0x08005eaf
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2220      	movs	r2, #32
 8005930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	2200      	movs	r2, #0
 8005938:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005940:	f043 0210 	orr.w	r2, r3, #16
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2200      	movs	r2, #0
 800594c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005950:	2301      	movs	r3, #1
 8005952:	e02d      	b.n	80059b0 <HAL_I2C_Mem_Read_DMA+0x320>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8005954:	88f8      	ldrh	r0, [r7, #6]
 8005956:	893a      	ldrh	r2, [r7, #8]
 8005958:	8979      	ldrh	r1, [r7, #10]
 800595a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800595c:	9301      	str	r3, [sp, #4]
 800595e:	2323      	movs	r3, #35	; 0x23
 8005960:	9300      	str	r3, [sp, #0]
 8005962:	4603      	mov	r3, r0
 8005964:	68f8      	ldr	r0, [r7, #12]
 8005966:	f000 f8e5 	bl	8005b34 <I2C_RequestMemoryRead>
 800596a:	4603      	mov	r3, r0
 800596c:	2b00      	cmp	r3, #0
 800596e:	d001      	beq.n	8005974 <HAL_I2C_Mem_Read_DMA+0x2e4>
      {
        return HAL_ERROR;
 8005970:	2301      	movs	r3, #1
 8005972:	e01d      	b.n	80059b0 <HAL_I2C_Mem_Read_DMA+0x320>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005974:	2300      	movs	r3, #0
 8005976:	617b      	str	r3, [r7, #20]
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	695b      	ldr	r3, [r3, #20]
 800597e:	617b      	str	r3, [r7, #20]
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	699b      	ldr	r3, [r3, #24]
 8005986:	617b      	str	r3, [r7, #20]
 8005988:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	681a      	ldr	r2, [r3, #0]
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005998:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	2220      	movs	r2, #32
 800599e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	2200      	movs	r2, #0
 80059a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }

    return HAL_OK;
 80059aa:	2300      	movs	r3, #0
 80059ac:	e000      	b.n	80059b0 <HAL_I2C_Mem_Read_DMA+0x320>
  }
  else
  {
    return HAL_BUSY;
 80059ae:	2302      	movs	r3, #2
  }
}
 80059b0:	4618      	mov	r0, r3
 80059b2:	3728      	adds	r7, #40	; 0x28
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bd80      	pop	{r7, pc}

080059b8 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80059b8:	b480      	push	{r7}
 80059ba:	b083      	sub	sp, #12
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80059c0:	bf00      	nop
 80059c2:	370c      	adds	r7, #12
 80059c4:	46bd      	mov	sp, r7
 80059c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ca:	4770      	bx	lr

080059cc <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80059cc:	b480      	push	{r7}
 80059ce:	b083      	sub	sp, #12
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80059d4:	bf00      	nop
 80059d6:	370c      	adds	r7, #12
 80059d8:	46bd      	mov	sp, r7
 80059da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059de:	4770      	bx	lr

080059e0 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80059e0:	b480      	push	{r7}
 80059e2:	b083      	sub	sp, #12
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80059e8:	bf00      	nop
 80059ea:	370c      	adds	r7, #12
 80059ec:	46bd      	mov	sp, r7
 80059ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f2:	4770      	bx	lr

080059f4 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80059f4:	b480      	push	{r7}
 80059f6:	b083      	sub	sp, #12
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80059fc:	bf00      	nop
 80059fe:	370c      	adds	r7, #12
 8005a00:	46bd      	mov	sp, r7
 8005a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a06:	4770      	bx	lr

08005a08 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b088      	sub	sp, #32
 8005a0c:	af02      	add	r7, sp, #8
 8005a0e:	60f8      	str	r0, [r7, #12]
 8005a10:	4608      	mov	r0, r1
 8005a12:	4611      	mov	r1, r2
 8005a14:	461a      	mov	r2, r3
 8005a16:	4603      	mov	r3, r0
 8005a18:	817b      	strh	r3, [r7, #10]
 8005a1a:	460b      	mov	r3, r1
 8005a1c:	813b      	strh	r3, [r7, #8]
 8005a1e:	4613      	mov	r3, r2
 8005a20:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	681a      	ldr	r2, [r3, #0]
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a30:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a34:	9300      	str	r3, [sp, #0]
 8005a36:	6a3b      	ldr	r3, [r7, #32]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005a3e:	68f8      	ldr	r0, [r7, #12]
 8005a40:	f000 fa72 	bl	8005f28 <I2C_WaitOnFlagUntilTimeout>
 8005a44:	4603      	mov	r3, r0
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d00d      	beq.n	8005a66 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a58:	d103      	bne.n	8005a62 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a60:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005a62:	2303      	movs	r3, #3
 8005a64:	e05f      	b.n	8005b26 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005a66:	897b      	ldrh	r3, [r7, #10]
 8005a68:	b2db      	uxtb	r3, r3
 8005a6a:	461a      	mov	r2, r3
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005a74:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a78:	6a3a      	ldr	r2, [r7, #32]
 8005a7a:	492d      	ldr	r1, [pc, #180]	; (8005b30 <I2C_RequestMemoryWrite+0x128>)
 8005a7c:	68f8      	ldr	r0, [r7, #12]
 8005a7e:	f000 faaa 	bl	8005fd6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005a82:	4603      	mov	r3, r0
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d001      	beq.n	8005a8c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005a88:	2301      	movs	r3, #1
 8005a8a:	e04c      	b.n	8005b26 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	617b      	str	r3, [r7, #20]
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	695b      	ldr	r3, [r3, #20]
 8005a96:	617b      	str	r3, [r7, #20]
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	699b      	ldr	r3, [r3, #24]
 8005a9e:	617b      	str	r3, [r7, #20]
 8005aa0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005aa2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005aa4:	6a39      	ldr	r1, [r7, #32]
 8005aa6:	68f8      	ldr	r0, [r7, #12]
 8005aa8:	f000 fb14 	bl	80060d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005aac:	4603      	mov	r3, r0
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d00d      	beq.n	8005ace <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ab6:	2b04      	cmp	r3, #4
 8005ab8:	d107      	bne.n	8005aca <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	681a      	ldr	r2, [r3, #0]
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ac8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005aca:	2301      	movs	r3, #1
 8005acc:	e02b      	b.n	8005b26 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005ace:	88fb      	ldrh	r3, [r7, #6]
 8005ad0:	2b01      	cmp	r3, #1
 8005ad2:	d105      	bne.n	8005ae0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005ad4:	893b      	ldrh	r3, [r7, #8]
 8005ad6:	b2da      	uxtb	r2, r3
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	611a      	str	r2, [r3, #16]
 8005ade:	e021      	b.n	8005b24 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005ae0:	893b      	ldrh	r3, [r7, #8]
 8005ae2:	0a1b      	lsrs	r3, r3, #8
 8005ae4:	b29b      	uxth	r3, r3
 8005ae6:	b2da      	uxtb	r2, r3
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005aee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005af0:	6a39      	ldr	r1, [r7, #32]
 8005af2:	68f8      	ldr	r0, [r7, #12]
 8005af4:	f000 faee 	bl	80060d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005af8:	4603      	mov	r3, r0
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d00d      	beq.n	8005b1a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b02:	2b04      	cmp	r3, #4
 8005b04:	d107      	bne.n	8005b16 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	681a      	ldr	r2, [r3, #0]
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b14:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005b16:	2301      	movs	r3, #1
 8005b18:	e005      	b.n	8005b26 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005b1a:	893b      	ldrh	r3, [r7, #8]
 8005b1c:	b2da      	uxtb	r2, r3
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005b24:	2300      	movs	r3, #0
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	3718      	adds	r7, #24
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bd80      	pop	{r7, pc}
 8005b2e:	bf00      	nop
 8005b30:	00010002 	.word	0x00010002

08005b34 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b088      	sub	sp, #32
 8005b38:	af02      	add	r7, sp, #8
 8005b3a:	60f8      	str	r0, [r7, #12]
 8005b3c:	4608      	mov	r0, r1
 8005b3e:	4611      	mov	r1, r2
 8005b40:	461a      	mov	r2, r3
 8005b42:	4603      	mov	r3, r0
 8005b44:	817b      	strh	r3, [r7, #10]
 8005b46:	460b      	mov	r3, r1
 8005b48:	813b      	strh	r3, [r7, #8]
 8005b4a:	4613      	mov	r3, r2
 8005b4c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	681a      	ldr	r2, [r3, #0]
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005b5c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	681a      	ldr	r2, [r3, #0]
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b6c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b70:	9300      	str	r3, [sp, #0]
 8005b72:	6a3b      	ldr	r3, [r7, #32]
 8005b74:	2200      	movs	r2, #0
 8005b76:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005b7a:	68f8      	ldr	r0, [r7, #12]
 8005b7c:	f000 f9d4 	bl	8005f28 <I2C_WaitOnFlagUntilTimeout>
 8005b80:	4603      	mov	r3, r0
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d00d      	beq.n	8005ba2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b94:	d103      	bne.n	8005b9e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b9c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005b9e:	2303      	movs	r3, #3
 8005ba0:	e0aa      	b.n	8005cf8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005ba2:	897b      	ldrh	r3, [r7, #10]
 8005ba4:	b2db      	uxtb	r3, r3
 8005ba6:	461a      	mov	r2, r3
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005bb0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb4:	6a3a      	ldr	r2, [r7, #32]
 8005bb6:	4952      	ldr	r1, [pc, #328]	; (8005d00 <I2C_RequestMemoryRead+0x1cc>)
 8005bb8:	68f8      	ldr	r0, [r7, #12]
 8005bba:	f000 fa0c 	bl	8005fd6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d001      	beq.n	8005bc8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	e097      	b.n	8005cf8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005bc8:	2300      	movs	r3, #0
 8005bca:	617b      	str	r3, [r7, #20]
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	695b      	ldr	r3, [r3, #20]
 8005bd2:	617b      	str	r3, [r7, #20]
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	699b      	ldr	r3, [r3, #24]
 8005bda:	617b      	str	r3, [r7, #20]
 8005bdc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005bde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005be0:	6a39      	ldr	r1, [r7, #32]
 8005be2:	68f8      	ldr	r0, [r7, #12]
 8005be4:	f000 fa76 	bl	80060d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005be8:	4603      	mov	r3, r0
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d00d      	beq.n	8005c0a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bf2:	2b04      	cmp	r3, #4
 8005bf4:	d107      	bne.n	8005c06 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	681a      	ldr	r2, [r3, #0]
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c04:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005c06:	2301      	movs	r3, #1
 8005c08:	e076      	b.n	8005cf8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005c0a:	88fb      	ldrh	r3, [r7, #6]
 8005c0c:	2b01      	cmp	r3, #1
 8005c0e:	d105      	bne.n	8005c1c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005c10:	893b      	ldrh	r3, [r7, #8]
 8005c12:	b2da      	uxtb	r2, r3
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	611a      	str	r2, [r3, #16]
 8005c1a:	e021      	b.n	8005c60 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005c1c:	893b      	ldrh	r3, [r7, #8]
 8005c1e:	0a1b      	lsrs	r3, r3, #8
 8005c20:	b29b      	uxth	r3, r3
 8005c22:	b2da      	uxtb	r2, r3
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c2c:	6a39      	ldr	r1, [r7, #32]
 8005c2e:	68f8      	ldr	r0, [r7, #12]
 8005c30:	f000 fa50 	bl	80060d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005c34:	4603      	mov	r3, r0
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d00d      	beq.n	8005c56 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c3e:	2b04      	cmp	r3, #4
 8005c40:	d107      	bne.n	8005c52 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	681a      	ldr	r2, [r3, #0]
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c50:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005c52:	2301      	movs	r3, #1
 8005c54:	e050      	b.n	8005cf8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005c56:	893b      	ldrh	r3, [r7, #8]
 8005c58:	b2da      	uxtb	r2, r3
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c62:	6a39      	ldr	r1, [r7, #32]
 8005c64:	68f8      	ldr	r0, [r7, #12]
 8005c66:	f000 fa35 	bl	80060d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d00d      	beq.n	8005c8c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c74:	2b04      	cmp	r3, #4
 8005c76:	d107      	bne.n	8005c88 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	681a      	ldr	r2, [r3, #0]
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c86:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005c88:	2301      	movs	r3, #1
 8005c8a:	e035      	b.n	8005cf8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	681a      	ldr	r2, [r3, #0]
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c9a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c9e:	9300      	str	r3, [sp, #0]
 8005ca0:	6a3b      	ldr	r3, [r7, #32]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005ca8:	68f8      	ldr	r0, [r7, #12]
 8005caa:	f000 f93d 	bl	8005f28 <I2C_WaitOnFlagUntilTimeout>
 8005cae:	4603      	mov	r3, r0
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d00d      	beq.n	8005cd0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005cc2:	d103      	bne.n	8005ccc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005cca:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005ccc:	2303      	movs	r3, #3
 8005cce:	e013      	b.n	8005cf8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005cd0:	897b      	ldrh	r3, [r7, #10]
 8005cd2:	b2db      	uxtb	r3, r3
 8005cd4:	f043 0301 	orr.w	r3, r3, #1
 8005cd8:	b2da      	uxtb	r2, r3
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce2:	6a3a      	ldr	r2, [r7, #32]
 8005ce4:	4906      	ldr	r1, [pc, #24]	; (8005d00 <I2C_RequestMemoryRead+0x1cc>)
 8005ce6:	68f8      	ldr	r0, [r7, #12]
 8005ce8:	f000 f975 	bl	8005fd6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005cec:	4603      	mov	r3, r0
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d001      	beq.n	8005cf6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	e000      	b.n	8005cf8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005cf6:	2300      	movs	r3, #0
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	3718      	adds	r7, #24
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bd80      	pop	{r7, pc}
 8005d00:	00010002 	.word	0x00010002

08005d04 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b086      	sub	sp, #24
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d10:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d18:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d20:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005d22:	697b      	ldr	r3, [r7, #20]
 8005d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d26:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	685a      	ldr	r2, [r3, #4]
 8005d2e:	697b      	ldr	r3, [r7, #20]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005d36:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d003      	beq.n	8005d48 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005d40:	697b      	ldr	r3, [r7, #20]
 8005d42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d44:	2200      	movs	r2, #0
 8005d46:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005d48:	697b      	ldr	r3, [r7, #20]
 8005d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d003      	beq.n	8005d58 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005d50:	697b      	ldr	r3, [r7, #20]
 8005d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d54:	2200      	movs	r2, #0
 8005d56:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8005d58:	7cfb      	ldrb	r3, [r7, #19]
 8005d5a:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8005d5e:	2b21      	cmp	r3, #33	; 0x21
 8005d60:	d007      	beq.n	8005d72 <I2C_DMAXferCplt+0x6e>
 8005d62:	7cfb      	ldrb	r3, [r7, #19]
 8005d64:	f003 0322 	and.w	r3, r3, #34	; 0x22
 8005d68:	2b22      	cmp	r3, #34	; 0x22
 8005d6a:	d131      	bne.n	8005dd0 <I2C_DMAXferCplt+0xcc>
 8005d6c:	7cbb      	ldrb	r3, [r7, #18]
 8005d6e:	2b20      	cmp	r3, #32
 8005d70:	d12e      	bne.n	8005dd0 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	685a      	ldr	r2, [r3, #4]
 8005d78:	697b      	ldr	r3, [r7, #20]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005d80:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8005d82:	697b      	ldr	r3, [r7, #20]
 8005d84:	2200      	movs	r2, #0
 8005d86:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8005d88:	7cfb      	ldrb	r3, [r7, #19]
 8005d8a:	2b29      	cmp	r3, #41	; 0x29
 8005d8c:	d10a      	bne.n	8005da4 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005d8e:	697b      	ldr	r3, [r7, #20]
 8005d90:	2221      	movs	r2, #33	; 0x21
 8005d92:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	2228      	movs	r2, #40	; 0x28
 8005d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005d9c:	6978      	ldr	r0, [r7, #20]
 8005d9e:	f7ff fe15 	bl	80059cc <HAL_I2C_SlaveTxCpltCallback>
 8005da2:	e00c      	b.n	8005dbe <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005da4:	7cfb      	ldrb	r3, [r7, #19]
 8005da6:	2b2a      	cmp	r3, #42	; 0x2a
 8005da8:	d109      	bne.n	8005dbe <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	2222      	movs	r2, #34	; 0x22
 8005dae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	2228      	movs	r2, #40	; 0x28
 8005db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005db8:	6978      	ldr	r0, [r7, #20]
 8005dba:	f7ff fe11 	bl	80059e0 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	685a      	ldr	r2, [r3, #4]
 8005dc4:	697b      	ldr	r3, [r7, #20]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8005dcc:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8005dce:	e06a      	b.n	8005ea6 <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005dd6:	b2db      	uxtb	r3, r3
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d064      	beq.n	8005ea6 <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 8005ddc:	697b      	ldr	r3, [r7, #20]
 8005dde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005de0:	b29b      	uxth	r3, r3
 8005de2:	2b01      	cmp	r3, #1
 8005de4:	d107      	bne.n	8005df6 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005de6:	697b      	ldr	r3, [r7, #20]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	681a      	ldr	r2, [r3, #0]
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005df4:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	685a      	ldr	r2, [r3, #4]
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005e04:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005e0c:	d009      	beq.n	8005e22 <I2C_DMAXferCplt+0x11e>
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	2b08      	cmp	r3, #8
 8005e12:	d006      	beq.n	8005e22 <I2C_DMAXferCplt+0x11e>
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005e1a:	d002      	beq.n	8005e22 <I2C_DMAXferCplt+0x11e>
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	2b20      	cmp	r3, #32
 8005e20:	d107      	bne.n	8005e32 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e22:	697b      	ldr	r3, [r7, #20]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	681a      	ldr	r2, [r3, #0]
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e30:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	685a      	ldr	r2, [r3, #4]
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005e40:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005e42:	697b      	ldr	r3, [r7, #20]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	685a      	ldr	r2, [r3, #4]
 8005e48:	697b      	ldr	r3, [r7, #20]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005e50:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8005e52:	697b      	ldr	r3, [r7, #20]
 8005e54:	2200      	movs	r2, #0
 8005e56:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d003      	beq.n	8005e68 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8005e60:	6978      	ldr	r0, [r7, #20]
 8005e62:	f7ff fdc7 	bl	80059f4 <HAL_I2C_ErrorCallback>
}
 8005e66:	e01e      	b.n	8005ea6 <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 8005e68:	697b      	ldr	r3, [r7, #20]
 8005e6a:	2220      	movs	r2, #32
 8005e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005e70:	697b      	ldr	r3, [r7, #20]
 8005e72:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e76:	b2db      	uxtb	r3, r3
 8005e78:	2b40      	cmp	r3, #64	; 0x40
 8005e7a:	d10a      	bne.n	8005e92 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e7c:	697b      	ldr	r3, [r7, #20]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8005e84:	697b      	ldr	r3, [r7, #20]
 8005e86:	2200      	movs	r2, #0
 8005e88:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8005e8a:	6978      	ldr	r0, [r7, #20]
 8005e8c:	f7fc fe6c 	bl	8002b68 <HAL_I2C_MemRxCpltCallback>
}
 8005e90:	e009      	b.n	8005ea6 <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	2200      	movs	r2, #0
 8005e96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	2212      	movs	r2, #18
 8005e9e:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8005ea0:	6978      	ldr	r0, [r7, #20]
 8005ea2:	f7ff fd89 	bl	80059b8 <HAL_I2C_MasterRxCpltCallback>
}
 8005ea6:	bf00      	nop
 8005ea8:	3718      	adds	r7, #24
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}

08005eae <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8005eae:	b580      	push	{r7, lr}
 8005eb0:	b084      	sub	sp, #16
 8005eb2:	af00      	add	r7, sp, #0
 8005eb4:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eba:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d003      	beq.n	8005ecc <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ec8:	2200      	movs	r2, #0
 8005eca:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d003      	beq.n	8005edc <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ed8:	2200      	movs	r2, #0
 8005eda:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8005edc:	6878      	ldr	r0, [r7, #4]
 8005ede:	f7fe fe2b 	bl	8004b38 <HAL_DMA_GetError>
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	2b02      	cmp	r3, #2
 8005ee6:	d01b      	beq.n	8005f20 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	681a      	ldr	r2, [r3, #0]
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ef6:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	2200      	movs	r2, #0
 8005efc:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	2220      	movs	r2, #32
 8005f02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f12:	f043 0210 	orr.w	r2, r3, #16
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005f1a:	68f8      	ldr	r0, [r7, #12]
 8005f1c:	f7ff fd6a 	bl	80059f4 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005f20:	bf00      	nop
 8005f22:	3710      	adds	r7, #16
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bd80      	pop	{r7, pc}

08005f28 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b084      	sub	sp, #16
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	60f8      	str	r0, [r7, #12]
 8005f30:	60b9      	str	r1, [r7, #8]
 8005f32:	603b      	str	r3, [r7, #0]
 8005f34:	4613      	mov	r3, r2
 8005f36:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005f38:	e025      	b.n	8005f86 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f40:	d021      	beq.n	8005f86 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f42:	f7fd fcdb 	bl	80038fc <HAL_GetTick>
 8005f46:	4602      	mov	r2, r0
 8005f48:	69bb      	ldr	r3, [r7, #24]
 8005f4a:	1ad3      	subs	r3, r2, r3
 8005f4c:	683a      	ldr	r2, [r7, #0]
 8005f4e:	429a      	cmp	r2, r3
 8005f50:	d302      	bcc.n	8005f58 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d116      	bne.n	8005f86 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	2220      	movs	r2, #32
 8005f62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	2200      	movs	r2, #0
 8005f6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f72:	f043 0220 	orr.w	r2, r3, #32
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005f82:	2301      	movs	r3, #1
 8005f84:	e023      	b.n	8005fce <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	0c1b      	lsrs	r3, r3, #16
 8005f8a:	b2db      	uxtb	r3, r3
 8005f8c:	2b01      	cmp	r3, #1
 8005f8e:	d10d      	bne.n	8005fac <I2C_WaitOnFlagUntilTimeout+0x84>
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	695b      	ldr	r3, [r3, #20]
 8005f96:	43da      	mvns	r2, r3
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	4013      	ands	r3, r2
 8005f9c:	b29b      	uxth	r3, r3
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	bf0c      	ite	eq
 8005fa2:	2301      	moveq	r3, #1
 8005fa4:	2300      	movne	r3, #0
 8005fa6:	b2db      	uxtb	r3, r3
 8005fa8:	461a      	mov	r2, r3
 8005faa:	e00c      	b.n	8005fc6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	699b      	ldr	r3, [r3, #24]
 8005fb2:	43da      	mvns	r2, r3
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	4013      	ands	r3, r2
 8005fb8:	b29b      	uxth	r3, r3
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	bf0c      	ite	eq
 8005fbe:	2301      	moveq	r3, #1
 8005fc0:	2300      	movne	r3, #0
 8005fc2:	b2db      	uxtb	r3, r3
 8005fc4:	461a      	mov	r2, r3
 8005fc6:	79fb      	ldrb	r3, [r7, #7]
 8005fc8:	429a      	cmp	r2, r3
 8005fca:	d0b6      	beq.n	8005f3a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005fcc:	2300      	movs	r3, #0
}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	3710      	adds	r7, #16
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}

08005fd6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005fd6:	b580      	push	{r7, lr}
 8005fd8:	b084      	sub	sp, #16
 8005fda:	af00      	add	r7, sp, #0
 8005fdc:	60f8      	str	r0, [r7, #12]
 8005fde:	60b9      	str	r1, [r7, #8]
 8005fe0:	607a      	str	r2, [r7, #4]
 8005fe2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005fe4:	e051      	b.n	800608a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	695b      	ldr	r3, [r3, #20]
 8005fec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ff0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ff4:	d123      	bne.n	800603e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	681a      	ldr	r2, [r3, #0]
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006004:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800600e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	2200      	movs	r2, #0
 8006014:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	2220      	movs	r2, #32
 800601a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	2200      	movs	r2, #0
 8006022:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800602a:	f043 0204 	orr.w	r2, r3, #4
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	2200      	movs	r2, #0
 8006036:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800603a:	2301      	movs	r3, #1
 800603c:	e046      	b.n	80060cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006044:	d021      	beq.n	800608a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006046:	f7fd fc59 	bl	80038fc <HAL_GetTick>
 800604a:	4602      	mov	r2, r0
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	1ad3      	subs	r3, r2, r3
 8006050:	687a      	ldr	r2, [r7, #4]
 8006052:	429a      	cmp	r2, r3
 8006054:	d302      	bcc.n	800605c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d116      	bne.n	800608a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	2200      	movs	r2, #0
 8006060:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	2220      	movs	r2, #32
 8006066:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	2200      	movs	r2, #0
 800606e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006076:	f043 0220 	orr.w	r2, r3, #32
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	2200      	movs	r2, #0
 8006082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006086:	2301      	movs	r3, #1
 8006088:	e020      	b.n	80060cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	0c1b      	lsrs	r3, r3, #16
 800608e:	b2db      	uxtb	r3, r3
 8006090:	2b01      	cmp	r3, #1
 8006092:	d10c      	bne.n	80060ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	695b      	ldr	r3, [r3, #20]
 800609a:	43da      	mvns	r2, r3
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	4013      	ands	r3, r2
 80060a0:	b29b      	uxth	r3, r3
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	bf14      	ite	ne
 80060a6:	2301      	movne	r3, #1
 80060a8:	2300      	moveq	r3, #0
 80060aa:	b2db      	uxtb	r3, r3
 80060ac:	e00b      	b.n	80060c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	699b      	ldr	r3, [r3, #24]
 80060b4:	43da      	mvns	r2, r3
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	4013      	ands	r3, r2
 80060ba:	b29b      	uxth	r3, r3
 80060bc:	2b00      	cmp	r3, #0
 80060be:	bf14      	ite	ne
 80060c0:	2301      	movne	r3, #1
 80060c2:	2300      	moveq	r3, #0
 80060c4:	b2db      	uxtb	r3, r3
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d18d      	bne.n	8005fe6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80060ca:	2300      	movs	r3, #0
}
 80060cc:	4618      	mov	r0, r3
 80060ce:	3710      	adds	r7, #16
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bd80      	pop	{r7, pc}

080060d4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b084      	sub	sp, #16
 80060d8:	af00      	add	r7, sp, #0
 80060da:	60f8      	str	r0, [r7, #12]
 80060dc:	60b9      	str	r1, [r7, #8]
 80060de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80060e0:	e02d      	b.n	800613e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80060e2:	68f8      	ldr	r0, [r7, #12]
 80060e4:	f000 f878 	bl	80061d8 <I2C_IsAcknowledgeFailed>
 80060e8:	4603      	mov	r3, r0
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d001      	beq.n	80060f2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80060ee:	2301      	movs	r3, #1
 80060f0:	e02d      	b.n	800614e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060f8:	d021      	beq.n	800613e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060fa:	f7fd fbff 	bl	80038fc <HAL_GetTick>
 80060fe:	4602      	mov	r2, r0
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	1ad3      	subs	r3, r2, r3
 8006104:	68ba      	ldr	r2, [r7, #8]
 8006106:	429a      	cmp	r2, r3
 8006108:	d302      	bcc.n	8006110 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800610a:	68bb      	ldr	r3, [r7, #8]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d116      	bne.n	800613e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	2200      	movs	r2, #0
 8006114:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	2220      	movs	r2, #32
 800611a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	2200      	movs	r2, #0
 8006122:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800612a:	f043 0220 	orr.w	r2, r3, #32
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	2200      	movs	r2, #0
 8006136:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800613a:	2301      	movs	r3, #1
 800613c:	e007      	b.n	800614e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	695b      	ldr	r3, [r3, #20]
 8006144:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006148:	2b80      	cmp	r3, #128	; 0x80
 800614a:	d1ca      	bne.n	80060e2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800614c:	2300      	movs	r3, #0
}
 800614e:	4618      	mov	r0, r3
 8006150:	3710      	adds	r7, #16
 8006152:	46bd      	mov	sp, r7
 8006154:	bd80      	pop	{r7, pc}

08006156 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006156:	b580      	push	{r7, lr}
 8006158:	b084      	sub	sp, #16
 800615a:	af00      	add	r7, sp, #0
 800615c:	60f8      	str	r0, [r7, #12]
 800615e:	60b9      	str	r1, [r7, #8]
 8006160:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006162:	e02d      	b.n	80061c0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006164:	68f8      	ldr	r0, [r7, #12]
 8006166:	f000 f837 	bl	80061d8 <I2C_IsAcknowledgeFailed>
 800616a:	4603      	mov	r3, r0
 800616c:	2b00      	cmp	r3, #0
 800616e:	d001      	beq.n	8006174 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006170:	2301      	movs	r3, #1
 8006172:	e02d      	b.n	80061d0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	f1b3 3fff 	cmp.w	r3, #4294967295
 800617a:	d021      	beq.n	80061c0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800617c:	f7fd fbbe 	bl	80038fc <HAL_GetTick>
 8006180:	4602      	mov	r2, r0
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	1ad3      	subs	r3, r2, r3
 8006186:	68ba      	ldr	r2, [r7, #8]
 8006188:	429a      	cmp	r2, r3
 800618a:	d302      	bcc.n	8006192 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d116      	bne.n	80061c0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	2200      	movs	r2, #0
 8006196:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	2220      	movs	r2, #32
 800619c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	2200      	movs	r2, #0
 80061a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ac:	f043 0220 	orr.w	r2, r3, #32
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	2200      	movs	r2, #0
 80061b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80061bc:	2301      	movs	r3, #1
 80061be:	e007      	b.n	80061d0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	695b      	ldr	r3, [r3, #20]
 80061c6:	f003 0304 	and.w	r3, r3, #4
 80061ca:	2b04      	cmp	r3, #4
 80061cc:	d1ca      	bne.n	8006164 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80061ce:	2300      	movs	r3, #0
}
 80061d0:	4618      	mov	r0, r3
 80061d2:	3710      	adds	r7, #16
 80061d4:	46bd      	mov	sp, r7
 80061d6:	bd80      	pop	{r7, pc}

080061d8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80061d8:	b480      	push	{r7}
 80061da:	b083      	sub	sp, #12
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	695b      	ldr	r3, [r3, #20]
 80061e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061ee:	d11b      	bne.n	8006228 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80061f8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2200      	movs	r2, #0
 80061fe:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2220      	movs	r2, #32
 8006204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2200      	movs	r2, #0
 800620c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006214:	f043 0204 	orr.w	r2, r3, #4
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2200      	movs	r2, #0
 8006220:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006224:	2301      	movs	r3, #1
 8006226:	e000      	b.n	800622a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006228:	2300      	movs	r3, #0
}
 800622a:	4618      	mov	r0, r3
 800622c:	370c      	adds	r7, #12
 800622e:	46bd      	mov	sp, r7
 8006230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006234:	4770      	bx	lr

08006236 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006236:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006238:	b08f      	sub	sp, #60	; 0x3c
 800623a:	af0a      	add	r7, sp, #40	; 0x28
 800623c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d101      	bne.n	8006248 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006244:	2301      	movs	r3, #1
 8006246:	e10f      	b.n	8006468 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8006254:	b2db      	uxtb	r3, r3
 8006256:	2b00      	cmp	r3, #0
 8006258:	d106      	bne.n	8006268 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2200      	movs	r2, #0
 800625e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f007 fa44 	bl	800d6f0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2203      	movs	r2, #3
 800626c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006274:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006278:	2b00      	cmp	r3, #0
 800627a:	d102      	bne.n	8006282 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2200      	movs	r2, #0
 8006280:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	4618      	mov	r0, r3
 8006288:	f003 ff0b 	bl	800a0a2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	603b      	str	r3, [r7, #0]
 8006292:	687e      	ldr	r6, [r7, #4]
 8006294:	466d      	mov	r5, sp
 8006296:	f106 0410 	add.w	r4, r6, #16
 800629a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800629c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800629e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80062a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80062a2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80062a6:	e885 0003 	stmia.w	r5, {r0, r1}
 80062aa:	1d33      	adds	r3, r6, #4
 80062ac:	cb0e      	ldmia	r3, {r1, r2, r3}
 80062ae:	6838      	ldr	r0, [r7, #0]
 80062b0:	f003 fde2 	bl	8009e78 <USB_CoreInit>
 80062b4:	4603      	mov	r3, r0
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d005      	beq.n	80062c6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2202      	movs	r2, #2
 80062be:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80062c2:	2301      	movs	r3, #1
 80062c4:	e0d0      	b.n	8006468 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	2100      	movs	r1, #0
 80062cc:	4618      	mov	r0, r3
 80062ce:	f003 fef9 	bl	800a0c4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80062d2:	2300      	movs	r3, #0
 80062d4:	73fb      	strb	r3, [r7, #15]
 80062d6:	e04a      	b.n	800636e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80062d8:	7bfa      	ldrb	r2, [r7, #15]
 80062da:	6879      	ldr	r1, [r7, #4]
 80062dc:	4613      	mov	r3, r2
 80062de:	00db      	lsls	r3, r3, #3
 80062e0:	4413      	add	r3, r2
 80062e2:	009b      	lsls	r3, r3, #2
 80062e4:	440b      	add	r3, r1
 80062e6:	333d      	adds	r3, #61	; 0x3d
 80062e8:	2201      	movs	r2, #1
 80062ea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80062ec:	7bfa      	ldrb	r2, [r7, #15]
 80062ee:	6879      	ldr	r1, [r7, #4]
 80062f0:	4613      	mov	r3, r2
 80062f2:	00db      	lsls	r3, r3, #3
 80062f4:	4413      	add	r3, r2
 80062f6:	009b      	lsls	r3, r3, #2
 80062f8:	440b      	add	r3, r1
 80062fa:	333c      	adds	r3, #60	; 0x3c
 80062fc:	7bfa      	ldrb	r2, [r7, #15]
 80062fe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006300:	7bfa      	ldrb	r2, [r7, #15]
 8006302:	7bfb      	ldrb	r3, [r7, #15]
 8006304:	b298      	uxth	r0, r3
 8006306:	6879      	ldr	r1, [r7, #4]
 8006308:	4613      	mov	r3, r2
 800630a:	00db      	lsls	r3, r3, #3
 800630c:	4413      	add	r3, r2
 800630e:	009b      	lsls	r3, r3, #2
 8006310:	440b      	add	r3, r1
 8006312:	3344      	adds	r3, #68	; 0x44
 8006314:	4602      	mov	r2, r0
 8006316:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006318:	7bfa      	ldrb	r2, [r7, #15]
 800631a:	6879      	ldr	r1, [r7, #4]
 800631c:	4613      	mov	r3, r2
 800631e:	00db      	lsls	r3, r3, #3
 8006320:	4413      	add	r3, r2
 8006322:	009b      	lsls	r3, r3, #2
 8006324:	440b      	add	r3, r1
 8006326:	3340      	adds	r3, #64	; 0x40
 8006328:	2200      	movs	r2, #0
 800632a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800632c:	7bfa      	ldrb	r2, [r7, #15]
 800632e:	6879      	ldr	r1, [r7, #4]
 8006330:	4613      	mov	r3, r2
 8006332:	00db      	lsls	r3, r3, #3
 8006334:	4413      	add	r3, r2
 8006336:	009b      	lsls	r3, r3, #2
 8006338:	440b      	add	r3, r1
 800633a:	3348      	adds	r3, #72	; 0x48
 800633c:	2200      	movs	r2, #0
 800633e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006340:	7bfa      	ldrb	r2, [r7, #15]
 8006342:	6879      	ldr	r1, [r7, #4]
 8006344:	4613      	mov	r3, r2
 8006346:	00db      	lsls	r3, r3, #3
 8006348:	4413      	add	r3, r2
 800634a:	009b      	lsls	r3, r3, #2
 800634c:	440b      	add	r3, r1
 800634e:	334c      	adds	r3, #76	; 0x4c
 8006350:	2200      	movs	r2, #0
 8006352:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006354:	7bfa      	ldrb	r2, [r7, #15]
 8006356:	6879      	ldr	r1, [r7, #4]
 8006358:	4613      	mov	r3, r2
 800635a:	00db      	lsls	r3, r3, #3
 800635c:	4413      	add	r3, r2
 800635e:	009b      	lsls	r3, r3, #2
 8006360:	440b      	add	r3, r1
 8006362:	3354      	adds	r3, #84	; 0x54
 8006364:	2200      	movs	r2, #0
 8006366:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006368:	7bfb      	ldrb	r3, [r7, #15]
 800636a:	3301      	adds	r3, #1
 800636c:	73fb      	strb	r3, [r7, #15]
 800636e:	7bfa      	ldrb	r2, [r7, #15]
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	685b      	ldr	r3, [r3, #4]
 8006374:	429a      	cmp	r2, r3
 8006376:	d3af      	bcc.n	80062d8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006378:	2300      	movs	r3, #0
 800637a:	73fb      	strb	r3, [r7, #15]
 800637c:	e044      	b.n	8006408 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800637e:	7bfa      	ldrb	r2, [r7, #15]
 8006380:	6879      	ldr	r1, [r7, #4]
 8006382:	4613      	mov	r3, r2
 8006384:	00db      	lsls	r3, r3, #3
 8006386:	4413      	add	r3, r2
 8006388:	009b      	lsls	r3, r3, #2
 800638a:	440b      	add	r3, r1
 800638c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8006390:	2200      	movs	r2, #0
 8006392:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006394:	7bfa      	ldrb	r2, [r7, #15]
 8006396:	6879      	ldr	r1, [r7, #4]
 8006398:	4613      	mov	r3, r2
 800639a:	00db      	lsls	r3, r3, #3
 800639c:	4413      	add	r3, r2
 800639e:	009b      	lsls	r3, r3, #2
 80063a0:	440b      	add	r3, r1
 80063a2:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80063a6:	7bfa      	ldrb	r2, [r7, #15]
 80063a8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80063aa:	7bfa      	ldrb	r2, [r7, #15]
 80063ac:	6879      	ldr	r1, [r7, #4]
 80063ae:	4613      	mov	r3, r2
 80063b0:	00db      	lsls	r3, r3, #3
 80063b2:	4413      	add	r3, r2
 80063b4:	009b      	lsls	r3, r3, #2
 80063b6:	440b      	add	r3, r1
 80063b8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80063bc:	2200      	movs	r2, #0
 80063be:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80063c0:	7bfa      	ldrb	r2, [r7, #15]
 80063c2:	6879      	ldr	r1, [r7, #4]
 80063c4:	4613      	mov	r3, r2
 80063c6:	00db      	lsls	r3, r3, #3
 80063c8:	4413      	add	r3, r2
 80063ca:	009b      	lsls	r3, r3, #2
 80063cc:	440b      	add	r3, r1
 80063ce:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80063d2:	2200      	movs	r2, #0
 80063d4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80063d6:	7bfa      	ldrb	r2, [r7, #15]
 80063d8:	6879      	ldr	r1, [r7, #4]
 80063da:	4613      	mov	r3, r2
 80063dc:	00db      	lsls	r3, r3, #3
 80063de:	4413      	add	r3, r2
 80063e0:	009b      	lsls	r3, r3, #2
 80063e2:	440b      	add	r3, r1
 80063e4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80063e8:	2200      	movs	r2, #0
 80063ea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80063ec:	7bfa      	ldrb	r2, [r7, #15]
 80063ee:	6879      	ldr	r1, [r7, #4]
 80063f0:	4613      	mov	r3, r2
 80063f2:	00db      	lsls	r3, r3, #3
 80063f4:	4413      	add	r3, r2
 80063f6:	009b      	lsls	r3, r3, #2
 80063f8:	440b      	add	r3, r1
 80063fa:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80063fe:	2200      	movs	r2, #0
 8006400:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006402:	7bfb      	ldrb	r3, [r7, #15]
 8006404:	3301      	adds	r3, #1
 8006406:	73fb      	strb	r3, [r7, #15]
 8006408:	7bfa      	ldrb	r2, [r7, #15]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	685b      	ldr	r3, [r3, #4]
 800640e:	429a      	cmp	r2, r3
 8006410:	d3b5      	bcc.n	800637e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	603b      	str	r3, [r7, #0]
 8006418:	687e      	ldr	r6, [r7, #4]
 800641a:	466d      	mov	r5, sp
 800641c:	f106 0410 	add.w	r4, r6, #16
 8006420:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006422:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006424:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006426:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006428:	e894 0003 	ldmia.w	r4, {r0, r1}
 800642c:	e885 0003 	stmia.w	r5, {r0, r1}
 8006430:	1d33      	adds	r3, r6, #4
 8006432:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006434:	6838      	ldr	r0, [r7, #0]
 8006436:	f003 fe91 	bl	800a15c <USB_DevInit>
 800643a:	4603      	mov	r3, r0
 800643c:	2b00      	cmp	r3, #0
 800643e:	d005      	beq.n	800644c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2202      	movs	r2, #2
 8006444:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8006448:	2301      	movs	r3, #1
 800644a:	e00d      	b.n	8006468 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2200      	movs	r2, #0
 8006450:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2201      	movs	r2, #1
 8006458:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4618      	mov	r0, r3
 8006462:	f004 ffe0 	bl	800b426 <USB_DevDisconnect>

  return HAL_OK;
 8006466:	2300      	movs	r3, #0
}
 8006468:	4618      	mov	r0, r3
 800646a:	3714      	adds	r7, #20
 800646c:	46bd      	mov	sp, r7
 800646e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006470 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b084      	sub	sp, #16
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006484:	2b01      	cmp	r3, #1
 8006486:	d101      	bne.n	800648c <HAL_PCD_Start+0x1c>
 8006488:	2302      	movs	r3, #2
 800648a:	e020      	b.n	80064ce <HAL_PCD_Start+0x5e>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2201      	movs	r2, #1
 8006490:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006498:	2b01      	cmp	r3, #1
 800649a:	d109      	bne.n	80064b0 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80064a0:	2b01      	cmp	r3, #1
 80064a2:	d005      	beq.n	80064b0 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064a8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	4618      	mov	r0, r3
 80064b6:	f003 fde3 	bl	800a080 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4618      	mov	r0, r3
 80064c0:	f004 ff90 	bl	800b3e4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2200      	movs	r2, #0
 80064c8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80064cc:	2300      	movs	r3, #0
}
 80064ce:	4618      	mov	r0, r3
 80064d0:	3710      	adds	r7, #16
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}

080064d6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80064d6:	b590      	push	{r4, r7, lr}
 80064d8:	b08d      	sub	sp, #52	; 0x34
 80064da:	af00      	add	r7, sp, #0
 80064dc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064e4:	6a3b      	ldr	r3, [r7, #32]
 80064e6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4618      	mov	r0, r3
 80064ee:	f005 f84e 	bl	800b58e <USB_GetMode>
 80064f2:	4603      	mov	r3, r0
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	f040 848a 	bne.w	8006e0e <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4618      	mov	r0, r3
 8006500:	f004 ffb2 	bl	800b468 <USB_ReadInterrupts>
 8006504:	4603      	mov	r3, r0
 8006506:	2b00      	cmp	r3, #0
 8006508:	f000 8480 	beq.w	8006e0c <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800650c:	69fb      	ldr	r3, [r7, #28]
 800650e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006512:	689b      	ldr	r3, [r3, #8]
 8006514:	0a1b      	lsrs	r3, r3, #8
 8006516:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4618      	mov	r0, r3
 8006526:	f004 ff9f 	bl	800b468 <USB_ReadInterrupts>
 800652a:	4603      	mov	r3, r0
 800652c:	f003 0302 	and.w	r3, r3, #2
 8006530:	2b02      	cmp	r3, #2
 8006532:	d107      	bne.n	8006544 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	695a      	ldr	r2, [r3, #20]
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f002 0202 	and.w	r2, r2, #2
 8006542:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	4618      	mov	r0, r3
 800654a:	f004 ff8d 	bl	800b468 <USB_ReadInterrupts>
 800654e:	4603      	mov	r3, r0
 8006550:	f003 0310 	and.w	r3, r3, #16
 8006554:	2b10      	cmp	r3, #16
 8006556:	d161      	bne.n	800661c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	699a      	ldr	r2, [r3, #24]
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f022 0210 	bic.w	r2, r2, #16
 8006566:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8006568:	6a3b      	ldr	r3, [r7, #32]
 800656a:	6a1b      	ldr	r3, [r3, #32]
 800656c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800656e:	69bb      	ldr	r3, [r7, #24]
 8006570:	f003 020f 	and.w	r2, r3, #15
 8006574:	4613      	mov	r3, r2
 8006576:	00db      	lsls	r3, r3, #3
 8006578:	4413      	add	r3, r2
 800657a:	009b      	lsls	r3, r3, #2
 800657c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006580:	687a      	ldr	r2, [r7, #4]
 8006582:	4413      	add	r3, r2
 8006584:	3304      	adds	r3, #4
 8006586:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8006588:	69bb      	ldr	r3, [r7, #24]
 800658a:	0c5b      	lsrs	r3, r3, #17
 800658c:	f003 030f 	and.w	r3, r3, #15
 8006590:	2b02      	cmp	r3, #2
 8006592:	d124      	bne.n	80065de <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8006594:	69ba      	ldr	r2, [r7, #24]
 8006596:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800659a:	4013      	ands	r3, r2
 800659c:	2b00      	cmp	r3, #0
 800659e:	d035      	beq.n	800660c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80065a0:	697b      	ldr	r3, [r7, #20]
 80065a2:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80065a4:	69bb      	ldr	r3, [r7, #24]
 80065a6:	091b      	lsrs	r3, r3, #4
 80065a8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80065aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80065ae:	b29b      	uxth	r3, r3
 80065b0:	461a      	mov	r2, r3
 80065b2:	6a38      	ldr	r0, [r7, #32]
 80065b4:	f004 fdc4 	bl	800b140 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80065b8:	697b      	ldr	r3, [r7, #20]
 80065ba:	691a      	ldr	r2, [r3, #16]
 80065bc:	69bb      	ldr	r3, [r7, #24]
 80065be:	091b      	lsrs	r3, r3, #4
 80065c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80065c4:	441a      	add	r2, r3
 80065c6:	697b      	ldr	r3, [r7, #20]
 80065c8:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80065ca:	697b      	ldr	r3, [r7, #20]
 80065cc:	6a1a      	ldr	r2, [r3, #32]
 80065ce:	69bb      	ldr	r3, [r7, #24]
 80065d0:	091b      	lsrs	r3, r3, #4
 80065d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80065d6:	441a      	add	r2, r3
 80065d8:	697b      	ldr	r3, [r7, #20]
 80065da:	621a      	str	r2, [r3, #32]
 80065dc:	e016      	b.n	800660c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80065de:	69bb      	ldr	r3, [r7, #24]
 80065e0:	0c5b      	lsrs	r3, r3, #17
 80065e2:	f003 030f 	and.w	r3, r3, #15
 80065e6:	2b06      	cmp	r3, #6
 80065e8:	d110      	bne.n	800660c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80065f0:	2208      	movs	r2, #8
 80065f2:	4619      	mov	r1, r3
 80065f4:	6a38      	ldr	r0, [r7, #32]
 80065f6:	f004 fda3 	bl	800b140 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	6a1a      	ldr	r2, [r3, #32]
 80065fe:	69bb      	ldr	r3, [r7, #24]
 8006600:	091b      	lsrs	r3, r3, #4
 8006602:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006606:	441a      	add	r2, r3
 8006608:	697b      	ldr	r3, [r7, #20]
 800660a:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	699a      	ldr	r2, [r3, #24]
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f042 0210 	orr.w	r2, r2, #16
 800661a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4618      	mov	r0, r3
 8006622:	f004 ff21 	bl	800b468 <USB_ReadInterrupts>
 8006626:	4603      	mov	r3, r0
 8006628:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800662c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006630:	f040 80a7 	bne.w	8006782 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8006634:	2300      	movs	r3, #0
 8006636:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	4618      	mov	r0, r3
 800663e:	f004 ff26 	bl	800b48e <USB_ReadDevAllOutEpInterrupt>
 8006642:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8006644:	e099      	b.n	800677a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8006646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006648:	f003 0301 	and.w	r3, r3, #1
 800664c:	2b00      	cmp	r3, #0
 800664e:	f000 808e 	beq.w	800676e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006658:	b2d2      	uxtb	r2, r2
 800665a:	4611      	mov	r1, r2
 800665c:	4618      	mov	r0, r3
 800665e:	f004 ff4a 	bl	800b4f6 <USB_ReadDevOutEPInterrupt>
 8006662:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8006664:	693b      	ldr	r3, [r7, #16]
 8006666:	f003 0301 	and.w	r3, r3, #1
 800666a:	2b00      	cmp	r3, #0
 800666c:	d00c      	beq.n	8006688 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800666e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006670:	015a      	lsls	r2, r3, #5
 8006672:	69fb      	ldr	r3, [r7, #28]
 8006674:	4413      	add	r3, r2
 8006676:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800667a:	461a      	mov	r2, r3
 800667c:	2301      	movs	r3, #1
 800667e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8006680:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f000 feaa 	bl	80073dc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8006688:	693b      	ldr	r3, [r7, #16]
 800668a:	f003 0308 	and.w	r3, r3, #8
 800668e:	2b00      	cmp	r3, #0
 8006690:	d00c      	beq.n	80066ac <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8006692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006694:	015a      	lsls	r2, r3, #5
 8006696:	69fb      	ldr	r3, [r7, #28]
 8006698:	4413      	add	r3, r2
 800669a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800669e:	461a      	mov	r2, r3
 80066a0:	2308      	movs	r3, #8
 80066a2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80066a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	f000 ff80 	bl	80075ac <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80066ac:	693b      	ldr	r3, [r7, #16]
 80066ae:	f003 0310 	and.w	r3, r3, #16
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d008      	beq.n	80066c8 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80066b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b8:	015a      	lsls	r2, r3, #5
 80066ba:	69fb      	ldr	r3, [r7, #28]
 80066bc:	4413      	add	r3, r2
 80066be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066c2:	461a      	mov	r2, r3
 80066c4:	2310      	movs	r3, #16
 80066c6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80066c8:	693b      	ldr	r3, [r7, #16]
 80066ca:	f003 0302 	and.w	r3, r3, #2
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d030      	beq.n	8006734 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80066d2:	6a3b      	ldr	r3, [r7, #32]
 80066d4:	695b      	ldr	r3, [r3, #20]
 80066d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066da:	2b80      	cmp	r3, #128	; 0x80
 80066dc:	d109      	bne.n	80066f2 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80066de:	69fb      	ldr	r3, [r7, #28]
 80066e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066e4:	685b      	ldr	r3, [r3, #4]
 80066e6:	69fa      	ldr	r2, [r7, #28]
 80066e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80066ec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80066f0:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80066f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066f4:	4613      	mov	r3, r2
 80066f6:	00db      	lsls	r3, r3, #3
 80066f8:	4413      	add	r3, r2
 80066fa:	009b      	lsls	r3, r3, #2
 80066fc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006700:	687a      	ldr	r2, [r7, #4]
 8006702:	4413      	add	r3, r2
 8006704:	3304      	adds	r3, #4
 8006706:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8006708:	697b      	ldr	r3, [r7, #20]
 800670a:	78db      	ldrb	r3, [r3, #3]
 800670c:	2b01      	cmp	r3, #1
 800670e:	d108      	bne.n	8006722 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8006710:	697b      	ldr	r3, [r7, #20]
 8006712:	2200      	movs	r2, #0
 8006714:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8006716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006718:	b2db      	uxtb	r3, r3
 800671a:	4619      	mov	r1, r3
 800671c:	6878      	ldr	r0, [r7, #4]
 800671e:	f007 f8e3 	bl	800d8e8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8006722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006724:	015a      	lsls	r2, r3, #5
 8006726:	69fb      	ldr	r3, [r7, #28]
 8006728:	4413      	add	r3, r2
 800672a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800672e:	461a      	mov	r2, r3
 8006730:	2302      	movs	r3, #2
 8006732:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006734:	693b      	ldr	r3, [r7, #16]
 8006736:	f003 0320 	and.w	r3, r3, #32
 800673a:	2b00      	cmp	r3, #0
 800673c:	d008      	beq.n	8006750 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800673e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006740:	015a      	lsls	r2, r3, #5
 8006742:	69fb      	ldr	r3, [r7, #28]
 8006744:	4413      	add	r3, r2
 8006746:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800674a:	461a      	mov	r2, r3
 800674c:	2320      	movs	r3, #32
 800674e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8006750:	693b      	ldr	r3, [r7, #16]
 8006752:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006756:	2b00      	cmp	r3, #0
 8006758:	d009      	beq.n	800676e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800675a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800675c:	015a      	lsls	r2, r3, #5
 800675e:	69fb      	ldr	r3, [r7, #28]
 8006760:	4413      	add	r3, r2
 8006762:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006766:	461a      	mov	r2, r3
 8006768:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800676c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800676e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006770:	3301      	adds	r3, #1
 8006772:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8006774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006776:	085b      	lsrs	r3, r3, #1
 8006778:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800677a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800677c:	2b00      	cmp	r3, #0
 800677e:	f47f af62 	bne.w	8006646 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4618      	mov	r0, r3
 8006788:	f004 fe6e 	bl	800b468 <USB_ReadInterrupts>
 800678c:	4603      	mov	r3, r0
 800678e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006792:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006796:	f040 80db 	bne.w	8006950 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4618      	mov	r0, r3
 80067a0:	f004 fe8f 	bl	800b4c2 <USB_ReadDevAllInEpInterrupt>
 80067a4:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80067a6:	2300      	movs	r3, #0
 80067a8:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80067aa:	e0cd      	b.n	8006948 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80067ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067ae:	f003 0301 	and.w	r3, r3, #1
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	f000 80c2 	beq.w	800693c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067be:	b2d2      	uxtb	r2, r2
 80067c0:	4611      	mov	r1, r2
 80067c2:	4618      	mov	r0, r3
 80067c4:	f004 feb5 	bl	800b532 <USB_ReadDevInEPInterrupt>
 80067c8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80067ca:	693b      	ldr	r3, [r7, #16]
 80067cc:	f003 0301 	and.w	r3, r3, #1
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d057      	beq.n	8006884 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80067d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d6:	f003 030f 	and.w	r3, r3, #15
 80067da:	2201      	movs	r2, #1
 80067dc:	fa02 f303 	lsl.w	r3, r2, r3
 80067e0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80067e2:	69fb      	ldr	r3, [r7, #28]
 80067e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	43db      	mvns	r3, r3
 80067ee:	69f9      	ldr	r1, [r7, #28]
 80067f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80067f4:	4013      	ands	r3, r2
 80067f6:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80067f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067fa:	015a      	lsls	r2, r3, #5
 80067fc:	69fb      	ldr	r3, [r7, #28]
 80067fe:	4413      	add	r3, r2
 8006800:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006804:	461a      	mov	r2, r3
 8006806:	2301      	movs	r3, #1
 8006808:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	691b      	ldr	r3, [r3, #16]
 800680e:	2b01      	cmp	r3, #1
 8006810:	d132      	bne.n	8006878 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8006812:	6879      	ldr	r1, [r7, #4]
 8006814:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006816:	4613      	mov	r3, r2
 8006818:	00db      	lsls	r3, r3, #3
 800681a:	4413      	add	r3, r2
 800681c:	009b      	lsls	r3, r3, #2
 800681e:	440b      	add	r3, r1
 8006820:	334c      	adds	r3, #76	; 0x4c
 8006822:	6819      	ldr	r1, [r3, #0]
 8006824:	6878      	ldr	r0, [r7, #4]
 8006826:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006828:	4613      	mov	r3, r2
 800682a:	00db      	lsls	r3, r3, #3
 800682c:	4413      	add	r3, r2
 800682e:	009b      	lsls	r3, r3, #2
 8006830:	4403      	add	r3, r0
 8006832:	3348      	adds	r3, #72	; 0x48
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	4419      	add	r1, r3
 8006838:	6878      	ldr	r0, [r7, #4]
 800683a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800683c:	4613      	mov	r3, r2
 800683e:	00db      	lsls	r3, r3, #3
 8006840:	4413      	add	r3, r2
 8006842:	009b      	lsls	r3, r3, #2
 8006844:	4403      	add	r3, r0
 8006846:	334c      	adds	r3, #76	; 0x4c
 8006848:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800684a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800684c:	2b00      	cmp	r3, #0
 800684e:	d113      	bne.n	8006878 <HAL_PCD_IRQHandler+0x3a2>
 8006850:	6879      	ldr	r1, [r7, #4]
 8006852:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006854:	4613      	mov	r3, r2
 8006856:	00db      	lsls	r3, r3, #3
 8006858:	4413      	add	r3, r2
 800685a:	009b      	lsls	r3, r3, #2
 800685c:	440b      	add	r3, r1
 800685e:	3354      	adds	r3, #84	; 0x54
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d108      	bne.n	8006878 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6818      	ldr	r0, [r3, #0]
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006870:	461a      	mov	r2, r3
 8006872:	2101      	movs	r1, #1
 8006874:	f004 febc 	bl	800b5f0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8006878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800687a:	b2db      	uxtb	r3, r3
 800687c:	4619      	mov	r1, r3
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	f006 ffb7 	bl	800d7f2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8006884:	693b      	ldr	r3, [r7, #16]
 8006886:	f003 0308 	and.w	r3, r3, #8
 800688a:	2b00      	cmp	r3, #0
 800688c:	d008      	beq.n	80068a0 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800688e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006890:	015a      	lsls	r2, r3, #5
 8006892:	69fb      	ldr	r3, [r7, #28]
 8006894:	4413      	add	r3, r2
 8006896:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800689a:	461a      	mov	r2, r3
 800689c:	2308      	movs	r3, #8
 800689e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80068a0:	693b      	ldr	r3, [r7, #16]
 80068a2:	f003 0310 	and.w	r3, r3, #16
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d008      	beq.n	80068bc <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80068aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ac:	015a      	lsls	r2, r3, #5
 80068ae:	69fb      	ldr	r3, [r7, #28]
 80068b0:	4413      	add	r3, r2
 80068b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068b6:	461a      	mov	r2, r3
 80068b8:	2310      	movs	r3, #16
 80068ba:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80068bc:	693b      	ldr	r3, [r7, #16]
 80068be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d008      	beq.n	80068d8 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80068c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c8:	015a      	lsls	r2, r3, #5
 80068ca:	69fb      	ldr	r3, [r7, #28]
 80068cc:	4413      	add	r3, r2
 80068ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068d2:	461a      	mov	r2, r3
 80068d4:	2340      	movs	r3, #64	; 0x40
 80068d6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80068d8:	693b      	ldr	r3, [r7, #16]
 80068da:	f003 0302 	and.w	r3, r3, #2
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d023      	beq.n	800692a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80068e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80068e4:	6a38      	ldr	r0, [r7, #32]
 80068e6:	f003 fd9d 	bl	800a424 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80068ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068ec:	4613      	mov	r3, r2
 80068ee:	00db      	lsls	r3, r3, #3
 80068f0:	4413      	add	r3, r2
 80068f2:	009b      	lsls	r3, r3, #2
 80068f4:	3338      	adds	r3, #56	; 0x38
 80068f6:	687a      	ldr	r2, [r7, #4]
 80068f8:	4413      	add	r3, r2
 80068fa:	3304      	adds	r3, #4
 80068fc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80068fe:	697b      	ldr	r3, [r7, #20]
 8006900:	78db      	ldrb	r3, [r3, #3]
 8006902:	2b01      	cmp	r3, #1
 8006904:	d108      	bne.n	8006918 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8006906:	697b      	ldr	r3, [r7, #20]
 8006908:	2200      	movs	r2, #0
 800690a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800690c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800690e:	b2db      	uxtb	r3, r3
 8006910:	4619      	mov	r1, r3
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	f006 fffa 	bl	800d90c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8006918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800691a:	015a      	lsls	r2, r3, #5
 800691c:	69fb      	ldr	r3, [r7, #28]
 800691e:	4413      	add	r3, r2
 8006920:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006924:	461a      	mov	r2, r3
 8006926:	2302      	movs	r3, #2
 8006928:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800692a:	693b      	ldr	r3, [r7, #16]
 800692c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006930:	2b00      	cmp	r3, #0
 8006932:	d003      	beq.n	800693c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8006934:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006936:	6878      	ldr	r0, [r7, #4]
 8006938:	f000 fcc3 	bl	80072c2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800693c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800693e:	3301      	adds	r3, #1
 8006940:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8006942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006944:	085b      	lsrs	r3, r3, #1
 8006946:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800694a:	2b00      	cmp	r3, #0
 800694c:	f47f af2e 	bne.w	80067ac <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	4618      	mov	r0, r3
 8006956:	f004 fd87 	bl	800b468 <USB_ReadInterrupts>
 800695a:	4603      	mov	r3, r0
 800695c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006960:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006964:	d122      	bne.n	80069ac <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006966:	69fb      	ldr	r3, [r7, #28]
 8006968:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800696c:	685b      	ldr	r3, [r3, #4]
 800696e:	69fa      	ldr	r2, [r7, #28]
 8006970:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006974:	f023 0301 	bic.w	r3, r3, #1
 8006978:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8006980:	2b01      	cmp	r3, #1
 8006982:	d108      	bne.n	8006996 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2200      	movs	r2, #0
 8006988:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800698c:	2100      	movs	r1, #0
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	f000 feaa 	bl	80076e8 <HAL_PCDEx_LPM_Callback>
 8006994:	e002      	b.n	800699c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	f006 ff98 	bl	800d8cc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	695a      	ldr	r2, [r3, #20]
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80069aa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	4618      	mov	r0, r3
 80069b2:	f004 fd59 	bl	800b468 <USB_ReadInterrupts>
 80069b6:	4603      	mov	r3, r0
 80069b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80069bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069c0:	d112      	bne.n	80069e8 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80069c2:	69fb      	ldr	r3, [r7, #28]
 80069c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069c8:	689b      	ldr	r3, [r3, #8]
 80069ca:	f003 0301 	and.w	r3, r3, #1
 80069ce:	2b01      	cmp	r3, #1
 80069d0:	d102      	bne.n	80069d8 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f006 ff54 	bl	800d880 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	695a      	ldr	r2, [r3, #20]
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80069e6:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4618      	mov	r0, r3
 80069ee:	f004 fd3b 	bl	800b468 <USB_ReadInterrupts>
 80069f2:	4603      	mov	r3, r0
 80069f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80069f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069fc:	f040 80b7 	bne.w	8006b6e <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006a00:	69fb      	ldr	r3, [r7, #28]
 8006a02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a06:	685b      	ldr	r3, [r3, #4]
 8006a08:	69fa      	ldr	r2, [r7, #28]
 8006a0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006a0e:	f023 0301 	bic.w	r3, r3, #1
 8006a12:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	2110      	movs	r1, #16
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	f003 fd02 	bl	800a424 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006a20:	2300      	movs	r3, #0
 8006a22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a24:	e046      	b.n	8006ab4 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8006a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a28:	015a      	lsls	r2, r3, #5
 8006a2a:	69fb      	ldr	r3, [r7, #28]
 8006a2c:	4413      	add	r3, r2
 8006a2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a32:	461a      	mov	r2, r3
 8006a34:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006a38:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a3c:	015a      	lsls	r2, r3, #5
 8006a3e:	69fb      	ldr	r3, [r7, #28]
 8006a40:	4413      	add	r3, r2
 8006a42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a4a:	0151      	lsls	r1, r2, #5
 8006a4c:	69fa      	ldr	r2, [r7, #28]
 8006a4e:	440a      	add	r2, r1
 8006a50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a54:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006a58:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8006a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a5c:	015a      	lsls	r2, r3, #5
 8006a5e:	69fb      	ldr	r3, [r7, #28]
 8006a60:	4413      	add	r3, r2
 8006a62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a66:	461a      	mov	r2, r3
 8006a68:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006a6c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a70:	015a      	lsls	r2, r3, #5
 8006a72:	69fb      	ldr	r3, [r7, #28]
 8006a74:	4413      	add	r3, r2
 8006a76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a7e:	0151      	lsls	r1, r2, #5
 8006a80:	69fa      	ldr	r2, [r7, #28]
 8006a82:	440a      	add	r2, r1
 8006a84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a88:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006a8c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006a8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a90:	015a      	lsls	r2, r3, #5
 8006a92:	69fb      	ldr	r3, [r7, #28]
 8006a94:	4413      	add	r3, r2
 8006a96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a9e:	0151      	lsls	r1, r2, #5
 8006aa0:	69fa      	ldr	r2, [r7, #28]
 8006aa2:	440a      	add	r2, r1
 8006aa4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006aa8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006aac:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ab0:	3301      	adds	r3, #1
 8006ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	685b      	ldr	r3, [r3, #4]
 8006ab8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006aba:	429a      	cmp	r2, r3
 8006abc:	d3b3      	bcc.n	8006a26 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8006abe:	69fb      	ldr	r3, [r7, #28]
 8006ac0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ac4:	69db      	ldr	r3, [r3, #28]
 8006ac6:	69fa      	ldr	r2, [r7, #28]
 8006ac8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006acc:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8006ad0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d016      	beq.n	8006b08 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8006ada:	69fb      	ldr	r3, [r7, #28]
 8006adc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ae0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ae4:	69fa      	ldr	r2, [r7, #28]
 8006ae6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006aea:	f043 030b 	orr.w	r3, r3, #11
 8006aee:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8006af2:	69fb      	ldr	r3, [r7, #28]
 8006af4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006afa:	69fa      	ldr	r2, [r7, #28]
 8006afc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006b00:	f043 030b 	orr.w	r3, r3, #11
 8006b04:	6453      	str	r3, [r2, #68]	; 0x44
 8006b06:	e015      	b.n	8006b34 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8006b08:	69fb      	ldr	r3, [r7, #28]
 8006b0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b0e:	695b      	ldr	r3, [r3, #20]
 8006b10:	69fa      	ldr	r2, [r7, #28]
 8006b12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006b16:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006b1a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8006b1e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8006b20:	69fb      	ldr	r3, [r7, #28]
 8006b22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b26:	691b      	ldr	r3, [r3, #16]
 8006b28:	69fa      	ldr	r2, [r7, #28]
 8006b2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006b2e:	f043 030b 	orr.w	r3, r3, #11
 8006b32:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8006b34:	69fb      	ldr	r3, [r7, #28]
 8006b36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	69fa      	ldr	r2, [r7, #28]
 8006b3e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006b42:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006b46:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	6818      	ldr	r0, [r3, #0]
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	691b      	ldr	r3, [r3, #16]
 8006b50:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006b58:	461a      	mov	r2, r3
 8006b5a:	f004 fd49 	bl	800b5f0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	695a      	ldr	r2, [r3, #20]
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8006b6c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	4618      	mov	r0, r3
 8006b74:	f004 fc78 	bl	800b468 <USB_ReadInterrupts>
 8006b78:	4603      	mov	r3, r0
 8006b7a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006b7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b82:	d124      	bne.n	8006bce <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	4618      	mov	r0, r3
 8006b8a:	f004 fd0e 	bl	800b5aa <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	4618      	mov	r0, r3
 8006b94:	f003 fcc3 	bl	800a51e <USB_GetDevSpeed>
 8006b98:	4603      	mov	r3, r0
 8006b9a:	461a      	mov	r2, r3
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681c      	ldr	r4, [r3, #0]
 8006ba4:	f001 f9d0 	bl	8007f48 <HAL_RCC_GetHCLKFreq>
 8006ba8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006bae:	b2db      	uxtb	r3, r3
 8006bb0:	461a      	mov	r2, r3
 8006bb2:	4620      	mov	r0, r4
 8006bb4:	f003 f9c2 	bl	8009f3c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8006bb8:	6878      	ldr	r0, [r7, #4]
 8006bba:	f006 fe42 	bl	800d842 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	695a      	ldr	r2, [r3, #20]
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8006bcc:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	f004 fc48 	bl	800b468 <USB_ReadInterrupts>
 8006bd8:	4603      	mov	r3, r0
 8006bda:	f003 0308 	and.w	r3, r3, #8
 8006bde:	2b08      	cmp	r3, #8
 8006be0:	d10a      	bne.n	8006bf8 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8006be2:	6878      	ldr	r0, [r7, #4]
 8006be4:	f006 fe1f 	bl	800d826 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	695a      	ldr	r2, [r3, #20]
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f002 0208 	and.w	r2, r2, #8
 8006bf6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	f004 fc33 	bl	800b468 <USB_ReadInterrupts>
 8006c02:	4603      	mov	r3, r0
 8006c04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c08:	2b80      	cmp	r3, #128	; 0x80
 8006c0a:	d122      	bne.n	8006c52 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8006c0c:	6a3b      	ldr	r3, [r7, #32]
 8006c0e:	699b      	ldr	r3, [r3, #24]
 8006c10:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006c14:	6a3b      	ldr	r3, [r7, #32]
 8006c16:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006c18:	2301      	movs	r3, #1
 8006c1a:	627b      	str	r3, [r7, #36]	; 0x24
 8006c1c:	e014      	b.n	8006c48 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8006c1e:	6879      	ldr	r1, [r7, #4]
 8006c20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c22:	4613      	mov	r3, r2
 8006c24:	00db      	lsls	r3, r3, #3
 8006c26:	4413      	add	r3, r2
 8006c28:	009b      	lsls	r3, r3, #2
 8006c2a:	440b      	add	r3, r1
 8006c2c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8006c30:	781b      	ldrb	r3, [r3, #0]
 8006c32:	2b01      	cmp	r3, #1
 8006c34:	d105      	bne.n	8006c42 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8006c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c38:	b2db      	uxtb	r3, r3
 8006c3a:	4619      	mov	r1, r3
 8006c3c:	6878      	ldr	r0, [r7, #4]
 8006c3e:	f000 fb0f 	bl	8007260 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c44:	3301      	adds	r3, #1
 8006c46:	627b      	str	r3, [r7, #36]	; 0x24
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	685b      	ldr	r3, [r3, #4]
 8006c4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c4e:	429a      	cmp	r2, r3
 8006c50:	d3e5      	bcc.n	8006c1e <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	4618      	mov	r0, r3
 8006c58:	f004 fc06 	bl	800b468 <USB_ReadInterrupts>
 8006c5c:	4603      	mov	r3, r0
 8006c5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006c62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c66:	d13b      	bne.n	8006ce0 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006c68:	2301      	movs	r3, #1
 8006c6a:	627b      	str	r3, [r7, #36]	; 0x24
 8006c6c:	e02b      	b.n	8006cc6 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8006c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c70:	015a      	lsls	r2, r3, #5
 8006c72:	69fb      	ldr	r3, [r7, #28]
 8006c74:	4413      	add	r3, r2
 8006c76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006c7e:	6879      	ldr	r1, [r7, #4]
 8006c80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c82:	4613      	mov	r3, r2
 8006c84:	00db      	lsls	r3, r3, #3
 8006c86:	4413      	add	r3, r2
 8006c88:	009b      	lsls	r3, r3, #2
 8006c8a:	440b      	add	r3, r1
 8006c8c:	3340      	adds	r3, #64	; 0x40
 8006c8e:	781b      	ldrb	r3, [r3, #0]
 8006c90:	2b01      	cmp	r3, #1
 8006c92:	d115      	bne.n	8006cc0 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8006c94:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	da12      	bge.n	8006cc0 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8006c9a:	6879      	ldr	r1, [r7, #4]
 8006c9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c9e:	4613      	mov	r3, r2
 8006ca0:	00db      	lsls	r3, r3, #3
 8006ca2:	4413      	add	r3, r2
 8006ca4:	009b      	lsls	r3, r3, #2
 8006ca6:	440b      	add	r3, r1
 8006ca8:	333f      	adds	r3, #63	; 0x3f
 8006caa:	2201      	movs	r2, #1
 8006cac:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8006cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cb0:	b2db      	uxtb	r3, r3
 8006cb2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006cb6:	b2db      	uxtb	r3, r3
 8006cb8:	4619      	mov	r1, r3
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	f000 fad0 	bl	8007260 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc2:	3301      	adds	r3, #1
 8006cc4:	627b      	str	r3, [r7, #36]	; 0x24
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	685b      	ldr	r3, [r3, #4]
 8006cca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ccc:	429a      	cmp	r2, r3
 8006cce:	d3ce      	bcc.n	8006c6e <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	695a      	ldr	r2, [r3, #20]
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8006cde:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	f004 fbbf 	bl	800b468 <USB_ReadInterrupts>
 8006cea:	4603      	mov	r3, r0
 8006cec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006cf0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006cf4:	d155      	bne.n	8006da2 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	627b      	str	r3, [r7, #36]	; 0x24
 8006cfa:	e045      	b.n	8006d88 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8006cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cfe:	015a      	lsls	r2, r3, #5
 8006d00:	69fb      	ldr	r3, [r7, #28]
 8006d02:	4413      	add	r3, r2
 8006d04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006d0c:	6879      	ldr	r1, [r7, #4]
 8006d0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d10:	4613      	mov	r3, r2
 8006d12:	00db      	lsls	r3, r3, #3
 8006d14:	4413      	add	r3, r2
 8006d16:	009b      	lsls	r3, r3, #2
 8006d18:	440b      	add	r3, r1
 8006d1a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006d1e:	781b      	ldrb	r3, [r3, #0]
 8006d20:	2b01      	cmp	r3, #1
 8006d22:	d12e      	bne.n	8006d82 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006d24:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	da2b      	bge.n	8006d82 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8006d2a:	69bb      	ldr	r3, [r7, #24]
 8006d2c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8006d36:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006d3a:	429a      	cmp	r2, r3
 8006d3c:	d121      	bne.n	8006d82 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8006d3e:	6879      	ldr	r1, [r7, #4]
 8006d40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d42:	4613      	mov	r3, r2
 8006d44:	00db      	lsls	r3, r3, #3
 8006d46:	4413      	add	r3, r2
 8006d48:	009b      	lsls	r3, r3, #2
 8006d4a:	440b      	add	r3, r1
 8006d4c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8006d50:	2201      	movs	r2, #1
 8006d52:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8006d54:	6a3b      	ldr	r3, [r7, #32]
 8006d56:	699b      	ldr	r3, [r3, #24]
 8006d58:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006d5c:	6a3b      	ldr	r3, [r7, #32]
 8006d5e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8006d60:	6a3b      	ldr	r3, [r7, #32]
 8006d62:	695b      	ldr	r3, [r3, #20]
 8006d64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d10a      	bne.n	8006d82 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8006d6c:	69fb      	ldr	r3, [r7, #28]
 8006d6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d72:	685b      	ldr	r3, [r3, #4]
 8006d74:	69fa      	ldr	r2, [r7, #28]
 8006d76:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006d7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006d7e:	6053      	str	r3, [r2, #4]
            break;
 8006d80:	e007      	b.n	8006d92 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d84:	3301      	adds	r3, #1
 8006d86:	627b      	str	r3, [r7, #36]	; 0x24
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	685b      	ldr	r3, [r3, #4]
 8006d8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d8e:	429a      	cmp	r2, r3
 8006d90:	d3b4      	bcc.n	8006cfc <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	695a      	ldr	r2, [r3, #20]
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8006da0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4618      	mov	r0, r3
 8006da8:	f004 fb5e 	bl	800b468 <USB_ReadInterrupts>
 8006dac:	4603      	mov	r3, r0
 8006dae:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006db2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006db6:	d10a      	bne.n	8006dce <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	f006 fdb9 	bl	800d930 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	695a      	ldr	r2, [r3, #20]
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8006dcc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	f004 fb48 	bl	800b468 <USB_ReadInterrupts>
 8006dd8:	4603      	mov	r3, r0
 8006dda:	f003 0304 	and.w	r3, r3, #4
 8006dde:	2b04      	cmp	r3, #4
 8006de0:	d115      	bne.n	8006e0e <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	685b      	ldr	r3, [r3, #4]
 8006de8:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8006dea:	69bb      	ldr	r3, [r7, #24]
 8006dec:	f003 0304 	and.w	r3, r3, #4
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d002      	beq.n	8006dfa <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8006df4:	6878      	ldr	r0, [r7, #4]
 8006df6:	f006 fda9 	bl	800d94c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	6859      	ldr	r1, [r3, #4]
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	69ba      	ldr	r2, [r7, #24]
 8006e06:	430a      	orrs	r2, r1
 8006e08:	605a      	str	r2, [r3, #4]
 8006e0a:	e000      	b.n	8006e0e <HAL_PCD_IRQHandler+0x938>
      return;
 8006e0c:	bf00      	nop
    }
  }
}
 8006e0e:	3734      	adds	r7, #52	; 0x34
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bd90      	pop	{r4, r7, pc}

08006e14 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b082      	sub	sp, #8
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
 8006e1c:	460b      	mov	r3, r1
 8006e1e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006e26:	2b01      	cmp	r3, #1
 8006e28:	d101      	bne.n	8006e2e <HAL_PCD_SetAddress+0x1a>
 8006e2a:	2302      	movs	r3, #2
 8006e2c:	e013      	b.n	8006e56 <HAL_PCD_SetAddress+0x42>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2201      	movs	r2, #1
 8006e32:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	78fa      	ldrb	r2, [r7, #3]
 8006e3a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	78fa      	ldrb	r2, [r7, #3]
 8006e44:	4611      	mov	r1, r2
 8006e46:	4618      	mov	r0, r3
 8006e48:	f004 faa6 	bl	800b398 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2200      	movs	r2, #0
 8006e50:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006e54:	2300      	movs	r3, #0
}
 8006e56:	4618      	mov	r0, r3
 8006e58:	3708      	adds	r7, #8
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	bd80      	pop	{r7, pc}

08006e5e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8006e5e:	b580      	push	{r7, lr}
 8006e60:	b084      	sub	sp, #16
 8006e62:	af00      	add	r7, sp, #0
 8006e64:	6078      	str	r0, [r7, #4]
 8006e66:	4608      	mov	r0, r1
 8006e68:	4611      	mov	r1, r2
 8006e6a:	461a      	mov	r2, r3
 8006e6c:	4603      	mov	r3, r0
 8006e6e:	70fb      	strb	r3, [r7, #3]
 8006e70:	460b      	mov	r3, r1
 8006e72:	803b      	strh	r3, [r7, #0]
 8006e74:	4613      	mov	r3, r2
 8006e76:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8006e78:	2300      	movs	r3, #0
 8006e7a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006e7c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	da0f      	bge.n	8006ea4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006e84:	78fb      	ldrb	r3, [r7, #3]
 8006e86:	f003 020f 	and.w	r2, r3, #15
 8006e8a:	4613      	mov	r3, r2
 8006e8c:	00db      	lsls	r3, r3, #3
 8006e8e:	4413      	add	r3, r2
 8006e90:	009b      	lsls	r3, r3, #2
 8006e92:	3338      	adds	r3, #56	; 0x38
 8006e94:	687a      	ldr	r2, [r7, #4]
 8006e96:	4413      	add	r3, r2
 8006e98:	3304      	adds	r3, #4
 8006e9a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	2201      	movs	r2, #1
 8006ea0:	705a      	strb	r2, [r3, #1]
 8006ea2:	e00f      	b.n	8006ec4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006ea4:	78fb      	ldrb	r3, [r7, #3]
 8006ea6:	f003 020f 	and.w	r2, r3, #15
 8006eaa:	4613      	mov	r3, r2
 8006eac:	00db      	lsls	r3, r3, #3
 8006eae:	4413      	add	r3, r2
 8006eb0:	009b      	lsls	r3, r3, #2
 8006eb2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006eb6:	687a      	ldr	r2, [r7, #4]
 8006eb8:	4413      	add	r3, r2
 8006eba:	3304      	adds	r3, #4
 8006ebc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006ec4:	78fb      	ldrb	r3, [r7, #3]
 8006ec6:	f003 030f 	and.w	r3, r3, #15
 8006eca:	b2da      	uxtb	r2, r3
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8006ed0:	883a      	ldrh	r2, [r7, #0]
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	78ba      	ldrb	r2, [r7, #2]
 8006eda:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	785b      	ldrb	r3, [r3, #1]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d004      	beq.n	8006eee <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	781b      	ldrb	r3, [r3, #0]
 8006ee8:	b29a      	uxth	r2, r3
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006eee:	78bb      	ldrb	r3, [r7, #2]
 8006ef0:	2b02      	cmp	r3, #2
 8006ef2:	d102      	bne.n	8006efa <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006f00:	2b01      	cmp	r3, #1
 8006f02:	d101      	bne.n	8006f08 <HAL_PCD_EP_Open+0xaa>
 8006f04:	2302      	movs	r3, #2
 8006f06:	e00e      	b.n	8006f26 <HAL_PCD_EP_Open+0xc8>
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2201      	movs	r2, #1
 8006f0c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	68f9      	ldr	r1, [r7, #12]
 8006f16:	4618      	mov	r0, r3
 8006f18:	f003 fb26 	bl	800a568 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2200      	movs	r2, #0
 8006f20:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8006f24:	7afb      	ldrb	r3, [r7, #11]
}
 8006f26:	4618      	mov	r0, r3
 8006f28:	3710      	adds	r7, #16
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bd80      	pop	{r7, pc}

08006f2e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006f2e:	b580      	push	{r7, lr}
 8006f30:	b084      	sub	sp, #16
 8006f32:	af00      	add	r7, sp, #0
 8006f34:	6078      	str	r0, [r7, #4]
 8006f36:	460b      	mov	r3, r1
 8006f38:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006f3a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	da0f      	bge.n	8006f62 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006f42:	78fb      	ldrb	r3, [r7, #3]
 8006f44:	f003 020f 	and.w	r2, r3, #15
 8006f48:	4613      	mov	r3, r2
 8006f4a:	00db      	lsls	r3, r3, #3
 8006f4c:	4413      	add	r3, r2
 8006f4e:	009b      	lsls	r3, r3, #2
 8006f50:	3338      	adds	r3, #56	; 0x38
 8006f52:	687a      	ldr	r2, [r7, #4]
 8006f54:	4413      	add	r3, r2
 8006f56:	3304      	adds	r3, #4
 8006f58:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	2201      	movs	r2, #1
 8006f5e:	705a      	strb	r2, [r3, #1]
 8006f60:	e00f      	b.n	8006f82 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006f62:	78fb      	ldrb	r3, [r7, #3]
 8006f64:	f003 020f 	and.w	r2, r3, #15
 8006f68:	4613      	mov	r3, r2
 8006f6a:	00db      	lsls	r3, r3, #3
 8006f6c:	4413      	add	r3, r2
 8006f6e:	009b      	lsls	r3, r3, #2
 8006f70:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006f74:	687a      	ldr	r2, [r7, #4]
 8006f76:	4413      	add	r3, r2
 8006f78:	3304      	adds	r3, #4
 8006f7a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	2200      	movs	r2, #0
 8006f80:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8006f82:	78fb      	ldrb	r3, [r7, #3]
 8006f84:	f003 030f 	and.w	r3, r3, #15
 8006f88:	b2da      	uxtb	r2, r3
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006f94:	2b01      	cmp	r3, #1
 8006f96:	d101      	bne.n	8006f9c <HAL_PCD_EP_Close+0x6e>
 8006f98:	2302      	movs	r3, #2
 8006f9a:	e00e      	b.n	8006fba <HAL_PCD_EP_Close+0x8c>
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2201      	movs	r2, #1
 8006fa0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	68f9      	ldr	r1, [r7, #12]
 8006faa:	4618      	mov	r0, r3
 8006fac:	f003 fb64 	bl	800a678 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8006fb8:	2300      	movs	r3, #0
}
 8006fba:	4618      	mov	r0, r3
 8006fbc:	3710      	adds	r7, #16
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	bd80      	pop	{r7, pc}

08006fc2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006fc2:	b580      	push	{r7, lr}
 8006fc4:	b086      	sub	sp, #24
 8006fc6:	af00      	add	r7, sp, #0
 8006fc8:	60f8      	str	r0, [r7, #12]
 8006fca:	607a      	str	r2, [r7, #4]
 8006fcc:	603b      	str	r3, [r7, #0]
 8006fce:	460b      	mov	r3, r1
 8006fd0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006fd2:	7afb      	ldrb	r3, [r7, #11]
 8006fd4:	f003 020f 	and.w	r2, r3, #15
 8006fd8:	4613      	mov	r3, r2
 8006fda:	00db      	lsls	r3, r3, #3
 8006fdc:	4413      	add	r3, r2
 8006fde:	009b      	lsls	r3, r3, #2
 8006fe0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006fe4:	68fa      	ldr	r2, [r7, #12]
 8006fe6:	4413      	add	r3, r2
 8006fe8:	3304      	adds	r3, #4
 8006fea:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006fec:	697b      	ldr	r3, [r7, #20]
 8006fee:	687a      	ldr	r2, [r7, #4]
 8006ff0:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8006ff2:	697b      	ldr	r3, [r7, #20]
 8006ff4:	683a      	ldr	r2, [r7, #0]
 8006ff6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8006ff8:	697b      	ldr	r3, [r7, #20]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8006ffe:	697b      	ldr	r3, [r7, #20]
 8007000:	2200      	movs	r2, #0
 8007002:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007004:	7afb      	ldrb	r3, [r7, #11]
 8007006:	f003 030f 	and.w	r3, r3, #15
 800700a:	b2da      	uxtb	r2, r3
 800700c:	697b      	ldr	r3, [r7, #20]
 800700e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	691b      	ldr	r3, [r3, #16]
 8007014:	2b01      	cmp	r3, #1
 8007016:	d102      	bne.n	800701e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007018:	687a      	ldr	r2, [r7, #4]
 800701a:	697b      	ldr	r3, [r7, #20]
 800701c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800701e:	7afb      	ldrb	r3, [r7, #11]
 8007020:	f003 030f 	and.w	r3, r3, #15
 8007024:	2b00      	cmp	r3, #0
 8007026:	d109      	bne.n	800703c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	6818      	ldr	r0, [r3, #0]
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	691b      	ldr	r3, [r3, #16]
 8007030:	b2db      	uxtb	r3, r3
 8007032:	461a      	mov	r2, r3
 8007034:	6979      	ldr	r1, [r7, #20]
 8007036:	f003 fe43 	bl	800acc0 <USB_EP0StartXfer>
 800703a:	e008      	b.n	800704e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	6818      	ldr	r0, [r3, #0]
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	691b      	ldr	r3, [r3, #16]
 8007044:	b2db      	uxtb	r3, r3
 8007046:	461a      	mov	r2, r3
 8007048:	6979      	ldr	r1, [r7, #20]
 800704a:	f003 fbf1 	bl	800a830 <USB_EPStartXfer>
  }

  return HAL_OK;
 800704e:	2300      	movs	r3, #0
}
 8007050:	4618      	mov	r0, r3
 8007052:	3718      	adds	r7, #24
 8007054:	46bd      	mov	sp, r7
 8007056:	bd80      	pop	{r7, pc}

08007058 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b086      	sub	sp, #24
 800705c:	af00      	add	r7, sp, #0
 800705e:	60f8      	str	r0, [r7, #12]
 8007060:	607a      	str	r2, [r7, #4]
 8007062:	603b      	str	r3, [r7, #0]
 8007064:	460b      	mov	r3, r1
 8007066:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007068:	7afb      	ldrb	r3, [r7, #11]
 800706a:	f003 020f 	and.w	r2, r3, #15
 800706e:	4613      	mov	r3, r2
 8007070:	00db      	lsls	r3, r3, #3
 8007072:	4413      	add	r3, r2
 8007074:	009b      	lsls	r3, r3, #2
 8007076:	3338      	adds	r3, #56	; 0x38
 8007078:	68fa      	ldr	r2, [r7, #12]
 800707a:	4413      	add	r3, r2
 800707c:	3304      	adds	r3, #4
 800707e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007080:	697b      	ldr	r3, [r7, #20]
 8007082:	687a      	ldr	r2, [r7, #4]
 8007084:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8007086:	697b      	ldr	r3, [r7, #20]
 8007088:	683a      	ldr	r2, [r7, #0]
 800708a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800708c:	697b      	ldr	r3, [r7, #20]
 800708e:	2200      	movs	r2, #0
 8007090:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8007092:	697b      	ldr	r3, [r7, #20]
 8007094:	2201      	movs	r2, #1
 8007096:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007098:	7afb      	ldrb	r3, [r7, #11]
 800709a:	f003 030f 	and.w	r3, r3, #15
 800709e:	b2da      	uxtb	r2, r3
 80070a0:	697b      	ldr	r3, [r7, #20]
 80070a2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	691b      	ldr	r3, [r3, #16]
 80070a8:	2b01      	cmp	r3, #1
 80070aa:	d102      	bne.n	80070b2 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80070ac:	687a      	ldr	r2, [r7, #4]
 80070ae:	697b      	ldr	r3, [r7, #20]
 80070b0:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80070b2:	7afb      	ldrb	r3, [r7, #11]
 80070b4:	f003 030f 	and.w	r3, r3, #15
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d109      	bne.n	80070d0 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	6818      	ldr	r0, [r3, #0]
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	691b      	ldr	r3, [r3, #16]
 80070c4:	b2db      	uxtb	r3, r3
 80070c6:	461a      	mov	r2, r3
 80070c8:	6979      	ldr	r1, [r7, #20]
 80070ca:	f003 fdf9 	bl	800acc0 <USB_EP0StartXfer>
 80070ce:	e008      	b.n	80070e2 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	6818      	ldr	r0, [r3, #0]
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	691b      	ldr	r3, [r3, #16]
 80070d8:	b2db      	uxtb	r3, r3
 80070da:	461a      	mov	r2, r3
 80070dc:	6979      	ldr	r1, [r7, #20]
 80070de:	f003 fba7 	bl	800a830 <USB_EPStartXfer>
  }

  return HAL_OK;
 80070e2:	2300      	movs	r3, #0
}
 80070e4:	4618      	mov	r0, r3
 80070e6:	3718      	adds	r7, #24
 80070e8:	46bd      	mov	sp, r7
 80070ea:	bd80      	pop	{r7, pc}

080070ec <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b084      	sub	sp, #16
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
 80070f4:	460b      	mov	r3, r1
 80070f6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80070f8:	78fb      	ldrb	r3, [r7, #3]
 80070fa:	f003 020f 	and.w	r2, r3, #15
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	685b      	ldr	r3, [r3, #4]
 8007102:	429a      	cmp	r2, r3
 8007104:	d901      	bls.n	800710a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8007106:	2301      	movs	r3, #1
 8007108:	e050      	b.n	80071ac <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800710a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800710e:	2b00      	cmp	r3, #0
 8007110:	da0f      	bge.n	8007132 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007112:	78fb      	ldrb	r3, [r7, #3]
 8007114:	f003 020f 	and.w	r2, r3, #15
 8007118:	4613      	mov	r3, r2
 800711a:	00db      	lsls	r3, r3, #3
 800711c:	4413      	add	r3, r2
 800711e:	009b      	lsls	r3, r3, #2
 8007120:	3338      	adds	r3, #56	; 0x38
 8007122:	687a      	ldr	r2, [r7, #4]
 8007124:	4413      	add	r3, r2
 8007126:	3304      	adds	r3, #4
 8007128:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	2201      	movs	r2, #1
 800712e:	705a      	strb	r2, [r3, #1]
 8007130:	e00d      	b.n	800714e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007132:	78fa      	ldrb	r2, [r7, #3]
 8007134:	4613      	mov	r3, r2
 8007136:	00db      	lsls	r3, r3, #3
 8007138:	4413      	add	r3, r2
 800713a:	009b      	lsls	r3, r3, #2
 800713c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007140:	687a      	ldr	r2, [r7, #4]
 8007142:	4413      	add	r3, r2
 8007144:	3304      	adds	r3, #4
 8007146:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	2200      	movs	r2, #0
 800714c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	2201      	movs	r2, #1
 8007152:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007154:	78fb      	ldrb	r3, [r7, #3]
 8007156:	f003 030f 	and.w	r3, r3, #15
 800715a:	b2da      	uxtb	r2, r3
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8007166:	2b01      	cmp	r3, #1
 8007168:	d101      	bne.n	800716e <HAL_PCD_EP_SetStall+0x82>
 800716a:	2302      	movs	r3, #2
 800716c:	e01e      	b.n	80071ac <HAL_PCD_EP_SetStall+0xc0>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2201      	movs	r2, #1
 8007172:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	68f9      	ldr	r1, [r7, #12]
 800717c:	4618      	mov	r0, r3
 800717e:	f004 f837 	bl	800b1f0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007182:	78fb      	ldrb	r3, [r7, #3]
 8007184:	f003 030f 	and.w	r3, r3, #15
 8007188:	2b00      	cmp	r3, #0
 800718a:	d10a      	bne.n	80071a2 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6818      	ldr	r0, [r3, #0]
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	691b      	ldr	r3, [r3, #16]
 8007194:	b2d9      	uxtb	r1, r3
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800719c:	461a      	mov	r2, r3
 800719e:	f004 fa27 	bl	800b5f0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2200      	movs	r2, #0
 80071a6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80071aa:	2300      	movs	r3, #0
}
 80071ac:	4618      	mov	r0, r3
 80071ae:	3710      	adds	r7, #16
 80071b0:	46bd      	mov	sp, r7
 80071b2:	bd80      	pop	{r7, pc}

080071b4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b084      	sub	sp, #16
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
 80071bc:	460b      	mov	r3, r1
 80071be:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80071c0:	78fb      	ldrb	r3, [r7, #3]
 80071c2:	f003 020f 	and.w	r2, r3, #15
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	685b      	ldr	r3, [r3, #4]
 80071ca:	429a      	cmp	r2, r3
 80071cc:	d901      	bls.n	80071d2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80071ce:	2301      	movs	r3, #1
 80071d0:	e042      	b.n	8007258 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80071d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	da0f      	bge.n	80071fa <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80071da:	78fb      	ldrb	r3, [r7, #3]
 80071dc:	f003 020f 	and.w	r2, r3, #15
 80071e0:	4613      	mov	r3, r2
 80071e2:	00db      	lsls	r3, r3, #3
 80071e4:	4413      	add	r3, r2
 80071e6:	009b      	lsls	r3, r3, #2
 80071e8:	3338      	adds	r3, #56	; 0x38
 80071ea:	687a      	ldr	r2, [r7, #4]
 80071ec:	4413      	add	r3, r2
 80071ee:	3304      	adds	r3, #4
 80071f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	2201      	movs	r2, #1
 80071f6:	705a      	strb	r2, [r3, #1]
 80071f8:	e00f      	b.n	800721a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80071fa:	78fb      	ldrb	r3, [r7, #3]
 80071fc:	f003 020f 	and.w	r2, r3, #15
 8007200:	4613      	mov	r3, r2
 8007202:	00db      	lsls	r3, r3, #3
 8007204:	4413      	add	r3, r2
 8007206:	009b      	lsls	r3, r3, #2
 8007208:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800720c:	687a      	ldr	r2, [r7, #4]
 800720e:	4413      	add	r3, r2
 8007210:	3304      	adds	r3, #4
 8007212:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	2200      	movs	r2, #0
 8007218:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	2200      	movs	r2, #0
 800721e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007220:	78fb      	ldrb	r3, [r7, #3]
 8007222:	f003 030f 	and.w	r3, r3, #15
 8007226:	b2da      	uxtb	r2, r3
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8007232:	2b01      	cmp	r3, #1
 8007234:	d101      	bne.n	800723a <HAL_PCD_EP_ClrStall+0x86>
 8007236:	2302      	movs	r3, #2
 8007238:	e00e      	b.n	8007258 <HAL_PCD_EP_ClrStall+0xa4>
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2201      	movs	r2, #1
 800723e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	68f9      	ldr	r1, [r7, #12]
 8007248:	4618      	mov	r0, r3
 800724a:	f004 f83f 	bl	800b2cc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2200      	movs	r2, #0
 8007252:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8007256:	2300      	movs	r3, #0
}
 8007258:	4618      	mov	r0, r3
 800725a:	3710      	adds	r7, #16
 800725c:	46bd      	mov	sp, r7
 800725e:	bd80      	pop	{r7, pc}

08007260 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b084      	sub	sp, #16
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
 8007268:	460b      	mov	r3, r1
 800726a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800726c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007270:	2b00      	cmp	r3, #0
 8007272:	da0c      	bge.n	800728e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007274:	78fb      	ldrb	r3, [r7, #3]
 8007276:	f003 020f 	and.w	r2, r3, #15
 800727a:	4613      	mov	r3, r2
 800727c:	00db      	lsls	r3, r3, #3
 800727e:	4413      	add	r3, r2
 8007280:	009b      	lsls	r3, r3, #2
 8007282:	3338      	adds	r3, #56	; 0x38
 8007284:	687a      	ldr	r2, [r7, #4]
 8007286:	4413      	add	r3, r2
 8007288:	3304      	adds	r3, #4
 800728a:	60fb      	str	r3, [r7, #12]
 800728c:	e00c      	b.n	80072a8 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800728e:	78fb      	ldrb	r3, [r7, #3]
 8007290:	f003 020f 	and.w	r2, r3, #15
 8007294:	4613      	mov	r3, r2
 8007296:	00db      	lsls	r3, r3, #3
 8007298:	4413      	add	r3, r2
 800729a:	009b      	lsls	r3, r3, #2
 800729c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80072a0:	687a      	ldr	r2, [r7, #4]
 80072a2:	4413      	add	r3, r2
 80072a4:	3304      	adds	r3, #4
 80072a6:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	68f9      	ldr	r1, [r7, #12]
 80072ae:	4618      	mov	r0, r3
 80072b0:	f003 fe5e 	bl	800af70 <USB_EPStopXfer>
 80072b4:	4603      	mov	r3, r0
 80072b6:	72fb      	strb	r3, [r7, #11]

  return ret;
 80072b8:	7afb      	ldrb	r3, [r7, #11]
}
 80072ba:	4618      	mov	r0, r3
 80072bc:	3710      	adds	r7, #16
 80072be:	46bd      	mov	sp, r7
 80072c0:	bd80      	pop	{r7, pc}

080072c2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80072c2:	b580      	push	{r7, lr}
 80072c4:	b08a      	sub	sp, #40	; 0x28
 80072c6:	af02      	add	r7, sp, #8
 80072c8:	6078      	str	r0, [r7, #4]
 80072ca:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072d2:	697b      	ldr	r3, [r7, #20]
 80072d4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80072d6:	683a      	ldr	r2, [r7, #0]
 80072d8:	4613      	mov	r3, r2
 80072da:	00db      	lsls	r3, r3, #3
 80072dc:	4413      	add	r3, r2
 80072de:	009b      	lsls	r3, r3, #2
 80072e0:	3338      	adds	r3, #56	; 0x38
 80072e2:	687a      	ldr	r2, [r7, #4]
 80072e4:	4413      	add	r3, r2
 80072e6:	3304      	adds	r3, #4
 80072e8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	6a1a      	ldr	r2, [r3, #32]
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	699b      	ldr	r3, [r3, #24]
 80072f2:	429a      	cmp	r2, r3
 80072f4:	d901      	bls.n	80072fa <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80072f6:	2301      	movs	r3, #1
 80072f8:	e06c      	b.n	80073d4 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	699a      	ldr	r2, [r3, #24]
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	6a1b      	ldr	r3, [r3, #32]
 8007302:	1ad3      	subs	r3, r2, r3
 8007304:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	68db      	ldr	r3, [r3, #12]
 800730a:	69fa      	ldr	r2, [r7, #28]
 800730c:	429a      	cmp	r2, r3
 800730e:	d902      	bls.n	8007316 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	68db      	ldr	r3, [r3, #12]
 8007314:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8007316:	69fb      	ldr	r3, [r7, #28]
 8007318:	3303      	adds	r3, #3
 800731a:	089b      	lsrs	r3, r3, #2
 800731c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800731e:	e02b      	b.n	8007378 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	699a      	ldr	r2, [r3, #24]
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	6a1b      	ldr	r3, [r3, #32]
 8007328:	1ad3      	subs	r3, r2, r3
 800732a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	68db      	ldr	r3, [r3, #12]
 8007330:	69fa      	ldr	r2, [r7, #28]
 8007332:	429a      	cmp	r2, r3
 8007334:	d902      	bls.n	800733c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	68db      	ldr	r3, [r3, #12]
 800733a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800733c:	69fb      	ldr	r3, [r7, #28]
 800733e:	3303      	adds	r3, #3
 8007340:	089b      	lsrs	r3, r3, #2
 8007342:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	6919      	ldr	r1, [r3, #16]
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	b2da      	uxtb	r2, r3
 800734c:	69fb      	ldr	r3, [r7, #28]
 800734e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007354:	b2db      	uxtb	r3, r3
 8007356:	9300      	str	r3, [sp, #0]
 8007358:	4603      	mov	r3, r0
 800735a:	6978      	ldr	r0, [r7, #20]
 800735c:	f003 feb2 	bl	800b0c4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	691a      	ldr	r2, [r3, #16]
 8007364:	69fb      	ldr	r3, [r7, #28]
 8007366:	441a      	add	r2, r3
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	6a1a      	ldr	r2, [r3, #32]
 8007370:	69fb      	ldr	r3, [r7, #28]
 8007372:	441a      	add	r2, r3
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	015a      	lsls	r2, r3, #5
 800737c:	693b      	ldr	r3, [r7, #16]
 800737e:	4413      	add	r3, r2
 8007380:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007384:	699b      	ldr	r3, [r3, #24]
 8007386:	b29b      	uxth	r3, r3
 8007388:	69ba      	ldr	r2, [r7, #24]
 800738a:	429a      	cmp	r2, r3
 800738c:	d809      	bhi.n	80073a2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	6a1a      	ldr	r2, [r3, #32]
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007396:	429a      	cmp	r2, r3
 8007398:	d203      	bcs.n	80073a2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	699b      	ldr	r3, [r3, #24]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d1be      	bne.n	8007320 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	699a      	ldr	r2, [r3, #24]
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	6a1b      	ldr	r3, [r3, #32]
 80073aa:	429a      	cmp	r2, r3
 80073ac:	d811      	bhi.n	80073d2 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	f003 030f 	and.w	r3, r3, #15
 80073b4:	2201      	movs	r2, #1
 80073b6:	fa02 f303 	lsl.w	r3, r2, r3
 80073ba:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80073bc:	693b      	ldr	r3, [r7, #16]
 80073be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80073c4:	68bb      	ldr	r3, [r7, #8]
 80073c6:	43db      	mvns	r3, r3
 80073c8:	6939      	ldr	r1, [r7, #16]
 80073ca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80073ce:	4013      	ands	r3, r2
 80073d0:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80073d2:	2300      	movs	r3, #0
}
 80073d4:	4618      	mov	r0, r3
 80073d6:	3720      	adds	r7, #32
 80073d8:	46bd      	mov	sp, r7
 80073da:	bd80      	pop	{r7, pc}

080073dc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b088      	sub	sp, #32
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
 80073e4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073ec:	69fb      	ldr	r3, [r7, #28]
 80073ee:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80073f0:	69fb      	ldr	r3, [r7, #28]
 80073f2:	333c      	adds	r3, #60	; 0x3c
 80073f4:	3304      	adds	r3, #4
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	015a      	lsls	r2, r3, #5
 80073fe:	69bb      	ldr	r3, [r7, #24]
 8007400:	4413      	add	r3, r2
 8007402:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007406:	689b      	ldr	r3, [r3, #8]
 8007408:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	691b      	ldr	r3, [r3, #16]
 800740e:	2b01      	cmp	r3, #1
 8007410:	d17b      	bne.n	800750a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8007412:	693b      	ldr	r3, [r7, #16]
 8007414:	f003 0308 	and.w	r3, r3, #8
 8007418:	2b00      	cmp	r3, #0
 800741a:	d015      	beq.n	8007448 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800741c:	697b      	ldr	r3, [r7, #20]
 800741e:	4a61      	ldr	r2, [pc, #388]	; (80075a4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8007420:	4293      	cmp	r3, r2
 8007422:	f240 80b9 	bls.w	8007598 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007426:	693b      	ldr	r3, [r7, #16]
 8007428:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800742c:	2b00      	cmp	r3, #0
 800742e:	f000 80b3 	beq.w	8007598 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	015a      	lsls	r2, r3, #5
 8007436:	69bb      	ldr	r3, [r7, #24]
 8007438:	4413      	add	r3, r2
 800743a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800743e:	461a      	mov	r2, r3
 8007440:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007444:	6093      	str	r3, [r2, #8]
 8007446:	e0a7      	b.n	8007598 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8007448:	693b      	ldr	r3, [r7, #16]
 800744a:	f003 0320 	and.w	r3, r3, #32
 800744e:	2b00      	cmp	r3, #0
 8007450:	d009      	beq.n	8007466 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	015a      	lsls	r2, r3, #5
 8007456:	69bb      	ldr	r3, [r7, #24]
 8007458:	4413      	add	r3, r2
 800745a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800745e:	461a      	mov	r2, r3
 8007460:	2320      	movs	r3, #32
 8007462:	6093      	str	r3, [r2, #8]
 8007464:	e098      	b.n	8007598 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8007466:	693b      	ldr	r3, [r7, #16]
 8007468:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800746c:	2b00      	cmp	r3, #0
 800746e:	f040 8093 	bne.w	8007598 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007472:	697b      	ldr	r3, [r7, #20]
 8007474:	4a4b      	ldr	r2, [pc, #300]	; (80075a4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8007476:	4293      	cmp	r3, r2
 8007478:	d90f      	bls.n	800749a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800747a:	693b      	ldr	r3, [r7, #16]
 800747c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007480:	2b00      	cmp	r3, #0
 8007482:	d00a      	beq.n	800749a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	015a      	lsls	r2, r3, #5
 8007488:	69bb      	ldr	r3, [r7, #24]
 800748a:	4413      	add	r3, r2
 800748c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007490:	461a      	mov	r2, r3
 8007492:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007496:	6093      	str	r3, [r2, #8]
 8007498:	e07e      	b.n	8007598 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800749a:	683a      	ldr	r2, [r7, #0]
 800749c:	4613      	mov	r3, r2
 800749e:	00db      	lsls	r3, r3, #3
 80074a0:	4413      	add	r3, r2
 80074a2:	009b      	lsls	r3, r3, #2
 80074a4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80074a8:	687a      	ldr	r2, [r7, #4]
 80074aa:	4413      	add	r3, r2
 80074ac:	3304      	adds	r3, #4
 80074ae:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	69da      	ldr	r2, [r3, #28]
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	0159      	lsls	r1, r3, #5
 80074b8:	69bb      	ldr	r3, [r7, #24]
 80074ba:	440b      	add	r3, r1
 80074bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074c0:	691b      	ldr	r3, [r3, #16]
 80074c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80074c6:	1ad2      	subs	r2, r2, r3
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d114      	bne.n	80074fc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	699b      	ldr	r3, [r3, #24]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d109      	bne.n	80074ee <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6818      	ldr	r0, [r3, #0]
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80074e4:	461a      	mov	r2, r3
 80074e6:	2101      	movs	r1, #1
 80074e8:	f004 f882 	bl	800b5f0 <USB_EP0_OutStart>
 80074ec:	e006      	b.n	80074fc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	691a      	ldr	r2, [r3, #16]
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	6a1b      	ldr	r3, [r3, #32]
 80074f6:	441a      	add	r2, r3
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	b2db      	uxtb	r3, r3
 8007500:	4619      	mov	r1, r3
 8007502:	6878      	ldr	r0, [r7, #4]
 8007504:	f006 f95a 	bl	800d7bc <HAL_PCD_DataOutStageCallback>
 8007508:	e046      	b.n	8007598 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800750a:	697b      	ldr	r3, [r7, #20]
 800750c:	4a26      	ldr	r2, [pc, #152]	; (80075a8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800750e:	4293      	cmp	r3, r2
 8007510:	d124      	bne.n	800755c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8007512:	693b      	ldr	r3, [r7, #16]
 8007514:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007518:	2b00      	cmp	r3, #0
 800751a:	d00a      	beq.n	8007532 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	015a      	lsls	r2, r3, #5
 8007520:	69bb      	ldr	r3, [r7, #24]
 8007522:	4413      	add	r3, r2
 8007524:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007528:	461a      	mov	r2, r3
 800752a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800752e:	6093      	str	r3, [r2, #8]
 8007530:	e032      	b.n	8007598 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007532:	693b      	ldr	r3, [r7, #16]
 8007534:	f003 0320 	and.w	r3, r3, #32
 8007538:	2b00      	cmp	r3, #0
 800753a:	d008      	beq.n	800754e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	015a      	lsls	r2, r3, #5
 8007540:	69bb      	ldr	r3, [r7, #24]
 8007542:	4413      	add	r3, r2
 8007544:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007548:	461a      	mov	r2, r3
 800754a:	2320      	movs	r3, #32
 800754c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	b2db      	uxtb	r3, r3
 8007552:	4619      	mov	r1, r3
 8007554:	6878      	ldr	r0, [r7, #4]
 8007556:	f006 f931 	bl	800d7bc <HAL_PCD_DataOutStageCallback>
 800755a:	e01d      	b.n	8007598 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d114      	bne.n	800758c <PCD_EP_OutXfrComplete_int+0x1b0>
 8007562:	6879      	ldr	r1, [r7, #4]
 8007564:	683a      	ldr	r2, [r7, #0]
 8007566:	4613      	mov	r3, r2
 8007568:	00db      	lsls	r3, r3, #3
 800756a:	4413      	add	r3, r2
 800756c:	009b      	lsls	r3, r3, #2
 800756e:	440b      	add	r3, r1
 8007570:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d108      	bne.n	800758c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6818      	ldr	r0, [r3, #0]
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007584:	461a      	mov	r2, r3
 8007586:	2100      	movs	r1, #0
 8007588:	f004 f832 	bl	800b5f0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	b2db      	uxtb	r3, r3
 8007590:	4619      	mov	r1, r3
 8007592:	6878      	ldr	r0, [r7, #4]
 8007594:	f006 f912 	bl	800d7bc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8007598:	2300      	movs	r3, #0
}
 800759a:	4618      	mov	r0, r3
 800759c:	3720      	adds	r7, #32
 800759e:	46bd      	mov	sp, r7
 80075a0:	bd80      	pop	{r7, pc}
 80075a2:	bf00      	nop
 80075a4:	4f54300a 	.word	0x4f54300a
 80075a8:	4f54310a 	.word	0x4f54310a

080075ac <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b086      	sub	sp, #24
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
 80075b4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075bc:	697b      	ldr	r3, [r7, #20]
 80075be:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80075c0:	697b      	ldr	r3, [r7, #20]
 80075c2:	333c      	adds	r3, #60	; 0x3c
 80075c4:	3304      	adds	r3, #4
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	015a      	lsls	r2, r3, #5
 80075ce:	693b      	ldr	r3, [r7, #16]
 80075d0:	4413      	add	r3, r2
 80075d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075d6:	689b      	ldr	r3, [r3, #8]
 80075d8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	4a15      	ldr	r2, [pc, #84]	; (8007634 <PCD_EP_OutSetupPacket_int+0x88>)
 80075de:	4293      	cmp	r3, r2
 80075e0:	d90e      	bls.n	8007600 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80075e2:	68bb      	ldr	r3, [r7, #8]
 80075e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d009      	beq.n	8007600 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	015a      	lsls	r2, r3, #5
 80075f0:	693b      	ldr	r3, [r7, #16]
 80075f2:	4413      	add	r3, r2
 80075f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075f8:	461a      	mov	r2, r3
 80075fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80075fe:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8007600:	6878      	ldr	r0, [r7, #4]
 8007602:	f006 f8c9 	bl	800d798 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	4a0a      	ldr	r2, [pc, #40]	; (8007634 <PCD_EP_OutSetupPacket_int+0x88>)
 800760a:	4293      	cmp	r3, r2
 800760c:	d90c      	bls.n	8007628 <PCD_EP_OutSetupPacket_int+0x7c>
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	691b      	ldr	r3, [r3, #16]
 8007612:	2b01      	cmp	r3, #1
 8007614:	d108      	bne.n	8007628 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6818      	ldr	r0, [r3, #0]
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007620:	461a      	mov	r2, r3
 8007622:	2101      	movs	r1, #1
 8007624:	f003 ffe4 	bl	800b5f0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8007628:	2300      	movs	r3, #0
}
 800762a:	4618      	mov	r0, r3
 800762c:	3718      	adds	r7, #24
 800762e:	46bd      	mov	sp, r7
 8007630:	bd80      	pop	{r7, pc}
 8007632:	bf00      	nop
 8007634:	4f54300a 	.word	0x4f54300a

08007638 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8007638:	b480      	push	{r7}
 800763a:	b085      	sub	sp, #20
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
 8007640:	460b      	mov	r3, r1
 8007642:	70fb      	strb	r3, [r7, #3]
 8007644:	4613      	mov	r3, r2
 8007646:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800764e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8007650:	78fb      	ldrb	r3, [r7, #3]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d107      	bne.n	8007666 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8007656:	883b      	ldrh	r3, [r7, #0]
 8007658:	0419      	lsls	r1, r3, #16
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	68ba      	ldr	r2, [r7, #8]
 8007660:	430a      	orrs	r2, r1
 8007662:	629a      	str	r2, [r3, #40]	; 0x28
 8007664:	e028      	b.n	80076b8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800766c:	0c1b      	lsrs	r3, r3, #16
 800766e:	68ba      	ldr	r2, [r7, #8]
 8007670:	4413      	add	r3, r2
 8007672:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007674:	2300      	movs	r3, #0
 8007676:	73fb      	strb	r3, [r7, #15]
 8007678:	e00d      	b.n	8007696 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681a      	ldr	r2, [r3, #0]
 800767e:	7bfb      	ldrb	r3, [r7, #15]
 8007680:	3340      	adds	r3, #64	; 0x40
 8007682:	009b      	lsls	r3, r3, #2
 8007684:	4413      	add	r3, r2
 8007686:	685b      	ldr	r3, [r3, #4]
 8007688:	0c1b      	lsrs	r3, r3, #16
 800768a:	68ba      	ldr	r2, [r7, #8]
 800768c:	4413      	add	r3, r2
 800768e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007690:	7bfb      	ldrb	r3, [r7, #15]
 8007692:	3301      	adds	r3, #1
 8007694:	73fb      	strb	r3, [r7, #15]
 8007696:	7bfa      	ldrb	r2, [r7, #15]
 8007698:	78fb      	ldrb	r3, [r7, #3]
 800769a:	3b01      	subs	r3, #1
 800769c:	429a      	cmp	r2, r3
 800769e:	d3ec      	bcc.n	800767a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80076a0:	883b      	ldrh	r3, [r7, #0]
 80076a2:	0418      	lsls	r0, r3, #16
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	6819      	ldr	r1, [r3, #0]
 80076a8:	78fb      	ldrb	r3, [r7, #3]
 80076aa:	3b01      	subs	r3, #1
 80076ac:	68ba      	ldr	r2, [r7, #8]
 80076ae:	4302      	orrs	r2, r0
 80076b0:	3340      	adds	r3, #64	; 0x40
 80076b2:	009b      	lsls	r3, r3, #2
 80076b4:	440b      	add	r3, r1
 80076b6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80076b8:	2300      	movs	r3, #0
}
 80076ba:	4618      	mov	r0, r3
 80076bc:	3714      	adds	r7, #20
 80076be:	46bd      	mov	sp, r7
 80076c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c4:	4770      	bx	lr

080076c6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80076c6:	b480      	push	{r7}
 80076c8:	b083      	sub	sp, #12
 80076ca:	af00      	add	r7, sp, #0
 80076cc:	6078      	str	r0, [r7, #4]
 80076ce:	460b      	mov	r3, r1
 80076d0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	887a      	ldrh	r2, [r7, #2]
 80076d8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80076da:	2300      	movs	r3, #0
}
 80076dc:	4618      	mov	r0, r3
 80076de:	370c      	adds	r7, #12
 80076e0:	46bd      	mov	sp, r7
 80076e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e6:	4770      	bx	lr

080076e8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80076e8:	b480      	push	{r7}
 80076ea:	b083      	sub	sp, #12
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
 80076f0:	460b      	mov	r3, r1
 80076f2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80076f4:	bf00      	nop
 80076f6:	370c      	adds	r7, #12
 80076f8:	46bd      	mov	sp, r7
 80076fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fe:	4770      	bx	lr

08007700 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b086      	sub	sp, #24
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d101      	bne.n	8007712 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800770e:	2301      	movs	r3, #1
 8007710:	e267      	b.n	8007be2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f003 0301 	and.w	r3, r3, #1
 800771a:	2b00      	cmp	r3, #0
 800771c:	d075      	beq.n	800780a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800771e:	4b88      	ldr	r3, [pc, #544]	; (8007940 <HAL_RCC_OscConfig+0x240>)
 8007720:	689b      	ldr	r3, [r3, #8]
 8007722:	f003 030c 	and.w	r3, r3, #12
 8007726:	2b04      	cmp	r3, #4
 8007728:	d00c      	beq.n	8007744 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800772a:	4b85      	ldr	r3, [pc, #532]	; (8007940 <HAL_RCC_OscConfig+0x240>)
 800772c:	689b      	ldr	r3, [r3, #8]
 800772e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007732:	2b08      	cmp	r3, #8
 8007734:	d112      	bne.n	800775c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007736:	4b82      	ldr	r3, [pc, #520]	; (8007940 <HAL_RCC_OscConfig+0x240>)
 8007738:	685b      	ldr	r3, [r3, #4]
 800773a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800773e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007742:	d10b      	bne.n	800775c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007744:	4b7e      	ldr	r3, [pc, #504]	; (8007940 <HAL_RCC_OscConfig+0x240>)
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800774c:	2b00      	cmp	r3, #0
 800774e:	d05b      	beq.n	8007808 <HAL_RCC_OscConfig+0x108>
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	685b      	ldr	r3, [r3, #4]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d157      	bne.n	8007808 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007758:	2301      	movs	r3, #1
 800775a:	e242      	b.n	8007be2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	685b      	ldr	r3, [r3, #4]
 8007760:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007764:	d106      	bne.n	8007774 <HAL_RCC_OscConfig+0x74>
 8007766:	4b76      	ldr	r3, [pc, #472]	; (8007940 <HAL_RCC_OscConfig+0x240>)
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	4a75      	ldr	r2, [pc, #468]	; (8007940 <HAL_RCC_OscConfig+0x240>)
 800776c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007770:	6013      	str	r3, [r2, #0]
 8007772:	e01d      	b.n	80077b0 <HAL_RCC_OscConfig+0xb0>
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	685b      	ldr	r3, [r3, #4]
 8007778:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800777c:	d10c      	bne.n	8007798 <HAL_RCC_OscConfig+0x98>
 800777e:	4b70      	ldr	r3, [pc, #448]	; (8007940 <HAL_RCC_OscConfig+0x240>)
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	4a6f      	ldr	r2, [pc, #444]	; (8007940 <HAL_RCC_OscConfig+0x240>)
 8007784:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007788:	6013      	str	r3, [r2, #0]
 800778a:	4b6d      	ldr	r3, [pc, #436]	; (8007940 <HAL_RCC_OscConfig+0x240>)
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	4a6c      	ldr	r2, [pc, #432]	; (8007940 <HAL_RCC_OscConfig+0x240>)
 8007790:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007794:	6013      	str	r3, [r2, #0]
 8007796:	e00b      	b.n	80077b0 <HAL_RCC_OscConfig+0xb0>
 8007798:	4b69      	ldr	r3, [pc, #420]	; (8007940 <HAL_RCC_OscConfig+0x240>)
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	4a68      	ldr	r2, [pc, #416]	; (8007940 <HAL_RCC_OscConfig+0x240>)
 800779e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80077a2:	6013      	str	r3, [r2, #0]
 80077a4:	4b66      	ldr	r3, [pc, #408]	; (8007940 <HAL_RCC_OscConfig+0x240>)
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	4a65      	ldr	r2, [pc, #404]	; (8007940 <HAL_RCC_OscConfig+0x240>)
 80077aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80077ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	685b      	ldr	r3, [r3, #4]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d013      	beq.n	80077e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80077b8:	f7fc f8a0 	bl	80038fc <HAL_GetTick>
 80077bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80077be:	e008      	b.n	80077d2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80077c0:	f7fc f89c 	bl	80038fc <HAL_GetTick>
 80077c4:	4602      	mov	r2, r0
 80077c6:	693b      	ldr	r3, [r7, #16]
 80077c8:	1ad3      	subs	r3, r2, r3
 80077ca:	2b64      	cmp	r3, #100	; 0x64
 80077cc:	d901      	bls.n	80077d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80077ce:	2303      	movs	r3, #3
 80077d0:	e207      	b.n	8007be2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80077d2:	4b5b      	ldr	r3, [pc, #364]	; (8007940 <HAL_RCC_OscConfig+0x240>)
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d0f0      	beq.n	80077c0 <HAL_RCC_OscConfig+0xc0>
 80077de:	e014      	b.n	800780a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80077e0:	f7fc f88c 	bl	80038fc <HAL_GetTick>
 80077e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80077e6:	e008      	b.n	80077fa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80077e8:	f7fc f888 	bl	80038fc <HAL_GetTick>
 80077ec:	4602      	mov	r2, r0
 80077ee:	693b      	ldr	r3, [r7, #16]
 80077f0:	1ad3      	subs	r3, r2, r3
 80077f2:	2b64      	cmp	r3, #100	; 0x64
 80077f4:	d901      	bls.n	80077fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80077f6:	2303      	movs	r3, #3
 80077f8:	e1f3      	b.n	8007be2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80077fa:	4b51      	ldr	r3, [pc, #324]	; (8007940 <HAL_RCC_OscConfig+0x240>)
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007802:	2b00      	cmp	r3, #0
 8007804:	d1f0      	bne.n	80077e8 <HAL_RCC_OscConfig+0xe8>
 8007806:	e000      	b.n	800780a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007808:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	f003 0302 	and.w	r3, r3, #2
 8007812:	2b00      	cmp	r3, #0
 8007814:	d063      	beq.n	80078de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007816:	4b4a      	ldr	r3, [pc, #296]	; (8007940 <HAL_RCC_OscConfig+0x240>)
 8007818:	689b      	ldr	r3, [r3, #8]
 800781a:	f003 030c 	and.w	r3, r3, #12
 800781e:	2b00      	cmp	r3, #0
 8007820:	d00b      	beq.n	800783a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007822:	4b47      	ldr	r3, [pc, #284]	; (8007940 <HAL_RCC_OscConfig+0x240>)
 8007824:	689b      	ldr	r3, [r3, #8]
 8007826:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800782a:	2b08      	cmp	r3, #8
 800782c:	d11c      	bne.n	8007868 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800782e:	4b44      	ldr	r3, [pc, #272]	; (8007940 <HAL_RCC_OscConfig+0x240>)
 8007830:	685b      	ldr	r3, [r3, #4]
 8007832:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007836:	2b00      	cmp	r3, #0
 8007838:	d116      	bne.n	8007868 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800783a:	4b41      	ldr	r3, [pc, #260]	; (8007940 <HAL_RCC_OscConfig+0x240>)
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f003 0302 	and.w	r3, r3, #2
 8007842:	2b00      	cmp	r3, #0
 8007844:	d005      	beq.n	8007852 <HAL_RCC_OscConfig+0x152>
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	68db      	ldr	r3, [r3, #12]
 800784a:	2b01      	cmp	r3, #1
 800784c:	d001      	beq.n	8007852 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800784e:	2301      	movs	r3, #1
 8007850:	e1c7      	b.n	8007be2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007852:	4b3b      	ldr	r3, [pc, #236]	; (8007940 <HAL_RCC_OscConfig+0x240>)
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	691b      	ldr	r3, [r3, #16]
 800785e:	00db      	lsls	r3, r3, #3
 8007860:	4937      	ldr	r1, [pc, #220]	; (8007940 <HAL_RCC_OscConfig+0x240>)
 8007862:	4313      	orrs	r3, r2
 8007864:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007866:	e03a      	b.n	80078de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	68db      	ldr	r3, [r3, #12]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d020      	beq.n	80078b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007870:	4b34      	ldr	r3, [pc, #208]	; (8007944 <HAL_RCC_OscConfig+0x244>)
 8007872:	2201      	movs	r2, #1
 8007874:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007876:	f7fc f841 	bl	80038fc <HAL_GetTick>
 800787a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800787c:	e008      	b.n	8007890 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800787e:	f7fc f83d 	bl	80038fc <HAL_GetTick>
 8007882:	4602      	mov	r2, r0
 8007884:	693b      	ldr	r3, [r7, #16]
 8007886:	1ad3      	subs	r3, r2, r3
 8007888:	2b02      	cmp	r3, #2
 800788a:	d901      	bls.n	8007890 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800788c:	2303      	movs	r3, #3
 800788e:	e1a8      	b.n	8007be2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007890:	4b2b      	ldr	r3, [pc, #172]	; (8007940 <HAL_RCC_OscConfig+0x240>)
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f003 0302 	and.w	r3, r3, #2
 8007898:	2b00      	cmp	r3, #0
 800789a:	d0f0      	beq.n	800787e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800789c:	4b28      	ldr	r3, [pc, #160]	; (8007940 <HAL_RCC_OscConfig+0x240>)
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	691b      	ldr	r3, [r3, #16]
 80078a8:	00db      	lsls	r3, r3, #3
 80078aa:	4925      	ldr	r1, [pc, #148]	; (8007940 <HAL_RCC_OscConfig+0x240>)
 80078ac:	4313      	orrs	r3, r2
 80078ae:	600b      	str	r3, [r1, #0]
 80078b0:	e015      	b.n	80078de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80078b2:	4b24      	ldr	r3, [pc, #144]	; (8007944 <HAL_RCC_OscConfig+0x244>)
 80078b4:	2200      	movs	r2, #0
 80078b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078b8:	f7fc f820 	bl	80038fc <HAL_GetTick>
 80078bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80078be:	e008      	b.n	80078d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80078c0:	f7fc f81c 	bl	80038fc <HAL_GetTick>
 80078c4:	4602      	mov	r2, r0
 80078c6:	693b      	ldr	r3, [r7, #16]
 80078c8:	1ad3      	subs	r3, r2, r3
 80078ca:	2b02      	cmp	r3, #2
 80078cc:	d901      	bls.n	80078d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80078ce:	2303      	movs	r3, #3
 80078d0:	e187      	b.n	8007be2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80078d2:	4b1b      	ldr	r3, [pc, #108]	; (8007940 <HAL_RCC_OscConfig+0x240>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f003 0302 	and.w	r3, r3, #2
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d1f0      	bne.n	80078c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f003 0308 	and.w	r3, r3, #8
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d036      	beq.n	8007958 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	695b      	ldr	r3, [r3, #20]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d016      	beq.n	8007920 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80078f2:	4b15      	ldr	r3, [pc, #84]	; (8007948 <HAL_RCC_OscConfig+0x248>)
 80078f4:	2201      	movs	r2, #1
 80078f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078f8:	f7fc f800 	bl	80038fc <HAL_GetTick>
 80078fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80078fe:	e008      	b.n	8007912 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007900:	f7fb fffc 	bl	80038fc <HAL_GetTick>
 8007904:	4602      	mov	r2, r0
 8007906:	693b      	ldr	r3, [r7, #16]
 8007908:	1ad3      	subs	r3, r2, r3
 800790a:	2b02      	cmp	r3, #2
 800790c:	d901      	bls.n	8007912 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800790e:	2303      	movs	r3, #3
 8007910:	e167      	b.n	8007be2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007912:	4b0b      	ldr	r3, [pc, #44]	; (8007940 <HAL_RCC_OscConfig+0x240>)
 8007914:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007916:	f003 0302 	and.w	r3, r3, #2
 800791a:	2b00      	cmp	r3, #0
 800791c:	d0f0      	beq.n	8007900 <HAL_RCC_OscConfig+0x200>
 800791e:	e01b      	b.n	8007958 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007920:	4b09      	ldr	r3, [pc, #36]	; (8007948 <HAL_RCC_OscConfig+0x248>)
 8007922:	2200      	movs	r2, #0
 8007924:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007926:	f7fb ffe9 	bl	80038fc <HAL_GetTick>
 800792a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800792c:	e00e      	b.n	800794c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800792e:	f7fb ffe5 	bl	80038fc <HAL_GetTick>
 8007932:	4602      	mov	r2, r0
 8007934:	693b      	ldr	r3, [r7, #16]
 8007936:	1ad3      	subs	r3, r2, r3
 8007938:	2b02      	cmp	r3, #2
 800793a:	d907      	bls.n	800794c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800793c:	2303      	movs	r3, #3
 800793e:	e150      	b.n	8007be2 <HAL_RCC_OscConfig+0x4e2>
 8007940:	40023800 	.word	0x40023800
 8007944:	42470000 	.word	0x42470000
 8007948:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800794c:	4b88      	ldr	r3, [pc, #544]	; (8007b70 <HAL_RCC_OscConfig+0x470>)
 800794e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007950:	f003 0302 	and.w	r3, r3, #2
 8007954:	2b00      	cmp	r3, #0
 8007956:	d1ea      	bne.n	800792e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f003 0304 	and.w	r3, r3, #4
 8007960:	2b00      	cmp	r3, #0
 8007962:	f000 8097 	beq.w	8007a94 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007966:	2300      	movs	r3, #0
 8007968:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800796a:	4b81      	ldr	r3, [pc, #516]	; (8007b70 <HAL_RCC_OscConfig+0x470>)
 800796c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800796e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007972:	2b00      	cmp	r3, #0
 8007974:	d10f      	bne.n	8007996 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007976:	2300      	movs	r3, #0
 8007978:	60bb      	str	r3, [r7, #8]
 800797a:	4b7d      	ldr	r3, [pc, #500]	; (8007b70 <HAL_RCC_OscConfig+0x470>)
 800797c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800797e:	4a7c      	ldr	r2, [pc, #496]	; (8007b70 <HAL_RCC_OscConfig+0x470>)
 8007980:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007984:	6413      	str	r3, [r2, #64]	; 0x40
 8007986:	4b7a      	ldr	r3, [pc, #488]	; (8007b70 <HAL_RCC_OscConfig+0x470>)
 8007988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800798a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800798e:	60bb      	str	r3, [r7, #8]
 8007990:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007992:	2301      	movs	r3, #1
 8007994:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007996:	4b77      	ldr	r3, [pc, #476]	; (8007b74 <HAL_RCC_OscConfig+0x474>)
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d118      	bne.n	80079d4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80079a2:	4b74      	ldr	r3, [pc, #464]	; (8007b74 <HAL_RCC_OscConfig+0x474>)
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	4a73      	ldr	r2, [pc, #460]	; (8007b74 <HAL_RCC_OscConfig+0x474>)
 80079a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80079ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80079ae:	f7fb ffa5 	bl	80038fc <HAL_GetTick>
 80079b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80079b4:	e008      	b.n	80079c8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80079b6:	f7fb ffa1 	bl	80038fc <HAL_GetTick>
 80079ba:	4602      	mov	r2, r0
 80079bc:	693b      	ldr	r3, [r7, #16]
 80079be:	1ad3      	subs	r3, r2, r3
 80079c0:	2b02      	cmp	r3, #2
 80079c2:	d901      	bls.n	80079c8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80079c4:	2303      	movs	r3, #3
 80079c6:	e10c      	b.n	8007be2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80079c8:	4b6a      	ldr	r3, [pc, #424]	; (8007b74 <HAL_RCC_OscConfig+0x474>)
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d0f0      	beq.n	80079b6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	689b      	ldr	r3, [r3, #8]
 80079d8:	2b01      	cmp	r3, #1
 80079da:	d106      	bne.n	80079ea <HAL_RCC_OscConfig+0x2ea>
 80079dc:	4b64      	ldr	r3, [pc, #400]	; (8007b70 <HAL_RCC_OscConfig+0x470>)
 80079de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079e0:	4a63      	ldr	r2, [pc, #396]	; (8007b70 <HAL_RCC_OscConfig+0x470>)
 80079e2:	f043 0301 	orr.w	r3, r3, #1
 80079e6:	6713      	str	r3, [r2, #112]	; 0x70
 80079e8:	e01c      	b.n	8007a24 <HAL_RCC_OscConfig+0x324>
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	689b      	ldr	r3, [r3, #8]
 80079ee:	2b05      	cmp	r3, #5
 80079f0:	d10c      	bne.n	8007a0c <HAL_RCC_OscConfig+0x30c>
 80079f2:	4b5f      	ldr	r3, [pc, #380]	; (8007b70 <HAL_RCC_OscConfig+0x470>)
 80079f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079f6:	4a5e      	ldr	r2, [pc, #376]	; (8007b70 <HAL_RCC_OscConfig+0x470>)
 80079f8:	f043 0304 	orr.w	r3, r3, #4
 80079fc:	6713      	str	r3, [r2, #112]	; 0x70
 80079fe:	4b5c      	ldr	r3, [pc, #368]	; (8007b70 <HAL_RCC_OscConfig+0x470>)
 8007a00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a02:	4a5b      	ldr	r2, [pc, #364]	; (8007b70 <HAL_RCC_OscConfig+0x470>)
 8007a04:	f043 0301 	orr.w	r3, r3, #1
 8007a08:	6713      	str	r3, [r2, #112]	; 0x70
 8007a0a:	e00b      	b.n	8007a24 <HAL_RCC_OscConfig+0x324>
 8007a0c:	4b58      	ldr	r3, [pc, #352]	; (8007b70 <HAL_RCC_OscConfig+0x470>)
 8007a0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a10:	4a57      	ldr	r2, [pc, #348]	; (8007b70 <HAL_RCC_OscConfig+0x470>)
 8007a12:	f023 0301 	bic.w	r3, r3, #1
 8007a16:	6713      	str	r3, [r2, #112]	; 0x70
 8007a18:	4b55      	ldr	r3, [pc, #340]	; (8007b70 <HAL_RCC_OscConfig+0x470>)
 8007a1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a1c:	4a54      	ldr	r2, [pc, #336]	; (8007b70 <HAL_RCC_OscConfig+0x470>)
 8007a1e:	f023 0304 	bic.w	r3, r3, #4
 8007a22:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	689b      	ldr	r3, [r3, #8]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d015      	beq.n	8007a58 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a2c:	f7fb ff66 	bl	80038fc <HAL_GetTick>
 8007a30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007a32:	e00a      	b.n	8007a4a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007a34:	f7fb ff62 	bl	80038fc <HAL_GetTick>
 8007a38:	4602      	mov	r2, r0
 8007a3a:	693b      	ldr	r3, [r7, #16]
 8007a3c:	1ad3      	subs	r3, r2, r3
 8007a3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a42:	4293      	cmp	r3, r2
 8007a44:	d901      	bls.n	8007a4a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007a46:	2303      	movs	r3, #3
 8007a48:	e0cb      	b.n	8007be2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007a4a:	4b49      	ldr	r3, [pc, #292]	; (8007b70 <HAL_RCC_OscConfig+0x470>)
 8007a4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a4e:	f003 0302 	and.w	r3, r3, #2
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d0ee      	beq.n	8007a34 <HAL_RCC_OscConfig+0x334>
 8007a56:	e014      	b.n	8007a82 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007a58:	f7fb ff50 	bl	80038fc <HAL_GetTick>
 8007a5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007a5e:	e00a      	b.n	8007a76 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007a60:	f7fb ff4c 	bl	80038fc <HAL_GetTick>
 8007a64:	4602      	mov	r2, r0
 8007a66:	693b      	ldr	r3, [r7, #16]
 8007a68:	1ad3      	subs	r3, r2, r3
 8007a6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a6e:	4293      	cmp	r3, r2
 8007a70:	d901      	bls.n	8007a76 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007a72:	2303      	movs	r3, #3
 8007a74:	e0b5      	b.n	8007be2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007a76:	4b3e      	ldr	r3, [pc, #248]	; (8007b70 <HAL_RCC_OscConfig+0x470>)
 8007a78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a7a:	f003 0302 	and.w	r3, r3, #2
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d1ee      	bne.n	8007a60 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007a82:	7dfb      	ldrb	r3, [r7, #23]
 8007a84:	2b01      	cmp	r3, #1
 8007a86:	d105      	bne.n	8007a94 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007a88:	4b39      	ldr	r3, [pc, #228]	; (8007b70 <HAL_RCC_OscConfig+0x470>)
 8007a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a8c:	4a38      	ldr	r2, [pc, #224]	; (8007b70 <HAL_RCC_OscConfig+0x470>)
 8007a8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007a92:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	699b      	ldr	r3, [r3, #24]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	f000 80a1 	beq.w	8007be0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007a9e:	4b34      	ldr	r3, [pc, #208]	; (8007b70 <HAL_RCC_OscConfig+0x470>)
 8007aa0:	689b      	ldr	r3, [r3, #8]
 8007aa2:	f003 030c 	and.w	r3, r3, #12
 8007aa6:	2b08      	cmp	r3, #8
 8007aa8:	d05c      	beq.n	8007b64 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	699b      	ldr	r3, [r3, #24]
 8007aae:	2b02      	cmp	r3, #2
 8007ab0:	d141      	bne.n	8007b36 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007ab2:	4b31      	ldr	r3, [pc, #196]	; (8007b78 <HAL_RCC_OscConfig+0x478>)
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ab8:	f7fb ff20 	bl	80038fc <HAL_GetTick>
 8007abc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007abe:	e008      	b.n	8007ad2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007ac0:	f7fb ff1c 	bl	80038fc <HAL_GetTick>
 8007ac4:	4602      	mov	r2, r0
 8007ac6:	693b      	ldr	r3, [r7, #16]
 8007ac8:	1ad3      	subs	r3, r2, r3
 8007aca:	2b02      	cmp	r3, #2
 8007acc:	d901      	bls.n	8007ad2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007ace:	2303      	movs	r3, #3
 8007ad0:	e087      	b.n	8007be2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007ad2:	4b27      	ldr	r3, [pc, #156]	; (8007b70 <HAL_RCC_OscConfig+0x470>)
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d1f0      	bne.n	8007ac0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	69da      	ldr	r2, [r3, #28]
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6a1b      	ldr	r3, [r3, #32]
 8007ae6:	431a      	orrs	r2, r3
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aec:	019b      	lsls	r3, r3, #6
 8007aee:	431a      	orrs	r2, r3
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007af4:	085b      	lsrs	r3, r3, #1
 8007af6:	3b01      	subs	r3, #1
 8007af8:	041b      	lsls	r3, r3, #16
 8007afa:	431a      	orrs	r2, r3
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b00:	061b      	lsls	r3, r3, #24
 8007b02:	491b      	ldr	r1, [pc, #108]	; (8007b70 <HAL_RCC_OscConfig+0x470>)
 8007b04:	4313      	orrs	r3, r2
 8007b06:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007b08:	4b1b      	ldr	r3, [pc, #108]	; (8007b78 <HAL_RCC_OscConfig+0x478>)
 8007b0a:	2201      	movs	r2, #1
 8007b0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b0e:	f7fb fef5 	bl	80038fc <HAL_GetTick>
 8007b12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007b14:	e008      	b.n	8007b28 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007b16:	f7fb fef1 	bl	80038fc <HAL_GetTick>
 8007b1a:	4602      	mov	r2, r0
 8007b1c:	693b      	ldr	r3, [r7, #16]
 8007b1e:	1ad3      	subs	r3, r2, r3
 8007b20:	2b02      	cmp	r3, #2
 8007b22:	d901      	bls.n	8007b28 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007b24:	2303      	movs	r3, #3
 8007b26:	e05c      	b.n	8007be2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007b28:	4b11      	ldr	r3, [pc, #68]	; (8007b70 <HAL_RCC_OscConfig+0x470>)
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d0f0      	beq.n	8007b16 <HAL_RCC_OscConfig+0x416>
 8007b34:	e054      	b.n	8007be0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007b36:	4b10      	ldr	r3, [pc, #64]	; (8007b78 <HAL_RCC_OscConfig+0x478>)
 8007b38:	2200      	movs	r2, #0
 8007b3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b3c:	f7fb fede 	bl	80038fc <HAL_GetTick>
 8007b40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b42:	e008      	b.n	8007b56 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007b44:	f7fb feda 	bl	80038fc <HAL_GetTick>
 8007b48:	4602      	mov	r2, r0
 8007b4a:	693b      	ldr	r3, [r7, #16]
 8007b4c:	1ad3      	subs	r3, r2, r3
 8007b4e:	2b02      	cmp	r3, #2
 8007b50:	d901      	bls.n	8007b56 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007b52:	2303      	movs	r3, #3
 8007b54:	e045      	b.n	8007be2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b56:	4b06      	ldr	r3, [pc, #24]	; (8007b70 <HAL_RCC_OscConfig+0x470>)
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d1f0      	bne.n	8007b44 <HAL_RCC_OscConfig+0x444>
 8007b62:	e03d      	b.n	8007be0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	699b      	ldr	r3, [r3, #24]
 8007b68:	2b01      	cmp	r3, #1
 8007b6a:	d107      	bne.n	8007b7c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007b6c:	2301      	movs	r3, #1
 8007b6e:	e038      	b.n	8007be2 <HAL_RCC_OscConfig+0x4e2>
 8007b70:	40023800 	.word	0x40023800
 8007b74:	40007000 	.word	0x40007000
 8007b78:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007b7c:	4b1b      	ldr	r3, [pc, #108]	; (8007bec <HAL_RCC_OscConfig+0x4ec>)
 8007b7e:	685b      	ldr	r3, [r3, #4]
 8007b80:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	699b      	ldr	r3, [r3, #24]
 8007b86:	2b01      	cmp	r3, #1
 8007b88:	d028      	beq.n	8007bdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007b94:	429a      	cmp	r2, r3
 8007b96:	d121      	bne.n	8007bdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007ba2:	429a      	cmp	r2, r3
 8007ba4:	d11a      	bne.n	8007bdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007ba6:	68fa      	ldr	r2, [r7, #12]
 8007ba8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007bac:	4013      	ands	r3, r2
 8007bae:	687a      	ldr	r2, [r7, #4]
 8007bb0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007bb2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007bb4:	4293      	cmp	r3, r2
 8007bb6:	d111      	bne.n	8007bdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bc2:	085b      	lsrs	r3, r3, #1
 8007bc4:	3b01      	subs	r3, #1
 8007bc6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007bc8:	429a      	cmp	r2, r3
 8007bca:	d107      	bne.n	8007bdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bd6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007bd8:	429a      	cmp	r2, r3
 8007bda:	d001      	beq.n	8007be0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007bdc:	2301      	movs	r3, #1
 8007bde:	e000      	b.n	8007be2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007be0:	2300      	movs	r3, #0
}
 8007be2:	4618      	mov	r0, r3
 8007be4:	3718      	adds	r7, #24
 8007be6:	46bd      	mov	sp, r7
 8007be8:	bd80      	pop	{r7, pc}
 8007bea:	bf00      	nop
 8007bec:	40023800 	.word	0x40023800

08007bf0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b084      	sub	sp, #16
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
 8007bf8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d101      	bne.n	8007c04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007c00:	2301      	movs	r3, #1
 8007c02:	e0cc      	b.n	8007d9e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007c04:	4b68      	ldr	r3, [pc, #416]	; (8007da8 <HAL_RCC_ClockConfig+0x1b8>)
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	f003 0307 	and.w	r3, r3, #7
 8007c0c:	683a      	ldr	r2, [r7, #0]
 8007c0e:	429a      	cmp	r2, r3
 8007c10:	d90c      	bls.n	8007c2c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c12:	4b65      	ldr	r3, [pc, #404]	; (8007da8 <HAL_RCC_ClockConfig+0x1b8>)
 8007c14:	683a      	ldr	r2, [r7, #0]
 8007c16:	b2d2      	uxtb	r2, r2
 8007c18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c1a:	4b63      	ldr	r3, [pc, #396]	; (8007da8 <HAL_RCC_ClockConfig+0x1b8>)
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	f003 0307 	and.w	r3, r3, #7
 8007c22:	683a      	ldr	r2, [r7, #0]
 8007c24:	429a      	cmp	r2, r3
 8007c26:	d001      	beq.n	8007c2c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007c28:	2301      	movs	r3, #1
 8007c2a:	e0b8      	b.n	8007d9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f003 0302 	and.w	r3, r3, #2
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d020      	beq.n	8007c7a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f003 0304 	and.w	r3, r3, #4
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d005      	beq.n	8007c50 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007c44:	4b59      	ldr	r3, [pc, #356]	; (8007dac <HAL_RCC_ClockConfig+0x1bc>)
 8007c46:	689b      	ldr	r3, [r3, #8]
 8007c48:	4a58      	ldr	r2, [pc, #352]	; (8007dac <HAL_RCC_ClockConfig+0x1bc>)
 8007c4a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007c4e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f003 0308 	and.w	r3, r3, #8
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d005      	beq.n	8007c68 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007c5c:	4b53      	ldr	r3, [pc, #332]	; (8007dac <HAL_RCC_ClockConfig+0x1bc>)
 8007c5e:	689b      	ldr	r3, [r3, #8]
 8007c60:	4a52      	ldr	r2, [pc, #328]	; (8007dac <HAL_RCC_ClockConfig+0x1bc>)
 8007c62:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007c66:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007c68:	4b50      	ldr	r3, [pc, #320]	; (8007dac <HAL_RCC_ClockConfig+0x1bc>)
 8007c6a:	689b      	ldr	r3, [r3, #8]
 8007c6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	689b      	ldr	r3, [r3, #8]
 8007c74:	494d      	ldr	r1, [pc, #308]	; (8007dac <HAL_RCC_ClockConfig+0x1bc>)
 8007c76:	4313      	orrs	r3, r2
 8007c78:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	f003 0301 	and.w	r3, r3, #1
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d044      	beq.n	8007d10 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	685b      	ldr	r3, [r3, #4]
 8007c8a:	2b01      	cmp	r3, #1
 8007c8c:	d107      	bne.n	8007c9e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007c8e:	4b47      	ldr	r3, [pc, #284]	; (8007dac <HAL_RCC_ClockConfig+0x1bc>)
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d119      	bne.n	8007cce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007c9a:	2301      	movs	r3, #1
 8007c9c:	e07f      	b.n	8007d9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	685b      	ldr	r3, [r3, #4]
 8007ca2:	2b02      	cmp	r3, #2
 8007ca4:	d003      	beq.n	8007cae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007caa:	2b03      	cmp	r3, #3
 8007cac:	d107      	bne.n	8007cbe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007cae:	4b3f      	ldr	r3, [pc, #252]	; (8007dac <HAL_RCC_ClockConfig+0x1bc>)
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d109      	bne.n	8007cce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007cba:	2301      	movs	r3, #1
 8007cbc:	e06f      	b.n	8007d9e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007cbe:	4b3b      	ldr	r3, [pc, #236]	; (8007dac <HAL_RCC_ClockConfig+0x1bc>)
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f003 0302 	and.w	r3, r3, #2
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d101      	bne.n	8007cce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007cca:	2301      	movs	r3, #1
 8007ccc:	e067      	b.n	8007d9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007cce:	4b37      	ldr	r3, [pc, #220]	; (8007dac <HAL_RCC_ClockConfig+0x1bc>)
 8007cd0:	689b      	ldr	r3, [r3, #8]
 8007cd2:	f023 0203 	bic.w	r2, r3, #3
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	685b      	ldr	r3, [r3, #4]
 8007cda:	4934      	ldr	r1, [pc, #208]	; (8007dac <HAL_RCC_ClockConfig+0x1bc>)
 8007cdc:	4313      	orrs	r3, r2
 8007cde:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007ce0:	f7fb fe0c 	bl	80038fc <HAL_GetTick>
 8007ce4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007ce6:	e00a      	b.n	8007cfe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007ce8:	f7fb fe08 	bl	80038fc <HAL_GetTick>
 8007cec:	4602      	mov	r2, r0
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	1ad3      	subs	r3, r2, r3
 8007cf2:	f241 3288 	movw	r2, #5000	; 0x1388
 8007cf6:	4293      	cmp	r3, r2
 8007cf8:	d901      	bls.n	8007cfe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007cfa:	2303      	movs	r3, #3
 8007cfc:	e04f      	b.n	8007d9e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007cfe:	4b2b      	ldr	r3, [pc, #172]	; (8007dac <HAL_RCC_ClockConfig+0x1bc>)
 8007d00:	689b      	ldr	r3, [r3, #8]
 8007d02:	f003 020c 	and.w	r2, r3, #12
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	685b      	ldr	r3, [r3, #4]
 8007d0a:	009b      	lsls	r3, r3, #2
 8007d0c:	429a      	cmp	r2, r3
 8007d0e:	d1eb      	bne.n	8007ce8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007d10:	4b25      	ldr	r3, [pc, #148]	; (8007da8 <HAL_RCC_ClockConfig+0x1b8>)
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f003 0307 	and.w	r3, r3, #7
 8007d18:	683a      	ldr	r2, [r7, #0]
 8007d1a:	429a      	cmp	r2, r3
 8007d1c:	d20c      	bcs.n	8007d38 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007d1e:	4b22      	ldr	r3, [pc, #136]	; (8007da8 <HAL_RCC_ClockConfig+0x1b8>)
 8007d20:	683a      	ldr	r2, [r7, #0]
 8007d22:	b2d2      	uxtb	r2, r2
 8007d24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007d26:	4b20      	ldr	r3, [pc, #128]	; (8007da8 <HAL_RCC_ClockConfig+0x1b8>)
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	f003 0307 	and.w	r3, r3, #7
 8007d2e:	683a      	ldr	r2, [r7, #0]
 8007d30:	429a      	cmp	r2, r3
 8007d32:	d001      	beq.n	8007d38 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007d34:	2301      	movs	r3, #1
 8007d36:	e032      	b.n	8007d9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f003 0304 	and.w	r3, r3, #4
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d008      	beq.n	8007d56 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007d44:	4b19      	ldr	r3, [pc, #100]	; (8007dac <HAL_RCC_ClockConfig+0x1bc>)
 8007d46:	689b      	ldr	r3, [r3, #8]
 8007d48:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	68db      	ldr	r3, [r3, #12]
 8007d50:	4916      	ldr	r1, [pc, #88]	; (8007dac <HAL_RCC_ClockConfig+0x1bc>)
 8007d52:	4313      	orrs	r3, r2
 8007d54:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f003 0308 	and.w	r3, r3, #8
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d009      	beq.n	8007d76 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007d62:	4b12      	ldr	r3, [pc, #72]	; (8007dac <HAL_RCC_ClockConfig+0x1bc>)
 8007d64:	689b      	ldr	r3, [r3, #8]
 8007d66:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	691b      	ldr	r3, [r3, #16]
 8007d6e:	00db      	lsls	r3, r3, #3
 8007d70:	490e      	ldr	r1, [pc, #56]	; (8007dac <HAL_RCC_ClockConfig+0x1bc>)
 8007d72:	4313      	orrs	r3, r2
 8007d74:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007d76:	f000 f821 	bl	8007dbc <HAL_RCC_GetSysClockFreq>
 8007d7a:	4602      	mov	r2, r0
 8007d7c:	4b0b      	ldr	r3, [pc, #44]	; (8007dac <HAL_RCC_ClockConfig+0x1bc>)
 8007d7e:	689b      	ldr	r3, [r3, #8]
 8007d80:	091b      	lsrs	r3, r3, #4
 8007d82:	f003 030f 	and.w	r3, r3, #15
 8007d86:	490a      	ldr	r1, [pc, #40]	; (8007db0 <HAL_RCC_ClockConfig+0x1c0>)
 8007d88:	5ccb      	ldrb	r3, [r1, r3]
 8007d8a:	fa22 f303 	lsr.w	r3, r2, r3
 8007d8e:	4a09      	ldr	r2, [pc, #36]	; (8007db4 <HAL_RCC_ClockConfig+0x1c4>)
 8007d90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007d92:	4b09      	ldr	r3, [pc, #36]	; (8007db8 <HAL_RCC_ClockConfig+0x1c8>)
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	4618      	mov	r0, r3
 8007d98:	f7fb fd6c 	bl	8003874 <HAL_InitTick>

  return HAL_OK;
 8007d9c:	2300      	movs	r3, #0
}
 8007d9e:	4618      	mov	r0, r3
 8007da0:	3710      	adds	r7, #16
 8007da2:	46bd      	mov	sp, r7
 8007da4:	bd80      	pop	{r7, pc}
 8007da6:	bf00      	nop
 8007da8:	40023c00 	.word	0x40023c00
 8007dac:	40023800 	.word	0x40023800
 8007db0:	0800f1a8 	.word	0x0800f1a8
 8007db4:	20000178 	.word	0x20000178
 8007db8:	20000198 	.word	0x20000198

08007dbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007dbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007dc0:	b090      	sub	sp, #64	; 0x40
 8007dc2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	637b      	str	r3, [r7, #52]	; 0x34
 8007dc8:	2300      	movs	r3, #0
 8007dca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007dcc:	2300      	movs	r3, #0
 8007dce:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007dd4:	4b59      	ldr	r3, [pc, #356]	; (8007f3c <HAL_RCC_GetSysClockFreq+0x180>)
 8007dd6:	689b      	ldr	r3, [r3, #8]
 8007dd8:	f003 030c 	and.w	r3, r3, #12
 8007ddc:	2b08      	cmp	r3, #8
 8007dde:	d00d      	beq.n	8007dfc <HAL_RCC_GetSysClockFreq+0x40>
 8007de0:	2b08      	cmp	r3, #8
 8007de2:	f200 80a1 	bhi.w	8007f28 <HAL_RCC_GetSysClockFreq+0x16c>
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d002      	beq.n	8007df0 <HAL_RCC_GetSysClockFreq+0x34>
 8007dea:	2b04      	cmp	r3, #4
 8007dec:	d003      	beq.n	8007df6 <HAL_RCC_GetSysClockFreq+0x3a>
 8007dee:	e09b      	b.n	8007f28 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007df0:	4b53      	ldr	r3, [pc, #332]	; (8007f40 <HAL_RCC_GetSysClockFreq+0x184>)
 8007df2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8007df4:	e09b      	b.n	8007f2e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007df6:	4b53      	ldr	r3, [pc, #332]	; (8007f44 <HAL_RCC_GetSysClockFreq+0x188>)
 8007df8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007dfa:	e098      	b.n	8007f2e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007dfc:	4b4f      	ldr	r3, [pc, #316]	; (8007f3c <HAL_RCC_GetSysClockFreq+0x180>)
 8007dfe:	685b      	ldr	r3, [r3, #4]
 8007e00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007e04:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007e06:	4b4d      	ldr	r3, [pc, #308]	; (8007f3c <HAL_RCC_GetSysClockFreq+0x180>)
 8007e08:	685b      	ldr	r3, [r3, #4]
 8007e0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d028      	beq.n	8007e64 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007e12:	4b4a      	ldr	r3, [pc, #296]	; (8007f3c <HAL_RCC_GetSysClockFreq+0x180>)
 8007e14:	685b      	ldr	r3, [r3, #4]
 8007e16:	099b      	lsrs	r3, r3, #6
 8007e18:	2200      	movs	r2, #0
 8007e1a:	623b      	str	r3, [r7, #32]
 8007e1c:	627a      	str	r2, [r7, #36]	; 0x24
 8007e1e:	6a3b      	ldr	r3, [r7, #32]
 8007e20:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007e24:	2100      	movs	r1, #0
 8007e26:	4b47      	ldr	r3, [pc, #284]	; (8007f44 <HAL_RCC_GetSysClockFreq+0x188>)
 8007e28:	fb03 f201 	mul.w	r2, r3, r1
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	fb00 f303 	mul.w	r3, r0, r3
 8007e32:	4413      	add	r3, r2
 8007e34:	4a43      	ldr	r2, [pc, #268]	; (8007f44 <HAL_RCC_GetSysClockFreq+0x188>)
 8007e36:	fba0 1202 	umull	r1, r2, r0, r2
 8007e3a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007e3c:	460a      	mov	r2, r1
 8007e3e:	62ba      	str	r2, [r7, #40]	; 0x28
 8007e40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e42:	4413      	add	r3, r2
 8007e44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007e46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e48:	2200      	movs	r2, #0
 8007e4a:	61bb      	str	r3, [r7, #24]
 8007e4c:	61fa      	str	r2, [r7, #28]
 8007e4e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007e52:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007e56:	f7f8 fa13 	bl	8000280 <__aeabi_uldivmod>
 8007e5a:	4602      	mov	r2, r0
 8007e5c:	460b      	mov	r3, r1
 8007e5e:	4613      	mov	r3, r2
 8007e60:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e62:	e053      	b.n	8007f0c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007e64:	4b35      	ldr	r3, [pc, #212]	; (8007f3c <HAL_RCC_GetSysClockFreq+0x180>)
 8007e66:	685b      	ldr	r3, [r3, #4]
 8007e68:	099b      	lsrs	r3, r3, #6
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	613b      	str	r3, [r7, #16]
 8007e6e:	617a      	str	r2, [r7, #20]
 8007e70:	693b      	ldr	r3, [r7, #16]
 8007e72:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8007e76:	f04f 0b00 	mov.w	fp, #0
 8007e7a:	4652      	mov	r2, sl
 8007e7c:	465b      	mov	r3, fp
 8007e7e:	f04f 0000 	mov.w	r0, #0
 8007e82:	f04f 0100 	mov.w	r1, #0
 8007e86:	0159      	lsls	r1, r3, #5
 8007e88:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007e8c:	0150      	lsls	r0, r2, #5
 8007e8e:	4602      	mov	r2, r0
 8007e90:	460b      	mov	r3, r1
 8007e92:	ebb2 080a 	subs.w	r8, r2, sl
 8007e96:	eb63 090b 	sbc.w	r9, r3, fp
 8007e9a:	f04f 0200 	mov.w	r2, #0
 8007e9e:	f04f 0300 	mov.w	r3, #0
 8007ea2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8007ea6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8007eaa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8007eae:	ebb2 0408 	subs.w	r4, r2, r8
 8007eb2:	eb63 0509 	sbc.w	r5, r3, r9
 8007eb6:	f04f 0200 	mov.w	r2, #0
 8007eba:	f04f 0300 	mov.w	r3, #0
 8007ebe:	00eb      	lsls	r3, r5, #3
 8007ec0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007ec4:	00e2      	lsls	r2, r4, #3
 8007ec6:	4614      	mov	r4, r2
 8007ec8:	461d      	mov	r5, r3
 8007eca:	eb14 030a 	adds.w	r3, r4, sl
 8007ece:	603b      	str	r3, [r7, #0]
 8007ed0:	eb45 030b 	adc.w	r3, r5, fp
 8007ed4:	607b      	str	r3, [r7, #4]
 8007ed6:	f04f 0200 	mov.w	r2, #0
 8007eda:	f04f 0300 	mov.w	r3, #0
 8007ede:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007ee2:	4629      	mov	r1, r5
 8007ee4:	028b      	lsls	r3, r1, #10
 8007ee6:	4621      	mov	r1, r4
 8007ee8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007eec:	4621      	mov	r1, r4
 8007eee:	028a      	lsls	r2, r1, #10
 8007ef0:	4610      	mov	r0, r2
 8007ef2:	4619      	mov	r1, r3
 8007ef4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	60bb      	str	r3, [r7, #8]
 8007efa:	60fa      	str	r2, [r7, #12]
 8007efc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007f00:	f7f8 f9be 	bl	8000280 <__aeabi_uldivmod>
 8007f04:	4602      	mov	r2, r0
 8007f06:	460b      	mov	r3, r1
 8007f08:	4613      	mov	r3, r2
 8007f0a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007f0c:	4b0b      	ldr	r3, [pc, #44]	; (8007f3c <HAL_RCC_GetSysClockFreq+0x180>)
 8007f0e:	685b      	ldr	r3, [r3, #4]
 8007f10:	0c1b      	lsrs	r3, r3, #16
 8007f12:	f003 0303 	and.w	r3, r3, #3
 8007f16:	3301      	adds	r3, #1
 8007f18:	005b      	lsls	r3, r3, #1
 8007f1a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8007f1c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f20:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f24:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007f26:	e002      	b.n	8007f2e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007f28:	4b05      	ldr	r3, [pc, #20]	; (8007f40 <HAL_RCC_GetSysClockFreq+0x184>)
 8007f2a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007f2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007f2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8007f30:	4618      	mov	r0, r3
 8007f32:	3740      	adds	r7, #64	; 0x40
 8007f34:	46bd      	mov	sp, r7
 8007f36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007f3a:	bf00      	nop
 8007f3c:	40023800 	.word	0x40023800
 8007f40:	00f42400 	.word	0x00f42400
 8007f44:	017d7840 	.word	0x017d7840

08007f48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007f48:	b480      	push	{r7}
 8007f4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007f4c:	4b03      	ldr	r3, [pc, #12]	; (8007f5c <HAL_RCC_GetHCLKFreq+0x14>)
 8007f4e:	681b      	ldr	r3, [r3, #0]
}
 8007f50:	4618      	mov	r0, r3
 8007f52:	46bd      	mov	sp, r7
 8007f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f58:	4770      	bx	lr
 8007f5a:	bf00      	nop
 8007f5c:	20000178 	.word	0x20000178

08007f60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007f64:	f7ff fff0 	bl	8007f48 <HAL_RCC_GetHCLKFreq>
 8007f68:	4602      	mov	r2, r0
 8007f6a:	4b05      	ldr	r3, [pc, #20]	; (8007f80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007f6c:	689b      	ldr	r3, [r3, #8]
 8007f6e:	0a9b      	lsrs	r3, r3, #10
 8007f70:	f003 0307 	and.w	r3, r3, #7
 8007f74:	4903      	ldr	r1, [pc, #12]	; (8007f84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007f76:	5ccb      	ldrb	r3, [r1, r3]
 8007f78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	bd80      	pop	{r7, pc}
 8007f80:	40023800 	.word	0x40023800
 8007f84:	0800f1b8 	.word	0x0800f1b8

08007f88 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b082      	sub	sp, #8
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d101      	bne.n	8007f9a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007f96:	2301      	movs	r3, #1
 8007f98:	e07b      	b.n	8008092 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d108      	bne.n	8007fb4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	685b      	ldr	r3, [r3, #4]
 8007fa6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007faa:	d009      	beq.n	8007fc0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2200      	movs	r2, #0
 8007fb0:	61da      	str	r2, [r3, #28]
 8007fb2:	e005      	b.n	8007fc0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007fcc:	b2db      	uxtb	r3, r3
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d106      	bne.n	8007fe0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007fda:	6878      	ldr	r0, [r7, #4]
 8007fdc:	f7fa fcc2 	bl	8002964 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2202      	movs	r2, #2
 8007fe4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	681a      	ldr	r2, [r3, #0]
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007ff6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	685b      	ldr	r3, [r3, #4]
 8007ffc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	689b      	ldr	r3, [r3, #8]
 8008004:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008008:	431a      	orrs	r2, r3
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	68db      	ldr	r3, [r3, #12]
 800800e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008012:	431a      	orrs	r2, r3
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	691b      	ldr	r3, [r3, #16]
 8008018:	f003 0302 	and.w	r3, r3, #2
 800801c:	431a      	orrs	r2, r3
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	695b      	ldr	r3, [r3, #20]
 8008022:	f003 0301 	and.w	r3, r3, #1
 8008026:	431a      	orrs	r2, r3
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	699b      	ldr	r3, [r3, #24]
 800802c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008030:	431a      	orrs	r2, r3
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	69db      	ldr	r3, [r3, #28]
 8008036:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800803a:	431a      	orrs	r2, r3
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	6a1b      	ldr	r3, [r3, #32]
 8008040:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008044:	ea42 0103 	orr.w	r1, r2, r3
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800804c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	430a      	orrs	r2, r1
 8008056:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	699b      	ldr	r3, [r3, #24]
 800805c:	0c1b      	lsrs	r3, r3, #16
 800805e:	f003 0104 	and.w	r1, r3, #4
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008066:	f003 0210 	and.w	r2, r3, #16
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	430a      	orrs	r2, r1
 8008070:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	69da      	ldr	r2, [r3, #28]
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008080:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	2200      	movs	r2, #0
 8008086:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2201      	movs	r2, #1
 800808c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008090:	2300      	movs	r3, #0
}
 8008092:	4618      	mov	r0, r3
 8008094:	3708      	adds	r7, #8
 8008096:	46bd      	mov	sp, r7
 8008098:	bd80      	pop	{r7, pc}

0800809a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800809a:	b580      	push	{r7, lr}
 800809c:	b088      	sub	sp, #32
 800809e:	af00      	add	r7, sp, #0
 80080a0:	60f8      	str	r0, [r7, #12]
 80080a2:	60b9      	str	r1, [r7, #8]
 80080a4:	603b      	str	r3, [r7, #0]
 80080a6:	4613      	mov	r3, r2
 80080a8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80080aa:	2300      	movs	r3, #0
 80080ac:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80080b4:	2b01      	cmp	r3, #1
 80080b6:	d101      	bne.n	80080bc <HAL_SPI_Transmit+0x22>
 80080b8:	2302      	movs	r3, #2
 80080ba:	e126      	b.n	800830a <HAL_SPI_Transmit+0x270>
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	2201      	movs	r2, #1
 80080c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80080c4:	f7fb fc1a 	bl	80038fc <HAL_GetTick>
 80080c8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80080ca:	88fb      	ldrh	r3, [r7, #6]
 80080cc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80080d4:	b2db      	uxtb	r3, r3
 80080d6:	2b01      	cmp	r3, #1
 80080d8:	d002      	beq.n	80080e0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80080da:	2302      	movs	r3, #2
 80080dc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80080de:	e10b      	b.n	80082f8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80080e0:	68bb      	ldr	r3, [r7, #8]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d002      	beq.n	80080ec <HAL_SPI_Transmit+0x52>
 80080e6:	88fb      	ldrh	r3, [r7, #6]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d102      	bne.n	80080f2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80080ec:	2301      	movs	r3, #1
 80080ee:	77fb      	strb	r3, [r7, #31]
    goto error;
 80080f0:	e102      	b.n	80082f8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	2203      	movs	r2, #3
 80080f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	2200      	movs	r2, #0
 80080fe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	68ba      	ldr	r2, [r7, #8]
 8008104:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	88fa      	ldrh	r2, [r7, #6]
 800810a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	88fa      	ldrh	r2, [r7, #6]
 8008110:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	2200      	movs	r2, #0
 8008116:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	2200      	movs	r2, #0
 800811c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	2200      	movs	r2, #0
 8008122:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	2200      	movs	r2, #0
 8008128:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	2200      	movs	r2, #0
 800812e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	689b      	ldr	r3, [r3, #8]
 8008134:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008138:	d10f      	bne.n	800815a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	681a      	ldr	r2, [r3, #0]
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008148:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	681a      	ldr	r2, [r3, #0]
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008158:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008164:	2b40      	cmp	r3, #64	; 0x40
 8008166:	d007      	beq.n	8008178 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	681a      	ldr	r2, [r3, #0]
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008176:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	68db      	ldr	r3, [r3, #12]
 800817c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008180:	d14b      	bne.n	800821a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	685b      	ldr	r3, [r3, #4]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d002      	beq.n	8008190 <HAL_SPI_Transmit+0xf6>
 800818a:	8afb      	ldrh	r3, [r7, #22]
 800818c:	2b01      	cmp	r3, #1
 800818e:	d13e      	bne.n	800820e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008194:	881a      	ldrh	r2, [r3, #0]
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081a0:	1c9a      	adds	r2, r3, #2
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80081aa:	b29b      	uxth	r3, r3
 80081ac:	3b01      	subs	r3, #1
 80081ae:	b29a      	uxth	r2, r3
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80081b4:	e02b      	b.n	800820e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	689b      	ldr	r3, [r3, #8]
 80081bc:	f003 0302 	and.w	r3, r3, #2
 80081c0:	2b02      	cmp	r3, #2
 80081c2:	d112      	bne.n	80081ea <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081c8:	881a      	ldrh	r2, [r3, #0]
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081d4:	1c9a      	adds	r2, r3, #2
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80081de:	b29b      	uxth	r3, r3
 80081e0:	3b01      	subs	r3, #1
 80081e2:	b29a      	uxth	r2, r3
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	86da      	strh	r2, [r3, #54]	; 0x36
 80081e8:	e011      	b.n	800820e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80081ea:	f7fb fb87 	bl	80038fc <HAL_GetTick>
 80081ee:	4602      	mov	r2, r0
 80081f0:	69bb      	ldr	r3, [r7, #24]
 80081f2:	1ad3      	subs	r3, r2, r3
 80081f4:	683a      	ldr	r2, [r7, #0]
 80081f6:	429a      	cmp	r2, r3
 80081f8:	d803      	bhi.n	8008202 <HAL_SPI_Transmit+0x168>
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008200:	d102      	bne.n	8008208 <HAL_SPI_Transmit+0x16e>
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d102      	bne.n	800820e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8008208:	2303      	movs	r3, #3
 800820a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800820c:	e074      	b.n	80082f8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008212:	b29b      	uxth	r3, r3
 8008214:	2b00      	cmp	r3, #0
 8008216:	d1ce      	bne.n	80081b6 <HAL_SPI_Transmit+0x11c>
 8008218:	e04c      	b.n	80082b4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	685b      	ldr	r3, [r3, #4]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d002      	beq.n	8008228 <HAL_SPI_Transmit+0x18e>
 8008222:	8afb      	ldrh	r3, [r7, #22]
 8008224:	2b01      	cmp	r3, #1
 8008226:	d140      	bne.n	80082aa <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	330c      	adds	r3, #12
 8008232:	7812      	ldrb	r2, [r2, #0]
 8008234:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800823a:	1c5a      	adds	r2, r3, #1
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008244:	b29b      	uxth	r3, r3
 8008246:	3b01      	subs	r3, #1
 8008248:	b29a      	uxth	r2, r3
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800824e:	e02c      	b.n	80082aa <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	689b      	ldr	r3, [r3, #8]
 8008256:	f003 0302 	and.w	r3, r3, #2
 800825a:	2b02      	cmp	r3, #2
 800825c:	d113      	bne.n	8008286 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	330c      	adds	r3, #12
 8008268:	7812      	ldrb	r2, [r2, #0]
 800826a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008270:	1c5a      	adds	r2, r3, #1
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800827a:	b29b      	uxth	r3, r3
 800827c:	3b01      	subs	r3, #1
 800827e:	b29a      	uxth	r2, r3
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	86da      	strh	r2, [r3, #54]	; 0x36
 8008284:	e011      	b.n	80082aa <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008286:	f7fb fb39 	bl	80038fc <HAL_GetTick>
 800828a:	4602      	mov	r2, r0
 800828c:	69bb      	ldr	r3, [r7, #24]
 800828e:	1ad3      	subs	r3, r2, r3
 8008290:	683a      	ldr	r2, [r7, #0]
 8008292:	429a      	cmp	r2, r3
 8008294:	d803      	bhi.n	800829e <HAL_SPI_Transmit+0x204>
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800829c:	d102      	bne.n	80082a4 <HAL_SPI_Transmit+0x20a>
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d102      	bne.n	80082aa <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80082a4:	2303      	movs	r3, #3
 80082a6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80082a8:	e026      	b.n	80082f8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80082ae:	b29b      	uxth	r3, r3
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d1cd      	bne.n	8008250 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80082b4:	69ba      	ldr	r2, [r7, #24]
 80082b6:	6839      	ldr	r1, [r7, #0]
 80082b8:	68f8      	ldr	r0, [r7, #12]
 80082ba:	f000 fbcb 	bl	8008a54 <SPI_EndRxTxTransaction>
 80082be:	4603      	mov	r3, r0
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d002      	beq.n	80082ca <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	2220      	movs	r2, #32
 80082c8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	689b      	ldr	r3, [r3, #8]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d10a      	bne.n	80082e8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80082d2:	2300      	movs	r3, #0
 80082d4:	613b      	str	r3, [r7, #16]
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	68db      	ldr	r3, [r3, #12]
 80082dc:	613b      	str	r3, [r7, #16]
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	689b      	ldr	r3, [r3, #8]
 80082e4:	613b      	str	r3, [r7, #16]
 80082e6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d002      	beq.n	80082f6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80082f0:	2301      	movs	r3, #1
 80082f2:	77fb      	strb	r3, [r7, #31]
 80082f4:	e000      	b.n	80082f8 <HAL_SPI_Transmit+0x25e>
  }

error:
 80082f6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	2201      	movs	r2, #1
 80082fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	2200      	movs	r2, #0
 8008304:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008308:	7ffb      	ldrb	r3, [r7, #31]
}
 800830a:	4618      	mov	r0, r3
 800830c:	3720      	adds	r7, #32
 800830e:	46bd      	mov	sp, r7
 8008310:	bd80      	pop	{r7, pc}

08008312 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008312:	b580      	push	{r7, lr}
 8008314:	b088      	sub	sp, #32
 8008316:	af02      	add	r7, sp, #8
 8008318:	60f8      	str	r0, [r7, #12]
 800831a:	60b9      	str	r1, [r7, #8]
 800831c:	603b      	str	r3, [r7, #0]
 800831e:	4613      	mov	r3, r2
 8008320:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008322:	2300      	movs	r3, #0
 8008324:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	685b      	ldr	r3, [r3, #4]
 800832a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800832e:	d112      	bne.n	8008356 <HAL_SPI_Receive+0x44>
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	689b      	ldr	r3, [r3, #8]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d10e      	bne.n	8008356 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	2204      	movs	r2, #4
 800833c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8008340:	88fa      	ldrh	r2, [r7, #6]
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	9300      	str	r3, [sp, #0]
 8008346:	4613      	mov	r3, r2
 8008348:	68ba      	ldr	r2, [r7, #8]
 800834a:	68b9      	ldr	r1, [r7, #8]
 800834c:	68f8      	ldr	r0, [r7, #12]
 800834e:	f000 f8f1 	bl	8008534 <HAL_SPI_TransmitReceive>
 8008352:	4603      	mov	r3, r0
 8008354:	e0ea      	b.n	800852c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800835c:	2b01      	cmp	r3, #1
 800835e:	d101      	bne.n	8008364 <HAL_SPI_Receive+0x52>
 8008360:	2302      	movs	r3, #2
 8008362:	e0e3      	b.n	800852c <HAL_SPI_Receive+0x21a>
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	2201      	movs	r2, #1
 8008368:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800836c:	f7fb fac6 	bl	80038fc <HAL_GetTick>
 8008370:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008378:	b2db      	uxtb	r3, r3
 800837a:	2b01      	cmp	r3, #1
 800837c:	d002      	beq.n	8008384 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800837e:	2302      	movs	r3, #2
 8008380:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008382:	e0ca      	b.n	800851a <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8008384:	68bb      	ldr	r3, [r7, #8]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d002      	beq.n	8008390 <HAL_SPI_Receive+0x7e>
 800838a:	88fb      	ldrh	r3, [r7, #6]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d102      	bne.n	8008396 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8008390:	2301      	movs	r3, #1
 8008392:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008394:	e0c1      	b.n	800851a <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	2204      	movs	r2, #4
 800839a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	2200      	movs	r2, #0
 80083a2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	68ba      	ldr	r2, [r7, #8]
 80083a8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	88fa      	ldrh	r2, [r7, #6]
 80083ae:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	88fa      	ldrh	r2, [r7, #6]
 80083b4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	2200      	movs	r2, #0
 80083ba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	2200      	movs	r2, #0
 80083c0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	2200      	movs	r2, #0
 80083c6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	2200      	movs	r2, #0
 80083cc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	2200      	movs	r2, #0
 80083d2:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	689b      	ldr	r3, [r3, #8]
 80083d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80083dc:	d10f      	bne.n	80083fe <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	681a      	ldr	r2, [r3, #0]
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80083ec:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	681a      	ldr	r2, [r3, #0]
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80083fc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008408:	2b40      	cmp	r3, #64	; 0x40
 800840a:	d007      	beq.n	800841c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	681a      	ldr	r2, [r3, #0]
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800841a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	68db      	ldr	r3, [r3, #12]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d162      	bne.n	80084ea <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8008424:	e02e      	b.n	8008484 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	689b      	ldr	r3, [r3, #8]
 800842c:	f003 0301 	and.w	r3, r3, #1
 8008430:	2b01      	cmp	r3, #1
 8008432:	d115      	bne.n	8008460 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	f103 020c 	add.w	r2, r3, #12
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008440:	7812      	ldrb	r2, [r2, #0]
 8008442:	b2d2      	uxtb	r2, r2
 8008444:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800844a:	1c5a      	adds	r2, r3, #1
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008454:	b29b      	uxth	r3, r3
 8008456:	3b01      	subs	r3, #1
 8008458:	b29a      	uxth	r2, r3
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800845e:	e011      	b.n	8008484 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008460:	f7fb fa4c 	bl	80038fc <HAL_GetTick>
 8008464:	4602      	mov	r2, r0
 8008466:	693b      	ldr	r3, [r7, #16]
 8008468:	1ad3      	subs	r3, r2, r3
 800846a:	683a      	ldr	r2, [r7, #0]
 800846c:	429a      	cmp	r2, r3
 800846e:	d803      	bhi.n	8008478 <HAL_SPI_Receive+0x166>
 8008470:	683b      	ldr	r3, [r7, #0]
 8008472:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008476:	d102      	bne.n	800847e <HAL_SPI_Receive+0x16c>
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d102      	bne.n	8008484 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800847e:	2303      	movs	r3, #3
 8008480:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008482:	e04a      	b.n	800851a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008488:	b29b      	uxth	r3, r3
 800848a:	2b00      	cmp	r3, #0
 800848c:	d1cb      	bne.n	8008426 <HAL_SPI_Receive+0x114>
 800848e:	e031      	b.n	80084f4 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	689b      	ldr	r3, [r3, #8]
 8008496:	f003 0301 	and.w	r3, r3, #1
 800849a:	2b01      	cmp	r3, #1
 800849c:	d113      	bne.n	80084c6 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	68da      	ldr	r2, [r3, #12]
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084a8:	b292      	uxth	r2, r2
 80084aa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084b0:	1c9a      	adds	r2, r3, #2
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80084ba:	b29b      	uxth	r3, r3
 80084bc:	3b01      	subs	r3, #1
 80084be:	b29a      	uxth	r2, r3
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80084c4:	e011      	b.n	80084ea <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80084c6:	f7fb fa19 	bl	80038fc <HAL_GetTick>
 80084ca:	4602      	mov	r2, r0
 80084cc:	693b      	ldr	r3, [r7, #16]
 80084ce:	1ad3      	subs	r3, r2, r3
 80084d0:	683a      	ldr	r2, [r7, #0]
 80084d2:	429a      	cmp	r2, r3
 80084d4:	d803      	bhi.n	80084de <HAL_SPI_Receive+0x1cc>
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084dc:	d102      	bne.n	80084e4 <HAL_SPI_Receive+0x1d2>
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d102      	bne.n	80084ea <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80084e4:	2303      	movs	r3, #3
 80084e6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80084e8:	e017      	b.n	800851a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80084ee:	b29b      	uxth	r3, r3
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d1cd      	bne.n	8008490 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80084f4:	693a      	ldr	r2, [r7, #16]
 80084f6:	6839      	ldr	r1, [r7, #0]
 80084f8:	68f8      	ldr	r0, [r7, #12]
 80084fa:	f000 fa45 	bl	8008988 <SPI_EndRxTransaction>
 80084fe:	4603      	mov	r3, r0
 8008500:	2b00      	cmp	r3, #0
 8008502:	d002      	beq.n	800850a <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	2220      	movs	r2, #32
 8008508:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800850e:	2b00      	cmp	r3, #0
 8008510:	d002      	beq.n	8008518 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8008512:	2301      	movs	r3, #1
 8008514:	75fb      	strb	r3, [r7, #23]
 8008516:	e000      	b.n	800851a <HAL_SPI_Receive+0x208>
  }

error :
 8008518:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	2201      	movs	r2, #1
 800851e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	2200      	movs	r2, #0
 8008526:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800852a:	7dfb      	ldrb	r3, [r7, #23]
}
 800852c:	4618      	mov	r0, r3
 800852e:	3718      	adds	r7, #24
 8008530:	46bd      	mov	sp, r7
 8008532:	bd80      	pop	{r7, pc}

08008534 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b08c      	sub	sp, #48	; 0x30
 8008538:	af00      	add	r7, sp, #0
 800853a:	60f8      	str	r0, [r7, #12]
 800853c:	60b9      	str	r1, [r7, #8]
 800853e:	607a      	str	r2, [r7, #4]
 8008540:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008542:	2301      	movs	r3, #1
 8008544:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008546:	2300      	movs	r3, #0
 8008548:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008552:	2b01      	cmp	r3, #1
 8008554:	d101      	bne.n	800855a <HAL_SPI_TransmitReceive+0x26>
 8008556:	2302      	movs	r3, #2
 8008558:	e18a      	b.n	8008870 <HAL_SPI_TransmitReceive+0x33c>
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	2201      	movs	r2, #1
 800855e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008562:	f7fb f9cb 	bl	80038fc <HAL_GetTick>
 8008566:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800856e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	685b      	ldr	r3, [r3, #4]
 8008576:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8008578:	887b      	ldrh	r3, [r7, #2]
 800857a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800857c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008580:	2b01      	cmp	r3, #1
 8008582:	d00f      	beq.n	80085a4 <HAL_SPI_TransmitReceive+0x70>
 8008584:	69fb      	ldr	r3, [r7, #28]
 8008586:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800858a:	d107      	bne.n	800859c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	689b      	ldr	r3, [r3, #8]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d103      	bne.n	800859c <HAL_SPI_TransmitReceive+0x68>
 8008594:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008598:	2b04      	cmp	r3, #4
 800859a:	d003      	beq.n	80085a4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800859c:	2302      	movs	r3, #2
 800859e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80085a2:	e15b      	b.n	800885c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80085a4:	68bb      	ldr	r3, [r7, #8]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d005      	beq.n	80085b6 <HAL_SPI_TransmitReceive+0x82>
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d002      	beq.n	80085b6 <HAL_SPI_TransmitReceive+0x82>
 80085b0:	887b      	ldrh	r3, [r7, #2]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d103      	bne.n	80085be <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80085b6:	2301      	movs	r3, #1
 80085b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80085bc:	e14e      	b.n	800885c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80085c4:	b2db      	uxtb	r3, r3
 80085c6:	2b04      	cmp	r3, #4
 80085c8:	d003      	beq.n	80085d2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	2205      	movs	r2, #5
 80085ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	2200      	movs	r2, #0
 80085d6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	687a      	ldr	r2, [r7, #4]
 80085dc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	887a      	ldrh	r2, [r7, #2]
 80085e2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	887a      	ldrh	r2, [r7, #2]
 80085e8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	68ba      	ldr	r2, [r7, #8]
 80085ee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	887a      	ldrh	r2, [r7, #2]
 80085f4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	887a      	ldrh	r2, [r7, #2]
 80085fa:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	2200      	movs	r2, #0
 8008600:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	2200      	movs	r2, #0
 8008606:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008612:	2b40      	cmp	r3, #64	; 0x40
 8008614:	d007      	beq.n	8008626 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	681a      	ldr	r2, [r3, #0]
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008624:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	68db      	ldr	r3, [r3, #12]
 800862a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800862e:	d178      	bne.n	8008722 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	685b      	ldr	r3, [r3, #4]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d002      	beq.n	800863e <HAL_SPI_TransmitReceive+0x10a>
 8008638:	8b7b      	ldrh	r3, [r7, #26]
 800863a:	2b01      	cmp	r3, #1
 800863c:	d166      	bne.n	800870c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008642:	881a      	ldrh	r2, [r3, #0]
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800864e:	1c9a      	adds	r2, r3, #2
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008658:	b29b      	uxth	r3, r3
 800865a:	3b01      	subs	r3, #1
 800865c:	b29a      	uxth	r2, r3
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008662:	e053      	b.n	800870c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	689b      	ldr	r3, [r3, #8]
 800866a:	f003 0302 	and.w	r3, r3, #2
 800866e:	2b02      	cmp	r3, #2
 8008670:	d11b      	bne.n	80086aa <HAL_SPI_TransmitReceive+0x176>
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008676:	b29b      	uxth	r3, r3
 8008678:	2b00      	cmp	r3, #0
 800867a:	d016      	beq.n	80086aa <HAL_SPI_TransmitReceive+0x176>
 800867c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800867e:	2b01      	cmp	r3, #1
 8008680:	d113      	bne.n	80086aa <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008686:	881a      	ldrh	r2, [r3, #0]
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008692:	1c9a      	adds	r2, r3, #2
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800869c:	b29b      	uxth	r3, r3
 800869e:	3b01      	subs	r3, #1
 80086a0:	b29a      	uxth	r2, r3
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80086a6:	2300      	movs	r3, #0
 80086a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	689b      	ldr	r3, [r3, #8]
 80086b0:	f003 0301 	and.w	r3, r3, #1
 80086b4:	2b01      	cmp	r3, #1
 80086b6:	d119      	bne.n	80086ec <HAL_SPI_TransmitReceive+0x1b8>
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80086bc:	b29b      	uxth	r3, r3
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d014      	beq.n	80086ec <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	68da      	ldr	r2, [r3, #12]
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086cc:	b292      	uxth	r2, r2
 80086ce:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086d4:	1c9a      	adds	r2, r3, #2
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80086de:	b29b      	uxth	r3, r3
 80086e0:	3b01      	subs	r3, #1
 80086e2:	b29a      	uxth	r2, r3
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80086e8:	2301      	movs	r3, #1
 80086ea:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80086ec:	f7fb f906 	bl	80038fc <HAL_GetTick>
 80086f0:	4602      	mov	r2, r0
 80086f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086f4:	1ad3      	subs	r3, r2, r3
 80086f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80086f8:	429a      	cmp	r2, r3
 80086fa:	d807      	bhi.n	800870c <HAL_SPI_TransmitReceive+0x1d8>
 80086fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008702:	d003      	beq.n	800870c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8008704:	2303      	movs	r3, #3
 8008706:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800870a:	e0a7      	b.n	800885c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008710:	b29b      	uxth	r3, r3
 8008712:	2b00      	cmp	r3, #0
 8008714:	d1a6      	bne.n	8008664 <HAL_SPI_TransmitReceive+0x130>
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800871a:	b29b      	uxth	r3, r3
 800871c:	2b00      	cmp	r3, #0
 800871e:	d1a1      	bne.n	8008664 <HAL_SPI_TransmitReceive+0x130>
 8008720:	e07c      	b.n	800881c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	685b      	ldr	r3, [r3, #4]
 8008726:	2b00      	cmp	r3, #0
 8008728:	d002      	beq.n	8008730 <HAL_SPI_TransmitReceive+0x1fc>
 800872a:	8b7b      	ldrh	r3, [r7, #26]
 800872c:	2b01      	cmp	r3, #1
 800872e:	d16b      	bne.n	8008808 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	330c      	adds	r3, #12
 800873a:	7812      	ldrb	r2, [r2, #0]
 800873c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008742:	1c5a      	adds	r2, r3, #1
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800874c:	b29b      	uxth	r3, r3
 800874e:	3b01      	subs	r3, #1
 8008750:	b29a      	uxth	r2, r3
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008756:	e057      	b.n	8008808 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	689b      	ldr	r3, [r3, #8]
 800875e:	f003 0302 	and.w	r3, r3, #2
 8008762:	2b02      	cmp	r3, #2
 8008764:	d11c      	bne.n	80087a0 <HAL_SPI_TransmitReceive+0x26c>
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800876a:	b29b      	uxth	r3, r3
 800876c:	2b00      	cmp	r3, #0
 800876e:	d017      	beq.n	80087a0 <HAL_SPI_TransmitReceive+0x26c>
 8008770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008772:	2b01      	cmp	r3, #1
 8008774:	d114      	bne.n	80087a0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	330c      	adds	r3, #12
 8008780:	7812      	ldrb	r2, [r2, #0]
 8008782:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008788:	1c5a      	adds	r2, r3, #1
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008792:	b29b      	uxth	r3, r3
 8008794:	3b01      	subs	r3, #1
 8008796:	b29a      	uxth	r2, r3
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800879c:	2300      	movs	r3, #0
 800879e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	689b      	ldr	r3, [r3, #8]
 80087a6:	f003 0301 	and.w	r3, r3, #1
 80087aa:	2b01      	cmp	r3, #1
 80087ac:	d119      	bne.n	80087e2 <HAL_SPI_TransmitReceive+0x2ae>
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80087b2:	b29b      	uxth	r3, r3
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d014      	beq.n	80087e2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	68da      	ldr	r2, [r3, #12]
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087c2:	b2d2      	uxtb	r2, r2
 80087c4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087ca:	1c5a      	adds	r2, r3, #1
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80087d4:	b29b      	uxth	r3, r3
 80087d6:	3b01      	subs	r3, #1
 80087d8:	b29a      	uxth	r2, r3
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80087de:	2301      	movs	r3, #1
 80087e0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80087e2:	f7fb f88b 	bl	80038fc <HAL_GetTick>
 80087e6:	4602      	mov	r2, r0
 80087e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ea:	1ad3      	subs	r3, r2, r3
 80087ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80087ee:	429a      	cmp	r2, r3
 80087f0:	d803      	bhi.n	80087fa <HAL_SPI_TransmitReceive+0x2c6>
 80087f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087f8:	d102      	bne.n	8008800 <HAL_SPI_TransmitReceive+0x2cc>
 80087fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d103      	bne.n	8008808 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8008800:	2303      	movs	r3, #3
 8008802:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008806:	e029      	b.n	800885c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800880c:	b29b      	uxth	r3, r3
 800880e:	2b00      	cmp	r3, #0
 8008810:	d1a2      	bne.n	8008758 <HAL_SPI_TransmitReceive+0x224>
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008816:	b29b      	uxth	r3, r3
 8008818:	2b00      	cmp	r3, #0
 800881a:	d19d      	bne.n	8008758 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800881c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800881e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008820:	68f8      	ldr	r0, [r7, #12]
 8008822:	f000 f917 	bl	8008a54 <SPI_EndRxTxTransaction>
 8008826:	4603      	mov	r3, r0
 8008828:	2b00      	cmp	r3, #0
 800882a:	d006      	beq.n	800883a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800882c:	2301      	movs	r3, #1
 800882e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	2220      	movs	r2, #32
 8008836:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8008838:	e010      	b.n	800885c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	689b      	ldr	r3, [r3, #8]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d10b      	bne.n	800885a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008842:	2300      	movs	r3, #0
 8008844:	617b      	str	r3, [r7, #20]
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	68db      	ldr	r3, [r3, #12]
 800884c:	617b      	str	r3, [r7, #20]
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	689b      	ldr	r3, [r3, #8]
 8008854:	617b      	str	r3, [r7, #20]
 8008856:	697b      	ldr	r3, [r7, #20]
 8008858:	e000      	b.n	800885c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800885a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	2201      	movs	r2, #1
 8008860:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	2200      	movs	r2, #0
 8008868:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800886c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8008870:	4618      	mov	r0, r3
 8008872:	3730      	adds	r7, #48	; 0x30
 8008874:	46bd      	mov	sp, r7
 8008876:	bd80      	pop	{r7, pc}

08008878 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b088      	sub	sp, #32
 800887c:	af00      	add	r7, sp, #0
 800887e:	60f8      	str	r0, [r7, #12]
 8008880:	60b9      	str	r1, [r7, #8]
 8008882:	603b      	str	r3, [r7, #0]
 8008884:	4613      	mov	r3, r2
 8008886:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008888:	f7fb f838 	bl	80038fc <HAL_GetTick>
 800888c:	4602      	mov	r2, r0
 800888e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008890:	1a9b      	subs	r3, r3, r2
 8008892:	683a      	ldr	r2, [r7, #0]
 8008894:	4413      	add	r3, r2
 8008896:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008898:	f7fb f830 	bl	80038fc <HAL_GetTick>
 800889c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800889e:	4b39      	ldr	r3, [pc, #228]	; (8008984 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	015b      	lsls	r3, r3, #5
 80088a4:	0d1b      	lsrs	r3, r3, #20
 80088a6:	69fa      	ldr	r2, [r7, #28]
 80088a8:	fb02 f303 	mul.w	r3, r2, r3
 80088ac:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80088ae:	e054      	b.n	800895a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80088b0:	683b      	ldr	r3, [r7, #0]
 80088b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088b6:	d050      	beq.n	800895a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80088b8:	f7fb f820 	bl	80038fc <HAL_GetTick>
 80088bc:	4602      	mov	r2, r0
 80088be:	69bb      	ldr	r3, [r7, #24]
 80088c0:	1ad3      	subs	r3, r2, r3
 80088c2:	69fa      	ldr	r2, [r7, #28]
 80088c4:	429a      	cmp	r2, r3
 80088c6:	d902      	bls.n	80088ce <SPI_WaitFlagStateUntilTimeout+0x56>
 80088c8:	69fb      	ldr	r3, [r7, #28]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d13d      	bne.n	800894a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	685a      	ldr	r2, [r3, #4]
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80088dc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	685b      	ldr	r3, [r3, #4]
 80088e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80088e6:	d111      	bne.n	800890c <SPI_WaitFlagStateUntilTimeout+0x94>
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	689b      	ldr	r3, [r3, #8]
 80088ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80088f0:	d004      	beq.n	80088fc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	689b      	ldr	r3, [r3, #8]
 80088f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80088fa:	d107      	bne.n	800890c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	681a      	ldr	r2, [r3, #0]
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800890a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008910:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008914:	d10f      	bne.n	8008936 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	681a      	ldr	r2, [r3, #0]
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008924:	601a      	str	r2, [r3, #0]
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	681a      	ldr	r2, [r3, #0]
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008934:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	2201      	movs	r2, #1
 800893a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	2200      	movs	r2, #0
 8008942:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8008946:	2303      	movs	r3, #3
 8008948:	e017      	b.n	800897a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800894a:	697b      	ldr	r3, [r7, #20]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d101      	bne.n	8008954 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008950:	2300      	movs	r3, #0
 8008952:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008954:	697b      	ldr	r3, [r7, #20]
 8008956:	3b01      	subs	r3, #1
 8008958:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	689a      	ldr	r2, [r3, #8]
 8008960:	68bb      	ldr	r3, [r7, #8]
 8008962:	4013      	ands	r3, r2
 8008964:	68ba      	ldr	r2, [r7, #8]
 8008966:	429a      	cmp	r2, r3
 8008968:	bf0c      	ite	eq
 800896a:	2301      	moveq	r3, #1
 800896c:	2300      	movne	r3, #0
 800896e:	b2db      	uxtb	r3, r3
 8008970:	461a      	mov	r2, r3
 8008972:	79fb      	ldrb	r3, [r7, #7]
 8008974:	429a      	cmp	r2, r3
 8008976:	d19b      	bne.n	80088b0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008978:	2300      	movs	r3, #0
}
 800897a:	4618      	mov	r0, r3
 800897c:	3720      	adds	r7, #32
 800897e:	46bd      	mov	sp, r7
 8008980:	bd80      	pop	{r7, pc}
 8008982:	bf00      	nop
 8008984:	20000178 	.word	0x20000178

08008988 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008988:	b580      	push	{r7, lr}
 800898a:	b086      	sub	sp, #24
 800898c:	af02      	add	r7, sp, #8
 800898e:	60f8      	str	r0, [r7, #12]
 8008990:	60b9      	str	r1, [r7, #8]
 8008992:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	685b      	ldr	r3, [r3, #4]
 8008998:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800899c:	d111      	bne.n	80089c2 <SPI_EndRxTransaction+0x3a>
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	689b      	ldr	r3, [r3, #8]
 80089a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80089a6:	d004      	beq.n	80089b2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	689b      	ldr	r3, [r3, #8]
 80089ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80089b0:	d107      	bne.n	80089c2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	681a      	ldr	r2, [r3, #0]
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80089c0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	685b      	ldr	r3, [r3, #4]
 80089c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80089ca:	d12a      	bne.n	8008a22 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	689b      	ldr	r3, [r3, #8]
 80089d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80089d4:	d012      	beq.n	80089fc <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	9300      	str	r3, [sp, #0]
 80089da:	68bb      	ldr	r3, [r7, #8]
 80089dc:	2200      	movs	r2, #0
 80089de:	2180      	movs	r1, #128	; 0x80
 80089e0:	68f8      	ldr	r0, [r7, #12]
 80089e2:	f7ff ff49 	bl	8008878 <SPI_WaitFlagStateUntilTimeout>
 80089e6:	4603      	mov	r3, r0
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d02d      	beq.n	8008a48 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089f0:	f043 0220 	orr.w	r2, r3, #32
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80089f8:	2303      	movs	r3, #3
 80089fa:	e026      	b.n	8008a4a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	9300      	str	r3, [sp, #0]
 8008a00:	68bb      	ldr	r3, [r7, #8]
 8008a02:	2200      	movs	r2, #0
 8008a04:	2101      	movs	r1, #1
 8008a06:	68f8      	ldr	r0, [r7, #12]
 8008a08:	f7ff ff36 	bl	8008878 <SPI_WaitFlagStateUntilTimeout>
 8008a0c:	4603      	mov	r3, r0
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d01a      	beq.n	8008a48 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a16:	f043 0220 	orr.w	r2, r3, #32
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008a1e:	2303      	movs	r3, #3
 8008a20:	e013      	b.n	8008a4a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	9300      	str	r3, [sp, #0]
 8008a26:	68bb      	ldr	r3, [r7, #8]
 8008a28:	2200      	movs	r2, #0
 8008a2a:	2101      	movs	r1, #1
 8008a2c:	68f8      	ldr	r0, [r7, #12]
 8008a2e:	f7ff ff23 	bl	8008878 <SPI_WaitFlagStateUntilTimeout>
 8008a32:	4603      	mov	r3, r0
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d007      	beq.n	8008a48 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a3c:	f043 0220 	orr.w	r2, r3, #32
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008a44:	2303      	movs	r3, #3
 8008a46:	e000      	b.n	8008a4a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8008a48:	2300      	movs	r3, #0
}
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	3710      	adds	r7, #16
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	bd80      	pop	{r7, pc}
	...

08008a54 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008a54:	b580      	push	{r7, lr}
 8008a56:	b088      	sub	sp, #32
 8008a58:	af02      	add	r7, sp, #8
 8008a5a:	60f8      	str	r0, [r7, #12]
 8008a5c:	60b9      	str	r1, [r7, #8]
 8008a5e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008a60:	4b1b      	ldr	r3, [pc, #108]	; (8008ad0 <SPI_EndRxTxTransaction+0x7c>)
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	4a1b      	ldr	r2, [pc, #108]	; (8008ad4 <SPI_EndRxTxTransaction+0x80>)
 8008a66:	fba2 2303 	umull	r2, r3, r2, r3
 8008a6a:	0d5b      	lsrs	r3, r3, #21
 8008a6c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008a70:	fb02 f303 	mul.w	r3, r2, r3
 8008a74:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	685b      	ldr	r3, [r3, #4]
 8008a7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008a7e:	d112      	bne.n	8008aa6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	9300      	str	r3, [sp, #0]
 8008a84:	68bb      	ldr	r3, [r7, #8]
 8008a86:	2200      	movs	r2, #0
 8008a88:	2180      	movs	r1, #128	; 0x80
 8008a8a:	68f8      	ldr	r0, [r7, #12]
 8008a8c:	f7ff fef4 	bl	8008878 <SPI_WaitFlagStateUntilTimeout>
 8008a90:	4603      	mov	r3, r0
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d016      	beq.n	8008ac4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a9a:	f043 0220 	orr.w	r2, r3, #32
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008aa2:	2303      	movs	r3, #3
 8008aa4:	e00f      	b.n	8008ac6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008aa6:	697b      	ldr	r3, [r7, #20]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d00a      	beq.n	8008ac2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8008aac:	697b      	ldr	r3, [r7, #20]
 8008aae:	3b01      	subs	r3, #1
 8008ab0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	689b      	ldr	r3, [r3, #8]
 8008ab8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008abc:	2b80      	cmp	r3, #128	; 0x80
 8008abe:	d0f2      	beq.n	8008aa6 <SPI_EndRxTxTransaction+0x52>
 8008ac0:	e000      	b.n	8008ac4 <SPI_EndRxTxTransaction+0x70>
        break;
 8008ac2:	bf00      	nop
  }

  return HAL_OK;
 8008ac4:	2300      	movs	r3, #0
}
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	3718      	adds	r7, #24
 8008aca:	46bd      	mov	sp, r7
 8008acc:	bd80      	pop	{r7, pc}
 8008ace:	bf00      	nop
 8008ad0:	20000178 	.word	0x20000178
 8008ad4:	165e9f81 	.word	0x165e9f81

08008ad8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b082      	sub	sp, #8
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d101      	bne.n	8008aea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008ae6:	2301      	movs	r3, #1
 8008ae8:	e041      	b.n	8008b6e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008af0:	b2db      	uxtb	r3, r3
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d106      	bne.n	8008b04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	2200      	movs	r2, #0
 8008afa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008afe:	6878      	ldr	r0, [r7, #4]
 8008b00:	f7fa f902 	bl	8002d08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	2202      	movs	r2, #2
 8008b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681a      	ldr	r2, [r3, #0]
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	3304      	adds	r3, #4
 8008b14:	4619      	mov	r1, r3
 8008b16:	4610      	mov	r0, r2
 8008b18:	f000 fd74 	bl	8009604 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2201      	movs	r2, #1
 8008b20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	2201      	movs	r2, #1
 8008b28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	2201      	movs	r2, #1
 8008b30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	2201      	movs	r2, #1
 8008b38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	2201      	movs	r2, #1
 8008b40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	2201      	movs	r2, #1
 8008b48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	2201      	movs	r2, #1
 8008b50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2201      	movs	r2, #1
 8008b58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2201      	movs	r2, #1
 8008b60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2201      	movs	r2, #1
 8008b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008b6c:	2300      	movs	r3, #0
}
 8008b6e:	4618      	mov	r0, r3
 8008b70:	3708      	adds	r7, #8
 8008b72:	46bd      	mov	sp, r7
 8008b74:	bd80      	pop	{r7, pc}

08008b76 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008b76:	b580      	push	{r7, lr}
 8008b78:	b082      	sub	sp, #8
 8008b7a:	af00      	add	r7, sp, #0
 8008b7c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d101      	bne.n	8008b88 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008b84:	2301      	movs	r3, #1
 8008b86:	e041      	b.n	8008c0c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b8e:	b2db      	uxtb	r3, r3
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d106      	bne.n	8008ba2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2200      	movs	r2, #0
 8008b98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008b9c:	6878      	ldr	r0, [r7, #4]
 8008b9e:	f000 f839 	bl	8008c14 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	2202      	movs	r2, #2
 8008ba6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681a      	ldr	r2, [r3, #0]
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	3304      	adds	r3, #4
 8008bb2:	4619      	mov	r1, r3
 8008bb4:	4610      	mov	r0, r2
 8008bb6:	f000 fd25 	bl	8009604 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	2201      	movs	r2, #1
 8008bbe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	2201      	movs	r2, #1
 8008bc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	2201      	movs	r2, #1
 8008bce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	2201      	movs	r2, #1
 8008bd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	2201      	movs	r2, #1
 8008bde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	2201      	movs	r2, #1
 8008be6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	2201      	movs	r2, #1
 8008bee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	2201      	movs	r2, #1
 8008bf6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	2201      	movs	r2, #1
 8008bfe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	2201      	movs	r2, #1
 8008c06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008c0a:	2300      	movs	r3, #0
}
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	3708      	adds	r7, #8
 8008c10:	46bd      	mov	sp, r7
 8008c12:	bd80      	pop	{r7, pc}

08008c14 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008c14:	b480      	push	{r7}
 8008c16:	b083      	sub	sp, #12
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008c1c:	bf00      	nop
 8008c1e:	370c      	adds	r7, #12
 8008c20:	46bd      	mov	sp, r7
 8008c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c26:	4770      	bx	lr

08008c28 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b086      	sub	sp, #24
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	60f8      	str	r0, [r7, #12]
 8008c30:	60b9      	str	r1, [r7, #8]
 8008c32:	607a      	str	r2, [r7, #4]
 8008c34:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8008c36:	2300      	movs	r3, #0
 8008c38:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8008c3a:	68bb      	ldr	r3, [r7, #8]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d109      	bne.n	8008c54 <HAL_TIM_PWM_Start_DMA+0x2c>
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008c46:	b2db      	uxtb	r3, r3
 8008c48:	2b02      	cmp	r3, #2
 8008c4a:	bf0c      	ite	eq
 8008c4c:	2301      	moveq	r3, #1
 8008c4e:	2300      	movne	r3, #0
 8008c50:	b2db      	uxtb	r3, r3
 8008c52:	e022      	b.n	8008c9a <HAL_TIM_PWM_Start_DMA+0x72>
 8008c54:	68bb      	ldr	r3, [r7, #8]
 8008c56:	2b04      	cmp	r3, #4
 8008c58:	d109      	bne.n	8008c6e <HAL_TIM_PWM_Start_DMA+0x46>
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008c60:	b2db      	uxtb	r3, r3
 8008c62:	2b02      	cmp	r3, #2
 8008c64:	bf0c      	ite	eq
 8008c66:	2301      	moveq	r3, #1
 8008c68:	2300      	movne	r3, #0
 8008c6a:	b2db      	uxtb	r3, r3
 8008c6c:	e015      	b.n	8008c9a <HAL_TIM_PWM_Start_DMA+0x72>
 8008c6e:	68bb      	ldr	r3, [r7, #8]
 8008c70:	2b08      	cmp	r3, #8
 8008c72:	d109      	bne.n	8008c88 <HAL_TIM_PWM_Start_DMA+0x60>
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008c7a:	b2db      	uxtb	r3, r3
 8008c7c:	2b02      	cmp	r3, #2
 8008c7e:	bf0c      	ite	eq
 8008c80:	2301      	moveq	r3, #1
 8008c82:	2300      	movne	r3, #0
 8008c84:	b2db      	uxtb	r3, r3
 8008c86:	e008      	b.n	8008c9a <HAL_TIM_PWM_Start_DMA+0x72>
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008c8e:	b2db      	uxtb	r3, r3
 8008c90:	2b02      	cmp	r3, #2
 8008c92:	bf0c      	ite	eq
 8008c94:	2301      	moveq	r3, #1
 8008c96:	2300      	movne	r3, #0
 8008c98:	b2db      	uxtb	r3, r3
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d001      	beq.n	8008ca2 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8008c9e:	2302      	movs	r3, #2
 8008ca0:	e15d      	b.n	8008f5e <HAL_TIM_PWM_Start_DMA+0x336>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8008ca2:	68bb      	ldr	r3, [r7, #8]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d109      	bne.n	8008cbc <HAL_TIM_PWM_Start_DMA+0x94>
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008cae:	b2db      	uxtb	r3, r3
 8008cb0:	2b01      	cmp	r3, #1
 8008cb2:	bf0c      	ite	eq
 8008cb4:	2301      	moveq	r3, #1
 8008cb6:	2300      	movne	r3, #0
 8008cb8:	b2db      	uxtb	r3, r3
 8008cba:	e022      	b.n	8008d02 <HAL_TIM_PWM_Start_DMA+0xda>
 8008cbc:	68bb      	ldr	r3, [r7, #8]
 8008cbe:	2b04      	cmp	r3, #4
 8008cc0:	d109      	bne.n	8008cd6 <HAL_TIM_PWM_Start_DMA+0xae>
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008cc8:	b2db      	uxtb	r3, r3
 8008cca:	2b01      	cmp	r3, #1
 8008ccc:	bf0c      	ite	eq
 8008cce:	2301      	moveq	r3, #1
 8008cd0:	2300      	movne	r3, #0
 8008cd2:	b2db      	uxtb	r3, r3
 8008cd4:	e015      	b.n	8008d02 <HAL_TIM_PWM_Start_DMA+0xda>
 8008cd6:	68bb      	ldr	r3, [r7, #8]
 8008cd8:	2b08      	cmp	r3, #8
 8008cda:	d109      	bne.n	8008cf0 <HAL_TIM_PWM_Start_DMA+0xc8>
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008ce2:	b2db      	uxtb	r3, r3
 8008ce4:	2b01      	cmp	r3, #1
 8008ce6:	bf0c      	ite	eq
 8008ce8:	2301      	moveq	r3, #1
 8008cea:	2300      	movne	r3, #0
 8008cec:	b2db      	uxtb	r3, r3
 8008cee:	e008      	b.n	8008d02 <HAL_TIM_PWM_Start_DMA+0xda>
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008cf6:	b2db      	uxtb	r3, r3
 8008cf8:	2b01      	cmp	r3, #1
 8008cfa:	bf0c      	ite	eq
 8008cfc:	2301      	moveq	r3, #1
 8008cfe:	2300      	movne	r3, #0
 8008d00:	b2db      	uxtb	r3, r3
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d024      	beq.n	8008d50 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d104      	bne.n	8008d16 <HAL_TIM_PWM_Start_DMA+0xee>
 8008d0c:	887b      	ldrh	r3, [r7, #2]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d001      	beq.n	8008d16 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8008d12:	2301      	movs	r3, #1
 8008d14:	e123      	b.n	8008f5e <HAL_TIM_PWM_Start_DMA+0x336>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008d16:	68bb      	ldr	r3, [r7, #8]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d104      	bne.n	8008d26 <HAL_TIM_PWM_Start_DMA+0xfe>
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	2202      	movs	r2, #2
 8008d20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008d24:	e016      	b.n	8008d54 <HAL_TIM_PWM_Start_DMA+0x12c>
 8008d26:	68bb      	ldr	r3, [r7, #8]
 8008d28:	2b04      	cmp	r3, #4
 8008d2a:	d104      	bne.n	8008d36 <HAL_TIM_PWM_Start_DMA+0x10e>
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	2202      	movs	r2, #2
 8008d30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008d34:	e00e      	b.n	8008d54 <HAL_TIM_PWM_Start_DMA+0x12c>
 8008d36:	68bb      	ldr	r3, [r7, #8]
 8008d38:	2b08      	cmp	r3, #8
 8008d3a:	d104      	bne.n	8008d46 <HAL_TIM_PWM_Start_DMA+0x11e>
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	2202      	movs	r2, #2
 8008d40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008d44:	e006      	b.n	8008d54 <HAL_TIM_PWM_Start_DMA+0x12c>
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	2202      	movs	r2, #2
 8008d4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008d4e:	e001      	b.n	8008d54 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8008d50:	2301      	movs	r3, #1
 8008d52:	e104      	b.n	8008f5e <HAL_TIM_PWM_Start_DMA+0x336>
  }

  switch (Channel)
 8008d54:	68bb      	ldr	r3, [r7, #8]
 8008d56:	2b0c      	cmp	r3, #12
 8008d58:	f200 80ae 	bhi.w	8008eb8 <HAL_TIM_PWM_Start_DMA+0x290>
 8008d5c:	a201      	add	r2, pc, #4	; (adr r2, 8008d64 <HAL_TIM_PWM_Start_DMA+0x13c>)
 8008d5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d62:	bf00      	nop
 8008d64:	08008d99 	.word	0x08008d99
 8008d68:	08008eb9 	.word	0x08008eb9
 8008d6c:	08008eb9 	.word	0x08008eb9
 8008d70:	08008eb9 	.word	0x08008eb9
 8008d74:	08008de1 	.word	0x08008de1
 8008d78:	08008eb9 	.word	0x08008eb9
 8008d7c:	08008eb9 	.word	0x08008eb9
 8008d80:	08008eb9 	.word	0x08008eb9
 8008d84:	08008e29 	.word	0x08008e29
 8008d88:	08008eb9 	.word	0x08008eb9
 8008d8c:	08008eb9 	.word	0x08008eb9
 8008d90:	08008eb9 	.word	0x08008eb9
 8008d94:	08008e71 	.word	0x08008e71
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d9c:	4a72      	ldr	r2, [pc, #456]	; (8008f68 <HAL_TIM_PWM_Start_DMA+0x340>)
 8008d9e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008da4:	4a71      	ldr	r2, [pc, #452]	; (8008f6c <HAL_TIM_PWM_Start_DMA+0x344>)
 8008da6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dac:	4a70      	ldr	r2, [pc, #448]	; (8008f70 <HAL_TIM_PWM_Start_DMA+0x348>)
 8008dae:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8008db4:	6879      	ldr	r1, [r7, #4]
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	3334      	adds	r3, #52	; 0x34
 8008dbc:	461a      	mov	r2, r3
 8008dbe:	887b      	ldrh	r3, [r7, #2]
 8008dc0:	f7fb fc46 	bl	8004650 <HAL_DMA_Start_IT>
 8008dc4:	4603      	mov	r3, r0
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d001      	beq.n	8008dce <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008dca:	2301      	movs	r3, #1
 8008dcc:	e0c7      	b.n	8008f5e <HAL_TIM_PWM_Start_DMA+0x336>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	68da      	ldr	r2, [r3, #12]
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008ddc:	60da      	str	r2, [r3, #12]
      break;
 8008dde:	e06e      	b.n	8008ebe <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008de4:	4a60      	ldr	r2, [pc, #384]	; (8008f68 <HAL_TIM_PWM_Start_DMA+0x340>)
 8008de6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dec:	4a5f      	ldr	r2, [pc, #380]	; (8008f6c <HAL_TIM_PWM_Start_DMA+0x344>)
 8008dee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008df4:	4a5e      	ldr	r2, [pc, #376]	; (8008f70 <HAL_TIM_PWM_Start_DMA+0x348>)
 8008df6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8008dfc:	6879      	ldr	r1, [r7, #4]
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	3338      	adds	r3, #56	; 0x38
 8008e04:	461a      	mov	r2, r3
 8008e06:	887b      	ldrh	r3, [r7, #2]
 8008e08:	f7fb fc22 	bl	8004650 <HAL_DMA_Start_IT>
 8008e0c:	4603      	mov	r3, r0
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d001      	beq.n	8008e16 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008e12:	2301      	movs	r3, #1
 8008e14:	e0a3      	b.n	8008f5e <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	68da      	ldr	r2, [r3, #12]
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008e24:	60da      	str	r2, [r3, #12]
      break;
 8008e26:	e04a      	b.n	8008ebe <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e2c:	4a4e      	ldr	r2, [pc, #312]	; (8008f68 <HAL_TIM_PWM_Start_DMA+0x340>)
 8008e2e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e34:	4a4d      	ldr	r2, [pc, #308]	; (8008f6c <HAL_TIM_PWM_Start_DMA+0x344>)
 8008e36:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e3c:	4a4c      	ldr	r2, [pc, #304]	; (8008f70 <HAL_TIM_PWM_Start_DMA+0x348>)
 8008e3e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8008e44:	6879      	ldr	r1, [r7, #4]
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	333c      	adds	r3, #60	; 0x3c
 8008e4c:	461a      	mov	r2, r3
 8008e4e:	887b      	ldrh	r3, [r7, #2]
 8008e50:	f7fb fbfe 	bl	8004650 <HAL_DMA_Start_IT>
 8008e54:	4603      	mov	r3, r0
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d001      	beq.n	8008e5e <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008e5a:	2301      	movs	r3, #1
 8008e5c:	e07f      	b.n	8008f5e <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	68da      	ldr	r2, [r3, #12]
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008e6c:	60da      	str	r2, [r3, #12]
      break;
 8008e6e:	e026      	b.n	8008ebe <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e74:	4a3c      	ldr	r2, [pc, #240]	; (8008f68 <HAL_TIM_PWM_Start_DMA+0x340>)
 8008e76:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e7c:	4a3b      	ldr	r2, [pc, #236]	; (8008f6c <HAL_TIM_PWM_Start_DMA+0x344>)
 8008e7e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e84:	4a3a      	ldr	r2, [pc, #232]	; (8008f70 <HAL_TIM_PWM_Start_DMA+0x348>)
 8008e86:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008e8c:	6879      	ldr	r1, [r7, #4]
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	3340      	adds	r3, #64	; 0x40
 8008e94:	461a      	mov	r2, r3
 8008e96:	887b      	ldrh	r3, [r7, #2]
 8008e98:	f7fb fbda 	bl	8004650 <HAL_DMA_Start_IT>
 8008e9c:	4603      	mov	r3, r0
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d001      	beq.n	8008ea6 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008ea2:	2301      	movs	r3, #1
 8008ea4:	e05b      	b.n	8008f5e <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	68da      	ldr	r2, [r3, #12]
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008eb4:	60da      	str	r2, [r3, #12]
      break;
 8008eb6:	e002      	b.n	8008ebe <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8008eb8:	2301      	movs	r3, #1
 8008eba:	75fb      	strb	r3, [r7, #23]
      break;
 8008ebc:	bf00      	nop
  }

  if (status == HAL_OK)
 8008ebe:	7dfb      	ldrb	r3, [r7, #23]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d14b      	bne.n	8008f5c <HAL_TIM_PWM_Start_DMA+0x334>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	2201      	movs	r2, #1
 8008eca:	68b9      	ldr	r1, [r7, #8]
 8008ecc:	4618      	mov	r0, r3
 8008ece:	f000 fe3f 	bl	8009b50 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	4a27      	ldr	r2, [pc, #156]	; (8008f74 <HAL_TIM_PWM_Start_DMA+0x34c>)
 8008ed8:	4293      	cmp	r3, r2
 8008eda:	d107      	bne.n	8008eec <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008eea:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	4a20      	ldr	r2, [pc, #128]	; (8008f74 <HAL_TIM_PWM_Start_DMA+0x34c>)
 8008ef2:	4293      	cmp	r3, r2
 8008ef4:	d018      	beq.n	8008f28 <HAL_TIM_PWM_Start_DMA+0x300>
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008efe:	d013      	beq.n	8008f28 <HAL_TIM_PWM_Start_DMA+0x300>
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	4a1c      	ldr	r2, [pc, #112]	; (8008f78 <HAL_TIM_PWM_Start_DMA+0x350>)
 8008f06:	4293      	cmp	r3, r2
 8008f08:	d00e      	beq.n	8008f28 <HAL_TIM_PWM_Start_DMA+0x300>
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	4a1b      	ldr	r2, [pc, #108]	; (8008f7c <HAL_TIM_PWM_Start_DMA+0x354>)
 8008f10:	4293      	cmp	r3, r2
 8008f12:	d009      	beq.n	8008f28 <HAL_TIM_PWM_Start_DMA+0x300>
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	4a19      	ldr	r2, [pc, #100]	; (8008f80 <HAL_TIM_PWM_Start_DMA+0x358>)
 8008f1a:	4293      	cmp	r3, r2
 8008f1c:	d004      	beq.n	8008f28 <HAL_TIM_PWM_Start_DMA+0x300>
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	4a18      	ldr	r2, [pc, #96]	; (8008f84 <HAL_TIM_PWM_Start_DMA+0x35c>)
 8008f24:	4293      	cmp	r3, r2
 8008f26:	d111      	bne.n	8008f4c <HAL_TIM_PWM_Start_DMA+0x324>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	689b      	ldr	r3, [r3, #8]
 8008f2e:	f003 0307 	and.w	r3, r3, #7
 8008f32:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f34:	693b      	ldr	r3, [r7, #16]
 8008f36:	2b06      	cmp	r3, #6
 8008f38:	d010      	beq.n	8008f5c <HAL_TIM_PWM_Start_DMA+0x334>
      {
        __HAL_TIM_ENABLE(htim);
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	681a      	ldr	r2, [r3, #0]
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	f042 0201 	orr.w	r2, r2, #1
 8008f48:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f4a:	e007      	b.n	8008f5c <HAL_TIM_PWM_Start_DMA+0x334>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	681a      	ldr	r2, [r3, #0]
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	f042 0201 	orr.w	r2, r2, #1
 8008f5a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8008f5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f5e:	4618      	mov	r0, r3
 8008f60:	3718      	adds	r7, #24
 8008f62:	46bd      	mov	sp, r7
 8008f64:	bd80      	pop	{r7, pc}
 8008f66:	bf00      	nop
 8008f68:	080094f5 	.word	0x080094f5
 8008f6c:	0800959d 	.word	0x0800959d
 8008f70:	08009463 	.word	0x08009463
 8008f74:	40010000 	.word	0x40010000
 8008f78:	40000400 	.word	0x40000400
 8008f7c:	40000800 	.word	0x40000800
 8008f80:	40000c00 	.word	0x40000c00
 8008f84:	40014000 	.word	0x40014000

08008f88 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b084      	sub	sp, #16
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
 8008f90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008f92:	2300      	movs	r3, #0
 8008f94:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8008f96:	683b      	ldr	r3, [r7, #0]
 8008f98:	2b0c      	cmp	r3, #12
 8008f9a:	d855      	bhi.n	8009048 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8008f9c:	a201      	add	r2, pc, #4	; (adr r2, 8008fa4 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8008f9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fa2:	bf00      	nop
 8008fa4:	08008fd9 	.word	0x08008fd9
 8008fa8:	08009049 	.word	0x08009049
 8008fac:	08009049 	.word	0x08009049
 8008fb0:	08009049 	.word	0x08009049
 8008fb4:	08008ff5 	.word	0x08008ff5
 8008fb8:	08009049 	.word	0x08009049
 8008fbc:	08009049 	.word	0x08009049
 8008fc0:	08009049 	.word	0x08009049
 8008fc4:	08009011 	.word	0x08009011
 8008fc8:	08009049 	.word	0x08009049
 8008fcc:	08009049 	.word	0x08009049
 8008fd0:	08009049 	.word	0x08009049
 8008fd4:	0800902d 	.word	0x0800902d
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	68da      	ldr	r2, [r3, #12]
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008fe6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fec:	4618      	mov	r0, r3
 8008fee:	f7fb fbf7 	bl	80047e0 <HAL_DMA_Abort_IT>
      break;
 8008ff2:	e02c      	b.n	800904e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	68da      	ldr	r2, [r3, #12]
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009002:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009008:	4618      	mov	r0, r3
 800900a:	f7fb fbe9 	bl	80047e0 <HAL_DMA_Abort_IT>
      break;
 800900e:	e01e      	b.n	800904e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	68da      	ldr	r2, [r3, #12]
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800901e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009024:	4618      	mov	r0, r3
 8009026:	f7fb fbdb 	bl	80047e0 <HAL_DMA_Abort_IT>
      break;
 800902a:	e010      	b.n	800904e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	68da      	ldr	r2, [r3, #12]
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800903a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009040:	4618      	mov	r0, r3
 8009042:	f7fb fbcd 	bl	80047e0 <HAL_DMA_Abort_IT>
      break;
 8009046:	e002      	b.n	800904e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8009048:	2301      	movs	r3, #1
 800904a:	73fb      	strb	r3, [r7, #15]
      break;
 800904c:	bf00      	nop
  }

  if (status == HAL_OK)
 800904e:	7bfb      	ldrb	r3, [r7, #15]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d157      	bne.n	8009104 <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	2200      	movs	r2, #0
 800905a:	6839      	ldr	r1, [r7, #0]
 800905c:	4618      	mov	r0, r3
 800905e:	f000 fd77 	bl	8009b50 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	4a2a      	ldr	r2, [pc, #168]	; (8009110 <HAL_TIM_PWM_Stop_DMA+0x188>)
 8009068:	4293      	cmp	r3, r2
 800906a:	d117      	bne.n	800909c <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	6a1a      	ldr	r2, [r3, #32]
 8009072:	f241 1311 	movw	r3, #4369	; 0x1111
 8009076:	4013      	ands	r3, r2
 8009078:	2b00      	cmp	r3, #0
 800907a:	d10f      	bne.n	800909c <HAL_TIM_PWM_Stop_DMA+0x114>
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	6a1a      	ldr	r2, [r3, #32]
 8009082:	f240 4344 	movw	r3, #1092	; 0x444
 8009086:	4013      	ands	r3, r2
 8009088:	2b00      	cmp	r3, #0
 800908a:	d107      	bne.n	800909c <HAL_TIM_PWM_Stop_DMA+0x114>
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800909a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	6a1a      	ldr	r2, [r3, #32]
 80090a2:	f241 1311 	movw	r3, #4369	; 0x1111
 80090a6:	4013      	ands	r3, r2
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d10f      	bne.n	80090cc <HAL_TIM_PWM_Stop_DMA+0x144>
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	6a1a      	ldr	r2, [r3, #32]
 80090b2:	f240 4344 	movw	r3, #1092	; 0x444
 80090b6:	4013      	ands	r3, r2
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d107      	bne.n	80090cc <HAL_TIM_PWM_Stop_DMA+0x144>
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	681a      	ldr	r2, [r3, #0]
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	f022 0201 	bic.w	r2, r2, #1
 80090ca:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80090cc:	683b      	ldr	r3, [r7, #0]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d104      	bne.n	80090dc <HAL_TIM_PWM_Stop_DMA+0x154>
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	2201      	movs	r2, #1
 80090d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80090da:	e013      	b.n	8009104 <HAL_TIM_PWM_Stop_DMA+0x17c>
 80090dc:	683b      	ldr	r3, [r7, #0]
 80090de:	2b04      	cmp	r3, #4
 80090e0:	d104      	bne.n	80090ec <HAL_TIM_PWM_Stop_DMA+0x164>
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	2201      	movs	r2, #1
 80090e6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80090ea:	e00b      	b.n	8009104 <HAL_TIM_PWM_Stop_DMA+0x17c>
 80090ec:	683b      	ldr	r3, [r7, #0]
 80090ee:	2b08      	cmp	r3, #8
 80090f0:	d104      	bne.n	80090fc <HAL_TIM_PWM_Stop_DMA+0x174>
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	2201      	movs	r2, #1
 80090f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80090fa:	e003      	b.n	8009104 <HAL_TIM_PWM_Stop_DMA+0x17c>
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	2201      	movs	r2, #1
 8009100:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8009104:	7bfb      	ldrb	r3, [r7, #15]
}
 8009106:	4618      	mov	r0, r3
 8009108:	3710      	adds	r7, #16
 800910a:	46bd      	mov	sp, r7
 800910c:	bd80      	pop	{r7, pc}
 800910e:	bf00      	nop
 8009110:	40010000 	.word	0x40010000

08009114 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009114:	b580      	push	{r7, lr}
 8009116:	b086      	sub	sp, #24
 8009118:	af00      	add	r7, sp, #0
 800911a:	60f8      	str	r0, [r7, #12]
 800911c:	60b9      	str	r1, [r7, #8]
 800911e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009120:	2300      	movs	r3, #0
 8009122:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800912a:	2b01      	cmp	r3, #1
 800912c:	d101      	bne.n	8009132 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800912e:	2302      	movs	r3, #2
 8009130:	e0ae      	b.n	8009290 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	2201      	movs	r2, #1
 8009136:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	2b0c      	cmp	r3, #12
 800913e:	f200 809f 	bhi.w	8009280 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8009142:	a201      	add	r2, pc, #4	; (adr r2, 8009148 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009148:	0800917d 	.word	0x0800917d
 800914c:	08009281 	.word	0x08009281
 8009150:	08009281 	.word	0x08009281
 8009154:	08009281 	.word	0x08009281
 8009158:	080091bd 	.word	0x080091bd
 800915c:	08009281 	.word	0x08009281
 8009160:	08009281 	.word	0x08009281
 8009164:	08009281 	.word	0x08009281
 8009168:	080091ff 	.word	0x080091ff
 800916c:	08009281 	.word	0x08009281
 8009170:	08009281 	.word	0x08009281
 8009174:	08009281 	.word	0x08009281
 8009178:	0800923f 	.word	0x0800923f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	68b9      	ldr	r1, [r7, #8]
 8009182:	4618      	mov	r0, r3
 8009184:	f000 fabe 	bl	8009704 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	699a      	ldr	r2, [r3, #24]
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	f042 0208 	orr.w	r2, r2, #8
 8009196:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	699a      	ldr	r2, [r3, #24]
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	f022 0204 	bic.w	r2, r2, #4
 80091a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	6999      	ldr	r1, [r3, #24]
 80091ae:	68bb      	ldr	r3, [r7, #8]
 80091b0:	691a      	ldr	r2, [r3, #16]
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	430a      	orrs	r2, r1
 80091b8:	619a      	str	r2, [r3, #24]
      break;
 80091ba:	e064      	b.n	8009286 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	68b9      	ldr	r1, [r7, #8]
 80091c2:	4618      	mov	r0, r3
 80091c4:	f000 fb04 	bl	80097d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	699a      	ldr	r2, [r3, #24]
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80091d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	699a      	ldr	r2, [r3, #24]
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80091e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	6999      	ldr	r1, [r3, #24]
 80091ee:	68bb      	ldr	r3, [r7, #8]
 80091f0:	691b      	ldr	r3, [r3, #16]
 80091f2:	021a      	lsls	r2, r3, #8
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	430a      	orrs	r2, r1
 80091fa:	619a      	str	r2, [r3, #24]
      break;
 80091fc:	e043      	b.n	8009286 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	68b9      	ldr	r1, [r7, #8]
 8009204:	4618      	mov	r0, r3
 8009206:	f000 fb4f 	bl	80098a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	69da      	ldr	r2, [r3, #28]
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	f042 0208 	orr.w	r2, r2, #8
 8009218:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	69da      	ldr	r2, [r3, #28]
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	f022 0204 	bic.w	r2, r2, #4
 8009228:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	69d9      	ldr	r1, [r3, #28]
 8009230:	68bb      	ldr	r3, [r7, #8]
 8009232:	691a      	ldr	r2, [r3, #16]
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	430a      	orrs	r2, r1
 800923a:	61da      	str	r2, [r3, #28]
      break;
 800923c:	e023      	b.n	8009286 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	68b9      	ldr	r1, [r7, #8]
 8009244:	4618      	mov	r0, r3
 8009246:	f000 fb99 	bl	800997c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	69da      	ldr	r2, [r3, #28]
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009258:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	69da      	ldr	r2, [r3, #28]
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009268:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	69d9      	ldr	r1, [r3, #28]
 8009270:	68bb      	ldr	r3, [r7, #8]
 8009272:	691b      	ldr	r3, [r3, #16]
 8009274:	021a      	lsls	r2, r3, #8
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	430a      	orrs	r2, r1
 800927c:	61da      	str	r2, [r3, #28]
      break;
 800927e:	e002      	b.n	8009286 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8009280:	2301      	movs	r3, #1
 8009282:	75fb      	strb	r3, [r7, #23]
      break;
 8009284:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	2200      	movs	r2, #0
 800928a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800928e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009290:	4618      	mov	r0, r3
 8009292:	3718      	adds	r7, #24
 8009294:	46bd      	mov	sp, r7
 8009296:	bd80      	pop	{r7, pc}

08009298 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009298:	b580      	push	{r7, lr}
 800929a:	b084      	sub	sp, #16
 800929c:	af00      	add	r7, sp, #0
 800929e:	6078      	str	r0, [r7, #4]
 80092a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80092a2:	2300      	movs	r3, #0
 80092a4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80092ac:	2b01      	cmp	r3, #1
 80092ae:	d101      	bne.n	80092b4 <HAL_TIM_ConfigClockSource+0x1c>
 80092b0:	2302      	movs	r3, #2
 80092b2:	e0b4      	b.n	800941e <HAL_TIM_ConfigClockSource+0x186>
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	2201      	movs	r2, #1
 80092b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	2202      	movs	r2, #2
 80092c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	689b      	ldr	r3, [r3, #8]
 80092ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80092cc:	68bb      	ldr	r3, [r7, #8]
 80092ce:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80092d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80092d4:	68bb      	ldr	r3, [r7, #8]
 80092d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80092da:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	68ba      	ldr	r2, [r7, #8]
 80092e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80092e4:	683b      	ldr	r3, [r7, #0]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80092ec:	d03e      	beq.n	800936c <HAL_TIM_ConfigClockSource+0xd4>
 80092ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80092f2:	f200 8087 	bhi.w	8009404 <HAL_TIM_ConfigClockSource+0x16c>
 80092f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80092fa:	f000 8086 	beq.w	800940a <HAL_TIM_ConfigClockSource+0x172>
 80092fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009302:	d87f      	bhi.n	8009404 <HAL_TIM_ConfigClockSource+0x16c>
 8009304:	2b70      	cmp	r3, #112	; 0x70
 8009306:	d01a      	beq.n	800933e <HAL_TIM_ConfigClockSource+0xa6>
 8009308:	2b70      	cmp	r3, #112	; 0x70
 800930a:	d87b      	bhi.n	8009404 <HAL_TIM_ConfigClockSource+0x16c>
 800930c:	2b60      	cmp	r3, #96	; 0x60
 800930e:	d050      	beq.n	80093b2 <HAL_TIM_ConfigClockSource+0x11a>
 8009310:	2b60      	cmp	r3, #96	; 0x60
 8009312:	d877      	bhi.n	8009404 <HAL_TIM_ConfigClockSource+0x16c>
 8009314:	2b50      	cmp	r3, #80	; 0x50
 8009316:	d03c      	beq.n	8009392 <HAL_TIM_ConfigClockSource+0xfa>
 8009318:	2b50      	cmp	r3, #80	; 0x50
 800931a:	d873      	bhi.n	8009404 <HAL_TIM_ConfigClockSource+0x16c>
 800931c:	2b40      	cmp	r3, #64	; 0x40
 800931e:	d058      	beq.n	80093d2 <HAL_TIM_ConfigClockSource+0x13a>
 8009320:	2b40      	cmp	r3, #64	; 0x40
 8009322:	d86f      	bhi.n	8009404 <HAL_TIM_ConfigClockSource+0x16c>
 8009324:	2b30      	cmp	r3, #48	; 0x30
 8009326:	d064      	beq.n	80093f2 <HAL_TIM_ConfigClockSource+0x15a>
 8009328:	2b30      	cmp	r3, #48	; 0x30
 800932a:	d86b      	bhi.n	8009404 <HAL_TIM_ConfigClockSource+0x16c>
 800932c:	2b20      	cmp	r3, #32
 800932e:	d060      	beq.n	80093f2 <HAL_TIM_ConfigClockSource+0x15a>
 8009330:	2b20      	cmp	r3, #32
 8009332:	d867      	bhi.n	8009404 <HAL_TIM_ConfigClockSource+0x16c>
 8009334:	2b00      	cmp	r3, #0
 8009336:	d05c      	beq.n	80093f2 <HAL_TIM_ConfigClockSource+0x15a>
 8009338:	2b10      	cmp	r3, #16
 800933a:	d05a      	beq.n	80093f2 <HAL_TIM_ConfigClockSource+0x15a>
 800933c:	e062      	b.n	8009404 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	6818      	ldr	r0, [r3, #0]
 8009342:	683b      	ldr	r3, [r7, #0]
 8009344:	6899      	ldr	r1, [r3, #8]
 8009346:	683b      	ldr	r3, [r7, #0]
 8009348:	685a      	ldr	r2, [r3, #4]
 800934a:	683b      	ldr	r3, [r7, #0]
 800934c:	68db      	ldr	r3, [r3, #12]
 800934e:	f000 fbdf 	bl	8009b10 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	689b      	ldr	r3, [r3, #8]
 8009358:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800935a:	68bb      	ldr	r3, [r7, #8]
 800935c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009360:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	68ba      	ldr	r2, [r7, #8]
 8009368:	609a      	str	r2, [r3, #8]
      break;
 800936a:	e04f      	b.n	800940c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	6818      	ldr	r0, [r3, #0]
 8009370:	683b      	ldr	r3, [r7, #0]
 8009372:	6899      	ldr	r1, [r3, #8]
 8009374:	683b      	ldr	r3, [r7, #0]
 8009376:	685a      	ldr	r2, [r3, #4]
 8009378:	683b      	ldr	r3, [r7, #0]
 800937a:	68db      	ldr	r3, [r3, #12]
 800937c:	f000 fbc8 	bl	8009b10 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	689a      	ldr	r2, [r3, #8]
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800938e:	609a      	str	r2, [r3, #8]
      break;
 8009390:	e03c      	b.n	800940c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	6818      	ldr	r0, [r3, #0]
 8009396:	683b      	ldr	r3, [r7, #0]
 8009398:	6859      	ldr	r1, [r3, #4]
 800939a:	683b      	ldr	r3, [r7, #0]
 800939c:	68db      	ldr	r3, [r3, #12]
 800939e:	461a      	mov	r2, r3
 80093a0:	f000 fb3c 	bl	8009a1c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	2150      	movs	r1, #80	; 0x50
 80093aa:	4618      	mov	r0, r3
 80093ac:	f000 fb95 	bl	8009ada <TIM_ITRx_SetConfig>
      break;
 80093b0:	e02c      	b.n	800940c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	6818      	ldr	r0, [r3, #0]
 80093b6:	683b      	ldr	r3, [r7, #0]
 80093b8:	6859      	ldr	r1, [r3, #4]
 80093ba:	683b      	ldr	r3, [r7, #0]
 80093bc:	68db      	ldr	r3, [r3, #12]
 80093be:	461a      	mov	r2, r3
 80093c0:	f000 fb5b 	bl	8009a7a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	2160      	movs	r1, #96	; 0x60
 80093ca:	4618      	mov	r0, r3
 80093cc:	f000 fb85 	bl	8009ada <TIM_ITRx_SetConfig>
      break;
 80093d0:	e01c      	b.n	800940c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	6818      	ldr	r0, [r3, #0]
 80093d6:	683b      	ldr	r3, [r7, #0]
 80093d8:	6859      	ldr	r1, [r3, #4]
 80093da:	683b      	ldr	r3, [r7, #0]
 80093dc:	68db      	ldr	r3, [r3, #12]
 80093de:	461a      	mov	r2, r3
 80093e0:	f000 fb1c 	bl	8009a1c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	2140      	movs	r1, #64	; 0x40
 80093ea:	4618      	mov	r0, r3
 80093ec:	f000 fb75 	bl	8009ada <TIM_ITRx_SetConfig>
      break;
 80093f0:	e00c      	b.n	800940c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681a      	ldr	r2, [r3, #0]
 80093f6:	683b      	ldr	r3, [r7, #0]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	4619      	mov	r1, r3
 80093fc:	4610      	mov	r0, r2
 80093fe:	f000 fb6c 	bl	8009ada <TIM_ITRx_SetConfig>
      break;
 8009402:	e003      	b.n	800940c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009404:	2301      	movs	r3, #1
 8009406:	73fb      	strb	r3, [r7, #15]
      break;
 8009408:	e000      	b.n	800940c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800940a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	2201      	movs	r2, #1
 8009410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	2200      	movs	r2, #0
 8009418:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800941c:	7bfb      	ldrb	r3, [r7, #15]
}
 800941e:	4618      	mov	r0, r3
 8009420:	3710      	adds	r7, #16
 8009422:	46bd      	mov	sp, r7
 8009424:	bd80      	pop	{r7, pc}

08009426 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009426:	b480      	push	{r7}
 8009428:	b083      	sub	sp, #12
 800942a:	af00      	add	r7, sp, #0
 800942c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800942e:	bf00      	nop
 8009430:	370c      	adds	r7, #12
 8009432:	46bd      	mov	sp, r7
 8009434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009438:	4770      	bx	lr

0800943a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800943a:	b480      	push	{r7}
 800943c:	b083      	sub	sp, #12
 800943e:	af00      	add	r7, sp, #0
 8009440:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8009442:	bf00      	nop
 8009444:	370c      	adds	r7, #12
 8009446:	46bd      	mov	sp, r7
 8009448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944c:	4770      	bx	lr

0800944e <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800944e:	b480      	push	{r7}
 8009450:	b083      	sub	sp, #12
 8009452:	af00      	add	r7, sp, #0
 8009454:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8009456:	bf00      	nop
 8009458:	370c      	adds	r7, #12
 800945a:	46bd      	mov	sp, r7
 800945c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009460:	4770      	bx	lr

08009462 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8009462:	b580      	push	{r7, lr}
 8009464:	b084      	sub	sp, #16
 8009466:	af00      	add	r7, sp, #0
 8009468:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800946e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009474:	687a      	ldr	r2, [r7, #4]
 8009476:	429a      	cmp	r2, r3
 8009478:	d107      	bne.n	800948a <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	2201      	movs	r2, #1
 800947e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	2201      	movs	r2, #1
 8009484:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009488:	e02a      	b.n	80094e0 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800948e:	687a      	ldr	r2, [r7, #4]
 8009490:	429a      	cmp	r2, r3
 8009492:	d107      	bne.n	80094a4 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	2202      	movs	r2, #2
 8009498:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	2201      	movs	r2, #1
 800949e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80094a2:	e01d      	b.n	80094e0 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094a8:	687a      	ldr	r2, [r7, #4]
 80094aa:	429a      	cmp	r2, r3
 80094ac:	d107      	bne.n	80094be <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	2204      	movs	r2, #4
 80094b2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	2201      	movs	r2, #1
 80094b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80094bc:	e010      	b.n	80094e0 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094c2:	687a      	ldr	r2, [r7, #4]
 80094c4:	429a      	cmp	r2, r3
 80094c6:	d107      	bne.n	80094d8 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	2208      	movs	r2, #8
 80094cc:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	2201      	movs	r2, #1
 80094d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80094d6:	e003      	b.n	80094e0 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	2201      	movs	r2, #1
 80094dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80094e0:	68f8      	ldr	r0, [r7, #12]
 80094e2:	f7ff ffb4 	bl	800944e <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	2200      	movs	r2, #0
 80094ea:	771a      	strb	r2, [r3, #28]
}
 80094ec:	bf00      	nop
 80094ee:	3710      	adds	r7, #16
 80094f0:	46bd      	mov	sp, r7
 80094f2:	bd80      	pop	{r7, pc}

080094f4 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80094f4:	b580      	push	{r7, lr}
 80094f6:	b084      	sub	sp, #16
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009500:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009506:	687a      	ldr	r2, [r7, #4]
 8009508:	429a      	cmp	r2, r3
 800950a:	d10b      	bne.n	8009524 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	2201      	movs	r2, #1
 8009510:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	69db      	ldr	r3, [r3, #28]
 8009516:	2b00      	cmp	r3, #0
 8009518:	d136      	bne.n	8009588 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	2201      	movs	r2, #1
 800951e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009522:	e031      	b.n	8009588 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009528:	687a      	ldr	r2, [r7, #4]
 800952a:	429a      	cmp	r2, r3
 800952c:	d10b      	bne.n	8009546 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	2202      	movs	r2, #2
 8009532:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	69db      	ldr	r3, [r3, #28]
 8009538:	2b00      	cmp	r3, #0
 800953a:	d125      	bne.n	8009588 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	2201      	movs	r2, #1
 8009540:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009544:	e020      	b.n	8009588 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800954a:	687a      	ldr	r2, [r7, #4]
 800954c:	429a      	cmp	r2, r3
 800954e:	d10b      	bne.n	8009568 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	2204      	movs	r2, #4
 8009554:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	69db      	ldr	r3, [r3, #28]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d114      	bne.n	8009588 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	2201      	movs	r2, #1
 8009562:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009566:	e00f      	b.n	8009588 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800956c:	687a      	ldr	r2, [r7, #4]
 800956e:	429a      	cmp	r2, r3
 8009570:	d10a      	bne.n	8009588 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	2208      	movs	r2, #8
 8009576:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	69db      	ldr	r3, [r3, #28]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d103      	bne.n	8009588 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	2201      	movs	r2, #1
 8009584:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009588:	68f8      	ldr	r0, [r7, #12]
 800958a:	f7ff ff4c 	bl	8009426 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	2200      	movs	r2, #0
 8009592:	771a      	strb	r2, [r3, #28]
}
 8009594:	bf00      	nop
 8009596:	3710      	adds	r7, #16
 8009598:	46bd      	mov	sp, r7
 800959a:	bd80      	pop	{r7, pc}

0800959c <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800959c:	b580      	push	{r7, lr}
 800959e:	b084      	sub	sp, #16
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095a8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095ae:	687a      	ldr	r2, [r7, #4]
 80095b0:	429a      	cmp	r2, r3
 80095b2:	d103      	bne.n	80095bc <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	2201      	movs	r2, #1
 80095b8:	771a      	strb	r2, [r3, #28]
 80095ba:	e019      	b.n	80095f0 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095c0:	687a      	ldr	r2, [r7, #4]
 80095c2:	429a      	cmp	r2, r3
 80095c4:	d103      	bne.n	80095ce <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	2202      	movs	r2, #2
 80095ca:	771a      	strb	r2, [r3, #28]
 80095cc:	e010      	b.n	80095f0 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095d2:	687a      	ldr	r2, [r7, #4]
 80095d4:	429a      	cmp	r2, r3
 80095d6:	d103      	bne.n	80095e0 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	2204      	movs	r2, #4
 80095dc:	771a      	strb	r2, [r3, #28]
 80095de:	e007      	b.n	80095f0 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095e4:	687a      	ldr	r2, [r7, #4]
 80095e6:	429a      	cmp	r2, r3
 80095e8:	d102      	bne.n	80095f0 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	2208      	movs	r2, #8
 80095ee:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80095f0:	68f8      	ldr	r0, [r7, #12]
 80095f2:	f7ff ff22 	bl	800943a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	2200      	movs	r2, #0
 80095fa:	771a      	strb	r2, [r3, #28]
}
 80095fc:	bf00      	nop
 80095fe:	3710      	adds	r7, #16
 8009600:	46bd      	mov	sp, r7
 8009602:	bd80      	pop	{r7, pc}

08009604 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009604:	b480      	push	{r7}
 8009606:	b085      	sub	sp, #20
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
 800960c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	4a34      	ldr	r2, [pc, #208]	; (80096e8 <TIM_Base_SetConfig+0xe4>)
 8009618:	4293      	cmp	r3, r2
 800961a:	d00f      	beq.n	800963c <TIM_Base_SetConfig+0x38>
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009622:	d00b      	beq.n	800963c <TIM_Base_SetConfig+0x38>
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	4a31      	ldr	r2, [pc, #196]	; (80096ec <TIM_Base_SetConfig+0xe8>)
 8009628:	4293      	cmp	r3, r2
 800962a:	d007      	beq.n	800963c <TIM_Base_SetConfig+0x38>
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	4a30      	ldr	r2, [pc, #192]	; (80096f0 <TIM_Base_SetConfig+0xec>)
 8009630:	4293      	cmp	r3, r2
 8009632:	d003      	beq.n	800963c <TIM_Base_SetConfig+0x38>
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	4a2f      	ldr	r2, [pc, #188]	; (80096f4 <TIM_Base_SetConfig+0xf0>)
 8009638:	4293      	cmp	r3, r2
 800963a:	d108      	bne.n	800964e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009642:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009644:	683b      	ldr	r3, [r7, #0]
 8009646:	685b      	ldr	r3, [r3, #4]
 8009648:	68fa      	ldr	r2, [r7, #12]
 800964a:	4313      	orrs	r3, r2
 800964c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	4a25      	ldr	r2, [pc, #148]	; (80096e8 <TIM_Base_SetConfig+0xe4>)
 8009652:	4293      	cmp	r3, r2
 8009654:	d01b      	beq.n	800968e <TIM_Base_SetConfig+0x8a>
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800965c:	d017      	beq.n	800968e <TIM_Base_SetConfig+0x8a>
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	4a22      	ldr	r2, [pc, #136]	; (80096ec <TIM_Base_SetConfig+0xe8>)
 8009662:	4293      	cmp	r3, r2
 8009664:	d013      	beq.n	800968e <TIM_Base_SetConfig+0x8a>
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	4a21      	ldr	r2, [pc, #132]	; (80096f0 <TIM_Base_SetConfig+0xec>)
 800966a:	4293      	cmp	r3, r2
 800966c:	d00f      	beq.n	800968e <TIM_Base_SetConfig+0x8a>
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	4a20      	ldr	r2, [pc, #128]	; (80096f4 <TIM_Base_SetConfig+0xf0>)
 8009672:	4293      	cmp	r3, r2
 8009674:	d00b      	beq.n	800968e <TIM_Base_SetConfig+0x8a>
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	4a1f      	ldr	r2, [pc, #124]	; (80096f8 <TIM_Base_SetConfig+0xf4>)
 800967a:	4293      	cmp	r3, r2
 800967c:	d007      	beq.n	800968e <TIM_Base_SetConfig+0x8a>
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	4a1e      	ldr	r2, [pc, #120]	; (80096fc <TIM_Base_SetConfig+0xf8>)
 8009682:	4293      	cmp	r3, r2
 8009684:	d003      	beq.n	800968e <TIM_Base_SetConfig+0x8a>
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	4a1d      	ldr	r2, [pc, #116]	; (8009700 <TIM_Base_SetConfig+0xfc>)
 800968a:	4293      	cmp	r3, r2
 800968c:	d108      	bne.n	80096a0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009694:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009696:	683b      	ldr	r3, [r7, #0]
 8009698:	68db      	ldr	r3, [r3, #12]
 800969a:	68fa      	ldr	r2, [r7, #12]
 800969c:	4313      	orrs	r3, r2
 800969e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80096a6:	683b      	ldr	r3, [r7, #0]
 80096a8:	695b      	ldr	r3, [r3, #20]
 80096aa:	4313      	orrs	r3, r2
 80096ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	68fa      	ldr	r2, [r7, #12]
 80096b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80096b4:	683b      	ldr	r3, [r7, #0]
 80096b6:	689a      	ldr	r2, [r3, #8]
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80096bc:	683b      	ldr	r3, [r7, #0]
 80096be:	681a      	ldr	r2, [r3, #0]
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	4a08      	ldr	r2, [pc, #32]	; (80096e8 <TIM_Base_SetConfig+0xe4>)
 80096c8:	4293      	cmp	r3, r2
 80096ca:	d103      	bne.n	80096d4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80096cc:	683b      	ldr	r3, [r7, #0]
 80096ce:	691a      	ldr	r2, [r3, #16]
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	2201      	movs	r2, #1
 80096d8:	615a      	str	r2, [r3, #20]
}
 80096da:	bf00      	nop
 80096dc:	3714      	adds	r7, #20
 80096de:	46bd      	mov	sp, r7
 80096e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e4:	4770      	bx	lr
 80096e6:	bf00      	nop
 80096e8:	40010000 	.word	0x40010000
 80096ec:	40000400 	.word	0x40000400
 80096f0:	40000800 	.word	0x40000800
 80096f4:	40000c00 	.word	0x40000c00
 80096f8:	40014000 	.word	0x40014000
 80096fc:	40014400 	.word	0x40014400
 8009700:	40014800 	.word	0x40014800

08009704 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009704:	b480      	push	{r7}
 8009706:	b087      	sub	sp, #28
 8009708:	af00      	add	r7, sp, #0
 800970a:	6078      	str	r0, [r7, #4]
 800970c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	6a1b      	ldr	r3, [r3, #32]
 8009712:	f023 0201 	bic.w	r2, r3, #1
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	6a1b      	ldr	r3, [r3, #32]
 800971e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	685b      	ldr	r3, [r3, #4]
 8009724:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	699b      	ldr	r3, [r3, #24]
 800972a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009732:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	f023 0303 	bic.w	r3, r3, #3
 800973a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800973c:	683b      	ldr	r3, [r7, #0]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	68fa      	ldr	r2, [r7, #12]
 8009742:	4313      	orrs	r3, r2
 8009744:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009746:	697b      	ldr	r3, [r7, #20]
 8009748:	f023 0302 	bic.w	r3, r3, #2
 800974c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800974e:	683b      	ldr	r3, [r7, #0]
 8009750:	689b      	ldr	r3, [r3, #8]
 8009752:	697a      	ldr	r2, [r7, #20]
 8009754:	4313      	orrs	r3, r2
 8009756:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	4a1c      	ldr	r2, [pc, #112]	; (80097cc <TIM_OC1_SetConfig+0xc8>)
 800975c:	4293      	cmp	r3, r2
 800975e:	d10c      	bne.n	800977a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009760:	697b      	ldr	r3, [r7, #20]
 8009762:	f023 0308 	bic.w	r3, r3, #8
 8009766:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009768:	683b      	ldr	r3, [r7, #0]
 800976a:	68db      	ldr	r3, [r3, #12]
 800976c:	697a      	ldr	r2, [r7, #20]
 800976e:	4313      	orrs	r3, r2
 8009770:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009772:	697b      	ldr	r3, [r7, #20]
 8009774:	f023 0304 	bic.w	r3, r3, #4
 8009778:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	4a13      	ldr	r2, [pc, #76]	; (80097cc <TIM_OC1_SetConfig+0xc8>)
 800977e:	4293      	cmp	r3, r2
 8009780:	d111      	bne.n	80097a6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009782:	693b      	ldr	r3, [r7, #16]
 8009784:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009788:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800978a:	693b      	ldr	r3, [r7, #16]
 800978c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009790:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009792:	683b      	ldr	r3, [r7, #0]
 8009794:	695b      	ldr	r3, [r3, #20]
 8009796:	693a      	ldr	r2, [r7, #16]
 8009798:	4313      	orrs	r3, r2
 800979a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800979c:	683b      	ldr	r3, [r7, #0]
 800979e:	699b      	ldr	r3, [r3, #24]
 80097a0:	693a      	ldr	r2, [r7, #16]
 80097a2:	4313      	orrs	r3, r2
 80097a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	693a      	ldr	r2, [r7, #16]
 80097aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	68fa      	ldr	r2, [r7, #12]
 80097b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80097b2:	683b      	ldr	r3, [r7, #0]
 80097b4:	685a      	ldr	r2, [r3, #4]
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	697a      	ldr	r2, [r7, #20]
 80097be:	621a      	str	r2, [r3, #32]
}
 80097c0:	bf00      	nop
 80097c2:	371c      	adds	r7, #28
 80097c4:	46bd      	mov	sp, r7
 80097c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ca:	4770      	bx	lr
 80097cc:	40010000 	.word	0x40010000

080097d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80097d0:	b480      	push	{r7}
 80097d2:	b087      	sub	sp, #28
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	6078      	str	r0, [r7, #4]
 80097d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	6a1b      	ldr	r3, [r3, #32]
 80097de:	f023 0210 	bic.w	r2, r3, #16
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	6a1b      	ldr	r3, [r3, #32]
 80097ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	685b      	ldr	r3, [r3, #4]
 80097f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	699b      	ldr	r3, [r3, #24]
 80097f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80097fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009806:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009808:	683b      	ldr	r3, [r7, #0]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	021b      	lsls	r3, r3, #8
 800980e:	68fa      	ldr	r2, [r7, #12]
 8009810:	4313      	orrs	r3, r2
 8009812:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009814:	697b      	ldr	r3, [r7, #20]
 8009816:	f023 0320 	bic.w	r3, r3, #32
 800981a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800981c:	683b      	ldr	r3, [r7, #0]
 800981e:	689b      	ldr	r3, [r3, #8]
 8009820:	011b      	lsls	r3, r3, #4
 8009822:	697a      	ldr	r2, [r7, #20]
 8009824:	4313      	orrs	r3, r2
 8009826:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	4a1e      	ldr	r2, [pc, #120]	; (80098a4 <TIM_OC2_SetConfig+0xd4>)
 800982c:	4293      	cmp	r3, r2
 800982e:	d10d      	bne.n	800984c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009830:	697b      	ldr	r3, [r7, #20]
 8009832:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009836:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009838:	683b      	ldr	r3, [r7, #0]
 800983a:	68db      	ldr	r3, [r3, #12]
 800983c:	011b      	lsls	r3, r3, #4
 800983e:	697a      	ldr	r2, [r7, #20]
 8009840:	4313      	orrs	r3, r2
 8009842:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009844:	697b      	ldr	r3, [r7, #20]
 8009846:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800984a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	4a15      	ldr	r2, [pc, #84]	; (80098a4 <TIM_OC2_SetConfig+0xd4>)
 8009850:	4293      	cmp	r3, r2
 8009852:	d113      	bne.n	800987c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009854:	693b      	ldr	r3, [r7, #16]
 8009856:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800985a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800985c:	693b      	ldr	r3, [r7, #16]
 800985e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009862:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009864:	683b      	ldr	r3, [r7, #0]
 8009866:	695b      	ldr	r3, [r3, #20]
 8009868:	009b      	lsls	r3, r3, #2
 800986a:	693a      	ldr	r2, [r7, #16]
 800986c:	4313      	orrs	r3, r2
 800986e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009870:	683b      	ldr	r3, [r7, #0]
 8009872:	699b      	ldr	r3, [r3, #24]
 8009874:	009b      	lsls	r3, r3, #2
 8009876:	693a      	ldr	r2, [r7, #16]
 8009878:	4313      	orrs	r3, r2
 800987a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	693a      	ldr	r2, [r7, #16]
 8009880:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	68fa      	ldr	r2, [r7, #12]
 8009886:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009888:	683b      	ldr	r3, [r7, #0]
 800988a:	685a      	ldr	r2, [r3, #4]
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	697a      	ldr	r2, [r7, #20]
 8009894:	621a      	str	r2, [r3, #32]
}
 8009896:	bf00      	nop
 8009898:	371c      	adds	r7, #28
 800989a:	46bd      	mov	sp, r7
 800989c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a0:	4770      	bx	lr
 80098a2:	bf00      	nop
 80098a4:	40010000 	.word	0x40010000

080098a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80098a8:	b480      	push	{r7}
 80098aa:	b087      	sub	sp, #28
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	6078      	str	r0, [r7, #4]
 80098b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	6a1b      	ldr	r3, [r3, #32]
 80098b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	6a1b      	ldr	r3, [r3, #32]
 80098c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	685b      	ldr	r3, [r3, #4]
 80098c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	69db      	ldr	r3, [r3, #28]
 80098ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80098d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	f023 0303 	bic.w	r3, r3, #3
 80098de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80098e0:	683b      	ldr	r3, [r7, #0]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	68fa      	ldr	r2, [r7, #12]
 80098e6:	4313      	orrs	r3, r2
 80098e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80098ea:	697b      	ldr	r3, [r7, #20]
 80098ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80098f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80098f2:	683b      	ldr	r3, [r7, #0]
 80098f4:	689b      	ldr	r3, [r3, #8]
 80098f6:	021b      	lsls	r3, r3, #8
 80098f8:	697a      	ldr	r2, [r7, #20]
 80098fa:	4313      	orrs	r3, r2
 80098fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	4a1d      	ldr	r2, [pc, #116]	; (8009978 <TIM_OC3_SetConfig+0xd0>)
 8009902:	4293      	cmp	r3, r2
 8009904:	d10d      	bne.n	8009922 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009906:	697b      	ldr	r3, [r7, #20]
 8009908:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800990c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800990e:	683b      	ldr	r3, [r7, #0]
 8009910:	68db      	ldr	r3, [r3, #12]
 8009912:	021b      	lsls	r3, r3, #8
 8009914:	697a      	ldr	r2, [r7, #20]
 8009916:	4313      	orrs	r3, r2
 8009918:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800991a:	697b      	ldr	r3, [r7, #20]
 800991c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009920:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	4a14      	ldr	r2, [pc, #80]	; (8009978 <TIM_OC3_SetConfig+0xd0>)
 8009926:	4293      	cmp	r3, r2
 8009928:	d113      	bne.n	8009952 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800992a:	693b      	ldr	r3, [r7, #16]
 800992c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009930:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009932:	693b      	ldr	r3, [r7, #16]
 8009934:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009938:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800993a:	683b      	ldr	r3, [r7, #0]
 800993c:	695b      	ldr	r3, [r3, #20]
 800993e:	011b      	lsls	r3, r3, #4
 8009940:	693a      	ldr	r2, [r7, #16]
 8009942:	4313      	orrs	r3, r2
 8009944:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009946:	683b      	ldr	r3, [r7, #0]
 8009948:	699b      	ldr	r3, [r3, #24]
 800994a:	011b      	lsls	r3, r3, #4
 800994c:	693a      	ldr	r2, [r7, #16]
 800994e:	4313      	orrs	r3, r2
 8009950:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	693a      	ldr	r2, [r7, #16]
 8009956:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	68fa      	ldr	r2, [r7, #12]
 800995c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800995e:	683b      	ldr	r3, [r7, #0]
 8009960:	685a      	ldr	r2, [r3, #4]
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	697a      	ldr	r2, [r7, #20]
 800996a:	621a      	str	r2, [r3, #32]
}
 800996c:	bf00      	nop
 800996e:	371c      	adds	r7, #28
 8009970:	46bd      	mov	sp, r7
 8009972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009976:	4770      	bx	lr
 8009978:	40010000 	.word	0x40010000

0800997c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800997c:	b480      	push	{r7}
 800997e:	b087      	sub	sp, #28
 8009980:	af00      	add	r7, sp, #0
 8009982:	6078      	str	r0, [r7, #4]
 8009984:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	6a1b      	ldr	r3, [r3, #32]
 800998a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	6a1b      	ldr	r3, [r3, #32]
 8009996:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	685b      	ldr	r3, [r3, #4]
 800999c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	69db      	ldr	r3, [r3, #28]
 80099a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80099aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80099b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80099b4:	683b      	ldr	r3, [r7, #0]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	021b      	lsls	r3, r3, #8
 80099ba:	68fa      	ldr	r2, [r7, #12]
 80099bc:	4313      	orrs	r3, r2
 80099be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80099c0:	693b      	ldr	r3, [r7, #16]
 80099c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80099c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80099c8:	683b      	ldr	r3, [r7, #0]
 80099ca:	689b      	ldr	r3, [r3, #8]
 80099cc:	031b      	lsls	r3, r3, #12
 80099ce:	693a      	ldr	r2, [r7, #16]
 80099d0:	4313      	orrs	r3, r2
 80099d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	4a10      	ldr	r2, [pc, #64]	; (8009a18 <TIM_OC4_SetConfig+0x9c>)
 80099d8:	4293      	cmp	r3, r2
 80099da:	d109      	bne.n	80099f0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80099dc:	697b      	ldr	r3, [r7, #20]
 80099de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80099e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80099e4:	683b      	ldr	r3, [r7, #0]
 80099e6:	695b      	ldr	r3, [r3, #20]
 80099e8:	019b      	lsls	r3, r3, #6
 80099ea:	697a      	ldr	r2, [r7, #20]
 80099ec:	4313      	orrs	r3, r2
 80099ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	697a      	ldr	r2, [r7, #20]
 80099f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	68fa      	ldr	r2, [r7, #12]
 80099fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80099fc:	683b      	ldr	r3, [r7, #0]
 80099fe:	685a      	ldr	r2, [r3, #4]
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	693a      	ldr	r2, [r7, #16]
 8009a08:	621a      	str	r2, [r3, #32]
}
 8009a0a:	bf00      	nop
 8009a0c:	371c      	adds	r7, #28
 8009a0e:	46bd      	mov	sp, r7
 8009a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a14:	4770      	bx	lr
 8009a16:	bf00      	nop
 8009a18:	40010000 	.word	0x40010000

08009a1c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009a1c:	b480      	push	{r7}
 8009a1e:	b087      	sub	sp, #28
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	60f8      	str	r0, [r7, #12]
 8009a24:	60b9      	str	r1, [r7, #8]
 8009a26:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	6a1b      	ldr	r3, [r3, #32]
 8009a2c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	6a1b      	ldr	r3, [r3, #32]
 8009a32:	f023 0201 	bic.w	r2, r3, #1
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	699b      	ldr	r3, [r3, #24]
 8009a3e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009a40:	693b      	ldr	r3, [r7, #16]
 8009a42:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009a46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	011b      	lsls	r3, r3, #4
 8009a4c:	693a      	ldr	r2, [r7, #16]
 8009a4e:	4313      	orrs	r3, r2
 8009a50:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009a52:	697b      	ldr	r3, [r7, #20]
 8009a54:	f023 030a 	bic.w	r3, r3, #10
 8009a58:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009a5a:	697a      	ldr	r2, [r7, #20]
 8009a5c:	68bb      	ldr	r3, [r7, #8]
 8009a5e:	4313      	orrs	r3, r2
 8009a60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	693a      	ldr	r2, [r7, #16]
 8009a66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	697a      	ldr	r2, [r7, #20]
 8009a6c:	621a      	str	r2, [r3, #32]
}
 8009a6e:	bf00      	nop
 8009a70:	371c      	adds	r7, #28
 8009a72:	46bd      	mov	sp, r7
 8009a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a78:	4770      	bx	lr

08009a7a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009a7a:	b480      	push	{r7}
 8009a7c:	b087      	sub	sp, #28
 8009a7e:	af00      	add	r7, sp, #0
 8009a80:	60f8      	str	r0, [r7, #12]
 8009a82:	60b9      	str	r1, [r7, #8]
 8009a84:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	6a1b      	ldr	r3, [r3, #32]
 8009a8a:	f023 0210 	bic.w	r2, r3, #16
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	699b      	ldr	r3, [r3, #24]
 8009a96:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	6a1b      	ldr	r3, [r3, #32]
 8009a9c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009a9e:	697b      	ldr	r3, [r7, #20]
 8009aa0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009aa4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	031b      	lsls	r3, r3, #12
 8009aaa:	697a      	ldr	r2, [r7, #20]
 8009aac:	4313      	orrs	r3, r2
 8009aae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009ab0:	693b      	ldr	r3, [r7, #16]
 8009ab2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009ab6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009ab8:	68bb      	ldr	r3, [r7, #8]
 8009aba:	011b      	lsls	r3, r3, #4
 8009abc:	693a      	ldr	r2, [r7, #16]
 8009abe:	4313      	orrs	r3, r2
 8009ac0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	697a      	ldr	r2, [r7, #20]
 8009ac6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	693a      	ldr	r2, [r7, #16]
 8009acc:	621a      	str	r2, [r3, #32]
}
 8009ace:	bf00      	nop
 8009ad0:	371c      	adds	r7, #28
 8009ad2:	46bd      	mov	sp, r7
 8009ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad8:	4770      	bx	lr

08009ada <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009ada:	b480      	push	{r7}
 8009adc:	b085      	sub	sp, #20
 8009ade:	af00      	add	r7, sp, #0
 8009ae0:	6078      	str	r0, [r7, #4]
 8009ae2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	689b      	ldr	r3, [r3, #8]
 8009ae8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009af0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009af2:	683a      	ldr	r2, [r7, #0]
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	4313      	orrs	r3, r2
 8009af8:	f043 0307 	orr.w	r3, r3, #7
 8009afc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	68fa      	ldr	r2, [r7, #12]
 8009b02:	609a      	str	r2, [r3, #8]
}
 8009b04:	bf00      	nop
 8009b06:	3714      	adds	r7, #20
 8009b08:	46bd      	mov	sp, r7
 8009b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b0e:	4770      	bx	lr

08009b10 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009b10:	b480      	push	{r7}
 8009b12:	b087      	sub	sp, #28
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	60f8      	str	r0, [r7, #12]
 8009b18:	60b9      	str	r1, [r7, #8]
 8009b1a:	607a      	str	r2, [r7, #4]
 8009b1c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	689b      	ldr	r3, [r3, #8]
 8009b22:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009b24:	697b      	ldr	r3, [r7, #20]
 8009b26:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009b2a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009b2c:	683b      	ldr	r3, [r7, #0]
 8009b2e:	021a      	lsls	r2, r3, #8
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	431a      	orrs	r2, r3
 8009b34:	68bb      	ldr	r3, [r7, #8]
 8009b36:	4313      	orrs	r3, r2
 8009b38:	697a      	ldr	r2, [r7, #20]
 8009b3a:	4313      	orrs	r3, r2
 8009b3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	697a      	ldr	r2, [r7, #20]
 8009b42:	609a      	str	r2, [r3, #8]
}
 8009b44:	bf00      	nop
 8009b46:	371c      	adds	r7, #28
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4e:	4770      	bx	lr

08009b50 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009b50:	b480      	push	{r7}
 8009b52:	b087      	sub	sp, #28
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	60f8      	str	r0, [r7, #12]
 8009b58:	60b9      	str	r1, [r7, #8]
 8009b5a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009b5c:	68bb      	ldr	r3, [r7, #8]
 8009b5e:	f003 031f 	and.w	r3, r3, #31
 8009b62:	2201      	movs	r2, #1
 8009b64:	fa02 f303 	lsl.w	r3, r2, r3
 8009b68:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	6a1a      	ldr	r2, [r3, #32]
 8009b6e:	697b      	ldr	r3, [r7, #20]
 8009b70:	43db      	mvns	r3, r3
 8009b72:	401a      	ands	r2, r3
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	6a1a      	ldr	r2, [r3, #32]
 8009b7c:	68bb      	ldr	r3, [r7, #8]
 8009b7e:	f003 031f 	and.w	r3, r3, #31
 8009b82:	6879      	ldr	r1, [r7, #4]
 8009b84:	fa01 f303 	lsl.w	r3, r1, r3
 8009b88:	431a      	orrs	r2, r3
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	621a      	str	r2, [r3, #32]
}
 8009b8e:	bf00      	nop
 8009b90:	371c      	adds	r7, #28
 8009b92:	46bd      	mov	sp, r7
 8009b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b98:	4770      	bx	lr
	...

08009b9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009b9c:	b480      	push	{r7}
 8009b9e:	b085      	sub	sp, #20
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	6078      	str	r0, [r7, #4]
 8009ba4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009bac:	2b01      	cmp	r3, #1
 8009bae:	d101      	bne.n	8009bb4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009bb0:	2302      	movs	r3, #2
 8009bb2:	e050      	b.n	8009c56 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	2201      	movs	r2, #1
 8009bb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	2202      	movs	r2, #2
 8009bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	685b      	ldr	r3, [r3, #4]
 8009bca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	689b      	ldr	r3, [r3, #8]
 8009bd2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009bda:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009bdc:	683b      	ldr	r3, [r7, #0]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	68fa      	ldr	r2, [r7, #12]
 8009be2:	4313      	orrs	r3, r2
 8009be4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	68fa      	ldr	r2, [r7, #12]
 8009bec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	4a1c      	ldr	r2, [pc, #112]	; (8009c64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8009bf4:	4293      	cmp	r3, r2
 8009bf6:	d018      	beq.n	8009c2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c00:	d013      	beq.n	8009c2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	4a18      	ldr	r2, [pc, #96]	; (8009c68 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8009c08:	4293      	cmp	r3, r2
 8009c0a:	d00e      	beq.n	8009c2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	4a16      	ldr	r2, [pc, #88]	; (8009c6c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8009c12:	4293      	cmp	r3, r2
 8009c14:	d009      	beq.n	8009c2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	4a15      	ldr	r2, [pc, #84]	; (8009c70 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8009c1c:	4293      	cmp	r3, r2
 8009c1e:	d004      	beq.n	8009c2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	4a13      	ldr	r2, [pc, #76]	; (8009c74 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8009c26:	4293      	cmp	r3, r2
 8009c28:	d10c      	bne.n	8009c44 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009c2a:	68bb      	ldr	r3, [r7, #8]
 8009c2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009c30:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009c32:	683b      	ldr	r3, [r7, #0]
 8009c34:	685b      	ldr	r3, [r3, #4]
 8009c36:	68ba      	ldr	r2, [r7, #8]
 8009c38:	4313      	orrs	r3, r2
 8009c3a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	68ba      	ldr	r2, [r7, #8]
 8009c42:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	2201      	movs	r2, #1
 8009c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	2200      	movs	r2, #0
 8009c50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009c54:	2300      	movs	r3, #0
}
 8009c56:	4618      	mov	r0, r3
 8009c58:	3714      	adds	r7, #20
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c60:	4770      	bx	lr
 8009c62:	bf00      	nop
 8009c64:	40010000 	.word	0x40010000
 8009c68:	40000400 	.word	0x40000400
 8009c6c:	40000800 	.word	0x40000800
 8009c70:	40000c00 	.word	0x40000c00
 8009c74:	40014000 	.word	0x40014000

08009c78 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009c78:	b580      	push	{r7, lr}
 8009c7a:	b08a      	sub	sp, #40	; 0x28
 8009c7c:	af02      	add	r7, sp, #8
 8009c7e:	60f8      	str	r0, [r7, #12]
 8009c80:	60b9      	str	r1, [r7, #8]
 8009c82:	603b      	str	r3, [r7, #0]
 8009c84:	4613      	mov	r3, r2
 8009c86:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009c88:	2300      	movs	r3, #0
 8009c8a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c92:	b2db      	uxtb	r3, r3
 8009c94:	2b20      	cmp	r3, #32
 8009c96:	d17c      	bne.n	8009d92 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009c98:	68bb      	ldr	r3, [r7, #8]
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d002      	beq.n	8009ca4 <HAL_UART_Transmit+0x2c>
 8009c9e:	88fb      	ldrh	r3, [r7, #6]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d101      	bne.n	8009ca8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009ca4:	2301      	movs	r3, #1
 8009ca6:	e075      	b.n	8009d94 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009cae:	2b01      	cmp	r3, #1
 8009cb0:	d101      	bne.n	8009cb6 <HAL_UART_Transmit+0x3e>
 8009cb2:	2302      	movs	r3, #2
 8009cb4:	e06e      	b.n	8009d94 <HAL_UART_Transmit+0x11c>
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	2201      	movs	r2, #1
 8009cba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	2221      	movs	r2, #33	; 0x21
 8009cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009ccc:	f7f9 fe16 	bl	80038fc <HAL_GetTick>
 8009cd0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	88fa      	ldrh	r2, [r7, #6]
 8009cd6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	88fa      	ldrh	r2, [r7, #6]
 8009cdc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	689b      	ldr	r3, [r3, #8]
 8009ce2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ce6:	d108      	bne.n	8009cfa <HAL_UART_Transmit+0x82>
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	691b      	ldr	r3, [r3, #16]
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d104      	bne.n	8009cfa <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8009cf0:	2300      	movs	r3, #0
 8009cf2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009cf4:	68bb      	ldr	r3, [r7, #8]
 8009cf6:	61bb      	str	r3, [r7, #24]
 8009cf8:	e003      	b.n	8009d02 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8009cfa:	68bb      	ldr	r3, [r7, #8]
 8009cfc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009cfe:	2300      	movs	r3, #0
 8009d00:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	2200      	movs	r2, #0
 8009d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8009d0a:	e02a      	b.n	8009d62 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009d0c:	683b      	ldr	r3, [r7, #0]
 8009d0e:	9300      	str	r3, [sp, #0]
 8009d10:	697b      	ldr	r3, [r7, #20]
 8009d12:	2200      	movs	r2, #0
 8009d14:	2180      	movs	r1, #128	; 0x80
 8009d16:	68f8      	ldr	r0, [r7, #12]
 8009d18:	f000 f840 	bl	8009d9c <UART_WaitOnFlagUntilTimeout>
 8009d1c:	4603      	mov	r3, r0
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d001      	beq.n	8009d26 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8009d22:	2303      	movs	r3, #3
 8009d24:	e036      	b.n	8009d94 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8009d26:	69fb      	ldr	r3, [r7, #28]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d10b      	bne.n	8009d44 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009d2c:	69bb      	ldr	r3, [r7, #24]
 8009d2e:	881b      	ldrh	r3, [r3, #0]
 8009d30:	461a      	mov	r2, r3
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009d3a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009d3c:	69bb      	ldr	r3, [r7, #24]
 8009d3e:	3302      	adds	r3, #2
 8009d40:	61bb      	str	r3, [r7, #24]
 8009d42:	e007      	b.n	8009d54 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009d44:	69fb      	ldr	r3, [r7, #28]
 8009d46:	781a      	ldrb	r2, [r3, #0]
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009d4e:	69fb      	ldr	r3, [r7, #28]
 8009d50:	3301      	adds	r3, #1
 8009d52:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009d58:	b29b      	uxth	r3, r3
 8009d5a:	3b01      	subs	r3, #1
 8009d5c:	b29a      	uxth	r2, r3
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009d66:	b29b      	uxth	r3, r3
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d1cf      	bne.n	8009d0c <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009d6c:	683b      	ldr	r3, [r7, #0]
 8009d6e:	9300      	str	r3, [sp, #0]
 8009d70:	697b      	ldr	r3, [r7, #20]
 8009d72:	2200      	movs	r2, #0
 8009d74:	2140      	movs	r1, #64	; 0x40
 8009d76:	68f8      	ldr	r0, [r7, #12]
 8009d78:	f000 f810 	bl	8009d9c <UART_WaitOnFlagUntilTimeout>
 8009d7c:	4603      	mov	r3, r0
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d001      	beq.n	8009d86 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8009d82:	2303      	movs	r3, #3
 8009d84:	e006      	b.n	8009d94 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	2220      	movs	r2, #32
 8009d8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8009d8e:	2300      	movs	r3, #0
 8009d90:	e000      	b.n	8009d94 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8009d92:	2302      	movs	r3, #2
  }
}
 8009d94:	4618      	mov	r0, r3
 8009d96:	3720      	adds	r7, #32
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	bd80      	pop	{r7, pc}

08009d9c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009d9c:	b580      	push	{r7, lr}
 8009d9e:	b090      	sub	sp, #64	; 0x40
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	60f8      	str	r0, [r7, #12]
 8009da4:	60b9      	str	r1, [r7, #8]
 8009da6:	603b      	str	r3, [r7, #0]
 8009da8:	4613      	mov	r3, r2
 8009daa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009dac:	e050      	b.n	8009e50 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009dae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009db4:	d04c      	beq.n	8009e50 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009db6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d007      	beq.n	8009dcc <UART_WaitOnFlagUntilTimeout+0x30>
 8009dbc:	f7f9 fd9e 	bl	80038fc <HAL_GetTick>
 8009dc0:	4602      	mov	r2, r0
 8009dc2:	683b      	ldr	r3, [r7, #0]
 8009dc4:	1ad3      	subs	r3, r2, r3
 8009dc6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009dc8:	429a      	cmp	r2, r3
 8009dca:	d241      	bcs.n	8009e50 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	330c      	adds	r3, #12
 8009dd2:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dd6:	e853 3f00 	ldrex	r3, [r3]
 8009dda:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dde:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009de2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	330c      	adds	r3, #12
 8009dea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009dec:	637a      	str	r2, [r7, #52]	; 0x34
 8009dee:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009df0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009df2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009df4:	e841 2300 	strex	r3, r2, [r1]
 8009df8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d1e5      	bne.n	8009dcc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	3314      	adds	r3, #20
 8009e06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e08:	697b      	ldr	r3, [r7, #20]
 8009e0a:	e853 3f00 	ldrex	r3, [r3]
 8009e0e:	613b      	str	r3, [r7, #16]
   return(result);
 8009e10:	693b      	ldr	r3, [r7, #16]
 8009e12:	f023 0301 	bic.w	r3, r3, #1
 8009e16:	63bb      	str	r3, [r7, #56]	; 0x38
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	3314      	adds	r3, #20
 8009e1e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009e20:	623a      	str	r2, [r7, #32]
 8009e22:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e24:	69f9      	ldr	r1, [r7, #28]
 8009e26:	6a3a      	ldr	r2, [r7, #32]
 8009e28:	e841 2300 	strex	r3, r2, [r1]
 8009e2c:	61bb      	str	r3, [r7, #24]
   return(result);
 8009e2e:	69bb      	ldr	r3, [r7, #24]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d1e5      	bne.n	8009e00 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	2220      	movs	r2, #32
 8009e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	2220      	movs	r2, #32
 8009e40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	2200      	movs	r2, #0
 8009e48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8009e4c:	2303      	movs	r3, #3
 8009e4e:	e00f      	b.n	8009e70 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	681a      	ldr	r2, [r3, #0]
 8009e56:	68bb      	ldr	r3, [r7, #8]
 8009e58:	4013      	ands	r3, r2
 8009e5a:	68ba      	ldr	r2, [r7, #8]
 8009e5c:	429a      	cmp	r2, r3
 8009e5e:	bf0c      	ite	eq
 8009e60:	2301      	moveq	r3, #1
 8009e62:	2300      	movne	r3, #0
 8009e64:	b2db      	uxtb	r3, r3
 8009e66:	461a      	mov	r2, r3
 8009e68:	79fb      	ldrb	r3, [r7, #7]
 8009e6a:	429a      	cmp	r2, r3
 8009e6c:	d09f      	beq.n	8009dae <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009e6e:	2300      	movs	r3, #0
}
 8009e70:	4618      	mov	r0, r3
 8009e72:	3740      	adds	r7, #64	; 0x40
 8009e74:	46bd      	mov	sp, r7
 8009e76:	bd80      	pop	{r7, pc}

08009e78 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009e78:	b084      	sub	sp, #16
 8009e7a:	b580      	push	{r7, lr}
 8009e7c:	b084      	sub	sp, #16
 8009e7e:	af00      	add	r7, sp, #0
 8009e80:	6078      	str	r0, [r7, #4]
 8009e82:	f107 001c 	add.w	r0, r7, #28
 8009e86:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e8c:	2b01      	cmp	r3, #1
 8009e8e:	d122      	bne.n	8009ed6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e94:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	68db      	ldr	r3, [r3, #12]
 8009ea0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8009ea4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009ea8:	687a      	ldr	r2, [r7, #4]
 8009eaa:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	68db      	ldr	r3, [r3, #12]
 8009eb0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009eb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009eba:	2b01      	cmp	r3, #1
 8009ebc:	d105      	bne.n	8009eca <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	68db      	ldr	r3, [r3, #12]
 8009ec2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009eca:	6878      	ldr	r0, [r7, #4]
 8009ecc:	f001 fbee 	bl	800b6ac <USB_CoreReset>
 8009ed0:	4603      	mov	r3, r0
 8009ed2:	73fb      	strb	r3, [r7, #15]
 8009ed4:	e01a      	b.n	8009f0c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	68db      	ldr	r3, [r3, #12]
 8009eda:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009ee2:	6878      	ldr	r0, [r7, #4]
 8009ee4:	f001 fbe2 	bl	800b6ac <USB_CoreReset>
 8009ee8:	4603      	mov	r3, r0
 8009eea:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009eec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d106      	bne.n	8009f00 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ef6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	639a      	str	r2, [r3, #56]	; 0x38
 8009efe:	e005      	b.n	8009f0c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f04:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f0e:	2b01      	cmp	r3, #1
 8009f10:	d10b      	bne.n	8009f2a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	689b      	ldr	r3, [r3, #8]
 8009f16:	f043 0206 	orr.w	r2, r3, #6
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	689b      	ldr	r3, [r3, #8]
 8009f22:	f043 0220 	orr.w	r2, r3, #32
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009f2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	3710      	adds	r7, #16
 8009f30:	46bd      	mov	sp, r7
 8009f32:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009f36:	b004      	add	sp, #16
 8009f38:	4770      	bx	lr
	...

08009f3c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8009f3c:	b480      	push	{r7}
 8009f3e:	b087      	sub	sp, #28
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	60f8      	str	r0, [r7, #12]
 8009f44:	60b9      	str	r1, [r7, #8]
 8009f46:	4613      	mov	r3, r2
 8009f48:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8009f4a:	79fb      	ldrb	r3, [r7, #7]
 8009f4c:	2b02      	cmp	r3, #2
 8009f4e:	d165      	bne.n	800a01c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009f50:	68bb      	ldr	r3, [r7, #8]
 8009f52:	4a41      	ldr	r2, [pc, #260]	; (800a058 <USB_SetTurnaroundTime+0x11c>)
 8009f54:	4293      	cmp	r3, r2
 8009f56:	d906      	bls.n	8009f66 <USB_SetTurnaroundTime+0x2a>
 8009f58:	68bb      	ldr	r3, [r7, #8]
 8009f5a:	4a40      	ldr	r2, [pc, #256]	; (800a05c <USB_SetTurnaroundTime+0x120>)
 8009f5c:	4293      	cmp	r3, r2
 8009f5e:	d202      	bcs.n	8009f66 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8009f60:	230f      	movs	r3, #15
 8009f62:	617b      	str	r3, [r7, #20]
 8009f64:	e062      	b.n	800a02c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8009f66:	68bb      	ldr	r3, [r7, #8]
 8009f68:	4a3c      	ldr	r2, [pc, #240]	; (800a05c <USB_SetTurnaroundTime+0x120>)
 8009f6a:	4293      	cmp	r3, r2
 8009f6c:	d306      	bcc.n	8009f7c <USB_SetTurnaroundTime+0x40>
 8009f6e:	68bb      	ldr	r3, [r7, #8]
 8009f70:	4a3b      	ldr	r2, [pc, #236]	; (800a060 <USB_SetTurnaroundTime+0x124>)
 8009f72:	4293      	cmp	r3, r2
 8009f74:	d202      	bcs.n	8009f7c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8009f76:	230e      	movs	r3, #14
 8009f78:	617b      	str	r3, [r7, #20]
 8009f7a:	e057      	b.n	800a02c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009f7c:	68bb      	ldr	r3, [r7, #8]
 8009f7e:	4a38      	ldr	r2, [pc, #224]	; (800a060 <USB_SetTurnaroundTime+0x124>)
 8009f80:	4293      	cmp	r3, r2
 8009f82:	d306      	bcc.n	8009f92 <USB_SetTurnaroundTime+0x56>
 8009f84:	68bb      	ldr	r3, [r7, #8]
 8009f86:	4a37      	ldr	r2, [pc, #220]	; (800a064 <USB_SetTurnaroundTime+0x128>)
 8009f88:	4293      	cmp	r3, r2
 8009f8a:	d202      	bcs.n	8009f92 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8009f8c:	230d      	movs	r3, #13
 8009f8e:	617b      	str	r3, [r7, #20]
 8009f90:	e04c      	b.n	800a02c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8009f92:	68bb      	ldr	r3, [r7, #8]
 8009f94:	4a33      	ldr	r2, [pc, #204]	; (800a064 <USB_SetTurnaroundTime+0x128>)
 8009f96:	4293      	cmp	r3, r2
 8009f98:	d306      	bcc.n	8009fa8 <USB_SetTurnaroundTime+0x6c>
 8009f9a:	68bb      	ldr	r3, [r7, #8]
 8009f9c:	4a32      	ldr	r2, [pc, #200]	; (800a068 <USB_SetTurnaroundTime+0x12c>)
 8009f9e:	4293      	cmp	r3, r2
 8009fa0:	d802      	bhi.n	8009fa8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8009fa2:	230c      	movs	r3, #12
 8009fa4:	617b      	str	r3, [r7, #20]
 8009fa6:	e041      	b.n	800a02c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8009fa8:	68bb      	ldr	r3, [r7, #8]
 8009faa:	4a2f      	ldr	r2, [pc, #188]	; (800a068 <USB_SetTurnaroundTime+0x12c>)
 8009fac:	4293      	cmp	r3, r2
 8009fae:	d906      	bls.n	8009fbe <USB_SetTurnaroundTime+0x82>
 8009fb0:	68bb      	ldr	r3, [r7, #8]
 8009fb2:	4a2e      	ldr	r2, [pc, #184]	; (800a06c <USB_SetTurnaroundTime+0x130>)
 8009fb4:	4293      	cmp	r3, r2
 8009fb6:	d802      	bhi.n	8009fbe <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8009fb8:	230b      	movs	r3, #11
 8009fba:	617b      	str	r3, [r7, #20]
 8009fbc:	e036      	b.n	800a02c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8009fbe:	68bb      	ldr	r3, [r7, #8]
 8009fc0:	4a2a      	ldr	r2, [pc, #168]	; (800a06c <USB_SetTurnaroundTime+0x130>)
 8009fc2:	4293      	cmp	r3, r2
 8009fc4:	d906      	bls.n	8009fd4 <USB_SetTurnaroundTime+0x98>
 8009fc6:	68bb      	ldr	r3, [r7, #8]
 8009fc8:	4a29      	ldr	r2, [pc, #164]	; (800a070 <USB_SetTurnaroundTime+0x134>)
 8009fca:	4293      	cmp	r3, r2
 8009fcc:	d802      	bhi.n	8009fd4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8009fce:	230a      	movs	r3, #10
 8009fd0:	617b      	str	r3, [r7, #20]
 8009fd2:	e02b      	b.n	800a02c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8009fd4:	68bb      	ldr	r3, [r7, #8]
 8009fd6:	4a26      	ldr	r2, [pc, #152]	; (800a070 <USB_SetTurnaroundTime+0x134>)
 8009fd8:	4293      	cmp	r3, r2
 8009fda:	d906      	bls.n	8009fea <USB_SetTurnaroundTime+0xae>
 8009fdc:	68bb      	ldr	r3, [r7, #8]
 8009fde:	4a25      	ldr	r2, [pc, #148]	; (800a074 <USB_SetTurnaroundTime+0x138>)
 8009fe0:	4293      	cmp	r3, r2
 8009fe2:	d202      	bcs.n	8009fea <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8009fe4:	2309      	movs	r3, #9
 8009fe6:	617b      	str	r3, [r7, #20]
 8009fe8:	e020      	b.n	800a02c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8009fea:	68bb      	ldr	r3, [r7, #8]
 8009fec:	4a21      	ldr	r2, [pc, #132]	; (800a074 <USB_SetTurnaroundTime+0x138>)
 8009fee:	4293      	cmp	r3, r2
 8009ff0:	d306      	bcc.n	800a000 <USB_SetTurnaroundTime+0xc4>
 8009ff2:	68bb      	ldr	r3, [r7, #8]
 8009ff4:	4a20      	ldr	r2, [pc, #128]	; (800a078 <USB_SetTurnaroundTime+0x13c>)
 8009ff6:	4293      	cmp	r3, r2
 8009ff8:	d802      	bhi.n	800a000 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8009ffa:	2308      	movs	r3, #8
 8009ffc:	617b      	str	r3, [r7, #20]
 8009ffe:	e015      	b.n	800a02c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800a000:	68bb      	ldr	r3, [r7, #8]
 800a002:	4a1d      	ldr	r2, [pc, #116]	; (800a078 <USB_SetTurnaroundTime+0x13c>)
 800a004:	4293      	cmp	r3, r2
 800a006:	d906      	bls.n	800a016 <USB_SetTurnaroundTime+0xda>
 800a008:	68bb      	ldr	r3, [r7, #8]
 800a00a:	4a1c      	ldr	r2, [pc, #112]	; (800a07c <USB_SetTurnaroundTime+0x140>)
 800a00c:	4293      	cmp	r3, r2
 800a00e:	d202      	bcs.n	800a016 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800a010:	2307      	movs	r3, #7
 800a012:	617b      	str	r3, [r7, #20]
 800a014:	e00a      	b.n	800a02c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800a016:	2306      	movs	r3, #6
 800a018:	617b      	str	r3, [r7, #20]
 800a01a:	e007      	b.n	800a02c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800a01c:	79fb      	ldrb	r3, [r7, #7]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d102      	bne.n	800a028 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800a022:	2309      	movs	r3, #9
 800a024:	617b      	str	r3, [r7, #20]
 800a026:	e001      	b.n	800a02c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800a028:	2309      	movs	r3, #9
 800a02a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	68db      	ldr	r3, [r3, #12]
 800a030:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	68da      	ldr	r2, [r3, #12]
 800a03c:	697b      	ldr	r3, [r7, #20]
 800a03e:	029b      	lsls	r3, r3, #10
 800a040:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800a044:	431a      	orrs	r2, r3
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a04a:	2300      	movs	r3, #0
}
 800a04c:	4618      	mov	r0, r3
 800a04e:	371c      	adds	r7, #28
 800a050:	46bd      	mov	sp, r7
 800a052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a056:	4770      	bx	lr
 800a058:	00d8acbf 	.word	0x00d8acbf
 800a05c:	00e4e1c0 	.word	0x00e4e1c0
 800a060:	00f42400 	.word	0x00f42400
 800a064:	01067380 	.word	0x01067380
 800a068:	011a499f 	.word	0x011a499f
 800a06c:	01312cff 	.word	0x01312cff
 800a070:	014ca43f 	.word	0x014ca43f
 800a074:	016e3600 	.word	0x016e3600
 800a078:	01a6ab1f 	.word	0x01a6ab1f
 800a07c:	01e84800 	.word	0x01e84800

0800a080 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a080:	b480      	push	{r7}
 800a082:	b083      	sub	sp, #12
 800a084:	af00      	add	r7, sp, #0
 800a086:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	689b      	ldr	r3, [r3, #8]
 800a08c:	f043 0201 	orr.w	r2, r3, #1
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a094:	2300      	movs	r3, #0
}
 800a096:	4618      	mov	r0, r3
 800a098:	370c      	adds	r7, #12
 800a09a:	46bd      	mov	sp, r7
 800a09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a0:	4770      	bx	lr

0800a0a2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a0a2:	b480      	push	{r7}
 800a0a4:	b083      	sub	sp, #12
 800a0a6:	af00      	add	r7, sp, #0
 800a0a8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	689b      	ldr	r3, [r3, #8]
 800a0ae:	f023 0201 	bic.w	r2, r3, #1
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a0b6:	2300      	movs	r3, #0
}
 800a0b8:	4618      	mov	r0, r3
 800a0ba:	370c      	adds	r7, #12
 800a0bc:	46bd      	mov	sp, r7
 800a0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c2:	4770      	bx	lr

0800a0c4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a0c4:	b580      	push	{r7, lr}
 800a0c6:	b084      	sub	sp, #16
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	6078      	str	r0, [r7, #4]
 800a0cc:	460b      	mov	r3, r1
 800a0ce:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a0d0:	2300      	movs	r3, #0
 800a0d2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	68db      	ldr	r3, [r3, #12]
 800a0d8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a0e0:	78fb      	ldrb	r3, [r7, #3]
 800a0e2:	2b01      	cmp	r3, #1
 800a0e4:	d115      	bne.n	800a112 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	68db      	ldr	r3, [r3, #12]
 800a0ea:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a0f2:	2001      	movs	r0, #1
 800a0f4:	f7f9 fc0e 	bl	8003914 <HAL_Delay>
      ms++;
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	3301      	adds	r3, #1
 800a0fc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800a0fe:	6878      	ldr	r0, [r7, #4]
 800a100:	f001 fa45 	bl	800b58e <USB_GetMode>
 800a104:	4603      	mov	r3, r0
 800a106:	2b01      	cmp	r3, #1
 800a108:	d01e      	beq.n	800a148 <USB_SetCurrentMode+0x84>
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	2b31      	cmp	r3, #49	; 0x31
 800a10e:	d9f0      	bls.n	800a0f2 <USB_SetCurrentMode+0x2e>
 800a110:	e01a      	b.n	800a148 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a112:	78fb      	ldrb	r3, [r7, #3]
 800a114:	2b00      	cmp	r3, #0
 800a116:	d115      	bne.n	800a144 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	68db      	ldr	r3, [r3, #12]
 800a11c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a124:	2001      	movs	r0, #1
 800a126:	f7f9 fbf5 	bl	8003914 <HAL_Delay>
      ms++;
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	3301      	adds	r3, #1
 800a12e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800a130:	6878      	ldr	r0, [r7, #4]
 800a132:	f001 fa2c 	bl	800b58e <USB_GetMode>
 800a136:	4603      	mov	r3, r0
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d005      	beq.n	800a148 <USB_SetCurrentMode+0x84>
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	2b31      	cmp	r3, #49	; 0x31
 800a140:	d9f0      	bls.n	800a124 <USB_SetCurrentMode+0x60>
 800a142:	e001      	b.n	800a148 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a144:	2301      	movs	r3, #1
 800a146:	e005      	b.n	800a154 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	2b32      	cmp	r3, #50	; 0x32
 800a14c:	d101      	bne.n	800a152 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a14e:	2301      	movs	r3, #1
 800a150:	e000      	b.n	800a154 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a152:	2300      	movs	r3, #0
}
 800a154:	4618      	mov	r0, r3
 800a156:	3710      	adds	r7, #16
 800a158:	46bd      	mov	sp, r7
 800a15a:	bd80      	pop	{r7, pc}

0800a15c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a15c:	b084      	sub	sp, #16
 800a15e:	b580      	push	{r7, lr}
 800a160:	b086      	sub	sp, #24
 800a162:	af00      	add	r7, sp, #0
 800a164:	6078      	str	r0, [r7, #4]
 800a166:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800a16a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a16e:	2300      	movs	r3, #0
 800a170:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a176:	2300      	movs	r3, #0
 800a178:	613b      	str	r3, [r7, #16]
 800a17a:	e009      	b.n	800a190 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a17c:	687a      	ldr	r2, [r7, #4]
 800a17e:	693b      	ldr	r3, [r7, #16]
 800a180:	3340      	adds	r3, #64	; 0x40
 800a182:	009b      	lsls	r3, r3, #2
 800a184:	4413      	add	r3, r2
 800a186:	2200      	movs	r2, #0
 800a188:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a18a:	693b      	ldr	r3, [r7, #16]
 800a18c:	3301      	adds	r3, #1
 800a18e:	613b      	str	r3, [r7, #16]
 800a190:	693b      	ldr	r3, [r7, #16]
 800a192:	2b0e      	cmp	r3, #14
 800a194:	d9f2      	bls.n	800a17c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a196:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d11c      	bne.n	800a1d6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a1a2:	685b      	ldr	r3, [r3, #4]
 800a1a4:	68fa      	ldr	r2, [r7, #12]
 800a1a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a1aa:	f043 0302 	orr.w	r3, r3, #2
 800a1ae:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1b4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1c0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1cc:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	639a      	str	r2, [r3, #56]	; 0x38
 800a1d4:	e00b      	b.n	800a1ee <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1da:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1e6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a1f4:	461a      	mov	r2, r3
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a200:	4619      	mov	r1, r3
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a208:	461a      	mov	r2, r3
 800a20a:	680b      	ldr	r3, [r1, #0]
 800a20c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a20e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a210:	2b01      	cmp	r3, #1
 800a212:	d10c      	bne.n	800a22e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a216:	2b00      	cmp	r3, #0
 800a218:	d104      	bne.n	800a224 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a21a:	2100      	movs	r1, #0
 800a21c:	6878      	ldr	r0, [r7, #4]
 800a21e:	f000 f965 	bl	800a4ec <USB_SetDevSpeed>
 800a222:	e008      	b.n	800a236 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a224:	2101      	movs	r1, #1
 800a226:	6878      	ldr	r0, [r7, #4]
 800a228:	f000 f960 	bl	800a4ec <USB_SetDevSpeed>
 800a22c:	e003      	b.n	800a236 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a22e:	2103      	movs	r1, #3
 800a230:	6878      	ldr	r0, [r7, #4]
 800a232:	f000 f95b 	bl	800a4ec <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a236:	2110      	movs	r1, #16
 800a238:	6878      	ldr	r0, [r7, #4]
 800a23a:	f000 f8f3 	bl	800a424 <USB_FlushTxFifo>
 800a23e:	4603      	mov	r3, r0
 800a240:	2b00      	cmp	r3, #0
 800a242:	d001      	beq.n	800a248 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800a244:	2301      	movs	r3, #1
 800a246:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a248:	6878      	ldr	r0, [r7, #4]
 800a24a:	f000 f91f 	bl	800a48c <USB_FlushRxFifo>
 800a24e:	4603      	mov	r3, r0
 800a250:	2b00      	cmp	r3, #0
 800a252:	d001      	beq.n	800a258 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800a254:	2301      	movs	r3, #1
 800a256:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a25e:	461a      	mov	r2, r3
 800a260:	2300      	movs	r3, #0
 800a262:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a26a:	461a      	mov	r2, r3
 800a26c:	2300      	movs	r3, #0
 800a26e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a276:	461a      	mov	r2, r3
 800a278:	2300      	movs	r3, #0
 800a27a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a27c:	2300      	movs	r3, #0
 800a27e:	613b      	str	r3, [r7, #16]
 800a280:	e043      	b.n	800a30a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a282:	693b      	ldr	r3, [r7, #16]
 800a284:	015a      	lsls	r2, r3, #5
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	4413      	add	r3, r2
 800a28a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a294:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a298:	d118      	bne.n	800a2cc <USB_DevInit+0x170>
    {
      if (i == 0U)
 800a29a:	693b      	ldr	r3, [r7, #16]
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d10a      	bne.n	800a2b6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a2a0:	693b      	ldr	r3, [r7, #16]
 800a2a2:	015a      	lsls	r2, r3, #5
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	4413      	add	r3, r2
 800a2a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2ac:	461a      	mov	r2, r3
 800a2ae:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a2b2:	6013      	str	r3, [r2, #0]
 800a2b4:	e013      	b.n	800a2de <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a2b6:	693b      	ldr	r3, [r7, #16]
 800a2b8:	015a      	lsls	r2, r3, #5
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	4413      	add	r3, r2
 800a2be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2c2:	461a      	mov	r2, r3
 800a2c4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a2c8:	6013      	str	r3, [r2, #0]
 800a2ca:	e008      	b.n	800a2de <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a2cc:	693b      	ldr	r3, [r7, #16]
 800a2ce:	015a      	lsls	r2, r3, #5
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	4413      	add	r3, r2
 800a2d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2d8:	461a      	mov	r2, r3
 800a2da:	2300      	movs	r3, #0
 800a2dc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a2de:	693b      	ldr	r3, [r7, #16]
 800a2e0:	015a      	lsls	r2, r3, #5
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	4413      	add	r3, r2
 800a2e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2ea:	461a      	mov	r2, r3
 800a2ec:	2300      	movs	r3, #0
 800a2ee:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a2f0:	693b      	ldr	r3, [r7, #16]
 800a2f2:	015a      	lsls	r2, r3, #5
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	4413      	add	r3, r2
 800a2f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2fc:	461a      	mov	r2, r3
 800a2fe:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a302:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a304:	693b      	ldr	r3, [r7, #16]
 800a306:	3301      	adds	r3, #1
 800a308:	613b      	str	r3, [r7, #16]
 800a30a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a30c:	693a      	ldr	r2, [r7, #16]
 800a30e:	429a      	cmp	r2, r3
 800a310:	d3b7      	bcc.n	800a282 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a312:	2300      	movs	r3, #0
 800a314:	613b      	str	r3, [r7, #16]
 800a316:	e043      	b.n	800a3a0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a318:	693b      	ldr	r3, [r7, #16]
 800a31a:	015a      	lsls	r2, r3, #5
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	4413      	add	r3, r2
 800a320:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a32a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a32e:	d118      	bne.n	800a362 <USB_DevInit+0x206>
    {
      if (i == 0U)
 800a330:	693b      	ldr	r3, [r7, #16]
 800a332:	2b00      	cmp	r3, #0
 800a334:	d10a      	bne.n	800a34c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a336:	693b      	ldr	r3, [r7, #16]
 800a338:	015a      	lsls	r2, r3, #5
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	4413      	add	r3, r2
 800a33e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a342:	461a      	mov	r2, r3
 800a344:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a348:	6013      	str	r3, [r2, #0]
 800a34a:	e013      	b.n	800a374 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a34c:	693b      	ldr	r3, [r7, #16]
 800a34e:	015a      	lsls	r2, r3, #5
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	4413      	add	r3, r2
 800a354:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a358:	461a      	mov	r2, r3
 800a35a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a35e:	6013      	str	r3, [r2, #0]
 800a360:	e008      	b.n	800a374 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a362:	693b      	ldr	r3, [r7, #16]
 800a364:	015a      	lsls	r2, r3, #5
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	4413      	add	r3, r2
 800a36a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a36e:	461a      	mov	r2, r3
 800a370:	2300      	movs	r3, #0
 800a372:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a374:	693b      	ldr	r3, [r7, #16]
 800a376:	015a      	lsls	r2, r3, #5
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	4413      	add	r3, r2
 800a37c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a380:	461a      	mov	r2, r3
 800a382:	2300      	movs	r3, #0
 800a384:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a386:	693b      	ldr	r3, [r7, #16]
 800a388:	015a      	lsls	r2, r3, #5
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	4413      	add	r3, r2
 800a38e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a392:	461a      	mov	r2, r3
 800a394:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a398:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a39a:	693b      	ldr	r3, [r7, #16]
 800a39c:	3301      	adds	r3, #1
 800a39e:	613b      	str	r3, [r7, #16]
 800a3a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3a2:	693a      	ldr	r2, [r7, #16]
 800a3a4:	429a      	cmp	r2, r3
 800a3a6:	d3b7      	bcc.n	800a318 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a3ae:	691b      	ldr	r3, [r3, #16]
 800a3b0:	68fa      	ldr	r2, [r7, #12]
 800a3b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a3b6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a3ba:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	2200      	movs	r2, #0
 800a3c0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800a3c8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a3ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d105      	bne.n	800a3dc <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	699b      	ldr	r3, [r3, #24]
 800a3d4:	f043 0210 	orr.w	r2, r3, #16
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	699a      	ldr	r2, [r3, #24]
 800a3e0:	4b0f      	ldr	r3, [pc, #60]	; (800a420 <USB_DevInit+0x2c4>)
 800a3e2:	4313      	orrs	r3, r2
 800a3e4:	687a      	ldr	r2, [r7, #4]
 800a3e6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a3e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d005      	beq.n	800a3fa <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	699b      	ldr	r3, [r3, #24]
 800a3f2:	f043 0208 	orr.w	r2, r3, #8
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a3fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a3fc:	2b01      	cmp	r3, #1
 800a3fe:	d107      	bne.n	800a410 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	699b      	ldr	r3, [r3, #24]
 800a404:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a408:	f043 0304 	orr.w	r3, r3, #4
 800a40c:	687a      	ldr	r2, [r7, #4]
 800a40e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a410:	7dfb      	ldrb	r3, [r7, #23]
}
 800a412:	4618      	mov	r0, r3
 800a414:	3718      	adds	r7, #24
 800a416:	46bd      	mov	sp, r7
 800a418:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a41c:	b004      	add	sp, #16
 800a41e:	4770      	bx	lr
 800a420:	803c3800 	.word	0x803c3800

0800a424 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a424:	b480      	push	{r7}
 800a426:	b085      	sub	sp, #20
 800a428:	af00      	add	r7, sp, #0
 800a42a:	6078      	str	r0, [r7, #4]
 800a42c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a42e:	2300      	movs	r3, #0
 800a430:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	3301      	adds	r3, #1
 800a436:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	4a13      	ldr	r2, [pc, #76]	; (800a488 <USB_FlushTxFifo+0x64>)
 800a43c:	4293      	cmp	r3, r2
 800a43e:	d901      	bls.n	800a444 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800a440:	2303      	movs	r3, #3
 800a442:	e01b      	b.n	800a47c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	691b      	ldr	r3, [r3, #16]
 800a448:	2b00      	cmp	r3, #0
 800a44a:	daf2      	bge.n	800a432 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a44c:	2300      	movs	r3, #0
 800a44e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a450:	683b      	ldr	r3, [r7, #0]
 800a452:	019b      	lsls	r3, r3, #6
 800a454:	f043 0220 	orr.w	r2, r3, #32
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	3301      	adds	r3, #1
 800a460:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	4a08      	ldr	r2, [pc, #32]	; (800a488 <USB_FlushTxFifo+0x64>)
 800a466:	4293      	cmp	r3, r2
 800a468:	d901      	bls.n	800a46e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800a46a:	2303      	movs	r3, #3
 800a46c:	e006      	b.n	800a47c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	691b      	ldr	r3, [r3, #16]
 800a472:	f003 0320 	and.w	r3, r3, #32
 800a476:	2b20      	cmp	r3, #32
 800a478:	d0f0      	beq.n	800a45c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800a47a:	2300      	movs	r3, #0
}
 800a47c:	4618      	mov	r0, r3
 800a47e:	3714      	adds	r7, #20
 800a480:	46bd      	mov	sp, r7
 800a482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a486:	4770      	bx	lr
 800a488:	00030d40 	.word	0x00030d40

0800a48c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a48c:	b480      	push	{r7}
 800a48e:	b085      	sub	sp, #20
 800a490:	af00      	add	r7, sp, #0
 800a492:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a494:	2300      	movs	r3, #0
 800a496:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	3301      	adds	r3, #1
 800a49c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	4a11      	ldr	r2, [pc, #68]	; (800a4e8 <USB_FlushRxFifo+0x5c>)
 800a4a2:	4293      	cmp	r3, r2
 800a4a4:	d901      	bls.n	800a4aa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a4a6:	2303      	movs	r3, #3
 800a4a8:	e018      	b.n	800a4dc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	691b      	ldr	r3, [r3, #16]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	daf2      	bge.n	800a498 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a4b2:	2300      	movs	r3, #0
 800a4b4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	2210      	movs	r2, #16
 800a4ba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	3301      	adds	r3, #1
 800a4c0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	4a08      	ldr	r2, [pc, #32]	; (800a4e8 <USB_FlushRxFifo+0x5c>)
 800a4c6:	4293      	cmp	r3, r2
 800a4c8:	d901      	bls.n	800a4ce <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a4ca:	2303      	movs	r3, #3
 800a4cc:	e006      	b.n	800a4dc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	691b      	ldr	r3, [r3, #16]
 800a4d2:	f003 0310 	and.w	r3, r3, #16
 800a4d6:	2b10      	cmp	r3, #16
 800a4d8:	d0f0      	beq.n	800a4bc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a4da:	2300      	movs	r3, #0
}
 800a4dc:	4618      	mov	r0, r3
 800a4de:	3714      	adds	r7, #20
 800a4e0:	46bd      	mov	sp, r7
 800a4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e6:	4770      	bx	lr
 800a4e8:	00030d40 	.word	0x00030d40

0800a4ec <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a4ec:	b480      	push	{r7}
 800a4ee:	b085      	sub	sp, #20
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	6078      	str	r0, [r7, #4]
 800a4f4:	460b      	mov	r3, r1
 800a4f6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a502:	681a      	ldr	r2, [r3, #0]
 800a504:	78fb      	ldrb	r3, [r7, #3]
 800a506:	68f9      	ldr	r1, [r7, #12]
 800a508:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a50c:	4313      	orrs	r3, r2
 800a50e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a510:	2300      	movs	r3, #0
}
 800a512:	4618      	mov	r0, r3
 800a514:	3714      	adds	r7, #20
 800a516:	46bd      	mov	sp, r7
 800a518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a51c:	4770      	bx	lr

0800a51e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800a51e:	b480      	push	{r7}
 800a520:	b087      	sub	sp, #28
 800a522:	af00      	add	r7, sp, #0
 800a524:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800a52a:	693b      	ldr	r3, [r7, #16]
 800a52c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a530:	689b      	ldr	r3, [r3, #8]
 800a532:	f003 0306 	and.w	r3, r3, #6
 800a536:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d102      	bne.n	800a544 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800a53e:	2300      	movs	r3, #0
 800a540:	75fb      	strb	r3, [r7, #23]
 800a542:	e00a      	b.n	800a55a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	2b02      	cmp	r3, #2
 800a548:	d002      	beq.n	800a550 <USB_GetDevSpeed+0x32>
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	2b06      	cmp	r3, #6
 800a54e:	d102      	bne.n	800a556 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800a550:	2302      	movs	r3, #2
 800a552:	75fb      	strb	r3, [r7, #23]
 800a554:	e001      	b.n	800a55a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800a556:	230f      	movs	r3, #15
 800a558:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800a55a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a55c:	4618      	mov	r0, r3
 800a55e:	371c      	adds	r7, #28
 800a560:	46bd      	mov	sp, r7
 800a562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a566:	4770      	bx	lr

0800a568 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a568:	b480      	push	{r7}
 800a56a:	b085      	sub	sp, #20
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	6078      	str	r0, [r7, #4]
 800a570:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a576:	683b      	ldr	r3, [r7, #0]
 800a578:	781b      	ldrb	r3, [r3, #0]
 800a57a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a57c:	683b      	ldr	r3, [r7, #0]
 800a57e:	785b      	ldrb	r3, [r3, #1]
 800a580:	2b01      	cmp	r3, #1
 800a582:	d13a      	bne.n	800a5fa <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a58a:	69da      	ldr	r2, [r3, #28]
 800a58c:	683b      	ldr	r3, [r7, #0]
 800a58e:	781b      	ldrb	r3, [r3, #0]
 800a590:	f003 030f 	and.w	r3, r3, #15
 800a594:	2101      	movs	r1, #1
 800a596:	fa01 f303 	lsl.w	r3, r1, r3
 800a59a:	b29b      	uxth	r3, r3
 800a59c:	68f9      	ldr	r1, [r7, #12]
 800a59e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a5a2:	4313      	orrs	r3, r2
 800a5a4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800a5a6:	68bb      	ldr	r3, [r7, #8]
 800a5a8:	015a      	lsls	r2, r3, #5
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	4413      	add	r3, r2
 800a5ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d155      	bne.n	800a668 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a5bc:	68bb      	ldr	r3, [r7, #8]
 800a5be:	015a      	lsls	r2, r3, #5
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	4413      	add	r3, r2
 800a5c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5c8:	681a      	ldr	r2, [r3, #0]
 800a5ca:	683b      	ldr	r3, [r7, #0]
 800a5cc:	68db      	ldr	r3, [r3, #12]
 800a5ce:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a5d2:	683b      	ldr	r3, [r7, #0]
 800a5d4:	791b      	ldrb	r3, [r3, #4]
 800a5d6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a5d8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a5da:	68bb      	ldr	r3, [r7, #8]
 800a5dc:	059b      	lsls	r3, r3, #22
 800a5de:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a5e0:	4313      	orrs	r3, r2
 800a5e2:	68ba      	ldr	r2, [r7, #8]
 800a5e4:	0151      	lsls	r1, r2, #5
 800a5e6:	68fa      	ldr	r2, [r7, #12]
 800a5e8:	440a      	add	r2, r1
 800a5ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a5ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a5f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a5f6:	6013      	str	r3, [r2, #0]
 800a5f8:	e036      	b.n	800a668 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a600:	69da      	ldr	r2, [r3, #28]
 800a602:	683b      	ldr	r3, [r7, #0]
 800a604:	781b      	ldrb	r3, [r3, #0]
 800a606:	f003 030f 	and.w	r3, r3, #15
 800a60a:	2101      	movs	r1, #1
 800a60c:	fa01 f303 	lsl.w	r3, r1, r3
 800a610:	041b      	lsls	r3, r3, #16
 800a612:	68f9      	ldr	r1, [r7, #12]
 800a614:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a618:	4313      	orrs	r3, r2
 800a61a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800a61c:	68bb      	ldr	r3, [r7, #8]
 800a61e:	015a      	lsls	r2, r3, #5
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	4413      	add	r3, r2
 800a624:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d11a      	bne.n	800a668 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a632:	68bb      	ldr	r3, [r7, #8]
 800a634:	015a      	lsls	r2, r3, #5
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	4413      	add	r3, r2
 800a63a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a63e:	681a      	ldr	r2, [r3, #0]
 800a640:	683b      	ldr	r3, [r7, #0]
 800a642:	68db      	ldr	r3, [r3, #12]
 800a644:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800a648:	683b      	ldr	r3, [r7, #0]
 800a64a:	791b      	ldrb	r3, [r3, #4]
 800a64c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a64e:	430b      	orrs	r3, r1
 800a650:	4313      	orrs	r3, r2
 800a652:	68ba      	ldr	r2, [r7, #8]
 800a654:	0151      	lsls	r1, r2, #5
 800a656:	68fa      	ldr	r2, [r7, #12]
 800a658:	440a      	add	r2, r1
 800a65a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a65e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a662:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a666:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800a668:	2300      	movs	r3, #0
}
 800a66a:	4618      	mov	r0, r3
 800a66c:	3714      	adds	r7, #20
 800a66e:	46bd      	mov	sp, r7
 800a670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a674:	4770      	bx	lr
	...

0800a678 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a678:	b480      	push	{r7}
 800a67a:	b085      	sub	sp, #20
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	6078      	str	r0, [r7, #4]
 800a680:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a686:	683b      	ldr	r3, [r7, #0]
 800a688:	781b      	ldrb	r3, [r3, #0]
 800a68a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800a68c:	683b      	ldr	r3, [r7, #0]
 800a68e:	785b      	ldrb	r3, [r3, #1]
 800a690:	2b01      	cmp	r3, #1
 800a692:	d161      	bne.n	800a758 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a694:	68bb      	ldr	r3, [r7, #8]
 800a696:	015a      	lsls	r2, r3, #5
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	4413      	add	r3, r2
 800a69c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a6a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a6aa:	d11f      	bne.n	800a6ec <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800a6ac:	68bb      	ldr	r3, [r7, #8]
 800a6ae:	015a      	lsls	r2, r3, #5
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	4413      	add	r3, r2
 800a6b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	68ba      	ldr	r2, [r7, #8]
 800a6bc:	0151      	lsls	r1, r2, #5
 800a6be:	68fa      	ldr	r2, [r7, #12]
 800a6c0:	440a      	add	r2, r1
 800a6c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a6c6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a6ca:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800a6cc:	68bb      	ldr	r3, [r7, #8]
 800a6ce:	015a      	lsls	r2, r3, #5
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	4413      	add	r3, r2
 800a6d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	68ba      	ldr	r2, [r7, #8]
 800a6dc:	0151      	lsls	r1, r2, #5
 800a6de:	68fa      	ldr	r2, [r7, #12]
 800a6e0:	440a      	add	r2, r1
 800a6e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a6e6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a6ea:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a6f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a6f4:	683b      	ldr	r3, [r7, #0]
 800a6f6:	781b      	ldrb	r3, [r3, #0]
 800a6f8:	f003 030f 	and.w	r3, r3, #15
 800a6fc:	2101      	movs	r1, #1
 800a6fe:	fa01 f303 	lsl.w	r3, r1, r3
 800a702:	b29b      	uxth	r3, r3
 800a704:	43db      	mvns	r3, r3
 800a706:	68f9      	ldr	r1, [r7, #12]
 800a708:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a70c:	4013      	ands	r3, r2
 800a70e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a716:	69da      	ldr	r2, [r3, #28]
 800a718:	683b      	ldr	r3, [r7, #0]
 800a71a:	781b      	ldrb	r3, [r3, #0]
 800a71c:	f003 030f 	and.w	r3, r3, #15
 800a720:	2101      	movs	r1, #1
 800a722:	fa01 f303 	lsl.w	r3, r1, r3
 800a726:	b29b      	uxth	r3, r3
 800a728:	43db      	mvns	r3, r3
 800a72a:	68f9      	ldr	r1, [r7, #12]
 800a72c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a730:	4013      	ands	r3, r2
 800a732:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800a734:	68bb      	ldr	r3, [r7, #8]
 800a736:	015a      	lsls	r2, r3, #5
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	4413      	add	r3, r2
 800a73c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a740:	681a      	ldr	r2, [r3, #0]
 800a742:	68bb      	ldr	r3, [r7, #8]
 800a744:	0159      	lsls	r1, r3, #5
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	440b      	add	r3, r1
 800a74a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a74e:	4619      	mov	r1, r3
 800a750:	4b35      	ldr	r3, [pc, #212]	; (800a828 <USB_DeactivateEndpoint+0x1b0>)
 800a752:	4013      	ands	r3, r2
 800a754:	600b      	str	r3, [r1, #0]
 800a756:	e060      	b.n	800a81a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a758:	68bb      	ldr	r3, [r7, #8]
 800a75a:	015a      	lsls	r2, r3, #5
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	4413      	add	r3, r2
 800a760:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a76a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a76e:	d11f      	bne.n	800a7b0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a770:	68bb      	ldr	r3, [r7, #8]
 800a772:	015a      	lsls	r2, r3, #5
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	4413      	add	r3, r2
 800a778:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	68ba      	ldr	r2, [r7, #8]
 800a780:	0151      	lsls	r1, r2, #5
 800a782:	68fa      	ldr	r2, [r7, #12]
 800a784:	440a      	add	r2, r1
 800a786:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a78a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a78e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800a790:	68bb      	ldr	r3, [r7, #8]
 800a792:	015a      	lsls	r2, r3, #5
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	4413      	add	r3, r2
 800a798:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	68ba      	ldr	r2, [r7, #8]
 800a7a0:	0151      	lsls	r1, r2, #5
 800a7a2:	68fa      	ldr	r2, [r7, #12]
 800a7a4:	440a      	add	r2, r1
 800a7a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a7aa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a7ae:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a7b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a7b8:	683b      	ldr	r3, [r7, #0]
 800a7ba:	781b      	ldrb	r3, [r3, #0]
 800a7bc:	f003 030f 	and.w	r3, r3, #15
 800a7c0:	2101      	movs	r1, #1
 800a7c2:	fa01 f303 	lsl.w	r3, r1, r3
 800a7c6:	041b      	lsls	r3, r3, #16
 800a7c8:	43db      	mvns	r3, r3
 800a7ca:	68f9      	ldr	r1, [r7, #12]
 800a7cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a7d0:	4013      	ands	r3, r2
 800a7d2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a7da:	69da      	ldr	r2, [r3, #28]
 800a7dc:	683b      	ldr	r3, [r7, #0]
 800a7de:	781b      	ldrb	r3, [r3, #0]
 800a7e0:	f003 030f 	and.w	r3, r3, #15
 800a7e4:	2101      	movs	r1, #1
 800a7e6:	fa01 f303 	lsl.w	r3, r1, r3
 800a7ea:	041b      	lsls	r3, r3, #16
 800a7ec:	43db      	mvns	r3, r3
 800a7ee:	68f9      	ldr	r1, [r7, #12]
 800a7f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a7f4:	4013      	ands	r3, r2
 800a7f6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800a7f8:	68bb      	ldr	r3, [r7, #8]
 800a7fa:	015a      	lsls	r2, r3, #5
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	4413      	add	r3, r2
 800a800:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a804:	681a      	ldr	r2, [r3, #0]
 800a806:	68bb      	ldr	r3, [r7, #8]
 800a808:	0159      	lsls	r1, r3, #5
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	440b      	add	r3, r1
 800a80e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a812:	4619      	mov	r1, r3
 800a814:	4b05      	ldr	r3, [pc, #20]	; (800a82c <USB_DeactivateEndpoint+0x1b4>)
 800a816:	4013      	ands	r3, r2
 800a818:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800a81a:	2300      	movs	r3, #0
}
 800a81c:	4618      	mov	r0, r3
 800a81e:	3714      	adds	r7, #20
 800a820:	46bd      	mov	sp, r7
 800a822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a826:	4770      	bx	lr
 800a828:	ec337800 	.word	0xec337800
 800a82c:	eff37800 	.word	0xeff37800

0800a830 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a830:	b580      	push	{r7, lr}
 800a832:	b08a      	sub	sp, #40	; 0x28
 800a834:	af02      	add	r7, sp, #8
 800a836:	60f8      	str	r0, [r7, #12]
 800a838:	60b9      	str	r1, [r7, #8]
 800a83a:	4613      	mov	r3, r2
 800a83c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800a842:	68bb      	ldr	r3, [r7, #8]
 800a844:	781b      	ldrb	r3, [r3, #0]
 800a846:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a848:	68bb      	ldr	r3, [r7, #8]
 800a84a:	785b      	ldrb	r3, [r3, #1]
 800a84c:	2b01      	cmp	r3, #1
 800a84e:	f040 815c 	bne.w	800ab0a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a852:	68bb      	ldr	r3, [r7, #8]
 800a854:	699b      	ldr	r3, [r3, #24]
 800a856:	2b00      	cmp	r3, #0
 800a858:	d132      	bne.n	800a8c0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a85a:	69bb      	ldr	r3, [r7, #24]
 800a85c:	015a      	lsls	r2, r3, #5
 800a85e:	69fb      	ldr	r3, [r7, #28]
 800a860:	4413      	add	r3, r2
 800a862:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a866:	691b      	ldr	r3, [r3, #16]
 800a868:	69ba      	ldr	r2, [r7, #24]
 800a86a:	0151      	lsls	r1, r2, #5
 800a86c:	69fa      	ldr	r2, [r7, #28]
 800a86e:	440a      	add	r2, r1
 800a870:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a874:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a878:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a87c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a87e:	69bb      	ldr	r3, [r7, #24]
 800a880:	015a      	lsls	r2, r3, #5
 800a882:	69fb      	ldr	r3, [r7, #28]
 800a884:	4413      	add	r3, r2
 800a886:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a88a:	691b      	ldr	r3, [r3, #16]
 800a88c:	69ba      	ldr	r2, [r7, #24]
 800a88e:	0151      	lsls	r1, r2, #5
 800a890:	69fa      	ldr	r2, [r7, #28]
 800a892:	440a      	add	r2, r1
 800a894:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a898:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a89c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a89e:	69bb      	ldr	r3, [r7, #24]
 800a8a0:	015a      	lsls	r2, r3, #5
 800a8a2:	69fb      	ldr	r3, [r7, #28]
 800a8a4:	4413      	add	r3, r2
 800a8a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a8aa:	691b      	ldr	r3, [r3, #16]
 800a8ac:	69ba      	ldr	r2, [r7, #24]
 800a8ae:	0151      	lsls	r1, r2, #5
 800a8b0:	69fa      	ldr	r2, [r7, #28]
 800a8b2:	440a      	add	r2, r1
 800a8b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a8b8:	0cdb      	lsrs	r3, r3, #19
 800a8ba:	04db      	lsls	r3, r3, #19
 800a8bc:	6113      	str	r3, [r2, #16]
 800a8be:	e074      	b.n	800a9aa <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a8c0:	69bb      	ldr	r3, [r7, #24]
 800a8c2:	015a      	lsls	r2, r3, #5
 800a8c4:	69fb      	ldr	r3, [r7, #28]
 800a8c6:	4413      	add	r3, r2
 800a8c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a8cc:	691b      	ldr	r3, [r3, #16]
 800a8ce:	69ba      	ldr	r2, [r7, #24]
 800a8d0:	0151      	lsls	r1, r2, #5
 800a8d2:	69fa      	ldr	r2, [r7, #28]
 800a8d4:	440a      	add	r2, r1
 800a8d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a8da:	0cdb      	lsrs	r3, r3, #19
 800a8dc:	04db      	lsls	r3, r3, #19
 800a8de:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a8e0:	69bb      	ldr	r3, [r7, #24]
 800a8e2:	015a      	lsls	r2, r3, #5
 800a8e4:	69fb      	ldr	r3, [r7, #28]
 800a8e6:	4413      	add	r3, r2
 800a8e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a8ec:	691b      	ldr	r3, [r3, #16]
 800a8ee:	69ba      	ldr	r2, [r7, #24]
 800a8f0:	0151      	lsls	r1, r2, #5
 800a8f2:	69fa      	ldr	r2, [r7, #28]
 800a8f4:	440a      	add	r2, r1
 800a8f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a8fa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a8fe:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a902:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800a904:	69bb      	ldr	r3, [r7, #24]
 800a906:	015a      	lsls	r2, r3, #5
 800a908:	69fb      	ldr	r3, [r7, #28]
 800a90a:	4413      	add	r3, r2
 800a90c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a910:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800a912:	68bb      	ldr	r3, [r7, #8]
 800a914:	6999      	ldr	r1, [r3, #24]
 800a916:	68bb      	ldr	r3, [r7, #8]
 800a918:	68db      	ldr	r3, [r3, #12]
 800a91a:	440b      	add	r3, r1
 800a91c:	1e59      	subs	r1, r3, #1
 800a91e:	68bb      	ldr	r3, [r7, #8]
 800a920:	68db      	ldr	r3, [r3, #12]
 800a922:	fbb1 f3f3 	udiv	r3, r1, r3
 800a926:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800a928:	4b9d      	ldr	r3, [pc, #628]	; (800aba0 <USB_EPStartXfer+0x370>)
 800a92a:	400b      	ands	r3, r1
 800a92c:	69b9      	ldr	r1, [r7, #24]
 800a92e:	0148      	lsls	r0, r1, #5
 800a930:	69f9      	ldr	r1, [r7, #28]
 800a932:	4401      	add	r1, r0
 800a934:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a938:	4313      	orrs	r3, r2
 800a93a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a93c:	69bb      	ldr	r3, [r7, #24]
 800a93e:	015a      	lsls	r2, r3, #5
 800a940:	69fb      	ldr	r3, [r7, #28]
 800a942:	4413      	add	r3, r2
 800a944:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a948:	691a      	ldr	r2, [r3, #16]
 800a94a:	68bb      	ldr	r3, [r7, #8]
 800a94c:	699b      	ldr	r3, [r3, #24]
 800a94e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a952:	69b9      	ldr	r1, [r7, #24]
 800a954:	0148      	lsls	r0, r1, #5
 800a956:	69f9      	ldr	r1, [r7, #28]
 800a958:	4401      	add	r1, r0
 800a95a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a95e:	4313      	orrs	r3, r2
 800a960:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800a962:	68bb      	ldr	r3, [r7, #8]
 800a964:	791b      	ldrb	r3, [r3, #4]
 800a966:	2b01      	cmp	r3, #1
 800a968:	d11f      	bne.n	800a9aa <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800a96a:	69bb      	ldr	r3, [r7, #24]
 800a96c:	015a      	lsls	r2, r3, #5
 800a96e:	69fb      	ldr	r3, [r7, #28]
 800a970:	4413      	add	r3, r2
 800a972:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a976:	691b      	ldr	r3, [r3, #16]
 800a978:	69ba      	ldr	r2, [r7, #24]
 800a97a:	0151      	lsls	r1, r2, #5
 800a97c:	69fa      	ldr	r2, [r7, #28]
 800a97e:	440a      	add	r2, r1
 800a980:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a984:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800a988:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800a98a:	69bb      	ldr	r3, [r7, #24]
 800a98c:	015a      	lsls	r2, r3, #5
 800a98e:	69fb      	ldr	r3, [r7, #28]
 800a990:	4413      	add	r3, r2
 800a992:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a996:	691b      	ldr	r3, [r3, #16]
 800a998:	69ba      	ldr	r2, [r7, #24]
 800a99a:	0151      	lsls	r1, r2, #5
 800a99c:	69fa      	ldr	r2, [r7, #28]
 800a99e:	440a      	add	r2, r1
 800a9a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a9a4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a9a8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800a9aa:	79fb      	ldrb	r3, [r7, #7]
 800a9ac:	2b01      	cmp	r3, #1
 800a9ae:	d14b      	bne.n	800aa48 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a9b0:	68bb      	ldr	r3, [r7, #8]
 800a9b2:	695b      	ldr	r3, [r3, #20]
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d009      	beq.n	800a9cc <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a9b8:	69bb      	ldr	r3, [r7, #24]
 800a9ba:	015a      	lsls	r2, r3, #5
 800a9bc:	69fb      	ldr	r3, [r7, #28]
 800a9be:	4413      	add	r3, r2
 800a9c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9c4:	461a      	mov	r2, r3
 800a9c6:	68bb      	ldr	r3, [r7, #8]
 800a9c8:	695b      	ldr	r3, [r3, #20]
 800a9ca:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800a9cc:	68bb      	ldr	r3, [r7, #8]
 800a9ce:	791b      	ldrb	r3, [r3, #4]
 800a9d0:	2b01      	cmp	r3, #1
 800a9d2:	d128      	bne.n	800aa26 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a9d4:	69fb      	ldr	r3, [r7, #28]
 800a9d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a9da:	689b      	ldr	r3, [r3, #8]
 800a9dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d110      	bne.n	800aa06 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a9e4:	69bb      	ldr	r3, [r7, #24]
 800a9e6:	015a      	lsls	r2, r3, #5
 800a9e8:	69fb      	ldr	r3, [r7, #28]
 800a9ea:	4413      	add	r3, r2
 800a9ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	69ba      	ldr	r2, [r7, #24]
 800a9f4:	0151      	lsls	r1, r2, #5
 800a9f6:	69fa      	ldr	r2, [r7, #28]
 800a9f8:	440a      	add	r2, r1
 800a9fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a9fe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800aa02:	6013      	str	r3, [r2, #0]
 800aa04:	e00f      	b.n	800aa26 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800aa06:	69bb      	ldr	r3, [r7, #24]
 800aa08:	015a      	lsls	r2, r3, #5
 800aa0a:	69fb      	ldr	r3, [r7, #28]
 800aa0c:	4413      	add	r3, r2
 800aa0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	69ba      	ldr	r2, [r7, #24]
 800aa16:	0151      	lsls	r1, r2, #5
 800aa18:	69fa      	ldr	r2, [r7, #28]
 800aa1a:	440a      	add	r2, r1
 800aa1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aa20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aa24:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800aa26:	69bb      	ldr	r3, [r7, #24]
 800aa28:	015a      	lsls	r2, r3, #5
 800aa2a:	69fb      	ldr	r3, [r7, #28]
 800aa2c:	4413      	add	r3, r2
 800aa2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	69ba      	ldr	r2, [r7, #24]
 800aa36:	0151      	lsls	r1, r2, #5
 800aa38:	69fa      	ldr	r2, [r7, #28]
 800aa3a:	440a      	add	r2, r1
 800aa3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aa40:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800aa44:	6013      	str	r3, [r2, #0]
 800aa46:	e133      	b.n	800acb0 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800aa48:	69bb      	ldr	r3, [r7, #24]
 800aa4a:	015a      	lsls	r2, r3, #5
 800aa4c:	69fb      	ldr	r3, [r7, #28]
 800aa4e:	4413      	add	r3, r2
 800aa50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	69ba      	ldr	r2, [r7, #24]
 800aa58:	0151      	lsls	r1, r2, #5
 800aa5a:	69fa      	ldr	r2, [r7, #28]
 800aa5c:	440a      	add	r2, r1
 800aa5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aa62:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800aa66:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800aa68:	68bb      	ldr	r3, [r7, #8]
 800aa6a:	791b      	ldrb	r3, [r3, #4]
 800aa6c:	2b01      	cmp	r3, #1
 800aa6e:	d015      	beq.n	800aa9c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800aa70:	68bb      	ldr	r3, [r7, #8]
 800aa72:	699b      	ldr	r3, [r3, #24]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	f000 811b 	beq.w	800acb0 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800aa7a:	69fb      	ldr	r3, [r7, #28]
 800aa7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aa82:	68bb      	ldr	r3, [r7, #8]
 800aa84:	781b      	ldrb	r3, [r3, #0]
 800aa86:	f003 030f 	and.w	r3, r3, #15
 800aa8a:	2101      	movs	r1, #1
 800aa8c:	fa01 f303 	lsl.w	r3, r1, r3
 800aa90:	69f9      	ldr	r1, [r7, #28]
 800aa92:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800aa96:	4313      	orrs	r3, r2
 800aa98:	634b      	str	r3, [r1, #52]	; 0x34
 800aa9a:	e109      	b.n	800acb0 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800aa9c:	69fb      	ldr	r3, [r7, #28]
 800aa9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aaa2:	689b      	ldr	r3, [r3, #8]
 800aaa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d110      	bne.n	800aace <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800aaac:	69bb      	ldr	r3, [r7, #24]
 800aaae:	015a      	lsls	r2, r3, #5
 800aab0:	69fb      	ldr	r3, [r7, #28]
 800aab2:	4413      	add	r3, r2
 800aab4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	69ba      	ldr	r2, [r7, #24]
 800aabc:	0151      	lsls	r1, r2, #5
 800aabe:	69fa      	ldr	r2, [r7, #28]
 800aac0:	440a      	add	r2, r1
 800aac2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aac6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800aaca:	6013      	str	r3, [r2, #0]
 800aacc:	e00f      	b.n	800aaee <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800aace:	69bb      	ldr	r3, [r7, #24]
 800aad0:	015a      	lsls	r2, r3, #5
 800aad2:	69fb      	ldr	r3, [r7, #28]
 800aad4:	4413      	add	r3, r2
 800aad6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	69ba      	ldr	r2, [r7, #24]
 800aade:	0151      	lsls	r1, r2, #5
 800aae0:	69fa      	ldr	r2, [r7, #28]
 800aae2:	440a      	add	r2, r1
 800aae4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aae8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aaec:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800aaee:	68bb      	ldr	r3, [r7, #8]
 800aaf0:	6919      	ldr	r1, [r3, #16]
 800aaf2:	68bb      	ldr	r3, [r7, #8]
 800aaf4:	781a      	ldrb	r2, [r3, #0]
 800aaf6:	68bb      	ldr	r3, [r7, #8]
 800aaf8:	699b      	ldr	r3, [r3, #24]
 800aafa:	b298      	uxth	r0, r3
 800aafc:	79fb      	ldrb	r3, [r7, #7]
 800aafe:	9300      	str	r3, [sp, #0]
 800ab00:	4603      	mov	r3, r0
 800ab02:	68f8      	ldr	r0, [r7, #12]
 800ab04:	f000 fade 	bl	800b0c4 <USB_WritePacket>
 800ab08:	e0d2      	b.n	800acb0 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800ab0a:	69bb      	ldr	r3, [r7, #24]
 800ab0c:	015a      	lsls	r2, r3, #5
 800ab0e:	69fb      	ldr	r3, [r7, #28]
 800ab10:	4413      	add	r3, r2
 800ab12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab16:	691b      	ldr	r3, [r3, #16]
 800ab18:	69ba      	ldr	r2, [r7, #24]
 800ab1a:	0151      	lsls	r1, r2, #5
 800ab1c:	69fa      	ldr	r2, [r7, #28]
 800ab1e:	440a      	add	r2, r1
 800ab20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ab24:	0cdb      	lsrs	r3, r3, #19
 800ab26:	04db      	lsls	r3, r3, #19
 800ab28:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800ab2a:	69bb      	ldr	r3, [r7, #24]
 800ab2c:	015a      	lsls	r2, r3, #5
 800ab2e:	69fb      	ldr	r3, [r7, #28]
 800ab30:	4413      	add	r3, r2
 800ab32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab36:	691b      	ldr	r3, [r3, #16]
 800ab38:	69ba      	ldr	r2, [r7, #24]
 800ab3a:	0151      	lsls	r1, r2, #5
 800ab3c:	69fa      	ldr	r2, [r7, #28]
 800ab3e:	440a      	add	r2, r1
 800ab40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ab44:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ab48:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ab4c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800ab4e:	68bb      	ldr	r3, [r7, #8]
 800ab50:	699b      	ldr	r3, [r3, #24]
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d126      	bne.n	800aba4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800ab56:	69bb      	ldr	r3, [r7, #24]
 800ab58:	015a      	lsls	r2, r3, #5
 800ab5a:	69fb      	ldr	r3, [r7, #28]
 800ab5c:	4413      	add	r3, r2
 800ab5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab62:	691a      	ldr	r2, [r3, #16]
 800ab64:	68bb      	ldr	r3, [r7, #8]
 800ab66:	68db      	ldr	r3, [r3, #12]
 800ab68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ab6c:	69b9      	ldr	r1, [r7, #24]
 800ab6e:	0148      	lsls	r0, r1, #5
 800ab70:	69f9      	ldr	r1, [r7, #28]
 800ab72:	4401      	add	r1, r0
 800ab74:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ab78:	4313      	orrs	r3, r2
 800ab7a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ab7c:	69bb      	ldr	r3, [r7, #24]
 800ab7e:	015a      	lsls	r2, r3, #5
 800ab80:	69fb      	ldr	r3, [r7, #28]
 800ab82:	4413      	add	r3, r2
 800ab84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab88:	691b      	ldr	r3, [r3, #16]
 800ab8a:	69ba      	ldr	r2, [r7, #24]
 800ab8c:	0151      	lsls	r1, r2, #5
 800ab8e:	69fa      	ldr	r2, [r7, #28]
 800ab90:	440a      	add	r2, r1
 800ab92:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ab96:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ab9a:	6113      	str	r3, [r2, #16]
 800ab9c:	e03a      	b.n	800ac14 <USB_EPStartXfer+0x3e4>
 800ab9e:	bf00      	nop
 800aba0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800aba4:	68bb      	ldr	r3, [r7, #8]
 800aba6:	699a      	ldr	r2, [r3, #24]
 800aba8:	68bb      	ldr	r3, [r7, #8]
 800abaa:	68db      	ldr	r3, [r3, #12]
 800abac:	4413      	add	r3, r2
 800abae:	1e5a      	subs	r2, r3, #1
 800abb0:	68bb      	ldr	r3, [r7, #8]
 800abb2:	68db      	ldr	r3, [r3, #12]
 800abb4:	fbb2 f3f3 	udiv	r3, r2, r3
 800abb8:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800abba:	68bb      	ldr	r3, [r7, #8]
 800abbc:	68db      	ldr	r3, [r3, #12]
 800abbe:	8afa      	ldrh	r2, [r7, #22]
 800abc0:	fb03 f202 	mul.w	r2, r3, r2
 800abc4:	68bb      	ldr	r3, [r7, #8]
 800abc6:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800abc8:	69bb      	ldr	r3, [r7, #24]
 800abca:	015a      	lsls	r2, r3, #5
 800abcc:	69fb      	ldr	r3, [r7, #28]
 800abce:	4413      	add	r3, r2
 800abd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800abd4:	691a      	ldr	r2, [r3, #16]
 800abd6:	8afb      	ldrh	r3, [r7, #22]
 800abd8:	04d9      	lsls	r1, r3, #19
 800abda:	4b38      	ldr	r3, [pc, #224]	; (800acbc <USB_EPStartXfer+0x48c>)
 800abdc:	400b      	ands	r3, r1
 800abde:	69b9      	ldr	r1, [r7, #24]
 800abe0:	0148      	lsls	r0, r1, #5
 800abe2:	69f9      	ldr	r1, [r7, #28]
 800abe4:	4401      	add	r1, r0
 800abe6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800abea:	4313      	orrs	r3, r2
 800abec:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800abee:	69bb      	ldr	r3, [r7, #24]
 800abf0:	015a      	lsls	r2, r3, #5
 800abf2:	69fb      	ldr	r3, [r7, #28]
 800abf4:	4413      	add	r3, r2
 800abf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800abfa:	691a      	ldr	r2, [r3, #16]
 800abfc:	68bb      	ldr	r3, [r7, #8]
 800abfe:	69db      	ldr	r3, [r3, #28]
 800ac00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ac04:	69b9      	ldr	r1, [r7, #24]
 800ac06:	0148      	lsls	r0, r1, #5
 800ac08:	69f9      	ldr	r1, [r7, #28]
 800ac0a:	4401      	add	r1, r0
 800ac0c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ac10:	4313      	orrs	r3, r2
 800ac12:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800ac14:	79fb      	ldrb	r3, [r7, #7]
 800ac16:	2b01      	cmp	r3, #1
 800ac18:	d10d      	bne.n	800ac36 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800ac1a:	68bb      	ldr	r3, [r7, #8]
 800ac1c:	691b      	ldr	r3, [r3, #16]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d009      	beq.n	800ac36 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800ac22:	68bb      	ldr	r3, [r7, #8]
 800ac24:	6919      	ldr	r1, [r3, #16]
 800ac26:	69bb      	ldr	r3, [r7, #24]
 800ac28:	015a      	lsls	r2, r3, #5
 800ac2a:	69fb      	ldr	r3, [r7, #28]
 800ac2c:	4413      	add	r3, r2
 800ac2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac32:	460a      	mov	r2, r1
 800ac34:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800ac36:	68bb      	ldr	r3, [r7, #8]
 800ac38:	791b      	ldrb	r3, [r3, #4]
 800ac3a:	2b01      	cmp	r3, #1
 800ac3c:	d128      	bne.n	800ac90 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ac3e:	69fb      	ldr	r3, [r7, #28]
 800ac40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac44:	689b      	ldr	r3, [r3, #8]
 800ac46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d110      	bne.n	800ac70 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800ac4e:	69bb      	ldr	r3, [r7, #24]
 800ac50:	015a      	lsls	r2, r3, #5
 800ac52:	69fb      	ldr	r3, [r7, #28]
 800ac54:	4413      	add	r3, r2
 800ac56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	69ba      	ldr	r2, [r7, #24]
 800ac5e:	0151      	lsls	r1, r2, #5
 800ac60:	69fa      	ldr	r2, [r7, #28]
 800ac62:	440a      	add	r2, r1
 800ac64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ac68:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ac6c:	6013      	str	r3, [r2, #0]
 800ac6e:	e00f      	b.n	800ac90 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800ac70:	69bb      	ldr	r3, [r7, #24]
 800ac72:	015a      	lsls	r2, r3, #5
 800ac74:	69fb      	ldr	r3, [r7, #28]
 800ac76:	4413      	add	r3, r2
 800ac78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	69ba      	ldr	r2, [r7, #24]
 800ac80:	0151      	lsls	r1, r2, #5
 800ac82:	69fa      	ldr	r2, [r7, #28]
 800ac84:	440a      	add	r2, r1
 800ac86:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ac8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ac8e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800ac90:	69bb      	ldr	r3, [r7, #24]
 800ac92:	015a      	lsls	r2, r3, #5
 800ac94:	69fb      	ldr	r3, [r7, #28]
 800ac96:	4413      	add	r3, r2
 800ac98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	69ba      	ldr	r2, [r7, #24]
 800aca0:	0151      	lsls	r1, r2, #5
 800aca2:	69fa      	ldr	r2, [r7, #28]
 800aca4:	440a      	add	r2, r1
 800aca6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800acaa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800acae:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800acb0:	2300      	movs	r3, #0
}
 800acb2:	4618      	mov	r0, r3
 800acb4:	3720      	adds	r7, #32
 800acb6:	46bd      	mov	sp, r7
 800acb8:	bd80      	pop	{r7, pc}
 800acba:	bf00      	nop
 800acbc:	1ff80000 	.word	0x1ff80000

0800acc0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800acc0:	b480      	push	{r7}
 800acc2:	b087      	sub	sp, #28
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	60f8      	str	r0, [r7, #12]
 800acc8:	60b9      	str	r1, [r7, #8]
 800acca:	4613      	mov	r3, r2
 800accc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800acd2:	68bb      	ldr	r3, [r7, #8]
 800acd4:	781b      	ldrb	r3, [r3, #0]
 800acd6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800acd8:	68bb      	ldr	r3, [r7, #8]
 800acda:	785b      	ldrb	r3, [r3, #1]
 800acdc:	2b01      	cmp	r3, #1
 800acde:	f040 80ce 	bne.w	800ae7e <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800ace2:	68bb      	ldr	r3, [r7, #8]
 800ace4:	699b      	ldr	r3, [r3, #24]
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d132      	bne.n	800ad50 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800acea:	693b      	ldr	r3, [r7, #16]
 800acec:	015a      	lsls	r2, r3, #5
 800acee:	697b      	ldr	r3, [r7, #20]
 800acf0:	4413      	add	r3, r2
 800acf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800acf6:	691b      	ldr	r3, [r3, #16]
 800acf8:	693a      	ldr	r2, [r7, #16]
 800acfa:	0151      	lsls	r1, r2, #5
 800acfc:	697a      	ldr	r2, [r7, #20]
 800acfe:	440a      	add	r2, r1
 800ad00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ad04:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ad08:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ad0c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ad0e:	693b      	ldr	r3, [r7, #16]
 800ad10:	015a      	lsls	r2, r3, #5
 800ad12:	697b      	ldr	r3, [r7, #20]
 800ad14:	4413      	add	r3, r2
 800ad16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad1a:	691b      	ldr	r3, [r3, #16]
 800ad1c:	693a      	ldr	r2, [r7, #16]
 800ad1e:	0151      	lsls	r1, r2, #5
 800ad20:	697a      	ldr	r2, [r7, #20]
 800ad22:	440a      	add	r2, r1
 800ad24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ad28:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ad2c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ad2e:	693b      	ldr	r3, [r7, #16]
 800ad30:	015a      	lsls	r2, r3, #5
 800ad32:	697b      	ldr	r3, [r7, #20]
 800ad34:	4413      	add	r3, r2
 800ad36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad3a:	691b      	ldr	r3, [r3, #16]
 800ad3c:	693a      	ldr	r2, [r7, #16]
 800ad3e:	0151      	lsls	r1, r2, #5
 800ad40:	697a      	ldr	r2, [r7, #20]
 800ad42:	440a      	add	r2, r1
 800ad44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ad48:	0cdb      	lsrs	r3, r3, #19
 800ad4a:	04db      	lsls	r3, r3, #19
 800ad4c:	6113      	str	r3, [r2, #16]
 800ad4e:	e04e      	b.n	800adee <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ad50:	693b      	ldr	r3, [r7, #16]
 800ad52:	015a      	lsls	r2, r3, #5
 800ad54:	697b      	ldr	r3, [r7, #20]
 800ad56:	4413      	add	r3, r2
 800ad58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad5c:	691b      	ldr	r3, [r3, #16]
 800ad5e:	693a      	ldr	r2, [r7, #16]
 800ad60:	0151      	lsls	r1, r2, #5
 800ad62:	697a      	ldr	r2, [r7, #20]
 800ad64:	440a      	add	r2, r1
 800ad66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ad6a:	0cdb      	lsrs	r3, r3, #19
 800ad6c:	04db      	lsls	r3, r3, #19
 800ad6e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ad70:	693b      	ldr	r3, [r7, #16]
 800ad72:	015a      	lsls	r2, r3, #5
 800ad74:	697b      	ldr	r3, [r7, #20]
 800ad76:	4413      	add	r3, r2
 800ad78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad7c:	691b      	ldr	r3, [r3, #16]
 800ad7e:	693a      	ldr	r2, [r7, #16]
 800ad80:	0151      	lsls	r1, r2, #5
 800ad82:	697a      	ldr	r2, [r7, #20]
 800ad84:	440a      	add	r2, r1
 800ad86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ad8a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ad8e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ad92:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800ad94:	68bb      	ldr	r3, [r7, #8]
 800ad96:	699a      	ldr	r2, [r3, #24]
 800ad98:	68bb      	ldr	r3, [r7, #8]
 800ad9a:	68db      	ldr	r3, [r3, #12]
 800ad9c:	429a      	cmp	r2, r3
 800ad9e:	d903      	bls.n	800ada8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800ada0:	68bb      	ldr	r3, [r7, #8]
 800ada2:	68da      	ldr	r2, [r3, #12]
 800ada4:	68bb      	ldr	r3, [r7, #8]
 800ada6:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ada8:	693b      	ldr	r3, [r7, #16]
 800adaa:	015a      	lsls	r2, r3, #5
 800adac:	697b      	ldr	r3, [r7, #20]
 800adae:	4413      	add	r3, r2
 800adb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800adb4:	691b      	ldr	r3, [r3, #16]
 800adb6:	693a      	ldr	r2, [r7, #16]
 800adb8:	0151      	lsls	r1, r2, #5
 800adba:	697a      	ldr	r2, [r7, #20]
 800adbc:	440a      	add	r2, r1
 800adbe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800adc2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800adc6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800adc8:	693b      	ldr	r3, [r7, #16]
 800adca:	015a      	lsls	r2, r3, #5
 800adcc:	697b      	ldr	r3, [r7, #20]
 800adce:	4413      	add	r3, r2
 800add0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800add4:	691a      	ldr	r2, [r3, #16]
 800add6:	68bb      	ldr	r3, [r7, #8]
 800add8:	699b      	ldr	r3, [r3, #24]
 800adda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800adde:	6939      	ldr	r1, [r7, #16]
 800ade0:	0148      	lsls	r0, r1, #5
 800ade2:	6979      	ldr	r1, [r7, #20]
 800ade4:	4401      	add	r1, r0
 800ade6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800adea:	4313      	orrs	r3, r2
 800adec:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800adee:	79fb      	ldrb	r3, [r7, #7]
 800adf0:	2b01      	cmp	r3, #1
 800adf2:	d11e      	bne.n	800ae32 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800adf4:	68bb      	ldr	r3, [r7, #8]
 800adf6:	695b      	ldr	r3, [r3, #20]
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d009      	beq.n	800ae10 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800adfc:	693b      	ldr	r3, [r7, #16]
 800adfe:	015a      	lsls	r2, r3, #5
 800ae00:	697b      	ldr	r3, [r7, #20]
 800ae02:	4413      	add	r3, r2
 800ae04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae08:	461a      	mov	r2, r3
 800ae0a:	68bb      	ldr	r3, [r7, #8]
 800ae0c:	695b      	ldr	r3, [r3, #20]
 800ae0e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ae10:	693b      	ldr	r3, [r7, #16]
 800ae12:	015a      	lsls	r2, r3, #5
 800ae14:	697b      	ldr	r3, [r7, #20]
 800ae16:	4413      	add	r3, r2
 800ae18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	693a      	ldr	r2, [r7, #16]
 800ae20:	0151      	lsls	r1, r2, #5
 800ae22:	697a      	ldr	r2, [r7, #20]
 800ae24:	440a      	add	r2, r1
 800ae26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ae2a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ae2e:	6013      	str	r3, [r2, #0]
 800ae30:	e097      	b.n	800af62 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ae32:	693b      	ldr	r3, [r7, #16]
 800ae34:	015a      	lsls	r2, r3, #5
 800ae36:	697b      	ldr	r3, [r7, #20]
 800ae38:	4413      	add	r3, r2
 800ae3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	693a      	ldr	r2, [r7, #16]
 800ae42:	0151      	lsls	r1, r2, #5
 800ae44:	697a      	ldr	r2, [r7, #20]
 800ae46:	440a      	add	r2, r1
 800ae48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ae4c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ae50:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800ae52:	68bb      	ldr	r3, [r7, #8]
 800ae54:	699b      	ldr	r3, [r3, #24]
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	f000 8083 	beq.w	800af62 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800ae5c:	697b      	ldr	r3, [r7, #20]
 800ae5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ae64:	68bb      	ldr	r3, [r7, #8]
 800ae66:	781b      	ldrb	r3, [r3, #0]
 800ae68:	f003 030f 	and.w	r3, r3, #15
 800ae6c:	2101      	movs	r1, #1
 800ae6e:	fa01 f303 	lsl.w	r3, r1, r3
 800ae72:	6979      	ldr	r1, [r7, #20]
 800ae74:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ae78:	4313      	orrs	r3, r2
 800ae7a:	634b      	str	r3, [r1, #52]	; 0x34
 800ae7c:	e071      	b.n	800af62 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800ae7e:	693b      	ldr	r3, [r7, #16]
 800ae80:	015a      	lsls	r2, r3, #5
 800ae82:	697b      	ldr	r3, [r7, #20]
 800ae84:	4413      	add	r3, r2
 800ae86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae8a:	691b      	ldr	r3, [r3, #16]
 800ae8c:	693a      	ldr	r2, [r7, #16]
 800ae8e:	0151      	lsls	r1, r2, #5
 800ae90:	697a      	ldr	r2, [r7, #20]
 800ae92:	440a      	add	r2, r1
 800ae94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ae98:	0cdb      	lsrs	r3, r3, #19
 800ae9a:	04db      	lsls	r3, r3, #19
 800ae9c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800ae9e:	693b      	ldr	r3, [r7, #16]
 800aea0:	015a      	lsls	r2, r3, #5
 800aea2:	697b      	ldr	r3, [r7, #20]
 800aea4:	4413      	add	r3, r2
 800aea6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aeaa:	691b      	ldr	r3, [r3, #16]
 800aeac:	693a      	ldr	r2, [r7, #16]
 800aeae:	0151      	lsls	r1, r2, #5
 800aeb0:	697a      	ldr	r2, [r7, #20]
 800aeb2:	440a      	add	r2, r1
 800aeb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aeb8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800aebc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800aec0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800aec2:	68bb      	ldr	r3, [r7, #8]
 800aec4:	699b      	ldr	r3, [r3, #24]
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d003      	beq.n	800aed2 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800aeca:	68bb      	ldr	r3, [r7, #8]
 800aecc:	68da      	ldr	r2, [r3, #12]
 800aece:	68bb      	ldr	r3, [r7, #8]
 800aed0:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800aed2:	68bb      	ldr	r3, [r7, #8]
 800aed4:	68da      	ldr	r2, [r3, #12]
 800aed6:	68bb      	ldr	r3, [r7, #8]
 800aed8:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800aeda:	693b      	ldr	r3, [r7, #16]
 800aedc:	015a      	lsls	r2, r3, #5
 800aede:	697b      	ldr	r3, [r7, #20]
 800aee0:	4413      	add	r3, r2
 800aee2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aee6:	691b      	ldr	r3, [r3, #16]
 800aee8:	693a      	ldr	r2, [r7, #16]
 800aeea:	0151      	lsls	r1, r2, #5
 800aeec:	697a      	ldr	r2, [r7, #20]
 800aeee:	440a      	add	r2, r1
 800aef0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aef4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800aef8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800aefa:	693b      	ldr	r3, [r7, #16]
 800aefc:	015a      	lsls	r2, r3, #5
 800aefe:	697b      	ldr	r3, [r7, #20]
 800af00:	4413      	add	r3, r2
 800af02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af06:	691a      	ldr	r2, [r3, #16]
 800af08:	68bb      	ldr	r3, [r7, #8]
 800af0a:	69db      	ldr	r3, [r3, #28]
 800af0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800af10:	6939      	ldr	r1, [r7, #16]
 800af12:	0148      	lsls	r0, r1, #5
 800af14:	6979      	ldr	r1, [r7, #20]
 800af16:	4401      	add	r1, r0
 800af18:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800af1c:	4313      	orrs	r3, r2
 800af1e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800af20:	79fb      	ldrb	r3, [r7, #7]
 800af22:	2b01      	cmp	r3, #1
 800af24:	d10d      	bne.n	800af42 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800af26:	68bb      	ldr	r3, [r7, #8]
 800af28:	691b      	ldr	r3, [r3, #16]
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d009      	beq.n	800af42 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800af2e:	68bb      	ldr	r3, [r7, #8]
 800af30:	6919      	ldr	r1, [r3, #16]
 800af32:	693b      	ldr	r3, [r7, #16]
 800af34:	015a      	lsls	r2, r3, #5
 800af36:	697b      	ldr	r3, [r7, #20]
 800af38:	4413      	add	r3, r2
 800af3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af3e:	460a      	mov	r2, r1
 800af40:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800af42:	693b      	ldr	r3, [r7, #16]
 800af44:	015a      	lsls	r2, r3, #5
 800af46:	697b      	ldr	r3, [r7, #20]
 800af48:	4413      	add	r3, r2
 800af4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	693a      	ldr	r2, [r7, #16]
 800af52:	0151      	lsls	r1, r2, #5
 800af54:	697a      	ldr	r2, [r7, #20]
 800af56:	440a      	add	r2, r1
 800af58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800af5c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800af60:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800af62:	2300      	movs	r3, #0
}
 800af64:	4618      	mov	r0, r3
 800af66:	371c      	adds	r7, #28
 800af68:	46bd      	mov	sp, r7
 800af6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af6e:	4770      	bx	lr

0800af70 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800af70:	b480      	push	{r7}
 800af72:	b087      	sub	sp, #28
 800af74:	af00      	add	r7, sp, #0
 800af76:	6078      	str	r0, [r7, #4]
 800af78:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800af7a:	2300      	movs	r3, #0
 800af7c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800af7e:	2300      	movs	r3, #0
 800af80:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800af86:	683b      	ldr	r3, [r7, #0]
 800af88:	785b      	ldrb	r3, [r3, #1]
 800af8a:	2b01      	cmp	r3, #1
 800af8c:	d14a      	bne.n	800b024 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800af8e:	683b      	ldr	r3, [r7, #0]
 800af90:	781b      	ldrb	r3, [r3, #0]
 800af92:	015a      	lsls	r2, r3, #5
 800af94:	693b      	ldr	r3, [r7, #16]
 800af96:	4413      	add	r3, r2
 800af98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800afa2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800afa6:	f040 8086 	bne.w	800b0b6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800afaa:	683b      	ldr	r3, [r7, #0]
 800afac:	781b      	ldrb	r3, [r3, #0]
 800afae:	015a      	lsls	r2, r3, #5
 800afb0:	693b      	ldr	r3, [r7, #16]
 800afb2:	4413      	add	r3, r2
 800afb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	683a      	ldr	r2, [r7, #0]
 800afbc:	7812      	ldrb	r2, [r2, #0]
 800afbe:	0151      	lsls	r1, r2, #5
 800afc0:	693a      	ldr	r2, [r7, #16]
 800afc2:	440a      	add	r2, r1
 800afc4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800afc8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800afcc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800afce:	683b      	ldr	r3, [r7, #0]
 800afd0:	781b      	ldrb	r3, [r3, #0]
 800afd2:	015a      	lsls	r2, r3, #5
 800afd4:	693b      	ldr	r3, [r7, #16]
 800afd6:	4413      	add	r3, r2
 800afd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	683a      	ldr	r2, [r7, #0]
 800afe0:	7812      	ldrb	r2, [r2, #0]
 800afe2:	0151      	lsls	r1, r2, #5
 800afe4:	693a      	ldr	r2, [r7, #16]
 800afe6:	440a      	add	r2, r1
 800afe8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800afec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800aff0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	3301      	adds	r3, #1
 800aff6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	f242 7210 	movw	r2, #10000	; 0x2710
 800affe:	4293      	cmp	r3, r2
 800b000:	d902      	bls.n	800b008 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800b002:	2301      	movs	r3, #1
 800b004:	75fb      	strb	r3, [r7, #23]
          break;
 800b006:	e056      	b.n	800b0b6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800b008:	683b      	ldr	r3, [r7, #0]
 800b00a:	781b      	ldrb	r3, [r3, #0]
 800b00c:	015a      	lsls	r2, r3, #5
 800b00e:	693b      	ldr	r3, [r7, #16]
 800b010:	4413      	add	r3, r2
 800b012:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b01c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b020:	d0e7      	beq.n	800aff2 <USB_EPStopXfer+0x82>
 800b022:	e048      	b.n	800b0b6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b024:	683b      	ldr	r3, [r7, #0]
 800b026:	781b      	ldrb	r3, [r3, #0]
 800b028:	015a      	lsls	r2, r3, #5
 800b02a:	693b      	ldr	r3, [r7, #16]
 800b02c:	4413      	add	r3, r2
 800b02e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b038:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b03c:	d13b      	bne.n	800b0b6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800b03e:	683b      	ldr	r3, [r7, #0]
 800b040:	781b      	ldrb	r3, [r3, #0]
 800b042:	015a      	lsls	r2, r3, #5
 800b044:	693b      	ldr	r3, [r7, #16]
 800b046:	4413      	add	r3, r2
 800b048:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	683a      	ldr	r2, [r7, #0]
 800b050:	7812      	ldrb	r2, [r2, #0]
 800b052:	0151      	lsls	r1, r2, #5
 800b054:	693a      	ldr	r2, [r7, #16]
 800b056:	440a      	add	r2, r1
 800b058:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b05c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b060:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800b062:	683b      	ldr	r3, [r7, #0]
 800b064:	781b      	ldrb	r3, [r3, #0]
 800b066:	015a      	lsls	r2, r3, #5
 800b068:	693b      	ldr	r3, [r7, #16]
 800b06a:	4413      	add	r3, r2
 800b06c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	683a      	ldr	r2, [r7, #0]
 800b074:	7812      	ldrb	r2, [r2, #0]
 800b076:	0151      	lsls	r1, r2, #5
 800b078:	693a      	ldr	r2, [r7, #16]
 800b07a:	440a      	add	r2, r1
 800b07c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b080:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b084:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	3301      	adds	r3, #1
 800b08a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	f242 7210 	movw	r2, #10000	; 0x2710
 800b092:	4293      	cmp	r3, r2
 800b094:	d902      	bls.n	800b09c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800b096:	2301      	movs	r3, #1
 800b098:	75fb      	strb	r3, [r7, #23]
          break;
 800b09a:	e00c      	b.n	800b0b6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800b09c:	683b      	ldr	r3, [r7, #0]
 800b09e:	781b      	ldrb	r3, [r3, #0]
 800b0a0:	015a      	lsls	r2, r3, #5
 800b0a2:	693b      	ldr	r3, [r7, #16]
 800b0a4:	4413      	add	r3, r2
 800b0a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b0b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b0b4:	d0e7      	beq.n	800b086 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800b0b6:	7dfb      	ldrb	r3, [r7, #23]
}
 800b0b8:	4618      	mov	r0, r3
 800b0ba:	371c      	adds	r7, #28
 800b0bc:	46bd      	mov	sp, r7
 800b0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c2:	4770      	bx	lr

0800b0c4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800b0c4:	b480      	push	{r7}
 800b0c6:	b089      	sub	sp, #36	; 0x24
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	60f8      	str	r0, [r7, #12]
 800b0cc:	60b9      	str	r1, [r7, #8]
 800b0ce:	4611      	mov	r1, r2
 800b0d0:	461a      	mov	r2, r3
 800b0d2:	460b      	mov	r3, r1
 800b0d4:	71fb      	strb	r3, [r7, #7]
 800b0d6:	4613      	mov	r3, r2
 800b0d8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800b0de:	68bb      	ldr	r3, [r7, #8]
 800b0e0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800b0e2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d123      	bne.n	800b132 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800b0ea:	88bb      	ldrh	r3, [r7, #4]
 800b0ec:	3303      	adds	r3, #3
 800b0ee:	089b      	lsrs	r3, r3, #2
 800b0f0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800b0f2:	2300      	movs	r3, #0
 800b0f4:	61bb      	str	r3, [r7, #24]
 800b0f6:	e018      	b.n	800b12a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800b0f8:	79fb      	ldrb	r3, [r7, #7]
 800b0fa:	031a      	lsls	r2, r3, #12
 800b0fc:	697b      	ldr	r3, [r7, #20]
 800b0fe:	4413      	add	r3, r2
 800b100:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b104:	461a      	mov	r2, r3
 800b106:	69fb      	ldr	r3, [r7, #28]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800b10c:	69fb      	ldr	r3, [r7, #28]
 800b10e:	3301      	adds	r3, #1
 800b110:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b112:	69fb      	ldr	r3, [r7, #28]
 800b114:	3301      	adds	r3, #1
 800b116:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b118:	69fb      	ldr	r3, [r7, #28]
 800b11a:	3301      	adds	r3, #1
 800b11c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b11e:	69fb      	ldr	r3, [r7, #28]
 800b120:	3301      	adds	r3, #1
 800b122:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800b124:	69bb      	ldr	r3, [r7, #24]
 800b126:	3301      	adds	r3, #1
 800b128:	61bb      	str	r3, [r7, #24]
 800b12a:	69ba      	ldr	r2, [r7, #24]
 800b12c:	693b      	ldr	r3, [r7, #16]
 800b12e:	429a      	cmp	r2, r3
 800b130:	d3e2      	bcc.n	800b0f8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800b132:	2300      	movs	r3, #0
}
 800b134:	4618      	mov	r0, r3
 800b136:	3724      	adds	r7, #36	; 0x24
 800b138:	46bd      	mov	sp, r7
 800b13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b13e:	4770      	bx	lr

0800b140 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b140:	b480      	push	{r7}
 800b142:	b08b      	sub	sp, #44	; 0x2c
 800b144:	af00      	add	r7, sp, #0
 800b146:	60f8      	str	r0, [r7, #12]
 800b148:	60b9      	str	r1, [r7, #8]
 800b14a:	4613      	mov	r3, r2
 800b14c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800b152:	68bb      	ldr	r3, [r7, #8]
 800b154:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800b156:	88fb      	ldrh	r3, [r7, #6]
 800b158:	089b      	lsrs	r3, r3, #2
 800b15a:	b29b      	uxth	r3, r3
 800b15c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800b15e:	88fb      	ldrh	r3, [r7, #6]
 800b160:	f003 0303 	and.w	r3, r3, #3
 800b164:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800b166:	2300      	movs	r3, #0
 800b168:	623b      	str	r3, [r7, #32]
 800b16a:	e014      	b.n	800b196 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b16c:	69bb      	ldr	r3, [r7, #24]
 800b16e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b172:	681a      	ldr	r2, [r3, #0]
 800b174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b176:	601a      	str	r2, [r3, #0]
    pDest++;
 800b178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b17a:	3301      	adds	r3, #1
 800b17c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b17e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b180:	3301      	adds	r3, #1
 800b182:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b186:	3301      	adds	r3, #1
 800b188:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b18a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b18c:	3301      	adds	r3, #1
 800b18e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800b190:	6a3b      	ldr	r3, [r7, #32]
 800b192:	3301      	adds	r3, #1
 800b194:	623b      	str	r3, [r7, #32]
 800b196:	6a3a      	ldr	r2, [r7, #32]
 800b198:	697b      	ldr	r3, [r7, #20]
 800b19a:	429a      	cmp	r2, r3
 800b19c:	d3e6      	bcc.n	800b16c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800b19e:	8bfb      	ldrh	r3, [r7, #30]
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d01e      	beq.n	800b1e2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800b1a4:	2300      	movs	r3, #0
 800b1a6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800b1a8:	69bb      	ldr	r3, [r7, #24]
 800b1aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b1ae:	461a      	mov	r2, r3
 800b1b0:	f107 0310 	add.w	r3, r7, #16
 800b1b4:	6812      	ldr	r2, [r2, #0]
 800b1b6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800b1b8:	693a      	ldr	r2, [r7, #16]
 800b1ba:	6a3b      	ldr	r3, [r7, #32]
 800b1bc:	b2db      	uxtb	r3, r3
 800b1be:	00db      	lsls	r3, r3, #3
 800b1c0:	fa22 f303 	lsr.w	r3, r2, r3
 800b1c4:	b2da      	uxtb	r2, r3
 800b1c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1c8:	701a      	strb	r2, [r3, #0]
      i++;
 800b1ca:	6a3b      	ldr	r3, [r7, #32]
 800b1cc:	3301      	adds	r3, #1
 800b1ce:	623b      	str	r3, [r7, #32]
      pDest++;
 800b1d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1d2:	3301      	adds	r3, #1
 800b1d4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800b1d6:	8bfb      	ldrh	r3, [r7, #30]
 800b1d8:	3b01      	subs	r3, #1
 800b1da:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800b1dc:	8bfb      	ldrh	r3, [r7, #30]
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d1ea      	bne.n	800b1b8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800b1e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b1e4:	4618      	mov	r0, r3
 800b1e6:	372c      	adds	r7, #44	; 0x2c
 800b1e8:	46bd      	mov	sp, r7
 800b1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ee:	4770      	bx	lr

0800b1f0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b1f0:	b480      	push	{r7}
 800b1f2:	b085      	sub	sp, #20
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	6078      	str	r0, [r7, #4]
 800b1f8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b1fe:	683b      	ldr	r3, [r7, #0]
 800b200:	781b      	ldrb	r3, [r3, #0]
 800b202:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b204:	683b      	ldr	r3, [r7, #0]
 800b206:	785b      	ldrb	r3, [r3, #1]
 800b208:	2b01      	cmp	r3, #1
 800b20a:	d12c      	bne.n	800b266 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b20c:	68bb      	ldr	r3, [r7, #8]
 800b20e:	015a      	lsls	r2, r3, #5
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	4413      	add	r3, r2
 800b214:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	db12      	blt.n	800b244 <USB_EPSetStall+0x54>
 800b21e:	68bb      	ldr	r3, [r7, #8]
 800b220:	2b00      	cmp	r3, #0
 800b222:	d00f      	beq.n	800b244 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800b224:	68bb      	ldr	r3, [r7, #8]
 800b226:	015a      	lsls	r2, r3, #5
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	4413      	add	r3, r2
 800b22c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	68ba      	ldr	r2, [r7, #8]
 800b234:	0151      	lsls	r1, r2, #5
 800b236:	68fa      	ldr	r2, [r7, #12]
 800b238:	440a      	add	r2, r1
 800b23a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b23e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b242:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800b244:	68bb      	ldr	r3, [r7, #8]
 800b246:	015a      	lsls	r2, r3, #5
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	4413      	add	r3, r2
 800b24c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	68ba      	ldr	r2, [r7, #8]
 800b254:	0151      	lsls	r1, r2, #5
 800b256:	68fa      	ldr	r2, [r7, #12]
 800b258:	440a      	add	r2, r1
 800b25a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b25e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b262:	6013      	str	r3, [r2, #0]
 800b264:	e02b      	b.n	800b2be <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b266:	68bb      	ldr	r3, [r7, #8]
 800b268:	015a      	lsls	r2, r3, #5
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	4413      	add	r3, r2
 800b26e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	2b00      	cmp	r3, #0
 800b276:	db12      	blt.n	800b29e <USB_EPSetStall+0xae>
 800b278:	68bb      	ldr	r3, [r7, #8]
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d00f      	beq.n	800b29e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800b27e:	68bb      	ldr	r3, [r7, #8]
 800b280:	015a      	lsls	r2, r3, #5
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	4413      	add	r3, r2
 800b286:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	68ba      	ldr	r2, [r7, #8]
 800b28e:	0151      	lsls	r1, r2, #5
 800b290:	68fa      	ldr	r2, [r7, #12]
 800b292:	440a      	add	r2, r1
 800b294:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b298:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b29c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800b29e:	68bb      	ldr	r3, [r7, #8]
 800b2a0:	015a      	lsls	r2, r3, #5
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	4413      	add	r3, r2
 800b2a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	68ba      	ldr	r2, [r7, #8]
 800b2ae:	0151      	lsls	r1, r2, #5
 800b2b0:	68fa      	ldr	r2, [r7, #12]
 800b2b2:	440a      	add	r2, r1
 800b2b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b2b8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b2bc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b2be:	2300      	movs	r3, #0
}
 800b2c0:	4618      	mov	r0, r3
 800b2c2:	3714      	adds	r7, #20
 800b2c4:	46bd      	mov	sp, r7
 800b2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ca:	4770      	bx	lr

0800b2cc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b2cc:	b480      	push	{r7}
 800b2ce:	b085      	sub	sp, #20
 800b2d0:	af00      	add	r7, sp, #0
 800b2d2:	6078      	str	r0, [r7, #4]
 800b2d4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b2da:	683b      	ldr	r3, [r7, #0]
 800b2dc:	781b      	ldrb	r3, [r3, #0]
 800b2de:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b2e0:	683b      	ldr	r3, [r7, #0]
 800b2e2:	785b      	ldrb	r3, [r3, #1]
 800b2e4:	2b01      	cmp	r3, #1
 800b2e6:	d128      	bne.n	800b33a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b2e8:	68bb      	ldr	r3, [r7, #8]
 800b2ea:	015a      	lsls	r2, r3, #5
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	4413      	add	r3, r2
 800b2f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	68ba      	ldr	r2, [r7, #8]
 800b2f8:	0151      	lsls	r1, r2, #5
 800b2fa:	68fa      	ldr	r2, [r7, #12]
 800b2fc:	440a      	add	r2, r1
 800b2fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b302:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b306:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b308:	683b      	ldr	r3, [r7, #0]
 800b30a:	791b      	ldrb	r3, [r3, #4]
 800b30c:	2b03      	cmp	r3, #3
 800b30e:	d003      	beq.n	800b318 <USB_EPClearStall+0x4c>
 800b310:	683b      	ldr	r3, [r7, #0]
 800b312:	791b      	ldrb	r3, [r3, #4]
 800b314:	2b02      	cmp	r3, #2
 800b316:	d138      	bne.n	800b38a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b318:	68bb      	ldr	r3, [r7, #8]
 800b31a:	015a      	lsls	r2, r3, #5
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	4413      	add	r3, r2
 800b320:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	68ba      	ldr	r2, [r7, #8]
 800b328:	0151      	lsls	r1, r2, #5
 800b32a:	68fa      	ldr	r2, [r7, #12]
 800b32c:	440a      	add	r2, r1
 800b32e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b332:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b336:	6013      	str	r3, [r2, #0]
 800b338:	e027      	b.n	800b38a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b33a:	68bb      	ldr	r3, [r7, #8]
 800b33c:	015a      	lsls	r2, r3, #5
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	4413      	add	r3, r2
 800b342:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	68ba      	ldr	r2, [r7, #8]
 800b34a:	0151      	lsls	r1, r2, #5
 800b34c:	68fa      	ldr	r2, [r7, #12]
 800b34e:	440a      	add	r2, r1
 800b350:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b354:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b358:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b35a:	683b      	ldr	r3, [r7, #0]
 800b35c:	791b      	ldrb	r3, [r3, #4]
 800b35e:	2b03      	cmp	r3, #3
 800b360:	d003      	beq.n	800b36a <USB_EPClearStall+0x9e>
 800b362:	683b      	ldr	r3, [r7, #0]
 800b364:	791b      	ldrb	r3, [r3, #4]
 800b366:	2b02      	cmp	r3, #2
 800b368:	d10f      	bne.n	800b38a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b36a:	68bb      	ldr	r3, [r7, #8]
 800b36c:	015a      	lsls	r2, r3, #5
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	4413      	add	r3, r2
 800b372:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	68ba      	ldr	r2, [r7, #8]
 800b37a:	0151      	lsls	r1, r2, #5
 800b37c:	68fa      	ldr	r2, [r7, #12]
 800b37e:	440a      	add	r2, r1
 800b380:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b384:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b388:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800b38a:	2300      	movs	r3, #0
}
 800b38c:	4618      	mov	r0, r3
 800b38e:	3714      	adds	r7, #20
 800b390:	46bd      	mov	sp, r7
 800b392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b396:	4770      	bx	lr

0800b398 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800b398:	b480      	push	{r7}
 800b39a:	b085      	sub	sp, #20
 800b39c:	af00      	add	r7, sp, #0
 800b39e:	6078      	str	r0, [r7, #4]
 800b3a0:	460b      	mov	r3, r1
 800b3a2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	68fa      	ldr	r2, [r7, #12]
 800b3b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b3b6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800b3ba:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b3c2:	681a      	ldr	r2, [r3, #0]
 800b3c4:	78fb      	ldrb	r3, [r7, #3]
 800b3c6:	011b      	lsls	r3, r3, #4
 800b3c8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800b3cc:	68f9      	ldr	r1, [r7, #12]
 800b3ce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b3d2:	4313      	orrs	r3, r2
 800b3d4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800b3d6:	2300      	movs	r3, #0
}
 800b3d8:	4618      	mov	r0, r3
 800b3da:	3714      	adds	r7, #20
 800b3dc:	46bd      	mov	sp, r7
 800b3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e2:	4770      	bx	lr

0800b3e4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b3e4:	b480      	push	{r7}
 800b3e6:	b085      	sub	sp, #20
 800b3e8:	af00      	add	r7, sp, #0
 800b3ea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	68fa      	ldr	r2, [r7, #12]
 800b3fa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b3fe:	f023 0303 	bic.w	r3, r3, #3
 800b402:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b40a:	685b      	ldr	r3, [r3, #4]
 800b40c:	68fa      	ldr	r2, [r7, #12]
 800b40e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b412:	f023 0302 	bic.w	r3, r3, #2
 800b416:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b418:	2300      	movs	r3, #0
}
 800b41a:	4618      	mov	r0, r3
 800b41c:	3714      	adds	r7, #20
 800b41e:	46bd      	mov	sp, r7
 800b420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b424:	4770      	bx	lr

0800b426 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b426:	b480      	push	{r7}
 800b428:	b085      	sub	sp, #20
 800b42a:	af00      	add	r7, sp, #0
 800b42c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	68fa      	ldr	r2, [r7, #12]
 800b43c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b440:	f023 0303 	bic.w	r3, r3, #3
 800b444:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b44c:	685b      	ldr	r3, [r3, #4]
 800b44e:	68fa      	ldr	r2, [r7, #12]
 800b450:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b454:	f043 0302 	orr.w	r3, r3, #2
 800b458:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b45a:	2300      	movs	r3, #0
}
 800b45c:	4618      	mov	r0, r3
 800b45e:	3714      	adds	r7, #20
 800b460:	46bd      	mov	sp, r7
 800b462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b466:	4770      	bx	lr

0800b468 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800b468:	b480      	push	{r7}
 800b46a:	b085      	sub	sp, #20
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	695b      	ldr	r3, [r3, #20]
 800b474:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	699b      	ldr	r3, [r3, #24]
 800b47a:	68fa      	ldr	r2, [r7, #12]
 800b47c:	4013      	ands	r3, r2
 800b47e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800b480:	68fb      	ldr	r3, [r7, #12]
}
 800b482:	4618      	mov	r0, r3
 800b484:	3714      	adds	r7, #20
 800b486:	46bd      	mov	sp, r7
 800b488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b48c:	4770      	bx	lr

0800b48e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b48e:	b480      	push	{r7}
 800b490:	b085      	sub	sp, #20
 800b492:	af00      	add	r7, sp, #0
 800b494:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b4a0:	699b      	ldr	r3, [r3, #24]
 800b4a2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b4aa:	69db      	ldr	r3, [r3, #28]
 800b4ac:	68ba      	ldr	r2, [r7, #8]
 800b4ae:	4013      	ands	r3, r2
 800b4b0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800b4b2:	68bb      	ldr	r3, [r7, #8]
 800b4b4:	0c1b      	lsrs	r3, r3, #16
}
 800b4b6:	4618      	mov	r0, r3
 800b4b8:	3714      	adds	r7, #20
 800b4ba:	46bd      	mov	sp, r7
 800b4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c0:	4770      	bx	lr

0800b4c2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b4c2:	b480      	push	{r7}
 800b4c4:	b085      	sub	sp, #20
 800b4c6:	af00      	add	r7, sp, #0
 800b4c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b4d4:	699b      	ldr	r3, [r3, #24]
 800b4d6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b4de:	69db      	ldr	r3, [r3, #28]
 800b4e0:	68ba      	ldr	r2, [r7, #8]
 800b4e2:	4013      	ands	r3, r2
 800b4e4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800b4e6:	68bb      	ldr	r3, [r7, #8]
 800b4e8:	b29b      	uxth	r3, r3
}
 800b4ea:	4618      	mov	r0, r3
 800b4ec:	3714      	adds	r7, #20
 800b4ee:	46bd      	mov	sp, r7
 800b4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f4:	4770      	bx	lr

0800b4f6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b4f6:	b480      	push	{r7}
 800b4f8:	b085      	sub	sp, #20
 800b4fa:	af00      	add	r7, sp, #0
 800b4fc:	6078      	str	r0, [r7, #4]
 800b4fe:	460b      	mov	r3, r1
 800b500:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800b506:	78fb      	ldrb	r3, [r7, #3]
 800b508:	015a      	lsls	r2, r3, #5
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	4413      	add	r3, r2
 800b50e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b512:	689b      	ldr	r3, [r3, #8]
 800b514:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b51c:	695b      	ldr	r3, [r3, #20]
 800b51e:	68ba      	ldr	r2, [r7, #8]
 800b520:	4013      	ands	r3, r2
 800b522:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b524:	68bb      	ldr	r3, [r7, #8]
}
 800b526:	4618      	mov	r0, r3
 800b528:	3714      	adds	r7, #20
 800b52a:	46bd      	mov	sp, r7
 800b52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b530:	4770      	bx	lr

0800b532 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b532:	b480      	push	{r7}
 800b534:	b087      	sub	sp, #28
 800b536:	af00      	add	r7, sp, #0
 800b538:	6078      	str	r0, [r7, #4]
 800b53a:	460b      	mov	r3, r1
 800b53c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800b542:	697b      	ldr	r3, [r7, #20]
 800b544:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b548:	691b      	ldr	r3, [r3, #16]
 800b54a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800b54c:	697b      	ldr	r3, [r7, #20]
 800b54e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b552:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b554:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800b556:	78fb      	ldrb	r3, [r7, #3]
 800b558:	f003 030f 	and.w	r3, r3, #15
 800b55c:	68fa      	ldr	r2, [r7, #12]
 800b55e:	fa22 f303 	lsr.w	r3, r2, r3
 800b562:	01db      	lsls	r3, r3, #7
 800b564:	b2db      	uxtb	r3, r3
 800b566:	693a      	ldr	r2, [r7, #16]
 800b568:	4313      	orrs	r3, r2
 800b56a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800b56c:	78fb      	ldrb	r3, [r7, #3]
 800b56e:	015a      	lsls	r2, r3, #5
 800b570:	697b      	ldr	r3, [r7, #20]
 800b572:	4413      	add	r3, r2
 800b574:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b578:	689b      	ldr	r3, [r3, #8]
 800b57a:	693a      	ldr	r2, [r7, #16]
 800b57c:	4013      	ands	r3, r2
 800b57e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b580:	68bb      	ldr	r3, [r7, #8]
}
 800b582:	4618      	mov	r0, r3
 800b584:	371c      	adds	r7, #28
 800b586:	46bd      	mov	sp, r7
 800b588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b58c:	4770      	bx	lr

0800b58e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800b58e:	b480      	push	{r7}
 800b590:	b083      	sub	sp, #12
 800b592:	af00      	add	r7, sp, #0
 800b594:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	695b      	ldr	r3, [r3, #20]
 800b59a:	f003 0301 	and.w	r3, r3, #1
}
 800b59e:	4618      	mov	r0, r3
 800b5a0:	370c      	adds	r7, #12
 800b5a2:	46bd      	mov	sp, r7
 800b5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a8:	4770      	bx	lr

0800b5aa <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800b5aa:	b480      	push	{r7}
 800b5ac:	b085      	sub	sp, #20
 800b5ae:	af00      	add	r7, sp, #0
 800b5b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	68fa      	ldr	r2, [r7, #12]
 800b5c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b5c4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800b5c8:	f023 0307 	bic.w	r3, r3, #7
 800b5cc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b5d4:	685b      	ldr	r3, [r3, #4]
 800b5d6:	68fa      	ldr	r2, [r7, #12]
 800b5d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b5dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b5e0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b5e2:	2300      	movs	r3, #0
}
 800b5e4:	4618      	mov	r0, r3
 800b5e6:	3714      	adds	r7, #20
 800b5e8:	46bd      	mov	sp, r7
 800b5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ee:	4770      	bx	lr

0800b5f0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800b5f0:	b480      	push	{r7}
 800b5f2:	b087      	sub	sp, #28
 800b5f4:	af00      	add	r7, sp, #0
 800b5f6:	60f8      	str	r0, [r7, #12]
 800b5f8:	460b      	mov	r3, r1
 800b5fa:	607a      	str	r2, [r7, #4]
 800b5fc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	333c      	adds	r3, #60	; 0x3c
 800b606:	3304      	adds	r3, #4
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800b60c:	693b      	ldr	r3, [r7, #16]
 800b60e:	4a26      	ldr	r2, [pc, #152]	; (800b6a8 <USB_EP0_OutStart+0xb8>)
 800b610:	4293      	cmp	r3, r2
 800b612:	d90a      	bls.n	800b62a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b614:	697b      	ldr	r3, [r7, #20]
 800b616:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b620:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b624:	d101      	bne.n	800b62a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800b626:	2300      	movs	r3, #0
 800b628:	e037      	b.n	800b69a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800b62a:	697b      	ldr	r3, [r7, #20]
 800b62c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b630:	461a      	mov	r2, r3
 800b632:	2300      	movs	r3, #0
 800b634:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b636:	697b      	ldr	r3, [r7, #20]
 800b638:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b63c:	691b      	ldr	r3, [r3, #16]
 800b63e:	697a      	ldr	r2, [r7, #20]
 800b640:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b644:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b648:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800b64a:	697b      	ldr	r3, [r7, #20]
 800b64c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b650:	691b      	ldr	r3, [r3, #16]
 800b652:	697a      	ldr	r2, [r7, #20]
 800b654:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b658:	f043 0318 	orr.w	r3, r3, #24
 800b65c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800b65e:	697b      	ldr	r3, [r7, #20]
 800b660:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b664:	691b      	ldr	r3, [r3, #16]
 800b666:	697a      	ldr	r2, [r7, #20]
 800b668:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b66c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800b670:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800b672:	7afb      	ldrb	r3, [r7, #11]
 800b674:	2b01      	cmp	r3, #1
 800b676:	d10f      	bne.n	800b698 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800b678:	697b      	ldr	r3, [r7, #20]
 800b67a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b67e:	461a      	mov	r2, r3
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800b684:	697b      	ldr	r3, [r7, #20]
 800b686:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	697a      	ldr	r2, [r7, #20]
 800b68e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b692:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800b696:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b698:	2300      	movs	r3, #0
}
 800b69a:	4618      	mov	r0, r3
 800b69c:	371c      	adds	r7, #28
 800b69e:	46bd      	mov	sp, r7
 800b6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a4:	4770      	bx	lr
 800b6a6:	bf00      	nop
 800b6a8:	4f54300a 	.word	0x4f54300a

0800b6ac <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b6ac:	b480      	push	{r7}
 800b6ae:	b085      	sub	sp, #20
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b6b4:	2300      	movs	r3, #0
 800b6b6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	3301      	adds	r3, #1
 800b6bc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	4a13      	ldr	r2, [pc, #76]	; (800b710 <USB_CoreReset+0x64>)
 800b6c2:	4293      	cmp	r3, r2
 800b6c4:	d901      	bls.n	800b6ca <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b6c6:	2303      	movs	r3, #3
 800b6c8:	e01b      	b.n	800b702 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	691b      	ldr	r3, [r3, #16]
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	daf2      	bge.n	800b6b8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b6d2:	2300      	movs	r3, #0
 800b6d4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	691b      	ldr	r3, [r3, #16]
 800b6da:	f043 0201 	orr.w	r2, r3, #1
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	3301      	adds	r3, #1
 800b6e6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	4a09      	ldr	r2, [pc, #36]	; (800b710 <USB_CoreReset+0x64>)
 800b6ec:	4293      	cmp	r3, r2
 800b6ee:	d901      	bls.n	800b6f4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b6f0:	2303      	movs	r3, #3
 800b6f2:	e006      	b.n	800b702 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	691b      	ldr	r3, [r3, #16]
 800b6f8:	f003 0301 	and.w	r3, r3, #1
 800b6fc:	2b01      	cmp	r3, #1
 800b6fe:	d0f0      	beq.n	800b6e2 <USB_CoreReset+0x36>

  return HAL_OK;
 800b700:	2300      	movs	r3, #0
}
 800b702:	4618      	mov	r0, r3
 800b704:	3714      	adds	r7, #20
 800b706:	46bd      	mov	sp, r7
 800b708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b70c:	4770      	bx	lr
 800b70e:	bf00      	nop
 800b710:	00030d40 	.word	0x00030d40

0800b714 <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b714:	b580      	push	{r7, lr}
 800b716:	b084      	sub	sp, #16
 800b718:	af00      	add	r7, sp, #0
 800b71a:	6078      	str	r0, [r7, #4]
 800b71c:	460b      	mov	r3, r1
 800b71e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 800b720:	2018      	movs	r0, #24
 800b722:	f002 fa99 	bl	800dc58 <USBD_static_malloc>
 800b726:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d109      	bne.n	800b742 <USBD_CUSTOM_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	32b0      	adds	r2, #176	; 0xb0
 800b738:	2100      	movs	r1, #0
 800b73a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800b73e:	2302      	movs	r3, #2
 800b740:	e08a      	b.n	800b858 <USBD_CUSTOM_HID_Init+0x144>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	32b0      	adds	r2, #176	; 0xb0
 800b74c:	68f9      	ldr	r1, [r7, #12]
 800b74e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	32b0      	adds	r2, #176	; 0xb0
 800b75c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	7c1b      	ldrb	r3, [r3, #16]
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d11b      	bne.n	800b7a6 <USBD_CUSTOM_HID_Init+0x92>
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 800b76e:	4b3c      	ldr	r3, [pc, #240]	; (800b860 <USBD_CUSTOM_HID_Init+0x14c>)
 800b770:	781b      	ldrb	r3, [r3, #0]
 800b772:	f003 020f 	and.w	r2, r3, #15
 800b776:	6879      	ldr	r1, [r7, #4]
 800b778:	4613      	mov	r3, r2
 800b77a:	009b      	lsls	r3, r3, #2
 800b77c:	4413      	add	r3, r2
 800b77e:	009b      	lsls	r3, r3, #2
 800b780:	440b      	add	r3, r1
 800b782:	3326      	adds	r3, #38	; 0x26
 800b784:	2205      	movs	r2, #5
 800b786:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 800b788:	4b36      	ldr	r3, [pc, #216]	; (800b864 <USBD_CUSTOM_HID_Init+0x150>)
 800b78a:	781b      	ldrb	r3, [r3, #0]
 800b78c:	f003 020f 	and.w	r2, r3, #15
 800b790:	6879      	ldr	r1, [r7, #4]
 800b792:	4613      	mov	r3, r2
 800b794:	009b      	lsls	r3, r3, #2
 800b796:	4413      	add	r3, r2
 800b798:	009b      	lsls	r3, r3, #2
 800b79a:	440b      	add	r3, r1
 800b79c:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 800b7a0:	2205      	movs	r2, #5
 800b7a2:	801a      	strh	r2, [r3, #0]
 800b7a4:	e01a      	b.n	800b7dc <USBD_CUSTOM_HID_Init+0xc8>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 800b7a6:	4b2e      	ldr	r3, [pc, #184]	; (800b860 <USBD_CUSTOM_HID_Init+0x14c>)
 800b7a8:	781b      	ldrb	r3, [r3, #0]
 800b7aa:	f003 020f 	and.w	r2, r3, #15
 800b7ae:	6879      	ldr	r1, [r7, #4]
 800b7b0:	4613      	mov	r3, r2
 800b7b2:	009b      	lsls	r3, r3, #2
 800b7b4:	4413      	add	r3, r2
 800b7b6:	009b      	lsls	r3, r3, #2
 800b7b8:	440b      	add	r3, r1
 800b7ba:	3326      	adds	r3, #38	; 0x26
 800b7bc:	2205      	movs	r2, #5
 800b7be:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 800b7c0:	4b28      	ldr	r3, [pc, #160]	; (800b864 <USBD_CUSTOM_HID_Init+0x150>)
 800b7c2:	781b      	ldrb	r3, [r3, #0]
 800b7c4:	f003 020f 	and.w	r2, r3, #15
 800b7c8:	6879      	ldr	r1, [r7, #4]
 800b7ca:	4613      	mov	r3, r2
 800b7cc:	009b      	lsls	r3, r3, #2
 800b7ce:	4413      	add	r3, r2
 800b7d0:	009b      	lsls	r3, r3, #2
 800b7d2:	440b      	add	r3, r1
 800b7d4:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 800b7d8:	2205      	movs	r2, #5
 800b7da:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDInEpAdd, USBD_EP_TYPE_INTR,
 800b7dc:	4b20      	ldr	r3, [pc, #128]	; (800b860 <USBD_CUSTOM_HID_Init+0x14c>)
 800b7de:	7819      	ldrb	r1, [r3, #0]
 800b7e0:	2302      	movs	r3, #2
 800b7e2:	2203      	movs	r2, #3
 800b7e4:	6878      	ldr	r0, [r7, #4]
 800b7e6:	f002 f926 	bl	800da36 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 1U;
 800b7ea:	4b1d      	ldr	r3, [pc, #116]	; (800b860 <USBD_CUSTOM_HID_Init+0x14c>)
 800b7ec:	781b      	ldrb	r3, [r3, #0]
 800b7ee:	f003 020f 	and.w	r2, r3, #15
 800b7f2:	6879      	ldr	r1, [r7, #4]
 800b7f4:	4613      	mov	r3, r2
 800b7f6:	009b      	lsls	r3, r3, #2
 800b7f8:	4413      	add	r3, r2
 800b7fa:	009b      	lsls	r3, r3, #2
 800b7fc:	440b      	add	r3, r1
 800b7fe:	3324      	adds	r3, #36	; 0x24
 800b800:	2201      	movs	r2, #1
 800b802:	801a      	strh	r2, [r3, #0]

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDOutEpAdd, USBD_EP_TYPE_INTR,
 800b804:	4b17      	ldr	r3, [pc, #92]	; (800b864 <USBD_CUSTOM_HID_Init+0x150>)
 800b806:	7819      	ldrb	r1, [r3, #0]
 800b808:	2302      	movs	r3, #2
 800b80a:	2203      	movs	r2, #3
 800b80c:	6878      	ldr	r0, [r7, #4]
 800b80e:	f002 f912 	bl	800da36 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 1U;
 800b812:	4b14      	ldr	r3, [pc, #80]	; (800b864 <USBD_CUSTOM_HID_Init+0x150>)
 800b814:	781b      	ldrb	r3, [r3, #0]
 800b816:	f003 020f 	and.w	r2, r3, #15
 800b81a:	6879      	ldr	r1, [r7, #4]
 800b81c:	4613      	mov	r3, r2
 800b81e:	009b      	lsls	r3, r3, #2
 800b820:	4413      	add	r3, r2
 800b822:	009b      	lsls	r3, r3, #2
 800b824:	440b      	add	r3, r1
 800b826:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b82a:	2201      	movs	r2, #1
 800b82c:	801a      	strh	r2, [r3, #0]

  hhid->state = CUSTOM_HID_IDLE;
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	2200      	movs	r2, #0
 800b832:	751a      	strb	r2, [r3, #20]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b83a:	687a      	ldr	r2, [r7, #4]
 800b83c:	33b0      	adds	r3, #176	; 0xb0
 800b83e:	009b      	lsls	r3, r3, #2
 800b840:	4413      	add	r3, r2
 800b842:	685b      	ldr	r3, [r3, #4]
 800b844:	685b      	ldr	r3, [r3, #4]
 800b846:	4798      	blx	r3

  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 800b848:	4b06      	ldr	r3, [pc, #24]	; (800b864 <USBD_CUSTOM_HID_Init+0x150>)
 800b84a:	7819      	ldrb	r1, [r3, #0]
 800b84c:	68fa      	ldr	r2, [r7, #12]
 800b84e:	2302      	movs	r3, #2
 800b850:	6878      	ldr	r0, [r7, #4]
 800b852:	f002 f9df 	bl	800dc14 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 800b856:	2300      	movs	r3, #0
}
 800b858:	4618      	mov	r0, r3
 800b85a:	3710      	adds	r7, #16
 800b85c:	46bd      	mov	sp, r7
 800b85e:	bd80      	pop	{r7, pc}
 800b860:	2000021a 	.word	0x2000021a
 800b864:	2000021b 	.word	0x2000021b

0800b868 <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b868:	b580      	push	{r7, lr}
 800b86a:	b082      	sub	sp, #8
 800b86c:	af00      	add	r7, sp, #0
 800b86e:	6078      	str	r0, [r7, #4]
 800b870:	460b      	mov	r3, r1
 800b872:	70fb      	strb	r3, [r7, #3]
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDInEpAdd);
 800b874:	4b37      	ldr	r3, [pc, #220]	; (800b954 <USBD_CUSTOM_HID_DeInit+0xec>)
 800b876:	781b      	ldrb	r3, [r3, #0]
 800b878:	4619      	mov	r1, r3
 800b87a:	6878      	ldr	r0, [r7, #4]
 800b87c:	f002 f901 	bl	800da82 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 0U;
 800b880:	4b34      	ldr	r3, [pc, #208]	; (800b954 <USBD_CUSTOM_HID_DeInit+0xec>)
 800b882:	781b      	ldrb	r3, [r3, #0]
 800b884:	f003 020f 	and.w	r2, r3, #15
 800b888:	6879      	ldr	r1, [r7, #4]
 800b88a:	4613      	mov	r3, r2
 800b88c:	009b      	lsls	r3, r3, #2
 800b88e:	4413      	add	r3, r2
 800b890:	009b      	lsls	r3, r3, #2
 800b892:	440b      	add	r3, r1
 800b894:	3324      	adds	r3, #36	; 0x24
 800b896:	2200      	movs	r2, #0
 800b898:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = 0U;
 800b89a:	4b2e      	ldr	r3, [pc, #184]	; (800b954 <USBD_CUSTOM_HID_DeInit+0xec>)
 800b89c:	781b      	ldrb	r3, [r3, #0]
 800b89e:	f003 020f 	and.w	r2, r3, #15
 800b8a2:	6879      	ldr	r1, [r7, #4]
 800b8a4:	4613      	mov	r3, r2
 800b8a6:	009b      	lsls	r3, r3, #2
 800b8a8:	4413      	add	r3, r2
 800b8aa:	009b      	lsls	r3, r3, #2
 800b8ac:	440b      	add	r3, r1
 800b8ae:	3326      	adds	r3, #38	; 0x26
 800b8b0:	2200      	movs	r2, #0
 800b8b2:	801a      	strh	r2, [r3, #0]

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDOutEpAdd);
 800b8b4:	4b28      	ldr	r3, [pc, #160]	; (800b958 <USBD_CUSTOM_HID_DeInit+0xf0>)
 800b8b6:	781b      	ldrb	r3, [r3, #0]
 800b8b8:	4619      	mov	r1, r3
 800b8ba:	6878      	ldr	r0, [r7, #4]
 800b8bc:	f002 f8e1 	bl	800da82 <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 0U;
 800b8c0:	4b25      	ldr	r3, [pc, #148]	; (800b958 <USBD_CUSTOM_HID_DeInit+0xf0>)
 800b8c2:	781b      	ldrb	r3, [r3, #0]
 800b8c4:	f003 020f 	and.w	r2, r3, #15
 800b8c8:	6879      	ldr	r1, [r7, #4]
 800b8ca:	4613      	mov	r3, r2
 800b8cc:	009b      	lsls	r3, r3, #2
 800b8ce:	4413      	add	r3, r2
 800b8d0:	009b      	lsls	r3, r3, #2
 800b8d2:	440b      	add	r3, r1
 800b8d4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b8d8:	2200      	movs	r2, #0
 800b8da:	801a      	strh	r2, [r3, #0]
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = 0U;
 800b8dc:	4b1e      	ldr	r3, [pc, #120]	; (800b958 <USBD_CUSTOM_HID_DeInit+0xf0>)
 800b8de:	781b      	ldrb	r3, [r3, #0]
 800b8e0:	f003 020f 	and.w	r2, r3, #15
 800b8e4:	6879      	ldr	r1, [r7, #4]
 800b8e6:	4613      	mov	r3, r2
 800b8e8:	009b      	lsls	r3, r3, #2
 800b8ea:	4413      	add	r3, r2
 800b8ec:	009b      	lsls	r3, r3, #2
 800b8ee:	440b      	add	r3, r1
 800b8f0:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 800b8f4:	2200      	movs	r2, #0
 800b8f6:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	32b0      	adds	r2, #176	; 0xb0
 800b902:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b906:	2b00      	cmp	r3, #0
 800b908:	d01f      	beq.n	800b94a <USBD_CUSTOM_HID_DeInit+0xe2>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b910:	687a      	ldr	r2, [r7, #4]
 800b912:	33b0      	adds	r3, #176	; 0xb0
 800b914:	009b      	lsls	r3, r3, #2
 800b916:	4413      	add	r3, r2
 800b918:	685b      	ldr	r3, [r3, #4]
 800b91a:	689b      	ldr	r3, [r3, #8]
 800b91c:	4798      	blx	r3
    USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	32b0      	adds	r2, #176	; 0xb0
 800b928:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b92c:	4618      	mov	r0, r3
 800b92e:	f002 f9a1 	bl	800dc74 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	32b0      	adds	r2, #176	; 0xb0
 800b93c:	2100      	movs	r1, #0
 800b93e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	2200      	movs	r2, #0
 800b946:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800b94a:	2300      	movs	r3, #0
}
 800b94c:	4618      	mov	r0, r3
 800b94e:	3708      	adds	r7, #8
 800b950:	46bd      	mov	sp, r7
 800b952:	bd80      	pop	{r7, pc}
 800b954:	2000021a 	.word	0x2000021a
 800b958:	2000021b 	.word	0x2000021b

0800b95c <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 800b95c:	b580      	push	{r7, lr}
 800b95e:	b088      	sub	sp, #32
 800b960:	af00      	add	r7, sp, #0
 800b962:	6078      	str	r0, [r7, #4]
 800b964:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	32b0      	adds	r2, #176	; 0xb0
 800b970:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b974:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 800b976:	2300      	movs	r3, #0
 800b978:	83fb      	strh	r3, [r7, #30]
  uint8_t  *pbuf = NULL;
 800b97a:	2300      	movs	r3, #0
 800b97c:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 800b97e:	2300      	movs	r3, #0
 800b980:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 800b982:	2300      	movs	r3, #0
 800b984:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
 800b986:	693b      	ldr	r3, [r7, #16]
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d101      	bne.n	800b990 <USBD_CUSTOM_HID_Setup+0x34>
  {
    return (uint8_t)USBD_FAIL;
 800b98c:	2303      	movs	r3, #3
 800b98e:	e0f8      	b.n	800bb82 <USBD_CUSTOM_HID_Setup+0x226>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b990:	683b      	ldr	r3, [r7, #0]
 800b992:	781b      	ldrb	r3, [r3, #0]
 800b994:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d056      	beq.n	800ba4a <USBD_CUSTOM_HID_Setup+0xee>
 800b99c:	2b20      	cmp	r3, #32
 800b99e:	f040 80e8 	bne.w	800bb72 <USBD_CUSTOM_HID_Setup+0x216>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 800b9a2:	683b      	ldr	r3, [r7, #0]
 800b9a4:	785b      	ldrb	r3, [r3, #1]
 800b9a6:	3b02      	subs	r3, #2
 800b9a8:	2b09      	cmp	r3, #9
 800b9aa:	d846      	bhi.n	800ba3a <USBD_CUSTOM_HID_Setup+0xde>
 800b9ac:	a201      	add	r2, pc, #4	; (adr r2, 800b9b4 <USBD_CUSTOM_HID_Setup+0x58>)
 800b9ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9b2:	bf00      	nop
 800b9b4:	0800ba0d 	.word	0x0800ba0d
 800b9b8:	0800b9eb 	.word	0x0800b9eb
 800b9bc:	0800ba3b 	.word	0x0800ba3b
 800b9c0:	0800ba3b 	.word	0x0800ba3b
 800b9c4:	0800ba3b 	.word	0x0800ba3b
 800b9c8:	0800ba3b 	.word	0x0800ba3b
 800b9cc:	0800ba3b 	.word	0x0800ba3b
 800b9d0:	0800ba1d 	.word	0x0800ba1d
 800b9d4:	0800b9fb 	.word	0x0800b9fb
 800b9d8:	0800b9dd 	.word	0x0800b9dd
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 800b9dc:	683b      	ldr	r3, [r7, #0]
 800b9de:	885b      	ldrh	r3, [r3, #2]
 800b9e0:	b2db      	uxtb	r3, r3
 800b9e2:	461a      	mov	r2, r3
 800b9e4:	693b      	ldr	r3, [r7, #16]
 800b9e6:	605a      	str	r2, [r3, #4]
          break;
 800b9e8:	e02e      	b.n	800ba48 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 800b9ea:	693b      	ldr	r3, [r7, #16]
 800b9ec:	3304      	adds	r3, #4
 800b9ee:	2201      	movs	r2, #1
 800b9f0:	4619      	mov	r1, r3
 800b9f2:	6878      	ldr	r0, [r7, #4]
 800b9f4:	f001 fc94 	bl	800d320 <USBD_CtlSendData>
          break;
 800b9f8:	e026      	b.n	800ba48 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800b9fa:	683b      	ldr	r3, [r7, #0]
 800b9fc:	885b      	ldrh	r3, [r3, #2]
 800b9fe:	0a1b      	lsrs	r3, r3, #8
 800ba00:	b29b      	uxth	r3, r3
 800ba02:	b2db      	uxtb	r3, r3
 800ba04:	461a      	mov	r2, r3
 800ba06:	693b      	ldr	r3, [r7, #16]
 800ba08:	609a      	str	r2, [r3, #8]
          break;
 800ba0a:	e01d      	b.n	800ba48 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 800ba0c:	693b      	ldr	r3, [r7, #16]
 800ba0e:	3308      	adds	r3, #8
 800ba10:	2201      	movs	r2, #1
 800ba12:	4619      	mov	r1, r3
 800ba14:	6878      	ldr	r0, [r7, #4]
 800ba16:	f001 fc83 	bl	800d320 <USBD_CtlSendData>
          break;
 800ba1a:	e015      	b.n	800ba48 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_SET_REPORT:
          hhid->IsReportAvailable = 1U;
 800ba1c:	693b      	ldr	r3, [r7, #16]
 800ba1e:	2201      	movs	r2, #1
 800ba20:	611a      	str	r2, [r3, #16]
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 800ba22:	6939      	ldr	r1, [r7, #16]
                                  MIN(req->wLength, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE));
 800ba24:	683b      	ldr	r3, [r7, #0]
 800ba26:	88db      	ldrh	r3, [r3, #6]
 800ba28:	2b02      	cmp	r3, #2
 800ba2a:	bf28      	it	cs
 800ba2c:	2302      	movcs	r3, #2
 800ba2e:	b29b      	uxth	r3, r3
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 800ba30:	461a      	mov	r2, r3
 800ba32:	6878      	ldr	r0, [r7, #4]
 800ba34:	f001 fca0 	bl	800d378 <USBD_CtlPrepareRx>
          break;
 800ba38:	e006      	b.n	800ba48 <USBD_CUSTOM_HID_Setup+0xec>

        default:
          USBD_CtlError(pdev, req);
 800ba3a:	6839      	ldr	r1, [r7, #0]
 800ba3c:	6878      	ldr	r0, [r7, #4]
 800ba3e:	f001 fbfe 	bl	800d23e <USBD_CtlError>
          ret = USBD_FAIL;
 800ba42:	2303      	movs	r3, #3
 800ba44:	75fb      	strb	r3, [r7, #23]
          break;
 800ba46:	bf00      	nop
      }
      break;
 800ba48:	e09a      	b.n	800bb80 <USBD_CUSTOM_HID_Setup+0x224>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ba4a:	683b      	ldr	r3, [r7, #0]
 800ba4c:	785b      	ldrb	r3, [r3, #1]
 800ba4e:	2b0b      	cmp	r3, #11
 800ba50:	f200 8086 	bhi.w	800bb60 <USBD_CUSTOM_HID_Setup+0x204>
 800ba54:	a201      	add	r2, pc, #4	; (adr r2, 800ba5c <USBD_CUSTOM_HID_Setup+0x100>)
 800ba56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba5a:	bf00      	nop
 800ba5c:	0800ba8d 	.word	0x0800ba8d
 800ba60:	0800bb6f 	.word	0x0800bb6f
 800ba64:	0800bb61 	.word	0x0800bb61
 800ba68:	0800bb61 	.word	0x0800bb61
 800ba6c:	0800bb61 	.word	0x0800bb61
 800ba70:	0800bb61 	.word	0x0800bb61
 800ba74:	0800bab7 	.word	0x0800bab7
 800ba78:	0800bb61 	.word	0x0800bb61
 800ba7c:	0800bb61 	.word	0x0800bb61
 800ba80:	0800bb61 	.word	0x0800bb61
 800ba84:	0800bb0f 	.word	0x0800bb0f
 800ba88:	0800bb39 	.word	0x0800bb39
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba92:	b2db      	uxtb	r3, r3
 800ba94:	2b03      	cmp	r3, #3
 800ba96:	d107      	bne.n	800baa8 <USBD_CUSTOM_HID_Setup+0x14c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800ba98:	f107 030e 	add.w	r3, r7, #14
 800ba9c:	2202      	movs	r2, #2
 800ba9e:	4619      	mov	r1, r3
 800baa0:	6878      	ldr	r0, [r7, #4]
 800baa2:	f001 fc3d 	bl	800d320 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800baa6:	e063      	b.n	800bb70 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 800baa8:	6839      	ldr	r1, [r7, #0]
 800baaa:	6878      	ldr	r0, [r7, #4]
 800baac:	f001 fbc7 	bl	800d23e <USBD_CtlError>
            ret = USBD_FAIL;
 800bab0:	2303      	movs	r3, #3
 800bab2:	75fb      	strb	r3, [r7, #23]
          break;
 800bab4:	e05c      	b.n	800bb70 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 800bab6:	683b      	ldr	r3, [r7, #0]
 800bab8:	885b      	ldrh	r3, [r3, #2]
 800baba:	0a1b      	lsrs	r3, r3, #8
 800babc:	b29b      	uxth	r3, r3
 800babe:	2b22      	cmp	r3, #34	; 0x22
 800bac0:	d110      	bne.n	800bae4 <USBD_CUSTOM_HID_Setup+0x188>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 800bac2:	683b      	ldr	r3, [r7, #0]
 800bac4:	88db      	ldrh	r3, [r3, #6]
 800bac6:	2b02      	cmp	r3, #2
 800bac8:	bf28      	it	cs
 800baca:	2302      	movcs	r3, #2
 800bacc:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->pReport;
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bad4:	687a      	ldr	r2, [r7, #4]
 800bad6:	33b0      	adds	r3, #176	; 0xb0
 800bad8:	009b      	lsls	r3, r3, #2
 800bada:	4413      	add	r3, r2
 800badc:	685b      	ldr	r3, [r3, #4]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	61bb      	str	r3, [r7, #24]
 800bae2:	e00d      	b.n	800bb00 <USBD_CUSTOM_HID_Setup+0x1a4>
          }
          else
          {
            if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 800bae4:	683b      	ldr	r3, [r7, #0]
 800bae6:	885b      	ldrh	r3, [r3, #2]
 800bae8:	0a1b      	lsrs	r3, r3, #8
 800baea:	b29b      	uxth	r3, r3
 800baec:	2b21      	cmp	r3, #33	; 0x21
 800baee:	d107      	bne.n	800bb00 <USBD_CUSTOM_HID_Setup+0x1a4>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 800baf0:	4b26      	ldr	r3, [pc, #152]	; (800bb8c <USBD_CUSTOM_HID_Setup+0x230>)
 800baf2:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 800baf4:	683b      	ldr	r3, [r7, #0]
 800baf6:	88db      	ldrh	r3, [r3, #6]
 800baf8:	2b09      	cmp	r3, #9
 800bafa:	bf28      	it	cs
 800bafc:	2309      	movcs	r3, #9
 800bafe:	83fb      	strh	r3, [r7, #30]
            }
          }

          (void)USBD_CtlSendData(pdev, pbuf, len);
 800bb00:	8bfb      	ldrh	r3, [r7, #30]
 800bb02:	461a      	mov	r2, r3
 800bb04:	69b9      	ldr	r1, [r7, #24]
 800bb06:	6878      	ldr	r0, [r7, #4]
 800bb08:	f001 fc0a 	bl	800d320 <USBD_CtlSendData>
          break;
 800bb0c:	e030      	b.n	800bb70 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb14:	b2db      	uxtb	r3, r3
 800bb16:	2b03      	cmp	r3, #3
 800bb18:	d107      	bne.n	800bb2a <USBD_CUSTOM_HID_Setup+0x1ce>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 800bb1a:	693b      	ldr	r3, [r7, #16]
 800bb1c:	330c      	adds	r3, #12
 800bb1e:	2201      	movs	r2, #1
 800bb20:	4619      	mov	r1, r3
 800bb22:	6878      	ldr	r0, [r7, #4]
 800bb24:	f001 fbfc 	bl	800d320 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800bb28:	e022      	b.n	800bb70 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 800bb2a:	6839      	ldr	r1, [r7, #0]
 800bb2c:	6878      	ldr	r0, [r7, #4]
 800bb2e:	f001 fb86 	bl	800d23e <USBD_CtlError>
            ret = USBD_FAIL;
 800bb32:	2303      	movs	r3, #3
 800bb34:	75fb      	strb	r3, [r7, #23]
          break;
 800bb36:	e01b      	b.n	800bb70 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb3e:	b2db      	uxtb	r3, r3
 800bb40:	2b03      	cmp	r3, #3
 800bb42:	d106      	bne.n	800bb52 <USBD_CUSTOM_HID_Setup+0x1f6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 800bb44:	683b      	ldr	r3, [r7, #0]
 800bb46:	885b      	ldrh	r3, [r3, #2]
 800bb48:	b2db      	uxtb	r3, r3
 800bb4a:	461a      	mov	r2, r3
 800bb4c:	693b      	ldr	r3, [r7, #16]
 800bb4e:	60da      	str	r2, [r3, #12]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800bb50:	e00e      	b.n	800bb70 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 800bb52:	6839      	ldr	r1, [r7, #0]
 800bb54:	6878      	ldr	r0, [r7, #4]
 800bb56:	f001 fb72 	bl	800d23e <USBD_CtlError>
            ret = USBD_FAIL;
 800bb5a:	2303      	movs	r3, #3
 800bb5c:	75fb      	strb	r3, [r7, #23]
          break;
 800bb5e:	e007      	b.n	800bb70 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800bb60:	6839      	ldr	r1, [r7, #0]
 800bb62:	6878      	ldr	r0, [r7, #4]
 800bb64:	f001 fb6b 	bl	800d23e <USBD_CtlError>
          ret = USBD_FAIL;
 800bb68:	2303      	movs	r3, #3
 800bb6a:	75fb      	strb	r3, [r7, #23]
          break;
 800bb6c:	e000      	b.n	800bb70 <USBD_CUSTOM_HID_Setup+0x214>
          break;
 800bb6e:	bf00      	nop
      }
      break;
 800bb70:	e006      	b.n	800bb80 <USBD_CUSTOM_HID_Setup+0x224>

    default:
      USBD_CtlError(pdev, req);
 800bb72:	6839      	ldr	r1, [r7, #0]
 800bb74:	6878      	ldr	r0, [r7, #4]
 800bb76:	f001 fb62 	bl	800d23e <USBD_CtlError>
      ret = USBD_FAIL;
 800bb7a:	2303      	movs	r3, #3
 800bb7c:	75fb      	strb	r3, [r7, #23]
      break;
 800bb7e:	bf00      	nop
  }
  return (uint8_t)ret;
 800bb80:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb82:	4618      	mov	r0, r3
 800bb84:	3720      	adds	r7, #32
 800bb86:	46bd      	mov	sp, r7
 800bb88:	bd80      	pop	{r7, pc}
 800bb8a:	bf00      	nop
 800bb8c:	20000204 	.word	0x20000204

0800bb90 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 800bb90:	b580      	push	{r7, lr}
 800bb92:	b084      	sub	sp, #16
 800bb94:	af00      	add	r7, sp, #0
 800bb96:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 800bb98:	2181      	movs	r1, #129	; 0x81
 800bb9a:	4815      	ldr	r0, [pc, #84]	; (800bbf0 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 800bb9c:	f000 fd17 	bl	800c5ce <USBD_GetEpDesc>
 800bba0:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 800bba2:	2101      	movs	r1, #1
 800bba4:	4812      	ldr	r0, [pc, #72]	; (800bbf0 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 800bba6:	f000 fd12 	bl	800c5ce <USBD_GetEpDesc>
 800bbaa:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d009      	beq.n	800bbc6 <USBD_CUSTOM_HID_GetFSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	2200      	movs	r2, #0
 800bbb6:	f042 0202 	orr.w	r2, r2, #2
 800bbba:	711a      	strb	r2, [r3, #4]
 800bbbc:	2200      	movs	r2, #0
 800bbbe:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	2205      	movs	r2, #5
 800bbc4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800bbc6:	68bb      	ldr	r3, [r7, #8]
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d009      	beq.n	800bbe0 <USBD_CUSTOM_HID_GetFSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 800bbcc:	68bb      	ldr	r3, [r7, #8]
 800bbce:	2200      	movs	r2, #0
 800bbd0:	f042 0202 	orr.w	r2, r2, #2
 800bbd4:	711a      	strb	r2, [r3, #4]
 800bbd6:	2200      	movs	r2, #0
 800bbd8:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 800bbda:	68bb      	ldr	r3, [r7, #8]
 800bbdc:	2205      	movs	r2, #5
 800bbde:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	2229      	movs	r2, #41	; 0x29
 800bbe4:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 800bbe6:	4b02      	ldr	r3, [pc, #8]	; (800bbf0 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
}
 800bbe8:	4618      	mov	r0, r3
 800bbea:	3710      	adds	r7, #16
 800bbec:	46bd      	mov	sp, r7
 800bbee:	bd80      	pop	{r7, pc}
 800bbf0:	200001d8 	.word	0x200001d8

0800bbf4 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 800bbf4:	b580      	push	{r7, lr}
 800bbf6:	b084      	sub	sp, #16
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 800bbfc:	2181      	movs	r1, #129	; 0x81
 800bbfe:	4815      	ldr	r0, [pc, #84]	; (800bc54 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 800bc00:	f000 fce5 	bl	800c5ce <USBD_GetEpDesc>
 800bc04:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 800bc06:	2101      	movs	r1, #1
 800bc08:	4812      	ldr	r0, [pc, #72]	; (800bc54 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 800bc0a:	f000 fce0 	bl	800c5ce <USBD_GetEpDesc>
 800bc0e:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d009      	beq.n	800bc2a <USBD_CUSTOM_HID_GetHSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	2200      	movs	r2, #0
 800bc1a:	f042 0202 	orr.w	r2, r2, #2
 800bc1e:	711a      	strb	r2, [r3, #4]
 800bc20:	2200      	movs	r2, #0
 800bc22:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	2205      	movs	r2, #5
 800bc28:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800bc2a:	68bb      	ldr	r3, [r7, #8]
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d009      	beq.n	800bc44 <USBD_CUSTOM_HID_GetHSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 800bc30:	68bb      	ldr	r3, [r7, #8]
 800bc32:	2200      	movs	r2, #0
 800bc34:	f042 0202 	orr.w	r2, r2, #2
 800bc38:	711a      	strb	r2, [r3, #4]
 800bc3a:	2200      	movs	r2, #0
 800bc3c:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 800bc3e:	68bb      	ldr	r3, [r7, #8]
 800bc40:	2205      	movs	r2, #5
 800bc42:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	2229      	movs	r2, #41	; 0x29
 800bc48:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 800bc4a:	4b02      	ldr	r3, [pc, #8]	; (800bc54 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
}
 800bc4c:	4618      	mov	r0, r3
 800bc4e:	3710      	adds	r7, #16
 800bc50:	46bd      	mov	sp, r7
 800bc52:	bd80      	pop	{r7, pc}
 800bc54:	200001d8 	.word	0x200001d8

0800bc58 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800bc58:	b580      	push	{r7, lr}
 800bc5a:	b084      	sub	sp, #16
 800bc5c:	af00      	add	r7, sp, #0
 800bc5e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 800bc60:	2181      	movs	r1, #129	; 0x81
 800bc62:	4815      	ldr	r0, [pc, #84]	; (800bcb8 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 800bc64:	f000 fcb3 	bl	800c5ce <USBD_GetEpDesc>
 800bc68:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 800bc6a:	2101      	movs	r1, #1
 800bc6c:	4812      	ldr	r0, [pc, #72]	; (800bcb8 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 800bc6e:	f000 fcae 	bl	800c5ce <USBD_GetEpDesc>
 800bc72:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d009      	beq.n	800bc8e <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	2200      	movs	r2, #0
 800bc7e:	f042 0202 	orr.w	r2, r2, #2
 800bc82:	711a      	strb	r2, [r3, #4]
 800bc84:	2200      	movs	r2, #0
 800bc86:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	2205      	movs	r2, #5
 800bc8c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800bc8e:	68bb      	ldr	r3, [r7, #8]
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d009      	beq.n	800bca8 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 800bc94:	68bb      	ldr	r3, [r7, #8]
 800bc96:	2200      	movs	r2, #0
 800bc98:	f042 0202 	orr.w	r2, r2, #2
 800bc9c:	711a      	strb	r2, [r3, #4]
 800bc9e:	2200      	movs	r2, #0
 800bca0:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 800bca2:	68bb      	ldr	r3, [r7, #8]
 800bca4:	2205      	movs	r2, #5
 800bca6:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	2229      	movs	r2, #41	; 0x29
 800bcac:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 800bcae:	4b02      	ldr	r3, [pc, #8]	; (800bcb8 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
}
 800bcb0:	4618      	mov	r0, r3
 800bcb2:	3710      	adds	r7, #16
 800bcb4:	46bd      	mov	sp, r7
 800bcb6:	bd80      	pop	{r7, pc}
 800bcb8:	200001d8 	.word	0x200001d8

0800bcbc <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bcbc:	b480      	push	{r7}
 800bcbe:	b083      	sub	sp, #12
 800bcc0:	af00      	add	r7, sp, #0
 800bcc2:	6078      	str	r0, [r7, #4]
 800bcc4:	460b      	mov	r3, r1
 800bcc6:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = CUSTOM_HID_IDLE;
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	32b0      	adds	r2, #176	; 0xb0
 800bcd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bcd6:	2200      	movs	r2, #0
 800bcd8:	751a      	strb	r2, [r3, #20]

  return (uint8_t)USBD_OK;
 800bcda:	2300      	movs	r3, #0
}
 800bcdc:	4618      	mov	r0, r3
 800bcde:	370c      	adds	r7, #12
 800bce0:	46bd      	mov	sp, r7
 800bce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce6:	4770      	bx	lr

0800bce8 <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bce8:	b580      	push	{r7, lr}
 800bcea:	b084      	sub	sp, #16
 800bcec:	af00      	add	r7, sp, #0
 800bcee:	6078      	str	r0, [r7, #4]
 800bcf0:	460b      	mov	r3, r1
 800bcf2:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	32b0      	adds	r2, #176	; 0xb0
 800bcfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d101      	bne.n	800bd0a <USBD_CUSTOM_HID_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800bd06:	2303      	movs	r3, #3
 800bd08:	e017      	b.n	800bd3a <USBD_CUSTOM_HID_DataOut+0x52>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	32b0      	adds	r2, #176	; 0xb0
 800bd14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd18:	60fb      	str	r3, [r7, #12]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bd20:	687a      	ldr	r2, [r7, #4]
 800bd22:	33b0      	adds	r3, #176	; 0xb0
 800bd24:	009b      	lsls	r3, r3, #2
 800bd26:	4413      	add	r3, r2
 800bd28:	685b      	ldr	r3, [r3, #4]
 800bd2a:	68db      	ldr	r3, [r3, #12]
 800bd2c:	68fa      	ldr	r2, [r7, #12]
 800bd2e:	7810      	ldrb	r0, [r2, #0]
 800bd30:	68fa      	ldr	r2, [r7, #12]
 800bd32:	7852      	ldrb	r2, [r2, #1]
 800bd34:	4611      	mov	r1, r2
 800bd36:	4798      	blx	r3
                                                                           hhid->Report_buf[1]);

  return (uint8_t)USBD_OK;
 800bd38:	2300      	movs	r3, #0
}
 800bd3a:	4618      	mov	r0, r3
 800bd3c:	3710      	adds	r7, #16
 800bd3e:	46bd      	mov	sp, r7
 800bd40:	bd80      	pop	{r7, pc}
	...

0800bd44 <USBD_CUSTOM_HID_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800bd44:	b580      	push	{r7, lr}
 800bd46:	b084      	sub	sp, #16
 800bd48:	af00      	add	r7, sp, #0
 800bd4a:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	32b0      	adds	r2, #176	; 0xb0
 800bd56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d101      	bne.n	800bd62 <USBD_CUSTOM_HID_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800bd5e:	2303      	movs	r3, #3
 800bd60:	e00f      	b.n	800bd82 <USBD_CUSTOM_HID_ReceivePacket+0x3e>
#ifdef USE_USBD_COMPOSITE
  /* Get OUT Endpoint address allocated for this class instance */
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	32b0      	adds	r2, #176	; 0xb0
 800bd6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd70:	60fb      	str	r3, [r7, #12]

  /* Resume USB Out process */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 800bd72:	4b06      	ldr	r3, [pc, #24]	; (800bd8c <USBD_CUSTOM_HID_ReceivePacket+0x48>)
 800bd74:	7819      	ldrb	r1, [r3, #0]
 800bd76:	68fa      	ldr	r2, [r7, #12]
 800bd78:	2302      	movs	r3, #2
 800bd7a:	6878      	ldr	r0, [r7, #4]
 800bd7c:	f001 ff4a 	bl	800dc14 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 800bd80:	2300      	movs	r3, #0
}
 800bd82:	4618      	mov	r0, r3
 800bd84:	3710      	adds	r7, #16
 800bd86:	46bd      	mov	sp, r7
 800bd88:	bd80      	pop	{r7, pc}
 800bd8a:	bf00      	nop
 800bd8c:	2000021b 	.word	0x2000021b

0800bd90 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800bd90:	b580      	push	{r7, lr}
 800bd92:	b084      	sub	sp, #16
 800bd94:	af00      	add	r7, sp, #0
 800bd96:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	32b0      	adds	r2, #176	; 0xb0
 800bda2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bda6:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d101      	bne.n	800bdb2 <USBD_CUSTOM_HID_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800bdae:	2303      	movs	r3, #3
 800bdb0:	e016      	b.n	800bde0 <USBD_CUSTOM_HID_EP0_RxReady+0x50>
  }

  if (hhid->IsReportAvailable == 1U)
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	691b      	ldr	r3, [r3, #16]
 800bdb6:	2b01      	cmp	r3, #1
 800bdb8:	d111      	bne.n	800bdde <USBD_CUSTOM_HID_EP0_RxReady+0x4e>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bdc0:	687a      	ldr	r2, [r7, #4]
 800bdc2:	33b0      	adds	r3, #176	; 0xb0
 800bdc4:	009b      	lsls	r3, r3, #2
 800bdc6:	4413      	add	r3, r2
 800bdc8:	685b      	ldr	r3, [r3, #4]
 800bdca:	68db      	ldr	r3, [r3, #12]
 800bdcc:	68fa      	ldr	r2, [r7, #12]
 800bdce:	7810      	ldrb	r0, [r2, #0]
 800bdd0:	68fa      	ldr	r2, [r7, #12]
 800bdd2:	7852      	ldrb	r2, [r2, #1]
 800bdd4:	4611      	mov	r1, r2
 800bdd6:	4798      	blx	r3
                                                                             hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	2200      	movs	r2, #0
 800bddc:	611a      	str	r2, [r3, #16]
  }

  return (uint8_t)USBD_OK;
 800bdde:	2300      	movs	r3, #0
}
 800bde0:	4618      	mov	r0, r3
 800bde2:	3710      	adds	r7, #16
 800bde4:	46bd      	mov	sp, r7
 800bde6:	bd80      	pop	{r7, pc}

0800bde8 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 800bde8:	b480      	push	{r7}
 800bdea:	b083      	sub	sp, #12
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	220a      	movs	r2, #10
 800bdf4:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 800bdf6:	4b03      	ldr	r3, [pc, #12]	; (800be04 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 800bdf8:	4618      	mov	r0, r3
 800bdfa:	370c      	adds	r7, #12
 800bdfc:	46bd      	mov	sp, r7
 800bdfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be02:	4770      	bx	lr
 800be04:	20000210 	.word	0x20000210

0800be08 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 800be08:	b480      	push	{r7}
 800be0a:	b083      	sub	sp, #12
 800be0c:	af00      	add	r7, sp, #0
 800be0e:	6078      	str	r0, [r7, #4]
 800be10:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800be12:	683b      	ldr	r3, [r7, #0]
 800be14:	2b00      	cmp	r3, #0
 800be16:	d101      	bne.n	800be1c <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800be18:	2303      	movs	r3, #3
 800be1a:	e009      	b.n	800be30 <USBD_CUSTOM_HID_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800be22:	687a      	ldr	r2, [r7, #4]
 800be24:	33b0      	adds	r3, #176	; 0xb0
 800be26:	009b      	lsls	r3, r3, #2
 800be28:	4413      	add	r3, r2
 800be2a:	683a      	ldr	r2, [r7, #0]
 800be2c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800be2e:	2300      	movs	r3, #0
}
 800be30:	4618      	mov	r0, r3
 800be32:	370c      	adds	r7, #12
 800be34:	46bd      	mov	sp, r7
 800be36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be3a:	4770      	bx	lr

0800be3c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800be3c:	b580      	push	{r7, lr}
 800be3e:	b086      	sub	sp, #24
 800be40:	af00      	add	r7, sp, #0
 800be42:	60f8      	str	r0, [r7, #12]
 800be44:	60b9      	str	r1, [r7, #8]
 800be46:	4613      	mov	r3, r2
 800be48:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d101      	bne.n	800be54 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800be50:	2303      	movs	r3, #3
 800be52:	e01f      	b.n	800be94 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	2200      	movs	r2, #0
 800be58:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	2200      	movs	r2, #0
 800be60:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	2200      	movs	r2, #0
 800be68:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800be6c:	68bb      	ldr	r3, [r7, #8]
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d003      	beq.n	800be7a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	68ba      	ldr	r2, [r7, #8]
 800be76:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	2201      	movs	r2, #1
 800be7e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	79fa      	ldrb	r2, [r7, #7]
 800be86:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800be88:	68f8      	ldr	r0, [r7, #12]
 800be8a:	f001 fd6d 	bl	800d968 <USBD_LL_Init>
 800be8e:	4603      	mov	r3, r0
 800be90:	75fb      	strb	r3, [r7, #23]

  return ret;
 800be92:	7dfb      	ldrb	r3, [r7, #23]
}
 800be94:	4618      	mov	r0, r3
 800be96:	3718      	adds	r7, #24
 800be98:	46bd      	mov	sp, r7
 800be9a:	bd80      	pop	{r7, pc}

0800be9c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800be9c:	b580      	push	{r7, lr}
 800be9e:	b084      	sub	sp, #16
 800bea0:	af00      	add	r7, sp, #0
 800bea2:	6078      	str	r0, [r7, #4]
 800bea4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bea6:	2300      	movs	r3, #0
 800bea8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800beaa:	683b      	ldr	r3, [r7, #0]
 800beac:	2b00      	cmp	r3, #0
 800beae:	d101      	bne.n	800beb4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800beb0:	2303      	movs	r3, #3
 800beb2:	e025      	b.n	800bf00 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	683a      	ldr	r2, [r7, #0]
 800beb8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	32ae      	adds	r2, #174	; 0xae
 800bec6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800beca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800becc:	2b00      	cmp	r3, #0
 800bece:	d00f      	beq.n	800bef0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	32ae      	adds	r2, #174	; 0xae
 800beda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bee0:	f107 020e 	add.w	r2, r7, #14
 800bee4:	4610      	mov	r0, r2
 800bee6:	4798      	blx	r3
 800bee8:	4602      	mov	r2, r0
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800bef6:	1c5a      	adds	r2, r3, #1
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800befe:	2300      	movs	r3, #0
}
 800bf00:	4618      	mov	r0, r3
 800bf02:	3710      	adds	r7, #16
 800bf04:	46bd      	mov	sp, r7
 800bf06:	bd80      	pop	{r7, pc}

0800bf08 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800bf08:	b580      	push	{r7, lr}
 800bf0a:	b082      	sub	sp, #8
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800bf10:	6878      	ldr	r0, [r7, #4]
 800bf12:	f001 fd75 	bl	800da00 <USBD_LL_Start>
 800bf16:	4603      	mov	r3, r0
}
 800bf18:	4618      	mov	r0, r3
 800bf1a:	3708      	adds	r7, #8
 800bf1c:	46bd      	mov	sp, r7
 800bf1e:	bd80      	pop	{r7, pc}

0800bf20 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800bf20:	b480      	push	{r7}
 800bf22:	b083      	sub	sp, #12
 800bf24:	af00      	add	r7, sp, #0
 800bf26:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bf28:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800bf2a:	4618      	mov	r0, r3
 800bf2c:	370c      	adds	r7, #12
 800bf2e:	46bd      	mov	sp, r7
 800bf30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf34:	4770      	bx	lr

0800bf36 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bf36:	b580      	push	{r7, lr}
 800bf38:	b084      	sub	sp, #16
 800bf3a:	af00      	add	r7, sp, #0
 800bf3c:	6078      	str	r0, [r7, #4]
 800bf3e:	460b      	mov	r3, r1
 800bf40:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800bf42:	2300      	movs	r3, #0
 800bf44:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d009      	beq.n	800bf64 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	78fa      	ldrb	r2, [r7, #3]
 800bf5a:	4611      	mov	r1, r2
 800bf5c:	6878      	ldr	r0, [r7, #4]
 800bf5e:	4798      	blx	r3
 800bf60:	4603      	mov	r3, r0
 800bf62:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800bf64:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf66:	4618      	mov	r0, r3
 800bf68:	3710      	adds	r7, #16
 800bf6a:	46bd      	mov	sp, r7
 800bf6c:	bd80      	pop	{r7, pc}

0800bf6e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bf6e:	b580      	push	{r7, lr}
 800bf70:	b084      	sub	sp, #16
 800bf72:	af00      	add	r7, sp, #0
 800bf74:	6078      	str	r0, [r7, #4]
 800bf76:	460b      	mov	r3, r1
 800bf78:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800bf7a:	2300      	movs	r3, #0
 800bf7c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf84:	685b      	ldr	r3, [r3, #4]
 800bf86:	78fa      	ldrb	r2, [r7, #3]
 800bf88:	4611      	mov	r1, r2
 800bf8a:	6878      	ldr	r0, [r7, #4]
 800bf8c:	4798      	blx	r3
 800bf8e:	4603      	mov	r3, r0
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d001      	beq.n	800bf98 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800bf94:	2303      	movs	r3, #3
 800bf96:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800bf98:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf9a:	4618      	mov	r0, r3
 800bf9c:	3710      	adds	r7, #16
 800bf9e:	46bd      	mov	sp, r7
 800bfa0:	bd80      	pop	{r7, pc}

0800bfa2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800bfa2:	b580      	push	{r7, lr}
 800bfa4:	b084      	sub	sp, #16
 800bfa6:	af00      	add	r7, sp, #0
 800bfa8:	6078      	str	r0, [r7, #4]
 800bfaa:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bfb2:	6839      	ldr	r1, [r7, #0]
 800bfb4:	4618      	mov	r0, r3
 800bfb6:	f001 f908 	bl	800d1ca <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	2201      	movs	r2, #1
 800bfbe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800bfc8:	461a      	mov	r2, r3
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800bfd6:	f003 031f 	and.w	r3, r3, #31
 800bfda:	2b02      	cmp	r3, #2
 800bfdc:	d01a      	beq.n	800c014 <USBD_LL_SetupStage+0x72>
 800bfde:	2b02      	cmp	r3, #2
 800bfe0:	d822      	bhi.n	800c028 <USBD_LL_SetupStage+0x86>
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d002      	beq.n	800bfec <USBD_LL_SetupStage+0x4a>
 800bfe6:	2b01      	cmp	r3, #1
 800bfe8:	d00a      	beq.n	800c000 <USBD_LL_SetupStage+0x5e>
 800bfea:	e01d      	b.n	800c028 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bff2:	4619      	mov	r1, r3
 800bff4:	6878      	ldr	r0, [r7, #4]
 800bff6:	f000 fb5f 	bl	800c6b8 <USBD_StdDevReq>
 800bffa:	4603      	mov	r3, r0
 800bffc:	73fb      	strb	r3, [r7, #15]
      break;
 800bffe:	e020      	b.n	800c042 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c006:	4619      	mov	r1, r3
 800c008:	6878      	ldr	r0, [r7, #4]
 800c00a:	f000 fbc7 	bl	800c79c <USBD_StdItfReq>
 800c00e:	4603      	mov	r3, r0
 800c010:	73fb      	strb	r3, [r7, #15]
      break;
 800c012:	e016      	b.n	800c042 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c01a:	4619      	mov	r1, r3
 800c01c:	6878      	ldr	r0, [r7, #4]
 800c01e:	f000 fc29 	bl	800c874 <USBD_StdEPReq>
 800c022:	4603      	mov	r3, r0
 800c024:	73fb      	strb	r3, [r7, #15]
      break;
 800c026:	e00c      	b.n	800c042 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c02e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c032:	b2db      	uxtb	r3, r3
 800c034:	4619      	mov	r1, r3
 800c036:	6878      	ldr	r0, [r7, #4]
 800c038:	f001 fd42 	bl	800dac0 <USBD_LL_StallEP>
 800c03c:	4603      	mov	r3, r0
 800c03e:	73fb      	strb	r3, [r7, #15]
      break;
 800c040:	bf00      	nop
  }

  return ret;
 800c042:	7bfb      	ldrb	r3, [r7, #15]
}
 800c044:	4618      	mov	r0, r3
 800c046:	3710      	adds	r7, #16
 800c048:	46bd      	mov	sp, r7
 800c04a:	bd80      	pop	{r7, pc}

0800c04c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c04c:	b580      	push	{r7, lr}
 800c04e:	b086      	sub	sp, #24
 800c050:	af00      	add	r7, sp, #0
 800c052:	60f8      	str	r0, [r7, #12]
 800c054:	460b      	mov	r3, r1
 800c056:	607a      	str	r2, [r7, #4]
 800c058:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800c05a:	2300      	movs	r3, #0
 800c05c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800c05e:	7afb      	ldrb	r3, [r7, #11]
 800c060:	2b00      	cmp	r3, #0
 800c062:	d16e      	bne.n	800c142 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800c06a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c072:	2b03      	cmp	r3, #3
 800c074:	f040 8098 	bne.w	800c1a8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800c078:	693b      	ldr	r3, [r7, #16]
 800c07a:	689a      	ldr	r2, [r3, #8]
 800c07c:	693b      	ldr	r3, [r7, #16]
 800c07e:	68db      	ldr	r3, [r3, #12]
 800c080:	429a      	cmp	r2, r3
 800c082:	d913      	bls.n	800c0ac <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800c084:	693b      	ldr	r3, [r7, #16]
 800c086:	689a      	ldr	r2, [r3, #8]
 800c088:	693b      	ldr	r3, [r7, #16]
 800c08a:	68db      	ldr	r3, [r3, #12]
 800c08c:	1ad2      	subs	r2, r2, r3
 800c08e:	693b      	ldr	r3, [r7, #16]
 800c090:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c092:	693b      	ldr	r3, [r7, #16]
 800c094:	68da      	ldr	r2, [r3, #12]
 800c096:	693b      	ldr	r3, [r7, #16]
 800c098:	689b      	ldr	r3, [r3, #8]
 800c09a:	4293      	cmp	r3, r2
 800c09c:	bf28      	it	cs
 800c09e:	4613      	movcs	r3, r2
 800c0a0:	461a      	mov	r2, r3
 800c0a2:	6879      	ldr	r1, [r7, #4]
 800c0a4:	68f8      	ldr	r0, [r7, #12]
 800c0a6:	f001 f984 	bl	800d3b2 <USBD_CtlContinueRx>
 800c0aa:	e07d      	b.n	800c1a8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c0b2:	f003 031f 	and.w	r3, r3, #31
 800c0b6:	2b02      	cmp	r3, #2
 800c0b8:	d014      	beq.n	800c0e4 <USBD_LL_DataOutStage+0x98>
 800c0ba:	2b02      	cmp	r3, #2
 800c0bc:	d81d      	bhi.n	800c0fa <USBD_LL_DataOutStage+0xae>
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d002      	beq.n	800c0c8 <USBD_LL_DataOutStage+0x7c>
 800c0c2:	2b01      	cmp	r3, #1
 800c0c4:	d003      	beq.n	800c0ce <USBD_LL_DataOutStage+0x82>
 800c0c6:	e018      	b.n	800c0fa <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800c0c8:	2300      	movs	r3, #0
 800c0ca:	75bb      	strb	r3, [r7, #22]
            break;
 800c0cc:	e018      	b.n	800c100 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800c0d4:	b2db      	uxtb	r3, r3
 800c0d6:	4619      	mov	r1, r3
 800c0d8:	68f8      	ldr	r0, [r7, #12]
 800c0da:	f000 fa5e 	bl	800c59a <USBD_CoreFindIF>
 800c0de:	4603      	mov	r3, r0
 800c0e0:	75bb      	strb	r3, [r7, #22]
            break;
 800c0e2:	e00d      	b.n	800c100 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800c0ea:	b2db      	uxtb	r3, r3
 800c0ec:	4619      	mov	r1, r3
 800c0ee:	68f8      	ldr	r0, [r7, #12]
 800c0f0:	f000 fa60 	bl	800c5b4 <USBD_CoreFindEP>
 800c0f4:	4603      	mov	r3, r0
 800c0f6:	75bb      	strb	r3, [r7, #22]
            break;
 800c0f8:	e002      	b.n	800c100 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800c0fa:	2300      	movs	r3, #0
 800c0fc:	75bb      	strb	r3, [r7, #22]
            break;
 800c0fe:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800c100:	7dbb      	ldrb	r3, [r7, #22]
 800c102:	2b00      	cmp	r3, #0
 800c104:	d119      	bne.n	800c13a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c10c:	b2db      	uxtb	r3, r3
 800c10e:	2b03      	cmp	r3, #3
 800c110:	d113      	bne.n	800c13a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800c112:	7dba      	ldrb	r2, [r7, #22]
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	32ae      	adds	r2, #174	; 0xae
 800c118:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c11c:	691b      	ldr	r3, [r3, #16]
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d00b      	beq.n	800c13a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800c122:	7dba      	ldrb	r2, [r7, #22]
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800c12a:	7dba      	ldrb	r2, [r7, #22]
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	32ae      	adds	r2, #174	; 0xae
 800c130:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c134:	691b      	ldr	r3, [r3, #16]
 800c136:	68f8      	ldr	r0, [r7, #12]
 800c138:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800c13a:	68f8      	ldr	r0, [r7, #12]
 800c13c:	f001 f94a 	bl	800d3d4 <USBD_CtlSendStatus>
 800c140:	e032      	b.n	800c1a8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800c142:	7afb      	ldrb	r3, [r7, #11]
 800c144:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c148:	b2db      	uxtb	r3, r3
 800c14a:	4619      	mov	r1, r3
 800c14c:	68f8      	ldr	r0, [r7, #12]
 800c14e:	f000 fa31 	bl	800c5b4 <USBD_CoreFindEP>
 800c152:	4603      	mov	r3, r0
 800c154:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c156:	7dbb      	ldrb	r3, [r7, #22]
 800c158:	2bff      	cmp	r3, #255	; 0xff
 800c15a:	d025      	beq.n	800c1a8 <USBD_LL_DataOutStage+0x15c>
 800c15c:	7dbb      	ldrb	r3, [r7, #22]
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d122      	bne.n	800c1a8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c168:	b2db      	uxtb	r3, r3
 800c16a:	2b03      	cmp	r3, #3
 800c16c:	d117      	bne.n	800c19e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800c16e:	7dba      	ldrb	r2, [r7, #22]
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	32ae      	adds	r2, #174	; 0xae
 800c174:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c178:	699b      	ldr	r3, [r3, #24]
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d00f      	beq.n	800c19e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800c17e:	7dba      	ldrb	r2, [r7, #22]
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800c186:	7dba      	ldrb	r2, [r7, #22]
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	32ae      	adds	r2, #174	; 0xae
 800c18c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c190:	699b      	ldr	r3, [r3, #24]
 800c192:	7afa      	ldrb	r2, [r7, #11]
 800c194:	4611      	mov	r1, r2
 800c196:	68f8      	ldr	r0, [r7, #12]
 800c198:	4798      	blx	r3
 800c19a:	4603      	mov	r3, r0
 800c19c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800c19e:	7dfb      	ldrb	r3, [r7, #23]
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d001      	beq.n	800c1a8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800c1a4:	7dfb      	ldrb	r3, [r7, #23]
 800c1a6:	e000      	b.n	800c1aa <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800c1a8:	2300      	movs	r3, #0
}
 800c1aa:	4618      	mov	r0, r3
 800c1ac:	3718      	adds	r7, #24
 800c1ae:	46bd      	mov	sp, r7
 800c1b0:	bd80      	pop	{r7, pc}

0800c1b2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c1b2:	b580      	push	{r7, lr}
 800c1b4:	b086      	sub	sp, #24
 800c1b6:	af00      	add	r7, sp, #0
 800c1b8:	60f8      	str	r0, [r7, #12]
 800c1ba:	460b      	mov	r3, r1
 800c1bc:	607a      	str	r2, [r7, #4]
 800c1be:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800c1c0:	7afb      	ldrb	r3, [r7, #11]
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d16f      	bne.n	800c2a6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	3314      	adds	r3, #20
 800c1ca:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c1d2:	2b02      	cmp	r3, #2
 800c1d4:	d15a      	bne.n	800c28c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800c1d6:	693b      	ldr	r3, [r7, #16]
 800c1d8:	689a      	ldr	r2, [r3, #8]
 800c1da:	693b      	ldr	r3, [r7, #16]
 800c1dc:	68db      	ldr	r3, [r3, #12]
 800c1de:	429a      	cmp	r2, r3
 800c1e0:	d914      	bls.n	800c20c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c1e2:	693b      	ldr	r3, [r7, #16]
 800c1e4:	689a      	ldr	r2, [r3, #8]
 800c1e6:	693b      	ldr	r3, [r7, #16]
 800c1e8:	68db      	ldr	r3, [r3, #12]
 800c1ea:	1ad2      	subs	r2, r2, r3
 800c1ec:	693b      	ldr	r3, [r7, #16]
 800c1ee:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800c1f0:	693b      	ldr	r3, [r7, #16]
 800c1f2:	689b      	ldr	r3, [r3, #8]
 800c1f4:	461a      	mov	r2, r3
 800c1f6:	6879      	ldr	r1, [r7, #4]
 800c1f8:	68f8      	ldr	r0, [r7, #12]
 800c1fa:	f001 f8ac 	bl	800d356 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c1fe:	2300      	movs	r3, #0
 800c200:	2200      	movs	r2, #0
 800c202:	2100      	movs	r1, #0
 800c204:	68f8      	ldr	r0, [r7, #12]
 800c206:	f001 fd05 	bl	800dc14 <USBD_LL_PrepareReceive>
 800c20a:	e03f      	b.n	800c28c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800c20c:	693b      	ldr	r3, [r7, #16]
 800c20e:	68da      	ldr	r2, [r3, #12]
 800c210:	693b      	ldr	r3, [r7, #16]
 800c212:	689b      	ldr	r3, [r3, #8]
 800c214:	429a      	cmp	r2, r3
 800c216:	d11c      	bne.n	800c252 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800c218:	693b      	ldr	r3, [r7, #16]
 800c21a:	685a      	ldr	r2, [r3, #4]
 800c21c:	693b      	ldr	r3, [r7, #16]
 800c21e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800c220:	429a      	cmp	r2, r3
 800c222:	d316      	bcc.n	800c252 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800c224:	693b      	ldr	r3, [r7, #16]
 800c226:	685a      	ldr	r2, [r3, #4]
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c22e:	429a      	cmp	r2, r3
 800c230:	d20f      	bcs.n	800c252 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c232:	2200      	movs	r2, #0
 800c234:	2100      	movs	r1, #0
 800c236:	68f8      	ldr	r0, [r7, #12]
 800c238:	f001 f88d 	bl	800d356 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	2200      	movs	r2, #0
 800c240:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c244:	2300      	movs	r3, #0
 800c246:	2200      	movs	r2, #0
 800c248:	2100      	movs	r1, #0
 800c24a:	68f8      	ldr	r0, [r7, #12]
 800c24c:	f001 fce2 	bl	800dc14 <USBD_LL_PrepareReceive>
 800c250:	e01c      	b.n	800c28c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c258:	b2db      	uxtb	r3, r3
 800c25a:	2b03      	cmp	r3, #3
 800c25c:	d10f      	bne.n	800c27e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c264:	68db      	ldr	r3, [r3, #12]
 800c266:	2b00      	cmp	r3, #0
 800c268:	d009      	beq.n	800c27e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	2200      	movs	r2, #0
 800c26e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c278:	68db      	ldr	r3, [r3, #12]
 800c27a:	68f8      	ldr	r0, [r7, #12]
 800c27c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c27e:	2180      	movs	r1, #128	; 0x80
 800c280:	68f8      	ldr	r0, [r7, #12]
 800c282:	f001 fc1d 	bl	800dac0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c286:	68f8      	ldr	r0, [r7, #12]
 800c288:	f001 f8b7 	bl	800d3fa <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800c292:	2b00      	cmp	r3, #0
 800c294:	d03a      	beq.n	800c30c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800c296:	68f8      	ldr	r0, [r7, #12]
 800c298:	f7ff fe42 	bl	800bf20 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	2200      	movs	r2, #0
 800c2a0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800c2a4:	e032      	b.n	800c30c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800c2a6:	7afb      	ldrb	r3, [r7, #11]
 800c2a8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c2ac:	b2db      	uxtb	r3, r3
 800c2ae:	4619      	mov	r1, r3
 800c2b0:	68f8      	ldr	r0, [r7, #12]
 800c2b2:	f000 f97f 	bl	800c5b4 <USBD_CoreFindEP>
 800c2b6:	4603      	mov	r3, r0
 800c2b8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c2ba:	7dfb      	ldrb	r3, [r7, #23]
 800c2bc:	2bff      	cmp	r3, #255	; 0xff
 800c2be:	d025      	beq.n	800c30c <USBD_LL_DataInStage+0x15a>
 800c2c0:	7dfb      	ldrb	r3, [r7, #23]
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d122      	bne.n	800c30c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c2cc:	b2db      	uxtb	r3, r3
 800c2ce:	2b03      	cmp	r3, #3
 800c2d0:	d11c      	bne.n	800c30c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800c2d2:	7dfa      	ldrb	r2, [r7, #23]
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	32ae      	adds	r2, #174	; 0xae
 800c2d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c2dc:	695b      	ldr	r3, [r3, #20]
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d014      	beq.n	800c30c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800c2e2:	7dfa      	ldrb	r2, [r7, #23]
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800c2ea:	7dfa      	ldrb	r2, [r7, #23]
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	32ae      	adds	r2, #174	; 0xae
 800c2f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c2f4:	695b      	ldr	r3, [r3, #20]
 800c2f6:	7afa      	ldrb	r2, [r7, #11]
 800c2f8:	4611      	mov	r1, r2
 800c2fa:	68f8      	ldr	r0, [r7, #12]
 800c2fc:	4798      	blx	r3
 800c2fe:	4603      	mov	r3, r0
 800c300:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800c302:	7dbb      	ldrb	r3, [r7, #22]
 800c304:	2b00      	cmp	r3, #0
 800c306:	d001      	beq.n	800c30c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800c308:	7dbb      	ldrb	r3, [r7, #22]
 800c30a:	e000      	b.n	800c30e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800c30c:	2300      	movs	r3, #0
}
 800c30e:	4618      	mov	r0, r3
 800c310:	3718      	adds	r7, #24
 800c312:	46bd      	mov	sp, r7
 800c314:	bd80      	pop	{r7, pc}

0800c316 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c316:	b580      	push	{r7, lr}
 800c318:	b084      	sub	sp, #16
 800c31a:	af00      	add	r7, sp, #0
 800c31c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800c31e:	2300      	movs	r3, #0
 800c320:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	2201      	movs	r2, #1
 800c326:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	2200      	movs	r2, #0
 800c32e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	2200      	movs	r2, #0
 800c336:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	2200      	movs	r2, #0
 800c33c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	2200      	movs	r2, #0
 800c344:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d014      	beq.n	800c37c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c358:	685b      	ldr	r3, [r3, #4]
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d00e      	beq.n	800c37c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c364:	685b      	ldr	r3, [r3, #4]
 800c366:	687a      	ldr	r2, [r7, #4]
 800c368:	6852      	ldr	r2, [r2, #4]
 800c36a:	b2d2      	uxtb	r2, r2
 800c36c:	4611      	mov	r1, r2
 800c36e:	6878      	ldr	r0, [r7, #4]
 800c370:	4798      	blx	r3
 800c372:	4603      	mov	r3, r0
 800c374:	2b00      	cmp	r3, #0
 800c376:	d001      	beq.n	800c37c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800c378:	2303      	movs	r3, #3
 800c37a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c37c:	2340      	movs	r3, #64	; 0x40
 800c37e:	2200      	movs	r2, #0
 800c380:	2100      	movs	r1, #0
 800c382:	6878      	ldr	r0, [r7, #4]
 800c384:	f001 fb57 	bl	800da36 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	2201      	movs	r2, #1
 800c38c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	2240      	movs	r2, #64	; 0x40
 800c394:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c398:	2340      	movs	r3, #64	; 0x40
 800c39a:	2200      	movs	r2, #0
 800c39c:	2180      	movs	r1, #128	; 0x80
 800c39e:	6878      	ldr	r0, [r7, #4]
 800c3a0:	f001 fb49 	bl	800da36 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	2201      	movs	r2, #1
 800c3a8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	2240      	movs	r2, #64	; 0x40
 800c3ae:	621a      	str	r2, [r3, #32]

  return ret;
 800c3b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3b2:	4618      	mov	r0, r3
 800c3b4:	3710      	adds	r7, #16
 800c3b6:	46bd      	mov	sp, r7
 800c3b8:	bd80      	pop	{r7, pc}

0800c3ba <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c3ba:	b480      	push	{r7}
 800c3bc:	b083      	sub	sp, #12
 800c3be:	af00      	add	r7, sp, #0
 800c3c0:	6078      	str	r0, [r7, #4]
 800c3c2:	460b      	mov	r3, r1
 800c3c4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	78fa      	ldrb	r2, [r7, #3]
 800c3ca:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c3cc:	2300      	movs	r3, #0
}
 800c3ce:	4618      	mov	r0, r3
 800c3d0:	370c      	adds	r7, #12
 800c3d2:	46bd      	mov	sp, r7
 800c3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3d8:	4770      	bx	lr

0800c3da <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c3da:	b480      	push	{r7}
 800c3dc:	b083      	sub	sp, #12
 800c3de:	af00      	add	r7, sp, #0
 800c3e0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c3e8:	b2da      	uxtb	r2, r3
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	2204      	movs	r2, #4
 800c3f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800c3f8:	2300      	movs	r3, #0
}
 800c3fa:	4618      	mov	r0, r3
 800c3fc:	370c      	adds	r7, #12
 800c3fe:	46bd      	mov	sp, r7
 800c400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c404:	4770      	bx	lr

0800c406 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c406:	b480      	push	{r7}
 800c408:	b083      	sub	sp, #12
 800c40a:	af00      	add	r7, sp, #0
 800c40c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c414:	b2db      	uxtb	r3, r3
 800c416:	2b04      	cmp	r3, #4
 800c418:	d106      	bne.n	800c428 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800c420:	b2da      	uxtb	r2, r3
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800c428:	2300      	movs	r3, #0
}
 800c42a:	4618      	mov	r0, r3
 800c42c:	370c      	adds	r7, #12
 800c42e:	46bd      	mov	sp, r7
 800c430:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c434:	4770      	bx	lr

0800c436 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c436:	b580      	push	{r7, lr}
 800c438:	b082      	sub	sp, #8
 800c43a:	af00      	add	r7, sp, #0
 800c43c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c444:	b2db      	uxtb	r3, r3
 800c446:	2b03      	cmp	r3, #3
 800c448:	d110      	bne.n	800c46c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c450:	2b00      	cmp	r3, #0
 800c452:	d00b      	beq.n	800c46c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c45a:	69db      	ldr	r3, [r3, #28]
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d005      	beq.n	800c46c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c466:	69db      	ldr	r3, [r3, #28]
 800c468:	6878      	ldr	r0, [r7, #4]
 800c46a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800c46c:	2300      	movs	r3, #0
}
 800c46e:	4618      	mov	r0, r3
 800c470:	3708      	adds	r7, #8
 800c472:	46bd      	mov	sp, r7
 800c474:	bd80      	pop	{r7, pc}

0800c476 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800c476:	b580      	push	{r7, lr}
 800c478:	b082      	sub	sp, #8
 800c47a:	af00      	add	r7, sp, #0
 800c47c:	6078      	str	r0, [r7, #4]
 800c47e:	460b      	mov	r3, r1
 800c480:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	32ae      	adds	r2, #174	; 0xae
 800c48c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c490:	2b00      	cmp	r3, #0
 800c492:	d101      	bne.n	800c498 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800c494:	2303      	movs	r3, #3
 800c496:	e01c      	b.n	800c4d2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c49e:	b2db      	uxtb	r3, r3
 800c4a0:	2b03      	cmp	r3, #3
 800c4a2:	d115      	bne.n	800c4d0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	32ae      	adds	r2, #174	; 0xae
 800c4ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c4b2:	6a1b      	ldr	r3, [r3, #32]
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d00b      	beq.n	800c4d0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	32ae      	adds	r2, #174	; 0xae
 800c4c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c4c6:	6a1b      	ldr	r3, [r3, #32]
 800c4c8:	78fa      	ldrb	r2, [r7, #3]
 800c4ca:	4611      	mov	r1, r2
 800c4cc:	6878      	ldr	r0, [r7, #4]
 800c4ce:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c4d0:	2300      	movs	r3, #0
}
 800c4d2:	4618      	mov	r0, r3
 800c4d4:	3708      	adds	r7, #8
 800c4d6:	46bd      	mov	sp, r7
 800c4d8:	bd80      	pop	{r7, pc}

0800c4da <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800c4da:	b580      	push	{r7, lr}
 800c4dc:	b082      	sub	sp, #8
 800c4de:	af00      	add	r7, sp, #0
 800c4e0:	6078      	str	r0, [r7, #4]
 800c4e2:	460b      	mov	r3, r1
 800c4e4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	32ae      	adds	r2, #174	; 0xae
 800c4f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d101      	bne.n	800c4fc <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800c4f8:	2303      	movs	r3, #3
 800c4fa:	e01c      	b.n	800c536 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c502:	b2db      	uxtb	r3, r3
 800c504:	2b03      	cmp	r3, #3
 800c506:	d115      	bne.n	800c534 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	32ae      	adds	r2, #174	; 0xae
 800c512:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d00b      	beq.n	800c534 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	32ae      	adds	r2, #174	; 0xae
 800c526:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c52a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c52c:	78fa      	ldrb	r2, [r7, #3]
 800c52e:	4611      	mov	r1, r2
 800c530:	6878      	ldr	r0, [r7, #4]
 800c532:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c534:	2300      	movs	r3, #0
}
 800c536:	4618      	mov	r0, r3
 800c538:	3708      	adds	r7, #8
 800c53a:	46bd      	mov	sp, r7
 800c53c:	bd80      	pop	{r7, pc}

0800c53e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800c53e:	b480      	push	{r7}
 800c540:	b083      	sub	sp, #12
 800c542:	af00      	add	r7, sp, #0
 800c544:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c546:	2300      	movs	r3, #0
}
 800c548:	4618      	mov	r0, r3
 800c54a:	370c      	adds	r7, #12
 800c54c:	46bd      	mov	sp, r7
 800c54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c552:	4770      	bx	lr

0800c554 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800c554:	b580      	push	{r7, lr}
 800c556:	b084      	sub	sp, #16
 800c558:	af00      	add	r7, sp, #0
 800c55a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800c55c:	2300      	movs	r3, #0
 800c55e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	2201      	movs	r2, #1
 800c564:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d00e      	beq.n	800c590 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c578:	685b      	ldr	r3, [r3, #4]
 800c57a:	687a      	ldr	r2, [r7, #4]
 800c57c:	6852      	ldr	r2, [r2, #4]
 800c57e:	b2d2      	uxtb	r2, r2
 800c580:	4611      	mov	r1, r2
 800c582:	6878      	ldr	r0, [r7, #4]
 800c584:	4798      	blx	r3
 800c586:	4603      	mov	r3, r0
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d001      	beq.n	800c590 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800c58c:	2303      	movs	r3, #3
 800c58e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c590:	7bfb      	ldrb	r3, [r7, #15]
}
 800c592:	4618      	mov	r0, r3
 800c594:	3710      	adds	r7, #16
 800c596:	46bd      	mov	sp, r7
 800c598:	bd80      	pop	{r7, pc}

0800c59a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c59a:	b480      	push	{r7}
 800c59c:	b083      	sub	sp, #12
 800c59e:	af00      	add	r7, sp, #0
 800c5a0:	6078      	str	r0, [r7, #4]
 800c5a2:	460b      	mov	r3, r1
 800c5a4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c5a6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c5a8:	4618      	mov	r0, r3
 800c5aa:	370c      	adds	r7, #12
 800c5ac:	46bd      	mov	sp, r7
 800c5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5b2:	4770      	bx	lr

0800c5b4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c5b4:	b480      	push	{r7}
 800c5b6:	b083      	sub	sp, #12
 800c5b8:	af00      	add	r7, sp, #0
 800c5ba:	6078      	str	r0, [r7, #4]
 800c5bc:	460b      	mov	r3, r1
 800c5be:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c5c0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c5c2:	4618      	mov	r0, r3
 800c5c4:	370c      	adds	r7, #12
 800c5c6:	46bd      	mov	sp, r7
 800c5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5cc:	4770      	bx	lr

0800c5ce <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800c5ce:	b580      	push	{r7, lr}
 800c5d0:	b086      	sub	sp, #24
 800c5d2:	af00      	add	r7, sp, #0
 800c5d4:	6078      	str	r0, [r7, #4]
 800c5d6:	460b      	mov	r3, r1
 800c5d8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800c5e2:	2300      	movs	r3, #0
 800c5e4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	885b      	ldrh	r3, [r3, #2]
 800c5ea:	b29a      	uxth	r2, r3
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	781b      	ldrb	r3, [r3, #0]
 800c5f0:	b29b      	uxth	r3, r3
 800c5f2:	429a      	cmp	r2, r3
 800c5f4:	d920      	bls.n	800c638 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	781b      	ldrb	r3, [r3, #0]
 800c5fa:	b29b      	uxth	r3, r3
 800c5fc:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800c5fe:	e013      	b.n	800c628 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800c600:	f107 030a 	add.w	r3, r7, #10
 800c604:	4619      	mov	r1, r3
 800c606:	6978      	ldr	r0, [r7, #20]
 800c608:	f000 f81b 	bl	800c642 <USBD_GetNextDesc>
 800c60c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800c60e:	697b      	ldr	r3, [r7, #20]
 800c610:	785b      	ldrb	r3, [r3, #1]
 800c612:	2b05      	cmp	r3, #5
 800c614:	d108      	bne.n	800c628 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800c616:	697b      	ldr	r3, [r7, #20]
 800c618:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800c61a:	693b      	ldr	r3, [r7, #16]
 800c61c:	789b      	ldrb	r3, [r3, #2]
 800c61e:	78fa      	ldrb	r2, [r7, #3]
 800c620:	429a      	cmp	r2, r3
 800c622:	d008      	beq.n	800c636 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800c624:	2300      	movs	r3, #0
 800c626:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	885b      	ldrh	r3, [r3, #2]
 800c62c:	b29a      	uxth	r2, r3
 800c62e:	897b      	ldrh	r3, [r7, #10]
 800c630:	429a      	cmp	r2, r3
 800c632:	d8e5      	bhi.n	800c600 <USBD_GetEpDesc+0x32>
 800c634:	e000      	b.n	800c638 <USBD_GetEpDesc+0x6a>
          break;
 800c636:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800c638:	693b      	ldr	r3, [r7, #16]
}
 800c63a:	4618      	mov	r0, r3
 800c63c:	3718      	adds	r7, #24
 800c63e:	46bd      	mov	sp, r7
 800c640:	bd80      	pop	{r7, pc}

0800c642 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800c642:	b480      	push	{r7}
 800c644:	b085      	sub	sp, #20
 800c646:	af00      	add	r7, sp, #0
 800c648:	6078      	str	r0, [r7, #4]
 800c64a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800c650:	683b      	ldr	r3, [r7, #0]
 800c652:	881a      	ldrh	r2, [r3, #0]
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	781b      	ldrb	r3, [r3, #0]
 800c658:	b29b      	uxth	r3, r3
 800c65a:	4413      	add	r3, r2
 800c65c:	b29a      	uxth	r2, r3
 800c65e:	683b      	ldr	r3, [r7, #0]
 800c660:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	781b      	ldrb	r3, [r3, #0]
 800c666:	461a      	mov	r2, r3
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	4413      	add	r3, r2
 800c66c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800c66e:	68fb      	ldr	r3, [r7, #12]
}
 800c670:	4618      	mov	r0, r3
 800c672:	3714      	adds	r7, #20
 800c674:	46bd      	mov	sp, r7
 800c676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c67a:	4770      	bx	lr

0800c67c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c67c:	b480      	push	{r7}
 800c67e:	b087      	sub	sp, #28
 800c680:	af00      	add	r7, sp, #0
 800c682:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c688:	697b      	ldr	r3, [r7, #20]
 800c68a:	781b      	ldrb	r3, [r3, #0]
 800c68c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c68e:	697b      	ldr	r3, [r7, #20]
 800c690:	3301      	adds	r3, #1
 800c692:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c694:	697b      	ldr	r3, [r7, #20]
 800c696:	781b      	ldrb	r3, [r3, #0]
 800c698:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c69a:	8a3b      	ldrh	r3, [r7, #16]
 800c69c:	021b      	lsls	r3, r3, #8
 800c69e:	b21a      	sxth	r2, r3
 800c6a0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c6a4:	4313      	orrs	r3, r2
 800c6a6:	b21b      	sxth	r3, r3
 800c6a8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c6aa:	89fb      	ldrh	r3, [r7, #14]
}
 800c6ac:	4618      	mov	r0, r3
 800c6ae:	371c      	adds	r7, #28
 800c6b0:	46bd      	mov	sp, r7
 800c6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6b6:	4770      	bx	lr

0800c6b8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c6b8:	b580      	push	{r7, lr}
 800c6ba:	b084      	sub	sp, #16
 800c6bc:	af00      	add	r7, sp, #0
 800c6be:	6078      	str	r0, [r7, #4]
 800c6c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c6c2:	2300      	movs	r3, #0
 800c6c4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c6c6:	683b      	ldr	r3, [r7, #0]
 800c6c8:	781b      	ldrb	r3, [r3, #0]
 800c6ca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c6ce:	2b40      	cmp	r3, #64	; 0x40
 800c6d0:	d005      	beq.n	800c6de <USBD_StdDevReq+0x26>
 800c6d2:	2b40      	cmp	r3, #64	; 0x40
 800c6d4:	d857      	bhi.n	800c786 <USBD_StdDevReq+0xce>
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d00f      	beq.n	800c6fa <USBD_StdDevReq+0x42>
 800c6da:	2b20      	cmp	r3, #32
 800c6dc:	d153      	bne.n	800c786 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	32ae      	adds	r2, #174	; 0xae
 800c6e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c6ec:	689b      	ldr	r3, [r3, #8]
 800c6ee:	6839      	ldr	r1, [r7, #0]
 800c6f0:	6878      	ldr	r0, [r7, #4]
 800c6f2:	4798      	blx	r3
 800c6f4:	4603      	mov	r3, r0
 800c6f6:	73fb      	strb	r3, [r7, #15]
      break;
 800c6f8:	e04a      	b.n	800c790 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c6fa:	683b      	ldr	r3, [r7, #0]
 800c6fc:	785b      	ldrb	r3, [r3, #1]
 800c6fe:	2b09      	cmp	r3, #9
 800c700:	d83b      	bhi.n	800c77a <USBD_StdDevReq+0xc2>
 800c702:	a201      	add	r2, pc, #4	; (adr r2, 800c708 <USBD_StdDevReq+0x50>)
 800c704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c708:	0800c75d 	.word	0x0800c75d
 800c70c:	0800c771 	.word	0x0800c771
 800c710:	0800c77b 	.word	0x0800c77b
 800c714:	0800c767 	.word	0x0800c767
 800c718:	0800c77b 	.word	0x0800c77b
 800c71c:	0800c73b 	.word	0x0800c73b
 800c720:	0800c731 	.word	0x0800c731
 800c724:	0800c77b 	.word	0x0800c77b
 800c728:	0800c753 	.word	0x0800c753
 800c72c:	0800c745 	.word	0x0800c745
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c730:	6839      	ldr	r1, [r7, #0]
 800c732:	6878      	ldr	r0, [r7, #4]
 800c734:	f000 fa3c 	bl	800cbb0 <USBD_GetDescriptor>
          break;
 800c738:	e024      	b.n	800c784 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c73a:	6839      	ldr	r1, [r7, #0]
 800c73c:	6878      	ldr	r0, [r7, #4]
 800c73e:	f000 fba1 	bl	800ce84 <USBD_SetAddress>
          break;
 800c742:	e01f      	b.n	800c784 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800c744:	6839      	ldr	r1, [r7, #0]
 800c746:	6878      	ldr	r0, [r7, #4]
 800c748:	f000 fbe0 	bl	800cf0c <USBD_SetConfig>
 800c74c:	4603      	mov	r3, r0
 800c74e:	73fb      	strb	r3, [r7, #15]
          break;
 800c750:	e018      	b.n	800c784 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c752:	6839      	ldr	r1, [r7, #0]
 800c754:	6878      	ldr	r0, [r7, #4]
 800c756:	f000 fc83 	bl	800d060 <USBD_GetConfig>
          break;
 800c75a:	e013      	b.n	800c784 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c75c:	6839      	ldr	r1, [r7, #0]
 800c75e:	6878      	ldr	r0, [r7, #4]
 800c760:	f000 fcb4 	bl	800d0cc <USBD_GetStatus>
          break;
 800c764:	e00e      	b.n	800c784 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c766:	6839      	ldr	r1, [r7, #0]
 800c768:	6878      	ldr	r0, [r7, #4]
 800c76a:	f000 fce3 	bl	800d134 <USBD_SetFeature>
          break;
 800c76e:	e009      	b.n	800c784 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c770:	6839      	ldr	r1, [r7, #0]
 800c772:	6878      	ldr	r0, [r7, #4]
 800c774:	f000 fd07 	bl	800d186 <USBD_ClrFeature>
          break;
 800c778:	e004      	b.n	800c784 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800c77a:	6839      	ldr	r1, [r7, #0]
 800c77c:	6878      	ldr	r0, [r7, #4]
 800c77e:	f000 fd5e 	bl	800d23e <USBD_CtlError>
          break;
 800c782:	bf00      	nop
      }
      break;
 800c784:	e004      	b.n	800c790 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800c786:	6839      	ldr	r1, [r7, #0]
 800c788:	6878      	ldr	r0, [r7, #4]
 800c78a:	f000 fd58 	bl	800d23e <USBD_CtlError>
      break;
 800c78e:	bf00      	nop
  }

  return ret;
 800c790:	7bfb      	ldrb	r3, [r7, #15]
}
 800c792:	4618      	mov	r0, r3
 800c794:	3710      	adds	r7, #16
 800c796:	46bd      	mov	sp, r7
 800c798:	bd80      	pop	{r7, pc}
 800c79a:	bf00      	nop

0800c79c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c79c:	b580      	push	{r7, lr}
 800c79e:	b084      	sub	sp, #16
 800c7a0:	af00      	add	r7, sp, #0
 800c7a2:	6078      	str	r0, [r7, #4]
 800c7a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c7a6:	2300      	movs	r3, #0
 800c7a8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c7aa:	683b      	ldr	r3, [r7, #0]
 800c7ac:	781b      	ldrb	r3, [r3, #0]
 800c7ae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c7b2:	2b40      	cmp	r3, #64	; 0x40
 800c7b4:	d005      	beq.n	800c7c2 <USBD_StdItfReq+0x26>
 800c7b6:	2b40      	cmp	r3, #64	; 0x40
 800c7b8:	d852      	bhi.n	800c860 <USBD_StdItfReq+0xc4>
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d001      	beq.n	800c7c2 <USBD_StdItfReq+0x26>
 800c7be:	2b20      	cmp	r3, #32
 800c7c0:	d14e      	bne.n	800c860 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c7c8:	b2db      	uxtb	r3, r3
 800c7ca:	3b01      	subs	r3, #1
 800c7cc:	2b02      	cmp	r3, #2
 800c7ce:	d840      	bhi.n	800c852 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c7d0:	683b      	ldr	r3, [r7, #0]
 800c7d2:	889b      	ldrh	r3, [r3, #4]
 800c7d4:	b2db      	uxtb	r3, r3
 800c7d6:	2b01      	cmp	r3, #1
 800c7d8:	d836      	bhi.n	800c848 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800c7da:	683b      	ldr	r3, [r7, #0]
 800c7dc:	889b      	ldrh	r3, [r3, #4]
 800c7de:	b2db      	uxtb	r3, r3
 800c7e0:	4619      	mov	r1, r3
 800c7e2:	6878      	ldr	r0, [r7, #4]
 800c7e4:	f7ff fed9 	bl	800c59a <USBD_CoreFindIF>
 800c7e8:	4603      	mov	r3, r0
 800c7ea:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c7ec:	7bbb      	ldrb	r3, [r7, #14]
 800c7ee:	2bff      	cmp	r3, #255	; 0xff
 800c7f0:	d01d      	beq.n	800c82e <USBD_StdItfReq+0x92>
 800c7f2:	7bbb      	ldrb	r3, [r7, #14]
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d11a      	bne.n	800c82e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800c7f8:	7bba      	ldrb	r2, [r7, #14]
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	32ae      	adds	r2, #174	; 0xae
 800c7fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c802:	689b      	ldr	r3, [r3, #8]
 800c804:	2b00      	cmp	r3, #0
 800c806:	d00f      	beq.n	800c828 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800c808:	7bba      	ldrb	r2, [r7, #14]
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c810:	7bba      	ldrb	r2, [r7, #14]
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	32ae      	adds	r2, #174	; 0xae
 800c816:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c81a:	689b      	ldr	r3, [r3, #8]
 800c81c:	6839      	ldr	r1, [r7, #0]
 800c81e:	6878      	ldr	r0, [r7, #4]
 800c820:	4798      	blx	r3
 800c822:	4603      	mov	r3, r0
 800c824:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c826:	e004      	b.n	800c832 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800c828:	2303      	movs	r3, #3
 800c82a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c82c:	e001      	b.n	800c832 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800c82e:	2303      	movs	r3, #3
 800c830:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c832:	683b      	ldr	r3, [r7, #0]
 800c834:	88db      	ldrh	r3, [r3, #6]
 800c836:	2b00      	cmp	r3, #0
 800c838:	d110      	bne.n	800c85c <USBD_StdItfReq+0xc0>
 800c83a:	7bfb      	ldrb	r3, [r7, #15]
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d10d      	bne.n	800c85c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800c840:	6878      	ldr	r0, [r7, #4]
 800c842:	f000 fdc7 	bl	800d3d4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c846:	e009      	b.n	800c85c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800c848:	6839      	ldr	r1, [r7, #0]
 800c84a:	6878      	ldr	r0, [r7, #4]
 800c84c:	f000 fcf7 	bl	800d23e <USBD_CtlError>
          break;
 800c850:	e004      	b.n	800c85c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800c852:	6839      	ldr	r1, [r7, #0]
 800c854:	6878      	ldr	r0, [r7, #4]
 800c856:	f000 fcf2 	bl	800d23e <USBD_CtlError>
          break;
 800c85a:	e000      	b.n	800c85e <USBD_StdItfReq+0xc2>
          break;
 800c85c:	bf00      	nop
      }
      break;
 800c85e:	e004      	b.n	800c86a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800c860:	6839      	ldr	r1, [r7, #0]
 800c862:	6878      	ldr	r0, [r7, #4]
 800c864:	f000 fceb 	bl	800d23e <USBD_CtlError>
      break;
 800c868:	bf00      	nop
  }

  return ret;
 800c86a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c86c:	4618      	mov	r0, r3
 800c86e:	3710      	adds	r7, #16
 800c870:	46bd      	mov	sp, r7
 800c872:	bd80      	pop	{r7, pc}

0800c874 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c874:	b580      	push	{r7, lr}
 800c876:	b084      	sub	sp, #16
 800c878:	af00      	add	r7, sp, #0
 800c87a:	6078      	str	r0, [r7, #4]
 800c87c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800c87e:	2300      	movs	r3, #0
 800c880:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800c882:	683b      	ldr	r3, [r7, #0]
 800c884:	889b      	ldrh	r3, [r3, #4]
 800c886:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c888:	683b      	ldr	r3, [r7, #0]
 800c88a:	781b      	ldrb	r3, [r3, #0]
 800c88c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c890:	2b40      	cmp	r3, #64	; 0x40
 800c892:	d007      	beq.n	800c8a4 <USBD_StdEPReq+0x30>
 800c894:	2b40      	cmp	r3, #64	; 0x40
 800c896:	f200 817f 	bhi.w	800cb98 <USBD_StdEPReq+0x324>
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d02a      	beq.n	800c8f4 <USBD_StdEPReq+0x80>
 800c89e:	2b20      	cmp	r3, #32
 800c8a0:	f040 817a 	bne.w	800cb98 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800c8a4:	7bbb      	ldrb	r3, [r7, #14]
 800c8a6:	4619      	mov	r1, r3
 800c8a8:	6878      	ldr	r0, [r7, #4]
 800c8aa:	f7ff fe83 	bl	800c5b4 <USBD_CoreFindEP>
 800c8ae:	4603      	mov	r3, r0
 800c8b0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c8b2:	7b7b      	ldrb	r3, [r7, #13]
 800c8b4:	2bff      	cmp	r3, #255	; 0xff
 800c8b6:	f000 8174 	beq.w	800cba2 <USBD_StdEPReq+0x32e>
 800c8ba:	7b7b      	ldrb	r3, [r7, #13]
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	f040 8170 	bne.w	800cba2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800c8c2:	7b7a      	ldrb	r2, [r7, #13]
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800c8ca:	7b7a      	ldrb	r2, [r7, #13]
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	32ae      	adds	r2, #174	; 0xae
 800c8d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c8d4:	689b      	ldr	r3, [r3, #8]
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	f000 8163 	beq.w	800cba2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800c8dc:	7b7a      	ldrb	r2, [r7, #13]
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	32ae      	adds	r2, #174	; 0xae
 800c8e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c8e6:	689b      	ldr	r3, [r3, #8]
 800c8e8:	6839      	ldr	r1, [r7, #0]
 800c8ea:	6878      	ldr	r0, [r7, #4]
 800c8ec:	4798      	blx	r3
 800c8ee:	4603      	mov	r3, r0
 800c8f0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800c8f2:	e156      	b.n	800cba2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c8f4:	683b      	ldr	r3, [r7, #0]
 800c8f6:	785b      	ldrb	r3, [r3, #1]
 800c8f8:	2b03      	cmp	r3, #3
 800c8fa:	d008      	beq.n	800c90e <USBD_StdEPReq+0x9a>
 800c8fc:	2b03      	cmp	r3, #3
 800c8fe:	f300 8145 	bgt.w	800cb8c <USBD_StdEPReq+0x318>
 800c902:	2b00      	cmp	r3, #0
 800c904:	f000 809b 	beq.w	800ca3e <USBD_StdEPReq+0x1ca>
 800c908:	2b01      	cmp	r3, #1
 800c90a:	d03c      	beq.n	800c986 <USBD_StdEPReq+0x112>
 800c90c:	e13e      	b.n	800cb8c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c914:	b2db      	uxtb	r3, r3
 800c916:	2b02      	cmp	r3, #2
 800c918:	d002      	beq.n	800c920 <USBD_StdEPReq+0xac>
 800c91a:	2b03      	cmp	r3, #3
 800c91c:	d016      	beq.n	800c94c <USBD_StdEPReq+0xd8>
 800c91e:	e02c      	b.n	800c97a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c920:	7bbb      	ldrb	r3, [r7, #14]
 800c922:	2b00      	cmp	r3, #0
 800c924:	d00d      	beq.n	800c942 <USBD_StdEPReq+0xce>
 800c926:	7bbb      	ldrb	r3, [r7, #14]
 800c928:	2b80      	cmp	r3, #128	; 0x80
 800c92a:	d00a      	beq.n	800c942 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c92c:	7bbb      	ldrb	r3, [r7, #14]
 800c92e:	4619      	mov	r1, r3
 800c930:	6878      	ldr	r0, [r7, #4]
 800c932:	f001 f8c5 	bl	800dac0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c936:	2180      	movs	r1, #128	; 0x80
 800c938:	6878      	ldr	r0, [r7, #4]
 800c93a:	f001 f8c1 	bl	800dac0 <USBD_LL_StallEP>
 800c93e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c940:	e020      	b.n	800c984 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800c942:	6839      	ldr	r1, [r7, #0]
 800c944:	6878      	ldr	r0, [r7, #4]
 800c946:	f000 fc7a 	bl	800d23e <USBD_CtlError>
              break;
 800c94a:	e01b      	b.n	800c984 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c94c:	683b      	ldr	r3, [r7, #0]
 800c94e:	885b      	ldrh	r3, [r3, #2]
 800c950:	2b00      	cmp	r3, #0
 800c952:	d10e      	bne.n	800c972 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c954:	7bbb      	ldrb	r3, [r7, #14]
 800c956:	2b00      	cmp	r3, #0
 800c958:	d00b      	beq.n	800c972 <USBD_StdEPReq+0xfe>
 800c95a:	7bbb      	ldrb	r3, [r7, #14]
 800c95c:	2b80      	cmp	r3, #128	; 0x80
 800c95e:	d008      	beq.n	800c972 <USBD_StdEPReq+0xfe>
 800c960:	683b      	ldr	r3, [r7, #0]
 800c962:	88db      	ldrh	r3, [r3, #6]
 800c964:	2b00      	cmp	r3, #0
 800c966:	d104      	bne.n	800c972 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c968:	7bbb      	ldrb	r3, [r7, #14]
 800c96a:	4619      	mov	r1, r3
 800c96c:	6878      	ldr	r0, [r7, #4]
 800c96e:	f001 f8a7 	bl	800dac0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c972:	6878      	ldr	r0, [r7, #4]
 800c974:	f000 fd2e 	bl	800d3d4 <USBD_CtlSendStatus>

              break;
 800c978:	e004      	b.n	800c984 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800c97a:	6839      	ldr	r1, [r7, #0]
 800c97c:	6878      	ldr	r0, [r7, #4]
 800c97e:	f000 fc5e 	bl	800d23e <USBD_CtlError>
              break;
 800c982:	bf00      	nop
          }
          break;
 800c984:	e107      	b.n	800cb96 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c98c:	b2db      	uxtb	r3, r3
 800c98e:	2b02      	cmp	r3, #2
 800c990:	d002      	beq.n	800c998 <USBD_StdEPReq+0x124>
 800c992:	2b03      	cmp	r3, #3
 800c994:	d016      	beq.n	800c9c4 <USBD_StdEPReq+0x150>
 800c996:	e04b      	b.n	800ca30 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c998:	7bbb      	ldrb	r3, [r7, #14]
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d00d      	beq.n	800c9ba <USBD_StdEPReq+0x146>
 800c99e:	7bbb      	ldrb	r3, [r7, #14]
 800c9a0:	2b80      	cmp	r3, #128	; 0x80
 800c9a2:	d00a      	beq.n	800c9ba <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c9a4:	7bbb      	ldrb	r3, [r7, #14]
 800c9a6:	4619      	mov	r1, r3
 800c9a8:	6878      	ldr	r0, [r7, #4]
 800c9aa:	f001 f889 	bl	800dac0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c9ae:	2180      	movs	r1, #128	; 0x80
 800c9b0:	6878      	ldr	r0, [r7, #4]
 800c9b2:	f001 f885 	bl	800dac0 <USBD_LL_StallEP>
 800c9b6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c9b8:	e040      	b.n	800ca3c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800c9ba:	6839      	ldr	r1, [r7, #0]
 800c9bc:	6878      	ldr	r0, [r7, #4]
 800c9be:	f000 fc3e 	bl	800d23e <USBD_CtlError>
              break;
 800c9c2:	e03b      	b.n	800ca3c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c9c4:	683b      	ldr	r3, [r7, #0]
 800c9c6:	885b      	ldrh	r3, [r3, #2]
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d136      	bne.n	800ca3a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c9cc:	7bbb      	ldrb	r3, [r7, #14]
 800c9ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d004      	beq.n	800c9e0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c9d6:	7bbb      	ldrb	r3, [r7, #14]
 800c9d8:	4619      	mov	r1, r3
 800c9da:	6878      	ldr	r0, [r7, #4]
 800c9dc:	f001 f88f 	bl	800dafe <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c9e0:	6878      	ldr	r0, [r7, #4]
 800c9e2:	f000 fcf7 	bl	800d3d4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800c9e6:	7bbb      	ldrb	r3, [r7, #14]
 800c9e8:	4619      	mov	r1, r3
 800c9ea:	6878      	ldr	r0, [r7, #4]
 800c9ec:	f7ff fde2 	bl	800c5b4 <USBD_CoreFindEP>
 800c9f0:	4603      	mov	r3, r0
 800c9f2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c9f4:	7b7b      	ldrb	r3, [r7, #13]
 800c9f6:	2bff      	cmp	r3, #255	; 0xff
 800c9f8:	d01f      	beq.n	800ca3a <USBD_StdEPReq+0x1c6>
 800c9fa:	7b7b      	ldrb	r3, [r7, #13]
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d11c      	bne.n	800ca3a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800ca00:	7b7a      	ldrb	r2, [r7, #13]
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800ca08:	7b7a      	ldrb	r2, [r7, #13]
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	32ae      	adds	r2, #174	; 0xae
 800ca0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca12:	689b      	ldr	r3, [r3, #8]
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d010      	beq.n	800ca3a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ca18:	7b7a      	ldrb	r2, [r7, #13]
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	32ae      	adds	r2, #174	; 0xae
 800ca1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca22:	689b      	ldr	r3, [r3, #8]
 800ca24:	6839      	ldr	r1, [r7, #0]
 800ca26:	6878      	ldr	r0, [r7, #4]
 800ca28:	4798      	blx	r3
 800ca2a:	4603      	mov	r3, r0
 800ca2c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800ca2e:	e004      	b.n	800ca3a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800ca30:	6839      	ldr	r1, [r7, #0]
 800ca32:	6878      	ldr	r0, [r7, #4]
 800ca34:	f000 fc03 	bl	800d23e <USBD_CtlError>
              break;
 800ca38:	e000      	b.n	800ca3c <USBD_StdEPReq+0x1c8>
              break;
 800ca3a:	bf00      	nop
          }
          break;
 800ca3c:	e0ab      	b.n	800cb96 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ca44:	b2db      	uxtb	r3, r3
 800ca46:	2b02      	cmp	r3, #2
 800ca48:	d002      	beq.n	800ca50 <USBD_StdEPReq+0x1dc>
 800ca4a:	2b03      	cmp	r3, #3
 800ca4c:	d032      	beq.n	800cab4 <USBD_StdEPReq+0x240>
 800ca4e:	e097      	b.n	800cb80 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ca50:	7bbb      	ldrb	r3, [r7, #14]
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d007      	beq.n	800ca66 <USBD_StdEPReq+0x1f2>
 800ca56:	7bbb      	ldrb	r3, [r7, #14]
 800ca58:	2b80      	cmp	r3, #128	; 0x80
 800ca5a:	d004      	beq.n	800ca66 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800ca5c:	6839      	ldr	r1, [r7, #0]
 800ca5e:	6878      	ldr	r0, [r7, #4]
 800ca60:	f000 fbed 	bl	800d23e <USBD_CtlError>
                break;
 800ca64:	e091      	b.n	800cb8a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ca66:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	da0b      	bge.n	800ca86 <USBD_StdEPReq+0x212>
 800ca6e:	7bbb      	ldrb	r3, [r7, #14]
 800ca70:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ca74:	4613      	mov	r3, r2
 800ca76:	009b      	lsls	r3, r3, #2
 800ca78:	4413      	add	r3, r2
 800ca7a:	009b      	lsls	r3, r3, #2
 800ca7c:	3310      	adds	r3, #16
 800ca7e:	687a      	ldr	r2, [r7, #4]
 800ca80:	4413      	add	r3, r2
 800ca82:	3304      	adds	r3, #4
 800ca84:	e00b      	b.n	800ca9e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ca86:	7bbb      	ldrb	r3, [r7, #14]
 800ca88:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ca8c:	4613      	mov	r3, r2
 800ca8e:	009b      	lsls	r3, r3, #2
 800ca90:	4413      	add	r3, r2
 800ca92:	009b      	lsls	r3, r3, #2
 800ca94:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ca98:	687a      	ldr	r2, [r7, #4]
 800ca9a:	4413      	add	r3, r2
 800ca9c:	3304      	adds	r3, #4
 800ca9e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800caa0:	68bb      	ldr	r3, [r7, #8]
 800caa2:	2200      	movs	r2, #0
 800caa4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800caa6:	68bb      	ldr	r3, [r7, #8]
 800caa8:	2202      	movs	r2, #2
 800caaa:	4619      	mov	r1, r3
 800caac:	6878      	ldr	r0, [r7, #4]
 800caae:	f000 fc37 	bl	800d320 <USBD_CtlSendData>
              break;
 800cab2:	e06a      	b.n	800cb8a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800cab4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cab8:	2b00      	cmp	r3, #0
 800caba:	da11      	bge.n	800cae0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800cabc:	7bbb      	ldrb	r3, [r7, #14]
 800cabe:	f003 020f 	and.w	r2, r3, #15
 800cac2:	6879      	ldr	r1, [r7, #4]
 800cac4:	4613      	mov	r3, r2
 800cac6:	009b      	lsls	r3, r3, #2
 800cac8:	4413      	add	r3, r2
 800caca:	009b      	lsls	r3, r3, #2
 800cacc:	440b      	add	r3, r1
 800cace:	3324      	adds	r3, #36	; 0x24
 800cad0:	881b      	ldrh	r3, [r3, #0]
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d117      	bne.n	800cb06 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800cad6:	6839      	ldr	r1, [r7, #0]
 800cad8:	6878      	ldr	r0, [r7, #4]
 800cada:	f000 fbb0 	bl	800d23e <USBD_CtlError>
                  break;
 800cade:	e054      	b.n	800cb8a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800cae0:	7bbb      	ldrb	r3, [r7, #14]
 800cae2:	f003 020f 	and.w	r2, r3, #15
 800cae6:	6879      	ldr	r1, [r7, #4]
 800cae8:	4613      	mov	r3, r2
 800caea:	009b      	lsls	r3, r3, #2
 800caec:	4413      	add	r3, r2
 800caee:	009b      	lsls	r3, r3, #2
 800caf0:	440b      	add	r3, r1
 800caf2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800caf6:	881b      	ldrh	r3, [r3, #0]
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	d104      	bne.n	800cb06 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800cafc:	6839      	ldr	r1, [r7, #0]
 800cafe:	6878      	ldr	r0, [r7, #4]
 800cb00:	f000 fb9d 	bl	800d23e <USBD_CtlError>
                  break;
 800cb04:	e041      	b.n	800cb8a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cb06:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	da0b      	bge.n	800cb26 <USBD_StdEPReq+0x2b2>
 800cb0e:	7bbb      	ldrb	r3, [r7, #14]
 800cb10:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cb14:	4613      	mov	r3, r2
 800cb16:	009b      	lsls	r3, r3, #2
 800cb18:	4413      	add	r3, r2
 800cb1a:	009b      	lsls	r3, r3, #2
 800cb1c:	3310      	adds	r3, #16
 800cb1e:	687a      	ldr	r2, [r7, #4]
 800cb20:	4413      	add	r3, r2
 800cb22:	3304      	adds	r3, #4
 800cb24:	e00b      	b.n	800cb3e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800cb26:	7bbb      	ldrb	r3, [r7, #14]
 800cb28:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cb2c:	4613      	mov	r3, r2
 800cb2e:	009b      	lsls	r3, r3, #2
 800cb30:	4413      	add	r3, r2
 800cb32:	009b      	lsls	r3, r3, #2
 800cb34:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800cb38:	687a      	ldr	r2, [r7, #4]
 800cb3a:	4413      	add	r3, r2
 800cb3c:	3304      	adds	r3, #4
 800cb3e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800cb40:	7bbb      	ldrb	r3, [r7, #14]
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d002      	beq.n	800cb4c <USBD_StdEPReq+0x2d8>
 800cb46:	7bbb      	ldrb	r3, [r7, #14]
 800cb48:	2b80      	cmp	r3, #128	; 0x80
 800cb4a:	d103      	bne.n	800cb54 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800cb4c:	68bb      	ldr	r3, [r7, #8]
 800cb4e:	2200      	movs	r2, #0
 800cb50:	601a      	str	r2, [r3, #0]
 800cb52:	e00e      	b.n	800cb72 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800cb54:	7bbb      	ldrb	r3, [r7, #14]
 800cb56:	4619      	mov	r1, r3
 800cb58:	6878      	ldr	r0, [r7, #4]
 800cb5a:	f000 ffef 	bl	800db3c <USBD_LL_IsStallEP>
 800cb5e:	4603      	mov	r3, r0
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d003      	beq.n	800cb6c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800cb64:	68bb      	ldr	r3, [r7, #8]
 800cb66:	2201      	movs	r2, #1
 800cb68:	601a      	str	r2, [r3, #0]
 800cb6a:	e002      	b.n	800cb72 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800cb6c:	68bb      	ldr	r3, [r7, #8]
 800cb6e:	2200      	movs	r2, #0
 800cb70:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800cb72:	68bb      	ldr	r3, [r7, #8]
 800cb74:	2202      	movs	r2, #2
 800cb76:	4619      	mov	r1, r3
 800cb78:	6878      	ldr	r0, [r7, #4]
 800cb7a:	f000 fbd1 	bl	800d320 <USBD_CtlSendData>
              break;
 800cb7e:	e004      	b.n	800cb8a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800cb80:	6839      	ldr	r1, [r7, #0]
 800cb82:	6878      	ldr	r0, [r7, #4]
 800cb84:	f000 fb5b 	bl	800d23e <USBD_CtlError>
              break;
 800cb88:	bf00      	nop
          }
          break;
 800cb8a:	e004      	b.n	800cb96 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800cb8c:	6839      	ldr	r1, [r7, #0]
 800cb8e:	6878      	ldr	r0, [r7, #4]
 800cb90:	f000 fb55 	bl	800d23e <USBD_CtlError>
          break;
 800cb94:	bf00      	nop
      }
      break;
 800cb96:	e005      	b.n	800cba4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800cb98:	6839      	ldr	r1, [r7, #0]
 800cb9a:	6878      	ldr	r0, [r7, #4]
 800cb9c:	f000 fb4f 	bl	800d23e <USBD_CtlError>
      break;
 800cba0:	e000      	b.n	800cba4 <USBD_StdEPReq+0x330>
      break;
 800cba2:	bf00      	nop
  }

  return ret;
 800cba4:	7bfb      	ldrb	r3, [r7, #15]
}
 800cba6:	4618      	mov	r0, r3
 800cba8:	3710      	adds	r7, #16
 800cbaa:	46bd      	mov	sp, r7
 800cbac:	bd80      	pop	{r7, pc}
	...

0800cbb0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cbb0:	b580      	push	{r7, lr}
 800cbb2:	b084      	sub	sp, #16
 800cbb4:	af00      	add	r7, sp, #0
 800cbb6:	6078      	str	r0, [r7, #4]
 800cbb8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800cbba:	2300      	movs	r3, #0
 800cbbc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800cbbe:	2300      	movs	r3, #0
 800cbc0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800cbc2:	2300      	movs	r3, #0
 800cbc4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800cbc6:	683b      	ldr	r3, [r7, #0]
 800cbc8:	885b      	ldrh	r3, [r3, #2]
 800cbca:	0a1b      	lsrs	r3, r3, #8
 800cbcc:	b29b      	uxth	r3, r3
 800cbce:	3b01      	subs	r3, #1
 800cbd0:	2b06      	cmp	r3, #6
 800cbd2:	f200 8128 	bhi.w	800ce26 <USBD_GetDescriptor+0x276>
 800cbd6:	a201      	add	r2, pc, #4	; (adr r2, 800cbdc <USBD_GetDescriptor+0x2c>)
 800cbd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbdc:	0800cbf9 	.word	0x0800cbf9
 800cbe0:	0800cc11 	.word	0x0800cc11
 800cbe4:	0800cc51 	.word	0x0800cc51
 800cbe8:	0800ce27 	.word	0x0800ce27
 800cbec:	0800ce27 	.word	0x0800ce27
 800cbf0:	0800cdc7 	.word	0x0800cdc7
 800cbf4:	0800cdf3 	.word	0x0800cdf3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	687a      	ldr	r2, [r7, #4]
 800cc02:	7c12      	ldrb	r2, [r2, #16]
 800cc04:	f107 0108 	add.w	r1, r7, #8
 800cc08:	4610      	mov	r0, r2
 800cc0a:	4798      	blx	r3
 800cc0c:	60f8      	str	r0, [r7, #12]
      break;
 800cc0e:	e112      	b.n	800ce36 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	7c1b      	ldrb	r3, [r3, #16]
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d10d      	bne.n	800cc34 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cc1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc20:	f107 0208 	add.w	r2, r7, #8
 800cc24:	4610      	mov	r0, r2
 800cc26:	4798      	blx	r3
 800cc28:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	3301      	adds	r3, #1
 800cc2e:	2202      	movs	r2, #2
 800cc30:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800cc32:	e100      	b.n	800ce36 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cc3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc3c:	f107 0208 	add.w	r2, r7, #8
 800cc40:	4610      	mov	r0, r2
 800cc42:	4798      	blx	r3
 800cc44:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	3301      	adds	r3, #1
 800cc4a:	2202      	movs	r2, #2
 800cc4c:	701a      	strb	r2, [r3, #0]
      break;
 800cc4e:	e0f2      	b.n	800ce36 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800cc50:	683b      	ldr	r3, [r7, #0]
 800cc52:	885b      	ldrh	r3, [r3, #2]
 800cc54:	b2db      	uxtb	r3, r3
 800cc56:	2b05      	cmp	r3, #5
 800cc58:	f200 80ac 	bhi.w	800cdb4 <USBD_GetDescriptor+0x204>
 800cc5c:	a201      	add	r2, pc, #4	; (adr r2, 800cc64 <USBD_GetDescriptor+0xb4>)
 800cc5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc62:	bf00      	nop
 800cc64:	0800cc7d 	.word	0x0800cc7d
 800cc68:	0800ccb1 	.word	0x0800ccb1
 800cc6c:	0800cce5 	.word	0x0800cce5
 800cc70:	0800cd19 	.word	0x0800cd19
 800cc74:	0800cd4d 	.word	0x0800cd4d
 800cc78:	0800cd81 	.word	0x0800cd81
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cc82:	685b      	ldr	r3, [r3, #4]
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d00b      	beq.n	800cca0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cc8e:	685b      	ldr	r3, [r3, #4]
 800cc90:	687a      	ldr	r2, [r7, #4]
 800cc92:	7c12      	ldrb	r2, [r2, #16]
 800cc94:	f107 0108 	add.w	r1, r7, #8
 800cc98:	4610      	mov	r0, r2
 800cc9a:	4798      	blx	r3
 800cc9c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cc9e:	e091      	b.n	800cdc4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cca0:	6839      	ldr	r1, [r7, #0]
 800cca2:	6878      	ldr	r0, [r7, #4]
 800cca4:	f000 facb 	bl	800d23e <USBD_CtlError>
            err++;
 800cca8:	7afb      	ldrb	r3, [r7, #11]
 800ccaa:	3301      	adds	r3, #1
 800ccac:	72fb      	strb	r3, [r7, #11]
          break;
 800ccae:	e089      	b.n	800cdc4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ccb6:	689b      	ldr	r3, [r3, #8]
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d00b      	beq.n	800ccd4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ccc2:	689b      	ldr	r3, [r3, #8]
 800ccc4:	687a      	ldr	r2, [r7, #4]
 800ccc6:	7c12      	ldrb	r2, [r2, #16]
 800ccc8:	f107 0108 	add.w	r1, r7, #8
 800cccc:	4610      	mov	r0, r2
 800ccce:	4798      	blx	r3
 800ccd0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ccd2:	e077      	b.n	800cdc4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ccd4:	6839      	ldr	r1, [r7, #0]
 800ccd6:	6878      	ldr	r0, [r7, #4]
 800ccd8:	f000 fab1 	bl	800d23e <USBD_CtlError>
            err++;
 800ccdc:	7afb      	ldrb	r3, [r7, #11]
 800ccde:	3301      	adds	r3, #1
 800cce0:	72fb      	strb	r3, [r7, #11]
          break;
 800cce2:	e06f      	b.n	800cdc4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ccea:	68db      	ldr	r3, [r3, #12]
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d00b      	beq.n	800cd08 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ccf6:	68db      	ldr	r3, [r3, #12]
 800ccf8:	687a      	ldr	r2, [r7, #4]
 800ccfa:	7c12      	ldrb	r2, [r2, #16]
 800ccfc:	f107 0108 	add.w	r1, r7, #8
 800cd00:	4610      	mov	r0, r2
 800cd02:	4798      	blx	r3
 800cd04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cd06:	e05d      	b.n	800cdc4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cd08:	6839      	ldr	r1, [r7, #0]
 800cd0a:	6878      	ldr	r0, [r7, #4]
 800cd0c:	f000 fa97 	bl	800d23e <USBD_CtlError>
            err++;
 800cd10:	7afb      	ldrb	r3, [r7, #11]
 800cd12:	3301      	adds	r3, #1
 800cd14:	72fb      	strb	r3, [r7, #11]
          break;
 800cd16:	e055      	b.n	800cdc4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cd1e:	691b      	ldr	r3, [r3, #16]
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d00b      	beq.n	800cd3c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cd2a:	691b      	ldr	r3, [r3, #16]
 800cd2c:	687a      	ldr	r2, [r7, #4]
 800cd2e:	7c12      	ldrb	r2, [r2, #16]
 800cd30:	f107 0108 	add.w	r1, r7, #8
 800cd34:	4610      	mov	r0, r2
 800cd36:	4798      	blx	r3
 800cd38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cd3a:	e043      	b.n	800cdc4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cd3c:	6839      	ldr	r1, [r7, #0]
 800cd3e:	6878      	ldr	r0, [r7, #4]
 800cd40:	f000 fa7d 	bl	800d23e <USBD_CtlError>
            err++;
 800cd44:	7afb      	ldrb	r3, [r7, #11]
 800cd46:	3301      	adds	r3, #1
 800cd48:	72fb      	strb	r3, [r7, #11]
          break;
 800cd4a:	e03b      	b.n	800cdc4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cd52:	695b      	ldr	r3, [r3, #20]
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d00b      	beq.n	800cd70 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cd5e:	695b      	ldr	r3, [r3, #20]
 800cd60:	687a      	ldr	r2, [r7, #4]
 800cd62:	7c12      	ldrb	r2, [r2, #16]
 800cd64:	f107 0108 	add.w	r1, r7, #8
 800cd68:	4610      	mov	r0, r2
 800cd6a:	4798      	blx	r3
 800cd6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cd6e:	e029      	b.n	800cdc4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cd70:	6839      	ldr	r1, [r7, #0]
 800cd72:	6878      	ldr	r0, [r7, #4]
 800cd74:	f000 fa63 	bl	800d23e <USBD_CtlError>
            err++;
 800cd78:	7afb      	ldrb	r3, [r7, #11]
 800cd7a:	3301      	adds	r3, #1
 800cd7c:	72fb      	strb	r3, [r7, #11]
          break;
 800cd7e:	e021      	b.n	800cdc4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cd86:	699b      	ldr	r3, [r3, #24]
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d00b      	beq.n	800cda4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cd92:	699b      	ldr	r3, [r3, #24]
 800cd94:	687a      	ldr	r2, [r7, #4]
 800cd96:	7c12      	ldrb	r2, [r2, #16]
 800cd98:	f107 0108 	add.w	r1, r7, #8
 800cd9c:	4610      	mov	r0, r2
 800cd9e:	4798      	blx	r3
 800cda0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cda2:	e00f      	b.n	800cdc4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cda4:	6839      	ldr	r1, [r7, #0]
 800cda6:	6878      	ldr	r0, [r7, #4]
 800cda8:	f000 fa49 	bl	800d23e <USBD_CtlError>
            err++;
 800cdac:	7afb      	ldrb	r3, [r7, #11]
 800cdae:	3301      	adds	r3, #1
 800cdb0:	72fb      	strb	r3, [r7, #11]
          break;
 800cdb2:	e007      	b.n	800cdc4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800cdb4:	6839      	ldr	r1, [r7, #0]
 800cdb6:	6878      	ldr	r0, [r7, #4]
 800cdb8:	f000 fa41 	bl	800d23e <USBD_CtlError>
          err++;
 800cdbc:	7afb      	ldrb	r3, [r7, #11]
 800cdbe:	3301      	adds	r3, #1
 800cdc0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800cdc2:	bf00      	nop
      }
      break;
 800cdc4:	e037      	b.n	800ce36 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	7c1b      	ldrb	r3, [r3, #16]
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d109      	bne.n	800cde2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cdd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cdd6:	f107 0208 	add.w	r2, r7, #8
 800cdda:	4610      	mov	r0, r2
 800cddc:	4798      	blx	r3
 800cdde:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cde0:	e029      	b.n	800ce36 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800cde2:	6839      	ldr	r1, [r7, #0]
 800cde4:	6878      	ldr	r0, [r7, #4]
 800cde6:	f000 fa2a 	bl	800d23e <USBD_CtlError>
        err++;
 800cdea:	7afb      	ldrb	r3, [r7, #11]
 800cdec:	3301      	adds	r3, #1
 800cdee:	72fb      	strb	r3, [r7, #11]
      break;
 800cdf0:	e021      	b.n	800ce36 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	7c1b      	ldrb	r3, [r3, #16]
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d10d      	bne.n	800ce16 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ce00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce02:	f107 0208 	add.w	r2, r7, #8
 800ce06:	4610      	mov	r0, r2
 800ce08:	4798      	blx	r3
 800ce0a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	3301      	adds	r3, #1
 800ce10:	2207      	movs	r2, #7
 800ce12:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ce14:	e00f      	b.n	800ce36 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ce16:	6839      	ldr	r1, [r7, #0]
 800ce18:	6878      	ldr	r0, [r7, #4]
 800ce1a:	f000 fa10 	bl	800d23e <USBD_CtlError>
        err++;
 800ce1e:	7afb      	ldrb	r3, [r7, #11]
 800ce20:	3301      	adds	r3, #1
 800ce22:	72fb      	strb	r3, [r7, #11]
      break;
 800ce24:	e007      	b.n	800ce36 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800ce26:	6839      	ldr	r1, [r7, #0]
 800ce28:	6878      	ldr	r0, [r7, #4]
 800ce2a:	f000 fa08 	bl	800d23e <USBD_CtlError>
      err++;
 800ce2e:	7afb      	ldrb	r3, [r7, #11]
 800ce30:	3301      	adds	r3, #1
 800ce32:	72fb      	strb	r3, [r7, #11]
      break;
 800ce34:	bf00      	nop
  }

  if (err != 0U)
 800ce36:	7afb      	ldrb	r3, [r7, #11]
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d11e      	bne.n	800ce7a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800ce3c:	683b      	ldr	r3, [r7, #0]
 800ce3e:	88db      	ldrh	r3, [r3, #6]
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d016      	beq.n	800ce72 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800ce44:	893b      	ldrh	r3, [r7, #8]
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d00e      	beq.n	800ce68 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800ce4a:	683b      	ldr	r3, [r7, #0]
 800ce4c:	88da      	ldrh	r2, [r3, #6]
 800ce4e:	893b      	ldrh	r3, [r7, #8]
 800ce50:	4293      	cmp	r3, r2
 800ce52:	bf28      	it	cs
 800ce54:	4613      	movcs	r3, r2
 800ce56:	b29b      	uxth	r3, r3
 800ce58:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ce5a:	893b      	ldrh	r3, [r7, #8]
 800ce5c:	461a      	mov	r2, r3
 800ce5e:	68f9      	ldr	r1, [r7, #12]
 800ce60:	6878      	ldr	r0, [r7, #4]
 800ce62:	f000 fa5d 	bl	800d320 <USBD_CtlSendData>
 800ce66:	e009      	b.n	800ce7c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800ce68:	6839      	ldr	r1, [r7, #0]
 800ce6a:	6878      	ldr	r0, [r7, #4]
 800ce6c:	f000 f9e7 	bl	800d23e <USBD_CtlError>
 800ce70:	e004      	b.n	800ce7c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800ce72:	6878      	ldr	r0, [r7, #4]
 800ce74:	f000 faae 	bl	800d3d4 <USBD_CtlSendStatus>
 800ce78:	e000      	b.n	800ce7c <USBD_GetDescriptor+0x2cc>
    return;
 800ce7a:	bf00      	nop
  }
}
 800ce7c:	3710      	adds	r7, #16
 800ce7e:	46bd      	mov	sp, r7
 800ce80:	bd80      	pop	{r7, pc}
 800ce82:	bf00      	nop

0800ce84 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ce84:	b580      	push	{r7, lr}
 800ce86:	b084      	sub	sp, #16
 800ce88:	af00      	add	r7, sp, #0
 800ce8a:	6078      	str	r0, [r7, #4]
 800ce8c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ce8e:	683b      	ldr	r3, [r7, #0]
 800ce90:	889b      	ldrh	r3, [r3, #4]
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d131      	bne.n	800cefa <USBD_SetAddress+0x76>
 800ce96:	683b      	ldr	r3, [r7, #0]
 800ce98:	88db      	ldrh	r3, [r3, #6]
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d12d      	bne.n	800cefa <USBD_SetAddress+0x76>
 800ce9e:	683b      	ldr	r3, [r7, #0]
 800cea0:	885b      	ldrh	r3, [r3, #2]
 800cea2:	2b7f      	cmp	r3, #127	; 0x7f
 800cea4:	d829      	bhi.n	800cefa <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800cea6:	683b      	ldr	r3, [r7, #0]
 800cea8:	885b      	ldrh	r3, [r3, #2]
 800ceaa:	b2db      	uxtb	r3, r3
 800ceac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ceb0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ceb8:	b2db      	uxtb	r3, r3
 800ceba:	2b03      	cmp	r3, #3
 800cebc:	d104      	bne.n	800cec8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800cebe:	6839      	ldr	r1, [r7, #0]
 800cec0:	6878      	ldr	r0, [r7, #4]
 800cec2:	f000 f9bc 	bl	800d23e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cec6:	e01d      	b.n	800cf04 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	7bfa      	ldrb	r2, [r7, #15]
 800cecc:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ced0:	7bfb      	ldrb	r3, [r7, #15]
 800ced2:	4619      	mov	r1, r3
 800ced4:	6878      	ldr	r0, [r7, #4]
 800ced6:	f000 fe5d 	bl	800db94 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800ceda:	6878      	ldr	r0, [r7, #4]
 800cedc:	f000 fa7a 	bl	800d3d4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800cee0:	7bfb      	ldrb	r3, [r7, #15]
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d004      	beq.n	800cef0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	2202      	movs	r2, #2
 800ceea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ceee:	e009      	b.n	800cf04 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	2201      	movs	r2, #1
 800cef4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cef8:	e004      	b.n	800cf04 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800cefa:	6839      	ldr	r1, [r7, #0]
 800cefc:	6878      	ldr	r0, [r7, #4]
 800cefe:	f000 f99e 	bl	800d23e <USBD_CtlError>
  }
}
 800cf02:	bf00      	nop
 800cf04:	bf00      	nop
 800cf06:	3710      	adds	r7, #16
 800cf08:	46bd      	mov	sp, r7
 800cf0a:	bd80      	pop	{r7, pc}

0800cf0c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cf0c:	b580      	push	{r7, lr}
 800cf0e:	b084      	sub	sp, #16
 800cf10:	af00      	add	r7, sp, #0
 800cf12:	6078      	str	r0, [r7, #4]
 800cf14:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cf16:	2300      	movs	r3, #0
 800cf18:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800cf1a:	683b      	ldr	r3, [r7, #0]
 800cf1c:	885b      	ldrh	r3, [r3, #2]
 800cf1e:	b2da      	uxtb	r2, r3
 800cf20:	4b4e      	ldr	r3, [pc, #312]	; (800d05c <USBD_SetConfig+0x150>)
 800cf22:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800cf24:	4b4d      	ldr	r3, [pc, #308]	; (800d05c <USBD_SetConfig+0x150>)
 800cf26:	781b      	ldrb	r3, [r3, #0]
 800cf28:	2b01      	cmp	r3, #1
 800cf2a:	d905      	bls.n	800cf38 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800cf2c:	6839      	ldr	r1, [r7, #0]
 800cf2e:	6878      	ldr	r0, [r7, #4]
 800cf30:	f000 f985 	bl	800d23e <USBD_CtlError>
    return USBD_FAIL;
 800cf34:	2303      	movs	r3, #3
 800cf36:	e08c      	b.n	800d052 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cf3e:	b2db      	uxtb	r3, r3
 800cf40:	2b02      	cmp	r3, #2
 800cf42:	d002      	beq.n	800cf4a <USBD_SetConfig+0x3e>
 800cf44:	2b03      	cmp	r3, #3
 800cf46:	d029      	beq.n	800cf9c <USBD_SetConfig+0x90>
 800cf48:	e075      	b.n	800d036 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800cf4a:	4b44      	ldr	r3, [pc, #272]	; (800d05c <USBD_SetConfig+0x150>)
 800cf4c:	781b      	ldrb	r3, [r3, #0]
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d020      	beq.n	800cf94 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800cf52:	4b42      	ldr	r3, [pc, #264]	; (800d05c <USBD_SetConfig+0x150>)
 800cf54:	781b      	ldrb	r3, [r3, #0]
 800cf56:	461a      	mov	r2, r3
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800cf5c:	4b3f      	ldr	r3, [pc, #252]	; (800d05c <USBD_SetConfig+0x150>)
 800cf5e:	781b      	ldrb	r3, [r3, #0]
 800cf60:	4619      	mov	r1, r3
 800cf62:	6878      	ldr	r0, [r7, #4]
 800cf64:	f7fe ffe7 	bl	800bf36 <USBD_SetClassConfig>
 800cf68:	4603      	mov	r3, r0
 800cf6a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800cf6c:	7bfb      	ldrb	r3, [r7, #15]
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d008      	beq.n	800cf84 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800cf72:	6839      	ldr	r1, [r7, #0]
 800cf74:	6878      	ldr	r0, [r7, #4]
 800cf76:	f000 f962 	bl	800d23e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	2202      	movs	r2, #2
 800cf7e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800cf82:	e065      	b.n	800d050 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800cf84:	6878      	ldr	r0, [r7, #4]
 800cf86:	f000 fa25 	bl	800d3d4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	2203      	movs	r2, #3
 800cf8e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800cf92:	e05d      	b.n	800d050 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800cf94:	6878      	ldr	r0, [r7, #4]
 800cf96:	f000 fa1d 	bl	800d3d4 <USBD_CtlSendStatus>
      break;
 800cf9a:	e059      	b.n	800d050 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800cf9c:	4b2f      	ldr	r3, [pc, #188]	; (800d05c <USBD_SetConfig+0x150>)
 800cf9e:	781b      	ldrb	r3, [r3, #0]
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d112      	bne.n	800cfca <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	2202      	movs	r2, #2
 800cfa8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800cfac:	4b2b      	ldr	r3, [pc, #172]	; (800d05c <USBD_SetConfig+0x150>)
 800cfae:	781b      	ldrb	r3, [r3, #0]
 800cfb0:	461a      	mov	r2, r3
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800cfb6:	4b29      	ldr	r3, [pc, #164]	; (800d05c <USBD_SetConfig+0x150>)
 800cfb8:	781b      	ldrb	r3, [r3, #0]
 800cfba:	4619      	mov	r1, r3
 800cfbc:	6878      	ldr	r0, [r7, #4]
 800cfbe:	f7fe ffd6 	bl	800bf6e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800cfc2:	6878      	ldr	r0, [r7, #4]
 800cfc4:	f000 fa06 	bl	800d3d4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800cfc8:	e042      	b.n	800d050 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800cfca:	4b24      	ldr	r3, [pc, #144]	; (800d05c <USBD_SetConfig+0x150>)
 800cfcc:	781b      	ldrb	r3, [r3, #0]
 800cfce:	461a      	mov	r2, r3
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	685b      	ldr	r3, [r3, #4]
 800cfd4:	429a      	cmp	r2, r3
 800cfd6:	d02a      	beq.n	800d02e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	685b      	ldr	r3, [r3, #4]
 800cfdc:	b2db      	uxtb	r3, r3
 800cfde:	4619      	mov	r1, r3
 800cfe0:	6878      	ldr	r0, [r7, #4]
 800cfe2:	f7fe ffc4 	bl	800bf6e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800cfe6:	4b1d      	ldr	r3, [pc, #116]	; (800d05c <USBD_SetConfig+0x150>)
 800cfe8:	781b      	ldrb	r3, [r3, #0]
 800cfea:	461a      	mov	r2, r3
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800cff0:	4b1a      	ldr	r3, [pc, #104]	; (800d05c <USBD_SetConfig+0x150>)
 800cff2:	781b      	ldrb	r3, [r3, #0]
 800cff4:	4619      	mov	r1, r3
 800cff6:	6878      	ldr	r0, [r7, #4]
 800cff8:	f7fe ff9d 	bl	800bf36 <USBD_SetClassConfig>
 800cffc:	4603      	mov	r3, r0
 800cffe:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800d000:	7bfb      	ldrb	r3, [r7, #15]
 800d002:	2b00      	cmp	r3, #0
 800d004:	d00f      	beq.n	800d026 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800d006:	6839      	ldr	r1, [r7, #0]
 800d008:	6878      	ldr	r0, [r7, #4]
 800d00a:	f000 f918 	bl	800d23e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	685b      	ldr	r3, [r3, #4]
 800d012:	b2db      	uxtb	r3, r3
 800d014:	4619      	mov	r1, r3
 800d016:	6878      	ldr	r0, [r7, #4]
 800d018:	f7fe ffa9 	bl	800bf6e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	2202      	movs	r2, #2
 800d020:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800d024:	e014      	b.n	800d050 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d026:	6878      	ldr	r0, [r7, #4]
 800d028:	f000 f9d4 	bl	800d3d4 <USBD_CtlSendStatus>
      break;
 800d02c:	e010      	b.n	800d050 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d02e:	6878      	ldr	r0, [r7, #4]
 800d030:	f000 f9d0 	bl	800d3d4 <USBD_CtlSendStatus>
      break;
 800d034:	e00c      	b.n	800d050 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800d036:	6839      	ldr	r1, [r7, #0]
 800d038:	6878      	ldr	r0, [r7, #4]
 800d03a:	f000 f900 	bl	800d23e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d03e:	4b07      	ldr	r3, [pc, #28]	; (800d05c <USBD_SetConfig+0x150>)
 800d040:	781b      	ldrb	r3, [r3, #0]
 800d042:	4619      	mov	r1, r3
 800d044:	6878      	ldr	r0, [r7, #4]
 800d046:	f7fe ff92 	bl	800bf6e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800d04a:	2303      	movs	r3, #3
 800d04c:	73fb      	strb	r3, [r7, #15]
      break;
 800d04e:	bf00      	nop
  }

  return ret;
 800d050:	7bfb      	ldrb	r3, [r7, #15]
}
 800d052:	4618      	mov	r0, r3
 800d054:	3710      	adds	r7, #16
 800d056:	46bd      	mov	sp, r7
 800d058:	bd80      	pop	{r7, pc}
 800d05a:	bf00      	nop
 800d05c:	200011d8 	.word	0x200011d8

0800d060 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d060:	b580      	push	{r7, lr}
 800d062:	b082      	sub	sp, #8
 800d064:	af00      	add	r7, sp, #0
 800d066:	6078      	str	r0, [r7, #4]
 800d068:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d06a:	683b      	ldr	r3, [r7, #0]
 800d06c:	88db      	ldrh	r3, [r3, #6]
 800d06e:	2b01      	cmp	r3, #1
 800d070:	d004      	beq.n	800d07c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800d072:	6839      	ldr	r1, [r7, #0]
 800d074:	6878      	ldr	r0, [r7, #4]
 800d076:	f000 f8e2 	bl	800d23e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800d07a:	e023      	b.n	800d0c4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d082:	b2db      	uxtb	r3, r3
 800d084:	2b02      	cmp	r3, #2
 800d086:	dc02      	bgt.n	800d08e <USBD_GetConfig+0x2e>
 800d088:	2b00      	cmp	r3, #0
 800d08a:	dc03      	bgt.n	800d094 <USBD_GetConfig+0x34>
 800d08c:	e015      	b.n	800d0ba <USBD_GetConfig+0x5a>
 800d08e:	2b03      	cmp	r3, #3
 800d090:	d00b      	beq.n	800d0aa <USBD_GetConfig+0x4a>
 800d092:	e012      	b.n	800d0ba <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	2200      	movs	r2, #0
 800d098:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	3308      	adds	r3, #8
 800d09e:	2201      	movs	r2, #1
 800d0a0:	4619      	mov	r1, r3
 800d0a2:	6878      	ldr	r0, [r7, #4]
 800d0a4:	f000 f93c 	bl	800d320 <USBD_CtlSendData>
        break;
 800d0a8:	e00c      	b.n	800d0c4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	3304      	adds	r3, #4
 800d0ae:	2201      	movs	r2, #1
 800d0b0:	4619      	mov	r1, r3
 800d0b2:	6878      	ldr	r0, [r7, #4]
 800d0b4:	f000 f934 	bl	800d320 <USBD_CtlSendData>
        break;
 800d0b8:	e004      	b.n	800d0c4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800d0ba:	6839      	ldr	r1, [r7, #0]
 800d0bc:	6878      	ldr	r0, [r7, #4]
 800d0be:	f000 f8be 	bl	800d23e <USBD_CtlError>
        break;
 800d0c2:	bf00      	nop
}
 800d0c4:	bf00      	nop
 800d0c6:	3708      	adds	r7, #8
 800d0c8:	46bd      	mov	sp, r7
 800d0ca:	bd80      	pop	{r7, pc}

0800d0cc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d0cc:	b580      	push	{r7, lr}
 800d0ce:	b082      	sub	sp, #8
 800d0d0:	af00      	add	r7, sp, #0
 800d0d2:	6078      	str	r0, [r7, #4]
 800d0d4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d0dc:	b2db      	uxtb	r3, r3
 800d0de:	3b01      	subs	r3, #1
 800d0e0:	2b02      	cmp	r3, #2
 800d0e2:	d81e      	bhi.n	800d122 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800d0e4:	683b      	ldr	r3, [r7, #0]
 800d0e6:	88db      	ldrh	r3, [r3, #6]
 800d0e8:	2b02      	cmp	r3, #2
 800d0ea:	d004      	beq.n	800d0f6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800d0ec:	6839      	ldr	r1, [r7, #0]
 800d0ee:	6878      	ldr	r0, [r7, #4]
 800d0f0:	f000 f8a5 	bl	800d23e <USBD_CtlError>
        break;
 800d0f4:	e01a      	b.n	800d12c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	2201      	movs	r2, #1
 800d0fa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800d102:	2b00      	cmp	r3, #0
 800d104:	d005      	beq.n	800d112 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	68db      	ldr	r3, [r3, #12]
 800d10a:	f043 0202 	orr.w	r2, r3, #2
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	330c      	adds	r3, #12
 800d116:	2202      	movs	r2, #2
 800d118:	4619      	mov	r1, r3
 800d11a:	6878      	ldr	r0, [r7, #4]
 800d11c:	f000 f900 	bl	800d320 <USBD_CtlSendData>
      break;
 800d120:	e004      	b.n	800d12c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800d122:	6839      	ldr	r1, [r7, #0]
 800d124:	6878      	ldr	r0, [r7, #4]
 800d126:	f000 f88a 	bl	800d23e <USBD_CtlError>
      break;
 800d12a:	bf00      	nop
  }
}
 800d12c:	bf00      	nop
 800d12e:	3708      	adds	r7, #8
 800d130:	46bd      	mov	sp, r7
 800d132:	bd80      	pop	{r7, pc}

0800d134 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d134:	b580      	push	{r7, lr}
 800d136:	b082      	sub	sp, #8
 800d138:	af00      	add	r7, sp, #0
 800d13a:	6078      	str	r0, [r7, #4]
 800d13c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d13e:	683b      	ldr	r3, [r7, #0]
 800d140:	885b      	ldrh	r3, [r3, #2]
 800d142:	2b01      	cmp	r3, #1
 800d144:	d107      	bne.n	800d156 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	2201      	movs	r2, #1
 800d14a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800d14e:	6878      	ldr	r0, [r7, #4]
 800d150:	f000 f940 	bl	800d3d4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800d154:	e013      	b.n	800d17e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800d156:	683b      	ldr	r3, [r7, #0]
 800d158:	885b      	ldrh	r3, [r3, #2]
 800d15a:	2b02      	cmp	r3, #2
 800d15c:	d10b      	bne.n	800d176 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800d15e:	683b      	ldr	r3, [r7, #0]
 800d160:	889b      	ldrh	r3, [r3, #4]
 800d162:	0a1b      	lsrs	r3, r3, #8
 800d164:	b29b      	uxth	r3, r3
 800d166:	b2da      	uxtb	r2, r3
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800d16e:	6878      	ldr	r0, [r7, #4]
 800d170:	f000 f930 	bl	800d3d4 <USBD_CtlSendStatus>
}
 800d174:	e003      	b.n	800d17e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800d176:	6839      	ldr	r1, [r7, #0]
 800d178:	6878      	ldr	r0, [r7, #4]
 800d17a:	f000 f860 	bl	800d23e <USBD_CtlError>
}
 800d17e:	bf00      	nop
 800d180:	3708      	adds	r7, #8
 800d182:	46bd      	mov	sp, r7
 800d184:	bd80      	pop	{r7, pc}

0800d186 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d186:	b580      	push	{r7, lr}
 800d188:	b082      	sub	sp, #8
 800d18a:	af00      	add	r7, sp, #0
 800d18c:	6078      	str	r0, [r7, #4]
 800d18e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d196:	b2db      	uxtb	r3, r3
 800d198:	3b01      	subs	r3, #1
 800d19a:	2b02      	cmp	r3, #2
 800d19c:	d80b      	bhi.n	800d1b6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d19e:	683b      	ldr	r3, [r7, #0]
 800d1a0:	885b      	ldrh	r3, [r3, #2]
 800d1a2:	2b01      	cmp	r3, #1
 800d1a4:	d10c      	bne.n	800d1c0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	2200      	movs	r2, #0
 800d1aa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800d1ae:	6878      	ldr	r0, [r7, #4]
 800d1b0:	f000 f910 	bl	800d3d4 <USBD_CtlSendStatus>
      }
      break;
 800d1b4:	e004      	b.n	800d1c0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800d1b6:	6839      	ldr	r1, [r7, #0]
 800d1b8:	6878      	ldr	r0, [r7, #4]
 800d1ba:	f000 f840 	bl	800d23e <USBD_CtlError>
      break;
 800d1be:	e000      	b.n	800d1c2 <USBD_ClrFeature+0x3c>
      break;
 800d1c0:	bf00      	nop
  }
}
 800d1c2:	bf00      	nop
 800d1c4:	3708      	adds	r7, #8
 800d1c6:	46bd      	mov	sp, r7
 800d1c8:	bd80      	pop	{r7, pc}

0800d1ca <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d1ca:	b580      	push	{r7, lr}
 800d1cc:	b084      	sub	sp, #16
 800d1ce:	af00      	add	r7, sp, #0
 800d1d0:	6078      	str	r0, [r7, #4]
 800d1d2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800d1d4:	683b      	ldr	r3, [r7, #0]
 800d1d6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	781a      	ldrb	r2, [r3, #0]
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	3301      	adds	r3, #1
 800d1e4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	781a      	ldrb	r2, [r3, #0]
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	3301      	adds	r3, #1
 800d1f2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800d1f4:	68f8      	ldr	r0, [r7, #12]
 800d1f6:	f7ff fa41 	bl	800c67c <SWAPBYTE>
 800d1fa:	4603      	mov	r3, r0
 800d1fc:	461a      	mov	r2, r3
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	3301      	adds	r3, #1
 800d206:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	3301      	adds	r3, #1
 800d20c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800d20e:	68f8      	ldr	r0, [r7, #12]
 800d210:	f7ff fa34 	bl	800c67c <SWAPBYTE>
 800d214:	4603      	mov	r3, r0
 800d216:	461a      	mov	r2, r3
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	3301      	adds	r3, #1
 800d220:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	3301      	adds	r3, #1
 800d226:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800d228:	68f8      	ldr	r0, [r7, #12]
 800d22a:	f7ff fa27 	bl	800c67c <SWAPBYTE>
 800d22e:	4603      	mov	r3, r0
 800d230:	461a      	mov	r2, r3
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	80da      	strh	r2, [r3, #6]
}
 800d236:	bf00      	nop
 800d238:	3710      	adds	r7, #16
 800d23a:	46bd      	mov	sp, r7
 800d23c:	bd80      	pop	{r7, pc}

0800d23e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d23e:	b580      	push	{r7, lr}
 800d240:	b082      	sub	sp, #8
 800d242:	af00      	add	r7, sp, #0
 800d244:	6078      	str	r0, [r7, #4]
 800d246:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800d248:	2180      	movs	r1, #128	; 0x80
 800d24a:	6878      	ldr	r0, [r7, #4]
 800d24c:	f000 fc38 	bl	800dac0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800d250:	2100      	movs	r1, #0
 800d252:	6878      	ldr	r0, [r7, #4]
 800d254:	f000 fc34 	bl	800dac0 <USBD_LL_StallEP>
}
 800d258:	bf00      	nop
 800d25a:	3708      	adds	r7, #8
 800d25c:	46bd      	mov	sp, r7
 800d25e:	bd80      	pop	{r7, pc}

0800d260 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d260:	b580      	push	{r7, lr}
 800d262:	b086      	sub	sp, #24
 800d264:	af00      	add	r7, sp, #0
 800d266:	60f8      	str	r0, [r7, #12]
 800d268:	60b9      	str	r1, [r7, #8]
 800d26a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d26c:	2300      	movs	r3, #0
 800d26e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800d270:	68fb      	ldr	r3, [r7, #12]
 800d272:	2b00      	cmp	r3, #0
 800d274:	d036      	beq.n	800d2e4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800d27a:	6938      	ldr	r0, [r7, #16]
 800d27c:	f000 f836 	bl	800d2ec <USBD_GetLen>
 800d280:	4603      	mov	r3, r0
 800d282:	3301      	adds	r3, #1
 800d284:	b29b      	uxth	r3, r3
 800d286:	005b      	lsls	r3, r3, #1
 800d288:	b29a      	uxth	r2, r3
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800d28e:	7dfb      	ldrb	r3, [r7, #23]
 800d290:	68ba      	ldr	r2, [r7, #8]
 800d292:	4413      	add	r3, r2
 800d294:	687a      	ldr	r2, [r7, #4]
 800d296:	7812      	ldrb	r2, [r2, #0]
 800d298:	701a      	strb	r2, [r3, #0]
  idx++;
 800d29a:	7dfb      	ldrb	r3, [r7, #23]
 800d29c:	3301      	adds	r3, #1
 800d29e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800d2a0:	7dfb      	ldrb	r3, [r7, #23]
 800d2a2:	68ba      	ldr	r2, [r7, #8]
 800d2a4:	4413      	add	r3, r2
 800d2a6:	2203      	movs	r2, #3
 800d2a8:	701a      	strb	r2, [r3, #0]
  idx++;
 800d2aa:	7dfb      	ldrb	r3, [r7, #23]
 800d2ac:	3301      	adds	r3, #1
 800d2ae:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800d2b0:	e013      	b.n	800d2da <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800d2b2:	7dfb      	ldrb	r3, [r7, #23]
 800d2b4:	68ba      	ldr	r2, [r7, #8]
 800d2b6:	4413      	add	r3, r2
 800d2b8:	693a      	ldr	r2, [r7, #16]
 800d2ba:	7812      	ldrb	r2, [r2, #0]
 800d2bc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800d2be:	693b      	ldr	r3, [r7, #16]
 800d2c0:	3301      	adds	r3, #1
 800d2c2:	613b      	str	r3, [r7, #16]
    idx++;
 800d2c4:	7dfb      	ldrb	r3, [r7, #23]
 800d2c6:	3301      	adds	r3, #1
 800d2c8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800d2ca:	7dfb      	ldrb	r3, [r7, #23]
 800d2cc:	68ba      	ldr	r2, [r7, #8]
 800d2ce:	4413      	add	r3, r2
 800d2d0:	2200      	movs	r2, #0
 800d2d2:	701a      	strb	r2, [r3, #0]
    idx++;
 800d2d4:	7dfb      	ldrb	r3, [r7, #23]
 800d2d6:	3301      	adds	r3, #1
 800d2d8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800d2da:	693b      	ldr	r3, [r7, #16]
 800d2dc:	781b      	ldrb	r3, [r3, #0]
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d1e7      	bne.n	800d2b2 <USBD_GetString+0x52>
 800d2e2:	e000      	b.n	800d2e6 <USBD_GetString+0x86>
    return;
 800d2e4:	bf00      	nop
  }
}
 800d2e6:	3718      	adds	r7, #24
 800d2e8:	46bd      	mov	sp, r7
 800d2ea:	bd80      	pop	{r7, pc}

0800d2ec <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d2ec:	b480      	push	{r7}
 800d2ee:	b085      	sub	sp, #20
 800d2f0:	af00      	add	r7, sp, #0
 800d2f2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800d2f4:	2300      	movs	r3, #0
 800d2f6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800d2fc:	e005      	b.n	800d30a <USBD_GetLen+0x1e>
  {
    len++;
 800d2fe:	7bfb      	ldrb	r3, [r7, #15]
 800d300:	3301      	adds	r3, #1
 800d302:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800d304:	68bb      	ldr	r3, [r7, #8]
 800d306:	3301      	adds	r3, #1
 800d308:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800d30a:	68bb      	ldr	r3, [r7, #8]
 800d30c:	781b      	ldrb	r3, [r3, #0]
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d1f5      	bne.n	800d2fe <USBD_GetLen+0x12>
  }

  return len;
 800d312:	7bfb      	ldrb	r3, [r7, #15]
}
 800d314:	4618      	mov	r0, r3
 800d316:	3714      	adds	r7, #20
 800d318:	46bd      	mov	sp, r7
 800d31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d31e:	4770      	bx	lr

0800d320 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800d320:	b580      	push	{r7, lr}
 800d322:	b084      	sub	sp, #16
 800d324:	af00      	add	r7, sp, #0
 800d326:	60f8      	str	r0, [r7, #12]
 800d328:	60b9      	str	r1, [r7, #8]
 800d32a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	2202      	movs	r2, #2
 800d330:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	687a      	ldr	r2, [r7, #4]
 800d338:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800d33a:	68fb      	ldr	r3, [r7, #12]
 800d33c:	687a      	ldr	r2, [r7, #4]
 800d33e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	68ba      	ldr	r2, [r7, #8]
 800d344:	2100      	movs	r1, #0
 800d346:	68f8      	ldr	r0, [r7, #12]
 800d348:	f000 fc43 	bl	800dbd2 <USBD_LL_Transmit>

  return USBD_OK;
 800d34c:	2300      	movs	r3, #0
}
 800d34e:	4618      	mov	r0, r3
 800d350:	3710      	adds	r7, #16
 800d352:	46bd      	mov	sp, r7
 800d354:	bd80      	pop	{r7, pc}

0800d356 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800d356:	b580      	push	{r7, lr}
 800d358:	b084      	sub	sp, #16
 800d35a:	af00      	add	r7, sp, #0
 800d35c:	60f8      	str	r0, [r7, #12]
 800d35e:	60b9      	str	r1, [r7, #8]
 800d360:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	68ba      	ldr	r2, [r7, #8]
 800d366:	2100      	movs	r1, #0
 800d368:	68f8      	ldr	r0, [r7, #12]
 800d36a:	f000 fc32 	bl	800dbd2 <USBD_LL_Transmit>

  return USBD_OK;
 800d36e:	2300      	movs	r3, #0
}
 800d370:	4618      	mov	r0, r3
 800d372:	3710      	adds	r7, #16
 800d374:	46bd      	mov	sp, r7
 800d376:	bd80      	pop	{r7, pc}

0800d378 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800d378:	b580      	push	{r7, lr}
 800d37a:	b084      	sub	sp, #16
 800d37c:	af00      	add	r7, sp, #0
 800d37e:	60f8      	str	r0, [r7, #12]
 800d380:	60b9      	str	r1, [r7, #8]
 800d382:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800d384:	68fb      	ldr	r3, [r7, #12]
 800d386:	2203      	movs	r2, #3
 800d388:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	687a      	ldr	r2, [r7, #4]
 800d390:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800d394:	68fb      	ldr	r3, [r7, #12]
 800d396:	687a      	ldr	r2, [r7, #4]
 800d398:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	68ba      	ldr	r2, [r7, #8]
 800d3a0:	2100      	movs	r1, #0
 800d3a2:	68f8      	ldr	r0, [r7, #12]
 800d3a4:	f000 fc36 	bl	800dc14 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d3a8:	2300      	movs	r3, #0
}
 800d3aa:	4618      	mov	r0, r3
 800d3ac:	3710      	adds	r7, #16
 800d3ae:	46bd      	mov	sp, r7
 800d3b0:	bd80      	pop	{r7, pc}

0800d3b2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800d3b2:	b580      	push	{r7, lr}
 800d3b4:	b084      	sub	sp, #16
 800d3b6:	af00      	add	r7, sp, #0
 800d3b8:	60f8      	str	r0, [r7, #12]
 800d3ba:	60b9      	str	r1, [r7, #8]
 800d3bc:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	68ba      	ldr	r2, [r7, #8]
 800d3c2:	2100      	movs	r1, #0
 800d3c4:	68f8      	ldr	r0, [r7, #12]
 800d3c6:	f000 fc25 	bl	800dc14 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d3ca:	2300      	movs	r3, #0
}
 800d3cc:	4618      	mov	r0, r3
 800d3ce:	3710      	adds	r7, #16
 800d3d0:	46bd      	mov	sp, r7
 800d3d2:	bd80      	pop	{r7, pc}

0800d3d4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d3d4:	b580      	push	{r7, lr}
 800d3d6:	b082      	sub	sp, #8
 800d3d8:	af00      	add	r7, sp, #0
 800d3da:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	2204      	movs	r2, #4
 800d3e0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d3e4:	2300      	movs	r3, #0
 800d3e6:	2200      	movs	r2, #0
 800d3e8:	2100      	movs	r1, #0
 800d3ea:	6878      	ldr	r0, [r7, #4]
 800d3ec:	f000 fbf1 	bl	800dbd2 <USBD_LL_Transmit>

  return USBD_OK;
 800d3f0:	2300      	movs	r3, #0
}
 800d3f2:	4618      	mov	r0, r3
 800d3f4:	3708      	adds	r7, #8
 800d3f6:	46bd      	mov	sp, r7
 800d3f8:	bd80      	pop	{r7, pc}

0800d3fa <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d3fa:	b580      	push	{r7, lr}
 800d3fc:	b082      	sub	sp, #8
 800d3fe:	af00      	add	r7, sp, #0
 800d400:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	2205      	movs	r2, #5
 800d406:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d40a:	2300      	movs	r3, #0
 800d40c:	2200      	movs	r2, #0
 800d40e:	2100      	movs	r1, #0
 800d410:	6878      	ldr	r0, [r7, #4]
 800d412:	f000 fbff 	bl	800dc14 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d416:	2300      	movs	r3, #0
}
 800d418:	4618      	mov	r0, r3
 800d41a:	3708      	adds	r7, #8
 800d41c:	46bd      	mov	sp, r7
 800d41e:	bd80      	pop	{r7, pc}

0800d420 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800d420:	b580      	push	{r7, lr}
 800d422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800d424:	2200      	movs	r2, #0
 800d426:	4912      	ldr	r1, [pc, #72]	; (800d470 <MX_USB_DEVICE_Init+0x50>)
 800d428:	4812      	ldr	r0, [pc, #72]	; (800d474 <MX_USB_DEVICE_Init+0x54>)
 800d42a:	f7fe fd07 	bl	800be3c <USBD_Init>
 800d42e:	4603      	mov	r3, r0
 800d430:	2b00      	cmp	r3, #0
 800d432:	d001      	beq.n	800d438 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800d434:	f7f5 fa90 	bl	8002958 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 800d438:	490f      	ldr	r1, [pc, #60]	; (800d478 <MX_USB_DEVICE_Init+0x58>)
 800d43a:	480e      	ldr	r0, [pc, #56]	; (800d474 <MX_USB_DEVICE_Init+0x54>)
 800d43c:	f7fe fd2e 	bl	800be9c <USBD_RegisterClass>
 800d440:	4603      	mov	r3, r0
 800d442:	2b00      	cmp	r3, #0
 800d444:	d001      	beq.n	800d44a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800d446:	f7f5 fa87 	bl	8002958 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 800d44a:	490c      	ldr	r1, [pc, #48]	; (800d47c <MX_USB_DEVICE_Init+0x5c>)
 800d44c:	4809      	ldr	r0, [pc, #36]	; (800d474 <MX_USB_DEVICE_Init+0x54>)
 800d44e:	f7fe fcdb 	bl	800be08 <USBD_CUSTOM_HID_RegisterInterface>
 800d452:	4603      	mov	r3, r0
 800d454:	2b00      	cmp	r3, #0
 800d456:	d001      	beq.n	800d45c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800d458:	f7f5 fa7e 	bl	8002958 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800d45c:	4805      	ldr	r0, [pc, #20]	; (800d474 <MX_USB_DEVICE_Init+0x54>)
 800d45e:	f7fe fd53 	bl	800bf08 <USBD_Start>
 800d462:	4603      	mov	r3, r0
 800d464:	2b00      	cmp	r3, #0
 800d466:	d001      	beq.n	800d46c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800d468:	f7f5 fa76 	bl	8002958 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d46c:	bf00      	nop
 800d46e:	bd80      	pop	{r7, pc}
 800d470:	20000230 	.word	0x20000230
 800d474:	200011dc 	.word	0x200011dc
 800d478:	200001a0 	.word	0x200001a0
 800d47c:	20000220 	.word	0x20000220

0800d480 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 800d480:	b480      	push	{r7}
 800d482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d484:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d486:	4618      	mov	r0, r3
 800d488:	46bd      	mov	sp, r7
 800d48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d48e:	4770      	bx	lr

0800d490 <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 800d490:	b480      	push	{r7}
 800d492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 800d494:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d496:	4618      	mov	r0, r3
 800d498:	46bd      	mov	sp, r7
 800d49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d49e:	4770      	bx	lr

0800d4a0 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 800d4a0:	b580      	push	{r7, lr}
 800d4a2:	b082      	sub	sp, #8
 800d4a4:	af00      	add	r7, sp, #0
 800d4a6:	4603      	mov	r3, r0
 800d4a8:	460a      	mov	r2, r1
 800d4aa:	71fb      	strb	r3, [r7, #7]
 800d4ac:	4613      	mov	r3, r2
 800d4ae:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  UNUSED(event_idx);
  UNUSED(state);

  /* Start next USB packet transfer once data processing is completed */
  if (USBD_CUSTOM_HID_ReceivePacket(&hUsbDeviceFS) != (uint8_t)USBD_OK)
 800d4b0:	4806      	ldr	r0, [pc, #24]	; (800d4cc <CUSTOM_HID_OutEvent_FS+0x2c>)
 800d4b2:	f7fe fc47 	bl	800bd44 <USBD_CUSTOM_HID_ReceivePacket>
 800d4b6:	4603      	mov	r3, r0
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d002      	beq.n	800d4c2 <CUSTOM_HID_OutEvent_FS+0x22>
  {
    return -1;
 800d4bc:	f04f 33ff 	mov.w	r3, #4294967295
 800d4c0:	e000      	b.n	800d4c4 <CUSTOM_HID_OutEvent_FS+0x24>
  }

  return (USBD_OK);
 800d4c2:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d4c4:	4618      	mov	r0, r3
 800d4c6:	3708      	adds	r7, #8
 800d4c8:	46bd      	mov	sp, r7
 800d4ca:	bd80      	pop	{r7, pc}
 800d4cc:	200011dc 	.word	0x200011dc

0800d4d0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d4d0:	b480      	push	{r7}
 800d4d2:	b083      	sub	sp, #12
 800d4d4:	af00      	add	r7, sp, #0
 800d4d6:	4603      	mov	r3, r0
 800d4d8:	6039      	str	r1, [r7, #0]
 800d4da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800d4dc:	683b      	ldr	r3, [r7, #0]
 800d4de:	2212      	movs	r2, #18
 800d4e0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800d4e2:	4b03      	ldr	r3, [pc, #12]	; (800d4f0 <USBD_FS_DeviceDescriptor+0x20>)
}
 800d4e4:	4618      	mov	r0, r3
 800d4e6:	370c      	adds	r7, #12
 800d4e8:	46bd      	mov	sp, r7
 800d4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ee:	4770      	bx	lr
 800d4f0:	2000024c 	.word	0x2000024c

0800d4f4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d4f4:	b480      	push	{r7}
 800d4f6:	b083      	sub	sp, #12
 800d4f8:	af00      	add	r7, sp, #0
 800d4fa:	4603      	mov	r3, r0
 800d4fc:	6039      	str	r1, [r7, #0]
 800d4fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d500:	683b      	ldr	r3, [r7, #0]
 800d502:	2204      	movs	r2, #4
 800d504:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d506:	4b03      	ldr	r3, [pc, #12]	; (800d514 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800d508:	4618      	mov	r0, r3
 800d50a:	370c      	adds	r7, #12
 800d50c:	46bd      	mov	sp, r7
 800d50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d512:	4770      	bx	lr
 800d514:	20000260 	.word	0x20000260

0800d518 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d518:	b580      	push	{r7, lr}
 800d51a:	b082      	sub	sp, #8
 800d51c:	af00      	add	r7, sp, #0
 800d51e:	4603      	mov	r3, r0
 800d520:	6039      	str	r1, [r7, #0]
 800d522:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d524:	79fb      	ldrb	r3, [r7, #7]
 800d526:	2b00      	cmp	r3, #0
 800d528:	d105      	bne.n	800d536 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d52a:	683a      	ldr	r2, [r7, #0]
 800d52c:	4907      	ldr	r1, [pc, #28]	; (800d54c <USBD_FS_ProductStrDescriptor+0x34>)
 800d52e:	4808      	ldr	r0, [pc, #32]	; (800d550 <USBD_FS_ProductStrDescriptor+0x38>)
 800d530:	f7ff fe96 	bl	800d260 <USBD_GetString>
 800d534:	e004      	b.n	800d540 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d536:	683a      	ldr	r2, [r7, #0]
 800d538:	4904      	ldr	r1, [pc, #16]	; (800d54c <USBD_FS_ProductStrDescriptor+0x34>)
 800d53a:	4805      	ldr	r0, [pc, #20]	; (800d550 <USBD_FS_ProductStrDescriptor+0x38>)
 800d53c:	f7ff fe90 	bl	800d260 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d540:	4b02      	ldr	r3, [pc, #8]	; (800d54c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800d542:	4618      	mov	r0, r3
 800d544:	3708      	adds	r7, #8
 800d546:	46bd      	mov	sp, r7
 800d548:	bd80      	pop	{r7, pc}
 800d54a:	bf00      	nop
 800d54c:	200014b8 	.word	0x200014b8
 800d550:	0800f0ec 	.word	0x0800f0ec

0800d554 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d554:	b580      	push	{r7, lr}
 800d556:	b082      	sub	sp, #8
 800d558:	af00      	add	r7, sp, #0
 800d55a:	4603      	mov	r3, r0
 800d55c:	6039      	str	r1, [r7, #0]
 800d55e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d560:	683a      	ldr	r2, [r7, #0]
 800d562:	4904      	ldr	r1, [pc, #16]	; (800d574 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800d564:	4804      	ldr	r0, [pc, #16]	; (800d578 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800d566:	f7ff fe7b 	bl	800d260 <USBD_GetString>
  return USBD_StrDesc;
 800d56a:	4b02      	ldr	r3, [pc, #8]	; (800d574 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800d56c:	4618      	mov	r0, r3
 800d56e:	3708      	adds	r7, #8
 800d570:	46bd      	mov	sp, r7
 800d572:	bd80      	pop	{r7, pc}
 800d574:	200014b8 	.word	0x200014b8
 800d578:	0800f10c 	.word	0x0800f10c

0800d57c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d57c:	b580      	push	{r7, lr}
 800d57e:	b082      	sub	sp, #8
 800d580:	af00      	add	r7, sp, #0
 800d582:	4603      	mov	r3, r0
 800d584:	6039      	str	r1, [r7, #0]
 800d586:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d588:	683b      	ldr	r3, [r7, #0]
 800d58a:	221a      	movs	r2, #26
 800d58c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d58e:	f000 f843 	bl	800d618 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800d592:	4b02      	ldr	r3, [pc, #8]	; (800d59c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800d594:	4618      	mov	r0, r3
 800d596:	3708      	adds	r7, #8
 800d598:	46bd      	mov	sp, r7
 800d59a:	bd80      	pop	{r7, pc}
 800d59c:	20000264 	.word	0x20000264

0800d5a0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d5a0:	b580      	push	{r7, lr}
 800d5a2:	b082      	sub	sp, #8
 800d5a4:	af00      	add	r7, sp, #0
 800d5a6:	4603      	mov	r3, r0
 800d5a8:	6039      	str	r1, [r7, #0]
 800d5aa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d5ac:	79fb      	ldrb	r3, [r7, #7]
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d105      	bne.n	800d5be <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d5b2:	683a      	ldr	r2, [r7, #0]
 800d5b4:	4907      	ldr	r1, [pc, #28]	; (800d5d4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d5b6:	4808      	ldr	r0, [pc, #32]	; (800d5d8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d5b8:	f7ff fe52 	bl	800d260 <USBD_GetString>
 800d5bc:	e004      	b.n	800d5c8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d5be:	683a      	ldr	r2, [r7, #0]
 800d5c0:	4904      	ldr	r1, [pc, #16]	; (800d5d4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d5c2:	4805      	ldr	r0, [pc, #20]	; (800d5d8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d5c4:	f7ff fe4c 	bl	800d260 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d5c8:	4b02      	ldr	r3, [pc, #8]	; (800d5d4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800d5ca:	4618      	mov	r0, r3
 800d5cc:	3708      	adds	r7, #8
 800d5ce:	46bd      	mov	sp, r7
 800d5d0:	bd80      	pop	{r7, pc}
 800d5d2:	bf00      	nop
 800d5d4:	200014b8 	.word	0x200014b8
 800d5d8:	0800f120 	.word	0x0800f120

0800d5dc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d5dc:	b580      	push	{r7, lr}
 800d5de:	b082      	sub	sp, #8
 800d5e0:	af00      	add	r7, sp, #0
 800d5e2:	4603      	mov	r3, r0
 800d5e4:	6039      	str	r1, [r7, #0]
 800d5e6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d5e8:	79fb      	ldrb	r3, [r7, #7]
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d105      	bne.n	800d5fa <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d5ee:	683a      	ldr	r2, [r7, #0]
 800d5f0:	4907      	ldr	r1, [pc, #28]	; (800d610 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d5f2:	4808      	ldr	r0, [pc, #32]	; (800d614 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d5f4:	f7ff fe34 	bl	800d260 <USBD_GetString>
 800d5f8:	e004      	b.n	800d604 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d5fa:	683a      	ldr	r2, [r7, #0]
 800d5fc:	4904      	ldr	r1, [pc, #16]	; (800d610 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d5fe:	4805      	ldr	r0, [pc, #20]	; (800d614 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d600:	f7ff fe2e 	bl	800d260 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d604:	4b02      	ldr	r3, [pc, #8]	; (800d610 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800d606:	4618      	mov	r0, r3
 800d608:	3708      	adds	r7, #8
 800d60a:	46bd      	mov	sp, r7
 800d60c:	bd80      	pop	{r7, pc}
 800d60e:	bf00      	nop
 800d610:	200014b8 	.word	0x200014b8
 800d614:	0800f134 	.word	0x0800f134

0800d618 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d618:	b580      	push	{r7, lr}
 800d61a:	b084      	sub	sp, #16
 800d61c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d61e:	4b0f      	ldr	r3, [pc, #60]	; (800d65c <Get_SerialNum+0x44>)
 800d620:	681b      	ldr	r3, [r3, #0]
 800d622:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d624:	4b0e      	ldr	r3, [pc, #56]	; (800d660 <Get_SerialNum+0x48>)
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d62a:	4b0e      	ldr	r3, [pc, #56]	; (800d664 <Get_SerialNum+0x4c>)
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d630:	68fa      	ldr	r2, [r7, #12]
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	4413      	add	r3, r2
 800d636:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d009      	beq.n	800d652 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d63e:	2208      	movs	r2, #8
 800d640:	4909      	ldr	r1, [pc, #36]	; (800d668 <Get_SerialNum+0x50>)
 800d642:	68f8      	ldr	r0, [r7, #12]
 800d644:	f000 f814 	bl	800d670 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d648:	2204      	movs	r2, #4
 800d64a:	4908      	ldr	r1, [pc, #32]	; (800d66c <Get_SerialNum+0x54>)
 800d64c:	68b8      	ldr	r0, [r7, #8]
 800d64e:	f000 f80f 	bl	800d670 <IntToUnicode>
  }
}
 800d652:	bf00      	nop
 800d654:	3710      	adds	r7, #16
 800d656:	46bd      	mov	sp, r7
 800d658:	bd80      	pop	{r7, pc}
 800d65a:	bf00      	nop
 800d65c:	1fff7a10 	.word	0x1fff7a10
 800d660:	1fff7a14 	.word	0x1fff7a14
 800d664:	1fff7a18 	.word	0x1fff7a18
 800d668:	20000266 	.word	0x20000266
 800d66c:	20000276 	.word	0x20000276

0800d670 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d670:	b480      	push	{r7}
 800d672:	b087      	sub	sp, #28
 800d674:	af00      	add	r7, sp, #0
 800d676:	60f8      	str	r0, [r7, #12]
 800d678:	60b9      	str	r1, [r7, #8]
 800d67a:	4613      	mov	r3, r2
 800d67c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d67e:	2300      	movs	r3, #0
 800d680:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d682:	2300      	movs	r3, #0
 800d684:	75fb      	strb	r3, [r7, #23]
 800d686:	e027      	b.n	800d6d8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	0f1b      	lsrs	r3, r3, #28
 800d68c:	2b09      	cmp	r3, #9
 800d68e:	d80b      	bhi.n	800d6a8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	0f1b      	lsrs	r3, r3, #28
 800d694:	b2da      	uxtb	r2, r3
 800d696:	7dfb      	ldrb	r3, [r7, #23]
 800d698:	005b      	lsls	r3, r3, #1
 800d69a:	4619      	mov	r1, r3
 800d69c:	68bb      	ldr	r3, [r7, #8]
 800d69e:	440b      	add	r3, r1
 800d6a0:	3230      	adds	r2, #48	; 0x30
 800d6a2:	b2d2      	uxtb	r2, r2
 800d6a4:	701a      	strb	r2, [r3, #0]
 800d6a6:	e00a      	b.n	800d6be <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d6a8:	68fb      	ldr	r3, [r7, #12]
 800d6aa:	0f1b      	lsrs	r3, r3, #28
 800d6ac:	b2da      	uxtb	r2, r3
 800d6ae:	7dfb      	ldrb	r3, [r7, #23]
 800d6b0:	005b      	lsls	r3, r3, #1
 800d6b2:	4619      	mov	r1, r3
 800d6b4:	68bb      	ldr	r3, [r7, #8]
 800d6b6:	440b      	add	r3, r1
 800d6b8:	3237      	adds	r2, #55	; 0x37
 800d6ba:	b2d2      	uxtb	r2, r2
 800d6bc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	011b      	lsls	r3, r3, #4
 800d6c2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d6c4:	7dfb      	ldrb	r3, [r7, #23]
 800d6c6:	005b      	lsls	r3, r3, #1
 800d6c8:	3301      	adds	r3, #1
 800d6ca:	68ba      	ldr	r2, [r7, #8]
 800d6cc:	4413      	add	r3, r2
 800d6ce:	2200      	movs	r2, #0
 800d6d0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d6d2:	7dfb      	ldrb	r3, [r7, #23]
 800d6d4:	3301      	adds	r3, #1
 800d6d6:	75fb      	strb	r3, [r7, #23]
 800d6d8:	7dfa      	ldrb	r2, [r7, #23]
 800d6da:	79fb      	ldrb	r3, [r7, #7]
 800d6dc:	429a      	cmp	r2, r3
 800d6de:	d3d3      	bcc.n	800d688 <IntToUnicode+0x18>
  }
}
 800d6e0:	bf00      	nop
 800d6e2:	bf00      	nop
 800d6e4:	371c      	adds	r7, #28
 800d6e6:	46bd      	mov	sp, r7
 800d6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ec:	4770      	bx	lr
	...

0800d6f0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d6f0:	b580      	push	{r7, lr}
 800d6f2:	b08a      	sub	sp, #40	; 0x28
 800d6f4:	af00      	add	r7, sp, #0
 800d6f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d6f8:	f107 0314 	add.w	r3, r7, #20
 800d6fc:	2200      	movs	r2, #0
 800d6fe:	601a      	str	r2, [r3, #0]
 800d700:	605a      	str	r2, [r3, #4]
 800d702:	609a      	str	r2, [r3, #8]
 800d704:	60da      	str	r2, [r3, #12]
 800d706:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	681b      	ldr	r3, [r3, #0]
 800d70c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d710:	d13a      	bne.n	800d788 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d712:	2300      	movs	r3, #0
 800d714:	613b      	str	r3, [r7, #16]
 800d716:	4b1e      	ldr	r3, [pc, #120]	; (800d790 <HAL_PCD_MspInit+0xa0>)
 800d718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d71a:	4a1d      	ldr	r2, [pc, #116]	; (800d790 <HAL_PCD_MspInit+0xa0>)
 800d71c:	f043 0301 	orr.w	r3, r3, #1
 800d720:	6313      	str	r3, [r2, #48]	; 0x30
 800d722:	4b1b      	ldr	r3, [pc, #108]	; (800d790 <HAL_PCD_MspInit+0xa0>)
 800d724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d726:	f003 0301 	and.w	r3, r3, #1
 800d72a:	613b      	str	r3, [r7, #16]
 800d72c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800d72e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800d732:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d734:	2302      	movs	r3, #2
 800d736:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d738:	2300      	movs	r3, #0
 800d73a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d73c:	2303      	movs	r3, #3
 800d73e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d740:	230a      	movs	r3, #10
 800d742:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d744:	f107 0314 	add.w	r3, r7, #20
 800d748:	4619      	mov	r1, r3
 800d74a:	4812      	ldr	r0, [pc, #72]	; (800d794 <HAL_PCD_MspInit+0xa4>)
 800d74c:	f7f7 fae0 	bl	8004d10 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d750:	4b0f      	ldr	r3, [pc, #60]	; (800d790 <HAL_PCD_MspInit+0xa0>)
 800d752:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d754:	4a0e      	ldr	r2, [pc, #56]	; (800d790 <HAL_PCD_MspInit+0xa0>)
 800d756:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d75a:	6353      	str	r3, [r2, #52]	; 0x34
 800d75c:	2300      	movs	r3, #0
 800d75e:	60fb      	str	r3, [r7, #12]
 800d760:	4b0b      	ldr	r3, [pc, #44]	; (800d790 <HAL_PCD_MspInit+0xa0>)
 800d762:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d764:	4a0a      	ldr	r2, [pc, #40]	; (800d790 <HAL_PCD_MspInit+0xa0>)
 800d766:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d76a:	6453      	str	r3, [r2, #68]	; 0x44
 800d76c:	4b08      	ldr	r3, [pc, #32]	; (800d790 <HAL_PCD_MspInit+0xa0>)
 800d76e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d770:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d774:	60fb      	str	r3, [r7, #12]
 800d776:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 2, 0);
 800d778:	2200      	movs	r2, #0
 800d77a:	2102      	movs	r1, #2
 800d77c:	2043      	movs	r0, #67	; 0x43
 800d77e:	f7f6 fe66 	bl	800444e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d782:	2043      	movs	r0, #67	; 0x43
 800d784:	f7f6 fe7f 	bl	8004486 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d788:	bf00      	nop
 800d78a:	3728      	adds	r7, #40	; 0x28
 800d78c:	46bd      	mov	sp, r7
 800d78e:	bd80      	pop	{r7, pc}
 800d790:	40023800 	.word	0x40023800
 800d794:	40020000 	.word	0x40020000

0800d798 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d798:	b580      	push	{r7, lr}
 800d79a:	b082      	sub	sp, #8
 800d79c:	af00      	add	r7, sp, #0
 800d79e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800d7ac:	4619      	mov	r1, r3
 800d7ae:	4610      	mov	r0, r2
 800d7b0:	f7fe fbf7 	bl	800bfa2 <USBD_LL_SetupStage>
}
 800d7b4:	bf00      	nop
 800d7b6:	3708      	adds	r7, #8
 800d7b8:	46bd      	mov	sp, r7
 800d7ba:	bd80      	pop	{r7, pc}

0800d7bc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d7bc:	b580      	push	{r7, lr}
 800d7be:	b082      	sub	sp, #8
 800d7c0:	af00      	add	r7, sp, #0
 800d7c2:	6078      	str	r0, [r7, #4]
 800d7c4:	460b      	mov	r3, r1
 800d7c6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800d7ce:	78fa      	ldrb	r2, [r7, #3]
 800d7d0:	6879      	ldr	r1, [r7, #4]
 800d7d2:	4613      	mov	r3, r2
 800d7d4:	00db      	lsls	r3, r3, #3
 800d7d6:	4413      	add	r3, r2
 800d7d8:	009b      	lsls	r3, r3, #2
 800d7da:	440b      	add	r3, r1
 800d7dc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800d7e0:	681a      	ldr	r2, [r3, #0]
 800d7e2:	78fb      	ldrb	r3, [r7, #3]
 800d7e4:	4619      	mov	r1, r3
 800d7e6:	f7fe fc31 	bl	800c04c <USBD_LL_DataOutStage>
}
 800d7ea:	bf00      	nop
 800d7ec:	3708      	adds	r7, #8
 800d7ee:	46bd      	mov	sp, r7
 800d7f0:	bd80      	pop	{r7, pc}

0800d7f2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d7f2:	b580      	push	{r7, lr}
 800d7f4:	b082      	sub	sp, #8
 800d7f6:	af00      	add	r7, sp, #0
 800d7f8:	6078      	str	r0, [r7, #4]
 800d7fa:	460b      	mov	r3, r1
 800d7fc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800d804:	78fa      	ldrb	r2, [r7, #3]
 800d806:	6879      	ldr	r1, [r7, #4]
 800d808:	4613      	mov	r3, r2
 800d80a:	00db      	lsls	r3, r3, #3
 800d80c:	4413      	add	r3, r2
 800d80e:	009b      	lsls	r3, r3, #2
 800d810:	440b      	add	r3, r1
 800d812:	334c      	adds	r3, #76	; 0x4c
 800d814:	681a      	ldr	r2, [r3, #0]
 800d816:	78fb      	ldrb	r3, [r7, #3]
 800d818:	4619      	mov	r1, r3
 800d81a:	f7fe fcca 	bl	800c1b2 <USBD_LL_DataInStage>
}
 800d81e:	bf00      	nop
 800d820:	3708      	adds	r7, #8
 800d822:	46bd      	mov	sp, r7
 800d824:	bd80      	pop	{r7, pc}

0800d826 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d826:	b580      	push	{r7, lr}
 800d828:	b082      	sub	sp, #8
 800d82a:	af00      	add	r7, sp, #0
 800d82c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d834:	4618      	mov	r0, r3
 800d836:	f7fe fdfe 	bl	800c436 <USBD_LL_SOF>
}
 800d83a:	bf00      	nop
 800d83c:	3708      	adds	r7, #8
 800d83e:	46bd      	mov	sp, r7
 800d840:	bd80      	pop	{r7, pc}

0800d842 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d842:	b580      	push	{r7, lr}
 800d844:	b084      	sub	sp, #16
 800d846:	af00      	add	r7, sp, #0
 800d848:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d84a:	2301      	movs	r3, #1
 800d84c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	68db      	ldr	r3, [r3, #12]
 800d852:	2b02      	cmp	r3, #2
 800d854:	d001      	beq.n	800d85a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800d856:	f7f5 f87f 	bl	8002958 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d860:	7bfa      	ldrb	r2, [r7, #15]
 800d862:	4611      	mov	r1, r2
 800d864:	4618      	mov	r0, r3
 800d866:	f7fe fda8 	bl	800c3ba <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d870:	4618      	mov	r0, r3
 800d872:	f7fe fd50 	bl	800c316 <USBD_LL_Reset>
}
 800d876:	bf00      	nop
 800d878:	3710      	adds	r7, #16
 800d87a:	46bd      	mov	sp, r7
 800d87c:	bd80      	pop	{r7, pc}
	...

0800d880 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d880:	b580      	push	{r7, lr}
 800d882:	b082      	sub	sp, #8
 800d884:	af00      	add	r7, sp, #0
 800d886:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d88e:	4618      	mov	r0, r3
 800d890:	f7fe fda3 	bl	800c3da <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d89c:	681b      	ldr	r3, [r3, #0]
 800d89e:	687a      	ldr	r2, [r7, #4]
 800d8a0:	6812      	ldr	r2, [r2, #0]
 800d8a2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d8a6:	f043 0301 	orr.w	r3, r3, #1
 800d8aa:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	6a1b      	ldr	r3, [r3, #32]
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d005      	beq.n	800d8c0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d8b4:	4b04      	ldr	r3, [pc, #16]	; (800d8c8 <HAL_PCD_SuspendCallback+0x48>)
 800d8b6:	691b      	ldr	r3, [r3, #16]
 800d8b8:	4a03      	ldr	r2, [pc, #12]	; (800d8c8 <HAL_PCD_SuspendCallback+0x48>)
 800d8ba:	f043 0306 	orr.w	r3, r3, #6
 800d8be:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d8c0:	bf00      	nop
 800d8c2:	3708      	adds	r7, #8
 800d8c4:	46bd      	mov	sp, r7
 800d8c6:	bd80      	pop	{r7, pc}
 800d8c8:	e000ed00 	.word	0xe000ed00

0800d8cc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d8cc:	b580      	push	{r7, lr}
 800d8ce:	b082      	sub	sp, #8
 800d8d0:	af00      	add	r7, sp, #0
 800d8d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d8da:	4618      	mov	r0, r3
 800d8dc:	f7fe fd93 	bl	800c406 <USBD_LL_Resume>
}
 800d8e0:	bf00      	nop
 800d8e2:	3708      	adds	r7, #8
 800d8e4:	46bd      	mov	sp, r7
 800d8e6:	bd80      	pop	{r7, pc}

0800d8e8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d8e8:	b580      	push	{r7, lr}
 800d8ea:	b082      	sub	sp, #8
 800d8ec:	af00      	add	r7, sp, #0
 800d8ee:	6078      	str	r0, [r7, #4]
 800d8f0:	460b      	mov	r3, r1
 800d8f2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d8fa:	78fa      	ldrb	r2, [r7, #3]
 800d8fc:	4611      	mov	r1, r2
 800d8fe:	4618      	mov	r0, r3
 800d900:	f7fe fdeb 	bl	800c4da <USBD_LL_IsoOUTIncomplete>
}
 800d904:	bf00      	nop
 800d906:	3708      	adds	r7, #8
 800d908:	46bd      	mov	sp, r7
 800d90a:	bd80      	pop	{r7, pc}

0800d90c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d90c:	b580      	push	{r7, lr}
 800d90e:	b082      	sub	sp, #8
 800d910:	af00      	add	r7, sp, #0
 800d912:	6078      	str	r0, [r7, #4]
 800d914:	460b      	mov	r3, r1
 800d916:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d91e:	78fa      	ldrb	r2, [r7, #3]
 800d920:	4611      	mov	r1, r2
 800d922:	4618      	mov	r0, r3
 800d924:	f7fe fda7 	bl	800c476 <USBD_LL_IsoINIncomplete>
}
 800d928:	bf00      	nop
 800d92a:	3708      	adds	r7, #8
 800d92c:	46bd      	mov	sp, r7
 800d92e:	bd80      	pop	{r7, pc}

0800d930 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d930:	b580      	push	{r7, lr}
 800d932:	b082      	sub	sp, #8
 800d934:	af00      	add	r7, sp, #0
 800d936:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d93e:	4618      	mov	r0, r3
 800d940:	f7fe fdfd 	bl	800c53e <USBD_LL_DevConnected>
}
 800d944:	bf00      	nop
 800d946:	3708      	adds	r7, #8
 800d948:	46bd      	mov	sp, r7
 800d94a:	bd80      	pop	{r7, pc}

0800d94c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d94c:	b580      	push	{r7, lr}
 800d94e:	b082      	sub	sp, #8
 800d950:	af00      	add	r7, sp, #0
 800d952:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d95a:	4618      	mov	r0, r3
 800d95c:	f7fe fdfa 	bl	800c554 <USBD_LL_DevDisconnected>
}
 800d960:	bf00      	nop
 800d962:	3708      	adds	r7, #8
 800d964:	46bd      	mov	sp, r7
 800d966:	bd80      	pop	{r7, pc}

0800d968 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d968:	b580      	push	{r7, lr}
 800d96a:	b082      	sub	sp, #8
 800d96c:	af00      	add	r7, sp, #0
 800d96e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	781b      	ldrb	r3, [r3, #0]
 800d974:	2b00      	cmp	r3, #0
 800d976:	d13c      	bne.n	800d9f2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800d978:	4a20      	ldr	r2, [pc, #128]	; (800d9fc <USBD_LL_Init+0x94>)
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	4a1e      	ldr	r2, [pc, #120]	; (800d9fc <USBD_LL_Init+0x94>)
 800d984:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d988:	4b1c      	ldr	r3, [pc, #112]	; (800d9fc <USBD_LL_Init+0x94>)
 800d98a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800d98e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800d990:	4b1a      	ldr	r3, [pc, #104]	; (800d9fc <USBD_LL_Init+0x94>)
 800d992:	2204      	movs	r2, #4
 800d994:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800d996:	4b19      	ldr	r3, [pc, #100]	; (800d9fc <USBD_LL_Init+0x94>)
 800d998:	2202      	movs	r2, #2
 800d99a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d99c:	4b17      	ldr	r3, [pc, #92]	; (800d9fc <USBD_LL_Init+0x94>)
 800d99e:	2200      	movs	r2, #0
 800d9a0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d9a2:	4b16      	ldr	r3, [pc, #88]	; (800d9fc <USBD_LL_Init+0x94>)
 800d9a4:	2202      	movs	r2, #2
 800d9a6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d9a8:	4b14      	ldr	r3, [pc, #80]	; (800d9fc <USBD_LL_Init+0x94>)
 800d9aa:	2200      	movs	r2, #0
 800d9ac:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800d9ae:	4b13      	ldr	r3, [pc, #76]	; (800d9fc <USBD_LL_Init+0x94>)
 800d9b0:	2200      	movs	r2, #0
 800d9b2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800d9b4:	4b11      	ldr	r3, [pc, #68]	; (800d9fc <USBD_LL_Init+0x94>)
 800d9b6:	2200      	movs	r2, #0
 800d9b8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800d9ba:	4b10      	ldr	r3, [pc, #64]	; (800d9fc <USBD_LL_Init+0x94>)
 800d9bc:	2200      	movs	r2, #0
 800d9be:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800d9c0:	4b0e      	ldr	r3, [pc, #56]	; (800d9fc <USBD_LL_Init+0x94>)
 800d9c2:	2200      	movs	r2, #0
 800d9c4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800d9c6:	480d      	ldr	r0, [pc, #52]	; (800d9fc <USBD_LL_Init+0x94>)
 800d9c8:	f7f8 fc35 	bl	8006236 <HAL_PCD_Init>
 800d9cc:	4603      	mov	r3, r0
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	d001      	beq.n	800d9d6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800d9d2:	f7f4 ffc1 	bl	8002958 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800d9d6:	2180      	movs	r1, #128	; 0x80
 800d9d8:	4808      	ldr	r0, [pc, #32]	; (800d9fc <USBD_LL_Init+0x94>)
 800d9da:	f7f9 fe74 	bl	80076c6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800d9de:	2240      	movs	r2, #64	; 0x40
 800d9e0:	2100      	movs	r1, #0
 800d9e2:	4806      	ldr	r0, [pc, #24]	; (800d9fc <USBD_LL_Init+0x94>)
 800d9e4:	f7f9 fe28 	bl	8007638 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800d9e8:	2280      	movs	r2, #128	; 0x80
 800d9ea:	2101      	movs	r1, #1
 800d9ec:	4803      	ldr	r0, [pc, #12]	; (800d9fc <USBD_LL_Init+0x94>)
 800d9ee:	f7f9 fe23 	bl	8007638 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800d9f2:	2300      	movs	r3, #0
}
 800d9f4:	4618      	mov	r0, r3
 800d9f6:	3708      	adds	r7, #8
 800d9f8:	46bd      	mov	sp, r7
 800d9fa:	bd80      	pop	{r7, pc}
 800d9fc:	200016b8 	.word	0x200016b8

0800da00 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800da00:	b580      	push	{r7, lr}
 800da02:	b084      	sub	sp, #16
 800da04:	af00      	add	r7, sp, #0
 800da06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800da08:	2300      	movs	r3, #0
 800da0a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800da0c:	2300      	movs	r3, #0
 800da0e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800da16:	4618      	mov	r0, r3
 800da18:	f7f8 fd2a 	bl	8006470 <HAL_PCD_Start>
 800da1c:	4603      	mov	r3, r0
 800da1e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800da20:	7bfb      	ldrb	r3, [r7, #15]
 800da22:	4618      	mov	r0, r3
 800da24:	f000 f930 	bl	800dc88 <USBD_Get_USB_Status>
 800da28:	4603      	mov	r3, r0
 800da2a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800da2c:	7bbb      	ldrb	r3, [r7, #14]
}
 800da2e:	4618      	mov	r0, r3
 800da30:	3710      	adds	r7, #16
 800da32:	46bd      	mov	sp, r7
 800da34:	bd80      	pop	{r7, pc}

0800da36 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800da36:	b580      	push	{r7, lr}
 800da38:	b084      	sub	sp, #16
 800da3a:	af00      	add	r7, sp, #0
 800da3c:	6078      	str	r0, [r7, #4]
 800da3e:	4608      	mov	r0, r1
 800da40:	4611      	mov	r1, r2
 800da42:	461a      	mov	r2, r3
 800da44:	4603      	mov	r3, r0
 800da46:	70fb      	strb	r3, [r7, #3]
 800da48:	460b      	mov	r3, r1
 800da4a:	70bb      	strb	r3, [r7, #2]
 800da4c:	4613      	mov	r3, r2
 800da4e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800da50:	2300      	movs	r3, #0
 800da52:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800da54:	2300      	movs	r3, #0
 800da56:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800da5e:	78bb      	ldrb	r3, [r7, #2]
 800da60:	883a      	ldrh	r2, [r7, #0]
 800da62:	78f9      	ldrb	r1, [r7, #3]
 800da64:	f7f9 f9fb 	bl	8006e5e <HAL_PCD_EP_Open>
 800da68:	4603      	mov	r3, r0
 800da6a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800da6c:	7bfb      	ldrb	r3, [r7, #15]
 800da6e:	4618      	mov	r0, r3
 800da70:	f000 f90a 	bl	800dc88 <USBD_Get_USB_Status>
 800da74:	4603      	mov	r3, r0
 800da76:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800da78:	7bbb      	ldrb	r3, [r7, #14]
}
 800da7a:	4618      	mov	r0, r3
 800da7c:	3710      	adds	r7, #16
 800da7e:	46bd      	mov	sp, r7
 800da80:	bd80      	pop	{r7, pc}

0800da82 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800da82:	b580      	push	{r7, lr}
 800da84:	b084      	sub	sp, #16
 800da86:	af00      	add	r7, sp, #0
 800da88:	6078      	str	r0, [r7, #4]
 800da8a:	460b      	mov	r3, r1
 800da8c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800da8e:	2300      	movs	r3, #0
 800da90:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800da92:	2300      	movs	r3, #0
 800da94:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800da9c:	78fa      	ldrb	r2, [r7, #3]
 800da9e:	4611      	mov	r1, r2
 800daa0:	4618      	mov	r0, r3
 800daa2:	f7f9 fa44 	bl	8006f2e <HAL_PCD_EP_Close>
 800daa6:	4603      	mov	r3, r0
 800daa8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800daaa:	7bfb      	ldrb	r3, [r7, #15]
 800daac:	4618      	mov	r0, r3
 800daae:	f000 f8eb 	bl	800dc88 <USBD_Get_USB_Status>
 800dab2:	4603      	mov	r3, r0
 800dab4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dab6:	7bbb      	ldrb	r3, [r7, #14]
}
 800dab8:	4618      	mov	r0, r3
 800daba:	3710      	adds	r7, #16
 800dabc:	46bd      	mov	sp, r7
 800dabe:	bd80      	pop	{r7, pc}

0800dac0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dac0:	b580      	push	{r7, lr}
 800dac2:	b084      	sub	sp, #16
 800dac4:	af00      	add	r7, sp, #0
 800dac6:	6078      	str	r0, [r7, #4]
 800dac8:	460b      	mov	r3, r1
 800daca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dacc:	2300      	movs	r3, #0
 800dace:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dad0:	2300      	movs	r3, #0
 800dad2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800dada:	78fa      	ldrb	r2, [r7, #3]
 800dadc:	4611      	mov	r1, r2
 800dade:	4618      	mov	r0, r3
 800dae0:	f7f9 fb04 	bl	80070ec <HAL_PCD_EP_SetStall>
 800dae4:	4603      	mov	r3, r0
 800dae6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dae8:	7bfb      	ldrb	r3, [r7, #15]
 800daea:	4618      	mov	r0, r3
 800daec:	f000 f8cc 	bl	800dc88 <USBD_Get_USB_Status>
 800daf0:	4603      	mov	r3, r0
 800daf2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800daf4:	7bbb      	ldrb	r3, [r7, #14]
}
 800daf6:	4618      	mov	r0, r3
 800daf8:	3710      	adds	r7, #16
 800dafa:	46bd      	mov	sp, r7
 800dafc:	bd80      	pop	{r7, pc}

0800dafe <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dafe:	b580      	push	{r7, lr}
 800db00:	b084      	sub	sp, #16
 800db02:	af00      	add	r7, sp, #0
 800db04:	6078      	str	r0, [r7, #4]
 800db06:	460b      	mov	r3, r1
 800db08:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800db0a:	2300      	movs	r3, #0
 800db0c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800db0e:	2300      	movs	r3, #0
 800db10:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800db18:	78fa      	ldrb	r2, [r7, #3]
 800db1a:	4611      	mov	r1, r2
 800db1c:	4618      	mov	r0, r3
 800db1e:	f7f9 fb49 	bl	80071b4 <HAL_PCD_EP_ClrStall>
 800db22:	4603      	mov	r3, r0
 800db24:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800db26:	7bfb      	ldrb	r3, [r7, #15]
 800db28:	4618      	mov	r0, r3
 800db2a:	f000 f8ad 	bl	800dc88 <USBD_Get_USB_Status>
 800db2e:	4603      	mov	r3, r0
 800db30:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800db32:	7bbb      	ldrb	r3, [r7, #14]
}
 800db34:	4618      	mov	r0, r3
 800db36:	3710      	adds	r7, #16
 800db38:	46bd      	mov	sp, r7
 800db3a:	bd80      	pop	{r7, pc}

0800db3c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800db3c:	b480      	push	{r7}
 800db3e:	b085      	sub	sp, #20
 800db40:	af00      	add	r7, sp, #0
 800db42:	6078      	str	r0, [r7, #4]
 800db44:	460b      	mov	r3, r1
 800db46:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800db4e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800db50:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800db54:	2b00      	cmp	r3, #0
 800db56:	da0b      	bge.n	800db70 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800db58:	78fb      	ldrb	r3, [r7, #3]
 800db5a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800db5e:	68f9      	ldr	r1, [r7, #12]
 800db60:	4613      	mov	r3, r2
 800db62:	00db      	lsls	r3, r3, #3
 800db64:	4413      	add	r3, r2
 800db66:	009b      	lsls	r3, r3, #2
 800db68:	440b      	add	r3, r1
 800db6a:	333e      	adds	r3, #62	; 0x3e
 800db6c:	781b      	ldrb	r3, [r3, #0]
 800db6e:	e00b      	b.n	800db88 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800db70:	78fb      	ldrb	r3, [r7, #3]
 800db72:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800db76:	68f9      	ldr	r1, [r7, #12]
 800db78:	4613      	mov	r3, r2
 800db7a:	00db      	lsls	r3, r3, #3
 800db7c:	4413      	add	r3, r2
 800db7e:	009b      	lsls	r3, r3, #2
 800db80:	440b      	add	r3, r1
 800db82:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800db86:	781b      	ldrb	r3, [r3, #0]
  }
}
 800db88:	4618      	mov	r0, r3
 800db8a:	3714      	adds	r7, #20
 800db8c:	46bd      	mov	sp, r7
 800db8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db92:	4770      	bx	lr

0800db94 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800db94:	b580      	push	{r7, lr}
 800db96:	b084      	sub	sp, #16
 800db98:	af00      	add	r7, sp, #0
 800db9a:	6078      	str	r0, [r7, #4]
 800db9c:	460b      	mov	r3, r1
 800db9e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dba0:	2300      	movs	r3, #0
 800dba2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dba4:	2300      	movs	r3, #0
 800dba6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800dbae:	78fa      	ldrb	r2, [r7, #3]
 800dbb0:	4611      	mov	r1, r2
 800dbb2:	4618      	mov	r0, r3
 800dbb4:	f7f9 f92e 	bl	8006e14 <HAL_PCD_SetAddress>
 800dbb8:	4603      	mov	r3, r0
 800dbba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dbbc:	7bfb      	ldrb	r3, [r7, #15]
 800dbbe:	4618      	mov	r0, r3
 800dbc0:	f000 f862 	bl	800dc88 <USBD_Get_USB_Status>
 800dbc4:	4603      	mov	r3, r0
 800dbc6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dbc8:	7bbb      	ldrb	r3, [r7, #14]
}
 800dbca:	4618      	mov	r0, r3
 800dbcc:	3710      	adds	r7, #16
 800dbce:	46bd      	mov	sp, r7
 800dbd0:	bd80      	pop	{r7, pc}

0800dbd2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800dbd2:	b580      	push	{r7, lr}
 800dbd4:	b086      	sub	sp, #24
 800dbd6:	af00      	add	r7, sp, #0
 800dbd8:	60f8      	str	r0, [r7, #12]
 800dbda:	607a      	str	r2, [r7, #4]
 800dbdc:	603b      	str	r3, [r7, #0]
 800dbde:	460b      	mov	r3, r1
 800dbe0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dbe2:	2300      	movs	r3, #0
 800dbe4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dbe6:	2300      	movs	r3, #0
 800dbe8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800dbf0:	7af9      	ldrb	r1, [r7, #11]
 800dbf2:	683b      	ldr	r3, [r7, #0]
 800dbf4:	687a      	ldr	r2, [r7, #4]
 800dbf6:	f7f9 fa2f 	bl	8007058 <HAL_PCD_EP_Transmit>
 800dbfa:	4603      	mov	r3, r0
 800dbfc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dbfe:	7dfb      	ldrb	r3, [r7, #23]
 800dc00:	4618      	mov	r0, r3
 800dc02:	f000 f841 	bl	800dc88 <USBD_Get_USB_Status>
 800dc06:	4603      	mov	r3, r0
 800dc08:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800dc0a:	7dbb      	ldrb	r3, [r7, #22]
}
 800dc0c:	4618      	mov	r0, r3
 800dc0e:	3718      	adds	r7, #24
 800dc10:	46bd      	mov	sp, r7
 800dc12:	bd80      	pop	{r7, pc}

0800dc14 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800dc14:	b580      	push	{r7, lr}
 800dc16:	b086      	sub	sp, #24
 800dc18:	af00      	add	r7, sp, #0
 800dc1a:	60f8      	str	r0, [r7, #12]
 800dc1c:	607a      	str	r2, [r7, #4]
 800dc1e:	603b      	str	r3, [r7, #0]
 800dc20:	460b      	mov	r3, r1
 800dc22:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dc24:	2300      	movs	r3, #0
 800dc26:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dc28:	2300      	movs	r3, #0
 800dc2a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800dc2c:	68fb      	ldr	r3, [r7, #12]
 800dc2e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800dc32:	7af9      	ldrb	r1, [r7, #11]
 800dc34:	683b      	ldr	r3, [r7, #0]
 800dc36:	687a      	ldr	r2, [r7, #4]
 800dc38:	f7f9 f9c3 	bl	8006fc2 <HAL_PCD_EP_Receive>
 800dc3c:	4603      	mov	r3, r0
 800dc3e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dc40:	7dfb      	ldrb	r3, [r7, #23]
 800dc42:	4618      	mov	r0, r3
 800dc44:	f000 f820 	bl	800dc88 <USBD_Get_USB_Status>
 800dc48:	4603      	mov	r3, r0
 800dc4a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800dc4c:	7dbb      	ldrb	r3, [r7, #22]
}
 800dc4e:	4618      	mov	r0, r3
 800dc50:	3718      	adds	r7, #24
 800dc52:	46bd      	mov	sp, r7
 800dc54:	bd80      	pop	{r7, pc}
	...

0800dc58 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800dc58:	b480      	push	{r7}
 800dc5a:	b083      	sub	sp, #12
 800dc5c:	af00      	add	r7, sp, #0
 800dc5e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 800dc60:	4b03      	ldr	r3, [pc, #12]	; (800dc70 <USBD_static_malloc+0x18>)
}
 800dc62:	4618      	mov	r0, r3
 800dc64:	370c      	adds	r7, #12
 800dc66:	46bd      	mov	sp, r7
 800dc68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc6c:	4770      	bx	lr
 800dc6e:	bf00      	nop
 800dc70:	20001bc4 	.word	0x20001bc4

0800dc74 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800dc74:	b480      	push	{r7}
 800dc76:	b083      	sub	sp, #12
 800dc78:	af00      	add	r7, sp, #0
 800dc7a:	6078      	str	r0, [r7, #4]

}
 800dc7c:	bf00      	nop
 800dc7e:	370c      	adds	r7, #12
 800dc80:	46bd      	mov	sp, r7
 800dc82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc86:	4770      	bx	lr

0800dc88 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800dc88:	b480      	push	{r7}
 800dc8a:	b085      	sub	sp, #20
 800dc8c:	af00      	add	r7, sp, #0
 800dc8e:	4603      	mov	r3, r0
 800dc90:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dc92:	2300      	movs	r3, #0
 800dc94:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800dc96:	79fb      	ldrb	r3, [r7, #7]
 800dc98:	2b03      	cmp	r3, #3
 800dc9a:	d817      	bhi.n	800dccc <USBD_Get_USB_Status+0x44>
 800dc9c:	a201      	add	r2, pc, #4	; (adr r2, 800dca4 <USBD_Get_USB_Status+0x1c>)
 800dc9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dca2:	bf00      	nop
 800dca4:	0800dcb5 	.word	0x0800dcb5
 800dca8:	0800dcbb 	.word	0x0800dcbb
 800dcac:	0800dcc1 	.word	0x0800dcc1
 800dcb0:	0800dcc7 	.word	0x0800dcc7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800dcb4:	2300      	movs	r3, #0
 800dcb6:	73fb      	strb	r3, [r7, #15]
    break;
 800dcb8:	e00b      	b.n	800dcd2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800dcba:	2303      	movs	r3, #3
 800dcbc:	73fb      	strb	r3, [r7, #15]
    break;
 800dcbe:	e008      	b.n	800dcd2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800dcc0:	2301      	movs	r3, #1
 800dcc2:	73fb      	strb	r3, [r7, #15]
    break;
 800dcc4:	e005      	b.n	800dcd2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800dcc6:	2303      	movs	r3, #3
 800dcc8:	73fb      	strb	r3, [r7, #15]
    break;
 800dcca:	e002      	b.n	800dcd2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800dccc:	2303      	movs	r3, #3
 800dcce:	73fb      	strb	r3, [r7, #15]
    break;
 800dcd0:	bf00      	nop
  }
  return usb_status;
 800dcd2:	7bfb      	ldrb	r3, [r7, #15]
}
 800dcd4:	4618      	mov	r0, r3
 800dcd6:	3714      	adds	r7, #20
 800dcd8:	46bd      	mov	sp, r7
 800dcda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcde:	4770      	bx	lr

0800dce0 <__errno>:
 800dce0:	4b01      	ldr	r3, [pc, #4]	; (800dce8 <__errno+0x8>)
 800dce2:	6818      	ldr	r0, [r3, #0]
 800dce4:	4770      	bx	lr
 800dce6:	bf00      	nop
 800dce8:	20000280 	.word	0x20000280

0800dcec <__libc_init_array>:
 800dcec:	b570      	push	{r4, r5, r6, lr}
 800dcee:	4d0d      	ldr	r5, [pc, #52]	; (800dd24 <__libc_init_array+0x38>)
 800dcf0:	4c0d      	ldr	r4, [pc, #52]	; (800dd28 <__libc_init_array+0x3c>)
 800dcf2:	1b64      	subs	r4, r4, r5
 800dcf4:	10a4      	asrs	r4, r4, #2
 800dcf6:	2600      	movs	r6, #0
 800dcf8:	42a6      	cmp	r6, r4
 800dcfa:	d109      	bne.n	800dd10 <__libc_init_array+0x24>
 800dcfc:	4d0b      	ldr	r5, [pc, #44]	; (800dd2c <__libc_init_array+0x40>)
 800dcfe:	4c0c      	ldr	r4, [pc, #48]	; (800dd30 <__libc_init_array+0x44>)
 800dd00:	f001 f816 	bl	800ed30 <_init>
 800dd04:	1b64      	subs	r4, r4, r5
 800dd06:	10a4      	asrs	r4, r4, #2
 800dd08:	2600      	movs	r6, #0
 800dd0a:	42a6      	cmp	r6, r4
 800dd0c:	d105      	bne.n	800dd1a <__libc_init_array+0x2e>
 800dd0e:	bd70      	pop	{r4, r5, r6, pc}
 800dd10:	f855 3b04 	ldr.w	r3, [r5], #4
 800dd14:	4798      	blx	r3
 800dd16:	3601      	adds	r6, #1
 800dd18:	e7ee      	b.n	800dcf8 <__libc_init_array+0xc>
 800dd1a:	f855 3b04 	ldr.w	r3, [r5], #4
 800dd1e:	4798      	blx	r3
 800dd20:	3601      	adds	r6, #1
 800dd22:	e7f2      	b.n	800dd0a <__libc_init_array+0x1e>
 800dd24:	08030f34 	.word	0x08030f34
 800dd28:	08030f34 	.word	0x08030f34
 800dd2c:	08030f34 	.word	0x08030f34
 800dd30:	08030f38 	.word	0x08030f38

0800dd34 <memset>:
 800dd34:	4402      	add	r2, r0
 800dd36:	4603      	mov	r3, r0
 800dd38:	4293      	cmp	r3, r2
 800dd3a:	d100      	bne.n	800dd3e <memset+0xa>
 800dd3c:	4770      	bx	lr
 800dd3e:	f803 1b01 	strb.w	r1, [r3], #1
 800dd42:	e7f9      	b.n	800dd38 <memset+0x4>

0800dd44 <__sfputc_r>:
 800dd44:	6893      	ldr	r3, [r2, #8]
 800dd46:	3b01      	subs	r3, #1
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	b410      	push	{r4}
 800dd4c:	6093      	str	r3, [r2, #8]
 800dd4e:	da08      	bge.n	800dd62 <__sfputc_r+0x1e>
 800dd50:	6994      	ldr	r4, [r2, #24]
 800dd52:	42a3      	cmp	r3, r4
 800dd54:	db01      	blt.n	800dd5a <__sfputc_r+0x16>
 800dd56:	290a      	cmp	r1, #10
 800dd58:	d103      	bne.n	800dd62 <__sfputc_r+0x1e>
 800dd5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dd5e:	f000 bb17 	b.w	800e390 <__swbuf_r>
 800dd62:	6813      	ldr	r3, [r2, #0]
 800dd64:	1c58      	adds	r0, r3, #1
 800dd66:	6010      	str	r0, [r2, #0]
 800dd68:	7019      	strb	r1, [r3, #0]
 800dd6a:	4608      	mov	r0, r1
 800dd6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dd70:	4770      	bx	lr

0800dd72 <__sfputs_r>:
 800dd72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd74:	4606      	mov	r6, r0
 800dd76:	460f      	mov	r7, r1
 800dd78:	4614      	mov	r4, r2
 800dd7a:	18d5      	adds	r5, r2, r3
 800dd7c:	42ac      	cmp	r4, r5
 800dd7e:	d101      	bne.n	800dd84 <__sfputs_r+0x12>
 800dd80:	2000      	movs	r0, #0
 800dd82:	e007      	b.n	800dd94 <__sfputs_r+0x22>
 800dd84:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dd88:	463a      	mov	r2, r7
 800dd8a:	4630      	mov	r0, r6
 800dd8c:	f7ff ffda 	bl	800dd44 <__sfputc_r>
 800dd90:	1c43      	adds	r3, r0, #1
 800dd92:	d1f3      	bne.n	800dd7c <__sfputs_r+0xa>
 800dd94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800dd98 <_vfiprintf_r>:
 800dd98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd9c:	460d      	mov	r5, r1
 800dd9e:	b09d      	sub	sp, #116	; 0x74
 800dda0:	4614      	mov	r4, r2
 800dda2:	4698      	mov	r8, r3
 800dda4:	4606      	mov	r6, r0
 800dda6:	b118      	cbz	r0, 800ddb0 <_vfiprintf_r+0x18>
 800dda8:	6983      	ldr	r3, [r0, #24]
 800ddaa:	b90b      	cbnz	r3, 800ddb0 <_vfiprintf_r+0x18>
 800ddac:	f000 fcca 	bl	800e744 <__sinit>
 800ddb0:	4b89      	ldr	r3, [pc, #548]	; (800dfd8 <_vfiprintf_r+0x240>)
 800ddb2:	429d      	cmp	r5, r3
 800ddb4:	d11b      	bne.n	800ddee <_vfiprintf_r+0x56>
 800ddb6:	6875      	ldr	r5, [r6, #4]
 800ddb8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ddba:	07d9      	lsls	r1, r3, #31
 800ddbc:	d405      	bmi.n	800ddca <_vfiprintf_r+0x32>
 800ddbe:	89ab      	ldrh	r3, [r5, #12]
 800ddc0:	059a      	lsls	r2, r3, #22
 800ddc2:	d402      	bmi.n	800ddca <_vfiprintf_r+0x32>
 800ddc4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ddc6:	f000 fd5b 	bl	800e880 <__retarget_lock_acquire_recursive>
 800ddca:	89ab      	ldrh	r3, [r5, #12]
 800ddcc:	071b      	lsls	r3, r3, #28
 800ddce:	d501      	bpl.n	800ddd4 <_vfiprintf_r+0x3c>
 800ddd0:	692b      	ldr	r3, [r5, #16]
 800ddd2:	b9eb      	cbnz	r3, 800de10 <_vfiprintf_r+0x78>
 800ddd4:	4629      	mov	r1, r5
 800ddd6:	4630      	mov	r0, r6
 800ddd8:	f000 fb2c 	bl	800e434 <__swsetup_r>
 800dddc:	b1c0      	cbz	r0, 800de10 <_vfiprintf_r+0x78>
 800ddde:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dde0:	07dc      	lsls	r4, r3, #31
 800dde2:	d50e      	bpl.n	800de02 <_vfiprintf_r+0x6a>
 800dde4:	f04f 30ff 	mov.w	r0, #4294967295
 800dde8:	b01d      	add	sp, #116	; 0x74
 800ddea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ddee:	4b7b      	ldr	r3, [pc, #492]	; (800dfdc <_vfiprintf_r+0x244>)
 800ddf0:	429d      	cmp	r5, r3
 800ddf2:	d101      	bne.n	800ddf8 <_vfiprintf_r+0x60>
 800ddf4:	68b5      	ldr	r5, [r6, #8]
 800ddf6:	e7df      	b.n	800ddb8 <_vfiprintf_r+0x20>
 800ddf8:	4b79      	ldr	r3, [pc, #484]	; (800dfe0 <_vfiprintf_r+0x248>)
 800ddfa:	429d      	cmp	r5, r3
 800ddfc:	bf08      	it	eq
 800ddfe:	68f5      	ldreq	r5, [r6, #12]
 800de00:	e7da      	b.n	800ddb8 <_vfiprintf_r+0x20>
 800de02:	89ab      	ldrh	r3, [r5, #12]
 800de04:	0598      	lsls	r0, r3, #22
 800de06:	d4ed      	bmi.n	800dde4 <_vfiprintf_r+0x4c>
 800de08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800de0a:	f000 fd3a 	bl	800e882 <__retarget_lock_release_recursive>
 800de0e:	e7e9      	b.n	800dde4 <_vfiprintf_r+0x4c>
 800de10:	2300      	movs	r3, #0
 800de12:	9309      	str	r3, [sp, #36]	; 0x24
 800de14:	2320      	movs	r3, #32
 800de16:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800de1a:	f8cd 800c 	str.w	r8, [sp, #12]
 800de1e:	2330      	movs	r3, #48	; 0x30
 800de20:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800dfe4 <_vfiprintf_r+0x24c>
 800de24:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800de28:	f04f 0901 	mov.w	r9, #1
 800de2c:	4623      	mov	r3, r4
 800de2e:	469a      	mov	sl, r3
 800de30:	f813 2b01 	ldrb.w	r2, [r3], #1
 800de34:	b10a      	cbz	r2, 800de3a <_vfiprintf_r+0xa2>
 800de36:	2a25      	cmp	r2, #37	; 0x25
 800de38:	d1f9      	bne.n	800de2e <_vfiprintf_r+0x96>
 800de3a:	ebba 0b04 	subs.w	fp, sl, r4
 800de3e:	d00b      	beq.n	800de58 <_vfiprintf_r+0xc0>
 800de40:	465b      	mov	r3, fp
 800de42:	4622      	mov	r2, r4
 800de44:	4629      	mov	r1, r5
 800de46:	4630      	mov	r0, r6
 800de48:	f7ff ff93 	bl	800dd72 <__sfputs_r>
 800de4c:	3001      	adds	r0, #1
 800de4e:	f000 80aa 	beq.w	800dfa6 <_vfiprintf_r+0x20e>
 800de52:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800de54:	445a      	add	r2, fp
 800de56:	9209      	str	r2, [sp, #36]	; 0x24
 800de58:	f89a 3000 	ldrb.w	r3, [sl]
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	f000 80a2 	beq.w	800dfa6 <_vfiprintf_r+0x20e>
 800de62:	2300      	movs	r3, #0
 800de64:	f04f 32ff 	mov.w	r2, #4294967295
 800de68:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800de6c:	f10a 0a01 	add.w	sl, sl, #1
 800de70:	9304      	str	r3, [sp, #16]
 800de72:	9307      	str	r3, [sp, #28]
 800de74:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800de78:	931a      	str	r3, [sp, #104]	; 0x68
 800de7a:	4654      	mov	r4, sl
 800de7c:	2205      	movs	r2, #5
 800de7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de82:	4858      	ldr	r0, [pc, #352]	; (800dfe4 <_vfiprintf_r+0x24c>)
 800de84:	f7f2 f9ac 	bl	80001e0 <memchr>
 800de88:	9a04      	ldr	r2, [sp, #16]
 800de8a:	b9d8      	cbnz	r0, 800dec4 <_vfiprintf_r+0x12c>
 800de8c:	06d1      	lsls	r1, r2, #27
 800de8e:	bf44      	itt	mi
 800de90:	2320      	movmi	r3, #32
 800de92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800de96:	0713      	lsls	r3, r2, #28
 800de98:	bf44      	itt	mi
 800de9a:	232b      	movmi	r3, #43	; 0x2b
 800de9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dea0:	f89a 3000 	ldrb.w	r3, [sl]
 800dea4:	2b2a      	cmp	r3, #42	; 0x2a
 800dea6:	d015      	beq.n	800ded4 <_vfiprintf_r+0x13c>
 800dea8:	9a07      	ldr	r2, [sp, #28]
 800deaa:	4654      	mov	r4, sl
 800deac:	2000      	movs	r0, #0
 800deae:	f04f 0c0a 	mov.w	ip, #10
 800deb2:	4621      	mov	r1, r4
 800deb4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800deb8:	3b30      	subs	r3, #48	; 0x30
 800deba:	2b09      	cmp	r3, #9
 800debc:	d94e      	bls.n	800df5c <_vfiprintf_r+0x1c4>
 800debe:	b1b0      	cbz	r0, 800deee <_vfiprintf_r+0x156>
 800dec0:	9207      	str	r2, [sp, #28]
 800dec2:	e014      	b.n	800deee <_vfiprintf_r+0x156>
 800dec4:	eba0 0308 	sub.w	r3, r0, r8
 800dec8:	fa09 f303 	lsl.w	r3, r9, r3
 800decc:	4313      	orrs	r3, r2
 800dece:	9304      	str	r3, [sp, #16]
 800ded0:	46a2      	mov	sl, r4
 800ded2:	e7d2      	b.n	800de7a <_vfiprintf_r+0xe2>
 800ded4:	9b03      	ldr	r3, [sp, #12]
 800ded6:	1d19      	adds	r1, r3, #4
 800ded8:	681b      	ldr	r3, [r3, #0]
 800deda:	9103      	str	r1, [sp, #12]
 800dedc:	2b00      	cmp	r3, #0
 800dede:	bfbb      	ittet	lt
 800dee0:	425b      	neglt	r3, r3
 800dee2:	f042 0202 	orrlt.w	r2, r2, #2
 800dee6:	9307      	strge	r3, [sp, #28]
 800dee8:	9307      	strlt	r3, [sp, #28]
 800deea:	bfb8      	it	lt
 800deec:	9204      	strlt	r2, [sp, #16]
 800deee:	7823      	ldrb	r3, [r4, #0]
 800def0:	2b2e      	cmp	r3, #46	; 0x2e
 800def2:	d10c      	bne.n	800df0e <_vfiprintf_r+0x176>
 800def4:	7863      	ldrb	r3, [r4, #1]
 800def6:	2b2a      	cmp	r3, #42	; 0x2a
 800def8:	d135      	bne.n	800df66 <_vfiprintf_r+0x1ce>
 800defa:	9b03      	ldr	r3, [sp, #12]
 800defc:	1d1a      	adds	r2, r3, #4
 800defe:	681b      	ldr	r3, [r3, #0]
 800df00:	9203      	str	r2, [sp, #12]
 800df02:	2b00      	cmp	r3, #0
 800df04:	bfb8      	it	lt
 800df06:	f04f 33ff 	movlt.w	r3, #4294967295
 800df0a:	3402      	adds	r4, #2
 800df0c:	9305      	str	r3, [sp, #20]
 800df0e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800dff4 <_vfiprintf_r+0x25c>
 800df12:	7821      	ldrb	r1, [r4, #0]
 800df14:	2203      	movs	r2, #3
 800df16:	4650      	mov	r0, sl
 800df18:	f7f2 f962 	bl	80001e0 <memchr>
 800df1c:	b140      	cbz	r0, 800df30 <_vfiprintf_r+0x198>
 800df1e:	2340      	movs	r3, #64	; 0x40
 800df20:	eba0 000a 	sub.w	r0, r0, sl
 800df24:	fa03 f000 	lsl.w	r0, r3, r0
 800df28:	9b04      	ldr	r3, [sp, #16]
 800df2a:	4303      	orrs	r3, r0
 800df2c:	3401      	adds	r4, #1
 800df2e:	9304      	str	r3, [sp, #16]
 800df30:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df34:	482c      	ldr	r0, [pc, #176]	; (800dfe8 <_vfiprintf_r+0x250>)
 800df36:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800df3a:	2206      	movs	r2, #6
 800df3c:	f7f2 f950 	bl	80001e0 <memchr>
 800df40:	2800      	cmp	r0, #0
 800df42:	d03f      	beq.n	800dfc4 <_vfiprintf_r+0x22c>
 800df44:	4b29      	ldr	r3, [pc, #164]	; (800dfec <_vfiprintf_r+0x254>)
 800df46:	bb1b      	cbnz	r3, 800df90 <_vfiprintf_r+0x1f8>
 800df48:	9b03      	ldr	r3, [sp, #12]
 800df4a:	3307      	adds	r3, #7
 800df4c:	f023 0307 	bic.w	r3, r3, #7
 800df50:	3308      	adds	r3, #8
 800df52:	9303      	str	r3, [sp, #12]
 800df54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df56:	443b      	add	r3, r7
 800df58:	9309      	str	r3, [sp, #36]	; 0x24
 800df5a:	e767      	b.n	800de2c <_vfiprintf_r+0x94>
 800df5c:	fb0c 3202 	mla	r2, ip, r2, r3
 800df60:	460c      	mov	r4, r1
 800df62:	2001      	movs	r0, #1
 800df64:	e7a5      	b.n	800deb2 <_vfiprintf_r+0x11a>
 800df66:	2300      	movs	r3, #0
 800df68:	3401      	adds	r4, #1
 800df6a:	9305      	str	r3, [sp, #20]
 800df6c:	4619      	mov	r1, r3
 800df6e:	f04f 0c0a 	mov.w	ip, #10
 800df72:	4620      	mov	r0, r4
 800df74:	f810 2b01 	ldrb.w	r2, [r0], #1
 800df78:	3a30      	subs	r2, #48	; 0x30
 800df7a:	2a09      	cmp	r2, #9
 800df7c:	d903      	bls.n	800df86 <_vfiprintf_r+0x1ee>
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d0c5      	beq.n	800df0e <_vfiprintf_r+0x176>
 800df82:	9105      	str	r1, [sp, #20]
 800df84:	e7c3      	b.n	800df0e <_vfiprintf_r+0x176>
 800df86:	fb0c 2101 	mla	r1, ip, r1, r2
 800df8a:	4604      	mov	r4, r0
 800df8c:	2301      	movs	r3, #1
 800df8e:	e7f0      	b.n	800df72 <_vfiprintf_r+0x1da>
 800df90:	ab03      	add	r3, sp, #12
 800df92:	9300      	str	r3, [sp, #0]
 800df94:	462a      	mov	r2, r5
 800df96:	4b16      	ldr	r3, [pc, #88]	; (800dff0 <_vfiprintf_r+0x258>)
 800df98:	a904      	add	r1, sp, #16
 800df9a:	4630      	mov	r0, r6
 800df9c:	f3af 8000 	nop.w
 800dfa0:	4607      	mov	r7, r0
 800dfa2:	1c78      	adds	r0, r7, #1
 800dfa4:	d1d6      	bne.n	800df54 <_vfiprintf_r+0x1bc>
 800dfa6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dfa8:	07d9      	lsls	r1, r3, #31
 800dfaa:	d405      	bmi.n	800dfb8 <_vfiprintf_r+0x220>
 800dfac:	89ab      	ldrh	r3, [r5, #12]
 800dfae:	059a      	lsls	r2, r3, #22
 800dfb0:	d402      	bmi.n	800dfb8 <_vfiprintf_r+0x220>
 800dfb2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dfb4:	f000 fc65 	bl	800e882 <__retarget_lock_release_recursive>
 800dfb8:	89ab      	ldrh	r3, [r5, #12]
 800dfba:	065b      	lsls	r3, r3, #25
 800dfbc:	f53f af12 	bmi.w	800dde4 <_vfiprintf_r+0x4c>
 800dfc0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dfc2:	e711      	b.n	800dde8 <_vfiprintf_r+0x50>
 800dfc4:	ab03      	add	r3, sp, #12
 800dfc6:	9300      	str	r3, [sp, #0]
 800dfc8:	462a      	mov	r2, r5
 800dfca:	4b09      	ldr	r3, [pc, #36]	; (800dff0 <_vfiprintf_r+0x258>)
 800dfcc:	a904      	add	r1, sp, #16
 800dfce:	4630      	mov	r0, r6
 800dfd0:	f000 f88a 	bl	800e0e8 <_printf_i>
 800dfd4:	e7e4      	b.n	800dfa0 <_vfiprintf_r+0x208>
 800dfd6:	bf00      	nop
 800dfd8:	08030eec 	.word	0x08030eec
 800dfdc:	08030f0c 	.word	0x08030f0c
 800dfe0:	08030ecc 	.word	0x08030ecc
 800dfe4:	08030e98 	.word	0x08030e98
 800dfe8:	08030ea2 	.word	0x08030ea2
 800dfec:	00000000 	.word	0x00000000
 800dff0:	0800dd73 	.word	0x0800dd73
 800dff4:	08030e9e 	.word	0x08030e9e

0800dff8 <vfiprintf>:
 800dff8:	4613      	mov	r3, r2
 800dffa:	460a      	mov	r2, r1
 800dffc:	4601      	mov	r1, r0
 800dffe:	4802      	ldr	r0, [pc, #8]	; (800e008 <vfiprintf+0x10>)
 800e000:	6800      	ldr	r0, [r0, #0]
 800e002:	f7ff bec9 	b.w	800dd98 <_vfiprintf_r>
 800e006:	bf00      	nop
 800e008:	20000280 	.word	0x20000280

0800e00c <_printf_common>:
 800e00c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e010:	4616      	mov	r6, r2
 800e012:	4699      	mov	r9, r3
 800e014:	688a      	ldr	r2, [r1, #8]
 800e016:	690b      	ldr	r3, [r1, #16]
 800e018:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e01c:	4293      	cmp	r3, r2
 800e01e:	bfb8      	it	lt
 800e020:	4613      	movlt	r3, r2
 800e022:	6033      	str	r3, [r6, #0]
 800e024:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e028:	4607      	mov	r7, r0
 800e02a:	460c      	mov	r4, r1
 800e02c:	b10a      	cbz	r2, 800e032 <_printf_common+0x26>
 800e02e:	3301      	adds	r3, #1
 800e030:	6033      	str	r3, [r6, #0]
 800e032:	6823      	ldr	r3, [r4, #0]
 800e034:	0699      	lsls	r1, r3, #26
 800e036:	bf42      	ittt	mi
 800e038:	6833      	ldrmi	r3, [r6, #0]
 800e03a:	3302      	addmi	r3, #2
 800e03c:	6033      	strmi	r3, [r6, #0]
 800e03e:	6825      	ldr	r5, [r4, #0]
 800e040:	f015 0506 	ands.w	r5, r5, #6
 800e044:	d106      	bne.n	800e054 <_printf_common+0x48>
 800e046:	f104 0a19 	add.w	sl, r4, #25
 800e04a:	68e3      	ldr	r3, [r4, #12]
 800e04c:	6832      	ldr	r2, [r6, #0]
 800e04e:	1a9b      	subs	r3, r3, r2
 800e050:	42ab      	cmp	r3, r5
 800e052:	dc26      	bgt.n	800e0a2 <_printf_common+0x96>
 800e054:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e058:	1e13      	subs	r3, r2, #0
 800e05a:	6822      	ldr	r2, [r4, #0]
 800e05c:	bf18      	it	ne
 800e05e:	2301      	movne	r3, #1
 800e060:	0692      	lsls	r2, r2, #26
 800e062:	d42b      	bmi.n	800e0bc <_printf_common+0xb0>
 800e064:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e068:	4649      	mov	r1, r9
 800e06a:	4638      	mov	r0, r7
 800e06c:	47c0      	blx	r8
 800e06e:	3001      	adds	r0, #1
 800e070:	d01e      	beq.n	800e0b0 <_printf_common+0xa4>
 800e072:	6823      	ldr	r3, [r4, #0]
 800e074:	68e5      	ldr	r5, [r4, #12]
 800e076:	6832      	ldr	r2, [r6, #0]
 800e078:	f003 0306 	and.w	r3, r3, #6
 800e07c:	2b04      	cmp	r3, #4
 800e07e:	bf08      	it	eq
 800e080:	1aad      	subeq	r5, r5, r2
 800e082:	68a3      	ldr	r3, [r4, #8]
 800e084:	6922      	ldr	r2, [r4, #16]
 800e086:	bf0c      	ite	eq
 800e088:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e08c:	2500      	movne	r5, #0
 800e08e:	4293      	cmp	r3, r2
 800e090:	bfc4      	itt	gt
 800e092:	1a9b      	subgt	r3, r3, r2
 800e094:	18ed      	addgt	r5, r5, r3
 800e096:	2600      	movs	r6, #0
 800e098:	341a      	adds	r4, #26
 800e09a:	42b5      	cmp	r5, r6
 800e09c:	d11a      	bne.n	800e0d4 <_printf_common+0xc8>
 800e09e:	2000      	movs	r0, #0
 800e0a0:	e008      	b.n	800e0b4 <_printf_common+0xa8>
 800e0a2:	2301      	movs	r3, #1
 800e0a4:	4652      	mov	r2, sl
 800e0a6:	4649      	mov	r1, r9
 800e0a8:	4638      	mov	r0, r7
 800e0aa:	47c0      	blx	r8
 800e0ac:	3001      	adds	r0, #1
 800e0ae:	d103      	bne.n	800e0b8 <_printf_common+0xac>
 800e0b0:	f04f 30ff 	mov.w	r0, #4294967295
 800e0b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e0b8:	3501      	adds	r5, #1
 800e0ba:	e7c6      	b.n	800e04a <_printf_common+0x3e>
 800e0bc:	18e1      	adds	r1, r4, r3
 800e0be:	1c5a      	adds	r2, r3, #1
 800e0c0:	2030      	movs	r0, #48	; 0x30
 800e0c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e0c6:	4422      	add	r2, r4
 800e0c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e0cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e0d0:	3302      	adds	r3, #2
 800e0d2:	e7c7      	b.n	800e064 <_printf_common+0x58>
 800e0d4:	2301      	movs	r3, #1
 800e0d6:	4622      	mov	r2, r4
 800e0d8:	4649      	mov	r1, r9
 800e0da:	4638      	mov	r0, r7
 800e0dc:	47c0      	blx	r8
 800e0de:	3001      	adds	r0, #1
 800e0e0:	d0e6      	beq.n	800e0b0 <_printf_common+0xa4>
 800e0e2:	3601      	adds	r6, #1
 800e0e4:	e7d9      	b.n	800e09a <_printf_common+0x8e>
	...

0800e0e8 <_printf_i>:
 800e0e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e0ec:	7e0f      	ldrb	r7, [r1, #24]
 800e0ee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e0f0:	2f78      	cmp	r7, #120	; 0x78
 800e0f2:	4691      	mov	r9, r2
 800e0f4:	4680      	mov	r8, r0
 800e0f6:	460c      	mov	r4, r1
 800e0f8:	469a      	mov	sl, r3
 800e0fa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e0fe:	d807      	bhi.n	800e110 <_printf_i+0x28>
 800e100:	2f62      	cmp	r7, #98	; 0x62
 800e102:	d80a      	bhi.n	800e11a <_printf_i+0x32>
 800e104:	2f00      	cmp	r7, #0
 800e106:	f000 80d8 	beq.w	800e2ba <_printf_i+0x1d2>
 800e10a:	2f58      	cmp	r7, #88	; 0x58
 800e10c:	f000 80a3 	beq.w	800e256 <_printf_i+0x16e>
 800e110:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e114:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e118:	e03a      	b.n	800e190 <_printf_i+0xa8>
 800e11a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e11e:	2b15      	cmp	r3, #21
 800e120:	d8f6      	bhi.n	800e110 <_printf_i+0x28>
 800e122:	a101      	add	r1, pc, #4	; (adr r1, 800e128 <_printf_i+0x40>)
 800e124:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e128:	0800e181 	.word	0x0800e181
 800e12c:	0800e195 	.word	0x0800e195
 800e130:	0800e111 	.word	0x0800e111
 800e134:	0800e111 	.word	0x0800e111
 800e138:	0800e111 	.word	0x0800e111
 800e13c:	0800e111 	.word	0x0800e111
 800e140:	0800e195 	.word	0x0800e195
 800e144:	0800e111 	.word	0x0800e111
 800e148:	0800e111 	.word	0x0800e111
 800e14c:	0800e111 	.word	0x0800e111
 800e150:	0800e111 	.word	0x0800e111
 800e154:	0800e2a1 	.word	0x0800e2a1
 800e158:	0800e1c5 	.word	0x0800e1c5
 800e15c:	0800e283 	.word	0x0800e283
 800e160:	0800e111 	.word	0x0800e111
 800e164:	0800e111 	.word	0x0800e111
 800e168:	0800e2c3 	.word	0x0800e2c3
 800e16c:	0800e111 	.word	0x0800e111
 800e170:	0800e1c5 	.word	0x0800e1c5
 800e174:	0800e111 	.word	0x0800e111
 800e178:	0800e111 	.word	0x0800e111
 800e17c:	0800e28b 	.word	0x0800e28b
 800e180:	682b      	ldr	r3, [r5, #0]
 800e182:	1d1a      	adds	r2, r3, #4
 800e184:	681b      	ldr	r3, [r3, #0]
 800e186:	602a      	str	r2, [r5, #0]
 800e188:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e18c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e190:	2301      	movs	r3, #1
 800e192:	e0a3      	b.n	800e2dc <_printf_i+0x1f4>
 800e194:	6820      	ldr	r0, [r4, #0]
 800e196:	6829      	ldr	r1, [r5, #0]
 800e198:	0606      	lsls	r6, r0, #24
 800e19a:	f101 0304 	add.w	r3, r1, #4
 800e19e:	d50a      	bpl.n	800e1b6 <_printf_i+0xce>
 800e1a0:	680e      	ldr	r6, [r1, #0]
 800e1a2:	602b      	str	r3, [r5, #0]
 800e1a4:	2e00      	cmp	r6, #0
 800e1a6:	da03      	bge.n	800e1b0 <_printf_i+0xc8>
 800e1a8:	232d      	movs	r3, #45	; 0x2d
 800e1aa:	4276      	negs	r6, r6
 800e1ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e1b0:	485e      	ldr	r0, [pc, #376]	; (800e32c <_printf_i+0x244>)
 800e1b2:	230a      	movs	r3, #10
 800e1b4:	e019      	b.n	800e1ea <_printf_i+0x102>
 800e1b6:	680e      	ldr	r6, [r1, #0]
 800e1b8:	602b      	str	r3, [r5, #0]
 800e1ba:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e1be:	bf18      	it	ne
 800e1c0:	b236      	sxthne	r6, r6
 800e1c2:	e7ef      	b.n	800e1a4 <_printf_i+0xbc>
 800e1c4:	682b      	ldr	r3, [r5, #0]
 800e1c6:	6820      	ldr	r0, [r4, #0]
 800e1c8:	1d19      	adds	r1, r3, #4
 800e1ca:	6029      	str	r1, [r5, #0]
 800e1cc:	0601      	lsls	r1, r0, #24
 800e1ce:	d501      	bpl.n	800e1d4 <_printf_i+0xec>
 800e1d0:	681e      	ldr	r6, [r3, #0]
 800e1d2:	e002      	b.n	800e1da <_printf_i+0xf2>
 800e1d4:	0646      	lsls	r6, r0, #25
 800e1d6:	d5fb      	bpl.n	800e1d0 <_printf_i+0xe8>
 800e1d8:	881e      	ldrh	r6, [r3, #0]
 800e1da:	4854      	ldr	r0, [pc, #336]	; (800e32c <_printf_i+0x244>)
 800e1dc:	2f6f      	cmp	r7, #111	; 0x6f
 800e1de:	bf0c      	ite	eq
 800e1e0:	2308      	moveq	r3, #8
 800e1e2:	230a      	movne	r3, #10
 800e1e4:	2100      	movs	r1, #0
 800e1e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e1ea:	6865      	ldr	r5, [r4, #4]
 800e1ec:	60a5      	str	r5, [r4, #8]
 800e1ee:	2d00      	cmp	r5, #0
 800e1f0:	bfa2      	ittt	ge
 800e1f2:	6821      	ldrge	r1, [r4, #0]
 800e1f4:	f021 0104 	bicge.w	r1, r1, #4
 800e1f8:	6021      	strge	r1, [r4, #0]
 800e1fa:	b90e      	cbnz	r6, 800e200 <_printf_i+0x118>
 800e1fc:	2d00      	cmp	r5, #0
 800e1fe:	d04d      	beq.n	800e29c <_printf_i+0x1b4>
 800e200:	4615      	mov	r5, r2
 800e202:	fbb6 f1f3 	udiv	r1, r6, r3
 800e206:	fb03 6711 	mls	r7, r3, r1, r6
 800e20a:	5dc7      	ldrb	r7, [r0, r7]
 800e20c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e210:	4637      	mov	r7, r6
 800e212:	42bb      	cmp	r3, r7
 800e214:	460e      	mov	r6, r1
 800e216:	d9f4      	bls.n	800e202 <_printf_i+0x11a>
 800e218:	2b08      	cmp	r3, #8
 800e21a:	d10b      	bne.n	800e234 <_printf_i+0x14c>
 800e21c:	6823      	ldr	r3, [r4, #0]
 800e21e:	07de      	lsls	r6, r3, #31
 800e220:	d508      	bpl.n	800e234 <_printf_i+0x14c>
 800e222:	6923      	ldr	r3, [r4, #16]
 800e224:	6861      	ldr	r1, [r4, #4]
 800e226:	4299      	cmp	r1, r3
 800e228:	bfde      	ittt	le
 800e22a:	2330      	movle	r3, #48	; 0x30
 800e22c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e230:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e234:	1b52      	subs	r2, r2, r5
 800e236:	6122      	str	r2, [r4, #16]
 800e238:	f8cd a000 	str.w	sl, [sp]
 800e23c:	464b      	mov	r3, r9
 800e23e:	aa03      	add	r2, sp, #12
 800e240:	4621      	mov	r1, r4
 800e242:	4640      	mov	r0, r8
 800e244:	f7ff fee2 	bl	800e00c <_printf_common>
 800e248:	3001      	adds	r0, #1
 800e24a:	d14c      	bne.n	800e2e6 <_printf_i+0x1fe>
 800e24c:	f04f 30ff 	mov.w	r0, #4294967295
 800e250:	b004      	add	sp, #16
 800e252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e256:	4835      	ldr	r0, [pc, #212]	; (800e32c <_printf_i+0x244>)
 800e258:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800e25c:	6829      	ldr	r1, [r5, #0]
 800e25e:	6823      	ldr	r3, [r4, #0]
 800e260:	f851 6b04 	ldr.w	r6, [r1], #4
 800e264:	6029      	str	r1, [r5, #0]
 800e266:	061d      	lsls	r5, r3, #24
 800e268:	d514      	bpl.n	800e294 <_printf_i+0x1ac>
 800e26a:	07df      	lsls	r7, r3, #31
 800e26c:	bf44      	itt	mi
 800e26e:	f043 0320 	orrmi.w	r3, r3, #32
 800e272:	6023      	strmi	r3, [r4, #0]
 800e274:	b91e      	cbnz	r6, 800e27e <_printf_i+0x196>
 800e276:	6823      	ldr	r3, [r4, #0]
 800e278:	f023 0320 	bic.w	r3, r3, #32
 800e27c:	6023      	str	r3, [r4, #0]
 800e27e:	2310      	movs	r3, #16
 800e280:	e7b0      	b.n	800e1e4 <_printf_i+0xfc>
 800e282:	6823      	ldr	r3, [r4, #0]
 800e284:	f043 0320 	orr.w	r3, r3, #32
 800e288:	6023      	str	r3, [r4, #0]
 800e28a:	2378      	movs	r3, #120	; 0x78
 800e28c:	4828      	ldr	r0, [pc, #160]	; (800e330 <_printf_i+0x248>)
 800e28e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e292:	e7e3      	b.n	800e25c <_printf_i+0x174>
 800e294:	0659      	lsls	r1, r3, #25
 800e296:	bf48      	it	mi
 800e298:	b2b6      	uxthmi	r6, r6
 800e29a:	e7e6      	b.n	800e26a <_printf_i+0x182>
 800e29c:	4615      	mov	r5, r2
 800e29e:	e7bb      	b.n	800e218 <_printf_i+0x130>
 800e2a0:	682b      	ldr	r3, [r5, #0]
 800e2a2:	6826      	ldr	r6, [r4, #0]
 800e2a4:	6961      	ldr	r1, [r4, #20]
 800e2a6:	1d18      	adds	r0, r3, #4
 800e2a8:	6028      	str	r0, [r5, #0]
 800e2aa:	0635      	lsls	r5, r6, #24
 800e2ac:	681b      	ldr	r3, [r3, #0]
 800e2ae:	d501      	bpl.n	800e2b4 <_printf_i+0x1cc>
 800e2b0:	6019      	str	r1, [r3, #0]
 800e2b2:	e002      	b.n	800e2ba <_printf_i+0x1d2>
 800e2b4:	0670      	lsls	r0, r6, #25
 800e2b6:	d5fb      	bpl.n	800e2b0 <_printf_i+0x1c8>
 800e2b8:	8019      	strh	r1, [r3, #0]
 800e2ba:	2300      	movs	r3, #0
 800e2bc:	6123      	str	r3, [r4, #16]
 800e2be:	4615      	mov	r5, r2
 800e2c0:	e7ba      	b.n	800e238 <_printf_i+0x150>
 800e2c2:	682b      	ldr	r3, [r5, #0]
 800e2c4:	1d1a      	adds	r2, r3, #4
 800e2c6:	602a      	str	r2, [r5, #0]
 800e2c8:	681d      	ldr	r5, [r3, #0]
 800e2ca:	6862      	ldr	r2, [r4, #4]
 800e2cc:	2100      	movs	r1, #0
 800e2ce:	4628      	mov	r0, r5
 800e2d0:	f7f1 ff86 	bl	80001e0 <memchr>
 800e2d4:	b108      	cbz	r0, 800e2da <_printf_i+0x1f2>
 800e2d6:	1b40      	subs	r0, r0, r5
 800e2d8:	6060      	str	r0, [r4, #4]
 800e2da:	6863      	ldr	r3, [r4, #4]
 800e2dc:	6123      	str	r3, [r4, #16]
 800e2de:	2300      	movs	r3, #0
 800e2e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e2e4:	e7a8      	b.n	800e238 <_printf_i+0x150>
 800e2e6:	6923      	ldr	r3, [r4, #16]
 800e2e8:	462a      	mov	r2, r5
 800e2ea:	4649      	mov	r1, r9
 800e2ec:	4640      	mov	r0, r8
 800e2ee:	47d0      	blx	sl
 800e2f0:	3001      	adds	r0, #1
 800e2f2:	d0ab      	beq.n	800e24c <_printf_i+0x164>
 800e2f4:	6823      	ldr	r3, [r4, #0]
 800e2f6:	079b      	lsls	r3, r3, #30
 800e2f8:	d413      	bmi.n	800e322 <_printf_i+0x23a>
 800e2fa:	68e0      	ldr	r0, [r4, #12]
 800e2fc:	9b03      	ldr	r3, [sp, #12]
 800e2fe:	4298      	cmp	r0, r3
 800e300:	bfb8      	it	lt
 800e302:	4618      	movlt	r0, r3
 800e304:	e7a4      	b.n	800e250 <_printf_i+0x168>
 800e306:	2301      	movs	r3, #1
 800e308:	4632      	mov	r2, r6
 800e30a:	4649      	mov	r1, r9
 800e30c:	4640      	mov	r0, r8
 800e30e:	47d0      	blx	sl
 800e310:	3001      	adds	r0, #1
 800e312:	d09b      	beq.n	800e24c <_printf_i+0x164>
 800e314:	3501      	adds	r5, #1
 800e316:	68e3      	ldr	r3, [r4, #12]
 800e318:	9903      	ldr	r1, [sp, #12]
 800e31a:	1a5b      	subs	r3, r3, r1
 800e31c:	42ab      	cmp	r3, r5
 800e31e:	dcf2      	bgt.n	800e306 <_printf_i+0x21e>
 800e320:	e7eb      	b.n	800e2fa <_printf_i+0x212>
 800e322:	2500      	movs	r5, #0
 800e324:	f104 0619 	add.w	r6, r4, #25
 800e328:	e7f5      	b.n	800e316 <_printf_i+0x22e>
 800e32a:	bf00      	nop
 800e32c:	08030ea9 	.word	0x08030ea9
 800e330:	08030eba 	.word	0x08030eba

0800e334 <iprintf>:
 800e334:	b40f      	push	{r0, r1, r2, r3}
 800e336:	4b0a      	ldr	r3, [pc, #40]	; (800e360 <iprintf+0x2c>)
 800e338:	b513      	push	{r0, r1, r4, lr}
 800e33a:	681c      	ldr	r4, [r3, #0]
 800e33c:	b124      	cbz	r4, 800e348 <iprintf+0x14>
 800e33e:	69a3      	ldr	r3, [r4, #24]
 800e340:	b913      	cbnz	r3, 800e348 <iprintf+0x14>
 800e342:	4620      	mov	r0, r4
 800e344:	f000 f9fe 	bl	800e744 <__sinit>
 800e348:	ab05      	add	r3, sp, #20
 800e34a:	9a04      	ldr	r2, [sp, #16]
 800e34c:	68a1      	ldr	r1, [r4, #8]
 800e34e:	9301      	str	r3, [sp, #4]
 800e350:	4620      	mov	r0, r4
 800e352:	f7ff fd21 	bl	800dd98 <_vfiprintf_r>
 800e356:	b002      	add	sp, #8
 800e358:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e35c:	b004      	add	sp, #16
 800e35e:	4770      	bx	lr
 800e360:	20000280 	.word	0x20000280

0800e364 <putchar>:
 800e364:	4b09      	ldr	r3, [pc, #36]	; (800e38c <putchar+0x28>)
 800e366:	b513      	push	{r0, r1, r4, lr}
 800e368:	681c      	ldr	r4, [r3, #0]
 800e36a:	4601      	mov	r1, r0
 800e36c:	b134      	cbz	r4, 800e37c <putchar+0x18>
 800e36e:	69a3      	ldr	r3, [r4, #24]
 800e370:	b923      	cbnz	r3, 800e37c <putchar+0x18>
 800e372:	9001      	str	r0, [sp, #4]
 800e374:	4620      	mov	r0, r4
 800e376:	f000 f9e5 	bl	800e744 <__sinit>
 800e37a:	9901      	ldr	r1, [sp, #4]
 800e37c:	68a2      	ldr	r2, [r4, #8]
 800e37e:	4620      	mov	r0, r4
 800e380:	b002      	add	sp, #8
 800e382:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e386:	f000 bbc3 	b.w	800eb10 <_putc_r>
 800e38a:	bf00      	nop
 800e38c:	20000280 	.word	0x20000280

0800e390 <__swbuf_r>:
 800e390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e392:	460e      	mov	r6, r1
 800e394:	4614      	mov	r4, r2
 800e396:	4605      	mov	r5, r0
 800e398:	b118      	cbz	r0, 800e3a2 <__swbuf_r+0x12>
 800e39a:	6983      	ldr	r3, [r0, #24]
 800e39c:	b90b      	cbnz	r3, 800e3a2 <__swbuf_r+0x12>
 800e39e:	f000 f9d1 	bl	800e744 <__sinit>
 800e3a2:	4b21      	ldr	r3, [pc, #132]	; (800e428 <__swbuf_r+0x98>)
 800e3a4:	429c      	cmp	r4, r3
 800e3a6:	d12b      	bne.n	800e400 <__swbuf_r+0x70>
 800e3a8:	686c      	ldr	r4, [r5, #4]
 800e3aa:	69a3      	ldr	r3, [r4, #24]
 800e3ac:	60a3      	str	r3, [r4, #8]
 800e3ae:	89a3      	ldrh	r3, [r4, #12]
 800e3b0:	071a      	lsls	r2, r3, #28
 800e3b2:	d52f      	bpl.n	800e414 <__swbuf_r+0x84>
 800e3b4:	6923      	ldr	r3, [r4, #16]
 800e3b6:	b36b      	cbz	r3, 800e414 <__swbuf_r+0x84>
 800e3b8:	6923      	ldr	r3, [r4, #16]
 800e3ba:	6820      	ldr	r0, [r4, #0]
 800e3bc:	1ac0      	subs	r0, r0, r3
 800e3be:	6963      	ldr	r3, [r4, #20]
 800e3c0:	b2f6      	uxtb	r6, r6
 800e3c2:	4283      	cmp	r3, r0
 800e3c4:	4637      	mov	r7, r6
 800e3c6:	dc04      	bgt.n	800e3d2 <__swbuf_r+0x42>
 800e3c8:	4621      	mov	r1, r4
 800e3ca:	4628      	mov	r0, r5
 800e3cc:	f000 f926 	bl	800e61c <_fflush_r>
 800e3d0:	bb30      	cbnz	r0, 800e420 <__swbuf_r+0x90>
 800e3d2:	68a3      	ldr	r3, [r4, #8]
 800e3d4:	3b01      	subs	r3, #1
 800e3d6:	60a3      	str	r3, [r4, #8]
 800e3d8:	6823      	ldr	r3, [r4, #0]
 800e3da:	1c5a      	adds	r2, r3, #1
 800e3dc:	6022      	str	r2, [r4, #0]
 800e3de:	701e      	strb	r6, [r3, #0]
 800e3e0:	6963      	ldr	r3, [r4, #20]
 800e3e2:	3001      	adds	r0, #1
 800e3e4:	4283      	cmp	r3, r0
 800e3e6:	d004      	beq.n	800e3f2 <__swbuf_r+0x62>
 800e3e8:	89a3      	ldrh	r3, [r4, #12]
 800e3ea:	07db      	lsls	r3, r3, #31
 800e3ec:	d506      	bpl.n	800e3fc <__swbuf_r+0x6c>
 800e3ee:	2e0a      	cmp	r6, #10
 800e3f0:	d104      	bne.n	800e3fc <__swbuf_r+0x6c>
 800e3f2:	4621      	mov	r1, r4
 800e3f4:	4628      	mov	r0, r5
 800e3f6:	f000 f911 	bl	800e61c <_fflush_r>
 800e3fa:	b988      	cbnz	r0, 800e420 <__swbuf_r+0x90>
 800e3fc:	4638      	mov	r0, r7
 800e3fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e400:	4b0a      	ldr	r3, [pc, #40]	; (800e42c <__swbuf_r+0x9c>)
 800e402:	429c      	cmp	r4, r3
 800e404:	d101      	bne.n	800e40a <__swbuf_r+0x7a>
 800e406:	68ac      	ldr	r4, [r5, #8]
 800e408:	e7cf      	b.n	800e3aa <__swbuf_r+0x1a>
 800e40a:	4b09      	ldr	r3, [pc, #36]	; (800e430 <__swbuf_r+0xa0>)
 800e40c:	429c      	cmp	r4, r3
 800e40e:	bf08      	it	eq
 800e410:	68ec      	ldreq	r4, [r5, #12]
 800e412:	e7ca      	b.n	800e3aa <__swbuf_r+0x1a>
 800e414:	4621      	mov	r1, r4
 800e416:	4628      	mov	r0, r5
 800e418:	f000 f80c 	bl	800e434 <__swsetup_r>
 800e41c:	2800      	cmp	r0, #0
 800e41e:	d0cb      	beq.n	800e3b8 <__swbuf_r+0x28>
 800e420:	f04f 37ff 	mov.w	r7, #4294967295
 800e424:	e7ea      	b.n	800e3fc <__swbuf_r+0x6c>
 800e426:	bf00      	nop
 800e428:	08030eec 	.word	0x08030eec
 800e42c:	08030f0c 	.word	0x08030f0c
 800e430:	08030ecc 	.word	0x08030ecc

0800e434 <__swsetup_r>:
 800e434:	4b32      	ldr	r3, [pc, #200]	; (800e500 <__swsetup_r+0xcc>)
 800e436:	b570      	push	{r4, r5, r6, lr}
 800e438:	681d      	ldr	r5, [r3, #0]
 800e43a:	4606      	mov	r6, r0
 800e43c:	460c      	mov	r4, r1
 800e43e:	b125      	cbz	r5, 800e44a <__swsetup_r+0x16>
 800e440:	69ab      	ldr	r3, [r5, #24]
 800e442:	b913      	cbnz	r3, 800e44a <__swsetup_r+0x16>
 800e444:	4628      	mov	r0, r5
 800e446:	f000 f97d 	bl	800e744 <__sinit>
 800e44a:	4b2e      	ldr	r3, [pc, #184]	; (800e504 <__swsetup_r+0xd0>)
 800e44c:	429c      	cmp	r4, r3
 800e44e:	d10f      	bne.n	800e470 <__swsetup_r+0x3c>
 800e450:	686c      	ldr	r4, [r5, #4]
 800e452:	89a3      	ldrh	r3, [r4, #12]
 800e454:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e458:	0719      	lsls	r1, r3, #28
 800e45a:	d42c      	bmi.n	800e4b6 <__swsetup_r+0x82>
 800e45c:	06dd      	lsls	r5, r3, #27
 800e45e:	d411      	bmi.n	800e484 <__swsetup_r+0x50>
 800e460:	2309      	movs	r3, #9
 800e462:	6033      	str	r3, [r6, #0]
 800e464:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e468:	81a3      	strh	r3, [r4, #12]
 800e46a:	f04f 30ff 	mov.w	r0, #4294967295
 800e46e:	e03e      	b.n	800e4ee <__swsetup_r+0xba>
 800e470:	4b25      	ldr	r3, [pc, #148]	; (800e508 <__swsetup_r+0xd4>)
 800e472:	429c      	cmp	r4, r3
 800e474:	d101      	bne.n	800e47a <__swsetup_r+0x46>
 800e476:	68ac      	ldr	r4, [r5, #8]
 800e478:	e7eb      	b.n	800e452 <__swsetup_r+0x1e>
 800e47a:	4b24      	ldr	r3, [pc, #144]	; (800e50c <__swsetup_r+0xd8>)
 800e47c:	429c      	cmp	r4, r3
 800e47e:	bf08      	it	eq
 800e480:	68ec      	ldreq	r4, [r5, #12]
 800e482:	e7e6      	b.n	800e452 <__swsetup_r+0x1e>
 800e484:	0758      	lsls	r0, r3, #29
 800e486:	d512      	bpl.n	800e4ae <__swsetup_r+0x7a>
 800e488:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e48a:	b141      	cbz	r1, 800e49e <__swsetup_r+0x6a>
 800e48c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e490:	4299      	cmp	r1, r3
 800e492:	d002      	beq.n	800e49a <__swsetup_r+0x66>
 800e494:	4630      	mov	r0, r6
 800e496:	f000 fa5b 	bl	800e950 <_free_r>
 800e49a:	2300      	movs	r3, #0
 800e49c:	6363      	str	r3, [r4, #52]	; 0x34
 800e49e:	89a3      	ldrh	r3, [r4, #12]
 800e4a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e4a4:	81a3      	strh	r3, [r4, #12]
 800e4a6:	2300      	movs	r3, #0
 800e4a8:	6063      	str	r3, [r4, #4]
 800e4aa:	6923      	ldr	r3, [r4, #16]
 800e4ac:	6023      	str	r3, [r4, #0]
 800e4ae:	89a3      	ldrh	r3, [r4, #12]
 800e4b0:	f043 0308 	orr.w	r3, r3, #8
 800e4b4:	81a3      	strh	r3, [r4, #12]
 800e4b6:	6923      	ldr	r3, [r4, #16]
 800e4b8:	b94b      	cbnz	r3, 800e4ce <__swsetup_r+0x9a>
 800e4ba:	89a3      	ldrh	r3, [r4, #12]
 800e4bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e4c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e4c4:	d003      	beq.n	800e4ce <__swsetup_r+0x9a>
 800e4c6:	4621      	mov	r1, r4
 800e4c8:	4630      	mov	r0, r6
 800e4ca:	f000 fa01 	bl	800e8d0 <__smakebuf_r>
 800e4ce:	89a0      	ldrh	r0, [r4, #12]
 800e4d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e4d4:	f010 0301 	ands.w	r3, r0, #1
 800e4d8:	d00a      	beq.n	800e4f0 <__swsetup_r+0xbc>
 800e4da:	2300      	movs	r3, #0
 800e4dc:	60a3      	str	r3, [r4, #8]
 800e4de:	6963      	ldr	r3, [r4, #20]
 800e4e0:	425b      	negs	r3, r3
 800e4e2:	61a3      	str	r3, [r4, #24]
 800e4e4:	6923      	ldr	r3, [r4, #16]
 800e4e6:	b943      	cbnz	r3, 800e4fa <__swsetup_r+0xc6>
 800e4e8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e4ec:	d1ba      	bne.n	800e464 <__swsetup_r+0x30>
 800e4ee:	bd70      	pop	{r4, r5, r6, pc}
 800e4f0:	0781      	lsls	r1, r0, #30
 800e4f2:	bf58      	it	pl
 800e4f4:	6963      	ldrpl	r3, [r4, #20]
 800e4f6:	60a3      	str	r3, [r4, #8]
 800e4f8:	e7f4      	b.n	800e4e4 <__swsetup_r+0xb0>
 800e4fa:	2000      	movs	r0, #0
 800e4fc:	e7f7      	b.n	800e4ee <__swsetup_r+0xba>
 800e4fe:	bf00      	nop
 800e500:	20000280 	.word	0x20000280
 800e504:	08030eec 	.word	0x08030eec
 800e508:	08030f0c 	.word	0x08030f0c
 800e50c:	08030ecc 	.word	0x08030ecc

0800e510 <__sflush_r>:
 800e510:	898a      	ldrh	r2, [r1, #12]
 800e512:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e516:	4605      	mov	r5, r0
 800e518:	0710      	lsls	r0, r2, #28
 800e51a:	460c      	mov	r4, r1
 800e51c:	d458      	bmi.n	800e5d0 <__sflush_r+0xc0>
 800e51e:	684b      	ldr	r3, [r1, #4]
 800e520:	2b00      	cmp	r3, #0
 800e522:	dc05      	bgt.n	800e530 <__sflush_r+0x20>
 800e524:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e526:	2b00      	cmp	r3, #0
 800e528:	dc02      	bgt.n	800e530 <__sflush_r+0x20>
 800e52a:	2000      	movs	r0, #0
 800e52c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e530:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e532:	2e00      	cmp	r6, #0
 800e534:	d0f9      	beq.n	800e52a <__sflush_r+0x1a>
 800e536:	2300      	movs	r3, #0
 800e538:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e53c:	682f      	ldr	r7, [r5, #0]
 800e53e:	602b      	str	r3, [r5, #0]
 800e540:	d032      	beq.n	800e5a8 <__sflush_r+0x98>
 800e542:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e544:	89a3      	ldrh	r3, [r4, #12]
 800e546:	075a      	lsls	r2, r3, #29
 800e548:	d505      	bpl.n	800e556 <__sflush_r+0x46>
 800e54a:	6863      	ldr	r3, [r4, #4]
 800e54c:	1ac0      	subs	r0, r0, r3
 800e54e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e550:	b10b      	cbz	r3, 800e556 <__sflush_r+0x46>
 800e552:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e554:	1ac0      	subs	r0, r0, r3
 800e556:	2300      	movs	r3, #0
 800e558:	4602      	mov	r2, r0
 800e55a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e55c:	6a21      	ldr	r1, [r4, #32]
 800e55e:	4628      	mov	r0, r5
 800e560:	47b0      	blx	r6
 800e562:	1c43      	adds	r3, r0, #1
 800e564:	89a3      	ldrh	r3, [r4, #12]
 800e566:	d106      	bne.n	800e576 <__sflush_r+0x66>
 800e568:	6829      	ldr	r1, [r5, #0]
 800e56a:	291d      	cmp	r1, #29
 800e56c:	d82c      	bhi.n	800e5c8 <__sflush_r+0xb8>
 800e56e:	4a2a      	ldr	r2, [pc, #168]	; (800e618 <__sflush_r+0x108>)
 800e570:	40ca      	lsrs	r2, r1
 800e572:	07d6      	lsls	r6, r2, #31
 800e574:	d528      	bpl.n	800e5c8 <__sflush_r+0xb8>
 800e576:	2200      	movs	r2, #0
 800e578:	6062      	str	r2, [r4, #4]
 800e57a:	04d9      	lsls	r1, r3, #19
 800e57c:	6922      	ldr	r2, [r4, #16]
 800e57e:	6022      	str	r2, [r4, #0]
 800e580:	d504      	bpl.n	800e58c <__sflush_r+0x7c>
 800e582:	1c42      	adds	r2, r0, #1
 800e584:	d101      	bne.n	800e58a <__sflush_r+0x7a>
 800e586:	682b      	ldr	r3, [r5, #0]
 800e588:	b903      	cbnz	r3, 800e58c <__sflush_r+0x7c>
 800e58a:	6560      	str	r0, [r4, #84]	; 0x54
 800e58c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e58e:	602f      	str	r7, [r5, #0]
 800e590:	2900      	cmp	r1, #0
 800e592:	d0ca      	beq.n	800e52a <__sflush_r+0x1a>
 800e594:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e598:	4299      	cmp	r1, r3
 800e59a:	d002      	beq.n	800e5a2 <__sflush_r+0x92>
 800e59c:	4628      	mov	r0, r5
 800e59e:	f000 f9d7 	bl	800e950 <_free_r>
 800e5a2:	2000      	movs	r0, #0
 800e5a4:	6360      	str	r0, [r4, #52]	; 0x34
 800e5a6:	e7c1      	b.n	800e52c <__sflush_r+0x1c>
 800e5a8:	6a21      	ldr	r1, [r4, #32]
 800e5aa:	2301      	movs	r3, #1
 800e5ac:	4628      	mov	r0, r5
 800e5ae:	47b0      	blx	r6
 800e5b0:	1c41      	adds	r1, r0, #1
 800e5b2:	d1c7      	bne.n	800e544 <__sflush_r+0x34>
 800e5b4:	682b      	ldr	r3, [r5, #0]
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d0c4      	beq.n	800e544 <__sflush_r+0x34>
 800e5ba:	2b1d      	cmp	r3, #29
 800e5bc:	d001      	beq.n	800e5c2 <__sflush_r+0xb2>
 800e5be:	2b16      	cmp	r3, #22
 800e5c0:	d101      	bne.n	800e5c6 <__sflush_r+0xb6>
 800e5c2:	602f      	str	r7, [r5, #0]
 800e5c4:	e7b1      	b.n	800e52a <__sflush_r+0x1a>
 800e5c6:	89a3      	ldrh	r3, [r4, #12]
 800e5c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e5cc:	81a3      	strh	r3, [r4, #12]
 800e5ce:	e7ad      	b.n	800e52c <__sflush_r+0x1c>
 800e5d0:	690f      	ldr	r7, [r1, #16]
 800e5d2:	2f00      	cmp	r7, #0
 800e5d4:	d0a9      	beq.n	800e52a <__sflush_r+0x1a>
 800e5d6:	0793      	lsls	r3, r2, #30
 800e5d8:	680e      	ldr	r6, [r1, #0]
 800e5da:	bf08      	it	eq
 800e5dc:	694b      	ldreq	r3, [r1, #20]
 800e5de:	600f      	str	r7, [r1, #0]
 800e5e0:	bf18      	it	ne
 800e5e2:	2300      	movne	r3, #0
 800e5e4:	eba6 0807 	sub.w	r8, r6, r7
 800e5e8:	608b      	str	r3, [r1, #8]
 800e5ea:	f1b8 0f00 	cmp.w	r8, #0
 800e5ee:	dd9c      	ble.n	800e52a <__sflush_r+0x1a>
 800e5f0:	6a21      	ldr	r1, [r4, #32]
 800e5f2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e5f4:	4643      	mov	r3, r8
 800e5f6:	463a      	mov	r2, r7
 800e5f8:	4628      	mov	r0, r5
 800e5fa:	47b0      	blx	r6
 800e5fc:	2800      	cmp	r0, #0
 800e5fe:	dc06      	bgt.n	800e60e <__sflush_r+0xfe>
 800e600:	89a3      	ldrh	r3, [r4, #12]
 800e602:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e606:	81a3      	strh	r3, [r4, #12]
 800e608:	f04f 30ff 	mov.w	r0, #4294967295
 800e60c:	e78e      	b.n	800e52c <__sflush_r+0x1c>
 800e60e:	4407      	add	r7, r0
 800e610:	eba8 0800 	sub.w	r8, r8, r0
 800e614:	e7e9      	b.n	800e5ea <__sflush_r+0xda>
 800e616:	bf00      	nop
 800e618:	20400001 	.word	0x20400001

0800e61c <_fflush_r>:
 800e61c:	b538      	push	{r3, r4, r5, lr}
 800e61e:	690b      	ldr	r3, [r1, #16]
 800e620:	4605      	mov	r5, r0
 800e622:	460c      	mov	r4, r1
 800e624:	b913      	cbnz	r3, 800e62c <_fflush_r+0x10>
 800e626:	2500      	movs	r5, #0
 800e628:	4628      	mov	r0, r5
 800e62a:	bd38      	pop	{r3, r4, r5, pc}
 800e62c:	b118      	cbz	r0, 800e636 <_fflush_r+0x1a>
 800e62e:	6983      	ldr	r3, [r0, #24]
 800e630:	b90b      	cbnz	r3, 800e636 <_fflush_r+0x1a>
 800e632:	f000 f887 	bl	800e744 <__sinit>
 800e636:	4b14      	ldr	r3, [pc, #80]	; (800e688 <_fflush_r+0x6c>)
 800e638:	429c      	cmp	r4, r3
 800e63a:	d11b      	bne.n	800e674 <_fflush_r+0x58>
 800e63c:	686c      	ldr	r4, [r5, #4]
 800e63e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e642:	2b00      	cmp	r3, #0
 800e644:	d0ef      	beq.n	800e626 <_fflush_r+0xa>
 800e646:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e648:	07d0      	lsls	r0, r2, #31
 800e64a:	d404      	bmi.n	800e656 <_fflush_r+0x3a>
 800e64c:	0599      	lsls	r1, r3, #22
 800e64e:	d402      	bmi.n	800e656 <_fflush_r+0x3a>
 800e650:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e652:	f000 f915 	bl	800e880 <__retarget_lock_acquire_recursive>
 800e656:	4628      	mov	r0, r5
 800e658:	4621      	mov	r1, r4
 800e65a:	f7ff ff59 	bl	800e510 <__sflush_r>
 800e65e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e660:	07da      	lsls	r2, r3, #31
 800e662:	4605      	mov	r5, r0
 800e664:	d4e0      	bmi.n	800e628 <_fflush_r+0xc>
 800e666:	89a3      	ldrh	r3, [r4, #12]
 800e668:	059b      	lsls	r3, r3, #22
 800e66a:	d4dd      	bmi.n	800e628 <_fflush_r+0xc>
 800e66c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e66e:	f000 f908 	bl	800e882 <__retarget_lock_release_recursive>
 800e672:	e7d9      	b.n	800e628 <_fflush_r+0xc>
 800e674:	4b05      	ldr	r3, [pc, #20]	; (800e68c <_fflush_r+0x70>)
 800e676:	429c      	cmp	r4, r3
 800e678:	d101      	bne.n	800e67e <_fflush_r+0x62>
 800e67a:	68ac      	ldr	r4, [r5, #8]
 800e67c:	e7df      	b.n	800e63e <_fflush_r+0x22>
 800e67e:	4b04      	ldr	r3, [pc, #16]	; (800e690 <_fflush_r+0x74>)
 800e680:	429c      	cmp	r4, r3
 800e682:	bf08      	it	eq
 800e684:	68ec      	ldreq	r4, [r5, #12]
 800e686:	e7da      	b.n	800e63e <_fflush_r+0x22>
 800e688:	08030eec 	.word	0x08030eec
 800e68c:	08030f0c 	.word	0x08030f0c
 800e690:	08030ecc 	.word	0x08030ecc

0800e694 <std>:
 800e694:	2300      	movs	r3, #0
 800e696:	b510      	push	{r4, lr}
 800e698:	4604      	mov	r4, r0
 800e69a:	e9c0 3300 	strd	r3, r3, [r0]
 800e69e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e6a2:	6083      	str	r3, [r0, #8]
 800e6a4:	8181      	strh	r1, [r0, #12]
 800e6a6:	6643      	str	r3, [r0, #100]	; 0x64
 800e6a8:	81c2      	strh	r2, [r0, #14]
 800e6aa:	6183      	str	r3, [r0, #24]
 800e6ac:	4619      	mov	r1, r3
 800e6ae:	2208      	movs	r2, #8
 800e6b0:	305c      	adds	r0, #92	; 0x5c
 800e6b2:	f7ff fb3f 	bl	800dd34 <memset>
 800e6b6:	4b05      	ldr	r3, [pc, #20]	; (800e6cc <std+0x38>)
 800e6b8:	6263      	str	r3, [r4, #36]	; 0x24
 800e6ba:	4b05      	ldr	r3, [pc, #20]	; (800e6d0 <std+0x3c>)
 800e6bc:	62a3      	str	r3, [r4, #40]	; 0x28
 800e6be:	4b05      	ldr	r3, [pc, #20]	; (800e6d4 <std+0x40>)
 800e6c0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e6c2:	4b05      	ldr	r3, [pc, #20]	; (800e6d8 <std+0x44>)
 800e6c4:	6224      	str	r4, [r4, #32]
 800e6c6:	6323      	str	r3, [r4, #48]	; 0x30
 800e6c8:	bd10      	pop	{r4, pc}
 800e6ca:	bf00      	nop
 800e6cc:	0800ebc1 	.word	0x0800ebc1
 800e6d0:	0800ebe3 	.word	0x0800ebe3
 800e6d4:	0800ec1b 	.word	0x0800ec1b
 800e6d8:	0800ec3f 	.word	0x0800ec3f

0800e6dc <_cleanup_r>:
 800e6dc:	4901      	ldr	r1, [pc, #4]	; (800e6e4 <_cleanup_r+0x8>)
 800e6de:	f000 b8af 	b.w	800e840 <_fwalk_reent>
 800e6e2:	bf00      	nop
 800e6e4:	0800e61d 	.word	0x0800e61d

0800e6e8 <__sfmoreglue>:
 800e6e8:	b570      	push	{r4, r5, r6, lr}
 800e6ea:	2268      	movs	r2, #104	; 0x68
 800e6ec:	1e4d      	subs	r5, r1, #1
 800e6ee:	4355      	muls	r5, r2
 800e6f0:	460e      	mov	r6, r1
 800e6f2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e6f6:	f000 f997 	bl	800ea28 <_malloc_r>
 800e6fa:	4604      	mov	r4, r0
 800e6fc:	b140      	cbz	r0, 800e710 <__sfmoreglue+0x28>
 800e6fe:	2100      	movs	r1, #0
 800e700:	e9c0 1600 	strd	r1, r6, [r0]
 800e704:	300c      	adds	r0, #12
 800e706:	60a0      	str	r0, [r4, #8]
 800e708:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e70c:	f7ff fb12 	bl	800dd34 <memset>
 800e710:	4620      	mov	r0, r4
 800e712:	bd70      	pop	{r4, r5, r6, pc}

0800e714 <__sfp_lock_acquire>:
 800e714:	4801      	ldr	r0, [pc, #4]	; (800e71c <__sfp_lock_acquire+0x8>)
 800e716:	f000 b8b3 	b.w	800e880 <__retarget_lock_acquire_recursive>
 800e71a:	bf00      	nop
 800e71c:	20001be1 	.word	0x20001be1

0800e720 <__sfp_lock_release>:
 800e720:	4801      	ldr	r0, [pc, #4]	; (800e728 <__sfp_lock_release+0x8>)
 800e722:	f000 b8ae 	b.w	800e882 <__retarget_lock_release_recursive>
 800e726:	bf00      	nop
 800e728:	20001be1 	.word	0x20001be1

0800e72c <__sinit_lock_acquire>:
 800e72c:	4801      	ldr	r0, [pc, #4]	; (800e734 <__sinit_lock_acquire+0x8>)
 800e72e:	f000 b8a7 	b.w	800e880 <__retarget_lock_acquire_recursive>
 800e732:	bf00      	nop
 800e734:	20001be2 	.word	0x20001be2

0800e738 <__sinit_lock_release>:
 800e738:	4801      	ldr	r0, [pc, #4]	; (800e740 <__sinit_lock_release+0x8>)
 800e73a:	f000 b8a2 	b.w	800e882 <__retarget_lock_release_recursive>
 800e73e:	bf00      	nop
 800e740:	20001be2 	.word	0x20001be2

0800e744 <__sinit>:
 800e744:	b510      	push	{r4, lr}
 800e746:	4604      	mov	r4, r0
 800e748:	f7ff fff0 	bl	800e72c <__sinit_lock_acquire>
 800e74c:	69a3      	ldr	r3, [r4, #24]
 800e74e:	b11b      	cbz	r3, 800e758 <__sinit+0x14>
 800e750:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e754:	f7ff bff0 	b.w	800e738 <__sinit_lock_release>
 800e758:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e75c:	6523      	str	r3, [r4, #80]	; 0x50
 800e75e:	4b13      	ldr	r3, [pc, #76]	; (800e7ac <__sinit+0x68>)
 800e760:	4a13      	ldr	r2, [pc, #76]	; (800e7b0 <__sinit+0x6c>)
 800e762:	681b      	ldr	r3, [r3, #0]
 800e764:	62a2      	str	r2, [r4, #40]	; 0x28
 800e766:	42a3      	cmp	r3, r4
 800e768:	bf04      	itt	eq
 800e76a:	2301      	moveq	r3, #1
 800e76c:	61a3      	streq	r3, [r4, #24]
 800e76e:	4620      	mov	r0, r4
 800e770:	f000 f820 	bl	800e7b4 <__sfp>
 800e774:	6060      	str	r0, [r4, #4]
 800e776:	4620      	mov	r0, r4
 800e778:	f000 f81c 	bl	800e7b4 <__sfp>
 800e77c:	60a0      	str	r0, [r4, #8]
 800e77e:	4620      	mov	r0, r4
 800e780:	f000 f818 	bl	800e7b4 <__sfp>
 800e784:	2200      	movs	r2, #0
 800e786:	60e0      	str	r0, [r4, #12]
 800e788:	2104      	movs	r1, #4
 800e78a:	6860      	ldr	r0, [r4, #4]
 800e78c:	f7ff ff82 	bl	800e694 <std>
 800e790:	68a0      	ldr	r0, [r4, #8]
 800e792:	2201      	movs	r2, #1
 800e794:	2109      	movs	r1, #9
 800e796:	f7ff ff7d 	bl	800e694 <std>
 800e79a:	68e0      	ldr	r0, [r4, #12]
 800e79c:	2202      	movs	r2, #2
 800e79e:	2112      	movs	r1, #18
 800e7a0:	f7ff ff78 	bl	800e694 <std>
 800e7a4:	2301      	movs	r3, #1
 800e7a6:	61a3      	str	r3, [r4, #24]
 800e7a8:	e7d2      	b.n	800e750 <__sinit+0xc>
 800e7aa:	bf00      	nop
 800e7ac:	08030e94 	.word	0x08030e94
 800e7b0:	0800e6dd 	.word	0x0800e6dd

0800e7b4 <__sfp>:
 800e7b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7b6:	4607      	mov	r7, r0
 800e7b8:	f7ff ffac 	bl	800e714 <__sfp_lock_acquire>
 800e7bc:	4b1e      	ldr	r3, [pc, #120]	; (800e838 <__sfp+0x84>)
 800e7be:	681e      	ldr	r6, [r3, #0]
 800e7c0:	69b3      	ldr	r3, [r6, #24]
 800e7c2:	b913      	cbnz	r3, 800e7ca <__sfp+0x16>
 800e7c4:	4630      	mov	r0, r6
 800e7c6:	f7ff ffbd 	bl	800e744 <__sinit>
 800e7ca:	3648      	adds	r6, #72	; 0x48
 800e7cc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e7d0:	3b01      	subs	r3, #1
 800e7d2:	d503      	bpl.n	800e7dc <__sfp+0x28>
 800e7d4:	6833      	ldr	r3, [r6, #0]
 800e7d6:	b30b      	cbz	r3, 800e81c <__sfp+0x68>
 800e7d8:	6836      	ldr	r6, [r6, #0]
 800e7da:	e7f7      	b.n	800e7cc <__sfp+0x18>
 800e7dc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e7e0:	b9d5      	cbnz	r5, 800e818 <__sfp+0x64>
 800e7e2:	4b16      	ldr	r3, [pc, #88]	; (800e83c <__sfp+0x88>)
 800e7e4:	60e3      	str	r3, [r4, #12]
 800e7e6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e7ea:	6665      	str	r5, [r4, #100]	; 0x64
 800e7ec:	f000 f847 	bl	800e87e <__retarget_lock_init_recursive>
 800e7f0:	f7ff ff96 	bl	800e720 <__sfp_lock_release>
 800e7f4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e7f8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e7fc:	6025      	str	r5, [r4, #0]
 800e7fe:	61a5      	str	r5, [r4, #24]
 800e800:	2208      	movs	r2, #8
 800e802:	4629      	mov	r1, r5
 800e804:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e808:	f7ff fa94 	bl	800dd34 <memset>
 800e80c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e810:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e814:	4620      	mov	r0, r4
 800e816:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e818:	3468      	adds	r4, #104	; 0x68
 800e81a:	e7d9      	b.n	800e7d0 <__sfp+0x1c>
 800e81c:	2104      	movs	r1, #4
 800e81e:	4638      	mov	r0, r7
 800e820:	f7ff ff62 	bl	800e6e8 <__sfmoreglue>
 800e824:	4604      	mov	r4, r0
 800e826:	6030      	str	r0, [r6, #0]
 800e828:	2800      	cmp	r0, #0
 800e82a:	d1d5      	bne.n	800e7d8 <__sfp+0x24>
 800e82c:	f7ff ff78 	bl	800e720 <__sfp_lock_release>
 800e830:	230c      	movs	r3, #12
 800e832:	603b      	str	r3, [r7, #0]
 800e834:	e7ee      	b.n	800e814 <__sfp+0x60>
 800e836:	bf00      	nop
 800e838:	08030e94 	.word	0x08030e94
 800e83c:	ffff0001 	.word	0xffff0001

0800e840 <_fwalk_reent>:
 800e840:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e844:	4606      	mov	r6, r0
 800e846:	4688      	mov	r8, r1
 800e848:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e84c:	2700      	movs	r7, #0
 800e84e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e852:	f1b9 0901 	subs.w	r9, r9, #1
 800e856:	d505      	bpl.n	800e864 <_fwalk_reent+0x24>
 800e858:	6824      	ldr	r4, [r4, #0]
 800e85a:	2c00      	cmp	r4, #0
 800e85c:	d1f7      	bne.n	800e84e <_fwalk_reent+0xe>
 800e85e:	4638      	mov	r0, r7
 800e860:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e864:	89ab      	ldrh	r3, [r5, #12]
 800e866:	2b01      	cmp	r3, #1
 800e868:	d907      	bls.n	800e87a <_fwalk_reent+0x3a>
 800e86a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e86e:	3301      	adds	r3, #1
 800e870:	d003      	beq.n	800e87a <_fwalk_reent+0x3a>
 800e872:	4629      	mov	r1, r5
 800e874:	4630      	mov	r0, r6
 800e876:	47c0      	blx	r8
 800e878:	4307      	orrs	r7, r0
 800e87a:	3568      	adds	r5, #104	; 0x68
 800e87c:	e7e9      	b.n	800e852 <_fwalk_reent+0x12>

0800e87e <__retarget_lock_init_recursive>:
 800e87e:	4770      	bx	lr

0800e880 <__retarget_lock_acquire_recursive>:
 800e880:	4770      	bx	lr

0800e882 <__retarget_lock_release_recursive>:
 800e882:	4770      	bx	lr

0800e884 <__swhatbuf_r>:
 800e884:	b570      	push	{r4, r5, r6, lr}
 800e886:	460e      	mov	r6, r1
 800e888:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e88c:	2900      	cmp	r1, #0
 800e88e:	b096      	sub	sp, #88	; 0x58
 800e890:	4614      	mov	r4, r2
 800e892:	461d      	mov	r5, r3
 800e894:	da08      	bge.n	800e8a8 <__swhatbuf_r+0x24>
 800e896:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800e89a:	2200      	movs	r2, #0
 800e89c:	602a      	str	r2, [r5, #0]
 800e89e:	061a      	lsls	r2, r3, #24
 800e8a0:	d410      	bmi.n	800e8c4 <__swhatbuf_r+0x40>
 800e8a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e8a6:	e00e      	b.n	800e8c6 <__swhatbuf_r+0x42>
 800e8a8:	466a      	mov	r2, sp
 800e8aa:	f000 f9ef 	bl	800ec8c <_fstat_r>
 800e8ae:	2800      	cmp	r0, #0
 800e8b0:	dbf1      	blt.n	800e896 <__swhatbuf_r+0x12>
 800e8b2:	9a01      	ldr	r2, [sp, #4]
 800e8b4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e8b8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e8bc:	425a      	negs	r2, r3
 800e8be:	415a      	adcs	r2, r3
 800e8c0:	602a      	str	r2, [r5, #0]
 800e8c2:	e7ee      	b.n	800e8a2 <__swhatbuf_r+0x1e>
 800e8c4:	2340      	movs	r3, #64	; 0x40
 800e8c6:	2000      	movs	r0, #0
 800e8c8:	6023      	str	r3, [r4, #0]
 800e8ca:	b016      	add	sp, #88	; 0x58
 800e8cc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e8d0 <__smakebuf_r>:
 800e8d0:	898b      	ldrh	r3, [r1, #12]
 800e8d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e8d4:	079d      	lsls	r5, r3, #30
 800e8d6:	4606      	mov	r6, r0
 800e8d8:	460c      	mov	r4, r1
 800e8da:	d507      	bpl.n	800e8ec <__smakebuf_r+0x1c>
 800e8dc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e8e0:	6023      	str	r3, [r4, #0]
 800e8e2:	6123      	str	r3, [r4, #16]
 800e8e4:	2301      	movs	r3, #1
 800e8e6:	6163      	str	r3, [r4, #20]
 800e8e8:	b002      	add	sp, #8
 800e8ea:	bd70      	pop	{r4, r5, r6, pc}
 800e8ec:	ab01      	add	r3, sp, #4
 800e8ee:	466a      	mov	r2, sp
 800e8f0:	f7ff ffc8 	bl	800e884 <__swhatbuf_r>
 800e8f4:	9900      	ldr	r1, [sp, #0]
 800e8f6:	4605      	mov	r5, r0
 800e8f8:	4630      	mov	r0, r6
 800e8fa:	f000 f895 	bl	800ea28 <_malloc_r>
 800e8fe:	b948      	cbnz	r0, 800e914 <__smakebuf_r+0x44>
 800e900:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e904:	059a      	lsls	r2, r3, #22
 800e906:	d4ef      	bmi.n	800e8e8 <__smakebuf_r+0x18>
 800e908:	f023 0303 	bic.w	r3, r3, #3
 800e90c:	f043 0302 	orr.w	r3, r3, #2
 800e910:	81a3      	strh	r3, [r4, #12]
 800e912:	e7e3      	b.n	800e8dc <__smakebuf_r+0xc>
 800e914:	4b0d      	ldr	r3, [pc, #52]	; (800e94c <__smakebuf_r+0x7c>)
 800e916:	62b3      	str	r3, [r6, #40]	; 0x28
 800e918:	89a3      	ldrh	r3, [r4, #12]
 800e91a:	6020      	str	r0, [r4, #0]
 800e91c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e920:	81a3      	strh	r3, [r4, #12]
 800e922:	9b00      	ldr	r3, [sp, #0]
 800e924:	6163      	str	r3, [r4, #20]
 800e926:	9b01      	ldr	r3, [sp, #4]
 800e928:	6120      	str	r0, [r4, #16]
 800e92a:	b15b      	cbz	r3, 800e944 <__smakebuf_r+0x74>
 800e92c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e930:	4630      	mov	r0, r6
 800e932:	f000 f9bd 	bl	800ecb0 <_isatty_r>
 800e936:	b128      	cbz	r0, 800e944 <__smakebuf_r+0x74>
 800e938:	89a3      	ldrh	r3, [r4, #12]
 800e93a:	f023 0303 	bic.w	r3, r3, #3
 800e93e:	f043 0301 	orr.w	r3, r3, #1
 800e942:	81a3      	strh	r3, [r4, #12]
 800e944:	89a0      	ldrh	r0, [r4, #12]
 800e946:	4305      	orrs	r5, r0
 800e948:	81a5      	strh	r5, [r4, #12]
 800e94a:	e7cd      	b.n	800e8e8 <__smakebuf_r+0x18>
 800e94c:	0800e6dd 	.word	0x0800e6dd

0800e950 <_free_r>:
 800e950:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e952:	2900      	cmp	r1, #0
 800e954:	d044      	beq.n	800e9e0 <_free_r+0x90>
 800e956:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e95a:	9001      	str	r0, [sp, #4]
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	f1a1 0404 	sub.w	r4, r1, #4
 800e962:	bfb8      	it	lt
 800e964:	18e4      	addlt	r4, r4, r3
 800e966:	f000 f9c5 	bl	800ecf4 <__malloc_lock>
 800e96a:	4a1e      	ldr	r2, [pc, #120]	; (800e9e4 <_free_r+0x94>)
 800e96c:	9801      	ldr	r0, [sp, #4]
 800e96e:	6813      	ldr	r3, [r2, #0]
 800e970:	b933      	cbnz	r3, 800e980 <_free_r+0x30>
 800e972:	6063      	str	r3, [r4, #4]
 800e974:	6014      	str	r4, [r2, #0]
 800e976:	b003      	add	sp, #12
 800e978:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e97c:	f000 b9c0 	b.w	800ed00 <__malloc_unlock>
 800e980:	42a3      	cmp	r3, r4
 800e982:	d908      	bls.n	800e996 <_free_r+0x46>
 800e984:	6825      	ldr	r5, [r4, #0]
 800e986:	1961      	adds	r1, r4, r5
 800e988:	428b      	cmp	r3, r1
 800e98a:	bf01      	itttt	eq
 800e98c:	6819      	ldreq	r1, [r3, #0]
 800e98e:	685b      	ldreq	r3, [r3, #4]
 800e990:	1949      	addeq	r1, r1, r5
 800e992:	6021      	streq	r1, [r4, #0]
 800e994:	e7ed      	b.n	800e972 <_free_r+0x22>
 800e996:	461a      	mov	r2, r3
 800e998:	685b      	ldr	r3, [r3, #4]
 800e99a:	b10b      	cbz	r3, 800e9a0 <_free_r+0x50>
 800e99c:	42a3      	cmp	r3, r4
 800e99e:	d9fa      	bls.n	800e996 <_free_r+0x46>
 800e9a0:	6811      	ldr	r1, [r2, #0]
 800e9a2:	1855      	adds	r5, r2, r1
 800e9a4:	42a5      	cmp	r5, r4
 800e9a6:	d10b      	bne.n	800e9c0 <_free_r+0x70>
 800e9a8:	6824      	ldr	r4, [r4, #0]
 800e9aa:	4421      	add	r1, r4
 800e9ac:	1854      	adds	r4, r2, r1
 800e9ae:	42a3      	cmp	r3, r4
 800e9b0:	6011      	str	r1, [r2, #0]
 800e9b2:	d1e0      	bne.n	800e976 <_free_r+0x26>
 800e9b4:	681c      	ldr	r4, [r3, #0]
 800e9b6:	685b      	ldr	r3, [r3, #4]
 800e9b8:	6053      	str	r3, [r2, #4]
 800e9ba:	4421      	add	r1, r4
 800e9bc:	6011      	str	r1, [r2, #0]
 800e9be:	e7da      	b.n	800e976 <_free_r+0x26>
 800e9c0:	d902      	bls.n	800e9c8 <_free_r+0x78>
 800e9c2:	230c      	movs	r3, #12
 800e9c4:	6003      	str	r3, [r0, #0]
 800e9c6:	e7d6      	b.n	800e976 <_free_r+0x26>
 800e9c8:	6825      	ldr	r5, [r4, #0]
 800e9ca:	1961      	adds	r1, r4, r5
 800e9cc:	428b      	cmp	r3, r1
 800e9ce:	bf04      	itt	eq
 800e9d0:	6819      	ldreq	r1, [r3, #0]
 800e9d2:	685b      	ldreq	r3, [r3, #4]
 800e9d4:	6063      	str	r3, [r4, #4]
 800e9d6:	bf04      	itt	eq
 800e9d8:	1949      	addeq	r1, r1, r5
 800e9da:	6021      	streq	r1, [r4, #0]
 800e9dc:	6054      	str	r4, [r2, #4]
 800e9de:	e7ca      	b.n	800e976 <_free_r+0x26>
 800e9e0:	b003      	add	sp, #12
 800e9e2:	bd30      	pop	{r4, r5, pc}
 800e9e4:	20001be4 	.word	0x20001be4

0800e9e8 <sbrk_aligned>:
 800e9e8:	b570      	push	{r4, r5, r6, lr}
 800e9ea:	4e0e      	ldr	r6, [pc, #56]	; (800ea24 <sbrk_aligned+0x3c>)
 800e9ec:	460c      	mov	r4, r1
 800e9ee:	6831      	ldr	r1, [r6, #0]
 800e9f0:	4605      	mov	r5, r0
 800e9f2:	b911      	cbnz	r1, 800e9fa <sbrk_aligned+0x12>
 800e9f4:	f000 f8d4 	bl	800eba0 <_sbrk_r>
 800e9f8:	6030      	str	r0, [r6, #0]
 800e9fa:	4621      	mov	r1, r4
 800e9fc:	4628      	mov	r0, r5
 800e9fe:	f000 f8cf 	bl	800eba0 <_sbrk_r>
 800ea02:	1c43      	adds	r3, r0, #1
 800ea04:	d00a      	beq.n	800ea1c <sbrk_aligned+0x34>
 800ea06:	1cc4      	adds	r4, r0, #3
 800ea08:	f024 0403 	bic.w	r4, r4, #3
 800ea0c:	42a0      	cmp	r0, r4
 800ea0e:	d007      	beq.n	800ea20 <sbrk_aligned+0x38>
 800ea10:	1a21      	subs	r1, r4, r0
 800ea12:	4628      	mov	r0, r5
 800ea14:	f000 f8c4 	bl	800eba0 <_sbrk_r>
 800ea18:	3001      	adds	r0, #1
 800ea1a:	d101      	bne.n	800ea20 <sbrk_aligned+0x38>
 800ea1c:	f04f 34ff 	mov.w	r4, #4294967295
 800ea20:	4620      	mov	r0, r4
 800ea22:	bd70      	pop	{r4, r5, r6, pc}
 800ea24:	20001be8 	.word	0x20001be8

0800ea28 <_malloc_r>:
 800ea28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea2c:	1ccd      	adds	r5, r1, #3
 800ea2e:	f025 0503 	bic.w	r5, r5, #3
 800ea32:	3508      	adds	r5, #8
 800ea34:	2d0c      	cmp	r5, #12
 800ea36:	bf38      	it	cc
 800ea38:	250c      	movcc	r5, #12
 800ea3a:	2d00      	cmp	r5, #0
 800ea3c:	4607      	mov	r7, r0
 800ea3e:	db01      	blt.n	800ea44 <_malloc_r+0x1c>
 800ea40:	42a9      	cmp	r1, r5
 800ea42:	d905      	bls.n	800ea50 <_malloc_r+0x28>
 800ea44:	230c      	movs	r3, #12
 800ea46:	603b      	str	r3, [r7, #0]
 800ea48:	2600      	movs	r6, #0
 800ea4a:	4630      	mov	r0, r6
 800ea4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea50:	4e2e      	ldr	r6, [pc, #184]	; (800eb0c <_malloc_r+0xe4>)
 800ea52:	f000 f94f 	bl	800ecf4 <__malloc_lock>
 800ea56:	6833      	ldr	r3, [r6, #0]
 800ea58:	461c      	mov	r4, r3
 800ea5a:	bb34      	cbnz	r4, 800eaaa <_malloc_r+0x82>
 800ea5c:	4629      	mov	r1, r5
 800ea5e:	4638      	mov	r0, r7
 800ea60:	f7ff ffc2 	bl	800e9e8 <sbrk_aligned>
 800ea64:	1c43      	adds	r3, r0, #1
 800ea66:	4604      	mov	r4, r0
 800ea68:	d14d      	bne.n	800eb06 <_malloc_r+0xde>
 800ea6a:	6834      	ldr	r4, [r6, #0]
 800ea6c:	4626      	mov	r6, r4
 800ea6e:	2e00      	cmp	r6, #0
 800ea70:	d140      	bne.n	800eaf4 <_malloc_r+0xcc>
 800ea72:	6823      	ldr	r3, [r4, #0]
 800ea74:	4631      	mov	r1, r6
 800ea76:	4638      	mov	r0, r7
 800ea78:	eb04 0803 	add.w	r8, r4, r3
 800ea7c:	f000 f890 	bl	800eba0 <_sbrk_r>
 800ea80:	4580      	cmp	r8, r0
 800ea82:	d13a      	bne.n	800eafa <_malloc_r+0xd2>
 800ea84:	6821      	ldr	r1, [r4, #0]
 800ea86:	3503      	adds	r5, #3
 800ea88:	1a6d      	subs	r5, r5, r1
 800ea8a:	f025 0503 	bic.w	r5, r5, #3
 800ea8e:	3508      	adds	r5, #8
 800ea90:	2d0c      	cmp	r5, #12
 800ea92:	bf38      	it	cc
 800ea94:	250c      	movcc	r5, #12
 800ea96:	4629      	mov	r1, r5
 800ea98:	4638      	mov	r0, r7
 800ea9a:	f7ff ffa5 	bl	800e9e8 <sbrk_aligned>
 800ea9e:	3001      	adds	r0, #1
 800eaa0:	d02b      	beq.n	800eafa <_malloc_r+0xd2>
 800eaa2:	6823      	ldr	r3, [r4, #0]
 800eaa4:	442b      	add	r3, r5
 800eaa6:	6023      	str	r3, [r4, #0]
 800eaa8:	e00e      	b.n	800eac8 <_malloc_r+0xa0>
 800eaaa:	6822      	ldr	r2, [r4, #0]
 800eaac:	1b52      	subs	r2, r2, r5
 800eaae:	d41e      	bmi.n	800eaee <_malloc_r+0xc6>
 800eab0:	2a0b      	cmp	r2, #11
 800eab2:	d916      	bls.n	800eae2 <_malloc_r+0xba>
 800eab4:	1961      	adds	r1, r4, r5
 800eab6:	42a3      	cmp	r3, r4
 800eab8:	6025      	str	r5, [r4, #0]
 800eaba:	bf18      	it	ne
 800eabc:	6059      	strne	r1, [r3, #4]
 800eabe:	6863      	ldr	r3, [r4, #4]
 800eac0:	bf08      	it	eq
 800eac2:	6031      	streq	r1, [r6, #0]
 800eac4:	5162      	str	r2, [r4, r5]
 800eac6:	604b      	str	r3, [r1, #4]
 800eac8:	4638      	mov	r0, r7
 800eaca:	f104 060b 	add.w	r6, r4, #11
 800eace:	f000 f917 	bl	800ed00 <__malloc_unlock>
 800ead2:	f026 0607 	bic.w	r6, r6, #7
 800ead6:	1d23      	adds	r3, r4, #4
 800ead8:	1af2      	subs	r2, r6, r3
 800eada:	d0b6      	beq.n	800ea4a <_malloc_r+0x22>
 800eadc:	1b9b      	subs	r3, r3, r6
 800eade:	50a3      	str	r3, [r4, r2]
 800eae0:	e7b3      	b.n	800ea4a <_malloc_r+0x22>
 800eae2:	6862      	ldr	r2, [r4, #4]
 800eae4:	42a3      	cmp	r3, r4
 800eae6:	bf0c      	ite	eq
 800eae8:	6032      	streq	r2, [r6, #0]
 800eaea:	605a      	strne	r2, [r3, #4]
 800eaec:	e7ec      	b.n	800eac8 <_malloc_r+0xa0>
 800eaee:	4623      	mov	r3, r4
 800eaf0:	6864      	ldr	r4, [r4, #4]
 800eaf2:	e7b2      	b.n	800ea5a <_malloc_r+0x32>
 800eaf4:	4634      	mov	r4, r6
 800eaf6:	6876      	ldr	r6, [r6, #4]
 800eaf8:	e7b9      	b.n	800ea6e <_malloc_r+0x46>
 800eafa:	230c      	movs	r3, #12
 800eafc:	603b      	str	r3, [r7, #0]
 800eafe:	4638      	mov	r0, r7
 800eb00:	f000 f8fe 	bl	800ed00 <__malloc_unlock>
 800eb04:	e7a1      	b.n	800ea4a <_malloc_r+0x22>
 800eb06:	6025      	str	r5, [r4, #0]
 800eb08:	e7de      	b.n	800eac8 <_malloc_r+0xa0>
 800eb0a:	bf00      	nop
 800eb0c:	20001be4 	.word	0x20001be4

0800eb10 <_putc_r>:
 800eb10:	b570      	push	{r4, r5, r6, lr}
 800eb12:	460d      	mov	r5, r1
 800eb14:	4614      	mov	r4, r2
 800eb16:	4606      	mov	r6, r0
 800eb18:	b118      	cbz	r0, 800eb22 <_putc_r+0x12>
 800eb1a:	6983      	ldr	r3, [r0, #24]
 800eb1c:	b90b      	cbnz	r3, 800eb22 <_putc_r+0x12>
 800eb1e:	f7ff fe11 	bl	800e744 <__sinit>
 800eb22:	4b1c      	ldr	r3, [pc, #112]	; (800eb94 <_putc_r+0x84>)
 800eb24:	429c      	cmp	r4, r3
 800eb26:	d124      	bne.n	800eb72 <_putc_r+0x62>
 800eb28:	6874      	ldr	r4, [r6, #4]
 800eb2a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800eb2c:	07d8      	lsls	r0, r3, #31
 800eb2e:	d405      	bmi.n	800eb3c <_putc_r+0x2c>
 800eb30:	89a3      	ldrh	r3, [r4, #12]
 800eb32:	0599      	lsls	r1, r3, #22
 800eb34:	d402      	bmi.n	800eb3c <_putc_r+0x2c>
 800eb36:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800eb38:	f7ff fea2 	bl	800e880 <__retarget_lock_acquire_recursive>
 800eb3c:	68a3      	ldr	r3, [r4, #8]
 800eb3e:	3b01      	subs	r3, #1
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	60a3      	str	r3, [r4, #8]
 800eb44:	da05      	bge.n	800eb52 <_putc_r+0x42>
 800eb46:	69a2      	ldr	r2, [r4, #24]
 800eb48:	4293      	cmp	r3, r2
 800eb4a:	db1c      	blt.n	800eb86 <_putc_r+0x76>
 800eb4c:	b2eb      	uxtb	r3, r5
 800eb4e:	2b0a      	cmp	r3, #10
 800eb50:	d019      	beq.n	800eb86 <_putc_r+0x76>
 800eb52:	6823      	ldr	r3, [r4, #0]
 800eb54:	1c5a      	adds	r2, r3, #1
 800eb56:	6022      	str	r2, [r4, #0]
 800eb58:	701d      	strb	r5, [r3, #0]
 800eb5a:	b2ed      	uxtb	r5, r5
 800eb5c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800eb5e:	07da      	lsls	r2, r3, #31
 800eb60:	d405      	bmi.n	800eb6e <_putc_r+0x5e>
 800eb62:	89a3      	ldrh	r3, [r4, #12]
 800eb64:	059b      	lsls	r3, r3, #22
 800eb66:	d402      	bmi.n	800eb6e <_putc_r+0x5e>
 800eb68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800eb6a:	f7ff fe8a 	bl	800e882 <__retarget_lock_release_recursive>
 800eb6e:	4628      	mov	r0, r5
 800eb70:	bd70      	pop	{r4, r5, r6, pc}
 800eb72:	4b09      	ldr	r3, [pc, #36]	; (800eb98 <_putc_r+0x88>)
 800eb74:	429c      	cmp	r4, r3
 800eb76:	d101      	bne.n	800eb7c <_putc_r+0x6c>
 800eb78:	68b4      	ldr	r4, [r6, #8]
 800eb7a:	e7d6      	b.n	800eb2a <_putc_r+0x1a>
 800eb7c:	4b07      	ldr	r3, [pc, #28]	; (800eb9c <_putc_r+0x8c>)
 800eb7e:	429c      	cmp	r4, r3
 800eb80:	bf08      	it	eq
 800eb82:	68f4      	ldreq	r4, [r6, #12]
 800eb84:	e7d1      	b.n	800eb2a <_putc_r+0x1a>
 800eb86:	4629      	mov	r1, r5
 800eb88:	4622      	mov	r2, r4
 800eb8a:	4630      	mov	r0, r6
 800eb8c:	f7ff fc00 	bl	800e390 <__swbuf_r>
 800eb90:	4605      	mov	r5, r0
 800eb92:	e7e3      	b.n	800eb5c <_putc_r+0x4c>
 800eb94:	08030eec 	.word	0x08030eec
 800eb98:	08030f0c 	.word	0x08030f0c
 800eb9c:	08030ecc 	.word	0x08030ecc

0800eba0 <_sbrk_r>:
 800eba0:	b538      	push	{r3, r4, r5, lr}
 800eba2:	4d06      	ldr	r5, [pc, #24]	; (800ebbc <_sbrk_r+0x1c>)
 800eba4:	2300      	movs	r3, #0
 800eba6:	4604      	mov	r4, r0
 800eba8:	4608      	mov	r0, r1
 800ebaa:	602b      	str	r3, [r5, #0]
 800ebac:	f7f4 f864 	bl	8002c78 <_sbrk>
 800ebb0:	1c43      	adds	r3, r0, #1
 800ebb2:	d102      	bne.n	800ebba <_sbrk_r+0x1a>
 800ebb4:	682b      	ldr	r3, [r5, #0]
 800ebb6:	b103      	cbz	r3, 800ebba <_sbrk_r+0x1a>
 800ebb8:	6023      	str	r3, [r4, #0]
 800ebba:	bd38      	pop	{r3, r4, r5, pc}
 800ebbc:	20001bec 	.word	0x20001bec

0800ebc0 <__sread>:
 800ebc0:	b510      	push	{r4, lr}
 800ebc2:	460c      	mov	r4, r1
 800ebc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ebc8:	f000 f8a0 	bl	800ed0c <_read_r>
 800ebcc:	2800      	cmp	r0, #0
 800ebce:	bfab      	itete	ge
 800ebd0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ebd2:	89a3      	ldrhlt	r3, [r4, #12]
 800ebd4:	181b      	addge	r3, r3, r0
 800ebd6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ebda:	bfac      	ite	ge
 800ebdc:	6563      	strge	r3, [r4, #84]	; 0x54
 800ebde:	81a3      	strhlt	r3, [r4, #12]
 800ebe0:	bd10      	pop	{r4, pc}

0800ebe2 <__swrite>:
 800ebe2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ebe6:	461f      	mov	r7, r3
 800ebe8:	898b      	ldrh	r3, [r1, #12]
 800ebea:	05db      	lsls	r3, r3, #23
 800ebec:	4605      	mov	r5, r0
 800ebee:	460c      	mov	r4, r1
 800ebf0:	4616      	mov	r6, r2
 800ebf2:	d505      	bpl.n	800ec00 <__swrite+0x1e>
 800ebf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ebf8:	2302      	movs	r3, #2
 800ebfa:	2200      	movs	r2, #0
 800ebfc:	f000 f868 	bl	800ecd0 <_lseek_r>
 800ec00:	89a3      	ldrh	r3, [r4, #12]
 800ec02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ec06:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ec0a:	81a3      	strh	r3, [r4, #12]
 800ec0c:	4632      	mov	r2, r6
 800ec0e:	463b      	mov	r3, r7
 800ec10:	4628      	mov	r0, r5
 800ec12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ec16:	f000 b817 	b.w	800ec48 <_write_r>

0800ec1a <__sseek>:
 800ec1a:	b510      	push	{r4, lr}
 800ec1c:	460c      	mov	r4, r1
 800ec1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ec22:	f000 f855 	bl	800ecd0 <_lseek_r>
 800ec26:	1c43      	adds	r3, r0, #1
 800ec28:	89a3      	ldrh	r3, [r4, #12]
 800ec2a:	bf15      	itete	ne
 800ec2c:	6560      	strne	r0, [r4, #84]	; 0x54
 800ec2e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ec32:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ec36:	81a3      	strheq	r3, [r4, #12]
 800ec38:	bf18      	it	ne
 800ec3a:	81a3      	strhne	r3, [r4, #12]
 800ec3c:	bd10      	pop	{r4, pc}

0800ec3e <__sclose>:
 800ec3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ec42:	f000 b813 	b.w	800ec6c <_close_r>
	...

0800ec48 <_write_r>:
 800ec48:	b538      	push	{r3, r4, r5, lr}
 800ec4a:	4d07      	ldr	r5, [pc, #28]	; (800ec68 <_write_r+0x20>)
 800ec4c:	4604      	mov	r4, r0
 800ec4e:	4608      	mov	r0, r1
 800ec50:	4611      	mov	r1, r2
 800ec52:	2200      	movs	r2, #0
 800ec54:	602a      	str	r2, [r5, #0]
 800ec56:	461a      	mov	r2, r3
 800ec58:	f7f3 ffbd 	bl	8002bd6 <_write>
 800ec5c:	1c43      	adds	r3, r0, #1
 800ec5e:	d102      	bne.n	800ec66 <_write_r+0x1e>
 800ec60:	682b      	ldr	r3, [r5, #0]
 800ec62:	b103      	cbz	r3, 800ec66 <_write_r+0x1e>
 800ec64:	6023      	str	r3, [r4, #0]
 800ec66:	bd38      	pop	{r3, r4, r5, pc}
 800ec68:	20001bec 	.word	0x20001bec

0800ec6c <_close_r>:
 800ec6c:	b538      	push	{r3, r4, r5, lr}
 800ec6e:	4d06      	ldr	r5, [pc, #24]	; (800ec88 <_close_r+0x1c>)
 800ec70:	2300      	movs	r3, #0
 800ec72:	4604      	mov	r4, r0
 800ec74:	4608      	mov	r0, r1
 800ec76:	602b      	str	r3, [r5, #0]
 800ec78:	f7f3 ffc9 	bl	8002c0e <_close>
 800ec7c:	1c43      	adds	r3, r0, #1
 800ec7e:	d102      	bne.n	800ec86 <_close_r+0x1a>
 800ec80:	682b      	ldr	r3, [r5, #0]
 800ec82:	b103      	cbz	r3, 800ec86 <_close_r+0x1a>
 800ec84:	6023      	str	r3, [r4, #0]
 800ec86:	bd38      	pop	{r3, r4, r5, pc}
 800ec88:	20001bec 	.word	0x20001bec

0800ec8c <_fstat_r>:
 800ec8c:	b538      	push	{r3, r4, r5, lr}
 800ec8e:	4d07      	ldr	r5, [pc, #28]	; (800ecac <_fstat_r+0x20>)
 800ec90:	2300      	movs	r3, #0
 800ec92:	4604      	mov	r4, r0
 800ec94:	4608      	mov	r0, r1
 800ec96:	4611      	mov	r1, r2
 800ec98:	602b      	str	r3, [r5, #0]
 800ec9a:	f7f3 ffc4 	bl	8002c26 <_fstat>
 800ec9e:	1c43      	adds	r3, r0, #1
 800eca0:	d102      	bne.n	800eca8 <_fstat_r+0x1c>
 800eca2:	682b      	ldr	r3, [r5, #0]
 800eca4:	b103      	cbz	r3, 800eca8 <_fstat_r+0x1c>
 800eca6:	6023      	str	r3, [r4, #0]
 800eca8:	bd38      	pop	{r3, r4, r5, pc}
 800ecaa:	bf00      	nop
 800ecac:	20001bec 	.word	0x20001bec

0800ecb0 <_isatty_r>:
 800ecb0:	b538      	push	{r3, r4, r5, lr}
 800ecb2:	4d06      	ldr	r5, [pc, #24]	; (800eccc <_isatty_r+0x1c>)
 800ecb4:	2300      	movs	r3, #0
 800ecb6:	4604      	mov	r4, r0
 800ecb8:	4608      	mov	r0, r1
 800ecba:	602b      	str	r3, [r5, #0]
 800ecbc:	f7f3 ffc3 	bl	8002c46 <_isatty>
 800ecc0:	1c43      	adds	r3, r0, #1
 800ecc2:	d102      	bne.n	800ecca <_isatty_r+0x1a>
 800ecc4:	682b      	ldr	r3, [r5, #0]
 800ecc6:	b103      	cbz	r3, 800ecca <_isatty_r+0x1a>
 800ecc8:	6023      	str	r3, [r4, #0]
 800ecca:	bd38      	pop	{r3, r4, r5, pc}
 800eccc:	20001bec 	.word	0x20001bec

0800ecd0 <_lseek_r>:
 800ecd0:	b538      	push	{r3, r4, r5, lr}
 800ecd2:	4d07      	ldr	r5, [pc, #28]	; (800ecf0 <_lseek_r+0x20>)
 800ecd4:	4604      	mov	r4, r0
 800ecd6:	4608      	mov	r0, r1
 800ecd8:	4611      	mov	r1, r2
 800ecda:	2200      	movs	r2, #0
 800ecdc:	602a      	str	r2, [r5, #0]
 800ecde:	461a      	mov	r2, r3
 800ece0:	f7f3 ffbc 	bl	8002c5c <_lseek>
 800ece4:	1c43      	adds	r3, r0, #1
 800ece6:	d102      	bne.n	800ecee <_lseek_r+0x1e>
 800ece8:	682b      	ldr	r3, [r5, #0]
 800ecea:	b103      	cbz	r3, 800ecee <_lseek_r+0x1e>
 800ecec:	6023      	str	r3, [r4, #0]
 800ecee:	bd38      	pop	{r3, r4, r5, pc}
 800ecf0:	20001bec 	.word	0x20001bec

0800ecf4 <__malloc_lock>:
 800ecf4:	4801      	ldr	r0, [pc, #4]	; (800ecfc <__malloc_lock+0x8>)
 800ecf6:	f7ff bdc3 	b.w	800e880 <__retarget_lock_acquire_recursive>
 800ecfa:	bf00      	nop
 800ecfc:	20001be0 	.word	0x20001be0

0800ed00 <__malloc_unlock>:
 800ed00:	4801      	ldr	r0, [pc, #4]	; (800ed08 <__malloc_unlock+0x8>)
 800ed02:	f7ff bdbe 	b.w	800e882 <__retarget_lock_release_recursive>
 800ed06:	bf00      	nop
 800ed08:	20001be0 	.word	0x20001be0

0800ed0c <_read_r>:
 800ed0c:	b538      	push	{r3, r4, r5, lr}
 800ed0e:	4d07      	ldr	r5, [pc, #28]	; (800ed2c <_read_r+0x20>)
 800ed10:	4604      	mov	r4, r0
 800ed12:	4608      	mov	r0, r1
 800ed14:	4611      	mov	r1, r2
 800ed16:	2200      	movs	r2, #0
 800ed18:	602a      	str	r2, [r5, #0]
 800ed1a:	461a      	mov	r2, r3
 800ed1c:	f7f3 ff3e 	bl	8002b9c <_read>
 800ed20:	1c43      	adds	r3, r0, #1
 800ed22:	d102      	bne.n	800ed2a <_read_r+0x1e>
 800ed24:	682b      	ldr	r3, [r5, #0]
 800ed26:	b103      	cbz	r3, 800ed2a <_read_r+0x1e>
 800ed28:	6023      	str	r3, [r4, #0]
 800ed2a:	bd38      	pop	{r3, r4, r5, pc}
 800ed2c:	20001bec 	.word	0x20001bec

0800ed30 <_init>:
 800ed30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed32:	bf00      	nop
 800ed34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ed36:	bc08      	pop	{r3}
 800ed38:	469e      	mov	lr, r3
 800ed3a:	4770      	bx	lr

0800ed3c <_fini>:
 800ed3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed3e:	bf00      	nop
 800ed40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ed42:	bc08      	pop	{r3}
 800ed44:	469e      	mov	lr, r3
 800ed46:	4770      	bx	lr
