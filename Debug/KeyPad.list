
KeyPad.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000eca4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000221f4  0800ee44  0800ee44  0001ee44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08031038  08031038  00050388  2**0
                  CONTENTS
  4 .ARM          00000008  08031038  08031038  00041038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08031040  08031040  00050388  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08031040  08031040  00041040  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08031044  08031044  00041044  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000388  20000000  08031048  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001948  20000388  080313d0  00050388  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001cd0  080313d0  00051cd0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00050388  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027921  00000000  00000000  000503b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000064c6  00000000  00000000  00077cd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f58  00000000  00000000  0007e1a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001c38  00000000  00000000  000800f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000202e2  00000000  00000000  00081d30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002c352  00000000  00000000  000a2012  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a70c2  00000000  00000000  000ce364  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00175426  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008698  00000000  00000000  00175478  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000388 	.word	0x20000388
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ee2c 	.word	0x0800ee2c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000038c 	.word	0x2000038c
 80001dc:	0800ee2c 	.word	0x0800ee2c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <FT6206_Init>:
 *@Params:
 *@Return:
 *@Precondition:
 *@Postcondition:
 **************************************//**************************************/
void FT6206_Init(FT6206_Handle_t *Dev, FT6206_IO_Drv_t IO_Drv){
 8000584:	b084      	sub	sp, #16
 8000586:	b5b0      	push	{r4, r5, r7, lr}
 8000588:	b082      	sub	sp, #8
 800058a:	af00      	add	r7, sp, #0
 800058c:	6078      	str	r0, [r7, #4]
 800058e:	f107 001c 	add.w	r0, r7, #28
 8000592:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	Dev->P1_XPos = 0;
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	2200      	movs	r2, #0
 800059a:	801a      	strh	r2, [r3, #0]
	Dev->P1_YPos = 0;
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	2200      	movs	r2, #0
 80005a0:	805a      	strh	r2, [r3, #2]
	Dev->P1_EventFlag = 0;
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	2200      	movs	r2, #0
 80005a6:	711a      	strb	r2, [r3, #4]
	Dev->IO_Driver = IO_Drv;
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	f103 0408 	add.w	r4, r3, #8
 80005ae:	f107 051c 	add.w	r5, r7, #28
 80005b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005b6:	682b      	ldr	r3, [r5, #0]
 80005b8:	6023      	str	r3, [r4, #0]
	Dev->IO_Driver.init();
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	689b      	ldr	r3, [r3, #8]
 80005be:	4798      	blx	r3
	Dev->IO_Driver.read(P1_XH, touch_screen_buffer, 4);
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	695b      	ldr	r3, [r3, #20]
 80005c4:	2003      	movs	r0, #3
 80005c6:	2204      	movs	r2, #4
 80005c8:	4904      	ldr	r1, [pc, #16]	; (80005dc <FT6206_Init+0x58>)
 80005ca:	4798      	blx	r3
	//FT6206_ReadScreen(Dev);
}
 80005cc:	bf00      	nop
 80005ce:	3708      	adds	r7, #8
 80005d0:	46bd      	mov	sp, r7
 80005d2:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80005d6:	b004      	add	sp, #16
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop
 80005dc:	200003a4 	.word	0x200003a4

080005e0 <FT6206_DeInit>:
 *@Params:
 *@Return:
 *@Precondition:
 *@Postcondition:
 **************************************//**************************************/
void FT6206_DeInit(FT6206_Handle_t *Dev){
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
	Dev->IO_Driver.deinit();
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	68db      	ldr	r3, [r3, #12]
 80005ec:	4798      	blx	r3
	Dev->IO_Driver.init = '\0';
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	2200      	movs	r2, #0
 80005f2:	609a      	str	r2, [r3, #8]
	Dev->IO_Driver.deinit = '\0';
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	2200      	movs	r2, #0
 80005f8:	60da      	str	r2, [r3, #12]
	Dev->IO_Driver.read = '\0';
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	2200      	movs	r2, #0
 80005fe:	615a      	str	r2, [r3, #20]
	Dev->IO_Driver.write = '\0';
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	2200      	movs	r2, #0
 8000604:	611a      	str	r2, [r3, #16]
	Dev->IO_Driver.ioctl = '\0';
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	2200      	movs	r2, #0
 800060a:	619a      	str	r2, [r3, #24]
}
 800060c:	bf00      	nop
 800060e:	3708      	adds	r7, #8
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}

08000614 <FT6206_ReadScreen>:
 *@Params:
 *@Return:
 *@Precondition:
 *@Postcondition:
 **************************************//**************************************/
void FT6206_ReadScreen(FT6206_Handle_t *Dev){
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
	//uint8_t buffer[4];
	Dev->P1_YPos = 240 - ((touch_screen_buffer[0] << 8 | touch_screen_buffer[1]) & 0x0FFF);
 800061c:	4b18      	ldr	r3, [pc, #96]	; (8000680 <FT6206_ReadScreen+0x6c>)
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	021b      	lsls	r3, r3, #8
 8000622:	b21a      	sxth	r2, r3
 8000624:	4b16      	ldr	r3, [pc, #88]	; (8000680 <FT6206_ReadScreen+0x6c>)
 8000626:	785b      	ldrb	r3, [r3, #1]
 8000628:	b21b      	sxth	r3, r3
 800062a:	4313      	orrs	r3, r2
 800062c:	b21b      	sxth	r3, r3
 800062e:	b29b      	uxth	r3, r3
 8000630:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000634:	b29b      	uxth	r3, r3
 8000636:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 800063a:	b29a      	uxth	r2, r3
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	805a      	strh	r2, [r3, #2]
	Dev->P1_EventFlag = touch_screen_buffer[0] >> 6;
 8000640:	4b0f      	ldr	r3, [pc, #60]	; (8000680 <FT6206_ReadScreen+0x6c>)
 8000642:	781b      	ldrb	r3, [r3, #0]
 8000644:	099b      	lsrs	r3, r3, #6
 8000646:	b2da      	uxtb	r2, r3
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	711a      	strb	r2, [r3, #4]
	Dev->P1_XPos = (touch_screen_buffer[2] << 8 | touch_screen_buffer[3]) & 0x0FFF;
 800064c:	4b0c      	ldr	r3, [pc, #48]	; (8000680 <FT6206_ReadScreen+0x6c>)
 800064e:	789b      	ldrb	r3, [r3, #2]
 8000650:	021b      	lsls	r3, r3, #8
 8000652:	b21a      	sxth	r2, r3
 8000654:	4b0a      	ldr	r3, [pc, #40]	; (8000680 <FT6206_ReadScreen+0x6c>)
 8000656:	78db      	ldrb	r3, [r3, #3]
 8000658:	b21b      	sxth	r3, r3
 800065a:	4313      	orrs	r3, r2
 800065c:	b21b      	sxth	r3, r3
 800065e:	b29b      	uxth	r3, r3
 8000660:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000664:	b29a      	uxth	r2, r3
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	801a      	strh	r2, [r3, #0]
	Dev->IO_Driver.read(P1_XH, touch_screen_buffer, 4);
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	695b      	ldr	r3, [r3, #20]
 800066e:	2003      	movs	r0, #3
 8000670:	2204      	movs	r2, #4
 8000672:	4903      	ldr	r1, [pc, #12]	; (8000680 <FT6206_ReadScreen+0x6c>)
 8000674:	4798      	blx	r3
}
 8000676:	bf00      	nop
 8000678:	3708      	adds	r7, #8
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	200003a4 	.word	0x200003a4

08000684 <FT6206_IO_Init>:
 *@Params:
 *@Return:
 *@Precondition:
 *@Postcondition:
 **************************************//**************************************/
static void FT6206_IO_Init(void){
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
	I2C2_DMA_Init();
 8000688:	f001 fdca 	bl	8002220 <I2C2_DMA_Init>
	I2C_GPIO_Init();
 800068c:	f001 fde8 	bl	8002260 <I2C_GPIO_Init>
	I2C2_Init();
 8000690:	f001 ff9e 	bl	80025d0 <I2C2_Init>
}
 8000694:	bf00      	nop
 8000696:	bd80      	pop	{r7, pc}

08000698 <FT6206_IO_DeInit>:
 *@Params:
 *@Return:
 *@Precondition:
 *@Postcondition:
 **************************************//**************************************/
static void FT6206_IO_DeInit(void){
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
	HAL_NVIC_DisableIRQ(DMA1_Stream2_IRQn);
 800069c:	200d      	movs	r0, #13
 800069e:	f004 f824 	bl	80046ea <HAL_NVIC_DisableIRQ>
	HAL_NVIC_ClearPendingIRQ(DMA1_Stream2_IRQn);
 80006a2:	200d      	movs	r0, #13
 80006a4:	f004 f83b 	bl	800471e <HAL_NVIC_ClearPendingIRQ>
}
 80006a8:	bf00      	nop
 80006aa:	bd80      	pop	{r7, pc}

080006ac <FT6206_IO_Write>:
 *@Params:
 *@Return:
 *@Precondition:
 *@Postcondition:
 **************************************//**************************************/
static FT6206_Status_t FT6206_IO_Write(uint8_t Reg, uint8_t* pdata, uint8_t length){
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b086      	sub	sp, #24
 80006b0:	af04      	add	r7, sp, #16
 80006b2:	4603      	mov	r3, r0
 80006b4:	6039      	str	r1, [r7, #0]
 80006b6:	71fb      	strb	r3, [r7, #7]
 80006b8:	4613      	mov	r3, r2
 80006ba:	71bb      	strb	r3, [r7, #6]
	if(HAL_I2C_Mem_Write(&hi2c2, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pdata, length, 100) != HAL_OK){
 80006bc:	2370      	movs	r3, #112	; 0x70
 80006be:	b299      	uxth	r1, r3
 80006c0:	79fb      	ldrb	r3, [r7, #7]
 80006c2:	b29a      	uxth	r2, r3
 80006c4:	79bb      	ldrb	r3, [r7, #6]
 80006c6:	b29b      	uxth	r3, r3
 80006c8:	2064      	movs	r0, #100	; 0x64
 80006ca:	9002      	str	r0, [sp, #8]
 80006cc:	9301      	str	r3, [sp, #4]
 80006ce:	683b      	ldr	r3, [r7, #0]
 80006d0:	9300      	str	r3, [sp, #0]
 80006d2:	2301      	movs	r3, #1
 80006d4:	4806      	ldr	r0, [pc, #24]	; (80006f0 <FT6206_IO_Write+0x44>)
 80006d6:	f005 f805 	bl	80056e4 <HAL_I2C_Mem_Write>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <FT6206_IO_Write+0x38>
		return FT6206_Err;
 80006e0:	2301      	movs	r3, #1
 80006e2:	e000      	b.n	80006e6 <FT6206_IO_Write+0x3a>
	}
	return FT6206_Ok;
 80006e4:	2300      	movs	r3, #0
}
 80006e6:	4618      	mov	r0, r3
 80006e8:	3708      	adds	r7, #8
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	20000e34 	.word	0x20000e34

080006f4 <FT6206_IO_Read>:
 *@Params:
 *@Return:
 *@Precondition:
 *@Postcondition:
 **************************************//**************************************/
static FT6206_Status_t FT6206_IO_Read(uint8_t Reg, uint8_t* pdata, uint8_t length){
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b084      	sub	sp, #16
 80006f8:	af02      	add	r7, sp, #8
 80006fa:	4603      	mov	r3, r0
 80006fc:	6039      	str	r1, [r7, #0]
 80006fe:	71fb      	strb	r3, [r7, #7]
 8000700:	4613      	mov	r3, r2
 8000702:	71bb      	strb	r3, [r7, #6]
	if(HAL_I2C_Mem_Read_DMA(&hi2c2, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pdata, length) != HAL_OK){
 8000704:	2370      	movs	r3, #112	; 0x70
 8000706:	b299      	uxth	r1, r3
 8000708:	79fb      	ldrb	r3, [r7, #7]
 800070a:	b29a      	uxth	r2, r3
 800070c:	79bb      	ldrb	r3, [r7, #6]
 800070e:	b29b      	uxth	r3, r3
 8000710:	9301      	str	r3, [sp, #4]
 8000712:	683b      	ldr	r3, [r7, #0]
 8000714:	9300      	str	r3, [sp, #0]
 8000716:	2301      	movs	r3, #1
 8000718:	4806      	ldr	r0, [pc, #24]	; (8000734 <FT6206_IO_Read+0x40>)
 800071a:	f005 f8dd 	bl	80058d8 <HAL_I2C_Mem_Read_DMA>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <FT6206_IO_Read+0x34>
		return FT6206_Err;
 8000724:	2301      	movs	r3, #1
 8000726:	e000      	b.n	800072a <FT6206_IO_Read+0x36>
	}
	return FT6206_Ok;
 8000728:	2300      	movs	r3, #0
}
 800072a:	4618      	mov	r0, r3
 800072c:	3708      	adds	r7, #8
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	20000e34 	.word	0x20000e34

08000738 <FT6206_IO_ioctl>:
 *@Params:
 *@Return:
 *@Precondition:
 *@Postcondition:
 **************************************//**************************************/
static uint8_t FT6206_IO_ioctl(FT6206_IO_Cmd_t Command){
 8000738:	b480      	push	{r7}
 800073a:	b083      	sub	sp, #12
 800073c:	af00      	add	r7, sp, #0
 800073e:	4603      	mov	r3, r0
 8000740:	71fb      	strb	r3, [r7, #7]
	return FT6206_Ok;
 8000742:	2300      	movs	r3, #0
}
 8000744:	4618      	mov	r0, r3
 8000746:	370c      	adds	r7, #12
 8000748:	46bd      	mov	sp, r7
 800074a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074e:	4770      	bx	lr

08000750 <ILI9341_Init>:
 *@Params:
 *@Return:
 *@Precondition:
 *@Postcondition:
 **************************************//**************************************/
void ILI9341_Init(ILI9341_Init_Struct_t Settings, ILI9341_Handle_t *Dev, ILI9341_IO_Drv_t IO_Driver){
 8000750:	b5b0      	push	{r4, r5, r7, lr}
 8000752:	b08a      	sub	sp, #40	; 0x28
 8000754:	af00      	add	r7, sp, #0
 8000756:	1d3c      	adds	r4, r7, #4
 8000758:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800075c:	603b      	str	r3, [r7, #0]
	Dev->Orientation = Settings.Orientation;
 800075e:	793a      	ldrb	r2, [r7, #4]
 8000760:	683b      	ldr	r3, [r7, #0]
 8000762:	701a      	strb	r2, [r3, #0]
	Dev->ScreenHeight = Settings.ScreenHeight;
 8000764:	68fa      	ldr	r2, [r7, #12]
 8000766:	683b      	ldr	r3, [r7, #0]
 8000768:	609a      	str	r2, [r3, #8]
	Dev->ScreenWidth = Settings.ScreenWidth;
 800076a:	68ba      	ldr	r2, [r7, #8]
 800076c:	683b      	ldr	r3, [r7, #0]
 800076e:	605a      	str	r2, [r3, #4]
	Dev->Cursor.X = 0;
 8000770:	683b      	ldr	r3, [r7, #0]
 8000772:	2200      	movs	r2, #0
 8000774:	819a      	strh	r2, [r3, #12]
	Dev->Cursor.Y = 0;
 8000776:	683b      	ldr	r3, [r7, #0]
 8000778:	2200      	movs	r2, #0
 800077a:	81da      	strh	r2, [r3, #14]
	Dev->IO_Drv = IO_Driver;
 800077c:	683b      	ldr	r3, [r7, #0]
 800077e:	f103 0410 	add.w	r4, r3, #16
 8000782:	f107 0538 	add.w	r5, r7, #56	; 0x38
 8000786:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000788:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800078a:	682b      	ldr	r3, [r5, #0]
 800078c:	6023      	str	r3, [r4, #0]

	Dev->IO_Drv.init();
 800078e:	683b      	ldr	r3, [r7, #0]
 8000790:	691b      	ldr	r3, [r3, #16]
 8000792:	4798      	blx	r3
	uint8_t buffer[20];


	Dev->IO_Drv.write(ILI9341_SWRESET, buffer, 0);
 8000794:	683b      	ldr	r3, [r7, #0]
 8000796:	699b      	ldr	r3, [r3, #24]
 8000798:	f107 0114 	add.w	r1, r7, #20
 800079c:	2200      	movs	r2, #0
 800079e:	2001      	movs	r0, #1
 80007a0:	4798      	blx	r3
	Dev->IO_Drv.ioctl(ILI9341_Delay1000);
 80007a2:	683b      	ldr	r3, [r7, #0]
 80007a4:	6a1b      	ldr	r3, [r3, #32]
 80007a6:	2001      	movs	r0, #1
 80007a8:	4798      	blx	r3
    

	//Power Control A - Page 195
    buffer[0] = 0x39;
 80007aa:	2339      	movs	r3, #57	; 0x39
 80007ac:	753b      	strb	r3, [r7, #20]
    buffer[1] = 0x2C;
 80007ae:	232c      	movs	r3, #44	; 0x2c
 80007b0:	757b      	strb	r3, [r7, #21]
    buffer[2] = 0x00;
 80007b2:	2300      	movs	r3, #0
 80007b4:	75bb      	strb	r3, [r7, #22]
    buffer[3] = 0x34;
 80007b6:	2334      	movs	r3, #52	; 0x34
 80007b8:	75fb      	strb	r3, [r7, #23]
    buffer[4] = 0x02;
 80007ba:	2302      	movs	r3, #2
 80007bc:	763b      	strb	r3, [r7, #24]
	Dev->IO_Drv.write(ILI9341_PWRCONTROLA, buffer, 5);
 80007be:	683b      	ldr	r3, [r7, #0]
 80007c0:	699b      	ldr	r3, [r3, #24]
 80007c2:	f107 0114 	add.w	r1, r7, #20
 80007c6:	2205      	movs	r2, #5
 80007c8:	20cb      	movs	r0, #203	; 0xcb
 80007ca:	4798      	blx	r3


	//Power Control B - Page 196
    buffer[0] = 0x00;
 80007cc:	2300      	movs	r3, #0
 80007ce:	753b      	strb	r3, [r7, #20]
    buffer[1] = 0xC1;
 80007d0:	23c1      	movs	r3, #193	; 0xc1
 80007d2:	757b      	strb	r3, [r7, #21]
    buffer[2] = 0x30;
 80007d4:	2330      	movs	r3, #48	; 0x30
 80007d6:	75bb      	strb	r3, [r7, #22]
    Dev->IO_Drv.write(ILI9341_PWRCONTROLB, buffer, 3);
 80007d8:	683b      	ldr	r3, [r7, #0]
 80007da:	699b      	ldr	r3, [r3, #24]
 80007dc:	f107 0114 	add.w	r1, r7, #20
 80007e0:	2203      	movs	r2, #3
 80007e2:	20cf      	movs	r0, #207	; 0xcf
 80007e4:	4798      	blx	r3

    //Driver Timing Control A - Page 197
    buffer[0] = 0x85;
 80007e6:	2385      	movs	r3, #133	; 0x85
 80007e8:	753b      	strb	r3, [r7, #20]
    buffer[1] = 0x00;
 80007ea:	2300      	movs	r3, #0
 80007ec:	757b      	strb	r3, [r7, #21]
    buffer[2] = 0x78;
 80007ee:	2378      	movs	r3, #120	; 0x78
 80007f0:	75bb      	strb	r3, [r7, #22]
    Dev->IO_Drv.write(ILI9341_TIMINGCONTROLA, buffer, 3);
 80007f2:	683b      	ldr	r3, [r7, #0]
 80007f4:	699b      	ldr	r3, [r3, #24]
 80007f6:	f107 0114 	add.w	r1, r7, #20
 80007fa:	2203      	movs	r2, #3
 80007fc:	20e8      	movs	r0, #232	; 0xe8
 80007fe:	4798      	blx	r3

    //Driver Timing Control B - Page 199
    buffer[0] = 0x00;
 8000800:	2300      	movs	r3, #0
 8000802:	753b      	strb	r3, [r7, #20]
    buffer[1] = 0x00;
 8000804:	2300      	movs	r3, #0
 8000806:	757b      	strb	r3, [r7, #21]
    Dev->IO_Drv.write(ILI9341_TIMINGCONTROLB, buffer, 2);
 8000808:	683b      	ldr	r3, [r7, #0]
 800080a:	699b      	ldr	r3, [r3, #24]
 800080c:	f107 0114 	add.w	r1, r7, #20
 8000810:	2202      	movs	r2, #2
 8000812:	20ea      	movs	r0, #234	; 0xea
 8000814:	4798      	blx	r3

    //Power on Sequence Control - Page 200
    buffer[0] = 0x64;
 8000816:	2364      	movs	r3, #100	; 0x64
 8000818:	753b      	strb	r3, [r7, #20]
    buffer[1] = 0x03;
 800081a:	2303      	movs	r3, #3
 800081c:	757b      	strb	r3, [r7, #21]
    buffer[2] = 0x12;
 800081e:	2312      	movs	r3, #18
 8000820:	75bb      	strb	r3, [r7, #22]
    buffer[3] = 0x81;
 8000822:	2381      	movs	r3, #129	; 0x81
 8000824:	75fb      	strb	r3, [r7, #23]
    Dev->IO_Drv.write(ILI9341_Pwr_on_sequence_control, buffer, 4);
 8000826:	683b      	ldr	r3, [r7, #0]
 8000828:	699b      	ldr	r3, [r3, #24]
 800082a:	f107 0114 	add.w	r1, r7, #20
 800082e:	2204      	movs	r2, #4
 8000830:	20ed      	movs	r0, #237	; 0xed
 8000832:	4798      	blx	r3

    //Pump Ratio Control - Page 202
    buffer[0] = 0x20;
 8000834:	2320      	movs	r3, #32
 8000836:	753b      	strb	r3, [r7, #20]
    Dev->IO_Drv.write(ILI9341_Pump_ratio_control, buffer, 1);
 8000838:	683b      	ldr	r3, [r7, #0]
 800083a:	699b      	ldr	r3, [r3, #24]
 800083c:	f107 0114 	add.w	r1, r7, #20
 8000840:	2201      	movs	r2, #1
 8000842:	20f7      	movs	r0, #247	; 0xf7
 8000844:	4798      	blx	r3

    //Power Control 1 - Page 178
    buffer[0] = 0x10;
 8000846:	2310      	movs	r3, #16
 8000848:	753b      	strb	r3, [r7, #20]
    Dev->IO_Drv.write(ILI9341_PWCTRL_1, buffer, 1);
 800084a:	683b      	ldr	r3, [r7, #0]
 800084c:	699b      	ldr	r3, [r3, #24]
 800084e:	f107 0114 	add.w	r1, r7, #20
 8000852:	2201      	movs	r2, #1
 8000854:	20c0      	movs	r0, #192	; 0xc0
 8000856:	4798      	blx	r3

    //Power Control 2 - Page 179
    buffer[0] = 0x10;
 8000858:	2310      	movs	r3, #16
 800085a:	753b      	strb	r3, [r7, #20]
    Dev->IO_Drv.write(ILI9341_PWCTRL_2, buffer, 1);
 800085c:	683b      	ldr	r3, [r7, #0]
 800085e:	699b      	ldr	r3, [r3, #24]
 8000860:	f107 0114 	add.w	r1, r7, #20
 8000864:	2201      	movs	r2, #1
 8000866:	20c1      	movs	r0, #193	; 0xc1
 8000868:	4798      	blx	r3

    //VCOM Control 1 - Page 180
    buffer[0] = 0x45;
 800086a:	2345      	movs	r3, #69	; 0x45
 800086c:	753b      	strb	r3, [r7, #20]
    buffer[1] = 0x15;
 800086e:	2315      	movs	r3, #21
 8000870:	757b      	strb	r3, [r7, #21]
    Dev->IO_Drv.write(ILI9341_VMCTRL1, buffer, 2);
 8000872:	683b      	ldr	r3, [r7, #0]
 8000874:	699b      	ldr	r3, [r3, #24]
 8000876:	f107 0114 	add.w	r1, r7, #20
 800087a:	2202      	movs	r2, #2
 800087c:	20c5      	movs	r0, #197	; 0xc5
 800087e:	4798      	blx	r3

    //VCOM Control 2 - Page 182
    buffer[0] = 0x90;
 8000880:	2390      	movs	r3, #144	; 0x90
 8000882:	753b      	strb	r3, [r7, #20]
    Dev->IO_Drv.write(ILI9341_VMCTRL2, buffer, 1);
 8000884:	683b      	ldr	r3, [r7, #0]
 8000886:	699b      	ldr	r3, [r3, #24]
 8000888:	f107 0114 	add.w	r1, r7, #20
 800088c:	2201      	movs	r2, #1
 800088e:	20c7      	movs	r0, #199	; 0xc7
 8000890:	4798      	blx	r3

    //Memory Access Control - Page 127
    buffer[0] = 0x30;
 8000892:	2330      	movs	r3, #48	; 0x30
 8000894:	753b      	strb	r3, [r7, #20]
    Dev->IO_Drv.write(ILI9341_MADCTL, buffer, 1);
 8000896:	683b      	ldr	r3, [r7, #0]
 8000898:	699b      	ldr	r3, [r3, #24]
 800089a:	f107 0114 	add.w	r1, r7, #20
 800089e:	2201      	movs	r2, #1
 80008a0:	2036      	movs	r0, #54	; 0x36
 80008a2:	4798      	blx	r3

    //Pixel Format Set - Page 134
    buffer[0] = 0x66;
 80008a4:	2366      	movs	r3, #102	; 0x66
 80008a6:	753b      	strb	r3, [r7, #20]
    Dev->IO_Drv.write(ILI9341_PIXSET, buffer, 1);
 80008a8:	683b      	ldr	r3, [r7, #0]
 80008aa:	699b      	ldr	r3, [r3, #24]
 80008ac:	f107 0114 	add.w	r1, r7, #20
 80008b0:	2201      	movs	r2, #1
 80008b2:	203a      	movs	r0, #58	; 0x3a
 80008b4:	4798      	blx	r3

    //Frame Rate Control (In Normal Mode/Full Colors) - Page 155
    buffer[0] = 0x00;
 80008b6:	2300      	movs	r3, #0
 80008b8:	753b      	strb	r3, [r7, #20]
    buffer[1] = 0x18;
 80008ba:	2318      	movs	r3, #24
 80008bc:	757b      	strb	r3, [r7, #21]
    Dev->IO_Drv.write(ILI9341_FRMCTR1, buffer, 2);
 80008be:	683b      	ldr	r3, [r7, #0]
 80008c0:	699b      	ldr	r3, [r3, #24]
 80008c2:	f107 0114 	add.w	r1, r7, #20
 80008c6:	2202      	movs	r2, #2
 80008c8:	20b1      	movs	r0, #177	; 0xb1
 80008ca:	4798      	blx	r3

    // Display Function Control - Page 164
    buffer[0] = 0x08;
 80008cc:	2308      	movs	r3, #8
 80008ce:	753b      	strb	r3, [r7, #20]
    buffer[1] = 0x82;
 80008d0:	2382      	movs	r3, #130	; 0x82
 80008d2:	757b      	strb	r3, [r7, #21]
    buffer[2] = 0x27;
 80008d4:	2327      	movs	r3, #39	; 0x27
 80008d6:	75bb      	strb	r3, [r7, #22]
    Dev->IO_Drv.write(ILI9341_DISCTRL, buffer, 3);
 80008d8:	683b      	ldr	r3, [r7, #0]
 80008da:	699b      	ldr	r3, [r3, #24]
 80008dc:	f107 0114 	add.w	r1, r7, #20
 80008e0:	2203      	movs	r2, #3
 80008e2:	20b6      	movs	r0, #182	; 0xb6
 80008e4:	4798      	blx	r3

    //Enable 3G - Page 201
    buffer[0] = 0x00;
 80008e6:	2300      	movs	r3, #0
 80008e8:	753b      	strb	r3, [r7, #20]
    Dev->IO_Drv.write(ILI9341_Enable_3G, buffer, 1);
 80008ea:	683b      	ldr	r3, [r7, #0]
 80008ec:	699b      	ldr	r3, [r3, #24]
 80008ee:	f107 0114 	add.w	r1, r7, #20
 80008f2:	2201      	movs	r2, #1
 80008f4:	20f2      	movs	r0, #242	; 0xf2
 80008f6:	4798      	blx	r3

    //Gamma Set - Page 107
    buffer[0] = 0x01;
 80008f8:	2301      	movs	r3, #1
 80008fa:	753b      	strb	r3, [r7, #20]
    Dev->IO_Drv.write(ILI9341_GAMSET, buffer, 1);
 80008fc:	683b      	ldr	r3, [r7, #0]
 80008fe:	699b      	ldr	r3, [r3, #24]
 8000900:	f107 0114 	add.w	r1, r7, #20
 8000904:	2201      	movs	r2, #1
 8000906:	2026      	movs	r0, #38	; 0x26
 8000908:	4798      	blx	r3

    //Positive Gamma Correction - Page 188
    buffer[0] = 0x0F;
 800090a:	230f      	movs	r3, #15
 800090c:	753b      	strb	r3, [r7, #20]
    buffer[1] = 0x29;
 800090e:	2329      	movs	r3, #41	; 0x29
 8000910:	757b      	strb	r3, [r7, #21]
    buffer[2] = 0x24;
 8000912:	2324      	movs	r3, #36	; 0x24
 8000914:	75bb      	strb	r3, [r7, #22]
    buffer[3] = 0x0C;
 8000916:	230c      	movs	r3, #12
 8000918:	75fb      	strb	r3, [r7, #23]
    buffer[4] = 0x0E;
 800091a:	230e      	movs	r3, #14
 800091c:	763b      	strb	r3, [r7, #24]
    buffer[5] = 0x09;
 800091e:	2309      	movs	r3, #9
 8000920:	767b      	strb	r3, [r7, #25]
    buffer[6] = 0x4E;
 8000922:	234e      	movs	r3, #78	; 0x4e
 8000924:	76bb      	strb	r3, [r7, #26]
    buffer[7] = 0x78;
 8000926:	2378      	movs	r3, #120	; 0x78
 8000928:	76fb      	strb	r3, [r7, #27]
    buffer[8] = 0x3C;
 800092a:	233c      	movs	r3, #60	; 0x3c
 800092c:	773b      	strb	r3, [r7, #28]
    buffer[9] = 0x09;
 800092e:	2309      	movs	r3, #9
 8000930:	777b      	strb	r3, [r7, #29]
    buffer[10] = 0x13;
 8000932:	2313      	movs	r3, #19
 8000934:	77bb      	strb	r3, [r7, #30]
    buffer[11] = 0x05;
 8000936:	2305      	movs	r3, #5
 8000938:	77fb      	strb	r3, [r7, #31]
    buffer[12] = 0x17;
 800093a:	2317      	movs	r3, #23
 800093c:	f887 3020 	strb.w	r3, [r7, #32]
    buffer[13] = 0x11;
 8000940:	2311      	movs	r3, #17
 8000942:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    buffer[14] = 0x00;
 8000946:	2300      	movs	r3, #0
 8000948:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    Dev->IO_Drv.write(ILI9341_PGAMCTRL, buffer, 15);
 800094c:	683b      	ldr	r3, [r7, #0]
 800094e:	699b      	ldr	r3, [r3, #24]
 8000950:	f107 0114 	add.w	r1, r7, #20
 8000954:	220f      	movs	r2, #15
 8000956:	20e0      	movs	r0, #224	; 0xe0
 8000958:	4798      	blx	r3

    //Negative Gamma Correction - Page 189
    buffer[0] = 0x00;
 800095a:	2300      	movs	r3, #0
 800095c:	753b      	strb	r3, [r7, #20]
    buffer[1] = 0x16;
 800095e:	2316      	movs	r3, #22
 8000960:	757b      	strb	r3, [r7, #21]
    buffer[2] = 0x1B;
 8000962:	231b      	movs	r3, #27
 8000964:	75bb      	strb	r3, [r7, #22]
    buffer[3] = 0x04;
 8000966:	2304      	movs	r3, #4
 8000968:	75fb      	strb	r3, [r7, #23]
    buffer[4] = 0x11;
 800096a:	2311      	movs	r3, #17
 800096c:	763b      	strb	r3, [r7, #24]
    buffer[5] = 0x07;
 800096e:	2307      	movs	r3, #7
 8000970:	767b      	strb	r3, [r7, #25]
    buffer[6] = 0x31;
 8000972:	2331      	movs	r3, #49	; 0x31
 8000974:	76bb      	strb	r3, [r7, #26]
    buffer[7] = 0x33;
 8000976:	2333      	movs	r3, #51	; 0x33
 8000978:	76fb      	strb	r3, [r7, #27]
    buffer[8] = 0x42;
 800097a:	2342      	movs	r3, #66	; 0x42
 800097c:	773b      	strb	r3, [r7, #28]
    buffer[9] = 0x05;
 800097e:	2305      	movs	r3, #5
 8000980:	777b      	strb	r3, [r7, #29]
    buffer[10] = 0x0C;
 8000982:	230c      	movs	r3, #12
 8000984:	77bb      	strb	r3, [r7, #30]
    buffer[11] = 0x0A;
 8000986:	230a      	movs	r3, #10
 8000988:	77fb      	strb	r3, [r7, #31]
    buffer[12] = 0x28;
 800098a:	2328      	movs	r3, #40	; 0x28
 800098c:	f887 3020 	strb.w	r3, [r7, #32]
    buffer[13] = 0x2F;
 8000990:	232f      	movs	r3, #47	; 0x2f
 8000992:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    buffer[14] = 0x0F;
 8000996:	230f      	movs	r3, #15
 8000998:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    Dev->IO_Drv.write(ILI9341_NGAMCTRL, buffer, 15);
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	699b      	ldr	r3, [r3, #24]
 80009a0:	f107 0114 	add.w	r1, r7, #20
 80009a4:	220f      	movs	r2, #15
 80009a6:	20e1      	movs	r0, #225	; 0xe1
 80009a8:	4798      	blx	r3

    //Sleep Out - Page 101
    Dev->IO_Drv.write(ILI9341_SLPOUT, buffer, 0);
 80009aa:	683b      	ldr	r3, [r7, #0]
 80009ac:	699b      	ldr	r3, [r3, #24]
 80009ae:	f107 0114 	add.w	r1, r7, #20
 80009b2:	2200      	movs	r2, #0
 80009b4:	2011      	movs	r0, #17
 80009b6:	4798      	blx	r3
    Dev->IO_Drv.ioctl(ILI9341_Delay150);
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	6a1b      	ldr	r3, [r3, #32]
 80009bc:	2000      	movs	r0, #0
 80009be:	4798      	blx	r3


    //Display ON - Page 109
    Dev->IO_Drv.write(ILI9341_DISPON, buffer, 0);
 80009c0:	683b      	ldr	r3, [r7, #0]
 80009c2:	699b      	ldr	r3, [r3, #24]
 80009c4:	f107 0114 	add.w	r1, r7, #20
 80009c8:	2200      	movs	r2, #0
 80009ca:	2029      	movs	r0, #41	; 0x29
 80009cc:	4798      	blx	r3

    Dev->IO_Drv.write(ILI9341_MADCTL, &Settings.Orientation,1);
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	699b      	ldr	r3, [r3, #24]
 80009d2:	1d39      	adds	r1, r7, #4
 80009d4:	2201      	movs	r2, #1
 80009d6:	2036      	movs	r0, #54	; 0x36
 80009d8:	4798      	blx	r3
}
 80009da:	bf00      	nop
 80009dc:	3728      	adds	r7, #40	; 0x28
 80009de:	46bd      	mov	sp, r7
 80009e0:	bdb0      	pop	{r4, r5, r7, pc}

080009e2 <ILI9341_FillSceen>:
 *@Params:
 *@Return:
 *@Precondition:
 *@Postcondition:
 **************************************//**************************************/
void ILI9341_FillSceen(ILI9341_Handle_t *Dev, ILI9341_Color_t Color){
 80009e2:	b580      	push	{r7, lr}
 80009e4:	b084      	sub	sp, #16
 80009e6:	af00      	add	r7, sp, #0
 80009e8:	6078      	str	r0, [r7, #4]
 80009ea:	6039      	str	r1, [r7, #0]
    ILI9341_Coordinate_t CoordinateStart = {.X = 0, .Y = 0};
 80009ec:	2300      	movs	r3, #0
 80009ee:	81bb      	strh	r3, [r7, #12]
 80009f0:	2300      	movs	r3, #0
 80009f2:	81fb      	strh	r3, [r7, #14]
    ILI9341_Coordinate_t CoordinateEnd = {.X = Dev->ScreenWidth-1, .Y = Dev->ScreenHeight-1};
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	685b      	ldr	r3, [r3, #4]
 80009f8:	b29b      	uxth	r3, r3
 80009fa:	3b01      	subs	r3, #1
 80009fc:	b29b      	uxth	r3, r3
 80009fe:	b21b      	sxth	r3, r3
 8000a00:	813b      	strh	r3, [r7, #8]
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	689b      	ldr	r3, [r3, #8]
 8000a06:	b29b      	uxth	r3, r3
 8000a08:	3b01      	subs	r3, #1
 8000a0a:	b29b      	uxth	r3, r3
 8000a0c:	b21b      	sxth	r3, r3
 8000a0e:	817b      	strh	r3, [r7, #10]
    ILI9341_SetCoordinates(Dev, CoordinateStart, CoordinateEnd);
 8000a10:	68ba      	ldr	r2, [r7, #8]
 8000a12:	68f9      	ldr	r1, [r7, #12]
 8000a14:	6878      	ldr	r0, [r7, #4]
 8000a16:	f000 f84a 	bl	8000aae <ILI9341_SetCoordinates>
    Dev->IO_Drv.write(ILI9341_RAMWR,(uint8_t*)&Color, 0);
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	699b      	ldr	r3, [r3, #24]
 8000a1e:	4639      	mov	r1, r7
 8000a20:	2200      	movs	r2, #0
 8000a22:	202c      	movs	r0, #44	; 0x2c
 8000a24:	4798      	blx	r3
    Dev->IO_Drv.write(ILI9341_NOCOMMAND, (uint8_t*)&Color, TOTAL_SCREEN_BYTES);
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	699b      	ldr	r3, [r3, #24]
 8000a2a:	4639      	mov	r1, r7
 8000a2c:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8000a30:	20ff      	movs	r0, #255	; 0xff
 8000a32:	4798      	blx	r3
}
 8000a34:	bf00      	nop
 8000a36:	3710      	adds	r7, #16
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}

08000a3c <ILI9341_DisplayImage>:
    Dev->IO_Drv.write(ILI9341_NOCOMMAND, (uint8_t*)&Color, TotalBytes);
}



void ILI9341_DisplayImage(ILI9341_Handle_t *Dev, const ILI9341_Image_t Image){
 8000a3c:	b084      	sub	sp, #16
 8000a3e:	b580      	push	{r7, lr}
 8000a40:	b084      	sub	sp, #16
 8000a42:	af00      	add	r7, sp, #0
 8000a44:	6078      	str	r0, [r7, #4]
 8000a46:	f107 001c 	add.w	r0, r7, #28
 8000a4a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    ILI9341_Coordinate_t CoordinateStart = {.X = Dev->Cursor.X, .Y = Dev->Cursor.Y};
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8000a54:	81bb      	strh	r3, [r7, #12]
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000a5c:	81fb      	strh	r3, [r7, #14]
    ILI9341_Coordinate_t CoordinateEnd = {.X = CoordinateStart.X + Image.Width - 1, .Y = CoordinateStart.Y + Image.Height - 1};
 8000a5e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000a62:	b29a      	uxth	r2, r3
 8000a64:	69fb      	ldr	r3, [r7, #28]
 8000a66:	b29b      	uxth	r3, r3
 8000a68:	4413      	add	r3, r2
 8000a6a:	b29b      	uxth	r3, r3
 8000a6c:	3b01      	subs	r3, #1
 8000a6e:	b29b      	uxth	r3, r3
 8000a70:	b21b      	sxth	r3, r3
 8000a72:	813b      	strh	r3, [r7, #8]
 8000a74:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000a78:	b29a      	uxth	r2, r3
 8000a7a:	6a3b      	ldr	r3, [r7, #32]
 8000a7c:	b29b      	uxth	r3, r3
 8000a7e:	4413      	add	r3, r2
 8000a80:	b29b      	uxth	r3, r3
 8000a82:	3b01      	subs	r3, #1
 8000a84:	b29b      	uxth	r3, r3
 8000a86:	b21b      	sxth	r3, r3
 8000a88:	817b      	strh	r3, [r7, #10]
    ILI9341_SetCoordinates(Dev,CoordinateStart,CoordinateEnd);
 8000a8a:	68ba      	ldr	r2, [r7, #8]
 8000a8c:	68f9      	ldr	r1, [r7, #12]
 8000a8e:	6878      	ldr	r0, [r7, #4]
 8000a90:	f000 f80d 	bl	8000aae <ILI9341_SetCoordinates>
    //Dev->IO_Drv.write(ILI9341_RAMWR,(uint8_t*)&dummy,0);
    Dev->IO_Drv.write(ILI9341_RAMWR, (uint8_t*)Image.ImageData, Image.ImageLength);
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	699b      	ldr	r3, [r3, #24]
 8000a98:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000a9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a9c:	202c      	movs	r0, #44	; 0x2c
 8000a9e:	4798      	blx	r3
}
 8000aa0:	bf00      	nop
 8000aa2:	3710      	adds	r7, #16
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000aaa:	b004      	add	sp, #16
 8000aac:	4770      	bx	lr

08000aae <ILI9341_SetCoordinates>:
    ILI9341_DrawPixel(Dev, Color, Iter);
    Iter.Y++;
    }while(Iter.Y <= EndY);
}

static void ILI9341_SetCoordinates(ILI9341_Handle_t *Dev, ILI9341_Coordinate_t StartCorner, ILI9341_Coordinate_t EndCorner){
 8000aae:	b580      	push	{r7, lr}
 8000ab0:	b086      	sub	sp, #24
 8000ab2:	af00      	add	r7, sp, #0
 8000ab4:	60f8      	str	r0, [r7, #12]
 8000ab6:	60b9      	str	r1, [r7, #8]
 8000ab8:	607a      	str	r2, [r7, #4]
    ILI9341_DrawBounds_t Coordinate = {.S_MSB = StartCorner.X >> 8, .S_LSB = StartCorner.X, .E_MSB = EndCorner.X >> 8, .E_LSB = EndCorner.X};
 8000aba:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000abe:	121b      	asrs	r3, r3, #8
 8000ac0:	b21b      	sxth	r3, r3
 8000ac2:	b2db      	uxtb	r3, r3
 8000ac4:	753b      	strb	r3, [r7, #20]
 8000ac6:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000aca:	b2db      	uxtb	r3, r3
 8000acc:	757b      	strb	r3, [r7, #21]
 8000ace:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000ad2:	121b      	asrs	r3, r3, #8
 8000ad4:	b21b      	sxth	r3, r3
 8000ad6:	b2db      	uxtb	r3, r3
 8000ad8:	75bb      	strb	r3, [r7, #22]
 8000ada:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000ade:	b2db      	uxtb	r3, r3
 8000ae0:	75fb      	strb	r3, [r7, #23]
    Dev->IO_Drv.write(ILI9341_CASET,(uint8_t*)&Coordinate,4);
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	699b      	ldr	r3, [r3, #24]
 8000ae6:	f107 0114 	add.w	r1, r7, #20
 8000aea:	2204      	movs	r2, #4
 8000aec:	202a      	movs	r0, #42	; 0x2a
 8000aee:	4798      	blx	r3
    Coordinate.S_MSB = StartCorner.Y >> 8;
 8000af0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000af4:	121b      	asrs	r3, r3, #8
 8000af6:	b21b      	sxth	r3, r3
 8000af8:	b2db      	uxtb	r3, r3
 8000afa:	753b      	strb	r3, [r7, #20]
    Coordinate.S_LSB = StartCorner.Y;
 8000afc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000b00:	b2db      	uxtb	r3, r3
 8000b02:	757b      	strb	r3, [r7, #21]
    Coordinate.E_MSB = EndCorner.Y >> 8;
 8000b04:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b08:	121b      	asrs	r3, r3, #8
 8000b0a:	b21b      	sxth	r3, r3
 8000b0c:	b2db      	uxtb	r3, r3
 8000b0e:	75bb      	strb	r3, [r7, #22]
    Coordinate.E_LSB = EndCorner.Y;
 8000b10:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b14:	b2db      	uxtb	r3, r3
 8000b16:	75fb      	strb	r3, [r7, #23]
    Dev->IO_Drv.write(ILI9341_PASET,(uint8_t*)&Coordinate,4);
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	699b      	ldr	r3, [r3, #24]
 8000b1c:	f107 0114 	add.w	r1, r7, #20
 8000b20:	2204      	movs	r2, #4
 8000b22:	202b      	movs	r0, #43	; 0x2b
 8000b24:	4798      	blx	r3
}
 8000b26:	bf00      	nop
 8000b28:	3718      	adds	r7, #24
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}

08000b2e <ILI9341_IO_Init>:
 *@Params:
 *@Return:
 *@Precondition:
 *@Postcondition:
 **************************************//**************************************/
static void ILI9341_IO_Init(void){
 8000b2e:	b580      	push	{r7, lr}
 8000b30:	af00      	add	r7, sp, #0
  ILI9341_GPIO_Init();
 8000b32:	f001 fbe3 	bl	80022fc <ILI9341_GPIO_Init>
  ILI9341_SPI_Init();
 8000b36:	f002 f83f 	bl	8002bb8 <ILI9341_SPI_Init>
}
 8000b3a:	bf00      	nop
 8000b3c:	bd80      	pop	{r7, pc}

08000b3e <ILI9341_IO_DeInit>:
 *@Params:
 *@Return:
 *@Precondition:
 *@Postcondition:
 **************************************//**************************************/
static void ILI9341_IO_DeInit(void){
 8000b3e:	b580      	push	{r7, lr}
 8000b40:	af00      	add	r7, sp, #0
	ILI9341_GPIO_DeInit();
 8000b42:	f001 fc1d 	bl	8002380 <ILI9341_GPIO_DeInit>
}
 8000b46:	bf00      	nop
 8000b48:	bd80      	pop	{r7, pc}

08000b4a <ILI9341_IO_ioctl>:
 *@Params:
 *@Return:
 *@Precondition:
 *@Postcondition:
 **************************************//**************************************/
static ILI9341_Status_t ILI9341_IO_ioctl(ILI9341_Cmd_t Command){
 8000b4a:	b580      	push	{r7, lr}
 8000b4c:	b082      	sub	sp, #8
 8000b4e:	af00      	add	r7, sp, #0
 8000b50:	4603      	mov	r3, r0
 8000b52:	71fb      	strb	r3, [r7, #7]
    switch(Command){
 8000b54:	79fb      	ldrb	r3, [r7, #7]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d002      	beq.n	8000b60 <ILI9341_IO_ioctl+0x16>
 8000b5a:	2b01      	cmp	r3, #1
 8000b5c:	d005      	beq.n	8000b6a <ILI9341_IO_ioctl+0x20>
 8000b5e:	e00a      	b.n	8000b76 <ILI9341_IO_ioctl+0x2c>
    case(ILI9341_Delay150):
    		HAL_Delay(150);
 8000b60:	2096      	movs	r0, #150	; 0x96
 8000b62:	f002 fffb 	bl	8003b5c <HAL_Delay>
            return ILI9341_Ok;
 8000b66:	2300      	movs	r3, #0
 8000b68:	e006      	b.n	8000b78 <ILI9341_IO_ioctl+0x2e>
    case(ILI9341_Delay1000):
    		HAL_Delay(1000);
 8000b6a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b6e:	f002 fff5 	bl	8003b5c <HAL_Delay>
            return ILI9341_Ok;
 8000b72:	2300      	movs	r3, #0
 8000b74:	e000      	b.n	8000b78 <ILI9341_IO_ioctl+0x2e>
    default:
    	return ILI9341_Ok;
 8000b76:	2300      	movs	r3, #0
    }
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	3708      	adds	r7, #8
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}

08000b80 <ILI9341_IO_WriteReg>:
 *@Params:
 *@Return:
 *@Precondition:
 *@Postcondition:
 **************************************//**************************************/
static ILI9341_Status_t ILI9341_IO_WriteReg(uint8_t reg, uint8_t* pdata, uint32_t length){
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b086      	sub	sp, #24
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	4603      	mov	r3, r0
 8000b88:	60b9      	str	r1, [r7, #8]
 8000b8a:	607a      	str	r2, [r7, #4]
 8000b8c:	73fb      	strb	r3, [r7, #15]
	ILI9341_CSState(GPIO_PIN_RESET);
 8000b8e:	2000      	movs	r0, #0
 8000b90:	f000 f8ae 	bl	8000cf0 <ILI9341_CSState>
	if(reg != 0xFF){
 8000b94:	7bfb      	ldrb	r3, [r7, #15]
 8000b96:	2bff      	cmp	r3, #255	; 0xff
 8000b98:	d00f      	beq.n	8000bba <ILI9341_IO_WriteReg+0x3a>
		ILI9341_DCRSState(GPIO_PIN_RESET);
 8000b9a:	2000      	movs	r0, #0
 8000b9c:	f000 f8c2 	bl	8000d24 <ILI9341_DCRSState>
		if(HAL_SPI_Transmit(&hspi1, &reg, 1, 1000) != HAL_OK){
 8000ba0:	f107 010f 	add.w	r1, r7, #15
 8000ba4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ba8:	2201      	movs	r2, #1
 8000baa:	4834      	ldr	r0, [pc, #208]	; (8000c7c <ILI9341_IO_WriteReg+0xfc>)
 8000bac:	f007 fb99 	bl	80082e2 <HAL_SPI_Transmit>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <ILI9341_IO_WriteReg+0x3a>
			return ILI9341_Err;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	e05c      	b.n	8000c74 <ILI9341_IO_WriteReg+0xf4>
		}
	}

	ILI9341_DCRSState(GPIO_PIN_SET);
 8000bba:	2001      	movs	r0, #1
 8000bbc:	f000 f8b2 	bl	8000d24 <ILI9341_DCRSState>
	if(length != 0 && reg != 0xFF){
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d00f      	beq.n	8000be6 <ILI9341_IO_WriteReg+0x66>
 8000bc6:	7bfb      	ldrb	r3, [r7, #15]
 8000bc8:	2bff      	cmp	r3, #255	; 0xff
 8000bca:	d00c      	beq.n	8000be6 <ILI9341_IO_WriteReg+0x66>
		if(HAL_SPI_Transmit(&hspi1, pdata, length, 1000) != HAL_OK){
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	b29a      	uxth	r2, r3
 8000bd0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bd4:	68b9      	ldr	r1, [r7, #8]
 8000bd6:	4829      	ldr	r0, [pc, #164]	; (8000c7c <ILI9341_IO_WriteReg+0xfc>)
 8000bd8:	f007 fb83 	bl	80082e2 <HAL_SPI_Transmit>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d047      	beq.n	8000c72 <ILI9341_IO_WriteReg+0xf2>
			return ILI9341_Err;
 8000be2:	2301      	movs	r3, #1
 8000be4:	e046      	b.n	8000c74 <ILI9341_IO_WriteReg+0xf4>
		}
	}else if(length != 0 && reg == 0xFF){
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d03f      	beq.n	8000c6c <ILI9341_IO_WriteReg+0xec>
 8000bec:	7bfb      	ldrb	r3, [r7, #15]
 8000bee:	2bff      	cmp	r3, #255	; 0xff
 8000bf0:	d13c      	bne.n	8000c6c <ILI9341_IO_WriteReg+0xec>
        for(uint32_t i = 0; i < length; i = i + 3){
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	617b      	str	r3, [r7, #20]
 8000bf6:	e034      	b.n	8000c62 <ILI9341_IO_WriteReg+0xe2>
    		if(HAL_SPI_Transmit(&hspi1, pdata, 1, 1000) != HAL_OK){
 8000bf8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	68b9      	ldr	r1, [r7, #8]
 8000c00:	481e      	ldr	r0, [pc, #120]	; (8000c7c <ILI9341_IO_WriteReg+0xfc>)
 8000c02:	f007 fb6e 	bl	80082e2 <HAL_SPI_Transmit>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <ILI9341_IO_WriteReg+0x90>
    			return ILI9341_Err;
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	e031      	b.n	8000c74 <ILI9341_IO_WriteReg+0xf4>
    		}

    		if(HAL_SPI_Transmit(&hspi1, pdata + 1, 1, 1000) != HAL_OK){
 8000c10:	68bb      	ldr	r3, [r7, #8]
 8000c12:	1c59      	adds	r1, r3, #1
 8000c14:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c18:	2201      	movs	r2, #1
 8000c1a:	4818      	ldr	r0, [pc, #96]	; (8000c7c <ILI9341_IO_WriteReg+0xfc>)
 8000c1c:	f007 fb61 	bl	80082e2 <HAL_SPI_Transmit>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <ILI9341_IO_WriteReg+0xaa>
    			return ILI9341_Err;
 8000c26:	2301      	movs	r3, #1
 8000c28:	e024      	b.n	8000c74 <ILI9341_IO_WriteReg+0xf4>
    		}

    		if(HAL_SPI_Transmit(&hspi1, pdata + 2, 1, 1000) != HAL_OK){
 8000c2a:	68bb      	ldr	r3, [r7, #8]
 8000c2c:	1c99      	adds	r1, r3, #2
 8000c2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c32:	2201      	movs	r2, #1
 8000c34:	4811      	ldr	r0, [pc, #68]	; (8000c7c <ILI9341_IO_WriteReg+0xfc>)
 8000c36:	f007 fb54 	bl	80082e2 <HAL_SPI_Transmit>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <ILI9341_IO_WriteReg+0xc4>
    			return ILI9341_Err;
 8000c40:	2301      	movs	r3, #1
 8000c42:	e017      	b.n	8000c74 <ILI9341_IO_WriteReg+0xf4>
    		}
    		if(i == length - 10000){
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	f5a3 531c 	sub.w	r3, r3, #9984	; 0x2700
 8000c4a:	3b10      	subs	r3, #16
 8000c4c:	697a      	ldr	r2, [r7, #20]
 8000c4e:	429a      	cmp	r2, r3
 8000c50:	d104      	bne.n	8000c5c <ILI9341_IO_WriteReg+0xdc>
    			uint8_t j =0;
 8000c52:	2300      	movs	r3, #0
 8000c54:	74fb      	strb	r3, [r7, #19]
    			j++;
 8000c56:	7cfb      	ldrb	r3, [r7, #19]
 8000c58:	3301      	adds	r3, #1
 8000c5a:	74fb      	strb	r3, [r7, #19]
        for(uint32_t i = 0; i < length; i = i + 3){
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	3303      	adds	r3, #3
 8000c60:	617b      	str	r3, [r7, #20]
 8000c62:	697a      	ldr	r2, [r7, #20]
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	429a      	cmp	r2, r3
 8000c68:	d3c6      	bcc.n	8000bf8 <ILI9341_IO_WriteReg+0x78>
 8000c6a:	e002      	b.n	8000c72 <ILI9341_IO_WriteReg+0xf2>
    		}
        }
	}else {
		ILI9341_CSState(GPIO_PIN_SET);
 8000c6c:	2001      	movs	r0, #1
 8000c6e:	f000 f83f 	bl	8000cf0 <ILI9341_CSState>
	}
	return ILI9341_Ok;
 8000c72:	2300      	movs	r3, #0
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	3718      	adds	r7, #24
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	20000f6c 	.word	0x20000f6c

08000c80 <ILI9341_IO_ReadReg>:
 *@Params:
 *@Return:
 *@Precondition:
 *@Postcondition:
 **************************************//**************************************/
static ILI9341_Status_t ILI9341_IO_ReadReg(uint8_t reg, uint8_t* pdata, uint32_t length){
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b084      	sub	sp, #16
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	4603      	mov	r3, r0
 8000c88:	60b9      	str	r1, [r7, #8]
 8000c8a:	607a      	str	r2, [r7, #4]
 8000c8c:	73fb      	strb	r3, [r7, #15]
	ILI9341_CSState(GPIO_PIN_RESET);
 8000c8e:	2000      	movs	r0, #0
 8000c90:	f000 f82e 	bl	8000cf0 <ILI9341_CSState>
	ILI9341_DCRSState(GPIO_PIN_RESET);
 8000c94:	2000      	movs	r0, #0
 8000c96:	f000 f845 	bl	8000d24 <ILI9341_DCRSState>
	if(HAL_SPI_Transmit(&hspi1, &reg, 1, 1000) != HAL_OK){
 8000c9a:	f107 010f 	add.w	r1, r7, #15
 8000c9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	4811      	ldr	r0, [pc, #68]	; (8000cec <ILI9341_IO_ReadReg+0x6c>)
 8000ca6:	f007 fb1c 	bl	80082e2 <HAL_SPI_Transmit>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d001      	beq.n	8000cb4 <ILI9341_IO_ReadReg+0x34>
        return ILI9341_Err;
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	e016      	b.n	8000ce2 <ILI9341_IO_ReadReg+0x62>
	}
	ILI9341_DCRSState(GPIO_PIN_SET);
 8000cb4:	2001      	movs	r0, #1
 8000cb6:	f000 f835 	bl	8000d24 <ILI9341_DCRSState>

	if(length != 0){
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d00c      	beq.n	8000cda <ILI9341_IO_ReadReg+0x5a>
		if(HAL_SPI_Receive(&hspi1, pdata, length, 1000) != HAL_OK){
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	b29a      	uxth	r2, r3
 8000cc4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cc8:	68b9      	ldr	r1, [r7, #8]
 8000cca:	4808      	ldr	r0, [pc, #32]	; (8000cec <ILI9341_IO_ReadReg+0x6c>)
 8000ccc:	f007 fc45 	bl	800855a <HAL_SPI_Receive>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <ILI9341_IO_ReadReg+0x5a>
			return ILI9341_Err;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	e003      	b.n	8000ce2 <ILI9341_IO_ReadReg+0x62>
		}
	}
	ILI9341_CSState(GPIO_PIN_SET);
 8000cda:	2001      	movs	r0, #1
 8000cdc:	f000 f808 	bl	8000cf0 <ILI9341_CSState>
	return ILI9341_Ok;
 8000ce0:	2300      	movs	r3, #0
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	3710      	adds	r7, #16
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	20000f6c 	.word	0x20000f6c

08000cf0 <ILI9341_CSState>:
 *@Params:
 *@Return:
 *@Precondition:
 *@Postcondition:
 **************************************//**************************************/
static void ILI9341_CSState(uint8_t state){
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	71fb      	strb	r3, [r7, #7]
  if(state){
 8000cfa:	79fb      	ldrb	r3, [r7, #7]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d005      	beq.n	8000d0c <ILI9341_CSState+0x1c>
    HAL_GPIO_WritePin(SPI1_CSN_GPIO_Port, SPI1_CSN_Pin, GPIO_PIN_SET);
 8000d00:	2201      	movs	r2, #1
 8000d02:	2101      	movs	r1, #1
 8000d04:	4806      	ldr	r0, [pc, #24]	; (8000d20 <ILI9341_CSState+0x30>)
 8000d06:	f004 fb8f 	bl	8005428 <HAL_GPIO_WritePin>
  } else {
    HAL_GPIO_WritePin(SPI1_CSN_GPIO_Port, SPI1_CSN_Pin, GPIO_PIN_RESET);
  }
}
 8000d0a:	e004      	b.n	8000d16 <ILI9341_CSState+0x26>
    HAL_GPIO_WritePin(SPI1_CSN_GPIO_Port, SPI1_CSN_Pin, GPIO_PIN_RESET);
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	2101      	movs	r1, #1
 8000d10:	4803      	ldr	r0, [pc, #12]	; (8000d20 <ILI9341_CSState+0x30>)
 8000d12:	f004 fb89 	bl	8005428 <HAL_GPIO_WritePin>
}
 8000d16:	bf00      	nop
 8000d18:	3708      	adds	r7, #8
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	40020400 	.word	0x40020400

08000d24 <ILI9341_DCRSState>:
 *@Params:
 *@Return:
 *@Precondition:
 *@Postcondition:
 **************************************//**************************************/
static void ILI9341_DCRSState(uint8_t state){
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	71fb      	strb	r3, [r7, #7]
  if(state){
 8000d2e:	79fb      	ldrb	r3, [r7, #7]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d005      	beq.n	8000d40 <ILI9341_DCRSState+0x1c>
    HAL_GPIO_WritePin(DCRS_GPIO_Port, DCRS_Pin, GPIO_PIN_SET);
 8000d34:	2201      	movs	r2, #1
 8000d36:	2102      	movs	r1, #2
 8000d38:	4806      	ldr	r0, [pc, #24]	; (8000d54 <ILI9341_DCRSState+0x30>)
 8000d3a:	f004 fb75 	bl	8005428 <HAL_GPIO_WritePin>
  } else {
    HAL_GPIO_WritePin(DCRS_GPIO_Port, DCRS_Pin, GPIO_PIN_RESET);
  }
}
 8000d3e:	e004      	b.n	8000d4a <ILI9341_DCRSState+0x26>
    HAL_GPIO_WritePin(DCRS_GPIO_Port, DCRS_Pin, GPIO_PIN_RESET);
 8000d40:	2200      	movs	r2, #0
 8000d42:	2102      	movs	r1, #2
 8000d44:	4803      	ldr	r0, [pc, #12]	; (8000d54 <ILI9341_DCRSState+0x30>)
 8000d46:	f004 fb6f 	bl	8005428 <HAL_GPIO_WritePin>
}
 8000d4a:	bf00      	nop
 8000d4c:	3708      	adds	r7, #8
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	40020400 	.word	0x40020400

08000d58 <MCP23017_Init>:
 *@Params: Init Struct with desired settings, Device handle to initialize, a low level IO Driver struct
 *@Return: None
 *@Precondition: Init Struct should have desired settings
 *@Postcondition: Device struct will be intialized and ready to use
 **************************************//**************************************/
void MCP23017_Init(MCP23017_Init_Struct_t Settings, MCP23017_Handle_t *Dev, MCP23017_IO_Drv_t IO_Driver){
 8000d58:	b590      	push	{r4, r7, lr}
 8000d5a:	b085      	sub	sp, #20
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	463c      	mov	r4, r7
 8000d60:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	Dev->IO_Driver.Init = IO_Driver.Init;
 8000d64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d66:	6a3b      	ldr	r3, [r7, #32]
 8000d68:	605a      	str	r2, [r3, #4]
	Dev->IO_Driver.DeInit = IO_Driver.DeInit;
 8000d6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000d6c:	6a3b      	ldr	r3, [r7, #32]
 8000d6e:	609a      	str	r2, [r3, #8]
	Dev->IO_Driver.ReadReg = IO_Driver.ReadReg;
 8000d70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000d72:	6a3b      	ldr	r3, [r7, #32]
 8000d74:	611a      	str	r2, [r3, #16]
	Dev->IO_Driver.WriteReg = IO_Driver.WriteReg;
 8000d76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000d78:	6a3b      	ldr	r3, [r7, #32]
 8000d7a:	60da      	str	r2, [r3, #12]
	Dev->IO_Driver.ioctl = IO_Driver.ioctl;
 8000d7c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000d7e:	6a3b      	ldr	r3, [r7, #32]
 8000d80:	615a      	str	r2, [r3, #20]
	Dev->IO_Driver.Init();
 8000d82:	6a3b      	ldr	r3, [r7, #32]
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	4798      	blx	r3

	if(Dev->IO_Driver.WriteReg(MCP23017_IOCON, (uint8_t*)&Settings.Config,1) != MCP23017_Ok){
 8000d88:	6a3b      	ldr	r3, [r7, #32]
 8000d8a:	68db      	ldr	r3, [r3, #12]
 8000d8c:	200a      	movs	r0, #10
 8000d8e:	463a      	mov	r2, r7
 8000d90:	f102 010c 	add.w	r1, r2, #12
 8000d94:	2201      	movs	r2, #1
 8000d96:	4798      	blx	r3
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d003      	beq.n	8000da6 <MCP23017_Init+0x4e>
		_log(log_mcp23017, "Initialization: IOCON Write Failed");
 8000d9e:	492e      	ldr	r1, [pc, #184]	; (8000e58 <MCP23017_Init+0x100>)
 8000da0:	2005      	movs	r0, #5
 8000da2:	f001 fc59 	bl	8002658 <_log>
	}

	if(Dev->IO_Driver.WriteReg(MCP23017_IODIRA, (uint8_t*)&Settings.Mode,2) != MCP23017_Ok){
 8000da6:	6a3b      	ldr	r3, [r7, #32]
 8000da8:	68db      	ldr	r3, [r3, #12]
 8000daa:	2000      	movs	r0, #0
 8000dac:	4639      	mov	r1, r7
 8000dae:	2202      	movs	r2, #2
 8000db0:	4798      	blx	r3
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d003      	beq.n	8000dc0 <MCP23017_Init+0x68>
		_log(log_mcp23017, "Initialization: IODIR Write Failed");
 8000db8:	4928      	ldr	r1, [pc, #160]	; (8000e5c <MCP23017_Init+0x104>)
 8000dba:	2005      	movs	r0, #5
 8000dbc:	f001 fc4c 	bl	8002658 <_log>
	}

	if(Dev->IO_Driver.WriteReg(MCP23017_IPOLA, (uint8_t*)&Settings.Polarity,2) != MCP23017_Ok){
 8000dc0:	6a3b      	ldr	r3, [r7, #32]
 8000dc2:	68db      	ldr	r3, [r3, #12]
 8000dc4:	2002      	movs	r0, #2
 8000dc6:	463a      	mov	r2, r7
 8000dc8:	1c91      	adds	r1, r2, #2
 8000dca:	2202      	movs	r2, #2
 8000dcc:	4798      	blx	r3
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d003      	beq.n	8000ddc <MCP23017_Init+0x84>
		_log(log_mcp23017, "Initialization: IPOL Write Failed");
 8000dd4:	4922      	ldr	r1, [pc, #136]	; (8000e60 <MCP23017_Init+0x108>)
 8000dd6:	2005      	movs	r0, #5
 8000dd8:	f001 fc3e 	bl	8002658 <_log>
	}

	if(Dev->IO_Driver.WriteReg(MCP23017_GPINTENA, (uint8_t*)&Settings.IntEnable,2) != MCP23017_Ok){
 8000ddc:	6a3b      	ldr	r3, [r7, #32]
 8000dde:	68db      	ldr	r3, [r3, #12]
 8000de0:	2004      	movs	r0, #4
 8000de2:	463a      	mov	r2, r7
 8000de4:	1d11      	adds	r1, r2, #4
 8000de6:	2202      	movs	r2, #2
 8000de8:	4798      	blx	r3
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d003      	beq.n	8000df8 <MCP23017_Init+0xa0>
		_log(log_mcp23017, "Initialization: INTENA Write Failed");
 8000df0:	491c      	ldr	r1, [pc, #112]	; (8000e64 <MCP23017_Init+0x10c>)
 8000df2:	2005      	movs	r0, #5
 8000df4:	f001 fc30 	bl	8002658 <_log>
	}

	if(Dev->IO_Driver.WriteReg(MCP23017_DEFVALA, (uint8_t*)&Settings.DefaultValue,2) != MCP23017_Ok){
 8000df8:	6a3b      	ldr	r3, [r7, #32]
 8000dfa:	68db      	ldr	r3, [r3, #12]
 8000dfc:	2006      	movs	r0, #6
 8000dfe:	463a      	mov	r2, r7
 8000e00:	1d91      	adds	r1, r2, #6
 8000e02:	2202      	movs	r2, #2
 8000e04:	4798      	blx	r3
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d003      	beq.n	8000e14 <MCP23017_Init+0xbc>
		_log(log_mcp23017, "Initialization: DEFVAL Write Failed");
 8000e0c:	4916      	ldr	r1, [pc, #88]	; (8000e68 <MCP23017_Init+0x110>)
 8000e0e:	2005      	movs	r0, #5
 8000e10:	f001 fc22 	bl	8002658 <_log>
	}

	if(Dev->IO_Driver.WriteReg(MCP23017_INTCONA, (uint8_t*)&Settings.IRQControl,2) != MCP23017_Ok){
 8000e14:	6a3b      	ldr	r3, [r7, #32]
 8000e16:	68db      	ldr	r3, [r3, #12]
 8000e18:	2008      	movs	r0, #8
 8000e1a:	463a      	mov	r2, r7
 8000e1c:	f102 0108 	add.w	r1, r2, #8
 8000e20:	2202      	movs	r2, #2
 8000e22:	4798      	blx	r3
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d003      	beq.n	8000e32 <MCP23017_Init+0xda>
		_log(log_mcp23017, "Initialization: INTCON Write Failed");
 8000e2a:	4910      	ldr	r1, [pc, #64]	; (8000e6c <MCP23017_Init+0x114>)
 8000e2c:	2005      	movs	r0, #5
 8000e2e:	f001 fc13 	bl	8002658 <_log>
	}

	if(Dev->IO_Driver.WriteReg(MCP23017_GPPUA, (uint8_t*)&Settings.PullUp,2) != MCP23017_Ok){
 8000e32:	6a3b      	ldr	r3, [r7, #32]
 8000e34:	68db      	ldr	r3, [r3, #12]
 8000e36:	200c      	movs	r0, #12
 8000e38:	463a      	mov	r2, r7
 8000e3a:	f102 010a 	add.w	r1, r2, #10
 8000e3e:	2202      	movs	r2, #2
 8000e40:	4798      	blx	r3
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d003      	beq.n	8000e50 <MCP23017_Init+0xf8>
		_log(log_mcp23017, "Initialization: GPPU Write Failed");
 8000e48:	4909      	ldr	r1, [pc, #36]	; (8000e70 <MCP23017_Init+0x118>)
 8000e4a:	2005      	movs	r0, #5
 8000e4c:	f001 fc04 	bl	8002658 <_log>
	}

}
 8000e50:	bf00      	nop
 8000e52:	3714      	adds	r7, #20
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd90      	pop	{r4, r7, pc}
 8000e58:	0800ee44 	.word	0x0800ee44
 8000e5c:	0800ee68 	.word	0x0800ee68
 8000e60:	0800ee8c 	.word	0x0800ee8c
 8000e64:	0800eeb0 	.word	0x0800eeb0
 8000e68:	0800eed4 	.word	0x0800eed4
 8000e6c:	0800eef8 	.word	0x0800eef8
 8000e70:	0800ef1c 	.word	0x0800ef1c

08000e74 <MCP23017_DeInit>:
 *@Params: MCP23017 Device handle to deinitialize
 *@Return: None
 *@Precondition: Device handle should be initialized
 *@Postcondition: Device handle will be deinitialized and device registers set to default settings
 **************************************//**************************************/
void MCP23017_DeInit(MCP23017_Handle_t *Dev){
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
	MCP23017_Reset(Dev);
 8000e7c:	6878      	ldr	r0, [r7, #4]
 8000e7e:	f000 f813 	bl	8000ea8 <MCP23017_Reset>
	Dev->IO_Driver.Init = '\0';
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	2200      	movs	r2, #0
 8000e86:	605a      	str	r2, [r3, #4]
	Dev->IO_Driver.DeInit = '\0';
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	609a      	str	r2, [r3, #8]
	Dev->IO_Driver.ReadReg = '\0';
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	2200      	movs	r2, #0
 8000e92:	611a      	str	r2, [r3, #16]
	Dev->IO_Driver.WriteReg = '\0';
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	2200      	movs	r2, #0
 8000e98:	60da      	str	r2, [r3, #12]
	Dev->IO_Driver.ioctl = '\0';
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	615a      	str	r2, [r3, #20]
}
 8000ea0:	bf00      	nop
 8000ea2:	3708      	adds	r7, #8
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}

08000ea8 <MCP23017_Reset>:
 *@Params: MCP23017 Device Handle to reset
 *@Return: None
 *@Precondition: Device handle should be initialized
 *@Postcondition: Device registers will be set to default settings
 **************************************//**************************************/
void MCP23017_Reset(MCP23017_Handle_t *Dev){
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b084      	sub	sp, #16
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
	uint16_t Settings = 0;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	81fb      	strh	r3, [r7, #14]
	Dev->IO_Driver.DeInit(); //Turn off DMA IRQ and clear pending IRQ
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	689b      	ldr	r3, [r3, #8]
 8000eb8:	4798      	blx	r3
	if(Dev->IO_Driver.WriteReg(MCP23017_IOCON, (uint8_t*)&Settings,1) != MCP23017_Ok){
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	68db      	ldr	r3, [r3, #12]
 8000ebe:	200a      	movs	r0, #10
 8000ec0:	f107 010e 	add.w	r1, r7, #14
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	4798      	blx	r3
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d003      	beq.n	8000ed6 <MCP23017_Reset+0x2e>
		_log(log_mcp23017, "DeInitialization: IOCON Write Failed");
 8000ece:	4930      	ldr	r1, [pc, #192]	; (8000f90 <MCP23017_Reset+0xe8>)
 8000ed0:	2005      	movs	r0, #5
 8000ed2:	f001 fbc1 	bl	8002658 <_log>
	}

	Settings = 0xFFFF;
 8000ed6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000eda:	81fb      	strh	r3, [r7, #14]
	if(Dev->IO_Driver.WriteReg(MCP23017_IODIRA, (uint8_t*)&Settings,2) != MCP23017_Ok){
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	68db      	ldr	r3, [r3, #12]
 8000ee0:	2000      	movs	r0, #0
 8000ee2:	f107 010e 	add.w	r1, r7, #14
 8000ee6:	2202      	movs	r2, #2
 8000ee8:	4798      	blx	r3
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d003      	beq.n	8000ef8 <MCP23017_Reset+0x50>
		_log(log_mcp23017, "DeInitialization: IODIR Write Failed");
 8000ef0:	4928      	ldr	r1, [pc, #160]	; (8000f94 <MCP23017_Reset+0xec>)
 8000ef2:	2005      	movs	r0, #5
 8000ef4:	f001 fbb0 	bl	8002658 <_log>
	}

	Settings = 0x0000;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	81fb      	strh	r3, [r7, #14]
	if(Dev->IO_Driver.WriteReg(MCP23017_IPOLA, (uint8_t*)&Settings,2) != MCP23017_Ok){
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	68db      	ldr	r3, [r3, #12]
 8000f00:	2002      	movs	r0, #2
 8000f02:	f107 010e 	add.w	r1, r7, #14
 8000f06:	2202      	movs	r2, #2
 8000f08:	4798      	blx	r3
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d003      	beq.n	8000f18 <MCP23017_Reset+0x70>
		_log(log_mcp23017, "DeInitialization: IPOL Write Failed");
 8000f10:	4921      	ldr	r1, [pc, #132]	; (8000f98 <MCP23017_Reset+0xf0>)
 8000f12:	2005      	movs	r0, #5
 8000f14:	f001 fba0 	bl	8002658 <_log>
	}

	if(Dev->IO_Driver.WriteReg(MCP23017_GPINTENA, (uint8_t*)&Settings,2) != MCP23017_Ok){
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	68db      	ldr	r3, [r3, #12]
 8000f1c:	2004      	movs	r0, #4
 8000f1e:	f107 010e 	add.w	r1, r7, #14
 8000f22:	2202      	movs	r2, #2
 8000f24:	4798      	blx	r3
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d003      	beq.n	8000f34 <MCP23017_Reset+0x8c>
		_log(log_mcp23017, "DeInitialization: INTENA Write Failed");
 8000f2c:	491b      	ldr	r1, [pc, #108]	; (8000f9c <MCP23017_Reset+0xf4>)
 8000f2e:	2005      	movs	r0, #5
 8000f30:	f001 fb92 	bl	8002658 <_log>
	}

	if(Dev->IO_Driver.WriteReg(MCP23017_DEFVALA, (uint8_t*)&Settings,2) != MCP23017_Ok){
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	68db      	ldr	r3, [r3, #12]
 8000f38:	2006      	movs	r0, #6
 8000f3a:	f107 010e 	add.w	r1, r7, #14
 8000f3e:	2202      	movs	r2, #2
 8000f40:	4798      	blx	r3
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d003      	beq.n	8000f50 <MCP23017_Reset+0xa8>
		_log(log_mcp23017, "DeInitialization: DEFVAL Write Failed");
 8000f48:	4915      	ldr	r1, [pc, #84]	; (8000fa0 <MCP23017_Reset+0xf8>)
 8000f4a:	2005      	movs	r0, #5
 8000f4c:	f001 fb84 	bl	8002658 <_log>
	}

	if(Dev->IO_Driver.WriteReg(MCP23017_INTCONA, (uint8_t*)&Settings,2) != MCP23017_Ok){
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	68db      	ldr	r3, [r3, #12]
 8000f54:	2008      	movs	r0, #8
 8000f56:	f107 010e 	add.w	r1, r7, #14
 8000f5a:	2202      	movs	r2, #2
 8000f5c:	4798      	blx	r3
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d003      	beq.n	8000f6c <MCP23017_Reset+0xc4>
		_log(log_mcp23017, "DeInitialization: INTCON Write Failed");
 8000f64:	490f      	ldr	r1, [pc, #60]	; (8000fa4 <MCP23017_Reset+0xfc>)
 8000f66:	2005      	movs	r0, #5
 8000f68:	f001 fb76 	bl	8002658 <_log>
	}

	if(Dev->IO_Driver.WriteReg(MCP23017_GPPUA, (uint8_t*)&Settings,2) != MCP23017_Ok){
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	68db      	ldr	r3, [r3, #12]
 8000f70:	200c      	movs	r0, #12
 8000f72:	f107 010e 	add.w	r1, r7, #14
 8000f76:	2202      	movs	r2, #2
 8000f78:	4798      	blx	r3
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d003      	beq.n	8000f88 <MCP23017_Reset+0xe0>
		_log(log_mcp23017, "DeInitialization: GPPU Write Failed");
 8000f80:	4909      	ldr	r1, [pc, #36]	; (8000fa8 <MCP23017_Reset+0x100>)
 8000f82:	2005      	movs	r0, #5
 8000f84:	f001 fb68 	bl	8002658 <_log>
	}
}
 8000f88:	bf00      	nop
 8000f8a:	3710      	adds	r7, #16
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	0800ef40 	.word	0x0800ef40
 8000f94:	0800ef68 	.word	0x0800ef68
 8000f98:	0800ef90 	.word	0x0800ef90
 8000f9c:	0800efb4 	.word	0x0800efb4
 8000fa0:	0800efdc 	.word	0x0800efdc
 8000fa4:	0800f004 	.word	0x0800f004
 8000fa8:	0800f02c 	.word	0x0800f02c

08000fac <MCP23017_ReadPins>:
 *@Params: MCP23017 Device Handle
 *@Return: Err if read fails, Ok otherwise
 *@Precondition: Device handle must be initialized
 *@Postcondition: Device Handle PinStates will contain new states of pins
 **************************************//**************************************/
MCP23017_Status_t MCP23017_ReadPins(MCP23017_Handle_t *Dev){
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
	if(Dev->IO_Driver.ReadReg(MCP23017_GPIOA, (uint8_t*)&Dev->PinStates, 2) != MCP23017_Ok){
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	691b      	ldr	r3, [r3, #16]
 8000fb8:	2012      	movs	r0, #18
 8000fba:	6879      	ldr	r1, [r7, #4]
 8000fbc:	2202      	movs	r2, #2
 8000fbe:	4798      	blx	r3
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d005      	beq.n	8000fd2 <MCP23017_ReadPins+0x26>
		_log(log_mcp23017, "Read Pins Failed");
 8000fc6:	4905      	ldr	r1, [pc, #20]	; (8000fdc <MCP23017_ReadPins+0x30>)
 8000fc8:	2005      	movs	r0, #5
 8000fca:	f001 fb45 	bl	8002658 <_log>
		return MCP23017_Err;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	e000      	b.n	8000fd4 <MCP23017_ReadPins+0x28>
	}
	return MCP23017_Ok;
 8000fd2:	2300      	movs	r3, #0
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	3708      	adds	r7, #8
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	0800f09c 	.word	0x0800f09c

08000fe0 <MCP23017_IO_Init>:
 *@Params: None
 *@Return: None
 *@Precondition: None
 *@Postcondition: GPIO B Clk will be enabled and I2C1 Peripheral will be initialized
 **************************************//**************************************/
static void MCP23017_IO_Init(){
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
	I2C1_DMA_Init();
 8000fe4:	f001 f8c0 	bl	8002168 <I2C1_DMA_Init>
	I2C_GPIO_Init();
 8000fe8:	f001 f93a 	bl	8002260 <I2C_GPIO_Init>
	I2C1_Init();
 8000fec:	f001 fac2 	bl	8002574 <I2C1_Init>
}
 8000ff0:	bf00      	nop
 8000ff2:	bd80      	pop	{r7, pc}

08000ff4 <MCP23017_IO_DeInit>:
 *@Params: None
 *@Return: None
 *@Precondition: None
 *@Postcondition: None
 **************************************//**************************************/
static void MCP23017_IO_DeInit(){
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
	HAL_NVIC_DisableIRQ(DMA1_Stream0_IRQn);
 8000ff8:	200b      	movs	r0, #11
 8000ffa:	f003 fb76 	bl	80046ea <HAL_NVIC_DisableIRQ>
	HAL_NVIC_ClearPendingIRQ(DMA1_Stream0_IRQn);
 8000ffe:	200b      	movs	r0, #11
 8001000:	f003 fb8d 	bl	800471e <HAL_NVIC_ClearPendingIRQ>
}
 8001004:	bf00      	nop
 8001006:	bd80      	pop	{r7, pc}

08001008 <MCP23017_IO_WriteReg>:
 *@Params: MCP23017 Device Address, Register to write to, data to write, data length in bytes
 *@Return: Error if the write fails, otherwise Ok
 *@Precondition: I2C Bus should be initialized
 *@Postcondition: Device register will be written to
 **************************************//**************************************/
static MCP23017_Status_t MCP23017_IO_WriteReg(uint8_t DevAddr, uint8_t RegAddr, uint8_t *Data, uint8_t Length){
 8001008:	b580      	push	{r7, lr}
 800100a:	b086      	sub	sp, #24
 800100c:	af04      	add	r7, sp, #16
 800100e:	603a      	str	r2, [r7, #0]
 8001010:	461a      	mov	r2, r3
 8001012:	4603      	mov	r3, r0
 8001014:	71fb      	strb	r3, [r7, #7]
 8001016:	460b      	mov	r3, r1
 8001018:	71bb      	strb	r3, [r7, #6]
 800101a:	4613      	mov	r3, r2
 800101c:	717b      	strb	r3, [r7, #5]
	if(HAL_I2C_Mem_Write(&hi2c1, DevAddr, RegAddr, I2C_MEMADD_SIZE_8BIT, Data, Length, 50) != HAL_OK){
 800101e:	79fb      	ldrb	r3, [r7, #7]
 8001020:	b299      	uxth	r1, r3
 8001022:	79bb      	ldrb	r3, [r7, #6]
 8001024:	b29a      	uxth	r2, r3
 8001026:	797b      	ldrb	r3, [r7, #5]
 8001028:	b29b      	uxth	r3, r3
 800102a:	2032      	movs	r0, #50	; 0x32
 800102c:	9002      	str	r0, [sp, #8]
 800102e:	9301      	str	r3, [sp, #4]
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	9300      	str	r3, [sp, #0]
 8001034:	2301      	movs	r3, #1
 8001036:	4809      	ldr	r0, [pc, #36]	; (800105c <MCP23017_IO_WriteReg+0x54>)
 8001038:	f004 fb54 	bl	80056e4 <HAL_I2C_Mem_Write>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d007      	beq.n	8001052 <MCP23017_IO_WriteReg+0x4a>
		_log(log_i2c,"Write to MCP23017 Reg address %x failed.", RegAddr);
 8001042:	79bb      	ldrb	r3, [r7, #6]
 8001044:	461a      	mov	r2, r3
 8001046:	4906      	ldr	r1, [pc, #24]	; (8001060 <MCP23017_IO_WriteReg+0x58>)
 8001048:	2000      	movs	r0, #0
 800104a:	f001 fb05 	bl	8002658 <_log>
		return MCP23017_Err;
 800104e:	2301      	movs	r3, #1
 8001050:	e000      	b.n	8001054 <MCP23017_IO_WriteReg+0x4c>
	}
	return MCP23017_Ok;
 8001052:	2300      	movs	r3, #0
}
 8001054:	4618      	mov	r0, r3
 8001056:	3708      	adds	r7, #8
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	20000de0 	.word	0x20000de0
 8001060:	0800f0b0 	.word	0x0800f0b0

08001064 <MCP23017_IO_ReadReg>:
 *@Params: MCP23017 Device Address, Register to read to, data buffer to read into, data length in bytes,
 *@Return: Error if the read fails, otherwise Ok
 *@Precondition: I2C Bus must be initialized
 *@Postcondition: Data buffer will have the read data
 **************************************//**************************************/
static MCP23017_Status_t MCP23017_IO_ReadReg(uint8_t DevAddr, uint8_t RegAddr, uint8_t *Data, uint8_t Length){
 8001064:	b580      	push	{r7, lr}
 8001066:	b084      	sub	sp, #16
 8001068:	af02      	add	r7, sp, #8
 800106a:	603a      	str	r2, [r7, #0]
 800106c:	461a      	mov	r2, r3
 800106e:	4603      	mov	r3, r0
 8001070:	71fb      	strb	r3, [r7, #7]
 8001072:	460b      	mov	r3, r1
 8001074:	71bb      	strb	r3, [r7, #6]
 8001076:	4613      	mov	r3, r2
 8001078:	717b      	strb	r3, [r7, #5]
	//HAL_I2C_Mem_Read_DMA(hi2c, DevAddress, MemAddress, MemAddSize, pData, Size)
	//if(HAL_I2C_Mem_Read(&hi2c1, DevAddr, RegAddr, I2C_MEMADD_SIZE_8BIT, Data, Length, 50) != HAL_OK){
	if(HAL_I2C_Mem_Read_DMA(&hi2c1, DevAddr, RegAddr, I2C_MEMADD_SIZE_8BIT, Data, Length) != HAL_OK){
 800107a:	79fb      	ldrb	r3, [r7, #7]
 800107c:	b299      	uxth	r1, r3
 800107e:	79bb      	ldrb	r3, [r7, #6]
 8001080:	b29a      	uxth	r2, r3
 8001082:	797b      	ldrb	r3, [r7, #5]
 8001084:	b29b      	uxth	r3, r3
 8001086:	9301      	str	r3, [sp, #4]
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	9300      	str	r3, [sp, #0]
 800108c:	2301      	movs	r3, #1
 800108e:	4809      	ldr	r0, [pc, #36]	; (80010b4 <MCP23017_IO_ReadReg+0x50>)
 8001090:	f004 fc22 	bl	80058d8 <HAL_I2C_Mem_Read_DMA>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d007      	beq.n	80010aa <MCP23017_IO_ReadReg+0x46>
		_log(log_i2c,"Read from MCP23017 Reg address %x failed.", RegAddr);
 800109a:	79bb      	ldrb	r3, [r7, #6]
 800109c:	461a      	mov	r2, r3
 800109e:	4906      	ldr	r1, [pc, #24]	; (80010b8 <MCP23017_IO_ReadReg+0x54>)
 80010a0:	2000      	movs	r0, #0
 80010a2:	f001 fad9 	bl	8002658 <_log>
		return MCP23017_Err;
 80010a6:	2301      	movs	r3, #1
 80010a8:	e000      	b.n	80010ac <MCP23017_IO_ReadReg+0x48>
	}
	return MCP23017_Ok;
 80010aa:	2300      	movs	r3, #0
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3708      	adds	r7, #8
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	20000de0 	.word	0x20000de0
 80010b8:	0800f0dc 	.word	0x0800f0dc

080010bc <MCP23017_IO_ioctl>:
 *@Params: Command
 *@Return: None
 *@Precondition: None
 *@Postcondition: None
 **************************************//**************************************/
static uint8_t MCP23017_IO_ioctl(MCP23017_IO_Cmd_t command){
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	4603      	mov	r3, r0
 80010c4:	71fb      	strb	r3, [r7, #7]
	return MCP23017_Ok;
 80010c6:	2300      	movs	r3, #0
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	370c      	adds	r7, #12
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr

080010d4 <MCP23017_IO1_WriteReg>:
 *@Params: Register to write to, data to write, length of data in bytes
 *@Return: Err if write fails, Ok otherwise
 *@Precondition: I2C Bus must be initialized
 *@Postcondition: Device (w/ Address1) register will be modified
 **************************************//**************************************/
static MCP23017_Status_t MCP23017_IO1_WriteReg(uint8_t RegAddr, uint8_t *Data, uint8_t Length){
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	4603      	mov	r3, r0
 80010dc:	6039      	str	r1, [r7, #0]
 80010de:	71fb      	strb	r3, [r7, #7]
 80010e0:	4613      	mov	r3, r2
 80010e2:	71bb      	strb	r3, [r7, #6]
	static const uint8_t address = MCP23017_Address1;
    return MCP23017_IO_WriteReg(address, RegAddr, Data, Length);
 80010e4:	4b05      	ldr	r3, [pc, #20]	; (80010fc <MCP23017_IO1_WriteReg+0x28>)
 80010e6:	7818      	ldrb	r0, [r3, #0]
 80010e8:	79bb      	ldrb	r3, [r7, #6]
 80010ea:	79f9      	ldrb	r1, [r7, #7]
 80010ec:	683a      	ldr	r2, [r7, #0]
 80010ee:	f7ff ff8b 	bl	8001008 <MCP23017_IO_WriteReg>
 80010f2:	4603      	mov	r3, r0
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	3708      	adds	r7, #8
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	0800f2ac 	.word	0x0800f2ac

08001100 <MCP23017_IO1_ReadReg>:
 *@Params: Register to read from, data buffer to read into, length of data in bytes
 *@Return: Err if read fails, Ok otherwise
 *@Precondition: I2C Bus must be initialized
 *@Postcondition: Data buffer will contain data from device (w/ Address1) register
 **************************************//**************************************/
static MCP23017_Status_t MCP23017_IO1_ReadReg(uint8_t RegAddr, uint8_t *Data, uint8_t Length){
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	4603      	mov	r3, r0
 8001108:	6039      	str	r1, [r7, #0]
 800110a:	71fb      	strb	r3, [r7, #7]
 800110c:	4613      	mov	r3, r2
 800110e:	71bb      	strb	r3, [r7, #6]
	static const uint8_t address = MCP23017_Address1;
	return MCP23017_IO_ReadReg(address, RegAddr, Data, Length);
 8001110:	4b05      	ldr	r3, [pc, #20]	; (8001128 <MCP23017_IO1_ReadReg+0x28>)
 8001112:	7818      	ldrb	r0, [r3, #0]
 8001114:	79bb      	ldrb	r3, [r7, #6]
 8001116:	79f9      	ldrb	r1, [r7, #7]
 8001118:	683a      	ldr	r2, [r7, #0]
 800111a:	f7ff ffa3 	bl	8001064 <MCP23017_IO_ReadReg>
 800111e:	4603      	mov	r3, r0
}
 8001120:	4618      	mov	r0, r3
 8001122:	3708      	adds	r7, #8
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	0800f2ad 	.word	0x0800f2ad

0800112c <MCP23017_IO2_WriteReg>:
 *@Params: Register to write to, data to write, length of data in bytes
 *@Return: Err if write fails, Ok otherwise
 *@Precondition: I2C Bus must be initialized
 *@Postcondition: Device (w/ Address2) register will be modified
 **************************************//**************************************/
static MCP23017_Status_t MCP23017_IO2_WriteReg(uint8_t RegAddr, uint8_t *Data, uint8_t Length){
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	4603      	mov	r3, r0
 8001134:	6039      	str	r1, [r7, #0]
 8001136:	71fb      	strb	r3, [r7, #7]
 8001138:	4613      	mov	r3, r2
 800113a:	71bb      	strb	r3, [r7, #6]
	static const uint8_t address = MCP23017_Address2;
    return MCP23017_IO_WriteReg(address, RegAddr, Data, Length);
 800113c:	4b05      	ldr	r3, [pc, #20]	; (8001154 <MCP23017_IO2_WriteReg+0x28>)
 800113e:	7818      	ldrb	r0, [r3, #0]
 8001140:	79bb      	ldrb	r3, [r7, #6]
 8001142:	79f9      	ldrb	r1, [r7, #7]
 8001144:	683a      	ldr	r2, [r7, #0]
 8001146:	f7ff ff5f 	bl	8001008 <MCP23017_IO_WriteReg>
 800114a:	4603      	mov	r3, r0
}
 800114c:	4618      	mov	r0, r3
 800114e:	3708      	adds	r7, #8
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	0800f2ae 	.word	0x0800f2ae

08001158 <MCP23017_IO2_ReadReg>:
 *@Params: Register to read from, data buffer to read into, length of data in bytes
 *@Return: Err if read fails, Ok otherwise
 *@Precondition: I2C Bus must be initialized
 *@Postcondition: Data buffer will contain data from device (w/ Address2) register
 **************************************//**************************************/
static MCP23017_Status_t MCP23017_IO2_ReadReg(uint8_t RegAddr, uint8_t *Data, uint8_t Length){
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	4603      	mov	r3, r0
 8001160:	6039      	str	r1, [r7, #0]
 8001162:	71fb      	strb	r3, [r7, #7]
 8001164:	4613      	mov	r3, r2
 8001166:	71bb      	strb	r3, [r7, #6]
	static const uint8_t address = MCP23017_Address2;
	return MCP23017_IO_ReadReg(address, RegAddr, Data, Length);
 8001168:	4b05      	ldr	r3, [pc, #20]	; (8001180 <MCP23017_IO2_ReadReg+0x28>)
 800116a:	7818      	ldrb	r0, [r3, #0]
 800116c:	79bb      	ldrb	r3, [r7, #6]
 800116e:	79f9      	ldrb	r1, [r7, #7]
 8001170:	683a      	ldr	r2, [r7, #0]
 8001172:	f7ff ff77 	bl	8001064 <MCP23017_IO_ReadReg>
 8001176:	4603      	mov	r3, r0
}
 8001178:	4618      	mov	r0, r3
 800117a:	3708      	adds	r7, #8
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	0800f2af 	.word	0x0800f2af

08001184 <MCP23017_IO3_WriteReg>:
 *@Params: Register to write to, data to write, length of data in bytes
 *@Return: Err if write fails, Ok otherwise
 *@Precondition: I2C Bus must be initialized
 *@Postcondition: Device (w/ Address3) register will be modified
 **************************************//**************************************/
static MCP23017_Status_t MCP23017_IO3_WriteReg(uint8_t RegAddr, uint8_t *Data, uint8_t Length){
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	4603      	mov	r3, r0
 800118c:	6039      	str	r1, [r7, #0]
 800118e:	71fb      	strb	r3, [r7, #7]
 8001190:	4613      	mov	r3, r2
 8001192:	71bb      	strb	r3, [r7, #6]
	static const uint8_t address = MCP23017_Address3;
    return MCP23017_IO_WriteReg(address, RegAddr, Data, Length);
 8001194:	4b05      	ldr	r3, [pc, #20]	; (80011ac <MCP23017_IO3_WriteReg+0x28>)
 8001196:	7818      	ldrb	r0, [r3, #0]
 8001198:	79bb      	ldrb	r3, [r7, #6]
 800119a:	79f9      	ldrb	r1, [r7, #7]
 800119c:	683a      	ldr	r2, [r7, #0]
 800119e:	f7ff ff33 	bl	8001008 <MCP23017_IO_WriteReg>
 80011a2:	4603      	mov	r3, r0
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	3708      	adds	r7, #8
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	0800f2b0 	.word	0x0800f2b0

080011b0 <MCP23017_IO3_ReadReg>:
 *@Params: Register to read from, data buffer to read into, length of data in bytes
 *@Return: Err if read fails, Ok otherwise
 *@Precondition: I2C Bus must be initialized
 *@Postcondition: Data buffer will contain data from device (w/ Address3) register
 **************************************//**************************************/
static MCP23017_Status_t MCP23017_IO3_ReadReg(uint8_t RegAddr, uint8_t *Data, uint8_t Length){
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	4603      	mov	r3, r0
 80011b8:	6039      	str	r1, [r7, #0]
 80011ba:	71fb      	strb	r3, [r7, #7]
 80011bc:	4613      	mov	r3, r2
 80011be:	71bb      	strb	r3, [r7, #6]
	static const uint8_t address = MCP23017_Address3;
	return MCP23017_IO_ReadReg(address, RegAddr, Data, Length);
 80011c0:	4b05      	ldr	r3, [pc, #20]	; (80011d8 <MCP23017_IO3_ReadReg+0x28>)
 80011c2:	7818      	ldrb	r0, [r3, #0]
 80011c4:	79bb      	ldrb	r3, [r7, #6]
 80011c6:	79f9      	ldrb	r1, [r7, #7]
 80011c8:	683a      	ldr	r2, [r7, #0]
 80011ca:	f7ff ff4b 	bl	8001064 <MCP23017_IO_ReadReg>
 80011ce:	4603      	mov	r3, r0
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	3708      	adds	r7, #8
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	0800f2b1 	.word	0x0800f2b1

080011dc <MCP23017_IO4_WriteReg>:
 *@Params: Register to write to, data to write, length of data in bytes
 *@Return: Err if write fails, Ok otherwise
 *@Precondition: I2C Bus must be initialized
 *@Postcondition: Device (w/ Address4) register will be modified
 **************************************//**************************************/
static MCP23017_Status_t MCP23017_IO4_WriteReg(uint8_t RegAddr, uint8_t *Data, uint8_t Length){
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	4603      	mov	r3, r0
 80011e4:	6039      	str	r1, [r7, #0]
 80011e6:	71fb      	strb	r3, [r7, #7]
 80011e8:	4613      	mov	r3, r2
 80011ea:	71bb      	strb	r3, [r7, #6]
	static const uint8_t address = MCP23017_Address4;
    return MCP23017_IO_WriteReg(address, RegAddr, Data, Length);
 80011ec:	4b05      	ldr	r3, [pc, #20]	; (8001204 <MCP23017_IO4_WriteReg+0x28>)
 80011ee:	7818      	ldrb	r0, [r3, #0]
 80011f0:	79bb      	ldrb	r3, [r7, #6]
 80011f2:	79f9      	ldrb	r1, [r7, #7]
 80011f4:	683a      	ldr	r2, [r7, #0]
 80011f6:	f7ff ff07 	bl	8001008 <MCP23017_IO_WriteReg>
 80011fa:	4603      	mov	r3, r0
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	3708      	adds	r7, #8
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	0800f2b2 	.word	0x0800f2b2

08001208 <MCP23017_IO4_ReadReg>:
 *@Params: Register to read from, data buffer to read into, length of data in bytes
 *@Return: Err if read fails, Ok otherwise
 *@Precondition: I2C Bus must be initialized
 *@Postcondition: Data buffer will contain data from device (w/ Address4) register
 **************************************//**************************************/
static MCP23017_Status_t MCP23017_IO4_ReadReg(uint8_t RegAddr, uint8_t *Data, uint8_t Length){
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	4603      	mov	r3, r0
 8001210:	6039      	str	r1, [r7, #0]
 8001212:	71fb      	strb	r3, [r7, #7]
 8001214:	4613      	mov	r3, r2
 8001216:	71bb      	strb	r3, [r7, #6]
	static const uint8_t address = MCP23017_Address4;
	return MCP23017_IO_ReadReg(address, RegAddr, Data, Length);
 8001218:	4b05      	ldr	r3, [pc, #20]	; (8001230 <MCP23017_IO4_ReadReg+0x28>)
 800121a:	7818      	ldrb	r0, [r3, #0]
 800121c:	79bb      	ldrb	r3, [r7, #6]
 800121e:	79f9      	ldrb	r1, [r7, #7]
 8001220:	683a      	ldr	r2, [r7, #0]
 8001222:	f7ff ff1f 	bl	8001064 <MCP23017_IO_ReadReg>
 8001226:	4603      	mov	r3, r0
}
 8001228:	4618      	mov	r0, r3
 800122a:	3708      	adds	r7, #8
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	0800f2b3 	.word	0x0800f2b3

08001234 <KeyPadInit>:
static void KeypadInitButtons();
static void KeypadInitLEDs();
static void KeypadInitTouchButtons();
static void KeypadInitJoystick();

void KeyPadInit(){
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
	  KeyPad.MouseUSBBuffer.button_reg = 0;
 800123a:	4b18      	ldr	r3, [pc, #96]	; (800129c <KeyPadInit+0x68>)
 800123c:	2200      	movs	r2, #0
 800123e:	f883 298b 	strb.w	r2, [r3, #2443]	; 0x98b
	  KeyPad.MouseUSBBuffer.wheel_movement = 0;
 8001242:	4b16      	ldr	r3, [pc, #88]	; (800129c <KeyPadInit+0x68>)
 8001244:	2200      	movs	r2, #0
 8001246:	f883 298e 	strb.w	r2, [r3, #2446]	; 0x98e
	  KeyPad.MouseUSBBuffer.x_movement = 0;
 800124a:	4b14      	ldr	r3, [pc, #80]	; (800129c <KeyPadInit+0x68>)
 800124c:	2200      	movs	r2, #0
 800124e:	f883 298c 	strb.w	r2, [r3, #2444]	; 0x98c
	  KeyPad.MouseUSBBuffer.y_movement = 0;
 8001252:	4b12      	ldr	r3, [pc, #72]	; (800129c <KeyPadInit+0x68>)
 8001254:	2200      	movs	r2, #0
 8001256:	f883 298d 	strb.w	r2, [r3, #2445]	; 0x98d
	  KeyPad.KeyboardUSBBuffer.modifiers = 0;
 800125a:	4b10      	ldr	r3, [pc, #64]	; (800129c <KeyPadInit+0x68>)
 800125c:	2200      	movs	r2, #0
 800125e:	f883 2964 	strb.w	r2, [r3, #2404]	; 0x964
	  for(uint8_t i = 0; i < SIMULTANEOUS_BUTTONS; i++){
 8001262:	2300      	movs	r3, #0
 8001264:	71fb      	strb	r3, [r7, #7]
 8001266:	e008      	b.n	800127a <KeyPadInit+0x46>
          KeyPad.KeyboardUSBBuffer.keycodes[i] = KEY_NONE;
 8001268:	79fb      	ldrb	r3, [r7, #7]
 800126a:	4a0c      	ldr	r2, [pc, #48]	; (800129c <KeyPadInit+0x68>)
 800126c:	4413      	add	r3, r2
 800126e:	2200      	movs	r2, #0
 8001270:	f883 2966 	strb.w	r2, [r3, #2406]	; 0x966
	  for(uint8_t i = 0; i < SIMULTANEOUS_BUTTONS; i++){
 8001274:	79fb      	ldrb	r3, [r7, #7]
 8001276:	3301      	adds	r3, #1
 8001278:	71fb      	strb	r3, [r7, #7]
 800127a:	79fb      	ldrb	r3, [r7, #7]
 800127c:	2b24      	cmp	r3, #36	; 0x24
 800127e:	d9f3      	bls.n	8001268 <KeyPadInit+0x34>
	  }
	  KeypadInitLEDs();
 8001280:	f000 fcfe 	bl	8001c80 <KeypadInitLEDs>
	  KeypadInitTouchButtons();
 8001284:	f000 fd54 	bl	8001d30 <KeypadInitTouchButtons>
	  KeypadInitButtons();
 8001288:	f000 fc72 	bl	8001b70 <KeypadInitButtons>
	  KeypadInitJoystick();
 800128c:	f000 fca4 	bl	8001bd8 <KeypadInitJoystick>
	  MX_USB_DEVICE_Init();
 8001290:	f00c f90c 	bl	800d4ac <MX_USB_DEVICE_Init>
}
 8001294:	bf00      	nop
 8001296:	3708      	adds	r7, #8
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	200003a8 	.word	0x200003a8

080012a0 <UpdateKeyPadTxBuffers>:

void UpdateKeyPadTxBuffers(){
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b084      	sub	sp, #16
 80012a4:	af00      	add	r7, sp, #0
	uint8_t PressedKeys = 0;           //Track number of pressed keys (For adding KeyScanCodes to KeyboardUSBBuffer)
 80012a6:	2300      	movs	r3, #0
 80012a8:	73fb      	strb	r3, [r7, #15]
	uint8_t MouseButtons = 0;          //Stores Mouse buttons clicked (will later be added to MouseUSBBuffer
 80012aa:	2300      	movs	r3, #0
 80012ac:	73bb      	strb	r3, [r7, #14]
	uint8_t KeyBoardModKeys = 0;       //Stores Modifier Keys pressed (will later be added to KeyboardUSBBuffer)
 80012ae:	2300      	movs	r3, #0
 80012b0:	737b      	strb	r3, [r7, #13]


	KeypadFlagStatus_t KeyboardStatus = NoKeypadChange; //Keep track of whether a keyboard button has changed. Assigned to KeyPad.KeyboardFlag later.
 80012b2:	2300      	movs	r3, #0
 80012b4:	733b      	strb	r3, [r7, #12]
	KeypadFlagStatus_t MouseStatus = NoKeypadChange;    //Keep track of whether a keyboard button has changed. Assigned to KeyPad.KeyboardFlag later.
 80012b6:	2300      	movs	r3, #0
 80012b8:	72fb      	strb	r3, [r7, #11]

	MouseWheel_t WheelMovement = 0;
 80012ba:	2300      	movs	r3, #0
 80012bc:	72bb      	strb	r3, [r7, #10]
    ButtonStatus_t ButtonStatus;

    //Loop through all buttons
    for(uint8_t i = 0; i < NUMBER_OF_BUTTONS; i++){
 80012be:	2300      	movs	r3, #0
 80012c0:	727b      	strb	r3, [r7, #9]
 80012c2:	e0a7      	b.n	8001414 <UpdateKeyPadTxBuffers+0x174>
    	//Update Button State and store its status
        ButtonStatus = ButtonRead(&KeyPad.Buttons[i]);
 80012c4:	7a7a      	ldrb	r2, [r7, #9]
 80012c6:	4613      	mov	r3, r2
 80012c8:	00db      	lsls	r3, r3, #3
 80012ca:	1a9b      	subs	r3, r3, r2
 80012cc:	009b      	lsls	r3, r3, #2
 80012ce:	4a55      	ldr	r2, [pc, #340]	; (8001424 <UpdateKeyPadTxBuffers+0x184>)
 80012d0:	4413      	add	r3, r2
 80012d2:	3304      	adds	r3, #4
 80012d4:	4618      	mov	r0, r3
 80012d6:	f001 ff32 	bl	800313e <ButtonRead>
 80012da:	4603      	mov	r3, r0
 80012dc:	713b      	strb	r3, [r7, #4]
        if(KeyPad.Buttons[i].State == ButtonPressed){
 80012de:	7a7a      	ldrb	r2, [r7, #9]
 80012e0:	4950      	ldr	r1, [pc, #320]	; (8001424 <UpdateKeyPadTxBuffers+0x184>)
 80012e2:	4613      	mov	r3, r2
 80012e4:	00db      	lsls	r3, r3, #3
 80012e6:	1a9b      	subs	r3, r3, r2
 80012e8:	009b      	lsls	r3, r3, #2
 80012ea:	440b      	add	r3, r1
 80012ec:	3309      	adds	r3, #9
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	d164      	bne.n	80013be <UpdateKeyPadTxBuffers+0x11e>
            if(KeyPad.Buttons[i].KeyFunction.KeyScanCode != KEY_NONE){
 80012f4:	7a7a      	ldrb	r2, [r7, #9]
 80012f6:	494b      	ldr	r1, [pc, #300]	; (8001424 <UpdateKeyPadTxBuffers+0x184>)
 80012f8:	4613      	mov	r3, r2
 80012fa:	00db      	lsls	r3, r3, #3
 80012fc:	1a9b      	subs	r3, r3, r2
 80012fe:	009b      	lsls	r3, r3, #2
 8001300:	440b      	add	r3, r1
 8001302:	3305      	adds	r3, #5
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d010      	beq.n	800132c <UpdateKeyPadTxBuffers+0x8c>
                KeyPad.KeyboardUSBBuffer.keycodes[PressedKeys] = KeyPad.Buttons[i].KeyFunction.KeyScanCode;
 800130a:	7a7a      	ldrb	r2, [r7, #9]
 800130c:	7bf9      	ldrb	r1, [r7, #15]
 800130e:	4845      	ldr	r0, [pc, #276]	; (8001424 <UpdateKeyPadTxBuffers+0x184>)
 8001310:	4613      	mov	r3, r2
 8001312:	00db      	lsls	r3, r3, #3
 8001314:	1a9b      	subs	r3, r3, r2
 8001316:	009b      	lsls	r3, r3, #2
 8001318:	4403      	add	r3, r0
 800131a:	3305      	adds	r3, #5
 800131c:	781a      	ldrb	r2, [r3, #0]
 800131e:	4b41      	ldr	r3, [pc, #260]	; (8001424 <UpdateKeyPadTxBuffers+0x184>)
 8001320:	440b      	add	r3, r1
 8001322:	f883 2966 	strb.w	r2, [r3, #2406]	; 0x966
                PressedKeys++;
 8001326:	7bfb      	ldrb	r3, [r7, #15]
 8001328:	3301      	adds	r3, #1
 800132a:	73fb      	strb	r3, [r7, #15]
            }

            if(KeyPad.Buttons[i].KeyFunction.ModifierKey != KEY_MOD_NOMOD){
 800132c:	7a7a      	ldrb	r2, [r7, #9]
 800132e:	493d      	ldr	r1, [pc, #244]	; (8001424 <UpdateKeyPadTxBuffers+0x184>)
 8001330:	4613      	mov	r3, r2
 8001332:	00db      	lsls	r3, r3, #3
 8001334:	1a9b      	subs	r3, r3, r2
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	440b      	add	r3, r1
 800133a:	3306      	adds	r3, #6
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d00b      	beq.n	800135a <UpdateKeyPadTxBuffers+0xba>
            	KeyBoardModKeys |= KeyPad.Buttons[i].KeyFunction.ModifierKey;
 8001342:	7a7a      	ldrb	r2, [r7, #9]
 8001344:	4937      	ldr	r1, [pc, #220]	; (8001424 <UpdateKeyPadTxBuffers+0x184>)
 8001346:	4613      	mov	r3, r2
 8001348:	00db      	lsls	r3, r3, #3
 800134a:	1a9b      	subs	r3, r3, r2
 800134c:	009b      	lsls	r3, r3, #2
 800134e:	440b      	add	r3, r1
 8001350:	3306      	adds	r3, #6
 8001352:	781a      	ldrb	r2, [r3, #0]
 8001354:	7b7b      	ldrb	r3, [r7, #13]
 8001356:	4313      	orrs	r3, r2
 8001358:	737b      	strb	r3, [r7, #13]
            }

            if(KeyPad.Buttons[i].KeyFunction.MouseClick != MOUSE_CLICK_NONE){
 800135a:	7a7a      	ldrb	r2, [r7, #9]
 800135c:	4931      	ldr	r1, [pc, #196]	; (8001424 <UpdateKeyPadTxBuffers+0x184>)
 800135e:	4613      	mov	r3, r2
 8001360:	00db      	lsls	r3, r3, #3
 8001362:	1a9b      	subs	r3, r3, r2
 8001364:	009b      	lsls	r3, r3, #2
 8001366:	440b      	add	r3, r1
 8001368:	3307      	adds	r3, #7
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d00b      	beq.n	8001388 <UpdateKeyPadTxBuffers+0xe8>
            	MouseButtons |= KeyPad.Buttons[i].KeyFunction.MouseClick;
 8001370:	7a7a      	ldrb	r2, [r7, #9]
 8001372:	492c      	ldr	r1, [pc, #176]	; (8001424 <UpdateKeyPadTxBuffers+0x184>)
 8001374:	4613      	mov	r3, r2
 8001376:	00db      	lsls	r3, r3, #3
 8001378:	1a9b      	subs	r3, r3, r2
 800137a:	009b      	lsls	r3, r3, #2
 800137c:	440b      	add	r3, r1
 800137e:	3307      	adds	r3, #7
 8001380:	781a      	ldrb	r2, [r3, #0]
 8001382:	7bbb      	ldrb	r3, [r7, #14]
 8001384:	4313      	orrs	r3, r2
 8001386:	73bb      	strb	r3, [r7, #14]
            }

            if(KeyPad.Buttons[i].KeyFunction.MouseWheel != MOUSE_WHEEL_NO_MOVE){
 8001388:	7a7a      	ldrb	r2, [r7, #9]
 800138a:	4926      	ldr	r1, [pc, #152]	; (8001424 <UpdateKeyPadTxBuffers+0x184>)
 800138c:	4613      	mov	r3, r2
 800138e:	00db      	lsls	r3, r3, #3
 8001390:	1a9b      	subs	r3, r3, r2
 8001392:	009b      	lsls	r3, r3, #2
 8001394:	440b      	add	r3, r1
 8001396:	3308      	adds	r3, #8
 8001398:	f993 3000 	ldrsb.w	r3, [r3]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d00e      	beq.n	80013be <UpdateKeyPadTxBuffers+0x11e>
                WheelMovement += KeyPad.Buttons[i].KeyFunction.MouseWheel;
 80013a0:	7a7a      	ldrb	r2, [r7, #9]
 80013a2:	4920      	ldr	r1, [pc, #128]	; (8001424 <UpdateKeyPadTxBuffers+0x184>)
 80013a4:	4613      	mov	r3, r2
 80013a6:	00db      	lsls	r3, r3, #3
 80013a8:	1a9b      	subs	r3, r3, r2
 80013aa:	009b      	lsls	r3, r3, #2
 80013ac:	440b      	add	r3, r1
 80013ae:	3308      	adds	r3, #8
 80013b0:	f993 3000 	ldrsb.w	r3, [r3]
 80013b4:	b2da      	uxtb	r2, r3
 80013b6:	7abb      	ldrb	r3, [r7, #10]
 80013b8:	4413      	add	r3, r2
 80013ba:	b2db      	uxtb	r3, r3
 80013bc:	72bb      	strb	r3, [r7, #10]
            }
        }

        if(ButtonStatus == ButtonChanged){
 80013be:	793b      	ldrb	r3, [r7, #4]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d124      	bne.n	800140e <UpdateKeyPadTxBuffers+0x16e>
        	if(KeyPad.Buttons[i].KeyFunction.KeyScanCode != KEY_NONE || KeyPad.Buttons[i].KeyFunction.ModifierKey != KEY_MOD_NOMOD){
 80013c4:	7a7a      	ldrb	r2, [r7, #9]
 80013c6:	4917      	ldr	r1, [pc, #92]	; (8001424 <UpdateKeyPadTxBuffers+0x184>)
 80013c8:	4613      	mov	r3, r2
 80013ca:	00db      	lsls	r3, r3, #3
 80013cc:	1a9b      	subs	r3, r3, r2
 80013ce:	009b      	lsls	r3, r3, #2
 80013d0:	440b      	add	r3, r1
 80013d2:	3305      	adds	r3, #5
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d10a      	bne.n	80013f0 <UpdateKeyPadTxBuffers+0x150>
 80013da:	7a7a      	ldrb	r2, [r7, #9]
 80013dc:	4911      	ldr	r1, [pc, #68]	; (8001424 <UpdateKeyPadTxBuffers+0x184>)
 80013de:	4613      	mov	r3, r2
 80013e0:	00db      	lsls	r3, r3, #3
 80013e2:	1a9b      	subs	r3, r3, r2
 80013e4:	009b      	lsls	r3, r3, #2
 80013e6:	440b      	add	r3, r1
 80013e8:	3306      	adds	r3, #6
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <UpdateKeyPadTxBuffers+0x154>
        		KeyboardStatus = KeyboardDataAvailable;
 80013f0:	2302      	movs	r3, #2
 80013f2:	733b      	strb	r3, [r7, #12]
        	}

        	if(KeyPad.Buttons[i].KeyFunction.MouseClick != MOUSE_CLICK_NONE){
 80013f4:	7a7a      	ldrb	r2, [r7, #9]
 80013f6:	490b      	ldr	r1, [pc, #44]	; (8001424 <UpdateKeyPadTxBuffers+0x184>)
 80013f8:	4613      	mov	r3, r2
 80013fa:	00db      	lsls	r3, r3, #3
 80013fc:	1a9b      	subs	r3, r3, r2
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	440b      	add	r3, r1
 8001402:	3307      	adds	r3, #7
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <UpdateKeyPadTxBuffers+0x16e>
        		MouseStatus = MouseDataAvailable;
 800140a:	2301      	movs	r3, #1
 800140c:	72fb      	strb	r3, [r7, #11]
    for(uint8_t i = 0; i < NUMBER_OF_BUTTONS; i++){
 800140e:	7a7b      	ldrb	r3, [r7, #9]
 8001410:	3301      	adds	r3, #1
 8001412:	727b      	strb	r3, [r7, #9]
 8001414:	7a7b      	ldrb	r3, [r7, #9]
 8001416:	2b3f      	cmp	r3, #63	; 0x3f
 8001418:	f67f af54 	bls.w	80012c4 <UpdateKeyPadTxBuffers+0x24>
        }
    }

    TouchButton_Status_t TouchButtonStatus;
    //Loop through all touch buttons
    for(uint8_t i = 0; i < NUMBER_OF_TOUCH_BUTTONS; i++){
 800141c:	2300      	movs	r3, #0
 800141e:	723b      	strb	r3, [r7, #8]
 8001420:	e0b8      	b.n	8001594 <UpdateKeyPadTxBuffers+0x2f4>
 8001422:	bf00      	nop
 8001424:	200003a8 	.word	0x200003a8
    	//Update Button State and store its status
    	TouchButtonStatus = TouchButtonRead(&KeyPad.TouchButton[i]);
 8001428:	7a3a      	ldrb	r2, [r7, #8]
 800142a:	4613      	mov	r3, r2
 800142c:	00db      	lsls	r3, r3, #3
 800142e:	4413      	add	r3, r2
 8001430:	009b      	lsls	r3, r3, #2
 8001432:	f503 63f6 	add.w	r3, r3, #1968	; 0x7b0
 8001436:	4ab6      	ldr	r2, [pc, #728]	; (8001710 <UpdateKeyPadTxBuffers+0x470>)
 8001438:	4413      	add	r3, r2
 800143a:	3304      	adds	r3, #4
 800143c:	4618      	mov	r0, r3
 800143e:	f002 fa66 	bl	800390e <TouchButtonRead>
 8001442:	4603      	mov	r3, r0
 8001444:	717b      	strb	r3, [r7, #5]
        if(KeyPad.TouchButton[i].State == TouchButtonPressed){
 8001446:	7a3a      	ldrb	r2, [r7, #8]
 8001448:	49b1      	ldr	r1, [pc, #708]	; (8001710 <UpdateKeyPadTxBuffers+0x470>)
 800144a:	4613      	mov	r3, r2
 800144c:	00db      	lsls	r3, r3, #3
 800144e:	4413      	add	r3, r2
 8001450:	009b      	lsls	r3, r3, #2
 8001452:	440b      	add	r3, r1
 8001454:	f503 63f8 	add.w	r3, r3, #1984	; 0x7c0
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d16c      	bne.n	8001538 <UpdateKeyPadTxBuffers+0x298>
            if(KeyPad.TouchButton[i].KeyFunction.KeyScanCode != KEY_NONE){
 800145e:	7a3a      	ldrb	r2, [r7, #8]
 8001460:	49ab      	ldr	r1, [pc, #684]	; (8001710 <UpdateKeyPadTxBuffers+0x470>)
 8001462:	4613      	mov	r3, r2
 8001464:	00db      	lsls	r3, r3, #3
 8001466:	4413      	add	r3, r2
 8001468:	009b      	lsls	r3, r3, #2
 800146a:	440b      	add	r3, r1
 800146c:	f203 73bc 	addw	r3, r3, #1980	; 0x7bc
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d011      	beq.n	800149a <UpdateKeyPadTxBuffers+0x1fa>
                KeyPad.KeyboardUSBBuffer.keycodes[PressedKeys] = KeyPad.TouchButton[i].KeyFunction.KeyScanCode;
 8001476:	7a3a      	ldrb	r2, [r7, #8]
 8001478:	7bf9      	ldrb	r1, [r7, #15]
 800147a:	48a5      	ldr	r0, [pc, #660]	; (8001710 <UpdateKeyPadTxBuffers+0x470>)
 800147c:	4613      	mov	r3, r2
 800147e:	00db      	lsls	r3, r3, #3
 8001480:	4413      	add	r3, r2
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	4403      	add	r3, r0
 8001486:	f203 73bc 	addw	r3, r3, #1980	; 0x7bc
 800148a:	781a      	ldrb	r2, [r3, #0]
 800148c:	4ba0      	ldr	r3, [pc, #640]	; (8001710 <UpdateKeyPadTxBuffers+0x470>)
 800148e:	440b      	add	r3, r1
 8001490:	f883 2966 	strb.w	r2, [r3, #2406]	; 0x966
                PressedKeys++;
 8001494:	7bfb      	ldrb	r3, [r7, #15]
 8001496:	3301      	adds	r3, #1
 8001498:	73fb      	strb	r3, [r7, #15]
            }

            if(KeyPad.TouchButton[i].KeyFunction.ModifierKey != KEY_MOD_NOMOD){
 800149a:	7a3a      	ldrb	r2, [r7, #8]
 800149c:	499c      	ldr	r1, [pc, #624]	; (8001710 <UpdateKeyPadTxBuffers+0x470>)
 800149e:	4613      	mov	r3, r2
 80014a0:	00db      	lsls	r3, r3, #3
 80014a2:	4413      	add	r3, r2
 80014a4:	009b      	lsls	r3, r3, #2
 80014a6:	440b      	add	r3, r1
 80014a8:	f203 73bd 	addw	r3, r3, #1981	; 0x7bd
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d00c      	beq.n	80014cc <UpdateKeyPadTxBuffers+0x22c>
            	KeyBoardModKeys |= KeyPad.TouchButton[i].KeyFunction.ModifierKey;
 80014b2:	7a3a      	ldrb	r2, [r7, #8]
 80014b4:	4996      	ldr	r1, [pc, #600]	; (8001710 <UpdateKeyPadTxBuffers+0x470>)
 80014b6:	4613      	mov	r3, r2
 80014b8:	00db      	lsls	r3, r3, #3
 80014ba:	4413      	add	r3, r2
 80014bc:	009b      	lsls	r3, r3, #2
 80014be:	440b      	add	r3, r1
 80014c0:	f203 73bd 	addw	r3, r3, #1981	; 0x7bd
 80014c4:	781a      	ldrb	r2, [r3, #0]
 80014c6:	7b7b      	ldrb	r3, [r7, #13]
 80014c8:	4313      	orrs	r3, r2
 80014ca:	737b      	strb	r3, [r7, #13]
            }

            if(KeyPad.TouchButton[i].KeyFunction.MouseClick != MOUSE_CLICK_NONE){
 80014cc:	7a3a      	ldrb	r2, [r7, #8]
 80014ce:	4990      	ldr	r1, [pc, #576]	; (8001710 <UpdateKeyPadTxBuffers+0x470>)
 80014d0:	4613      	mov	r3, r2
 80014d2:	00db      	lsls	r3, r3, #3
 80014d4:	4413      	add	r3, r2
 80014d6:	009b      	lsls	r3, r3, #2
 80014d8:	440b      	add	r3, r1
 80014da:	f203 73be 	addw	r3, r3, #1982	; 0x7be
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d00c      	beq.n	80014fe <UpdateKeyPadTxBuffers+0x25e>
            	MouseButtons |= KeyPad.TouchButton[i].KeyFunction.MouseClick;
 80014e4:	7a3a      	ldrb	r2, [r7, #8]
 80014e6:	498a      	ldr	r1, [pc, #552]	; (8001710 <UpdateKeyPadTxBuffers+0x470>)
 80014e8:	4613      	mov	r3, r2
 80014ea:	00db      	lsls	r3, r3, #3
 80014ec:	4413      	add	r3, r2
 80014ee:	009b      	lsls	r3, r3, #2
 80014f0:	440b      	add	r3, r1
 80014f2:	f203 73be 	addw	r3, r3, #1982	; 0x7be
 80014f6:	781a      	ldrb	r2, [r3, #0]
 80014f8:	7bbb      	ldrb	r3, [r7, #14]
 80014fa:	4313      	orrs	r3, r2
 80014fc:	73bb      	strb	r3, [r7, #14]
            }

            if(KeyPad.TouchButton[i].KeyFunction.MouseWheel != MOUSE_WHEEL_NO_MOVE){
 80014fe:	7a3a      	ldrb	r2, [r7, #8]
 8001500:	4983      	ldr	r1, [pc, #524]	; (8001710 <UpdateKeyPadTxBuffers+0x470>)
 8001502:	4613      	mov	r3, r2
 8001504:	00db      	lsls	r3, r3, #3
 8001506:	4413      	add	r3, r2
 8001508:	009b      	lsls	r3, r3, #2
 800150a:	440b      	add	r3, r1
 800150c:	f203 73bf 	addw	r3, r3, #1983	; 0x7bf
 8001510:	f993 3000 	ldrsb.w	r3, [r3]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d00f      	beq.n	8001538 <UpdateKeyPadTxBuffers+0x298>
                WheelMovement += KeyPad.TouchButton[i].KeyFunction.MouseWheel;
 8001518:	7a3a      	ldrb	r2, [r7, #8]
 800151a:	497d      	ldr	r1, [pc, #500]	; (8001710 <UpdateKeyPadTxBuffers+0x470>)
 800151c:	4613      	mov	r3, r2
 800151e:	00db      	lsls	r3, r3, #3
 8001520:	4413      	add	r3, r2
 8001522:	009b      	lsls	r3, r3, #2
 8001524:	440b      	add	r3, r1
 8001526:	f203 73bf 	addw	r3, r3, #1983	; 0x7bf
 800152a:	f993 3000 	ldrsb.w	r3, [r3]
 800152e:	b2da      	uxtb	r2, r3
 8001530:	7abb      	ldrb	r3, [r7, #10]
 8001532:	4413      	add	r3, r2
 8001534:	b2db      	uxtb	r3, r3
 8001536:	72bb      	strb	r3, [r7, #10]
            }

        }

        if(TouchButtonStatus == TouchButtonChanged){
 8001538:	797b      	ldrb	r3, [r7, #5]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d127      	bne.n	800158e <UpdateKeyPadTxBuffers+0x2ee>
        	if(KeyPad.TouchButton[i].KeyFunction.KeyScanCode != KEY_NONE || KeyPad.TouchButton[i].KeyFunction.ModifierKey != KEY_MOD_NOMOD){
 800153e:	7a3a      	ldrb	r2, [r7, #8]
 8001540:	4973      	ldr	r1, [pc, #460]	; (8001710 <UpdateKeyPadTxBuffers+0x470>)
 8001542:	4613      	mov	r3, r2
 8001544:	00db      	lsls	r3, r3, #3
 8001546:	4413      	add	r3, r2
 8001548:	009b      	lsls	r3, r3, #2
 800154a:	440b      	add	r3, r1
 800154c:	f203 73bc 	addw	r3, r3, #1980	; 0x7bc
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d10b      	bne.n	800156e <UpdateKeyPadTxBuffers+0x2ce>
 8001556:	7a3a      	ldrb	r2, [r7, #8]
 8001558:	496d      	ldr	r1, [pc, #436]	; (8001710 <UpdateKeyPadTxBuffers+0x470>)
 800155a:	4613      	mov	r3, r2
 800155c:	00db      	lsls	r3, r3, #3
 800155e:	4413      	add	r3, r2
 8001560:	009b      	lsls	r3, r3, #2
 8001562:	440b      	add	r3, r1
 8001564:	f203 73bd 	addw	r3, r3, #1981	; 0x7bd
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <UpdateKeyPadTxBuffers+0x2d2>
        		KeyboardStatus = KeyboardDataAvailable;
 800156e:	2302      	movs	r3, #2
 8001570:	733b      	strb	r3, [r7, #12]
        	}

        	if(KeyPad.TouchButton[i].KeyFunction.MouseClick != MOUSE_CLICK_NONE){
 8001572:	7a3a      	ldrb	r2, [r7, #8]
 8001574:	4966      	ldr	r1, [pc, #408]	; (8001710 <UpdateKeyPadTxBuffers+0x470>)
 8001576:	4613      	mov	r3, r2
 8001578:	00db      	lsls	r3, r3, #3
 800157a:	4413      	add	r3, r2
 800157c:	009b      	lsls	r3, r3, #2
 800157e:	440b      	add	r3, r1
 8001580:	f203 73be 	addw	r3, r3, #1982	; 0x7be
 8001584:	781b      	ldrb	r3, [r3, #0]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <UpdateKeyPadTxBuffers+0x2ee>
        		MouseStatus = MouseDataAvailable;
 800158a:	2301      	movs	r3, #1
 800158c:	72fb      	strb	r3, [r7, #11]
    for(uint8_t i = 0; i < NUMBER_OF_TOUCH_BUTTONS; i++){
 800158e:	7a3b      	ldrb	r3, [r7, #8]
 8001590:	3301      	adds	r3, #1
 8001592:	723b      	strb	r3, [r7, #8]
 8001594:	7a3b      	ldrb	r3, [r7, #8]
 8001596:	2b0b      	cmp	r3, #11
 8001598:	f67f af46 	bls.w	8001428 <UpdateKeyPadTxBuffers+0x188>

    }

    //Handle Joystick
    JoystickStatus_t JoystickStatus;
    JoystickStatus = JoystickRead(&KeyPad.Joystick);
 800159c:	485d      	ldr	r0, [pc, #372]	; (8001714 <UpdateKeyPadTxBuffers+0x474>)
 800159e:	f001 ff25 	bl	80033ec <JoystickRead>
 80015a2:	4603      	mov	r3, r0
 80015a4:	71bb      	strb	r3, [r7, #6]

	switch(KeyPad.Joystick.Position){
 80015a6:	4b5a      	ldr	r3, [pc, #360]	; (8001710 <UpdateKeyPadTxBuffers+0x470>)
 80015a8:	f893 3708 	ldrb.w	r3, [r3, #1800]	; 0x708
 80015ac:	3b01      	subs	r3, #1
 80015ae:	2b07      	cmp	r3, #7
 80015b0:	f200 827e 	bhi.w	8001ab0 <UpdateKeyPadTxBuffers+0x810>
 80015b4:	a201      	add	r2, pc, #4	; (adr r2, 80015bc <UpdateKeyPadTxBuffers+0x31c>)
 80015b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015ba:	bf00      	nop
 80015bc:	08001719 	.word	0x08001719
 80015c0:	08001677 	.word	0x08001677
 80015c4:	080015dd 	.word	0x080015dd
 80015c8:	08001a1b 	.word	0x08001a1b
 80015cc:	08001985 	.word	0x08001985
 80015d0:	080018e7 	.word	0x080018e7
 80015d4:	0800184d 	.word	0x0800184d
 80015d8:	080017b3 	.word	0x080017b3
			case(Joystick_Up):
                            if(KeyPad.Joystick.UpFunction.KeyScanCode != KEY_NONE){
 80015dc:	4b4c      	ldr	r3, [pc, #304]	; (8001710 <UpdateKeyPadTxBuffers+0x470>)
 80015de:	f893 3715 	ldrb.w	r3, [r3, #1813]	; 0x715
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d00b      	beq.n	80015fe <UpdateKeyPadTxBuffers+0x35e>
                                KeyPad.KeyboardUSBBuffer.keycodes[PressedKeys] = KeyPad.Joystick.UpFunction.KeyScanCode;
 80015e6:	7bfb      	ldrb	r3, [r7, #15]
 80015e8:	4a49      	ldr	r2, [pc, #292]	; (8001710 <UpdateKeyPadTxBuffers+0x470>)
 80015ea:	f892 1715 	ldrb.w	r1, [r2, #1813]	; 0x715
 80015ee:	4a48      	ldr	r2, [pc, #288]	; (8001710 <UpdateKeyPadTxBuffers+0x470>)
 80015f0:	4413      	add	r3, r2
 80015f2:	460a      	mov	r2, r1
 80015f4:	f883 2966 	strb.w	r2, [r3, #2406]	; 0x966
                                PressedKeys++;
 80015f8:	7bfb      	ldrb	r3, [r7, #15]
 80015fa:	3301      	adds	r3, #1
 80015fc:	73fb      	strb	r3, [r7, #15]
                            }

                            if(KeyPad.Joystick.UpFunction.ModifierKey != KEY_MOD_NOMOD){
 80015fe:	4b44      	ldr	r3, [pc, #272]	; (8001710 <UpdateKeyPadTxBuffers+0x470>)
 8001600:	f893 3716 	ldrb.w	r3, [r3, #1814]	; 0x716
 8001604:	2b00      	cmp	r3, #0
 8001606:	d005      	beq.n	8001614 <UpdateKeyPadTxBuffers+0x374>
                            	KeyBoardModKeys |= KeyPad.Joystick.UpFunction.ModifierKey;
 8001608:	4b41      	ldr	r3, [pc, #260]	; (8001710 <UpdateKeyPadTxBuffers+0x470>)
 800160a:	f893 2716 	ldrb.w	r2, [r3, #1814]	; 0x716
 800160e:	7b7b      	ldrb	r3, [r7, #13]
 8001610:	4313      	orrs	r3, r2
 8001612:	737b      	strb	r3, [r7, #13]
                            }

                            if(KeyPad.Joystick.UpFunction.MouseClick != MOUSE_CLICK_NONE){
 8001614:	4b3e      	ldr	r3, [pc, #248]	; (8001710 <UpdateKeyPadTxBuffers+0x470>)
 8001616:	f893 3717 	ldrb.w	r3, [r3, #1815]	; 0x717
 800161a:	2b00      	cmp	r3, #0
 800161c:	d005      	beq.n	800162a <UpdateKeyPadTxBuffers+0x38a>
                            	MouseButtons |= KeyPad.Joystick.UpFunction.MouseClick;
 800161e:	4b3c      	ldr	r3, [pc, #240]	; (8001710 <UpdateKeyPadTxBuffers+0x470>)
 8001620:	f893 2717 	ldrb.w	r2, [r3, #1815]	; 0x717
 8001624:	7bbb      	ldrb	r3, [r7, #14]
 8001626:	4313      	orrs	r3, r2
 8001628:	73bb      	strb	r3, [r7, #14]
                            }

                            if(KeyPad.Joystick.UpFunction.MouseWheel != MOUSE_WHEEL_NO_MOVE){
 800162a:	4b39      	ldr	r3, [pc, #228]	; (8001710 <UpdateKeyPadTxBuffers+0x470>)
 800162c:	f993 3718 	ldrsb.w	r3, [r3, #1816]	; 0x718
 8001630:	2b00      	cmp	r3, #0
 8001632:	d007      	beq.n	8001644 <UpdateKeyPadTxBuffers+0x3a4>
                                WheelMovement += KeyPad.Joystick.UpFunction.MouseWheel;
 8001634:	4b36      	ldr	r3, [pc, #216]	; (8001710 <UpdateKeyPadTxBuffers+0x470>)
 8001636:	f993 3718 	ldrsb.w	r3, [r3, #1816]	; 0x718
 800163a:	b2da      	uxtb	r2, r3
 800163c:	7abb      	ldrb	r3, [r7, #10]
 800163e:	4413      	add	r3, r2
 8001640:	b2db      	uxtb	r3, r3
 8001642:	72bb      	strb	r3, [r7, #10]
                            }


                            if(JoystickStatus == JoystickChanged){
 8001644:	79bb      	ldrb	r3, [r7, #6]
 8001646:	2b00      	cmp	r3, #0
 8001648:	f040 823a 	bne.w	8001ac0 <UpdateKeyPadTxBuffers+0x820>
                            	if(KeyPad.Joystick.UpFunction.KeyScanCode != KEY_NONE || KeyPad.Joystick.UpFunction.ModifierKey != KEY_MOD_NOMOD){
 800164c:	4b30      	ldr	r3, [pc, #192]	; (8001710 <UpdateKeyPadTxBuffers+0x470>)
 800164e:	f893 3715 	ldrb.w	r3, [r3, #1813]	; 0x715
 8001652:	2b00      	cmp	r3, #0
 8001654:	d104      	bne.n	8001660 <UpdateKeyPadTxBuffers+0x3c0>
 8001656:	4b2e      	ldr	r3, [pc, #184]	; (8001710 <UpdateKeyPadTxBuffers+0x470>)
 8001658:	f893 3716 	ldrb.w	r3, [r3, #1814]	; 0x716
 800165c:	2b00      	cmp	r3, #0
 800165e:	d001      	beq.n	8001664 <UpdateKeyPadTxBuffers+0x3c4>
                            		KeyboardStatus = KeyboardDataAvailable;
 8001660:	2302      	movs	r3, #2
 8001662:	733b      	strb	r3, [r7, #12]
                            	}

                            	if(KeyPad.Joystick.UpFunction.MouseClick != MOUSE_CLICK_NONE){
 8001664:	4b2a      	ldr	r3, [pc, #168]	; (8001710 <UpdateKeyPadTxBuffers+0x470>)
 8001666:	f893 3717 	ldrb.w	r3, [r3, #1815]	; 0x717
 800166a:	2b00      	cmp	r3, #0
 800166c:	f000 8228 	beq.w	8001ac0 <UpdateKeyPadTxBuffers+0x820>
                            		MouseStatus = MouseDataAvailable;
 8001670:	2301      	movs	r3, #1
 8001672:	72fb      	strb	r3, [r7, #11]
                            	}
                            }
					break;
 8001674:	e224      	b.n	8001ac0 <UpdateKeyPadTxBuffers+0x820>
			case(Joystick_UpRight):
                            if(KeyPad.Joystick.UpRightFunction.KeyScanCode != KEY_NONE){
 8001676:	4b26      	ldr	r3, [pc, #152]	; (8001710 <UpdateKeyPadTxBuffers+0x470>)
 8001678:	f893 3711 	ldrb.w	r3, [r3, #1809]	; 0x711
 800167c:	2b00      	cmp	r3, #0
 800167e:	d00b      	beq.n	8001698 <UpdateKeyPadTxBuffers+0x3f8>
                                KeyPad.KeyboardUSBBuffer.keycodes[PressedKeys] = KeyPad.Joystick.UpRightFunction.KeyScanCode;
 8001680:	7bfb      	ldrb	r3, [r7, #15]
 8001682:	4a23      	ldr	r2, [pc, #140]	; (8001710 <UpdateKeyPadTxBuffers+0x470>)
 8001684:	f892 1711 	ldrb.w	r1, [r2, #1809]	; 0x711
 8001688:	4a21      	ldr	r2, [pc, #132]	; (8001710 <UpdateKeyPadTxBuffers+0x470>)
 800168a:	4413      	add	r3, r2
 800168c:	460a      	mov	r2, r1
 800168e:	f883 2966 	strb.w	r2, [r3, #2406]	; 0x966
                                PressedKeys++;
 8001692:	7bfb      	ldrb	r3, [r7, #15]
 8001694:	3301      	adds	r3, #1
 8001696:	73fb      	strb	r3, [r7, #15]
                            }

                            if(KeyPad.Joystick.UpRightFunction.ModifierKey != KEY_MOD_NOMOD){
 8001698:	4b1d      	ldr	r3, [pc, #116]	; (8001710 <UpdateKeyPadTxBuffers+0x470>)
 800169a:	f893 3712 	ldrb.w	r3, [r3, #1810]	; 0x712
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d005      	beq.n	80016ae <UpdateKeyPadTxBuffers+0x40e>
                            	KeyBoardModKeys |= KeyPad.Joystick.UpRightFunction.ModifierKey;
 80016a2:	4b1b      	ldr	r3, [pc, #108]	; (8001710 <UpdateKeyPadTxBuffers+0x470>)
 80016a4:	f893 2712 	ldrb.w	r2, [r3, #1810]	; 0x712
 80016a8:	7b7b      	ldrb	r3, [r7, #13]
 80016aa:	4313      	orrs	r3, r2
 80016ac:	737b      	strb	r3, [r7, #13]
                            }

                            if(KeyPad.Joystick.UpRightFunction.MouseClick != MOUSE_CLICK_NONE){
 80016ae:	4b18      	ldr	r3, [pc, #96]	; (8001710 <UpdateKeyPadTxBuffers+0x470>)
 80016b0:	f893 3713 	ldrb.w	r3, [r3, #1811]	; 0x713
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d005      	beq.n	80016c4 <UpdateKeyPadTxBuffers+0x424>
                            	MouseButtons |= KeyPad.Joystick.UpRightFunction.MouseClick;
 80016b8:	4b15      	ldr	r3, [pc, #84]	; (8001710 <UpdateKeyPadTxBuffers+0x470>)
 80016ba:	f893 2713 	ldrb.w	r2, [r3, #1811]	; 0x713
 80016be:	7bbb      	ldrb	r3, [r7, #14]
 80016c0:	4313      	orrs	r3, r2
 80016c2:	73bb      	strb	r3, [r7, #14]
                            }

                            if(KeyPad.Joystick.UpRightFunction.MouseWheel != MOUSE_WHEEL_NO_MOVE){
 80016c4:	4b12      	ldr	r3, [pc, #72]	; (8001710 <UpdateKeyPadTxBuffers+0x470>)
 80016c6:	f993 3714 	ldrsb.w	r3, [r3, #1812]	; 0x714
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d007      	beq.n	80016de <UpdateKeyPadTxBuffers+0x43e>
                                WheelMovement += KeyPad.Joystick.UpRightFunction.MouseWheel;
 80016ce:	4b10      	ldr	r3, [pc, #64]	; (8001710 <UpdateKeyPadTxBuffers+0x470>)
 80016d0:	f993 3714 	ldrsb.w	r3, [r3, #1812]	; 0x714
 80016d4:	b2da      	uxtb	r2, r3
 80016d6:	7abb      	ldrb	r3, [r7, #10]
 80016d8:	4413      	add	r3, r2
 80016da:	b2db      	uxtb	r3, r3
 80016dc:	72bb      	strb	r3, [r7, #10]
                            }


                            if(JoystickStatus == JoystickChanged){
 80016de:	79bb      	ldrb	r3, [r7, #6]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	f040 81ef 	bne.w	8001ac4 <UpdateKeyPadTxBuffers+0x824>
                            	if(KeyPad.Joystick.UpRightFunction.KeyScanCode != KEY_NONE || KeyPad.Joystick.UpRightFunction.ModifierKey != KEY_MOD_NOMOD){
 80016e6:	4b0a      	ldr	r3, [pc, #40]	; (8001710 <UpdateKeyPadTxBuffers+0x470>)
 80016e8:	f893 3711 	ldrb.w	r3, [r3, #1809]	; 0x711
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d104      	bne.n	80016fa <UpdateKeyPadTxBuffers+0x45a>
 80016f0:	4b07      	ldr	r3, [pc, #28]	; (8001710 <UpdateKeyPadTxBuffers+0x470>)
 80016f2:	f893 3712 	ldrb.w	r3, [r3, #1810]	; 0x712
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <UpdateKeyPadTxBuffers+0x45e>
                            		KeyboardStatus = KeyboardDataAvailable;
 80016fa:	2302      	movs	r3, #2
 80016fc:	733b      	strb	r3, [r7, #12]
                            	}

                            	if(KeyPad.Joystick.UpRightFunction.MouseClick != MOUSE_CLICK_NONE){
 80016fe:	4b04      	ldr	r3, [pc, #16]	; (8001710 <UpdateKeyPadTxBuffers+0x470>)
 8001700:	f893 3713 	ldrb.w	r3, [r3, #1811]	; 0x713
 8001704:	2b00      	cmp	r3, #0
 8001706:	f000 81dd 	beq.w	8001ac4 <UpdateKeyPadTxBuffers+0x824>
                            		MouseStatus = MouseDataAvailable;
 800170a:	2301      	movs	r3, #1
 800170c:	72fb      	strb	r3, [r7, #11]
                            	}
                            }
					break;
 800170e:	e1d9      	b.n	8001ac4 <UpdateKeyPadTxBuffers+0x824>
 8001710:	200003a8 	.word	0x200003a8
 8001714:	20000aac 	.word	0x20000aac
			case(Joystick_Right):
                            if(KeyPad.Joystick.RightFunction.KeyScanCode != KEY_NONE){
 8001718:	4b99      	ldr	r3, [pc, #612]	; (8001980 <UpdateKeyPadTxBuffers+0x6e0>)
 800171a:	f893 370d 	ldrb.w	r3, [r3, #1805]	; 0x70d
 800171e:	2b00      	cmp	r3, #0
 8001720:	d00b      	beq.n	800173a <UpdateKeyPadTxBuffers+0x49a>
                                KeyPad.KeyboardUSBBuffer.keycodes[PressedKeys] = KeyPad.Joystick.RightFunction.KeyScanCode;
 8001722:	7bfb      	ldrb	r3, [r7, #15]
 8001724:	4a96      	ldr	r2, [pc, #600]	; (8001980 <UpdateKeyPadTxBuffers+0x6e0>)
 8001726:	f892 170d 	ldrb.w	r1, [r2, #1805]	; 0x70d
 800172a:	4a95      	ldr	r2, [pc, #596]	; (8001980 <UpdateKeyPadTxBuffers+0x6e0>)
 800172c:	4413      	add	r3, r2
 800172e:	460a      	mov	r2, r1
 8001730:	f883 2966 	strb.w	r2, [r3, #2406]	; 0x966
                                PressedKeys++;
 8001734:	7bfb      	ldrb	r3, [r7, #15]
 8001736:	3301      	adds	r3, #1
 8001738:	73fb      	strb	r3, [r7, #15]
                            }

                            if(KeyPad.Joystick.RightFunction.ModifierKey != KEY_MOD_NOMOD){
 800173a:	4b91      	ldr	r3, [pc, #580]	; (8001980 <UpdateKeyPadTxBuffers+0x6e0>)
 800173c:	f893 370e 	ldrb.w	r3, [r3, #1806]	; 0x70e
 8001740:	2b00      	cmp	r3, #0
 8001742:	d005      	beq.n	8001750 <UpdateKeyPadTxBuffers+0x4b0>
                            	KeyBoardModKeys |= KeyPad.Joystick.RightFunction.ModifierKey;
 8001744:	4b8e      	ldr	r3, [pc, #568]	; (8001980 <UpdateKeyPadTxBuffers+0x6e0>)
 8001746:	f893 270e 	ldrb.w	r2, [r3, #1806]	; 0x70e
 800174a:	7b7b      	ldrb	r3, [r7, #13]
 800174c:	4313      	orrs	r3, r2
 800174e:	737b      	strb	r3, [r7, #13]
                            }

                            if(KeyPad.Joystick.RightFunction.MouseClick != MOUSE_CLICK_NONE){
 8001750:	4b8b      	ldr	r3, [pc, #556]	; (8001980 <UpdateKeyPadTxBuffers+0x6e0>)
 8001752:	f893 370f 	ldrb.w	r3, [r3, #1807]	; 0x70f
 8001756:	2b00      	cmp	r3, #0
 8001758:	d005      	beq.n	8001766 <UpdateKeyPadTxBuffers+0x4c6>
                            	MouseButtons |= KeyPad.Joystick.RightFunction.MouseClick;
 800175a:	4b89      	ldr	r3, [pc, #548]	; (8001980 <UpdateKeyPadTxBuffers+0x6e0>)
 800175c:	f893 270f 	ldrb.w	r2, [r3, #1807]	; 0x70f
 8001760:	7bbb      	ldrb	r3, [r7, #14]
 8001762:	4313      	orrs	r3, r2
 8001764:	73bb      	strb	r3, [r7, #14]
                            }

                            if(KeyPad.Joystick.RightFunction.MouseWheel != MOUSE_WHEEL_NO_MOVE){
 8001766:	4b86      	ldr	r3, [pc, #536]	; (8001980 <UpdateKeyPadTxBuffers+0x6e0>)
 8001768:	f993 3710 	ldrsb.w	r3, [r3, #1808]	; 0x710
 800176c:	2b00      	cmp	r3, #0
 800176e:	d007      	beq.n	8001780 <UpdateKeyPadTxBuffers+0x4e0>
                                WheelMovement += KeyPad.Joystick.RightFunction.MouseWheel;
 8001770:	4b83      	ldr	r3, [pc, #524]	; (8001980 <UpdateKeyPadTxBuffers+0x6e0>)
 8001772:	f993 3710 	ldrsb.w	r3, [r3, #1808]	; 0x710
 8001776:	b2da      	uxtb	r2, r3
 8001778:	7abb      	ldrb	r3, [r7, #10]
 800177a:	4413      	add	r3, r2
 800177c:	b2db      	uxtb	r3, r3
 800177e:	72bb      	strb	r3, [r7, #10]
                            }


                            if(JoystickStatus == JoystickChanged){
 8001780:	79bb      	ldrb	r3, [r7, #6]
 8001782:	2b00      	cmp	r3, #0
 8001784:	f040 81a0 	bne.w	8001ac8 <UpdateKeyPadTxBuffers+0x828>
                            	if(KeyPad.Joystick.RightFunction.KeyScanCode != KEY_NONE || KeyPad.Joystick.RightFunction.ModifierKey != KEY_MOD_NOMOD){
 8001788:	4b7d      	ldr	r3, [pc, #500]	; (8001980 <UpdateKeyPadTxBuffers+0x6e0>)
 800178a:	f893 370d 	ldrb.w	r3, [r3, #1805]	; 0x70d
 800178e:	2b00      	cmp	r3, #0
 8001790:	d104      	bne.n	800179c <UpdateKeyPadTxBuffers+0x4fc>
 8001792:	4b7b      	ldr	r3, [pc, #492]	; (8001980 <UpdateKeyPadTxBuffers+0x6e0>)
 8001794:	f893 370e 	ldrb.w	r3, [r3, #1806]	; 0x70e
 8001798:	2b00      	cmp	r3, #0
 800179a:	d001      	beq.n	80017a0 <UpdateKeyPadTxBuffers+0x500>
                            		KeyboardStatus = KeyboardDataAvailable;
 800179c:	2302      	movs	r3, #2
 800179e:	733b      	strb	r3, [r7, #12]
                            	}

                            	if(KeyPad.Joystick.RightFunction.MouseClick != MOUSE_CLICK_NONE){
 80017a0:	4b77      	ldr	r3, [pc, #476]	; (8001980 <UpdateKeyPadTxBuffers+0x6e0>)
 80017a2:	f893 370f 	ldrb.w	r3, [r3, #1807]	; 0x70f
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	f000 818e 	beq.w	8001ac8 <UpdateKeyPadTxBuffers+0x828>
                            		MouseStatus = MouseDataAvailable;
 80017ac:	2301      	movs	r3, #1
 80017ae:	72fb      	strb	r3, [r7, #11]
                            	}
                            }
					break;
 80017b0:	e18a      	b.n	8001ac8 <UpdateKeyPadTxBuffers+0x828>
			case(Joystick_DownRight):
                            if(KeyPad.Joystick.DownRightFunction.KeyScanCode != KEY_NONE){
 80017b2:	4b73      	ldr	r3, [pc, #460]	; (8001980 <UpdateKeyPadTxBuffers+0x6e0>)
 80017b4:	f893 3729 	ldrb.w	r3, [r3, #1833]	; 0x729
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d00b      	beq.n	80017d4 <UpdateKeyPadTxBuffers+0x534>
                                KeyPad.KeyboardUSBBuffer.keycodes[PressedKeys] = KeyPad.Joystick.DownRightFunction.KeyScanCode;
 80017bc:	7bfb      	ldrb	r3, [r7, #15]
 80017be:	4a70      	ldr	r2, [pc, #448]	; (8001980 <UpdateKeyPadTxBuffers+0x6e0>)
 80017c0:	f892 1729 	ldrb.w	r1, [r2, #1833]	; 0x729
 80017c4:	4a6e      	ldr	r2, [pc, #440]	; (8001980 <UpdateKeyPadTxBuffers+0x6e0>)
 80017c6:	4413      	add	r3, r2
 80017c8:	460a      	mov	r2, r1
 80017ca:	f883 2966 	strb.w	r2, [r3, #2406]	; 0x966
                                PressedKeys++;
 80017ce:	7bfb      	ldrb	r3, [r7, #15]
 80017d0:	3301      	adds	r3, #1
 80017d2:	73fb      	strb	r3, [r7, #15]
                            }

                            if(KeyPad.Joystick.DownRightFunction.ModifierKey != KEY_MOD_NOMOD){
 80017d4:	4b6a      	ldr	r3, [pc, #424]	; (8001980 <UpdateKeyPadTxBuffers+0x6e0>)
 80017d6:	f893 372a 	ldrb.w	r3, [r3, #1834]	; 0x72a
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d005      	beq.n	80017ea <UpdateKeyPadTxBuffers+0x54a>
                            	KeyBoardModKeys |= KeyPad.Joystick.DownRightFunction.ModifierKey;
 80017de:	4b68      	ldr	r3, [pc, #416]	; (8001980 <UpdateKeyPadTxBuffers+0x6e0>)
 80017e0:	f893 272a 	ldrb.w	r2, [r3, #1834]	; 0x72a
 80017e4:	7b7b      	ldrb	r3, [r7, #13]
 80017e6:	4313      	orrs	r3, r2
 80017e8:	737b      	strb	r3, [r7, #13]
                            }

                            if(KeyPad.Joystick.DownRightFunction.MouseClick != MOUSE_CLICK_NONE){
 80017ea:	4b65      	ldr	r3, [pc, #404]	; (8001980 <UpdateKeyPadTxBuffers+0x6e0>)
 80017ec:	f893 372b 	ldrb.w	r3, [r3, #1835]	; 0x72b
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d005      	beq.n	8001800 <UpdateKeyPadTxBuffers+0x560>
                            	MouseButtons |= KeyPad.Joystick.DownRightFunction.MouseClick;
 80017f4:	4b62      	ldr	r3, [pc, #392]	; (8001980 <UpdateKeyPadTxBuffers+0x6e0>)
 80017f6:	f893 272b 	ldrb.w	r2, [r3, #1835]	; 0x72b
 80017fa:	7bbb      	ldrb	r3, [r7, #14]
 80017fc:	4313      	orrs	r3, r2
 80017fe:	73bb      	strb	r3, [r7, #14]
                            }

                            if(KeyPad.Joystick.DownRightFunction.MouseWheel != MOUSE_WHEEL_NO_MOVE){
 8001800:	4b5f      	ldr	r3, [pc, #380]	; (8001980 <UpdateKeyPadTxBuffers+0x6e0>)
 8001802:	f993 372c 	ldrsb.w	r3, [r3, #1836]	; 0x72c
 8001806:	2b00      	cmp	r3, #0
 8001808:	d007      	beq.n	800181a <UpdateKeyPadTxBuffers+0x57a>
                                WheelMovement += KeyPad.Joystick.DownRightFunction.MouseWheel;
 800180a:	4b5d      	ldr	r3, [pc, #372]	; (8001980 <UpdateKeyPadTxBuffers+0x6e0>)
 800180c:	f993 372c 	ldrsb.w	r3, [r3, #1836]	; 0x72c
 8001810:	b2da      	uxtb	r2, r3
 8001812:	7abb      	ldrb	r3, [r7, #10]
 8001814:	4413      	add	r3, r2
 8001816:	b2db      	uxtb	r3, r3
 8001818:	72bb      	strb	r3, [r7, #10]
                            }


                            if(JoystickStatus == JoystickChanged){
 800181a:	79bb      	ldrb	r3, [r7, #6]
 800181c:	2b00      	cmp	r3, #0
 800181e:	f040 8155 	bne.w	8001acc <UpdateKeyPadTxBuffers+0x82c>
                            	if(KeyPad.Joystick.DownRightFunction.KeyScanCode != KEY_NONE || KeyPad.Joystick.DownRightFunction.ModifierKey != KEY_MOD_NOMOD){
 8001822:	4b57      	ldr	r3, [pc, #348]	; (8001980 <UpdateKeyPadTxBuffers+0x6e0>)
 8001824:	f893 3729 	ldrb.w	r3, [r3, #1833]	; 0x729
 8001828:	2b00      	cmp	r3, #0
 800182a:	d104      	bne.n	8001836 <UpdateKeyPadTxBuffers+0x596>
 800182c:	4b54      	ldr	r3, [pc, #336]	; (8001980 <UpdateKeyPadTxBuffers+0x6e0>)
 800182e:	f893 372a 	ldrb.w	r3, [r3, #1834]	; 0x72a
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <UpdateKeyPadTxBuffers+0x59a>
                            		KeyboardStatus = KeyboardDataAvailable;
 8001836:	2302      	movs	r3, #2
 8001838:	733b      	strb	r3, [r7, #12]
                            	}

                            	if(KeyPad.Joystick.DownRightFunction.MouseClick != MOUSE_CLICK_NONE){
 800183a:	4b51      	ldr	r3, [pc, #324]	; (8001980 <UpdateKeyPadTxBuffers+0x6e0>)
 800183c:	f893 372b 	ldrb.w	r3, [r3, #1835]	; 0x72b
 8001840:	2b00      	cmp	r3, #0
 8001842:	f000 8143 	beq.w	8001acc <UpdateKeyPadTxBuffers+0x82c>
                            		MouseStatus = MouseDataAvailable;
 8001846:	2301      	movs	r3, #1
 8001848:	72fb      	strb	r3, [r7, #11]
                            	}
                            }
					break;
 800184a:	e13f      	b.n	8001acc <UpdateKeyPadTxBuffers+0x82c>
			case(Joystick_Down):
                            if(KeyPad.Joystick.DownFunction.KeyScanCode != KEY_NONE){
 800184c:	4b4c      	ldr	r3, [pc, #304]	; (8001980 <UpdateKeyPadTxBuffers+0x6e0>)
 800184e:	f893 3725 	ldrb.w	r3, [r3, #1829]	; 0x725
 8001852:	2b00      	cmp	r3, #0
 8001854:	d00b      	beq.n	800186e <UpdateKeyPadTxBuffers+0x5ce>
                                KeyPad.KeyboardUSBBuffer.keycodes[PressedKeys] = KeyPad.Joystick.DownFunction.KeyScanCode;
 8001856:	7bfb      	ldrb	r3, [r7, #15]
 8001858:	4a49      	ldr	r2, [pc, #292]	; (8001980 <UpdateKeyPadTxBuffers+0x6e0>)
 800185a:	f892 1725 	ldrb.w	r1, [r2, #1829]	; 0x725
 800185e:	4a48      	ldr	r2, [pc, #288]	; (8001980 <UpdateKeyPadTxBuffers+0x6e0>)
 8001860:	4413      	add	r3, r2
 8001862:	460a      	mov	r2, r1
 8001864:	f883 2966 	strb.w	r2, [r3, #2406]	; 0x966
                                PressedKeys++;
 8001868:	7bfb      	ldrb	r3, [r7, #15]
 800186a:	3301      	adds	r3, #1
 800186c:	73fb      	strb	r3, [r7, #15]
                            }

                            if(KeyPad.Joystick.DownFunction.ModifierKey != KEY_MOD_NOMOD){
 800186e:	4b44      	ldr	r3, [pc, #272]	; (8001980 <UpdateKeyPadTxBuffers+0x6e0>)
 8001870:	f893 3726 	ldrb.w	r3, [r3, #1830]	; 0x726
 8001874:	2b00      	cmp	r3, #0
 8001876:	d005      	beq.n	8001884 <UpdateKeyPadTxBuffers+0x5e4>
                            	KeyBoardModKeys |= KeyPad.Joystick.DownFunction.ModifierKey;
 8001878:	4b41      	ldr	r3, [pc, #260]	; (8001980 <UpdateKeyPadTxBuffers+0x6e0>)
 800187a:	f893 2726 	ldrb.w	r2, [r3, #1830]	; 0x726
 800187e:	7b7b      	ldrb	r3, [r7, #13]
 8001880:	4313      	orrs	r3, r2
 8001882:	737b      	strb	r3, [r7, #13]
                            }

                            if(KeyPad.Joystick.DownFunction.MouseClick != MOUSE_CLICK_NONE){
 8001884:	4b3e      	ldr	r3, [pc, #248]	; (8001980 <UpdateKeyPadTxBuffers+0x6e0>)
 8001886:	f893 3727 	ldrb.w	r3, [r3, #1831]	; 0x727
 800188a:	2b00      	cmp	r3, #0
 800188c:	d005      	beq.n	800189a <UpdateKeyPadTxBuffers+0x5fa>
                            	MouseButtons |= KeyPad.Joystick.DownFunction.MouseClick;
 800188e:	4b3c      	ldr	r3, [pc, #240]	; (8001980 <UpdateKeyPadTxBuffers+0x6e0>)
 8001890:	f893 2727 	ldrb.w	r2, [r3, #1831]	; 0x727
 8001894:	7bbb      	ldrb	r3, [r7, #14]
 8001896:	4313      	orrs	r3, r2
 8001898:	73bb      	strb	r3, [r7, #14]
                            }

                            if(KeyPad.Joystick.DownFunction.MouseWheel != MOUSE_WHEEL_NO_MOVE){
 800189a:	4b39      	ldr	r3, [pc, #228]	; (8001980 <UpdateKeyPadTxBuffers+0x6e0>)
 800189c:	f993 3728 	ldrsb.w	r3, [r3, #1832]	; 0x728
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d007      	beq.n	80018b4 <UpdateKeyPadTxBuffers+0x614>
                                WheelMovement += KeyPad.Joystick.DownFunction.MouseWheel;
 80018a4:	4b36      	ldr	r3, [pc, #216]	; (8001980 <UpdateKeyPadTxBuffers+0x6e0>)
 80018a6:	f993 3728 	ldrsb.w	r3, [r3, #1832]	; 0x728
 80018aa:	b2da      	uxtb	r2, r3
 80018ac:	7abb      	ldrb	r3, [r7, #10]
 80018ae:	4413      	add	r3, r2
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	72bb      	strb	r3, [r7, #10]
                            }


                            if(JoystickStatus == JoystickChanged){
 80018b4:	79bb      	ldrb	r3, [r7, #6]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	f040 810a 	bne.w	8001ad0 <UpdateKeyPadTxBuffers+0x830>
                            	if(KeyPad.Joystick.DownFunction.KeyScanCode != KEY_NONE || KeyPad.Joystick.DownFunction.ModifierKey != KEY_MOD_NOMOD){
 80018bc:	4b30      	ldr	r3, [pc, #192]	; (8001980 <UpdateKeyPadTxBuffers+0x6e0>)
 80018be:	f893 3725 	ldrb.w	r3, [r3, #1829]	; 0x725
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d104      	bne.n	80018d0 <UpdateKeyPadTxBuffers+0x630>
 80018c6:	4b2e      	ldr	r3, [pc, #184]	; (8001980 <UpdateKeyPadTxBuffers+0x6e0>)
 80018c8:	f893 3726 	ldrb.w	r3, [r3, #1830]	; 0x726
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d001      	beq.n	80018d4 <UpdateKeyPadTxBuffers+0x634>
                            		KeyboardStatus = KeyboardDataAvailable;
 80018d0:	2302      	movs	r3, #2
 80018d2:	733b      	strb	r3, [r7, #12]
                            	}

                            	if(KeyPad.Joystick.DownFunction.MouseClick != MOUSE_CLICK_NONE){
 80018d4:	4b2a      	ldr	r3, [pc, #168]	; (8001980 <UpdateKeyPadTxBuffers+0x6e0>)
 80018d6:	f893 3727 	ldrb.w	r3, [r3, #1831]	; 0x727
 80018da:	2b00      	cmp	r3, #0
 80018dc:	f000 80f8 	beq.w	8001ad0 <UpdateKeyPadTxBuffers+0x830>
                            		MouseStatus = MouseDataAvailable;
 80018e0:	2301      	movs	r3, #1
 80018e2:	72fb      	strb	r3, [r7, #11]
                            	}
                            }
					break;
 80018e4:	e0f4      	b.n	8001ad0 <UpdateKeyPadTxBuffers+0x830>
			case(Joystick_DownLeft):
                            if(KeyPad.Joystick.DownLeftFunction.KeyScanCode != KEY_NONE){
 80018e6:	4b26      	ldr	r3, [pc, #152]	; (8001980 <UpdateKeyPadTxBuffers+0x6e0>)
 80018e8:	f893 3721 	ldrb.w	r3, [r3, #1825]	; 0x721
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d00b      	beq.n	8001908 <UpdateKeyPadTxBuffers+0x668>
                                KeyPad.KeyboardUSBBuffer.keycodes[PressedKeys] = KeyPad.Joystick.DownLeftFunction.KeyScanCode;
 80018f0:	7bfb      	ldrb	r3, [r7, #15]
 80018f2:	4a23      	ldr	r2, [pc, #140]	; (8001980 <UpdateKeyPadTxBuffers+0x6e0>)
 80018f4:	f892 1721 	ldrb.w	r1, [r2, #1825]	; 0x721
 80018f8:	4a21      	ldr	r2, [pc, #132]	; (8001980 <UpdateKeyPadTxBuffers+0x6e0>)
 80018fa:	4413      	add	r3, r2
 80018fc:	460a      	mov	r2, r1
 80018fe:	f883 2966 	strb.w	r2, [r3, #2406]	; 0x966
                                PressedKeys++;
 8001902:	7bfb      	ldrb	r3, [r7, #15]
 8001904:	3301      	adds	r3, #1
 8001906:	73fb      	strb	r3, [r7, #15]
                            }

                            if(KeyPad.Joystick.DownLeftFunction.ModifierKey != KEY_MOD_NOMOD){
 8001908:	4b1d      	ldr	r3, [pc, #116]	; (8001980 <UpdateKeyPadTxBuffers+0x6e0>)
 800190a:	f893 3722 	ldrb.w	r3, [r3, #1826]	; 0x722
 800190e:	2b00      	cmp	r3, #0
 8001910:	d005      	beq.n	800191e <UpdateKeyPadTxBuffers+0x67e>
                            	KeyBoardModKeys |= KeyPad.Joystick.DownLeftFunction.ModifierKey;
 8001912:	4b1b      	ldr	r3, [pc, #108]	; (8001980 <UpdateKeyPadTxBuffers+0x6e0>)
 8001914:	f893 2722 	ldrb.w	r2, [r3, #1826]	; 0x722
 8001918:	7b7b      	ldrb	r3, [r7, #13]
 800191a:	4313      	orrs	r3, r2
 800191c:	737b      	strb	r3, [r7, #13]
                            }

                            if(KeyPad.Joystick.DownLeftFunction.MouseClick != MOUSE_CLICK_NONE){
 800191e:	4b18      	ldr	r3, [pc, #96]	; (8001980 <UpdateKeyPadTxBuffers+0x6e0>)
 8001920:	f893 3723 	ldrb.w	r3, [r3, #1827]	; 0x723
 8001924:	2b00      	cmp	r3, #0
 8001926:	d005      	beq.n	8001934 <UpdateKeyPadTxBuffers+0x694>
                            	MouseButtons |= KeyPad.Joystick.DownLeftFunction.MouseClick;
 8001928:	4b15      	ldr	r3, [pc, #84]	; (8001980 <UpdateKeyPadTxBuffers+0x6e0>)
 800192a:	f893 2723 	ldrb.w	r2, [r3, #1827]	; 0x723
 800192e:	7bbb      	ldrb	r3, [r7, #14]
 8001930:	4313      	orrs	r3, r2
 8001932:	73bb      	strb	r3, [r7, #14]
                            }

                            if(KeyPad.Joystick.DownLeftFunction.MouseWheel != MOUSE_WHEEL_NO_MOVE){
 8001934:	4b12      	ldr	r3, [pc, #72]	; (8001980 <UpdateKeyPadTxBuffers+0x6e0>)
 8001936:	f993 3724 	ldrsb.w	r3, [r3, #1828]	; 0x724
 800193a:	2b00      	cmp	r3, #0
 800193c:	d007      	beq.n	800194e <UpdateKeyPadTxBuffers+0x6ae>
                                WheelMovement += KeyPad.Joystick.DownLeftFunction.MouseWheel;
 800193e:	4b10      	ldr	r3, [pc, #64]	; (8001980 <UpdateKeyPadTxBuffers+0x6e0>)
 8001940:	f993 3724 	ldrsb.w	r3, [r3, #1828]	; 0x724
 8001944:	b2da      	uxtb	r2, r3
 8001946:	7abb      	ldrb	r3, [r7, #10]
 8001948:	4413      	add	r3, r2
 800194a:	b2db      	uxtb	r3, r3
 800194c:	72bb      	strb	r3, [r7, #10]
                            }


                            if(JoystickStatus == JoystickChanged){
 800194e:	79bb      	ldrb	r3, [r7, #6]
 8001950:	2b00      	cmp	r3, #0
 8001952:	f040 80bf 	bne.w	8001ad4 <UpdateKeyPadTxBuffers+0x834>
                            	if(KeyPad.Joystick.DownLeftFunction.KeyScanCode != KEY_NONE || KeyPad.Joystick.DownLeftFunction.ModifierKey != KEY_MOD_NOMOD){
 8001956:	4b0a      	ldr	r3, [pc, #40]	; (8001980 <UpdateKeyPadTxBuffers+0x6e0>)
 8001958:	f893 3721 	ldrb.w	r3, [r3, #1825]	; 0x721
 800195c:	2b00      	cmp	r3, #0
 800195e:	d104      	bne.n	800196a <UpdateKeyPadTxBuffers+0x6ca>
 8001960:	4b07      	ldr	r3, [pc, #28]	; (8001980 <UpdateKeyPadTxBuffers+0x6e0>)
 8001962:	f893 3722 	ldrb.w	r3, [r3, #1826]	; 0x722
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <UpdateKeyPadTxBuffers+0x6ce>
                            		KeyboardStatus = KeyboardDataAvailable;
 800196a:	2302      	movs	r3, #2
 800196c:	733b      	strb	r3, [r7, #12]
                            	}

                            	if(KeyPad.Joystick.DownLeftFunction.MouseClick != MOUSE_CLICK_NONE){
 800196e:	4b04      	ldr	r3, [pc, #16]	; (8001980 <UpdateKeyPadTxBuffers+0x6e0>)
 8001970:	f893 3723 	ldrb.w	r3, [r3, #1827]	; 0x723
 8001974:	2b00      	cmp	r3, #0
 8001976:	f000 80ad 	beq.w	8001ad4 <UpdateKeyPadTxBuffers+0x834>
                            		MouseStatus = MouseDataAvailable;
 800197a:	2301      	movs	r3, #1
 800197c:	72fb      	strb	r3, [r7, #11]
                            	}
                            }
					break;
 800197e:	e0a9      	b.n	8001ad4 <UpdateKeyPadTxBuffers+0x834>
 8001980:	200003a8 	.word	0x200003a8
			case(Joystick_Left):
                            if(KeyPad.Joystick.LeftFunction.KeyScanCode != KEY_NONE){
 8001984:	4b79      	ldr	r3, [pc, #484]	; (8001b6c <UpdateKeyPadTxBuffers+0x8cc>)
 8001986:	f893 371d 	ldrb.w	r3, [r3, #1821]	; 0x71d
 800198a:	2b00      	cmp	r3, #0
 800198c:	d00b      	beq.n	80019a6 <UpdateKeyPadTxBuffers+0x706>
                                KeyPad.KeyboardUSBBuffer.keycodes[PressedKeys] = KeyPad.Joystick.LeftFunction.KeyScanCode;
 800198e:	7bfb      	ldrb	r3, [r7, #15]
 8001990:	4a76      	ldr	r2, [pc, #472]	; (8001b6c <UpdateKeyPadTxBuffers+0x8cc>)
 8001992:	f892 171d 	ldrb.w	r1, [r2, #1821]	; 0x71d
 8001996:	4a75      	ldr	r2, [pc, #468]	; (8001b6c <UpdateKeyPadTxBuffers+0x8cc>)
 8001998:	4413      	add	r3, r2
 800199a:	460a      	mov	r2, r1
 800199c:	f883 2966 	strb.w	r2, [r3, #2406]	; 0x966
                                PressedKeys++;
 80019a0:	7bfb      	ldrb	r3, [r7, #15]
 80019a2:	3301      	adds	r3, #1
 80019a4:	73fb      	strb	r3, [r7, #15]
                            }

                            if(KeyPad.Joystick.LeftFunction.ModifierKey != KEY_MOD_NOMOD){
 80019a6:	4b71      	ldr	r3, [pc, #452]	; (8001b6c <UpdateKeyPadTxBuffers+0x8cc>)
 80019a8:	f893 371e 	ldrb.w	r3, [r3, #1822]	; 0x71e
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d005      	beq.n	80019bc <UpdateKeyPadTxBuffers+0x71c>
                            	KeyBoardModKeys |= KeyPad.Joystick.LeftFunction.ModifierKey;
 80019b0:	4b6e      	ldr	r3, [pc, #440]	; (8001b6c <UpdateKeyPadTxBuffers+0x8cc>)
 80019b2:	f893 271e 	ldrb.w	r2, [r3, #1822]	; 0x71e
 80019b6:	7b7b      	ldrb	r3, [r7, #13]
 80019b8:	4313      	orrs	r3, r2
 80019ba:	737b      	strb	r3, [r7, #13]
                            }

                            if(KeyPad.Joystick.LeftFunction.MouseClick != MOUSE_CLICK_NONE){
 80019bc:	4b6b      	ldr	r3, [pc, #428]	; (8001b6c <UpdateKeyPadTxBuffers+0x8cc>)
 80019be:	f893 371f 	ldrb.w	r3, [r3, #1823]	; 0x71f
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d005      	beq.n	80019d2 <UpdateKeyPadTxBuffers+0x732>
                            	MouseButtons |= KeyPad.Joystick.LeftFunction.MouseClick;
 80019c6:	4b69      	ldr	r3, [pc, #420]	; (8001b6c <UpdateKeyPadTxBuffers+0x8cc>)
 80019c8:	f893 271f 	ldrb.w	r2, [r3, #1823]	; 0x71f
 80019cc:	7bbb      	ldrb	r3, [r7, #14]
 80019ce:	4313      	orrs	r3, r2
 80019d0:	73bb      	strb	r3, [r7, #14]
                            }

                            if(KeyPad.Joystick.LeftFunction.MouseWheel != MOUSE_WHEEL_NO_MOVE){
 80019d2:	4b66      	ldr	r3, [pc, #408]	; (8001b6c <UpdateKeyPadTxBuffers+0x8cc>)
 80019d4:	f993 3720 	ldrsb.w	r3, [r3, #1824]	; 0x720
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d007      	beq.n	80019ec <UpdateKeyPadTxBuffers+0x74c>
                                WheelMovement += KeyPad.Joystick.LeftFunction.MouseWheel;
 80019dc:	4b63      	ldr	r3, [pc, #396]	; (8001b6c <UpdateKeyPadTxBuffers+0x8cc>)
 80019de:	f993 3720 	ldrsb.w	r3, [r3, #1824]	; 0x720
 80019e2:	b2da      	uxtb	r2, r3
 80019e4:	7abb      	ldrb	r3, [r7, #10]
 80019e6:	4413      	add	r3, r2
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	72bb      	strb	r3, [r7, #10]
                            }


                            if(JoystickStatus == JoystickChanged){
 80019ec:	79bb      	ldrb	r3, [r7, #6]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d172      	bne.n	8001ad8 <UpdateKeyPadTxBuffers+0x838>
                            	if(KeyPad.Joystick.LeftFunction.KeyScanCode != KEY_NONE || KeyPad.Joystick.LeftFunction.ModifierKey != KEY_MOD_NOMOD){
 80019f2:	4b5e      	ldr	r3, [pc, #376]	; (8001b6c <UpdateKeyPadTxBuffers+0x8cc>)
 80019f4:	f893 371d 	ldrb.w	r3, [r3, #1821]	; 0x71d
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d104      	bne.n	8001a06 <UpdateKeyPadTxBuffers+0x766>
 80019fc:	4b5b      	ldr	r3, [pc, #364]	; (8001b6c <UpdateKeyPadTxBuffers+0x8cc>)
 80019fe:	f893 371e 	ldrb.w	r3, [r3, #1822]	; 0x71e
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d001      	beq.n	8001a0a <UpdateKeyPadTxBuffers+0x76a>
                            		KeyboardStatus = KeyboardDataAvailable;
 8001a06:	2302      	movs	r3, #2
 8001a08:	733b      	strb	r3, [r7, #12]
                            	}

                            	if(KeyPad.Joystick.LeftFunction.MouseClick != MOUSE_CLICK_NONE){
 8001a0a:	4b58      	ldr	r3, [pc, #352]	; (8001b6c <UpdateKeyPadTxBuffers+0x8cc>)
 8001a0c:	f893 371f 	ldrb.w	r3, [r3, #1823]	; 0x71f
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d061      	beq.n	8001ad8 <UpdateKeyPadTxBuffers+0x838>
                            		MouseStatus = MouseDataAvailable;
 8001a14:	2301      	movs	r3, #1
 8001a16:	72fb      	strb	r3, [r7, #11]
                            	}
                            }
					break;
 8001a18:	e05e      	b.n	8001ad8 <UpdateKeyPadTxBuffers+0x838>
			case(Joystick_UpLeft):
                            if(KeyPad.Joystick.UpLeftFunction.KeyScanCode != KEY_NONE){
 8001a1a:	4b54      	ldr	r3, [pc, #336]	; (8001b6c <UpdateKeyPadTxBuffers+0x8cc>)
 8001a1c:	f893 3719 	ldrb.w	r3, [r3, #1817]	; 0x719
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d00b      	beq.n	8001a3c <UpdateKeyPadTxBuffers+0x79c>
                                KeyPad.KeyboardUSBBuffer.keycodes[PressedKeys] = KeyPad.Joystick.UpLeftFunction.KeyScanCode;
 8001a24:	7bfb      	ldrb	r3, [r7, #15]
 8001a26:	4a51      	ldr	r2, [pc, #324]	; (8001b6c <UpdateKeyPadTxBuffers+0x8cc>)
 8001a28:	f892 1719 	ldrb.w	r1, [r2, #1817]	; 0x719
 8001a2c:	4a4f      	ldr	r2, [pc, #316]	; (8001b6c <UpdateKeyPadTxBuffers+0x8cc>)
 8001a2e:	4413      	add	r3, r2
 8001a30:	460a      	mov	r2, r1
 8001a32:	f883 2966 	strb.w	r2, [r3, #2406]	; 0x966
                                PressedKeys++;
 8001a36:	7bfb      	ldrb	r3, [r7, #15]
 8001a38:	3301      	adds	r3, #1
 8001a3a:	73fb      	strb	r3, [r7, #15]
                            }

                            if(KeyPad.Joystick.UpLeftFunction.ModifierKey != KEY_MOD_NOMOD){
 8001a3c:	4b4b      	ldr	r3, [pc, #300]	; (8001b6c <UpdateKeyPadTxBuffers+0x8cc>)
 8001a3e:	f893 371a 	ldrb.w	r3, [r3, #1818]	; 0x71a
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d005      	beq.n	8001a52 <UpdateKeyPadTxBuffers+0x7b2>
                            	KeyBoardModKeys |= KeyPad.Joystick.UpLeftFunction.ModifierKey;
 8001a46:	4b49      	ldr	r3, [pc, #292]	; (8001b6c <UpdateKeyPadTxBuffers+0x8cc>)
 8001a48:	f893 271a 	ldrb.w	r2, [r3, #1818]	; 0x71a
 8001a4c:	7b7b      	ldrb	r3, [r7, #13]
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	737b      	strb	r3, [r7, #13]
                            }

                            if(KeyPad.Joystick.UpLeftFunction.MouseClick != MOUSE_CLICK_NONE){
 8001a52:	4b46      	ldr	r3, [pc, #280]	; (8001b6c <UpdateKeyPadTxBuffers+0x8cc>)
 8001a54:	f893 371b 	ldrb.w	r3, [r3, #1819]	; 0x71b
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d005      	beq.n	8001a68 <UpdateKeyPadTxBuffers+0x7c8>
                            	MouseButtons |= KeyPad.Joystick.UpLeftFunction.MouseClick;
 8001a5c:	4b43      	ldr	r3, [pc, #268]	; (8001b6c <UpdateKeyPadTxBuffers+0x8cc>)
 8001a5e:	f893 271b 	ldrb.w	r2, [r3, #1819]	; 0x71b
 8001a62:	7bbb      	ldrb	r3, [r7, #14]
 8001a64:	4313      	orrs	r3, r2
 8001a66:	73bb      	strb	r3, [r7, #14]
                            }

                            if(KeyPad.Joystick.UpLeftFunction.MouseWheel != MOUSE_WHEEL_NO_MOVE){
 8001a68:	4b40      	ldr	r3, [pc, #256]	; (8001b6c <UpdateKeyPadTxBuffers+0x8cc>)
 8001a6a:	f993 371c 	ldrsb.w	r3, [r3, #1820]	; 0x71c
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d007      	beq.n	8001a82 <UpdateKeyPadTxBuffers+0x7e2>
                                WheelMovement += KeyPad.Joystick.UpLeftFunction.MouseWheel;
 8001a72:	4b3e      	ldr	r3, [pc, #248]	; (8001b6c <UpdateKeyPadTxBuffers+0x8cc>)
 8001a74:	f993 371c 	ldrsb.w	r3, [r3, #1820]	; 0x71c
 8001a78:	b2da      	uxtb	r2, r3
 8001a7a:	7abb      	ldrb	r3, [r7, #10]
 8001a7c:	4413      	add	r3, r2
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	72bb      	strb	r3, [r7, #10]
                            }


                            if(JoystickStatus == JoystickChanged){
 8001a82:	79bb      	ldrb	r3, [r7, #6]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d129      	bne.n	8001adc <UpdateKeyPadTxBuffers+0x83c>
                            	if(KeyPad.Joystick.UpLeftFunction.KeyScanCode != KEY_NONE || KeyPad.Joystick.UpLeftFunction.ModifierKey != KEY_MOD_NOMOD){
 8001a88:	4b38      	ldr	r3, [pc, #224]	; (8001b6c <UpdateKeyPadTxBuffers+0x8cc>)
 8001a8a:	f893 3719 	ldrb.w	r3, [r3, #1817]	; 0x719
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d104      	bne.n	8001a9c <UpdateKeyPadTxBuffers+0x7fc>
 8001a92:	4b36      	ldr	r3, [pc, #216]	; (8001b6c <UpdateKeyPadTxBuffers+0x8cc>)
 8001a94:	f893 371a 	ldrb.w	r3, [r3, #1818]	; 0x71a
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d001      	beq.n	8001aa0 <UpdateKeyPadTxBuffers+0x800>
                            		KeyboardStatus = KeyboardDataAvailable;
 8001a9c:	2302      	movs	r3, #2
 8001a9e:	733b      	strb	r3, [r7, #12]
                            	}

                            	if(KeyPad.Joystick.UpLeftFunction.MouseClick != MOUSE_CLICK_NONE){
 8001aa0:	4b32      	ldr	r3, [pc, #200]	; (8001b6c <UpdateKeyPadTxBuffers+0x8cc>)
 8001aa2:	f893 371b 	ldrb.w	r3, [r3, #1819]	; 0x71b
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d018      	beq.n	8001adc <UpdateKeyPadTxBuffers+0x83c>
                            		MouseStatus = MouseDataAvailable;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	72fb      	strb	r3, [r7, #11]
                            	}
                            }
                    break;
 8001aae:	e015      	b.n	8001adc <UpdateKeyPadTxBuffers+0x83c>
			default:
                if(JoystickStatus == JoystickChanged){
 8001ab0:	79bb      	ldrb	r3, [r7, #6]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d114      	bne.n	8001ae0 <UpdateKeyPadTxBuffers+0x840>
                	KeyboardStatus = KeyboardDataAvailable;
 8001ab6:	2302      	movs	r3, #2
 8001ab8:	733b      	strb	r3, [r7, #12]
                	MouseStatus = MouseDataAvailable;
 8001aba:	2301      	movs	r3, #1
 8001abc:	72fb      	strb	r3, [r7, #11]
                }
				break;
 8001abe:	e00f      	b.n	8001ae0 <UpdateKeyPadTxBuffers+0x840>
					break;
 8001ac0:	bf00      	nop
 8001ac2:	e00e      	b.n	8001ae2 <UpdateKeyPadTxBuffers+0x842>
					break;
 8001ac4:	bf00      	nop
 8001ac6:	e00c      	b.n	8001ae2 <UpdateKeyPadTxBuffers+0x842>
					break;
 8001ac8:	bf00      	nop
 8001aca:	e00a      	b.n	8001ae2 <UpdateKeyPadTxBuffers+0x842>
					break;
 8001acc:	bf00      	nop
 8001ace:	e008      	b.n	8001ae2 <UpdateKeyPadTxBuffers+0x842>
					break;
 8001ad0:	bf00      	nop
 8001ad2:	e006      	b.n	8001ae2 <UpdateKeyPadTxBuffers+0x842>
					break;
 8001ad4:	bf00      	nop
 8001ad6:	e004      	b.n	8001ae2 <UpdateKeyPadTxBuffers+0x842>
					break;
 8001ad8:	bf00      	nop
 8001ada:	e002      	b.n	8001ae2 <UpdateKeyPadTxBuffers+0x842>
                    break;
 8001adc:	bf00      	nop
 8001ade:	e000      	b.n	8001ae2 <UpdateKeyPadTxBuffers+0x842>
				break;
 8001ae0:	bf00      	nop
	 }



    //Zero all unused buffer space
    for(uint8_t i = PressedKeys; i < SIMULTANEOUS_BUTTONS; i++){
 8001ae2:	7bfb      	ldrb	r3, [r7, #15]
 8001ae4:	71fb      	strb	r3, [r7, #7]
 8001ae6:	e008      	b.n	8001afa <UpdateKeyPadTxBuffers+0x85a>
         KeyPad.KeyboardUSBBuffer.keycodes[i] = KEY_NONE;
 8001ae8:	79fb      	ldrb	r3, [r7, #7]
 8001aea:	4a20      	ldr	r2, [pc, #128]	; (8001b6c <UpdateKeyPadTxBuffers+0x8cc>)
 8001aec:	4413      	add	r3, r2
 8001aee:	2200      	movs	r2, #0
 8001af0:	f883 2966 	strb.w	r2, [r3, #2406]	; 0x966
    for(uint8_t i = PressedKeys; i < SIMULTANEOUS_BUTTONS; i++){
 8001af4:	79fb      	ldrb	r3, [r7, #7]
 8001af6:	3301      	adds	r3, #1
 8001af8:	71fb      	strb	r3, [r7, #7]
 8001afa:	79fb      	ldrb	r3, [r7, #7]
 8001afc:	2b24      	cmp	r3, #36	; 0x24
 8001afe:	d9f3      	bls.n	8001ae8 <UpdateKeyPadTxBuffers+0x848>
    }

    if(KeyPad.MouseUSBBuffer.wheel_movement != WheelMovement || WheelMovement != 0){
 8001b00:	4b1a      	ldr	r3, [pc, #104]	; (8001b6c <UpdateKeyPadTxBuffers+0x8cc>)
 8001b02:	f993 398e 	ldrsb.w	r3, [r3, #2446]	; 0x98e
 8001b06:	f997 200a 	ldrsb.w	r2, [r7, #10]
 8001b0a:	429a      	cmp	r2, r3
 8001b0c:	d103      	bne.n	8001b16 <UpdateKeyPadTxBuffers+0x876>
 8001b0e:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d005      	beq.n	8001b22 <UpdateKeyPadTxBuffers+0x882>
    	MouseStatus = MouseDataAvailable;
 8001b16:	2301      	movs	r3, #1
 8001b18:	72fb      	strb	r3, [r7, #11]
    	KeyPad.MouseUSBBuffer.wheel_movement = WheelMovement;
 8001b1a:	4a14      	ldr	r2, [pc, #80]	; (8001b6c <UpdateKeyPadTxBuffers+0x8cc>)
 8001b1c:	7abb      	ldrb	r3, [r7, #10]
 8001b1e:	f882 398e 	strb.w	r3, [r2, #2446]	; 0x98e
    } else {

    }

    if(KeyPad.KeyboardUSBBuffer.modifiers != KeyBoardModKeys){
 8001b22:	4b12      	ldr	r3, [pc, #72]	; (8001b6c <UpdateKeyPadTxBuffers+0x8cc>)
 8001b24:	f893 3964 	ldrb.w	r3, [r3, #2404]	; 0x964
 8001b28:	7b7a      	ldrb	r2, [r7, #13]
 8001b2a:	429a      	cmp	r2, r3
 8001b2c:	d003      	beq.n	8001b36 <UpdateKeyPadTxBuffers+0x896>
        KeyPad.KeyboardUSBBuffer.modifiers = KeyBoardModKeys;
 8001b2e:	4a0f      	ldr	r2, [pc, #60]	; (8001b6c <UpdateKeyPadTxBuffers+0x8cc>)
 8001b30:	7b7b      	ldrb	r3, [r7, #13]
 8001b32:	f882 3964 	strb.w	r3, [r2, #2404]	; 0x964
    }

    if(KeyPad.MouseUSBBuffer.button_reg != MouseButtons){
 8001b36:	4b0d      	ldr	r3, [pc, #52]	; (8001b6c <UpdateKeyPadTxBuffers+0x8cc>)
 8001b38:	f893 398b 	ldrb.w	r3, [r3, #2443]	; 0x98b
 8001b3c:	7bba      	ldrb	r2, [r7, #14]
 8001b3e:	429a      	cmp	r2, r3
 8001b40:	d003      	beq.n	8001b4a <UpdateKeyPadTxBuffers+0x8aa>
        KeyPad.MouseUSBBuffer.button_reg = MouseButtons;
 8001b42:	4a0a      	ldr	r2, [pc, #40]	; (8001b6c <UpdateKeyPadTxBuffers+0x8cc>)
 8001b44:	7bbb      	ldrb	r3, [r7, #14]
 8001b46:	f882 398b 	strb.w	r3, [r2, #2443]	; 0x98b
    }

    if(KeyboardStatus == KeyboardDataAvailable){
 8001b4a:	7b3b      	ldrb	r3, [r7, #12]
 8001b4c:	2b02      	cmp	r3, #2
 8001b4e:	d102      	bne.n	8001b56 <UpdateKeyPadTxBuffers+0x8b6>
    	KeyPad.KeyboardFlag = KeyboardDataAvailable;
 8001b50:	4b06      	ldr	r3, [pc, #24]	; (8001b6c <UpdateKeyPadTxBuffers+0x8cc>)
 8001b52:	2202      	movs	r2, #2
 8001b54:	705a      	strb	r2, [r3, #1]
    }

    if(MouseStatus == MouseDataAvailable){
 8001b56:	7afb      	ldrb	r3, [r7, #11]
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d102      	bne.n	8001b62 <UpdateKeyPadTxBuffers+0x8c2>
        KeyPad.MouseFlag = MouseDataAvailable;
 8001b5c:	4b03      	ldr	r3, [pc, #12]	; (8001b6c <UpdateKeyPadTxBuffers+0x8cc>)
 8001b5e:	2201      	movs	r2, #1
 8001b60:	701a      	strb	r2, [r3, #0]
    }

}
 8001b62:	bf00      	nop
 8001b64:	3710      	adds	r7, #16
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	200003a8 	.word	0x200003a8

08001b70 <KeypadInitButtons>:

static void KeypadInitButtons(){
 8001b70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b72:	b087      	sub	sp, #28
 8001b74:	af04      	add	r7, sp, #16
	Button_Init_Struct_t Settings;
	for(uint8_t i = 0; i < NUMBER_OF_BUTTONS; i++){
 8001b76:	2300      	movs	r3, #0
 8001b78:	71fb      	strb	r3, [r7, #7]
 8001b7a:	e01f      	b.n	8001bbc <KeypadInitButtons+0x4c>
		Settings.ButtonIDNumber = i;
 8001b7c:	79fb      	ldrb	r3, [r7, #7]
 8001b7e:	703b      	strb	r3, [r7, #0]
		Settings.KeyFunction = ButtonFunctionsDefault[i];
 8001b80:	79fb      	ldrb	r3, [r7, #7]
 8001b82:	4912      	ldr	r1, [pc, #72]	; (8001bcc <KeypadInitButtons+0x5c>)
 8001b84:	1c7a      	adds	r2, r7, #1
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	440b      	add	r3, r1
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	6013      	str	r3, [r2, #0]
        ButtonInit(Settings, &KeyPad.Buttons[i], ButtonIO_Driver);
 8001b8e:	79fa      	ldrb	r2, [r7, #7]
 8001b90:	4613      	mov	r3, r2
 8001b92:	00db      	lsls	r3, r3, #3
 8001b94:	1a9b      	subs	r3, r3, r2
 8001b96:	009b      	lsls	r3, r3, #2
 8001b98:	4a0d      	ldr	r2, [pc, #52]	; (8001bd0 <KeypadInitButtons+0x60>)
 8001b9a:	4413      	add	r3, r2
 8001b9c:	1d1e      	adds	r6, r3, #4
 8001b9e:	4d0d      	ldr	r5, [pc, #52]	; (8001bd4 <KeypadInitButtons+0x64>)
 8001ba0:	466c      	mov	r4, sp
 8001ba2:	1d2b      	adds	r3, r5, #4
 8001ba4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ba6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001baa:	682b      	ldr	r3, [r5, #0]
 8001bac:	4632      	mov	r2, r6
 8001bae:	4639      	mov	r1, r7
 8001bb0:	c903      	ldmia	r1, {r0, r1}
 8001bb2:	f001 fa95 	bl	80030e0 <ButtonInit>
	for(uint8_t i = 0; i < NUMBER_OF_BUTTONS; i++){
 8001bb6:	79fb      	ldrb	r3, [r7, #7]
 8001bb8:	3301      	adds	r3, #1
 8001bba:	71fb      	strb	r3, [r7, #7]
 8001bbc:	79fb      	ldrb	r3, [r7, #7]
 8001bbe:	2b3f      	cmp	r3, #63	; 0x3f
 8001bc0:	d9dc      	bls.n	8001b7c <KeypadInitButtons+0xc>
	}
}
 8001bc2:	bf00      	nop
 8001bc4:	bf00      	nop
 8001bc6:	370c      	adds	r7, #12
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001bcc:	20000028 	.word	0x20000028
 8001bd0:	200003a8 	.word	0x200003a8
 8001bd4:	0800f2cc 	.word	0x0800f2cc

08001bd8 <KeypadInitJoystick>:

static void KeypadInitJoystick(){
 8001bd8:	b5b0      	push	{r4, r5, r7, lr}
 8001bda:	b096      	sub	sp, #88	; 0x58
 8001bdc:	af0c      	add	r7, sp, #48	; 0x30
    Joystick_Init_Struct_t Settings = {
 8001bde:	f640 53ac 	movw	r3, #3500	; 0xdac
 8001be2:	80bb      	strh	r3, [r7, #4]
 8001be4:	2301      	movs	r3, #1
 8001be6:	71bb      	strb	r3, [r7, #6]
 8001be8:	4a22      	ldr	r2, [pc, #136]	; (8001c74 <KeypadInitJoystick+0x9c>)
 8001bea:	1dfb      	adds	r3, r7, #7
 8001bec:	3208      	adds	r2, #8
 8001bee:	6812      	ldr	r2, [r2, #0]
 8001bf0:	601a      	str	r2, [r3, #0]
 8001bf2:	4a20      	ldr	r2, [pc, #128]	; (8001c74 <KeypadInitJoystick+0x9c>)
 8001bf4:	f107 030b 	add.w	r3, r7, #11
 8001bf8:	3204      	adds	r2, #4
 8001bfa:	6812      	ldr	r2, [r2, #0]
 8001bfc:	601a      	str	r2, [r3, #0]
 8001bfe:	4a1d      	ldr	r2, [pc, #116]	; (8001c74 <KeypadInitJoystick+0x9c>)
 8001c00:	f107 030f 	add.w	r3, r7, #15
 8001c04:	6812      	ldr	r2, [r2, #0]
 8001c06:	601a      	str	r2, [r3, #0]
 8001c08:	4a1a      	ldr	r2, [pc, #104]	; (8001c74 <KeypadInitJoystick+0x9c>)
 8001c0a:	f107 0313 	add.w	r3, r7, #19
 8001c0e:	321c      	adds	r2, #28
 8001c10:	6812      	ldr	r2, [r2, #0]
 8001c12:	601a      	str	r2, [r3, #0]
 8001c14:	4a17      	ldr	r2, [pc, #92]	; (8001c74 <KeypadInitJoystick+0x9c>)
 8001c16:	f107 0317 	add.w	r3, r7, #23
 8001c1a:	3218      	adds	r2, #24
 8001c1c:	6812      	ldr	r2, [r2, #0]
 8001c1e:	601a      	str	r2, [r3, #0]
 8001c20:	4a14      	ldr	r2, [pc, #80]	; (8001c74 <KeypadInitJoystick+0x9c>)
 8001c22:	f107 031b 	add.w	r3, r7, #27
 8001c26:	3214      	adds	r2, #20
 8001c28:	6812      	ldr	r2, [r2, #0]
 8001c2a:	601a      	str	r2, [r3, #0]
 8001c2c:	4a11      	ldr	r2, [pc, #68]	; (8001c74 <KeypadInitJoystick+0x9c>)
 8001c2e:	f107 031f 	add.w	r3, r7, #31
 8001c32:	3210      	adds	r2, #16
 8001c34:	6812      	ldr	r2, [r2, #0]
 8001c36:	601a      	str	r2, [r3, #0]
 8001c38:	4a0e      	ldr	r2, [pc, #56]	; (8001c74 <KeypadInitJoystick+0x9c>)
 8001c3a:	f107 0323 	add.w	r3, r7, #35	; 0x23
 8001c3e:	320c      	adds	r2, #12
 8001c40:	6812      	ldr	r2, [r2, #0]
 8001c42:	601a      	str	r2, [r3, #0]
			.DownFunction = JoystickFunctionsDefault[4],
			.DownLeftFunction = JoystickFunctionsDefault[5],
			.LeftFunction = JoystickFunctionsDefault[6],
			.UpLeftFunction = JoystickFunctionsDefault[7]
    };
    JoystickInit(Settings, &KeyPad.Joystick, JoystickIO_Driver);
 8001c44:	4b0c      	ldr	r3, [pc, #48]	; (8001c78 <KeypadInitJoystick+0xa0>)
 8001c46:	ac06      	add	r4, sp, #24
 8001c48:	461d      	mov	r5, r3
 8001c4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c4e:	682b      	ldr	r3, [r5, #0]
 8001c50:	6023      	str	r3, [r4, #0]
 8001c52:	4b0a      	ldr	r3, [pc, #40]	; (8001c7c <KeypadInitJoystick+0xa4>)
 8001c54:	9305      	str	r3, [sp, #20]
 8001c56:	466d      	mov	r5, sp
 8001c58:	f107 0414 	add.w	r4, r7, #20
 8001c5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c5e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c60:	6823      	ldr	r3, [r4, #0]
 8001c62:	602b      	str	r3, [r5, #0]
 8001c64:	1d3b      	adds	r3, r7, #4
 8001c66:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c68:	f001 fb62 	bl	8003330 <JoystickInit>
}
 8001c6c:	bf00      	nop
 8001c6e:	3728      	adds	r7, #40	; 0x28
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bdb0      	pop	{r4, r5, r7, pc}
 8001c74:	20000158 	.word	0x20000158
 8001c78:	0800f2e0 	.word	0x0800f2e0
 8001c7c:	20000aac 	.word	0x20000aac

08001c80 <KeypadInitLEDs>:

static void KeypadInitLEDs(){
 8001c80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c82:	b08d      	sub	sp, #52	; 0x34
 8001c84:	af04      	add	r7, sp, #16
	SerialLED_InitStruct_t LED_Settings[4] = {
 8001c86:	1d3b      	adds	r3, r7, #4
 8001c88:	2200      	movs	r2, #0
 8001c8a:	601a      	str	r2, [r3, #0]
 8001c8c:	605a      	str	r2, [r3, #4]
 8001c8e:	609a      	str	r2, [r3, #8]
 8001c90:	60da      	str	r2, [r3, #12]
 8001c92:	611a      	str	r2, [r3, #16]
 8001c94:	615a      	str	r2, [r3, #20]
 8001c96:	23ff      	movs	r3, #255	; 0xff
 8001c98:	71fb      	strb	r3, [r7, #7]
 8001c9a:	23ff      	movs	r3, #255	; 0xff
 8001c9c:	733b      	strb	r3, [r7, #12]
 8001c9e:	23ff      	movs	r3, #255	; 0xff
 8001ca0:	753b      	strb	r3, [r7, #20]
 8001ca2:	23ff      	movs	r3, #255	; 0xff
 8001ca4:	763b      	strb	r3, [r7, #24]
 8001ca6:	23ff      	movs	r3, #255	; 0xff
 8001ca8:	767b      	strb	r3, [r7, #25]
			{.red = 0xFF,
			 .green = 0xFF,
			 .blue = 0x00
			}
	};
	for(uint8_t i = 0; i < NUMBER_OF_LEDS; i++){
 8001caa:	2300      	movs	r3, #0
 8001cac:	77fb      	strb	r3, [r7, #31]
 8001cae:	e033      	b.n	8001d18 <KeypadInitLEDs+0x98>
		LED_Settings[i].address = i;
 8001cb0:	7ffa      	ldrb	r2, [r7, #31]
 8001cb2:	7ffb      	ldrb	r3, [r7, #31]
 8001cb4:	b299      	uxth	r1, r3
 8001cb6:	4613      	mov	r3, r2
 8001cb8:	005b      	lsls	r3, r3, #1
 8001cba:	4413      	add	r3, r2
 8001cbc:	005b      	lsls	r3, r3, #1
 8001cbe:	3320      	adds	r3, #32
 8001cc0:	443b      	add	r3, r7
 8001cc2:	3b1c      	subs	r3, #28
 8001cc4:	460a      	mov	r2, r1
 8001cc6:	801a      	strh	r2, [r3, #0]
		SerialLEDInit(LED_Settings[i],&KeyPad.LED[i],LED_Drv);
 8001cc8:	7ffa      	ldrb	r2, [r7, #31]
 8001cca:	7ff9      	ldrb	r1, [r7, #31]
 8001ccc:	460b      	mov	r3, r1
 8001cce:	00db      	lsls	r3, r3, #3
 8001cd0:	1a5b      	subs	r3, r3, r1
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	f503 63e8 	add.w	r3, r3, #1856	; 0x740
 8001cd8:	4913      	ldr	r1, [pc, #76]	; (8001d28 <KeypadInitLEDs+0xa8>)
 8001cda:	440b      	add	r3, r1
 8001cdc:	f103 0c04 	add.w	ip, r3, #4
 8001ce0:	4e12      	ldr	r6, [pc, #72]	; (8001d2c <KeypadInitLEDs+0xac>)
 8001ce2:	4613      	mov	r3, r2
 8001ce4:	005b      	lsls	r3, r3, #1
 8001ce6:	4413      	add	r3, r2
 8001ce8:	005b      	lsls	r3, r3, #1
 8001cea:	3320      	adds	r3, #32
 8001cec:	443b      	add	r3, r7
 8001cee:	3b1c      	subs	r3, #28
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	4696      	mov	lr, r2
 8001cf4:	889b      	ldrh	r3, [r3, #4]
 8001cf6:	2400      	movs	r4, #0
 8001cf8:	f363 040f 	bfi	r4, r3, #0, #16
 8001cfc:	466d      	mov	r5, sp
 8001cfe:	1d33      	adds	r3, r6, #4
 8001d00:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d02:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001d06:	6833      	ldr	r3, [r6, #0]
 8001d08:	4662      	mov	r2, ip
 8001d0a:	4670      	mov	r0, lr
 8001d0c:	4621      	mov	r1, r4
 8001d0e:	f001 fcff 	bl	8003710 <SerialLEDInit>
	for(uint8_t i = 0; i < NUMBER_OF_LEDS; i++){
 8001d12:	7ffb      	ldrb	r3, [r7, #31]
 8001d14:	3301      	adds	r3, #1
 8001d16:	77fb      	strb	r3, [r7, #31]
 8001d18:	7ffb      	ldrb	r3, [r7, #31]
 8001d1a:	2b03      	cmp	r3, #3
 8001d1c:	d9c8      	bls.n	8001cb0 <KeypadInitLEDs+0x30>
	}
}
 8001d1e:	bf00      	nop
 8001d20:	bf00      	nop
 8001d22:	3724      	adds	r7, #36	; 0x24
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d28:	200003a8 	.word	0x200003a8
 8001d2c:	20000184 	.word	0x20000184

08001d30 <KeypadInitTouchButtons>:

static void KeypadInitTouchButtons(){
 8001d30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d32:	b08b      	sub	sp, #44	; 0x2c
 8001d34:	af06      	add	r7, sp, #24
	TouchButton_Init_Struct_t Settings;
	for(uint8_t i = 0; i < NUMBER_OF_TOUCH_BUTTONS; i++){                                                                                                     // Coefficients:
 8001d36:	2300      	movs	r3, #0
 8001d38:	73fb      	strb	r3, [r7, #15]
 8001d3a:	e052      	b.n	8001de2 <KeypadInitTouchButtons+0xb2>
        Settings.TopLeftBound.X_Position = (TOUCH_BUTTON1_X_CENTER - TOUCH_BUTTON_HALFWIDTH) + TOUCH_BUTTON_ROW_PITCH * ((i % TOUCH_BUTTONS_PER_ROW));        // 012301230123
 8001d3c:	7bfb      	ldrb	r3, [r7, #15]
 8001d3e:	b29b      	uxth	r3, r3
 8001d40:	f003 0303 	and.w	r3, r3, #3
 8001d44:	b29b      	uxth	r3, r3
 8001d46:	461a      	mov	r2, r3
 8001d48:	0092      	lsls	r2, r2, #2
 8001d4a:	4413      	add	r3, r2
 8001d4c:	011b      	lsls	r3, r3, #4
 8001d4e:	b29b      	uxth	r3, r3
 8001d50:	3309      	adds	r3, #9
 8001d52:	b29b      	uxth	r3, r3
 8001d54:	803b      	strh	r3, [r7, #0]
        Settings.BottomRightBound.X_Position = (TOUCH_BUTTON1_X_CENTER + TOUCH_BUTTON_HALFWIDTH) + TOUCH_BUTTON_ROW_PITCH * ((i % TOUCH_BUTTONS_PER_ROW));    // 012301230123
 8001d56:	7bfb      	ldrb	r3, [r7, #15]
 8001d58:	b29b      	uxth	r3, r3
 8001d5a:	f003 0303 	and.w	r3, r3, #3
 8001d5e:	b29b      	uxth	r3, r3
 8001d60:	461a      	mov	r2, r3
 8001d62:	0092      	lsls	r2, r2, #2
 8001d64:	4413      	add	r3, r2
 8001d66:	011b      	lsls	r3, r3, #4
 8001d68:	b29b      	uxth	r3, r3
 8001d6a:	3347      	adds	r3, #71	; 0x47
 8001d6c:	b29b      	uxth	r3, r3
 8001d6e:	80bb      	strh	r3, [r7, #4]
        Settings.TopLeftBound.Y_Position = (TOUCH_BUTTON1_Y_CENTER - TOUCH_BUTTON_HALFWIDTH) + TOUCH_BUTTON_COLUMN_PITCH * ((i / TOUCH_BUTTONS_PER_ROW));     // 111122223333
 8001d70:	7bfb      	ldrb	r3, [r7, #15]
 8001d72:	089b      	lsrs	r3, r3, #2
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	b29b      	uxth	r3, r3
 8001d78:	461a      	mov	r2, r3
 8001d7a:	0112      	lsls	r2, r2, #4
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	b29b      	uxth	r3, r3
 8001d82:	331d      	adds	r3, #29
 8001d84:	b29b      	uxth	r3, r3
 8001d86:	807b      	strh	r3, [r7, #2]
        Settings.BottomRightBound.Y_Position = (TOUCH_BUTTON1_Y_CENTER + TOUCH_BUTTON_HALFWIDTH) + TOUCH_BUTTON_COLUMN_PITCH * ((i / TOUCH_BUTTONS_PER_ROW)); // 111122223333
 8001d88:	7bfb      	ldrb	r3, [r7, #15]
 8001d8a:	089b      	lsrs	r3, r3, #2
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	b29b      	uxth	r3, r3
 8001d90:	461a      	mov	r2, r3
 8001d92:	0112      	lsls	r2, r2, #4
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	b29b      	uxth	r3, r3
 8001d9a:	335b      	adds	r3, #91	; 0x5b
 8001d9c:	b29b      	uxth	r3, r3
 8001d9e:	80fb      	strh	r3, [r7, #6]
        Settings.KeyFunction = TouchButtonFunctionsDefault[i];
 8001da0:	7bfb      	ldrb	r3, [r7, #15]
 8001da2:	4914      	ldr	r1, [pc, #80]	; (8001df4 <KeypadInitTouchButtons+0xc4>)
 8001da4:	f107 0208 	add.w	r2, r7, #8
 8001da8:	009b      	lsls	r3, r3, #2
 8001daa:	440b      	add	r3, r1
 8001dac:	6818      	ldr	r0, [r3, #0]
 8001dae:	6010      	str	r0, [r2, #0]
        TouchButtonInit(Settings, &KeyPad.TouchButton[i], TouchButton_IO_Driver);
 8001db0:	7bfa      	ldrb	r2, [r7, #15]
 8001db2:	4613      	mov	r3, r2
 8001db4:	00db      	lsls	r3, r3, #3
 8001db6:	4413      	add	r3, r2
 8001db8:	009b      	lsls	r3, r3, #2
 8001dba:	f503 63f6 	add.w	r3, r3, #1968	; 0x7b0
 8001dbe:	4a0e      	ldr	r2, [pc, #56]	; (8001df8 <KeypadInitTouchButtons+0xc8>)
 8001dc0:	4413      	add	r3, r2
 8001dc2:	1d1e      	adds	r6, r3, #4
 8001dc4:	4b0d      	ldr	r3, [pc, #52]	; (8001dfc <KeypadInitTouchButtons+0xcc>)
 8001dc6:	466c      	mov	r4, sp
 8001dc8:	461d      	mov	r5, r3
 8001dca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001dcc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001dce:	682b      	ldr	r3, [r5, #0]
 8001dd0:	6023      	str	r3, [r4, #0]
 8001dd2:	4633      	mov	r3, r6
 8001dd4:	463a      	mov	r2, r7
 8001dd6:	ca07      	ldmia	r2, {r0, r1, r2}
 8001dd8:	f001 fd76 	bl	80038c8 <TouchButtonInit>
	for(uint8_t i = 0; i < NUMBER_OF_TOUCH_BUTTONS; i++){                                                                                                     // Coefficients:
 8001ddc:	7bfb      	ldrb	r3, [r7, #15]
 8001dde:	3301      	adds	r3, #1
 8001de0:	73fb      	strb	r3, [r7, #15]
 8001de2:	7bfb      	ldrb	r3, [r7, #15]
 8001de4:	2b0b      	cmp	r3, #11
 8001de6:	d9a9      	bls.n	8001d3c <KeypadInitTouchButtons+0xc>

	}
}
 8001de8:	bf00      	nop
 8001dea:	bf00      	nop
 8001dec:	3714      	adds	r7, #20
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001df2:	bf00      	nop
 8001df4:	20000128 	.word	0x20000128
 8001df8:	200003a8 	.word	0x200003a8
 8001dfc:	0800f2f4 	.word	0x0800f2f4

08001e00 <KeyPadSendData>:
void KeyPadSendData(){
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
	uint8_t i = 0;
 8001e06:	2300      	movs	r3, #0
 8001e08:	71fb      	strb	r3, [r7, #7]
	if(hUsbDeviceFS.dev_state == USBD_STATE_CONFIGURED){
 8001e0a:	4b16      	ldr	r3, [pc, #88]	; (8001e64 <KeyPadSendData+0x64>)
 8001e0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	2b03      	cmp	r3, #3
 8001e14:	d102      	bne.n	8001e1c <KeyPadSendData+0x1c>
		i++;
 8001e16:	79fb      	ldrb	r3, [r7, #7]
 8001e18:	3301      	adds	r3, #1
 8001e1a:	71fb      	strb	r3, [r7, #7]
	}
	 if(KeyPad.KeyboardFlag == KeyboardDataAvailable){
 8001e1c:	4b12      	ldr	r3, [pc, #72]	; (8001e68 <KeyPadSendData+0x68>)
 8001e1e:	785b      	ldrb	r3, [r3, #1]
 8001e20:	2b02      	cmp	r3, #2
 8001e22:	d10b      	bne.n	8001e3c <KeyPadSendData+0x3c>
		 USBD_LL_Resume(&hUsbDeviceFS);
 8001e24:	480f      	ldr	r0, [pc, #60]	; (8001e64 <KeyPadSendData+0x64>)
 8001e26:	f00a fb8a 	bl	800c53e <USBD_LL_Resume>
         USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, (uint8_t*)&KeyPad.KeyboardUSBBuffer, sizeof(KeyPad_KeyboardUSBBuffer_t), KEYBOARD_HID_EPIN_ADDR);
 8001e2a:	2382      	movs	r3, #130	; 0x82
 8001e2c:	2227      	movs	r2, #39	; 0x27
 8001e2e:	490f      	ldr	r1, [pc, #60]	; (8001e6c <KeyPadSendData+0x6c>)
 8001e30:	480c      	ldr	r0, [pc, #48]	; (8001e64 <KeyPadSendData+0x64>)
 8001e32:	f009 ff77 	bl	800bd24 <USBD_CUSTOM_HID_SendReport>
         KeyPad.KeyboardFlag = NoKeypadChange;
 8001e36:	4b0c      	ldr	r3, [pc, #48]	; (8001e68 <KeyPadSendData+0x68>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	705a      	strb	r2, [r3, #1]
	 }

	 if(KeyPad.MouseFlag == MouseDataAvailable){
 8001e3c:	4b0a      	ldr	r3, [pc, #40]	; (8001e68 <KeyPadSendData+0x68>)
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d10b      	bne.n	8001e5c <KeyPadSendData+0x5c>
		  USBD_LL_Resume(&hUsbDeviceFS);
 8001e44:	4807      	ldr	r0, [pc, #28]	; (8001e64 <KeyPadSendData+0x64>)
 8001e46:	f00a fb7a 	bl	800c53e <USBD_LL_Resume>
		  USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, (uint8_t*)&KeyPad.MouseUSBBuffer, sizeof(KeyPad_MouseUSBBuffer_t), MOUSE_HID_EPIN_ADDR);
 8001e4a:	2381      	movs	r3, #129	; 0x81
 8001e4c:	2204      	movs	r2, #4
 8001e4e:	4908      	ldr	r1, [pc, #32]	; (8001e70 <KeyPadSendData+0x70>)
 8001e50:	4804      	ldr	r0, [pc, #16]	; (8001e64 <KeyPadSendData+0x64>)
 8001e52:	f009 ff67 	bl	800bd24 <USBD_CUSTOM_HID_SendReport>
		  KeyPad.MouseFlag = NoKeypadChange;
 8001e56:	4b04      	ldr	r3, [pc, #16]	; (8001e68 <KeyPadSendData+0x68>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	701a      	strb	r2, [r3, #0]
	 }
}
 8001e5c:	bf00      	nop
 8001e5e:	3708      	adds	r7, #8
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	20001280 	.word	0x20001280
 8001e68:	200003a8 	.word	0x200003a8
 8001e6c:	20000d0c 	.word	0x20000d0c
 8001e70:	20000d33 	.word	0x20000d33

08001e74 <AssignNewButtonFunction>:

void AssignNewButtonFunction(uint8_t ButtonIndex, KeyFunction_t NewFunction){
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	6039      	str	r1, [r7, #0]
 8001e7e:	71fb      	strb	r3, [r7, #7]
	if(ButtonIndex >= NUMBER_OF_BUTTONS){
 8001e80:	79fb      	ldrb	r3, [r7, #7]
 8001e82:	2b3f      	cmp	r3, #63	; 0x3f
 8001e84:	d80b      	bhi.n	8001e9e <AssignNewButtonFunction+0x2a>
		return;
	} else {
		KeyPad.Buttons[ButtonIndex].KeyFunction = NewFunction;
 8001e86:	79fa      	ldrb	r2, [r7, #7]
 8001e88:	4908      	ldr	r1, [pc, #32]	; (8001eac <AssignNewButtonFunction+0x38>)
 8001e8a:	4613      	mov	r3, r2
 8001e8c:	00db      	lsls	r3, r3, #3
 8001e8e:	1a9b      	subs	r3, r3, r2
 8001e90:	009b      	lsls	r3, r3, #2
 8001e92:	440b      	add	r3, r1
 8001e94:	3305      	adds	r3, #5
 8001e96:	463a      	mov	r2, r7
 8001e98:	6810      	ldr	r0, [r2, #0]
 8001e9a:	6018      	str	r0, [r3, #0]
 8001e9c:	e000      	b.n	8001ea0 <AssignNewButtonFunction+0x2c>
		return;
 8001e9e:	bf00      	nop
	}

}
 8001ea0:	370c      	adds	r7, #12
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop
 8001eac:	200003a8 	.word	0x200003a8

08001eb0 <AssignNewTouchButtonFunction>:

void AssignNewTouchButtonFunction(uint8_t TouchButtonIndex, KeyFunction_t NewFunction){
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	6039      	str	r1, [r7, #0]
 8001eba:	71fb      	strb	r3, [r7, #7]
	if(TouchButtonIndex >= NUMBER_OF_TOUCH_BUTTONS){
 8001ebc:	79fb      	ldrb	r3, [r7, #7]
 8001ebe:	2b0b      	cmp	r3, #11
 8001ec0:	d80b      	bhi.n	8001eda <AssignNewTouchButtonFunction+0x2a>
		return;
	} else {
        KeyPad.TouchButton[TouchButtonIndex].KeyFunction = NewFunction;
 8001ec2:	79fa      	ldrb	r2, [r7, #7]
 8001ec4:	4908      	ldr	r1, [pc, #32]	; (8001ee8 <AssignNewTouchButtonFunction+0x38>)
 8001ec6:	4613      	mov	r3, r2
 8001ec8:	00db      	lsls	r3, r3, #3
 8001eca:	4413      	add	r3, r2
 8001ecc:	009b      	lsls	r3, r3, #2
 8001ece:	440b      	add	r3, r1
 8001ed0:	f203 73bc 	addw	r3, r3, #1980	; 0x7bc
 8001ed4:	683a      	ldr	r2, [r7, #0]
 8001ed6:	601a      	str	r2, [r3, #0]
 8001ed8:	e000      	b.n	8001edc <AssignNewTouchButtonFunction+0x2c>
		return;
 8001eda:	bf00      	nop
	}
}
 8001edc:	370c      	adds	r7, #12
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	200003a8 	.word	0x200003a8

08001eec <AssignNewJoystickFunction>:

void AssignNewJoystickFunction(JoystickState_t Direction, KeyFunction_t NewFunction){
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	6039      	str	r1, [r7, #0]
 8001ef6:	71fb      	strb	r3, [r7, #7]
	if(Direction > Joystick_DownRight && Direction <= JoystickNeutral){
 8001ef8:	79fb      	ldrb	r3, [r7, #7]
 8001efa:	2b08      	cmp	r3, #8
 8001efc:	d902      	bls.n	8001f04 <AssignNewJoystickFunction+0x18>
 8001efe:	79fb      	ldrb	r3, [r7, #7]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d04f      	beq.n	8001fa4 <AssignNewJoystickFunction+0xb8>
		return;
	}

	switch(Direction){
 8001f04:	79fb      	ldrb	r3, [r7, #7]
 8001f06:	3b01      	subs	r3, #1
 8001f08:	2b07      	cmp	r3, #7
 8001f0a:	d84d      	bhi.n	8001fa8 <AssignNewJoystickFunction+0xbc>
 8001f0c:	a201      	add	r2, pc, #4	; (adr r2, 8001f14 <AssignNewJoystickFunction+0x28>)
 8001f0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f12:	bf00      	nop
 8001f14:	08001f51 	.word	0x08001f51
 8001f18:	08001f43 	.word	0x08001f43
 8001f1c:	08001f35 	.word	0x08001f35
 8001f20:	08001f97 	.word	0x08001f97
 8001f24:	08001f89 	.word	0x08001f89
 8001f28:	08001f7b 	.word	0x08001f7b
 8001f2c:	08001f6d 	.word	0x08001f6d
 8001f30:	08001f5f 	.word	0x08001f5f
	case(Joystick_Up):
			KeyPad.Joystick.UpFunction = NewFunction;
 8001f34:	4b1f      	ldr	r3, [pc, #124]	; (8001fb4 <AssignNewJoystickFunction+0xc8>)
 8001f36:	f203 7315 	addw	r3, r3, #1813	; 0x715
 8001f3a:	463a      	mov	r2, r7
 8001f3c:	6810      	ldr	r0, [r2, #0]
 8001f3e:	6018      	str	r0, [r3, #0]
			break;
 8001f40:	e033      	b.n	8001faa <AssignNewJoystickFunction+0xbe>
	case(Joystick_UpRight):
		    KeyPad.Joystick.UpRightFunction = NewFunction;
 8001f42:	4b1c      	ldr	r3, [pc, #112]	; (8001fb4 <AssignNewJoystickFunction+0xc8>)
 8001f44:	f203 7311 	addw	r3, r3, #1809	; 0x711
 8001f48:	463a      	mov	r2, r7
 8001f4a:	6810      	ldr	r0, [r2, #0]
 8001f4c:	6018      	str	r0, [r3, #0]
			break;
 8001f4e:	e02c      	b.n	8001faa <AssignNewJoystickFunction+0xbe>
	case(Joystick_Right):
		    KeyPad.Joystick.RightFunction = NewFunction;
 8001f50:	4b18      	ldr	r3, [pc, #96]	; (8001fb4 <AssignNewJoystickFunction+0xc8>)
 8001f52:	f203 730d 	addw	r3, r3, #1805	; 0x70d
 8001f56:	463a      	mov	r2, r7
 8001f58:	6810      	ldr	r0, [r2, #0]
 8001f5a:	6018      	str	r0, [r3, #0]
			break;
 8001f5c:	e025      	b.n	8001faa <AssignNewJoystickFunction+0xbe>
	case(Joystick_DownRight):
		    KeyPad.Joystick.DownRightFunction = NewFunction;
 8001f5e:	4b15      	ldr	r3, [pc, #84]	; (8001fb4 <AssignNewJoystickFunction+0xc8>)
 8001f60:	f203 7329 	addw	r3, r3, #1833	; 0x729
 8001f64:	463a      	mov	r2, r7
 8001f66:	6810      	ldr	r0, [r2, #0]
 8001f68:	6018      	str	r0, [r3, #0]
			break;
 8001f6a:	e01e      	b.n	8001faa <AssignNewJoystickFunction+0xbe>
	case(Joystick_Down):
    	    KeyPad.Joystick.DownFunction = NewFunction;
 8001f6c:	4b11      	ldr	r3, [pc, #68]	; (8001fb4 <AssignNewJoystickFunction+0xc8>)
 8001f6e:	f203 7325 	addw	r3, r3, #1829	; 0x725
 8001f72:	463a      	mov	r2, r7
 8001f74:	6810      	ldr	r0, [r2, #0]
 8001f76:	6018      	str	r0, [r3, #0]
			break;
 8001f78:	e017      	b.n	8001faa <AssignNewJoystickFunction+0xbe>
	case(Joystick_DownLeft):
    	    KeyPad.Joystick.DownLeftFunction = NewFunction;
 8001f7a:	4b0e      	ldr	r3, [pc, #56]	; (8001fb4 <AssignNewJoystickFunction+0xc8>)
 8001f7c:	f203 7321 	addw	r3, r3, #1825	; 0x721
 8001f80:	463a      	mov	r2, r7
 8001f82:	6810      	ldr	r0, [r2, #0]
 8001f84:	6018      	str	r0, [r3, #0]
			break;
 8001f86:	e010      	b.n	8001faa <AssignNewJoystickFunction+0xbe>
	case(Joystick_Left):
    	    KeyPad.Joystick.LeftFunction = NewFunction;
 8001f88:	4b0a      	ldr	r3, [pc, #40]	; (8001fb4 <AssignNewJoystickFunction+0xc8>)
 8001f8a:	f203 731d 	addw	r3, r3, #1821	; 0x71d
 8001f8e:	463a      	mov	r2, r7
 8001f90:	6810      	ldr	r0, [r2, #0]
 8001f92:	6018      	str	r0, [r3, #0]
			break;
 8001f94:	e009      	b.n	8001faa <AssignNewJoystickFunction+0xbe>
	case(Joystick_UpLeft):
    	    KeyPad.Joystick.UpLeftFunction = NewFunction;
 8001f96:	4b07      	ldr	r3, [pc, #28]	; (8001fb4 <AssignNewJoystickFunction+0xc8>)
 8001f98:	f203 7319 	addw	r3, r3, #1817	; 0x719
 8001f9c:	463a      	mov	r2, r7
 8001f9e:	6810      	ldr	r0, [r2, #0]
 8001fa0:	6018      	str	r0, [r3, #0]
			break;
 8001fa2:	e002      	b.n	8001faa <AssignNewJoystickFunction+0xbe>
		return;
 8001fa4:	bf00      	nop
 8001fa6:	e000      	b.n	8001faa <AssignNewJoystickFunction+0xbe>
	default:
			break;
 8001fa8:	bf00      	nop
	}
}
 8001faa:	370c      	adds	r7, #12
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr
 8001fb4:	200003a8 	.word	0x200003a8

08001fb8 <HAL_ADC_MspInit>:
  /* USER CODE END ADC1_Init 2 */

}

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b08a      	sub	sp, #40	; 0x28
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fc0:	f107 0314 	add.w	r3, r7, #20
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	601a      	str	r2, [r3, #0]
 8001fc8:	605a      	str	r2, [r3, #4]
 8001fca:	609a      	str	r2, [r3, #8]
 8001fcc:	60da      	str	r2, [r3, #12]
 8001fce:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a2f      	ldr	r2, [pc, #188]	; (8002094 <HAL_ADC_MspInit+0xdc>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d157      	bne.n	800208a <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001fda:	2300      	movs	r3, #0
 8001fdc:	613b      	str	r3, [r7, #16]
 8001fde:	4b2e      	ldr	r3, [pc, #184]	; (8002098 <HAL_ADC_MspInit+0xe0>)
 8001fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fe2:	4a2d      	ldr	r2, [pc, #180]	; (8002098 <HAL_ADC_MspInit+0xe0>)
 8001fe4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fe8:	6453      	str	r3, [r2, #68]	; 0x44
 8001fea:	4b2b      	ldr	r3, [pc, #172]	; (8002098 <HAL_ADC_MspInit+0xe0>)
 8001fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ff2:	613b      	str	r3, [r7, #16]
 8001ff4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	60fb      	str	r3, [r7, #12]
 8001ffa:	4b27      	ldr	r3, [pc, #156]	; (8002098 <HAL_ADC_MspInit+0xe0>)
 8001ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffe:	4a26      	ldr	r2, [pc, #152]	; (8002098 <HAL_ADC_MspInit+0xe0>)
 8002000:	f043 0301 	orr.w	r3, r3, #1
 8002004:	6313      	str	r3, [r2, #48]	; 0x30
 8002006:	4b24      	ldr	r3, [pc, #144]	; (8002098 <HAL_ADC_MspInit+0xe0>)
 8002008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200a:	f003 0301 	and.w	r3, r3, #1
 800200e:	60fb      	str	r3, [r7, #12]
 8002010:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = ADC_VX_Pin|ADC_VY_Pin;
 8002012:	2318      	movs	r3, #24
 8002014:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002016:	2303      	movs	r3, #3
 8002018:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800201a:	2300      	movs	r3, #0
 800201c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800201e:	f107 0314 	add.w	r3, r7, #20
 8002022:	4619      	mov	r1, r3
 8002024:	481d      	ldr	r0, [pc, #116]	; (800209c <HAL_ADC_MspInit+0xe4>)
 8002026:	f002 ff97 	bl	8004f58 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800202a:	4b1d      	ldr	r3, [pc, #116]	; (80020a0 <HAL_ADC_MspInit+0xe8>)
 800202c:	4a1d      	ldr	r2, [pc, #116]	; (80020a4 <HAL_ADC_MspInit+0xec>)
 800202e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002030:	4b1b      	ldr	r3, [pc, #108]	; (80020a0 <HAL_ADC_MspInit+0xe8>)
 8002032:	2200      	movs	r2, #0
 8002034:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002036:	4b1a      	ldr	r3, [pc, #104]	; (80020a0 <HAL_ADC_MspInit+0xe8>)
 8002038:	2200      	movs	r2, #0
 800203a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800203c:	4b18      	ldr	r3, [pc, #96]	; (80020a0 <HAL_ADC_MspInit+0xe8>)
 800203e:	2200      	movs	r2, #0
 8002040:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002042:	4b17      	ldr	r3, [pc, #92]	; (80020a0 <HAL_ADC_MspInit+0xe8>)
 8002044:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002048:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800204a:	4b15      	ldr	r3, [pc, #84]	; (80020a0 <HAL_ADC_MspInit+0xe8>)
 800204c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002050:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002052:	4b13      	ldr	r3, [pc, #76]	; (80020a0 <HAL_ADC_MspInit+0xe8>)
 8002054:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002058:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800205a:	4b11      	ldr	r3, [pc, #68]	; (80020a0 <HAL_ADC_MspInit+0xe8>)
 800205c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002060:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002062:	4b0f      	ldr	r3, [pc, #60]	; (80020a0 <HAL_ADC_MspInit+0xe8>)
 8002064:	2200      	movs	r2, #0
 8002066:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002068:	4b0d      	ldr	r3, [pc, #52]	; (80020a0 <HAL_ADC_MspInit+0xe8>)
 800206a:	2200      	movs	r2, #0
 800206c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800206e:	480c      	ldr	r0, [pc, #48]	; (80020a0 <HAL_ADC_MspInit+0xe8>)
 8002070:	f002 fb64 	bl	800473c <HAL_DMA_Init>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d001      	beq.n	800207e <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800207a:	f000 fd4f 	bl	8002b1c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a07      	ldr	r2, [pc, #28]	; (80020a0 <HAL_ADC_MspInit+0xe8>)
 8002082:	639a      	str	r2, [r3, #56]	; 0x38
 8002084:	4a06      	ldr	r2, [pc, #24]	; (80020a0 <HAL_ADC_MspInit+0xe8>)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800208a:	bf00      	nop
 800208c:	3728      	adds	r7, #40	; 0x28
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	40012000 	.word	0x40012000
 8002098:	40023800 	.word	0x40023800
 800209c:	40020000 	.word	0x40020000
 80020a0:	20000d80 	.word	0x20000d80
 80020a4:	40026410 	.word	0x40026410

080020a8 <ADC1_Init>:
  /* USER CODE END ADC1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void ADC1_Init(void){
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b084      	sub	sp, #16
 80020ac:	af00      	add	r7, sp, #0
	  ADC_ChannelConfTypeDef sConfig = {0};
 80020ae:	463b      	mov	r3, r7
 80020b0:	2200      	movs	r2, #0
 80020b2:	601a      	str	r2, [r3, #0]
 80020b4:	605a      	str	r2, [r3, #4]
 80020b6:	609a      	str	r2, [r3, #8]
 80020b8:	60da      	str	r2, [r3, #12]


	  hadc1.Instance = ADC1;
 80020ba:	4b28      	ldr	r3, [pc, #160]	; (800215c <ADC1_Init+0xb4>)
 80020bc:	4a28      	ldr	r2, [pc, #160]	; (8002160 <ADC1_Init+0xb8>)
 80020be:	601a      	str	r2, [r3, #0]
	  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80020c0:	4b26      	ldr	r3, [pc, #152]	; (800215c <ADC1_Init+0xb4>)
 80020c2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80020c6:	605a      	str	r2, [r3, #4]
	  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80020c8:	4b24      	ldr	r3, [pc, #144]	; (800215c <ADC1_Init+0xb4>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	609a      	str	r2, [r3, #8]
	  hadc1.Init.ScanConvMode = ENABLE;
 80020ce:	4b23      	ldr	r3, [pc, #140]	; (800215c <ADC1_Init+0xb4>)
 80020d0:	2201      	movs	r2, #1
 80020d2:	611a      	str	r2, [r3, #16]
	  hadc1.Init.ContinuousConvMode = ENABLE;
 80020d4:	4b21      	ldr	r3, [pc, #132]	; (800215c <ADC1_Init+0xb4>)
 80020d6:	2201      	movs	r2, #1
 80020d8:	761a      	strb	r2, [r3, #24]
	  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80020da:	4b20      	ldr	r3, [pc, #128]	; (800215c <ADC1_Init+0xb4>)
 80020dc:	2200      	movs	r2, #0
 80020de:	f883 2020 	strb.w	r2, [r3, #32]
	  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80020e2:	4b1e      	ldr	r3, [pc, #120]	; (800215c <ADC1_Init+0xb4>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	62da      	str	r2, [r3, #44]	; 0x2c
	  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80020e8:	4b1c      	ldr	r3, [pc, #112]	; (800215c <ADC1_Init+0xb4>)
 80020ea:	4a1e      	ldr	r2, [pc, #120]	; (8002164 <ADC1_Init+0xbc>)
 80020ec:	629a      	str	r2, [r3, #40]	; 0x28
	  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80020ee:	4b1b      	ldr	r3, [pc, #108]	; (800215c <ADC1_Init+0xb4>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	60da      	str	r2, [r3, #12]
	  hadc1.Init.NbrOfConversion = 2;
 80020f4:	4b19      	ldr	r3, [pc, #100]	; (800215c <ADC1_Init+0xb4>)
 80020f6:	2202      	movs	r2, #2
 80020f8:	61da      	str	r2, [r3, #28]
	  hadc1.Init.DMAContinuousRequests = ENABLE;
 80020fa:	4b18      	ldr	r3, [pc, #96]	; (800215c <ADC1_Init+0xb4>)
 80020fc:	2201      	movs	r2, #1
 80020fe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8002102:	4b16      	ldr	r3, [pc, #88]	; (800215c <ADC1_Init+0xb4>)
 8002104:	2200      	movs	r2, #0
 8002106:	615a      	str	r2, [r3, #20]
	  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002108:	4814      	ldr	r0, [pc, #80]	; (800215c <ADC1_Init+0xb4>)
 800210a:	f001 fd4b 	bl	8003ba4 <HAL_ADC_Init>
 800210e:	4603      	mov	r3, r0
 8002110:	2b00      	cmp	r3, #0
 8002112:	d001      	beq.n	8002118 <ADC1_Init+0x70>
	  {
	    Error_Handler();
 8002114:	f000 fd02 	bl	8002b1c <Error_Handler>
	  }

	  sConfig.Channel = ADC_CHANNEL_3;
 8002118:	2303      	movs	r3, #3
 800211a:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = 1;
 800211c:	2301      	movs	r3, #1
 800211e:	607b      	str	r3, [r7, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8002120:	2307      	movs	r3, #7
 8002122:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002124:	463b      	mov	r3, r7
 8002126:	4619      	mov	r1, r3
 8002128:	480c      	ldr	r0, [pc, #48]	; (800215c <ADC1_Init+0xb4>)
 800212a:	f001 fee7 	bl	8003efc <HAL_ADC_ConfigChannel>
 800212e:	4603      	mov	r3, r0
 8002130:	2b00      	cmp	r3, #0
 8002132:	d001      	beq.n	8002138 <ADC1_Init+0x90>
	  {
	    Error_Handler();
 8002134:	f000 fcf2 	bl	8002b1c <Error_Handler>
	  }

	  sConfig.Channel = ADC_CHANNEL_4;
 8002138:	2304      	movs	r3, #4
 800213a:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = 2;
 800213c:	2302      	movs	r3, #2
 800213e:	607b      	str	r3, [r7, #4]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002140:	463b      	mov	r3, r7
 8002142:	4619      	mov	r1, r3
 8002144:	4805      	ldr	r0, [pc, #20]	; (800215c <ADC1_Init+0xb4>)
 8002146:	f001 fed9 	bl	8003efc <HAL_ADC_ConfigChannel>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	d001      	beq.n	8002154 <ADC1_Init+0xac>
	  {
	    Error_Handler();
 8002150:	f000 fce4 	bl	8002b1c <Error_Handler>
	  }

}
 8002154:	bf00      	nop
 8002156:	3710      	adds	r7, #16
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}
 800215c:	20000d38 	.word	0x20000d38
 8002160:	40012000 	.word	0x40012000
 8002164:	0f000001 	.word	0x0f000001

08002168 <I2C1_DMA_Init>:
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);

}

/* USER CODE BEGIN 2 */
void I2C1_DMA_Init(void){
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
	__HAL_RCC_DMA1_CLK_ENABLE();
 800216e:	2300      	movs	r3, #0
 8002170:	607b      	str	r3, [r7, #4]
 8002172:	4b0c      	ldr	r3, [pc, #48]	; (80021a4 <I2C1_DMA_Init+0x3c>)
 8002174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002176:	4a0b      	ldr	r2, [pc, #44]	; (80021a4 <I2C1_DMA_Init+0x3c>)
 8002178:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800217c:	6313      	str	r3, [r2, #48]	; 0x30
 800217e:	4b09      	ldr	r3, [pc, #36]	; (80021a4 <I2C1_DMA_Init+0x3c>)
 8002180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002182:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002186:	607b      	str	r3, [r7, #4]
 8002188:	687b      	ldr	r3, [r7, #4]
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 1, 0);
 800218a:	2200      	movs	r2, #0
 800218c:	2101      	movs	r1, #1
 800218e:	200b      	movs	r0, #11
 8002190:	f002 fa81 	bl	8004696 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002194:	200b      	movs	r0, #11
 8002196:	f002 fa9a 	bl	80046ce <HAL_NVIC_EnableIRQ>
}
 800219a:	bf00      	nop
 800219c:	3708      	adds	r7, #8
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	40023800 	.word	0x40023800

080021a8 <ADC_DMA_Init>:
void ADC_DMA_Init(void){
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0
	__HAL_RCC_DMA2_CLK_ENABLE();
 80021ae:	2300      	movs	r3, #0
 80021b0:	607b      	str	r3, [r7, #4]
 80021b2:	4b0a      	ldr	r3, [pc, #40]	; (80021dc <ADC_DMA_Init+0x34>)
 80021b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b6:	4a09      	ldr	r2, [pc, #36]	; (80021dc <ADC_DMA_Init+0x34>)
 80021b8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80021bc:	6313      	str	r3, [r2, #48]	; 0x30
 80021be:	4b07      	ldr	r3, [pc, #28]	; (80021dc <ADC_DMA_Init+0x34>)
 80021c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021c6:	607b      	str	r3, [r7, #4]
 80021c8:	687b      	ldr	r3, [r7, #4]
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 1, 0);
 80021ca:	2200      	movs	r2, #0
 80021cc:	2101      	movs	r1, #1
 80021ce:	2038      	movs	r0, #56	; 0x38
 80021d0:	f002 fa61 	bl	8004696 <HAL_NVIC_SetPriority>
	//HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
}
 80021d4:	bf00      	nop
 80021d6:	3708      	adds	r7, #8
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	40023800 	.word	0x40023800

080021e0 <TIM_DMA_Init>:

void TIM_DMA_Init(void){
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b082      	sub	sp, #8
 80021e4:	af00      	add	r7, sp, #0
	__HAL_RCC_DMA1_CLK_ENABLE();
 80021e6:	2300      	movs	r3, #0
 80021e8:	607b      	str	r3, [r7, #4]
 80021ea:	4b0c      	ldr	r3, [pc, #48]	; (800221c <TIM_DMA_Init+0x3c>)
 80021ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ee:	4a0b      	ldr	r2, [pc, #44]	; (800221c <TIM_DMA_Init+0x3c>)
 80021f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80021f4:	6313      	str	r3, [r2, #48]	; 0x30
 80021f6:	4b09      	ldr	r3, [pc, #36]	; (800221c <TIM_DMA_Init+0x3c>)
 80021f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021fe:	607b      	str	r3, [r7, #4]
 8002200:	687b      	ldr	r3, [r7, #4]
	HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 1, 0);
 8002202:	2200      	movs	r2, #0
 8002204:	2101      	movs	r1, #1
 8002206:	200f      	movs	r0, #15
 8002208:	f002 fa45 	bl	8004696 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800220c:	200f      	movs	r0, #15
 800220e:	f002 fa5e 	bl	80046ce <HAL_NVIC_EnableIRQ>
}
 8002212:	bf00      	nop
 8002214:	3708      	adds	r7, #8
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	40023800 	.word	0x40023800

08002220 <I2C2_DMA_Init>:

void I2C2_DMA_Init(void){
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
	__HAL_RCC_DMA1_CLK_ENABLE();
 8002226:	2300      	movs	r3, #0
 8002228:	607b      	str	r3, [r7, #4]
 800222a:	4b0c      	ldr	r3, [pc, #48]	; (800225c <I2C2_DMA_Init+0x3c>)
 800222c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222e:	4a0b      	ldr	r2, [pc, #44]	; (800225c <I2C2_DMA_Init+0x3c>)
 8002230:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002234:	6313      	str	r3, [r2, #48]	; 0x30
 8002236:	4b09      	ldr	r3, [pc, #36]	; (800225c <I2C2_DMA_Init+0x3c>)
 8002238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800223e:	607b      	str	r3, [r7, #4]
 8002240:	687b      	ldr	r3, [r7, #4]
	  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 1, 0);
 8002242:	2200      	movs	r2, #0
 8002244:	2101      	movs	r1, #1
 8002246:	200d      	movs	r0, #13
 8002248:	f002 fa25 	bl	8004696 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800224c:	200d      	movs	r0, #13
 800224e:	f002 fa3e 	bl	80046ce <HAL_NVIC_EnableIRQ>
}
 8002252:	bf00      	nop
 8002254:	3708      	adds	r7, #8
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	40023800 	.word	0x40023800

08002260 <I2C_GPIO_Init>:

}

/* USER CODE BEGIN 2 */
void I2C_GPIO_Init(void)
{
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002266:	2300      	movs	r3, #0
 8002268:	607b      	str	r3, [r7, #4]
 800226a:	4b09      	ldr	r3, [pc, #36]	; (8002290 <I2C_GPIO_Init+0x30>)
 800226c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226e:	4a08      	ldr	r2, [pc, #32]	; (8002290 <I2C_GPIO_Init+0x30>)
 8002270:	f043 0302 	orr.w	r3, r3, #2
 8002274:	6313      	str	r3, [r2, #48]	; 0x30
 8002276:	4b06      	ldr	r3, [pc, #24]	; (8002290 <I2C_GPIO_Init+0x30>)
 8002278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227a:	f003 0302 	and.w	r3, r3, #2
 800227e:	607b      	str	r3, [r7, #4]
 8002280:	687b      	ldr	r3, [r7, #4]

}
 8002282:	bf00      	nop
 8002284:	370c      	adds	r7, #12
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr
 800228e:	bf00      	nop
 8002290:	40023800 	.word	0x40023800

08002294 <ADC_GPIO_Init>:

void ADC_GPIO_Init(void){
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800229a:	2300      	movs	r3, #0
 800229c:	607b      	str	r3, [r7, #4]
 800229e:	4b09      	ldr	r3, [pc, #36]	; (80022c4 <ADC_GPIO_Init+0x30>)
 80022a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a2:	4a08      	ldr	r2, [pc, #32]	; (80022c4 <ADC_GPIO_Init+0x30>)
 80022a4:	f043 0302 	orr.w	r3, r3, #2
 80022a8:	6313      	str	r3, [r2, #48]	; 0x30
 80022aa:	4b06      	ldr	r3, [pc, #24]	; (80022c4 <ADC_GPIO_Init+0x30>)
 80022ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ae:	f003 0302 	and.w	r3, r3, #2
 80022b2:	607b      	str	r3, [r7, #4]
 80022b4:	687b      	ldr	r3, [r7, #4]

}
 80022b6:	bf00      	nop
 80022b8:	370c      	adds	r7, #12
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr
 80022c2:	bf00      	nop
 80022c4:	40023800 	.word	0x40023800

080022c8 <TIM3_GPIO_Init>:

void TIM3_GPIO_Init(void){
 80022c8:	b480      	push	{r7}
 80022ca:	b083      	sub	sp, #12
 80022cc:	af00      	add	r7, sp, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80022ce:	2300      	movs	r3, #0
 80022d0:	607b      	str	r3, [r7, #4]
 80022d2:	4b09      	ldr	r3, [pc, #36]	; (80022f8 <TIM3_GPIO_Init+0x30>)
 80022d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d6:	4a08      	ldr	r2, [pc, #32]	; (80022f8 <TIM3_GPIO_Init+0x30>)
 80022d8:	f043 0302 	orr.w	r3, r3, #2
 80022dc:	6313      	str	r3, [r2, #48]	; 0x30
 80022de:	4b06      	ldr	r3, [pc, #24]	; (80022f8 <TIM3_GPIO_Init+0x30>)
 80022e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e2:	f003 0302 	and.w	r3, r3, #2
 80022e6:	607b      	str	r3, [r7, #4]
 80022e8:	687b      	ldr	r3, [r7, #4]
}
 80022ea:	bf00      	nop
 80022ec:	370c      	adds	r7, #12
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr
 80022f6:	bf00      	nop
 80022f8:	40023800 	.word	0x40023800

080022fc <ILI9341_GPIO_Init>:

void ILI9341_GPIO_Init(void){
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b088      	sub	sp, #32
 8002300:	af00      	add	r7, sp, #0
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002302:	2300      	movs	r3, #0
 8002304:	60bb      	str	r3, [r7, #8]
 8002306:	4b1c      	ldr	r3, [pc, #112]	; (8002378 <ILI9341_GPIO_Init+0x7c>)
 8002308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230a:	4a1b      	ldr	r2, [pc, #108]	; (8002378 <ILI9341_GPIO_Init+0x7c>)
 800230c:	f043 0301 	orr.w	r3, r3, #1
 8002310:	6313      	str	r3, [r2, #48]	; 0x30
 8002312:	4b19      	ldr	r3, [pc, #100]	; (8002378 <ILI9341_GPIO_Init+0x7c>)
 8002314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002316:	f003 0301 	and.w	r3, r3, #1
 800231a:	60bb      	str	r3, [r7, #8]
 800231c:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 800231e:	2300      	movs	r3, #0
 8002320:	607b      	str	r3, [r7, #4]
 8002322:	4b15      	ldr	r3, [pc, #84]	; (8002378 <ILI9341_GPIO_Init+0x7c>)
 8002324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002326:	4a14      	ldr	r2, [pc, #80]	; (8002378 <ILI9341_GPIO_Init+0x7c>)
 8002328:	f043 0302 	orr.w	r3, r3, #2
 800232c:	6313      	str	r3, [r2, #48]	; 0x30
 800232e:	4b12      	ldr	r3, [pc, #72]	; (8002378 <ILI9341_GPIO_Init+0x7c>)
 8002330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002332:	f003 0302 	and.w	r3, r3, #2
 8002336:	607b      	str	r3, [r7, #4]
 8002338:	687b      	ldr	r3, [r7, #4]
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800233a:	f107 030c 	add.w	r3, r7, #12
 800233e:	2200      	movs	r2, #0
 8002340:	601a      	str	r2, [r3, #0]
 8002342:	605a      	str	r2, [r3, #4]
 8002344:	609a      	str	r2, [r3, #8]
 8002346:	60da      	str	r2, [r3, #12]
 8002348:	611a      	str	r2, [r3, #16]
	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(GPIOB, SPI1_CSN_Pin|DCRS_Pin, GPIO_PIN_SET);
 800234a:	2201      	movs	r2, #1
 800234c:	2103      	movs	r1, #3
 800234e:	480b      	ldr	r0, [pc, #44]	; (800237c <ILI9341_GPIO_Init+0x80>)
 8002350:	f003 f86a 	bl	8005428 <HAL_GPIO_WritePin>

	  /*Configure GPIO pins : PBPin PBPin */
	  GPIO_InitStruct.Pin = SPI1_CSN_Pin|DCRS_Pin;
 8002354:	2303      	movs	r3, #3
 8002356:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002358:	2301      	movs	r3, #1
 800235a:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800235c:	2300      	movs	r3, #0
 800235e:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002360:	2303      	movs	r3, #3
 8002362:	61bb      	str	r3, [r7, #24]
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002364:	f107 030c 	add.w	r3, r7, #12
 8002368:	4619      	mov	r1, r3
 800236a:	4804      	ldr	r0, [pc, #16]	; (800237c <ILI9341_GPIO_Init+0x80>)
 800236c:	f002 fdf4 	bl	8004f58 <HAL_GPIO_Init>

}
 8002370:	bf00      	nop
 8002372:	3720      	adds	r7, #32
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	40023800 	.word	0x40023800
 800237c:	40020400 	.word	0x40020400

08002380 <ILI9341_GPIO_DeInit>:

void ILI9341_GPIO_DeInit(void){
 8002380:	b580      	push	{r7, lr}
 8002382:	af00      	add	r7, sp, #0
	HAL_GPIO_DeInit(GPIOB, SPI1_CSN_Pin|DCRS_Pin);
 8002384:	2103      	movs	r1, #3
 8002386:	4802      	ldr	r0, [pc, #8]	; (8002390 <ILI9341_GPIO_DeInit+0x10>)
 8002388:	f002 ff6a 	bl	8005260 <HAL_GPIO_DeInit>
}
 800238c:	bf00      	nop
 800238e:	bd80      	pop	{r7, pc}
 8002390:	40020400 	.word	0x40020400

08002394 <HAL_I2C_MspInit>:
  /* USER CODE END I2C2_Init 2 */

}

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b08c      	sub	sp, #48	; 0x30
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800239c:	f107 031c 	add.w	r3, r7, #28
 80023a0:	2200      	movs	r2, #0
 80023a2:	601a      	str	r2, [r3, #0]
 80023a4:	605a      	str	r2, [r3, #4]
 80023a6:	609a      	str	r2, [r3, #8]
 80023a8:	60da      	str	r2, [r3, #12]
 80023aa:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a68      	ldr	r2, [pc, #416]	; (8002554 <HAL_I2C_MspInit+0x1c0>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d15a      	bne.n	800246c <HAL_I2C_MspInit+0xd8>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023b6:	2300      	movs	r3, #0
 80023b8:	61bb      	str	r3, [r7, #24]
 80023ba:	4b67      	ldr	r3, [pc, #412]	; (8002558 <HAL_I2C_MspInit+0x1c4>)
 80023bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023be:	4a66      	ldr	r2, [pc, #408]	; (8002558 <HAL_I2C_MspInit+0x1c4>)
 80023c0:	f043 0302 	orr.w	r3, r3, #2
 80023c4:	6313      	str	r3, [r2, #48]	; 0x30
 80023c6:	4b64      	ldr	r3, [pc, #400]	; (8002558 <HAL_I2C_MspInit+0x1c4>)
 80023c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ca:	f003 0302 	and.w	r3, r3, #2
 80023ce:	61bb      	str	r3, [r7, #24]
 80023d0:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80023d2:	23c0      	movs	r3, #192	; 0xc0
 80023d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80023d6:	2312      	movs	r3, #18
 80023d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80023da:	2301      	movs	r3, #1
 80023dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023de:	2303      	movs	r3, #3
 80023e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80023e2:	2304      	movs	r3, #4
 80023e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023e6:	f107 031c 	add.w	r3, r7, #28
 80023ea:	4619      	mov	r1, r3
 80023ec:	485b      	ldr	r0, [pc, #364]	; (800255c <HAL_I2C_MspInit+0x1c8>)
 80023ee:	f002 fdb3 	bl	8004f58 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80023f2:	2300      	movs	r3, #0
 80023f4:	617b      	str	r3, [r7, #20]
 80023f6:	4b58      	ldr	r3, [pc, #352]	; (8002558 <HAL_I2C_MspInit+0x1c4>)
 80023f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fa:	4a57      	ldr	r2, [pc, #348]	; (8002558 <HAL_I2C_MspInit+0x1c4>)
 80023fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002400:	6413      	str	r3, [r2, #64]	; 0x40
 8002402:	4b55      	ldr	r3, [pc, #340]	; (8002558 <HAL_I2C_MspInit+0x1c4>)
 8002404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002406:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800240a:	617b      	str	r3, [r7, #20]
 800240c:	697b      	ldr	r3, [r7, #20]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 800240e:	4b54      	ldr	r3, [pc, #336]	; (8002560 <HAL_I2C_MspInit+0x1cc>)
 8002410:	4a54      	ldr	r2, [pc, #336]	; (8002564 <HAL_I2C_MspInit+0x1d0>)
 8002412:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8002414:	4b52      	ldr	r3, [pc, #328]	; (8002560 <HAL_I2C_MspInit+0x1cc>)
 8002416:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800241a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800241c:	4b50      	ldr	r3, [pc, #320]	; (8002560 <HAL_I2C_MspInit+0x1cc>)
 800241e:	2200      	movs	r2, #0
 8002420:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002422:	4b4f      	ldr	r3, [pc, #316]	; (8002560 <HAL_I2C_MspInit+0x1cc>)
 8002424:	2200      	movs	r2, #0
 8002426:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002428:	4b4d      	ldr	r3, [pc, #308]	; (8002560 <HAL_I2C_MspInit+0x1cc>)
 800242a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800242e:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002430:	4b4b      	ldr	r3, [pc, #300]	; (8002560 <HAL_I2C_MspInit+0x1cc>)
 8002432:	2200      	movs	r2, #0
 8002434:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002436:	4b4a      	ldr	r3, [pc, #296]	; (8002560 <HAL_I2C_MspInit+0x1cc>)
 8002438:	2200      	movs	r2, #0
 800243a:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800243c:	4b48      	ldr	r3, [pc, #288]	; (8002560 <HAL_I2C_MspInit+0x1cc>)
 800243e:	2200      	movs	r2, #0
 8002440:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002442:	4b47      	ldr	r3, [pc, #284]	; (8002560 <HAL_I2C_MspInit+0x1cc>)
 8002444:	2200      	movs	r2, #0
 8002446:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002448:	4b45      	ldr	r3, [pc, #276]	; (8002560 <HAL_I2C_MspInit+0x1cc>)
 800244a:	2200      	movs	r2, #0
 800244c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800244e:	4844      	ldr	r0, [pc, #272]	; (8002560 <HAL_I2C_MspInit+0x1cc>)
 8002450:	f002 f974 	bl	800473c <HAL_DMA_Init>
 8002454:	4603      	mov	r3, r0
 8002456:	2b00      	cmp	r3, #0
 8002458:	d001      	beq.n	800245e <HAL_I2C_MspInit+0xca>
    {
      Error_Handler();
 800245a:	f000 fb5f 	bl	8002b1c <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4a3f      	ldr	r2, [pc, #252]	; (8002560 <HAL_I2C_MspInit+0x1cc>)
 8002462:	639a      	str	r2, [r3, #56]	; 0x38
 8002464:	4a3e      	ldr	r2, [pc, #248]	; (8002560 <HAL_I2C_MspInit+0x1cc>)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800246a:	e06f      	b.n	800254c <HAL_I2C_MspInit+0x1b8>
  else if(i2cHandle->Instance==I2C2)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a3d      	ldr	r2, [pc, #244]	; (8002568 <HAL_I2C_MspInit+0x1d4>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d16a      	bne.n	800254c <HAL_I2C_MspInit+0x1b8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002476:	2300      	movs	r3, #0
 8002478:	613b      	str	r3, [r7, #16]
 800247a:	4b37      	ldr	r3, [pc, #220]	; (8002558 <HAL_I2C_MspInit+0x1c4>)
 800247c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247e:	4a36      	ldr	r2, [pc, #216]	; (8002558 <HAL_I2C_MspInit+0x1c4>)
 8002480:	f043 0302 	orr.w	r3, r3, #2
 8002484:	6313      	str	r3, [r2, #48]	; 0x30
 8002486:	4b34      	ldr	r3, [pc, #208]	; (8002558 <HAL_I2C_MspInit+0x1c4>)
 8002488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248a:	f003 0302 	and.w	r3, r3, #2
 800248e:	613b      	str	r3, [r7, #16]
 8002490:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002492:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002496:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002498:	2312      	movs	r3, #18
 800249a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800249c:	2300      	movs	r3, #0
 800249e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024a0:	2303      	movs	r3, #3
 80024a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80024a4:	2304      	movs	r3, #4
 80024a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024a8:	f107 031c 	add.w	r3, r7, #28
 80024ac:	4619      	mov	r1, r3
 80024ae:	482b      	ldr	r0, [pc, #172]	; (800255c <HAL_I2C_MspInit+0x1c8>)
 80024b0:	f002 fd52 	bl	8004f58 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80024b4:	2308      	movs	r3, #8
 80024b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80024b8:	2312      	movs	r3, #18
 80024ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024bc:	2300      	movs	r3, #0
 80024be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024c0:	2303      	movs	r3, #3
 80024c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 80024c4:	2309      	movs	r3, #9
 80024c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024c8:	f107 031c 	add.w	r3, r7, #28
 80024cc:	4619      	mov	r1, r3
 80024ce:	4823      	ldr	r0, [pc, #140]	; (800255c <HAL_I2C_MspInit+0x1c8>)
 80024d0:	f002 fd42 	bl	8004f58 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80024d4:	2300      	movs	r3, #0
 80024d6:	60fb      	str	r3, [r7, #12]
 80024d8:	4b1f      	ldr	r3, [pc, #124]	; (8002558 <HAL_I2C_MspInit+0x1c4>)
 80024da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024dc:	4a1e      	ldr	r2, [pc, #120]	; (8002558 <HAL_I2C_MspInit+0x1c4>)
 80024de:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80024e2:	6413      	str	r3, [r2, #64]	; 0x40
 80024e4:	4b1c      	ldr	r3, [pc, #112]	; (8002558 <HAL_I2C_MspInit+0x1c4>)
 80024e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024ec:	60fb      	str	r3, [r7, #12]
 80024ee:	68fb      	ldr	r3, [r7, #12]
    hdma_i2c2_rx.Instance = DMA1_Stream2;
 80024f0:	4b1e      	ldr	r3, [pc, #120]	; (800256c <HAL_I2C_MspInit+0x1d8>)
 80024f2:	4a1f      	ldr	r2, [pc, #124]	; (8002570 <HAL_I2C_MspInit+0x1dc>)
 80024f4:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Channel = DMA_CHANNEL_7;
 80024f6:	4b1d      	ldr	r3, [pc, #116]	; (800256c <HAL_I2C_MspInit+0x1d8>)
 80024f8:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 80024fc:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80024fe:	4b1b      	ldr	r3, [pc, #108]	; (800256c <HAL_I2C_MspInit+0x1d8>)
 8002500:	2200      	movs	r2, #0
 8002502:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002504:	4b19      	ldr	r3, [pc, #100]	; (800256c <HAL_I2C_MspInit+0x1d8>)
 8002506:	2200      	movs	r2, #0
 8002508:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800250a:	4b18      	ldr	r3, [pc, #96]	; (800256c <HAL_I2C_MspInit+0x1d8>)
 800250c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002510:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002512:	4b16      	ldr	r3, [pc, #88]	; (800256c <HAL_I2C_MspInit+0x1d8>)
 8002514:	2200      	movs	r2, #0
 8002516:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002518:	4b14      	ldr	r3, [pc, #80]	; (800256c <HAL_I2C_MspInit+0x1d8>)
 800251a:	2200      	movs	r2, #0
 800251c:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 800251e:	4b13      	ldr	r3, [pc, #76]	; (800256c <HAL_I2C_MspInit+0x1d8>)
 8002520:	2200      	movs	r2, #0
 8002522:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002524:	4b11      	ldr	r3, [pc, #68]	; (800256c <HAL_I2C_MspInit+0x1d8>)
 8002526:	2200      	movs	r2, #0
 8002528:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800252a:	4b10      	ldr	r3, [pc, #64]	; (800256c <HAL_I2C_MspInit+0x1d8>)
 800252c:	2200      	movs	r2, #0
 800252e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 8002530:	480e      	ldr	r0, [pc, #56]	; (800256c <HAL_I2C_MspInit+0x1d8>)
 8002532:	f002 f903 	bl	800473c <HAL_DMA_Init>
 8002536:	4603      	mov	r3, r0
 8002538:	2b00      	cmp	r3, #0
 800253a:	d001      	beq.n	8002540 <HAL_I2C_MspInit+0x1ac>
      Error_Handler();
 800253c:	f000 faee 	bl	8002b1c <Error_Handler>
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c2_rx);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	4a0a      	ldr	r2, [pc, #40]	; (800256c <HAL_I2C_MspInit+0x1d8>)
 8002544:	639a      	str	r2, [r3, #56]	; 0x38
 8002546:	4a09      	ldr	r2, [pc, #36]	; (800256c <HAL_I2C_MspInit+0x1d8>)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6393      	str	r3, [r2, #56]	; 0x38
}
 800254c:	bf00      	nop
 800254e:	3730      	adds	r7, #48	; 0x30
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}
 8002554:	40005400 	.word	0x40005400
 8002558:	40023800 	.word	0x40023800
 800255c:	40020400 	.word	0x40020400
 8002560:	20000e88 	.word	0x20000e88
 8002564:	40026010 	.word	0x40026010
 8002568:	40005800 	.word	0x40005800
 800256c:	20000ee8 	.word	0x20000ee8
 8002570:	40026040 	.word	0x40026040

08002574 <I2C1_Init>:
  /* USER CODE END I2C2_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void I2C1_Init(void){
 8002574:	b580      	push	{r7, lr}
 8002576:	af00      	add	r7, sp, #0

	  hi2c1.Instance = I2C1;
 8002578:	4b12      	ldr	r3, [pc, #72]	; (80025c4 <I2C1_Init+0x50>)
 800257a:	4a13      	ldr	r2, [pc, #76]	; (80025c8 <I2C1_Init+0x54>)
 800257c:	601a      	str	r2, [r3, #0]
	  hi2c1.Init.ClockSpeed = 400000;
 800257e:	4b11      	ldr	r3, [pc, #68]	; (80025c4 <I2C1_Init+0x50>)
 8002580:	4a12      	ldr	r2, [pc, #72]	; (80025cc <I2C1_Init+0x58>)
 8002582:	605a      	str	r2, [r3, #4]
	  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002584:	4b0f      	ldr	r3, [pc, #60]	; (80025c4 <I2C1_Init+0x50>)
 8002586:	2200      	movs	r2, #0
 8002588:	609a      	str	r2, [r3, #8]
	  hi2c1.Init.OwnAddress1 = 0;
 800258a:	4b0e      	ldr	r3, [pc, #56]	; (80025c4 <I2C1_Init+0x50>)
 800258c:	2200      	movs	r2, #0
 800258e:	60da      	str	r2, [r3, #12]
	  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002590:	4b0c      	ldr	r3, [pc, #48]	; (80025c4 <I2C1_Init+0x50>)
 8002592:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002596:	611a      	str	r2, [r3, #16]
	  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002598:	4b0a      	ldr	r3, [pc, #40]	; (80025c4 <I2C1_Init+0x50>)
 800259a:	2200      	movs	r2, #0
 800259c:	615a      	str	r2, [r3, #20]
	  hi2c1.Init.OwnAddress2 = 0;
 800259e:	4b09      	ldr	r3, [pc, #36]	; (80025c4 <I2C1_Init+0x50>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	619a      	str	r2, [r3, #24]
	  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80025a4:	4b07      	ldr	r3, [pc, #28]	; (80025c4 <I2C1_Init+0x50>)
 80025a6:	2200      	movs	r2, #0
 80025a8:	61da      	str	r2, [r3, #28]
	  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80025aa:	4b06      	ldr	r3, [pc, #24]	; (80025c4 <I2C1_Init+0x50>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	621a      	str	r2, [r3, #32]
	  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80025b0:	4804      	ldr	r0, [pc, #16]	; (80025c4 <I2C1_Init+0x50>)
 80025b2:	f002 ff53 	bl	800545c <HAL_I2C_Init>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d001      	beq.n	80025c0 <I2C1_Init+0x4c>
	  {
	    Error_Handler();
 80025bc:	f000 faae 	bl	8002b1c <Error_Handler>
	  }

}
 80025c0:	bf00      	nop
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	20000de0 	.word	0x20000de0
 80025c8:	40005400 	.word	0x40005400
 80025cc:	00061a80 	.word	0x00061a80

080025d0 <I2C2_Init>:

void I2C2_Init(void){
 80025d0:	b580      	push	{r7, lr}
 80025d2:	af00      	add	r7, sp, #0
	  hi2c2.Instance = I2C2;
 80025d4:	4b12      	ldr	r3, [pc, #72]	; (8002620 <I2C2_Init+0x50>)
 80025d6:	4a13      	ldr	r2, [pc, #76]	; (8002624 <I2C2_Init+0x54>)
 80025d8:	601a      	str	r2, [r3, #0]
	  hi2c2.Init.ClockSpeed = 100000;
 80025da:	4b11      	ldr	r3, [pc, #68]	; (8002620 <I2C2_Init+0x50>)
 80025dc:	4a12      	ldr	r2, [pc, #72]	; (8002628 <I2C2_Init+0x58>)
 80025de:	605a      	str	r2, [r3, #4]
	  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80025e0:	4b0f      	ldr	r3, [pc, #60]	; (8002620 <I2C2_Init+0x50>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	609a      	str	r2, [r3, #8]
	  hi2c2.Init.OwnAddress1 = 0;
 80025e6:	4b0e      	ldr	r3, [pc, #56]	; (8002620 <I2C2_Init+0x50>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	60da      	str	r2, [r3, #12]
	  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80025ec:	4b0c      	ldr	r3, [pc, #48]	; (8002620 <I2C2_Init+0x50>)
 80025ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80025f2:	611a      	str	r2, [r3, #16]
	  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80025f4:	4b0a      	ldr	r3, [pc, #40]	; (8002620 <I2C2_Init+0x50>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	615a      	str	r2, [r3, #20]
	  hi2c2.Init.OwnAddress2 = 0;
 80025fa:	4b09      	ldr	r3, [pc, #36]	; (8002620 <I2C2_Init+0x50>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	619a      	str	r2, [r3, #24]
	  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002600:	4b07      	ldr	r3, [pc, #28]	; (8002620 <I2C2_Init+0x50>)
 8002602:	2200      	movs	r2, #0
 8002604:	61da      	str	r2, [r3, #28]
	  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002606:	4b06      	ldr	r3, [pc, #24]	; (8002620 <I2C2_Init+0x50>)
 8002608:	2200      	movs	r2, #0
 800260a:	621a      	str	r2, [r3, #32]
	  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800260c:	4804      	ldr	r0, [pc, #16]	; (8002620 <I2C2_Init+0x50>)
 800260e:	f002 ff25 	bl	800545c <HAL_I2C_Init>
 8002612:	4603      	mov	r3, r0
 8002614:	2b00      	cmp	r3, #0
 8002616:	d001      	beq.n	800261c <I2C2_Init+0x4c>
	  {
	    Error_Handler();
 8002618:	f000 fa80 	bl	8002b1c <Error_Handler>
	  }
}
 800261c:	bf00      	nop
 800261e:	bd80      	pop	{r7, pc}
 8002620:	20000e34 	.word	0x20000e34
 8002624:	40005800 	.word	0x40005800
 8002628:	000186a0 	.word	0x000186a0

0800262c <__io_putchar>:
#include "stm32f4xx_hal.h"
#include "usart.h"
#include <stdio.h>
#include <stdarg.h>

int __io_putchar(int ch){
 800262c:	b580      	push	{r7, lr}
 800262e:	b084      	sub	sp, #16
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
	uint8_t pchar = ch;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	b2db      	uxtb	r3, r3
 8002638:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart1, &pchar, 1, HAL_MAX_DELAY);
 800263a:	f107 010f 	add.w	r1, r7, #15
 800263e:	f04f 33ff 	mov.w	r3, #4294967295
 8002642:	2201      	movs	r2, #1
 8002644:	4803      	ldr	r0, [pc, #12]	; (8002654 <__io_putchar+0x28>)
 8002646:	f007 fc3b 	bl	8009ec0 <HAL_UART_Transmit>
	return ch;
 800264a:	687b      	ldr	r3, [r7, #4]
}
 800264c:	4618      	mov	r0, r3
 800264e:	3710      	adds	r7, #16
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}
 8002654:	20001070 	.word	0x20001070

08002658 <_log>:

void _log(Log_Subsystem_t subsystem, const char* msg, ...){
 8002658:	b40e      	push	{r1, r2, r3}
 800265a:	b580      	push	{r7, lr}
 800265c:	b085      	sub	sp, #20
 800265e:	af00      	add	r7, sp, #0
 8002660:	4603      	mov	r3, r0
 8002662:	71fb      	strb	r3, [r7, #7]
    va_list args;
	va_start(args, msg);
 8002664:	f107 0320 	add.w	r3, r7, #32
 8002668:	60fb      	str	r3, [r7, #12]
	switch(subsystem){
 800266a:	79fb      	ldrb	r3, [r7, #7]
 800266c:	2b05      	cmp	r3, #5
 800266e:	d827      	bhi.n	80026c0 <_log+0x68>
 8002670:	a201      	add	r2, pc, #4	; (adr r2, 8002678 <_log+0x20>)
 8002672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002676:	bf00      	nop
 8002678:	08002691 	.word	0x08002691
 800267c:	08002699 	.word	0x08002699
 8002680:	080026a1 	.word	0x080026a1
 8002684:	080026a9 	.word	0x080026a9
 8002688:	080026b1 	.word	0x080026b1
 800268c:	080026b9 	.word	0x080026b9
		case(log_i2c):
			printf("Debug Subsystem I2C: ");
 8002690:	4816      	ldr	r0, [pc, #88]	; (80026ec <_log+0x94>)
 8002692:	f00b fecd 	bl	800e430 <iprintf>
				break;
 8002696:	e016      	b.n	80026c6 <_log+0x6e>
		case(log_lps22hh):
			printf("Debug Subsystem LPS22HH: ");
 8002698:	4815      	ldr	r0, [pc, #84]	; (80026f0 <_log+0x98>)
 800269a:	f00b fec9 	bl	800e430 <iprintf>
				break;
 800269e:	e012      	b.n	80026c6 <_log+0x6e>
		case(log_iis2mdc):
			printf("Debug Subsystem IIS2MDC: ");
 80026a0:	4814      	ldr	r0, [pc, #80]	; (80026f4 <_log+0x9c>)
 80026a2:	f00b fec5 	bl	800e430 <iprintf>
				break;
 80026a6:	e00e      	b.n	80026c6 <_log+0x6e>
		case(log_hts221):
			printf("Debug Subsystem HTS221: ");
 80026a8:	4813      	ldr	r0, [pc, #76]	; (80026f8 <_log+0xa0>)
 80026aa:	f00b fec1 	bl	800e430 <iprintf>
				break;
 80026ae:	e00a      	b.n	80026c6 <_log+0x6e>
		case(log_ism330dhcx):
			printf("Debug Subsystem ISM330DHCX: ");
 80026b0:	4812      	ldr	r0, [pc, #72]	; (80026fc <_log+0xa4>)
 80026b2:	f00b febd 	bl	800e430 <iprintf>
				break;
 80026b6:	e006      	b.n	80026c6 <_log+0x6e>
		case(log_mcp23017):
			printf("Debug Subsystem MCP23017: ");
 80026b8:	4811      	ldr	r0, [pc, #68]	; (8002700 <_log+0xa8>)
 80026ba:	f00b feb9 	bl	800e430 <iprintf>
		        break;
 80026be:	e002      	b.n	80026c6 <_log+0x6e>
		default:
			printf("Unknown Debug Subsystem: ");
 80026c0:	4810      	ldr	r0, [pc, #64]	; (8002704 <_log+0xac>)
 80026c2:	f00b feb5 	bl	800e430 <iprintf>
	}
	vfprintf(stdout, msg, args);
 80026c6:	4b10      	ldr	r3, [pc, #64]	; (8002708 <_log+0xb0>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	68fa      	ldr	r2, [r7, #12]
 80026ce:	69f9      	ldr	r1, [r7, #28]
 80026d0:	4618      	mov	r0, r3
 80026d2:	f00b fd0f 	bl	800e0f4 <vfiprintf>
	printf("\n");
 80026d6:	200a      	movs	r0, #10
 80026d8:	f00b fec2 	bl	800e460 <putchar>
	va_end(args);
}
 80026dc:	bf00      	nop
 80026de:	3714      	adds	r7, #20
 80026e0:	46bd      	mov	sp, r7
 80026e2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80026e6:	b003      	add	sp, #12
 80026e8:	4770      	bx	lr
 80026ea:	bf00      	nop
 80026ec:	0800f108 	.word	0x0800f108
 80026f0:	0800f120 	.word	0x0800f120
 80026f4:	0800f13c 	.word	0x0800f13c
 80026f8:	0800f158 	.word	0x0800f158
 80026fc:	0800f174 	.word	0x0800f174
 8002700:	0800f194 	.word	0x0800f194
 8002704:	0800f1b0 	.word	0x0800f1b0
 8002708:	20000324 	.word	0x20000324

0800270c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002710:	f001 f9b2 	bl	8003a78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002714:	f000 f80a 	bl	800272c <SystemClock_Config>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */

  /* USER CODE BEGIN 2 */
  InitScreen();
 8002718:	f000 f870 	bl	80027fc <InitScreen>
  KeyPadInit();
 800271c:	f7fe fd8a 	bl	8001234 <KeyPadInit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	 UpdateKeyPadTxBuffers();
 8002720:	f7fe fdbe 	bl	80012a0 <UpdateKeyPadTxBuffers>
	 KeyPadSendData();
 8002724:	f7ff fb6c 	bl	8001e00 <KeyPadSendData>
	 UpdateKeyPadTxBuffers();
 8002728:	e7fa      	b.n	8002720 <main+0x14>
	...

0800272c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b094      	sub	sp, #80	; 0x50
 8002730:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002732:	f107 0320 	add.w	r3, r7, #32
 8002736:	2230      	movs	r2, #48	; 0x30
 8002738:	2100      	movs	r1, #0
 800273a:	4618      	mov	r0, r3
 800273c:	f00b fb78 	bl	800de30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002740:	f107 030c 	add.w	r3, r7, #12
 8002744:	2200      	movs	r2, #0
 8002746:	601a      	str	r2, [r3, #0]
 8002748:	605a      	str	r2, [r3, #4]
 800274a:	609a      	str	r2, [r3, #8]
 800274c:	60da      	str	r2, [r3, #12]
 800274e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002750:	2300      	movs	r3, #0
 8002752:	60bb      	str	r3, [r7, #8]
 8002754:	4b27      	ldr	r3, [pc, #156]	; (80027f4 <SystemClock_Config+0xc8>)
 8002756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002758:	4a26      	ldr	r2, [pc, #152]	; (80027f4 <SystemClock_Config+0xc8>)
 800275a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800275e:	6413      	str	r3, [r2, #64]	; 0x40
 8002760:	4b24      	ldr	r3, [pc, #144]	; (80027f4 <SystemClock_Config+0xc8>)
 8002762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002764:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002768:	60bb      	str	r3, [r7, #8]
 800276a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800276c:	2300      	movs	r3, #0
 800276e:	607b      	str	r3, [r7, #4]
 8002770:	4b21      	ldr	r3, [pc, #132]	; (80027f8 <SystemClock_Config+0xcc>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a20      	ldr	r2, [pc, #128]	; (80027f8 <SystemClock_Config+0xcc>)
 8002776:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800277a:	6013      	str	r3, [r2, #0]
 800277c:	4b1e      	ldr	r3, [pc, #120]	; (80027f8 <SystemClock_Config+0xcc>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002784:	607b      	str	r3, [r7, #4]
 8002786:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002788:	2301      	movs	r3, #1
 800278a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800278c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002790:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002792:	2302      	movs	r3, #2
 8002794:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002796:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800279a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800279c:	2319      	movs	r3, #25
 800279e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80027a0:	23c0      	movs	r3, #192	; 0xc0
 80027a2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80027a4:	2302      	movs	r3, #2
 80027a6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80027a8:	2304      	movs	r3, #4
 80027aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80027ac:	f107 0320 	add.w	r3, r7, #32
 80027b0:	4618      	mov	r0, r3
 80027b2:	f005 f8c9 	bl	8007948 <HAL_RCC_OscConfig>
 80027b6:	4603      	mov	r3, r0
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d001      	beq.n	80027c0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80027bc:	f000 f9ae 	bl	8002b1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80027c0:	230f      	movs	r3, #15
 80027c2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80027c4:	2302      	movs	r3, #2
 80027c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80027c8:	2300      	movs	r3, #0
 80027ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80027cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027d0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80027d2:	2300      	movs	r3, #0
 80027d4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80027d6:	f107 030c 	add.w	r3, r7, #12
 80027da:	2103      	movs	r1, #3
 80027dc:	4618      	mov	r0, r3
 80027de:	f005 fb2b 	bl	8007e38 <HAL_RCC_ClockConfig>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d001      	beq.n	80027ec <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80027e8:	f000 f998 	bl	8002b1c <Error_Handler>
  }
}
 80027ec:	bf00      	nop
 80027ee:	3750      	adds	r7, #80	; 0x50
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}
 80027f4:	40023800 	.word	0x40023800
 80027f8:	40007000 	.word	0x40007000

080027fc <InitScreen>:

/* USER CODE BEGIN 4 */

void InitScreen(){
 80027fc:	b5b0      	push	{r4, r5, r7, lr}
 80027fe:	b08e      	sub	sp, #56	; 0x38
 8002800:	af06      	add	r7, sp, #24
	ILI9341_Init_Struct_t Settings = {
 8002802:	4a9c      	ldr	r2, [pc, #624]	; (8002a74 <InitScreen+0x278>)
 8002804:	f107 0314 	add.w	r3, r7, #20
 8002808:	ca07      	ldmia	r2, {r0, r1, r2}
 800280a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			.Orientation = XYExchangeXYMirror,
			.ScreenHeight = 240,
			.ScreenWidth = 320
	};
	ILI9341_Init(Settings, &LCD, ILI931_IO);
 800280e:	4b9a      	ldr	r3, [pc, #616]	; (8002a78 <InitScreen+0x27c>)
 8002810:	466c      	mov	r4, sp
 8002812:	461d      	mov	r5, r3
 8002814:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002816:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002818:	682b      	ldr	r3, [r5, #0]
 800281a:	6023      	str	r3, [r4, #0]
 800281c:	4b97      	ldr	r3, [pc, #604]	; (8002a7c <InitScreen+0x280>)
 800281e:	f107 0214 	add.w	r2, r7, #20
 8002822:	ca07      	ldmia	r2, {r0, r1, r2}
 8002824:	f7fd ff94 	bl	8000750 <ILI9341_Init>
    ILI9341_Color_t Color = {
 8002828:	2300      	movs	r3, #0
 800282a:	743b      	strb	r3, [r7, #16]
 800282c:	2300      	movs	r3, #0
 800282e:	747b      	strb	r3, [r7, #17]
 8002830:	2300      	movs	r3, #0
 8002832:	74bb      	strb	r3, [r7, #18]
    		.red = 0,
    		.green = 0,
			.blue = 0
    };
    ILI9341_FillSceen(&LCD, Color);
 8002834:	6939      	ldr	r1, [r7, #16]
 8002836:	4891      	ldr	r0, [pc, #580]	; (8002a7c <InitScreen+0x280>)
 8002838:	f7fe f8d3 	bl	80009e2 <ILI9341_FillSceen>
    ILI9341_Image_t Image = {
 800283c:	4b90      	ldr	r3, [pc, #576]	; (8002a80 <InitScreen+0x284>)
 800283e:	463c      	mov	r4, r7
 8002840:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002842:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    		.Height = 62,
			.Width = 62,
			.ImageLength = 62*62*3,
			.ImageData = char_image
    };
    HAL_Delay(100);
 8002846:	2064      	movs	r0, #100	; 0x64
 8002848:	f001 f988 	bl	8003b5c <HAL_Delay>
    LCD.Cursor.X = 40 - Image.Width / 2;
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	085b      	lsrs	r3, r3, #1
 8002850:	b29b      	uxth	r3, r3
 8002852:	f1c3 0328 	rsb	r3, r3, #40	; 0x28
 8002856:	b29b      	uxth	r3, r3
 8002858:	b21a      	sxth	r2, r3
 800285a:	4b88      	ldr	r3, [pc, #544]	; (8002a7c <InitScreen+0x280>)
 800285c:	819a      	strh	r2, [r3, #12]
    LCD.Cursor.Y = 40 - Image.Height / 2;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	085b      	lsrs	r3, r3, #1
 8002862:	b29b      	uxth	r3, r3
 8002864:	f1c3 0328 	rsb	r3, r3, #40	; 0x28
 8002868:	b29b      	uxth	r3, r3
 800286a:	b21a      	sxth	r2, r3
 800286c:	4b83      	ldr	r3, [pc, #524]	; (8002a7c <InitScreen+0x280>)
 800286e:	81da      	strh	r2, [r3, #14]
    ILI9341_DisplayImage(&LCD, Image);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	9300      	str	r3, [sp, #0]
 8002874:	463b      	mov	r3, r7
 8002876:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002878:	4880      	ldr	r0, [pc, #512]	; (8002a7c <InitScreen+0x280>)
 800287a:	f7fe f8df 	bl	8000a3c <ILI9341_DisplayImage>

    Image.ImageData = bag_image;
 800287e:	4b81      	ldr	r3, [pc, #516]	; (8002a84 <InitScreen+0x288>)
 8002880:	60fb      	str	r3, [r7, #12]
    LCD.Cursor.X = 120 - Image.Width / 2;
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	085b      	lsrs	r3, r3, #1
 8002886:	b29b      	uxth	r3, r3
 8002888:	f1c3 0378 	rsb	r3, r3, #120	; 0x78
 800288c:	b29b      	uxth	r3, r3
 800288e:	b21a      	sxth	r2, r3
 8002890:	4b7a      	ldr	r3, [pc, #488]	; (8002a7c <InitScreen+0x280>)
 8002892:	819a      	strh	r2, [r3, #12]
    LCD.Cursor.Y = 40 - Image.Height / 2;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	085b      	lsrs	r3, r3, #1
 8002898:	b29b      	uxth	r3, r3
 800289a:	f1c3 0328 	rsb	r3, r3, #40	; 0x28
 800289e:	b29b      	uxth	r3, r3
 80028a0:	b21a      	sxth	r2, r3
 80028a2:	4b76      	ldr	r3, [pc, #472]	; (8002a7c <InitScreen+0x280>)
 80028a4:	81da      	strh	r2, [r3, #14]
    ILI9341_DisplayImage(&LCD, Image);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	9300      	str	r3, [sp, #0]
 80028aa:	463b      	mov	r3, r7
 80028ac:	cb0e      	ldmia	r3, {r1, r2, r3}
 80028ae:	4873      	ldr	r0, [pc, #460]	; (8002a7c <InitScreen+0x280>)
 80028b0:	f7fe f8c4 	bl	8000a3c <ILI9341_DisplayImage>

    Image.ImageData = mounts_image;
 80028b4:	4b74      	ldr	r3, [pc, #464]	; (8002a88 <InitScreen+0x28c>)
 80028b6:	60fb      	str	r3, [r7, #12]
    LCD.Cursor.X = 200 - Image.Width / 2;
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	085b      	lsrs	r3, r3, #1
 80028bc:	b29b      	uxth	r3, r3
 80028be:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
 80028c2:	b29b      	uxth	r3, r3
 80028c4:	b21a      	sxth	r2, r3
 80028c6:	4b6d      	ldr	r3, [pc, #436]	; (8002a7c <InitScreen+0x280>)
 80028c8:	819a      	strh	r2, [r3, #12]
    LCD.Cursor.Y = 40 - Image.Height / 2;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	085b      	lsrs	r3, r3, #1
 80028ce:	b29b      	uxth	r3, r3
 80028d0:	f1c3 0328 	rsb	r3, r3, #40	; 0x28
 80028d4:	b29b      	uxth	r3, r3
 80028d6:	b21a      	sxth	r2, r3
 80028d8:	4b68      	ldr	r3, [pc, #416]	; (8002a7c <InitScreen+0x280>)
 80028da:	81da      	strh	r2, [r3, #14]
    ILI9341_DisplayImage(&LCD, Image);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	9300      	str	r3, [sp, #0]
 80028e0:	463b      	mov	r3, r7
 80028e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80028e4:	4865      	ldr	r0, [pc, #404]	; (8002a7c <InitScreen+0x280>)
 80028e6:	f7fe f8a9 	bl	8000a3c <ILI9341_DisplayImage>

    Image.ImageData = LFD_image;
 80028ea:	4b68      	ldr	r3, [pc, #416]	; (8002a8c <InitScreen+0x290>)
 80028ec:	60fb      	str	r3, [r7, #12]
    LCD.Cursor.X = 280 - Image.Width / 2;
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	085b      	lsrs	r3, r3, #1
 80028f2:	b29b      	uxth	r3, r3
 80028f4:	f5c3 738c 	rsb	r3, r3, #280	; 0x118
 80028f8:	b29b      	uxth	r3, r3
 80028fa:	b21a      	sxth	r2, r3
 80028fc:	4b5f      	ldr	r3, [pc, #380]	; (8002a7c <InitScreen+0x280>)
 80028fe:	819a      	strh	r2, [r3, #12]
    LCD.Cursor.Y = 40 - Image.Height / 2;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	085b      	lsrs	r3, r3, #1
 8002904:	b29b      	uxth	r3, r3
 8002906:	f1c3 0328 	rsb	r3, r3, #40	; 0x28
 800290a:	b29b      	uxth	r3, r3
 800290c:	b21a      	sxth	r2, r3
 800290e:	4b5b      	ldr	r3, [pc, #364]	; (8002a7c <InitScreen+0x280>)
 8002910:	81da      	strh	r2, [r3, #14]
    ILI9341_DisplayImage(&LCD, Image);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	9300      	str	r3, [sp, #0]
 8002916:	463b      	mov	r3, r7
 8002918:	cb0e      	ldmia	r3, {r1, r2, r3}
 800291a:	4858      	ldr	r0, [pc, #352]	; (8002a7c <InitScreen+0x280>)
 800291c:	f7fe f88e 	bl	8000a3c <ILI9341_DisplayImage>

    Image.ImageData = spells_image;
 8002920:	4b5b      	ldr	r3, [pc, #364]	; (8002a90 <InitScreen+0x294>)
 8002922:	60fb      	str	r3, [r7, #12]
    LCD.Cursor.X = 40 - Image.Width / 2;
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	085b      	lsrs	r3, r3, #1
 8002928:	b29b      	uxth	r3, r3
 800292a:	f1c3 0328 	rsb	r3, r3, #40	; 0x28
 800292e:	b29b      	uxth	r3, r3
 8002930:	b21a      	sxth	r2, r3
 8002932:	4b52      	ldr	r3, [pc, #328]	; (8002a7c <InitScreen+0x280>)
 8002934:	819a      	strh	r2, [r3, #12]
    LCD.Cursor.Y = 120 - Image.Height / 2;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	085b      	lsrs	r3, r3, #1
 800293a:	b29b      	uxth	r3, r3
 800293c:	f1c3 0378 	rsb	r3, r3, #120	; 0x78
 8002940:	b29b      	uxth	r3, r3
 8002942:	b21a      	sxth	r2, r3
 8002944:	4b4d      	ldr	r3, [pc, #308]	; (8002a7c <InitScreen+0x280>)
 8002946:	81da      	strh	r2, [r3, #14]
    ILI9341_DisplayImage(&LCD, Image);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	9300      	str	r3, [sp, #0]
 800294c:	463b      	mov	r3, r7
 800294e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002950:	484a      	ldr	r0, [pc, #296]	; (8002a7c <InitScreen+0x280>)
 8002952:	f7fe f873 	bl	8000a3c <ILI9341_DisplayImage>

    Image.ImageData = talents_image;
 8002956:	4b4f      	ldr	r3, [pc, #316]	; (8002a94 <InitScreen+0x298>)
 8002958:	60fb      	str	r3, [r7, #12]
    LCD.Cursor.X = 120 - Image.Width / 2;
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	085b      	lsrs	r3, r3, #1
 800295e:	b29b      	uxth	r3, r3
 8002960:	f1c3 0378 	rsb	r3, r3, #120	; 0x78
 8002964:	b29b      	uxth	r3, r3
 8002966:	b21a      	sxth	r2, r3
 8002968:	4b44      	ldr	r3, [pc, #272]	; (8002a7c <InitScreen+0x280>)
 800296a:	819a      	strh	r2, [r3, #12]
    LCD.Cursor.Y = 120 - Image.Height / 2;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	085b      	lsrs	r3, r3, #1
 8002970:	b29b      	uxth	r3, r3
 8002972:	f1c3 0378 	rsb	r3, r3, #120	; 0x78
 8002976:	b29b      	uxth	r3, r3
 8002978:	b21a      	sxth	r2, r3
 800297a:	4b40      	ldr	r3, [pc, #256]	; (8002a7c <InitScreen+0x280>)
 800297c:	81da      	strh	r2, [r3, #14]
    ILI9341_DisplayImage(&LCD, Image);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	9300      	str	r3, [sp, #0]
 8002982:	463b      	mov	r3, r7
 8002984:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002986:	483d      	ldr	r0, [pc, #244]	; (8002a7c <InitScreen+0x280>)
 8002988:	f7fe f858 	bl	8000a3c <ILI9341_DisplayImage>

    Image.ImageData = social_image;
 800298c:	4b42      	ldr	r3, [pc, #264]	; (8002a98 <InitScreen+0x29c>)
 800298e:	60fb      	str	r3, [r7, #12]
    LCD.Cursor.X = 200 - Image.Width / 2;
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	085b      	lsrs	r3, r3, #1
 8002994:	b29b      	uxth	r3, r3
 8002996:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
 800299a:	b29b      	uxth	r3, r3
 800299c:	b21a      	sxth	r2, r3
 800299e:	4b37      	ldr	r3, [pc, #220]	; (8002a7c <InitScreen+0x280>)
 80029a0:	819a      	strh	r2, [r3, #12]
    LCD.Cursor.Y = 120 - Image.Height / 2;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	085b      	lsrs	r3, r3, #1
 80029a6:	b29b      	uxth	r3, r3
 80029a8:	f1c3 0378 	rsb	r3, r3, #120	; 0x78
 80029ac:	b29b      	uxth	r3, r3
 80029ae:	b21a      	sxth	r2, r3
 80029b0:	4b32      	ldr	r3, [pc, #200]	; (8002a7c <InitScreen+0x280>)
 80029b2:	81da      	strh	r2, [r3, #14]
    ILI9341_DisplayImage(&LCD, Image);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	9300      	str	r3, [sp, #0]
 80029b8:	463b      	mov	r3, r7
 80029ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029bc:	482f      	ldr	r0, [pc, #188]	; (8002a7c <InitScreen+0x280>)
 80029be:	f7fe f83d 	bl	8000a3c <ILI9341_DisplayImage>

    Image.ImageData = guild_image;
 80029c2:	4b36      	ldr	r3, [pc, #216]	; (8002a9c <InitScreen+0x2a0>)
 80029c4:	60fb      	str	r3, [r7, #12]
    LCD.Cursor.X = 280 - Image.Width / 2;
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	085b      	lsrs	r3, r3, #1
 80029ca:	b29b      	uxth	r3, r3
 80029cc:	f5c3 738c 	rsb	r3, r3, #280	; 0x118
 80029d0:	b29b      	uxth	r3, r3
 80029d2:	b21a      	sxth	r2, r3
 80029d4:	4b29      	ldr	r3, [pc, #164]	; (8002a7c <InitScreen+0x280>)
 80029d6:	819a      	strh	r2, [r3, #12]
    LCD.Cursor.Y = 120 - Image.Height / 2;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	085b      	lsrs	r3, r3, #1
 80029dc:	b29b      	uxth	r3, r3
 80029de:	f1c3 0378 	rsb	r3, r3, #120	; 0x78
 80029e2:	b29b      	uxth	r3, r3
 80029e4:	b21a      	sxth	r2, r3
 80029e6:	4b25      	ldr	r3, [pc, #148]	; (8002a7c <InitScreen+0x280>)
 80029e8:	81da      	strh	r2, [r3, #14]
    ILI9341_DisplayImage(&LCD, Image);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	9300      	str	r3, [sp, #0]
 80029ee:	463b      	mov	r3, r7
 80029f0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029f2:	4822      	ldr	r0, [pc, #136]	; (8002a7c <InitScreen+0x280>)
 80029f4:	f7fe f822 	bl	8000a3c <ILI9341_DisplayImage>

    Image.ImageData = map_image;
 80029f8:	4b29      	ldr	r3, [pc, #164]	; (8002aa0 <InitScreen+0x2a4>)
 80029fa:	60fb      	str	r3, [r7, #12]
    LCD.Cursor.X = 40 - Image.Width / 2;
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	085b      	lsrs	r3, r3, #1
 8002a00:	b29b      	uxth	r3, r3
 8002a02:	f1c3 0328 	rsb	r3, r3, #40	; 0x28
 8002a06:	b29b      	uxth	r3, r3
 8002a08:	b21a      	sxth	r2, r3
 8002a0a:	4b1c      	ldr	r3, [pc, #112]	; (8002a7c <InitScreen+0x280>)
 8002a0c:	819a      	strh	r2, [r3, #12]
    LCD.Cursor.Y = 200 - Image.Height / 2;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	085b      	lsrs	r3, r3, #1
 8002a12:	b29b      	uxth	r3, r3
 8002a14:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
 8002a18:	b29b      	uxth	r3, r3
 8002a1a:	b21a      	sxth	r2, r3
 8002a1c:	4b17      	ldr	r3, [pc, #92]	; (8002a7c <InitScreen+0x280>)
 8002a1e:	81da      	strh	r2, [r3, #14]
    ILI9341_DisplayImage(&LCD, Image);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	9300      	str	r3, [sp, #0]
 8002a24:	463b      	mov	r3, r7
 8002a26:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a28:	4814      	ldr	r0, [pc, #80]	; (8002a7c <InitScreen+0x280>)
 8002a2a:	f7fe f807 	bl	8000a3c <ILI9341_DisplayImage>

    Image.ImageData = achievements_image;
 8002a2e:	4b1d      	ldr	r3, [pc, #116]	; (8002aa4 <InitScreen+0x2a8>)
 8002a30:	60fb      	str	r3, [r7, #12]
    LCD.Cursor.X = 120 - Image.Width / 2;
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	085b      	lsrs	r3, r3, #1
 8002a36:	b29b      	uxth	r3, r3
 8002a38:	f1c3 0378 	rsb	r3, r3, #120	; 0x78
 8002a3c:	b29b      	uxth	r3, r3
 8002a3e:	b21a      	sxth	r2, r3
 8002a40:	4b0e      	ldr	r3, [pc, #56]	; (8002a7c <InitScreen+0x280>)
 8002a42:	819a      	strh	r2, [r3, #12]
    LCD.Cursor.Y = 200 - Image.Height / 2;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	085b      	lsrs	r3, r3, #1
 8002a48:	b29b      	uxth	r3, r3
 8002a4a:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
 8002a4e:	b29b      	uxth	r3, r3
 8002a50:	b21a      	sxth	r2, r3
 8002a52:	4b0a      	ldr	r3, [pc, #40]	; (8002a7c <InitScreen+0x280>)
 8002a54:	81da      	strh	r2, [r3, #14]
    ILI9341_DisplayImage(&LCD, Image);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	9300      	str	r3, [sp, #0]
 8002a5a:	463b      	mov	r3, r7
 8002a5c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a5e:	4807      	ldr	r0, [pc, #28]	; (8002a7c <InitScreen+0x280>)
 8002a60:	f7fd ffec 	bl	8000a3c <ILI9341_DisplayImage>

    Image.ImageData = adventureguide_image;
 8002a64:	4b10      	ldr	r3, [pc, #64]	; (8002aa8 <InitScreen+0x2ac>)
 8002a66:	60fb      	str	r3, [r7, #12]
    LCD.Cursor.X = 200 - Image.Width / 2;
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	085b      	lsrs	r3, r3, #1
 8002a6c:	b29b      	uxth	r3, r3
 8002a6e:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
 8002a72:	e01b      	b.n	8002aac <InitScreen+0x2b0>
 8002a74:	0800f1cc 	.word	0x0800f1cc
 8002a78:	20000014 	.word	0x20000014
 8002a7c:	20000f48 	.word	0x20000f48
 8002a80:	0800f1d8 	.word	0x0800f1d8
 8002a84:	08012014 	.word	0x08012014
 8002a88:	08014d20 	.word	0x08014d20
 8002a8c:	08017a2c 	.word	0x08017a2c
 8002a90:	0801a738 	.word	0x0801a738
 8002a94:	0801d444 	.word	0x0801d444
 8002a98:	08020150 	.word	0x08020150
 8002a9c:	08022e5c 	.word	0x08022e5c
 8002aa0:	08025b68 	.word	0x08025b68
 8002aa4:	08028874 	.word	0x08028874
 8002aa8:	0802b580 	.word	0x0802b580
 8002aac:	b29b      	uxth	r3, r3
 8002aae:	b21a      	sxth	r2, r3
 8002ab0:	4b18      	ldr	r3, [pc, #96]	; (8002b14 <InitScreen+0x318>)
 8002ab2:	819a      	strh	r2, [r3, #12]
    LCD.Cursor.Y = 200 - Image.Height / 2;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	085b      	lsrs	r3, r3, #1
 8002ab8:	b29b      	uxth	r3, r3
 8002aba:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
 8002abe:	b29b      	uxth	r3, r3
 8002ac0:	b21a      	sxth	r2, r3
 8002ac2:	4b14      	ldr	r3, [pc, #80]	; (8002b14 <InitScreen+0x318>)
 8002ac4:	81da      	strh	r2, [r3, #14]
    ILI9341_DisplayImage(&LCD, Image);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	9300      	str	r3, [sp, #0]
 8002aca:	463b      	mov	r3, r7
 8002acc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ace:	4811      	ldr	r0, [pc, #68]	; (8002b14 <InitScreen+0x318>)
 8002ad0:	f7fd ffb4 	bl	8000a3c <ILI9341_DisplayImage>

    Image.ImageData = menu_image;
 8002ad4:	4b10      	ldr	r3, [pc, #64]	; (8002b18 <InitScreen+0x31c>)
 8002ad6:	60fb      	str	r3, [r7, #12]
    LCD.Cursor.X = 280 - Image.Width / 2;
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	085b      	lsrs	r3, r3, #1
 8002adc:	b29b      	uxth	r3, r3
 8002ade:	f5c3 738c 	rsb	r3, r3, #280	; 0x118
 8002ae2:	b29b      	uxth	r3, r3
 8002ae4:	b21a      	sxth	r2, r3
 8002ae6:	4b0b      	ldr	r3, [pc, #44]	; (8002b14 <InitScreen+0x318>)
 8002ae8:	819a      	strh	r2, [r3, #12]
    LCD.Cursor.Y = 200 - Image.Height / 2;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	085b      	lsrs	r3, r3, #1
 8002aee:	b29b      	uxth	r3, r3
 8002af0:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
 8002af4:	b29b      	uxth	r3, r3
 8002af6:	b21a      	sxth	r2, r3
 8002af8:	4b06      	ldr	r3, [pc, #24]	; (8002b14 <InitScreen+0x318>)
 8002afa:	81da      	strh	r2, [r3, #14]
    ILI9341_DisplayImage(&LCD, Image);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	9300      	str	r3, [sp, #0]
 8002b00:	463b      	mov	r3, r7
 8002b02:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b04:	4803      	ldr	r0, [pc, #12]	; (8002b14 <InitScreen+0x318>)
 8002b06:	f7fd ff99 	bl	8000a3c <ILI9341_DisplayImage>
}
 8002b0a:	bf00      	nop
 8002b0c:	3720      	adds	r7, #32
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bdb0      	pop	{r4, r5, r7, pc}
 8002b12:	bf00      	nop
 8002b14:	20000f48 	.word	0x20000f48
 8002b18:	0802e28c 	.word	0x0802e28c

08002b1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b20:	b672      	cpsid	i
}
 8002b22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002b24:	e7fe      	b.n	8002b24 <Error_Handler+0x8>
	...

08002b28 <HAL_SPI_MspInit>:
  /* USER CODE END SPI1_Init 2 */

}

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b08a      	sub	sp, #40	; 0x28
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b30:	f107 0314 	add.w	r3, r7, #20
 8002b34:	2200      	movs	r2, #0
 8002b36:	601a      	str	r2, [r3, #0]
 8002b38:	605a      	str	r2, [r3, #4]
 8002b3a:	609a      	str	r2, [r3, #8]
 8002b3c:	60da      	str	r2, [r3, #12]
 8002b3e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a19      	ldr	r2, [pc, #100]	; (8002bac <HAL_SPI_MspInit+0x84>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d12b      	bne.n	8002ba2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	613b      	str	r3, [r7, #16]
 8002b4e:	4b18      	ldr	r3, [pc, #96]	; (8002bb0 <HAL_SPI_MspInit+0x88>)
 8002b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b52:	4a17      	ldr	r2, [pc, #92]	; (8002bb0 <HAL_SPI_MspInit+0x88>)
 8002b54:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002b58:	6453      	str	r3, [r2, #68]	; 0x44
 8002b5a:	4b15      	ldr	r3, [pc, #84]	; (8002bb0 <HAL_SPI_MspInit+0x88>)
 8002b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b5e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b62:	613b      	str	r3, [r7, #16]
 8002b64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b66:	2300      	movs	r3, #0
 8002b68:	60fb      	str	r3, [r7, #12]
 8002b6a:	4b11      	ldr	r3, [pc, #68]	; (8002bb0 <HAL_SPI_MspInit+0x88>)
 8002b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b6e:	4a10      	ldr	r2, [pc, #64]	; (8002bb0 <HAL_SPI_MspInit+0x88>)
 8002b70:	f043 0301 	orr.w	r3, r3, #1
 8002b74:	6313      	str	r3, [r2, #48]	; 0x30
 8002b76:	4b0e      	ldr	r3, [pc, #56]	; (8002bb0 <HAL_SPI_MspInit+0x88>)
 8002b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b7a:	f003 0301 	and.w	r3, r3, #1
 8002b7e:	60fb      	str	r3, [r7, #12]
 8002b80:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002b82:	23e0      	movs	r3, #224	; 0xe0
 8002b84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b86:	2302      	movs	r3, #2
 8002b88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002b92:	2305      	movs	r3, #5
 8002b94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b96:	f107 0314 	add.w	r3, r7, #20
 8002b9a:	4619      	mov	r1, r3
 8002b9c:	4805      	ldr	r0, [pc, #20]	; (8002bb4 <HAL_SPI_MspInit+0x8c>)
 8002b9e:	f002 f9db 	bl	8004f58 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002ba2:	bf00      	nop
 8002ba4:	3728      	adds	r7, #40	; 0x28
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	40013000 	.word	0x40013000
 8002bb0:	40023800 	.word	0x40023800
 8002bb4:	40020000 	.word	0x40020000

08002bb8 <ILI9341_SPI_Init>:
  /* USER CODE END SPI1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void ILI9341_SPI_Init(void){
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	af00      	add	r7, sp, #0
	  hspi1.Instance = SPI1;
 8002bbc:	4b17      	ldr	r3, [pc, #92]	; (8002c1c <ILI9341_SPI_Init+0x64>)
 8002bbe:	4a18      	ldr	r2, [pc, #96]	; (8002c20 <ILI9341_SPI_Init+0x68>)
 8002bc0:	601a      	str	r2, [r3, #0]
	  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002bc2:	4b16      	ldr	r3, [pc, #88]	; (8002c1c <ILI9341_SPI_Init+0x64>)
 8002bc4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002bc8:	605a      	str	r2, [r3, #4]
	  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002bca:	4b14      	ldr	r3, [pc, #80]	; (8002c1c <ILI9341_SPI_Init+0x64>)
 8002bcc:	2200      	movs	r2, #0
 8002bce:	609a      	str	r2, [r3, #8]
	  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002bd0:	4b12      	ldr	r3, [pc, #72]	; (8002c1c <ILI9341_SPI_Init+0x64>)
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	60da      	str	r2, [r3, #12]
	  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002bd6:	4b11      	ldr	r3, [pc, #68]	; (8002c1c <ILI9341_SPI_Init+0x64>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	611a      	str	r2, [r3, #16]
	  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002bdc:	4b0f      	ldr	r3, [pc, #60]	; (8002c1c <ILI9341_SPI_Init+0x64>)
 8002bde:	2200      	movs	r2, #0
 8002be0:	615a      	str	r2, [r3, #20]
	  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002be2:	4b0e      	ldr	r3, [pc, #56]	; (8002c1c <ILI9341_SPI_Init+0x64>)
 8002be4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002be8:	619a      	str	r2, [r3, #24]
	  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002bea:	4b0c      	ldr	r3, [pc, #48]	; (8002c1c <ILI9341_SPI_Init+0x64>)
 8002bec:	2218      	movs	r2, #24
 8002bee:	61da      	str	r2, [r3, #28]
	  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002bf0:	4b0a      	ldr	r3, [pc, #40]	; (8002c1c <ILI9341_SPI_Init+0x64>)
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	621a      	str	r2, [r3, #32]
	  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002bf6:	4b09      	ldr	r3, [pc, #36]	; (8002c1c <ILI9341_SPI_Init+0x64>)
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	625a      	str	r2, [r3, #36]	; 0x24
	  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002bfc:	4b07      	ldr	r3, [pc, #28]	; (8002c1c <ILI9341_SPI_Init+0x64>)
 8002bfe:	2200      	movs	r2, #0
 8002c00:	629a      	str	r2, [r3, #40]	; 0x28
	  hspi1.Init.CRCPolynomial = 10;
 8002c02:	4b06      	ldr	r3, [pc, #24]	; (8002c1c <ILI9341_SPI_Init+0x64>)
 8002c04:	220a      	movs	r2, #10
 8002c06:	62da      	str	r2, [r3, #44]	; 0x2c
	  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002c08:	4804      	ldr	r0, [pc, #16]	; (8002c1c <ILI9341_SPI_Init+0x64>)
 8002c0a:	f005 fae1 	bl	80081d0 <HAL_SPI_Init>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d001      	beq.n	8002c18 <ILI9341_SPI_Init+0x60>
	  {
	    Error_Handler();
 8002c14:	f7ff ff82 	bl	8002b1c <Error_Handler>
	  }
}
 8002c18:	bf00      	nop
 8002c1a:	bd80      	pop	{r7, pc}
 8002c1c:	20000f6c 	.word	0x20000f6c
 8002c20:	40013000 	.word	0x40013000

08002c24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b083      	sub	sp, #12
 8002c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	607b      	str	r3, [r7, #4]
 8002c2e:	4b10      	ldr	r3, [pc, #64]	; (8002c70 <HAL_MspInit+0x4c>)
 8002c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c32:	4a0f      	ldr	r2, [pc, #60]	; (8002c70 <HAL_MspInit+0x4c>)
 8002c34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c38:	6453      	str	r3, [r2, #68]	; 0x44
 8002c3a:	4b0d      	ldr	r3, [pc, #52]	; (8002c70 <HAL_MspInit+0x4c>)
 8002c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c42:	607b      	str	r3, [r7, #4]
 8002c44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c46:	2300      	movs	r3, #0
 8002c48:	603b      	str	r3, [r7, #0]
 8002c4a:	4b09      	ldr	r3, [pc, #36]	; (8002c70 <HAL_MspInit+0x4c>)
 8002c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4e:	4a08      	ldr	r2, [pc, #32]	; (8002c70 <HAL_MspInit+0x4c>)
 8002c50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c54:	6413      	str	r3, [r2, #64]	; 0x40
 8002c56:	4b06      	ldr	r3, [pc, #24]	; (8002c70 <HAL_MspInit+0x4c>)
 8002c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c5e:	603b      	str	r3, [r7, #0]
 8002c60:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c62:	bf00      	nop
 8002c64:	370c      	adds	r7, #12
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr
 8002c6e:	bf00      	nop
 8002c70:	40023800 	.word	0x40023800

08002c74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c74:	b480      	push	{r7}
 8002c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002c78:	e7fe      	b.n	8002c78 <NMI_Handler+0x4>

08002c7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c7a:	b480      	push	{r7}
 8002c7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c7e:	e7fe      	b.n	8002c7e <HardFault_Handler+0x4>

08002c80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c80:	b480      	push	{r7}
 8002c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c84:	e7fe      	b.n	8002c84 <MemManage_Handler+0x4>

08002c86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c86:	b480      	push	{r7}
 8002c88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c8a:	e7fe      	b.n	8002c8a <BusFault_Handler+0x4>

08002c8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c90:	e7fe      	b.n	8002c90 <UsageFault_Handler+0x4>

08002c92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c92:	b480      	push	{r7}
 8002c94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c96:	bf00      	nop
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9e:	4770      	bx	lr

08002ca0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ca4:	bf00      	nop
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr

08002cae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002cae:	b480      	push	{r7}
 8002cb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002cb2:	bf00      	nop
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cba:	4770      	bx	lr

08002cbc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002cc0:	f000 ff2c 	bl	8003b1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002cc4:	bf00      	nop
 8002cc6:	bd80      	pop	{r7, pc}

08002cc8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8002ccc:	4802      	ldr	r0, [pc, #8]	; (8002cd8 <DMA1_Stream0_IRQHandler+0x10>)
 8002cce:	f001 fecd 	bl	8004a6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002cd2:	bf00      	nop
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	bf00      	nop
 8002cd8:	20000e88 	.word	0x20000e88

08002cdc <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 8002ce0:	4802      	ldr	r0, [pc, #8]	; (8002cec <DMA1_Stream2_IRQHandler+0x10>)
 8002ce2:	f001 fec3 	bl	8004a6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8002ce6:	bf00      	nop
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	20000ee8 	.word	0x20000ee8

08002cf0 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 8002cf4:	4802      	ldr	r0, [pc, #8]	; (8002d00 <DMA1_Stream4_IRQHandler+0x10>)
 8002cf6:	f001 feb9 	bl	8004a6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8002cfa:	bf00      	nop
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	20001010 	.word	0x20001010

08002d04 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002d08:	4802      	ldr	r0, [pc, #8]	; (8002d14 <DMA2_Stream0_IRQHandler+0x10>)
 8002d0a:	f001 feaf 	bl	8004a6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002d0e:	bf00      	nop
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	bf00      	nop
 8002d14:	20000d80 	.word	0x20000d80

08002d18 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002d1c:	4802      	ldr	r0, [pc, #8]	; (8002d28 <OTG_FS_IRQHandler+0x10>)
 8002d1e:	f003 fcfe 	bl	800671e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002d22:	bf00      	nop
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop
 8002d28:	2000175c 	.word	0x2000175c

08002d2c <HAL_I2C_MemRxCpltCallback>:

/* USER CODE BEGIN 1 */
void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c){
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b082      	sub	sp, #8
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
	if(hi2c == &hi2c1){
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	4a08      	ldr	r2, [pc, #32]	; (8002d58 <HAL_I2C_MemRxCpltCallback+0x2c>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d102      	bne.n	8002d42 <HAL_I2C_MemRxCpltCallback+0x16>
	    ButtonIRQCallback();
 8002d3c:	f000 fadc 	bl	80032f8 <ButtonIRQCallback>
	} else if (hi2c == &hi2c2){
        TouchScreenIRQCallback();
	}
}
 8002d40:	e005      	b.n	8002d4e <HAL_I2C_MemRxCpltCallback+0x22>
	} else if (hi2c == &hi2c2){
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	4a05      	ldr	r2, [pc, #20]	; (8002d5c <HAL_I2C_MemRxCpltCallback+0x30>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d101      	bne.n	8002d4e <HAL_I2C_MemRxCpltCallback+0x22>
        TouchScreenIRQCallback();
 8002d4a:	f000 fe61 	bl	8003a10 <TouchScreenIRQCallback>
}
 8002d4e:	bf00      	nop
 8002d50:	3708      	adds	r7, #8
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	20000de0 	.word	0x20000de0
 8002d5c:	20000e34 	.word	0x20000e34

08002d60 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b086      	sub	sp, #24
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	60f8      	str	r0, [r7, #12]
 8002d68:	60b9      	str	r1, [r7, #8]
 8002d6a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	617b      	str	r3, [r7, #20]
 8002d70:	e00a      	b.n	8002d88 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002d72:	f3af 8000 	nop.w
 8002d76:	4601      	mov	r1, r0
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	1c5a      	adds	r2, r3, #1
 8002d7c:	60ba      	str	r2, [r7, #8]
 8002d7e:	b2ca      	uxtb	r2, r1
 8002d80:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	3301      	adds	r3, #1
 8002d86:	617b      	str	r3, [r7, #20]
 8002d88:	697a      	ldr	r2, [r7, #20]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	dbf0      	blt.n	8002d72 <_read+0x12>
	}

return len;
 8002d90:	687b      	ldr	r3, [r7, #4]
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3718      	adds	r7, #24
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}

08002d9a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002d9a:	b580      	push	{r7, lr}
 8002d9c:	b086      	sub	sp, #24
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	60f8      	str	r0, [r7, #12]
 8002da2:	60b9      	str	r1, [r7, #8]
 8002da4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002da6:	2300      	movs	r3, #0
 8002da8:	617b      	str	r3, [r7, #20]
 8002daa:	e009      	b.n	8002dc0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	1c5a      	adds	r2, r3, #1
 8002db0:	60ba      	str	r2, [r7, #8]
 8002db2:	781b      	ldrb	r3, [r3, #0]
 8002db4:	4618      	mov	r0, r3
 8002db6:	f7ff fc39 	bl	800262c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	3301      	adds	r3, #1
 8002dbe:	617b      	str	r3, [r7, #20]
 8002dc0:	697a      	ldr	r2, [r7, #20]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	dbf1      	blt.n	8002dac <_write+0x12>
	}
	return len;
 8002dc8:	687b      	ldr	r3, [r7, #4]
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3718      	adds	r7, #24
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}

08002dd2 <_close>:

int _close(int file)
{
 8002dd2:	b480      	push	{r7}
 8002dd4:	b083      	sub	sp, #12
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	6078      	str	r0, [r7, #4]
	return -1;
 8002dda:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	370c      	adds	r7, #12
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr

08002dea <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002dea:	b480      	push	{r7}
 8002dec:	b083      	sub	sp, #12
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	6078      	str	r0, [r7, #4]
 8002df2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002dfa:	605a      	str	r2, [r3, #4]
	return 0;
 8002dfc:	2300      	movs	r3, #0
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	370c      	adds	r7, #12
 8002e02:	46bd      	mov	sp, r7
 8002e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e08:	4770      	bx	lr

08002e0a <_isatty>:

int _isatty(int file)
{
 8002e0a:	b480      	push	{r7}
 8002e0c:	b083      	sub	sp, #12
 8002e0e:	af00      	add	r7, sp, #0
 8002e10:	6078      	str	r0, [r7, #4]
	return 1;
 8002e12:	2301      	movs	r3, #1
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	370c      	adds	r7, #12
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr

08002e20 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b085      	sub	sp, #20
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	60f8      	str	r0, [r7, #12]
 8002e28:	60b9      	str	r1, [r7, #8]
 8002e2a:	607a      	str	r2, [r7, #4]
	return 0;
 8002e2c:	2300      	movs	r3, #0
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3714      	adds	r7, #20
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr
	...

08002e3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b086      	sub	sp, #24
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e44:	4a14      	ldr	r2, [pc, #80]	; (8002e98 <_sbrk+0x5c>)
 8002e46:	4b15      	ldr	r3, [pc, #84]	; (8002e9c <_sbrk+0x60>)
 8002e48:	1ad3      	subs	r3, r2, r3
 8002e4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e50:	4b13      	ldr	r3, [pc, #76]	; (8002ea0 <_sbrk+0x64>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d102      	bne.n	8002e5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e58:	4b11      	ldr	r3, [pc, #68]	; (8002ea0 <_sbrk+0x64>)
 8002e5a:	4a12      	ldr	r2, [pc, #72]	; (8002ea4 <_sbrk+0x68>)
 8002e5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e5e:	4b10      	ldr	r3, [pc, #64]	; (8002ea0 <_sbrk+0x64>)
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	4413      	add	r3, r2
 8002e66:	693a      	ldr	r2, [r7, #16]
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d207      	bcs.n	8002e7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e6c:	f00a ffb6 	bl	800dddc <__errno>
 8002e70:	4603      	mov	r3, r0
 8002e72:	220c      	movs	r2, #12
 8002e74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e76:	f04f 33ff 	mov.w	r3, #4294967295
 8002e7a:	e009      	b.n	8002e90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e7c:	4b08      	ldr	r3, [pc, #32]	; (8002ea0 <_sbrk+0x64>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e82:	4b07      	ldr	r3, [pc, #28]	; (8002ea0 <_sbrk+0x64>)
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	4413      	add	r3, r2
 8002e8a:	4a05      	ldr	r2, [pc, #20]	; (8002ea0 <_sbrk+0x64>)
 8002e8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	3718      	adds	r7, #24
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}
 8002e98:	20020000 	.word	0x20020000
 8002e9c:	00000400 	.word	0x00000400
 8002ea0:	20000fc4 	.word	0x20000fc4
 8002ea4:	20001cd0 	.word	0x20001cd0

08002ea8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002eac:	4b06      	ldr	r3, [pc, #24]	; (8002ec8 <SystemInit+0x20>)
 8002eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eb2:	4a05      	ldr	r2, [pc, #20]	; (8002ec8 <SystemInit+0x20>)
 8002eb4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002eb8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ebc:	bf00      	nop
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr
 8002ec6:	bf00      	nop
 8002ec8:	e000ed00 	.word	0xe000ed00

08002ecc <HAL_TIM_Base_MspInit>:
  HAL_TIM_MspPostInit(&htim3);

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b084      	sub	sp, #16
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a25      	ldr	r2, [pc, #148]	; (8002f70 <HAL_TIM_Base_MspInit+0xa4>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d144      	bne.n	8002f68 <HAL_TIM_Base_MspInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002ede:	2300      	movs	r3, #0
 8002ee0:	60fb      	str	r3, [r7, #12]
 8002ee2:	4b24      	ldr	r3, [pc, #144]	; (8002f74 <HAL_TIM_Base_MspInit+0xa8>)
 8002ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee6:	4a23      	ldr	r2, [pc, #140]	; (8002f74 <HAL_TIM_Base_MspInit+0xa8>)
 8002ee8:	f043 0302 	orr.w	r3, r3, #2
 8002eec:	6413      	str	r3, [r2, #64]	; 0x40
 8002eee:	4b21      	ldr	r3, [pc, #132]	; (8002f74 <HAL_TIM_Base_MspInit+0xa8>)
 8002ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef2:	f003 0302 	and.w	r3, r3, #2
 8002ef6:	60fb      	str	r3, [r7, #12]
 8002ef8:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH1_TRIG Init */
    hdma_tim3_ch1_trig.Instance = DMA1_Stream4;
 8002efa:	4b1f      	ldr	r3, [pc, #124]	; (8002f78 <HAL_TIM_Base_MspInit+0xac>)
 8002efc:	4a1f      	ldr	r2, [pc, #124]	; (8002f7c <HAL_TIM_Base_MspInit+0xb0>)
 8002efe:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Channel = DMA_CHANNEL_5;
 8002f00:	4b1d      	ldr	r3, [pc, #116]	; (8002f78 <HAL_TIM_Base_MspInit+0xac>)
 8002f02:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8002f06:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002f08:	4b1b      	ldr	r3, [pc, #108]	; (8002f78 <HAL_TIM_Base_MspInit+0xac>)
 8002f0a:	2240      	movs	r2, #64	; 0x40
 8002f0c:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f0e:	4b1a      	ldr	r3, [pc, #104]	; (8002f78 <HAL_TIM_Base_MspInit+0xac>)
 8002f10:	2200      	movs	r2, #0
 8002f12:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 8002f14:	4b18      	ldr	r3, [pc, #96]	; (8002f78 <HAL_TIM_Base_MspInit+0xac>)
 8002f16:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f1a:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002f1c:	4b16      	ldr	r3, [pc, #88]	; (8002f78 <HAL_TIM_Base_MspInit+0xac>)
 8002f1e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f22:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002f24:	4b14      	ldr	r3, [pc, #80]	; (8002f78 <HAL_TIM_Base_MspInit+0xac>)
 8002f26:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002f2a:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Mode = DMA_CIRCULAR;
 8002f2c:	4b12      	ldr	r3, [pc, #72]	; (8002f78 <HAL_TIM_Base_MspInit+0xac>)
 8002f2e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f32:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_LOW;
 8002f34:	4b10      	ldr	r3, [pc, #64]	; (8002f78 <HAL_TIM_Base_MspInit+0xac>)
 8002f36:	2200      	movs	r2, #0
 8002f38:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1_trig.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f3a:	4b0f      	ldr	r3, [pc, #60]	; (8002f78 <HAL_TIM_Base_MspInit+0xac>)
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 8002f40:	480d      	ldr	r0, [pc, #52]	; (8002f78 <HAL_TIM_Base_MspInit+0xac>)
 8002f42:	f001 fbfb 	bl	800473c <HAL_DMA_Init>
 8002f46:	4603      	mov	r3, r0
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d001      	beq.n	8002f50 <HAL_TIM_Base_MspInit+0x84>
    {
      Error_Handler();
 8002f4c:	f7ff fde6 	bl	8002b1c <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	4a09      	ldr	r2, [pc, #36]	; (8002f78 <HAL_TIM_Base_MspInit+0xac>)
 8002f54:	625a      	str	r2, [r3, #36]	; 0x24
 8002f56:	4a08      	ldr	r2, [pc, #32]	; (8002f78 <HAL_TIM_Base_MspInit+0xac>)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	4a06      	ldr	r2, [pc, #24]	; (8002f78 <HAL_TIM_Base_MspInit+0xac>)
 8002f60:	639a      	str	r2, [r3, #56]	; 0x38
 8002f62:	4a05      	ldr	r2, [pc, #20]	; (8002f78 <HAL_TIM_Base_MspInit+0xac>)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002f68:	bf00      	nop
 8002f6a:	3710      	adds	r7, #16
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}
 8002f70:	40000400 	.word	0x40000400
 8002f74:	40023800 	.word	0x40023800
 8002f78:	20001010 	.word	0x20001010
 8002f7c:	40026070 	.word	0x40026070

08002f80 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b088      	sub	sp, #32
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f88:	f107 030c 	add.w	r3, r7, #12
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	601a      	str	r2, [r3, #0]
 8002f90:	605a      	str	r2, [r3, #4]
 8002f92:	609a      	str	r2, [r3, #8]
 8002f94:	60da      	str	r2, [r3, #12]
 8002f96:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a12      	ldr	r2, [pc, #72]	; (8002fe8 <HAL_TIM_MspPostInit+0x68>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d11d      	bne.n	8002fde <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	60bb      	str	r3, [r7, #8]
 8002fa6:	4b11      	ldr	r3, [pc, #68]	; (8002fec <HAL_TIM_MspPostInit+0x6c>)
 8002fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002faa:	4a10      	ldr	r2, [pc, #64]	; (8002fec <HAL_TIM_MspPostInit+0x6c>)
 8002fac:	f043 0302 	orr.w	r3, r3, #2
 8002fb0:	6313      	str	r3, [r2, #48]	; 0x30
 8002fb2:	4b0e      	ldr	r3, [pc, #56]	; (8002fec <HAL_TIM_MspPostInit+0x6c>)
 8002fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb6:	f003 0302 	and.w	r3, r3, #2
 8002fba:	60bb      	str	r3, [r7, #8]
 8002fbc:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002fbe:	2310      	movs	r3, #16
 8002fc0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fc2:	2302      	movs	r3, #2
 8002fc4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fca:	2303      	movs	r3, #3
 8002fcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002fce:	2302      	movs	r3, #2
 8002fd0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fd2:	f107 030c 	add.w	r3, r7, #12
 8002fd6:	4619      	mov	r1, r3
 8002fd8:	4805      	ldr	r0, [pc, #20]	; (8002ff0 <HAL_TIM_MspPostInit+0x70>)
 8002fda:	f001 ffbd 	bl	8004f58 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002fde:	bf00      	nop
 8002fe0:	3720      	adds	r7, #32
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	bf00      	nop
 8002fe8:	40000400 	.word	0x40000400
 8002fec:	40023800 	.word	0x40023800
 8002ff0:	40020400 	.word	0x40020400

08002ff4 <TIM3_Init>:
  /* USER CODE END TIM3_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void TIM3_Init(void){
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b08e      	sub	sp, #56	; 0x38
 8002ff8:	af00      	add	r7, sp, #0

	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ffa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002ffe:	2200      	movs	r2, #0
 8003000:	601a      	str	r2, [r3, #0]
 8003002:	605a      	str	r2, [r3, #4]
 8003004:	609a      	str	r2, [r3, #8]
 8003006:	60da      	str	r2, [r3, #12]
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003008:	f107 0320 	add.w	r3, r7, #32
 800300c:	2200      	movs	r2, #0
 800300e:	601a      	str	r2, [r3, #0]
 8003010:	605a      	str	r2, [r3, #4]
	  TIM_OC_InitTypeDef sConfigOC = {0};
 8003012:	1d3b      	adds	r3, r7, #4
 8003014:	2200      	movs	r2, #0
 8003016:	601a      	str	r2, [r3, #0]
 8003018:	605a      	str	r2, [r3, #4]
 800301a:	609a      	str	r2, [r3, #8]
 800301c:	60da      	str	r2, [r3, #12]
 800301e:	611a      	str	r2, [r3, #16]
 8003020:	615a      	str	r2, [r3, #20]
 8003022:	619a      	str	r2, [r3, #24]


	  htim3.Instance = TIM3;
 8003024:	4b2c      	ldr	r3, [pc, #176]	; (80030d8 <TIM3_Init+0xe4>)
 8003026:	4a2d      	ldr	r2, [pc, #180]	; (80030dc <TIM3_Init+0xe8>)
 8003028:	601a      	str	r2, [r3, #0]
	  htim3.Init.Prescaler = 0;
 800302a:	4b2b      	ldr	r3, [pc, #172]	; (80030d8 <TIM3_Init+0xe4>)
 800302c:	2200      	movs	r2, #0
 800302e:	605a      	str	r2, [r3, #4]
	  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003030:	4b29      	ldr	r3, [pc, #164]	; (80030d8 <TIM3_Init+0xe4>)
 8003032:	2200      	movs	r2, #0
 8003034:	609a      	str	r2, [r3, #8]
	  htim3.Init.Period = 120 - 1;
 8003036:	4b28      	ldr	r3, [pc, #160]	; (80030d8 <TIM3_Init+0xe4>)
 8003038:	2277      	movs	r2, #119	; 0x77
 800303a:	60da      	str	r2, [r3, #12]
	  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800303c:	4b26      	ldr	r3, [pc, #152]	; (80030d8 <TIM3_Init+0xe4>)
 800303e:	2200      	movs	r2, #0
 8003040:	611a      	str	r2, [r3, #16]
	  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003042:	4b25      	ldr	r3, [pc, #148]	; (80030d8 <TIM3_Init+0xe4>)
 8003044:	2200      	movs	r2, #0
 8003046:	619a      	str	r2, [r3, #24]
	  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003048:	4823      	ldr	r0, [pc, #140]	; (80030d8 <TIM3_Init+0xe4>)
 800304a:	f005 fe69 	bl	8008d20 <HAL_TIM_Base_Init>
 800304e:	4603      	mov	r3, r0
 8003050:	2b00      	cmp	r3, #0
 8003052:	d001      	beq.n	8003058 <TIM3_Init+0x64>
	  {
	    Error_Handler();
 8003054:	f7ff fd62 	bl	8002b1c <Error_Handler>
	  }
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003058:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800305c:	62bb      	str	r3, [r7, #40]	; 0x28
	  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800305e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003062:	4619      	mov	r1, r3
 8003064:	481c      	ldr	r0, [pc, #112]	; (80030d8 <TIM3_Init+0xe4>)
 8003066:	f006 fa3b 	bl	80094e0 <HAL_TIM_ConfigClockSource>
 800306a:	4603      	mov	r3, r0
 800306c:	2b00      	cmp	r3, #0
 800306e:	d001      	beq.n	8003074 <TIM3_Init+0x80>
	  {
	    Error_Handler();
 8003070:	f7ff fd54 	bl	8002b1c <Error_Handler>
	  }
	  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003074:	4818      	ldr	r0, [pc, #96]	; (80030d8 <TIM3_Init+0xe4>)
 8003076:	f005 fea2 	bl	8008dbe <HAL_TIM_PWM_Init>
 800307a:	4603      	mov	r3, r0
 800307c:	2b00      	cmp	r3, #0
 800307e:	d001      	beq.n	8003084 <TIM3_Init+0x90>
	  {
	    Error_Handler();
 8003080:	f7ff fd4c 	bl	8002b1c <Error_Handler>
	  }
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003084:	2300      	movs	r3, #0
 8003086:	623b      	str	r3, [r7, #32]
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003088:	2300      	movs	r3, #0
 800308a:	627b      	str	r3, [r7, #36]	; 0x24
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800308c:	f107 0320 	add.w	r3, r7, #32
 8003090:	4619      	mov	r1, r3
 8003092:	4811      	ldr	r0, [pc, #68]	; (80030d8 <TIM3_Init+0xe4>)
 8003094:	f006 fea6 	bl	8009de4 <HAL_TIMEx_MasterConfigSynchronization>
 8003098:	4603      	mov	r3, r0
 800309a:	2b00      	cmp	r3, #0
 800309c:	d001      	beq.n	80030a2 <TIM3_Init+0xae>
	  {
	    Error_Handler();
 800309e:	f7ff fd3d 	bl	8002b1c <Error_Handler>
	  }
	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80030a2:	2360      	movs	r3, #96	; 0x60
 80030a4:	607b      	str	r3, [r7, #4]
	  sConfigOC.Pulse = 0;
 80030a6:	2300      	movs	r3, #0
 80030a8:	60bb      	str	r3, [r7, #8]
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80030aa:	2300      	movs	r3, #0
 80030ac:	60fb      	str	r3, [r7, #12]
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80030ae:	2300      	movs	r3, #0
 80030b0:	617b      	str	r3, [r7, #20]
	  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80030b2:	1d3b      	adds	r3, r7, #4
 80030b4:	2200      	movs	r2, #0
 80030b6:	4619      	mov	r1, r3
 80030b8:	4807      	ldr	r0, [pc, #28]	; (80030d8 <TIM3_Init+0xe4>)
 80030ba:	f006 f94f 	bl	800935c <HAL_TIM_PWM_ConfigChannel>
 80030be:	4603      	mov	r3, r0
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d001      	beq.n	80030c8 <TIM3_Init+0xd4>
	  {
	    Error_Handler();
 80030c4:	f7ff fd2a 	bl	8002b1c <Error_Handler>
	  }

	  HAL_TIM_MspPostInit(&htim3);
 80030c8:	4803      	ldr	r0, [pc, #12]	; (80030d8 <TIM3_Init+0xe4>)
 80030ca:	f7ff ff59 	bl	8002f80 <HAL_TIM_MspPostInit>
}
 80030ce:	bf00      	nop
 80030d0:	3738      	adds	r7, #56	; 0x38
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}
 80030d6:	bf00      	nop
 80030d8:	20000fc8 	.word	0x20000fc8
 80030dc:	40000400 	.word	0x40000400

080030e0 <ButtonInit>:
 *@Params: Init struct with settings, Handle to initialized, low level IO driver
 *@Return: None
 *@Precondition: None
 *@Postcondition: Button handle will be initialized and ready to use
 **************************************//**************************************/
void ButtonInit(Button_Init_Struct_t Settings, Button_Handle_t *Button, Button_IO_Drv_t IO){
 80030e0:	b082      	sub	sp, #8
 80030e2:	b590      	push	{r4, r7, lr}
 80030e4:	b085      	sub	sp, #20
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	f107 0408 	add.w	r4, r7, #8
 80030ec:	e884 0003 	stmia.w	r4, {r0, r1}
 80030f0:	607a      	str	r2, [r7, #4]
 80030f2:	627b      	str	r3, [r7, #36]	; 0x24
	Button->IO_Driver.init   = IO.init;
 80030f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	609a      	str	r2, [r3, #8]
	Button->IO_Driver.deinit = IO.deinit;
 80030fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	60da      	str	r2, [r3, #12]
	Button->IO_Driver.read   = IO.read;
 8003100:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	611a      	str	r2, [r3, #16]
	Button->IO_Driver.write  = IO.write;
 8003106:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	615a      	str	r2, [r3, #20]
	Button->IO_Driver.ioctl  = IO.ioctl;
 800310c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	619a      	str	r2, [r3, #24]
	Button->IO_Driver.init();
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	4798      	blx	r3

	Button->ButtonIDNumber = Settings.ButtonIDNumber;
 8003118:	7a3a      	ldrb	r2, [r7, #8]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	701a      	strb	r2, [r3, #0]
	Button->KeyFunction = Settings.KeyFunction;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	3301      	adds	r3, #1
 8003122:	f107 0209 	add.w	r2, r7, #9
 8003126:	6812      	ldr	r2, [r2, #0]
 8003128:	601a      	str	r2, [r3, #0]
	Button->State = ButtonUnpressed;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2200      	movs	r2, #0
 800312e:	715a      	strb	r2, [r3, #5]
}
 8003130:	bf00      	nop
 8003132:	3714      	adds	r7, #20
 8003134:	46bd      	mov	sp, r7
 8003136:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800313a:	b002      	add	sp, #8
 800313c:	4770      	bx	lr

0800313e <ButtonRead>:
 *@Params: Button handle to read
 *@Return: ButtonChanged if the button changed states, otherwise ButtonUnchanged
 *@Precondition: ButtonHandle should be initialized/
 *@Postcondition: ButtonState in the ButtonHandle will be updated.
 **************************************//**************************************/
ButtonStatus_t ButtonRead(Button_Handle_t *Button){
 800313e:	b580      	push	{r7, lr}
 8003140:	b084      	sub	sp, #16
 8003142:	af00      	add	r7, sp, #0
 8003144:	6078      	str	r0, [r7, #4]
    ButtonState_t Previous_State = Button->State;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	795b      	ldrb	r3, [r3, #5]
 800314a:	73fb      	strb	r3, [r7, #15]
    Button->State = Button->IO_Driver.read(Button->ButtonIDNumber);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	691b      	ldr	r3, [r3, #16]
 8003150:	687a      	ldr	r2, [r7, #4]
 8003152:	7812      	ldrb	r2, [r2, #0]
 8003154:	4610      	mov	r0, r2
 8003156:	4798      	blx	r3
 8003158:	4603      	mov	r3, r0
 800315a:	461a      	mov	r2, r3
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	715a      	strb	r2, [r3, #5]
    if(Previous_State != Button->State){
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	795b      	ldrb	r3, [r3, #5]
 8003164:	7bfa      	ldrb	r2, [r7, #15]
 8003166:	429a      	cmp	r2, r3
 8003168:	d001      	beq.n	800316e <ButtonRead+0x30>
    	return ButtonChanged;
 800316a:	2300      	movs	r3, #0
 800316c:	e000      	b.n	8003170 <ButtonRead+0x32>
    } else {
    	return ButtonUnchanged;
 800316e:	2301      	movs	r3, #1
    }
}
 8003170:	4618      	mov	r0, r3
 8003172:	3710      	adds	r7, #16
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}

08003178 <Button_IO_init>:
 *@Params: None
 *@Return: None
 *@Precondition: None
 *@Postcondition: GPIO, I2C, DMA Peripherals and clocks will be enabled and ready to use
 **************************************//**************************************/
static void Button_IO_init(void){
 8003178:	b5b0      	push	{r4, r5, r7, lr}
 800317a:	b08a      	sub	sp, #40	; 0x28
 800317c:	af06      	add	r7, sp, #24
	const MCP23017_Init_Struct_t InitSettings = {
 800317e:	4b2b      	ldr	r3, [pc, #172]	; (800322c <Button_IO_init+0xb4>)
 8003180:	881b      	ldrh	r3, [r3, #0]
 8003182:	803b      	strh	r3, [r7, #0]
 8003184:	4b29      	ldr	r3, [pc, #164]	; (800322c <Button_IO_init+0xb4>)
 8003186:	881b      	ldrh	r3, [r3, #0]
 8003188:	807b      	strh	r3, [r7, #2]
 800318a:	4b29      	ldr	r3, [pc, #164]	; (8003230 <Button_IO_init+0xb8>)
 800318c:	881b      	ldrh	r3, [r3, #0]
 800318e:	80bb      	strh	r3, [r7, #4]
 8003190:	4b27      	ldr	r3, [pc, #156]	; (8003230 <Button_IO_init+0xb8>)
 8003192:	881b      	ldrh	r3, [r3, #0]
 8003194:	80fb      	strh	r3, [r7, #6]
 8003196:	4b26      	ldr	r3, [pc, #152]	; (8003230 <Button_IO_init+0xb8>)
 8003198:	881b      	ldrh	r3, [r3, #0]
 800319a:	813b      	strh	r3, [r7, #8]
 800319c:	4b23      	ldr	r3, [pc, #140]	; (800322c <Button_IO_init+0xb4>)
 800319e:	881b      	ldrh	r3, [r3, #0]
 80031a0:	817b      	strh	r3, [r7, #10]
 80031a2:	2300      	movs	r3, #0
 80031a4:	733b      	strb	r3, [r7, #12]
			.Mode = MCP23017_AllPins,
			.PullUp = MCP23017_AllPins,
			.Polarity = MCP23017_AllPins
	};

	if(initialize_status == ButtonIO_Uninitialized){
 80031a6:	4b23      	ldr	r3, [pc, #140]	; (8003234 <Button_IO_init+0xbc>)
 80031a8:	781b      	ldrb	r3, [r3, #0]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d139      	bne.n	8003222 <Button_IO_init+0xaa>
	    MCP23017_Init(InitSettings, &Expander[0], MCP23017_IO1_Drv);
 80031ae:	4b22      	ldr	r3, [pc, #136]	; (8003238 <Button_IO_init+0xc0>)
 80031b0:	ac01      	add	r4, sp, #4
 80031b2:	461d      	mov	r5, r3
 80031b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80031b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80031b8:	682b      	ldr	r3, [r5, #0]
 80031ba:	6023      	str	r3, [r4, #0]
 80031bc:	4b1f      	ldr	r3, [pc, #124]	; (800323c <Button_IO_init+0xc4>)
 80031be:	9300      	str	r3, [sp, #0]
 80031c0:	463b      	mov	r3, r7
 80031c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80031c4:	f7fd fdc8 	bl	8000d58 <MCP23017_Init>
	    MCP23017_Init(InitSettings, &Expander[1], MCP23017_IO2_Drv);
 80031c8:	4b1d      	ldr	r3, [pc, #116]	; (8003240 <Button_IO_init+0xc8>)
 80031ca:	ac01      	add	r4, sp, #4
 80031cc:	461d      	mov	r5, r3
 80031ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80031d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80031d2:	682b      	ldr	r3, [r5, #0]
 80031d4:	6023      	str	r3, [r4, #0]
 80031d6:	4b1b      	ldr	r3, [pc, #108]	; (8003244 <Button_IO_init+0xcc>)
 80031d8:	9300      	str	r3, [sp, #0]
 80031da:	463b      	mov	r3, r7
 80031dc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80031de:	f7fd fdbb 	bl	8000d58 <MCP23017_Init>
	    MCP23017_Init(InitSettings, &Expander[2], MCP23017_IO3_Drv);
 80031e2:	4b19      	ldr	r3, [pc, #100]	; (8003248 <Button_IO_init+0xd0>)
 80031e4:	ac01      	add	r4, sp, #4
 80031e6:	461d      	mov	r5, r3
 80031e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80031ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80031ec:	682b      	ldr	r3, [r5, #0]
 80031ee:	6023      	str	r3, [r4, #0]
 80031f0:	4b16      	ldr	r3, [pc, #88]	; (800324c <Button_IO_init+0xd4>)
 80031f2:	9300      	str	r3, [sp, #0]
 80031f4:	463b      	mov	r3, r7
 80031f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80031f8:	f7fd fdae 	bl	8000d58 <MCP23017_Init>
	    MCP23017_Init(InitSettings, &Expander[3], MCP23017_IO4_Drv);
 80031fc:	4b14      	ldr	r3, [pc, #80]	; (8003250 <Button_IO_init+0xd8>)
 80031fe:	ac01      	add	r4, sp, #4
 8003200:	461d      	mov	r5, r3
 8003202:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003204:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003206:	682b      	ldr	r3, [r5, #0]
 8003208:	6023      	str	r3, [r4, #0]
 800320a:	4b12      	ldr	r3, [pc, #72]	; (8003254 <Button_IO_init+0xdc>)
 800320c:	9300      	str	r3, [sp, #0]
 800320e:	463b      	mov	r3, r7
 8003210:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003212:	f7fd fda1 	bl	8000d58 <MCP23017_Init>
	    MCP23017_ReadPins(&Expander[0]); //Start the Button-Read-DMA Engine
 8003216:	4809      	ldr	r0, [pc, #36]	; (800323c <Button_IO_init+0xc4>)
 8003218:	f7fd fec8 	bl	8000fac <MCP23017_ReadPins>
	    initialize_status = ButtonIO_Initialized;
 800321c:	4b05      	ldr	r3, [pc, #20]	; (8003234 <Button_IO_init+0xbc>)
 800321e:	2201      	movs	r2, #1
 8003220:	701a      	strb	r2, [r3, #0]
	}
}
 8003222:	bf00      	nop
 8003224:	3710      	adds	r7, #16
 8003226:	46bd      	mov	sp, r7
 8003228:	bdb0      	pop	{r4, r5, r7, pc}
 800322a:	bf00      	nop
 800322c:	0800f258 	.word	0x0800f258
 8003230:	0800f25a 	.word	0x0800f25a
 8003234:	200010b4 	.word	0x200010b4
 8003238:	0800f25c 	.word	0x0800f25c
 800323c:	200010b8 	.word	0x200010b8
 8003240:	0800f270 	.word	0x0800f270
 8003244:	200010d0 	.word	0x200010d0
 8003248:	0800f284 	.word	0x0800f284
 800324c:	200010e8 	.word	0x200010e8
 8003250:	0800f298 	.word	0x0800f298
 8003254:	20001100 	.word	0x20001100

08003258 <Button_IO_deinit>:

static void Button_IO_deinit(void){
 8003258:	b580      	push	{r7, lr}
 800325a:	af00      	add	r7, sp, #0

	if(initialize_status == ButtonIO_Initialized){
 800325c:	4b0a      	ldr	r3, [pc, #40]	; (8003288 <Button_IO_deinit+0x30>)
 800325e:	781b      	ldrb	r3, [r3, #0]
 8003260:	2b01      	cmp	r3, #1
 8003262:	d10e      	bne.n	8003282 <Button_IO_deinit+0x2a>
	    MCP23017_DeInit(&Expander[0]);
 8003264:	4809      	ldr	r0, [pc, #36]	; (800328c <Button_IO_deinit+0x34>)
 8003266:	f7fd fe05 	bl	8000e74 <MCP23017_DeInit>
	    MCP23017_DeInit(&Expander[1]);
 800326a:	4809      	ldr	r0, [pc, #36]	; (8003290 <Button_IO_deinit+0x38>)
 800326c:	f7fd fe02 	bl	8000e74 <MCP23017_DeInit>
	    MCP23017_DeInit(&Expander[2]);
 8003270:	4808      	ldr	r0, [pc, #32]	; (8003294 <Button_IO_deinit+0x3c>)
 8003272:	f7fd fdff 	bl	8000e74 <MCP23017_DeInit>
	    MCP23017_DeInit(&Expander[3]);
 8003276:	4808      	ldr	r0, [pc, #32]	; (8003298 <Button_IO_deinit+0x40>)
 8003278:	f7fd fdfc 	bl	8000e74 <MCP23017_DeInit>
	    initialize_status = ButtonIO_Uninitialized;
 800327c:	4b02      	ldr	r3, [pc, #8]	; (8003288 <Button_IO_deinit+0x30>)
 800327e:	2200      	movs	r2, #0
 8003280:	701a      	strb	r2, [r3, #0]
	}
}
 8003282:	bf00      	nop
 8003284:	bd80      	pop	{r7, pc}
 8003286:	bf00      	nop
 8003288:	200010b4 	.word	0x200010b4
 800328c:	200010b8 	.word	0x200010b8
 8003290:	200010d0 	.word	0x200010d0
 8003294:	200010e8 	.word	0x200010e8
 8003298:	20001100 	.word	0x20001100

0800329c <Button_IO_Read>:
 *@Params: Number of the button to read
 *@Return: ButtonUnpressed if the button is not pressed, ButtonPressed if it is pressed.
 *@Precondition: Button IO should be initialized
 *@Postcondition: None
 **************************************//**************************************/
static ButtonState_t Button_IO_Read(uint8_t ButtonNumber){
 800329c:	b480      	push	{r7}
 800329e:	b085      	sub	sp, #20
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	4603      	mov	r3, r0
 80032a4:	71fb      	strb	r3, [r7, #7]
	uint8_t ExpanderNumber = ButtonNumber / PINS_PER_EXPANDER;
 80032a6:	79fb      	ldrb	r3, [r7, #7]
 80032a8:	091b      	lsrs	r3, r3, #4
 80032aa:	73fb      	strb	r3, [r7, #15]
	if(ExpanderNumber >= NUMBER_OF_IO_EXPANDERS){
 80032ac:	7bfb      	ldrb	r3, [r7, #15]
 80032ae:	2b03      	cmp	r3, #3
 80032b0:	d901      	bls.n	80032b6 <Button_IO_Read+0x1a>
		return ButtonUnpressed;
 80032b2:	2300      	movs	r3, #0
 80032b4:	e018      	b.n	80032e8 <Button_IO_Read+0x4c>
	}

    uint16_t ButtonStates = Expander[ExpanderNumber].PinStates;
 80032b6:	7bfa      	ldrb	r2, [r7, #15]
 80032b8:	490e      	ldr	r1, [pc, #56]	; (80032f4 <Button_IO_Read+0x58>)
 80032ba:	4613      	mov	r3, r2
 80032bc:	005b      	lsls	r3, r3, #1
 80032be:	4413      	add	r3, r2
 80032c0:	00db      	lsls	r3, r3, #3
 80032c2:	440b      	add	r3, r1
 80032c4:	881b      	ldrh	r3, [r3, #0]
 80032c6:	81bb      	strh	r3, [r7, #12]
    uint16_t ButtonPosition = ButtonNumber % PINS_PER_EXPANDER;
 80032c8:	79fb      	ldrb	r3, [r7, #7]
 80032ca:	b29b      	uxth	r3, r3
 80032cc:	f003 030f 	and.w	r3, r3, #15
 80032d0:	817b      	strh	r3, [r7, #10]
    if((ButtonStates & (1 << ButtonPosition)) != 0){
 80032d2:	89ba      	ldrh	r2, [r7, #12]
 80032d4:	897b      	ldrh	r3, [r7, #10]
 80032d6:	fa42 f303 	asr.w	r3, r2, r3
 80032da:	f003 0301 	and.w	r3, r3, #1
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d001      	beq.n	80032e6 <Button_IO_Read+0x4a>
    	return ButtonPressed;
 80032e2:	2301      	movs	r3, #1
 80032e4:	e000      	b.n	80032e8 <Button_IO_Read+0x4c>
    } else {
    	return ButtonUnpressed;
 80032e6:	2300      	movs	r3, #0
    }
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	3714      	adds	r7, #20
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr
 80032f4:	200010b8 	.word	0x200010b8

080032f8 <ButtonIRQCallback>:
 *@Params: I2C Handle used to communicate with MCP23017 IC
 *@Return: None
 *@Precondition: Button IO should be initialized.
 *@Postcondition: MCP23017 Pin states will be updated.
 **************************************//**************************************/
void ButtonIRQCallback(){
 80032f8:	b580      	push	{r7, lr}
 80032fa:	af00      	add	r7, sp, #0
//void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c){
	static uint8_t counter = 1;
	MCP23017_ReadPins(&Expander[counter % NUMBER_OF_IO_EXPANDERS]);
 80032fc:	4b0a      	ldr	r3, [pc, #40]	; (8003328 <ButtonIRQCallback+0x30>)
 80032fe:	781b      	ldrb	r3, [r3, #0]
 8003300:	f003 0203 	and.w	r2, r3, #3
 8003304:	4613      	mov	r3, r2
 8003306:	005b      	lsls	r3, r3, #1
 8003308:	4413      	add	r3, r2
 800330a:	00db      	lsls	r3, r3, #3
 800330c:	4a07      	ldr	r2, [pc, #28]	; (800332c <ButtonIRQCallback+0x34>)
 800330e:	4413      	add	r3, r2
 8003310:	4618      	mov	r0, r3
 8003312:	f7fd fe4b 	bl	8000fac <MCP23017_ReadPins>
	counter++;
 8003316:	4b04      	ldr	r3, [pc, #16]	; (8003328 <ButtonIRQCallback+0x30>)
 8003318:	781b      	ldrb	r3, [r3, #0]
 800331a:	3301      	adds	r3, #1
 800331c:	b2da      	uxtb	r2, r3
 800331e:	4b02      	ldr	r3, [pc, #8]	; (8003328 <ButtonIRQCallback+0x30>)
 8003320:	701a      	strb	r2, [r3, #0]

}
 8003322:	bf00      	nop
 8003324:	bd80      	pop	{r7, pc}
 8003326:	bf00      	nop
 8003328:	2000017c 	.word	0x2000017c
 800332c:	200010b8 	.word	0x200010b8

08003330 <JoystickInit>:
 *@Params: Init struct with desired user settings, Joystick handle to initialize, Low level IO Driver
 *@Return: None
 *@Precondition: None
 *@Postcondition: Joystick handle and low level hardware will be initialized and ready to use.
 **************************************//**************************************/
void JoystickInit(Joystick_Init_Struct_t Settings, Joystick_Handle_t *Joystick, Joystick_IO_Drv_t IO){
 8003330:	b084      	sub	sp, #16
 8003332:	b580      	push	{r7, lr}
 8003334:	af00      	add	r7, sp, #0
 8003336:	f107 0c08 	add.w	ip, r7, #8
 800333a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	Joystick->IO_Driver.init = IO.init;
 800333e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003342:	62da      	str	r2, [r3, #44]	; 0x2c
	Joystick->IO_Driver.deinit = IO.deinit;
 8003344:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003348:	631a      	str	r2, [r3, #48]	; 0x30
	Joystick->IO_Driver.read = IO.read;
 800334a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800334c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800334e:	635a      	str	r2, [r3, #52]	; 0x34
	Joystick->IO_Driver.write = IO.write;
 8003350:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003354:	639a      	str	r2, [r3, #56]	; 0x38
	Joystick->IO_Driver.ioctl = IO.ioctl;
 8003356:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800335a:	63da      	str	r2, [r3, #60]	; 0x3c
	Joystick->IO_Driver.init();
 800335c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800335e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003360:	4798      	blx	r3

	Joystick->DeadZone          = Settings.DeadZone;
 8003362:	893a      	ldrh	r2, [r7, #8]
 8003364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003366:	80da      	strh	r2, [r3, #6]
	Joystick->UpFunction        = Settings.UpFunction;
 8003368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800336a:	3311      	adds	r3, #17
 800336c:	f107 0213 	add.w	r2, r7, #19
 8003370:	6812      	ldr	r2, [r2, #0]
 8003372:	601a      	str	r2, [r3, #0]
	Joystick->LeftFunction      = Settings.LeftFunction;
 8003374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003376:	3319      	adds	r3, #25
 8003378:	f107 021b 	add.w	r2, r7, #27
 800337c:	6812      	ldr	r2, [r2, #0]
 800337e:	601a      	str	r2, [r3, #0]
	Joystick->RightFunction     = Settings.RightFunction;
 8003380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003382:	3309      	adds	r3, #9
 8003384:	f107 020b 	add.w	r2, r7, #11
 8003388:	6812      	ldr	r2, [r2, #0]
 800338a:	601a      	str	r2, [r3, #0]
	Joystick->UpRightFunction   = Settings.UpRightFunction;
 800338c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800338e:	330d      	adds	r3, #13
 8003390:	f107 020f 	add.w	r2, r7, #15
 8003394:	6812      	ldr	r2, [r2, #0]
 8003396:	601a      	str	r2, [r3, #0]
	Joystick->UpLeftFunction    = Settings.UpLeftFunction;
 8003398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800339a:	3315      	adds	r3, #21
 800339c:	f107 0217 	add.w	r2, r7, #23
 80033a0:	6812      	ldr	r2, [r2, #0]
 80033a2:	601a      	str	r2, [r3, #0]
	Joystick->DownFunction      = Settings.DownFunction;
 80033a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033a6:	3321      	adds	r3, #33	; 0x21
 80033a8:	f107 0223 	add.w	r2, r7, #35	; 0x23
 80033ac:	6812      	ldr	r2, [r2, #0]
 80033ae:	601a      	str	r2, [r3, #0]
	Joystick->DownLeftFunction  = Settings.DownLeftFunction;
 80033b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033b2:	331d      	adds	r3, #29
 80033b4:	f107 021f 	add.w	r2, r7, #31
 80033b8:	6812      	ldr	r2, [r2, #0]
 80033ba:	601a      	str	r2, [r3, #0]
	Joystick->DownRightFunction = Settings.DownRightFunction;
 80033bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033be:	3325      	adds	r3, #37	; 0x25
 80033c0:	f107 0227 	add.w	r2, r7, #39	; 0x27
 80033c4:	6812      	ldr	r2, [r2, #0]
 80033c6:	601a      	str	r2, [r3, #0]
	Joystick->Mode = Settings.Mode;
 80033c8:	7aba      	ldrb	r2, [r7, #10]
 80033ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033cc:	721a      	strb	r2, [r3, #8]
	Joystick->Position = JoystickNeutral;
 80033ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033d0:	2200      	movs	r2, #0
 80033d2:	711a      	strb	r2, [r3, #4]
	Joystick->X_PosRaw = 0;
 80033d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033d6:	2200      	movs	r2, #0
 80033d8:	801a      	strh	r2, [r3, #0]
	Joystick->Y_PosRaw = 0;
 80033da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033dc:	2200      	movs	r2, #0
 80033de:	805a      	strh	r2, [r3, #2]
}
 80033e0:	bf00      	nop
 80033e2:	46bd      	mov	sp, r7
 80033e4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80033e8:	b004      	add	sp, #16
 80033ea:	4770      	bx	lr

080033ec <JoystickRead>:
 *@Params: Joystick Handle
 *@Return: JoystickChanged if previous position != new position. Uses XPosRaw/YPosRaw in analog mode
 *@Precondition: JoystickHandle must be initialized
 *@Postcondition: Joystick XPosRaw/YPosRaw/State will be updated.
 **************************************//**************************************/
JoystickStatus_t JoystickRead(Joystick_Handle_t *Joystick){
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b084      	sub	sp, #16
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
	JoystickState_t PreviousState = Joystick->Position;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	791b      	ldrb	r3, [r3, #4]
 80033f8:	73fb      	strb	r3, [r7, #15]
	int16_t PreviousX = Joystick->X_PosRaw;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	881b      	ldrh	r3, [r3, #0]
 80033fe:	81bb      	strh	r3, [r7, #12]
	int16_t PreviousY = Joystick->Y_PosRaw;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	885b      	ldrh	r3, [r3, #2]
 8003404:	817b      	strh	r3, [r7, #10]
	Joystick->Position = Joystick->IO_Driver.read(Joystick->DeadZone, &Joystick->X_PosRaw, &Joystick->Y_PosRaw);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800340a:	687a      	ldr	r2, [r7, #4]
 800340c:	88d0      	ldrh	r0, [r2, #6]
 800340e:	6879      	ldr	r1, [r7, #4]
 8003410:	687a      	ldr	r2, [r7, #4]
 8003412:	3202      	adds	r2, #2
 8003414:	4798      	blx	r3
 8003416:	4603      	mov	r3, r0
 8003418:	461a      	mov	r2, r3
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	711a      	strb	r2, [r3, #4]

	if(Joystick->Mode == Joystick4Way || Joystick->Mode == Joystick8Way){
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	7a1b      	ldrb	r3, [r3, #8]
 8003422:	2b01      	cmp	r3, #1
 8003424:	d003      	beq.n	800342e <JoystickRead+0x42>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	7a1b      	ldrb	r3, [r3, #8]
 800342a:	2b02      	cmp	r3, #2
 800342c:	d108      	bne.n	8003440 <JoystickRead+0x54>
	    if(Joystick->Position != PreviousState){
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	791b      	ldrb	r3, [r3, #4]
 8003432:	7bfa      	ldrb	r2, [r7, #15]
 8003434:	429a      	cmp	r2, r3
 8003436:	d001      	beq.n	800343c <JoystickRead+0x50>
		    return JoystickChanged;
 8003438:	2300      	movs	r3, #0
 800343a:	e012      	b.n	8003462 <JoystickRead+0x76>
	    } else {
		    return JoystickUnchanged;
 800343c:	2301      	movs	r3, #1
 800343e:	e010      	b.n	8003462 <JoystickRead+0x76>
	    }
	}

	if(Joystick->X_PosRaw != PreviousX || Joystick->Y_PosRaw != PreviousY){
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003446:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800344a:	429a      	cmp	r2, r3
 800344c:	d106      	bne.n	800345c <JoystickRead+0x70>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003454:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003458:	429a      	cmp	r2, r3
 800345a:	d001      	beq.n	8003460 <JoystickRead+0x74>
		return JoystickChanged;
 800345c:	2300      	movs	r3, #0
 800345e:	e000      	b.n	8003462 <JoystickRead+0x76>
	} else {
		return JoystickUnchanged;
 8003460:	2301      	movs	r3, #1
	}
}
 8003462:	4618      	mov	r0, r3
 8003464:	3710      	adds	r7, #16
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}
	...

0800346c <JoystickIOInit>:
 *@Params: None
 *@Return: None
 *@Precondition: None
 *@Postcondition: Low level hardware will be initialized. (DMA, ADC, GPIO)
 **************************************//**************************************/
static void JoystickIOInit(){
 800346c:	b580      	push	{r7, lr}
 800346e:	af00      	add	r7, sp, #0
	ADC_GPIO_Init();
 8003470:	f7fe ff10 	bl	8002294 <ADC_GPIO_Init>
	ADC_DMA_Init();
 8003474:	f7fe fe98 	bl	80021a8 <ADC_DMA_Init>
	ADC1_Init();
 8003478:	f7fe fe16 	bl	80020a8 <ADC1_Init>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buffer, 2);
 800347c:	2202      	movs	r2, #2
 800347e:	4903      	ldr	r1, [pc, #12]	; (800348c <JoystickIOInit+0x20>)
 8003480:	4803      	ldr	r0, [pc, #12]	; (8003490 <JoystickIOInit+0x24>)
 8003482:	f000 fbd3 	bl	8003c2c <HAL_ADC_Start_DMA>
}
 8003486:	bf00      	nop
 8003488:	bd80      	pop	{r7, pc}
 800348a:	bf00      	nop
 800348c:	20000180 	.word	0x20000180
 8003490:	20000d38 	.word	0x20000d38

08003494 <JoystickIODeInit>:
 *@Params: None
 *@Return: None
 *@Precondition: None
 *@Postcondition: DMA transfers from Joystick will be stopped.
 **************************************//**************************************/
static void JoystickIODeInit(void){
 8003494:	b580      	push	{r7, lr}
 8003496:	af00      	add	r7, sp, #0
   HAL_ADC_Stop_DMA(&hadc1);
 8003498:	4805      	ldr	r0, [pc, #20]	; (80034b0 <JoystickIODeInit+0x1c>)
 800349a:	f000 fcb7 	bl	8003e0c <HAL_ADC_Stop_DMA>
   HAL_NVIC_DisableIRQ(DMA2_Stream0_IRQn);
 800349e:	2038      	movs	r0, #56	; 0x38
 80034a0:	f001 f923 	bl	80046ea <HAL_NVIC_DisableIRQ>
   HAL_NVIC_ClearPendingIRQ(DMA2_Stream0_IRQn);
 80034a4:	2038      	movs	r0, #56	; 0x38
 80034a6:	f001 f93a 	bl	800471e <HAL_NVIC_ClearPendingIRQ>
}
 80034aa:	bf00      	nop
 80034ac:	bd80      	pop	{r7, pc}
 80034ae:	bf00      	nop
 80034b0:	20000d38 	.word	0x20000d38

080034b4 <JoystickIORead>:
 *@Params: Joystick Deadzone, X Position buffer, Y Position buffer
 *@Return: Position of the joystick
 *@Precondition: Joystick IO should be initialized
 *@Postcondition: X_Pos and Y_Pos will contain raw joystick value.
 **************************************//**************************************/
static JoystickState_t JoystickIORead(uint16_t Deadzone, int16_t *X_Pos, int16_t *Y_Pos){
 80034b4:	b480      	push	{r7}
 80034b6:	b087      	sub	sp, #28
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	4603      	mov	r3, r0
 80034bc:	60b9      	str	r1, [r7, #8]
 80034be:	607a      	str	r2, [r7, #4]
 80034c0:	81fb      	strh	r3, [r7, #14]
	//Handle Deadzone values that are too large.
    if(Deadzone > INT16_MAX - 1){
 80034c2:	89fb      	ldrh	r3, [r7, #14]
 80034c4:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d902      	bls.n	80034d2 <JoystickIORead+0x1e>
    	Deadzone = INT16_MAX - 1;
 80034cc:	f647 73fe 	movw	r3, #32766	; 0x7ffe
 80034d0:	81fb      	strh	r3, [r7, #14]
    }

    //Calculate X Position
	int16_t previous = *X_Pos / 16;
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	da00      	bge.n	80034de <JoystickIORead+0x2a>
 80034dc:	330f      	adds	r3, #15
 80034de:	111b      	asrs	r3, r3, #4
 80034e0:	82bb      	strh	r3, [r7, #20]
	int16_t temp = previous*ALPHA_FILTER_COEFFICIENT + (adc_buffer[ADC_X_INDEX] - 2048 + ADC_X_OFFSET)*(1-ALPHA_FILTER_COEFFICIENT);
 80034e2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80034e6:	ee07 3a90 	vmov	s15, r3
 80034ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80034ee:	ed9f 7a85 	vldr	s14, [pc, #532]	; 8003704 <JoystickIORead+0x250>
 80034f2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80034f6:	2301      	movs	r3, #1
 80034f8:	461a      	mov	r2, r3
 80034fa:	4b83      	ldr	r3, [pc, #524]	; (8003708 <JoystickIORead+0x254>)
 80034fc:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8003500:	b21b      	sxth	r3, r3
 8003502:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8003506:	2205      	movs	r2, #5
 8003508:	4413      	add	r3, r2
 800350a:	ee07 3a90 	vmov	s15, r3
 800350e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003512:	eddf 7a7c 	vldr	s15, [pc, #496]	; 8003704 <JoystickIORead+0x250>
 8003516:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800351a:	ee76 7a67 	vsub.f32	s15, s12, s15
 800351e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003522:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003526:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800352a:	ee17 3a90 	vmov	r3, s15
 800352e:	82fb      	strh	r3, [r7, #22]
	if(temp > ADC_UPPER_LIMIT){
 8003530:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8003534:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003538:	4293      	cmp	r3, r2
 800353a:	dd03      	ble.n	8003544 <JoystickIORead+0x90>
		temp = ADC_UPPER_LIMIT;
 800353c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8003540:	82fb      	strh	r3, [r7, #22]
 8003542:	e007      	b.n	8003554 <JoystickIORead+0xa0>
	} else if (temp < ADC_LOWER_LIMIT){
 8003544:	4a71      	ldr	r2, [pc, #452]	; (800370c <JoystickIORead+0x258>)
 8003546:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800354a:	4293      	cmp	r3, r2
 800354c:	da02      	bge.n	8003554 <JoystickIORead+0xa0>
		temp = ADC_LOWER_LIMIT;
 800354e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003552:	82fb      	strh	r3, [r7, #22]
	}
	temp = temp * 16; //convert to 16 bit number
 8003554:	8afb      	ldrh	r3, [r7, #22]
 8003556:	011b      	lsls	r3, r3, #4
 8003558:	b29b      	uxth	r3, r3
 800355a:	82fb      	strh	r3, [r7, #22]
	if(temp > Deadzone || temp < -(int16_t)Deadzone){
 800355c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003560:	89fb      	ldrh	r3, [r7, #14]
 8003562:	429a      	cmp	r2, r3
 8003564:	dc06      	bgt.n	8003574 <JoystickIORead+0xc0>
 8003566:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800356a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800356e:	425b      	negs	r3, r3
 8003570:	429a      	cmp	r2, r3
 8003572:	da03      	bge.n	800357c <JoystickIORead+0xc8>
	    *X_Pos = temp;
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	8afa      	ldrh	r2, [r7, #22]
 8003578:	801a      	strh	r2, [r3, #0]
 800357a:	e002      	b.n	8003582 <JoystickIORead+0xce>
	} else {
        *X_Pos = 0;
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	2200      	movs	r2, #0
 8003580:	801a      	strh	r2, [r3, #0]
	}

	//Calculate Y Position
	previous = *Y_Pos / 16;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003588:	2b00      	cmp	r3, #0
 800358a:	da00      	bge.n	800358e <JoystickIORead+0xda>
 800358c:	330f      	adds	r3, #15
 800358e:	111b      	asrs	r3, r3, #4
 8003590:	82bb      	strh	r3, [r7, #20]
	temp = previous*ALPHA_FILTER_COEFFICIENT + (adc_buffer[ADC_Y_INDEX] - 2048 + ADC_Y_OFFSET)*(1-ALPHA_FILTER_COEFFICIENT);
 8003592:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003596:	ee07 3a90 	vmov	s15, r3
 800359a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800359e:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8003704 <JoystickIORead+0x250>
 80035a2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80035a6:	2300      	movs	r3, #0
 80035a8:	461a      	mov	r2, r3
 80035aa:	4b57      	ldr	r3, [pc, #348]	; (8003708 <JoystickIORead+0x254>)
 80035ac:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80035b0:	b21b      	sxth	r3, r3
 80035b2:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80035b6:	f06f 021d 	mvn.w	r2, #29
 80035ba:	4413      	add	r3, r2
 80035bc:	ee07 3a90 	vmov	s15, r3
 80035c0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80035c4:	eddf 7a4f 	vldr	s15, [pc, #316]	; 8003704 <JoystickIORead+0x250>
 80035c8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80035cc:	ee76 7a67 	vsub.f32	s15, s12, s15
 80035d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80035d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80035dc:	ee17 3a90 	vmov	r3, s15
 80035e0:	82fb      	strh	r3, [r7, #22]
	if(temp > ADC_UPPER_LIMIT){
 80035e2:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80035e6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80035ea:	4293      	cmp	r3, r2
 80035ec:	dd03      	ble.n	80035f6 <JoystickIORead+0x142>
		temp = ADC_UPPER_LIMIT;
 80035ee:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80035f2:	82fb      	strh	r3, [r7, #22]
 80035f4:	e007      	b.n	8003606 <JoystickIORead+0x152>
	} else if (temp < ADC_LOWER_LIMIT){
 80035f6:	4a45      	ldr	r2, [pc, #276]	; (800370c <JoystickIORead+0x258>)
 80035f8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80035fc:	4293      	cmp	r3, r2
 80035fe:	da02      	bge.n	8003606 <JoystickIORead+0x152>
		temp = ADC_LOWER_LIMIT;
 8003600:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003604:	82fb      	strh	r3, [r7, #22]
	}
	temp = temp * 16; //convert to 16 bit number
 8003606:	8afb      	ldrh	r3, [r7, #22]
 8003608:	011b      	lsls	r3, r3, #4
 800360a:	b29b      	uxth	r3, r3
 800360c:	82fb      	strh	r3, [r7, #22]
	if(temp > Deadzone || temp < -(int16_t)Deadzone){
 800360e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003612:	89fb      	ldrh	r3, [r7, #14]
 8003614:	429a      	cmp	r2, r3
 8003616:	dc06      	bgt.n	8003626 <JoystickIORead+0x172>
 8003618:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800361c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003620:	425b      	negs	r3, r3
 8003622:	429a      	cmp	r2, r3
 8003624:	da03      	bge.n	800362e <JoystickIORead+0x17a>
	    *Y_Pos = temp;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	8afa      	ldrh	r2, [r7, #22]
 800362a:	801a      	strh	r2, [r3, #0]
 800362c:	e002      	b.n	8003634 <JoystickIORead+0x180>
	} else {
        *Y_Pos = 0;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2200      	movs	r2, #0
 8003632:	801a      	strh	r2, [r3, #0]
	}

	if(*X_Pos == 0 && *Y_Pos == 0){
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	f9b3 3000 	ldrsh.w	r3, [r3]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d106      	bne.n	800364c <JoystickIORead+0x198>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d101      	bne.n	800364c <JoystickIORead+0x198>
		return JoystickNeutral;
 8003648:	2300      	movs	r3, #0
 800364a:	e054      	b.n	80036f6 <JoystickIORead+0x242>
	} else if(*X_Pos > 0 && *Y_Pos == 0){
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003652:	2b00      	cmp	r3, #0
 8003654:	dd06      	ble.n	8003664 <JoystickIORead+0x1b0>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	f9b3 3000 	ldrsh.w	r3, [r3]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d101      	bne.n	8003664 <JoystickIORead+0x1b0>
		return Joystick_Right;
 8003660:	2301      	movs	r3, #1
 8003662:	e048      	b.n	80036f6 <JoystickIORead+0x242>

	} else if(*X_Pos > 0 && *Y_Pos > 0){
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	f9b3 3000 	ldrsh.w	r3, [r3]
 800366a:	2b00      	cmp	r3, #0
 800366c:	dd06      	ble.n	800367c <JoystickIORead+0x1c8>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003674:	2b00      	cmp	r3, #0
 8003676:	dd01      	ble.n	800367c <JoystickIORead+0x1c8>
		return Joystick_UpRight;
 8003678:	2302      	movs	r3, #2
 800367a:	e03c      	b.n	80036f6 <JoystickIORead+0x242>

	} else if(*X_Pos == 0 && *Y_Pos > 0){
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d106      	bne.n	8003694 <JoystickIORead+0x1e0>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	f9b3 3000 	ldrsh.w	r3, [r3]
 800368c:	2b00      	cmp	r3, #0
 800368e:	dd01      	ble.n	8003694 <JoystickIORead+0x1e0>
		return Joystick_Up;
 8003690:	2303      	movs	r3, #3
 8003692:	e030      	b.n	80036f6 <JoystickIORead+0x242>

	} else if(*X_Pos < 0 && *Y_Pos > 0){
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	f9b3 3000 	ldrsh.w	r3, [r3]
 800369a:	2b00      	cmp	r3, #0
 800369c:	da06      	bge.n	80036ac <JoystickIORead+0x1f8>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	dd01      	ble.n	80036ac <JoystickIORead+0x1f8>
		return Joystick_UpLeft;
 80036a8:	2304      	movs	r3, #4
 80036aa:	e024      	b.n	80036f6 <JoystickIORead+0x242>

	} else if(*X_Pos < 0 && *Y_Pos == 0){
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	da06      	bge.n	80036c4 <JoystickIORead+0x210>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d101      	bne.n	80036c4 <JoystickIORead+0x210>
		return Joystick_Left;
 80036c0:	2305      	movs	r3, #5
 80036c2:	e018      	b.n	80036f6 <JoystickIORead+0x242>

	} else if(*X_Pos < 0 && *Y_Pos < 0){
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	da06      	bge.n	80036dc <JoystickIORead+0x228>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	da01      	bge.n	80036dc <JoystickIORead+0x228>
		return Joystick_DownLeft;
 80036d8:	2306      	movs	r3, #6
 80036da:	e00c      	b.n	80036f6 <JoystickIORead+0x242>

	} else if(*X_Pos == 0 && *Y_Pos < 0){
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d106      	bne.n	80036f4 <JoystickIORead+0x240>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	da01      	bge.n	80036f4 <JoystickIORead+0x240>
		return Joystick_Down;
 80036f0:	2307      	movs	r3, #7
 80036f2:	e000      	b.n	80036f6 <JoystickIORead+0x242>
	}
	else{
		return Joystick_DownRight;
 80036f4:	2308      	movs	r3, #8
	}

}
 80036f6:	4618      	mov	r0, r3
 80036f8:	371c      	adds	r7, #28
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr
 8003702:	bf00      	nop
 8003704:	3f333333 	.word	0x3f333333
 8003708:	20000180 	.word	0x20000180
 800370c:	fffff800 	.word	0xfffff800

08003710 <SerialLEDInit>:
 *  Created on: May 22, 2022
 *      Author: evanl
 */
#include "SerialLED.h"

void SerialLEDInit(SerialLED_InitStruct_t Settings, SerialLED_Handle_t *LED, SerialLED_IO_Drv_t IO){
 8003710:	b082      	sub	sp, #8
 8003712:	b5b0      	push	{r4, r5, r7, lr}
 8003714:	b084      	sub	sp, #16
 8003716:	af00      	add	r7, sp, #0
 8003718:	f107 0408 	add.w	r4, r7, #8
 800371c:	e884 0003 	stmia.w	r4, {r0, r1}
 8003720:	607a      	str	r2, [r7, #4]
 8003722:	627b      	str	r3, [r7, #36]	; 0x24
    LED->IO_Driver = IO;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	f103 0408 	add.w	r4, r3, #8
 800372a:	f107 0524 	add.w	r5, r7, #36	; 0x24
 800372e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003730:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003732:	682b      	ldr	r3, [r5, #0]
 8003734:	6023      	str	r3, [r4, #0]
    LED->Address = Settings.address;
 8003736:	893a      	ldrh	r2, [r7, #8]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	801a      	strh	r2, [r3, #0]
    LED->red = Settings.red;
 800373c:	7afa      	ldrb	r2, [r7, #11]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	70da      	strb	r2, [r3, #3]
    LED->green = Settings.green;
 8003742:	7aba      	ldrb	r2, [r7, #10]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	709a      	strb	r2, [r3, #2]
    LED->blue = Settings.blue;
 8003748:	7b3a      	ldrb	r2, [r7, #12]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	711a      	strb	r2, [r3, #4]
    LED->IO_Driver.init();
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	4798      	blx	r3
    LED->IO_Driver.write(LED->Address, LED->red, LED->green, LED->blue);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	695c      	ldr	r4, [r3, #20]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	8818      	ldrh	r0, [r3, #0]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	78d9      	ldrb	r1, [r3, #3]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	789a      	ldrb	r2, [r3, #2]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	791b      	ldrb	r3, [r3, #4]
 8003768:	47a0      	blx	r4
}
 800376a:	bf00      	nop
 800376c:	3710      	adds	r7, #16
 800376e:	46bd      	mov	sp, r7
 8003770:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8003774:	b002      	add	sp, #8
 8003776:	4770      	bx	lr

08003778 <SerialLED_IO_Init>:
//static const uint8_t TIM_PERIOD = 119;     //1.25uS with 96MHz clock
static const uint8_t ZERO_DUTY_CYCLE = 29; //.3uS
static const uint8_t ONE_DUTY_CYCLE = 58;  //.6uS
static const uint8_t RESET_DUTY_CYCLE = 0;

static void SerialLED_IO_Init(void){
 8003778:	b580      	push	{r7, lr}
 800377a:	b082      	sub	sp, #8
 800377c:	af00      	add	r7, sp, #0
	//ensure reset signal is 0
	for(uint32_t i = NUMBER_OF_LEDS * BITS_PER_LED; i < LED_DMA_BUFFER_LENGTH; i++){
 800377e:	2360      	movs	r3, #96	; 0x60
 8003780:	607b      	str	r3, [r7, #4]
 8003782:	e008      	b.n	8003796 <SerialLED_IO_Init+0x1e>
		LED_DMA_BUFFER[i] = RESET_DUTY_CYCLE;
 8003784:	2300      	movs	r3, #0
 8003786:	b299      	uxth	r1, r3
 8003788:	4a0d      	ldr	r2, [pc, #52]	; (80037c0 <SerialLED_IO_Init+0x48>)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(uint32_t i = NUMBER_OF_LEDS * BITS_PER_LED; i < LED_DMA_BUFFER_LENGTH; i++){
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	3301      	adds	r3, #1
 8003794:	607b      	str	r3, [r7, #4]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2b9f      	cmp	r3, #159	; 0x9f
 800379a:	d9f3      	bls.n	8003784 <SerialLED_IO_Init+0xc>
	}
	TIM3_GPIO_Init();
 800379c:	f7fe fd94 	bl	80022c8 <TIM3_GPIO_Init>
	TIM_DMA_Init();
 80037a0:	f7fe fd1e 	bl	80021e0 <TIM_DMA_Init>
    if(initialize_status == LED_uninitialized){
 80037a4:	4b07      	ldr	r3, [pc, #28]	; (80037c4 <SerialLED_IO_Init+0x4c>)
 80037a6:	781b      	ldrb	r3, [r3, #0]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d104      	bne.n	80037b6 <SerialLED_IO_Init+0x3e>
	    TIM3_Init();
 80037ac:	f7ff fc22 	bl	8002ff4 <TIM3_Init>
	    initialize_status = LED_initialized;
 80037b0:	4b04      	ldr	r3, [pc, #16]	; (80037c4 <SerialLED_IO_Init+0x4c>)
 80037b2:	2201      	movs	r2, #1
 80037b4:	701a      	strb	r2, [r3, #0]
    }

}
 80037b6:	bf00      	nop
 80037b8:	3708      	adds	r7, #8
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}
 80037be:	bf00      	nop
 80037c0:	20001118 	.word	0x20001118
 80037c4:	20001258 	.word	0x20001258

080037c8 <SerialLED_IO_DeInit>:

static void SerialLED_IO_DeInit(void){
 80037c8:	b580      	push	{r7, lr}
 80037ca:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop_DMA(&htim3, TIM_CHANNEL_1);
 80037cc:	2100      	movs	r1, #0
 80037ce:	4802      	ldr	r0, [pc, #8]	; (80037d8 <SerialLED_IO_DeInit+0x10>)
 80037d0:	f005 fcfe 	bl	80091d0 <HAL_TIM_PWM_Stop_DMA>
}
 80037d4:	bf00      	nop
 80037d6:	bd80      	pop	{r7, pc}
 80037d8:	20000fc8 	.word	0x20000fc8

080037dc <SerialLED_IO_Write>:

static void SerialLED_IO_Write(uint16_t Address, uint8_t red, uint8_t green, uint8_t blue){
 80037dc:	b590      	push	{r4, r7, lr}
 80037de:	b085      	sub	sp, #20
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	4604      	mov	r4, r0
 80037e4:	4608      	mov	r0, r1
 80037e6:	4611      	mov	r1, r2
 80037e8:	461a      	mov	r2, r3
 80037ea:	4623      	mov	r3, r4
 80037ec:	80fb      	strh	r3, [r7, #6]
 80037ee:	4603      	mov	r3, r0
 80037f0:	717b      	strb	r3, [r7, #5]
 80037f2:	460b      	mov	r3, r1
 80037f4:	713b      	strb	r3, [r7, #4]
 80037f6:	4613      	mov	r3, r2
 80037f8:	70fb      	strb	r3, [r7, #3]
	//HAL_TIM_PWM_Stop_DMA(&htim3, TIM_CHANNEL_1);
    for(uint16_t i = 0; i < 8; i++){
 80037fa:	2300      	movs	r3, #0
 80037fc:	81fb      	strh	r3, [r7, #14]
 80037fe:	e052      	b.n	80038a6 <SerialLED_IO_Write+0xca>
    	LED_DMA_BUFFER[(Address * BITS_PER_LED) + 0  + i] = green & (1 << (7 - i)) ? ONE_DUTY_CYCLE : ZERO_DUTY_CYCLE;
 8003800:	793a      	ldrb	r2, [r7, #4]
 8003802:	89fb      	ldrh	r3, [r7, #14]
 8003804:	f1c3 0307 	rsb	r3, r3, #7
 8003808:	fa42 f303 	asr.w	r3, r2, r3
 800380c:	f003 0301 	and.w	r3, r3, #1
 8003810:	2b00      	cmp	r3, #0
 8003812:	d002      	beq.n	800381a <SerialLED_IO_Write+0x3e>
 8003814:	233a      	movs	r3, #58	; 0x3a
 8003816:	b29a      	uxth	r2, r3
 8003818:	e001      	b.n	800381e <SerialLED_IO_Write+0x42>
 800381a:	231d      	movs	r3, #29
 800381c:	b29a      	uxth	r2, r3
 800381e:	88f9      	ldrh	r1, [r7, #6]
 8003820:	460b      	mov	r3, r1
 8003822:	005b      	lsls	r3, r3, #1
 8003824:	440b      	add	r3, r1
 8003826:	00db      	lsls	r3, r3, #3
 8003828:	4619      	mov	r1, r3
 800382a:	89fb      	ldrh	r3, [r7, #14]
 800382c:	440b      	add	r3, r1
 800382e:	4924      	ldr	r1, [pc, #144]	; (80038c0 <SerialLED_IO_Write+0xe4>)
 8003830:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    	LED_DMA_BUFFER[(Address * BITS_PER_LED) + 8  + i] = red   & (1 << (7 - i)) ? ONE_DUTY_CYCLE : ZERO_DUTY_CYCLE;
 8003834:	797a      	ldrb	r2, [r7, #5]
 8003836:	89fb      	ldrh	r3, [r7, #14]
 8003838:	f1c3 0307 	rsb	r3, r3, #7
 800383c:	fa42 f303 	asr.w	r3, r2, r3
 8003840:	f003 0301 	and.w	r3, r3, #1
 8003844:	2b00      	cmp	r3, #0
 8003846:	d002      	beq.n	800384e <SerialLED_IO_Write+0x72>
 8003848:	233a      	movs	r3, #58	; 0x3a
 800384a:	b29a      	uxth	r2, r3
 800384c:	e001      	b.n	8003852 <SerialLED_IO_Write+0x76>
 800384e:	231d      	movs	r3, #29
 8003850:	b29a      	uxth	r2, r3
 8003852:	88f9      	ldrh	r1, [r7, #6]
 8003854:	460b      	mov	r3, r1
 8003856:	005b      	lsls	r3, r3, #1
 8003858:	440b      	add	r3, r1
 800385a:	00db      	lsls	r3, r3, #3
 800385c:	4619      	mov	r1, r3
 800385e:	89fb      	ldrh	r3, [r7, #14]
 8003860:	440b      	add	r3, r1
 8003862:	3308      	adds	r3, #8
 8003864:	4916      	ldr	r1, [pc, #88]	; (80038c0 <SerialLED_IO_Write+0xe4>)
 8003866:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    	LED_DMA_BUFFER[(Address * BITS_PER_LED) + 16 + i] = blue  & (1 << (7 - i)) ? ONE_DUTY_CYCLE : ZERO_DUTY_CYCLE;
 800386a:	78fa      	ldrb	r2, [r7, #3]
 800386c:	89fb      	ldrh	r3, [r7, #14]
 800386e:	f1c3 0307 	rsb	r3, r3, #7
 8003872:	fa42 f303 	asr.w	r3, r2, r3
 8003876:	f003 0301 	and.w	r3, r3, #1
 800387a:	2b00      	cmp	r3, #0
 800387c:	d002      	beq.n	8003884 <SerialLED_IO_Write+0xa8>
 800387e:	233a      	movs	r3, #58	; 0x3a
 8003880:	b29a      	uxth	r2, r3
 8003882:	e001      	b.n	8003888 <SerialLED_IO_Write+0xac>
 8003884:	231d      	movs	r3, #29
 8003886:	b29a      	uxth	r2, r3
 8003888:	88f9      	ldrh	r1, [r7, #6]
 800388a:	460b      	mov	r3, r1
 800388c:	005b      	lsls	r3, r3, #1
 800388e:	440b      	add	r3, r1
 8003890:	00db      	lsls	r3, r3, #3
 8003892:	4619      	mov	r1, r3
 8003894:	89fb      	ldrh	r3, [r7, #14]
 8003896:	440b      	add	r3, r1
 8003898:	3310      	adds	r3, #16
 800389a:	4909      	ldr	r1, [pc, #36]	; (80038c0 <SerialLED_IO_Write+0xe4>)
 800389c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    for(uint16_t i = 0; i < 8; i++){
 80038a0:	89fb      	ldrh	r3, [r7, #14]
 80038a2:	3301      	adds	r3, #1
 80038a4:	81fb      	strh	r3, [r7, #14]
 80038a6:	89fb      	ldrh	r3, [r7, #14]
 80038a8:	2b07      	cmp	r3, #7
 80038aa:	d9a9      	bls.n	8003800 <SerialLED_IO_Write+0x24>
    }
    HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, (uint32_t*)LED_DMA_BUFFER, LED_DMA_BUFFER_LENGTH);
 80038ac:	23a0      	movs	r3, #160	; 0xa0
 80038ae:	4a04      	ldr	r2, [pc, #16]	; (80038c0 <SerialLED_IO_Write+0xe4>)
 80038b0:	2100      	movs	r1, #0
 80038b2:	4804      	ldr	r0, [pc, #16]	; (80038c4 <SerialLED_IO_Write+0xe8>)
 80038b4:	f005 fadc 	bl	8008e70 <HAL_TIM_PWM_Start_DMA>
}
 80038b8:	bf00      	nop
 80038ba:	3714      	adds	r7, #20
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd90      	pop	{r4, r7, pc}
 80038c0:	20001118 	.word	0x20001118
 80038c4:	20000fc8 	.word	0x20000fc8

080038c8 <TouchButtonInit>:
 *  Created on: May 26, 2022
 *      Author: evanl
 */
#include "TouchButton.h"

void TouchButtonInit(TouchButton_Init_Struct_t Settings, TouchButton_Handle_t *Dev, TouchButton_IO_Drv_t IO_Driver){
 80038c8:	b5b0      	push	{r4, r5, r7, lr}
 80038ca:	b084      	sub	sp, #16
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	1d3c      	adds	r4, r7, #4
 80038d0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80038d4:	603b      	str	r3, [r7, #0]
    Dev->IO_Driver = IO_Driver;
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	f103 0410 	add.w	r4, r3, #16
 80038dc:	f107 0520 	add.w	r5, r7, #32
 80038e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80038e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80038e4:	682b      	ldr	r3, [r5, #0]
 80038e6:	6023      	str	r3, [r4, #0]
    Dev->KeyFunction = Settings.KeyFunction;
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	68fa      	ldr	r2, [r7, #12]
 80038ec:	609a      	str	r2, [r3, #8]
    Dev->TopLeftBound = Settings.TopLeftBound;
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	687a      	ldr	r2, [r7, #4]
 80038f2:	601a      	str	r2, [r3, #0]
    Dev->BottomRightBound = Settings.BottomRightBound;
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	68ba      	ldr	r2, [r7, #8]
 80038f8:	605a      	str	r2, [r3, #4]
    Dev->State = TouchButtonUnpressed;
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	2201      	movs	r2, #1
 80038fe:	731a      	strb	r2, [r3, #12]
    Dev->IO_Driver.init();
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	691b      	ldr	r3, [r3, #16]
 8003904:	4798      	blx	r3
}
 8003906:	bf00      	nop
 8003908:	3710      	adds	r7, #16
 800390a:	46bd      	mov	sp, r7
 800390c:	bdb0      	pop	{r4, r5, r7, pc}

0800390e <TouchButtonRead>:

void TouchButtonSetFunction(TouchButton_Handle_t* Dev, KeyFunction_t NewFunction){
    Dev->KeyFunction = NewFunction;
}

TouchButton_Status_t TouchButtonRead(TouchButton_Handle_t *Dev){
 800390e:	b580      	push	{r7, lr}
 8003910:	b084      	sub	sp, #16
 8003912:	af00      	add	r7, sp, #0
 8003914:	6078      	str	r0, [r7, #4]
	TouchButtonState_t Previous_State = Dev->State;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	7b1b      	ldrb	r3, [r3, #12]
 800391a:	73fb      	strb	r3, [r7, #15]
    Dev->State = Dev->IO_Driver.read(Dev->TopLeftBound, Dev->BottomRightBound);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	699b      	ldr	r3, [r3, #24]
 8003920:	6879      	ldr	r1, [r7, #4]
 8003922:	687a      	ldr	r2, [r7, #4]
 8003924:	6849      	ldr	r1, [r1, #4]
 8003926:	6810      	ldr	r0, [r2, #0]
 8003928:	4798      	blx	r3
 800392a:	4603      	mov	r3, r0
 800392c:	461a      	mov	r2, r3
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	731a      	strb	r2, [r3, #12]
    if(Previous_State != Dev->State){
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	7b1b      	ldrb	r3, [r3, #12]
 8003936:	7bfa      	ldrb	r2, [r7, #15]
 8003938:	429a      	cmp	r2, r3
 800393a:	d001      	beq.n	8003940 <TouchButtonRead+0x32>
    	return TouchButtonChanged;
 800393c:	2300      	movs	r3, #0
 800393e:	e000      	b.n	8003942 <TouchButtonRead+0x34>
    } else {
    	return TouchButtonUnchanged;
 8003940:	2301      	movs	r3, #1
    }
}
 8003942:	4618      	mov	r0, r3
 8003944:	3710      	adds	r7, #16
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}
	...

0800394c <TouchButton_IO_Init>:
	TouchButton_Initialized
}TouchButton_Init_Status_t;

static TouchButton_Init_Status_t TouchButton_Init = TouchButton_Uninitialized;

static void TouchButton_IO_Init(void){;
 800394c:	b590      	push	{r4, r7, lr}
 800394e:	b083      	sub	sp, #12
 8003950:	af02      	add	r7, sp, #8
	if(TouchButton_Init == TouchButton_Uninitialized){
 8003952:	4b0b      	ldr	r3, [pc, #44]	; (8003980 <TouchButton_IO_Init+0x34>)
 8003954:	781b      	ldrb	r3, [r3, #0]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d10e      	bne.n	8003978 <TouchButton_IO_Init+0x2c>
		FT6206_Init(&TouchScreen, FT6202_Drv);
 800395a:	4b0a      	ldr	r3, [pc, #40]	; (8003984 <TouchButton_IO_Init+0x38>)
 800395c:	466c      	mov	r4, sp
 800395e:	f103 020c 	add.w	r2, r3, #12
 8003962:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003966:	e884 0003 	stmia.w	r4, {r0, r1}
 800396a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800396c:	4806      	ldr	r0, [pc, #24]	; (8003988 <TouchButton_IO_Init+0x3c>)
 800396e:	f7fc fe09 	bl	8000584 <FT6206_Init>
		TouchButton_Init = TouchButton_Initialized;
 8003972:	4b03      	ldr	r3, [pc, #12]	; (8003980 <TouchButton_IO_Init+0x34>)
 8003974:	2201      	movs	r2, #1
 8003976:	701a      	strb	r2, [r3, #0]
	}
}
 8003978:	bf00      	nop
 800397a:	3704      	adds	r7, #4
 800397c:	46bd      	mov	sp, r7
 800397e:	bd90      	pop	{r4, r7, pc}
 8003980:	20001259 	.word	0x20001259
 8003984:	20000000 	.word	0x20000000
 8003988:	2000125c 	.word	0x2000125c

0800398c <TouchButton_IO_DeInit>:

static void TouchButton_IO_DeInit(void){
 800398c:	b580      	push	{r7, lr}
 800398e:	af00      	add	r7, sp, #0
	if(TouchButton_Init == TouchButton_Initialized){
 8003990:	4b05      	ldr	r3, [pc, #20]	; (80039a8 <TouchButton_IO_DeInit+0x1c>)
 8003992:	781b      	ldrb	r3, [r3, #0]
 8003994:	2b01      	cmp	r3, #1
 8003996:	d105      	bne.n	80039a4 <TouchButton_IO_DeInit+0x18>
		FT6206_DeInit(&TouchScreen);
 8003998:	4804      	ldr	r0, [pc, #16]	; (80039ac <TouchButton_IO_DeInit+0x20>)
 800399a:	f7fc fe21 	bl	80005e0 <FT6206_DeInit>
		TouchButton_Init = TouchButton_Uninitialized;
 800399e:	4b02      	ldr	r3, [pc, #8]	; (80039a8 <TouchButton_IO_DeInit+0x1c>)
 80039a0:	2200      	movs	r2, #0
 80039a2:	701a      	strb	r2, [r3, #0]
	}
}
 80039a4:	bf00      	nop
 80039a6:	bd80      	pop	{r7, pc}
 80039a8:	20001259 	.word	0x20001259
 80039ac:	2000125c 	.word	0x2000125c

080039b0 <TouchButton_IO_Read>:

static TouchButtonState_t TouchButton_IO_Read(TouchButtonCoordinate_t TopLeftBound, TouchButtonCoordinate_t BottomRightBound){
 80039b0:	b480      	push	{r7}
 80039b2:	b083      	sub	sp, #12
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
 80039b8:	6039      	str	r1, [r7, #0]
	if(TouchScreen.P1_XPos >= TopLeftBound.X_Position && TouchScreen.P1_XPos <= BottomRightBound.X_Position && TouchScreen.P1_YPos >= TopLeftBound.Y_Position && TouchScreen.P1_YPos <= BottomRightBound.Y_Position){
 80039ba:	4b14      	ldr	r3, [pc, #80]	; (8003a0c <TouchButton_IO_Read+0x5c>)
 80039bc:	881b      	ldrh	r3, [r3, #0]
 80039be:	b29a      	uxth	r2, r3
 80039c0:	88bb      	ldrh	r3, [r7, #4]
 80039c2:	429a      	cmp	r2, r3
 80039c4:	d31a      	bcc.n	80039fc <TouchButton_IO_Read+0x4c>
 80039c6:	4b11      	ldr	r3, [pc, #68]	; (8003a0c <TouchButton_IO_Read+0x5c>)
 80039c8:	881b      	ldrh	r3, [r3, #0]
 80039ca:	b29a      	uxth	r2, r3
 80039cc:	883b      	ldrh	r3, [r7, #0]
 80039ce:	429a      	cmp	r2, r3
 80039d0:	d814      	bhi.n	80039fc <TouchButton_IO_Read+0x4c>
 80039d2:	4b0e      	ldr	r3, [pc, #56]	; (8003a0c <TouchButton_IO_Read+0x5c>)
 80039d4:	885b      	ldrh	r3, [r3, #2]
 80039d6:	b29a      	uxth	r2, r3
 80039d8:	88fb      	ldrh	r3, [r7, #6]
 80039da:	429a      	cmp	r2, r3
 80039dc:	d30e      	bcc.n	80039fc <TouchButton_IO_Read+0x4c>
 80039de:	4b0b      	ldr	r3, [pc, #44]	; (8003a0c <TouchButton_IO_Read+0x5c>)
 80039e0:	885b      	ldrh	r3, [r3, #2]
 80039e2:	b29a      	uxth	r2, r3
 80039e4:	887b      	ldrh	r3, [r7, #2]
 80039e6:	429a      	cmp	r2, r3
 80039e8:	d808      	bhi.n	80039fc <TouchButton_IO_Read+0x4c>
		if(TouchScreen.P1_EventFlag == Contact){
 80039ea:	4b08      	ldr	r3, [pc, #32]	; (8003a0c <TouchButton_IO_Read+0x5c>)
 80039ec:	791b      	ldrb	r3, [r3, #4]
 80039ee:	b2db      	uxtb	r3, r3
 80039f0:	2b02      	cmp	r3, #2
 80039f2:	d101      	bne.n	80039f8 <TouchButton_IO_Read+0x48>
	        return TouchButtonPressed;
 80039f4:	2300      	movs	r3, #0
 80039f6:	e002      	b.n	80039fe <TouchButton_IO_Read+0x4e>
		} else {
			return TouchButtonUnpressed;
 80039f8:	2301      	movs	r3, #1
 80039fa:	e000      	b.n	80039fe <TouchButton_IO_Read+0x4e>
		}
	} else {
		return TouchButtonUnpressed;
 80039fc:	2301      	movs	r3, #1
	}
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	370c      	adds	r7, #12
 8003a02:	46bd      	mov	sp, r7
 8003a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a08:	4770      	bx	lr
 8003a0a:	bf00      	nop
 8003a0c:	2000125c 	.word	0x2000125c

08003a10 <TouchScreenIRQCallback>:
		.read = TouchButton_IO_Read,
		.write = '\0',
		.ioctl = '\0'
};

void TouchScreenIRQCallback(){
 8003a10:	b580      	push	{r7, lr}
 8003a12:	af00      	add	r7, sp, #0
	FT6206_ReadScreen(&TouchScreen);
 8003a14:	4802      	ldr	r0, [pc, #8]	; (8003a20 <TouchScreenIRQCallback+0x10>)
 8003a16:	f7fc fdfd 	bl	8000614 <FT6206_ReadScreen>
}
 8003a1a:	bf00      	nop
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	bf00      	nop
 8003a20:	2000125c 	.word	0x2000125c

08003a24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003a24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003a5c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003a28:	480d      	ldr	r0, [pc, #52]	; (8003a60 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003a2a:	490e      	ldr	r1, [pc, #56]	; (8003a64 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003a2c:	4a0e      	ldr	r2, [pc, #56]	; (8003a68 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003a2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003a30:	e002      	b.n	8003a38 <LoopCopyDataInit>

08003a32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003a32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003a34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003a36:	3304      	adds	r3, #4

08003a38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003a38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003a3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003a3c:	d3f9      	bcc.n	8003a32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003a3e:	4a0b      	ldr	r2, [pc, #44]	; (8003a6c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003a40:	4c0b      	ldr	r4, [pc, #44]	; (8003a70 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003a42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003a44:	e001      	b.n	8003a4a <LoopFillZerobss>

08003a46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003a46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003a48:	3204      	adds	r2, #4

08003a4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003a4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003a4c:	d3fb      	bcc.n	8003a46 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003a4e:	f7ff fa2b 	bl	8002ea8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003a52:	f00a f9c9 	bl	800dde8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003a56:	f7fe fe59 	bl	800270c <main>
  bx  lr    
 8003a5a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003a5c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003a60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003a64:	20000388 	.word	0x20000388
  ldr r2, =_sidata
 8003a68:	08031048 	.word	0x08031048
  ldr r2, =_sbss
 8003a6c:	20000388 	.word	0x20000388
  ldr r4, =_ebss
 8003a70:	20001cd0 	.word	0x20001cd0

08003a74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003a74:	e7fe      	b.n	8003a74 <ADC_IRQHandler>
	...

08003a78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003a7c:	4b0e      	ldr	r3, [pc, #56]	; (8003ab8 <HAL_Init+0x40>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a0d      	ldr	r2, [pc, #52]	; (8003ab8 <HAL_Init+0x40>)
 8003a82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003a86:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003a88:	4b0b      	ldr	r3, [pc, #44]	; (8003ab8 <HAL_Init+0x40>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a0a      	ldr	r2, [pc, #40]	; (8003ab8 <HAL_Init+0x40>)
 8003a8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003a92:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003a94:	4b08      	ldr	r3, [pc, #32]	; (8003ab8 <HAL_Init+0x40>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a07      	ldr	r2, [pc, #28]	; (8003ab8 <HAL_Init+0x40>)
 8003a9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003aa0:	2003      	movs	r0, #3
 8003aa2:	f000 fded 	bl	8004680 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003aa6:	2001      	movs	r0, #1
 8003aa8:	f000 f808 	bl	8003abc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003aac:	f7ff f8ba 	bl	8002c24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003ab0:	2300      	movs	r3, #0
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	bf00      	nop
 8003ab8:	40023c00 	.word	0x40023c00

08003abc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b082      	sub	sp, #8
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003ac4:	4b12      	ldr	r3, [pc, #72]	; (8003b10 <HAL_InitTick+0x54>)
 8003ac6:	681a      	ldr	r2, [r3, #0]
 8003ac8:	4b12      	ldr	r3, [pc, #72]	; (8003b14 <HAL_InitTick+0x58>)
 8003aca:	781b      	ldrb	r3, [r3, #0]
 8003acc:	4619      	mov	r1, r3
 8003ace:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003ad2:	fbb3 f3f1 	udiv	r3, r3, r1
 8003ad6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ada:	4618      	mov	r0, r3
 8003adc:	f000 fe13 	bl	8004706 <HAL_SYSTICK_Config>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d001      	beq.n	8003aea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e00e      	b.n	8003b08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2b0f      	cmp	r3, #15
 8003aee:	d80a      	bhi.n	8003b06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003af0:	2200      	movs	r2, #0
 8003af2:	6879      	ldr	r1, [r7, #4]
 8003af4:	f04f 30ff 	mov.w	r0, #4294967295
 8003af8:	f000 fdcd 	bl	8004696 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003afc:	4a06      	ldr	r2, [pc, #24]	; (8003b18 <HAL_InitTick+0x5c>)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003b02:	2300      	movs	r3, #0
 8003b04:	e000      	b.n	8003b08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	3708      	adds	r7, #8
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}
 8003b10:	20000178 	.word	0x20000178
 8003b14:	2000019c 	.word	0x2000019c
 8003b18:	20000198 	.word	0x20000198

08003b1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003b20:	4b06      	ldr	r3, [pc, #24]	; (8003b3c <HAL_IncTick+0x20>)
 8003b22:	781b      	ldrb	r3, [r3, #0]
 8003b24:	461a      	mov	r2, r3
 8003b26:	4b06      	ldr	r3, [pc, #24]	; (8003b40 <HAL_IncTick+0x24>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4413      	add	r3, r2
 8003b2c:	4a04      	ldr	r2, [pc, #16]	; (8003b40 <HAL_IncTick+0x24>)
 8003b2e:	6013      	str	r3, [r2, #0]
}
 8003b30:	bf00      	nop
 8003b32:	46bd      	mov	sp, r7
 8003b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b38:	4770      	bx	lr
 8003b3a:	bf00      	nop
 8003b3c:	2000019c 	.word	0x2000019c
 8003b40:	20001278 	.word	0x20001278

08003b44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b44:	b480      	push	{r7}
 8003b46:	af00      	add	r7, sp, #0
  return uwTick;
 8003b48:	4b03      	ldr	r3, [pc, #12]	; (8003b58 <HAL_GetTick+0x14>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b54:	4770      	bx	lr
 8003b56:	bf00      	nop
 8003b58:	20001278 	.word	0x20001278

08003b5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b084      	sub	sp, #16
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003b64:	f7ff ffee 	bl	8003b44 <HAL_GetTick>
 8003b68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b74:	d005      	beq.n	8003b82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003b76:	4b0a      	ldr	r3, [pc, #40]	; (8003ba0 <HAL_Delay+0x44>)
 8003b78:	781b      	ldrb	r3, [r3, #0]
 8003b7a:	461a      	mov	r2, r3
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	4413      	add	r3, r2
 8003b80:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003b82:	bf00      	nop
 8003b84:	f7ff ffde 	bl	8003b44 <HAL_GetTick>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	1ad3      	subs	r3, r2, r3
 8003b8e:	68fa      	ldr	r2, [r7, #12]
 8003b90:	429a      	cmp	r2, r3
 8003b92:	d8f7      	bhi.n	8003b84 <HAL_Delay+0x28>
  {
  }
}
 8003b94:	bf00      	nop
 8003b96:	bf00      	nop
 8003b98:	3710      	adds	r7, #16
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}
 8003b9e:	bf00      	nop
 8003ba0:	2000019c 	.word	0x2000019c

08003ba4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b084      	sub	sp, #16
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003bac:	2300      	movs	r3, #0
 8003bae:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d101      	bne.n	8003bba <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e033      	b.n	8003c22 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d109      	bne.n	8003bd6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f7fe f9f8 	bl	8001fb8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bda:	f003 0310 	and.w	r3, r3, #16
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d118      	bne.n	8003c14 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003bea:	f023 0302 	bic.w	r3, r3, #2
 8003bee:	f043 0202 	orr.w	r2, r3, #2
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	f000 fab2 	bl	8004160 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c06:	f023 0303 	bic.w	r3, r3, #3
 8003c0a:	f043 0201 	orr.w	r2, r3, #1
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	641a      	str	r2, [r3, #64]	; 0x40
 8003c12:	e001      	b.n	8003c18 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003c20:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	3710      	adds	r7, #16
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}
	...

08003c2c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b086      	sub	sp, #24
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	60f8      	str	r0, [r7, #12]
 8003c34:	60b9      	str	r1, [r7, #8]
 8003c36:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c42:	2b01      	cmp	r3, #1
 8003c44:	d101      	bne.n	8003c4a <HAL_ADC_Start_DMA+0x1e>
 8003c46:	2302      	movs	r3, #2
 8003c48:	e0ce      	b.n	8003de8 <HAL_ADC_Start_DMA+0x1bc>
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	f003 0301 	and.w	r3, r3, #1
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	d018      	beq.n	8003c92 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	689a      	ldr	r2, [r3, #8]
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f042 0201 	orr.w	r2, r2, #1
 8003c6e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003c70:	4b5f      	ldr	r3, [pc, #380]	; (8003df0 <HAL_ADC_Start_DMA+0x1c4>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a5f      	ldr	r2, [pc, #380]	; (8003df4 <HAL_ADC_Start_DMA+0x1c8>)
 8003c76:	fba2 2303 	umull	r2, r3, r2, r3
 8003c7a:	0c9a      	lsrs	r2, r3, #18
 8003c7c:	4613      	mov	r3, r2
 8003c7e:	005b      	lsls	r3, r3, #1
 8003c80:	4413      	add	r3, r2
 8003c82:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003c84:	e002      	b.n	8003c8c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	3b01      	subs	r3, #1
 8003c8a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d1f9      	bne.n	8003c86 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ca0:	d107      	bne.n	8003cb2 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	689a      	ldr	r2, [r3, #8]
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003cb0:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	f003 0301 	and.w	r3, r3, #1
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	f040 8086 	bne.w	8003dce <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003cca:	f023 0301 	bic.w	r3, r3, #1
 8003cce:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d007      	beq.n	8003cf4 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003cec:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003cfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d00:	d106      	bne.n	8003d10 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d06:	f023 0206 	bic.w	r2, r3, #6
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	645a      	str	r2, [r3, #68]	; 0x44
 8003d0e:	e002      	b.n	8003d16 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2200      	movs	r2, #0
 8003d14:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003d1e:	4b36      	ldr	r3, [pc, #216]	; (8003df8 <HAL_ADC_Start_DMA+0x1cc>)
 8003d20:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d26:	4a35      	ldr	r2, [pc, #212]	; (8003dfc <HAL_ADC_Start_DMA+0x1d0>)
 8003d28:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d2e:	4a34      	ldr	r2, [pc, #208]	; (8003e00 <HAL_ADC_Start_DMA+0x1d4>)
 8003d30:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d36:	4a33      	ldr	r2, [pc, #204]	; (8003e04 <HAL_ADC_Start_DMA+0x1d8>)
 8003d38:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003d42:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	685a      	ldr	r2, [r3, #4]
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003d52:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	689a      	ldr	r2, [r3, #8]
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d62:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	334c      	adds	r3, #76	; 0x4c
 8003d6e:	4619      	mov	r1, r3
 8003d70:	68ba      	ldr	r2, [r7, #8]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	f000 fd90 	bl	8004898 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	f003 031f 	and.w	r3, r3, #31
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d10f      	bne.n	8003da4 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d129      	bne.n	8003de6 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	689a      	ldr	r2, [r3, #8]
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003da0:	609a      	str	r2, [r3, #8]
 8003da2:	e020      	b.n	8003de6 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a17      	ldr	r2, [pc, #92]	; (8003e08 <HAL_ADC_Start_DMA+0x1dc>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d11b      	bne.n	8003de6 <HAL_ADC_Start_DMA+0x1ba>
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d114      	bne.n	8003de6 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	689a      	ldr	r2, [r3, #8]
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003dca:	609a      	str	r2, [r3, #8]
 8003dcc:	e00b      	b.n	8003de6 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd2:	f043 0210 	orr.w	r2, r3, #16
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dde:	f043 0201 	orr.w	r2, r3, #1
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003de6:	2300      	movs	r3, #0
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	3718      	adds	r7, #24
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd80      	pop	{r7, pc}
 8003df0:	20000178 	.word	0x20000178
 8003df4:	431bde83 	.word	0x431bde83
 8003df8:	40012300 	.word	0x40012300
 8003dfc:	08004359 	.word	0x08004359
 8003e00:	08004413 	.word	0x08004413
 8003e04:	0800442f 	.word	0x0800442f
 8003e08:	40012000 	.word	0x40012000

08003e0c <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b084      	sub	sp, #16
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e14:	2300      	movs	r3, #0
 8003e16:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d101      	bne.n	8003e26 <HAL_ADC_Stop_DMA+0x1a>
 8003e22:	2302      	movs	r3, #2
 8003e24:	e048      	b.n	8003eb8 <HAL_ADC_Stop_DMA+0xac>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2201      	movs	r2, #1
 8003e2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	689a      	ldr	r2, [r3, #8]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f022 0201 	bic.w	r2, r2, #1
 8003e3c:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	f003 0301 	and.w	r3, r3, #1
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d130      	bne.n	8003eae <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	689a      	ldr	r2, [r3, #8]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e5a:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e60:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	2b02      	cmp	r3, #2
 8003e68:	d10f      	bne.n	8003e8a <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f000 fd6a 	bl	8004948 <HAL_DMA_Abort>
 8003e74:	4603      	mov	r3, r0
 8003e76:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8003e78:	7bfb      	ldrb	r3, [r7, #15]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d005      	beq.n	8003e8a <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e82:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	685a      	ldr	r2, [r3, #4]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8003e98:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e9e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003ea2:	f023 0301 	bic.w	r3, r3, #1
 8003ea6:	f043 0201 	orr.w	r2, r3, #1
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003eb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	3710      	adds	r7, #16
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}

08003ec0 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b083      	sub	sp, #12
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8003ec8:	bf00      	nop
 8003eca:	370c      	adds	r7, #12
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed2:	4770      	bx	lr

08003ed4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b083      	sub	sp, #12
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003edc:	bf00      	nop
 8003ede:	370c      	adds	r7, #12
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee6:	4770      	bx	lr

08003ee8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b083      	sub	sp, #12
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003ef0:	bf00      	nop
 8003ef2:	370c      	adds	r7, #12
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr

08003efc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b085      	sub	sp, #20
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
 8003f04:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003f06:	2300      	movs	r3, #0
 8003f08:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	d101      	bne.n	8003f18 <HAL_ADC_ConfigChannel+0x1c>
 8003f14:	2302      	movs	r3, #2
 8003f16:	e113      	b.n	8004140 <HAL_ADC_ConfigChannel+0x244>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	2b09      	cmp	r3, #9
 8003f26:	d925      	bls.n	8003f74 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	68d9      	ldr	r1, [r3, #12]
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	b29b      	uxth	r3, r3
 8003f34:	461a      	mov	r2, r3
 8003f36:	4613      	mov	r3, r2
 8003f38:	005b      	lsls	r3, r3, #1
 8003f3a:	4413      	add	r3, r2
 8003f3c:	3b1e      	subs	r3, #30
 8003f3e:	2207      	movs	r2, #7
 8003f40:	fa02 f303 	lsl.w	r3, r2, r3
 8003f44:	43da      	mvns	r2, r3
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	400a      	ands	r2, r1
 8003f4c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	68d9      	ldr	r1, [r3, #12]
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	689a      	ldr	r2, [r3, #8]
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	b29b      	uxth	r3, r3
 8003f5e:	4618      	mov	r0, r3
 8003f60:	4603      	mov	r3, r0
 8003f62:	005b      	lsls	r3, r3, #1
 8003f64:	4403      	add	r3, r0
 8003f66:	3b1e      	subs	r3, #30
 8003f68:	409a      	lsls	r2, r3
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	430a      	orrs	r2, r1
 8003f70:	60da      	str	r2, [r3, #12]
 8003f72:	e022      	b.n	8003fba <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	6919      	ldr	r1, [r3, #16]
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	b29b      	uxth	r3, r3
 8003f80:	461a      	mov	r2, r3
 8003f82:	4613      	mov	r3, r2
 8003f84:	005b      	lsls	r3, r3, #1
 8003f86:	4413      	add	r3, r2
 8003f88:	2207      	movs	r2, #7
 8003f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f8e:	43da      	mvns	r2, r3
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	400a      	ands	r2, r1
 8003f96:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	6919      	ldr	r1, [r3, #16]
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	689a      	ldr	r2, [r3, #8]
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	b29b      	uxth	r3, r3
 8003fa8:	4618      	mov	r0, r3
 8003faa:	4603      	mov	r3, r0
 8003fac:	005b      	lsls	r3, r3, #1
 8003fae:	4403      	add	r3, r0
 8003fb0:	409a      	lsls	r2, r3
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	430a      	orrs	r2, r1
 8003fb8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	2b06      	cmp	r3, #6
 8003fc0:	d824      	bhi.n	800400c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	685a      	ldr	r2, [r3, #4]
 8003fcc:	4613      	mov	r3, r2
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	4413      	add	r3, r2
 8003fd2:	3b05      	subs	r3, #5
 8003fd4:	221f      	movs	r2, #31
 8003fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8003fda:	43da      	mvns	r2, r3
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	400a      	ands	r2, r1
 8003fe2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	b29b      	uxth	r3, r3
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	685a      	ldr	r2, [r3, #4]
 8003ff6:	4613      	mov	r3, r2
 8003ff8:	009b      	lsls	r3, r3, #2
 8003ffa:	4413      	add	r3, r2
 8003ffc:	3b05      	subs	r3, #5
 8003ffe:	fa00 f203 	lsl.w	r2, r0, r3
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	430a      	orrs	r2, r1
 8004008:	635a      	str	r2, [r3, #52]	; 0x34
 800400a:	e04c      	b.n	80040a6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	2b0c      	cmp	r3, #12
 8004012:	d824      	bhi.n	800405e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	685a      	ldr	r2, [r3, #4]
 800401e:	4613      	mov	r3, r2
 8004020:	009b      	lsls	r3, r3, #2
 8004022:	4413      	add	r3, r2
 8004024:	3b23      	subs	r3, #35	; 0x23
 8004026:	221f      	movs	r2, #31
 8004028:	fa02 f303 	lsl.w	r3, r2, r3
 800402c:	43da      	mvns	r2, r3
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	400a      	ands	r2, r1
 8004034:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	b29b      	uxth	r3, r3
 8004042:	4618      	mov	r0, r3
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	685a      	ldr	r2, [r3, #4]
 8004048:	4613      	mov	r3, r2
 800404a:	009b      	lsls	r3, r3, #2
 800404c:	4413      	add	r3, r2
 800404e:	3b23      	subs	r3, #35	; 0x23
 8004050:	fa00 f203 	lsl.w	r2, r0, r3
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	430a      	orrs	r2, r1
 800405a:	631a      	str	r2, [r3, #48]	; 0x30
 800405c:	e023      	b.n	80040a6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	685a      	ldr	r2, [r3, #4]
 8004068:	4613      	mov	r3, r2
 800406a:	009b      	lsls	r3, r3, #2
 800406c:	4413      	add	r3, r2
 800406e:	3b41      	subs	r3, #65	; 0x41
 8004070:	221f      	movs	r2, #31
 8004072:	fa02 f303 	lsl.w	r3, r2, r3
 8004076:	43da      	mvns	r2, r3
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	400a      	ands	r2, r1
 800407e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	b29b      	uxth	r3, r3
 800408c:	4618      	mov	r0, r3
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	685a      	ldr	r2, [r3, #4]
 8004092:	4613      	mov	r3, r2
 8004094:	009b      	lsls	r3, r3, #2
 8004096:	4413      	add	r3, r2
 8004098:	3b41      	subs	r3, #65	; 0x41
 800409a:	fa00 f203 	lsl.w	r2, r0, r3
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	430a      	orrs	r2, r1
 80040a4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80040a6:	4b29      	ldr	r3, [pc, #164]	; (800414c <HAL_ADC_ConfigChannel+0x250>)
 80040a8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a28      	ldr	r2, [pc, #160]	; (8004150 <HAL_ADC_ConfigChannel+0x254>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d10f      	bne.n	80040d4 <HAL_ADC_ConfigChannel+0x1d8>
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	2b12      	cmp	r3, #18
 80040ba:	d10b      	bne.n	80040d4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a1d      	ldr	r2, [pc, #116]	; (8004150 <HAL_ADC_ConfigChannel+0x254>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d12b      	bne.n	8004136 <HAL_ADC_ConfigChannel+0x23a>
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a1c      	ldr	r2, [pc, #112]	; (8004154 <HAL_ADC_ConfigChannel+0x258>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d003      	beq.n	80040f0 <HAL_ADC_ConfigChannel+0x1f4>
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	2b11      	cmp	r3, #17
 80040ee:	d122      	bne.n	8004136 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a11      	ldr	r2, [pc, #68]	; (8004154 <HAL_ADC_ConfigChannel+0x258>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d111      	bne.n	8004136 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004112:	4b11      	ldr	r3, [pc, #68]	; (8004158 <HAL_ADC_ConfigChannel+0x25c>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a11      	ldr	r2, [pc, #68]	; (800415c <HAL_ADC_ConfigChannel+0x260>)
 8004118:	fba2 2303 	umull	r2, r3, r2, r3
 800411c:	0c9a      	lsrs	r2, r3, #18
 800411e:	4613      	mov	r3, r2
 8004120:	009b      	lsls	r3, r3, #2
 8004122:	4413      	add	r3, r2
 8004124:	005b      	lsls	r3, r3, #1
 8004126:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004128:	e002      	b.n	8004130 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	3b01      	subs	r3, #1
 800412e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d1f9      	bne.n	800412a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2200      	movs	r2, #0
 800413a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800413e:	2300      	movs	r3, #0
}
 8004140:	4618      	mov	r0, r3
 8004142:	3714      	adds	r7, #20
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr
 800414c:	40012300 	.word	0x40012300
 8004150:	40012000 	.word	0x40012000
 8004154:	10000012 	.word	0x10000012
 8004158:	20000178 	.word	0x20000178
 800415c:	431bde83 	.word	0x431bde83

08004160 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004160:	b480      	push	{r7}
 8004162:	b085      	sub	sp, #20
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004168:	4b79      	ldr	r3, [pc, #484]	; (8004350 <ADC_Init+0x1f0>)
 800416a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	685a      	ldr	r2, [r3, #4]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	431a      	orrs	r2, r3
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	685a      	ldr	r2, [r3, #4]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004194:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	6859      	ldr	r1, [r3, #4]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	691b      	ldr	r3, [r3, #16]
 80041a0:	021a      	lsls	r2, r3, #8
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	430a      	orrs	r2, r1
 80041a8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	685a      	ldr	r2, [r3, #4]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80041b8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	6859      	ldr	r1, [r3, #4]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	689a      	ldr	r2, [r3, #8]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	430a      	orrs	r2, r1
 80041ca:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	689a      	ldr	r2, [r3, #8]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80041da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	6899      	ldr	r1, [r3, #8]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	68da      	ldr	r2, [r3, #12]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	430a      	orrs	r2, r1
 80041ec:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041f2:	4a58      	ldr	r2, [pc, #352]	; (8004354 <ADC_Init+0x1f4>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d022      	beq.n	800423e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	689a      	ldr	r2, [r3, #8]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004206:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	6899      	ldr	r1, [r3, #8]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	430a      	orrs	r2, r1
 8004218:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	689a      	ldr	r2, [r3, #8]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004228:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	6899      	ldr	r1, [r3, #8]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	430a      	orrs	r2, r1
 800423a:	609a      	str	r2, [r3, #8]
 800423c:	e00f      	b.n	800425e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	689a      	ldr	r2, [r3, #8]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800424c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	689a      	ldr	r2, [r3, #8]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800425c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	689a      	ldr	r2, [r3, #8]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f022 0202 	bic.w	r2, r2, #2
 800426c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	6899      	ldr	r1, [r3, #8]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	7e1b      	ldrb	r3, [r3, #24]
 8004278:	005a      	lsls	r2, r3, #1
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	430a      	orrs	r2, r1
 8004280:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d01b      	beq.n	80042c4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	685a      	ldr	r2, [r3, #4]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800429a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	685a      	ldr	r2, [r3, #4]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80042aa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	6859      	ldr	r1, [r3, #4]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b6:	3b01      	subs	r3, #1
 80042b8:	035a      	lsls	r2, r3, #13
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	430a      	orrs	r2, r1
 80042c0:	605a      	str	r2, [r3, #4]
 80042c2:	e007      	b.n	80042d4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	685a      	ldr	r2, [r3, #4]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042d2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80042e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	69db      	ldr	r3, [r3, #28]
 80042ee:	3b01      	subs	r3, #1
 80042f0:	051a      	lsls	r2, r3, #20
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	430a      	orrs	r2, r1
 80042f8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	689a      	ldr	r2, [r3, #8]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004308:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	6899      	ldr	r1, [r3, #8]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004316:	025a      	lsls	r2, r3, #9
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	430a      	orrs	r2, r1
 800431e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	689a      	ldr	r2, [r3, #8]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800432e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	6899      	ldr	r1, [r3, #8]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	695b      	ldr	r3, [r3, #20]
 800433a:	029a      	lsls	r2, r3, #10
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	430a      	orrs	r2, r1
 8004342:	609a      	str	r2, [r3, #8]
}
 8004344:	bf00      	nop
 8004346:	3714      	adds	r7, #20
 8004348:	46bd      	mov	sp, r7
 800434a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434e:	4770      	bx	lr
 8004350:	40012300 	.word	0x40012300
 8004354:	0f000001 	.word	0x0f000001

08004358 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b084      	sub	sp, #16
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004364:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800436a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800436e:	2b00      	cmp	r3, #0
 8004370:	d13c      	bne.n	80043ec <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004376:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004388:	2b00      	cmp	r3, #0
 800438a:	d12b      	bne.n	80043e4 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004390:	2b00      	cmp	r3, #0
 8004392:	d127      	bne.n	80043e4 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800439a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d006      	beq.n	80043b0 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d119      	bne.n	80043e4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	685a      	ldr	r2, [r3, #4]
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f022 0220 	bic.w	r2, r2, #32
 80043be:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d105      	bne.n	80043e4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043dc:	f043 0201 	orr.w	r2, r3, #1
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80043e4:	68f8      	ldr	r0, [r7, #12]
 80043e6:	f7ff fd6b 	bl	8003ec0 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80043ea:	e00e      	b.n	800440a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f0:	f003 0310 	and.w	r3, r3, #16
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d003      	beq.n	8004400 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80043f8:	68f8      	ldr	r0, [r7, #12]
 80043fa:	f7ff fd75 	bl	8003ee8 <HAL_ADC_ErrorCallback>
}
 80043fe:	e004      	b.n	800440a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004404:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	4798      	blx	r3
}
 800440a:	bf00      	nop
 800440c:	3710      	adds	r7, #16
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}

08004412 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004412:	b580      	push	{r7, lr}
 8004414:	b084      	sub	sp, #16
 8004416:	af00      	add	r7, sp, #0
 8004418:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800441e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004420:	68f8      	ldr	r0, [r7, #12]
 8004422:	f7ff fd57 	bl	8003ed4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004426:	bf00      	nop
 8004428:	3710      	adds	r7, #16
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}

0800442e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800442e:	b580      	push	{r7, lr}
 8004430:	b084      	sub	sp, #16
 8004432:	af00      	add	r7, sp, #0
 8004434:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800443a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2240      	movs	r2, #64	; 0x40
 8004440:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004446:	f043 0204 	orr.w	r2, r3, #4
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800444e:	68f8      	ldr	r0, [r7, #12]
 8004450:	f7ff fd4a 	bl	8003ee8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004454:	bf00      	nop
 8004456:	3710      	adds	r7, #16
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}

0800445c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800445c:	b480      	push	{r7}
 800445e:	b085      	sub	sp, #20
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	f003 0307 	and.w	r3, r3, #7
 800446a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800446c:	4b0c      	ldr	r3, [pc, #48]	; (80044a0 <__NVIC_SetPriorityGrouping+0x44>)
 800446e:	68db      	ldr	r3, [r3, #12]
 8004470:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004472:	68ba      	ldr	r2, [r7, #8]
 8004474:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004478:	4013      	ands	r3, r2
 800447a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004484:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004488:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800448c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800448e:	4a04      	ldr	r2, [pc, #16]	; (80044a0 <__NVIC_SetPriorityGrouping+0x44>)
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	60d3      	str	r3, [r2, #12]
}
 8004494:	bf00      	nop
 8004496:	3714      	adds	r7, #20
 8004498:	46bd      	mov	sp, r7
 800449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449e:	4770      	bx	lr
 80044a0:	e000ed00 	.word	0xe000ed00

080044a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80044a4:	b480      	push	{r7}
 80044a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80044a8:	4b04      	ldr	r3, [pc, #16]	; (80044bc <__NVIC_GetPriorityGrouping+0x18>)
 80044aa:	68db      	ldr	r3, [r3, #12]
 80044ac:	0a1b      	lsrs	r3, r3, #8
 80044ae:	f003 0307 	and.w	r3, r3, #7
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	46bd      	mov	sp, r7
 80044b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ba:	4770      	bx	lr
 80044bc:	e000ed00 	.word	0xe000ed00

080044c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044c0:	b480      	push	{r7}
 80044c2:	b083      	sub	sp, #12
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	4603      	mov	r3, r0
 80044c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	db0b      	blt.n	80044ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80044d2:	79fb      	ldrb	r3, [r7, #7]
 80044d4:	f003 021f 	and.w	r2, r3, #31
 80044d8:	4907      	ldr	r1, [pc, #28]	; (80044f8 <__NVIC_EnableIRQ+0x38>)
 80044da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044de:	095b      	lsrs	r3, r3, #5
 80044e0:	2001      	movs	r0, #1
 80044e2:	fa00 f202 	lsl.w	r2, r0, r2
 80044e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80044ea:	bf00      	nop
 80044ec:	370c      	adds	r7, #12
 80044ee:	46bd      	mov	sp, r7
 80044f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f4:	4770      	bx	lr
 80044f6:	bf00      	nop
 80044f8:	e000e100 	.word	0xe000e100

080044fc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b083      	sub	sp, #12
 8004500:	af00      	add	r7, sp, #0
 8004502:	4603      	mov	r3, r0
 8004504:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800450a:	2b00      	cmp	r3, #0
 800450c:	db12      	blt.n	8004534 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800450e:	79fb      	ldrb	r3, [r7, #7]
 8004510:	f003 021f 	and.w	r2, r3, #31
 8004514:	490a      	ldr	r1, [pc, #40]	; (8004540 <__NVIC_DisableIRQ+0x44>)
 8004516:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800451a:	095b      	lsrs	r3, r3, #5
 800451c:	2001      	movs	r0, #1
 800451e:	fa00 f202 	lsl.w	r2, r0, r2
 8004522:	3320      	adds	r3, #32
 8004524:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004528:	f3bf 8f4f 	dsb	sy
}
 800452c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800452e:	f3bf 8f6f 	isb	sy
}
 8004532:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004534:	bf00      	nop
 8004536:	370c      	adds	r7, #12
 8004538:	46bd      	mov	sp, r7
 800453a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453e:	4770      	bx	lr
 8004540:	e000e100 	.word	0xe000e100

08004544 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8004544:	b480      	push	{r7}
 8004546:	b083      	sub	sp, #12
 8004548:	af00      	add	r7, sp, #0
 800454a:	4603      	mov	r3, r0
 800454c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800454e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004552:	2b00      	cmp	r3, #0
 8004554:	db0c      	blt.n	8004570 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004556:	79fb      	ldrb	r3, [r7, #7]
 8004558:	f003 021f 	and.w	r2, r3, #31
 800455c:	4907      	ldr	r1, [pc, #28]	; (800457c <__NVIC_ClearPendingIRQ+0x38>)
 800455e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004562:	095b      	lsrs	r3, r3, #5
 8004564:	2001      	movs	r0, #1
 8004566:	fa00 f202 	lsl.w	r2, r0, r2
 800456a:	3360      	adds	r3, #96	; 0x60
 800456c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004570:	bf00      	nop
 8004572:	370c      	adds	r7, #12
 8004574:	46bd      	mov	sp, r7
 8004576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457a:	4770      	bx	lr
 800457c:	e000e100 	.word	0xe000e100

08004580 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004580:	b480      	push	{r7}
 8004582:	b083      	sub	sp, #12
 8004584:	af00      	add	r7, sp, #0
 8004586:	4603      	mov	r3, r0
 8004588:	6039      	str	r1, [r7, #0]
 800458a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800458c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004590:	2b00      	cmp	r3, #0
 8004592:	db0a      	blt.n	80045aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	b2da      	uxtb	r2, r3
 8004598:	490c      	ldr	r1, [pc, #48]	; (80045cc <__NVIC_SetPriority+0x4c>)
 800459a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800459e:	0112      	lsls	r2, r2, #4
 80045a0:	b2d2      	uxtb	r2, r2
 80045a2:	440b      	add	r3, r1
 80045a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80045a8:	e00a      	b.n	80045c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	b2da      	uxtb	r2, r3
 80045ae:	4908      	ldr	r1, [pc, #32]	; (80045d0 <__NVIC_SetPriority+0x50>)
 80045b0:	79fb      	ldrb	r3, [r7, #7]
 80045b2:	f003 030f 	and.w	r3, r3, #15
 80045b6:	3b04      	subs	r3, #4
 80045b8:	0112      	lsls	r2, r2, #4
 80045ba:	b2d2      	uxtb	r2, r2
 80045bc:	440b      	add	r3, r1
 80045be:	761a      	strb	r2, [r3, #24]
}
 80045c0:	bf00      	nop
 80045c2:	370c      	adds	r7, #12
 80045c4:	46bd      	mov	sp, r7
 80045c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ca:	4770      	bx	lr
 80045cc:	e000e100 	.word	0xe000e100
 80045d0:	e000ed00 	.word	0xe000ed00

080045d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b089      	sub	sp, #36	; 0x24
 80045d8:	af00      	add	r7, sp, #0
 80045da:	60f8      	str	r0, [r7, #12]
 80045dc:	60b9      	str	r1, [r7, #8]
 80045de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	f003 0307 	and.w	r3, r3, #7
 80045e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80045e8:	69fb      	ldr	r3, [r7, #28]
 80045ea:	f1c3 0307 	rsb	r3, r3, #7
 80045ee:	2b04      	cmp	r3, #4
 80045f0:	bf28      	it	cs
 80045f2:	2304      	movcs	r3, #4
 80045f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80045f6:	69fb      	ldr	r3, [r7, #28]
 80045f8:	3304      	adds	r3, #4
 80045fa:	2b06      	cmp	r3, #6
 80045fc:	d902      	bls.n	8004604 <NVIC_EncodePriority+0x30>
 80045fe:	69fb      	ldr	r3, [r7, #28]
 8004600:	3b03      	subs	r3, #3
 8004602:	e000      	b.n	8004606 <NVIC_EncodePriority+0x32>
 8004604:	2300      	movs	r3, #0
 8004606:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004608:	f04f 32ff 	mov.w	r2, #4294967295
 800460c:	69bb      	ldr	r3, [r7, #24]
 800460e:	fa02 f303 	lsl.w	r3, r2, r3
 8004612:	43da      	mvns	r2, r3
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	401a      	ands	r2, r3
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800461c:	f04f 31ff 	mov.w	r1, #4294967295
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	fa01 f303 	lsl.w	r3, r1, r3
 8004626:	43d9      	mvns	r1, r3
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800462c:	4313      	orrs	r3, r2
         );
}
 800462e:	4618      	mov	r0, r3
 8004630:	3724      	adds	r7, #36	; 0x24
 8004632:	46bd      	mov	sp, r7
 8004634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004638:	4770      	bx	lr
	...

0800463c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b082      	sub	sp, #8
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	3b01      	subs	r3, #1
 8004648:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800464c:	d301      	bcc.n	8004652 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800464e:	2301      	movs	r3, #1
 8004650:	e00f      	b.n	8004672 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004652:	4a0a      	ldr	r2, [pc, #40]	; (800467c <SysTick_Config+0x40>)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	3b01      	subs	r3, #1
 8004658:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800465a:	210f      	movs	r1, #15
 800465c:	f04f 30ff 	mov.w	r0, #4294967295
 8004660:	f7ff ff8e 	bl	8004580 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004664:	4b05      	ldr	r3, [pc, #20]	; (800467c <SysTick_Config+0x40>)
 8004666:	2200      	movs	r2, #0
 8004668:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800466a:	4b04      	ldr	r3, [pc, #16]	; (800467c <SysTick_Config+0x40>)
 800466c:	2207      	movs	r2, #7
 800466e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004670:	2300      	movs	r3, #0
}
 8004672:	4618      	mov	r0, r3
 8004674:	3708      	adds	r7, #8
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}
 800467a:	bf00      	nop
 800467c:	e000e010 	.word	0xe000e010

08004680 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b082      	sub	sp, #8
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004688:	6878      	ldr	r0, [r7, #4]
 800468a:	f7ff fee7 	bl	800445c <__NVIC_SetPriorityGrouping>
}
 800468e:	bf00      	nop
 8004690:	3708      	adds	r7, #8
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}

08004696 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004696:	b580      	push	{r7, lr}
 8004698:	b086      	sub	sp, #24
 800469a:	af00      	add	r7, sp, #0
 800469c:	4603      	mov	r3, r0
 800469e:	60b9      	str	r1, [r7, #8]
 80046a0:	607a      	str	r2, [r7, #4]
 80046a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80046a4:	2300      	movs	r3, #0
 80046a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80046a8:	f7ff fefc 	bl	80044a4 <__NVIC_GetPriorityGrouping>
 80046ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80046ae:	687a      	ldr	r2, [r7, #4]
 80046b0:	68b9      	ldr	r1, [r7, #8]
 80046b2:	6978      	ldr	r0, [r7, #20]
 80046b4:	f7ff ff8e 	bl	80045d4 <NVIC_EncodePriority>
 80046b8:	4602      	mov	r2, r0
 80046ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046be:	4611      	mov	r1, r2
 80046c0:	4618      	mov	r0, r3
 80046c2:	f7ff ff5d 	bl	8004580 <__NVIC_SetPriority>
}
 80046c6:	bf00      	nop
 80046c8:	3718      	adds	r7, #24
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}

080046ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80046ce:	b580      	push	{r7, lr}
 80046d0:	b082      	sub	sp, #8
 80046d2:	af00      	add	r7, sp, #0
 80046d4:	4603      	mov	r3, r0
 80046d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80046d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046dc:	4618      	mov	r0, r3
 80046de:	f7ff feef 	bl	80044c0 <__NVIC_EnableIRQ>
}
 80046e2:	bf00      	nop
 80046e4:	3708      	adds	r7, #8
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}

080046ea <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80046ea:	b580      	push	{r7, lr}
 80046ec:	b082      	sub	sp, #8
 80046ee:	af00      	add	r7, sp, #0
 80046f0:	4603      	mov	r3, r0
 80046f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80046f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046f8:	4618      	mov	r0, r3
 80046fa:	f7ff feff 	bl	80044fc <__NVIC_DisableIRQ>
}
 80046fe:	bf00      	nop
 8004700:	3708      	adds	r7, #8
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}

08004706 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004706:	b580      	push	{r7, lr}
 8004708:	b082      	sub	sp, #8
 800470a:	af00      	add	r7, sp, #0
 800470c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f7ff ff94 	bl	800463c <SysTick_Config>
 8004714:	4603      	mov	r3, r0
}
 8004716:	4618      	mov	r0, r3
 8004718:	3708      	adds	r7, #8
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}

0800471e <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800471e:	b580      	push	{r7, lr}
 8004720:	b082      	sub	sp, #8
 8004722:	af00      	add	r7, sp, #0
 8004724:	4603      	mov	r3, r0
 8004726:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8004728:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800472c:	4618      	mov	r0, r3
 800472e:	f7ff ff09 	bl	8004544 <__NVIC_ClearPendingIRQ>
}
 8004732:	bf00      	nop
 8004734:	3708      	adds	r7, #8
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}
	...

0800473c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b086      	sub	sp, #24
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004744:	2300      	movs	r3, #0
 8004746:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004748:	f7ff f9fc 	bl	8003b44 <HAL_GetTick>
 800474c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d101      	bne.n	8004758 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004754:	2301      	movs	r3, #1
 8004756:	e099      	b.n	800488c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2202      	movs	r2, #2
 800475c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2200      	movs	r2, #0
 8004764:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	681a      	ldr	r2, [r3, #0]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f022 0201 	bic.w	r2, r2, #1
 8004776:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004778:	e00f      	b.n	800479a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800477a:	f7ff f9e3 	bl	8003b44 <HAL_GetTick>
 800477e:	4602      	mov	r2, r0
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	1ad3      	subs	r3, r2, r3
 8004784:	2b05      	cmp	r3, #5
 8004786:	d908      	bls.n	800479a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2220      	movs	r2, #32
 800478c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2203      	movs	r2, #3
 8004792:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004796:	2303      	movs	r3, #3
 8004798:	e078      	b.n	800488c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f003 0301 	and.w	r3, r3, #1
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d1e8      	bne.n	800477a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80047b0:	697a      	ldr	r2, [r7, #20]
 80047b2:	4b38      	ldr	r3, [pc, #224]	; (8004894 <HAL_DMA_Init+0x158>)
 80047b4:	4013      	ands	r3, r2
 80047b6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	685a      	ldr	r2, [r3, #4]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80047c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	691b      	ldr	r3, [r3, #16]
 80047cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80047d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	699b      	ldr	r3, [r3, #24]
 80047d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80047de:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6a1b      	ldr	r3, [r3, #32]
 80047e4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80047e6:	697a      	ldr	r2, [r7, #20]
 80047e8:	4313      	orrs	r3, r2
 80047ea:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f0:	2b04      	cmp	r3, #4
 80047f2:	d107      	bne.n	8004804 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047fc:	4313      	orrs	r3, r2
 80047fe:	697a      	ldr	r2, [r7, #20]
 8004800:	4313      	orrs	r3, r2
 8004802:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	697a      	ldr	r2, [r7, #20]
 800480a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	695b      	ldr	r3, [r3, #20]
 8004812:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	f023 0307 	bic.w	r3, r3, #7
 800481a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004820:	697a      	ldr	r2, [r7, #20]
 8004822:	4313      	orrs	r3, r2
 8004824:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800482a:	2b04      	cmp	r3, #4
 800482c:	d117      	bne.n	800485e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004832:	697a      	ldr	r2, [r7, #20]
 8004834:	4313      	orrs	r3, r2
 8004836:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800483c:	2b00      	cmp	r3, #0
 800483e:	d00e      	beq.n	800485e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004840:	6878      	ldr	r0, [r7, #4]
 8004842:	f000 fb0d 	bl	8004e60 <DMA_CheckFifoParam>
 8004846:	4603      	mov	r3, r0
 8004848:	2b00      	cmp	r3, #0
 800484a:	d008      	beq.n	800485e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2240      	movs	r2, #64	; 0x40
 8004850:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2201      	movs	r2, #1
 8004856:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800485a:	2301      	movs	r3, #1
 800485c:	e016      	b.n	800488c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	697a      	ldr	r2, [r7, #20]
 8004864:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f000 fac4 	bl	8004df4 <DMA_CalcBaseAndBitshift>
 800486c:	4603      	mov	r3, r0
 800486e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004874:	223f      	movs	r2, #63	; 0x3f
 8004876:	409a      	lsls	r2, r3
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2200      	movs	r2, #0
 8004880:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2201      	movs	r2, #1
 8004886:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800488a:	2300      	movs	r3, #0
}
 800488c:	4618      	mov	r0, r3
 800488e:	3718      	adds	r7, #24
 8004890:	46bd      	mov	sp, r7
 8004892:	bd80      	pop	{r7, pc}
 8004894:	f010803f 	.word	0xf010803f

08004898 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b086      	sub	sp, #24
 800489c:	af00      	add	r7, sp, #0
 800489e:	60f8      	str	r0, [r7, #12]
 80048a0:	60b9      	str	r1, [r7, #8]
 80048a2:	607a      	str	r2, [r7, #4]
 80048a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80048a6:	2300      	movs	r3, #0
 80048a8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048ae:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80048b6:	2b01      	cmp	r3, #1
 80048b8:	d101      	bne.n	80048be <HAL_DMA_Start_IT+0x26>
 80048ba:	2302      	movs	r3, #2
 80048bc:	e040      	b.n	8004940 <HAL_DMA_Start_IT+0xa8>
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2201      	movs	r2, #1
 80048c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80048cc:	b2db      	uxtb	r3, r3
 80048ce:	2b01      	cmp	r3, #1
 80048d0:	d12f      	bne.n	8004932 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	2202      	movs	r2, #2
 80048d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2200      	movs	r2, #0
 80048de:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	687a      	ldr	r2, [r7, #4]
 80048e4:	68b9      	ldr	r1, [r7, #8]
 80048e6:	68f8      	ldr	r0, [r7, #12]
 80048e8:	f000 fa56 	bl	8004d98 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048f0:	223f      	movs	r2, #63	; 0x3f
 80048f2:	409a      	lsls	r2, r3
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	681a      	ldr	r2, [r3, #0]
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f042 0216 	orr.w	r2, r2, #22
 8004906:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800490c:	2b00      	cmp	r3, #0
 800490e:	d007      	beq.n	8004920 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f042 0208 	orr.w	r2, r2, #8
 800491e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	681a      	ldr	r2, [r3, #0]
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f042 0201 	orr.w	r2, r2, #1
 800492e:	601a      	str	r2, [r3, #0]
 8004930:	e005      	b.n	800493e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2200      	movs	r2, #0
 8004936:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800493a:	2302      	movs	r3, #2
 800493c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800493e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004940:	4618      	mov	r0, r3
 8004942:	3718      	adds	r7, #24
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}

08004948 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b084      	sub	sp, #16
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004954:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004956:	f7ff f8f5 	bl	8003b44 <HAL_GetTick>
 800495a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004962:	b2db      	uxtb	r3, r3
 8004964:	2b02      	cmp	r3, #2
 8004966:	d008      	beq.n	800497a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2280      	movs	r2, #128	; 0x80
 800496c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2200      	movs	r2, #0
 8004972:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004976:	2301      	movs	r3, #1
 8004978:	e052      	b.n	8004a20 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f022 0216 	bic.w	r2, r2, #22
 8004988:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	695a      	ldr	r2, [r3, #20]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004998:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d103      	bne.n	80049aa <HAL_DMA_Abort+0x62>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d007      	beq.n	80049ba <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	681a      	ldr	r2, [r3, #0]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f022 0208 	bic.w	r2, r2, #8
 80049b8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f022 0201 	bic.w	r2, r2, #1
 80049c8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80049ca:	e013      	b.n	80049f4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80049cc:	f7ff f8ba 	bl	8003b44 <HAL_GetTick>
 80049d0:	4602      	mov	r2, r0
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	1ad3      	subs	r3, r2, r3
 80049d6:	2b05      	cmp	r3, #5
 80049d8:	d90c      	bls.n	80049f4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2220      	movs	r2, #32
 80049de:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2203      	movs	r2, #3
 80049e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2200      	movs	r2, #0
 80049ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80049f0:	2303      	movs	r3, #3
 80049f2:	e015      	b.n	8004a20 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f003 0301 	and.w	r3, r3, #1
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d1e4      	bne.n	80049cc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a06:	223f      	movs	r2, #63	; 0x3f
 8004a08:	409a      	lsls	r2, r3
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2201      	movs	r2, #1
 8004a12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004a1e:	2300      	movs	r3, #0
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	3710      	adds	r7, #16
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}

08004a28 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b083      	sub	sp, #12
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004a36:	b2db      	uxtb	r3, r3
 8004a38:	2b02      	cmp	r3, #2
 8004a3a:	d004      	beq.n	8004a46 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2280      	movs	r2, #128	; 0x80
 8004a40:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	e00c      	b.n	8004a60 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2205      	movs	r2, #5
 8004a4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	681a      	ldr	r2, [r3, #0]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f022 0201 	bic.w	r2, r2, #1
 8004a5c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004a5e:	2300      	movs	r3, #0
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	370c      	adds	r7, #12
 8004a64:	46bd      	mov	sp, r7
 8004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6a:	4770      	bx	lr

08004a6c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b086      	sub	sp, #24
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004a74:	2300      	movs	r3, #0
 8004a76:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004a78:	4b8e      	ldr	r3, [pc, #568]	; (8004cb4 <HAL_DMA_IRQHandler+0x248>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a8e      	ldr	r2, [pc, #568]	; (8004cb8 <HAL_DMA_IRQHandler+0x24c>)
 8004a7e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a82:	0a9b      	lsrs	r3, r3, #10
 8004a84:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a8a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004a8c:	693b      	ldr	r3, [r7, #16]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a96:	2208      	movs	r2, #8
 8004a98:	409a      	lsls	r2, r3
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	4013      	ands	r3, r2
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d01a      	beq.n	8004ad8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f003 0304 	and.w	r3, r3, #4
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d013      	beq.n	8004ad8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	681a      	ldr	r2, [r3, #0]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f022 0204 	bic.w	r2, r2, #4
 8004abe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ac4:	2208      	movs	r2, #8
 8004ac6:	409a      	lsls	r2, r3
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ad0:	f043 0201 	orr.w	r2, r3, #1
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004adc:	2201      	movs	r2, #1
 8004ade:	409a      	lsls	r2, r3
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	4013      	ands	r3, r2
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d012      	beq.n	8004b0e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	695b      	ldr	r3, [r3, #20]
 8004aee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d00b      	beq.n	8004b0e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004afa:	2201      	movs	r2, #1
 8004afc:	409a      	lsls	r2, r3
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b06:	f043 0202 	orr.w	r2, r3, #2
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b12:	2204      	movs	r2, #4
 8004b14:	409a      	lsls	r2, r3
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	4013      	ands	r3, r2
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d012      	beq.n	8004b44 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f003 0302 	and.w	r3, r3, #2
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d00b      	beq.n	8004b44 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b30:	2204      	movs	r2, #4
 8004b32:	409a      	lsls	r2, r3
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b3c:	f043 0204 	orr.w	r2, r3, #4
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b48:	2210      	movs	r2, #16
 8004b4a:	409a      	lsls	r2, r3
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	4013      	ands	r3, r2
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d043      	beq.n	8004bdc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f003 0308 	and.w	r3, r3, #8
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d03c      	beq.n	8004bdc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b66:	2210      	movs	r2, #16
 8004b68:	409a      	lsls	r2, r3
 8004b6a:	693b      	ldr	r3, [r7, #16]
 8004b6c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d018      	beq.n	8004bae <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d108      	bne.n	8004b9c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d024      	beq.n	8004bdc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b96:	6878      	ldr	r0, [r7, #4]
 8004b98:	4798      	blx	r3
 8004b9a:	e01f      	b.n	8004bdc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d01b      	beq.n	8004bdc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ba8:	6878      	ldr	r0, [r7, #4]
 8004baa:	4798      	blx	r3
 8004bac:	e016      	b.n	8004bdc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d107      	bne.n	8004bcc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	681a      	ldr	r2, [r3, #0]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f022 0208 	bic.w	r2, r2, #8
 8004bca:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d003      	beq.n	8004bdc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bd8:	6878      	ldr	r0, [r7, #4]
 8004bda:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004be0:	2220      	movs	r2, #32
 8004be2:	409a      	lsls	r2, r3
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	4013      	ands	r3, r2
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	f000 808f 	beq.w	8004d0c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f003 0310 	and.w	r3, r3, #16
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	f000 8087 	beq.w	8004d0c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c02:	2220      	movs	r2, #32
 8004c04:	409a      	lsls	r2, r3
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004c10:	b2db      	uxtb	r3, r3
 8004c12:	2b05      	cmp	r3, #5
 8004c14:	d136      	bne.n	8004c84 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	681a      	ldr	r2, [r3, #0]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f022 0216 	bic.w	r2, r2, #22
 8004c24:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	695a      	ldr	r2, [r3, #20]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c34:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d103      	bne.n	8004c46 <HAL_DMA_IRQHandler+0x1da>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d007      	beq.n	8004c56 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	681a      	ldr	r2, [r3, #0]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f022 0208 	bic.w	r2, r2, #8
 8004c54:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c5a:	223f      	movs	r2, #63	; 0x3f
 8004c5c:	409a      	lsls	r2, r3
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2201      	movs	r2, #1
 8004c66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d07e      	beq.n	8004d78 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	4798      	blx	r3
        }
        return;
 8004c82:	e079      	b.n	8004d78 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d01d      	beq.n	8004cce <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d10d      	bne.n	8004cbc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d031      	beq.n	8004d0c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cac:	6878      	ldr	r0, [r7, #4]
 8004cae:	4798      	blx	r3
 8004cb0:	e02c      	b.n	8004d0c <HAL_DMA_IRQHandler+0x2a0>
 8004cb2:	bf00      	nop
 8004cb4:	20000178 	.word	0x20000178
 8004cb8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d023      	beq.n	8004d0c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cc8:	6878      	ldr	r0, [r7, #4]
 8004cca:	4798      	blx	r3
 8004ccc:	e01e      	b.n	8004d0c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d10f      	bne.n	8004cfc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	681a      	ldr	r2, [r3, #0]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f022 0210 	bic.w	r2, r2, #16
 8004cea:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d003      	beq.n	8004d0c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d08:	6878      	ldr	r0, [r7, #4]
 8004d0a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d032      	beq.n	8004d7a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d18:	f003 0301 	and.w	r3, r3, #1
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d022      	beq.n	8004d66 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2205      	movs	r2, #5
 8004d24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	681a      	ldr	r2, [r3, #0]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f022 0201 	bic.w	r2, r2, #1
 8004d36:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	3301      	adds	r3, #1
 8004d3c:	60bb      	str	r3, [r7, #8]
 8004d3e:	697a      	ldr	r2, [r7, #20]
 8004d40:	429a      	cmp	r2, r3
 8004d42:	d307      	bcc.n	8004d54 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f003 0301 	and.w	r3, r3, #1
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d1f2      	bne.n	8004d38 <HAL_DMA_IRQHandler+0x2cc>
 8004d52:	e000      	b.n	8004d56 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004d54:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2201      	movs	r2, #1
 8004d5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2200      	movs	r2, #0
 8004d62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d005      	beq.n	8004d7a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	4798      	blx	r3
 8004d76:	e000      	b.n	8004d7a <HAL_DMA_IRQHandler+0x30e>
        return;
 8004d78:	bf00      	nop
    }
  }
}
 8004d7a:	3718      	adds	r7, #24
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bd80      	pop	{r7, pc}

08004d80 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b083      	sub	sp, #12
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	370c      	adds	r7, #12
 8004d90:	46bd      	mov	sp, r7
 8004d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d96:	4770      	bx	lr

08004d98 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b085      	sub	sp, #20
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	60f8      	str	r0, [r7, #12]
 8004da0:	60b9      	str	r1, [r7, #8]
 8004da2:	607a      	str	r2, [r7, #4]
 8004da4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	681a      	ldr	r2, [r3, #0]
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004db4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	683a      	ldr	r2, [r7, #0]
 8004dbc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	689b      	ldr	r3, [r3, #8]
 8004dc2:	2b40      	cmp	r3, #64	; 0x40
 8004dc4:	d108      	bne.n	8004dd8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	687a      	ldr	r2, [r7, #4]
 8004dcc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	68ba      	ldr	r2, [r7, #8]
 8004dd4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004dd6:	e007      	b.n	8004de8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	68ba      	ldr	r2, [r7, #8]
 8004dde:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	687a      	ldr	r2, [r7, #4]
 8004de6:	60da      	str	r2, [r3, #12]
}
 8004de8:	bf00      	nop
 8004dea:	3714      	adds	r7, #20
 8004dec:	46bd      	mov	sp, r7
 8004dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df2:	4770      	bx	lr

08004df4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b085      	sub	sp, #20
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	b2db      	uxtb	r3, r3
 8004e02:	3b10      	subs	r3, #16
 8004e04:	4a14      	ldr	r2, [pc, #80]	; (8004e58 <DMA_CalcBaseAndBitshift+0x64>)
 8004e06:	fba2 2303 	umull	r2, r3, r2, r3
 8004e0a:	091b      	lsrs	r3, r3, #4
 8004e0c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004e0e:	4a13      	ldr	r2, [pc, #76]	; (8004e5c <DMA_CalcBaseAndBitshift+0x68>)
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	4413      	add	r3, r2
 8004e14:	781b      	ldrb	r3, [r3, #0]
 8004e16:	461a      	mov	r2, r3
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2b03      	cmp	r3, #3
 8004e20:	d909      	bls.n	8004e36 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004e2a:	f023 0303 	bic.w	r3, r3, #3
 8004e2e:	1d1a      	adds	r2, r3, #4
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	659a      	str	r2, [r3, #88]	; 0x58
 8004e34:	e007      	b.n	8004e46 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004e3e:	f023 0303 	bic.w	r3, r3, #3
 8004e42:	687a      	ldr	r2, [r7, #4]
 8004e44:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3714      	adds	r7, #20
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e54:	4770      	bx	lr
 8004e56:	bf00      	nop
 8004e58:	aaaaaaab 	.word	0xaaaaaaab
 8004e5c:	08030f98 	.word	0x08030f98

08004e60 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b085      	sub	sp, #20
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e68:	2300      	movs	r3, #0
 8004e6a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e70:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	699b      	ldr	r3, [r3, #24]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d11f      	bne.n	8004eba <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	2b03      	cmp	r3, #3
 8004e7e:	d856      	bhi.n	8004f2e <DMA_CheckFifoParam+0xce>
 8004e80:	a201      	add	r2, pc, #4	; (adr r2, 8004e88 <DMA_CheckFifoParam+0x28>)
 8004e82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e86:	bf00      	nop
 8004e88:	08004e99 	.word	0x08004e99
 8004e8c:	08004eab 	.word	0x08004eab
 8004e90:	08004e99 	.word	0x08004e99
 8004e94:	08004f2f 	.word	0x08004f2f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e9c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d046      	beq.n	8004f32 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ea8:	e043      	b.n	8004f32 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eae:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004eb2:	d140      	bne.n	8004f36 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004eb8:	e03d      	b.n	8004f36 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	699b      	ldr	r3, [r3, #24]
 8004ebe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ec2:	d121      	bne.n	8004f08 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004ec4:	68bb      	ldr	r3, [r7, #8]
 8004ec6:	2b03      	cmp	r3, #3
 8004ec8:	d837      	bhi.n	8004f3a <DMA_CheckFifoParam+0xda>
 8004eca:	a201      	add	r2, pc, #4	; (adr r2, 8004ed0 <DMA_CheckFifoParam+0x70>)
 8004ecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ed0:	08004ee1 	.word	0x08004ee1
 8004ed4:	08004ee7 	.word	0x08004ee7
 8004ed8:	08004ee1 	.word	0x08004ee1
 8004edc:	08004ef9 	.word	0x08004ef9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	73fb      	strb	r3, [r7, #15]
      break;
 8004ee4:	e030      	b.n	8004f48 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d025      	beq.n	8004f3e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ef6:	e022      	b.n	8004f3e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004efc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004f00:	d11f      	bne.n	8004f42 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004f02:	2301      	movs	r3, #1
 8004f04:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004f06:	e01c      	b.n	8004f42 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	2b02      	cmp	r3, #2
 8004f0c:	d903      	bls.n	8004f16 <DMA_CheckFifoParam+0xb6>
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	2b03      	cmp	r3, #3
 8004f12:	d003      	beq.n	8004f1c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004f14:	e018      	b.n	8004f48 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	73fb      	strb	r3, [r7, #15]
      break;
 8004f1a:	e015      	b.n	8004f48 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f20:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d00e      	beq.n	8004f46 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	73fb      	strb	r3, [r7, #15]
      break;
 8004f2c:	e00b      	b.n	8004f46 <DMA_CheckFifoParam+0xe6>
      break;
 8004f2e:	bf00      	nop
 8004f30:	e00a      	b.n	8004f48 <DMA_CheckFifoParam+0xe8>
      break;
 8004f32:	bf00      	nop
 8004f34:	e008      	b.n	8004f48 <DMA_CheckFifoParam+0xe8>
      break;
 8004f36:	bf00      	nop
 8004f38:	e006      	b.n	8004f48 <DMA_CheckFifoParam+0xe8>
      break;
 8004f3a:	bf00      	nop
 8004f3c:	e004      	b.n	8004f48 <DMA_CheckFifoParam+0xe8>
      break;
 8004f3e:	bf00      	nop
 8004f40:	e002      	b.n	8004f48 <DMA_CheckFifoParam+0xe8>
      break;   
 8004f42:	bf00      	nop
 8004f44:	e000      	b.n	8004f48 <DMA_CheckFifoParam+0xe8>
      break;
 8004f46:	bf00      	nop
    }
  } 
  
  return status; 
 8004f48:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	3714      	adds	r7, #20
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f54:	4770      	bx	lr
 8004f56:	bf00      	nop

08004f58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b089      	sub	sp, #36	; 0x24
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
 8004f60:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004f62:	2300      	movs	r3, #0
 8004f64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004f66:	2300      	movs	r3, #0
 8004f68:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004f6e:	2300      	movs	r3, #0
 8004f70:	61fb      	str	r3, [r7, #28]
 8004f72:	e159      	b.n	8005228 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004f74:	2201      	movs	r2, #1
 8004f76:	69fb      	ldr	r3, [r7, #28]
 8004f78:	fa02 f303 	lsl.w	r3, r2, r3
 8004f7c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	697a      	ldr	r2, [r7, #20]
 8004f84:	4013      	ands	r3, r2
 8004f86:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004f88:	693a      	ldr	r2, [r7, #16]
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	f040 8148 	bne.w	8005222 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	f003 0303 	and.w	r3, r3, #3
 8004f9a:	2b01      	cmp	r3, #1
 8004f9c:	d005      	beq.n	8004faa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004fa6:	2b02      	cmp	r3, #2
 8004fa8:	d130      	bne.n	800500c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	689b      	ldr	r3, [r3, #8]
 8004fae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004fb0:	69fb      	ldr	r3, [r7, #28]
 8004fb2:	005b      	lsls	r3, r3, #1
 8004fb4:	2203      	movs	r2, #3
 8004fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8004fba:	43db      	mvns	r3, r3
 8004fbc:	69ba      	ldr	r2, [r7, #24]
 8004fbe:	4013      	ands	r3, r2
 8004fc0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	68da      	ldr	r2, [r3, #12]
 8004fc6:	69fb      	ldr	r3, [r7, #28]
 8004fc8:	005b      	lsls	r3, r3, #1
 8004fca:	fa02 f303 	lsl.w	r3, r2, r3
 8004fce:	69ba      	ldr	r2, [r7, #24]
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	69ba      	ldr	r2, [r7, #24]
 8004fd8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004fe0:	2201      	movs	r2, #1
 8004fe2:	69fb      	ldr	r3, [r7, #28]
 8004fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8004fe8:	43db      	mvns	r3, r3
 8004fea:	69ba      	ldr	r2, [r7, #24]
 8004fec:	4013      	ands	r3, r2
 8004fee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	091b      	lsrs	r3, r3, #4
 8004ff6:	f003 0201 	and.w	r2, r3, #1
 8004ffa:	69fb      	ldr	r3, [r7, #28]
 8004ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8005000:	69ba      	ldr	r2, [r7, #24]
 8005002:	4313      	orrs	r3, r2
 8005004:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	69ba      	ldr	r2, [r7, #24]
 800500a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	f003 0303 	and.w	r3, r3, #3
 8005014:	2b03      	cmp	r3, #3
 8005016:	d017      	beq.n	8005048 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	68db      	ldr	r3, [r3, #12]
 800501c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800501e:	69fb      	ldr	r3, [r7, #28]
 8005020:	005b      	lsls	r3, r3, #1
 8005022:	2203      	movs	r2, #3
 8005024:	fa02 f303 	lsl.w	r3, r2, r3
 8005028:	43db      	mvns	r3, r3
 800502a:	69ba      	ldr	r2, [r7, #24]
 800502c:	4013      	ands	r3, r2
 800502e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	689a      	ldr	r2, [r3, #8]
 8005034:	69fb      	ldr	r3, [r7, #28]
 8005036:	005b      	lsls	r3, r3, #1
 8005038:	fa02 f303 	lsl.w	r3, r2, r3
 800503c:	69ba      	ldr	r2, [r7, #24]
 800503e:	4313      	orrs	r3, r2
 8005040:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	69ba      	ldr	r2, [r7, #24]
 8005046:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	f003 0303 	and.w	r3, r3, #3
 8005050:	2b02      	cmp	r3, #2
 8005052:	d123      	bne.n	800509c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005054:	69fb      	ldr	r3, [r7, #28]
 8005056:	08da      	lsrs	r2, r3, #3
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	3208      	adds	r2, #8
 800505c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005060:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005062:	69fb      	ldr	r3, [r7, #28]
 8005064:	f003 0307 	and.w	r3, r3, #7
 8005068:	009b      	lsls	r3, r3, #2
 800506a:	220f      	movs	r2, #15
 800506c:	fa02 f303 	lsl.w	r3, r2, r3
 8005070:	43db      	mvns	r3, r3
 8005072:	69ba      	ldr	r2, [r7, #24]
 8005074:	4013      	ands	r3, r2
 8005076:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	691a      	ldr	r2, [r3, #16]
 800507c:	69fb      	ldr	r3, [r7, #28]
 800507e:	f003 0307 	and.w	r3, r3, #7
 8005082:	009b      	lsls	r3, r3, #2
 8005084:	fa02 f303 	lsl.w	r3, r2, r3
 8005088:	69ba      	ldr	r2, [r7, #24]
 800508a:	4313      	orrs	r3, r2
 800508c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800508e:	69fb      	ldr	r3, [r7, #28]
 8005090:	08da      	lsrs	r2, r3, #3
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	3208      	adds	r2, #8
 8005096:	69b9      	ldr	r1, [r7, #24]
 8005098:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80050a2:	69fb      	ldr	r3, [r7, #28]
 80050a4:	005b      	lsls	r3, r3, #1
 80050a6:	2203      	movs	r2, #3
 80050a8:	fa02 f303 	lsl.w	r3, r2, r3
 80050ac:	43db      	mvns	r3, r3
 80050ae:	69ba      	ldr	r2, [r7, #24]
 80050b0:	4013      	ands	r3, r2
 80050b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	f003 0203 	and.w	r2, r3, #3
 80050bc:	69fb      	ldr	r3, [r7, #28]
 80050be:	005b      	lsls	r3, r3, #1
 80050c0:	fa02 f303 	lsl.w	r3, r2, r3
 80050c4:	69ba      	ldr	r2, [r7, #24]
 80050c6:	4313      	orrs	r3, r2
 80050c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	69ba      	ldr	r2, [r7, #24]
 80050ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80050d8:	2b00      	cmp	r3, #0
 80050da:	f000 80a2 	beq.w	8005222 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80050de:	2300      	movs	r3, #0
 80050e0:	60fb      	str	r3, [r7, #12]
 80050e2:	4b57      	ldr	r3, [pc, #348]	; (8005240 <HAL_GPIO_Init+0x2e8>)
 80050e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050e6:	4a56      	ldr	r2, [pc, #344]	; (8005240 <HAL_GPIO_Init+0x2e8>)
 80050e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80050ec:	6453      	str	r3, [r2, #68]	; 0x44
 80050ee:	4b54      	ldr	r3, [pc, #336]	; (8005240 <HAL_GPIO_Init+0x2e8>)
 80050f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050f6:	60fb      	str	r3, [r7, #12]
 80050f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80050fa:	4a52      	ldr	r2, [pc, #328]	; (8005244 <HAL_GPIO_Init+0x2ec>)
 80050fc:	69fb      	ldr	r3, [r7, #28]
 80050fe:	089b      	lsrs	r3, r3, #2
 8005100:	3302      	adds	r3, #2
 8005102:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005106:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005108:	69fb      	ldr	r3, [r7, #28]
 800510a:	f003 0303 	and.w	r3, r3, #3
 800510e:	009b      	lsls	r3, r3, #2
 8005110:	220f      	movs	r2, #15
 8005112:	fa02 f303 	lsl.w	r3, r2, r3
 8005116:	43db      	mvns	r3, r3
 8005118:	69ba      	ldr	r2, [r7, #24]
 800511a:	4013      	ands	r3, r2
 800511c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	4a49      	ldr	r2, [pc, #292]	; (8005248 <HAL_GPIO_Init+0x2f0>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d019      	beq.n	800515a <HAL_GPIO_Init+0x202>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	4a48      	ldr	r2, [pc, #288]	; (800524c <HAL_GPIO_Init+0x2f4>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d013      	beq.n	8005156 <HAL_GPIO_Init+0x1fe>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	4a47      	ldr	r2, [pc, #284]	; (8005250 <HAL_GPIO_Init+0x2f8>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d00d      	beq.n	8005152 <HAL_GPIO_Init+0x1fa>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	4a46      	ldr	r2, [pc, #280]	; (8005254 <HAL_GPIO_Init+0x2fc>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d007      	beq.n	800514e <HAL_GPIO_Init+0x1f6>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	4a45      	ldr	r2, [pc, #276]	; (8005258 <HAL_GPIO_Init+0x300>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d101      	bne.n	800514a <HAL_GPIO_Init+0x1f2>
 8005146:	2304      	movs	r3, #4
 8005148:	e008      	b.n	800515c <HAL_GPIO_Init+0x204>
 800514a:	2307      	movs	r3, #7
 800514c:	e006      	b.n	800515c <HAL_GPIO_Init+0x204>
 800514e:	2303      	movs	r3, #3
 8005150:	e004      	b.n	800515c <HAL_GPIO_Init+0x204>
 8005152:	2302      	movs	r3, #2
 8005154:	e002      	b.n	800515c <HAL_GPIO_Init+0x204>
 8005156:	2301      	movs	r3, #1
 8005158:	e000      	b.n	800515c <HAL_GPIO_Init+0x204>
 800515a:	2300      	movs	r3, #0
 800515c:	69fa      	ldr	r2, [r7, #28]
 800515e:	f002 0203 	and.w	r2, r2, #3
 8005162:	0092      	lsls	r2, r2, #2
 8005164:	4093      	lsls	r3, r2
 8005166:	69ba      	ldr	r2, [r7, #24]
 8005168:	4313      	orrs	r3, r2
 800516a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800516c:	4935      	ldr	r1, [pc, #212]	; (8005244 <HAL_GPIO_Init+0x2ec>)
 800516e:	69fb      	ldr	r3, [r7, #28]
 8005170:	089b      	lsrs	r3, r3, #2
 8005172:	3302      	adds	r3, #2
 8005174:	69ba      	ldr	r2, [r7, #24]
 8005176:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800517a:	4b38      	ldr	r3, [pc, #224]	; (800525c <HAL_GPIO_Init+0x304>)
 800517c:	689b      	ldr	r3, [r3, #8]
 800517e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	43db      	mvns	r3, r3
 8005184:	69ba      	ldr	r2, [r7, #24]
 8005186:	4013      	ands	r3, r2
 8005188:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005192:	2b00      	cmp	r3, #0
 8005194:	d003      	beq.n	800519e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8005196:	69ba      	ldr	r2, [r7, #24]
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	4313      	orrs	r3, r2
 800519c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800519e:	4a2f      	ldr	r2, [pc, #188]	; (800525c <HAL_GPIO_Init+0x304>)
 80051a0:	69bb      	ldr	r3, [r7, #24]
 80051a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80051a4:	4b2d      	ldr	r3, [pc, #180]	; (800525c <HAL_GPIO_Init+0x304>)
 80051a6:	68db      	ldr	r3, [r3, #12]
 80051a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80051aa:	693b      	ldr	r3, [r7, #16]
 80051ac:	43db      	mvns	r3, r3
 80051ae:	69ba      	ldr	r2, [r7, #24]
 80051b0:	4013      	ands	r3, r2
 80051b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d003      	beq.n	80051c8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80051c0:	69ba      	ldr	r2, [r7, #24]
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	4313      	orrs	r3, r2
 80051c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80051c8:	4a24      	ldr	r2, [pc, #144]	; (800525c <HAL_GPIO_Init+0x304>)
 80051ca:	69bb      	ldr	r3, [r7, #24]
 80051cc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80051ce:	4b23      	ldr	r3, [pc, #140]	; (800525c <HAL_GPIO_Init+0x304>)
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	43db      	mvns	r3, r3
 80051d8:	69ba      	ldr	r2, [r7, #24]
 80051da:	4013      	ands	r3, r2
 80051dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d003      	beq.n	80051f2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80051ea:	69ba      	ldr	r2, [r7, #24]
 80051ec:	693b      	ldr	r3, [r7, #16]
 80051ee:	4313      	orrs	r3, r2
 80051f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80051f2:	4a1a      	ldr	r2, [pc, #104]	; (800525c <HAL_GPIO_Init+0x304>)
 80051f4:	69bb      	ldr	r3, [r7, #24]
 80051f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80051f8:	4b18      	ldr	r3, [pc, #96]	; (800525c <HAL_GPIO_Init+0x304>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	43db      	mvns	r3, r3
 8005202:	69ba      	ldr	r2, [r7, #24]
 8005204:	4013      	ands	r3, r2
 8005206:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005210:	2b00      	cmp	r3, #0
 8005212:	d003      	beq.n	800521c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005214:	69ba      	ldr	r2, [r7, #24]
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	4313      	orrs	r3, r2
 800521a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800521c:	4a0f      	ldr	r2, [pc, #60]	; (800525c <HAL_GPIO_Init+0x304>)
 800521e:	69bb      	ldr	r3, [r7, #24]
 8005220:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005222:	69fb      	ldr	r3, [r7, #28]
 8005224:	3301      	adds	r3, #1
 8005226:	61fb      	str	r3, [r7, #28]
 8005228:	69fb      	ldr	r3, [r7, #28]
 800522a:	2b0f      	cmp	r3, #15
 800522c:	f67f aea2 	bls.w	8004f74 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005230:	bf00      	nop
 8005232:	bf00      	nop
 8005234:	3724      	adds	r7, #36	; 0x24
 8005236:	46bd      	mov	sp, r7
 8005238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523c:	4770      	bx	lr
 800523e:	bf00      	nop
 8005240:	40023800 	.word	0x40023800
 8005244:	40013800 	.word	0x40013800
 8005248:	40020000 	.word	0x40020000
 800524c:	40020400 	.word	0x40020400
 8005250:	40020800 	.word	0x40020800
 8005254:	40020c00 	.word	0x40020c00
 8005258:	40021000 	.word	0x40021000
 800525c:	40013c00 	.word	0x40013c00

08005260 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005260:	b480      	push	{r7}
 8005262:	b087      	sub	sp, #28
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
 8005268:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800526a:	2300      	movs	r3, #0
 800526c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800526e:	2300      	movs	r3, #0
 8005270:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8005272:	2300      	movs	r3, #0
 8005274:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005276:	2300      	movs	r3, #0
 8005278:	617b      	str	r3, [r7, #20]
 800527a:	e0bb      	b.n	80053f4 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800527c:	2201      	movs	r2, #1
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	fa02 f303 	lsl.w	r3, r2, r3
 8005284:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8005286:	683a      	ldr	r2, [r7, #0]
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	4013      	ands	r3, r2
 800528c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800528e:	68fa      	ldr	r2, [r7, #12]
 8005290:	693b      	ldr	r3, [r7, #16]
 8005292:	429a      	cmp	r2, r3
 8005294:	f040 80ab 	bne.w	80053ee <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8005298:	4a5c      	ldr	r2, [pc, #368]	; (800540c <HAL_GPIO_DeInit+0x1ac>)
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	089b      	lsrs	r3, r3, #2
 800529e:	3302      	adds	r3, #2
 80052a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052a4:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	f003 0303 	and.w	r3, r3, #3
 80052ac:	009b      	lsls	r3, r3, #2
 80052ae:	220f      	movs	r2, #15
 80052b0:	fa02 f303 	lsl.w	r3, r2, r3
 80052b4:	68ba      	ldr	r2, [r7, #8]
 80052b6:	4013      	ands	r3, r2
 80052b8:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	4a54      	ldr	r2, [pc, #336]	; (8005410 <HAL_GPIO_DeInit+0x1b0>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d019      	beq.n	80052f6 <HAL_GPIO_DeInit+0x96>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	4a53      	ldr	r2, [pc, #332]	; (8005414 <HAL_GPIO_DeInit+0x1b4>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d013      	beq.n	80052f2 <HAL_GPIO_DeInit+0x92>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	4a52      	ldr	r2, [pc, #328]	; (8005418 <HAL_GPIO_DeInit+0x1b8>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d00d      	beq.n	80052ee <HAL_GPIO_DeInit+0x8e>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	4a51      	ldr	r2, [pc, #324]	; (800541c <HAL_GPIO_DeInit+0x1bc>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d007      	beq.n	80052ea <HAL_GPIO_DeInit+0x8a>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	4a50      	ldr	r2, [pc, #320]	; (8005420 <HAL_GPIO_DeInit+0x1c0>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d101      	bne.n	80052e6 <HAL_GPIO_DeInit+0x86>
 80052e2:	2304      	movs	r3, #4
 80052e4:	e008      	b.n	80052f8 <HAL_GPIO_DeInit+0x98>
 80052e6:	2307      	movs	r3, #7
 80052e8:	e006      	b.n	80052f8 <HAL_GPIO_DeInit+0x98>
 80052ea:	2303      	movs	r3, #3
 80052ec:	e004      	b.n	80052f8 <HAL_GPIO_DeInit+0x98>
 80052ee:	2302      	movs	r3, #2
 80052f0:	e002      	b.n	80052f8 <HAL_GPIO_DeInit+0x98>
 80052f2:	2301      	movs	r3, #1
 80052f4:	e000      	b.n	80052f8 <HAL_GPIO_DeInit+0x98>
 80052f6:	2300      	movs	r3, #0
 80052f8:	697a      	ldr	r2, [r7, #20]
 80052fa:	f002 0203 	and.w	r2, r2, #3
 80052fe:	0092      	lsls	r2, r2, #2
 8005300:	4093      	lsls	r3, r2
 8005302:	68ba      	ldr	r2, [r7, #8]
 8005304:	429a      	cmp	r2, r3
 8005306:	d132      	bne.n	800536e <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005308:	4b46      	ldr	r3, [pc, #280]	; (8005424 <HAL_GPIO_DeInit+0x1c4>)
 800530a:	681a      	ldr	r2, [r3, #0]
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	43db      	mvns	r3, r3
 8005310:	4944      	ldr	r1, [pc, #272]	; (8005424 <HAL_GPIO_DeInit+0x1c4>)
 8005312:	4013      	ands	r3, r2
 8005314:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8005316:	4b43      	ldr	r3, [pc, #268]	; (8005424 <HAL_GPIO_DeInit+0x1c4>)
 8005318:	685a      	ldr	r2, [r3, #4]
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	43db      	mvns	r3, r3
 800531e:	4941      	ldr	r1, [pc, #260]	; (8005424 <HAL_GPIO_DeInit+0x1c4>)
 8005320:	4013      	ands	r3, r2
 8005322:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8005324:	4b3f      	ldr	r3, [pc, #252]	; (8005424 <HAL_GPIO_DeInit+0x1c4>)
 8005326:	68da      	ldr	r2, [r3, #12]
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	43db      	mvns	r3, r3
 800532c:	493d      	ldr	r1, [pc, #244]	; (8005424 <HAL_GPIO_DeInit+0x1c4>)
 800532e:	4013      	ands	r3, r2
 8005330:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8005332:	4b3c      	ldr	r3, [pc, #240]	; (8005424 <HAL_GPIO_DeInit+0x1c4>)
 8005334:	689a      	ldr	r2, [r3, #8]
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	43db      	mvns	r3, r3
 800533a:	493a      	ldr	r1, [pc, #232]	; (8005424 <HAL_GPIO_DeInit+0x1c4>)
 800533c:	4013      	ands	r3, r2
 800533e:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	f003 0303 	and.w	r3, r3, #3
 8005346:	009b      	lsls	r3, r3, #2
 8005348:	220f      	movs	r2, #15
 800534a:	fa02 f303 	lsl.w	r3, r2, r3
 800534e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8005350:	4a2e      	ldr	r2, [pc, #184]	; (800540c <HAL_GPIO_DeInit+0x1ac>)
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	089b      	lsrs	r3, r3, #2
 8005356:	3302      	adds	r3, #2
 8005358:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	43da      	mvns	r2, r3
 8005360:	482a      	ldr	r0, [pc, #168]	; (800540c <HAL_GPIO_DeInit+0x1ac>)
 8005362:	697b      	ldr	r3, [r7, #20]
 8005364:	089b      	lsrs	r3, r3, #2
 8005366:	400a      	ands	r2, r1
 8005368:	3302      	adds	r3, #2
 800536a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681a      	ldr	r2, [r3, #0]
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	005b      	lsls	r3, r3, #1
 8005376:	2103      	movs	r1, #3
 8005378:	fa01 f303 	lsl.w	r3, r1, r3
 800537c:	43db      	mvns	r3, r3
 800537e:	401a      	ands	r2, r3
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	08da      	lsrs	r2, r3, #3
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	3208      	adds	r2, #8
 800538c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	f003 0307 	and.w	r3, r3, #7
 8005396:	009b      	lsls	r3, r3, #2
 8005398:	220f      	movs	r2, #15
 800539a:	fa02 f303 	lsl.w	r3, r2, r3
 800539e:	43db      	mvns	r3, r3
 80053a0:	697a      	ldr	r2, [r7, #20]
 80053a2:	08d2      	lsrs	r2, r2, #3
 80053a4:	4019      	ands	r1, r3
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	3208      	adds	r2, #8
 80053aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	68da      	ldr	r2, [r3, #12]
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	005b      	lsls	r3, r3, #1
 80053b6:	2103      	movs	r1, #3
 80053b8:	fa01 f303 	lsl.w	r3, r1, r3
 80053bc:	43db      	mvns	r3, r3
 80053be:	401a      	ands	r2, r3
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	685a      	ldr	r2, [r3, #4]
 80053c8:	2101      	movs	r1, #1
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	fa01 f303 	lsl.w	r3, r1, r3
 80053d0:	43db      	mvns	r3, r3
 80053d2:	401a      	ands	r2, r3
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	689a      	ldr	r2, [r3, #8]
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	005b      	lsls	r3, r3, #1
 80053e0:	2103      	movs	r1, #3
 80053e2:	fa01 f303 	lsl.w	r3, r1, r3
 80053e6:	43db      	mvns	r3, r3
 80053e8:	401a      	ands	r2, r3
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	3301      	adds	r3, #1
 80053f2:	617b      	str	r3, [r7, #20]
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	2b0f      	cmp	r3, #15
 80053f8:	f67f af40 	bls.w	800527c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80053fc:	bf00      	nop
 80053fe:	bf00      	nop
 8005400:	371c      	adds	r7, #28
 8005402:	46bd      	mov	sp, r7
 8005404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005408:	4770      	bx	lr
 800540a:	bf00      	nop
 800540c:	40013800 	.word	0x40013800
 8005410:	40020000 	.word	0x40020000
 8005414:	40020400 	.word	0x40020400
 8005418:	40020800 	.word	0x40020800
 800541c:	40020c00 	.word	0x40020c00
 8005420:	40021000 	.word	0x40021000
 8005424:	40013c00 	.word	0x40013c00

08005428 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005428:	b480      	push	{r7}
 800542a:	b083      	sub	sp, #12
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
 8005430:	460b      	mov	r3, r1
 8005432:	807b      	strh	r3, [r7, #2]
 8005434:	4613      	mov	r3, r2
 8005436:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005438:	787b      	ldrb	r3, [r7, #1]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d003      	beq.n	8005446 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800543e:	887a      	ldrh	r2, [r7, #2]
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005444:	e003      	b.n	800544e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005446:	887b      	ldrh	r3, [r7, #2]
 8005448:	041a      	lsls	r2, r3, #16
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	619a      	str	r2, [r3, #24]
}
 800544e:	bf00      	nop
 8005450:	370c      	adds	r7, #12
 8005452:	46bd      	mov	sp, r7
 8005454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005458:	4770      	bx	lr
	...

0800545c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b084      	sub	sp, #16
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d101      	bne.n	800546e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800546a:	2301      	movs	r3, #1
 800546c:	e12b      	b.n	80056c6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005474:	b2db      	uxtb	r3, r3
 8005476:	2b00      	cmp	r3, #0
 8005478:	d106      	bne.n	8005488 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2200      	movs	r2, #0
 800547e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f7fc ff86 	bl	8002394 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2224      	movs	r2, #36	; 0x24
 800548c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	681a      	ldr	r2, [r3, #0]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f022 0201 	bic.w	r2, r2, #1
 800549e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	681a      	ldr	r2, [r3, #0]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80054ae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	681a      	ldr	r2, [r3, #0]
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80054be:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80054c0:	f002 fe72 	bl	80081a8 <HAL_RCC_GetPCLK1Freq>
 80054c4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	4a81      	ldr	r2, [pc, #516]	; (80056d0 <HAL_I2C_Init+0x274>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d807      	bhi.n	80054e0 <HAL_I2C_Init+0x84>
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	4a80      	ldr	r2, [pc, #512]	; (80056d4 <HAL_I2C_Init+0x278>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	bf94      	ite	ls
 80054d8:	2301      	movls	r3, #1
 80054da:	2300      	movhi	r3, #0
 80054dc:	b2db      	uxtb	r3, r3
 80054de:	e006      	b.n	80054ee <HAL_I2C_Init+0x92>
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	4a7d      	ldr	r2, [pc, #500]	; (80056d8 <HAL_I2C_Init+0x27c>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	bf94      	ite	ls
 80054e8:	2301      	movls	r3, #1
 80054ea:	2300      	movhi	r3, #0
 80054ec:	b2db      	uxtb	r3, r3
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d001      	beq.n	80054f6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80054f2:	2301      	movs	r3, #1
 80054f4:	e0e7      	b.n	80056c6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	4a78      	ldr	r2, [pc, #480]	; (80056dc <HAL_I2C_Init+0x280>)
 80054fa:	fba2 2303 	umull	r2, r3, r2, r3
 80054fe:	0c9b      	lsrs	r3, r3, #18
 8005500:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	68ba      	ldr	r2, [r7, #8]
 8005512:	430a      	orrs	r2, r1
 8005514:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	6a1b      	ldr	r3, [r3, #32]
 800551c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	4a6a      	ldr	r2, [pc, #424]	; (80056d0 <HAL_I2C_Init+0x274>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d802      	bhi.n	8005530 <HAL_I2C_Init+0xd4>
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	3301      	adds	r3, #1
 800552e:	e009      	b.n	8005544 <HAL_I2C_Init+0xe8>
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005536:	fb02 f303 	mul.w	r3, r2, r3
 800553a:	4a69      	ldr	r2, [pc, #420]	; (80056e0 <HAL_I2C_Init+0x284>)
 800553c:	fba2 2303 	umull	r2, r3, r2, r3
 8005540:	099b      	lsrs	r3, r3, #6
 8005542:	3301      	adds	r3, #1
 8005544:	687a      	ldr	r2, [r7, #4]
 8005546:	6812      	ldr	r2, [r2, #0]
 8005548:	430b      	orrs	r3, r1
 800554a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	69db      	ldr	r3, [r3, #28]
 8005552:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005556:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	495c      	ldr	r1, [pc, #368]	; (80056d0 <HAL_I2C_Init+0x274>)
 8005560:	428b      	cmp	r3, r1
 8005562:	d819      	bhi.n	8005598 <HAL_I2C_Init+0x13c>
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	1e59      	subs	r1, r3, #1
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	005b      	lsls	r3, r3, #1
 800556e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005572:	1c59      	adds	r1, r3, #1
 8005574:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005578:	400b      	ands	r3, r1
 800557a:	2b00      	cmp	r3, #0
 800557c:	d00a      	beq.n	8005594 <HAL_I2C_Init+0x138>
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	1e59      	subs	r1, r3, #1
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	005b      	lsls	r3, r3, #1
 8005588:	fbb1 f3f3 	udiv	r3, r1, r3
 800558c:	3301      	adds	r3, #1
 800558e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005592:	e051      	b.n	8005638 <HAL_I2C_Init+0x1dc>
 8005594:	2304      	movs	r3, #4
 8005596:	e04f      	b.n	8005638 <HAL_I2C_Init+0x1dc>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	689b      	ldr	r3, [r3, #8]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d111      	bne.n	80055c4 <HAL_I2C_Init+0x168>
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	1e58      	subs	r0, r3, #1
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6859      	ldr	r1, [r3, #4]
 80055a8:	460b      	mov	r3, r1
 80055aa:	005b      	lsls	r3, r3, #1
 80055ac:	440b      	add	r3, r1
 80055ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80055b2:	3301      	adds	r3, #1
 80055b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	bf0c      	ite	eq
 80055bc:	2301      	moveq	r3, #1
 80055be:	2300      	movne	r3, #0
 80055c0:	b2db      	uxtb	r3, r3
 80055c2:	e012      	b.n	80055ea <HAL_I2C_Init+0x18e>
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	1e58      	subs	r0, r3, #1
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6859      	ldr	r1, [r3, #4]
 80055cc:	460b      	mov	r3, r1
 80055ce:	009b      	lsls	r3, r3, #2
 80055d0:	440b      	add	r3, r1
 80055d2:	0099      	lsls	r1, r3, #2
 80055d4:	440b      	add	r3, r1
 80055d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80055da:	3301      	adds	r3, #1
 80055dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	bf0c      	ite	eq
 80055e4:	2301      	moveq	r3, #1
 80055e6:	2300      	movne	r3, #0
 80055e8:	b2db      	uxtb	r3, r3
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d001      	beq.n	80055f2 <HAL_I2C_Init+0x196>
 80055ee:	2301      	movs	r3, #1
 80055f0:	e022      	b.n	8005638 <HAL_I2C_Init+0x1dc>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	689b      	ldr	r3, [r3, #8]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d10e      	bne.n	8005618 <HAL_I2C_Init+0x1bc>
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	1e58      	subs	r0, r3, #1
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6859      	ldr	r1, [r3, #4]
 8005602:	460b      	mov	r3, r1
 8005604:	005b      	lsls	r3, r3, #1
 8005606:	440b      	add	r3, r1
 8005608:	fbb0 f3f3 	udiv	r3, r0, r3
 800560c:	3301      	adds	r3, #1
 800560e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005612:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005616:	e00f      	b.n	8005638 <HAL_I2C_Init+0x1dc>
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	1e58      	subs	r0, r3, #1
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6859      	ldr	r1, [r3, #4]
 8005620:	460b      	mov	r3, r1
 8005622:	009b      	lsls	r3, r3, #2
 8005624:	440b      	add	r3, r1
 8005626:	0099      	lsls	r1, r3, #2
 8005628:	440b      	add	r3, r1
 800562a:	fbb0 f3f3 	udiv	r3, r0, r3
 800562e:	3301      	adds	r3, #1
 8005630:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005634:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005638:	6879      	ldr	r1, [r7, #4]
 800563a:	6809      	ldr	r1, [r1, #0]
 800563c:	4313      	orrs	r3, r2
 800563e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	69da      	ldr	r2, [r3, #28]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6a1b      	ldr	r3, [r3, #32]
 8005652:	431a      	orrs	r2, r3
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	430a      	orrs	r2, r1
 800565a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	689b      	ldr	r3, [r3, #8]
 8005662:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005666:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800566a:	687a      	ldr	r2, [r7, #4]
 800566c:	6911      	ldr	r1, [r2, #16]
 800566e:	687a      	ldr	r2, [r7, #4]
 8005670:	68d2      	ldr	r2, [r2, #12]
 8005672:	4311      	orrs	r1, r2
 8005674:	687a      	ldr	r2, [r7, #4]
 8005676:	6812      	ldr	r2, [r2, #0]
 8005678:	430b      	orrs	r3, r1
 800567a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	68db      	ldr	r3, [r3, #12]
 8005682:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	695a      	ldr	r2, [r3, #20]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	699b      	ldr	r3, [r3, #24]
 800568e:	431a      	orrs	r2, r3
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	430a      	orrs	r2, r1
 8005696:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	681a      	ldr	r2, [r3, #0]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f042 0201 	orr.w	r2, r2, #1
 80056a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2200      	movs	r2, #0
 80056ac:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2220      	movs	r2, #32
 80056b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2200      	movs	r2, #0
 80056ba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2200      	movs	r2, #0
 80056c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80056c4:	2300      	movs	r3, #0
}
 80056c6:	4618      	mov	r0, r3
 80056c8:	3710      	adds	r7, #16
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bd80      	pop	{r7, pc}
 80056ce:	bf00      	nop
 80056d0:	000186a0 	.word	0x000186a0
 80056d4:	001e847f 	.word	0x001e847f
 80056d8:	003d08ff 	.word	0x003d08ff
 80056dc:	431bde83 	.word	0x431bde83
 80056e0:	10624dd3 	.word	0x10624dd3

080056e4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b088      	sub	sp, #32
 80056e8:	af02      	add	r7, sp, #8
 80056ea:	60f8      	str	r0, [r7, #12]
 80056ec:	4608      	mov	r0, r1
 80056ee:	4611      	mov	r1, r2
 80056f0:	461a      	mov	r2, r3
 80056f2:	4603      	mov	r3, r0
 80056f4:	817b      	strh	r3, [r7, #10]
 80056f6:	460b      	mov	r3, r1
 80056f8:	813b      	strh	r3, [r7, #8]
 80056fa:	4613      	mov	r3, r2
 80056fc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80056fe:	f7fe fa21 	bl	8003b44 <HAL_GetTick>
 8005702:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800570a:	b2db      	uxtb	r3, r3
 800570c:	2b20      	cmp	r3, #32
 800570e:	f040 80d9 	bne.w	80058c4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	9300      	str	r3, [sp, #0]
 8005716:	2319      	movs	r3, #25
 8005718:	2201      	movs	r2, #1
 800571a:	496d      	ldr	r1, [pc, #436]	; (80058d0 <HAL_I2C_Mem_Write+0x1ec>)
 800571c:	68f8      	ldr	r0, [r7, #12]
 800571e:	f000 fd27 	bl	8006170 <I2C_WaitOnFlagUntilTimeout>
 8005722:	4603      	mov	r3, r0
 8005724:	2b00      	cmp	r3, #0
 8005726:	d001      	beq.n	800572c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005728:	2302      	movs	r3, #2
 800572a:	e0cc      	b.n	80058c6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005732:	2b01      	cmp	r3, #1
 8005734:	d101      	bne.n	800573a <HAL_I2C_Mem_Write+0x56>
 8005736:	2302      	movs	r3, #2
 8005738:	e0c5      	b.n	80058c6 <HAL_I2C_Mem_Write+0x1e2>
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2201      	movs	r2, #1
 800573e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f003 0301 	and.w	r3, r3, #1
 800574c:	2b01      	cmp	r3, #1
 800574e:	d007      	beq.n	8005760 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	681a      	ldr	r2, [r3, #0]
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f042 0201 	orr.w	r2, r2, #1
 800575e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	681a      	ldr	r2, [r3, #0]
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800576e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	2221      	movs	r2, #33	; 0x21
 8005774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	2240      	movs	r2, #64	; 0x40
 800577c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	2200      	movs	r2, #0
 8005784:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	6a3a      	ldr	r2, [r7, #32]
 800578a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005790:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005796:	b29a      	uxth	r2, r3
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	4a4d      	ldr	r2, [pc, #308]	; (80058d4 <HAL_I2C_Mem_Write+0x1f0>)
 80057a0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80057a2:	88f8      	ldrh	r0, [r7, #6]
 80057a4:	893a      	ldrh	r2, [r7, #8]
 80057a6:	8979      	ldrh	r1, [r7, #10]
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	9301      	str	r3, [sp, #4]
 80057ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ae:	9300      	str	r3, [sp, #0]
 80057b0:	4603      	mov	r3, r0
 80057b2:	68f8      	ldr	r0, [r7, #12]
 80057b4:	f000 fa4c 	bl	8005c50 <I2C_RequestMemoryWrite>
 80057b8:	4603      	mov	r3, r0
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d052      	beq.n	8005864 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80057be:	2301      	movs	r3, #1
 80057c0:	e081      	b.n	80058c6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80057c2:	697a      	ldr	r2, [r7, #20]
 80057c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80057c6:	68f8      	ldr	r0, [r7, #12]
 80057c8:	f000 fda8 	bl	800631c <I2C_WaitOnTXEFlagUntilTimeout>
 80057cc:	4603      	mov	r3, r0
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d00d      	beq.n	80057ee <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057d6:	2b04      	cmp	r3, #4
 80057d8:	d107      	bne.n	80057ea <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	681a      	ldr	r2, [r3, #0]
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057e8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80057ea:	2301      	movs	r3, #1
 80057ec:	e06b      	b.n	80058c6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f2:	781a      	ldrb	r2, [r3, #0]
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057fe:	1c5a      	adds	r2, r3, #1
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005808:	3b01      	subs	r3, #1
 800580a:	b29a      	uxth	r2, r3
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005814:	b29b      	uxth	r3, r3
 8005816:	3b01      	subs	r3, #1
 8005818:	b29a      	uxth	r2, r3
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	695b      	ldr	r3, [r3, #20]
 8005824:	f003 0304 	and.w	r3, r3, #4
 8005828:	2b04      	cmp	r3, #4
 800582a:	d11b      	bne.n	8005864 <HAL_I2C_Mem_Write+0x180>
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005830:	2b00      	cmp	r3, #0
 8005832:	d017      	beq.n	8005864 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005838:	781a      	ldrb	r2, [r3, #0]
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005844:	1c5a      	adds	r2, r3, #1
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800584e:	3b01      	subs	r3, #1
 8005850:	b29a      	uxth	r2, r3
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800585a:	b29b      	uxth	r3, r3
 800585c:	3b01      	subs	r3, #1
 800585e:	b29a      	uxth	r2, r3
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005868:	2b00      	cmp	r3, #0
 800586a:	d1aa      	bne.n	80057c2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800586c:	697a      	ldr	r2, [r7, #20]
 800586e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005870:	68f8      	ldr	r0, [r7, #12]
 8005872:	f000 fd94 	bl	800639e <I2C_WaitOnBTFFlagUntilTimeout>
 8005876:	4603      	mov	r3, r0
 8005878:	2b00      	cmp	r3, #0
 800587a:	d00d      	beq.n	8005898 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005880:	2b04      	cmp	r3, #4
 8005882:	d107      	bne.n	8005894 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	681a      	ldr	r2, [r3, #0]
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005892:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005894:	2301      	movs	r3, #1
 8005896:	e016      	b.n	80058c6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	681a      	ldr	r2, [r3, #0]
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	2220      	movs	r2, #32
 80058ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	2200      	movs	r2, #0
 80058b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	2200      	movs	r2, #0
 80058bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80058c0:	2300      	movs	r3, #0
 80058c2:	e000      	b.n	80058c6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80058c4:	2302      	movs	r3, #2
  }
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	3718      	adds	r7, #24
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}
 80058ce:	bf00      	nop
 80058d0:	00100002 	.word	0x00100002
 80058d4:	ffff0000 	.word	0xffff0000

080058d8 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b08c      	sub	sp, #48	; 0x30
 80058dc:	af02      	add	r7, sp, #8
 80058de:	60f8      	str	r0, [r7, #12]
 80058e0:	4608      	mov	r0, r1
 80058e2:	4611      	mov	r1, r2
 80058e4:	461a      	mov	r2, r3
 80058e6:	4603      	mov	r3, r0
 80058e8:	817b      	strh	r3, [r7, #10]
 80058ea:	460b      	mov	r3, r1
 80058ec:	813b      	strh	r3, [r7, #8]
 80058ee:	4613      	mov	r3, r2
 80058f0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80058f2:	f7fe f927 	bl	8003b44 <HAL_GetTick>
 80058f6:	6278      	str	r0, [r7, #36]	; 0x24
  __IO uint32_t count = 0U;
 80058f8:	2300      	movs	r3, #0
 80058fa:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005902:	b2db      	uxtb	r3, r3
 8005904:	2b20      	cmp	r3, #32
 8005906:	f040 8176 	bne.w	8005bf6 <HAL_I2C_Mem_Read_DMA+0x31e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800590a:	4b95      	ldr	r3, [pc, #596]	; (8005b60 <HAL_I2C_Mem_Read_DMA+0x288>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	08db      	lsrs	r3, r3, #3
 8005910:	4a94      	ldr	r2, [pc, #592]	; (8005b64 <HAL_I2C_Mem_Read_DMA+0x28c>)
 8005912:	fba2 2303 	umull	r2, r3, r2, r3
 8005916:	0a1a      	lsrs	r2, r3, #8
 8005918:	4613      	mov	r3, r2
 800591a:	009b      	lsls	r3, r3, #2
 800591c:	4413      	add	r3, r2
 800591e:	009a      	lsls	r2, r3, #2
 8005920:	4413      	add	r3, r2
 8005922:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 8005924:	69fb      	ldr	r3, [r7, #28]
 8005926:	3b01      	subs	r3, #1
 8005928:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 800592a:	69fb      	ldr	r3, [r7, #28]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d116      	bne.n	800595e <HAL_I2C_Mem_Read_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	2200      	movs	r2, #0
 8005934:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	2220      	movs	r2, #32
 800593a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	2200      	movs	r2, #0
 8005942:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800594a:	f043 0220 	orr.w	r2, r3, #32
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	2200      	movs	r2, #0
 8005956:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800595a:	2301      	movs	r3, #1
 800595c:	e14c      	b.n	8005bf8 <HAL_I2C_Mem_Read_DMA+0x320>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	699b      	ldr	r3, [r3, #24]
 8005964:	f003 0302 	and.w	r3, r3, #2
 8005968:	2b02      	cmp	r3, #2
 800596a:	d0db      	beq.n	8005924 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005972:	2b01      	cmp	r3, #1
 8005974:	d101      	bne.n	800597a <HAL_I2C_Mem_Read_DMA+0xa2>
 8005976:	2302      	movs	r3, #2
 8005978:	e13e      	b.n	8005bf8 <HAL_I2C_Mem_Read_DMA+0x320>
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	2201      	movs	r2, #1
 800597e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f003 0301 	and.w	r3, r3, #1
 800598c:	2b01      	cmp	r3, #1
 800598e:	d007      	beq.n	80059a0 <HAL_I2C_Mem_Read_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	681a      	ldr	r2, [r3, #0]
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f042 0201 	orr.w	r2, r2, #1
 800599e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	681a      	ldr	r2, [r3, #0]
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80059ae:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	2222      	movs	r2, #34	; 0x22
 80059b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	2240      	movs	r2, #64	; 0x40
 80059bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	2200      	movs	r2, #0
 80059c4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059ca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80059d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059d6:	b29a      	uxth	r2, r3
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	4a62      	ldr	r2, [pc, #392]	; (8005b68 <HAL_I2C_Mem_Read_DMA+0x290>)
 80059e0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 80059e2:	897a      	ldrh	r2, [r7, #10]
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 80059e8:	893a      	ldrh	r2, [r7, #8]
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 80059ee:	88fa      	ldrh	r2, [r7, #6]
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2200      	movs	r2, #0
 80059f8:	651a      	str	r2, [r3, #80]	; 0x50

    if (hi2c->XferSize > 0U)
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	f000 80cc 	beq.w	8005b9c <HAL_I2C_Mem_Read_DMA+0x2c4>
    {
      if (hi2c->hdmarx != NULL)
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d02d      	beq.n	8005a68 <HAL_I2C_Mem_Read_DMA+0x190>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a10:	4a56      	ldr	r2, [pc, #344]	; (8005b6c <HAL_I2C_Mem_Read_DMA+0x294>)
 8005a12:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a18:	4a55      	ldr	r2, [pc, #340]	; (8005b70 <HAL_I2C_Mem_Read_DMA+0x298>)
 8005a1a:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a20:	2200      	movs	r2, #0
 8005a22:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a28:	2200      	movs	r2, #0
 8005a2a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a30:	2200      	movs	r2, #0
 8005a32:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a38:	2200      	movs	r2, #0
 8005a3a:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	3310      	adds	r3, #16
 8005a46:	4619      	mov	r1, r3
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a4c:	461a      	mov	r2, r3
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a52:	f7fe ff21 	bl	8004898 <HAL_DMA_Start_IT>
 8005a56:	4603      	mov	r3, r0
 8005a58:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8005a5c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	f040 8087 	bne.w	8005b74 <HAL_I2C_Mem_Read_DMA+0x29c>
 8005a66:	e013      	b.n	8005a90 <HAL_I2C_Mem_Read_DMA+0x1b8>
        hi2c->State     = HAL_I2C_STATE_READY;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2220      	movs	r2, #32
 8005a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	2200      	movs	r2, #0
 8005a74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a7c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	2200      	movs	r2, #0
 8005a88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	e0b3      	b.n	8005bf8 <HAL_I2C_Mem_Read_DMA+0x320>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8005a90:	88f8      	ldrh	r0, [r7, #6]
 8005a92:	893a      	ldrh	r2, [r7, #8]
 8005a94:	8979      	ldrh	r1, [r7, #10]
 8005a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a98:	9301      	str	r3, [sp, #4]
 8005a9a:	2323      	movs	r3, #35	; 0x23
 8005a9c:	9300      	str	r3, [sp, #0]
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	68f8      	ldr	r0, [r7, #12]
 8005aa2:	f000 f96b 	bl	8005d7c <I2C_RequestMemoryRead>
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d023      	beq.n	8005af4 <HAL_I2C_Mem_Read_DMA+0x21c>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	f7fe ffb9 	bl	8004a28 <HAL_DMA_Abort_IT>
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	681a      	ldr	r2, [r3, #0]
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ad2:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount = 0U;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	2200      	movs	r2, #0
 8005ade:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	681a      	ldr	r2, [r3, #0]
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f022 0201 	bic.w	r2, r2, #1
 8005aee:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8005af0:	2301      	movs	r3, #1
 8005af2:	e081      	b.n	8005bf8 <HAL_I2C_Mem_Read_DMA+0x320>
        }

        if (hi2c->XferSize == 1U)
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005af8:	2b01      	cmp	r3, #1
 8005afa:	d108      	bne.n	8005b0e <HAL_I2C_Mem_Read_DMA+0x236>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	681a      	ldr	r2, [r3, #0]
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b0a:	601a      	str	r2, [r3, #0]
 8005b0c:	e007      	b.n	8005b1e <HAL_I2C_Mem_Read_DMA+0x246>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	685a      	ldr	r2, [r3, #4]
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005b1c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b1e:	2300      	movs	r3, #0
 8005b20:	61bb      	str	r3, [r7, #24]
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	695b      	ldr	r3, [r3, #20]
 8005b28:	61bb      	str	r3, [r7, #24]
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	699b      	ldr	r3, [r3, #24]
 8005b30:	61bb      	str	r3, [r7, #24]
 8005b32:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	2200      	movs	r2, #0
 8005b38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	685a      	ldr	r2, [r3, #4]
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b4a:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	685a      	ldr	r2, [r3, #4]
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b5a:	605a      	str	r2, [r3, #4]
 8005b5c:	e049      	b.n	8005bf2 <HAL_I2C_Mem_Read_DMA+0x31a>
 8005b5e:	bf00      	nop
 8005b60:	20000178 	.word	0x20000178
 8005b64:	14f8b589 	.word	0x14f8b589
 8005b68:	ffff0000 	.word	0xffff0000
 8005b6c:	08005f4d 	.word	0x08005f4d
 8005b70:	080060f7 	.word	0x080060f7
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	2220      	movs	r2, #32
 8005b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b88:	f043 0210 	orr.w	r2, r3, #16
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	2200      	movs	r2, #0
 8005b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005b98:	2301      	movs	r3, #1
 8005b9a:	e02d      	b.n	8005bf8 <HAL_I2C_Mem_Read_DMA+0x320>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8005b9c:	88f8      	ldrh	r0, [r7, #6]
 8005b9e:	893a      	ldrh	r2, [r7, #8]
 8005ba0:	8979      	ldrh	r1, [r7, #10]
 8005ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba4:	9301      	str	r3, [sp, #4]
 8005ba6:	2323      	movs	r3, #35	; 0x23
 8005ba8:	9300      	str	r3, [sp, #0]
 8005baa:	4603      	mov	r3, r0
 8005bac:	68f8      	ldr	r0, [r7, #12]
 8005bae:	f000 f8e5 	bl	8005d7c <I2C_RequestMemoryRead>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d001      	beq.n	8005bbc <HAL_I2C_Mem_Read_DMA+0x2e4>
      {
        return HAL_ERROR;
 8005bb8:	2301      	movs	r3, #1
 8005bba:	e01d      	b.n	8005bf8 <HAL_I2C_Mem_Read_DMA+0x320>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	617b      	str	r3, [r7, #20]
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	695b      	ldr	r3, [r3, #20]
 8005bc6:	617b      	str	r3, [r7, #20]
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	699b      	ldr	r3, [r3, #24]
 8005bce:	617b      	str	r3, [r7, #20]
 8005bd0:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	681a      	ldr	r2, [r3, #0]
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005be0:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2220      	movs	r2, #32
 8005be6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	2200      	movs	r2, #0
 8005bee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }

    return HAL_OK;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	e000      	b.n	8005bf8 <HAL_I2C_Mem_Read_DMA+0x320>
  }
  else
  {
    return HAL_BUSY;
 8005bf6:	2302      	movs	r3, #2
  }
}
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	3728      	adds	r7, #40	; 0x28
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bd80      	pop	{r7, pc}

08005c00 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005c00:	b480      	push	{r7}
 8005c02:	b083      	sub	sp, #12
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8005c08:	bf00      	nop
 8005c0a:	370c      	adds	r7, #12
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c12:	4770      	bx	lr

08005c14 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005c14:	b480      	push	{r7}
 8005c16:	b083      	sub	sp, #12
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005c1c:	bf00      	nop
 8005c1e:	370c      	adds	r7, #12
 8005c20:	46bd      	mov	sp, r7
 8005c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c26:	4770      	bx	lr

08005c28 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b083      	sub	sp, #12
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005c30:	bf00      	nop
 8005c32:	370c      	adds	r7, #12
 8005c34:	46bd      	mov	sp, r7
 8005c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3a:	4770      	bx	lr

08005c3c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b083      	sub	sp, #12
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005c44:	bf00      	nop
 8005c46:	370c      	adds	r7, #12
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4e:	4770      	bx	lr

08005c50 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b088      	sub	sp, #32
 8005c54:	af02      	add	r7, sp, #8
 8005c56:	60f8      	str	r0, [r7, #12]
 8005c58:	4608      	mov	r0, r1
 8005c5a:	4611      	mov	r1, r2
 8005c5c:	461a      	mov	r2, r3
 8005c5e:	4603      	mov	r3, r0
 8005c60:	817b      	strh	r3, [r7, #10]
 8005c62:	460b      	mov	r3, r1
 8005c64:	813b      	strh	r3, [r7, #8]
 8005c66:	4613      	mov	r3, r2
 8005c68:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	681a      	ldr	r2, [r3, #0]
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c78:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c7c:	9300      	str	r3, [sp, #0]
 8005c7e:	6a3b      	ldr	r3, [r7, #32]
 8005c80:	2200      	movs	r2, #0
 8005c82:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005c86:	68f8      	ldr	r0, [r7, #12]
 8005c88:	f000 fa72 	bl	8006170 <I2C_WaitOnFlagUntilTimeout>
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d00d      	beq.n	8005cae <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ca0:	d103      	bne.n	8005caa <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ca8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005caa:	2303      	movs	r3, #3
 8005cac:	e05f      	b.n	8005d6e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005cae:	897b      	ldrh	r3, [r7, #10]
 8005cb0:	b2db      	uxtb	r3, r3
 8005cb2:	461a      	mov	r2, r3
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005cbc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc0:	6a3a      	ldr	r2, [r7, #32]
 8005cc2:	492d      	ldr	r1, [pc, #180]	; (8005d78 <I2C_RequestMemoryWrite+0x128>)
 8005cc4:	68f8      	ldr	r0, [r7, #12]
 8005cc6:	f000 faaa 	bl	800621e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d001      	beq.n	8005cd4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	e04c      	b.n	8005d6e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	617b      	str	r3, [r7, #20]
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	695b      	ldr	r3, [r3, #20]
 8005cde:	617b      	str	r3, [r7, #20]
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	699b      	ldr	r3, [r3, #24]
 8005ce6:	617b      	str	r3, [r7, #20]
 8005ce8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005cea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cec:	6a39      	ldr	r1, [r7, #32]
 8005cee:	68f8      	ldr	r0, [r7, #12]
 8005cf0:	f000 fb14 	bl	800631c <I2C_WaitOnTXEFlagUntilTimeout>
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d00d      	beq.n	8005d16 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cfe:	2b04      	cmp	r3, #4
 8005d00:	d107      	bne.n	8005d12 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	681a      	ldr	r2, [r3, #0]
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d10:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005d12:	2301      	movs	r3, #1
 8005d14:	e02b      	b.n	8005d6e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005d16:	88fb      	ldrh	r3, [r7, #6]
 8005d18:	2b01      	cmp	r3, #1
 8005d1a:	d105      	bne.n	8005d28 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005d1c:	893b      	ldrh	r3, [r7, #8]
 8005d1e:	b2da      	uxtb	r2, r3
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	611a      	str	r2, [r3, #16]
 8005d26:	e021      	b.n	8005d6c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005d28:	893b      	ldrh	r3, [r7, #8]
 8005d2a:	0a1b      	lsrs	r3, r3, #8
 8005d2c:	b29b      	uxth	r3, r3
 8005d2e:	b2da      	uxtb	r2, r3
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d38:	6a39      	ldr	r1, [r7, #32]
 8005d3a:	68f8      	ldr	r0, [r7, #12]
 8005d3c:	f000 faee 	bl	800631c <I2C_WaitOnTXEFlagUntilTimeout>
 8005d40:	4603      	mov	r3, r0
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d00d      	beq.n	8005d62 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d4a:	2b04      	cmp	r3, #4
 8005d4c:	d107      	bne.n	8005d5e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	681a      	ldr	r2, [r3, #0]
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d5c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005d5e:	2301      	movs	r3, #1
 8005d60:	e005      	b.n	8005d6e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005d62:	893b      	ldrh	r3, [r7, #8]
 8005d64:	b2da      	uxtb	r2, r3
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005d6c:	2300      	movs	r3, #0
}
 8005d6e:	4618      	mov	r0, r3
 8005d70:	3718      	adds	r7, #24
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bd80      	pop	{r7, pc}
 8005d76:	bf00      	nop
 8005d78:	00010002 	.word	0x00010002

08005d7c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b088      	sub	sp, #32
 8005d80:	af02      	add	r7, sp, #8
 8005d82:	60f8      	str	r0, [r7, #12]
 8005d84:	4608      	mov	r0, r1
 8005d86:	4611      	mov	r1, r2
 8005d88:	461a      	mov	r2, r3
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	817b      	strh	r3, [r7, #10]
 8005d8e:	460b      	mov	r3, r1
 8005d90:	813b      	strh	r3, [r7, #8]
 8005d92:	4613      	mov	r3, r2
 8005d94:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	681a      	ldr	r2, [r3, #0]
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005da4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	681a      	ldr	r2, [r3, #0]
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005db4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db8:	9300      	str	r3, [sp, #0]
 8005dba:	6a3b      	ldr	r3, [r7, #32]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005dc2:	68f8      	ldr	r0, [r7, #12]
 8005dc4:	f000 f9d4 	bl	8006170 <I2C_WaitOnFlagUntilTimeout>
 8005dc8:	4603      	mov	r3, r0
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d00d      	beq.n	8005dea <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ddc:	d103      	bne.n	8005de6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005de4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005de6:	2303      	movs	r3, #3
 8005de8:	e0aa      	b.n	8005f40 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005dea:	897b      	ldrh	r3, [r7, #10]
 8005dec:	b2db      	uxtb	r3, r3
 8005dee:	461a      	mov	r2, r3
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005df8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dfc:	6a3a      	ldr	r2, [r7, #32]
 8005dfe:	4952      	ldr	r1, [pc, #328]	; (8005f48 <I2C_RequestMemoryRead+0x1cc>)
 8005e00:	68f8      	ldr	r0, [r7, #12]
 8005e02:	f000 fa0c 	bl	800621e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005e06:	4603      	mov	r3, r0
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d001      	beq.n	8005e10 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	e097      	b.n	8005f40 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e10:	2300      	movs	r3, #0
 8005e12:	617b      	str	r3, [r7, #20]
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	695b      	ldr	r3, [r3, #20]
 8005e1a:	617b      	str	r3, [r7, #20]
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	699b      	ldr	r3, [r3, #24]
 8005e22:	617b      	str	r3, [r7, #20]
 8005e24:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e28:	6a39      	ldr	r1, [r7, #32]
 8005e2a:	68f8      	ldr	r0, [r7, #12]
 8005e2c:	f000 fa76 	bl	800631c <I2C_WaitOnTXEFlagUntilTimeout>
 8005e30:	4603      	mov	r3, r0
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d00d      	beq.n	8005e52 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e3a:	2b04      	cmp	r3, #4
 8005e3c:	d107      	bne.n	8005e4e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	681a      	ldr	r2, [r3, #0]
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e4c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005e4e:	2301      	movs	r3, #1
 8005e50:	e076      	b.n	8005f40 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005e52:	88fb      	ldrh	r3, [r7, #6]
 8005e54:	2b01      	cmp	r3, #1
 8005e56:	d105      	bne.n	8005e64 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005e58:	893b      	ldrh	r3, [r7, #8]
 8005e5a:	b2da      	uxtb	r2, r3
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	611a      	str	r2, [r3, #16]
 8005e62:	e021      	b.n	8005ea8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005e64:	893b      	ldrh	r3, [r7, #8]
 8005e66:	0a1b      	lsrs	r3, r3, #8
 8005e68:	b29b      	uxth	r3, r3
 8005e6a:	b2da      	uxtb	r2, r3
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e74:	6a39      	ldr	r1, [r7, #32]
 8005e76:	68f8      	ldr	r0, [r7, #12]
 8005e78:	f000 fa50 	bl	800631c <I2C_WaitOnTXEFlagUntilTimeout>
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d00d      	beq.n	8005e9e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e86:	2b04      	cmp	r3, #4
 8005e88:	d107      	bne.n	8005e9a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	681a      	ldr	r2, [r3, #0]
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e98:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	e050      	b.n	8005f40 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005e9e:	893b      	ldrh	r3, [r7, #8]
 8005ea0:	b2da      	uxtb	r2, r3
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ea8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005eaa:	6a39      	ldr	r1, [r7, #32]
 8005eac:	68f8      	ldr	r0, [r7, #12]
 8005eae:	f000 fa35 	bl	800631c <I2C_WaitOnTXEFlagUntilTimeout>
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d00d      	beq.n	8005ed4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ebc:	2b04      	cmp	r3, #4
 8005ebe:	d107      	bne.n	8005ed0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	681a      	ldr	r2, [r3, #0]
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ece:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	e035      	b.n	8005f40 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	681a      	ldr	r2, [r3, #0]
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005ee2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee6:	9300      	str	r3, [sp, #0]
 8005ee8:	6a3b      	ldr	r3, [r7, #32]
 8005eea:	2200      	movs	r2, #0
 8005eec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005ef0:	68f8      	ldr	r0, [r7, #12]
 8005ef2:	f000 f93d 	bl	8006170 <I2C_WaitOnFlagUntilTimeout>
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d00d      	beq.n	8005f18 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f0a:	d103      	bne.n	8005f14 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f12:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005f14:	2303      	movs	r3, #3
 8005f16:	e013      	b.n	8005f40 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005f18:	897b      	ldrh	r3, [r7, #10]
 8005f1a:	b2db      	uxtb	r3, r3
 8005f1c:	f043 0301 	orr.w	r3, r3, #1
 8005f20:	b2da      	uxtb	r2, r3
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f2a:	6a3a      	ldr	r2, [r7, #32]
 8005f2c:	4906      	ldr	r1, [pc, #24]	; (8005f48 <I2C_RequestMemoryRead+0x1cc>)
 8005f2e:	68f8      	ldr	r0, [r7, #12]
 8005f30:	f000 f975 	bl	800621e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005f34:	4603      	mov	r3, r0
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d001      	beq.n	8005f3e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	e000      	b.n	8005f40 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005f3e:	2300      	movs	r3, #0
}
 8005f40:	4618      	mov	r0, r3
 8005f42:	3718      	adds	r7, #24
 8005f44:	46bd      	mov	sp, r7
 8005f46:	bd80      	pop	{r7, pc}
 8005f48:	00010002 	.word	0x00010002

08005f4c <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b086      	sub	sp, #24
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f58:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f60:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f68:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005f6a:	697b      	ldr	r3, [r7, #20]
 8005f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f6e:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005f70:	697b      	ldr	r3, [r7, #20]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	685a      	ldr	r2, [r3, #4]
 8005f76:	697b      	ldr	r3, [r7, #20]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005f7e:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005f80:	697b      	ldr	r3, [r7, #20]
 8005f82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d003      	beq.n	8005f90 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005f88:	697b      	ldr	r3, [r7, #20]
 8005f8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005f90:	697b      	ldr	r3, [r7, #20]
 8005f92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d003      	beq.n	8005fa0 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005f98:	697b      	ldr	r3, [r7, #20]
 8005f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8005fa0:	7cfb      	ldrb	r3, [r7, #19]
 8005fa2:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8005fa6:	2b21      	cmp	r3, #33	; 0x21
 8005fa8:	d007      	beq.n	8005fba <I2C_DMAXferCplt+0x6e>
 8005faa:	7cfb      	ldrb	r3, [r7, #19]
 8005fac:	f003 0322 	and.w	r3, r3, #34	; 0x22
 8005fb0:	2b22      	cmp	r3, #34	; 0x22
 8005fb2:	d131      	bne.n	8006018 <I2C_DMAXferCplt+0xcc>
 8005fb4:	7cbb      	ldrb	r3, [r7, #18]
 8005fb6:	2b20      	cmp	r3, #32
 8005fb8:	d12e      	bne.n	8006018 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	685a      	ldr	r2, [r3, #4]
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005fc8:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8005fd0:	7cfb      	ldrb	r3, [r7, #19]
 8005fd2:	2b29      	cmp	r3, #41	; 0x29
 8005fd4:	d10a      	bne.n	8005fec <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	2221      	movs	r2, #33	; 0x21
 8005fda:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	2228      	movs	r2, #40	; 0x28
 8005fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005fe4:	6978      	ldr	r0, [r7, #20]
 8005fe6:	f7ff fe15 	bl	8005c14 <HAL_I2C_SlaveTxCpltCallback>
 8005fea:	e00c      	b.n	8006006 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005fec:	7cfb      	ldrb	r3, [r7, #19]
 8005fee:	2b2a      	cmp	r3, #42	; 0x2a
 8005ff0:	d109      	bne.n	8006006 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	2222      	movs	r2, #34	; 0x22
 8005ff6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005ff8:	697b      	ldr	r3, [r7, #20]
 8005ffa:	2228      	movs	r2, #40	; 0x28
 8005ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006000:	6978      	ldr	r0, [r7, #20]
 8006002:	f7ff fe11 	bl	8005c28 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006006:	697b      	ldr	r3, [r7, #20]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	685a      	ldr	r2, [r3, #4]
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8006014:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8006016:	e06a      	b.n	80060ee <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8006018:	697b      	ldr	r3, [r7, #20]
 800601a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800601e:	b2db      	uxtb	r3, r3
 8006020:	2b00      	cmp	r3, #0
 8006022:	d064      	beq.n	80060ee <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 8006024:	697b      	ldr	r3, [r7, #20]
 8006026:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006028:	b29b      	uxth	r3, r3
 800602a:	2b01      	cmp	r3, #1
 800602c:	d107      	bne.n	800603e <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800602e:	697b      	ldr	r3, [r7, #20]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	681a      	ldr	r2, [r3, #0]
 8006034:	697b      	ldr	r3, [r7, #20]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800603c:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	685a      	ldr	r2, [r3, #4]
 8006044:	697b      	ldr	r3, [r7, #20]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800604c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006054:	d009      	beq.n	800606a <I2C_DMAXferCplt+0x11e>
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	2b08      	cmp	r3, #8
 800605a:	d006      	beq.n	800606a <I2C_DMAXferCplt+0x11e>
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006062:	d002      	beq.n	800606a <I2C_DMAXferCplt+0x11e>
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	2b20      	cmp	r3, #32
 8006068:	d107      	bne.n	800607a <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800606a:	697b      	ldr	r3, [r7, #20]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	681a      	ldr	r2, [r3, #0]
 8006070:	697b      	ldr	r3, [r7, #20]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006078:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800607a:	697b      	ldr	r3, [r7, #20]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	685a      	ldr	r2, [r3, #4]
 8006080:	697b      	ldr	r3, [r7, #20]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006088:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	685a      	ldr	r2, [r3, #4]
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006098:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 800609a:	697b      	ldr	r3, [r7, #20]
 800609c:	2200      	movs	r2, #0
 800609e:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80060a0:	697b      	ldr	r3, [r7, #20]
 80060a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d003      	beq.n	80060b0 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 80060a8:	6978      	ldr	r0, [r7, #20]
 80060aa:	f7ff fdc7 	bl	8005c3c <HAL_I2C_ErrorCallback>
}
 80060ae:	e01e      	b.n	80060ee <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 80060b0:	697b      	ldr	r3, [r7, #20]
 80060b2:	2220      	movs	r2, #32
 80060b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80060b8:	697b      	ldr	r3, [r7, #20]
 80060ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80060be:	b2db      	uxtb	r3, r3
 80060c0:	2b40      	cmp	r3, #64	; 0x40
 80060c2:	d10a      	bne.n	80060da <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	2200      	movs	r2, #0
 80060c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 80060cc:	697b      	ldr	r3, [r7, #20]
 80060ce:	2200      	movs	r2, #0
 80060d0:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 80060d2:	6978      	ldr	r0, [r7, #20]
 80060d4:	f7fc fe2a 	bl	8002d2c <HAL_I2C_MemRxCpltCallback>
}
 80060d8:	e009      	b.n	80060ee <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	2200      	movs	r2, #0
 80060de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80060e2:	697b      	ldr	r3, [r7, #20]
 80060e4:	2212      	movs	r2, #18
 80060e6:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 80060e8:	6978      	ldr	r0, [r7, #20]
 80060ea:	f7ff fd89 	bl	8005c00 <HAL_I2C_MasterRxCpltCallback>
}
 80060ee:	bf00      	nop
 80060f0:	3718      	adds	r7, #24
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd80      	pop	{r7, pc}

080060f6 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80060f6:	b580      	push	{r7, lr}
 80060f8:	b084      	sub	sp, #16
 80060fa:	af00      	add	r7, sp, #0
 80060fc:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006102:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006108:	2b00      	cmp	r3, #0
 800610a:	d003      	beq.n	8006114 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006110:	2200      	movs	r2, #0
 8006112:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006118:	2b00      	cmp	r3, #0
 800611a:	d003      	beq.n	8006124 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006120:	2200      	movs	r2, #0
 8006122:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8006124:	6878      	ldr	r0, [r7, #4]
 8006126:	f7fe fe2b 	bl	8004d80 <HAL_DMA_GetError>
 800612a:	4603      	mov	r3, r0
 800612c:	2b02      	cmp	r3, #2
 800612e:	d01b      	beq.n	8006168 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	681a      	ldr	r2, [r3, #0]
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800613e:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	2200      	movs	r2, #0
 8006144:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	2220      	movs	r2, #32
 800614a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	2200      	movs	r2, #0
 8006152:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800615a:	f043 0210 	orr.w	r2, r3, #16
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8006162:	68f8      	ldr	r0, [r7, #12]
 8006164:	f7ff fd6a 	bl	8005c3c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006168:	bf00      	nop
 800616a:	3710      	adds	r7, #16
 800616c:	46bd      	mov	sp, r7
 800616e:	bd80      	pop	{r7, pc}

08006170 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b084      	sub	sp, #16
 8006174:	af00      	add	r7, sp, #0
 8006176:	60f8      	str	r0, [r7, #12]
 8006178:	60b9      	str	r1, [r7, #8]
 800617a:	603b      	str	r3, [r7, #0]
 800617c:	4613      	mov	r3, r2
 800617e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006180:	e025      	b.n	80061ce <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006188:	d021      	beq.n	80061ce <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800618a:	f7fd fcdb 	bl	8003b44 <HAL_GetTick>
 800618e:	4602      	mov	r2, r0
 8006190:	69bb      	ldr	r3, [r7, #24]
 8006192:	1ad3      	subs	r3, r2, r3
 8006194:	683a      	ldr	r2, [r7, #0]
 8006196:	429a      	cmp	r2, r3
 8006198:	d302      	bcc.n	80061a0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d116      	bne.n	80061ce <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	2200      	movs	r2, #0
 80061a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	2220      	movs	r2, #32
 80061aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	2200      	movs	r2, #0
 80061b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ba:	f043 0220 	orr.w	r2, r3, #32
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	2200      	movs	r2, #0
 80061c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80061ca:	2301      	movs	r3, #1
 80061cc:	e023      	b.n	8006216 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	0c1b      	lsrs	r3, r3, #16
 80061d2:	b2db      	uxtb	r3, r3
 80061d4:	2b01      	cmp	r3, #1
 80061d6:	d10d      	bne.n	80061f4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	695b      	ldr	r3, [r3, #20]
 80061de:	43da      	mvns	r2, r3
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	4013      	ands	r3, r2
 80061e4:	b29b      	uxth	r3, r3
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	bf0c      	ite	eq
 80061ea:	2301      	moveq	r3, #1
 80061ec:	2300      	movne	r3, #0
 80061ee:	b2db      	uxtb	r3, r3
 80061f0:	461a      	mov	r2, r3
 80061f2:	e00c      	b.n	800620e <I2C_WaitOnFlagUntilTimeout+0x9e>
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	699b      	ldr	r3, [r3, #24]
 80061fa:	43da      	mvns	r2, r3
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	4013      	ands	r3, r2
 8006200:	b29b      	uxth	r3, r3
 8006202:	2b00      	cmp	r3, #0
 8006204:	bf0c      	ite	eq
 8006206:	2301      	moveq	r3, #1
 8006208:	2300      	movne	r3, #0
 800620a:	b2db      	uxtb	r3, r3
 800620c:	461a      	mov	r2, r3
 800620e:	79fb      	ldrb	r3, [r7, #7]
 8006210:	429a      	cmp	r2, r3
 8006212:	d0b6      	beq.n	8006182 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006214:	2300      	movs	r3, #0
}
 8006216:	4618      	mov	r0, r3
 8006218:	3710      	adds	r7, #16
 800621a:	46bd      	mov	sp, r7
 800621c:	bd80      	pop	{r7, pc}

0800621e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800621e:	b580      	push	{r7, lr}
 8006220:	b084      	sub	sp, #16
 8006222:	af00      	add	r7, sp, #0
 8006224:	60f8      	str	r0, [r7, #12]
 8006226:	60b9      	str	r1, [r7, #8]
 8006228:	607a      	str	r2, [r7, #4]
 800622a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800622c:	e051      	b.n	80062d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	695b      	ldr	r3, [r3, #20]
 8006234:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006238:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800623c:	d123      	bne.n	8006286 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	681a      	ldr	r2, [r3, #0]
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800624c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006256:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	2200      	movs	r2, #0
 800625c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	2220      	movs	r2, #32
 8006262:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	2200      	movs	r2, #0
 800626a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006272:	f043 0204 	orr.w	r2, r3, #4
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	2200      	movs	r2, #0
 800627e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006282:	2301      	movs	r3, #1
 8006284:	e046      	b.n	8006314 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	f1b3 3fff 	cmp.w	r3, #4294967295
 800628c:	d021      	beq.n	80062d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800628e:	f7fd fc59 	bl	8003b44 <HAL_GetTick>
 8006292:	4602      	mov	r2, r0
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	1ad3      	subs	r3, r2, r3
 8006298:	687a      	ldr	r2, [r7, #4]
 800629a:	429a      	cmp	r2, r3
 800629c:	d302      	bcc.n	80062a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d116      	bne.n	80062d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	2200      	movs	r2, #0
 80062a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	2220      	movs	r2, #32
 80062ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2200      	movs	r2, #0
 80062b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062be:	f043 0220 	orr.w	r2, r3, #32
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	2200      	movs	r2, #0
 80062ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80062ce:	2301      	movs	r3, #1
 80062d0:	e020      	b.n	8006314 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	0c1b      	lsrs	r3, r3, #16
 80062d6:	b2db      	uxtb	r3, r3
 80062d8:	2b01      	cmp	r3, #1
 80062da:	d10c      	bne.n	80062f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	695b      	ldr	r3, [r3, #20]
 80062e2:	43da      	mvns	r2, r3
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	4013      	ands	r3, r2
 80062e8:	b29b      	uxth	r3, r3
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	bf14      	ite	ne
 80062ee:	2301      	movne	r3, #1
 80062f0:	2300      	moveq	r3, #0
 80062f2:	b2db      	uxtb	r3, r3
 80062f4:	e00b      	b.n	800630e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	699b      	ldr	r3, [r3, #24]
 80062fc:	43da      	mvns	r2, r3
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	4013      	ands	r3, r2
 8006302:	b29b      	uxth	r3, r3
 8006304:	2b00      	cmp	r3, #0
 8006306:	bf14      	ite	ne
 8006308:	2301      	movne	r3, #1
 800630a:	2300      	moveq	r3, #0
 800630c:	b2db      	uxtb	r3, r3
 800630e:	2b00      	cmp	r3, #0
 8006310:	d18d      	bne.n	800622e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006312:	2300      	movs	r3, #0
}
 8006314:	4618      	mov	r0, r3
 8006316:	3710      	adds	r7, #16
 8006318:	46bd      	mov	sp, r7
 800631a:	bd80      	pop	{r7, pc}

0800631c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b084      	sub	sp, #16
 8006320:	af00      	add	r7, sp, #0
 8006322:	60f8      	str	r0, [r7, #12]
 8006324:	60b9      	str	r1, [r7, #8]
 8006326:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006328:	e02d      	b.n	8006386 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800632a:	68f8      	ldr	r0, [r7, #12]
 800632c:	f000 f878 	bl	8006420 <I2C_IsAcknowledgeFailed>
 8006330:	4603      	mov	r3, r0
 8006332:	2b00      	cmp	r3, #0
 8006334:	d001      	beq.n	800633a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006336:	2301      	movs	r3, #1
 8006338:	e02d      	b.n	8006396 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006340:	d021      	beq.n	8006386 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006342:	f7fd fbff 	bl	8003b44 <HAL_GetTick>
 8006346:	4602      	mov	r2, r0
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	1ad3      	subs	r3, r2, r3
 800634c:	68ba      	ldr	r2, [r7, #8]
 800634e:	429a      	cmp	r2, r3
 8006350:	d302      	bcc.n	8006358 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d116      	bne.n	8006386 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	2200      	movs	r2, #0
 800635c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	2220      	movs	r2, #32
 8006362:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	2200      	movs	r2, #0
 800636a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006372:	f043 0220 	orr.w	r2, r3, #32
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	2200      	movs	r2, #0
 800637e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006382:	2301      	movs	r3, #1
 8006384:	e007      	b.n	8006396 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	695b      	ldr	r3, [r3, #20]
 800638c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006390:	2b80      	cmp	r3, #128	; 0x80
 8006392:	d1ca      	bne.n	800632a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006394:	2300      	movs	r3, #0
}
 8006396:	4618      	mov	r0, r3
 8006398:	3710      	adds	r7, #16
 800639a:	46bd      	mov	sp, r7
 800639c:	bd80      	pop	{r7, pc}

0800639e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800639e:	b580      	push	{r7, lr}
 80063a0:	b084      	sub	sp, #16
 80063a2:	af00      	add	r7, sp, #0
 80063a4:	60f8      	str	r0, [r7, #12]
 80063a6:	60b9      	str	r1, [r7, #8]
 80063a8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80063aa:	e02d      	b.n	8006408 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80063ac:	68f8      	ldr	r0, [r7, #12]
 80063ae:	f000 f837 	bl	8006420 <I2C_IsAcknowledgeFailed>
 80063b2:	4603      	mov	r3, r0
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d001      	beq.n	80063bc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80063b8:	2301      	movs	r3, #1
 80063ba:	e02d      	b.n	8006418 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063c2:	d021      	beq.n	8006408 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063c4:	f7fd fbbe 	bl	8003b44 <HAL_GetTick>
 80063c8:	4602      	mov	r2, r0
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	1ad3      	subs	r3, r2, r3
 80063ce:	68ba      	ldr	r2, [r7, #8]
 80063d0:	429a      	cmp	r2, r3
 80063d2:	d302      	bcc.n	80063da <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d116      	bne.n	8006408 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	2200      	movs	r2, #0
 80063de:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	2220      	movs	r2, #32
 80063e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	2200      	movs	r2, #0
 80063ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063f4:	f043 0220 	orr.w	r2, r3, #32
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	2200      	movs	r2, #0
 8006400:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006404:	2301      	movs	r3, #1
 8006406:	e007      	b.n	8006418 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	695b      	ldr	r3, [r3, #20]
 800640e:	f003 0304 	and.w	r3, r3, #4
 8006412:	2b04      	cmp	r3, #4
 8006414:	d1ca      	bne.n	80063ac <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006416:	2300      	movs	r3, #0
}
 8006418:	4618      	mov	r0, r3
 800641a:	3710      	adds	r7, #16
 800641c:	46bd      	mov	sp, r7
 800641e:	bd80      	pop	{r7, pc}

08006420 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006420:	b480      	push	{r7}
 8006422:	b083      	sub	sp, #12
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	695b      	ldr	r3, [r3, #20]
 800642e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006432:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006436:	d11b      	bne.n	8006470 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006440:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2200      	movs	r2, #0
 8006446:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2220      	movs	r2, #32
 800644c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2200      	movs	r2, #0
 8006454:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800645c:	f043 0204 	orr.w	r2, r3, #4
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2200      	movs	r2, #0
 8006468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800646c:	2301      	movs	r3, #1
 800646e:	e000      	b.n	8006472 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006470:	2300      	movs	r3, #0
}
 8006472:	4618      	mov	r0, r3
 8006474:	370c      	adds	r7, #12
 8006476:	46bd      	mov	sp, r7
 8006478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647c:	4770      	bx	lr

0800647e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800647e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006480:	b08f      	sub	sp, #60	; 0x3c
 8006482:	af0a      	add	r7, sp, #40	; 0x28
 8006484:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d101      	bne.n	8006490 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800648c:	2301      	movs	r3, #1
 800648e:	e10f      	b.n	80066b0 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800649c:	b2db      	uxtb	r3, r3
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d106      	bne.n	80064b0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2200      	movs	r2, #0
 80064a6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	f007 f998 	bl	800d7e0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2203      	movs	r2, #3
 80064b4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d102      	bne.n	80064ca <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2200      	movs	r2, #0
 80064c8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4618      	mov	r0, r3
 80064d0:	f003 ff0b 	bl	800a2ea <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	603b      	str	r3, [r7, #0]
 80064da:	687e      	ldr	r6, [r7, #4]
 80064dc:	466d      	mov	r5, sp
 80064de:	f106 0410 	add.w	r4, r6, #16
 80064e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80064e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80064e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80064e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80064ea:	e894 0003 	ldmia.w	r4, {r0, r1}
 80064ee:	e885 0003 	stmia.w	r5, {r0, r1}
 80064f2:	1d33      	adds	r3, r6, #4
 80064f4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80064f6:	6838      	ldr	r0, [r7, #0]
 80064f8:	f003 fde2 	bl	800a0c0 <USB_CoreInit>
 80064fc:	4603      	mov	r3, r0
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d005      	beq.n	800650e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2202      	movs	r2, #2
 8006506:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800650a:	2301      	movs	r3, #1
 800650c:	e0d0      	b.n	80066b0 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	2100      	movs	r1, #0
 8006514:	4618      	mov	r0, r3
 8006516:	f003 fef9 	bl	800a30c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800651a:	2300      	movs	r3, #0
 800651c:	73fb      	strb	r3, [r7, #15]
 800651e:	e04a      	b.n	80065b6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006520:	7bfa      	ldrb	r2, [r7, #15]
 8006522:	6879      	ldr	r1, [r7, #4]
 8006524:	4613      	mov	r3, r2
 8006526:	00db      	lsls	r3, r3, #3
 8006528:	4413      	add	r3, r2
 800652a:	009b      	lsls	r3, r3, #2
 800652c:	440b      	add	r3, r1
 800652e:	333d      	adds	r3, #61	; 0x3d
 8006530:	2201      	movs	r2, #1
 8006532:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006534:	7bfa      	ldrb	r2, [r7, #15]
 8006536:	6879      	ldr	r1, [r7, #4]
 8006538:	4613      	mov	r3, r2
 800653a:	00db      	lsls	r3, r3, #3
 800653c:	4413      	add	r3, r2
 800653e:	009b      	lsls	r3, r3, #2
 8006540:	440b      	add	r3, r1
 8006542:	333c      	adds	r3, #60	; 0x3c
 8006544:	7bfa      	ldrb	r2, [r7, #15]
 8006546:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006548:	7bfa      	ldrb	r2, [r7, #15]
 800654a:	7bfb      	ldrb	r3, [r7, #15]
 800654c:	b298      	uxth	r0, r3
 800654e:	6879      	ldr	r1, [r7, #4]
 8006550:	4613      	mov	r3, r2
 8006552:	00db      	lsls	r3, r3, #3
 8006554:	4413      	add	r3, r2
 8006556:	009b      	lsls	r3, r3, #2
 8006558:	440b      	add	r3, r1
 800655a:	3344      	adds	r3, #68	; 0x44
 800655c:	4602      	mov	r2, r0
 800655e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006560:	7bfa      	ldrb	r2, [r7, #15]
 8006562:	6879      	ldr	r1, [r7, #4]
 8006564:	4613      	mov	r3, r2
 8006566:	00db      	lsls	r3, r3, #3
 8006568:	4413      	add	r3, r2
 800656a:	009b      	lsls	r3, r3, #2
 800656c:	440b      	add	r3, r1
 800656e:	3340      	adds	r3, #64	; 0x40
 8006570:	2200      	movs	r2, #0
 8006572:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006574:	7bfa      	ldrb	r2, [r7, #15]
 8006576:	6879      	ldr	r1, [r7, #4]
 8006578:	4613      	mov	r3, r2
 800657a:	00db      	lsls	r3, r3, #3
 800657c:	4413      	add	r3, r2
 800657e:	009b      	lsls	r3, r3, #2
 8006580:	440b      	add	r3, r1
 8006582:	3348      	adds	r3, #72	; 0x48
 8006584:	2200      	movs	r2, #0
 8006586:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006588:	7bfa      	ldrb	r2, [r7, #15]
 800658a:	6879      	ldr	r1, [r7, #4]
 800658c:	4613      	mov	r3, r2
 800658e:	00db      	lsls	r3, r3, #3
 8006590:	4413      	add	r3, r2
 8006592:	009b      	lsls	r3, r3, #2
 8006594:	440b      	add	r3, r1
 8006596:	334c      	adds	r3, #76	; 0x4c
 8006598:	2200      	movs	r2, #0
 800659a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800659c:	7bfa      	ldrb	r2, [r7, #15]
 800659e:	6879      	ldr	r1, [r7, #4]
 80065a0:	4613      	mov	r3, r2
 80065a2:	00db      	lsls	r3, r3, #3
 80065a4:	4413      	add	r3, r2
 80065a6:	009b      	lsls	r3, r3, #2
 80065a8:	440b      	add	r3, r1
 80065aa:	3354      	adds	r3, #84	; 0x54
 80065ac:	2200      	movs	r2, #0
 80065ae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80065b0:	7bfb      	ldrb	r3, [r7, #15]
 80065b2:	3301      	adds	r3, #1
 80065b4:	73fb      	strb	r3, [r7, #15]
 80065b6:	7bfa      	ldrb	r2, [r7, #15]
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	685b      	ldr	r3, [r3, #4]
 80065bc:	429a      	cmp	r2, r3
 80065be:	d3af      	bcc.n	8006520 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80065c0:	2300      	movs	r3, #0
 80065c2:	73fb      	strb	r3, [r7, #15]
 80065c4:	e044      	b.n	8006650 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80065c6:	7bfa      	ldrb	r2, [r7, #15]
 80065c8:	6879      	ldr	r1, [r7, #4]
 80065ca:	4613      	mov	r3, r2
 80065cc:	00db      	lsls	r3, r3, #3
 80065ce:	4413      	add	r3, r2
 80065d0:	009b      	lsls	r3, r3, #2
 80065d2:	440b      	add	r3, r1
 80065d4:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80065d8:	2200      	movs	r2, #0
 80065da:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80065dc:	7bfa      	ldrb	r2, [r7, #15]
 80065de:	6879      	ldr	r1, [r7, #4]
 80065e0:	4613      	mov	r3, r2
 80065e2:	00db      	lsls	r3, r3, #3
 80065e4:	4413      	add	r3, r2
 80065e6:	009b      	lsls	r3, r3, #2
 80065e8:	440b      	add	r3, r1
 80065ea:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80065ee:	7bfa      	ldrb	r2, [r7, #15]
 80065f0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80065f2:	7bfa      	ldrb	r2, [r7, #15]
 80065f4:	6879      	ldr	r1, [r7, #4]
 80065f6:	4613      	mov	r3, r2
 80065f8:	00db      	lsls	r3, r3, #3
 80065fa:	4413      	add	r3, r2
 80065fc:	009b      	lsls	r3, r3, #2
 80065fe:	440b      	add	r3, r1
 8006600:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006604:	2200      	movs	r2, #0
 8006606:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006608:	7bfa      	ldrb	r2, [r7, #15]
 800660a:	6879      	ldr	r1, [r7, #4]
 800660c:	4613      	mov	r3, r2
 800660e:	00db      	lsls	r3, r3, #3
 8006610:	4413      	add	r3, r2
 8006612:	009b      	lsls	r3, r3, #2
 8006614:	440b      	add	r3, r1
 8006616:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800661a:	2200      	movs	r2, #0
 800661c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800661e:	7bfa      	ldrb	r2, [r7, #15]
 8006620:	6879      	ldr	r1, [r7, #4]
 8006622:	4613      	mov	r3, r2
 8006624:	00db      	lsls	r3, r3, #3
 8006626:	4413      	add	r3, r2
 8006628:	009b      	lsls	r3, r3, #2
 800662a:	440b      	add	r3, r1
 800662c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8006630:	2200      	movs	r2, #0
 8006632:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006634:	7bfa      	ldrb	r2, [r7, #15]
 8006636:	6879      	ldr	r1, [r7, #4]
 8006638:	4613      	mov	r3, r2
 800663a:	00db      	lsls	r3, r3, #3
 800663c:	4413      	add	r3, r2
 800663e:	009b      	lsls	r3, r3, #2
 8006640:	440b      	add	r3, r1
 8006642:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8006646:	2200      	movs	r2, #0
 8006648:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800664a:	7bfb      	ldrb	r3, [r7, #15]
 800664c:	3301      	adds	r3, #1
 800664e:	73fb      	strb	r3, [r7, #15]
 8006650:	7bfa      	ldrb	r2, [r7, #15]
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	685b      	ldr	r3, [r3, #4]
 8006656:	429a      	cmp	r2, r3
 8006658:	d3b5      	bcc.n	80065c6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	603b      	str	r3, [r7, #0]
 8006660:	687e      	ldr	r6, [r7, #4]
 8006662:	466d      	mov	r5, sp
 8006664:	f106 0410 	add.w	r4, r6, #16
 8006668:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800666a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800666c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800666e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006670:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006674:	e885 0003 	stmia.w	r5, {r0, r1}
 8006678:	1d33      	adds	r3, r6, #4
 800667a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800667c:	6838      	ldr	r0, [r7, #0]
 800667e:	f003 fe91 	bl	800a3a4 <USB_DevInit>
 8006682:	4603      	mov	r3, r0
 8006684:	2b00      	cmp	r3, #0
 8006686:	d005      	beq.n	8006694 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2202      	movs	r2, #2
 800668c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8006690:	2301      	movs	r3, #1
 8006692:	e00d      	b.n	80066b0 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2200      	movs	r2, #0
 8006698:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2201      	movs	r2, #1
 80066a0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4618      	mov	r0, r3
 80066aa:	f004 ffe0 	bl	800b66e <USB_DevDisconnect>

  return HAL_OK;
 80066ae:	2300      	movs	r3, #0
}
 80066b0:	4618      	mov	r0, r3
 80066b2:	3714      	adds	r7, #20
 80066b4:	46bd      	mov	sp, r7
 80066b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080066b8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b084      	sub	sp, #16
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80066cc:	2b01      	cmp	r3, #1
 80066ce:	d101      	bne.n	80066d4 <HAL_PCD_Start+0x1c>
 80066d0:	2302      	movs	r3, #2
 80066d2:	e020      	b.n	8006716 <HAL_PCD_Start+0x5e>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2201      	movs	r2, #1
 80066d8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066e0:	2b01      	cmp	r3, #1
 80066e2:	d109      	bne.n	80066f8 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80066e8:	2b01      	cmp	r3, #1
 80066ea:	d005      	beq.n	80066f8 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066f0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4618      	mov	r0, r3
 80066fe:	f003 fde3 	bl	800a2c8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	4618      	mov	r0, r3
 8006708:	f004 ff90 	bl	800b62c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2200      	movs	r2, #0
 8006710:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006714:	2300      	movs	r3, #0
}
 8006716:	4618      	mov	r0, r3
 8006718:	3710      	adds	r7, #16
 800671a:	46bd      	mov	sp, r7
 800671c:	bd80      	pop	{r7, pc}

0800671e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800671e:	b590      	push	{r4, r7, lr}
 8006720:	b08d      	sub	sp, #52	; 0x34
 8006722:	af00      	add	r7, sp, #0
 8006724:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800672c:	6a3b      	ldr	r3, [r7, #32]
 800672e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	4618      	mov	r0, r3
 8006736:	f005 f84e 	bl	800b7d6 <USB_GetMode>
 800673a:	4603      	mov	r3, r0
 800673c:	2b00      	cmp	r3, #0
 800673e:	f040 848a 	bne.w	8007056 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	4618      	mov	r0, r3
 8006748:	f004 ffb2 	bl	800b6b0 <USB_ReadInterrupts>
 800674c:	4603      	mov	r3, r0
 800674e:	2b00      	cmp	r3, #0
 8006750:	f000 8480 	beq.w	8007054 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8006754:	69fb      	ldr	r3, [r7, #28]
 8006756:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800675a:	689b      	ldr	r3, [r3, #8]
 800675c:	0a1b      	lsrs	r3, r3, #8
 800675e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	4618      	mov	r0, r3
 800676e:	f004 ff9f 	bl	800b6b0 <USB_ReadInterrupts>
 8006772:	4603      	mov	r3, r0
 8006774:	f003 0302 	and.w	r3, r3, #2
 8006778:	2b02      	cmp	r3, #2
 800677a:	d107      	bne.n	800678c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	695a      	ldr	r2, [r3, #20]
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f002 0202 	and.w	r2, r2, #2
 800678a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4618      	mov	r0, r3
 8006792:	f004 ff8d 	bl	800b6b0 <USB_ReadInterrupts>
 8006796:	4603      	mov	r3, r0
 8006798:	f003 0310 	and.w	r3, r3, #16
 800679c:	2b10      	cmp	r3, #16
 800679e:	d161      	bne.n	8006864 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	699a      	ldr	r2, [r3, #24]
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f022 0210 	bic.w	r2, r2, #16
 80067ae:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80067b0:	6a3b      	ldr	r3, [r7, #32]
 80067b2:	6a1b      	ldr	r3, [r3, #32]
 80067b4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80067b6:	69bb      	ldr	r3, [r7, #24]
 80067b8:	f003 020f 	and.w	r2, r3, #15
 80067bc:	4613      	mov	r3, r2
 80067be:	00db      	lsls	r3, r3, #3
 80067c0:	4413      	add	r3, r2
 80067c2:	009b      	lsls	r3, r3, #2
 80067c4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80067c8:	687a      	ldr	r2, [r7, #4]
 80067ca:	4413      	add	r3, r2
 80067cc:	3304      	adds	r3, #4
 80067ce:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80067d0:	69bb      	ldr	r3, [r7, #24]
 80067d2:	0c5b      	lsrs	r3, r3, #17
 80067d4:	f003 030f 	and.w	r3, r3, #15
 80067d8:	2b02      	cmp	r3, #2
 80067da:	d124      	bne.n	8006826 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80067dc:	69ba      	ldr	r2, [r7, #24]
 80067de:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80067e2:	4013      	ands	r3, r2
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d035      	beq.n	8006854 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80067e8:	697b      	ldr	r3, [r7, #20]
 80067ea:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80067ec:	69bb      	ldr	r3, [r7, #24]
 80067ee:	091b      	lsrs	r3, r3, #4
 80067f0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80067f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80067f6:	b29b      	uxth	r3, r3
 80067f8:	461a      	mov	r2, r3
 80067fa:	6a38      	ldr	r0, [r7, #32]
 80067fc:	f004 fdc4 	bl	800b388 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006800:	697b      	ldr	r3, [r7, #20]
 8006802:	691a      	ldr	r2, [r3, #16]
 8006804:	69bb      	ldr	r3, [r7, #24]
 8006806:	091b      	lsrs	r3, r3, #4
 8006808:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800680c:	441a      	add	r2, r3
 800680e:	697b      	ldr	r3, [r7, #20]
 8006810:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006812:	697b      	ldr	r3, [r7, #20]
 8006814:	6a1a      	ldr	r2, [r3, #32]
 8006816:	69bb      	ldr	r3, [r7, #24]
 8006818:	091b      	lsrs	r3, r3, #4
 800681a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800681e:	441a      	add	r2, r3
 8006820:	697b      	ldr	r3, [r7, #20]
 8006822:	621a      	str	r2, [r3, #32]
 8006824:	e016      	b.n	8006854 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8006826:	69bb      	ldr	r3, [r7, #24]
 8006828:	0c5b      	lsrs	r3, r3, #17
 800682a:	f003 030f 	and.w	r3, r3, #15
 800682e:	2b06      	cmp	r3, #6
 8006830:	d110      	bne.n	8006854 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006838:	2208      	movs	r2, #8
 800683a:	4619      	mov	r1, r3
 800683c:	6a38      	ldr	r0, [r7, #32]
 800683e:	f004 fda3 	bl	800b388 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006842:	697b      	ldr	r3, [r7, #20]
 8006844:	6a1a      	ldr	r2, [r3, #32]
 8006846:	69bb      	ldr	r3, [r7, #24]
 8006848:	091b      	lsrs	r3, r3, #4
 800684a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800684e:	441a      	add	r2, r3
 8006850:	697b      	ldr	r3, [r7, #20]
 8006852:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	699a      	ldr	r2, [r3, #24]
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f042 0210 	orr.w	r2, r2, #16
 8006862:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4618      	mov	r0, r3
 800686a:	f004 ff21 	bl	800b6b0 <USB_ReadInterrupts>
 800686e:	4603      	mov	r3, r0
 8006870:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006874:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006878:	f040 80a7 	bne.w	80069ca <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800687c:	2300      	movs	r3, #0
 800687e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	4618      	mov	r0, r3
 8006886:	f004 ff26 	bl	800b6d6 <USB_ReadDevAllOutEpInterrupt>
 800688a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800688c:	e099      	b.n	80069c2 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800688e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006890:	f003 0301 	and.w	r3, r3, #1
 8006894:	2b00      	cmp	r3, #0
 8006896:	f000 808e 	beq.w	80069b6 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068a0:	b2d2      	uxtb	r2, r2
 80068a2:	4611      	mov	r1, r2
 80068a4:	4618      	mov	r0, r3
 80068a6:	f004 ff4a 	bl	800b73e <USB_ReadDevOutEPInterrupt>
 80068aa:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80068ac:	693b      	ldr	r3, [r7, #16]
 80068ae:	f003 0301 	and.w	r3, r3, #1
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d00c      	beq.n	80068d0 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80068b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b8:	015a      	lsls	r2, r3, #5
 80068ba:	69fb      	ldr	r3, [r7, #28]
 80068bc:	4413      	add	r3, r2
 80068be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068c2:	461a      	mov	r2, r3
 80068c4:	2301      	movs	r3, #1
 80068c6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80068c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f000 feaa 	bl	8007624 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80068d0:	693b      	ldr	r3, [r7, #16]
 80068d2:	f003 0308 	and.w	r3, r3, #8
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d00c      	beq.n	80068f4 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80068da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068dc:	015a      	lsls	r2, r3, #5
 80068de:	69fb      	ldr	r3, [r7, #28]
 80068e0:	4413      	add	r3, r2
 80068e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068e6:	461a      	mov	r2, r3
 80068e8:	2308      	movs	r3, #8
 80068ea:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80068ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80068ee:	6878      	ldr	r0, [r7, #4]
 80068f0:	f000 ff80 	bl	80077f4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80068f4:	693b      	ldr	r3, [r7, #16]
 80068f6:	f003 0310 	and.w	r3, r3, #16
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d008      	beq.n	8006910 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80068fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006900:	015a      	lsls	r2, r3, #5
 8006902:	69fb      	ldr	r3, [r7, #28]
 8006904:	4413      	add	r3, r2
 8006906:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800690a:	461a      	mov	r2, r3
 800690c:	2310      	movs	r3, #16
 800690e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8006910:	693b      	ldr	r3, [r7, #16]
 8006912:	f003 0302 	and.w	r3, r3, #2
 8006916:	2b00      	cmp	r3, #0
 8006918:	d030      	beq.n	800697c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800691a:	6a3b      	ldr	r3, [r7, #32]
 800691c:	695b      	ldr	r3, [r3, #20]
 800691e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006922:	2b80      	cmp	r3, #128	; 0x80
 8006924:	d109      	bne.n	800693a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8006926:	69fb      	ldr	r3, [r7, #28]
 8006928:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800692c:	685b      	ldr	r3, [r3, #4]
 800692e:	69fa      	ldr	r2, [r7, #28]
 8006930:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006934:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006938:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800693a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800693c:	4613      	mov	r3, r2
 800693e:	00db      	lsls	r3, r3, #3
 8006940:	4413      	add	r3, r2
 8006942:	009b      	lsls	r3, r3, #2
 8006944:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006948:	687a      	ldr	r2, [r7, #4]
 800694a:	4413      	add	r3, r2
 800694c:	3304      	adds	r3, #4
 800694e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8006950:	697b      	ldr	r3, [r7, #20]
 8006952:	78db      	ldrb	r3, [r3, #3]
 8006954:	2b01      	cmp	r3, #1
 8006956:	d108      	bne.n	800696a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8006958:	697b      	ldr	r3, [r7, #20]
 800695a:	2200      	movs	r2, #0
 800695c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800695e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006960:	b2db      	uxtb	r3, r3
 8006962:	4619      	mov	r1, r3
 8006964:	6878      	ldr	r0, [r7, #4]
 8006966:	f007 f837 	bl	800d9d8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800696a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800696c:	015a      	lsls	r2, r3, #5
 800696e:	69fb      	ldr	r3, [r7, #28]
 8006970:	4413      	add	r3, r2
 8006972:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006976:	461a      	mov	r2, r3
 8006978:	2302      	movs	r3, #2
 800697a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800697c:	693b      	ldr	r3, [r7, #16]
 800697e:	f003 0320 	and.w	r3, r3, #32
 8006982:	2b00      	cmp	r3, #0
 8006984:	d008      	beq.n	8006998 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006988:	015a      	lsls	r2, r3, #5
 800698a:	69fb      	ldr	r3, [r7, #28]
 800698c:	4413      	add	r3, r2
 800698e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006992:	461a      	mov	r2, r3
 8006994:	2320      	movs	r3, #32
 8006996:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8006998:	693b      	ldr	r3, [r7, #16]
 800699a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d009      	beq.n	80069b6 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80069a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a4:	015a      	lsls	r2, r3, #5
 80069a6:	69fb      	ldr	r3, [r7, #28]
 80069a8:	4413      	add	r3, r2
 80069aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069ae:	461a      	mov	r2, r3
 80069b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80069b4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80069b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069b8:	3301      	adds	r3, #1
 80069ba:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80069bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069be:	085b      	lsrs	r3, r3, #1
 80069c0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80069c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	f47f af62 	bne.w	800688e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	4618      	mov	r0, r3
 80069d0:	f004 fe6e 	bl	800b6b0 <USB_ReadInterrupts>
 80069d4:	4603      	mov	r3, r0
 80069d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80069da:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80069de:	f040 80db 	bne.w	8006b98 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	4618      	mov	r0, r3
 80069e8:	f004 fe8f 	bl	800b70a <USB_ReadDevAllInEpInterrupt>
 80069ec:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80069ee:	2300      	movs	r3, #0
 80069f0:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80069f2:	e0cd      	b.n	8006b90 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80069f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069f6:	f003 0301 	and.w	r3, r3, #1
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	f000 80c2 	beq.w	8006b84 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a06:	b2d2      	uxtb	r2, r2
 8006a08:	4611      	mov	r1, r2
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	f004 feb5 	bl	800b77a <USB_ReadDevInEPInterrupt>
 8006a10:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	f003 0301 	and.w	r3, r3, #1
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d057      	beq.n	8006acc <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a1e:	f003 030f 	and.w	r3, r3, #15
 8006a22:	2201      	movs	r2, #1
 8006a24:	fa02 f303 	lsl.w	r3, r2, r3
 8006a28:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006a2a:	69fb      	ldr	r3, [r7, #28]
 8006a2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	43db      	mvns	r3, r3
 8006a36:	69f9      	ldr	r1, [r7, #28]
 8006a38:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006a3c:	4013      	ands	r3, r2
 8006a3e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8006a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a42:	015a      	lsls	r2, r3, #5
 8006a44:	69fb      	ldr	r3, [r7, #28]
 8006a46:	4413      	add	r3, r2
 8006a48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a4c:	461a      	mov	r2, r3
 8006a4e:	2301      	movs	r3, #1
 8006a50:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	691b      	ldr	r3, [r3, #16]
 8006a56:	2b01      	cmp	r3, #1
 8006a58:	d132      	bne.n	8006ac0 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8006a5a:	6879      	ldr	r1, [r7, #4]
 8006a5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a5e:	4613      	mov	r3, r2
 8006a60:	00db      	lsls	r3, r3, #3
 8006a62:	4413      	add	r3, r2
 8006a64:	009b      	lsls	r3, r3, #2
 8006a66:	440b      	add	r3, r1
 8006a68:	334c      	adds	r3, #76	; 0x4c
 8006a6a:	6819      	ldr	r1, [r3, #0]
 8006a6c:	6878      	ldr	r0, [r7, #4]
 8006a6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a70:	4613      	mov	r3, r2
 8006a72:	00db      	lsls	r3, r3, #3
 8006a74:	4413      	add	r3, r2
 8006a76:	009b      	lsls	r3, r3, #2
 8006a78:	4403      	add	r3, r0
 8006a7a:	3348      	adds	r3, #72	; 0x48
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	4419      	add	r1, r3
 8006a80:	6878      	ldr	r0, [r7, #4]
 8006a82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a84:	4613      	mov	r3, r2
 8006a86:	00db      	lsls	r3, r3, #3
 8006a88:	4413      	add	r3, r2
 8006a8a:	009b      	lsls	r3, r3, #2
 8006a8c:	4403      	add	r3, r0
 8006a8e:	334c      	adds	r3, #76	; 0x4c
 8006a90:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8006a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d113      	bne.n	8006ac0 <HAL_PCD_IRQHandler+0x3a2>
 8006a98:	6879      	ldr	r1, [r7, #4]
 8006a9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a9c:	4613      	mov	r3, r2
 8006a9e:	00db      	lsls	r3, r3, #3
 8006aa0:	4413      	add	r3, r2
 8006aa2:	009b      	lsls	r3, r3, #2
 8006aa4:	440b      	add	r3, r1
 8006aa6:	3354      	adds	r3, #84	; 0x54
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d108      	bne.n	8006ac0 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6818      	ldr	r0, [r3, #0]
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006ab8:	461a      	mov	r2, r3
 8006aba:	2101      	movs	r1, #1
 8006abc:	f004 febc 	bl	800b838 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8006ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac2:	b2db      	uxtb	r3, r3
 8006ac4:	4619      	mov	r1, r3
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f006 ff0b 	bl	800d8e2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8006acc:	693b      	ldr	r3, [r7, #16]
 8006ace:	f003 0308 	and.w	r3, r3, #8
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d008      	beq.n	8006ae8 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8006ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ad8:	015a      	lsls	r2, r3, #5
 8006ada:	69fb      	ldr	r3, [r7, #28]
 8006adc:	4413      	add	r3, r2
 8006ade:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ae2:	461a      	mov	r2, r3
 8006ae4:	2308      	movs	r3, #8
 8006ae6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8006ae8:	693b      	ldr	r3, [r7, #16]
 8006aea:	f003 0310 	and.w	r3, r3, #16
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d008      	beq.n	8006b04 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8006af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006af4:	015a      	lsls	r2, r3, #5
 8006af6:	69fb      	ldr	r3, [r7, #28]
 8006af8:	4413      	add	r3, r2
 8006afa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006afe:	461a      	mov	r2, r3
 8006b00:	2310      	movs	r3, #16
 8006b02:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8006b04:	693b      	ldr	r3, [r7, #16]
 8006b06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d008      	beq.n	8006b20 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8006b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b10:	015a      	lsls	r2, r3, #5
 8006b12:	69fb      	ldr	r3, [r7, #28]
 8006b14:	4413      	add	r3, r2
 8006b16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b1a:	461a      	mov	r2, r3
 8006b1c:	2340      	movs	r3, #64	; 0x40
 8006b1e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8006b20:	693b      	ldr	r3, [r7, #16]
 8006b22:	f003 0302 	and.w	r3, r3, #2
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d023      	beq.n	8006b72 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8006b2a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006b2c:	6a38      	ldr	r0, [r7, #32]
 8006b2e:	f003 fd9d 	bl	800a66c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8006b32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b34:	4613      	mov	r3, r2
 8006b36:	00db      	lsls	r3, r3, #3
 8006b38:	4413      	add	r3, r2
 8006b3a:	009b      	lsls	r3, r3, #2
 8006b3c:	3338      	adds	r3, #56	; 0x38
 8006b3e:	687a      	ldr	r2, [r7, #4]
 8006b40:	4413      	add	r3, r2
 8006b42:	3304      	adds	r3, #4
 8006b44:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8006b46:	697b      	ldr	r3, [r7, #20]
 8006b48:	78db      	ldrb	r3, [r3, #3]
 8006b4a:	2b01      	cmp	r3, #1
 8006b4c:	d108      	bne.n	8006b60 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8006b4e:	697b      	ldr	r3, [r7, #20]
 8006b50:	2200      	movs	r2, #0
 8006b52:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8006b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b56:	b2db      	uxtb	r3, r3
 8006b58:	4619      	mov	r1, r3
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	f006 ff4e 	bl	800d9fc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8006b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b62:	015a      	lsls	r2, r3, #5
 8006b64:	69fb      	ldr	r3, [r7, #28]
 8006b66:	4413      	add	r3, r2
 8006b68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b6c:	461a      	mov	r2, r3
 8006b6e:	2302      	movs	r3, #2
 8006b70:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8006b72:	693b      	ldr	r3, [r7, #16]
 8006b74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d003      	beq.n	8006b84 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8006b7c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f000 fcc3 	bl	800750a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8006b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b86:	3301      	adds	r3, #1
 8006b88:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8006b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b8c:	085b      	lsrs	r3, r3, #1
 8006b8e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	f47f af2e 	bne.w	80069f4 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	f004 fd87 	bl	800b6b0 <USB_ReadInterrupts>
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006ba8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006bac:	d122      	bne.n	8006bf4 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006bae:	69fb      	ldr	r3, [r7, #28]
 8006bb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bb4:	685b      	ldr	r3, [r3, #4]
 8006bb6:	69fa      	ldr	r2, [r7, #28]
 8006bb8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006bbc:	f023 0301 	bic.w	r3, r3, #1
 8006bc0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8006bc8:	2b01      	cmp	r3, #1
 8006bca:	d108      	bne.n	8006bde <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2200      	movs	r2, #0
 8006bd0:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8006bd4:	2100      	movs	r1, #0
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f000 feaa 	bl	8007930 <HAL_PCDEx_LPM_Callback>
 8006bdc:	e002      	b.n	8006be4 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8006bde:	6878      	ldr	r0, [r7, #4]
 8006be0:	f006 feec 	bl	800d9bc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	695a      	ldr	r2, [r3, #20]
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8006bf2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	f004 fd59 	bl	800b6b0 <USB_ReadInterrupts>
 8006bfe:	4603      	mov	r3, r0
 8006c00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c08:	d112      	bne.n	8006c30 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8006c0a:	69fb      	ldr	r3, [r7, #28]
 8006c0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c10:	689b      	ldr	r3, [r3, #8]
 8006c12:	f003 0301 	and.w	r3, r3, #1
 8006c16:	2b01      	cmp	r3, #1
 8006c18:	d102      	bne.n	8006c20 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006c1a:	6878      	ldr	r0, [r7, #4]
 8006c1c:	f006 fea8 	bl	800d970 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	695a      	ldr	r2, [r3, #20]
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8006c2e:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	4618      	mov	r0, r3
 8006c36:	f004 fd3b 	bl	800b6b0 <USB_ReadInterrupts>
 8006c3a:	4603      	mov	r3, r0
 8006c3c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006c40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c44:	f040 80b7 	bne.w	8006db6 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006c48:	69fb      	ldr	r3, [r7, #28]
 8006c4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c4e:	685b      	ldr	r3, [r3, #4]
 8006c50:	69fa      	ldr	r2, [r7, #28]
 8006c52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006c56:	f023 0301 	bic.w	r3, r3, #1
 8006c5a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	2110      	movs	r1, #16
 8006c62:	4618      	mov	r0, r3
 8006c64:	f003 fd02 	bl	800a66c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006c68:	2300      	movs	r3, #0
 8006c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c6c:	e046      	b.n	8006cfc <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8006c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c70:	015a      	lsls	r2, r3, #5
 8006c72:	69fb      	ldr	r3, [r7, #28]
 8006c74:	4413      	add	r3, r2
 8006c76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c7a:	461a      	mov	r2, r3
 8006c7c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006c80:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c84:	015a      	lsls	r2, r3, #5
 8006c86:	69fb      	ldr	r3, [r7, #28]
 8006c88:	4413      	add	r3, r2
 8006c8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c92:	0151      	lsls	r1, r2, #5
 8006c94:	69fa      	ldr	r2, [r7, #28]
 8006c96:	440a      	add	r2, r1
 8006c98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c9c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006ca0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8006ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ca4:	015a      	lsls	r2, r3, #5
 8006ca6:	69fb      	ldr	r3, [r7, #28]
 8006ca8:	4413      	add	r3, r2
 8006caa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cae:	461a      	mov	r2, r3
 8006cb0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006cb4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cb8:	015a      	lsls	r2, r3, #5
 8006cba:	69fb      	ldr	r3, [r7, #28]
 8006cbc:	4413      	add	r3, r2
 8006cbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006cc6:	0151      	lsls	r1, r2, #5
 8006cc8:	69fa      	ldr	r2, [r7, #28]
 8006cca:	440a      	add	r2, r1
 8006ccc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006cd0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006cd4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cd8:	015a      	lsls	r2, r3, #5
 8006cda:	69fb      	ldr	r3, [r7, #28]
 8006cdc:	4413      	add	r3, r2
 8006cde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ce6:	0151      	lsls	r1, r2, #5
 8006ce8:	69fa      	ldr	r2, [r7, #28]
 8006cea:	440a      	add	r2, r1
 8006cec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006cf0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006cf4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cf8:	3301      	adds	r3, #1
 8006cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	685b      	ldr	r3, [r3, #4]
 8006d00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d02:	429a      	cmp	r2, r3
 8006d04:	d3b3      	bcc.n	8006c6e <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8006d06:	69fb      	ldr	r3, [r7, #28]
 8006d08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d0c:	69db      	ldr	r3, [r3, #28]
 8006d0e:	69fa      	ldr	r2, [r7, #28]
 8006d10:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006d14:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8006d18:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d016      	beq.n	8006d50 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8006d22:	69fb      	ldr	r3, [r7, #28]
 8006d24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d2c:	69fa      	ldr	r2, [r7, #28]
 8006d2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006d32:	f043 030b 	orr.w	r3, r3, #11
 8006d36:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8006d3a:	69fb      	ldr	r3, [r7, #28]
 8006d3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d42:	69fa      	ldr	r2, [r7, #28]
 8006d44:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006d48:	f043 030b 	orr.w	r3, r3, #11
 8006d4c:	6453      	str	r3, [r2, #68]	; 0x44
 8006d4e:	e015      	b.n	8006d7c <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8006d50:	69fb      	ldr	r3, [r7, #28]
 8006d52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d56:	695b      	ldr	r3, [r3, #20]
 8006d58:	69fa      	ldr	r2, [r7, #28]
 8006d5a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006d5e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006d62:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8006d66:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8006d68:	69fb      	ldr	r3, [r7, #28]
 8006d6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d6e:	691b      	ldr	r3, [r3, #16]
 8006d70:	69fa      	ldr	r2, [r7, #28]
 8006d72:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006d76:	f043 030b 	orr.w	r3, r3, #11
 8006d7a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8006d7c:	69fb      	ldr	r3, [r7, #28]
 8006d7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	69fa      	ldr	r2, [r7, #28]
 8006d86:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006d8a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006d8e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6818      	ldr	r0, [r3, #0]
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	691b      	ldr	r3, [r3, #16]
 8006d98:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006da0:	461a      	mov	r2, r3
 8006da2:	f004 fd49 	bl	800b838 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	695a      	ldr	r2, [r3, #20]
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8006db4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4618      	mov	r0, r3
 8006dbc:	f004 fc78 	bl	800b6b0 <USB_ReadInterrupts>
 8006dc0:	4603      	mov	r3, r0
 8006dc2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006dc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006dca:	d124      	bne.n	8006e16 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	f004 fd0e 	bl	800b7f2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	4618      	mov	r0, r3
 8006ddc:	f003 fcc3 	bl	800a766 <USB_GetDevSpeed>
 8006de0:	4603      	mov	r3, r0
 8006de2:	461a      	mov	r2, r3
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681c      	ldr	r4, [r3, #0]
 8006dec:	f001 f9d0 	bl	8008190 <HAL_RCC_GetHCLKFreq>
 8006df0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006df6:	b2db      	uxtb	r3, r3
 8006df8:	461a      	mov	r2, r3
 8006dfa:	4620      	mov	r0, r4
 8006dfc:	f003 f9c2 	bl	800a184 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8006e00:	6878      	ldr	r0, [r7, #4]
 8006e02:	f006 fd96 	bl	800d932 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	695a      	ldr	r2, [r3, #20]
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8006e14:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	f004 fc48 	bl	800b6b0 <USB_ReadInterrupts>
 8006e20:	4603      	mov	r3, r0
 8006e22:	f003 0308 	and.w	r3, r3, #8
 8006e26:	2b08      	cmp	r3, #8
 8006e28:	d10a      	bne.n	8006e40 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f006 fd73 	bl	800d916 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	695a      	ldr	r2, [r3, #20]
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f002 0208 	and.w	r2, r2, #8
 8006e3e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	4618      	mov	r0, r3
 8006e46:	f004 fc33 	bl	800b6b0 <USB_ReadInterrupts>
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e50:	2b80      	cmp	r3, #128	; 0x80
 8006e52:	d122      	bne.n	8006e9a <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8006e54:	6a3b      	ldr	r3, [r7, #32]
 8006e56:	699b      	ldr	r3, [r3, #24]
 8006e58:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006e5c:	6a3b      	ldr	r3, [r7, #32]
 8006e5e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006e60:	2301      	movs	r3, #1
 8006e62:	627b      	str	r3, [r7, #36]	; 0x24
 8006e64:	e014      	b.n	8006e90 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8006e66:	6879      	ldr	r1, [r7, #4]
 8006e68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e6a:	4613      	mov	r3, r2
 8006e6c:	00db      	lsls	r3, r3, #3
 8006e6e:	4413      	add	r3, r2
 8006e70:	009b      	lsls	r3, r3, #2
 8006e72:	440b      	add	r3, r1
 8006e74:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8006e78:	781b      	ldrb	r3, [r3, #0]
 8006e7a:	2b01      	cmp	r3, #1
 8006e7c:	d105      	bne.n	8006e8a <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8006e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e80:	b2db      	uxtb	r3, r3
 8006e82:	4619      	mov	r1, r3
 8006e84:	6878      	ldr	r0, [r7, #4]
 8006e86:	f000 fb0f 	bl	80074a8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e8c:	3301      	adds	r3, #1
 8006e8e:	627b      	str	r3, [r7, #36]	; 0x24
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	685b      	ldr	r3, [r3, #4]
 8006e94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e96:	429a      	cmp	r2, r3
 8006e98:	d3e5      	bcc.n	8006e66 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	f004 fc06 	bl	800b6b0 <USB_ReadInterrupts>
 8006ea4:	4603      	mov	r3, r0
 8006ea6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006eaa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006eae:	d13b      	bne.n	8006f28 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	627b      	str	r3, [r7, #36]	; 0x24
 8006eb4:	e02b      	b.n	8006f0e <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8006eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eb8:	015a      	lsls	r2, r3, #5
 8006eba:	69fb      	ldr	r3, [r7, #28]
 8006ebc:	4413      	add	r3, r2
 8006ebe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006ec6:	6879      	ldr	r1, [r7, #4]
 8006ec8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006eca:	4613      	mov	r3, r2
 8006ecc:	00db      	lsls	r3, r3, #3
 8006ece:	4413      	add	r3, r2
 8006ed0:	009b      	lsls	r3, r3, #2
 8006ed2:	440b      	add	r3, r1
 8006ed4:	3340      	adds	r3, #64	; 0x40
 8006ed6:	781b      	ldrb	r3, [r3, #0]
 8006ed8:	2b01      	cmp	r3, #1
 8006eda:	d115      	bne.n	8006f08 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8006edc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	da12      	bge.n	8006f08 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8006ee2:	6879      	ldr	r1, [r7, #4]
 8006ee4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ee6:	4613      	mov	r3, r2
 8006ee8:	00db      	lsls	r3, r3, #3
 8006eea:	4413      	add	r3, r2
 8006eec:	009b      	lsls	r3, r3, #2
 8006eee:	440b      	add	r3, r1
 8006ef0:	333f      	adds	r3, #63	; 0x3f
 8006ef2:	2201      	movs	r2, #1
 8006ef4:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8006ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ef8:	b2db      	uxtb	r3, r3
 8006efa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006efe:	b2db      	uxtb	r3, r3
 8006f00:	4619      	mov	r1, r3
 8006f02:	6878      	ldr	r0, [r7, #4]
 8006f04:	f000 fad0 	bl	80074a8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f0a:	3301      	adds	r3, #1
 8006f0c:	627b      	str	r3, [r7, #36]	; 0x24
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	685b      	ldr	r3, [r3, #4]
 8006f12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f14:	429a      	cmp	r2, r3
 8006f16:	d3ce      	bcc.n	8006eb6 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	695a      	ldr	r2, [r3, #20]
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8006f26:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	f004 fbbf 	bl	800b6b0 <USB_ReadInterrupts>
 8006f32:	4603      	mov	r3, r0
 8006f34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006f38:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006f3c:	d155      	bne.n	8006fea <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006f3e:	2301      	movs	r3, #1
 8006f40:	627b      	str	r3, [r7, #36]	; 0x24
 8006f42:	e045      	b.n	8006fd0 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8006f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f46:	015a      	lsls	r2, r3, #5
 8006f48:	69fb      	ldr	r3, [r7, #28]
 8006f4a:	4413      	add	r3, r2
 8006f4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006f54:	6879      	ldr	r1, [r7, #4]
 8006f56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f58:	4613      	mov	r3, r2
 8006f5a:	00db      	lsls	r3, r3, #3
 8006f5c:	4413      	add	r3, r2
 8006f5e:	009b      	lsls	r3, r3, #2
 8006f60:	440b      	add	r3, r1
 8006f62:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006f66:	781b      	ldrb	r3, [r3, #0]
 8006f68:	2b01      	cmp	r3, #1
 8006f6a:	d12e      	bne.n	8006fca <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006f6c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	da2b      	bge.n	8006fca <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8006f72:	69bb      	ldr	r3, [r7, #24]
 8006f74:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8006f7e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006f82:	429a      	cmp	r2, r3
 8006f84:	d121      	bne.n	8006fca <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8006f86:	6879      	ldr	r1, [r7, #4]
 8006f88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f8a:	4613      	mov	r3, r2
 8006f8c:	00db      	lsls	r3, r3, #3
 8006f8e:	4413      	add	r3, r2
 8006f90:	009b      	lsls	r3, r3, #2
 8006f92:	440b      	add	r3, r1
 8006f94:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8006f98:	2201      	movs	r2, #1
 8006f9a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8006f9c:	6a3b      	ldr	r3, [r7, #32]
 8006f9e:	699b      	ldr	r3, [r3, #24]
 8006fa0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006fa4:	6a3b      	ldr	r3, [r7, #32]
 8006fa6:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8006fa8:	6a3b      	ldr	r3, [r7, #32]
 8006faa:	695b      	ldr	r3, [r3, #20]
 8006fac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d10a      	bne.n	8006fca <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8006fb4:	69fb      	ldr	r3, [r7, #28]
 8006fb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fba:	685b      	ldr	r3, [r3, #4]
 8006fbc:	69fa      	ldr	r2, [r7, #28]
 8006fbe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006fc2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006fc6:	6053      	str	r3, [r2, #4]
            break;
 8006fc8:	e007      	b.n	8006fda <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fcc:	3301      	adds	r3, #1
 8006fce:	627b      	str	r3, [r7, #36]	; 0x24
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	685b      	ldr	r3, [r3, #4]
 8006fd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fd6:	429a      	cmp	r2, r3
 8006fd8:	d3b4      	bcc.n	8006f44 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	695a      	ldr	r2, [r3, #20]
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8006fe8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	4618      	mov	r0, r3
 8006ff0:	f004 fb5e 	bl	800b6b0 <USB_ReadInterrupts>
 8006ff4:	4603      	mov	r3, r0
 8006ff6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006ffa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ffe:	d10a      	bne.n	8007016 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	f006 fd0d 	bl	800da20 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	695a      	ldr	r2, [r3, #20]
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8007014:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4618      	mov	r0, r3
 800701c:	f004 fb48 	bl	800b6b0 <USB_ReadInterrupts>
 8007020:	4603      	mov	r3, r0
 8007022:	f003 0304 	and.w	r3, r3, #4
 8007026:	2b04      	cmp	r3, #4
 8007028:	d115      	bne.n	8007056 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	685b      	ldr	r3, [r3, #4]
 8007030:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8007032:	69bb      	ldr	r3, [r7, #24]
 8007034:	f003 0304 	and.w	r3, r3, #4
 8007038:	2b00      	cmp	r3, #0
 800703a:	d002      	beq.n	8007042 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800703c:	6878      	ldr	r0, [r7, #4]
 800703e:	f006 fcfd 	bl	800da3c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	6859      	ldr	r1, [r3, #4]
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	69ba      	ldr	r2, [r7, #24]
 800704e:	430a      	orrs	r2, r1
 8007050:	605a      	str	r2, [r3, #4]
 8007052:	e000      	b.n	8007056 <HAL_PCD_IRQHandler+0x938>
      return;
 8007054:	bf00      	nop
    }
  }
}
 8007056:	3734      	adds	r7, #52	; 0x34
 8007058:	46bd      	mov	sp, r7
 800705a:	bd90      	pop	{r4, r7, pc}

0800705c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b082      	sub	sp, #8
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
 8007064:	460b      	mov	r3, r1
 8007066:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800706e:	2b01      	cmp	r3, #1
 8007070:	d101      	bne.n	8007076 <HAL_PCD_SetAddress+0x1a>
 8007072:	2302      	movs	r3, #2
 8007074:	e013      	b.n	800709e <HAL_PCD_SetAddress+0x42>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2201      	movs	r2, #1
 800707a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	78fa      	ldrb	r2, [r7, #3]
 8007082:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	78fa      	ldrb	r2, [r7, #3]
 800708c:	4611      	mov	r1, r2
 800708e:	4618      	mov	r0, r3
 8007090:	f004 faa6 	bl	800b5e0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2200      	movs	r2, #0
 8007098:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800709c:	2300      	movs	r3, #0
}
 800709e:	4618      	mov	r0, r3
 80070a0:	3708      	adds	r7, #8
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}

080070a6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80070a6:	b580      	push	{r7, lr}
 80070a8:	b084      	sub	sp, #16
 80070aa:	af00      	add	r7, sp, #0
 80070ac:	6078      	str	r0, [r7, #4]
 80070ae:	4608      	mov	r0, r1
 80070b0:	4611      	mov	r1, r2
 80070b2:	461a      	mov	r2, r3
 80070b4:	4603      	mov	r3, r0
 80070b6:	70fb      	strb	r3, [r7, #3]
 80070b8:	460b      	mov	r3, r1
 80070ba:	803b      	strh	r3, [r7, #0]
 80070bc:	4613      	mov	r3, r2
 80070be:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80070c0:	2300      	movs	r3, #0
 80070c2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80070c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	da0f      	bge.n	80070ec <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80070cc:	78fb      	ldrb	r3, [r7, #3]
 80070ce:	f003 020f 	and.w	r2, r3, #15
 80070d2:	4613      	mov	r3, r2
 80070d4:	00db      	lsls	r3, r3, #3
 80070d6:	4413      	add	r3, r2
 80070d8:	009b      	lsls	r3, r3, #2
 80070da:	3338      	adds	r3, #56	; 0x38
 80070dc:	687a      	ldr	r2, [r7, #4]
 80070de:	4413      	add	r3, r2
 80070e0:	3304      	adds	r3, #4
 80070e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	2201      	movs	r2, #1
 80070e8:	705a      	strb	r2, [r3, #1]
 80070ea:	e00f      	b.n	800710c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80070ec:	78fb      	ldrb	r3, [r7, #3]
 80070ee:	f003 020f 	and.w	r2, r3, #15
 80070f2:	4613      	mov	r3, r2
 80070f4:	00db      	lsls	r3, r3, #3
 80070f6:	4413      	add	r3, r2
 80070f8:	009b      	lsls	r3, r3, #2
 80070fa:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80070fe:	687a      	ldr	r2, [r7, #4]
 8007100:	4413      	add	r3, r2
 8007102:	3304      	adds	r3, #4
 8007104:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	2200      	movs	r2, #0
 800710a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800710c:	78fb      	ldrb	r3, [r7, #3]
 800710e:	f003 030f 	and.w	r3, r3, #15
 8007112:	b2da      	uxtb	r2, r3
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8007118:	883a      	ldrh	r2, [r7, #0]
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	78ba      	ldrb	r2, [r7, #2]
 8007122:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	785b      	ldrb	r3, [r3, #1]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d004      	beq.n	8007136 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	781b      	ldrb	r3, [r3, #0]
 8007130:	b29a      	uxth	r2, r3
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8007136:	78bb      	ldrb	r3, [r7, #2]
 8007138:	2b02      	cmp	r3, #2
 800713a:	d102      	bne.n	8007142 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	2200      	movs	r2, #0
 8007140:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8007148:	2b01      	cmp	r3, #1
 800714a:	d101      	bne.n	8007150 <HAL_PCD_EP_Open+0xaa>
 800714c:	2302      	movs	r3, #2
 800714e:	e00e      	b.n	800716e <HAL_PCD_EP_Open+0xc8>
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2201      	movs	r2, #1
 8007154:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	68f9      	ldr	r1, [r7, #12]
 800715e:	4618      	mov	r0, r3
 8007160:	f003 fb26 	bl	800a7b0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2200      	movs	r2, #0
 8007168:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800716c:	7afb      	ldrb	r3, [r7, #11]
}
 800716e:	4618      	mov	r0, r3
 8007170:	3710      	adds	r7, #16
 8007172:	46bd      	mov	sp, r7
 8007174:	bd80      	pop	{r7, pc}

08007176 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007176:	b580      	push	{r7, lr}
 8007178:	b084      	sub	sp, #16
 800717a:	af00      	add	r7, sp, #0
 800717c:	6078      	str	r0, [r7, #4]
 800717e:	460b      	mov	r3, r1
 8007180:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007182:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007186:	2b00      	cmp	r3, #0
 8007188:	da0f      	bge.n	80071aa <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800718a:	78fb      	ldrb	r3, [r7, #3]
 800718c:	f003 020f 	and.w	r2, r3, #15
 8007190:	4613      	mov	r3, r2
 8007192:	00db      	lsls	r3, r3, #3
 8007194:	4413      	add	r3, r2
 8007196:	009b      	lsls	r3, r3, #2
 8007198:	3338      	adds	r3, #56	; 0x38
 800719a:	687a      	ldr	r2, [r7, #4]
 800719c:	4413      	add	r3, r2
 800719e:	3304      	adds	r3, #4
 80071a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	2201      	movs	r2, #1
 80071a6:	705a      	strb	r2, [r3, #1]
 80071a8:	e00f      	b.n	80071ca <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80071aa:	78fb      	ldrb	r3, [r7, #3]
 80071ac:	f003 020f 	and.w	r2, r3, #15
 80071b0:	4613      	mov	r3, r2
 80071b2:	00db      	lsls	r3, r3, #3
 80071b4:	4413      	add	r3, r2
 80071b6:	009b      	lsls	r3, r3, #2
 80071b8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80071bc:	687a      	ldr	r2, [r7, #4]
 80071be:	4413      	add	r3, r2
 80071c0:	3304      	adds	r3, #4
 80071c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	2200      	movs	r2, #0
 80071c8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80071ca:	78fb      	ldrb	r3, [r7, #3]
 80071cc:	f003 030f 	and.w	r3, r3, #15
 80071d0:	b2da      	uxtb	r2, r3
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80071dc:	2b01      	cmp	r3, #1
 80071de:	d101      	bne.n	80071e4 <HAL_PCD_EP_Close+0x6e>
 80071e0:	2302      	movs	r3, #2
 80071e2:	e00e      	b.n	8007202 <HAL_PCD_EP_Close+0x8c>
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2201      	movs	r2, #1
 80071e8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	68f9      	ldr	r1, [r7, #12]
 80071f2:	4618      	mov	r0, r3
 80071f4:	f003 fb64 	bl	800a8c0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2200      	movs	r2, #0
 80071fc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8007200:	2300      	movs	r3, #0
}
 8007202:	4618      	mov	r0, r3
 8007204:	3710      	adds	r7, #16
 8007206:	46bd      	mov	sp, r7
 8007208:	bd80      	pop	{r7, pc}

0800720a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800720a:	b580      	push	{r7, lr}
 800720c:	b086      	sub	sp, #24
 800720e:	af00      	add	r7, sp, #0
 8007210:	60f8      	str	r0, [r7, #12]
 8007212:	607a      	str	r2, [r7, #4]
 8007214:	603b      	str	r3, [r7, #0]
 8007216:	460b      	mov	r3, r1
 8007218:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800721a:	7afb      	ldrb	r3, [r7, #11]
 800721c:	f003 020f 	and.w	r2, r3, #15
 8007220:	4613      	mov	r3, r2
 8007222:	00db      	lsls	r3, r3, #3
 8007224:	4413      	add	r3, r2
 8007226:	009b      	lsls	r3, r3, #2
 8007228:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800722c:	68fa      	ldr	r2, [r7, #12]
 800722e:	4413      	add	r3, r2
 8007230:	3304      	adds	r3, #4
 8007232:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007234:	697b      	ldr	r3, [r7, #20]
 8007236:	687a      	ldr	r2, [r7, #4]
 8007238:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800723a:	697b      	ldr	r3, [r7, #20]
 800723c:	683a      	ldr	r2, [r7, #0]
 800723e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8007240:	697b      	ldr	r3, [r7, #20]
 8007242:	2200      	movs	r2, #0
 8007244:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8007246:	697b      	ldr	r3, [r7, #20]
 8007248:	2200      	movs	r2, #0
 800724a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800724c:	7afb      	ldrb	r3, [r7, #11]
 800724e:	f003 030f 	and.w	r3, r3, #15
 8007252:	b2da      	uxtb	r2, r3
 8007254:	697b      	ldr	r3, [r7, #20]
 8007256:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	691b      	ldr	r3, [r3, #16]
 800725c:	2b01      	cmp	r3, #1
 800725e:	d102      	bne.n	8007266 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007260:	687a      	ldr	r2, [r7, #4]
 8007262:	697b      	ldr	r3, [r7, #20]
 8007264:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007266:	7afb      	ldrb	r3, [r7, #11]
 8007268:	f003 030f 	and.w	r3, r3, #15
 800726c:	2b00      	cmp	r3, #0
 800726e:	d109      	bne.n	8007284 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	6818      	ldr	r0, [r3, #0]
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	691b      	ldr	r3, [r3, #16]
 8007278:	b2db      	uxtb	r3, r3
 800727a:	461a      	mov	r2, r3
 800727c:	6979      	ldr	r1, [r7, #20]
 800727e:	f003 fe43 	bl	800af08 <USB_EP0StartXfer>
 8007282:	e008      	b.n	8007296 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	6818      	ldr	r0, [r3, #0]
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	691b      	ldr	r3, [r3, #16]
 800728c:	b2db      	uxtb	r3, r3
 800728e:	461a      	mov	r2, r3
 8007290:	6979      	ldr	r1, [r7, #20]
 8007292:	f003 fbf1 	bl	800aa78 <USB_EPStartXfer>
  }

  return HAL_OK;
 8007296:	2300      	movs	r3, #0
}
 8007298:	4618      	mov	r0, r3
 800729a:	3718      	adds	r7, #24
 800729c:	46bd      	mov	sp, r7
 800729e:	bd80      	pop	{r7, pc}

080072a0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b086      	sub	sp, #24
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	60f8      	str	r0, [r7, #12]
 80072a8:	607a      	str	r2, [r7, #4]
 80072aa:	603b      	str	r3, [r7, #0]
 80072ac:	460b      	mov	r3, r1
 80072ae:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80072b0:	7afb      	ldrb	r3, [r7, #11]
 80072b2:	f003 020f 	and.w	r2, r3, #15
 80072b6:	4613      	mov	r3, r2
 80072b8:	00db      	lsls	r3, r3, #3
 80072ba:	4413      	add	r3, r2
 80072bc:	009b      	lsls	r3, r3, #2
 80072be:	3338      	adds	r3, #56	; 0x38
 80072c0:	68fa      	ldr	r2, [r7, #12]
 80072c2:	4413      	add	r3, r2
 80072c4:	3304      	adds	r3, #4
 80072c6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80072c8:	697b      	ldr	r3, [r7, #20]
 80072ca:	687a      	ldr	r2, [r7, #4]
 80072cc:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80072ce:	697b      	ldr	r3, [r7, #20]
 80072d0:	683a      	ldr	r2, [r7, #0]
 80072d2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80072d4:	697b      	ldr	r3, [r7, #20]
 80072d6:	2200      	movs	r2, #0
 80072d8:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80072da:	697b      	ldr	r3, [r7, #20]
 80072dc:	2201      	movs	r2, #1
 80072de:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80072e0:	7afb      	ldrb	r3, [r7, #11]
 80072e2:	f003 030f 	and.w	r3, r3, #15
 80072e6:	b2da      	uxtb	r2, r3
 80072e8:	697b      	ldr	r3, [r7, #20]
 80072ea:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	691b      	ldr	r3, [r3, #16]
 80072f0:	2b01      	cmp	r3, #1
 80072f2:	d102      	bne.n	80072fa <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80072f4:	687a      	ldr	r2, [r7, #4]
 80072f6:	697b      	ldr	r3, [r7, #20]
 80072f8:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80072fa:	7afb      	ldrb	r3, [r7, #11]
 80072fc:	f003 030f 	and.w	r3, r3, #15
 8007300:	2b00      	cmp	r3, #0
 8007302:	d109      	bne.n	8007318 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	6818      	ldr	r0, [r3, #0]
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	691b      	ldr	r3, [r3, #16]
 800730c:	b2db      	uxtb	r3, r3
 800730e:	461a      	mov	r2, r3
 8007310:	6979      	ldr	r1, [r7, #20]
 8007312:	f003 fdf9 	bl	800af08 <USB_EP0StartXfer>
 8007316:	e008      	b.n	800732a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	6818      	ldr	r0, [r3, #0]
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	691b      	ldr	r3, [r3, #16]
 8007320:	b2db      	uxtb	r3, r3
 8007322:	461a      	mov	r2, r3
 8007324:	6979      	ldr	r1, [r7, #20]
 8007326:	f003 fba7 	bl	800aa78 <USB_EPStartXfer>
  }

  return HAL_OK;
 800732a:	2300      	movs	r3, #0
}
 800732c:	4618      	mov	r0, r3
 800732e:	3718      	adds	r7, #24
 8007330:	46bd      	mov	sp, r7
 8007332:	bd80      	pop	{r7, pc}

08007334 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b084      	sub	sp, #16
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
 800733c:	460b      	mov	r3, r1
 800733e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8007340:	78fb      	ldrb	r3, [r7, #3]
 8007342:	f003 020f 	and.w	r2, r3, #15
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	685b      	ldr	r3, [r3, #4]
 800734a:	429a      	cmp	r2, r3
 800734c:	d901      	bls.n	8007352 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800734e:	2301      	movs	r3, #1
 8007350:	e050      	b.n	80073f4 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007352:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007356:	2b00      	cmp	r3, #0
 8007358:	da0f      	bge.n	800737a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800735a:	78fb      	ldrb	r3, [r7, #3]
 800735c:	f003 020f 	and.w	r2, r3, #15
 8007360:	4613      	mov	r3, r2
 8007362:	00db      	lsls	r3, r3, #3
 8007364:	4413      	add	r3, r2
 8007366:	009b      	lsls	r3, r3, #2
 8007368:	3338      	adds	r3, #56	; 0x38
 800736a:	687a      	ldr	r2, [r7, #4]
 800736c:	4413      	add	r3, r2
 800736e:	3304      	adds	r3, #4
 8007370:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	2201      	movs	r2, #1
 8007376:	705a      	strb	r2, [r3, #1]
 8007378:	e00d      	b.n	8007396 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800737a:	78fa      	ldrb	r2, [r7, #3]
 800737c:	4613      	mov	r3, r2
 800737e:	00db      	lsls	r3, r3, #3
 8007380:	4413      	add	r3, r2
 8007382:	009b      	lsls	r3, r3, #2
 8007384:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007388:	687a      	ldr	r2, [r7, #4]
 800738a:	4413      	add	r3, r2
 800738c:	3304      	adds	r3, #4
 800738e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	2200      	movs	r2, #0
 8007394:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	2201      	movs	r2, #1
 800739a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800739c:	78fb      	ldrb	r3, [r7, #3]
 800739e:	f003 030f 	and.w	r3, r3, #15
 80073a2:	b2da      	uxtb	r2, r3
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80073ae:	2b01      	cmp	r3, #1
 80073b0:	d101      	bne.n	80073b6 <HAL_PCD_EP_SetStall+0x82>
 80073b2:	2302      	movs	r3, #2
 80073b4:	e01e      	b.n	80073f4 <HAL_PCD_EP_SetStall+0xc0>
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2201      	movs	r2, #1
 80073ba:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	68f9      	ldr	r1, [r7, #12]
 80073c4:	4618      	mov	r0, r3
 80073c6:	f004 f837 	bl	800b438 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80073ca:	78fb      	ldrb	r3, [r7, #3]
 80073cc:	f003 030f 	and.w	r3, r3, #15
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d10a      	bne.n	80073ea <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6818      	ldr	r0, [r3, #0]
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	691b      	ldr	r3, [r3, #16]
 80073dc:	b2d9      	uxtb	r1, r3
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80073e4:	461a      	mov	r2, r3
 80073e6:	f004 fa27 	bl	800b838 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	2200      	movs	r2, #0
 80073ee:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80073f2:	2300      	movs	r3, #0
}
 80073f4:	4618      	mov	r0, r3
 80073f6:	3710      	adds	r7, #16
 80073f8:	46bd      	mov	sp, r7
 80073fa:	bd80      	pop	{r7, pc}

080073fc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b084      	sub	sp, #16
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
 8007404:	460b      	mov	r3, r1
 8007406:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007408:	78fb      	ldrb	r3, [r7, #3]
 800740a:	f003 020f 	and.w	r2, r3, #15
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	685b      	ldr	r3, [r3, #4]
 8007412:	429a      	cmp	r2, r3
 8007414:	d901      	bls.n	800741a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8007416:	2301      	movs	r3, #1
 8007418:	e042      	b.n	80074a0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800741a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800741e:	2b00      	cmp	r3, #0
 8007420:	da0f      	bge.n	8007442 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007422:	78fb      	ldrb	r3, [r7, #3]
 8007424:	f003 020f 	and.w	r2, r3, #15
 8007428:	4613      	mov	r3, r2
 800742a:	00db      	lsls	r3, r3, #3
 800742c:	4413      	add	r3, r2
 800742e:	009b      	lsls	r3, r3, #2
 8007430:	3338      	adds	r3, #56	; 0x38
 8007432:	687a      	ldr	r2, [r7, #4]
 8007434:	4413      	add	r3, r2
 8007436:	3304      	adds	r3, #4
 8007438:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	2201      	movs	r2, #1
 800743e:	705a      	strb	r2, [r3, #1]
 8007440:	e00f      	b.n	8007462 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007442:	78fb      	ldrb	r3, [r7, #3]
 8007444:	f003 020f 	and.w	r2, r3, #15
 8007448:	4613      	mov	r3, r2
 800744a:	00db      	lsls	r3, r3, #3
 800744c:	4413      	add	r3, r2
 800744e:	009b      	lsls	r3, r3, #2
 8007450:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007454:	687a      	ldr	r2, [r7, #4]
 8007456:	4413      	add	r3, r2
 8007458:	3304      	adds	r3, #4
 800745a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	2200      	movs	r2, #0
 8007460:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	2200      	movs	r2, #0
 8007466:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007468:	78fb      	ldrb	r3, [r7, #3]
 800746a:	f003 030f 	and.w	r3, r3, #15
 800746e:	b2da      	uxtb	r2, r3
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800747a:	2b01      	cmp	r3, #1
 800747c:	d101      	bne.n	8007482 <HAL_PCD_EP_ClrStall+0x86>
 800747e:	2302      	movs	r3, #2
 8007480:	e00e      	b.n	80074a0 <HAL_PCD_EP_ClrStall+0xa4>
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2201      	movs	r2, #1
 8007486:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	68f9      	ldr	r1, [r7, #12]
 8007490:	4618      	mov	r0, r3
 8007492:	f004 f83f 	bl	800b514 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2200      	movs	r2, #0
 800749a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800749e:	2300      	movs	r3, #0
}
 80074a0:	4618      	mov	r0, r3
 80074a2:	3710      	adds	r7, #16
 80074a4:	46bd      	mov	sp, r7
 80074a6:	bd80      	pop	{r7, pc}

080074a8 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b084      	sub	sp, #16
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
 80074b0:	460b      	mov	r3, r1
 80074b2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80074b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	da0c      	bge.n	80074d6 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80074bc:	78fb      	ldrb	r3, [r7, #3]
 80074be:	f003 020f 	and.w	r2, r3, #15
 80074c2:	4613      	mov	r3, r2
 80074c4:	00db      	lsls	r3, r3, #3
 80074c6:	4413      	add	r3, r2
 80074c8:	009b      	lsls	r3, r3, #2
 80074ca:	3338      	adds	r3, #56	; 0x38
 80074cc:	687a      	ldr	r2, [r7, #4]
 80074ce:	4413      	add	r3, r2
 80074d0:	3304      	adds	r3, #4
 80074d2:	60fb      	str	r3, [r7, #12]
 80074d4:	e00c      	b.n	80074f0 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80074d6:	78fb      	ldrb	r3, [r7, #3]
 80074d8:	f003 020f 	and.w	r2, r3, #15
 80074dc:	4613      	mov	r3, r2
 80074de:	00db      	lsls	r3, r3, #3
 80074e0:	4413      	add	r3, r2
 80074e2:	009b      	lsls	r3, r3, #2
 80074e4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80074e8:	687a      	ldr	r2, [r7, #4]
 80074ea:	4413      	add	r3, r2
 80074ec:	3304      	adds	r3, #4
 80074ee:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	68f9      	ldr	r1, [r7, #12]
 80074f6:	4618      	mov	r0, r3
 80074f8:	f003 fe5e 	bl	800b1b8 <USB_EPStopXfer>
 80074fc:	4603      	mov	r3, r0
 80074fe:	72fb      	strb	r3, [r7, #11]

  return ret;
 8007500:	7afb      	ldrb	r3, [r7, #11]
}
 8007502:	4618      	mov	r0, r3
 8007504:	3710      	adds	r7, #16
 8007506:	46bd      	mov	sp, r7
 8007508:	bd80      	pop	{r7, pc}

0800750a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800750a:	b580      	push	{r7, lr}
 800750c:	b08a      	sub	sp, #40	; 0x28
 800750e:	af02      	add	r7, sp, #8
 8007510:	6078      	str	r0, [r7, #4]
 8007512:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800751a:	697b      	ldr	r3, [r7, #20]
 800751c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800751e:	683a      	ldr	r2, [r7, #0]
 8007520:	4613      	mov	r3, r2
 8007522:	00db      	lsls	r3, r3, #3
 8007524:	4413      	add	r3, r2
 8007526:	009b      	lsls	r3, r3, #2
 8007528:	3338      	adds	r3, #56	; 0x38
 800752a:	687a      	ldr	r2, [r7, #4]
 800752c:	4413      	add	r3, r2
 800752e:	3304      	adds	r3, #4
 8007530:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	6a1a      	ldr	r2, [r3, #32]
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	699b      	ldr	r3, [r3, #24]
 800753a:	429a      	cmp	r2, r3
 800753c:	d901      	bls.n	8007542 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800753e:	2301      	movs	r3, #1
 8007540:	e06c      	b.n	800761c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	699a      	ldr	r2, [r3, #24]
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	6a1b      	ldr	r3, [r3, #32]
 800754a:	1ad3      	subs	r3, r2, r3
 800754c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	68db      	ldr	r3, [r3, #12]
 8007552:	69fa      	ldr	r2, [r7, #28]
 8007554:	429a      	cmp	r2, r3
 8007556:	d902      	bls.n	800755e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	68db      	ldr	r3, [r3, #12]
 800755c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800755e:	69fb      	ldr	r3, [r7, #28]
 8007560:	3303      	adds	r3, #3
 8007562:	089b      	lsrs	r3, r3, #2
 8007564:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007566:	e02b      	b.n	80075c0 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	699a      	ldr	r2, [r3, #24]
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	6a1b      	ldr	r3, [r3, #32]
 8007570:	1ad3      	subs	r3, r2, r3
 8007572:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	68db      	ldr	r3, [r3, #12]
 8007578:	69fa      	ldr	r2, [r7, #28]
 800757a:	429a      	cmp	r2, r3
 800757c:	d902      	bls.n	8007584 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	68db      	ldr	r3, [r3, #12]
 8007582:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8007584:	69fb      	ldr	r3, [r7, #28]
 8007586:	3303      	adds	r3, #3
 8007588:	089b      	lsrs	r3, r3, #2
 800758a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	6919      	ldr	r1, [r3, #16]
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	b2da      	uxtb	r2, r3
 8007594:	69fb      	ldr	r3, [r7, #28]
 8007596:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800759c:	b2db      	uxtb	r3, r3
 800759e:	9300      	str	r3, [sp, #0]
 80075a0:	4603      	mov	r3, r0
 80075a2:	6978      	ldr	r0, [r7, #20]
 80075a4:	f003 feb2 	bl	800b30c <USB_WritePacket>

    ep->xfer_buff  += len;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	691a      	ldr	r2, [r3, #16]
 80075ac:	69fb      	ldr	r3, [r7, #28]
 80075ae:	441a      	add	r2, r3
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	6a1a      	ldr	r2, [r3, #32]
 80075b8:	69fb      	ldr	r3, [r7, #28]
 80075ba:	441a      	add	r2, r3
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	015a      	lsls	r2, r3, #5
 80075c4:	693b      	ldr	r3, [r7, #16]
 80075c6:	4413      	add	r3, r2
 80075c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075cc:	699b      	ldr	r3, [r3, #24]
 80075ce:	b29b      	uxth	r3, r3
 80075d0:	69ba      	ldr	r2, [r7, #24]
 80075d2:	429a      	cmp	r2, r3
 80075d4:	d809      	bhi.n	80075ea <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	6a1a      	ldr	r2, [r3, #32]
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80075de:	429a      	cmp	r2, r3
 80075e0:	d203      	bcs.n	80075ea <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	699b      	ldr	r3, [r3, #24]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d1be      	bne.n	8007568 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	699a      	ldr	r2, [r3, #24]
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	6a1b      	ldr	r3, [r3, #32]
 80075f2:	429a      	cmp	r2, r3
 80075f4:	d811      	bhi.n	800761a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	f003 030f 	and.w	r3, r3, #15
 80075fc:	2201      	movs	r2, #1
 80075fe:	fa02 f303 	lsl.w	r3, r2, r3
 8007602:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007604:	693b      	ldr	r3, [r7, #16]
 8007606:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800760a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800760c:	68bb      	ldr	r3, [r7, #8]
 800760e:	43db      	mvns	r3, r3
 8007610:	6939      	ldr	r1, [r7, #16]
 8007612:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007616:	4013      	ands	r3, r2
 8007618:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800761a:	2300      	movs	r3, #0
}
 800761c:	4618      	mov	r0, r3
 800761e:	3720      	adds	r7, #32
 8007620:	46bd      	mov	sp, r7
 8007622:	bd80      	pop	{r7, pc}

08007624 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b088      	sub	sp, #32
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
 800762c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007634:	69fb      	ldr	r3, [r7, #28]
 8007636:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007638:	69fb      	ldr	r3, [r7, #28]
 800763a:	333c      	adds	r3, #60	; 0x3c
 800763c:	3304      	adds	r3, #4
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	015a      	lsls	r2, r3, #5
 8007646:	69bb      	ldr	r3, [r7, #24]
 8007648:	4413      	add	r3, r2
 800764a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800764e:	689b      	ldr	r3, [r3, #8]
 8007650:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	691b      	ldr	r3, [r3, #16]
 8007656:	2b01      	cmp	r3, #1
 8007658:	d17b      	bne.n	8007752 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800765a:	693b      	ldr	r3, [r7, #16]
 800765c:	f003 0308 	and.w	r3, r3, #8
 8007660:	2b00      	cmp	r3, #0
 8007662:	d015      	beq.n	8007690 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007664:	697b      	ldr	r3, [r7, #20]
 8007666:	4a61      	ldr	r2, [pc, #388]	; (80077ec <PCD_EP_OutXfrComplete_int+0x1c8>)
 8007668:	4293      	cmp	r3, r2
 800766a:	f240 80b9 	bls.w	80077e0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800766e:	693b      	ldr	r3, [r7, #16]
 8007670:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007674:	2b00      	cmp	r3, #0
 8007676:	f000 80b3 	beq.w	80077e0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	015a      	lsls	r2, r3, #5
 800767e:	69bb      	ldr	r3, [r7, #24]
 8007680:	4413      	add	r3, r2
 8007682:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007686:	461a      	mov	r2, r3
 8007688:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800768c:	6093      	str	r3, [r2, #8]
 800768e:	e0a7      	b.n	80077e0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8007690:	693b      	ldr	r3, [r7, #16]
 8007692:	f003 0320 	and.w	r3, r3, #32
 8007696:	2b00      	cmp	r3, #0
 8007698:	d009      	beq.n	80076ae <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	015a      	lsls	r2, r3, #5
 800769e:	69bb      	ldr	r3, [r7, #24]
 80076a0:	4413      	add	r3, r2
 80076a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076a6:	461a      	mov	r2, r3
 80076a8:	2320      	movs	r3, #32
 80076aa:	6093      	str	r3, [r2, #8]
 80076ac:	e098      	b.n	80077e0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80076ae:	693b      	ldr	r3, [r7, #16]
 80076b0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	f040 8093 	bne.w	80077e0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80076ba:	697b      	ldr	r3, [r7, #20]
 80076bc:	4a4b      	ldr	r2, [pc, #300]	; (80077ec <PCD_EP_OutXfrComplete_int+0x1c8>)
 80076be:	4293      	cmp	r3, r2
 80076c0:	d90f      	bls.n	80076e2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80076c2:	693b      	ldr	r3, [r7, #16]
 80076c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d00a      	beq.n	80076e2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	015a      	lsls	r2, r3, #5
 80076d0:	69bb      	ldr	r3, [r7, #24]
 80076d2:	4413      	add	r3, r2
 80076d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076d8:	461a      	mov	r2, r3
 80076da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80076de:	6093      	str	r3, [r2, #8]
 80076e0:	e07e      	b.n	80077e0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80076e2:	683a      	ldr	r2, [r7, #0]
 80076e4:	4613      	mov	r3, r2
 80076e6:	00db      	lsls	r3, r3, #3
 80076e8:	4413      	add	r3, r2
 80076ea:	009b      	lsls	r3, r3, #2
 80076ec:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80076f0:	687a      	ldr	r2, [r7, #4]
 80076f2:	4413      	add	r3, r2
 80076f4:	3304      	adds	r3, #4
 80076f6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	69da      	ldr	r2, [r3, #28]
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	0159      	lsls	r1, r3, #5
 8007700:	69bb      	ldr	r3, [r7, #24]
 8007702:	440b      	add	r3, r1
 8007704:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007708:	691b      	ldr	r3, [r3, #16]
 800770a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800770e:	1ad2      	subs	r2, r2, r3
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d114      	bne.n	8007744 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	699b      	ldr	r3, [r3, #24]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d109      	bne.n	8007736 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6818      	ldr	r0, [r3, #0]
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800772c:	461a      	mov	r2, r3
 800772e:	2101      	movs	r1, #1
 8007730:	f004 f882 	bl	800b838 <USB_EP0_OutStart>
 8007734:	e006      	b.n	8007744 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	691a      	ldr	r2, [r3, #16]
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	6a1b      	ldr	r3, [r3, #32]
 800773e:	441a      	add	r2, r3
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	b2db      	uxtb	r3, r3
 8007748:	4619      	mov	r1, r3
 800774a:	6878      	ldr	r0, [r7, #4]
 800774c:	f006 f8ae 	bl	800d8ac <HAL_PCD_DataOutStageCallback>
 8007750:	e046      	b.n	80077e0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8007752:	697b      	ldr	r3, [r7, #20]
 8007754:	4a26      	ldr	r2, [pc, #152]	; (80077f0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8007756:	4293      	cmp	r3, r2
 8007758:	d124      	bne.n	80077a4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800775a:	693b      	ldr	r3, [r7, #16]
 800775c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007760:	2b00      	cmp	r3, #0
 8007762:	d00a      	beq.n	800777a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	015a      	lsls	r2, r3, #5
 8007768:	69bb      	ldr	r3, [r7, #24]
 800776a:	4413      	add	r3, r2
 800776c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007770:	461a      	mov	r2, r3
 8007772:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007776:	6093      	str	r3, [r2, #8]
 8007778:	e032      	b.n	80077e0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800777a:	693b      	ldr	r3, [r7, #16]
 800777c:	f003 0320 	and.w	r3, r3, #32
 8007780:	2b00      	cmp	r3, #0
 8007782:	d008      	beq.n	8007796 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	015a      	lsls	r2, r3, #5
 8007788:	69bb      	ldr	r3, [r7, #24]
 800778a:	4413      	add	r3, r2
 800778c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007790:	461a      	mov	r2, r3
 8007792:	2320      	movs	r3, #32
 8007794:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007796:	683b      	ldr	r3, [r7, #0]
 8007798:	b2db      	uxtb	r3, r3
 800779a:	4619      	mov	r1, r3
 800779c:	6878      	ldr	r0, [r7, #4]
 800779e:	f006 f885 	bl	800d8ac <HAL_PCD_DataOutStageCallback>
 80077a2:	e01d      	b.n	80077e0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d114      	bne.n	80077d4 <PCD_EP_OutXfrComplete_int+0x1b0>
 80077aa:	6879      	ldr	r1, [r7, #4]
 80077ac:	683a      	ldr	r2, [r7, #0]
 80077ae:	4613      	mov	r3, r2
 80077b0:	00db      	lsls	r3, r3, #3
 80077b2:	4413      	add	r3, r2
 80077b4:	009b      	lsls	r3, r3, #2
 80077b6:	440b      	add	r3, r1
 80077b8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d108      	bne.n	80077d4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6818      	ldr	r0, [r3, #0]
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80077cc:	461a      	mov	r2, r3
 80077ce:	2100      	movs	r1, #0
 80077d0:	f004 f832 	bl	800b838 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	b2db      	uxtb	r3, r3
 80077d8:	4619      	mov	r1, r3
 80077da:	6878      	ldr	r0, [r7, #4]
 80077dc:	f006 f866 	bl	800d8ac <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80077e0:	2300      	movs	r3, #0
}
 80077e2:	4618      	mov	r0, r3
 80077e4:	3720      	adds	r7, #32
 80077e6:	46bd      	mov	sp, r7
 80077e8:	bd80      	pop	{r7, pc}
 80077ea:	bf00      	nop
 80077ec:	4f54300a 	.word	0x4f54300a
 80077f0:	4f54310a 	.word	0x4f54310a

080077f4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b086      	sub	sp, #24
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
 80077fc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007804:	697b      	ldr	r3, [r7, #20]
 8007806:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007808:	697b      	ldr	r3, [r7, #20]
 800780a:	333c      	adds	r3, #60	; 0x3c
 800780c:	3304      	adds	r3, #4
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	015a      	lsls	r2, r3, #5
 8007816:	693b      	ldr	r3, [r7, #16]
 8007818:	4413      	add	r3, r2
 800781a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800781e:	689b      	ldr	r3, [r3, #8]
 8007820:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	4a15      	ldr	r2, [pc, #84]	; (800787c <PCD_EP_OutSetupPacket_int+0x88>)
 8007826:	4293      	cmp	r3, r2
 8007828:	d90e      	bls.n	8007848 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800782a:	68bb      	ldr	r3, [r7, #8]
 800782c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007830:	2b00      	cmp	r3, #0
 8007832:	d009      	beq.n	8007848 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	015a      	lsls	r2, r3, #5
 8007838:	693b      	ldr	r3, [r7, #16]
 800783a:	4413      	add	r3, r2
 800783c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007840:	461a      	mov	r2, r3
 8007842:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007846:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8007848:	6878      	ldr	r0, [r7, #4]
 800784a:	f006 f81d 	bl	800d888 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	4a0a      	ldr	r2, [pc, #40]	; (800787c <PCD_EP_OutSetupPacket_int+0x88>)
 8007852:	4293      	cmp	r3, r2
 8007854:	d90c      	bls.n	8007870 <PCD_EP_OutSetupPacket_int+0x7c>
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	691b      	ldr	r3, [r3, #16]
 800785a:	2b01      	cmp	r3, #1
 800785c:	d108      	bne.n	8007870 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6818      	ldr	r0, [r3, #0]
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007868:	461a      	mov	r2, r3
 800786a:	2101      	movs	r1, #1
 800786c:	f003 ffe4 	bl	800b838 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8007870:	2300      	movs	r3, #0
}
 8007872:	4618      	mov	r0, r3
 8007874:	3718      	adds	r7, #24
 8007876:	46bd      	mov	sp, r7
 8007878:	bd80      	pop	{r7, pc}
 800787a:	bf00      	nop
 800787c:	4f54300a 	.word	0x4f54300a

08007880 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8007880:	b480      	push	{r7}
 8007882:	b085      	sub	sp, #20
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
 8007888:	460b      	mov	r3, r1
 800788a:	70fb      	strb	r3, [r7, #3]
 800788c:	4613      	mov	r3, r2
 800788e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007896:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8007898:	78fb      	ldrb	r3, [r7, #3]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d107      	bne.n	80078ae <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800789e:	883b      	ldrh	r3, [r7, #0]
 80078a0:	0419      	lsls	r1, r3, #16
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	68ba      	ldr	r2, [r7, #8]
 80078a8:	430a      	orrs	r2, r1
 80078aa:	629a      	str	r2, [r3, #40]	; 0x28
 80078ac:	e028      	b.n	8007900 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078b4:	0c1b      	lsrs	r3, r3, #16
 80078b6:	68ba      	ldr	r2, [r7, #8]
 80078b8:	4413      	add	r3, r2
 80078ba:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80078bc:	2300      	movs	r3, #0
 80078be:	73fb      	strb	r3, [r7, #15]
 80078c0:	e00d      	b.n	80078de <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681a      	ldr	r2, [r3, #0]
 80078c6:	7bfb      	ldrb	r3, [r7, #15]
 80078c8:	3340      	adds	r3, #64	; 0x40
 80078ca:	009b      	lsls	r3, r3, #2
 80078cc:	4413      	add	r3, r2
 80078ce:	685b      	ldr	r3, [r3, #4]
 80078d0:	0c1b      	lsrs	r3, r3, #16
 80078d2:	68ba      	ldr	r2, [r7, #8]
 80078d4:	4413      	add	r3, r2
 80078d6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80078d8:	7bfb      	ldrb	r3, [r7, #15]
 80078da:	3301      	adds	r3, #1
 80078dc:	73fb      	strb	r3, [r7, #15]
 80078de:	7bfa      	ldrb	r2, [r7, #15]
 80078e0:	78fb      	ldrb	r3, [r7, #3]
 80078e2:	3b01      	subs	r3, #1
 80078e4:	429a      	cmp	r2, r3
 80078e6:	d3ec      	bcc.n	80078c2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80078e8:	883b      	ldrh	r3, [r7, #0]
 80078ea:	0418      	lsls	r0, r3, #16
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	6819      	ldr	r1, [r3, #0]
 80078f0:	78fb      	ldrb	r3, [r7, #3]
 80078f2:	3b01      	subs	r3, #1
 80078f4:	68ba      	ldr	r2, [r7, #8]
 80078f6:	4302      	orrs	r2, r0
 80078f8:	3340      	adds	r3, #64	; 0x40
 80078fa:	009b      	lsls	r3, r3, #2
 80078fc:	440b      	add	r3, r1
 80078fe:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8007900:	2300      	movs	r3, #0
}
 8007902:	4618      	mov	r0, r3
 8007904:	3714      	adds	r7, #20
 8007906:	46bd      	mov	sp, r7
 8007908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790c:	4770      	bx	lr

0800790e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800790e:	b480      	push	{r7}
 8007910:	b083      	sub	sp, #12
 8007912:	af00      	add	r7, sp, #0
 8007914:	6078      	str	r0, [r7, #4]
 8007916:	460b      	mov	r3, r1
 8007918:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	887a      	ldrh	r2, [r7, #2]
 8007920:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8007922:	2300      	movs	r3, #0
}
 8007924:	4618      	mov	r0, r3
 8007926:	370c      	adds	r7, #12
 8007928:	46bd      	mov	sp, r7
 800792a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792e:	4770      	bx	lr

08007930 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007930:	b480      	push	{r7}
 8007932:	b083      	sub	sp, #12
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
 8007938:	460b      	mov	r3, r1
 800793a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800793c:	bf00      	nop
 800793e:	370c      	adds	r7, #12
 8007940:	46bd      	mov	sp, r7
 8007942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007946:	4770      	bx	lr

08007948 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b086      	sub	sp, #24
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d101      	bne.n	800795a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007956:	2301      	movs	r3, #1
 8007958:	e267      	b.n	8007e2a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	f003 0301 	and.w	r3, r3, #1
 8007962:	2b00      	cmp	r3, #0
 8007964:	d075      	beq.n	8007a52 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007966:	4b88      	ldr	r3, [pc, #544]	; (8007b88 <HAL_RCC_OscConfig+0x240>)
 8007968:	689b      	ldr	r3, [r3, #8]
 800796a:	f003 030c 	and.w	r3, r3, #12
 800796e:	2b04      	cmp	r3, #4
 8007970:	d00c      	beq.n	800798c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007972:	4b85      	ldr	r3, [pc, #532]	; (8007b88 <HAL_RCC_OscConfig+0x240>)
 8007974:	689b      	ldr	r3, [r3, #8]
 8007976:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800797a:	2b08      	cmp	r3, #8
 800797c:	d112      	bne.n	80079a4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800797e:	4b82      	ldr	r3, [pc, #520]	; (8007b88 <HAL_RCC_OscConfig+0x240>)
 8007980:	685b      	ldr	r3, [r3, #4]
 8007982:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007986:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800798a:	d10b      	bne.n	80079a4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800798c:	4b7e      	ldr	r3, [pc, #504]	; (8007b88 <HAL_RCC_OscConfig+0x240>)
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007994:	2b00      	cmp	r3, #0
 8007996:	d05b      	beq.n	8007a50 <HAL_RCC_OscConfig+0x108>
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	685b      	ldr	r3, [r3, #4]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d157      	bne.n	8007a50 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80079a0:	2301      	movs	r3, #1
 80079a2:	e242      	b.n	8007e2a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	685b      	ldr	r3, [r3, #4]
 80079a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80079ac:	d106      	bne.n	80079bc <HAL_RCC_OscConfig+0x74>
 80079ae:	4b76      	ldr	r3, [pc, #472]	; (8007b88 <HAL_RCC_OscConfig+0x240>)
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	4a75      	ldr	r2, [pc, #468]	; (8007b88 <HAL_RCC_OscConfig+0x240>)
 80079b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80079b8:	6013      	str	r3, [r2, #0]
 80079ba:	e01d      	b.n	80079f8 <HAL_RCC_OscConfig+0xb0>
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	685b      	ldr	r3, [r3, #4]
 80079c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80079c4:	d10c      	bne.n	80079e0 <HAL_RCC_OscConfig+0x98>
 80079c6:	4b70      	ldr	r3, [pc, #448]	; (8007b88 <HAL_RCC_OscConfig+0x240>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	4a6f      	ldr	r2, [pc, #444]	; (8007b88 <HAL_RCC_OscConfig+0x240>)
 80079cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80079d0:	6013      	str	r3, [r2, #0]
 80079d2:	4b6d      	ldr	r3, [pc, #436]	; (8007b88 <HAL_RCC_OscConfig+0x240>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	4a6c      	ldr	r2, [pc, #432]	; (8007b88 <HAL_RCC_OscConfig+0x240>)
 80079d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80079dc:	6013      	str	r3, [r2, #0]
 80079de:	e00b      	b.n	80079f8 <HAL_RCC_OscConfig+0xb0>
 80079e0:	4b69      	ldr	r3, [pc, #420]	; (8007b88 <HAL_RCC_OscConfig+0x240>)
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	4a68      	ldr	r2, [pc, #416]	; (8007b88 <HAL_RCC_OscConfig+0x240>)
 80079e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80079ea:	6013      	str	r3, [r2, #0]
 80079ec:	4b66      	ldr	r3, [pc, #408]	; (8007b88 <HAL_RCC_OscConfig+0x240>)
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	4a65      	ldr	r2, [pc, #404]	; (8007b88 <HAL_RCC_OscConfig+0x240>)
 80079f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80079f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	685b      	ldr	r3, [r3, #4]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d013      	beq.n	8007a28 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a00:	f7fc f8a0 	bl	8003b44 <HAL_GetTick>
 8007a04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007a06:	e008      	b.n	8007a1a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007a08:	f7fc f89c 	bl	8003b44 <HAL_GetTick>
 8007a0c:	4602      	mov	r2, r0
 8007a0e:	693b      	ldr	r3, [r7, #16]
 8007a10:	1ad3      	subs	r3, r2, r3
 8007a12:	2b64      	cmp	r3, #100	; 0x64
 8007a14:	d901      	bls.n	8007a1a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007a16:	2303      	movs	r3, #3
 8007a18:	e207      	b.n	8007e2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007a1a:	4b5b      	ldr	r3, [pc, #364]	; (8007b88 <HAL_RCC_OscConfig+0x240>)
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d0f0      	beq.n	8007a08 <HAL_RCC_OscConfig+0xc0>
 8007a26:	e014      	b.n	8007a52 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a28:	f7fc f88c 	bl	8003b44 <HAL_GetTick>
 8007a2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007a2e:	e008      	b.n	8007a42 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007a30:	f7fc f888 	bl	8003b44 <HAL_GetTick>
 8007a34:	4602      	mov	r2, r0
 8007a36:	693b      	ldr	r3, [r7, #16]
 8007a38:	1ad3      	subs	r3, r2, r3
 8007a3a:	2b64      	cmp	r3, #100	; 0x64
 8007a3c:	d901      	bls.n	8007a42 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007a3e:	2303      	movs	r3, #3
 8007a40:	e1f3      	b.n	8007e2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007a42:	4b51      	ldr	r3, [pc, #324]	; (8007b88 <HAL_RCC_OscConfig+0x240>)
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d1f0      	bne.n	8007a30 <HAL_RCC_OscConfig+0xe8>
 8007a4e:	e000      	b.n	8007a52 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007a50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f003 0302 	and.w	r3, r3, #2
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d063      	beq.n	8007b26 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007a5e:	4b4a      	ldr	r3, [pc, #296]	; (8007b88 <HAL_RCC_OscConfig+0x240>)
 8007a60:	689b      	ldr	r3, [r3, #8]
 8007a62:	f003 030c 	and.w	r3, r3, #12
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d00b      	beq.n	8007a82 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007a6a:	4b47      	ldr	r3, [pc, #284]	; (8007b88 <HAL_RCC_OscConfig+0x240>)
 8007a6c:	689b      	ldr	r3, [r3, #8]
 8007a6e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007a72:	2b08      	cmp	r3, #8
 8007a74:	d11c      	bne.n	8007ab0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007a76:	4b44      	ldr	r3, [pc, #272]	; (8007b88 <HAL_RCC_OscConfig+0x240>)
 8007a78:	685b      	ldr	r3, [r3, #4]
 8007a7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d116      	bne.n	8007ab0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007a82:	4b41      	ldr	r3, [pc, #260]	; (8007b88 <HAL_RCC_OscConfig+0x240>)
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f003 0302 	and.w	r3, r3, #2
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d005      	beq.n	8007a9a <HAL_RCC_OscConfig+0x152>
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	68db      	ldr	r3, [r3, #12]
 8007a92:	2b01      	cmp	r3, #1
 8007a94:	d001      	beq.n	8007a9a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007a96:	2301      	movs	r3, #1
 8007a98:	e1c7      	b.n	8007e2a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007a9a:	4b3b      	ldr	r3, [pc, #236]	; (8007b88 <HAL_RCC_OscConfig+0x240>)
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	691b      	ldr	r3, [r3, #16]
 8007aa6:	00db      	lsls	r3, r3, #3
 8007aa8:	4937      	ldr	r1, [pc, #220]	; (8007b88 <HAL_RCC_OscConfig+0x240>)
 8007aaa:	4313      	orrs	r3, r2
 8007aac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007aae:	e03a      	b.n	8007b26 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	68db      	ldr	r3, [r3, #12]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d020      	beq.n	8007afa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007ab8:	4b34      	ldr	r3, [pc, #208]	; (8007b8c <HAL_RCC_OscConfig+0x244>)
 8007aba:	2201      	movs	r2, #1
 8007abc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007abe:	f7fc f841 	bl	8003b44 <HAL_GetTick>
 8007ac2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007ac4:	e008      	b.n	8007ad8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007ac6:	f7fc f83d 	bl	8003b44 <HAL_GetTick>
 8007aca:	4602      	mov	r2, r0
 8007acc:	693b      	ldr	r3, [r7, #16]
 8007ace:	1ad3      	subs	r3, r2, r3
 8007ad0:	2b02      	cmp	r3, #2
 8007ad2:	d901      	bls.n	8007ad8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007ad4:	2303      	movs	r3, #3
 8007ad6:	e1a8      	b.n	8007e2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007ad8:	4b2b      	ldr	r3, [pc, #172]	; (8007b88 <HAL_RCC_OscConfig+0x240>)
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f003 0302 	and.w	r3, r3, #2
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d0f0      	beq.n	8007ac6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007ae4:	4b28      	ldr	r3, [pc, #160]	; (8007b88 <HAL_RCC_OscConfig+0x240>)
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	691b      	ldr	r3, [r3, #16]
 8007af0:	00db      	lsls	r3, r3, #3
 8007af2:	4925      	ldr	r1, [pc, #148]	; (8007b88 <HAL_RCC_OscConfig+0x240>)
 8007af4:	4313      	orrs	r3, r2
 8007af6:	600b      	str	r3, [r1, #0]
 8007af8:	e015      	b.n	8007b26 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007afa:	4b24      	ldr	r3, [pc, #144]	; (8007b8c <HAL_RCC_OscConfig+0x244>)
 8007afc:	2200      	movs	r2, #0
 8007afe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b00:	f7fc f820 	bl	8003b44 <HAL_GetTick>
 8007b04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007b06:	e008      	b.n	8007b1a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007b08:	f7fc f81c 	bl	8003b44 <HAL_GetTick>
 8007b0c:	4602      	mov	r2, r0
 8007b0e:	693b      	ldr	r3, [r7, #16]
 8007b10:	1ad3      	subs	r3, r2, r3
 8007b12:	2b02      	cmp	r3, #2
 8007b14:	d901      	bls.n	8007b1a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007b16:	2303      	movs	r3, #3
 8007b18:	e187      	b.n	8007e2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007b1a:	4b1b      	ldr	r3, [pc, #108]	; (8007b88 <HAL_RCC_OscConfig+0x240>)
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	f003 0302 	and.w	r3, r3, #2
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d1f0      	bne.n	8007b08 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f003 0308 	and.w	r3, r3, #8
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d036      	beq.n	8007ba0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	695b      	ldr	r3, [r3, #20]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d016      	beq.n	8007b68 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007b3a:	4b15      	ldr	r3, [pc, #84]	; (8007b90 <HAL_RCC_OscConfig+0x248>)
 8007b3c:	2201      	movs	r2, #1
 8007b3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b40:	f7fc f800 	bl	8003b44 <HAL_GetTick>
 8007b44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007b46:	e008      	b.n	8007b5a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007b48:	f7fb fffc 	bl	8003b44 <HAL_GetTick>
 8007b4c:	4602      	mov	r2, r0
 8007b4e:	693b      	ldr	r3, [r7, #16]
 8007b50:	1ad3      	subs	r3, r2, r3
 8007b52:	2b02      	cmp	r3, #2
 8007b54:	d901      	bls.n	8007b5a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007b56:	2303      	movs	r3, #3
 8007b58:	e167      	b.n	8007e2a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007b5a:	4b0b      	ldr	r3, [pc, #44]	; (8007b88 <HAL_RCC_OscConfig+0x240>)
 8007b5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b5e:	f003 0302 	and.w	r3, r3, #2
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d0f0      	beq.n	8007b48 <HAL_RCC_OscConfig+0x200>
 8007b66:	e01b      	b.n	8007ba0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007b68:	4b09      	ldr	r3, [pc, #36]	; (8007b90 <HAL_RCC_OscConfig+0x248>)
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007b6e:	f7fb ffe9 	bl	8003b44 <HAL_GetTick>
 8007b72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007b74:	e00e      	b.n	8007b94 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007b76:	f7fb ffe5 	bl	8003b44 <HAL_GetTick>
 8007b7a:	4602      	mov	r2, r0
 8007b7c:	693b      	ldr	r3, [r7, #16]
 8007b7e:	1ad3      	subs	r3, r2, r3
 8007b80:	2b02      	cmp	r3, #2
 8007b82:	d907      	bls.n	8007b94 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007b84:	2303      	movs	r3, #3
 8007b86:	e150      	b.n	8007e2a <HAL_RCC_OscConfig+0x4e2>
 8007b88:	40023800 	.word	0x40023800
 8007b8c:	42470000 	.word	0x42470000
 8007b90:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007b94:	4b88      	ldr	r3, [pc, #544]	; (8007db8 <HAL_RCC_OscConfig+0x470>)
 8007b96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b98:	f003 0302 	and.w	r3, r3, #2
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d1ea      	bne.n	8007b76 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	f003 0304 	and.w	r3, r3, #4
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	f000 8097 	beq.w	8007cdc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007bae:	2300      	movs	r3, #0
 8007bb0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007bb2:	4b81      	ldr	r3, [pc, #516]	; (8007db8 <HAL_RCC_OscConfig+0x470>)
 8007bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d10f      	bne.n	8007bde <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	60bb      	str	r3, [r7, #8]
 8007bc2:	4b7d      	ldr	r3, [pc, #500]	; (8007db8 <HAL_RCC_OscConfig+0x470>)
 8007bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bc6:	4a7c      	ldr	r2, [pc, #496]	; (8007db8 <HAL_RCC_OscConfig+0x470>)
 8007bc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007bcc:	6413      	str	r3, [r2, #64]	; 0x40
 8007bce:	4b7a      	ldr	r3, [pc, #488]	; (8007db8 <HAL_RCC_OscConfig+0x470>)
 8007bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007bd6:	60bb      	str	r3, [r7, #8]
 8007bd8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007bda:	2301      	movs	r3, #1
 8007bdc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007bde:	4b77      	ldr	r3, [pc, #476]	; (8007dbc <HAL_RCC_OscConfig+0x474>)
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d118      	bne.n	8007c1c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007bea:	4b74      	ldr	r3, [pc, #464]	; (8007dbc <HAL_RCC_OscConfig+0x474>)
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	4a73      	ldr	r2, [pc, #460]	; (8007dbc <HAL_RCC_OscConfig+0x474>)
 8007bf0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007bf4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007bf6:	f7fb ffa5 	bl	8003b44 <HAL_GetTick>
 8007bfa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007bfc:	e008      	b.n	8007c10 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007bfe:	f7fb ffa1 	bl	8003b44 <HAL_GetTick>
 8007c02:	4602      	mov	r2, r0
 8007c04:	693b      	ldr	r3, [r7, #16]
 8007c06:	1ad3      	subs	r3, r2, r3
 8007c08:	2b02      	cmp	r3, #2
 8007c0a:	d901      	bls.n	8007c10 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007c0c:	2303      	movs	r3, #3
 8007c0e:	e10c      	b.n	8007e2a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007c10:	4b6a      	ldr	r3, [pc, #424]	; (8007dbc <HAL_RCC_OscConfig+0x474>)
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d0f0      	beq.n	8007bfe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	689b      	ldr	r3, [r3, #8]
 8007c20:	2b01      	cmp	r3, #1
 8007c22:	d106      	bne.n	8007c32 <HAL_RCC_OscConfig+0x2ea>
 8007c24:	4b64      	ldr	r3, [pc, #400]	; (8007db8 <HAL_RCC_OscConfig+0x470>)
 8007c26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c28:	4a63      	ldr	r2, [pc, #396]	; (8007db8 <HAL_RCC_OscConfig+0x470>)
 8007c2a:	f043 0301 	orr.w	r3, r3, #1
 8007c2e:	6713      	str	r3, [r2, #112]	; 0x70
 8007c30:	e01c      	b.n	8007c6c <HAL_RCC_OscConfig+0x324>
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	689b      	ldr	r3, [r3, #8]
 8007c36:	2b05      	cmp	r3, #5
 8007c38:	d10c      	bne.n	8007c54 <HAL_RCC_OscConfig+0x30c>
 8007c3a:	4b5f      	ldr	r3, [pc, #380]	; (8007db8 <HAL_RCC_OscConfig+0x470>)
 8007c3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c3e:	4a5e      	ldr	r2, [pc, #376]	; (8007db8 <HAL_RCC_OscConfig+0x470>)
 8007c40:	f043 0304 	orr.w	r3, r3, #4
 8007c44:	6713      	str	r3, [r2, #112]	; 0x70
 8007c46:	4b5c      	ldr	r3, [pc, #368]	; (8007db8 <HAL_RCC_OscConfig+0x470>)
 8007c48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c4a:	4a5b      	ldr	r2, [pc, #364]	; (8007db8 <HAL_RCC_OscConfig+0x470>)
 8007c4c:	f043 0301 	orr.w	r3, r3, #1
 8007c50:	6713      	str	r3, [r2, #112]	; 0x70
 8007c52:	e00b      	b.n	8007c6c <HAL_RCC_OscConfig+0x324>
 8007c54:	4b58      	ldr	r3, [pc, #352]	; (8007db8 <HAL_RCC_OscConfig+0x470>)
 8007c56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c58:	4a57      	ldr	r2, [pc, #348]	; (8007db8 <HAL_RCC_OscConfig+0x470>)
 8007c5a:	f023 0301 	bic.w	r3, r3, #1
 8007c5e:	6713      	str	r3, [r2, #112]	; 0x70
 8007c60:	4b55      	ldr	r3, [pc, #340]	; (8007db8 <HAL_RCC_OscConfig+0x470>)
 8007c62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c64:	4a54      	ldr	r2, [pc, #336]	; (8007db8 <HAL_RCC_OscConfig+0x470>)
 8007c66:	f023 0304 	bic.w	r3, r3, #4
 8007c6a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	689b      	ldr	r3, [r3, #8]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d015      	beq.n	8007ca0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c74:	f7fb ff66 	bl	8003b44 <HAL_GetTick>
 8007c78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007c7a:	e00a      	b.n	8007c92 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007c7c:	f7fb ff62 	bl	8003b44 <HAL_GetTick>
 8007c80:	4602      	mov	r2, r0
 8007c82:	693b      	ldr	r3, [r7, #16]
 8007c84:	1ad3      	subs	r3, r2, r3
 8007c86:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c8a:	4293      	cmp	r3, r2
 8007c8c:	d901      	bls.n	8007c92 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007c8e:	2303      	movs	r3, #3
 8007c90:	e0cb      	b.n	8007e2a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007c92:	4b49      	ldr	r3, [pc, #292]	; (8007db8 <HAL_RCC_OscConfig+0x470>)
 8007c94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c96:	f003 0302 	and.w	r3, r3, #2
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d0ee      	beq.n	8007c7c <HAL_RCC_OscConfig+0x334>
 8007c9e:	e014      	b.n	8007cca <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007ca0:	f7fb ff50 	bl	8003b44 <HAL_GetTick>
 8007ca4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007ca6:	e00a      	b.n	8007cbe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007ca8:	f7fb ff4c 	bl	8003b44 <HAL_GetTick>
 8007cac:	4602      	mov	r2, r0
 8007cae:	693b      	ldr	r3, [r7, #16]
 8007cb0:	1ad3      	subs	r3, r2, r3
 8007cb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8007cb6:	4293      	cmp	r3, r2
 8007cb8:	d901      	bls.n	8007cbe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007cba:	2303      	movs	r3, #3
 8007cbc:	e0b5      	b.n	8007e2a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007cbe:	4b3e      	ldr	r3, [pc, #248]	; (8007db8 <HAL_RCC_OscConfig+0x470>)
 8007cc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cc2:	f003 0302 	and.w	r3, r3, #2
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d1ee      	bne.n	8007ca8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007cca:	7dfb      	ldrb	r3, [r7, #23]
 8007ccc:	2b01      	cmp	r3, #1
 8007cce:	d105      	bne.n	8007cdc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007cd0:	4b39      	ldr	r3, [pc, #228]	; (8007db8 <HAL_RCC_OscConfig+0x470>)
 8007cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cd4:	4a38      	ldr	r2, [pc, #224]	; (8007db8 <HAL_RCC_OscConfig+0x470>)
 8007cd6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007cda:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	699b      	ldr	r3, [r3, #24]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	f000 80a1 	beq.w	8007e28 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007ce6:	4b34      	ldr	r3, [pc, #208]	; (8007db8 <HAL_RCC_OscConfig+0x470>)
 8007ce8:	689b      	ldr	r3, [r3, #8]
 8007cea:	f003 030c 	and.w	r3, r3, #12
 8007cee:	2b08      	cmp	r3, #8
 8007cf0:	d05c      	beq.n	8007dac <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	699b      	ldr	r3, [r3, #24]
 8007cf6:	2b02      	cmp	r3, #2
 8007cf8:	d141      	bne.n	8007d7e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007cfa:	4b31      	ldr	r3, [pc, #196]	; (8007dc0 <HAL_RCC_OscConfig+0x478>)
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d00:	f7fb ff20 	bl	8003b44 <HAL_GetTick>
 8007d04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007d06:	e008      	b.n	8007d1a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007d08:	f7fb ff1c 	bl	8003b44 <HAL_GetTick>
 8007d0c:	4602      	mov	r2, r0
 8007d0e:	693b      	ldr	r3, [r7, #16]
 8007d10:	1ad3      	subs	r3, r2, r3
 8007d12:	2b02      	cmp	r3, #2
 8007d14:	d901      	bls.n	8007d1a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007d16:	2303      	movs	r3, #3
 8007d18:	e087      	b.n	8007e2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007d1a:	4b27      	ldr	r3, [pc, #156]	; (8007db8 <HAL_RCC_OscConfig+0x470>)
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d1f0      	bne.n	8007d08 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	69da      	ldr	r2, [r3, #28]
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	6a1b      	ldr	r3, [r3, #32]
 8007d2e:	431a      	orrs	r2, r3
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d34:	019b      	lsls	r3, r3, #6
 8007d36:	431a      	orrs	r2, r3
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d3c:	085b      	lsrs	r3, r3, #1
 8007d3e:	3b01      	subs	r3, #1
 8007d40:	041b      	lsls	r3, r3, #16
 8007d42:	431a      	orrs	r2, r3
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d48:	061b      	lsls	r3, r3, #24
 8007d4a:	491b      	ldr	r1, [pc, #108]	; (8007db8 <HAL_RCC_OscConfig+0x470>)
 8007d4c:	4313      	orrs	r3, r2
 8007d4e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007d50:	4b1b      	ldr	r3, [pc, #108]	; (8007dc0 <HAL_RCC_OscConfig+0x478>)
 8007d52:	2201      	movs	r2, #1
 8007d54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d56:	f7fb fef5 	bl	8003b44 <HAL_GetTick>
 8007d5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007d5c:	e008      	b.n	8007d70 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007d5e:	f7fb fef1 	bl	8003b44 <HAL_GetTick>
 8007d62:	4602      	mov	r2, r0
 8007d64:	693b      	ldr	r3, [r7, #16]
 8007d66:	1ad3      	subs	r3, r2, r3
 8007d68:	2b02      	cmp	r3, #2
 8007d6a:	d901      	bls.n	8007d70 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007d6c:	2303      	movs	r3, #3
 8007d6e:	e05c      	b.n	8007e2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007d70:	4b11      	ldr	r3, [pc, #68]	; (8007db8 <HAL_RCC_OscConfig+0x470>)
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d0f0      	beq.n	8007d5e <HAL_RCC_OscConfig+0x416>
 8007d7c:	e054      	b.n	8007e28 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007d7e:	4b10      	ldr	r3, [pc, #64]	; (8007dc0 <HAL_RCC_OscConfig+0x478>)
 8007d80:	2200      	movs	r2, #0
 8007d82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d84:	f7fb fede 	bl	8003b44 <HAL_GetTick>
 8007d88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007d8a:	e008      	b.n	8007d9e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007d8c:	f7fb feda 	bl	8003b44 <HAL_GetTick>
 8007d90:	4602      	mov	r2, r0
 8007d92:	693b      	ldr	r3, [r7, #16]
 8007d94:	1ad3      	subs	r3, r2, r3
 8007d96:	2b02      	cmp	r3, #2
 8007d98:	d901      	bls.n	8007d9e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007d9a:	2303      	movs	r3, #3
 8007d9c:	e045      	b.n	8007e2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007d9e:	4b06      	ldr	r3, [pc, #24]	; (8007db8 <HAL_RCC_OscConfig+0x470>)
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d1f0      	bne.n	8007d8c <HAL_RCC_OscConfig+0x444>
 8007daa:	e03d      	b.n	8007e28 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	699b      	ldr	r3, [r3, #24]
 8007db0:	2b01      	cmp	r3, #1
 8007db2:	d107      	bne.n	8007dc4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007db4:	2301      	movs	r3, #1
 8007db6:	e038      	b.n	8007e2a <HAL_RCC_OscConfig+0x4e2>
 8007db8:	40023800 	.word	0x40023800
 8007dbc:	40007000 	.word	0x40007000
 8007dc0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007dc4:	4b1b      	ldr	r3, [pc, #108]	; (8007e34 <HAL_RCC_OscConfig+0x4ec>)
 8007dc6:	685b      	ldr	r3, [r3, #4]
 8007dc8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	699b      	ldr	r3, [r3, #24]
 8007dce:	2b01      	cmp	r3, #1
 8007dd0:	d028      	beq.n	8007e24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007ddc:	429a      	cmp	r2, r3
 8007dde:	d121      	bne.n	8007e24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007dea:	429a      	cmp	r2, r3
 8007dec:	d11a      	bne.n	8007e24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007dee:	68fa      	ldr	r2, [r7, #12]
 8007df0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007df4:	4013      	ands	r3, r2
 8007df6:	687a      	ldr	r2, [r7, #4]
 8007df8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007dfa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007dfc:	4293      	cmp	r3, r2
 8007dfe:	d111      	bne.n	8007e24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e0a:	085b      	lsrs	r3, r3, #1
 8007e0c:	3b01      	subs	r3, #1
 8007e0e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007e10:	429a      	cmp	r2, r3
 8007e12:	d107      	bne.n	8007e24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e1e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007e20:	429a      	cmp	r2, r3
 8007e22:	d001      	beq.n	8007e28 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007e24:	2301      	movs	r3, #1
 8007e26:	e000      	b.n	8007e2a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007e28:	2300      	movs	r3, #0
}
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	3718      	adds	r7, #24
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	bd80      	pop	{r7, pc}
 8007e32:	bf00      	nop
 8007e34:	40023800 	.word	0x40023800

08007e38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b084      	sub	sp, #16
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
 8007e40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d101      	bne.n	8007e4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007e48:	2301      	movs	r3, #1
 8007e4a:	e0cc      	b.n	8007fe6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007e4c:	4b68      	ldr	r3, [pc, #416]	; (8007ff0 <HAL_RCC_ClockConfig+0x1b8>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f003 0307 	and.w	r3, r3, #7
 8007e54:	683a      	ldr	r2, [r7, #0]
 8007e56:	429a      	cmp	r2, r3
 8007e58:	d90c      	bls.n	8007e74 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007e5a:	4b65      	ldr	r3, [pc, #404]	; (8007ff0 <HAL_RCC_ClockConfig+0x1b8>)
 8007e5c:	683a      	ldr	r2, [r7, #0]
 8007e5e:	b2d2      	uxtb	r2, r2
 8007e60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007e62:	4b63      	ldr	r3, [pc, #396]	; (8007ff0 <HAL_RCC_ClockConfig+0x1b8>)
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f003 0307 	and.w	r3, r3, #7
 8007e6a:	683a      	ldr	r2, [r7, #0]
 8007e6c:	429a      	cmp	r2, r3
 8007e6e:	d001      	beq.n	8007e74 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007e70:	2301      	movs	r3, #1
 8007e72:	e0b8      	b.n	8007fe6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f003 0302 	and.w	r3, r3, #2
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d020      	beq.n	8007ec2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f003 0304 	and.w	r3, r3, #4
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d005      	beq.n	8007e98 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007e8c:	4b59      	ldr	r3, [pc, #356]	; (8007ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8007e8e:	689b      	ldr	r3, [r3, #8]
 8007e90:	4a58      	ldr	r2, [pc, #352]	; (8007ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8007e92:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007e96:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f003 0308 	and.w	r3, r3, #8
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d005      	beq.n	8007eb0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007ea4:	4b53      	ldr	r3, [pc, #332]	; (8007ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8007ea6:	689b      	ldr	r3, [r3, #8]
 8007ea8:	4a52      	ldr	r2, [pc, #328]	; (8007ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8007eaa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007eae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007eb0:	4b50      	ldr	r3, [pc, #320]	; (8007ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8007eb2:	689b      	ldr	r3, [r3, #8]
 8007eb4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	689b      	ldr	r3, [r3, #8]
 8007ebc:	494d      	ldr	r1, [pc, #308]	; (8007ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8007ebe:	4313      	orrs	r3, r2
 8007ec0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	f003 0301 	and.w	r3, r3, #1
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d044      	beq.n	8007f58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	685b      	ldr	r3, [r3, #4]
 8007ed2:	2b01      	cmp	r3, #1
 8007ed4:	d107      	bne.n	8007ee6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007ed6:	4b47      	ldr	r3, [pc, #284]	; (8007ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d119      	bne.n	8007f16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007ee2:	2301      	movs	r3, #1
 8007ee4:	e07f      	b.n	8007fe6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	685b      	ldr	r3, [r3, #4]
 8007eea:	2b02      	cmp	r3, #2
 8007eec:	d003      	beq.n	8007ef6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007ef2:	2b03      	cmp	r3, #3
 8007ef4:	d107      	bne.n	8007f06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007ef6:	4b3f      	ldr	r3, [pc, #252]	; (8007ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d109      	bne.n	8007f16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007f02:	2301      	movs	r3, #1
 8007f04:	e06f      	b.n	8007fe6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007f06:	4b3b      	ldr	r3, [pc, #236]	; (8007ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f003 0302 	and.w	r3, r3, #2
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d101      	bne.n	8007f16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007f12:	2301      	movs	r3, #1
 8007f14:	e067      	b.n	8007fe6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007f16:	4b37      	ldr	r3, [pc, #220]	; (8007ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8007f18:	689b      	ldr	r3, [r3, #8]
 8007f1a:	f023 0203 	bic.w	r2, r3, #3
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	685b      	ldr	r3, [r3, #4]
 8007f22:	4934      	ldr	r1, [pc, #208]	; (8007ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8007f24:	4313      	orrs	r3, r2
 8007f26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007f28:	f7fb fe0c 	bl	8003b44 <HAL_GetTick>
 8007f2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007f2e:	e00a      	b.n	8007f46 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007f30:	f7fb fe08 	bl	8003b44 <HAL_GetTick>
 8007f34:	4602      	mov	r2, r0
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	1ad3      	subs	r3, r2, r3
 8007f3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f3e:	4293      	cmp	r3, r2
 8007f40:	d901      	bls.n	8007f46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007f42:	2303      	movs	r3, #3
 8007f44:	e04f      	b.n	8007fe6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007f46:	4b2b      	ldr	r3, [pc, #172]	; (8007ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8007f48:	689b      	ldr	r3, [r3, #8]
 8007f4a:	f003 020c 	and.w	r2, r3, #12
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	685b      	ldr	r3, [r3, #4]
 8007f52:	009b      	lsls	r3, r3, #2
 8007f54:	429a      	cmp	r2, r3
 8007f56:	d1eb      	bne.n	8007f30 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007f58:	4b25      	ldr	r3, [pc, #148]	; (8007ff0 <HAL_RCC_ClockConfig+0x1b8>)
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	f003 0307 	and.w	r3, r3, #7
 8007f60:	683a      	ldr	r2, [r7, #0]
 8007f62:	429a      	cmp	r2, r3
 8007f64:	d20c      	bcs.n	8007f80 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007f66:	4b22      	ldr	r3, [pc, #136]	; (8007ff0 <HAL_RCC_ClockConfig+0x1b8>)
 8007f68:	683a      	ldr	r2, [r7, #0]
 8007f6a:	b2d2      	uxtb	r2, r2
 8007f6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007f6e:	4b20      	ldr	r3, [pc, #128]	; (8007ff0 <HAL_RCC_ClockConfig+0x1b8>)
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	f003 0307 	and.w	r3, r3, #7
 8007f76:	683a      	ldr	r2, [r7, #0]
 8007f78:	429a      	cmp	r2, r3
 8007f7a:	d001      	beq.n	8007f80 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007f7c:	2301      	movs	r3, #1
 8007f7e:	e032      	b.n	8007fe6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	f003 0304 	and.w	r3, r3, #4
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d008      	beq.n	8007f9e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007f8c:	4b19      	ldr	r3, [pc, #100]	; (8007ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8007f8e:	689b      	ldr	r3, [r3, #8]
 8007f90:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	68db      	ldr	r3, [r3, #12]
 8007f98:	4916      	ldr	r1, [pc, #88]	; (8007ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8007f9a:	4313      	orrs	r3, r2
 8007f9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f003 0308 	and.w	r3, r3, #8
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d009      	beq.n	8007fbe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007faa:	4b12      	ldr	r3, [pc, #72]	; (8007ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8007fac:	689b      	ldr	r3, [r3, #8]
 8007fae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	691b      	ldr	r3, [r3, #16]
 8007fb6:	00db      	lsls	r3, r3, #3
 8007fb8:	490e      	ldr	r1, [pc, #56]	; (8007ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8007fba:	4313      	orrs	r3, r2
 8007fbc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007fbe:	f000 f821 	bl	8008004 <HAL_RCC_GetSysClockFreq>
 8007fc2:	4602      	mov	r2, r0
 8007fc4:	4b0b      	ldr	r3, [pc, #44]	; (8007ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8007fc6:	689b      	ldr	r3, [r3, #8]
 8007fc8:	091b      	lsrs	r3, r3, #4
 8007fca:	f003 030f 	and.w	r3, r3, #15
 8007fce:	490a      	ldr	r1, [pc, #40]	; (8007ff8 <HAL_RCC_ClockConfig+0x1c0>)
 8007fd0:	5ccb      	ldrb	r3, [r1, r3]
 8007fd2:	fa22 f303 	lsr.w	r3, r2, r3
 8007fd6:	4a09      	ldr	r2, [pc, #36]	; (8007ffc <HAL_RCC_ClockConfig+0x1c4>)
 8007fd8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007fda:	4b09      	ldr	r3, [pc, #36]	; (8008000 <HAL_RCC_ClockConfig+0x1c8>)
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	4618      	mov	r0, r3
 8007fe0:	f7fb fd6c 	bl	8003abc <HAL_InitTick>

  return HAL_OK;
 8007fe4:	2300      	movs	r3, #0
}
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	3710      	adds	r7, #16
 8007fea:	46bd      	mov	sp, r7
 8007fec:	bd80      	pop	{r7, pc}
 8007fee:	bf00      	nop
 8007ff0:	40023c00 	.word	0x40023c00
 8007ff4:	40023800 	.word	0x40023800
 8007ff8:	0800f2b4 	.word	0x0800f2b4
 8007ffc:	20000178 	.word	0x20000178
 8008000:	20000198 	.word	0x20000198

08008004 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008004:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008008:	b090      	sub	sp, #64	; 0x40
 800800a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800800c:	2300      	movs	r3, #0
 800800e:	637b      	str	r3, [r7, #52]	; 0x34
 8008010:	2300      	movs	r3, #0
 8008012:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008014:	2300      	movs	r3, #0
 8008016:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8008018:	2300      	movs	r3, #0
 800801a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800801c:	4b59      	ldr	r3, [pc, #356]	; (8008184 <HAL_RCC_GetSysClockFreq+0x180>)
 800801e:	689b      	ldr	r3, [r3, #8]
 8008020:	f003 030c 	and.w	r3, r3, #12
 8008024:	2b08      	cmp	r3, #8
 8008026:	d00d      	beq.n	8008044 <HAL_RCC_GetSysClockFreq+0x40>
 8008028:	2b08      	cmp	r3, #8
 800802a:	f200 80a1 	bhi.w	8008170 <HAL_RCC_GetSysClockFreq+0x16c>
 800802e:	2b00      	cmp	r3, #0
 8008030:	d002      	beq.n	8008038 <HAL_RCC_GetSysClockFreq+0x34>
 8008032:	2b04      	cmp	r3, #4
 8008034:	d003      	beq.n	800803e <HAL_RCC_GetSysClockFreq+0x3a>
 8008036:	e09b      	b.n	8008170 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008038:	4b53      	ldr	r3, [pc, #332]	; (8008188 <HAL_RCC_GetSysClockFreq+0x184>)
 800803a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800803c:	e09b      	b.n	8008176 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800803e:	4b53      	ldr	r3, [pc, #332]	; (800818c <HAL_RCC_GetSysClockFreq+0x188>)
 8008040:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008042:	e098      	b.n	8008176 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008044:	4b4f      	ldr	r3, [pc, #316]	; (8008184 <HAL_RCC_GetSysClockFreq+0x180>)
 8008046:	685b      	ldr	r3, [r3, #4]
 8008048:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800804c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800804e:	4b4d      	ldr	r3, [pc, #308]	; (8008184 <HAL_RCC_GetSysClockFreq+0x180>)
 8008050:	685b      	ldr	r3, [r3, #4]
 8008052:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008056:	2b00      	cmp	r3, #0
 8008058:	d028      	beq.n	80080ac <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800805a:	4b4a      	ldr	r3, [pc, #296]	; (8008184 <HAL_RCC_GetSysClockFreq+0x180>)
 800805c:	685b      	ldr	r3, [r3, #4]
 800805e:	099b      	lsrs	r3, r3, #6
 8008060:	2200      	movs	r2, #0
 8008062:	623b      	str	r3, [r7, #32]
 8008064:	627a      	str	r2, [r7, #36]	; 0x24
 8008066:	6a3b      	ldr	r3, [r7, #32]
 8008068:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800806c:	2100      	movs	r1, #0
 800806e:	4b47      	ldr	r3, [pc, #284]	; (800818c <HAL_RCC_GetSysClockFreq+0x188>)
 8008070:	fb03 f201 	mul.w	r2, r3, r1
 8008074:	2300      	movs	r3, #0
 8008076:	fb00 f303 	mul.w	r3, r0, r3
 800807a:	4413      	add	r3, r2
 800807c:	4a43      	ldr	r2, [pc, #268]	; (800818c <HAL_RCC_GetSysClockFreq+0x188>)
 800807e:	fba0 1202 	umull	r1, r2, r0, r2
 8008082:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008084:	460a      	mov	r2, r1
 8008086:	62ba      	str	r2, [r7, #40]	; 0x28
 8008088:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800808a:	4413      	add	r3, r2
 800808c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800808e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008090:	2200      	movs	r2, #0
 8008092:	61bb      	str	r3, [r7, #24]
 8008094:	61fa      	str	r2, [r7, #28]
 8008096:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800809a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800809e:	f7f8 f8ef 	bl	8000280 <__aeabi_uldivmod>
 80080a2:	4602      	mov	r2, r0
 80080a4:	460b      	mov	r3, r1
 80080a6:	4613      	mov	r3, r2
 80080a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80080aa:	e053      	b.n	8008154 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80080ac:	4b35      	ldr	r3, [pc, #212]	; (8008184 <HAL_RCC_GetSysClockFreq+0x180>)
 80080ae:	685b      	ldr	r3, [r3, #4]
 80080b0:	099b      	lsrs	r3, r3, #6
 80080b2:	2200      	movs	r2, #0
 80080b4:	613b      	str	r3, [r7, #16]
 80080b6:	617a      	str	r2, [r7, #20]
 80080b8:	693b      	ldr	r3, [r7, #16]
 80080ba:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80080be:	f04f 0b00 	mov.w	fp, #0
 80080c2:	4652      	mov	r2, sl
 80080c4:	465b      	mov	r3, fp
 80080c6:	f04f 0000 	mov.w	r0, #0
 80080ca:	f04f 0100 	mov.w	r1, #0
 80080ce:	0159      	lsls	r1, r3, #5
 80080d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80080d4:	0150      	lsls	r0, r2, #5
 80080d6:	4602      	mov	r2, r0
 80080d8:	460b      	mov	r3, r1
 80080da:	ebb2 080a 	subs.w	r8, r2, sl
 80080de:	eb63 090b 	sbc.w	r9, r3, fp
 80080e2:	f04f 0200 	mov.w	r2, #0
 80080e6:	f04f 0300 	mov.w	r3, #0
 80080ea:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80080ee:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80080f2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80080f6:	ebb2 0408 	subs.w	r4, r2, r8
 80080fa:	eb63 0509 	sbc.w	r5, r3, r9
 80080fe:	f04f 0200 	mov.w	r2, #0
 8008102:	f04f 0300 	mov.w	r3, #0
 8008106:	00eb      	lsls	r3, r5, #3
 8008108:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800810c:	00e2      	lsls	r2, r4, #3
 800810e:	4614      	mov	r4, r2
 8008110:	461d      	mov	r5, r3
 8008112:	eb14 030a 	adds.w	r3, r4, sl
 8008116:	603b      	str	r3, [r7, #0]
 8008118:	eb45 030b 	adc.w	r3, r5, fp
 800811c:	607b      	str	r3, [r7, #4]
 800811e:	f04f 0200 	mov.w	r2, #0
 8008122:	f04f 0300 	mov.w	r3, #0
 8008126:	e9d7 4500 	ldrd	r4, r5, [r7]
 800812a:	4629      	mov	r1, r5
 800812c:	028b      	lsls	r3, r1, #10
 800812e:	4621      	mov	r1, r4
 8008130:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008134:	4621      	mov	r1, r4
 8008136:	028a      	lsls	r2, r1, #10
 8008138:	4610      	mov	r0, r2
 800813a:	4619      	mov	r1, r3
 800813c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800813e:	2200      	movs	r2, #0
 8008140:	60bb      	str	r3, [r7, #8]
 8008142:	60fa      	str	r2, [r7, #12]
 8008144:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008148:	f7f8 f89a 	bl	8000280 <__aeabi_uldivmod>
 800814c:	4602      	mov	r2, r0
 800814e:	460b      	mov	r3, r1
 8008150:	4613      	mov	r3, r2
 8008152:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008154:	4b0b      	ldr	r3, [pc, #44]	; (8008184 <HAL_RCC_GetSysClockFreq+0x180>)
 8008156:	685b      	ldr	r3, [r3, #4]
 8008158:	0c1b      	lsrs	r3, r3, #16
 800815a:	f003 0303 	and.w	r3, r3, #3
 800815e:	3301      	adds	r3, #1
 8008160:	005b      	lsls	r3, r3, #1
 8008162:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8008164:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008168:	fbb2 f3f3 	udiv	r3, r2, r3
 800816c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800816e:	e002      	b.n	8008176 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008170:	4b05      	ldr	r3, [pc, #20]	; (8008188 <HAL_RCC_GetSysClockFreq+0x184>)
 8008172:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008174:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8008178:	4618      	mov	r0, r3
 800817a:	3740      	adds	r7, #64	; 0x40
 800817c:	46bd      	mov	sp, r7
 800817e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008182:	bf00      	nop
 8008184:	40023800 	.word	0x40023800
 8008188:	00f42400 	.word	0x00f42400
 800818c:	017d7840 	.word	0x017d7840

08008190 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008190:	b480      	push	{r7}
 8008192:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008194:	4b03      	ldr	r3, [pc, #12]	; (80081a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8008196:	681b      	ldr	r3, [r3, #0]
}
 8008198:	4618      	mov	r0, r3
 800819a:	46bd      	mov	sp, r7
 800819c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a0:	4770      	bx	lr
 80081a2:	bf00      	nop
 80081a4:	20000178 	.word	0x20000178

080081a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80081ac:	f7ff fff0 	bl	8008190 <HAL_RCC_GetHCLKFreq>
 80081b0:	4602      	mov	r2, r0
 80081b2:	4b05      	ldr	r3, [pc, #20]	; (80081c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80081b4:	689b      	ldr	r3, [r3, #8]
 80081b6:	0a9b      	lsrs	r3, r3, #10
 80081b8:	f003 0307 	and.w	r3, r3, #7
 80081bc:	4903      	ldr	r1, [pc, #12]	; (80081cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80081be:	5ccb      	ldrb	r3, [r1, r3]
 80081c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80081c4:	4618      	mov	r0, r3
 80081c6:	bd80      	pop	{r7, pc}
 80081c8:	40023800 	.word	0x40023800
 80081cc:	0800f2c4 	.word	0x0800f2c4

080081d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b082      	sub	sp, #8
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d101      	bne.n	80081e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80081de:	2301      	movs	r3, #1
 80081e0:	e07b      	b.n	80082da <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d108      	bne.n	80081fc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	685b      	ldr	r3, [r3, #4]
 80081ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80081f2:	d009      	beq.n	8008208 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2200      	movs	r2, #0
 80081f8:	61da      	str	r2, [r3, #28]
 80081fa:	e005      	b.n	8008208 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2200      	movs	r2, #0
 8008200:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	2200      	movs	r2, #0
 8008206:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2200      	movs	r2, #0
 800820c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008214:	b2db      	uxtb	r3, r3
 8008216:	2b00      	cmp	r3, #0
 8008218:	d106      	bne.n	8008228 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2200      	movs	r2, #0
 800821e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008222:	6878      	ldr	r0, [r7, #4]
 8008224:	f7fa fc80 	bl	8002b28 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2202      	movs	r2, #2
 800822c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	681a      	ldr	r2, [r3, #0]
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800823e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	685b      	ldr	r3, [r3, #4]
 8008244:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	689b      	ldr	r3, [r3, #8]
 800824c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008250:	431a      	orrs	r2, r3
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	68db      	ldr	r3, [r3, #12]
 8008256:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800825a:	431a      	orrs	r2, r3
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	691b      	ldr	r3, [r3, #16]
 8008260:	f003 0302 	and.w	r3, r3, #2
 8008264:	431a      	orrs	r2, r3
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	695b      	ldr	r3, [r3, #20]
 800826a:	f003 0301 	and.w	r3, r3, #1
 800826e:	431a      	orrs	r2, r3
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	699b      	ldr	r3, [r3, #24]
 8008274:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008278:	431a      	orrs	r2, r3
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	69db      	ldr	r3, [r3, #28]
 800827e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008282:	431a      	orrs	r2, r3
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	6a1b      	ldr	r3, [r3, #32]
 8008288:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800828c:	ea42 0103 	orr.w	r1, r2, r3
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008294:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	430a      	orrs	r2, r1
 800829e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	699b      	ldr	r3, [r3, #24]
 80082a4:	0c1b      	lsrs	r3, r3, #16
 80082a6:	f003 0104 	and.w	r1, r3, #4
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082ae:	f003 0210 	and.w	r2, r3, #16
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	430a      	orrs	r2, r1
 80082b8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	69da      	ldr	r2, [r3, #28]
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80082c8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	2200      	movs	r2, #0
 80082ce:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2201      	movs	r2, #1
 80082d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80082d8:	2300      	movs	r3, #0
}
 80082da:	4618      	mov	r0, r3
 80082dc:	3708      	adds	r7, #8
 80082de:	46bd      	mov	sp, r7
 80082e0:	bd80      	pop	{r7, pc}

080082e2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80082e2:	b580      	push	{r7, lr}
 80082e4:	b088      	sub	sp, #32
 80082e6:	af00      	add	r7, sp, #0
 80082e8:	60f8      	str	r0, [r7, #12]
 80082ea:	60b9      	str	r1, [r7, #8]
 80082ec:	603b      	str	r3, [r7, #0]
 80082ee:	4613      	mov	r3, r2
 80082f0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80082f2:	2300      	movs	r3, #0
 80082f4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80082fc:	2b01      	cmp	r3, #1
 80082fe:	d101      	bne.n	8008304 <HAL_SPI_Transmit+0x22>
 8008300:	2302      	movs	r3, #2
 8008302:	e126      	b.n	8008552 <HAL_SPI_Transmit+0x270>
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	2201      	movs	r2, #1
 8008308:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800830c:	f7fb fc1a 	bl	8003b44 <HAL_GetTick>
 8008310:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008312:	88fb      	ldrh	r3, [r7, #6]
 8008314:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800831c:	b2db      	uxtb	r3, r3
 800831e:	2b01      	cmp	r3, #1
 8008320:	d002      	beq.n	8008328 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008322:	2302      	movs	r3, #2
 8008324:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008326:	e10b      	b.n	8008540 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8008328:	68bb      	ldr	r3, [r7, #8]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d002      	beq.n	8008334 <HAL_SPI_Transmit+0x52>
 800832e:	88fb      	ldrh	r3, [r7, #6]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d102      	bne.n	800833a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008334:	2301      	movs	r3, #1
 8008336:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008338:	e102      	b.n	8008540 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	2203      	movs	r2, #3
 800833e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	2200      	movs	r2, #0
 8008346:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	68ba      	ldr	r2, [r7, #8]
 800834c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	88fa      	ldrh	r2, [r7, #6]
 8008352:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	88fa      	ldrh	r2, [r7, #6]
 8008358:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	2200      	movs	r2, #0
 800835e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	2200      	movs	r2, #0
 8008364:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	2200      	movs	r2, #0
 800836a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	2200      	movs	r2, #0
 8008370:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	2200      	movs	r2, #0
 8008376:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	689b      	ldr	r3, [r3, #8]
 800837c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008380:	d10f      	bne.n	80083a2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	681a      	ldr	r2, [r3, #0]
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008390:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	681a      	ldr	r2, [r3, #0]
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80083a0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083ac:	2b40      	cmp	r3, #64	; 0x40
 80083ae:	d007      	beq.n	80083c0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	681a      	ldr	r2, [r3, #0]
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80083be:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	68db      	ldr	r3, [r3, #12]
 80083c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80083c8:	d14b      	bne.n	8008462 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	685b      	ldr	r3, [r3, #4]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d002      	beq.n	80083d8 <HAL_SPI_Transmit+0xf6>
 80083d2:	8afb      	ldrh	r3, [r7, #22]
 80083d4:	2b01      	cmp	r3, #1
 80083d6:	d13e      	bne.n	8008456 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083dc:	881a      	ldrh	r2, [r3, #0]
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083e8:	1c9a      	adds	r2, r3, #2
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80083f2:	b29b      	uxth	r3, r3
 80083f4:	3b01      	subs	r3, #1
 80083f6:	b29a      	uxth	r2, r3
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80083fc:	e02b      	b.n	8008456 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	689b      	ldr	r3, [r3, #8]
 8008404:	f003 0302 	and.w	r3, r3, #2
 8008408:	2b02      	cmp	r3, #2
 800840a:	d112      	bne.n	8008432 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008410:	881a      	ldrh	r2, [r3, #0]
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800841c:	1c9a      	adds	r2, r3, #2
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008426:	b29b      	uxth	r3, r3
 8008428:	3b01      	subs	r3, #1
 800842a:	b29a      	uxth	r2, r3
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	86da      	strh	r2, [r3, #54]	; 0x36
 8008430:	e011      	b.n	8008456 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008432:	f7fb fb87 	bl	8003b44 <HAL_GetTick>
 8008436:	4602      	mov	r2, r0
 8008438:	69bb      	ldr	r3, [r7, #24]
 800843a:	1ad3      	subs	r3, r2, r3
 800843c:	683a      	ldr	r2, [r7, #0]
 800843e:	429a      	cmp	r2, r3
 8008440:	d803      	bhi.n	800844a <HAL_SPI_Transmit+0x168>
 8008442:	683b      	ldr	r3, [r7, #0]
 8008444:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008448:	d102      	bne.n	8008450 <HAL_SPI_Transmit+0x16e>
 800844a:	683b      	ldr	r3, [r7, #0]
 800844c:	2b00      	cmp	r3, #0
 800844e:	d102      	bne.n	8008456 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8008450:	2303      	movs	r3, #3
 8008452:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008454:	e074      	b.n	8008540 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800845a:	b29b      	uxth	r3, r3
 800845c:	2b00      	cmp	r3, #0
 800845e:	d1ce      	bne.n	80083fe <HAL_SPI_Transmit+0x11c>
 8008460:	e04c      	b.n	80084fc <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	685b      	ldr	r3, [r3, #4]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d002      	beq.n	8008470 <HAL_SPI_Transmit+0x18e>
 800846a:	8afb      	ldrh	r3, [r7, #22]
 800846c:	2b01      	cmp	r3, #1
 800846e:	d140      	bne.n	80084f2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	330c      	adds	r3, #12
 800847a:	7812      	ldrb	r2, [r2, #0]
 800847c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008482:	1c5a      	adds	r2, r3, #1
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800848c:	b29b      	uxth	r3, r3
 800848e:	3b01      	subs	r3, #1
 8008490:	b29a      	uxth	r2, r3
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8008496:	e02c      	b.n	80084f2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	689b      	ldr	r3, [r3, #8]
 800849e:	f003 0302 	and.w	r3, r3, #2
 80084a2:	2b02      	cmp	r3, #2
 80084a4:	d113      	bne.n	80084ce <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	330c      	adds	r3, #12
 80084b0:	7812      	ldrb	r2, [r2, #0]
 80084b2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084b8:	1c5a      	adds	r2, r3, #1
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80084c2:	b29b      	uxth	r3, r3
 80084c4:	3b01      	subs	r3, #1
 80084c6:	b29a      	uxth	r2, r3
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	86da      	strh	r2, [r3, #54]	; 0x36
 80084cc:	e011      	b.n	80084f2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80084ce:	f7fb fb39 	bl	8003b44 <HAL_GetTick>
 80084d2:	4602      	mov	r2, r0
 80084d4:	69bb      	ldr	r3, [r7, #24]
 80084d6:	1ad3      	subs	r3, r2, r3
 80084d8:	683a      	ldr	r2, [r7, #0]
 80084da:	429a      	cmp	r2, r3
 80084dc:	d803      	bhi.n	80084e6 <HAL_SPI_Transmit+0x204>
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084e4:	d102      	bne.n	80084ec <HAL_SPI_Transmit+0x20a>
 80084e6:	683b      	ldr	r3, [r7, #0]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d102      	bne.n	80084f2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80084ec:	2303      	movs	r3, #3
 80084ee:	77fb      	strb	r3, [r7, #31]
          goto error;
 80084f0:	e026      	b.n	8008540 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80084f6:	b29b      	uxth	r3, r3
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d1cd      	bne.n	8008498 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80084fc:	69ba      	ldr	r2, [r7, #24]
 80084fe:	6839      	ldr	r1, [r7, #0]
 8008500:	68f8      	ldr	r0, [r7, #12]
 8008502:	f000 fbcb 	bl	8008c9c <SPI_EndRxTxTransaction>
 8008506:	4603      	mov	r3, r0
 8008508:	2b00      	cmp	r3, #0
 800850a:	d002      	beq.n	8008512 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	2220      	movs	r2, #32
 8008510:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	689b      	ldr	r3, [r3, #8]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d10a      	bne.n	8008530 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800851a:	2300      	movs	r3, #0
 800851c:	613b      	str	r3, [r7, #16]
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	68db      	ldr	r3, [r3, #12]
 8008524:	613b      	str	r3, [r7, #16]
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	689b      	ldr	r3, [r3, #8]
 800852c:	613b      	str	r3, [r7, #16]
 800852e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008534:	2b00      	cmp	r3, #0
 8008536:	d002      	beq.n	800853e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8008538:	2301      	movs	r3, #1
 800853a:	77fb      	strb	r3, [r7, #31]
 800853c:	e000      	b.n	8008540 <HAL_SPI_Transmit+0x25e>
  }

error:
 800853e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	2201      	movs	r2, #1
 8008544:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	2200      	movs	r2, #0
 800854c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008550:	7ffb      	ldrb	r3, [r7, #31]
}
 8008552:	4618      	mov	r0, r3
 8008554:	3720      	adds	r7, #32
 8008556:	46bd      	mov	sp, r7
 8008558:	bd80      	pop	{r7, pc}

0800855a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800855a:	b580      	push	{r7, lr}
 800855c:	b088      	sub	sp, #32
 800855e:	af02      	add	r7, sp, #8
 8008560:	60f8      	str	r0, [r7, #12]
 8008562:	60b9      	str	r1, [r7, #8]
 8008564:	603b      	str	r3, [r7, #0]
 8008566:	4613      	mov	r3, r2
 8008568:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800856a:	2300      	movs	r3, #0
 800856c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	685b      	ldr	r3, [r3, #4]
 8008572:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008576:	d112      	bne.n	800859e <HAL_SPI_Receive+0x44>
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	689b      	ldr	r3, [r3, #8]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d10e      	bne.n	800859e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	2204      	movs	r2, #4
 8008584:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8008588:	88fa      	ldrh	r2, [r7, #6]
 800858a:	683b      	ldr	r3, [r7, #0]
 800858c:	9300      	str	r3, [sp, #0]
 800858e:	4613      	mov	r3, r2
 8008590:	68ba      	ldr	r2, [r7, #8]
 8008592:	68b9      	ldr	r1, [r7, #8]
 8008594:	68f8      	ldr	r0, [r7, #12]
 8008596:	f000 f8f1 	bl	800877c <HAL_SPI_TransmitReceive>
 800859a:	4603      	mov	r3, r0
 800859c:	e0ea      	b.n	8008774 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80085a4:	2b01      	cmp	r3, #1
 80085a6:	d101      	bne.n	80085ac <HAL_SPI_Receive+0x52>
 80085a8:	2302      	movs	r3, #2
 80085aa:	e0e3      	b.n	8008774 <HAL_SPI_Receive+0x21a>
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	2201      	movs	r2, #1
 80085b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80085b4:	f7fb fac6 	bl	8003b44 <HAL_GetTick>
 80085b8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80085c0:	b2db      	uxtb	r3, r3
 80085c2:	2b01      	cmp	r3, #1
 80085c4:	d002      	beq.n	80085cc <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80085c6:	2302      	movs	r3, #2
 80085c8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80085ca:	e0ca      	b.n	8008762 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80085cc:	68bb      	ldr	r3, [r7, #8]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d002      	beq.n	80085d8 <HAL_SPI_Receive+0x7e>
 80085d2:	88fb      	ldrh	r3, [r7, #6]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d102      	bne.n	80085de <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80085d8:	2301      	movs	r3, #1
 80085da:	75fb      	strb	r3, [r7, #23]
    goto error;
 80085dc:	e0c1      	b.n	8008762 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	2204      	movs	r2, #4
 80085e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	2200      	movs	r2, #0
 80085ea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	68ba      	ldr	r2, [r7, #8]
 80085f0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	88fa      	ldrh	r2, [r7, #6]
 80085f6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	88fa      	ldrh	r2, [r7, #6]
 80085fc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	2200      	movs	r2, #0
 8008602:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	2200      	movs	r2, #0
 8008608:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	2200      	movs	r2, #0
 800860e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	2200      	movs	r2, #0
 8008614:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	2200      	movs	r2, #0
 800861a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	689b      	ldr	r3, [r3, #8]
 8008620:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008624:	d10f      	bne.n	8008646 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	681a      	ldr	r2, [r3, #0]
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008634:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	681a      	ldr	r2, [r3, #0]
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008644:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008650:	2b40      	cmp	r3, #64	; 0x40
 8008652:	d007      	beq.n	8008664 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	681a      	ldr	r2, [r3, #0]
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008662:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	68db      	ldr	r3, [r3, #12]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d162      	bne.n	8008732 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800866c:	e02e      	b.n	80086cc <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	689b      	ldr	r3, [r3, #8]
 8008674:	f003 0301 	and.w	r3, r3, #1
 8008678:	2b01      	cmp	r3, #1
 800867a:	d115      	bne.n	80086a8 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	f103 020c 	add.w	r2, r3, #12
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008688:	7812      	ldrb	r2, [r2, #0]
 800868a:	b2d2      	uxtb	r2, r2
 800868c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008692:	1c5a      	adds	r2, r3, #1
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800869c:	b29b      	uxth	r3, r3
 800869e:	3b01      	subs	r3, #1
 80086a0:	b29a      	uxth	r2, r3
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80086a6:	e011      	b.n	80086cc <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80086a8:	f7fb fa4c 	bl	8003b44 <HAL_GetTick>
 80086ac:	4602      	mov	r2, r0
 80086ae:	693b      	ldr	r3, [r7, #16]
 80086b0:	1ad3      	subs	r3, r2, r3
 80086b2:	683a      	ldr	r2, [r7, #0]
 80086b4:	429a      	cmp	r2, r3
 80086b6:	d803      	bhi.n	80086c0 <HAL_SPI_Receive+0x166>
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086be:	d102      	bne.n	80086c6 <HAL_SPI_Receive+0x16c>
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d102      	bne.n	80086cc <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80086c6:	2303      	movs	r3, #3
 80086c8:	75fb      	strb	r3, [r7, #23]
          goto error;
 80086ca:	e04a      	b.n	8008762 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80086d0:	b29b      	uxth	r3, r3
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d1cb      	bne.n	800866e <HAL_SPI_Receive+0x114>
 80086d6:	e031      	b.n	800873c <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	689b      	ldr	r3, [r3, #8]
 80086de:	f003 0301 	and.w	r3, r3, #1
 80086e2:	2b01      	cmp	r3, #1
 80086e4:	d113      	bne.n	800870e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	68da      	ldr	r2, [r3, #12]
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086f0:	b292      	uxth	r2, r2
 80086f2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086f8:	1c9a      	adds	r2, r3, #2
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008702:	b29b      	uxth	r3, r3
 8008704:	3b01      	subs	r3, #1
 8008706:	b29a      	uxth	r2, r3
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800870c:	e011      	b.n	8008732 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800870e:	f7fb fa19 	bl	8003b44 <HAL_GetTick>
 8008712:	4602      	mov	r2, r0
 8008714:	693b      	ldr	r3, [r7, #16]
 8008716:	1ad3      	subs	r3, r2, r3
 8008718:	683a      	ldr	r2, [r7, #0]
 800871a:	429a      	cmp	r2, r3
 800871c:	d803      	bhi.n	8008726 <HAL_SPI_Receive+0x1cc>
 800871e:	683b      	ldr	r3, [r7, #0]
 8008720:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008724:	d102      	bne.n	800872c <HAL_SPI_Receive+0x1d2>
 8008726:	683b      	ldr	r3, [r7, #0]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d102      	bne.n	8008732 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800872c:	2303      	movs	r3, #3
 800872e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008730:	e017      	b.n	8008762 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008736:	b29b      	uxth	r3, r3
 8008738:	2b00      	cmp	r3, #0
 800873a:	d1cd      	bne.n	80086d8 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800873c:	693a      	ldr	r2, [r7, #16]
 800873e:	6839      	ldr	r1, [r7, #0]
 8008740:	68f8      	ldr	r0, [r7, #12]
 8008742:	f000 fa45 	bl	8008bd0 <SPI_EndRxTransaction>
 8008746:	4603      	mov	r3, r0
 8008748:	2b00      	cmp	r3, #0
 800874a:	d002      	beq.n	8008752 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	2220      	movs	r2, #32
 8008750:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008756:	2b00      	cmp	r3, #0
 8008758:	d002      	beq.n	8008760 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800875a:	2301      	movs	r3, #1
 800875c:	75fb      	strb	r3, [r7, #23]
 800875e:	e000      	b.n	8008762 <HAL_SPI_Receive+0x208>
  }

error :
 8008760:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	2201      	movs	r2, #1
 8008766:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	2200      	movs	r2, #0
 800876e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008772:	7dfb      	ldrb	r3, [r7, #23]
}
 8008774:	4618      	mov	r0, r3
 8008776:	3718      	adds	r7, #24
 8008778:	46bd      	mov	sp, r7
 800877a:	bd80      	pop	{r7, pc}

0800877c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800877c:	b580      	push	{r7, lr}
 800877e:	b08c      	sub	sp, #48	; 0x30
 8008780:	af00      	add	r7, sp, #0
 8008782:	60f8      	str	r0, [r7, #12]
 8008784:	60b9      	str	r1, [r7, #8]
 8008786:	607a      	str	r2, [r7, #4]
 8008788:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800878a:	2301      	movs	r3, #1
 800878c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800878e:	2300      	movs	r3, #0
 8008790:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800879a:	2b01      	cmp	r3, #1
 800879c:	d101      	bne.n	80087a2 <HAL_SPI_TransmitReceive+0x26>
 800879e:	2302      	movs	r3, #2
 80087a0:	e18a      	b.n	8008ab8 <HAL_SPI_TransmitReceive+0x33c>
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	2201      	movs	r2, #1
 80087a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80087aa:	f7fb f9cb 	bl	8003b44 <HAL_GetTick>
 80087ae:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80087b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	685b      	ldr	r3, [r3, #4]
 80087be:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80087c0:	887b      	ldrh	r3, [r7, #2]
 80087c2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80087c4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80087c8:	2b01      	cmp	r3, #1
 80087ca:	d00f      	beq.n	80087ec <HAL_SPI_TransmitReceive+0x70>
 80087cc:	69fb      	ldr	r3, [r7, #28]
 80087ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80087d2:	d107      	bne.n	80087e4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	689b      	ldr	r3, [r3, #8]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d103      	bne.n	80087e4 <HAL_SPI_TransmitReceive+0x68>
 80087dc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80087e0:	2b04      	cmp	r3, #4
 80087e2:	d003      	beq.n	80087ec <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80087e4:	2302      	movs	r3, #2
 80087e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80087ea:	e15b      	b.n	8008aa4 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80087ec:	68bb      	ldr	r3, [r7, #8]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d005      	beq.n	80087fe <HAL_SPI_TransmitReceive+0x82>
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d002      	beq.n	80087fe <HAL_SPI_TransmitReceive+0x82>
 80087f8:	887b      	ldrh	r3, [r7, #2]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d103      	bne.n	8008806 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80087fe:	2301      	movs	r3, #1
 8008800:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008804:	e14e      	b.n	8008aa4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800880c:	b2db      	uxtb	r3, r3
 800880e:	2b04      	cmp	r3, #4
 8008810:	d003      	beq.n	800881a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	2205      	movs	r2, #5
 8008816:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	2200      	movs	r2, #0
 800881e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	687a      	ldr	r2, [r7, #4]
 8008824:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	887a      	ldrh	r2, [r7, #2]
 800882a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	887a      	ldrh	r2, [r7, #2]
 8008830:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	68ba      	ldr	r2, [r7, #8]
 8008836:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	887a      	ldrh	r2, [r7, #2]
 800883c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	887a      	ldrh	r2, [r7, #2]
 8008842:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	2200      	movs	r2, #0
 8008848:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	2200      	movs	r2, #0
 800884e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800885a:	2b40      	cmp	r3, #64	; 0x40
 800885c:	d007      	beq.n	800886e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	681a      	ldr	r2, [r3, #0]
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800886c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	68db      	ldr	r3, [r3, #12]
 8008872:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008876:	d178      	bne.n	800896a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	685b      	ldr	r3, [r3, #4]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d002      	beq.n	8008886 <HAL_SPI_TransmitReceive+0x10a>
 8008880:	8b7b      	ldrh	r3, [r7, #26]
 8008882:	2b01      	cmp	r3, #1
 8008884:	d166      	bne.n	8008954 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800888a:	881a      	ldrh	r2, [r3, #0]
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008896:	1c9a      	adds	r2, r3, #2
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80088a0:	b29b      	uxth	r3, r3
 80088a2:	3b01      	subs	r3, #1
 80088a4:	b29a      	uxth	r2, r3
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80088aa:	e053      	b.n	8008954 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	689b      	ldr	r3, [r3, #8]
 80088b2:	f003 0302 	and.w	r3, r3, #2
 80088b6:	2b02      	cmp	r3, #2
 80088b8:	d11b      	bne.n	80088f2 <HAL_SPI_TransmitReceive+0x176>
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80088be:	b29b      	uxth	r3, r3
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d016      	beq.n	80088f2 <HAL_SPI_TransmitReceive+0x176>
 80088c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088c6:	2b01      	cmp	r3, #1
 80088c8:	d113      	bne.n	80088f2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088ce:	881a      	ldrh	r2, [r3, #0]
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088da:	1c9a      	adds	r2, r3, #2
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80088e4:	b29b      	uxth	r3, r3
 80088e6:	3b01      	subs	r3, #1
 80088e8:	b29a      	uxth	r2, r3
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80088ee:	2300      	movs	r3, #0
 80088f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	689b      	ldr	r3, [r3, #8]
 80088f8:	f003 0301 	and.w	r3, r3, #1
 80088fc:	2b01      	cmp	r3, #1
 80088fe:	d119      	bne.n	8008934 <HAL_SPI_TransmitReceive+0x1b8>
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008904:	b29b      	uxth	r3, r3
 8008906:	2b00      	cmp	r3, #0
 8008908:	d014      	beq.n	8008934 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	68da      	ldr	r2, [r3, #12]
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008914:	b292      	uxth	r2, r2
 8008916:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800891c:	1c9a      	adds	r2, r3, #2
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008926:	b29b      	uxth	r3, r3
 8008928:	3b01      	subs	r3, #1
 800892a:	b29a      	uxth	r2, r3
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008930:	2301      	movs	r3, #1
 8008932:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008934:	f7fb f906 	bl	8003b44 <HAL_GetTick>
 8008938:	4602      	mov	r2, r0
 800893a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800893c:	1ad3      	subs	r3, r2, r3
 800893e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008940:	429a      	cmp	r2, r3
 8008942:	d807      	bhi.n	8008954 <HAL_SPI_TransmitReceive+0x1d8>
 8008944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008946:	f1b3 3fff 	cmp.w	r3, #4294967295
 800894a:	d003      	beq.n	8008954 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800894c:	2303      	movs	r3, #3
 800894e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008952:	e0a7      	b.n	8008aa4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008958:	b29b      	uxth	r3, r3
 800895a:	2b00      	cmp	r3, #0
 800895c:	d1a6      	bne.n	80088ac <HAL_SPI_TransmitReceive+0x130>
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008962:	b29b      	uxth	r3, r3
 8008964:	2b00      	cmp	r3, #0
 8008966:	d1a1      	bne.n	80088ac <HAL_SPI_TransmitReceive+0x130>
 8008968:	e07c      	b.n	8008a64 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	685b      	ldr	r3, [r3, #4]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d002      	beq.n	8008978 <HAL_SPI_TransmitReceive+0x1fc>
 8008972:	8b7b      	ldrh	r3, [r7, #26]
 8008974:	2b01      	cmp	r3, #1
 8008976:	d16b      	bne.n	8008a50 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	330c      	adds	r3, #12
 8008982:	7812      	ldrb	r2, [r2, #0]
 8008984:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800898a:	1c5a      	adds	r2, r3, #1
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008994:	b29b      	uxth	r3, r3
 8008996:	3b01      	subs	r3, #1
 8008998:	b29a      	uxth	r2, r3
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800899e:	e057      	b.n	8008a50 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	689b      	ldr	r3, [r3, #8]
 80089a6:	f003 0302 	and.w	r3, r3, #2
 80089aa:	2b02      	cmp	r3, #2
 80089ac:	d11c      	bne.n	80089e8 <HAL_SPI_TransmitReceive+0x26c>
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80089b2:	b29b      	uxth	r3, r3
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d017      	beq.n	80089e8 <HAL_SPI_TransmitReceive+0x26c>
 80089b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089ba:	2b01      	cmp	r3, #1
 80089bc:	d114      	bne.n	80089e8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	330c      	adds	r3, #12
 80089c8:	7812      	ldrb	r2, [r2, #0]
 80089ca:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089d0:	1c5a      	adds	r2, r3, #1
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80089da:	b29b      	uxth	r3, r3
 80089dc:	3b01      	subs	r3, #1
 80089de:	b29a      	uxth	r2, r3
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80089e4:	2300      	movs	r3, #0
 80089e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	689b      	ldr	r3, [r3, #8]
 80089ee:	f003 0301 	and.w	r3, r3, #1
 80089f2:	2b01      	cmp	r3, #1
 80089f4:	d119      	bne.n	8008a2a <HAL_SPI_TransmitReceive+0x2ae>
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80089fa:	b29b      	uxth	r3, r3
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d014      	beq.n	8008a2a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	68da      	ldr	r2, [r3, #12]
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a0a:	b2d2      	uxtb	r2, r2
 8008a0c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a12:	1c5a      	adds	r2, r3, #1
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008a1c:	b29b      	uxth	r3, r3
 8008a1e:	3b01      	subs	r3, #1
 8008a20:	b29a      	uxth	r2, r3
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008a26:	2301      	movs	r3, #1
 8008a28:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008a2a:	f7fb f88b 	bl	8003b44 <HAL_GetTick>
 8008a2e:	4602      	mov	r2, r0
 8008a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a32:	1ad3      	subs	r3, r2, r3
 8008a34:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008a36:	429a      	cmp	r2, r3
 8008a38:	d803      	bhi.n	8008a42 <HAL_SPI_TransmitReceive+0x2c6>
 8008a3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a40:	d102      	bne.n	8008a48 <HAL_SPI_TransmitReceive+0x2cc>
 8008a42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d103      	bne.n	8008a50 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8008a48:	2303      	movs	r3, #3
 8008a4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008a4e:	e029      	b.n	8008aa4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008a54:	b29b      	uxth	r3, r3
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d1a2      	bne.n	80089a0 <HAL_SPI_TransmitReceive+0x224>
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008a5e:	b29b      	uxth	r3, r3
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d19d      	bne.n	80089a0 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008a64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a66:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008a68:	68f8      	ldr	r0, [r7, #12]
 8008a6a:	f000 f917 	bl	8008c9c <SPI_EndRxTxTransaction>
 8008a6e:	4603      	mov	r3, r0
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d006      	beq.n	8008a82 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8008a74:	2301      	movs	r3, #1
 8008a76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	2220      	movs	r2, #32
 8008a7e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8008a80:	e010      	b.n	8008aa4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	689b      	ldr	r3, [r3, #8]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d10b      	bne.n	8008aa2 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	617b      	str	r3, [r7, #20]
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	68db      	ldr	r3, [r3, #12]
 8008a94:	617b      	str	r3, [r7, #20]
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	689b      	ldr	r3, [r3, #8]
 8008a9c:	617b      	str	r3, [r7, #20]
 8008a9e:	697b      	ldr	r3, [r7, #20]
 8008aa0:	e000      	b.n	8008aa4 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8008aa2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	2201      	movs	r2, #1
 8008aa8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	2200      	movs	r2, #0
 8008ab0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008ab4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8008ab8:	4618      	mov	r0, r3
 8008aba:	3730      	adds	r7, #48	; 0x30
 8008abc:	46bd      	mov	sp, r7
 8008abe:	bd80      	pop	{r7, pc}

08008ac0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	b088      	sub	sp, #32
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	60f8      	str	r0, [r7, #12]
 8008ac8:	60b9      	str	r1, [r7, #8]
 8008aca:	603b      	str	r3, [r7, #0]
 8008acc:	4613      	mov	r3, r2
 8008ace:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008ad0:	f7fb f838 	bl	8003b44 <HAL_GetTick>
 8008ad4:	4602      	mov	r2, r0
 8008ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ad8:	1a9b      	subs	r3, r3, r2
 8008ada:	683a      	ldr	r2, [r7, #0]
 8008adc:	4413      	add	r3, r2
 8008ade:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008ae0:	f7fb f830 	bl	8003b44 <HAL_GetTick>
 8008ae4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008ae6:	4b39      	ldr	r3, [pc, #228]	; (8008bcc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	015b      	lsls	r3, r3, #5
 8008aec:	0d1b      	lsrs	r3, r3, #20
 8008aee:	69fa      	ldr	r2, [r7, #28]
 8008af0:	fb02 f303 	mul.w	r3, r2, r3
 8008af4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008af6:	e054      	b.n	8008ba2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008afe:	d050      	beq.n	8008ba2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008b00:	f7fb f820 	bl	8003b44 <HAL_GetTick>
 8008b04:	4602      	mov	r2, r0
 8008b06:	69bb      	ldr	r3, [r7, #24]
 8008b08:	1ad3      	subs	r3, r2, r3
 8008b0a:	69fa      	ldr	r2, [r7, #28]
 8008b0c:	429a      	cmp	r2, r3
 8008b0e:	d902      	bls.n	8008b16 <SPI_WaitFlagStateUntilTimeout+0x56>
 8008b10:	69fb      	ldr	r3, [r7, #28]
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d13d      	bne.n	8008b92 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	685a      	ldr	r2, [r3, #4]
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008b24:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	685b      	ldr	r3, [r3, #4]
 8008b2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008b2e:	d111      	bne.n	8008b54 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	689b      	ldr	r3, [r3, #8]
 8008b34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008b38:	d004      	beq.n	8008b44 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	689b      	ldr	r3, [r3, #8]
 8008b3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008b42:	d107      	bne.n	8008b54 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	681a      	ldr	r2, [r3, #0]
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008b52:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008b5c:	d10f      	bne.n	8008b7e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	681a      	ldr	r2, [r3, #0]
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008b6c:	601a      	str	r2, [r3, #0]
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	681a      	ldr	r2, [r3, #0]
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008b7c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	2201      	movs	r2, #1
 8008b82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	2200      	movs	r2, #0
 8008b8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8008b8e:	2303      	movs	r3, #3
 8008b90:	e017      	b.n	8008bc2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008b92:	697b      	ldr	r3, [r7, #20]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d101      	bne.n	8008b9c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008b98:	2300      	movs	r3, #0
 8008b9a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008b9c:	697b      	ldr	r3, [r7, #20]
 8008b9e:	3b01      	subs	r3, #1
 8008ba0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	689a      	ldr	r2, [r3, #8]
 8008ba8:	68bb      	ldr	r3, [r7, #8]
 8008baa:	4013      	ands	r3, r2
 8008bac:	68ba      	ldr	r2, [r7, #8]
 8008bae:	429a      	cmp	r2, r3
 8008bb0:	bf0c      	ite	eq
 8008bb2:	2301      	moveq	r3, #1
 8008bb4:	2300      	movne	r3, #0
 8008bb6:	b2db      	uxtb	r3, r3
 8008bb8:	461a      	mov	r2, r3
 8008bba:	79fb      	ldrb	r3, [r7, #7]
 8008bbc:	429a      	cmp	r2, r3
 8008bbe:	d19b      	bne.n	8008af8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008bc0:	2300      	movs	r3, #0
}
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	3720      	adds	r7, #32
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	bd80      	pop	{r7, pc}
 8008bca:	bf00      	nop
 8008bcc:	20000178 	.word	0x20000178

08008bd0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b086      	sub	sp, #24
 8008bd4:	af02      	add	r7, sp, #8
 8008bd6:	60f8      	str	r0, [r7, #12]
 8008bd8:	60b9      	str	r1, [r7, #8]
 8008bda:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	685b      	ldr	r3, [r3, #4]
 8008be0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008be4:	d111      	bne.n	8008c0a <SPI_EndRxTransaction+0x3a>
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	689b      	ldr	r3, [r3, #8]
 8008bea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008bee:	d004      	beq.n	8008bfa <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	689b      	ldr	r3, [r3, #8]
 8008bf4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008bf8:	d107      	bne.n	8008c0a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	681a      	ldr	r2, [r3, #0]
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008c08:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	685b      	ldr	r3, [r3, #4]
 8008c0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008c12:	d12a      	bne.n	8008c6a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	689b      	ldr	r3, [r3, #8]
 8008c18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c1c:	d012      	beq.n	8008c44 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	9300      	str	r3, [sp, #0]
 8008c22:	68bb      	ldr	r3, [r7, #8]
 8008c24:	2200      	movs	r2, #0
 8008c26:	2180      	movs	r1, #128	; 0x80
 8008c28:	68f8      	ldr	r0, [r7, #12]
 8008c2a:	f7ff ff49 	bl	8008ac0 <SPI_WaitFlagStateUntilTimeout>
 8008c2e:	4603      	mov	r3, r0
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d02d      	beq.n	8008c90 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c38:	f043 0220 	orr.w	r2, r3, #32
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008c40:	2303      	movs	r3, #3
 8008c42:	e026      	b.n	8008c92 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	9300      	str	r3, [sp, #0]
 8008c48:	68bb      	ldr	r3, [r7, #8]
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	2101      	movs	r1, #1
 8008c4e:	68f8      	ldr	r0, [r7, #12]
 8008c50:	f7ff ff36 	bl	8008ac0 <SPI_WaitFlagStateUntilTimeout>
 8008c54:	4603      	mov	r3, r0
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d01a      	beq.n	8008c90 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c5e:	f043 0220 	orr.w	r2, r3, #32
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008c66:	2303      	movs	r3, #3
 8008c68:	e013      	b.n	8008c92 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	9300      	str	r3, [sp, #0]
 8008c6e:	68bb      	ldr	r3, [r7, #8]
 8008c70:	2200      	movs	r2, #0
 8008c72:	2101      	movs	r1, #1
 8008c74:	68f8      	ldr	r0, [r7, #12]
 8008c76:	f7ff ff23 	bl	8008ac0 <SPI_WaitFlagStateUntilTimeout>
 8008c7a:	4603      	mov	r3, r0
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d007      	beq.n	8008c90 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c84:	f043 0220 	orr.w	r2, r3, #32
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008c8c:	2303      	movs	r3, #3
 8008c8e:	e000      	b.n	8008c92 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8008c90:	2300      	movs	r3, #0
}
 8008c92:	4618      	mov	r0, r3
 8008c94:	3710      	adds	r7, #16
 8008c96:	46bd      	mov	sp, r7
 8008c98:	bd80      	pop	{r7, pc}
	...

08008c9c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	b088      	sub	sp, #32
 8008ca0:	af02      	add	r7, sp, #8
 8008ca2:	60f8      	str	r0, [r7, #12]
 8008ca4:	60b9      	str	r1, [r7, #8]
 8008ca6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008ca8:	4b1b      	ldr	r3, [pc, #108]	; (8008d18 <SPI_EndRxTxTransaction+0x7c>)
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	4a1b      	ldr	r2, [pc, #108]	; (8008d1c <SPI_EndRxTxTransaction+0x80>)
 8008cae:	fba2 2303 	umull	r2, r3, r2, r3
 8008cb2:	0d5b      	lsrs	r3, r3, #21
 8008cb4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008cb8:	fb02 f303 	mul.w	r3, r2, r3
 8008cbc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	685b      	ldr	r3, [r3, #4]
 8008cc2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008cc6:	d112      	bne.n	8008cee <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	9300      	str	r3, [sp, #0]
 8008ccc:	68bb      	ldr	r3, [r7, #8]
 8008cce:	2200      	movs	r2, #0
 8008cd0:	2180      	movs	r1, #128	; 0x80
 8008cd2:	68f8      	ldr	r0, [r7, #12]
 8008cd4:	f7ff fef4 	bl	8008ac0 <SPI_WaitFlagStateUntilTimeout>
 8008cd8:	4603      	mov	r3, r0
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d016      	beq.n	8008d0c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ce2:	f043 0220 	orr.w	r2, r3, #32
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008cea:	2303      	movs	r3, #3
 8008cec:	e00f      	b.n	8008d0e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008cee:	697b      	ldr	r3, [r7, #20]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d00a      	beq.n	8008d0a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8008cf4:	697b      	ldr	r3, [r7, #20]
 8008cf6:	3b01      	subs	r3, #1
 8008cf8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	689b      	ldr	r3, [r3, #8]
 8008d00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d04:	2b80      	cmp	r3, #128	; 0x80
 8008d06:	d0f2      	beq.n	8008cee <SPI_EndRxTxTransaction+0x52>
 8008d08:	e000      	b.n	8008d0c <SPI_EndRxTxTransaction+0x70>
        break;
 8008d0a:	bf00      	nop
  }

  return HAL_OK;
 8008d0c:	2300      	movs	r3, #0
}
 8008d0e:	4618      	mov	r0, r3
 8008d10:	3718      	adds	r7, #24
 8008d12:	46bd      	mov	sp, r7
 8008d14:	bd80      	pop	{r7, pc}
 8008d16:	bf00      	nop
 8008d18:	20000178 	.word	0x20000178
 8008d1c:	165e9f81 	.word	0x165e9f81

08008d20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008d20:	b580      	push	{r7, lr}
 8008d22:	b082      	sub	sp, #8
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d101      	bne.n	8008d32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008d2e:	2301      	movs	r3, #1
 8008d30:	e041      	b.n	8008db6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d38:	b2db      	uxtb	r3, r3
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d106      	bne.n	8008d4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	2200      	movs	r2, #0
 8008d42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008d46:	6878      	ldr	r0, [r7, #4]
 8008d48:	f7fa f8c0 	bl	8002ecc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	2202      	movs	r2, #2
 8008d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681a      	ldr	r2, [r3, #0]
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	3304      	adds	r3, #4
 8008d5c:	4619      	mov	r1, r3
 8008d5e:	4610      	mov	r0, r2
 8008d60:	f000 fd74 	bl	800984c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	2201      	movs	r2, #1
 8008d68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	2201      	movs	r2, #1
 8008d70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	2201      	movs	r2, #1
 8008d78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	2201      	movs	r2, #1
 8008d80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	2201      	movs	r2, #1
 8008d88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2201      	movs	r2, #1
 8008d90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2201      	movs	r2, #1
 8008d98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	2201      	movs	r2, #1
 8008da0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2201      	movs	r2, #1
 8008da8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	2201      	movs	r2, #1
 8008db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008db4:	2300      	movs	r3, #0
}
 8008db6:	4618      	mov	r0, r3
 8008db8:	3708      	adds	r7, #8
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	bd80      	pop	{r7, pc}

08008dbe <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008dbe:	b580      	push	{r7, lr}
 8008dc0:	b082      	sub	sp, #8
 8008dc2:	af00      	add	r7, sp, #0
 8008dc4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d101      	bne.n	8008dd0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008dcc:	2301      	movs	r3, #1
 8008dce:	e041      	b.n	8008e54 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008dd6:	b2db      	uxtb	r3, r3
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d106      	bne.n	8008dea <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	2200      	movs	r2, #0
 8008de0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008de4:	6878      	ldr	r0, [r7, #4]
 8008de6:	f000 f839 	bl	8008e5c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	2202      	movs	r2, #2
 8008dee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681a      	ldr	r2, [r3, #0]
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	3304      	adds	r3, #4
 8008dfa:	4619      	mov	r1, r3
 8008dfc:	4610      	mov	r0, r2
 8008dfe:	f000 fd25 	bl	800984c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	2201      	movs	r2, #1
 8008e06:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	2201      	movs	r2, #1
 8008e0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	2201      	movs	r2, #1
 8008e16:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	2201      	movs	r2, #1
 8008e1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	2201      	movs	r2, #1
 8008e26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	2201      	movs	r2, #1
 8008e2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	2201      	movs	r2, #1
 8008e36:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	2201      	movs	r2, #1
 8008e3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	2201      	movs	r2, #1
 8008e46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	2201      	movs	r2, #1
 8008e4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008e52:	2300      	movs	r3, #0
}
 8008e54:	4618      	mov	r0, r3
 8008e56:	3708      	adds	r7, #8
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	bd80      	pop	{r7, pc}

08008e5c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008e5c:	b480      	push	{r7}
 8008e5e:	b083      	sub	sp, #12
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008e64:	bf00      	nop
 8008e66:	370c      	adds	r7, #12
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6e:	4770      	bx	lr

08008e70 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b086      	sub	sp, #24
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	60f8      	str	r0, [r7, #12]
 8008e78:	60b9      	str	r1, [r7, #8]
 8008e7a:	607a      	str	r2, [r7, #4]
 8008e7c:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8008e7e:	2300      	movs	r3, #0
 8008e80:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8008e82:	68bb      	ldr	r3, [r7, #8]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d109      	bne.n	8008e9c <HAL_TIM_PWM_Start_DMA+0x2c>
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008e8e:	b2db      	uxtb	r3, r3
 8008e90:	2b02      	cmp	r3, #2
 8008e92:	bf0c      	ite	eq
 8008e94:	2301      	moveq	r3, #1
 8008e96:	2300      	movne	r3, #0
 8008e98:	b2db      	uxtb	r3, r3
 8008e9a:	e022      	b.n	8008ee2 <HAL_TIM_PWM_Start_DMA+0x72>
 8008e9c:	68bb      	ldr	r3, [r7, #8]
 8008e9e:	2b04      	cmp	r3, #4
 8008ea0:	d109      	bne.n	8008eb6 <HAL_TIM_PWM_Start_DMA+0x46>
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008ea8:	b2db      	uxtb	r3, r3
 8008eaa:	2b02      	cmp	r3, #2
 8008eac:	bf0c      	ite	eq
 8008eae:	2301      	moveq	r3, #1
 8008eb0:	2300      	movne	r3, #0
 8008eb2:	b2db      	uxtb	r3, r3
 8008eb4:	e015      	b.n	8008ee2 <HAL_TIM_PWM_Start_DMA+0x72>
 8008eb6:	68bb      	ldr	r3, [r7, #8]
 8008eb8:	2b08      	cmp	r3, #8
 8008eba:	d109      	bne.n	8008ed0 <HAL_TIM_PWM_Start_DMA+0x60>
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008ec2:	b2db      	uxtb	r3, r3
 8008ec4:	2b02      	cmp	r3, #2
 8008ec6:	bf0c      	ite	eq
 8008ec8:	2301      	moveq	r3, #1
 8008eca:	2300      	movne	r3, #0
 8008ecc:	b2db      	uxtb	r3, r3
 8008ece:	e008      	b.n	8008ee2 <HAL_TIM_PWM_Start_DMA+0x72>
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008ed6:	b2db      	uxtb	r3, r3
 8008ed8:	2b02      	cmp	r3, #2
 8008eda:	bf0c      	ite	eq
 8008edc:	2301      	moveq	r3, #1
 8008ede:	2300      	movne	r3, #0
 8008ee0:	b2db      	uxtb	r3, r3
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d001      	beq.n	8008eea <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8008ee6:	2302      	movs	r3, #2
 8008ee8:	e15d      	b.n	80091a6 <HAL_TIM_PWM_Start_DMA+0x336>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8008eea:	68bb      	ldr	r3, [r7, #8]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d109      	bne.n	8008f04 <HAL_TIM_PWM_Start_DMA+0x94>
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008ef6:	b2db      	uxtb	r3, r3
 8008ef8:	2b01      	cmp	r3, #1
 8008efa:	bf0c      	ite	eq
 8008efc:	2301      	moveq	r3, #1
 8008efe:	2300      	movne	r3, #0
 8008f00:	b2db      	uxtb	r3, r3
 8008f02:	e022      	b.n	8008f4a <HAL_TIM_PWM_Start_DMA+0xda>
 8008f04:	68bb      	ldr	r3, [r7, #8]
 8008f06:	2b04      	cmp	r3, #4
 8008f08:	d109      	bne.n	8008f1e <HAL_TIM_PWM_Start_DMA+0xae>
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008f10:	b2db      	uxtb	r3, r3
 8008f12:	2b01      	cmp	r3, #1
 8008f14:	bf0c      	ite	eq
 8008f16:	2301      	moveq	r3, #1
 8008f18:	2300      	movne	r3, #0
 8008f1a:	b2db      	uxtb	r3, r3
 8008f1c:	e015      	b.n	8008f4a <HAL_TIM_PWM_Start_DMA+0xda>
 8008f1e:	68bb      	ldr	r3, [r7, #8]
 8008f20:	2b08      	cmp	r3, #8
 8008f22:	d109      	bne.n	8008f38 <HAL_TIM_PWM_Start_DMA+0xc8>
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008f2a:	b2db      	uxtb	r3, r3
 8008f2c:	2b01      	cmp	r3, #1
 8008f2e:	bf0c      	ite	eq
 8008f30:	2301      	moveq	r3, #1
 8008f32:	2300      	movne	r3, #0
 8008f34:	b2db      	uxtb	r3, r3
 8008f36:	e008      	b.n	8008f4a <HAL_TIM_PWM_Start_DMA+0xda>
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008f3e:	b2db      	uxtb	r3, r3
 8008f40:	2b01      	cmp	r3, #1
 8008f42:	bf0c      	ite	eq
 8008f44:	2301      	moveq	r3, #1
 8008f46:	2300      	movne	r3, #0
 8008f48:	b2db      	uxtb	r3, r3
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d024      	beq.n	8008f98 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d104      	bne.n	8008f5e <HAL_TIM_PWM_Start_DMA+0xee>
 8008f54:	887b      	ldrh	r3, [r7, #2]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d001      	beq.n	8008f5e <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8008f5a:	2301      	movs	r3, #1
 8008f5c:	e123      	b.n	80091a6 <HAL_TIM_PWM_Start_DMA+0x336>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008f5e:	68bb      	ldr	r3, [r7, #8]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d104      	bne.n	8008f6e <HAL_TIM_PWM_Start_DMA+0xfe>
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	2202      	movs	r2, #2
 8008f68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008f6c:	e016      	b.n	8008f9c <HAL_TIM_PWM_Start_DMA+0x12c>
 8008f6e:	68bb      	ldr	r3, [r7, #8]
 8008f70:	2b04      	cmp	r3, #4
 8008f72:	d104      	bne.n	8008f7e <HAL_TIM_PWM_Start_DMA+0x10e>
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	2202      	movs	r2, #2
 8008f78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008f7c:	e00e      	b.n	8008f9c <HAL_TIM_PWM_Start_DMA+0x12c>
 8008f7e:	68bb      	ldr	r3, [r7, #8]
 8008f80:	2b08      	cmp	r3, #8
 8008f82:	d104      	bne.n	8008f8e <HAL_TIM_PWM_Start_DMA+0x11e>
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	2202      	movs	r2, #2
 8008f88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008f8c:	e006      	b.n	8008f9c <HAL_TIM_PWM_Start_DMA+0x12c>
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	2202      	movs	r2, #2
 8008f92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008f96:	e001      	b.n	8008f9c <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8008f98:	2301      	movs	r3, #1
 8008f9a:	e104      	b.n	80091a6 <HAL_TIM_PWM_Start_DMA+0x336>
  }

  switch (Channel)
 8008f9c:	68bb      	ldr	r3, [r7, #8]
 8008f9e:	2b0c      	cmp	r3, #12
 8008fa0:	f200 80ae 	bhi.w	8009100 <HAL_TIM_PWM_Start_DMA+0x290>
 8008fa4:	a201      	add	r2, pc, #4	; (adr r2, 8008fac <HAL_TIM_PWM_Start_DMA+0x13c>)
 8008fa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008faa:	bf00      	nop
 8008fac:	08008fe1 	.word	0x08008fe1
 8008fb0:	08009101 	.word	0x08009101
 8008fb4:	08009101 	.word	0x08009101
 8008fb8:	08009101 	.word	0x08009101
 8008fbc:	08009029 	.word	0x08009029
 8008fc0:	08009101 	.word	0x08009101
 8008fc4:	08009101 	.word	0x08009101
 8008fc8:	08009101 	.word	0x08009101
 8008fcc:	08009071 	.word	0x08009071
 8008fd0:	08009101 	.word	0x08009101
 8008fd4:	08009101 	.word	0x08009101
 8008fd8:	08009101 	.word	0x08009101
 8008fdc:	080090b9 	.word	0x080090b9
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fe4:	4a72      	ldr	r2, [pc, #456]	; (80091b0 <HAL_TIM_PWM_Start_DMA+0x340>)
 8008fe6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fec:	4a71      	ldr	r2, [pc, #452]	; (80091b4 <HAL_TIM_PWM_Start_DMA+0x344>)
 8008fee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ff4:	4a70      	ldr	r2, [pc, #448]	; (80091b8 <HAL_TIM_PWM_Start_DMA+0x348>)
 8008ff6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8008ffc:	6879      	ldr	r1, [r7, #4]
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	3334      	adds	r3, #52	; 0x34
 8009004:	461a      	mov	r2, r3
 8009006:	887b      	ldrh	r3, [r7, #2]
 8009008:	f7fb fc46 	bl	8004898 <HAL_DMA_Start_IT>
 800900c:	4603      	mov	r3, r0
 800900e:	2b00      	cmp	r3, #0
 8009010:	d001      	beq.n	8009016 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8009012:	2301      	movs	r3, #1
 8009014:	e0c7      	b.n	80091a6 <HAL_TIM_PWM_Start_DMA+0x336>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	68da      	ldr	r2, [r3, #12]
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009024:	60da      	str	r2, [r3, #12]
      break;
 8009026:	e06e      	b.n	8009106 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800902c:	4a60      	ldr	r2, [pc, #384]	; (80091b0 <HAL_TIM_PWM_Start_DMA+0x340>)
 800902e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009034:	4a5f      	ldr	r2, [pc, #380]	; (80091b4 <HAL_TIM_PWM_Start_DMA+0x344>)
 8009036:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800903c:	4a5e      	ldr	r2, [pc, #376]	; (80091b8 <HAL_TIM_PWM_Start_DMA+0x348>)
 800903e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8009044:	6879      	ldr	r1, [r7, #4]
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	3338      	adds	r3, #56	; 0x38
 800904c:	461a      	mov	r2, r3
 800904e:	887b      	ldrh	r3, [r7, #2]
 8009050:	f7fb fc22 	bl	8004898 <HAL_DMA_Start_IT>
 8009054:	4603      	mov	r3, r0
 8009056:	2b00      	cmp	r3, #0
 8009058:	d001      	beq.n	800905e <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800905a:	2301      	movs	r3, #1
 800905c:	e0a3      	b.n	80091a6 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	68da      	ldr	r2, [r3, #12]
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800906c:	60da      	str	r2, [r3, #12]
      break;
 800906e:	e04a      	b.n	8009106 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009074:	4a4e      	ldr	r2, [pc, #312]	; (80091b0 <HAL_TIM_PWM_Start_DMA+0x340>)
 8009076:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800907c:	4a4d      	ldr	r2, [pc, #308]	; (80091b4 <HAL_TIM_PWM_Start_DMA+0x344>)
 800907e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009084:	4a4c      	ldr	r2, [pc, #304]	; (80091b8 <HAL_TIM_PWM_Start_DMA+0x348>)
 8009086:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800908c:	6879      	ldr	r1, [r7, #4]
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	333c      	adds	r3, #60	; 0x3c
 8009094:	461a      	mov	r2, r3
 8009096:	887b      	ldrh	r3, [r7, #2]
 8009098:	f7fb fbfe 	bl	8004898 <HAL_DMA_Start_IT>
 800909c:	4603      	mov	r3, r0
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d001      	beq.n	80090a6 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80090a2:	2301      	movs	r3, #1
 80090a4:	e07f      	b.n	80091a6 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	68da      	ldr	r2, [r3, #12]
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80090b4:	60da      	str	r2, [r3, #12]
      break;
 80090b6:	e026      	b.n	8009106 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090bc:	4a3c      	ldr	r2, [pc, #240]	; (80091b0 <HAL_TIM_PWM_Start_DMA+0x340>)
 80090be:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090c4:	4a3b      	ldr	r2, [pc, #236]	; (80091b4 <HAL_TIM_PWM_Start_DMA+0x344>)
 80090c6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090cc:	4a3a      	ldr	r2, [pc, #232]	; (80091b8 <HAL_TIM_PWM_Start_DMA+0x348>)
 80090ce:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80090d4:	6879      	ldr	r1, [r7, #4]
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	3340      	adds	r3, #64	; 0x40
 80090dc:	461a      	mov	r2, r3
 80090de:	887b      	ldrh	r3, [r7, #2]
 80090e0:	f7fb fbda 	bl	8004898 <HAL_DMA_Start_IT>
 80090e4:	4603      	mov	r3, r0
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d001      	beq.n	80090ee <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80090ea:	2301      	movs	r3, #1
 80090ec:	e05b      	b.n	80091a6 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	68da      	ldr	r2, [r3, #12]
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80090fc:	60da      	str	r2, [r3, #12]
      break;
 80090fe:	e002      	b.n	8009106 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8009100:	2301      	movs	r3, #1
 8009102:	75fb      	strb	r3, [r7, #23]
      break;
 8009104:	bf00      	nop
  }

  if (status == HAL_OK)
 8009106:	7dfb      	ldrb	r3, [r7, #23]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d14b      	bne.n	80091a4 <HAL_TIM_PWM_Start_DMA+0x334>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	2201      	movs	r2, #1
 8009112:	68b9      	ldr	r1, [r7, #8]
 8009114:	4618      	mov	r0, r3
 8009116:	f000 fe3f 	bl	8009d98 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	4a27      	ldr	r2, [pc, #156]	; (80091bc <HAL_TIM_PWM_Start_DMA+0x34c>)
 8009120:	4293      	cmp	r3, r2
 8009122:	d107      	bne.n	8009134 <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009132:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	4a20      	ldr	r2, [pc, #128]	; (80091bc <HAL_TIM_PWM_Start_DMA+0x34c>)
 800913a:	4293      	cmp	r3, r2
 800913c:	d018      	beq.n	8009170 <HAL_TIM_PWM_Start_DMA+0x300>
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009146:	d013      	beq.n	8009170 <HAL_TIM_PWM_Start_DMA+0x300>
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	4a1c      	ldr	r2, [pc, #112]	; (80091c0 <HAL_TIM_PWM_Start_DMA+0x350>)
 800914e:	4293      	cmp	r3, r2
 8009150:	d00e      	beq.n	8009170 <HAL_TIM_PWM_Start_DMA+0x300>
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	4a1b      	ldr	r2, [pc, #108]	; (80091c4 <HAL_TIM_PWM_Start_DMA+0x354>)
 8009158:	4293      	cmp	r3, r2
 800915a:	d009      	beq.n	8009170 <HAL_TIM_PWM_Start_DMA+0x300>
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	4a19      	ldr	r2, [pc, #100]	; (80091c8 <HAL_TIM_PWM_Start_DMA+0x358>)
 8009162:	4293      	cmp	r3, r2
 8009164:	d004      	beq.n	8009170 <HAL_TIM_PWM_Start_DMA+0x300>
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	4a18      	ldr	r2, [pc, #96]	; (80091cc <HAL_TIM_PWM_Start_DMA+0x35c>)
 800916c:	4293      	cmp	r3, r2
 800916e:	d111      	bne.n	8009194 <HAL_TIM_PWM_Start_DMA+0x324>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	689b      	ldr	r3, [r3, #8]
 8009176:	f003 0307 	and.w	r3, r3, #7
 800917a:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800917c:	693b      	ldr	r3, [r7, #16]
 800917e:	2b06      	cmp	r3, #6
 8009180:	d010      	beq.n	80091a4 <HAL_TIM_PWM_Start_DMA+0x334>
      {
        __HAL_TIM_ENABLE(htim);
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	681a      	ldr	r2, [r3, #0]
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	f042 0201 	orr.w	r2, r2, #1
 8009190:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009192:	e007      	b.n	80091a4 <HAL_TIM_PWM_Start_DMA+0x334>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	681a      	ldr	r2, [r3, #0]
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	f042 0201 	orr.w	r2, r2, #1
 80091a2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80091a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80091a6:	4618      	mov	r0, r3
 80091a8:	3718      	adds	r7, #24
 80091aa:	46bd      	mov	sp, r7
 80091ac:	bd80      	pop	{r7, pc}
 80091ae:	bf00      	nop
 80091b0:	0800973d 	.word	0x0800973d
 80091b4:	080097e5 	.word	0x080097e5
 80091b8:	080096ab 	.word	0x080096ab
 80091bc:	40010000 	.word	0x40010000
 80091c0:	40000400 	.word	0x40000400
 80091c4:	40000800 	.word	0x40000800
 80091c8:	40000c00 	.word	0x40000c00
 80091cc:	40014000 	.word	0x40014000

080091d0 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b084      	sub	sp, #16
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
 80091d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80091da:	2300      	movs	r3, #0
 80091dc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80091de:	683b      	ldr	r3, [r7, #0]
 80091e0:	2b0c      	cmp	r3, #12
 80091e2:	d855      	bhi.n	8009290 <HAL_TIM_PWM_Stop_DMA+0xc0>
 80091e4:	a201      	add	r2, pc, #4	; (adr r2, 80091ec <HAL_TIM_PWM_Stop_DMA+0x1c>)
 80091e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091ea:	bf00      	nop
 80091ec:	08009221 	.word	0x08009221
 80091f0:	08009291 	.word	0x08009291
 80091f4:	08009291 	.word	0x08009291
 80091f8:	08009291 	.word	0x08009291
 80091fc:	0800923d 	.word	0x0800923d
 8009200:	08009291 	.word	0x08009291
 8009204:	08009291 	.word	0x08009291
 8009208:	08009291 	.word	0x08009291
 800920c:	08009259 	.word	0x08009259
 8009210:	08009291 	.word	0x08009291
 8009214:	08009291 	.word	0x08009291
 8009218:	08009291 	.word	0x08009291
 800921c:	08009275 	.word	0x08009275
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	68da      	ldr	r2, [r3, #12]
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800922e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009234:	4618      	mov	r0, r3
 8009236:	f7fb fbf7 	bl	8004a28 <HAL_DMA_Abort_IT>
      break;
 800923a:	e02c      	b.n	8009296 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	68da      	ldr	r2, [r3, #12]
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800924a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009250:	4618      	mov	r0, r3
 8009252:	f7fb fbe9 	bl	8004a28 <HAL_DMA_Abort_IT>
      break;
 8009256:	e01e      	b.n	8009296 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	68da      	ldr	r2, [r3, #12]
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009266:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800926c:	4618      	mov	r0, r3
 800926e:	f7fb fbdb 	bl	8004a28 <HAL_DMA_Abort_IT>
      break;
 8009272:	e010      	b.n	8009296 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	68da      	ldr	r2, [r3, #12]
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009282:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009288:	4618      	mov	r0, r3
 800928a:	f7fb fbcd 	bl	8004a28 <HAL_DMA_Abort_IT>
      break;
 800928e:	e002      	b.n	8009296 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8009290:	2301      	movs	r3, #1
 8009292:	73fb      	strb	r3, [r7, #15]
      break;
 8009294:	bf00      	nop
  }

  if (status == HAL_OK)
 8009296:	7bfb      	ldrb	r3, [r7, #15]
 8009298:	2b00      	cmp	r3, #0
 800929a:	d157      	bne.n	800934c <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	2200      	movs	r2, #0
 80092a2:	6839      	ldr	r1, [r7, #0]
 80092a4:	4618      	mov	r0, r3
 80092a6:	f000 fd77 	bl	8009d98 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	4a2a      	ldr	r2, [pc, #168]	; (8009358 <HAL_TIM_PWM_Stop_DMA+0x188>)
 80092b0:	4293      	cmp	r3, r2
 80092b2:	d117      	bne.n	80092e4 <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	6a1a      	ldr	r2, [r3, #32]
 80092ba:	f241 1311 	movw	r3, #4369	; 0x1111
 80092be:	4013      	ands	r3, r2
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d10f      	bne.n	80092e4 <HAL_TIM_PWM_Stop_DMA+0x114>
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	6a1a      	ldr	r2, [r3, #32]
 80092ca:	f240 4344 	movw	r3, #1092	; 0x444
 80092ce:	4013      	ands	r3, r2
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d107      	bne.n	80092e4 <HAL_TIM_PWM_Stop_DMA+0x114>
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80092e2:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	6a1a      	ldr	r2, [r3, #32]
 80092ea:	f241 1311 	movw	r3, #4369	; 0x1111
 80092ee:	4013      	ands	r3, r2
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d10f      	bne.n	8009314 <HAL_TIM_PWM_Stop_DMA+0x144>
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	6a1a      	ldr	r2, [r3, #32]
 80092fa:	f240 4344 	movw	r3, #1092	; 0x444
 80092fe:	4013      	ands	r3, r2
 8009300:	2b00      	cmp	r3, #0
 8009302:	d107      	bne.n	8009314 <HAL_TIM_PWM_Stop_DMA+0x144>
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	681a      	ldr	r2, [r3, #0]
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	f022 0201 	bic.w	r2, r2, #1
 8009312:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009314:	683b      	ldr	r3, [r7, #0]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d104      	bne.n	8009324 <HAL_TIM_PWM_Stop_DMA+0x154>
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	2201      	movs	r2, #1
 800931e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009322:	e013      	b.n	800934c <HAL_TIM_PWM_Stop_DMA+0x17c>
 8009324:	683b      	ldr	r3, [r7, #0]
 8009326:	2b04      	cmp	r3, #4
 8009328:	d104      	bne.n	8009334 <HAL_TIM_PWM_Stop_DMA+0x164>
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	2201      	movs	r2, #1
 800932e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009332:	e00b      	b.n	800934c <HAL_TIM_PWM_Stop_DMA+0x17c>
 8009334:	683b      	ldr	r3, [r7, #0]
 8009336:	2b08      	cmp	r3, #8
 8009338:	d104      	bne.n	8009344 <HAL_TIM_PWM_Stop_DMA+0x174>
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	2201      	movs	r2, #1
 800933e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009342:	e003      	b.n	800934c <HAL_TIM_PWM_Stop_DMA+0x17c>
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	2201      	movs	r2, #1
 8009348:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 800934c:	7bfb      	ldrb	r3, [r7, #15]
}
 800934e:	4618      	mov	r0, r3
 8009350:	3710      	adds	r7, #16
 8009352:	46bd      	mov	sp, r7
 8009354:	bd80      	pop	{r7, pc}
 8009356:	bf00      	nop
 8009358:	40010000 	.word	0x40010000

0800935c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800935c:	b580      	push	{r7, lr}
 800935e:	b086      	sub	sp, #24
 8009360:	af00      	add	r7, sp, #0
 8009362:	60f8      	str	r0, [r7, #12]
 8009364:	60b9      	str	r1, [r7, #8]
 8009366:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009368:	2300      	movs	r3, #0
 800936a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009372:	2b01      	cmp	r3, #1
 8009374:	d101      	bne.n	800937a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009376:	2302      	movs	r3, #2
 8009378:	e0ae      	b.n	80094d8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	2201      	movs	r2, #1
 800937e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	2b0c      	cmp	r3, #12
 8009386:	f200 809f 	bhi.w	80094c8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800938a:	a201      	add	r2, pc, #4	; (adr r2, 8009390 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800938c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009390:	080093c5 	.word	0x080093c5
 8009394:	080094c9 	.word	0x080094c9
 8009398:	080094c9 	.word	0x080094c9
 800939c:	080094c9 	.word	0x080094c9
 80093a0:	08009405 	.word	0x08009405
 80093a4:	080094c9 	.word	0x080094c9
 80093a8:	080094c9 	.word	0x080094c9
 80093ac:	080094c9 	.word	0x080094c9
 80093b0:	08009447 	.word	0x08009447
 80093b4:	080094c9 	.word	0x080094c9
 80093b8:	080094c9 	.word	0x080094c9
 80093bc:	080094c9 	.word	0x080094c9
 80093c0:	08009487 	.word	0x08009487
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	68b9      	ldr	r1, [r7, #8]
 80093ca:	4618      	mov	r0, r3
 80093cc:	f000 fabe 	bl	800994c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	699a      	ldr	r2, [r3, #24]
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	f042 0208 	orr.w	r2, r2, #8
 80093de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	699a      	ldr	r2, [r3, #24]
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	f022 0204 	bic.w	r2, r2, #4
 80093ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	6999      	ldr	r1, [r3, #24]
 80093f6:	68bb      	ldr	r3, [r7, #8]
 80093f8:	691a      	ldr	r2, [r3, #16]
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	430a      	orrs	r2, r1
 8009400:	619a      	str	r2, [r3, #24]
      break;
 8009402:	e064      	b.n	80094ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	68b9      	ldr	r1, [r7, #8]
 800940a:	4618      	mov	r0, r3
 800940c:	f000 fb04 	bl	8009a18 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	699a      	ldr	r2, [r3, #24]
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800941e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	699a      	ldr	r2, [r3, #24]
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800942e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	6999      	ldr	r1, [r3, #24]
 8009436:	68bb      	ldr	r3, [r7, #8]
 8009438:	691b      	ldr	r3, [r3, #16]
 800943a:	021a      	lsls	r2, r3, #8
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	430a      	orrs	r2, r1
 8009442:	619a      	str	r2, [r3, #24]
      break;
 8009444:	e043      	b.n	80094ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	68b9      	ldr	r1, [r7, #8]
 800944c:	4618      	mov	r0, r3
 800944e:	f000 fb4f 	bl	8009af0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	69da      	ldr	r2, [r3, #28]
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	f042 0208 	orr.w	r2, r2, #8
 8009460:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	69da      	ldr	r2, [r3, #28]
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	f022 0204 	bic.w	r2, r2, #4
 8009470:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	69d9      	ldr	r1, [r3, #28]
 8009478:	68bb      	ldr	r3, [r7, #8]
 800947a:	691a      	ldr	r2, [r3, #16]
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	430a      	orrs	r2, r1
 8009482:	61da      	str	r2, [r3, #28]
      break;
 8009484:	e023      	b.n	80094ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	68b9      	ldr	r1, [r7, #8]
 800948c:	4618      	mov	r0, r3
 800948e:	f000 fb99 	bl	8009bc4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	69da      	ldr	r2, [r3, #28]
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80094a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	69da      	ldr	r2, [r3, #28]
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80094b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	69d9      	ldr	r1, [r3, #28]
 80094b8:	68bb      	ldr	r3, [r7, #8]
 80094ba:	691b      	ldr	r3, [r3, #16]
 80094bc:	021a      	lsls	r2, r3, #8
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	430a      	orrs	r2, r1
 80094c4:	61da      	str	r2, [r3, #28]
      break;
 80094c6:	e002      	b.n	80094ce <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80094c8:	2301      	movs	r3, #1
 80094ca:	75fb      	strb	r3, [r7, #23]
      break;
 80094cc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	2200      	movs	r2, #0
 80094d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80094d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80094d8:	4618      	mov	r0, r3
 80094da:	3718      	adds	r7, #24
 80094dc:	46bd      	mov	sp, r7
 80094de:	bd80      	pop	{r7, pc}

080094e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80094e0:	b580      	push	{r7, lr}
 80094e2:	b084      	sub	sp, #16
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
 80094e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80094ea:	2300      	movs	r3, #0
 80094ec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80094f4:	2b01      	cmp	r3, #1
 80094f6:	d101      	bne.n	80094fc <HAL_TIM_ConfigClockSource+0x1c>
 80094f8:	2302      	movs	r3, #2
 80094fa:	e0b4      	b.n	8009666 <HAL_TIM_ConfigClockSource+0x186>
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	2201      	movs	r2, #1
 8009500:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	2202      	movs	r2, #2
 8009508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	689b      	ldr	r3, [r3, #8]
 8009512:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009514:	68bb      	ldr	r3, [r7, #8]
 8009516:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800951a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800951c:	68bb      	ldr	r3, [r7, #8]
 800951e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009522:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	68ba      	ldr	r2, [r7, #8]
 800952a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800952c:	683b      	ldr	r3, [r7, #0]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009534:	d03e      	beq.n	80095b4 <HAL_TIM_ConfigClockSource+0xd4>
 8009536:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800953a:	f200 8087 	bhi.w	800964c <HAL_TIM_ConfigClockSource+0x16c>
 800953e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009542:	f000 8086 	beq.w	8009652 <HAL_TIM_ConfigClockSource+0x172>
 8009546:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800954a:	d87f      	bhi.n	800964c <HAL_TIM_ConfigClockSource+0x16c>
 800954c:	2b70      	cmp	r3, #112	; 0x70
 800954e:	d01a      	beq.n	8009586 <HAL_TIM_ConfigClockSource+0xa6>
 8009550:	2b70      	cmp	r3, #112	; 0x70
 8009552:	d87b      	bhi.n	800964c <HAL_TIM_ConfigClockSource+0x16c>
 8009554:	2b60      	cmp	r3, #96	; 0x60
 8009556:	d050      	beq.n	80095fa <HAL_TIM_ConfigClockSource+0x11a>
 8009558:	2b60      	cmp	r3, #96	; 0x60
 800955a:	d877      	bhi.n	800964c <HAL_TIM_ConfigClockSource+0x16c>
 800955c:	2b50      	cmp	r3, #80	; 0x50
 800955e:	d03c      	beq.n	80095da <HAL_TIM_ConfigClockSource+0xfa>
 8009560:	2b50      	cmp	r3, #80	; 0x50
 8009562:	d873      	bhi.n	800964c <HAL_TIM_ConfigClockSource+0x16c>
 8009564:	2b40      	cmp	r3, #64	; 0x40
 8009566:	d058      	beq.n	800961a <HAL_TIM_ConfigClockSource+0x13a>
 8009568:	2b40      	cmp	r3, #64	; 0x40
 800956a:	d86f      	bhi.n	800964c <HAL_TIM_ConfigClockSource+0x16c>
 800956c:	2b30      	cmp	r3, #48	; 0x30
 800956e:	d064      	beq.n	800963a <HAL_TIM_ConfigClockSource+0x15a>
 8009570:	2b30      	cmp	r3, #48	; 0x30
 8009572:	d86b      	bhi.n	800964c <HAL_TIM_ConfigClockSource+0x16c>
 8009574:	2b20      	cmp	r3, #32
 8009576:	d060      	beq.n	800963a <HAL_TIM_ConfigClockSource+0x15a>
 8009578:	2b20      	cmp	r3, #32
 800957a:	d867      	bhi.n	800964c <HAL_TIM_ConfigClockSource+0x16c>
 800957c:	2b00      	cmp	r3, #0
 800957e:	d05c      	beq.n	800963a <HAL_TIM_ConfigClockSource+0x15a>
 8009580:	2b10      	cmp	r3, #16
 8009582:	d05a      	beq.n	800963a <HAL_TIM_ConfigClockSource+0x15a>
 8009584:	e062      	b.n	800964c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	6818      	ldr	r0, [r3, #0]
 800958a:	683b      	ldr	r3, [r7, #0]
 800958c:	6899      	ldr	r1, [r3, #8]
 800958e:	683b      	ldr	r3, [r7, #0]
 8009590:	685a      	ldr	r2, [r3, #4]
 8009592:	683b      	ldr	r3, [r7, #0]
 8009594:	68db      	ldr	r3, [r3, #12]
 8009596:	f000 fbdf 	bl	8009d58 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	689b      	ldr	r3, [r3, #8]
 80095a0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80095a2:	68bb      	ldr	r3, [r7, #8]
 80095a4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80095a8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	68ba      	ldr	r2, [r7, #8]
 80095b0:	609a      	str	r2, [r3, #8]
      break;
 80095b2:	e04f      	b.n	8009654 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	6818      	ldr	r0, [r3, #0]
 80095b8:	683b      	ldr	r3, [r7, #0]
 80095ba:	6899      	ldr	r1, [r3, #8]
 80095bc:	683b      	ldr	r3, [r7, #0]
 80095be:	685a      	ldr	r2, [r3, #4]
 80095c0:	683b      	ldr	r3, [r7, #0]
 80095c2:	68db      	ldr	r3, [r3, #12]
 80095c4:	f000 fbc8 	bl	8009d58 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	689a      	ldr	r2, [r3, #8]
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80095d6:	609a      	str	r2, [r3, #8]
      break;
 80095d8:	e03c      	b.n	8009654 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	6818      	ldr	r0, [r3, #0]
 80095de:	683b      	ldr	r3, [r7, #0]
 80095e0:	6859      	ldr	r1, [r3, #4]
 80095e2:	683b      	ldr	r3, [r7, #0]
 80095e4:	68db      	ldr	r3, [r3, #12]
 80095e6:	461a      	mov	r2, r3
 80095e8:	f000 fb3c 	bl	8009c64 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	2150      	movs	r1, #80	; 0x50
 80095f2:	4618      	mov	r0, r3
 80095f4:	f000 fb95 	bl	8009d22 <TIM_ITRx_SetConfig>
      break;
 80095f8:	e02c      	b.n	8009654 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	6818      	ldr	r0, [r3, #0]
 80095fe:	683b      	ldr	r3, [r7, #0]
 8009600:	6859      	ldr	r1, [r3, #4]
 8009602:	683b      	ldr	r3, [r7, #0]
 8009604:	68db      	ldr	r3, [r3, #12]
 8009606:	461a      	mov	r2, r3
 8009608:	f000 fb5b 	bl	8009cc2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	2160      	movs	r1, #96	; 0x60
 8009612:	4618      	mov	r0, r3
 8009614:	f000 fb85 	bl	8009d22 <TIM_ITRx_SetConfig>
      break;
 8009618:	e01c      	b.n	8009654 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	6818      	ldr	r0, [r3, #0]
 800961e:	683b      	ldr	r3, [r7, #0]
 8009620:	6859      	ldr	r1, [r3, #4]
 8009622:	683b      	ldr	r3, [r7, #0]
 8009624:	68db      	ldr	r3, [r3, #12]
 8009626:	461a      	mov	r2, r3
 8009628:	f000 fb1c 	bl	8009c64 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	2140      	movs	r1, #64	; 0x40
 8009632:	4618      	mov	r0, r3
 8009634:	f000 fb75 	bl	8009d22 <TIM_ITRx_SetConfig>
      break;
 8009638:	e00c      	b.n	8009654 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681a      	ldr	r2, [r3, #0]
 800963e:	683b      	ldr	r3, [r7, #0]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	4619      	mov	r1, r3
 8009644:	4610      	mov	r0, r2
 8009646:	f000 fb6c 	bl	8009d22 <TIM_ITRx_SetConfig>
      break;
 800964a:	e003      	b.n	8009654 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800964c:	2301      	movs	r3, #1
 800964e:	73fb      	strb	r3, [r7, #15]
      break;
 8009650:	e000      	b.n	8009654 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009652:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	2201      	movs	r2, #1
 8009658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	2200      	movs	r2, #0
 8009660:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009664:	7bfb      	ldrb	r3, [r7, #15]
}
 8009666:	4618      	mov	r0, r3
 8009668:	3710      	adds	r7, #16
 800966a:	46bd      	mov	sp, r7
 800966c:	bd80      	pop	{r7, pc}

0800966e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800966e:	b480      	push	{r7}
 8009670:	b083      	sub	sp, #12
 8009672:	af00      	add	r7, sp, #0
 8009674:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009676:	bf00      	nop
 8009678:	370c      	adds	r7, #12
 800967a:	46bd      	mov	sp, r7
 800967c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009680:	4770      	bx	lr

08009682 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009682:	b480      	push	{r7}
 8009684:	b083      	sub	sp, #12
 8009686:	af00      	add	r7, sp, #0
 8009688:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800968a:	bf00      	nop
 800968c:	370c      	adds	r7, #12
 800968e:	46bd      	mov	sp, r7
 8009690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009694:	4770      	bx	lr

08009696 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8009696:	b480      	push	{r7}
 8009698:	b083      	sub	sp, #12
 800969a:	af00      	add	r7, sp, #0
 800969c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800969e:	bf00      	nop
 80096a0:	370c      	adds	r7, #12
 80096a2:	46bd      	mov	sp, r7
 80096a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a8:	4770      	bx	lr

080096aa <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80096aa:	b580      	push	{r7, lr}
 80096ac:	b084      	sub	sp, #16
 80096ae:	af00      	add	r7, sp, #0
 80096b0:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096b6:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096bc:	687a      	ldr	r2, [r7, #4]
 80096be:	429a      	cmp	r2, r3
 80096c0:	d107      	bne.n	80096d2 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	2201      	movs	r2, #1
 80096c6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	2201      	movs	r2, #1
 80096cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80096d0:	e02a      	b.n	8009728 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096d6:	687a      	ldr	r2, [r7, #4]
 80096d8:	429a      	cmp	r2, r3
 80096da:	d107      	bne.n	80096ec <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	2202      	movs	r2, #2
 80096e0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	2201      	movs	r2, #1
 80096e6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80096ea:	e01d      	b.n	8009728 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096f0:	687a      	ldr	r2, [r7, #4]
 80096f2:	429a      	cmp	r2, r3
 80096f4:	d107      	bne.n	8009706 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	2204      	movs	r2, #4
 80096fa:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	2201      	movs	r2, #1
 8009700:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009704:	e010      	b.n	8009728 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800970a:	687a      	ldr	r2, [r7, #4]
 800970c:	429a      	cmp	r2, r3
 800970e:	d107      	bne.n	8009720 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	2208      	movs	r2, #8
 8009714:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	2201      	movs	r2, #1
 800971a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800971e:	e003      	b.n	8009728 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	2201      	movs	r2, #1
 8009724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8009728:	68f8      	ldr	r0, [r7, #12]
 800972a:	f7ff ffb4 	bl	8009696 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	2200      	movs	r2, #0
 8009732:	771a      	strb	r2, [r3, #28]
}
 8009734:	bf00      	nop
 8009736:	3710      	adds	r7, #16
 8009738:	46bd      	mov	sp, r7
 800973a:	bd80      	pop	{r7, pc}

0800973c <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800973c:	b580      	push	{r7, lr}
 800973e:	b084      	sub	sp, #16
 8009740:	af00      	add	r7, sp, #0
 8009742:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009748:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800974e:	687a      	ldr	r2, [r7, #4]
 8009750:	429a      	cmp	r2, r3
 8009752:	d10b      	bne.n	800976c <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	2201      	movs	r2, #1
 8009758:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	69db      	ldr	r3, [r3, #28]
 800975e:	2b00      	cmp	r3, #0
 8009760:	d136      	bne.n	80097d0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	2201      	movs	r2, #1
 8009766:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800976a:	e031      	b.n	80097d0 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009770:	687a      	ldr	r2, [r7, #4]
 8009772:	429a      	cmp	r2, r3
 8009774:	d10b      	bne.n	800978e <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	2202      	movs	r2, #2
 800977a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	69db      	ldr	r3, [r3, #28]
 8009780:	2b00      	cmp	r3, #0
 8009782:	d125      	bne.n	80097d0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	2201      	movs	r2, #1
 8009788:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800978c:	e020      	b.n	80097d0 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009792:	687a      	ldr	r2, [r7, #4]
 8009794:	429a      	cmp	r2, r3
 8009796:	d10b      	bne.n	80097b0 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	2204      	movs	r2, #4
 800979c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	69db      	ldr	r3, [r3, #28]
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d114      	bne.n	80097d0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	2201      	movs	r2, #1
 80097aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80097ae:	e00f      	b.n	80097d0 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097b4:	687a      	ldr	r2, [r7, #4]
 80097b6:	429a      	cmp	r2, r3
 80097b8:	d10a      	bne.n	80097d0 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	2208      	movs	r2, #8
 80097be:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	69db      	ldr	r3, [r3, #28]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d103      	bne.n	80097d0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	2201      	movs	r2, #1
 80097cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80097d0:	68f8      	ldr	r0, [r7, #12]
 80097d2:	f7ff ff4c 	bl	800966e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	2200      	movs	r2, #0
 80097da:	771a      	strb	r2, [r3, #28]
}
 80097dc:	bf00      	nop
 80097de:	3710      	adds	r7, #16
 80097e0:	46bd      	mov	sp, r7
 80097e2:	bd80      	pop	{r7, pc}

080097e4 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b084      	sub	sp, #16
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097f0:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097f6:	687a      	ldr	r2, [r7, #4]
 80097f8:	429a      	cmp	r2, r3
 80097fa:	d103      	bne.n	8009804 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	2201      	movs	r2, #1
 8009800:	771a      	strb	r2, [r3, #28]
 8009802:	e019      	b.n	8009838 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009808:	687a      	ldr	r2, [r7, #4]
 800980a:	429a      	cmp	r2, r3
 800980c:	d103      	bne.n	8009816 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	2202      	movs	r2, #2
 8009812:	771a      	strb	r2, [r3, #28]
 8009814:	e010      	b.n	8009838 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800981a:	687a      	ldr	r2, [r7, #4]
 800981c:	429a      	cmp	r2, r3
 800981e:	d103      	bne.n	8009828 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	2204      	movs	r2, #4
 8009824:	771a      	strb	r2, [r3, #28]
 8009826:	e007      	b.n	8009838 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800982c:	687a      	ldr	r2, [r7, #4]
 800982e:	429a      	cmp	r2, r3
 8009830:	d102      	bne.n	8009838 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	2208      	movs	r2, #8
 8009836:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8009838:	68f8      	ldr	r0, [r7, #12]
 800983a:	f7ff ff22 	bl	8009682 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	2200      	movs	r2, #0
 8009842:	771a      	strb	r2, [r3, #28]
}
 8009844:	bf00      	nop
 8009846:	3710      	adds	r7, #16
 8009848:	46bd      	mov	sp, r7
 800984a:	bd80      	pop	{r7, pc}

0800984c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800984c:	b480      	push	{r7}
 800984e:	b085      	sub	sp, #20
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
 8009854:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	4a34      	ldr	r2, [pc, #208]	; (8009930 <TIM_Base_SetConfig+0xe4>)
 8009860:	4293      	cmp	r3, r2
 8009862:	d00f      	beq.n	8009884 <TIM_Base_SetConfig+0x38>
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800986a:	d00b      	beq.n	8009884 <TIM_Base_SetConfig+0x38>
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	4a31      	ldr	r2, [pc, #196]	; (8009934 <TIM_Base_SetConfig+0xe8>)
 8009870:	4293      	cmp	r3, r2
 8009872:	d007      	beq.n	8009884 <TIM_Base_SetConfig+0x38>
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	4a30      	ldr	r2, [pc, #192]	; (8009938 <TIM_Base_SetConfig+0xec>)
 8009878:	4293      	cmp	r3, r2
 800987a:	d003      	beq.n	8009884 <TIM_Base_SetConfig+0x38>
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	4a2f      	ldr	r2, [pc, #188]	; (800993c <TIM_Base_SetConfig+0xf0>)
 8009880:	4293      	cmp	r3, r2
 8009882:	d108      	bne.n	8009896 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800988a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800988c:	683b      	ldr	r3, [r7, #0]
 800988e:	685b      	ldr	r3, [r3, #4]
 8009890:	68fa      	ldr	r2, [r7, #12]
 8009892:	4313      	orrs	r3, r2
 8009894:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	4a25      	ldr	r2, [pc, #148]	; (8009930 <TIM_Base_SetConfig+0xe4>)
 800989a:	4293      	cmp	r3, r2
 800989c:	d01b      	beq.n	80098d6 <TIM_Base_SetConfig+0x8a>
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80098a4:	d017      	beq.n	80098d6 <TIM_Base_SetConfig+0x8a>
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	4a22      	ldr	r2, [pc, #136]	; (8009934 <TIM_Base_SetConfig+0xe8>)
 80098aa:	4293      	cmp	r3, r2
 80098ac:	d013      	beq.n	80098d6 <TIM_Base_SetConfig+0x8a>
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	4a21      	ldr	r2, [pc, #132]	; (8009938 <TIM_Base_SetConfig+0xec>)
 80098b2:	4293      	cmp	r3, r2
 80098b4:	d00f      	beq.n	80098d6 <TIM_Base_SetConfig+0x8a>
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	4a20      	ldr	r2, [pc, #128]	; (800993c <TIM_Base_SetConfig+0xf0>)
 80098ba:	4293      	cmp	r3, r2
 80098bc:	d00b      	beq.n	80098d6 <TIM_Base_SetConfig+0x8a>
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	4a1f      	ldr	r2, [pc, #124]	; (8009940 <TIM_Base_SetConfig+0xf4>)
 80098c2:	4293      	cmp	r3, r2
 80098c4:	d007      	beq.n	80098d6 <TIM_Base_SetConfig+0x8a>
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	4a1e      	ldr	r2, [pc, #120]	; (8009944 <TIM_Base_SetConfig+0xf8>)
 80098ca:	4293      	cmp	r3, r2
 80098cc:	d003      	beq.n	80098d6 <TIM_Base_SetConfig+0x8a>
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	4a1d      	ldr	r2, [pc, #116]	; (8009948 <TIM_Base_SetConfig+0xfc>)
 80098d2:	4293      	cmp	r3, r2
 80098d4:	d108      	bne.n	80098e8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80098dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80098de:	683b      	ldr	r3, [r7, #0]
 80098e0:	68db      	ldr	r3, [r3, #12]
 80098e2:	68fa      	ldr	r2, [r7, #12]
 80098e4:	4313      	orrs	r3, r2
 80098e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80098ee:	683b      	ldr	r3, [r7, #0]
 80098f0:	695b      	ldr	r3, [r3, #20]
 80098f2:	4313      	orrs	r3, r2
 80098f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	68fa      	ldr	r2, [r7, #12]
 80098fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80098fc:	683b      	ldr	r3, [r7, #0]
 80098fe:	689a      	ldr	r2, [r3, #8]
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009904:	683b      	ldr	r3, [r7, #0]
 8009906:	681a      	ldr	r2, [r3, #0]
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	4a08      	ldr	r2, [pc, #32]	; (8009930 <TIM_Base_SetConfig+0xe4>)
 8009910:	4293      	cmp	r3, r2
 8009912:	d103      	bne.n	800991c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009914:	683b      	ldr	r3, [r7, #0]
 8009916:	691a      	ldr	r2, [r3, #16]
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	2201      	movs	r2, #1
 8009920:	615a      	str	r2, [r3, #20]
}
 8009922:	bf00      	nop
 8009924:	3714      	adds	r7, #20
 8009926:	46bd      	mov	sp, r7
 8009928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992c:	4770      	bx	lr
 800992e:	bf00      	nop
 8009930:	40010000 	.word	0x40010000
 8009934:	40000400 	.word	0x40000400
 8009938:	40000800 	.word	0x40000800
 800993c:	40000c00 	.word	0x40000c00
 8009940:	40014000 	.word	0x40014000
 8009944:	40014400 	.word	0x40014400
 8009948:	40014800 	.word	0x40014800

0800994c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800994c:	b480      	push	{r7}
 800994e:	b087      	sub	sp, #28
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]
 8009954:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	6a1b      	ldr	r3, [r3, #32]
 800995a:	f023 0201 	bic.w	r2, r3, #1
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	6a1b      	ldr	r3, [r3, #32]
 8009966:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	685b      	ldr	r3, [r3, #4]
 800996c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	699b      	ldr	r3, [r3, #24]
 8009972:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800997a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	f023 0303 	bic.w	r3, r3, #3
 8009982:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009984:	683b      	ldr	r3, [r7, #0]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	68fa      	ldr	r2, [r7, #12]
 800998a:	4313      	orrs	r3, r2
 800998c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800998e:	697b      	ldr	r3, [r7, #20]
 8009990:	f023 0302 	bic.w	r3, r3, #2
 8009994:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009996:	683b      	ldr	r3, [r7, #0]
 8009998:	689b      	ldr	r3, [r3, #8]
 800999a:	697a      	ldr	r2, [r7, #20]
 800999c:	4313      	orrs	r3, r2
 800999e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	4a1c      	ldr	r2, [pc, #112]	; (8009a14 <TIM_OC1_SetConfig+0xc8>)
 80099a4:	4293      	cmp	r3, r2
 80099a6:	d10c      	bne.n	80099c2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80099a8:	697b      	ldr	r3, [r7, #20]
 80099aa:	f023 0308 	bic.w	r3, r3, #8
 80099ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80099b0:	683b      	ldr	r3, [r7, #0]
 80099b2:	68db      	ldr	r3, [r3, #12]
 80099b4:	697a      	ldr	r2, [r7, #20]
 80099b6:	4313      	orrs	r3, r2
 80099b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80099ba:	697b      	ldr	r3, [r7, #20]
 80099bc:	f023 0304 	bic.w	r3, r3, #4
 80099c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	4a13      	ldr	r2, [pc, #76]	; (8009a14 <TIM_OC1_SetConfig+0xc8>)
 80099c6:	4293      	cmp	r3, r2
 80099c8:	d111      	bne.n	80099ee <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80099ca:	693b      	ldr	r3, [r7, #16]
 80099cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80099d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80099d2:	693b      	ldr	r3, [r7, #16]
 80099d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80099d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80099da:	683b      	ldr	r3, [r7, #0]
 80099dc:	695b      	ldr	r3, [r3, #20]
 80099de:	693a      	ldr	r2, [r7, #16]
 80099e0:	4313      	orrs	r3, r2
 80099e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80099e4:	683b      	ldr	r3, [r7, #0]
 80099e6:	699b      	ldr	r3, [r3, #24]
 80099e8:	693a      	ldr	r2, [r7, #16]
 80099ea:	4313      	orrs	r3, r2
 80099ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	693a      	ldr	r2, [r7, #16]
 80099f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	68fa      	ldr	r2, [r7, #12]
 80099f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80099fa:	683b      	ldr	r3, [r7, #0]
 80099fc:	685a      	ldr	r2, [r3, #4]
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	697a      	ldr	r2, [r7, #20]
 8009a06:	621a      	str	r2, [r3, #32]
}
 8009a08:	bf00      	nop
 8009a0a:	371c      	adds	r7, #28
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a12:	4770      	bx	lr
 8009a14:	40010000 	.word	0x40010000

08009a18 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009a18:	b480      	push	{r7}
 8009a1a:	b087      	sub	sp, #28
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	6078      	str	r0, [r7, #4]
 8009a20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	6a1b      	ldr	r3, [r3, #32]
 8009a26:	f023 0210 	bic.w	r2, r3, #16
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	6a1b      	ldr	r3, [r3, #32]
 8009a32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	685b      	ldr	r3, [r3, #4]
 8009a38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	699b      	ldr	r3, [r3, #24]
 8009a3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009a4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009a50:	683b      	ldr	r3, [r7, #0]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	021b      	lsls	r3, r3, #8
 8009a56:	68fa      	ldr	r2, [r7, #12]
 8009a58:	4313      	orrs	r3, r2
 8009a5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009a5c:	697b      	ldr	r3, [r7, #20]
 8009a5e:	f023 0320 	bic.w	r3, r3, #32
 8009a62:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009a64:	683b      	ldr	r3, [r7, #0]
 8009a66:	689b      	ldr	r3, [r3, #8]
 8009a68:	011b      	lsls	r3, r3, #4
 8009a6a:	697a      	ldr	r2, [r7, #20]
 8009a6c:	4313      	orrs	r3, r2
 8009a6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	4a1e      	ldr	r2, [pc, #120]	; (8009aec <TIM_OC2_SetConfig+0xd4>)
 8009a74:	4293      	cmp	r3, r2
 8009a76:	d10d      	bne.n	8009a94 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009a78:	697b      	ldr	r3, [r7, #20]
 8009a7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009a7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009a80:	683b      	ldr	r3, [r7, #0]
 8009a82:	68db      	ldr	r3, [r3, #12]
 8009a84:	011b      	lsls	r3, r3, #4
 8009a86:	697a      	ldr	r2, [r7, #20]
 8009a88:	4313      	orrs	r3, r2
 8009a8a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009a8c:	697b      	ldr	r3, [r7, #20]
 8009a8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009a92:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	4a15      	ldr	r2, [pc, #84]	; (8009aec <TIM_OC2_SetConfig+0xd4>)
 8009a98:	4293      	cmp	r3, r2
 8009a9a:	d113      	bne.n	8009ac4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009a9c:	693b      	ldr	r3, [r7, #16]
 8009a9e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009aa2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009aa4:	693b      	ldr	r3, [r7, #16]
 8009aa6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009aaa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009aac:	683b      	ldr	r3, [r7, #0]
 8009aae:	695b      	ldr	r3, [r3, #20]
 8009ab0:	009b      	lsls	r3, r3, #2
 8009ab2:	693a      	ldr	r2, [r7, #16]
 8009ab4:	4313      	orrs	r3, r2
 8009ab6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009ab8:	683b      	ldr	r3, [r7, #0]
 8009aba:	699b      	ldr	r3, [r3, #24]
 8009abc:	009b      	lsls	r3, r3, #2
 8009abe:	693a      	ldr	r2, [r7, #16]
 8009ac0:	4313      	orrs	r3, r2
 8009ac2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	693a      	ldr	r2, [r7, #16]
 8009ac8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	68fa      	ldr	r2, [r7, #12]
 8009ace:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009ad0:	683b      	ldr	r3, [r7, #0]
 8009ad2:	685a      	ldr	r2, [r3, #4]
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	697a      	ldr	r2, [r7, #20]
 8009adc:	621a      	str	r2, [r3, #32]
}
 8009ade:	bf00      	nop
 8009ae0:	371c      	adds	r7, #28
 8009ae2:	46bd      	mov	sp, r7
 8009ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae8:	4770      	bx	lr
 8009aea:	bf00      	nop
 8009aec:	40010000 	.word	0x40010000

08009af0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009af0:	b480      	push	{r7}
 8009af2:	b087      	sub	sp, #28
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	6078      	str	r0, [r7, #4]
 8009af8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	6a1b      	ldr	r3, [r3, #32]
 8009afe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	6a1b      	ldr	r3, [r3, #32]
 8009b0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	685b      	ldr	r3, [r3, #4]
 8009b10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	69db      	ldr	r3, [r3, #28]
 8009b16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	f023 0303 	bic.w	r3, r3, #3
 8009b26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009b28:	683b      	ldr	r3, [r7, #0]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	68fa      	ldr	r2, [r7, #12]
 8009b2e:	4313      	orrs	r3, r2
 8009b30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009b32:	697b      	ldr	r3, [r7, #20]
 8009b34:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009b38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009b3a:	683b      	ldr	r3, [r7, #0]
 8009b3c:	689b      	ldr	r3, [r3, #8]
 8009b3e:	021b      	lsls	r3, r3, #8
 8009b40:	697a      	ldr	r2, [r7, #20]
 8009b42:	4313      	orrs	r3, r2
 8009b44:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	4a1d      	ldr	r2, [pc, #116]	; (8009bc0 <TIM_OC3_SetConfig+0xd0>)
 8009b4a:	4293      	cmp	r3, r2
 8009b4c:	d10d      	bne.n	8009b6a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009b4e:	697b      	ldr	r3, [r7, #20]
 8009b50:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009b54:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009b56:	683b      	ldr	r3, [r7, #0]
 8009b58:	68db      	ldr	r3, [r3, #12]
 8009b5a:	021b      	lsls	r3, r3, #8
 8009b5c:	697a      	ldr	r2, [r7, #20]
 8009b5e:	4313      	orrs	r3, r2
 8009b60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009b62:	697b      	ldr	r3, [r7, #20]
 8009b64:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009b68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	4a14      	ldr	r2, [pc, #80]	; (8009bc0 <TIM_OC3_SetConfig+0xd0>)
 8009b6e:	4293      	cmp	r3, r2
 8009b70:	d113      	bne.n	8009b9a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009b72:	693b      	ldr	r3, [r7, #16]
 8009b74:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009b78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009b7a:	693b      	ldr	r3, [r7, #16]
 8009b7c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009b80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009b82:	683b      	ldr	r3, [r7, #0]
 8009b84:	695b      	ldr	r3, [r3, #20]
 8009b86:	011b      	lsls	r3, r3, #4
 8009b88:	693a      	ldr	r2, [r7, #16]
 8009b8a:	4313      	orrs	r3, r2
 8009b8c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009b8e:	683b      	ldr	r3, [r7, #0]
 8009b90:	699b      	ldr	r3, [r3, #24]
 8009b92:	011b      	lsls	r3, r3, #4
 8009b94:	693a      	ldr	r2, [r7, #16]
 8009b96:	4313      	orrs	r3, r2
 8009b98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	693a      	ldr	r2, [r7, #16]
 8009b9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	68fa      	ldr	r2, [r7, #12]
 8009ba4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009ba6:	683b      	ldr	r3, [r7, #0]
 8009ba8:	685a      	ldr	r2, [r3, #4]
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	697a      	ldr	r2, [r7, #20]
 8009bb2:	621a      	str	r2, [r3, #32]
}
 8009bb4:	bf00      	nop
 8009bb6:	371c      	adds	r7, #28
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bbe:	4770      	bx	lr
 8009bc0:	40010000 	.word	0x40010000

08009bc4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009bc4:	b480      	push	{r7}
 8009bc6:	b087      	sub	sp, #28
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	6078      	str	r0, [r7, #4]
 8009bcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	6a1b      	ldr	r3, [r3, #32]
 8009bd2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	6a1b      	ldr	r3, [r3, #32]
 8009bde:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	685b      	ldr	r3, [r3, #4]
 8009be4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	69db      	ldr	r3, [r3, #28]
 8009bea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009bf2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009bfa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009bfc:	683b      	ldr	r3, [r7, #0]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	021b      	lsls	r3, r3, #8
 8009c02:	68fa      	ldr	r2, [r7, #12]
 8009c04:	4313      	orrs	r3, r2
 8009c06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009c08:	693b      	ldr	r3, [r7, #16]
 8009c0a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009c0e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009c10:	683b      	ldr	r3, [r7, #0]
 8009c12:	689b      	ldr	r3, [r3, #8]
 8009c14:	031b      	lsls	r3, r3, #12
 8009c16:	693a      	ldr	r2, [r7, #16]
 8009c18:	4313      	orrs	r3, r2
 8009c1a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	4a10      	ldr	r2, [pc, #64]	; (8009c60 <TIM_OC4_SetConfig+0x9c>)
 8009c20:	4293      	cmp	r3, r2
 8009c22:	d109      	bne.n	8009c38 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009c24:	697b      	ldr	r3, [r7, #20]
 8009c26:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009c2a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009c2c:	683b      	ldr	r3, [r7, #0]
 8009c2e:	695b      	ldr	r3, [r3, #20]
 8009c30:	019b      	lsls	r3, r3, #6
 8009c32:	697a      	ldr	r2, [r7, #20]
 8009c34:	4313      	orrs	r3, r2
 8009c36:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	697a      	ldr	r2, [r7, #20]
 8009c3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	68fa      	ldr	r2, [r7, #12]
 8009c42:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009c44:	683b      	ldr	r3, [r7, #0]
 8009c46:	685a      	ldr	r2, [r3, #4]
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	693a      	ldr	r2, [r7, #16]
 8009c50:	621a      	str	r2, [r3, #32]
}
 8009c52:	bf00      	nop
 8009c54:	371c      	adds	r7, #28
 8009c56:	46bd      	mov	sp, r7
 8009c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5c:	4770      	bx	lr
 8009c5e:	bf00      	nop
 8009c60:	40010000 	.word	0x40010000

08009c64 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009c64:	b480      	push	{r7}
 8009c66:	b087      	sub	sp, #28
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	60f8      	str	r0, [r7, #12]
 8009c6c:	60b9      	str	r1, [r7, #8]
 8009c6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	6a1b      	ldr	r3, [r3, #32]
 8009c74:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	6a1b      	ldr	r3, [r3, #32]
 8009c7a:	f023 0201 	bic.w	r2, r3, #1
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	699b      	ldr	r3, [r3, #24]
 8009c86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009c88:	693b      	ldr	r3, [r7, #16]
 8009c8a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009c8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	011b      	lsls	r3, r3, #4
 8009c94:	693a      	ldr	r2, [r7, #16]
 8009c96:	4313      	orrs	r3, r2
 8009c98:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009c9a:	697b      	ldr	r3, [r7, #20]
 8009c9c:	f023 030a 	bic.w	r3, r3, #10
 8009ca0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009ca2:	697a      	ldr	r2, [r7, #20]
 8009ca4:	68bb      	ldr	r3, [r7, #8]
 8009ca6:	4313      	orrs	r3, r2
 8009ca8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	693a      	ldr	r2, [r7, #16]
 8009cae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	697a      	ldr	r2, [r7, #20]
 8009cb4:	621a      	str	r2, [r3, #32]
}
 8009cb6:	bf00      	nop
 8009cb8:	371c      	adds	r7, #28
 8009cba:	46bd      	mov	sp, r7
 8009cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc0:	4770      	bx	lr

08009cc2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009cc2:	b480      	push	{r7}
 8009cc4:	b087      	sub	sp, #28
 8009cc6:	af00      	add	r7, sp, #0
 8009cc8:	60f8      	str	r0, [r7, #12]
 8009cca:	60b9      	str	r1, [r7, #8]
 8009ccc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	6a1b      	ldr	r3, [r3, #32]
 8009cd2:	f023 0210 	bic.w	r2, r3, #16
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	699b      	ldr	r3, [r3, #24]
 8009cde:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	6a1b      	ldr	r3, [r3, #32]
 8009ce4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009ce6:	697b      	ldr	r3, [r7, #20]
 8009ce8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009cec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	031b      	lsls	r3, r3, #12
 8009cf2:	697a      	ldr	r2, [r7, #20]
 8009cf4:	4313      	orrs	r3, r2
 8009cf6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009cf8:	693b      	ldr	r3, [r7, #16]
 8009cfa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009cfe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009d00:	68bb      	ldr	r3, [r7, #8]
 8009d02:	011b      	lsls	r3, r3, #4
 8009d04:	693a      	ldr	r2, [r7, #16]
 8009d06:	4313      	orrs	r3, r2
 8009d08:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	697a      	ldr	r2, [r7, #20]
 8009d0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	693a      	ldr	r2, [r7, #16]
 8009d14:	621a      	str	r2, [r3, #32]
}
 8009d16:	bf00      	nop
 8009d18:	371c      	adds	r7, #28
 8009d1a:	46bd      	mov	sp, r7
 8009d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d20:	4770      	bx	lr

08009d22 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009d22:	b480      	push	{r7}
 8009d24:	b085      	sub	sp, #20
 8009d26:	af00      	add	r7, sp, #0
 8009d28:	6078      	str	r0, [r7, #4]
 8009d2a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	689b      	ldr	r3, [r3, #8]
 8009d30:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d38:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009d3a:	683a      	ldr	r2, [r7, #0]
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	4313      	orrs	r3, r2
 8009d40:	f043 0307 	orr.w	r3, r3, #7
 8009d44:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	68fa      	ldr	r2, [r7, #12]
 8009d4a:	609a      	str	r2, [r3, #8]
}
 8009d4c:	bf00      	nop
 8009d4e:	3714      	adds	r7, #20
 8009d50:	46bd      	mov	sp, r7
 8009d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d56:	4770      	bx	lr

08009d58 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009d58:	b480      	push	{r7}
 8009d5a:	b087      	sub	sp, #28
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	60f8      	str	r0, [r7, #12]
 8009d60:	60b9      	str	r1, [r7, #8]
 8009d62:	607a      	str	r2, [r7, #4]
 8009d64:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	689b      	ldr	r3, [r3, #8]
 8009d6a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009d6c:	697b      	ldr	r3, [r7, #20]
 8009d6e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009d72:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009d74:	683b      	ldr	r3, [r7, #0]
 8009d76:	021a      	lsls	r2, r3, #8
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	431a      	orrs	r2, r3
 8009d7c:	68bb      	ldr	r3, [r7, #8]
 8009d7e:	4313      	orrs	r3, r2
 8009d80:	697a      	ldr	r2, [r7, #20]
 8009d82:	4313      	orrs	r3, r2
 8009d84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	697a      	ldr	r2, [r7, #20]
 8009d8a:	609a      	str	r2, [r3, #8]
}
 8009d8c:	bf00      	nop
 8009d8e:	371c      	adds	r7, #28
 8009d90:	46bd      	mov	sp, r7
 8009d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d96:	4770      	bx	lr

08009d98 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009d98:	b480      	push	{r7}
 8009d9a:	b087      	sub	sp, #28
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	60f8      	str	r0, [r7, #12]
 8009da0:	60b9      	str	r1, [r7, #8]
 8009da2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009da4:	68bb      	ldr	r3, [r7, #8]
 8009da6:	f003 031f 	and.w	r3, r3, #31
 8009daa:	2201      	movs	r2, #1
 8009dac:	fa02 f303 	lsl.w	r3, r2, r3
 8009db0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	6a1a      	ldr	r2, [r3, #32]
 8009db6:	697b      	ldr	r3, [r7, #20]
 8009db8:	43db      	mvns	r3, r3
 8009dba:	401a      	ands	r2, r3
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	6a1a      	ldr	r2, [r3, #32]
 8009dc4:	68bb      	ldr	r3, [r7, #8]
 8009dc6:	f003 031f 	and.w	r3, r3, #31
 8009dca:	6879      	ldr	r1, [r7, #4]
 8009dcc:	fa01 f303 	lsl.w	r3, r1, r3
 8009dd0:	431a      	orrs	r2, r3
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	621a      	str	r2, [r3, #32]
}
 8009dd6:	bf00      	nop
 8009dd8:	371c      	adds	r7, #28
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de0:	4770      	bx	lr
	...

08009de4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009de4:	b480      	push	{r7}
 8009de6:	b085      	sub	sp, #20
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	6078      	str	r0, [r7, #4]
 8009dec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009df4:	2b01      	cmp	r3, #1
 8009df6:	d101      	bne.n	8009dfc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009df8:	2302      	movs	r3, #2
 8009dfa:	e050      	b.n	8009e9e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	2201      	movs	r2, #1
 8009e00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	2202      	movs	r2, #2
 8009e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	685b      	ldr	r3, [r3, #4]
 8009e12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	689b      	ldr	r3, [r3, #8]
 8009e1a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e22:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009e24:	683b      	ldr	r3, [r7, #0]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	68fa      	ldr	r2, [r7, #12]
 8009e2a:	4313      	orrs	r3, r2
 8009e2c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	68fa      	ldr	r2, [r7, #12]
 8009e34:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	4a1c      	ldr	r2, [pc, #112]	; (8009eac <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8009e3c:	4293      	cmp	r3, r2
 8009e3e:	d018      	beq.n	8009e72 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e48:	d013      	beq.n	8009e72 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	4a18      	ldr	r2, [pc, #96]	; (8009eb0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8009e50:	4293      	cmp	r3, r2
 8009e52:	d00e      	beq.n	8009e72 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	4a16      	ldr	r2, [pc, #88]	; (8009eb4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8009e5a:	4293      	cmp	r3, r2
 8009e5c:	d009      	beq.n	8009e72 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	4a15      	ldr	r2, [pc, #84]	; (8009eb8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8009e64:	4293      	cmp	r3, r2
 8009e66:	d004      	beq.n	8009e72 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	4a13      	ldr	r2, [pc, #76]	; (8009ebc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8009e6e:	4293      	cmp	r3, r2
 8009e70:	d10c      	bne.n	8009e8c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009e72:	68bb      	ldr	r3, [r7, #8]
 8009e74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009e78:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009e7a:	683b      	ldr	r3, [r7, #0]
 8009e7c:	685b      	ldr	r3, [r3, #4]
 8009e7e:	68ba      	ldr	r2, [r7, #8]
 8009e80:	4313      	orrs	r3, r2
 8009e82:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	68ba      	ldr	r2, [r7, #8]
 8009e8a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	2201      	movs	r2, #1
 8009e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	2200      	movs	r2, #0
 8009e98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009e9c:	2300      	movs	r3, #0
}
 8009e9e:	4618      	mov	r0, r3
 8009ea0:	3714      	adds	r7, #20
 8009ea2:	46bd      	mov	sp, r7
 8009ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea8:	4770      	bx	lr
 8009eaa:	bf00      	nop
 8009eac:	40010000 	.word	0x40010000
 8009eb0:	40000400 	.word	0x40000400
 8009eb4:	40000800 	.word	0x40000800
 8009eb8:	40000c00 	.word	0x40000c00
 8009ebc:	40014000 	.word	0x40014000

08009ec0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	b08a      	sub	sp, #40	; 0x28
 8009ec4:	af02      	add	r7, sp, #8
 8009ec6:	60f8      	str	r0, [r7, #12]
 8009ec8:	60b9      	str	r1, [r7, #8]
 8009eca:	603b      	str	r3, [r7, #0]
 8009ecc:	4613      	mov	r3, r2
 8009ece:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009ed0:	2300      	movs	r3, #0
 8009ed2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009eda:	b2db      	uxtb	r3, r3
 8009edc:	2b20      	cmp	r3, #32
 8009ede:	d17c      	bne.n	8009fda <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009ee0:	68bb      	ldr	r3, [r7, #8]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d002      	beq.n	8009eec <HAL_UART_Transmit+0x2c>
 8009ee6:	88fb      	ldrh	r3, [r7, #6]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d101      	bne.n	8009ef0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009eec:	2301      	movs	r3, #1
 8009eee:	e075      	b.n	8009fdc <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009ef6:	2b01      	cmp	r3, #1
 8009ef8:	d101      	bne.n	8009efe <HAL_UART_Transmit+0x3e>
 8009efa:	2302      	movs	r3, #2
 8009efc:	e06e      	b.n	8009fdc <HAL_UART_Transmit+0x11c>
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	2201      	movs	r2, #1
 8009f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	2200      	movs	r2, #0
 8009f0a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	2221      	movs	r2, #33	; 0x21
 8009f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009f14:	f7f9 fe16 	bl	8003b44 <HAL_GetTick>
 8009f18:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	88fa      	ldrh	r2, [r7, #6]
 8009f1e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	88fa      	ldrh	r2, [r7, #6]
 8009f24:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	689b      	ldr	r3, [r3, #8]
 8009f2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f2e:	d108      	bne.n	8009f42 <HAL_UART_Transmit+0x82>
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	691b      	ldr	r3, [r3, #16]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d104      	bne.n	8009f42 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8009f38:	2300      	movs	r3, #0
 8009f3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009f3c:	68bb      	ldr	r3, [r7, #8]
 8009f3e:	61bb      	str	r3, [r7, #24]
 8009f40:	e003      	b.n	8009f4a <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8009f42:	68bb      	ldr	r3, [r7, #8]
 8009f44:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009f46:	2300      	movs	r3, #0
 8009f48:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	2200      	movs	r2, #0
 8009f4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8009f52:	e02a      	b.n	8009faa <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009f54:	683b      	ldr	r3, [r7, #0]
 8009f56:	9300      	str	r3, [sp, #0]
 8009f58:	697b      	ldr	r3, [r7, #20]
 8009f5a:	2200      	movs	r2, #0
 8009f5c:	2180      	movs	r1, #128	; 0x80
 8009f5e:	68f8      	ldr	r0, [r7, #12]
 8009f60:	f000 f840 	bl	8009fe4 <UART_WaitOnFlagUntilTimeout>
 8009f64:	4603      	mov	r3, r0
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d001      	beq.n	8009f6e <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8009f6a:	2303      	movs	r3, #3
 8009f6c:	e036      	b.n	8009fdc <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8009f6e:	69fb      	ldr	r3, [r7, #28]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d10b      	bne.n	8009f8c <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009f74:	69bb      	ldr	r3, [r7, #24]
 8009f76:	881b      	ldrh	r3, [r3, #0]
 8009f78:	461a      	mov	r2, r3
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009f82:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009f84:	69bb      	ldr	r3, [r7, #24]
 8009f86:	3302      	adds	r3, #2
 8009f88:	61bb      	str	r3, [r7, #24]
 8009f8a:	e007      	b.n	8009f9c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009f8c:	69fb      	ldr	r3, [r7, #28]
 8009f8e:	781a      	ldrb	r2, [r3, #0]
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009f96:	69fb      	ldr	r3, [r7, #28]
 8009f98:	3301      	adds	r3, #1
 8009f9a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009fa0:	b29b      	uxth	r3, r3
 8009fa2:	3b01      	subs	r3, #1
 8009fa4:	b29a      	uxth	r2, r3
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009fae:	b29b      	uxth	r3, r3
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d1cf      	bne.n	8009f54 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009fb4:	683b      	ldr	r3, [r7, #0]
 8009fb6:	9300      	str	r3, [sp, #0]
 8009fb8:	697b      	ldr	r3, [r7, #20]
 8009fba:	2200      	movs	r2, #0
 8009fbc:	2140      	movs	r1, #64	; 0x40
 8009fbe:	68f8      	ldr	r0, [r7, #12]
 8009fc0:	f000 f810 	bl	8009fe4 <UART_WaitOnFlagUntilTimeout>
 8009fc4:	4603      	mov	r3, r0
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d001      	beq.n	8009fce <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8009fca:	2303      	movs	r3, #3
 8009fcc:	e006      	b.n	8009fdc <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	2220      	movs	r2, #32
 8009fd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8009fd6:	2300      	movs	r3, #0
 8009fd8:	e000      	b.n	8009fdc <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8009fda:	2302      	movs	r3, #2
  }
}
 8009fdc:	4618      	mov	r0, r3
 8009fde:	3720      	adds	r7, #32
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	bd80      	pop	{r7, pc}

08009fe4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	b090      	sub	sp, #64	; 0x40
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	60f8      	str	r0, [r7, #12]
 8009fec:	60b9      	str	r1, [r7, #8]
 8009fee:	603b      	str	r3, [r7, #0]
 8009ff0:	4613      	mov	r3, r2
 8009ff2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009ff4:	e050      	b.n	800a098 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009ff6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ffc:	d04c      	beq.n	800a098 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009ffe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a000:	2b00      	cmp	r3, #0
 800a002:	d007      	beq.n	800a014 <UART_WaitOnFlagUntilTimeout+0x30>
 800a004:	f7f9 fd9e 	bl	8003b44 <HAL_GetTick>
 800a008:	4602      	mov	r2, r0
 800a00a:	683b      	ldr	r3, [r7, #0]
 800a00c:	1ad3      	subs	r3, r2, r3
 800a00e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a010:	429a      	cmp	r2, r3
 800a012:	d241      	bcs.n	800a098 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	330c      	adds	r3, #12
 800a01a:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a01c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a01e:	e853 3f00 	ldrex	r3, [r3]
 800a022:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a026:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a02a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	330c      	adds	r3, #12
 800a032:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a034:	637a      	str	r2, [r7, #52]	; 0x34
 800a036:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a038:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a03a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a03c:	e841 2300 	strex	r3, r2, [r1]
 800a040:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a044:	2b00      	cmp	r3, #0
 800a046:	d1e5      	bne.n	800a014 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	3314      	adds	r3, #20
 800a04e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a050:	697b      	ldr	r3, [r7, #20]
 800a052:	e853 3f00 	ldrex	r3, [r3]
 800a056:	613b      	str	r3, [r7, #16]
   return(result);
 800a058:	693b      	ldr	r3, [r7, #16]
 800a05a:	f023 0301 	bic.w	r3, r3, #1
 800a05e:	63bb      	str	r3, [r7, #56]	; 0x38
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	3314      	adds	r3, #20
 800a066:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a068:	623a      	str	r2, [r7, #32]
 800a06a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a06c:	69f9      	ldr	r1, [r7, #28]
 800a06e:	6a3a      	ldr	r2, [r7, #32]
 800a070:	e841 2300 	strex	r3, r2, [r1]
 800a074:	61bb      	str	r3, [r7, #24]
   return(result);
 800a076:	69bb      	ldr	r3, [r7, #24]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d1e5      	bne.n	800a048 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	2220      	movs	r2, #32
 800a080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	2220      	movs	r2, #32
 800a088:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	2200      	movs	r2, #0
 800a090:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800a094:	2303      	movs	r3, #3
 800a096:	e00f      	b.n	800a0b8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	681a      	ldr	r2, [r3, #0]
 800a09e:	68bb      	ldr	r3, [r7, #8]
 800a0a0:	4013      	ands	r3, r2
 800a0a2:	68ba      	ldr	r2, [r7, #8]
 800a0a4:	429a      	cmp	r2, r3
 800a0a6:	bf0c      	ite	eq
 800a0a8:	2301      	moveq	r3, #1
 800a0aa:	2300      	movne	r3, #0
 800a0ac:	b2db      	uxtb	r3, r3
 800a0ae:	461a      	mov	r2, r3
 800a0b0:	79fb      	ldrb	r3, [r7, #7]
 800a0b2:	429a      	cmp	r2, r3
 800a0b4:	d09f      	beq.n	8009ff6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a0b6:	2300      	movs	r3, #0
}
 800a0b8:	4618      	mov	r0, r3
 800a0ba:	3740      	adds	r7, #64	; 0x40
 800a0bc:	46bd      	mov	sp, r7
 800a0be:	bd80      	pop	{r7, pc}

0800a0c0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a0c0:	b084      	sub	sp, #16
 800a0c2:	b580      	push	{r7, lr}
 800a0c4:	b084      	sub	sp, #16
 800a0c6:	af00      	add	r7, sp, #0
 800a0c8:	6078      	str	r0, [r7, #4]
 800a0ca:	f107 001c 	add.w	r0, r7, #28
 800a0ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a0d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0d4:	2b01      	cmp	r3, #1
 800a0d6:	d122      	bne.n	800a11e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0dc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	68db      	ldr	r3, [r3, #12]
 800a0e8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800a0ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a0f0:	687a      	ldr	r2, [r7, #4]
 800a0f2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	68db      	ldr	r3, [r3, #12]
 800a0f8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a100:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a102:	2b01      	cmp	r3, #1
 800a104:	d105      	bne.n	800a112 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	68db      	ldr	r3, [r3, #12]
 800a10a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a112:	6878      	ldr	r0, [r7, #4]
 800a114:	f001 fbee 	bl	800b8f4 <USB_CoreReset>
 800a118:	4603      	mov	r3, r0
 800a11a:	73fb      	strb	r3, [r7, #15]
 800a11c:	e01a      	b.n	800a154 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	68db      	ldr	r3, [r3, #12]
 800a122:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a12a:	6878      	ldr	r0, [r7, #4]
 800a12c:	f001 fbe2 	bl	800b8f4 <USB_CoreReset>
 800a130:	4603      	mov	r3, r0
 800a132:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a134:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a136:	2b00      	cmp	r3, #0
 800a138:	d106      	bne.n	800a148 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a13e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	639a      	str	r2, [r3, #56]	; 0x38
 800a146:	e005      	b.n	800a154 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a14c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a156:	2b01      	cmp	r3, #1
 800a158:	d10b      	bne.n	800a172 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	689b      	ldr	r3, [r3, #8]
 800a15e:	f043 0206 	orr.w	r2, r3, #6
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	689b      	ldr	r3, [r3, #8]
 800a16a:	f043 0220 	orr.w	r2, r3, #32
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a172:	7bfb      	ldrb	r3, [r7, #15]
}
 800a174:	4618      	mov	r0, r3
 800a176:	3710      	adds	r7, #16
 800a178:	46bd      	mov	sp, r7
 800a17a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a17e:	b004      	add	sp, #16
 800a180:	4770      	bx	lr
	...

0800a184 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800a184:	b480      	push	{r7}
 800a186:	b087      	sub	sp, #28
 800a188:	af00      	add	r7, sp, #0
 800a18a:	60f8      	str	r0, [r7, #12]
 800a18c:	60b9      	str	r1, [r7, #8]
 800a18e:	4613      	mov	r3, r2
 800a190:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800a192:	79fb      	ldrb	r3, [r7, #7]
 800a194:	2b02      	cmp	r3, #2
 800a196:	d165      	bne.n	800a264 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800a198:	68bb      	ldr	r3, [r7, #8]
 800a19a:	4a41      	ldr	r2, [pc, #260]	; (800a2a0 <USB_SetTurnaroundTime+0x11c>)
 800a19c:	4293      	cmp	r3, r2
 800a19e:	d906      	bls.n	800a1ae <USB_SetTurnaroundTime+0x2a>
 800a1a0:	68bb      	ldr	r3, [r7, #8]
 800a1a2:	4a40      	ldr	r2, [pc, #256]	; (800a2a4 <USB_SetTurnaroundTime+0x120>)
 800a1a4:	4293      	cmp	r3, r2
 800a1a6:	d202      	bcs.n	800a1ae <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800a1a8:	230f      	movs	r3, #15
 800a1aa:	617b      	str	r3, [r7, #20]
 800a1ac:	e062      	b.n	800a274 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800a1ae:	68bb      	ldr	r3, [r7, #8]
 800a1b0:	4a3c      	ldr	r2, [pc, #240]	; (800a2a4 <USB_SetTurnaroundTime+0x120>)
 800a1b2:	4293      	cmp	r3, r2
 800a1b4:	d306      	bcc.n	800a1c4 <USB_SetTurnaroundTime+0x40>
 800a1b6:	68bb      	ldr	r3, [r7, #8]
 800a1b8:	4a3b      	ldr	r2, [pc, #236]	; (800a2a8 <USB_SetTurnaroundTime+0x124>)
 800a1ba:	4293      	cmp	r3, r2
 800a1bc:	d202      	bcs.n	800a1c4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800a1be:	230e      	movs	r3, #14
 800a1c0:	617b      	str	r3, [r7, #20]
 800a1c2:	e057      	b.n	800a274 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800a1c4:	68bb      	ldr	r3, [r7, #8]
 800a1c6:	4a38      	ldr	r2, [pc, #224]	; (800a2a8 <USB_SetTurnaroundTime+0x124>)
 800a1c8:	4293      	cmp	r3, r2
 800a1ca:	d306      	bcc.n	800a1da <USB_SetTurnaroundTime+0x56>
 800a1cc:	68bb      	ldr	r3, [r7, #8]
 800a1ce:	4a37      	ldr	r2, [pc, #220]	; (800a2ac <USB_SetTurnaroundTime+0x128>)
 800a1d0:	4293      	cmp	r3, r2
 800a1d2:	d202      	bcs.n	800a1da <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800a1d4:	230d      	movs	r3, #13
 800a1d6:	617b      	str	r3, [r7, #20]
 800a1d8:	e04c      	b.n	800a274 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800a1da:	68bb      	ldr	r3, [r7, #8]
 800a1dc:	4a33      	ldr	r2, [pc, #204]	; (800a2ac <USB_SetTurnaroundTime+0x128>)
 800a1de:	4293      	cmp	r3, r2
 800a1e0:	d306      	bcc.n	800a1f0 <USB_SetTurnaroundTime+0x6c>
 800a1e2:	68bb      	ldr	r3, [r7, #8]
 800a1e4:	4a32      	ldr	r2, [pc, #200]	; (800a2b0 <USB_SetTurnaroundTime+0x12c>)
 800a1e6:	4293      	cmp	r3, r2
 800a1e8:	d802      	bhi.n	800a1f0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800a1ea:	230c      	movs	r3, #12
 800a1ec:	617b      	str	r3, [r7, #20]
 800a1ee:	e041      	b.n	800a274 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800a1f0:	68bb      	ldr	r3, [r7, #8]
 800a1f2:	4a2f      	ldr	r2, [pc, #188]	; (800a2b0 <USB_SetTurnaroundTime+0x12c>)
 800a1f4:	4293      	cmp	r3, r2
 800a1f6:	d906      	bls.n	800a206 <USB_SetTurnaroundTime+0x82>
 800a1f8:	68bb      	ldr	r3, [r7, #8]
 800a1fa:	4a2e      	ldr	r2, [pc, #184]	; (800a2b4 <USB_SetTurnaroundTime+0x130>)
 800a1fc:	4293      	cmp	r3, r2
 800a1fe:	d802      	bhi.n	800a206 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800a200:	230b      	movs	r3, #11
 800a202:	617b      	str	r3, [r7, #20]
 800a204:	e036      	b.n	800a274 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800a206:	68bb      	ldr	r3, [r7, #8]
 800a208:	4a2a      	ldr	r2, [pc, #168]	; (800a2b4 <USB_SetTurnaroundTime+0x130>)
 800a20a:	4293      	cmp	r3, r2
 800a20c:	d906      	bls.n	800a21c <USB_SetTurnaroundTime+0x98>
 800a20e:	68bb      	ldr	r3, [r7, #8]
 800a210:	4a29      	ldr	r2, [pc, #164]	; (800a2b8 <USB_SetTurnaroundTime+0x134>)
 800a212:	4293      	cmp	r3, r2
 800a214:	d802      	bhi.n	800a21c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800a216:	230a      	movs	r3, #10
 800a218:	617b      	str	r3, [r7, #20]
 800a21a:	e02b      	b.n	800a274 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800a21c:	68bb      	ldr	r3, [r7, #8]
 800a21e:	4a26      	ldr	r2, [pc, #152]	; (800a2b8 <USB_SetTurnaroundTime+0x134>)
 800a220:	4293      	cmp	r3, r2
 800a222:	d906      	bls.n	800a232 <USB_SetTurnaroundTime+0xae>
 800a224:	68bb      	ldr	r3, [r7, #8]
 800a226:	4a25      	ldr	r2, [pc, #148]	; (800a2bc <USB_SetTurnaroundTime+0x138>)
 800a228:	4293      	cmp	r3, r2
 800a22a:	d202      	bcs.n	800a232 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800a22c:	2309      	movs	r3, #9
 800a22e:	617b      	str	r3, [r7, #20]
 800a230:	e020      	b.n	800a274 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800a232:	68bb      	ldr	r3, [r7, #8]
 800a234:	4a21      	ldr	r2, [pc, #132]	; (800a2bc <USB_SetTurnaroundTime+0x138>)
 800a236:	4293      	cmp	r3, r2
 800a238:	d306      	bcc.n	800a248 <USB_SetTurnaroundTime+0xc4>
 800a23a:	68bb      	ldr	r3, [r7, #8]
 800a23c:	4a20      	ldr	r2, [pc, #128]	; (800a2c0 <USB_SetTurnaroundTime+0x13c>)
 800a23e:	4293      	cmp	r3, r2
 800a240:	d802      	bhi.n	800a248 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800a242:	2308      	movs	r3, #8
 800a244:	617b      	str	r3, [r7, #20]
 800a246:	e015      	b.n	800a274 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800a248:	68bb      	ldr	r3, [r7, #8]
 800a24a:	4a1d      	ldr	r2, [pc, #116]	; (800a2c0 <USB_SetTurnaroundTime+0x13c>)
 800a24c:	4293      	cmp	r3, r2
 800a24e:	d906      	bls.n	800a25e <USB_SetTurnaroundTime+0xda>
 800a250:	68bb      	ldr	r3, [r7, #8]
 800a252:	4a1c      	ldr	r2, [pc, #112]	; (800a2c4 <USB_SetTurnaroundTime+0x140>)
 800a254:	4293      	cmp	r3, r2
 800a256:	d202      	bcs.n	800a25e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800a258:	2307      	movs	r3, #7
 800a25a:	617b      	str	r3, [r7, #20]
 800a25c:	e00a      	b.n	800a274 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800a25e:	2306      	movs	r3, #6
 800a260:	617b      	str	r3, [r7, #20]
 800a262:	e007      	b.n	800a274 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800a264:	79fb      	ldrb	r3, [r7, #7]
 800a266:	2b00      	cmp	r3, #0
 800a268:	d102      	bne.n	800a270 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800a26a:	2309      	movs	r3, #9
 800a26c:	617b      	str	r3, [r7, #20]
 800a26e:	e001      	b.n	800a274 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800a270:	2309      	movs	r3, #9
 800a272:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	68db      	ldr	r3, [r3, #12]
 800a278:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	68da      	ldr	r2, [r3, #12]
 800a284:	697b      	ldr	r3, [r7, #20]
 800a286:	029b      	lsls	r3, r3, #10
 800a288:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800a28c:	431a      	orrs	r2, r3
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a292:	2300      	movs	r3, #0
}
 800a294:	4618      	mov	r0, r3
 800a296:	371c      	adds	r7, #28
 800a298:	46bd      	mov	sp, r7
 800a29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a29e:	4770      	bx	lr
 800a2a0:	00d8acbf 	.word	0x00d8acbf
 800a2a4:	00e4e1c0 	.word	0x00e4e1c0
 800a2a8:	00f42400 	.word	0x00f42400
 800a2ac:	01067380 	.word	0x01067380
 800a2b0:	011a499f 	.word	0x011a499f
 800a2b4:	01312cff 	.word	0x01312cff
 800a2b8:	014ca43f 	.word	0x014ca43f
 800a2bc:	016e3600 	.word	0x016e3600
 800a2c0:	01a6ab1f 	.word	0x01a6ab1f
 800a2c4:	01e84800 	.word	0x01e84800

0800a2c8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a2c8:	b480      	push	{r7}
 800a2ca:	b083      	sub	sp, #12
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	689b      	ldr	r3, [r3, #8]
 800a2d4:	f043 0201 	orr.w	r2, r3, #1
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a2dc:	2300      	movs	r3, #0
}
 800a2de:	4618      	mov	r0, r3
 800a2e0:	370c      	adds	r7, #12
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e8:	4770      	bx	lr

0800a2ea <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a2ea:	b480      	push	{r7}
 800a2ec:	b083      	sub	sp, #12
 800a2ee:	af00      	add	r7, sp, #0
 800a2f0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	689b      	ldr	r3, [r3, #8]
 800a2f6:	f023 0201 	bic.w	r2, r3, #1
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a2fe:	2300      	movs	r3, #0
}
 800a300:	4618      	mov	r0, r3
 800a302:	370c      	adds	r7, #12
 800a304:	46bd      	mov	sp, r7
 800a306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a30a:	4770      	bx	lr

0800a30c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a30c:	b580      	push	{r7, lr}
 800a30e:	b084      	sub	sp, #16
 800a310:	af00      	add	r7, sp, #0
 800a312:	6078      	str	r0, [r7, #4]
 800a314:	460b      	mov	r3, r1
 800a316:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a318:	2300      	movs	r3, #0
 800a31a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	68db      	ldr	r3, [r3, #12]
 800a320:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a328:	78fb      	ldrb	r3, [r7, #3]
 800a32a:	2b01      	cmp	r3, #1
 800a32c:	d115      	bne.n	800a35a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	68db      	ldr	r3, [r3, #12]
 800a332:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a33a:	2001      	movs	r0, #1
 800a33c:	f7f9 fc0e 	bl	8003b5c <HAL_Delay>
      ms++;
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	3301      	adds	r3, #1
 800a344:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800a346:	6878      	ldr	r0, [r7, #4]
 800a348:	f001 fa45 	bl	800b7d6 <USB_GetMode>
 800a34c:	4603      	mov	r3, r0
 800a34e:	2b01      	cmp	r3, #1
 800a350:	d01e      	beq.n	800a390 <USB_SetCurrentMode+0x84>
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	2b31      	cmp	r3, #49	; 0x31
 800a356:	d9f0      	bls.n	800a33a <USB_SetCurrentMode+0x2e>
 800a358:	e01a      	b.n	800a390 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a35a:	78fb      	ldrb	r3, [r7, #3]
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d115      	bne.n	800a38c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	68db      	ldr	r3, [r3, #12]
 800a364:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a36c:	2001      	movs	r0, #1
 800a36e:	f7f9 fbf5 	bl	8003b5c <HAL_Delay>
      ms++;
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	3301      	adds	r3, #1
 800a376:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800a378:	6878      	ldr	r0, [r7, #4]
 800a37a:	f001 fa2c 	bl	800b7d6 <USB_GetMode>
 800a37e:	4603      	mov	r3, r0
 800a380:	2b00      	cmp	r3, #0
 800a382:	d005      	beq.n	800a390 <USB_SetCurrentMode+0x84>
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	2b31      	cmp	r3, #49	; 0x31
 800a388:	d9f0      	bls.n	800a36c <USB_SetCurrentMode+0x60>
 800a38a:	e001      	b.n	800a390 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a38c:	2301      	movs	r3, #1
 800a38e:	e005      	b.n	800a39c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	2b32      	cmp	r3, #50	; 0x32
 800a394:	d101      	bne.n	800a39a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a396:	2301      	movs	r3, #1
 800a398:	e000      	b.n	800a39c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a39a:	2300      	movs	r3, #0
}
 800a39c:	4618      	mov	r0, r3
 800a39e:	3710      	adds	r7, #16
 800a3a0:	46bd      	mov	sp, r7
 800a3a2:	bd80      	pop	{r7, pc}

0800a3a4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a3a4:	b084      	sub	sp, #16
 800a3a6:	b580      	push	{r7, lr}
 800a3a8:	b086      	sub	sp, #24
 800a3aa:	af00      	add	r7, sp, #0
 800a3ac:	6078      	str	r0, [r7, #4]
 800a3ae:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800a3b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a3be:	2300      	movs	r3, #0
 800a3c0:	613b      	str	r3, [r7, #16]
 800a3c2:	e009      	b.n	800a3d8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a3c4:	687a      	ldr	r2, [r7, #4]
 800a3c6:	693b      	ldr	r3, [r7, #16]
 800a3c8:	3340      	adds	r3, #64	; 0x40
 800a3ca:	009b      	lsls	r3, r3, #2
 800a3cc:	4413      	add	r3, r2
 800a3ce:	2200      	movs	r2, #0
 800a3d0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a3d2:	693b      	ldr	r3, [r7, #16]
 800a3d4:	3301      	adds	r3, #1
 800a3d6:	613b      	str	r3, [r7, #16]
 800a3d8:	693b      	ldr	r3, [r7, #16]
 800a3da:	2b0e      	cmp	r3, #14
 800a3dc:	d9f2      	bls.n	800a3c4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a3de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d11c      	bne.n	800a41e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a3ea:	685b      	ldr	r3, [r3, #4]
 800a3ec:	68fa      	ldr	r2, [r7, #12]
 800a3ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a3f2:	f043 0302 	orr.w	r3, r3, #2
 800a3f6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3fc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a408:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a414:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	639a      	str	r2, [r3, #56]	; 0x38
 800a41c:	e00b      	b.n	800a436 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a422:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a42e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a43c:	461a      	mov	r2, r3
 800a43e:	2300      	movs	r3, #0
 800a440:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a448:	4619      	mov	r1, r3
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a450:	461a      	mov	r2, r3
 800a452:	680b      	ldr	r3, [r1, #0]
 800a454:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a458:	2b01      	cmp	r3, #1
 800a45a:	d10c      	bne.n	800a476 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a45c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d104      	bne.n	800a46c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a462:	2100      	movs	r1, #0
 800a464:	6878      	ldr	r0, [r7, #4]
 800a466:	f000 f965 	bl	800a734 <USB_SetDevSpeed>
 800a46a:	e008      	b.n	800a47e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a46c:	2101      	movs	r1, #1
 800a46e:	6878      	ldr	r0, [r7, #4]
 800a470:	f000 f960 	bl	800a734 <USB_SetDevSpeed>
 800a474:	e003      	b.n	800a47e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a476:	2103      	movs	r1, #3
 800a478:	6878      	ldr	r0, [r7, #4]
 800a47a:	f000 f95b 	bl	800a734 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a47e:	2110      	movs	r1, #16
 800a480:	6878      	ldr	r0, [r7, #4]
 800a482:	f000 f8f3 	bl	800a66c <USB_FlushTxFifo>
 800a486:	4603      	mov	r3, r0
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d001      	beq.n	800a490 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800a48c:	2301      	movs	r3, #1
 800a48e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a490:	6878      	ldr	r0, [r7, #4]
 800a492:	f000 f91f 	bl	800a6d4 <USB_FlushRxFifo>
 800a496:	4603      	mov	r3, r0
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d001      	beq.n	800a4a0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800a49c:	2301      	movs	r3, #1
 800a49e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a4a6:	461a      	mov	r2, r3
 800a4a8:	2300      	movs	r3, #0
 800a4aa:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a4b2:	461a      	mov	r2, r3
 800a4b4:	2300      	movs	r3, #0
 800a4b6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a4be:	461a      	mov	r2, r3
 800a4c0:	2300      	movs	r3, #0
 800a4c2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a4c4:	2300      	movs	r3, #0
 800a4c6:	613b      	str	r3, [r7, #16]
 800a4c8:	e043      	b.n	800a552 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a4ca:	693b      	ldr	r3, [r7, #16]
 800a4cc:	015a      	lsls	r2, r3, #5
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	4413      	add	r3, r2
 800a4d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a4dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a4e0:	d118      	bne.n	800a514 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800a4e2:	693b      	ldr	r3, [r7, #16]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d10a      	bne.n	800a4fe <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a4e8:	693b      	ldr	r3, [r7, #16]
 800a4ea:	015a      	lsls	r2, r3, #5
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	4413      	add	r3, r2
 800a4f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4f4:	461a      	mov	r2, r3
 800a4f6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a4fa:	6013      	str	r3, [r2, #0]
 800a4fc:	e013      	b.n	800a526 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a4fe:	693b      	ldr	r3, [r7, #16]
 800a500:	015a      	lsls	r2, r3, #5
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	4413      	add	r3, r2
 800a506:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a50a:	461a      	mov	r2, r3
 800a50c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a510:	6013      	str	r3, [r2, #0]
 800a512:	e008      	b.n	800a526 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a514:	693b      	ldr	r3, [r7, #16]
 800a516:	015a      	lsls	r2, r3, #5
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	4413      	add	r3, r2
 800a51c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a520:	461a      	mov	r2, r3
 800a522:	2300      	movs	r3, #0
 800a524:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a526:	693b      	ldr	r3, [r7, #16]
 800a528:	015a      	lsls	r2, r3, #5
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	4413      	add	r3, r2
 800a52e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a532:	461a      	mov	r2, r3
 800a534:	2300      	movs	r3, #0
 800a536:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a538:	693b      	ldr	r3, [r7, #16]
 800a53a:	015a      	lsls	r2, r3, #5
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	4413      	add	r3, r2
 800a540:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a544:	461a      	mov	r2, r3
 800a546:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a54a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a54c:	693b      	ldr	r3, [r7, #16]
 800a54e:	3301      	adds	r3, #1
 800a550:	613b      	str	r3, [r7, #16]
 800a552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a554:	693a      	ldr	r2, [r7, #16]
 800a556:	429a      	cmp	r2, r3
 800a558:	d3b7      	bcc.n	800a4ca <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a55a:	2300      	movs	r3, #0
 800a55c:	613b      	str	r3, [r7, #16]
 800a55e:	e043      	b.n	800a5e8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a560:	693b      	ldr	r3, [r7, #16]
 800a562:	015a      	lsls	r2, r3, #5
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	4413      	add	r3, r2
 800a568:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a572:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a576:	d118      	bne.n	800a5aa <USB_DevInit+0x206>
    {
      if (i == 0U)
 800a578:	693b      	ldr	r3, [r7, #16]
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d10a      	bne.n	800a594 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a57e:	693b      	ldr	r3, [r7, #16]
 800a580:	015a      	lsls	r2, r3, #5
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	4413      	add	r3, r2
 800a586:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a58a:	461a      	mov	r2, r3
 800a58c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a590:	6013      	str	r3, [r2, #0]
 800a592:	e013      	b.n	800a5bc <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a594:	693b      	ldr	r3, [r7, #16]
 800a596:	015a      	lsls	r2, r3, #5
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	4413      	add	r3, r2
 800a59c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a5a0:	461a      	mov	r2, r3
 800a5a2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a5a6:	6013      	str	r3, [r2, #0]
 800a5a8:	e008      	b.n	800a5bc <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a5aa:	693b      	ldr	r3, [r7, #16]
 800a5ac:	015a      	lsls	r2, r3, #5
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	4413      	add	r3, r2
 800a5b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a5b6:	461a      	mov	r2, r3
 800a5b8:	2300      	movs	r3, #0
 800a5ba:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a5bc:	693b      	ldr	r3, [r7, #16]
 800a5be:	015a      	lsls	r2, r3, #5
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	4413      	add	r3, r2
 800a5c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a5c8:	461a      	mov	r2, r3
 800a5ca:	2300      	movs	r3, #0
 800a5cc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a5ce:	693b      	ldr	r3, [r7, #16]
 800a5d0:	015a      	lsls	r2, r3, #5
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	4413      	add	r3, r2
 800a5d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a5da:	461a      	mov	r2, r3
 800a5dc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a5e0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a5e2:	693b      	ldr	r3, [r7, #16]
 800a5e4:	3301      	adds	r3, #1
 800a5e6:	613b      	str	r3, [r7, #16]
 800a5e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5ea:	693a      	ldr	r2, [r7, #16]
 800a5ec:	429a      	cmp	r2, r3
 800a5ee:	d3b7      	bcc.n	800a560 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a5f6:	691b      	ldr	r3, [r3, #16]
 800a5f8:	68fa      	ldr	r2, [r7, #12]
 800a5fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a5fe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a602:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	2200      	movs	r2, #0
 800a608:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800a610:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a614:	2b00      	cmp	r3, #0
 800a616:	d105      	bne.n	800a624 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	699b      	ldr	r3, [r3, #24]
 800a61c:	f043 0210 	orr.w	r2, r3, #16
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	699a      	ldr	r2, [r3, #24]
 800a628:	4b0f      	ldr	r3, [pc, #60]	; (800a668 <USB_DevInit+0x2c4>)
 800a62a:	4313      	orrs	r3, r2
 800a62c:	687a      	ldr	r2, [r7, #4]
 800a62e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a630:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a632:	2b00      	cmp	r3, #0
 800a634:	d005      	beq.n	800a642 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	699b      	ldr	r3, [r3, #24]
 800a63a:	f043 0208 	orr.w	r2, r3, #8
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a642:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a644:	2b01      	cmp	r3, #1
 800a646:	d107      	bne.n	800a658 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	699b      	ldr	r3, [r3, #24]
 800a64c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a650:	f043 0304 	orr.w	r3, r3, #4
 800a654:	687a      	ldr	r2, [r7, #4]
 800a656:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a658:	7dfb      	ldrb	r3, [r7, #23]
}
 800a65a:	4618      	mov	r0, r3
 800a65c:	3718      	adds	r7, #24
 800a65e:	46bd      	mov	sp, r7
 800a660:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a664:	b004      	add	sp, #16
 800a666:	4770      	bx	lr
 800a668:	803c3800 	.word	0x803c3800

0800a66c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a66c:	b480      	push	{r7}
 800a66e:	b085      	sub	sp, #20
 800a670:	af00      	add	r7, sp, #0
 800a672:	6078      	str	r0, [r7, #4]
 800a674:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a676:	2300      	movs	r3, #0
 800a678:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	3301      	adds	r3, #1
 800a67e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	4a13      	ldr	r2, [pc, #76]	; (800a6d0 <USB_FlushTxFifo+0x64>)
 800a684:	4293      	cmp	r3, r2
 800a686:	d901      	bls.n	800a68c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800a688:	2303      	movs	r3, #3
 800a68a:	e01b      	b.n	800a6c4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	691b      	ldr	r3, [r3, #16]
 800a690:	2b00      	cmp	r3, #0
 800a692:	daf2      	bge.n	800a67a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a694:	2300      	movs	r3, #0
 800a696:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a698:	683b      	ldr	r3, [r7, #0]
 800a69a:	019b      	lsls	r3, r3, #6
 800a69c:	f043 0220 	orr.w	r2, r3, #32
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	3301      	adds	r3, #1
 800a6a8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	4a08      	ldr	r2, [pc, #32]	; (800a6d0 <USB_FlushTxFifo+0x64>)
 800a6ae:	4293      	cmp	r3, r2
 800a6b0:	d901      	bls.n	800a6b6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800a6b2:	2303      	movs	r3, #3
 800a6b4:	e006      	b.n	800a6c4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	691b      	ldr	r3, [r3, #16]
 800a6ba:	f003 0320 	and.w	r3, r3, #32
 800a6be:	2b20      	cmp	r3, #32
 800a6c0:	d0f0      	beq.n	800a6a4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800a6c2:	2300      	movs	r3, #0
}
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	3714      	adds	r7, #20
 800a6c8:	46bd      	mov	sp, r7
 800a6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ce:	4770      	bx	lr
 800a6d0:	00030d40 	.word	0x00030d40

0800a6d4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a6d4:	b480      	push	{r7}
 800a6d6:	b085      	sub	sp, #20
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a6dc:	2300      	movs	r3, #0
 800a6de:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	3301      	adds	r3, #1
 800a6e4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	4a11      	ldr	r2, [pc, #68]	; (800a730 <USB_FlushRxFifo+0x5c>)
 800a6ea:	4293      	cmp	r3, r2
 800a6ec:	d901      	bls.n	800a6f2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a6ee:	2303      	movs	r3, #3
 800a6f0:	e018      	b.n	800a724 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	691b      	ldr	r3, [r3, #16]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	daf2      	bge.n	800a6e0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a6fa:	2300      	movs	r3, #0
 800a6fc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	2210      	movs	r2, #16
 800a702:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	3301      	adds	r3, #1
 800a708:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	4a08      	ldr	r2, [pc, #32]	; (800a730 <USB_FlushRxFifo+0x5c>)
 800a70e:	4293      	cmp	r3, r2
 800a710:	d901      	bls.n	800a716 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a712:	2303      	movs	r3, #3
 800a714:	e006      	b.n	800a724 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	691b      	ldr	r3, [r3, #16]
 800a71a:	f003 0310 	and.w	r3, r3, #16
 800a71e:	2b10      	cmp	r3, #16
 800a720:	d0f0      	beq.n	800a704 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a722:	2300      	movs	r3, #0
}
 800a724:	4618      	mov	r0, r3
 800a726:	3714      	adds	r7, #20
 800a728:	46bd      	mov	sp, r7
 800a72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a72e:	4770      	bx	lr
 800a730:	00030d40 	.word	0x00030d40

0800a734 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a734:	b480      	push	{r7}
 800a736:	b085      	sub	sp, #20
 800a738:	af00      	add	r7, sp, #0
 800a73a:	6078      	str	r0, [r7, #4]
 800a73c:	460b      	mov	r3, r1
 800a73e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a74a:	681a      	ldr	r2, [r3, #0]
 800a74c:	78fb      	ldrb	r3, [r7, #3]
 800a74e:	68f9      	ldr	r1, [r7, #12]
 800a750:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a754:	4313      	orrs	r3, r2
 800a756:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a758:	2300      	movs	r3, #0
}
 800a75a:	4618      	mov	r0, r3
 800a75c:	3714      	adds	r7, #20
 800a75e:	46bd      	mov	sp, r7
 800a760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a764:	4770      	bx	lr

0800a766 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800a766:	b480      	push	{r7}
 800a768:	b087      	sub	sp, #28
 800a76a:	af00      	add	r7, sp, #0
 800a76c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800a772:	693b      	ldr	r3, [r7, #16]
 800a774:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a778:	689b      	ldr	r3, [r3, #8]
 800a77a:	f003 0306 	and.w	r3, r3, #6
 800a77e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	2b00      	cmp	r3, #0
 800a784:	d102      	bne.n	800a78c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800a786:	2300      	movs	r3, #0
 800a788:	75fb      	strb	r3, [r7, #23]
 800a78a:	e00a      	b.n	800a7a2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	2b02      	cmp	r3, #2
 800a790:	d002      	beq.n	800a798 <USB_GetDevSpeed+0x32>
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	2b06      	cmp	r3, #6
 800a796:	d102      	bne.n	800a79e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800a798:	2302      	movs	r3, #2
 800a79a:	75fb      	strb	r3, [r7, #23]
 800a79c:	e001      	b.n	800a7a2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800a79e:	230f      	movs	r3, #15
 800a7a0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800a7a2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	371c      	adds	r7, #28
 800a7a8:	46bd      	mov	sp, r7
 800a7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ae:	4770      	bx	lr

0800a7b0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a7b0:	b480      	push	{r7}
 800a7b2:	b085      	sub	sp, #20
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	6078      	str	r0, [r7, #4]
 800a7b8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a7be:	683b      	ldr	r3, [r7, #0]
 800a7c0:	781b      	ldrb	r3, [r3, #0]
 800a7c2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a7c4:	683b      	ldr	r3, [r7, #0]
 800a7c6:	785b      	ldrb	r3, [r3, #1]
 800a7c8:	2b01      	cmp	r3, #1
 800a7ca:	d13a      	bne.n	800a842 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a7d2:	69da      	ldr	r2, [r3, #28]
 800a7d4:	683b      	ldr	r3, [r7, #0]
 800a7d6:	781b      	ldrb	r3, [r3, #0]
 800a7d8:	f003 030f 	and.w	r3, r3, #15
 800a7dc:	2101      	movs	r1, #1
 800a7de:	fa01 f303 	lsl.w	r3, r1, r3
 800a7e2:	b29b      	uxth	r3, r3
 800a7e4:	68f9      	ldr	r1, [r7, #12]
 800a7e6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a7ea:	4313      	orrs	r3, r2
 800a7ec:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800a7ee:	68bb      	ldr	r3, [r7, #8]
 800a7f0:	015a      	lsls	r2, r3, #5
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	4413      	add	r3, r2
 800a7f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a800:	2b00      	cmp	r3, #0
 800a802:	d155      	bne.n	800a8b0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a804:	68bb      	ldr	r3, [r7, #8]
 800a806:	015a      	lsls	r2, r3, #5
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	4413      	add	r3, r2
 800a80c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a810:	681a      	ldr	r2, [r3, #0]
 800a812:	683b      	ldr	r3, [r7, #0]
 800a814:	68db      	ldr	r3, [r3, #12]
 800a816:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a81a:	683b      	ldr	r3, [r7, #0]
 800a81c:	791b      	ldrb	r3, [r3, #4]
 800a81e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a820:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a822:	68bb      	ldr	r3, [r7, #8]
 800a824:	059b      	lsls	r3, r3, #22
 800a826:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a828:	4313      	orrs	r3, r2
 800a82a:	68ba      	ldr	r2, [r7, #8]
 800a82c:	0151      	lsls	r1, r2, #5
 800a82e:	68fa      	ldr	r2, [r7, #12]
 800a830:	440a      	add	r2, r1
 800a832:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a836:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a83a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a83e:	6013      	str	r3, [r2, #0]
 800a840:	e036      	b.n	800a8b0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a848:	69da      	ldr	r2, [r3, #28]
 800a84a:	683b      	ldr	r3, [r7, #0]
 800a84c:	781b      	ldrb	r3, [r3, #0]
 800a84e:	f003 030f 	and.w	r3, r3, #15
 800a852:	2101      	movs	r1, #1
 800a854:	fa01 f303 	lsl.w	r3, r1, r3
 800a858:	041b      	lsls	r3, r3, #16
 800a85a:	68f9      	ldr	r1, [r7, #12]
 800a85c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a860:	4313      	orrs	r3, r2
 800a862:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800a864:	68bb      	ldr	r3, [r7, #8]
 800a866:	015a      	lsls	r2, r3, #5
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	4413      	add	r3, r2
 800a86c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a876:	2b00      	cmp	r3, #0
 800a878:	d11a      	bne.n	800a8b0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a87a:	68bb      	ldr	r3, [r7, #8]
 800a87c:	015a      	lsls	r2, r3, #5
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	4413      	add	r3, r2
 800a882:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a886:	681a      	ldr	r2, [r3, #0]
 800a888:	683b      	ldr	r3, [r7, #0]
 800a88a:	68db      	ldr	r3, [r3, #12]
 800a88c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800a890:	683b      	ldr	r3, [r7, #0]
 800a892:	791b      	ldrb	r3, [r3, #4]
 800a894:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a896:	430b      	orrs	r3, r1
 800a898:	4313      	orrs	r3, r2
 800a89a:	68ba      	ldr	r2, [r7, #8]
 800a89c:	0151      	lsls	r1, r2, #5
 800a89e:	68fa      	ldr	r2, [r7, #12]
 800a8a0:	440a      	add	r2, r1
 800a8a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a8a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a8aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a8ae:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800a8b0:	2300      	movs	r3, #0
}
 800a8b2:	4618      	mov	r0, r3
 800a8b4:	3714      	adds	r7, #20
 800a8b6:	46bd      	mov	sp, r7
 800a8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8bc:	4770      	bx	lr
	...

0800a8c0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a8c0:	b480      	push	{r7}
 800a8c2:	b085      	sub	sp, #20
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	6078      	str	r0, [r7, #4]
 800a8c8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a8ce:	683b      	ldr	r3, [r7, #0]
 800a8d0:	781b      	ldrb	r3, [r3, #0]
 800a8d2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800a8d4:	683b      	ldr	r3, [r7, #0]
 800a8d6:	785b      	ldrb	r3, [r3, #1]
 800a8d8:	2b01      	cmp	r3, #1
 800a8da:	d161      	bne.n	800a9a0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a8dc:	68bb      	ldr	r3, [r7, #8]
 800a8de:	015a      	lsls	r2, r3, #5
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	4413      	add	r3, r2
 800a8e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a8ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a8f2:	d11f      	bne.n	800a934 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800a8f4:	68bb      	ldr	r3, [r7, #8]
 800a8f6:	015a      	lsls	r2, r3, #5
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	4413      	add	r3, r2
 800a8fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	68ba      	ldr	r2, [r7, #8]
 800a904:	0151      	lsls	r1, r2, #5
 800a906:	68fa      	ldr	r2, [r7, #12]
 800a908:	440a      	add	r2, r1
 800a90a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a90e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a912:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800a914:	68bb      	ldr	r3, [r7, #8]
 800a916:	015a      	lsls	r2, r3, #5
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	4413      	add	r3, r2
 800a91c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	68ba      	ldr	r2, [r7, #8]
 800a924:	0151      	lsls	r1, r2, #5
 800a926:	68fa      	ldr	r2, [r7, #12]
 800a928:	440a      	add	r2, r1
 800a92a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a92e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a932:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a93a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a93c:	683b      	ldr	r3, [r7, #0]
 800a93e:	781b      	ldrb	r3, [r3, #0]
 800a940:	f003 030f 	and.w	r3, r3, #15
 800a944:	2101      	movs	r1, #1
 800a946:	fa01 f303 	lsl.w	r3, r1, r3
 800a94a:	b29b      	uxth	r3, r3
 800a94c:	43db      	mvns	r3, r3
 800a94e:	68f9      	ldr	r1, [r7, #12]
 800a950:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a954:	4013      	ands	r3, r2
 800a956:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a95e:	69da      	ldr	r2, [r3, #28]
 800a960:	683b      	ldr	r3, [r7, #0]
 800a962:	781b      	ldrb	r3, [r3, #0]
 800a964:	f003 030f 	and.w	r3, r3, #15
 800a968:	2101      	movs	r1, #1
 800a96a:	fa01 f303 	lsl.w	r3, r1, r3
 800a96e:	b29b      	uxth	r3, r3
 800a970:	43db      	mvns	r3, r3
 800a972:	68f9      	ldr	r1, [r7, #12]
 800a974:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a978:	4013      	ands	r3, r2
 800a97a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800a97c:	68bb      	ldr	r3, [r7, #8]
 800a97e:	015a      	lsls	r2, r3, #5
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	4413      	add	r3, r2
 800a984:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a988:	681a      	ldr	r2, [r3, #0]
 800a98a:	68bb      	ldr	r3, [r7, #8]
 800a98c:	0159      	lsls	r1, r3, #5
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	440b      	add	r3, r1
 800a992:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a996:	4619      	mov	r1, r3
 800a998:	4b35      	ldr	r3, [pc, #212]	; (800aa70 <USB_DeactivateEndpoint+0x1b0>)
 800a99a:	4013      	ands	r3, r2
 800a99c:	600b      	str	r3, [r1, #0]
 800a99e:	e060      	b.n	800aa62 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a9a0:	68bb      	ldr	r3, [r7, #8]
 800a9a2:	015a      	lsls	r2, r3, #5
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	4413      	add	r3, r2
 800a9a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a9b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a9b6:	d11f      	bne.n	800a9f8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a9b8:	68bb      	ldr	r3, [r7, #8]
 800a9ba:	015a      	lsls	r2, r3, #5
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	4413      	add	r3, r2
 800a9c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	68ba      	ldr	r2, [r7, #8]
 800a9c8:	0151      	lsls	r1, r2, #5
 800a9ca:	68fa      	ldr	r2, [r7, #12]
 800a9cc:	440a      	add	r2, r1
 800a9ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a9d2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a9d6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800a9d8:	68bb      	ldr	r3, [r7, #8]
 800a9da:	015a      	lsls	r2, r3, #5
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	4413      	add	r3, r2
 800a9e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	68ba      	ldr	r2, [r7, #8]
 800a9e8:	0151      	lsls	r1, r2, #5
 800a9ea:	68fa      	ldr	r2, [r7, #12]
 800a9ec:	440a      	add	r2, r1
 800a9ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a9f2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a9f6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a9fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800aa00:	683b      	ldr	r3, [r7, #0]
 800aa02:	781b      	ldrb	r3, [r3, #0]
 800aa04:	f003 030f 	and.w	r3, r3, #15
 800aa08:	2101      	movs	r1, #1
 800aa0a:	fa01 f303 	lsl.w	r3, r1, r3
 800aa0e:	041b      	lsls	r3, r3, #16
 800aa10:	43db      	mvns	r3, r3
 800aa12:	68f9      	ldr	r1, [r7, #12]
 800aa14:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800aa18:	4013      	ands	r3, r2
 800aa1a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa22:	69da      	ldr	r2, [r3, #28]
 800aa24:	683b      	ldr	r3, [r7, #0]
 800aa26:	781b      	ldrb	r3, [r3, #0]
 800aa28:	f003 030f 	and.w	r3, r3, #15
 800aa2c:	2101      	movs	r1, #1
 800aa2e:	fa01 f303 	lsl.w	r3, r1, r3
 800aa32:	041b      	lsls	r3, r3, #16
 800aa34:	43db      	mvns	r3, r3
 800aa36:	68f9      	ldr	r1, [r7, #12]
 800aa38:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800aa3c:	4013      	ands	r3, r2
 800aa3e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800aa40:	68bb      	ldr	r3, [r7, #8]
 800aa42:	015a      	lsls	r2, r3, #5
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	4413      	add	r3, r2
 800aa48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa4c:	681a      	ldr	r2, [r3, #0]
 800aa4e:	68bb      	ldr	r3, [r7, #8]
 800aa50:	0159      	lsls	r1, r3, #5
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	440b      	add	r3, r1
 800aa56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa5a:	4619      	mov	r1, r3
 800aa5c:	4b05      	ldr	r3, [pc, #20]	; (800aa74 <USB_DeactivateEndpoint+0x1b4>)
 800aa5e:	4013      	ands	r3, r2
 800aa60:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800aa62:	2300      	movs	r3, #0
}
 800aa64:	4618      	mov	r0, r3
 800aa66:	3714      	adds	r7, #20
 800aa68:	46bd      	mov	sp, r7
 800aa6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6e:	4770      	bx	lr
 800aa70:	ec337800 	.word	0xec337800
 800aa74:	eff37800 	.word	0xeff37800

0800aa78 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800aa78:	b580      	push	{r7, lr}
 800aa7a:	b08a      	sub	sp, #40	; 0x28
 800aa7c:	af02      	add	r7, sp, #8
 800aa7e:	60f8      	str	r0, [r7, #12]
 800aa80:	60b9      	str	r1, [r7, #8]
 800aa82:	4613      	mov	r3, r2
 800aa84:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800aa8a:	68bb      	ldr	r3, [r7, #8]
 800aa8c:	781b      	ldrb	r3, [r3, #0]
 800aa8e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800aa90:	68bb      	ldr	r3, [r7, #8]
 800aa92:	785b      	ldrb	r3, [r3, #1]
 800aa94:	2b01      	cmp	r3, #1
 800aa96:	f040 815c 	bne.w	800ad52 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800aa9a:	68bb      	ldr	r3, [r7, #8]
 800aa9c:	699b      	ldr	r3, [r3, #24]
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d132      	bne.n	800ab08 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800aaa2:	69bb      	ldr	r3, [r7, #24]
 800aaa4:	015a      	lsls	r2, r3, #5
 800aaa6:	69fb      	ldr	r3, [r7, #28]
 800aaa8:	4413      	add	r3, r2
 800aaaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aaae:	691b      	ldr	r3, [r3, #16]
 800aab0:	69ba      	ldr	r2, [r7, #24]
 800aab2:	0151      	lsls	r1, r2, #5
 800aab4:	69fa      	ldr	r2, [r7, #28]
 800aab6:	440a      	add	r2, r1
 800aab8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aabc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800aac0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800aac4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800aac6:	69bb      	ldr	r3, [r7, #24]
 800aac8:	015a      	lsls	r2, r3, #5
 800aaca:	69fb      	ldr	r3, [r7, #28]
 800aacc:	4413      	add	r3, r2
 800aace:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aad2:	691b      	ldr	r3, [r3, #16]
 800aad4:	69ba      	ldr	r2, [r7, #24]
 800aad6:	0151      	lsls	r1, r2, #5
 800aad8:	69fa      	ldr	r2, [r7, #28]
 800aada:	440a      	add	r2, r1
 800aadc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aae0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800aae4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800aae6:	69bb      	ldr	r3, [r7, #24]
 800aae8:	015a      	lsls	r2, r3, #5
 800aaea:	69fb      	ldr	r3, [r7, #28]
 800aaec:	4413      	add	r3, r2
 800aaee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aaf2:	691b      	ldr	r3, [r3, #16]
 800aaf4:	69ba      	ldr	r2, [r7, #24]
 800aaf6:	0151      	lsls	r1, r2, #5
 800aaf8:	69fa      	ldr	r2, [r7, #28]
 800aafa:	440a      	add	r2, r1
 800aafc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ab00:	0cdb      	lsrs	r3, r3, #19
 800ab02:	04db      	lsls	r3, r3, #19
 800ab04:	6113      	str	r3, [r2, #16]
 800ab06:	e074      	b.n	800abf2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ab08:	69bb      	ldr	r3, [r7, #24]
 800ab0a:	015a      	lsls	r2, r3, #5
 800ab0c:	69fb      	ldr	r3, [r7, #28]
 800ab0e:	4413      	add	r3, r2
 800ab10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab14:	691b      	ldr	r3, [r3, #16]
 800ab16:	69ba      	ldr	r2, [r7, #24]
 800ab18:	0151      	lsls	r1, r2, #5
 800ab1a:	69fa      	ldr	r2, [r7, #28]
 800ab1c:	440a      	add	r2, r1
 800ab1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ab22:	0cdb      	lsrs	r3, r3, #19
 800ab24:	04db      	lsls	r3, r3, #19
 800ab26:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ab28:	69bb      	ldr	r3, [r7, #24]
 800ab2a:	015a      	lsls	r2, r3, #5
 800ab2c:	69fb      	ldr	r3, [r7, #28]
 800ab2e:	4413      	add	r3, r2
 800ab30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab34:	691b      	ldr	r3, [r3, #16]
 800ab36:	69ba      	ldr	r2, [r7, #24]
 800ab38:	0151      	lsls	r1, r2, #5
 800ab3a:	69fa      	ldr	r2, [r7, #28]
 800ab3c:	440a      	add	r2, r1
 800ab3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ab42:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ab46:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ab4a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800ab4c:	69bb      	ldr	r3, [r7, #24]
 800ab4e:	015a      	lsls	r2, r3, #5
 800ab50:	69fb      	ldr	r3, [r7, #28]
 800ab52:	4413      	add	r3, r2
 800ab54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab58:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800ab5a:	68bb      	ldr	r3, [r7, #8]
 800ab5c:	6999      	ldr	r1, [r3, #24]
 800ab5e:	68bb      	ldr	r3, [r7, #8]
 800ab60:	68db      	ldr	r3, [r3, #12]
 800ab62:	440b      	add	r3, r1
 800ab64:	1e59      	subs	r1, r3, #1
 800ab66:	68bb      	ldr	r3, [r7, #8]
 800ab68:	68db      	ldr	r3, [r3, #12]
 800ab6a:	fbb1 f3f3 	udiv	r3, r1, r3
 800ab6e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800ab70:	4b9d      	ldr	r3, [pc, #628]	; (800ade8 <USB_EPStartXfer+0x370>)
 800ab72:	400b      	ands	r3, r1
 800ab74:	69b9      	ldr	r1, [r7, #24]
 800ab76:	0148      	lsls	r0, r1, #5
 800ab78:	69f9      	ldr	r1, [r7, #28]
 800ab7a:	4401      	add	r1, r0
 800ab7c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800ab80:	4313      	orrs	r3, r2
 800ab82:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800ab84:	69bb      	ldr	r3, [r7, #24]
 800ab86:	015a      	lsls	r2, r3, #5
 800ab88:	69fb      	ldr	r3, [r7, #28]
 800ab8a:	4413      	add	r3, r2
 800ab8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab90:	691a      	ldr	r2, [r3, #16]
 800ab92:	68bb      	ldr	r3, [r7, #8]
 800ab94:	699b      	ldr	r3, [r3, #24]
 800ab96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ab9a:	69b9      	ldr	r1, [r7, #24]
 800ab9c:	0148      	lsls	r0, r1, #5
 800ab9e:	69f9      	ldr	r1, [r7, #28]
 800aba0:	4401      	add	r1, r0
 800aba2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800aba6:	4313      	orrs	r3, r2
 800aba8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800abaa:	68bb      	ldr	r3, [r7, #8]
 800abac:	791b      	ldrb	r3, [r3, #4]
 800abae:	2b01      	cmp	r3, #1
 800abb0:	d11f      	bne.n	800abf2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800abb2:	69bb      	ldr	r3, [r7, #24]
 800abb4:	015a      	lsls	r2, r3, #5
 800abb6:	69fb      	ldr	r3, [r7, #28]
 800abb8:	4413      	add	r3, r2
 800abba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800abbe:	691b      	ldr	r3, [r3, #16]
 800abc0:	69ba      	ldr	r2, [r7, #24]
 800abc2:	0151      	lsls	r1, r2, #5
 800abc4:	69fa      	ldr	r2, [r7, #28]
 800abc6:	440a      	add	r2, r1
 800abc8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800abcc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800abd0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800abd2:	69bb      	ldr	r3, [r7, #24]
 800abd4:	015a      	lsls	r2, r3, #5
 800abd6:	69fb      	ldr	r3, [r7, #28]
 800abd8:	4413      	add	r3, r2
 800abda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800abde:	691b      	ldr	r3, [r3, #16]
 800abe0:	69ba      	ldr	r2, [r7, #24]
 800abe2:	0151      	lsls	r1, r2, #5
 800abe4:	69fa      	ldr	r2, [r7, #28]
 800abe6:	440a      	add	r2, r1
 800abe8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800abec:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800abf0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800abf2:	79fb      	ldrb	r3, [r7, #7]
 800abf4:	2b01      	cmp	r3, #1
 800abf6:	d14b      	bne.n	800ac90 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800abf8:	68bb      	ldr	r3, [r7, #8]
 800abfa:	695b      	ldr	r3, [r3, #20]
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d009      	beq.n	800ac14 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800ac00:	69bb      	ldr	r3, [r7, #24]
 800ac02:	015a      	lsls	r2, r3, #5
 800ac04:	69fb      	ldr	r3, [r7, #28]
 800ac06:	4413      	add	r3, r2
 800ac08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac0c:	461a      	mov	r2, r3
 800ac0e:	68bb      	ldr	r3, [r7, #8]
 800ac10:	695b      	ldr	r3, [r3, #20]
 800ac12:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800ac14:	68bb      	ldr	r3, [r7, #8]
 800ac16:	791b      	ldrb	r3, [r3, #4]
 800ac18:	2b01      	cmp	r3, #1
 800ac1a:	d128      	bne.n	800ac6e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ac1c:	69fb      	ldr	r3, [r7, #28]
 800ac1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac22:	689b      	ldr	r3, [r3, #8]
 800ac24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d110      	bne.n	800ac4e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800ac2c:	69bb      	ldr	r3, [r7, #24]
 800ac2e:	015a      	lsls	r2, r3, #5
 800ac30:	69fb      	ldr	r3, [r7, #28]
 800ac32:	4413      	add	r3, r2
 800ac34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	69ba      	ldr	r2, [r7, #24]
 800ac3c:	0151      	lsls	r1, r2, #5
 800ac3e:	69fa      	ldr	r2, [r7, #28]
 800ac40:	440a      	add	r2, r1
 800ac42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ac46:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ac4a:	6013      	str	r3, [r2, #0]
 800ac4c:	e00f      	b.n	800ac6e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800ac4e:	69bb      	ldr	r3, [r7, #24]
 800ac50:	015a      	lsls	r2, r3, #5
 800ac52:	69fb      	ldr	r3, [r7, #28]
 800ac54:	4413      	add	r3, r2
 800ac56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	69ba      	ldr	r2, [r7, #24]
 800ac5e:	0151      	lsls	r1, r2, #5
 800ac60:	69fa      	ldr	r2, [r7, #28]
 800ac62:	440a      	add	r2, r1
 800ac64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ac68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ac6c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ac6e:	69bb      	ldr	r3, [r7, #24]
 800ac70:	015a      	lsls	r2, r3, #5
 800ac72:	69fb      	ldr	r3, [r7, #28]
 800ac74:	4413      	add	r3, r2
 800ac76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	69ba      	ldr	r2, [r7, #24]
 800ac7e:	0151      	lsls	r1, r2, #5
 800ac80:	69fa      	ldr	r2, [r7, #28]
 800ac82:	440a      	add	r2, r1
 800ac84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ac88:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ac8c:	6013      	str	r3, [r2, #0]
 800ac8e:	e133      	b.n	800aef8 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ac90:	69bb      	ldr	r3, [r7, #24]
 800ac92:	015a      	lsls	r2, r3, #5
 800ac94:	69fb      	ldr	r3, [r7, #28]
 800ac96:	4413      	add	r3, r2
 800ac98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	69ba      	ldr	r2, [r7, #24]
 800aca0:	0151      	lsls	r1, r2, #5
 800aca2:	69fa      	ldr	r2, [r7, #28]
 800aca4:	440a      	add	r2, r1
 800aca6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800acaa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800acae:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800acb0:	68bb      	ldr	r3, [r7, #8]
 800acb2:	791b      	ldrb	r3, [r3, #4]
 800acb4:	2b01      	cmp	r3, #1
 800acb6:	d015      	beq.n	800ace4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800acb8:	68bb      	ldr	r3, [r7, #8]
 800acba:	699b      	ldr	r3, [r3, #24]
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	f000 811b 	beq.w	800aef8 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800acc2:	69fb      	ldr	r3, [r7, #28]
 800acc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800acc8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800acca:	68bb      	ldr	r3, [r7, #8]
 800accc:	781b      	ldrb	r3, [r3, #0]
 800acce:	f003 030f 	and.w	r3, r3, #15
 800acd2:	2101      	movs	r1, #1
 800acd4:	fa01 f303 	lsl.w	r3, r1, r3
 800acd8:	69f9      	ldr	r1, [r7, #28]
 800acda:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800acde:	4313      	orrs	r3, r2
 800ace0:	634b      	str	r3, [r1, #52]	; 0x34
 800ace2:	e109      	b.n	800aef8 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ace4:	69fb      	ldr	r3, [r7, #28]
 800ace6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800acea:	689b      	ldr	r3, [r3, #8]
 800acec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d110      	bne.n	800ad16 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800acf4:	69bb      	ldr	r3, [r7, #24]
 800acf6:	015a      	lsls	r2, r3, #5
 800acf8:	69fb      	ldr	r3, [r7, #28]
 800acfa:	4413      	add	r3, r2
 800acfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	69ba      	ldr	r2, [r7, #24]
 800ad04:	0151      	lsls	r1, r2, #5
 800ad06:	69fa      	ldr	r2, [r7, #28]
 800ad08:	440a      	add	r2, r1
 800ad0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ad0e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ad12:	6013      	str	r3, [r2, #0]
 800ad14:	e00f      	b.n	800ad36 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800ad16:	69bb      	ldr	r3, [r7, #24]
 800ad18:	015a      	lsls	r2, r3, #5
 800ad1a:	69fb      	ldr	r3, [r7, #28]
 800ad1c:	4413      	add	r3, r2
 800ad1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	69ba      	ldr	r2, [r7, #24]
 800ad26:	0151      	lsls	r1, r2, #5
 800ad28:	69fa      	ldr	r2, [r7, #28]
 800ad2a:	440a      	add	r2, r1
 800ad2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ad30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ad34:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800ad36:	68bb      	ldr	r3, [r7, #8]
 800ad38:	6919      	ldr	r1, [r3, #16]
 800ad3a:	68bb      	ldr	r3, [r7, #8]
 800ad3c:	781a      	ldrb	r2, [r3, #0]
 800ad3e:	68bb      	ldr	r3, [r7, #8]
 800ad40:	699b      	ldr	r3, [r3, #24]
 800ad42:	b298      	uxth	r0, r3
 800ad44:	79fb      	ldrb	r3, [r7, #7]
 800ad46:	9300      	str	r3, [sp, #0]
 800ad48:	4603      	mov	r3, r0
 800ad4a:	68f8      	ldr	r0, [r7, #12]
 800ad4c:	f000 fade 	bl	800b30c <USB_WritePacket>
 800ad50:	e0d2      	b.n	800aef8 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800ad52:	69bb      	ldr	r3, [r7, #24]
 800ad54:	015a      	lsls	r2, r3, #5
 800ad56:	69fb      	ldr	r3, [r7, #28]
 800ad58:	4413      	add	r3, r2
 800ad5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad5e:	691b      	ldr	r3, [r3, #16]
 800ad60:	69ba      	ldr	r2, [r7, #24]
 800ad62:	0151      	lsls	r1, r2, #5
 800ad64:	69fa      	ldr	r2, [r7, #28]
 800ad66:	440a      	add	r2, r1
 800ad68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ad6c:	0cdb      	lsrs	r3, r3, #19
 800ad6e:	04db      	lsls	r3, r3, #19
 800ad70:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800ad72:	69bb      	ldr	r3, [r7, #24]
 800ad74:	015a      	lsls	r2, r3, #5
 800ad76:	69fb      	ldr	r3, [r7, #28]
 800ad78:	4413      	add	r3, r2
 800ad7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad7e:	691b      	ldr	r3, [r3, #16]
 800ad80:	69ba      	ldr	r2, [r7, #24]
 800ad82:	0151      	lsls	r1, r2, #5
 800ad84:	69fa      	ldr	r2, [r7, #28]
 800ad86:	440a      	add	r2, r1
 800ad88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ad8c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ad90:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ad94:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800ad96:	68bb      	ldr	r3, [r7, #8]
 800ad98:	699b      	ldr	r3, [r3, #24]
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d126      	bne.n	800adec <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800ad9e:	69bb      	ldr	r3, [r7, #24]
 800ada0:	015a      	lsls	r2, r3, #5
 800ada2:	69fb      	ldr	r3, [r7, #28]
 800ada4:	4413      	add	r3, r2
 800ada6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800adaa:	691a      	ldr	r2, [r3, #16]
 800adac:	68bb      	ldr	r3, [r7, #8]
 800adae:	68db      	ldr	r3, [r3, #12]
 800adb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800adb4:	69b9      	ldr	r1, [r7, #24]
 800adb6:	0148      	lsls	r0, r1, #5
 800adb8:	69f9      	ldr	r1, [r7, #28]
 800adba:	4401      	add	r1, r0
 800adbc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800adc0:	4313      	orrs	r3, r2
 800adc2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800adc4:	69bb      	ldr	r3, [r7, #24]
 800adc6:	015a      	lsls	r2, r3, #5
 800adc8:	69fb      	ldr	r3, [r7, #28]
 800adca:	4413      	add	r3, r2
 800adcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800add0:	691b      	ldr	r3, [r3, #16]
 800add2:	69ba      	ldr	r2, [r7, #24]
 800add4:	0151      	lsls	r1, r2, #5
 800add6:	69fa      	ldr	r2, [r7, #28]
 800add8:	440a      	add	r2, r1
 800adda:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800adde:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ade2:	6113      	str	r3, [r2, #16]
 800ade4:	e03a      	b.n	800ae5c <USB_EPStartXfer+0x3e4>
 800ade6:	bf00      	nop
 800ade8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800adec:	68bb      	ldr	r3, [r7, #8]
 800adee:	699a      	ldr	r2, [r3, #24]
 800adf0:	68bb      	ldr	r3, [r7, #8]
 800adf2:	68db      	ldr	r3, [r3, #12]
 800adf4:	4413      	add	r3, r2
 800adf6:	1e5a      	subs	r2, r3, #1
 800adf8:	68bb      	ldr	r3, [r7, #8]
 800adfa:	68db      	ldr	r3, [r3, #12]
 800adfc:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae00:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800ae02:	68bb      	ldr	r3, [r7, #8]
 800ae04:	68db      	ldr	r3, [r3, #12]
 800ae06:	8afa      	ldrh	r2, [r7, #22]
 800ae08:	fb03 f202 	mul.w	r2, r3, r2
 800ae0c:	68bb      	ldr	r3, [r7, #8]
 800ae0e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800ae10:	69bb      	ldr	r3, [r7, #24]
 800ae12:	015a      	lsls	r2, r3, #5
 800ae14:	69fb      	ldr	r3, [r7, #28]
 800ae16:	4413      	add	r3, r2
 800ae18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae1c:	691a      	ldr	r2, [r3, #16]
 800ae1e:	8afb      	ldrh	r3, [r7, #22]
 800ae20:	04d9      	lsls	r1, r3, #19
 800ae22:	4b38      	ldr	r3, [pc, #224]	; (800af04 <USB_EPStartXfer+0x48c>)
 800ae24:	400b      	ands	r3, r1
 800ae26:	69b9      	ldr	r1, [r7, #24]
 800ae28:	0148      	lsls	r0, r1, #5
 800ae2a:	69f9      	ldr	r1, [r7, #28]
 800ae2c:	4401      	add	r1, r0
 800ae2e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ae32:	4313      	orrs	r3, r2
 800ae34:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800ae36:	69bb      	ldr	r3, [r7, #24]
 800ae38:	015a      	lsls	r2, r3, #5
 800ae3a:	69fb      	ldr	r3, [r7, #28]
 800ae3c:	4413      	add	r3, r2
 800ae3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae42:	691a      	ldr	r2, [r3, #16]
 800ae44:	68bb      	ldr	r3, [r7, #8]
 800ae46:	69db      	ldr	r3, [r3, #28]
 800ae48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ae4c:	69b9      	ldr	r1, [r7, #24]
 800ae4e:	0148      	lsls	r0, r1, #5
 800ae50:	69f9      	ldr	r1, [r7, #28]
 800ae52:	4401      	add	r1, r0
 800ae54:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ae58:	4313      	orrs	r3, r2
 800ae5a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800ae5c:	79fb      	ldrb	r3, [r7, #7]
 800ae5e:	2b01      	cmp	r3, #1
 800ae60:	d10d      	bne.n	800ae7e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800ae62:	68bb      	ldr	r3, [r7, #8]
 800ae64:	691b      	ldr	r3, [r3, #16]
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d009      	beq.n	800ae7e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800ae6a:	68bb      	ldr	r3, [r7, #8]
 800ae6c:	6919      	ldr	r1, [r3, #16]
 800ae6e:	69bb      	ldr	r3, [r7, #24]
 800ae70:	015a      	lsls	r2, r3, #5
 800ae72:	69fb      	ldr	r3, [r7, #28]
 800ae74:	4413      	add	r3, r2
 800ae76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae7a:	460a      	mov	r2, r1
 800ae7c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800ae7e:	68bb      	ldr	r3, [r7, #8]
 800ae80:	791b      	ldrb	r3, [r3, #4]
 800ae82:	2b01      	cmp	r3, #1
 800ae84:	d128      	bne.n	800aed8 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ae86:	69fb      	ldr	r3, [r7, #28]
 800ae88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae8c:	689b      	ldr	r3, [r3, #8]
 800ae8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d110      	bne.n	800aeb8 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800ae96:	69bb      	ldr	r3, [r7, #24]
 800ae98:	015a      	lsls	r2, r3, #5
 800ae9a:	69fb      	ldr	r3, [r7, #28]
 800ae9c:	4413      	add	r3, r2
 800ae9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	69ba      	ldr	r2, [r7, #24]
 800aea6:	0151      	lsls	r1, r2, #5
 800aea8:	69fa      	ldr	r2, [r7, #28]
 800aeaa:	440a      	add	r2, r1
 800aeac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aeb0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800aeb4:	6013      	str	r3, [r2, #0]
 800aeb6:	e00f      	b.n	800aed8 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800aeb8:	69bb      	ldr	r3, [r7, #24]
 800aeba:	015a      	lsls	r2, r3, #5
 800aebc:	69fb      	ldr	r3, [r7, #28]
 800aebe:	4413      	add	r3, r2
 800aec0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	69ba      	ldr	r2, [r7, #24]
 800aec8:	0151      	lsls	r1, r2, #5
 800aeca:	69fa      	ldr	r2, [r7, #28]
 800aecc:	440a      	add	r2, r1
 800aece:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aed2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aed6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800aed8:	69bb      	ldr	r3, [r7, #24]
 800aeda:	015a      	lsls	r2, r3, #5
 800aedc:	69fb      	ldr	r3, [r7, #28]
 800aede:	4413      	add	r3, r2
 800aee0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	69ba      	ldr	r2, [r7, #24]
 800aee8:	0151      	lsls	r1, r2, #5
 800aeea:	69fa      	ldr	r2, [r7, #28]
 800aeec:	440a      	add	r2, r1
 800aeee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aef2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800aef6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800aef8:	2300      	movs	r3, #0
}
 800aefa:	4618      	mov	r0, r3
 800aefc:	3720      	adds	r7, #32
 800aefe:	46bd      	mov	sp, r7
 800af00:	bd80      	pop	{r7, pc}
 800af02:	bf00      	nop
 800af04:	1ff80000 	.word	0x1ff80000

0800af08 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800af08:	b480      	push	{r7}
 800af0a:	b087      	sub	sp, #28
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	60f8      	str	r0, [r7, #12]
 800af10:	60b9      	str	r1, [r7, #8]
 800af12:	4613      	mov	r3, r2
 800af14:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800af1a:	68bb      	ldr	r3, [r7, #8]
 800af1c:	781b      	ldrb	r3, [r3, #0]
 800af1e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800af20:	68bb      	ldr	r3, [r7, #8]
 800af22:	785b      	ldrb	r3, [r3, #1]
 800af24:	2b01      	cmp	r3, #1
 800af26:	f040 80ce 	bne.w	800b0c6 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800af2a:	68bb      	ldr	r3, [r7, #8]
 800af2c:	699b      	ldr	r3, [r3, #24]
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d132      	bne.n	800af98 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800af32:	693b      	ldr	r3, [r7, #16]
 800af34:	015a      	lsls	r2, r3, #5
 800af36:	697b      	ldr	r3, [r7, #20]
 800af38:	4413      	add	r3, r2
 800af3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af3e:	691b      	ldr	r3, [r3, #16]
 800af40:	693a      	ldr	r2, [r7, #16]
 800af42:	0151      	lsls	r1, r2, #5
 800af44:	697a      	ldr	r2, [r7, #20]
 800af46:	440a      	add	r2, r1
 800af48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800af4c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800af50:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800af54:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800af56:	693b      	ldr	r3, [r7, #16]
 800af58:	015a      	lsls	r2, r3, #5
 800af5a:	697b      	ldr	r3, [r7, #20]
 800af5c:	4413      	add	r3, r2
 800af5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af62:	691b      	ldr	r3, [r3, #16]
 800af64:	693a      	ldr	r2, [r7, #16]
 800af66:	0151      	lsls	r1, r2, #5
 800af68:	697a      	ldr	r2, [r7, #20]
 800af6a:	440a      	add	r2, r1
 800af6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800af70:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800af74:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800af76:	693b      	ldr	r3, [r7, #16]
 800af78:	015a      	lsls	r2, r3, #5
 800af7a:	697b      	ldr	r3, [r7, #20]
 800af7c:	4413      	add	r3, r2
 800af7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af82:	691b      	ldr	r3, [r3, #16]
 800af84:	693a      	ldr	r2, [r7, #16]
 800af86:	0151      	lsls	r1, r2, #5
 800af88:	697a      	ldr	r2, [r7, #20]
 800af8a:	440a      	add	r2, r1
 800af8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800af90:	0cdb      	lsrs	r3, r3, #19
 800af92:	04db      	lsls	r3, r3, #19
 800af94:	6113      	str	r3, [r2, #16]
 800af96:	e04e      	b.n	800b036 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800af98:	693b      	ldr	r3, [r7, #16]
 800af9a:	015a      	lsls	r2, r3, #5
 800af9c:	697b      	ldr	r3, [r7, #20]
 800af9e:	4413      	add	r3, r2
 800afa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800afa4:	691b      	ldr	r3, [r3, #16]
 800afa6:	693a      	ldr	r2, [r7, #16]
 800afa8:	0151      	lsls	r1, r2, #5
 800afaa:	697a      	ldr	r2, [r7, #20]
 800afac:	440a      	add	r2, r1
 800afae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800afb2:	0cdb      	lsrs	r3, r3, #19
 800afb4:	04db      	lsls	r3, r3, #19
 800afb6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800afb8:	693b      	ldr	r3, [r7, #16]
 800afba:	015a      	lsls	r2, r3, #5
 800afbc:	697b      	ldr	r3, [r7, #20]
 800afbe:	4413      	add	r3, r2
 800afc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800afc4:	691b      	ldr	r3, [r3, #16]
 800afc6:	693a      	ldr	r2, [r7, #16]
 800afc8:	0151      	lsls	r1, r2, #5
 800afca:	697a      	ldr	r2, [r7, #20]
 800afcc:	440a      	add	r2, r1
 800afce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800afd2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800afd6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800afda:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800afdc:	68bb      	ldr	r3, [r7, #8]
 800afde:	699a      	ldr	r2, [r3, #24]
 800afe0:	68bb      	ldr	r3, [r7, #8]
 800afe2:	68db      	ldr	r3, [r3, #12]
 800afe4:	429a      	cmp	r2, r3
 800afe6:	d903      	bls.n	800aff0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800afe8:	68bb      	ldr	r3, [r7, #8]
 800afea:	68da      	ldr	r2, [r3, #12]
 800afec:	68bb      	ldr	r3, [r7, #8]
 800afee:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800aff0:	693b      	ldr	r3, [r7, #16]
 800aff2:	015a      	lsls	r2, r3, #5
 800aff4:	697b      	ldr	r3, [r7, #20]
 800aff6:	4413      	add	r3, r2
 800aff8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800affc:	691b      	ldr	r3, [r3, #16]
 800affe:	693a      	ldr	r2, [r7, #16]
 800b000:	0151      	lsls	r1, r2, #5
 800b002:	697a      	ldr	r2, [r7, #20]
 800b004:	440a      	add	r2, r1
 800b006:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b00a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b00e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b010:	693b      	ldr	r3, [r7, #16]
 800b012:	015a      	lsls	r2, r3, #5
 800b014:	697b      	ldr	r3, [r7, #20]
 800b016:	4413      	add	r3, r2
 800b018:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b01c:	691a      	ldr	r2, [r3, #16]
 800b01e:	68bb      	ldr	r3, [r7, #8]
 800b020:	699b      	ldr	r3, [r3, #24]
 800b022:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b026:	6939      	ldr	r1, [r7, #16]
 800b028:	0148      	lsls	r0, r1, #5
 800b02a:	6979      	ldr	r1, [r7, #20]
 800b02c:	4401      	add	r1, r0
 800b02e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b032:	4313      	orrs	r3, r2
 800b034:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800b036:	79fb      	ldrb	r3, [r7, #7]
 800b038:	2b01      	cmp	r3, #1
 800b03a:	d11e      	bne.n	800b07a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800b03c:	68bb      	ldr	r3, [r7, #8]
 800b03e:	695b      	ldr	r3, [r3, #20]
 800b040:	2b00      	cmp	r3, #0
 800b042:	d009      	beq.n	800b058 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800b044:	693b      	ldr	r3, [r7, #16]
 800b046:	015a      	lsls	r2, r3, #5
 800b048:	697b      	ldr	r3, [r7, #20]
 800b04a:	4413      	add	r3, r2
 800b04c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b050:	461a      	mov	r2, r3
 800b052:	68bb      	ldr	r3, [r7, #8]
 800b054:	695b      	ldr	r3, [r3, #20]
 800b056:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b058:	693b      	ldr	r3, [r7, #16]
 800b05a:	015a      	lsls	r2, r3, #5
 800b05c:	697b      	ldr	r3, [r7, #20]
 800b05e:	4413      	add	r3, r2
 800b060:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	693a      	ldr	r2, [r7, #16]
 800b068:	0151      	lsls	r1, r2, #5
 800b06a:	697a      	ldr	r2, [r7, #20]
 800b06c:	440a      	add	r2, r1
 800b06e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b072:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b076:	6013      	str	r3, [r2, #0]
 800b078:	e097      	b.n	800b1aa <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b07a:	693b      	ldr	r3, [r7, #16]
 800b07c:	015a      	lsls	r2, r3, #5
 800b07e:	697b      	ldr	r3, [r7, #20]
 800b080:	4413      	add	r3, r2
 800b082:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	693a      	ldr	r2, [r7, #16]
 800b08a:	0151      	lsls	r1, r2, #5
 800b08c:	697a      	ldr	r2, [r7, #20]
 800b08e:	440a      	add	r2, r1
 800b090:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b094:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b098:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800b09a:	68bb      	ldr	r3, [r7, #8]
 800b09c:	699b      	ldr	r3, [r3, #24]
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	f000 8083 	beq.w	800b1aa <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b0a4:	697b      	ldr	r3, [r7, #20]
 800b0a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b0aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b0ac:	68bb      	ldr	r3, [r7, #8]
 800b0ae:	781b      	ldrb	r3, [r3, #0]
 800b0b0:	f003 030f 	and.w	r3, r3, #15
 800b0b4:	2101      	movs	r1, #1
 800b0b6:	fa01 f303 	lsl.w	r3, r1, r3
 800b0ba:	6979      	ldr	r1, [r7, #20]
 800b0bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b0c0:	4313      	orrs	r3, r2
 800b0c2:	634b      	str	r3, [r1, #52]	; 0x34
 800b0c4:	e071      	b.n	800b1aa <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b0c6:	693b      	ldr	r3, [r7, #16]
 800b0c8:	015a      	lsls	r2, r3, #5
 800b0ca:	697b      	ldr	r3, [r7, #20]
 800b0cc:	4413      	add	r3, r2
 800b0ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b0d2:	691b      	ldr	r3, [r3, #16]
 800b0d4:	693a      	ldr	r2, [r7, #16]
 800b0d6:	0151      	lsls	r1, r2, #5
 800b0d8:	697a      	ldr	r2, [r7, #20]
 800b0da:	440a      	add	r2, r1
 800b0dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b0e0:	0cdb      	lsrs	r3, r3, #19
 800b0e2:	04db      	lsls	r3, r3, #19
 800b0e4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b0e6:	693b      	ldr	r3, [r7, #16]
 800b0e8:	015a      	lsls	r2, r3, #5
 800b0ea:	697b      	ldr	r3, [r7, #20]
 800b0ec:	4413      	add	r3, r2
 800b0ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b0f2:	691b      	ldr	r3, [r3, #16]
 800b0f4:	693a      	ldr	r2, [r7, #16]
 800b0f6:	0151      	lsls	r1, r2, #5
 800b0f8:	697a      	ldr	r2, [r7, #20]
 800b0fa:	440a      	add	r2, r1
 800b0fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b100:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b104:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b108:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800b10a:	68bb      	ldr	r3, [r7, #8]
 800b10c:	699b      	ldr	r3, [r3, #24]
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d003      	beq.n	800b11a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800b112:	68bb      	ldr	r3, [r7, #8]
 800b114:	68da      	ldr	r2, [r3, #12]
 800b116:	68bb      	ldr	r3, [r7, #8]
 800b118:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800b11a:	68bb      	ldr	r3, [r7, #8]
 800b11c:	68da      	ldr	r2, [r3, #12]
 800b11e:	68bb      	ldr	r3, [r7, #8]
 800b120:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b122:	693b      	ldr	r3, [r7, #16]
 800b124:	015a      	lsls	r2, r3, #5
 800b126:	697b      	ldr	r3, [r7, #20]
 800b128:	4413      	add	r3, r2
 800b12a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b12e:	691b      	ldr	r3, [r3, #16]
 800b130:	693a      	ldr	r2, [r7, #16]
 800b132:	0151      	lsls	r1, r2, #5
 800b134:	697a      	ldr	r2, [r7, #20]
 800b136:	440a      	add	r2, r1
 800b138:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b13c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b140:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800b142:	693b      	ldr	r3, [r7, #16]
 800b144:	015a      	lsls	r2, r3, #5
 800b146:	697b      	ldr	r3, [r7, #20]
 800b148:	4413      	add	r3, r2
 800b14a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b14e:	691a      	ldr	r2, [r3, #16]
 800b150:	68bb      	ldr	r3, [r7, #8]
 800b152:	69db      	ldr	r3, [r3, #28]
 800b154:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b158:	6939      	ldr	r1, [r7, #16]
 800b15a:	0148      	lsls	r0, r1, #5
 800b15c:	6979      	ldr	r1, [r7, #20]
 800b15e:	4401      	add	r1, r0
 800b160:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b164:	4313      	orrs	r3, r2
 800b166:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800b168:	79fb      	ldrb	r3, [r7, #7]
 800b16a:	2b01      	cmp	r3, #1
 800b16c:	d10d      	bne.n	800b18a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800b16e:	68bb      	ldr	r3, [r7, #8]
 800b170:	691b      	ldr	r3, [r3, #16]
 800b172:	2b00      	cmp	r3, #0
 800b174:	d009      	beq.n	800b18a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b176:	68bb      	ldr	r3, [r7, #8]
 800b178:	6919      	ldr	r1, [r3, #16]
 800b17a:	693b      	ldr	r3, [r7, #16]
 800b17c:	015a      	lsls	r2, r3, #5
 800b17e:	697b      	ldr	r3, [r7, #20]
 800b180:	4413      	add	r3, r2
 800b182:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b186:	460a      	mov	r2, r1
 800b188:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b18a:	693b      	ldr	r3, [r7, #16]
 800b18c:	015a      	lsls	r2, r3, #5
 800b18e:	697b      	ldr	r3, [r7, #20]
 800b190:	4413      	add	r3, r2
 800b192:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	693a      	ldr	r2, [r7, #16]
 800b19a:	0151      	lsls	r1, r2, #5
 800b19c:	697a      	ldr	r2, [r7, #20]
 800b19e:	440a      	add	r2, r1
 800b1a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b1a4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b1a8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b1aa:	2300      	movs	r3, #0
}
 800b1ac:	4618      	mov	r0, r3
 800b1ae:	371c      	adds	r7, #28
 800b1b0:	46bd      	mov	sp, r7
 800b1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b6:	4770      	bx	lr

0800b1b8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b1b8:	b480      	push	{r7}
 800b1ba:	b087      	sub	sp, #28
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	6078      	str	r0, [r7, #4]
 800b1c0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b1c2:	2300      	movs	r3, #0
 800b1c4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800b1c6:	2300      	movs	r3, #0
 800b1c8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b1ce:	683b      	ldr	r3, [r7, #0]
 800b1d0:	785b      	ldrb	r3, [r3, #1]
 800b1d2:	2b01      	cmp	r3, #1
 800b1d4:	d14a      	bne.n	800b26c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b1d6:	683b      	ldr	r3, [r7, #0]
 800b1d8:	781b      	ldrb	r3, [r3, #0]
 800b1da:	015a      	lsls	r2, r3, #5
 800b1dc:	693b      	ldr	r3, [r7, #16]
 800b1de:	4413      	add	r3, r2
 800b1e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b1ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b1ee:	f040 8086 	bne.w	800b2fe <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800b1f2:	683b      	ldr	r3, [r7, #0]
 800b1f4:	781b      	ldrb	r3, [r3, #0]
 800b1f6:	015a      	lsls	r2, r3, #5
 800b1f8:	693b      	ldr	r3, [r7, #16]
 800b1fa:	4413      	add	r3, r2
 800b1fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	683a      	ldr	r2, [r7, #0]
 800b204:	7812      	ldrb	r2, [r2, #0]
 800b206:	0151      	lsls	r1, r2, #5
 800b208:	693a      	ldr	r2, [r7, #16]
 800b20a:	440a      	add	r2, r1
 800b20c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b210:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b214:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800b216:	683b      	ldr	r3, [r7, #0]
 800b218:	781b      	ldrb	r3, [r3, #0]
 800b21a:	015a      	lsls	r2, r3, #5
 800b21c:	693b      	ldr	r3, [r7, #16]
 800b21e:	4413      	add	r3, r2
 800b220:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	683a      	ldr	r2, [r7, #0]
 800b228:	7812      	ldrb	r2, [r2, #0]
 800b22a:	0151      	lsls	r1, r2, #5
 800b22c:	693a      	ldr	r2, [r7, #16]
 800b22e:	440a      	add	r2, r1
 800b230:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b234:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b238:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	3301      	adds	r3, #1
 800b23e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	f242 7210 	movw	r2, #10000	; 0x2710
 800b246:	4293      	cmp	r3, r2
 800b248:	d902      	bls.n	800b250 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800b24a:	2301      	movs	r3, #1
 800b24c:	75fb      	strb	r3, [r7, #23]
          break;
 800b24e:	e056      	b.n	800b2fe <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800b250:	683b      	ldr	r3, [r7, #0]
 800b252:	781b      	ldrb	r3, [r3, #0]
 800b254:	015a      	lsls	r2, r3, #5
 800b256:	693b      	ldr	r3, [r7, #16]
 800b258:	4413      	add	r3, r2
 800b25a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b264:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b268:	d0e7      	beq.n	800b23a <USB_EPStopXfer+0x82>
 800b26a:	e048      	b.n	800b2fe <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b26c:	683b      	ldr	r3, [r7, #0]
 800b26e:	781b      	ldrb	r3, [r3, #0]
 800b270:	015a      	lsls	r2, r3, #5
 800b272:	693b      	ldr	r3, [r7, #16]
 800b274:	4413      	add	r3, r2
 800b276:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b280:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b284:	d13b      	bne.n	800b2fe <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800b286:	683b      	ldr	r3, [r7, #0]
 800b288:	781b      	ldrb	r3, [r3, #0]
 800b28a:	015a      	lsls	r2, r3, #5
 800b28c:	693b      	ldr	r3, [r7, #16]
 800b28e:	4413      	add	r3, r2
 800b290:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	683a      	ldr	r2, [r7, #0]
 800b298:	7812      	ldrb	r2, [r2, #0]
 800b29a:	0151      	lsls	r1, r2, #5
 800b29c:	693a      	ldr	r2, [r7, #16]
 800b29e:	440a      	add	r2, r1
 800b2a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b2a4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b2a8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800b2aa:	683b      	ldr	r3, [r7, #0]
 800b2ac:	781b      	ldrb	r3, [r3, #0]
 800b2ae:	015a      	lsls	r2, r3, #5
 800b2b0:	693b      	ldr	r3, [r7, #16]
 800b2b2:	4413      	add	r3, r2
 800b2b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	683a      	ldr	r2, [r7, #0]
 800b2bc:	7812      	ldrb	r2, [r2, #0]
 800b2be:	0151      	lsls	r1, r2, #5
 800b2c0:	693a      	ldr	r2, [r7, #16]
 800b2c2:	440a      	add	r2, r1
 800b2c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b2c8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b2cc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	3301      	adds	r3, #1
 800b2d2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	f242 7210 	movw	r2, #10000	; 0x2710
 800b2da:	4293      	cmp	r3, r2
 800b2dc:	d902      	bls.n	800b2e4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800b2de:	2301      	movs	r3, #1
 800b2e0:	75fb      	strb	r3, [r7, #23]
          break;
 800b2e2:	e00c      	b.n	800b2fe <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800b2e4:	683b      	ldr	r3, [r7, #0]
 800b2e6:	781b      	ldrb	r3, [r3, #0]
 800b2e8:	015a      	lsls	r2, r3, #5
 800b2ea:	693b      	ldr	r3, [r7, #16]
 800b2ec:	4413      	add	r3, r2
 800b2ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b2f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b2fc:	d0e7      	beq.n	800b2ce <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800b2fe:	7dfb      	ldrb	r3, [r7, #23]
}
 800b300:	4618      	mov	r0, r3
 800b302:	371c      	adds	r7, #28
 800b304:	46bd      	mov	sp, r7
 800b306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b30a:	4770      	bx	lr

0800b30c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800b30c:	b480      	push	{r7}
 800b30e:	b089      	sub	sp, #36	; 0x24
 800b310:	af00      	add	r7, sp, #0
 800b312:	60f8      	str	r0, [r7, #12]
 800b314:	60b9      	str	r1, [r7, #8]
 800b316:	4611      	mov	r1, r2
 800b318:	461a      	mov	r2, r3
 800b31a:	460b      	mov	r3, r1
 800b31c:	71fb      	strb	r3, [r7, #7]
 800b31e:	4613      	mov	r3, r2
 800b320:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800b326:	68bb      	ldr	r3, [r7, #8]
 800b328:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800b32a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d123      	bne.n	800b37a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800b332:	88bb      	ldrh	r3, [r7, #4]
 800b334:	3303      	adds	r3, #3
 800b336:	089b      	lsrs	r3, r3, #2
 800b338:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800b33a:	2300      	movs	r3, #0
 800b33c:	61bb      	str	r3, [r7, #24]
 800b33e:	e018      	b.n	800b372 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800b340:	79fb      	ldrb	r3, [r7, #7]
 800b342:	031a      	lsls	r2, r3, #12
 800b344:	697b      	ldr	r3, [r7, #20]
 800b346:	4413      	add	r3, r2
 800b348:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b34c:	461a      	mov	r2, r3
 800b34e:	69fb      	ldr	r3, [r7, #28]
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	6013      	str	r3, [r2, #0]
      pSrc++;
 800b354:	69fb      	ldr	r3, [r7, #28]
 800b356:	3301      	adds	r3, #1
 800b358:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b35a:	69fb      	ldr	r3, [r7, #28]
 800b35c:	3301      	adds	r3, #1
 800b35e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b360:	69fb      	ldr	r3, [r7, #28]
 800b362:	3301      	adds	r3, #1
 800b364:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b366:	69fb      	ldr	r3, [r7, #28]
 800b368:	3301      	adds	r3, #1
 800b36a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800b36c:	69bb      	ldr	r3, [r7, #24]
 800b36e:	3301      	adds	r3, #1
 800b370:	61bb      	str	r3, [r7, #24]
 800b372:	69ba      	ldr	r2, [r7, #24]
 800b374:	693b      	ldr	r3, [r7, #16]
 800b376:	429a      	cmp	r2, r3
 800b378:	d3e2      	bcc.n	800b340 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800b37a:	2300      	movs	r3, #0
}
 800b37c:	4618      	mov	r0, r3
 800b37e:	3724      	adds	r7, #36	; 0x24
 800b380:	46bd      	mov	sp, r7
 800b382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b386:	4770      	bx	lr

0800b388 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b388:	b480      	push	{r7}
 800b38a:	b08b      	sub	sp, #44	; 0x2c
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	60f8      	str	r0, [r7, #12]
 800b390:	60b9      	str	r1, [r7, #8]
 800b392:	4613      	mov	r3, r2
 800b394:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800b39a:	68bb      	ldr	r3, [r7, #8]
 800b39c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800b39e:	88fb      	ldrh	r3, [r7, #6]
 800b3a0:	089b      	lsrs	r3, r3, #2
 800b3a2:	b29b      	uxth	r3, r3
 800b3a4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800b3a6:	88fb      	ldrh	r3, [r7, #6]
 800b3a8:	f003 0303 	and.w	r3, r3, #3
 800b3ac:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800b3ae:	2300      	movs	r3, #0
 800b3b0:	623b      	str	r3, [r7, #32]
 800b3b2:	e014      	b.n	800b3de <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b3b4:	69bb      	ldr	r3, [r7, #24]
 800b3b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b3ba:	681a      	ldr	r2, [r3, #0]
 800b3bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3be:	601a      	str	r2, [r3, #0]
    pDest++;
 800b3c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3c2:	3301      	adds	r3, #1
 800b3c4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b3c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3c8:	3301      	adds	r3, #1
 800b3ca:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b3cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3ce:	3301      	adds	r3, #1
 800b3d0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b3d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3d4:	3301      	adds	r3, #1
 800b3d6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800b3d8:	6a3b      	ldr	r3, [r7, #32]
 800b3da:	3301      	adds	r3, #1
 800b3dc:	623b      	str	r3, [r7, #32]
 800b3de:	6a3a      	ldr	r2, [r7, #32]
 800b3e0:	697b      	ldr	r3, [r7, #20]
 800b3e2:	429a      	cmp	r2, r3
 800b3e4:	d3e6      	bcc.n	800b3b4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800b3e6:	8bfb      	ldrh	r3, [r7, #30]
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d01e      	beq.n	800b42a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800b3ec:	2300      	movs	r3, #0
 800b3ee:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800b3f0:	69bb      	ldr	r3, [r7, #24]
 800b3f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b3f6:	461a      	mov	r2, r3
 800b3f8:	f107 0310 	add.w	r3, r7, #16
 800b3fc:	6812      	ldr	r2, [r2, #0]
 800b3fe:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800b400:	693a      	ldr	r2, [r7, #16]
 800b402:	6a3b      	ldr	r3, [r7, #32]
 800b404:	b2db      	uxtb	r3, r3
 800b406:	00db      	lsls	r3, r3, #3
 800b408:	fa22 f303 	lsr.w	r3, r2, r3
 800b40c:	b2da      	uxtb	r2, r3
 800b40e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b410:	701a      	strb	r2, [r3, #0]
      i++;
 800b412:	6a3b      	ldr	r3, [r7, #32]
 800b414:	3301      	adds	r3, #1
 800b416:	623b      	str	r3, [r7, #32]
      pDest++;
 800b418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b41a:	3301      	adds	r3, #1
 800b41c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800b41e:	8bfb      	ldrh	r3, [r7, #30]
 800b420:	3b01      	subs	r3, #1
 800b422:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800b424:	8bfb      	ldrh	r3, [r7, #30]
 800b426:	2b00      	cmp	r3, #0
 800b428:	d1ea      	bne.n	800b400 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800b42a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b42c:	4618      	mov	r0, r3
 800b42e:	372c      	adds	r7, #44	; 0x2c
 800b430:	46bd      	mov	sp, r7
 800b432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b436:	4770      	bx	lr

0800b438 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b438:	b480      	push	{r7}
 800b43a:	b085      	sub	sp, #20
 800b43c:	af00      	add	r7, sp, #0
 800b43e:	6078      	str	r0, [r7, #4]
 800b440:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b446:	683b      	ldr	r3, [r7, #0]
 800b448:	781b      	ldrb	r3, [r3, #0]
 800b44a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b44c:	683b      	ldr	r3, [r7, #0]
 800b44e:	785b      	ldrb	r3, [r3, #1]
 800b450:	2b01      	cmp	r3, #1
 800b452:	d12c      	bne.n	800b4ae <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b454:	68bb      	ldr	r3, [r7, #8]
 800b456:	015a      	lsls	r2, r3, #5
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	4413      	add	r3, r2
 800b45c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	2b00      	cmp	r3, #0
 800b464:	db12      	blt.n	800b48c <USB_EPSetStall+0x54>
 800b466:	68bb      	ldr	r3, [r7, #8]
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d00f      	beq.n	800b48c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800b46c:	68bb      	ldr	r3, [r7, #8]
 800b46e:	015a      	lsls	r2, r3, #5
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	4413      	add	r3, r2
 800b474:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	68ba      	ldr	r2, [r7, #8]
 800b47c:	0151      	lsls	r1, r2, #5
 800b47e:	68fa      	ldr	r2, [r7, #12]
 800b480:	440a      	add	r2, r1
 800b482:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b486:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b48a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800b48c:	68bb      	ldr	r3, [r7, #8]
 800b48e:	015a      	lsls	r2, r3, #5
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	4413      	add	r3, r2
 800b494:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	68ba      	ldr	r2, [r7, #8]
 800b49c:	0151      	lsls	r1, r2, #5
 800b49e:	68fa      	ldr	r2, [r7, #12]
 800b4a0:	440a      	add	r2, r1
 800b4a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b4a6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b4aa:	6013      	str	r3, [r2, #0]
 800b4ac:	e02b      	b.n	800b506 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b4ae:	68bb      	ldr	r3, [r7, #8]
 800b4b0:	015a      	lsls	r2, r3, #5
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	4413      	add	r3, r2
 800b4b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	db12      	blt.n	800b4e6 <USB_EPSetStall+0xae>
 800b4c0:	68bb      	ldr	r3, [r7, #8]
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d00f      	beq.n	800b4e6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800b4c6:	68bb      	ldr	r3, [r7, #8]
 800b4c8:	015a      	lsls	r2, r3, #5
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	4413      	add	r3, r2
 800b4ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	68ba      	ldr	r2, [r7, #8]
 800b4d6:	0151      	lsls	r1, r2, #5
 800b4d8:	68fa      	ldr	r2, [r7, #12]
 800b4da:	440a      	add	r2, r1
 800b4dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b4e0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b4e4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800b4e6:	68bb      	ldr	r3, [r7, #8]
 800b4e8:	015a      	lsls	r2, r3, #5
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	4413      	add	r3, r2
 800b4ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	68ba      	ldr	r2, [r7, #8]
 800b4f6:	0151      	lsls	r1, r2, #5
 800b4f8:	68fa      	ldr	r2, [r7, #12]
 800b4fa:	440a      	add	r2, r1
 800b4fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b500:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b504:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b506:	2300      	movs	r3, #0
}
 800b508:	4618      	mov	r0, r3
 800b50a:	3714      	adds	r7, #20
 800b50c:	46bd      	mov	sp, r7
 800b50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b512:	4770      	bx	lr

0800b514 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b514:	b480      	push	{r7}
 800b516:	b085      	sub	sp, #20
 800b518:	af00      	add	r7, sp, #0
 800b51a:	6078      	str	r0, [r7, #4]
 800b51c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b522:	683b      	ldr	r3, [r7, #0]
 800b524:	781b      	ldrb	r3, [r3, #0]
 800b526:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b528:	683b      	ldr	r3, [r7, #0]
 800b52a:	785b      	ldrb	r3, [r3, #1]
 800b52c:	2b01      	cmp	r3, #1
 800b52e:	d128      	bne.n	800b582 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b530:	68bb      	ldr	r3, [r7, #8]
 800b532:	015a      	lsls	r2, r3, #5
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	4413      	add	r3, r2
 800b538:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	68ba      	ldr	r2, [r7, #8]
 800b540:	0151      	lsls	r1, r2, #5
 800b542:	68fa      	ldr	r2, [r7, #12]
 800b544:	440a      	add	r2, r1
 800b546:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b54a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b54e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b550:	683b      	ldr	r3, [r7, #0]
 800b552:	791b      	ldrb	r3, [r3, #4]
 800b554:	2b03      	cmp	r3, #3
 800b556:	d003      	beq.n	800b560 <USB_EPClearStall+0x4c>
 800b558:	683b      	ldr	r3, [r7, #0]
 800b55a:	791b      	ldrb	r3, [r3, #4]
 800b55c:	2b02      	cmp	r3, #2
 800b55e:	d138      	bne.n	800b5d2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b560:	68bb      	ldr	r3, [r7, #8]
 800b562:	015a      	lsls	r2, r3, #5
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	4413      	add	r3, r2
 800b568:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	68ba      	ldr	r2, [r7, #8]
 800b570:	0151      	lsls	r1, r2, #5
 800b572:	68fa      	ldr	r2, [r7, #12]
 800b574:	440a      	add	r2, r1
 800b576:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b57a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b57e:	6013      	str	r3, [r2, #0]
 800b580:	e027      	b.n	800b5d2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b582:	68bb      	ldr	r3, [r7, #8]
 800b584:	015a      	lsls	r2, r3, #5
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	4413      	add	r3, r2
 800b58a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	68ba      	ldr	r2, [r7, #8]
 800b592:	0151      	lsls	r1, r2, #5
 800b594:	68fa      	ldr	r2, [r7, #12]
 800b596:	440a      	add	r2, r1
 800b598:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b59c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b5a0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b5a2:	683b      	ldr	r3, [r7, #0]
 800b5a4:	791b      	ldrb	r3, [r3, #4]
 800b5a6:	2b03      	cmp	r3, #3
 800b5a8:	d003      	beq.n	800b5b2 <USB_EPClearStall+0x9e>
 800b5aa:	683b      	ldr	r3, [r7, #0]
 800b5ac:	791b      	ldrb	r3, [r3, #4]
 800b5ae:	2b02      	cmp	r3, #2
 800b5b0:	d10f      	bne.n	800b5d2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b5b2:	68bb      	ldr	r3, [r7, #8]
 800b5b4:	015a      	lsls	r2, r3, #5
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	4413      	add	r3, r2
 800b5ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	68ba      	ldr	r2, [r7, #8]
 800b5c2:	0151      	lsls	r1, r2, #5
 800b5c4:	68fa      	ldr	r2, [r7, #12]
 800b5c6:	440a      	add	r2, r1
 800b5c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b5cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b5d0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800b5d2:	2300      	movs	r3, #0
}
 800b5d4:	4618      	mov	r0, r3
 800b5d6:	3714      	adds	r7, #20
 800b5d8:	46bd      	mov	sp, r7
 800b5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5de:	4770      	bx	lr

0800b5e0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800b5e0:	b480      	push	{r7}
 800b5e2:	b085      	sub	sp, #20
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	6078      	str	r0, [r7, #4]
 800b5e8:	460b      	mov	r3, r1
 800b5ea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	68fa      	ldr	r2, [r7, #12]
 800b5fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b5fe:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800b602:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b60a:	681a      	ldr	r2, [r3, #0]
 800b60c:	78fb      	ldrb	r3, [r7, #3]
 800b60e:	011b      	lsls	r3, r3, #4
 800b610:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800b614:	68f9      	ldr	r1, [r7, #12]
 800b616:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b61a:	4313      	orrs	r3, r2
 800b61c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800b61e:	2300      	movs	r3, #0
}
 800b620:	4618      	mov	r0, r3
 800b622:	3714      	adds	r7, #20
 800b624:	46bd      	mov	sp, r7
 800b626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b62a:	4770      	bx	lr

0800b62c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b62c:	b480      	push	{r7}
 800b62e:	b085      	sub	sp, #20
 800b630:	af00      	add	r7, sp, #0
 800b632:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	68fa      	ldr	r2, [r7, #12]
 800b642:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b646:	f023 0303 	bic.w	r3, r3, #3
 800b64a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b652:	685b      	ldr	r3, [r3, #4]
 800b654:	68fa      	ldr	r2, [r7, #12]
 800b656:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b65a:	f023 0302 	bic.w	r3, r3, #2
 800b65e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b660:	2300      	movs	r3, #0
}
 800b662:	4618      	mov	r0, r3
 800b664:	3714      	adds	r7, #20
 800b666:	46bd      	mov	sp, r7
 800b668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b66c:	4770      	bx	lr

0800b66e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b66e:	b480      	push	{r7}
 800b670:	b085      	sub	sp, #20
 800b672:	af00      	add	r7, sp, #0
 800b674:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	68fa      	ldr	r2, [r7, #12]
 800b684:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b688:	f023 0303 	bic.w	r3, r3, #3
 800b68c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b694:	685b      	ldr	r3, [r3, #4]
 800b696:	68fa      	ldr	r2, [r7, #12]
 800b698:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b69c:	f043 0302 	orr.w	r3, r3, #2
 800b6a0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b6a2:	2300      	movs	r3, #0
}
 800b6a4:	4618      	mov	r0, r3
 800b6a6:	3714      	adds	r7, #20
 800b6a8:	46bd      	mov	sp, r7
 800b6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ae:	4770      	bx	lr

0800b6b0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800b6b0:	b480      	push	{r7}
 800b6b2:	b085      	sub	sp, #20
 800b6b4:	af00      	add	r7, sp, #0
 800b6b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	695b      	ldr	r3, [r3, #20]
 800b6bc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	699b      	ldr	r3, [r3, #24]
 800b6c2:	68fa      	ldr	r2, [r7, #12]
 800b6c4:	4013      	ands	r3, r2
 800b6c6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800b6c8:	68fb      	ldr	r3, [r7, #12]
}
 800b6ca:	4618      	mov	r0, r3
 800b6cc:	3714      	adds	r7, #20
 800b6ce:	46bd      	mov	sp, r7
 800b6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d4:	4770      	bx	lr

0800b6d6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b6d6:	b480      	push	{r7}
 800b6d8:	b085      	sub	sp, #20
 800b6da:	af00      	add	r7, sp, #0
 800b6dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b6e8:	699b      	ldr	r3, [r3, #24]
 800b6ea:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b6f2:	69db      	ldr	r3, [r3, #28]
 800b6f4:	68ba      	ldr	r2, [r7, #8]
 800b6f6:	4013      	ands	r3, r2
 800b6f8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800b6fa:	68bb      	ldr	r3, [r7, #8]
 800b6fc:	0c1b      	lsrs	r3, r3, #16
}
 800b6fe:	4618      	mov	r0, r3
 800b700:	3714      	adds	r7, #20
 800b702:	46bd      	mov	sp, r7
 800b704:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b708:	4770      	bx	lr

0800b70a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b70a:	b480      	push	{r7}
 800b70c:	b085      	sub	sp, #20
 800b70e:	af00      	add	r7, sp, #0
 800b710:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b71c:	699b      	ldr	r3, [r3, #24]
 800b71e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b726:	69db      	ldr	r3, [r3, #28]
 800b728:	68ba      	ldr	r2, [r7, #8]
 800b72a:	4013      	ands	r3, r2
 800b72c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800b72e:	68bb      	ldr	r3, [r7, #8]
 800b730:	b29b      	uxth	r3, r3
}
 800b732:	4618      	mov	r0, r3
 800b734:	3714      	adds	r7, #20
 800b736:	46bd      	mov	sp, r7
 800b738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b73c:	4770      	bx	lr

0800b73e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b73e:	b480      	push	{r7}
 800b740:	b085      	sub	sp, #20
 800b742:	af00      	add	r7, sp, #0
 800b744:	6078      	str	r0, [r7, #4]
 800b746:	460b      	mov	r3, r1
 800b748:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800b74e:	78fb      	ldrb	r3, [r7, #3]
 800b750:	015a      	lsls	r2, r3, #5
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	4413      	add	r3, r2
 800b756:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b75a:	689b      	ldr	r3, [r3, #8]
 800b75c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b764:	695b      	ldr	r3, [r3, #20]
 800b766:	68ba      	ldr	r2, [r7, #8]
 800b768:	4013      	ands	r3, r2
 800b76a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b76c:	68bb      	ldr	r3, [r7, #8]
}
 800b76e:	4618      	mov	r0, r3
 800b770:	3714      	adds	r7, #20
 800b772:	46bd      	mov	sp, r7
 800b774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b778:	4770      	bx	lr

0800b77a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b77a:	b480      	push	{r7}
 800b77c:	b087      	sub	sp, #28
 800b77e:	af00      	add	r7, sp, #0
 800b780:	6078      	str	r0, [r7, #4]
 800b782:	460b      	mov	r3, r1
 800b784:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800b78a:	697b      	ldr	r3, [r7, #20]
 800b78c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b790:	691b      	ldr	r3, [r3, #16]
 800b792:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800b794:	697b      	ldr	r3, [r7, #20]
 800b796:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b79a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b79c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800b79e:	78fb      	ldrb	r3, [r7, #3]
 800b7a0:	f003 030f 	and.w	r3, r3, #15
 800b7a4:	68fa      	ldr	r2, [r7, #12]
 800b7a6:	fa22 f303 	lsr.w	r3, r2, r3
 800b7aa:	01db      	lsls	r3, r3, #7
 800b7ac:	b2db      	uxtb	r3, r3
 800b7ae:	693a      	ldr	r2, [r7, #16]
 800b7b0:	4313      	orrs	r3, r2
 800b7b2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800b7b4:	78fb      	ldrb	r3, [r7, #3]
 800b7b6:	015a      	lsls	r2, r3, #5
 800b7b8:	697b      	ldr	r3, [r7, #20]
 800b7ba:	4413      	add	r3, r2
 800b7bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b7c0:	689b      	ldr	r3, [r3, #8]
 800b7c2:	693a      	ldr	r2, [r7, #16]
 800b7c4:	4013      	ands	r3, r2
 800b7c6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b7c8:	68bb      	ldr	r3, [r7, #8]
}
 800b7ca:	4618      	mov	r0, r3
 800b7cc:	371c      	adds	r7, #28
 800b7ce:	46bd      	mov	sp, r7
 800b7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d4:	4770      	bx	lr

0800b7d6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800b7d6:	b480      	push	{r7}
 800b7d8:	b083      	sub	sp, #12
 800b7da:	af00      	add	r7, sp, #0
 800b7dc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	695b      	ldr	r3, [r3, #20]
 800b7e2:	f003 0301 	and.w	r3, r3, #1
}
 800b7e6:	4618      	mov	r0, r3
 800b7e8:	370c      	adds	r7, #12
 800b7ea:	46bd      	mov	sp, r7
 800b7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f0:	4770      	bx	lr

0800b7f2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800b7f2:	b480      	push	{r7}
 800b7f4:	b085      	sub	sp, #20
 800b7f6:	af00      	add	r7, sp, #0
 800b7f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	68fa      	ldr	r2, [r7, #12]
 800b808:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b80c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800b810:	f023 0307 	bic.w	r3, r3, #7
 800b814:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b81c:	685b      	ldr	r3, [r3, #4]
 800b81e:	68fa      	ldr	r2, [r7, #12]
 800b820:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b824:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b828:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b82a:	2300      	movs	r3, #0
}
 800b82c:	4618      	mov	r0, r3
 800b82e:	3714      	adds	r7, #20
 800b830:	46bd      	mov	sp, r7
 800b832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b836:	4770      	bx	lr

0800b838 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800b838:	b480      	push	{r7}
 800b83a:	b087      	sub	sp, #28
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	60f8      	str	r0, [r7, #12]
 800b840:	460b      	mov	r3, r1
 800b842:	607a      	str	r2, [r7, #4]
 800b844:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	333c      	adds	r3, #60	; 0x3c
 800b84e:	3304      	adds	r3, #4
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800b854:	693b      	ldr	r3, [r7, #16]
 800b856:	4a26      	ldr	r2, [pc, #152]	; (800b8f0 <USB_EP0_OutStart+0xb8>)
 800b858:	4293      	cmp	r3, r2
 800b85a:	d90a      	bls.n	800b872 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b85c:	697b      	ldr	r3, [r7, #20]
 800b85e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b868:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b86c:	d101      	bne.n	800b872 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800b86e:	2300      	movs	r3, #0
 800b870:	e037      	b.n	800b8e2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800b872:	697b      	ldr	r3, [r7, #20]
 800b874:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b878:	461a      	mov	r2, r3
 800b87a:	2300      	movs	r3, #0
 800b87c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b87e:	697b      	ldr	r3, [r7, #20]
 800b880:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b884:	691b      	ldr	r3, [r3, #16]
 800b886:	697a      	ldr	r2, [r7, #20]
 800b888:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b88c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b890:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800b892:	697b      	ldr	r3, [r7, #20]
 800b894:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b898:	691b      	ldr	r3, [r3, #16]
 800b89a:	697a      	ldr	r2, [r7, #20]
 800b89c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b8a0:	f043 0318 	orr.w	r3, r3, #24
 800b8a4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800b8a6:	697b      	ldr	r3, [r7, #20]
 800b8a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b8ac:	691b      	ldr	r3, [r3, #16]
 800b8ae:	697a      	ldr	r2, [r7, #20]
 800b8b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b8b4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800b8b8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800b8ba:	7afb      	ldrb	r3, [r7, #11]
 800b8bc:	2b01      	cmp	r3, #1
 800b8be:	d10f      	bne.n	800b8e0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800b8c0:	697b      	ldr	r3, [r7, #20]
 800b8c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b8c6:	461a      	mov	r2, r3
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800b8cc:	697b      	ldr	r3, [r7, #20]
 800b8ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	697a      	ldr	r2, [r7, #20]
 800b8d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b8da:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800b8de:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b8e0:	2300      	movs	r3, #0
}
 800b8e2:	4618      	mov	r0, r3
 800b8e4:	371c      	adds	r7, #28
 800b8e6:	46bd      	mov	sp, r7
 800b8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ec:	4770      	bx	lr
 800b8ee:	bf00      	nop
 800b8f0:	4f54300a 	.word	0x4f54300a

0800b8f4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b8f4:	b480      	push	{r7}
 800b8f6:	b085      	sub	sp, #20
 800b8f8:	af00      	add	r7, sp, #0
 800b8fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b8fc:	2300      	movs	r3, #0
 800b8fe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	3301      	adds	r3, #1
 800b904:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	4a13      	ldr	r2, [pc, #76]	; (800b958 <USB_CoreReset+0x64>)
 800b90a:	4293      	cmp	r3, r2
 800b90c:	d901      	bls.n	800b912 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b90e:	2303      	movs	r3, #3
 800b910:	e01b      	b.n	800b94a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	691b      	ldr	r3, [r3, #16]
 800b916:	2b00      	cmp	r3, #0
 800b918:	daf2      	bge.n	800b900 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b91a:	2300      	movs	r3, #0
 800b91c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	691b      	ldr	r3, [r3, #16]
 800b922:	f043 0201 	orr.w	r2, r3, #1
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	3301      	adds	r3, #1
 800b92e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	4a09      	ldr	r2, [pc, #36]	; (800b958 <USB_CoreReset+0x64>)
 800b934:	4293      	cmp	r3, r2
 800b936:	d901      	bls.n	800b93c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b938:	2303      	movs	r3, #3
 800b93a:	e006      	b.n	800b94a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	691b      	ldr	r3, [r3, #16]
 800b940:	f003 0301 	and.w	r3, r3, #1
 800b944:	2b01      	cmp	r3, #1
 800b946:	d0f0      	beq.n	800b92a <USB_CoreReset+0x36>

  return HAL_OK;
 800b948:	2300      	movs	r3, #0
}
 800b94a:	4618      	mov	r0, r3
 800b94c:	3714      	adds	r7, #20
 800b94e:	46bd      	mov	sp, r7
 800b950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b954:	4770      	bx	lr
 800b956:	bf00      	nop
 800b958:	00030d40 	.word	0x00030d40

0800b95c <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b95c:	b580      	push	{r7, lr}
 800b95e:	b084      	sub	sp, #16
 800b960:	af00      	add	r7, sp, #0
 800b962:	6078      	str	r0, [r7, #4]
 800b964:	460b      	mov	r3, r1
 800b966:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 800b968:	2054      	movs	r0, #84	; 0x54
 800b96a:	f002 f9f3 	bl	800dd54 <USBD_static_malloc>
 800b96e:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	2b00      	cmp	r3, #0
 800b974:	d109      	bne.n	800b98a <USBD_CUSTOM_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	32b0      	adds	r2, #176	; 0xb0
 800b980:	2100      	movs	r1, #0
 800b982:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800b986:	2302      	movs	r3, #2
 800b988:	e04e      	b.n	800ba28 <USBD_CUSTOM_HID_Init+0xcc>
  }

   pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	32b0      	adds	r2, #176	; 0xb0
 800b994:	68f9      	ldr	r1, [r7, #12]
 800b996:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	32b0      	adds	r2, #176	; 0xb0
 800b9a4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc


   pdev->ep_in[KEYBOARD_HID_EPIN_ADDR & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	2205      	movs	r2, #5
 800b9b2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
   pdev->ep_in[MOUSE_HID_EPIN_ADDR & 0xFU].bInterval = USB_MOUSE_POLLRATE;
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	2201      	movs	r2, #1
 800b9ba:	875a      	strh	r2, [r3, #58]	; 0x3a
   pdev->ep_out[GENERIC_HID_OUT_ADDR & 0xFU].bInterval = USB_GHID_POLLRATE;
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	2201      	movs	r2, #1
 800b9c0:	f8a3 21a2 	strh.w	r2, [r3, #418]	; 0x1a2


  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, MOUSE_HID_EPIN_ADDR, USBD_EP_TYPE_INTR, MOUSE_EP_MAX_PACKET_SIZE);
 800b9c4:	2340      	movs	r3, #64	; 0x40
 800b9c6:	2203      	movs	r2, #3
 800b9c8:	2181      	movs	r1, #129	; 0x81
 800b9ca:	6878      	ldr	r0, [r7, #4]
 800b9cc:	f002 f8b1 	bl	800db32 <USBD_LL_OpenEP>
  (void)USBD_LL_OpenEP(pdev, KEYBOARD_HID_EPIN_ADDR, USBD_EP_TYPE_INTR, KBD_EP_MAX_PACKET_SIZE);
 800b9d0:	2340      	movs	r3, #64	; 0x40
 800b9d2:	2203      	movs	r2, #3
 800b9d4:	2182      	movs	r1, #130	; 0x82
 800b9d6:	6878      	ldr	r0, [r7, #4]
 800b9d8:	f002 f8ab 	bl	800db32 <USBD_LL_OpenEP>

  pdev->ep_in[MOUSE_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	2201      	movs	r2, #1
 800b9e0:	871a      	strh	r2, [r3, #56]	; 0x38
  pdev->ep_in[KEYBOARD_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	2201      	movs	r2, #1
 800b9e6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, GENERIC_HID_OUT_ADDR, USBD_EP_TYPE_INTR, GHID_EP_MAX_PACKET_SIZE);
 800b9ea:	2340      	movs	r3, #64	; 0x40
 800b9ec:	2203      	movs	r2, #3
 800b9ee:	2103      	movs	r1, #3
 800b9f0:	6878      	ldr	r0, [r7, #4]
 800b9f2:	f002 f89e 	bl	800db32 <USBD_LL_OpenEP>

  pdev->ep_out[GENERIC_HID_OUT_ADDR & 0xFU].is_used = 1U;
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	2201      	movs	r2, #1
 800b9fa:	f8a3 21a0 	strh.w	r2, [r3, #416]	; 0x1a0

  hhid->state = CUSTOM_HID_IDLE;
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	2200      	movs	r2, #0
 800ba02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ba0c:	687a      	ldr	r2, [r7, #4]
 800ba0e:	33b0      	adds	r3, #176	; 0xb0
 800ba10:	009b      	lsls	r3, r3, #2
 800ba12:	4413      	add	r3, r2
 800ba14:	685b      	ldr	r3, [r3, #4]
 800ba16:	685b      	ldr	r3, [r3, #4]
 800ba18:	4798      	blx	r3

  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, GENERIC_HID_OUT_ADDR, hhid->Report_buf, GHID_EP_MAX_PACKET_SIZE);
 800ba1a:	68fa      	ldr	r2, [r7, #12]
 800ba1c:	2340      	movs	r3, #64	; 0x40
 800ba1e:	2103      	movs	r1, #3
 800ba20:	6878      	ldr	r0, [r7, #4]
 800ba22:	f002 f975 	bl	800dd10 <USBD_LL_PrepareReceive>

  return (uint8_t)USBD_OK;
 800ba26:	2300      	movs	r3, #0
}
 800ba28:	4618      	mov	r0, r3
 800ba2a:	3710      	adds	r7, #16
 800ba2c:	46bd      	mov	sp, r7
 800ba2e:	bd80      	pop	{r7, pc}

0800ba30 <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ba30:	b580      	push	{r7, lr}
 800ba32:	b082      	sub	sp, #8
 800ba34:	af00      	add	r7, sp, #0
 800ba36:	6078      	str	r0, [r7, #4]
 800ba38:	460b      	mov	r3, r1
 800ba3a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, MOUSE_HID_EPIN_ADDR);
 800ba3c:	2181      	movs	r1, #129	; 0x81
 800ba3e:	6878      	ldr	r0, [r7, #4]
 800ba40:	f002 f89d 	bl	800db7e <USBD_LL_CloseEP>
  pdev->ep_in[MOUSE_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	2200      	movs	r2, #0
 800ba48:	871a      	strh	r2, [r3, #56]	; 0x38
  pdev->ep_in[MOUSE_HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	2200      	movs	r2, #0
 800ba4e:	875a      	strh	r2, [r3, #58]	; 0x3a
  (void)USBD_LL_CloseEP(pdev, KEYBOARD_HID_EPIN_ADDR);
 800ba50:	2182      	movs	r1, #130	; 0x82
 800ba52:	6878      	ldr	r0, [r7, #4]
 800ba54:	f002 f893 	bl	800db7e <USBD_LL_CloseEP>
  pdev->ep_in[KEYBOARD_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	2200      	movs	r2, #0
 800ba5c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[KEYBOARD_HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	2200      	movs	r2, #0
 800ba64:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, GENERIC_HID_OUT_ADDR);
 800ba68:	2103      	movs	r1, #3
 800ba6a:	6878      	ldr	r0, [r7, #4]
 800ba6c:	f002 f887 	bl	800db7e <USBD_LL_CloseEP>
  pdev->ep_out[GENERIC_HID_OUT_ADDR & 0xFU].is_used = 0U;
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	2200      	movs	r2, #0
 800ba74:	f8a3 21a0 	strh.w	r2, [r3, #416]	; 0x1a0
  pdev->ep_out[GENERIC_HID_OUT_ADDR & 0xFU].bInterval = 0U;
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	2200      	movs	r2, #0
 800ba7c:	f8a3 21a2 	strh.w	r2, [r3, #418]	; 0x1a2

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	32b0      	adds	r2, #176	; 0xb0
 800ba8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d01f      	beq.n	800bad2 <USBD_CUSTOM_HID_DeInit+0xa2>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ba98:	687a      	ldr	r2, [r7, #4]
 800ba9a:	33b0      	adds	r3, #176	; 0xb0
 800ba9c:	009b      	lsls	r3, r3, #2
 800ba9e:	4413      	add	r3, r2
 800baa0:	685b      	ldr	r3, [r3, #4]
 800baa2:	689b      	ldr	r3, [r3, #8]
 800baa4:	4798      	blx	r3
    USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	32b0      	adds	r2, #176	; 0xb0
 800bab0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bab4:	4618      	mov	r0, r3
 800bab6:	f002 f95b 	bl	800dd70 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	32b0      	adds	r2, #176	; 0xb0
 800bac4:	2100      	movs	r1, #0
 800bac6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	2200      	movs	r2, #0
 800bace:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800bad2:	2300      	movs	r3, #0
}
 800bad4:	4618      	mov	r0, r3
 800bad6:	3708      	adds	r7, #8
 800bad8:	46bd      	mov	sp, r7
 800bada:	bd80      	pop	{r7, pc}

0800badc <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 800badc:	b580      	push	{r7, lr}
 800bade:	b088      	sub	sp, #32
 800bae0:	af00      	add	r7, sp, #0
 800bae2:	6078      	str	r0, [r7, #4]
 800bae4:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	32b0      	adds	r2, #176	; 0xb0
 800baf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800baf4:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 800baf6:	2300      	movs	r3, #0
 800baf8:	83fb      	strh	r3, [r7, #30]
  uint8_t  *pbuf = NULL;
 800bafa:	2300      	movs	r3, #0
 800bafc:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 800bafe:	2300      	movs	r3, #0
 800bb00:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 800bb02:	2300      	movs	r3, #0
 800bb04:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
 800bb06:	693b      	ldr	r3, [r7, #16]
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d101      	bne.n	800bb10 <USBD_CUSTOM_HID_Setup+0x34>
  {
    return (uint8_t)USBD_FAIL;
 800bb0c:	2303      	movs	r3, #3
 800bb0e:	e0ff      	b.n	800bd10 <USBD_CUSTOM_HID_Setup+0x234>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bb10:	683b      	ldr	r3, [r7, #0]
 800bb12:	781b      	ldrb	r3, [r3, #0]
 800bb14:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d056      	beq.n	800bbca <USBD_CUSTOM_HID_Setup+0xee>
 800bb1c:	2b20      	cmp	r3, #32
 800bb1e:	f040 80ef 	bne.w	800bd00 <USBD_CUSTOM_HID_Setup+0x224>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 800bb22:	683b      	ldr	r3, [r7, #0]
 800bb24:	785b      	ldrb	r3, [r3, #1]
 800bb26:	3b02      	subs	r3, #2
 800bb28:	2b09      	cmp	r3, #9
 800bb2a:	d846      	bhi.n	800bbba <USBD_CUSTOM_HID_Setup+0xde>
 800bb2c:	a201      	add	r2, pc, #4	; (adr r2, 800bb34 <USBD_CUSTOM_HID_Setup+0x58>)
 800bb2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb32:	bf00      	nop
 800bb34:	0800bb8d 	.word	0x0800bb8d
 800bb38:	0800bb6b 	.word	0x0800bb6b
 800bb3c:	0800bbbb 	.word	0x0800bbbb
 800bb40:	0800bbbb 	.word	0x0800bbbb
 800bb44:	0800bbbb 	.word	0x0800bbbb
 800bb48:	0800bbbb 	.word	0x0800bbbb
 800bb4c:	0800bbbb 	.word	0x0800bbbb
 800bb50:	0800bb9d 	.word	0x0800bb9d
 800bb54:	0800bb7b 	.word	0x0800bb7b
 800bb58:	0800bb5d 	.word	0x0800bb5d
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 800bb5c:	683b      	ldr	r3, [r7, #0]
 800bb5e:	885b      	ldrh	r3, [r3, #2]
 800bb60:	b2db      	uxtb	r3, r3
 800bb62:	461a      	mov	r2, r3
 800bb64:	693b      	ldr	r3, [r7, #16]
 800bb66:	641a      	str	r2, [r3, #64]	; 0x40
          break;
 800bb68:	e02e      	b.n	800bbc8 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 800bb6a:	693b      	ldr	r3, [r7, #16]
 800bb6c:	3340      	adds	r3, #64	; 0x40
 800bb6e:	2201      	movs	r2, #1
 800bb70:	4619      	mov	r1, r3
 800bb72:	6878      	ldr	r0, [r7, #4]
 800bb74:	f001 fc1a 	bl	800d3ac <USBD_CtlSendData>
          break;
 800bb78:	e026      	b.n	800bbc8 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800bb7a:	683b      	ldr	r3, [r7, #0]
 800bb7c:	885b      	ldrh	r3, [r3, #2]
 800bb7e:	0a1b      	lsrs	r3, r3, #8
 800bb80:	b29b      	uxth	r3, r3
 800bb82:	b2db      	uxtb	r3, r3
 800bb84:	461a      	mov	r2, r3
 800bb86:	693b      	ldr	r3, [r7, #16]
 800bb88:	645a      	str	r2, [r3, #68]	; 0x44
          break;
 800bb8a:	e01d      	b.n	800bbc8 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 800bb8c:	693b      	ldr	r3, [r7, #16]
 800bb8e:	3344      	adds	r3, #68	; 0x44
 800bb90:	2201      	movs	r2, #1
 800bb92:	4619      	mov	r1, r3
 800bb94:	6878      	ldr	r0, [r7, #4]
 800bb96:	f001 fc09 	bl	800d3ac <USBD_CtlSendData>
          break;
 800bb9a:	e015      	b.n	800bbc8 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_SET_REPORT:
          hhid->IsReportAvailable = 1U;
 800bb9c:	693b      	ldr	r3, [r7, #16]
 800bb9e:	2201      	movs	r2, #1
 800bba0:	64da      	str	r2, [r3, #76]	; 0x4c
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 800bba2:	6939      	ldr	r1, [r7, #16]
                                  MIN(req->wLength, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE));
 800bba4:	683b      	ldr	r3, [r7, #0]
 800bba6:	88db      	ldrh	r3, [r3, #6]
 800bba8:	2b02      	cmp	r3, #2
 800bbaa:	bf28      	it	cs
 800bbac:	2302      	movcs	r3, #2
 800bbae:	b29b      	uxth	r3, r3
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 800bbb0:	461a      	mov	r2, r3
 800bbb2:	6878      	ldr	r0, [r7, #4]
 800bbb4:	f001 fc26 	bl	800d404 <USBD_CtlPrepareRx>
          break;
 800bbb8:	e006      	b.n	800bbc8 <USBD_CUSTOM_HID_Setup+0xec>

        default:
          USBD_CtlError(pdev, req);
 800bbba:	6839      	ldr	r1, [r7, #0]
 800bbbc:	6878      	ldr	r0, [r7, #4]
 800bbbe:	f001 fb84 	bl	800d2ca <USBD_CtlError>
          ret = USBD_FAIL;
 800bbc2:	2303      	movs	r3, #3
 800bbc4:	75fb      	strb	r3, [r7, #23]
          break;
 800bbc6:	bf00      	nop
      }
      break;
 800bbc8:	e0a1      	b.n	800bd0e <USBD_CUSTOM_HID_Setup+0x232>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bbca:	683b      	ldr	r3, [r7, #0]
 800bbcc:	785b      	ldrb	r3, [r3, #1]
 800bbce:	2b0b      	cmp	r3, #11
 800bbd0:	f200 808d 	bhi.w	800bcee <USBD_CUSTOM_HID_Setup+0x212>
 800bbd4:	a201      	add	r2, pc, #4	; (adr r2, 800bbdc <USBD_CUSTOM_HID_Setup+0x100>)
 800bbd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbda:	bf00      	nop
 800bbdc:	0800bc0d 	.word	0x0800bc0d
 800bbe0:	0800bcfd 	.word	0x0800bcfd
 800bbe4:	0800bcef 	.word	0x0800bcef
 800bbe8:	0800bcef 	.word	0x0800bcef
 800bbec:	0800bcef 	.word	0x0800bcef
 800bbf0:	0800bcef 	.word	0x0800bcef
 800bbf4:	0800bc37 	.word	0x0800bc37
 800bbf8:	0800bcef 	.word	0x0800bcef
 800bbfc:	0800bcef 	.word	0x0800bcef
 800bc00:	0800bcef 	.word	0x0800bcef
 800bc04:	0800bc9d 	.word	0x0800bc9d
 800bc08:	0800bcc7 	.word	0x0800bcc7
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc12:	b2db      	uxtb	r3, r3
 800bc14:	2b03      	cmp	r3, #3
 800bc16:	d107      	bne.n	800bc28 <USBD_CUSTOM_HID_Setup+0x14c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800bc18:	f107 030e 	add.w	r3, r7, #14
 800bc1c:	2202      	movs	r2, #2
 800bc1e:	4619      	mov	r1, r3
 800bc20:	6878      	ldr	r0, [r7, #4]
 800bc22:	f001 fbc3 	bl	800d3ac <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800bc26:	e06a      	b.n	800bcfe <USBD_CUSTOM_HID_Setup+0x222>
            USBD_CtlError(pdev, req);
 800bc28:	6839      	ldr	r1, [r7, #0]
 800bc2a:	6878      	ldr	r0, [r7, #4]
 800bc2c:	f001 fb4d 	bl	800d2ca <USBD_CtlError>
            ret = USBD_FAIL;
 800bc30:	2303      	movs	r3, #3
 800bc32:	75fb      	strb	r3, [r7, #23]
          break;
 800bc34:	e063      	b.n	800bcfe <USBD_CUSTOM_HID_Setup+0x222>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 800bc36:	683b      	ldr	r3, [r7, #0]
 800bc38:	885b      	ldrh	r3, [r3, #2]
 800bc3a:	0a1b      	lsrs	r3, r3, #8
 800bc3c:	b29b      	uxth	r3, r3
 800bc3e:	2b22      	cmp	r3, #34	; 0x22
 800bc40:	d125      	bne.n	800bc8e <USBD_CUSTOM_HID_Setup+0x1b2>
          {
              if(req->wIndex == USB_MOUSE_IFNUM){
 800bc42:	683b      	ldr	r3, [r7, #0]
 800bc44:	889b      	ldrh	r3, [r3, #4]
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d108      	bne.n	800bc5c <USBD_CUSTOM_HID_Setup+0x180>
                  pbuf = HID_MOUSE_ReportDesc;
 800bc4a:	4b33      	ldr	r3, [pc, #204]	; (800bd18 <USBD_CUSTOM_HID_Setup+0x23c>)
 800bc4c:	61bb      	str	r3, [r7, #24]
                  len = MIN(USB_MOUSEHID_REPORT_DESC_LEN, req->wLength);
 800bc4e:	683b      	ldr	r3, [r7, #0]
 800bc50:	88db      	ldrh	r3, [r3, #6]
 800bc52:	2b40      	cmp	r3, #64	; 0x40
 800bc54:	bf28      	it	cs
 800bc56:	2340      	movcs	r3, #64	; 0x40
 800bc58:	83fb      	strh	r3, [r7, #30]
 800bc5a:	e018      	b.n	800bc8e <USBD_CUSTOM_HID_Setup+0x1b2>
              } else if(req->wIndex == USB_KBD_IFNUM){
 800bc5c:	683b      	ldr	r3, [r7, #0]
 800bc5e:	889b      	ldrh	r3, [r3, #4]
 800bc60:	2b01      	cmp	r3, #1
 800bc62:	d108      	bne.n	800bc76 <USBD_CUSTOM_HID_Setup+0x19a>
                  pbuf = HID_KEY_ReportDesc;
 800bc64:	4b2d      	ldr	r3, [pc, #180]	; (800bd1c <USBD_CUSTOM_HID_Setup+0x240>)
 800bc66:	61bb      	str	r3, [r7, #24]
                  len = MIN(USB_KBDHID_REPORT_DESC_LEN, req->wLength);
 800bc68:	683b      	ldr	r3, [r7, #0]
 800bc6a:	88db      	ldrh	r3, [r3, #6]
 800bc6c:	2b2d      	cmp	r3, #45	; 0x2d
 800bc6e:	bf28      	it	cs
 800bc70:	232d      	movcs	r3, #45	; 0x2d
 800bc72:	83fb      	strh	r3, [r7, #30]
 800bc74:	e00b      	b.n	800bc8e <USBD_CUSTOM_HID_Setup+0x1b2>
              } else if(req->wIndex == USB_GENERIC_HID_IFNUM){
 800bc76:	683b      	ldr	r3, [r7, #0]
 800bc78:	889b      	ldrh	r3, [r3, #4]
 800bc7a:	2b02      	cmp	r3, #2
 800bc7c:	d107      	bne.n	800bc8e <USBD_CUSTOM_HID_Setup+0x1b2>
                  pbuf = HID_GHID_ReportDesc;
 800bc7e:	4b28      	ldr	r3, [pc, #160]	; (800bd20 <USBD_CUSTOM_HID_Setup+0x244>)
 800bc80:	61bb      	str	r3, [r7, #24]
                  len = MIN(USB_GHID_REPORT_DESC_LEN, req->wLength);
 800bc82:	683b      	ldr	r3, [r7, #0]
 800bc84:	88db      	ldrh	r3, [r3, #6]
 800bc86:	2b15      	cmp	r3, #21
 800bc88:	bf28      	it	cs
 800bc8a:	2315      	movcs	r3, #21
 800bc8c:	83fb      	strh	r3, [r7, #30]
              }
          }


          (void)USBD_CtlSendData(pdev, pbuf, len);
 800bc8e:	8bfb      	ldrh	r3, [r7, #30]
 800bc90:	461a      	mov	r2, r3
 800bc92:	69b9      	ldr	r1, [r7, #24]
 800bc94:	6878      	ldr	r0, [r7, #4]
 800bc96:	f001 fb89 	bl	800d3ac <USBD_CtlSendData>
          break;
 800bc9a:	e030      	b.n	800bcfe <USBD_CUSTOM_HID_Setup+0x222>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bca2:	b2db      	uxtb	r3, r3
 800bca4:	2b03      	cmp	r3, #3
 800bca6:	d107      	bne.n	800bcb8 <USBD_CUSTOM_HID_Setup+0x1dc>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 800bca8:	693b      	ldr	r3, [r7, #16]
 800bcaa:	3348      	adds	r3, #72	; 0x48
 800bcac:	2201      	movs	r2, #1
 800bcae:	4619      	mov	r1, r3
 800bcb0:	6878      	ldr	r0, [r7, #4]
 800bcb2:	f001 fb7b 	bl	800d3ac <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800bcb6:	e022      	b.n	800bcfe <USBD_CUSTOM_HID_Setup+0x222>
            USBD_CtlError(pdev, req);
 800bcb8:	6839      	ldr	r1, [r7, #0]
 800bcba:	6878      	ldr	r0, [r7, #4]
 800bcbc:	f001 fb05 	bl	800d2ca <USBD_CtlError>
            ret = USBD_FAIL;
 800bcc0:	2303      	movs	r3, #3
 800bcc2:	75fb      	strb	r3, [r7, #23]
          break;
 800bcc4:	e01b      	b.n	800bcfe <USBD_CUSTOM_HID_Setup+0x222>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bccc:	b2db      	uxtb	r3, r3
 800bcce:	2b03      	cmp	r3, #3
 800bcd0:	d106      	bne.n	800bce0 <USBD_CUSTOM_HID_Setup+0x204>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 800bcd2:	683b      	ldr	r3, [r7, #0]
 800bcd4:	885b      	ldrh	r3, [r3, #2]
 800bcd6:	b2db      	uxtb	r3, r3
 800bcd8:	461a      	mov	r2, r3
 800bcda:	693b      	ldr	r3, [r7, #16]
 800bcdc:	649a      	str	r2, [r3, #72]	; 0x48
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800bcde:	e00e      	b.n	800bcfe <USBD_CUSTOM_HID_Setup+0x222>
            USBD_CtlError(pdev, req);
 800bce0:	6839      	ldr	r1, [r7, #0]
 800bce2:	6878      	ldr	r0, [r7, #4]
 800bce4:	f001 faf1 	bl	800d2ca <USBD_CtlError>
            ret = USBD_FAIL;
 800bce8:	2303      	movs	r3, #3
 800bcea:	75fb      	strb	r3, [r7, #23]
          break;
 800bcec:	e007      	b.n	800bcfe <USBD_CUSTOM_HID_Setup+0x222>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800bcee:	6839      	ldr	r1, [r7, #0]
 800bcf0:	6878      	ldr	r0, [r7, #4]
 800bcf2:	f001 faea 	bl	800d2ca <USBD_CtlError>
          ret = USBD_FAIL;
 800bcf6:	2303      	movs	r3, #3
 800bcf8:	75fb      	strb	r3, [r7, #23]
          break;
 800bcfa:	e000      	b.n	800bcfe <USBD_CUSTOM_HID_Setup+0x222>
          break;
 800bcfc:	bf00      	nop
      }
      break;
 800bcfe:	e006      	b.n	800bd0e <USBD_CUSTOM_HID_Setup+0x232>

    default:
      USBD_CtlError(pdev, req);
 800bd00:	6839      	ldr	r1, [r7, #0]
 800bd02:	6878      	ldr	r0, [r7, #4]
 800bd04:	f001 fae1 	bl	800d2ca <USBD_CtlError>
      ret = USBD_FAIL;
 800bd08:	2303      	movs	r3, #3
 800bd0a:	75fb      	strb	r3, [r7, #23]
      break;
 800bd0c:	bf00      	nop
  }
  return (uint8_t)ret;
 800bd0e:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd10:	4618      	mov	r0, r3
 800bd12:	3720      	adds	r7, #32
 800bd14:	46bd      	mov	sp, r7
 800bd16:	bd80      	pop	{r7, pc}
 800bd18:	200001d8 	.word	0x200001d8
 800bd1c:	20000218 	.word	0x20000218
 800bd20:	20000248 	.word	0x20000248

0800bd24 <USBD_CUSTOM_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len, uint8_t epnum)
{
 800bd24:	b580      	push	{r7, lr}
 800bd26:	b086      	sub	sp, #24
 800bd28:	af00      	add	r7, sp, #0
 800bd2a:	60f8      	str	r0, [r7, #12]
 800bd2c:	60b9      	str	r1, [r7, #8]
 800bd2e:	4611      	mov	r1, r2
 800bd30:	461a      	mov	r2, r3
 800bd32:	460b      	mov	r3, r1
 800bd34:	80fb      	strh	r3, [r7, #6]
 800bd36:	4613      	mov	r3, r2
 800bd38:	717b      	strb	r3, [r7, #5]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	32b0      	adds	r2, #176	; 0xb0
 800bd44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d101      	bne.n	800bd50 <USBD_CUSTOM_HID_SendReport+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 800bd4c:	2303      	movs	r3, #3
 800bd4e:	e020      	b.n	800bd92 <USBD_CUSTOM_HID_SendReport+0x6e>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	32b0      	adds	r2, #176	; 0xb0
 800bd5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd5e:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bd66:	b2db      	uxtb	r3, r3
 800bd68:	2b03      	cmp	r3, #3
 800bd6a:	d111      	bne.n	800bd90 <USBD_CUSTOM_HID_SendReport+0x6c>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 800bd6c:	697b      	ldr	r3, [r7, #20]
 800bd6e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d10a      	bne.n	800bd8c <USBD_CUSTOM_HID_SendReport+0x68>
    {
      hhid->state = CUSTOM_HID_BUSY;
 800bd76:	697b      	ldr	r3, [r7, #20]
 800bd78:	2201      	movs	r2, #1
 800bd7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      (void)USBD_LL_Transmit(pdev, epnum, report, len);
 800bd7e:	88fb      	ldrh	r3, [r7, #6]
 800bd80:	7979      	ldrb	r1, [r7, #5]
 800bd82:	68ba      	ldr	r2, [r7, #8]
 800bd84:	68f8      	ldr	r0, [r7, #12]
 800bd86:	f001 ffa2 	bl	800dcce <USBD_LL_Transmit>
 800bd8a:	e001      	b.n	800bd90 <USBD_CUSTOM_HID_SendReport+0x6c>
    }
    else
    {
      return (uint8_t)USBD_BUSY;
 800bd8c:	2301      	movs	r3, #1
 800bd8e:	e000      	b.n	800bd92 <USBD_CUSTOM_HID_SendReport+0x6e>
    }
  }
  return (uint8_t)USBD_OK;
 800bd90:	2300      	movs	r3, #0
}
 800bd92:	4618      	mov	r0, r3
 800bd94:	3718      	adds	r7, #24
 800bd96:	46bd      	mov	sp, r7
 800bd98:	bd80      	pop	{r7, pc}
	...

0800bd9c <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 800bd9c:	b480      	push	{r7}
 800bd9e:	b083      	sub	sp, #12
 800bda0:	af00      	add	r7, sp, #0
 800bda2:	6078      	str	r0, [r7, #4]

  *length = (uint16_t)sizeof(KeyPad_ConfigDesc);
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	2254      	movs	r2, #84	; 0x54
 800bda8:	801a      	strh	r2, [r3, #0]
  return KeyPad_ConfigDesc;
 800bdaa:	4b03      	ldr	r3, [pc, #12]	; (800bdb8 <USBD_CUSTOM_HID_GetFSCfgDesc+0x1c>)
}
 800bdac:	4618      	mov	r0, r3
 800bdae:	370c      	adds	r7, #12
 800bdb0:	46bd      	mov	sp, r7
 800bdb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb6:	4770      	bx	lr
 800bdb8:	20000260 	.word	0x20000260

0800bdbc <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 800bdbc:	b480      	push	{r7}
 800bdbe:	b083      	sub	sp, #12
 800bdc0:	af00      	add	r7, sp, #0
 800bdc2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(KeyPad_ConfigDesc);
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	2254      	movs	r2, #84	; 0x54
 800bdc8:	801a      	strh	r2, [r3, #0]
  return KeyPad_ConfigDesc;
 800bdca:	4b03      	ldr	r3, [pc, #12]	; (800bdd8 <USBD_CUSTOM_HID_GetHSCfgDesc+0x1c>)
}
 800bdcc:	4618      	mov	r0, r3
 800bdce:	370c      	adds	r7, #12
 800bdd0:	46bd      	mov	sp, r7
 800bdd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd6:	4770      	bx	lr
 800bdd8:	20000260 	.word	0x20000260

0800bddc <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800bddc:	b480      	push	{r7}
 800bdde:	b083      	sub	sp, #12
 800bde0:	af00      	add	r7, sp, #0
 800bde2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(KeyPad_ConfigDesc);
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	2254      	movs	r2, #84	; 0x54
 800bde8:	801a      	strh	r2, [r3, #0]
  return KeyPad_ConfigDesc;
 800bdea:	4b03      	ldr	r3, [pc, #12]	; (800bdf8 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 800bdec:	4618      	mov	r0, r3
 800bdee:	370c      	adds	r7, #12
 800bdf0:	46bd      	mov	sp, r7
 800bdf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf6:	4770      	bx	lr
 800bdf8:	20000260 	.word	0x20000260

0800bdfc <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bdfc:	b480      	push	{r7}
 800bdfe:	b083      	sub	sp, #12
 800be00:	af00      	add	r7, sp, #0
 800be02:	6078      	str	r0, [r7, #4]
 800be04:	460b      	mov	r3, r1
 800be06:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = CUSTOM_HID_IDLE;
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	32b0      	adds	r2, #176	; 0xb0
 800be12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be16:	2200      	movs	r2, #0
 800be18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return (uint8_t)USBD_OK;
 800be1c:	2300      	movs	r3, #0
}
 800be1e:	4618      	mov	r0, r3
 800be20:	370c      	adds	r7, #12
 800be22:	46bd      	mov	sp, r7
 800be24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be28:	4770      	bx	lr

0800be2a <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800be2a:	b580      	push	{r7, lr}
 800be2c:	b084      	sub	sp, #16
 800be2e:	af00      	add	r7, sp, #0
 800be30:	6078      	str	r0, [r7, #4]
 800be32:	460b      	mov	r3, r1
 800be34:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	32b0      	adds	r2, #176	; 0xb0
 800be40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be44:	2b00      	cmp	r3, #0
 800be46:	d101      	bne.n	800be4c <USBD_CUSTOM_HID_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800be48:	2303      	movs	r3, #3
 800be4a:	e017      	b.n	800be7c <USBD_CUSTOM_HID_DataOut+0x52>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	32b0      	adds	r2, #176	; 0xb0
 800be56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be5a:	60fb      	str	r3, [r7, #12]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800be62:	687a      	ldr	r2, [r7, #4]
 800be64:	33b0      	adds	r3, #176	; 0xb0
 800be66:	009b      	lsls	r3, r3, #2
 800be68:	4413      	add	r3, r2
 800be6a:	685b      	ldr	r3, [r3, #4]
 800be6c:	68db      	ldr	r3, [r3, #12]
 800be6e:	68fa      	ldr	r2, [r7, #12]
 800be70:	7810      	ldrb	r0, [r2, #0]
 800be72:	68fa      	ldr	r2, [r7, #12]
 800be74:	7852      	ldrb	r2, [r2, #1]
 800be76:	4611      	mov	r1, r2
 800be78:	4798      	blx	r3
                                                                           hhid->Report_buf[1]);

  return (uint8_t)USBD_OK;
 800be7a:	2300      	movs	r3, #0
}
 800be7c:	4618      	mov	r0, r3
 800be7e:	3710      	adds	r7, #16
 800be80:	46bd      	mov	sp, r7
 800be82:	bd80      	pop	{r7, pc}

0800be84 <USBD_CUSTOM_HID_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800be84:	b580      	push	{r7, lr}
 800be86:	b084      	sub	sp, #16
 800be88:	af00      	add	r7, sp, #0
 800be8a:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	32b0      	adds	r2, #176	; 0xb0
 800be96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d101      	bne.n	800bea2 <USBD_CUSTOM_HID_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800be9e:	2303      	movs	r3, #3
 800bea0:	e00e      	b.n	800bec0 <USBD_CUSTOM_HID_ReceivePacket+0x3c>
#ifdef USE_USBD_COMPOSITE
  /* Get OUT Endpoint address allocated for this class instance */
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	32b0      	adds	r2, #176	; 0xb0
 800beac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800beb0:	60fb      	str	r3, [r7, #12]

  /* Resume USB Out process */
  (void)USBD_LL_PrepareReceive(pdev, GENERIC_HID_OUT_ADDR, hhid->Report_buf, CONFIG_CHANGE_BYTES);
 800beb2:	68fa      	ldr	r2, [r7, #12]
 800beb4:	2306      	movs	r3, #6
 800beb6:	2103      	movs	r1, #3
 800beb8:	6878      	ldr	r0, [r7, #4]
 800beba:	f001 ff29 	bl	800dd10 <USBD_LL_PrepareReceive>

  return (uint8_t)USBD_OK;
 800bebe:	2300      	movs	r3, #0
}
 800bec0:	4618      	mov	r0, r3
 800bec2:	3710      	adds	r7, #16
 800bec4:	46bd      	mov	sp, r7
 800bec6:	bd80      	pop	{r7, pc}

0800bec8 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800bec8:	b580      	push	{r7, lr}
 800beca:	b084      	sub	sp, #16
 800becc:	af00      	add	r7, sp, #0
 800bece:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	32b0      	adds	r2, #176	; 0xb0
 800beda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bede:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d101      	bne.n	800beea <USBD_CUSTOM_HID_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800bee6:	2303      	movs	r3, #3
 800bee8:	e016      	b.n	800bf18 <USBD_CUSTOM_HID_EP0_RxReady+0x50>
  }

  if (hhid->IsReportAvailable == 1U)
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800beee:	2b01      	cmp	r3, #1
 800bef0:	d111      	bne.n	800bf16 <USBD_CUSTOM_HID_EP0_RxReady+0x4e>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bef8:	687a      	ldr	r2, [r7, #4]
 800befa:	33b0      	adds	r3, #176	; 0xb0
 800befc:	009b      	lsls	r3, r3, #2
 800befe:	4413      	add	r3, r2
 800bf00:	685b      	ldr	r3, [r3, #4]
 800bf02:	68db      	ldr	r3, [r3, #12]
 800bf04:	68fa      	ldr	r2, [r7, #12]
 800bf06:	7810      	ldrb	r0, [r2, #0]
 800bf08:	68fa      	ldr	r2, [r7, #12]
 800bf0a:	7852      	ldrb	r2, [r2, #1]
 800bf0c:	4611      	mov	r1, r2
 800bf0e:	4798      	blx	r3
                                                                             hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	2200      	movs	r2, #0
 800bf14:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return (uint8_t)USBD_OK;
 800bf16:	2300      	movs	r3, #0
}
 800bf18:	4618      	mov	r0, r3
 800bf1a:	3710      	adds	r7, #16
 800bf1c:	46bd      	mov	sp, r7
 800bf1e:	bd80      	pop	{r7, pc}

0800bf20 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 800bf20:	b480      	push	{r7}
 800bf22:	b083      	sub	sp, #12
 800bf24:	af00      	add	r7, sp, #0
 800bf26:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	220a      	movs	r2, #10
 800bf2c:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 800bf2e:	4b03      	ldr	r3, [pc, #12]	; (800bf3c <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 800bf30:	4618      	mov	r0, r3
 800bf32:	370c      	adds	r7, #12
 800bf34:	46bd      	mov	sp, r7
 800bf36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf3a:	4770      	bx	lr
 800bf3c:	200002b4 	.word	0x200002b4

0800bf40 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 800bf40:	b480      	push	{r7}
 800bf42:	b083      	sub	sp, #12
 800bf44:	af00      	add	r7, sp, #0
 800bf46:	6078      	str	r0, [r7, #4]
 800bf48:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800bf4a:	683b      	ldr	r3, [r7, #0]
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d101      	bne.n	800bf54 <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800bf50:	2303      	movs	r3, #3
 800bf52:	e009      	b.n	800bf68 <USBD_CUSTOM_HID_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bf5a:	687a      	ldr	r2, [r7, #4]
 800bf5c:	33b0      	adds	r3, #176	; 0xb0
 800bf5e:	009b      	lsls	r3, r3, #2
 800bf60:	4413      	add	r3, r2
 800bf62:	683a      	ldr	r2, [r7, #0]
 800bf64:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800bf66:	2300      	movs	r3, #0
}
 800bf68:	4618      	mov	r0, r3
 800bf6a:	370c      	adds	r7, #12
 800bf6c:	46bd      	mov	sp, r7
 800bf6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf72:	4770      	bx	lr

0800bf74 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800bf74:	b580      	push	{r7, lr}
 800bf76:	b086      	sub	sp, #24
 800bf78:	af00      	add	r7, sp, #0
 800bf7a:	60f8      	str	r0, [r7, #12]
 800bf7c:	60b9      	str	r1, [r7, #8]
 800bf7e:	4613      	mov	r3, r2
 800bf80:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d101      	bne.n	800bf8c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800bf88:	2303      	movs	r3, #3
 800bf8a:	e01f      	b.n	800bfcc <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	2200      	movs	r2, #0
 800bf90:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	2200      	movs	r2, #0
 800bf98:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	2200      	movs	r2, #0
 800bfa0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800bfa4:	68bb      	ldr	r3, [r7, #8]
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d003      	beq.n	800bfb2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	68ba      	ldr	r2, [r7, #8]
 800bfae:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	2201      	movs	r2, #1
 800bfb6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	79fa      	ldrb	r2, [r7, #7]
 800bfbe:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800bfc0:	68f8      	ldr	r0, [r7, #12]
 800bfc2:	f001 fd49 	bl	800da58 <USBD_LL_Init>
 800bfc6:	4603      	mov	r3, r0
 800bfc8:	75fb      	strb	r3, [r7, #23]

  return ret;
 800bfca:	7dfb      	ldrb	r3, [r7, #23]
}
 800bfcc:	4618      	mov	r0, r3
 800bfce:	3718      	adds	r7, #24
 800bfd0:	46bd      	mov	sp, r7
 800bfd2:	bd80      	pop	{r7, pc}

0800bfd4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800bfd4:	b580      	push	{r7, lr}
 800bfd6:	b084      	sub	sp, #16
 800bfd8:	af00      	add	r7, sp, #0
 800bfda:	6078      	str	r0, [r7, #4]
 800bfdc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bfde:	2300      	movs	r3, #0
 800bfe0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800bfe2:	683b      	ldr	r3, [r7, #0]
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d101      	bne.n	800bfec <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800bfe8:	2303      	movs	r3, #3
 800bfea:	e025      	b.n	800c038 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	683a      	ldr	r2, [r7, #0]
 800bff0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	32ae      	adds	r2, #174	; 0xae
 800bffe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c004:	2b00      	cmp	r3, #0
 800c006:	d00f      	beq.n	800c028 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	32ae      	adds	r2, #174	; 0xae
 800c012:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c018:	f107 020e 	add.w	r2, r7, #14
 800c01c:	4610      	mov	r0, r2
 800c01e:	4798      	blx	r3
 800c020:	4602      	mov	r2, r0
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800c02e:	1c5a      	adds	r2, r3, #1
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800c036:	2300      	movs	r3, #0
}
 800c038:	4618      	mov	r0, r3
 800c03a:	3710      	adds	r7, #16
 800c03c:	46bd      	mov	sp, r7
 800c03e:	bd80      	pop	{r7, pc}

0800c040 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c040:	b580      	push	{r7, lr}
 800c042:	b082      	sub	sp, #8
 800c044:	af00      	add	r7, sp, #0
 800c046:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800c048:	6878      	ldr	r0, [r7, #4]
 800c04a:	f001 fd57 	bl	800dafc <USBD_LL_Start>
 800c04e:	4603      	mov	r3, r0
}
 800c050:	4618      	mov	r0, r3
 800c052:	3708      	adds	r7, #8
 800c054:	46bd      	mov	sp, r7
 800c056:	bd80      	pop	{r7, pc}

0800c058 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800c058:	b480      	push	{r7}
 800c05a:	b083      	sub	sp, #12
 800c05c:	af00      	add	r7, sp, #0
 800c05e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c060:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800c062:	4618      	mov	r0, r3
 800c064:	370c      	adds	r7, #12
 800c066:	46bd      	mov	sp, r7
 800c068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c06c:	4770      	bx	lr

0800c06e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c06e:	b580      	push	{r7, lr}
 800c070:	b084      	sub	sp, #16
 800c072:	af00      	add	r7, sp, #0
 800c074:	6078      	str	r0, [r7, #4]
 800c076:	460b      	mov	r3, r1
 800c078:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c07a:	2300      	movs	r3, #0
 800c07c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c084:	2b00      	cmp	r3, #0
 800c086:	d009      	beq.n	800c09c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	78fa      	ldrb	r2, [r7, #3]
 800c092:	4611      	mov	r1, r2
 800c094:	6878      	ldr	r0, [r7, #4]
 800c096:	4798      	blx	r3
 800c098:	4603      	mov	r3, r0
 800c09a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c09c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c09e:	4618      	mov	r0, r3
 800c0a0:	3710      	adds	r7, #16
 800c0a2:	46bd      	mov	sp, r7
 800c0a4:	bd80      	pop	{r7, pc}

0800c0a6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c0a6:	b580      	push	{r7, lr}
 800c0a8:	b084      	sub	sp, #16
 800c0aa:	af00      	add	r7, sp, #0
 800c0ac:	6078      	str	r0, [r7, #4]
 800c0ae:	460b      	mov	r3, r1
 800c0b0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c0b2:	2300      	movs	r3, #0
 800c0b4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c0bc:	685b      	ldr	r3, [r3, #4]
 800c0be:	78fa      	ldrb	r2, [r7, #3]
 800c0c0:	4611      	mov	r1, r2
 800c0c2:	6878      	ldr	r0, [r7, #4]
 800c0c4:	4798      	blx	r3
 800c0c6:	4603      	mov	r3, r0
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d001      	beq.n	800c0d0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800c0cc:	2303      	movs	r3, #3
 800c0ce:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c0d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0d2:	4618      	mov	r0, r3
 800c0d4:	3710      	adds	r7, #16
 800c0d6:	46bd      	mov	sp, r7
 800c0d8:	bd80      	pop	{r7, pc}

0800c0da <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c0da:	b580      	push	{r7, lr}
 800c0dc:	b084      	sub	sp, #16
 800c0de:	af00      	add	r7, sp, #0
 800c0e0:	6078      	str	r0, [r7, #4]
 800c0e2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c0ea:	6839      	ldr	r1, [r7, #0]
 800c0ec:	4618      	mov	r0, r3
 800c0ee:	f001 f8b2 	bl	800d256 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	2201      	movs	r2, #1
 800c0f6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800c100:	461a      	mov	r2, r3
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c10e:	f003 031f 	and.w	r3, r3, #31
 800c112:	2b02      	cmp	r3, #2
 800c114:	d01a      	beq.n	800c14c <USBD_LL_SetupStage+0x72>
 800c116:	2b02      	cmp	r3, #2
 800c118:	d822      	bhi.n	800c160 <USBD_LL_SetupStage+0x86>
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d002      	beq.n	800c124 <USBD_LL_SetupStage+0x4a>
 800c11e:	2b01      	cmp	r3, #1
 800c120:	d00a      	beq.n	800c138 <USBD_LL_SetupStage+0x5e>
 800c122:	e01d      	b.n	800c160 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c12a:	4619      	mov	r1, r3
 800c12c:	6878      	ldr	r0, [r7, #4]
 800c12e:	f000 fb09 	bl	800c744 <USBD_StdDevReq>
 800c132:	4603      	mov	r3, r0
 800c134:	73fb      	strb	r3, [r7, #15]
      break;
 800c136:	e020      	b.n	800c17a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c13e:	4619      	mov	r1, r3
 800c140:	6878      	ldr	r0, [r7, #4]
 800c142:	f000 fb71 	bl	800c828 <USBD_StdItfReq>
 800c146:	4603      	mov	r3, r0
 800c148:	73fb      	strb	r3, [r7, #15]
      break;
 800c14a:	e016      	b.n	800c17a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c152:	4619      	mov	r1, r3
 800c154:	6878      	ldr	r0, [r7, #4]
 800c156:	f000 fbd3 	bl	800c900 <USBD_StdEPReq>
 800c15a:	4603      	mov	r3, r0
 800c15c:	73fb      	strb	r3, [r7, #15]
      break;
 800c15e:	e00c      	b.n	800c17a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c166:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c16a:	b2db      	uxtb	r3, r3
 800c16c:	4619      	mov	r1, r3
 800c16e:	6878      	ldr	r0, [r7, #4]
 800c170:	f001 fd24 	bl	800dbbc <USBD_LL_StallEP>
 800c174:	4603      	mov	r3, r0
 800c176:	73fb      	strb	r3, [r7, #15]
      break;
 800c178:	bf00      	nop
  }

  return ret;
 800c17a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c17c:	4618      	mov	r0, r3
 800c17e:	3710      	adds	r7, #16
 800c180:	46bd      	mov	sp, r7
 800c182:	bd80      	pop	{r7, pc}

0800c184 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c184:	b580      	push	{r7, lr}
 800c186:	b086      	sub	sp, #24
 800c188:	af00      	add	r7, sp, #0
 800c18a:	60f8      	str	r0, [r7, #12]
 800c18c:	460b      	mov	r3, r1
 800c18e:	607a      	str	r2, [r7, #4]
 800c190:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800c192:	2300      	movs	r3, #0
 800c194:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800c196:	7afb      	ldrb	r3, [r7, #11]
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d16e      	bne.n	800c27a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800c1a2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c1aa:	2b03      	cmp	r3, #3
 800c1ac:	f040 8098 	bne.w	800c2e0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800c1b0:	693b      	ldr	r3, [r7, #16]
 800c1b2:	689a      	ldr	r2, [r3, #8]
 800c1b4:	693b      	ldr	r3, [r7, #16]
 800c1b6:	68db      	ldr	r3, [r3, #12]
 800c1b8:	429a      	cmp	r2, r3
 800c1ba:	d913      	bls.n	800c1e4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800c1bc:	693b      	ldr	r3, [r7, #16]
 800c1be:	689a      	ldr	r2, [r3, #8]
 800c1c0:	693b      	ldr	r3, [r7, #16]
 800c1c2:	68db      	ldr	r3, [r3, #12]
 800c1c4:	1ad2      	subs	r2, r2, r3
 800c1c6:	693b      	ldr	r3, [r7, #16]
 800c1c8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c1ca:	693b      	ldr	r3, [r7, #16]
 800c1cc:	68da      	ldr	r2, [r3, #12]
 800c1ce:	693b      	ldr	r3, [r7, #16]
 800c1d0:	689b      	ldr	r3, [r3, #8]
 800c1d2:	4293      	cmp	r3, r2
 800c1d4:	bf28      	it	cs
 800c1d6:	4613      	movcs	r3, r2
 800c1d8:	461a      	mov	r2, r3
 800c1da:	6879      	ldr	r1, [r7, #4]
 800c1dc:	68f8      	ldr	r0, [r7, #12]
 800c1de:	f001 f92e 	bl	800d43e <USBD_CtlContinueRx>
 800c1e2:	e07d      	b.n	800c2e0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c1ea:	f003 031f 	and.w	r3, r3, #31
 800c1ee:	2b02      	cmp	r3, #2
 800c1f0:	d014      	beq.n	800c21c <USBD_LL_DataOutStage+0x98>
 800c1f2:	2b02      	cmp	r3, #2
 800c1f4:	d81d      	bhi.n	800c232 <USBD_LL_DataOutStage+0xae>
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d002      	beq.n	800c200 <USBD_LL_DataOutStage+0x7c>
 800c1fa:	2b01      	cmp	r3, #1
 800c1fc:	d003      	beq.n	800c206 <USBD_LL_DataOutStage+0x82>
 800c1fe:	e018      	b.n	800c232 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800c200:	2300      	movs	r3, #0
 800c202:	75bb      	strb	r3, [r7, #22]
            break;
 800c204:	e018      	b.n	800c238 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800c20c:	b2db      	uxtb	r3, r3
 800c20e:	4619      	mov	r1, r3
 800c210:	68f8      	ldr	r0, [r7, #12]
 800c212:	f000 fa5e 	bl	800c6d2 <USBD_CoreFindIF>
 800c216:	4603      	mov	r3, r0
 800c218:	75bb      	strb	r3, [r7, #22]
            break;
 800c21a:	e00d      	b.n	800c238 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800c222:	b2db      	uxtb	r3, r3
 800c224:	4619      	mov	r1, r3
 800c226:	68f8      	ldr	r0, [r7, #12]
 800c228:	f000 fa60 	bl	800c6ec <USBD_CoreFindEP>
 800c22c:	4603      	mov	r3, r0
 800c22e:	75bb      	strb	r3, [r7, #22]
            break;
 800c230:	e002      	b.n	800c238 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800c232:	2300      	movs	r3, #0
 800c234:	75bb      	strb	r3, [r7, #22]
            break;
 800c236:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800c238:	7dbb      	ldrb	r3, [r7, #22]
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d119      	bne.n	800c272 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c244:	b2db      	uxtb	r3, r3
 800c246:	2b03      	cmp	r3, #3
 800c248:	d113      	bne.n	800c272 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800c24a:	7dba      	ldrb	r2, [r7, #22]
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	32ae      	adds	r2, #174	; 0xae
 800c250:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c254:	691b      	ldr	r3, [r3, #16]
 800c256:	2b00      	cmp	r3, #0
 800c258:	d00b      	beq.n	800c272 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800c25a:	7dba      	ldrb	r2, [r7, #22]
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800c262:	7dba      	ldrb	r2, [r7, #22]
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	32ae      	adds	r2, #174	; 0xae
 800c268:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c26c:	691b      	ldr	r3, [r3, #16]
 800c26e:	68f8      	ldr	r0, [r7, #12]
 800c270:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800c272:	68f8      	ldr	r0, [r7, #12]
 800c274:	f001 f8f4 	bl	800d460 <USBD_CtlSendStatus>
 800c278:	e032      	b.n	800c2e0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800c27a:	7afb      	ldrb	r3, [r7, #11]
 800c27c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c280:	b2db      	uxtb	r3, r3
 800c282:	4619      	mov	r1, r3
 800c284:	68f8      	ldr	r0, [r7, #12]
 800c286:	f000 fa31 	bl	800c6ec <USBD_CoreFindEP>
 800c28a:	4603      	mov	r3, r0
 800c28c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c28e:	7dbb      	ldrb	r3, [r7, #22]
 800c290:	2bff      	cmp	r3, #255	; 0xff
 800c292:	d025      	beq.n	800c2e0 <USBD_LL_DataOutStage+0x15c>
 800c294:	7dbb      	ldrb	r3, [r7, #22]
 800c296:	2b00      	cmp	r3, #0
 800c298:	d122      	bne.n	800c2e0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c2a0:	b2db      	uxtb	r3, r3
 800c2a2:	2b03      	cmp	r3, #3
 800c2a4:	d117      	bne.n	800c2d6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800c2a6:	7dba      	ldrb	r2, [r7, #22]
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	32ae      	adds	r2, #174	; 0xae
 800c2ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c2b0:	699b      	ldr	r3, [r3, #24]
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d00f      	beq.n	800c2d6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800c2b6:	7dba      	ldrb	r2, [r7, #22]
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800c2be:	7dba      	ldrb	r2, [r7, #22]
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	32ae      	adds	r2, #174	; 0xae
 800c2c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c2c8:	699b      	ldr	r3, [r3, #24]
 800c2ca:	7afa      	ldrb	r2, [r7, #11]
 800c2cc:	4611      	mov	r1, r2
 800c2ce:	68f8      	ldr	r0, [r7, #12]
 800c2d0:	4798      	blx	r3
 800c2d2:	4603      	mov	r3, r0
 800c2d4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800c2d6:	7dfb      	ldrb	r3, [r7, #23]
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d001      	beq.n	800c2e0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800c2dc:	7dfb      	ldrb	r3, [r7, #23]
 800c2de:	e000      	b.n	800c2e2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800c2e0:	2300      	movs	r3, #0
}
 800c2e2:	4618      	mov	r0, r3
 800c2e4:	3718      	adds	r7, #24
 800c2e6:	46bd      	mov	sp, r7
 800c2e8:	bd80      	pop	{r7, pc}

0800c2ea <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c2ea:	b580      	push	{r7, lr}
 800c2ec:	b086      	sub	sp, #24
 800c2ee:	af00      	add	r7, sp, #0
 800c2f0:	60f8      	str	r0, [r7, #12]
 800c2f2:	460b      	mov	r3, r1
 800c2f4:	607a      	str	r2, [r7, #4]
 800c2f6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800c2f8:	7afb      	ldrb	r3, [r7, #11]
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d16f      	bne.n	800c3de <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	3314      	adds	r3, #20
 800c302:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c30a:	2b02      	cmp	r3, #2
 800c30c:	d15a      	bne.n	800c3c4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800c30e:	693b      	ldr	r3, [r7, #16]
 800c310:	689a      	ldr	r2, [r3, #8]
 800c312:	693b      	ldr	r3, [r7, #16]
 800c314:	68db      	ldr	r3, [r3, #12]
 800c316:	429a      	cmp	r2, r3
 800c318:	d914      	bls.n	800c344 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c31a:	693b      	ldr	r3, [r7, #16]
 800c31c:	689a      	ldr	r2, [r3, #8]
 800c31e:	693b      	ldr	r3, [r7, #16]
 800c320:	68db      	ldr	r3, [r3, #12]
 800c322:	1ad2      	subs	r2, r2, r3
 800c324:	693b      	ldr	r3, [r7, #16]
 800c326:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800c328:	693b      	ldr	r3, [r7, #16]
 800c32a:	689b      	ldr	r3, [r3, #8]
 800c32c:	461a      	mov	r2, r3
 800c32e:	6879      	ldr	r1, [r7, #4]
 800c330:	68f8      	ldr	r0, [r7, #12]
 800c332:	f001 f856 	bl	800d3e2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c336:	2300      	movs	r3, #0
 800c338:	2200      	movs	r2, #0
 800c33a:	2100      	movs	r1, #0
 800c33c:	68f8      	ldr	r0, [r7, #12]
 800c33e:	f001 fce7 	bl	800dd10 <USBD_LL_PrepareReceive>
 800c342:	e03f      	b.n	800c3c4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800c344:	693b      	ldr	r3, [r7, #16]
 800c346:	68da      	ldr	r2, [r3, #12]
 800c348:	693b      	ldr	r3, [r7, #16]
 800c34a:	689b      	ldr	r3, [r3, #8]
 800c34c:	429a      	cmp	r2, r3
 800c34e:	d11c      	bne.n	800c38a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800c350:	693b      	ldr	r3, [r7, #16]
 800c352:	685a      	ldr	r2, [r3, #4]
 800c354:	693b      	ldr	r3, [r7, #16]
 800c356:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800c358:	429a      	cmp	r2, r3
 800c35a:	d316      	bcc.n	800c38a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800c35c:	693b      	ldr	r3, [r7, #16]
 800c35e:	685a      	ldr	r2, [r3, #4]
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c366:	429a      	cmp	r2, r3
 800c368:	d20f      	bcs.n	800c38a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c36a:	2200      	movs	r2, #0
 800c36c:	2100      	movs	r1, #0
 800c36e:	68f8      	ldr	r0, [r7, #12]
 800c370:	f001 f837 	bl	800d3e2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	2200      	movs	r2, #0
 800c378:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c37c:	2300      	movs	r3, #0
 800c37e:	2200      	movs	r2, #0
 800c380:	2100      	movs	r1, #0
 800c382:	68f8      	ldr	r0, [r7, #12]
 800c384:	f001 fcc4 	bl	800dd10 <USBD_LL_PrepareReceive>
 800c388:	e01c      	b.n	800c3c4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c390:	b2db      	uxtb	r3, r3
 800c392:	2b03      	cmp	r3, #3
 800c394:	d10f      	bne.n	800c3b6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c39c:	68db      	ldr	r3, [r3, #12]
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d009      	beq.n	800c3b6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	2200      	movs	r2, #0
 800c3a6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c3b0:	68db      	ldr	r3, [r3, #12]
 800c3b2:	68f8      	ldr	r0, [r7, #12]
 800c3b4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c3b6:	2180      	movs	r1, #128	; 0x80
 800c3b8:	68f8      	ldr	r0, [r7, #12]
 800c3ba:	f001 fbff 	bl	800dbbc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c3be:	68f8      	ldr	r0, [r7, #12]
 800c3c0:	f001 f861 	bl	800d486 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d03a      	beq.n	800c444 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800c3ce:	68f8      	ldr	r0, [r7, #12]
 800c3d0:	f7ff fe42 	bl	800c058 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	2200      	movs	r2, #0
 800c3d8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800c3dc:	e032      	b.n	800c444 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800c3de:	7afb      	ldrb	r3, [r7, #11]
 800c3e0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c3e4:	b2db      	uxtb	r3, r3
 800c3e6:	4619      	mov	r1, r3
 800c3e8:	68f8      	ldr	r0, [r7, #12]
 800c3ea:	f000 f97f 	bl	800c6ec <USBD_CoreFindEP>
 800c3ee:	4603      	mov	r3, r0
 800c3f0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c3f2:	7dfb      	ldrb	r3, [r7, #23]
 800c3f4:	2bff      	cmp	r3, #255	; 0xff
 800c3f6:	d025      	beq.n	800c444 <USBD_LL_DataInStage+0x15a>
 800c3f8:	7dfb      	ldrb	r3, [r7, #23]
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d122      	bne.n	800c444 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c404:	b2db      	uxtb	r3, r3
 800c406:	2b03      	cmp	r3, #3
 800c408:	d11c      	bne.n	800c444 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800c40a:	7dfa      	ldrb	r2, [r7, #23]
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	32ae      	adds	r2, #174	; 0xae
 800c410:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c414:	695b      	ldr	r3, [r3, #20]
 800c416:	2b00      	cmp	r3, #0
 800c418:	d014      	beq.n	800c444 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800c41a:	7dfa      	ldrb	r2, [r7, #23]
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800c422:	7dfa      	ldrb	r2, [r7, #23]
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	32ae      	adds	r2, #174	; 0xae
 800c428:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c42c:	695b      	ldr	r3, [r3, #20]
 800c42e:	7afa      	ldrb	r2, [r7, #11]
 800c430:	4611      	mov	r1, r2
 800c432:	68f8      	ldr	r0, [r7, #12]
 800c434:	4798      	blx	r3
 800c436:	4603      	mov	r3, r0
 800c438:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800c43a:	7dbb      	ldrb	r3, [r7, #22]
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d001      	beq.n	800c444 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800c440:	7dbb      	ldrb	r3, [r7, #22]
 800c442:	e000      	b.n	800c446 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800c444:	2300      	movs	r3, #0
}
 800c446:	4618      	mov	r0, r3
 800c448:	3718      	adds	r7, #24
 800c44a:	46bd      	mov	sp, r7
 800c44c:	bd80      	pop	{r7, pc}

0800c44e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c44e:	b580      	push	{r7, lr}
 800c450:	b084      	sub	sp, #16
 800c452:	af00      	add	r7, sp, #0
 800c454:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800c456:	2300      	movs	r3, #0
 800c458:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	2201      	movs	r2, #1
 800c45e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	2200      	movs	r2, #0
 800c466:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	2200      	movs	r2, #0
 800c46e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	2200      	movs	r2, #0
 800c474:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	2200      	movs	r2, #0
 800c47c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c486:	2b00      	cmp	r3, #0
 800c488:	d014      	beq.n	800c4b4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c490:	685b      	ldr	r3, [r3, #4]
 800c492:	2b00      	cmp	r3, #0
 800c494:	d00e      	beq.n	800c4b4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c49c:	685b      	ldr	r3, [r3, #4]
 800c49e:	687a      	ldr	r2, [r7, #4]
 800c4a0:	6852      	ldr	r2, [r2, #4]
 800c4a2:	b2d2      	uxtb	r2, r2
 800c4a4:	4611      	mov	r1, r2
 800c4a6:	6878      	ldr	r0, [r7, #4]
 800c4a8:	4798      	blx	r3
 800c4aa:	4603      	mov	r3, r0
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d001      	beq.n	800c4b4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800c4b0:	2303      	movs	r3, #3
 800c4b2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c4b4:	2340      	movs	r3, #64	; 0x40
 800c4b6:	2200      	movs	r2, #0
 800c4b8:	2100      	movs	r1, #0
 800c4ba:	6878      	ldr	r0, [r7, #4]
 800c4bc:	f001 fb39 	bl	800db32 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	2201      	movs	r2, #1
 800c4c4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	2240      	movs	r2, #64	; 0x40
 800c4cc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c4d0:	2340      	movs	r3, #64	; 0x40
 800c4d2:	2200      	movs	r2, #0
 800c4d4:	2180      	movs	r1, #128	; 0x80
 800c4d6:	6878      	ldr	r0, [r7, #4]
 800c4d8:	f001 fb2b 	bl	800db32 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	2201      	movs	r2, #1
 800c4e0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	2240      	movs	r2, #64	; 0x40
 800c4e6:	621a      	str	r2, [r3, #32]

  return ret;
 800c4e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4ea:	4618      	mov	r0, r3
 800c4ec:	3710      	adds	r7, #16
 800c4ee:	46bd      	mov	sp, r7
 800c4f0:	bd80      	pop	{r7, pc}

0800c4f2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c4f2:	b480      	push	{r7}
 800c4f4:	b083      	sub	sp, #12
 800c4f6:	af00      	add	r7, sp, #0
 800c4f8:	6078      	str	r0, [r7, #4]
 800c4fa:	460b      	mov	r3, r1
 800c4fc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	78fa      	ldrb	r2, [r7, #3]
 800c502:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c504:	2300      	movs	r3, #0
}
 800c506:	4618      	mov	r0, r3
 800c508:	370c      	adds	r7, #12
 800c50a:	46bd      	mov	sp, r7
 800c50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c510:	4770      	bx	lr

0800c512 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c512:	b480      	push	{r7}
 800c514:	b083      	sub	sp, #12
 800c516:	af00      	add	r7, sp, #0
 800c518:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c520:	b2da      	uxtb	r2, r3
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	2204      	movs	r2, #4
 800c52c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800c530:	2300      	movs	r3, #0
}
 800c532:	4618      	mov	r0, r3
 800c534:	370c      	adds	r7, #12
 800c536:	46bd      	mov	sp, r7
 800c538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c53c:	4770      	bx	lr

0800c53e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c53e:	b480      	push	{r7}
 800c540:	b083      	sub	sp, #12
 800c542:	af00      	add	r7, sp, #0
 800c544:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c54c:	b2db      	uxtb	r3, r3
 800c54e:	2b04      	cmp	r3, #4
 800c550:	d106      	bne.n	800c560 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800c558:	b2da      	uxtb	r2, r3
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800c560:	2300      	movs	r3, #0
}
 800c562:	4618      	mov	r0, r3
 800c564:	370c      	adds	r7, #12
 800c566:	46bd      	mov	sp, r7
 800c568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c56c:	4770      	bx	lr

0800c56e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c56e:	b580      	push	{r7, lr}
 800c570:	b082      	sub	sp, #8
 800c572:	af00      	add	r7, sp, #0
 800c574:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c57c:	b2db      	uxtb	r3, r3
 800c57e:	2b03      	cmp	r3, #3
 800c580:	d110      	bne.n	800c5a4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d00b      	beq.n	800c5a4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c592:	69db      	ldr	r3, [r3, #28]
 800c594:	2b00      	cmp	r3, #0
 800c596:	d005      	beq.n	800c5a4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c59e:	69db      	ldr	r3, [r3, #28]
 800c5a0:	6878      	ldr	r0, [r7, #4]
 800c5a2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800c5a4:	2300      	movs	r3, #0
}
 800c5a6:	4618      	mov	r0, r3
 800c5a8:	3708      	adds	r7, #8
 800c5aa:	46bd      	mov	sp, r7
 800c5ac:	bd80      	pop	{r7, pc}

0800c5ae <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800c5ae:	b580      	push	{r7, lr}
 800c5b0:	b082      	sub	sp, #8
 800c5b2:	af00      	add	r7, sp, #0
 800c5b4:	6078      	str	r0, [r7, #4]
 800c5b6:	460b      	mov	r3, r1
 800c5b8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	32ae      	adds	r2, #174	; 0xae
 800c5c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d101      	bne.n	800c5d0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800c5cc:	2303      	movs	r3, #3
 800c5ce:	e01c      	b.n	800c60a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c5d6:	b2db      	uxtb	r3, r3
 800c5d8:	2b03      	cmp	r3, #3
 800c5da:	d115      	bne.n	800c608 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	32ae      	adds	r2, #174	; 0xae
 800c5e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c5ea:	6a1b      	ldr	r3, [r3, #32]
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d00b      	beq.n	800c608 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	32ae      	adds	r2, #174	; 0xae
 800c5fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c5fe:	6a1b      	ldr	r3, [r3, #32]
 800c600:	78fa      	ldrb	r2, [r7, #3]
 800c602:	4611      	mov	r1, r2
 800c604:	6878      	ldr	r0, [r7, #4]
 800c606:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c608:	2300      	movs	r3, #0
}
 800c60a:	4618      	mov	r0, r3
 800c60c:	3708      	adds	r7, #8
 800c60e:	46bd      	mov	sp, r7
 800c610:	bd80      	pop	{r7, pc}

0800c612 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800c612:	b580      	push	{r7, lr}
 800c614:	b082      	sub	sp, #8
 800c616:	af00      	add	r7, sp, #0
 800c618:	6078      	str	r0, [r7, #4]
 800c61a:	460b      	mov	r3, r1
 800c61c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	32ae      	adds	r2, #174	; 0xae
 800c628:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d101      	bne.n	800c634 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800c630:	2303      	movs	r3, #3
 800c632:	e01c      	b.n	800c66e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c63a:	b2db      	uxtb	r3, r3
 800c63c:	2b03      	cmp	r3, #3
 800c63e:	d115      	bne.n	800c66c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	32ae      	adds	r2, #174	; 0xae
 800c64a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c64e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c650:	2b00      	cmp	r3, #0
 800c652:	d00b      	beq.n	800c66c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	32ae      	adds	r2, #174	; 0xae
 800c65e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c664:	78fa      	ldrb	r2, [r7, #3]
 800c666:	4611      	mov	r1, r2
 800c668:	6878      	ldr	r0, [r7, #4]
 800c66a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c66c:	2300      	movs	r3, #0
}
 800c66e:	4618      	mov	r0, r3
 800c670:	3708      	adds	r7, #8
 800c672:	46bd      	mov	sp, r7
 800c674:	bd80      	pop	{r7, pc}

0800c676 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800c676:	b480      	push	{r7}
 800c678:	b083      	sub	sp, #12
 800c67a:	af00      	add	r7, sp, #0
 800c67c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c67e:	2300      	movs	r3, #0
}
 800c680:	4618      	mov	r0, r3
 800c682:	370c      	adds	r7, #12
 800c684:	46bd      	mov	sp, r7
 800c686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c68a:	4770      	bx	lr

0800c68c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800c68c:	b580      	push	{r7, lr}
 800c68e:	b084      	sub	sp, #16
 800c690:	af00      	add	r7, sp, #0
 800c692:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800c694:	2300      	movs	r3, #0
 800c696:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	2201      	movs	r2, #1
 800c69c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d00e      	beq.n	800c6c8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c6b0:	685b      	ldr	r3, [r3, #4]
 800c6b2:	687a      	ldr	r2, [r7, #4]
 800c6b4:	6852      	ldr	r2, [r2, #4]
 800c6b6:	b2d2      	uxtb	r2, r2
 800c6b8:	4611      	mov	r1, r2
 800c6ba:	6878      	ldr	r0, [r7, #4]
 800c6bc:	4798      	blx	r3
 800c6be:	4603      	mov	r3, r0
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d001      	beq.n	800c6c8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800c6c4:	2303      	movs	r3, #3
 800c6c6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c6c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6ca:	4618      	mov	r0, r3
 800c6cc:	3710      	adds	r7, #16
 800c6ce:	46bd      	mov	sp, r7
 800c6d0:	bd80      	pop	{r7, pc}

0800c6d2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c6d2:	b480      	push	{r7}
 800c6d4:	b083      	sub	sp, #12
 800c6d6:	af00      	add	r7, sp, #0
 800c6d8:	6078      	str	r0, [r7, #4]
 800c6da:	460b      	mov	r3, r1
 800c6dc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c6de:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c6e0:	4618      	mov	r0, r3
 800c6e2:	370c      	adds	r7, #12
 800c6e4:	46bd      	mov	sp, r7
 800c6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ea:	4770      	bx	lr

0800c6ec <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c6ec:	b480      	push	{r7}
 800c6ee:	b083      	sub	sp, #12
 800c6f0:	af00      	add	r7, sp, #0
 800c6f2:	6078      	str	r0, [r7, #4]
 800c6f4:	460b      	mov	r3, r1
 800c6f6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c6f8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c6fa:	4618      	mov	r0, r3
 800c6fc:	370c      	adds	r7, #12
 800c6fe:	46bd      	mov	sp, r7
 800c700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c704:	4770      	bx	lr

0800c706 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c706:	b480      	push	{r7}
 800c708:	b087      	sub	sp, #28
 800c70a:	af00      	add	r7, sp, #0
 800c70c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c712:	697b      	ldr	r3, [r7, #20]
 800c714:	781b      	ldrb	r3, [r3, #0]
 800c716:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c718:	697b      	ldr	r3, [r7, #20]
 800c71a:	3301      	adds	r3, #1
 800c71c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c71e:	697b      	ldr	r3, [r7, #20]
 800c720:	781b      	ldrb	r3, [r3, #0]
 800c722:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c724:	8a3b      	ldrh	r3, [r7, #16]
 800c726:	021b      	lsls	r3, r3, #8
 800c728:	b21a      	sxth	r2, r3
 800c72a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c72e:	4313      	orrs	r3, r2
 800c730:	b21b      	sxth	r3, r3
 800c732:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c734:	89fb      	ldrh	r3, [r7, #14]
}
 800c736:	4618      	mov	r0, r3
 800c738:	371c      	adds	r7, #28
 800c73a:	46bd      	mov	sp, r7
 800c73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c740:	4770      	bx	lr
	...

0800c744 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c744:	b580      	push	{r7, lr}
 800c746:	b084      	sub	sp, #16
 800c748:	af00      	add	r7, sp, #0
 800c74a:	6078      	str	r0, [r7, #4]
 800c74c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c74e:	2300      	movs	r3, #0
 800c750:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c752:	683b      	ldr	r3, [r7, #0]
 800c754:	781b      	ldrb	r3, [r3, #0]
 800c756:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c75a:	2b40      	cmp	r3, #64	; 0x40
 800c75c:	d005      	beq.n	800c76a <USBD_StdDevReq+0x26>
 800c75e:	2b40      	cmp	r3, #64	; 0x40
 800c760:	d857      	bhi.n	800c812 <USBD_StdDevReq+0xce>
 800c762:	2b00      	cmp	r3, #0
 800c764:	d00f      	beq.n	800c786 <USBD_StdDevReq+0x42>
 800c766:	2b20      	cmp	r3, #32
 800c768:	d153      	bne.n	800c812 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	32ae      	adds	r2, #174	; 0xae
 800c774:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c778:	689b      	ldr	r3, [r3, #8]
 800c77a:	6839      	ldr	r1, [r7, #0]
 800c77c:	6878      	ldr	r0, [r7, #4]
 800c77e:	4798      	blx	r3
 800c780:	4603      	mov	r3, r0
 800c782:	73fb      	strb	r3, [r7, #15]
      break;
 800c784:	e04a      	b.n	800c81c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c786:	683b      	ldr	r3, [r7, #0]
 800c788:	785b      	ldrb	r3, [r3, #1]
 800c78a:	2b09      	cmp	r3, #9
 800c78c:	d83b      	bhi.n	800c806 <USBD_StdDevReq+0xc2>
 800c78e:	a201      	add	r2, pc, #4	; (adr r2, 800c794 <USBD_StdDevReq+0x50>)
 800c790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c794:	0800c7e9 	.word	0x0800c7e9
 800c798:	0800c7fd 	.word	0x0800c7fd
 800c79c:	0800c807 	.word	0x0800c807
 800c7a0:	0800c7f3 	.word	0x0800c7f3
 800c7a4:	0800c807 	.word	0x0800c807
 800c7a8:	0800c7c7 	.word	0x0800c7c7
 800c7ac:	0800c7bd 	.word	0x0800c7bd
 800c7b0:	0800c807 	.word	0x0800c807
 800c7b4:	0800c7df 	.word	0x0800c7df
 800c7b8:	0800c7d1 	.word	0x0800c7d1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c7bc:	6839      	ldr	r1, [r7, #0]
 800c7be:	6878      	ldr	r0, [r7, #4]
 800c7c0:	f000 fa3c 	bl	800cc3c <USBD_GetDescriptor>
          break;
 800c7c4:	e024      	b.n	800c810 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c7c6:	6839      	ldr	r1, [r7, #0]
 800c7c8:	6878      	ldr	r0, [r7, #4]
 800c7ca:	f000 fba1 	bl	800cf10 <USBD_SetAddress>
          break;
 800c7ce:	e01f      	b.n	800c810 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800c7d0:	6839      	ldr	r1, [r7, #0]
 800c7d2:	6878      	ldr	r0, [r7, #4]
 800c7d4:	f000 fbe0 	bl	800cf98 <USBD_SetConfig>
 800c7d8:	4603      	mov	r3, r0
 800c7da:	73fb      	strb	r3, [r7, #15]
          break;
 800c7dc:	e018      	b.n	800c810 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c7de:	6839      	ldr	r1, [r7, #0]
 800c7e0:	6878      	ldr	r0, [r7, #4]
 800c7e2:	f000 fc83 	bl	800d0ec <USBD_GetConfig>
          break;
 800c7e6:	e013      	b.n	800c810 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c7e8:	6839      	ldr	r1, [r7, #0]
 800c7ea:	6878      	ldr	r0, [r7, #4]
 800c7ec:	f000 fcb4 	bl	800d158 <USBD_GetStatus>
          break;
 800c7f0:	e00e      	b.n	800c810 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c7f2:	6839      	ldr	r1, [r7, #0]
 800c7f4:	6878      	ldr	r0, [r7, #4]
 800c7f6:	f000 fce3 	bl	800d1c0 <USBD_SetFeature>
          break;
 800c7fa:	e009      	b.n	800c810 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c7fc:	6839      	ldr	r1, [r7, #0]
 800c7fe:	6878      	ldr	r0, [r7, #4]
 800c800:	f000 fd07 	bl	800d212 <USBD_ClrFeature>
          break;
 800c804:	e004      	b.n	800c810 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800c806:	6839      	ldr	r1, [r7, #0]
 800c808:	6878      	ldr	r0, [r7, #4]
 800c80a:	f000 fd5e 	bl	800d2ca <USBD_CtlError>
          break;
 800c80e:	bf00      	nop
      }
      break;
 800c810:	e004      	b.n	800c81c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800c812:	6839      	ldr	r1, [r7, #0]
 800c814:	6878      	ldr	r0, [r7, #4]
 800c816:	f000 fd58 	bl	800d2ca <USBD_CtlError>
      break;
 800c81a:	bf00      	nop
  }

  return ret;
 800c81c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c81e:	4618      	mov	r0, r3
 800c820:	3710      	adds	r7, #16
 800c822:	46bd      	mov	sp, r7
 800c824:	bd80      	pop	{r7, pc}
 800c826:	bf00      	nop

0800c828 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c828:	b580      	push	{r7, lr}
 800c82a:	b084      	sub	sp, #16
 800c82c:	af00      	add	r7, sp, #0
 800c82e:	6078      	str	r0, [r7, #4]
 800c830:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c832:	2300      	movs	r3, #0
 800c834:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c836:	683b      	ldr	r3, [r7, #0]
 800c838:	781b      	ldrb	r3, [r3, #0]
 800c83a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c83e:	2b40      	cmp	r3, #64	; 0x40
 800c840:	d005      	beq.n	800c84e <USBD_StdItfReq+0x26>
 800c842:	2b40      	cmp	r3, #64	; 0x40
 800c844:	d852      	bhi.n	800c8ec <USBD_StdItfReq+0xc4>
 800c846:	2b00      	cmp	r3, #0
 800c848:	d001      	beq.n	800c84e <USBD_StdItfReq+0x26>
 800c84a:	2b20      	cmp	r3, #32
 800c84c:	d14e      	bne.n	800c8ec <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c854:	b2db      	uxtb	r3, r3
 800c856:	3b01      	subs	r3, #1
 800c858:	2b02      	cmp	r3, #2
 800c85a:	d840      	bhi.n	800c8de <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c85c:	683b      	ldr	r3, [r7, #0]
 800c85e:	889b      	ldrh	r3, [r3, #4]
 800c860:	b2db      	uxtb	r3, r3
 800c862:	2b01      	cmp	r3, #1
 800c864:	d836      	bhi.n	800c8d4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800c866:	683b      	ldr	r3, [r7, #0]
 800c868:	889b      	ldrh	r3, [r3, #4]
 800c86a:	b2db      	uxtb	r3, r3
 800c86c:	4619      	mov	r1, r3
 800c86e:	6878      	ldr	r0, [r7, #4]
 800c870:	f7ff ff2f 	bl	800c6d2 <USBD_CoreFindIF>
 800c874:	4603      	mov	r3, r0
 800c876:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c878:	7bbb      	ldrb	r3, [r7, #14]
 800c87a:	2bff      	cmp	r3, #255	; 0xff
 800c87c:	d01d      	beq.n	800c8ba <USBD_StdItfReq+0x92>
 800c87e:	7bbb      	ldrb	r3, [r7, #14]
 800c880:	2b00      	cmp	r3, #0
 800c882:	d11a      	bne.n	800c8ba <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800c884:	7bba      	ldrb	r2, [r7, #14]
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	32ae      	adds	r2, #174	; 0xae
 800c88a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c88e:	689b      	ldr	r3, [r3, #8]
 800c890:	2b00      	cmp	r3, #0
 800c892:	d00f      	beq.n	800c8b4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800c894:	7bba      	ldrb	r2, [r7, #14]
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c89c:	7bba      	ldrb	r2, [r7, #14]
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	32ae      	adds	r2, #174	; 0xae
 800c8a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c8a6:	689b      	ldr	r3, [r3, #8]
 800c8a8:	6839      	ldr	r1, [r7, #0]
 800c8aa:	6878      	ldr	r0, [r7, #4]
 800c8ac:	4798      	blx	r3
 800c8ae:	4603      	mov	r3, r0
 800c8b0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c8b2:	e004      	b.n	800c8be <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800c8b4:	2303      	movs	r3, #3
 800c8b6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c8b8:	e001      	b.n	800c8be <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800c8ba:	2303      	movs	r3, #3
 800c8bc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c8be:	683b      	ldr	r3, [r7, #0]
 800c8c0:	88db      	ldrh	r3, [r3, #6]
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d110      	bne.n	800c8e8 <USBD_StdItfReq+0xc0>
 800c8c6:	7bfb      	ldrb	r3, [r7, #15]
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d10d      	bne.n	800c8e8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800c8cc:	6878      	ldr	r0, [r7, #4]
 800c8ce:	f000 fdc7 	bl	800d460 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c8d2:	e009      	b.n	800c8e8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800c8d4:	6839      	ldr	r1, [r7, #0]
 800c8d6:	6878      	ldr	r0, [r7, #4]
 800c8d8:	f000 fcf7 	bl	800d2ca <USBD_CtlError>
          break;
 800c8dc:	e004      	b.n	800c8e8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800c8de:	6839      	ldr	r1, [r7, #0]
 800c8e0:	6878      	ldr	r0, [r7, #4]
 800c8e2:	f000 fcf2 	bl	800d2ca <USBD_CtlError>
          break;
 800c8e6:	e000      	b.n	800c8ea <USBD_StdItfReq+0xc2>
          break;
 800c8e8:	bf00      	nop
      }
      break;
 800c8ea:	e004      	b.n	800c8f6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800c8ec:	6839      	ldr	r1, [r7, #0]
 800c8ee:	6878      	ldr	r0, [r7, #4]
 800c8f0:	f000 fceb 	bl	800d2ca <USBD_CtlError>
      break;
 800c8f4:	bf00      	nop
  }

  return ret;
 800c8f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8f8:	4618      	mov	r0, r3
 800c8fa:	3710      	adds	r7, #16
 800c8fc:	46bd      	mov	sp, r7
 800c8fe:	bd80      	pop	{r7, pc}

0800c900 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c900:	b580      	push	{r7, lr}
 800c902:	b084      	sub	sp, #16
 800c904:	af00      	add	r7, sp, #0
 800c906:	6078      	str	r0, [r7, #4]
 800c908:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800c90a:	2300      	movs	r3, #0
 800c90c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800c90e:	683b      	ldr	r3, [r7, #0]
 800c910:	889b      	ldrh	r3, [r3, #4]
 800c912:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c914:	683b      	ldr	r3, [r7, #0]
 800c916:	781b      	ldrb	r3, [r3, #0]
 800c918:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c91c:	2b40      	cmp	r3, #64	; 0x40
 800c91e:	d007      	beq.n	800c930 <USBD_StdEPReq+0x30>
 800c920:	2b40      	cmp	r3, #64	; 0x40
 800c922:	f200 817f 	bhi.w	800cc24 <USBD_StdEPReq+0x324>
 800c926:	2b00      	cmp	r3, #0
 800c928:	d02a      	beq.n	800c980 <USBD_StdEPReq+0x80>
 800c92a:	2b20      	cmp	r3, #32
 800c92c:	f040 817a 	bne.w	800cc24 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800c930:	7bbb      	ldrb	r3, [r7, #14]
 800c932:	4619      	mov	r1, r3
 800c934:	6878      	ldr	r0, [r7, #4]
 800c936:	f7ff fed9 	bl	800c6ec <USBD_CoreFindEP>
 800c93a:	4603      	mov	r3, r0
 800c93c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c93e:	7b7b      	ldrb	r3, [r7, #13]
 800c940:	2bff      	cmp	r3, #255	; 0xff
 800c942:	f000 8174 	beq.w	800cc2e <USBD_StdEPReq+0x32e>
 800c946:	7b7b      	ldrb	r3, [r7, #13]
 800c948:	2b00      	cmp	r3, #0
 800c94a:	f040 8170 	bne.w	800cc2e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800c94e:	7b7a      	ldrb	r2, [r7, #13]
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800c956:	7b7a      	ldrb	r2, [r7, #13]
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	32ae      	adds	r2, #174	; 0xae
 800c95c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c960:	689b      	ldr	r3, [r3, #8]
 800c962:	2b00      	cmp	r3, #0
 800c964:	f000 8163 	beq.w	800cc2e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800c968:	7b7a      	ldrb	r2, [r7, #13]
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	32ae      	adds	r2, #174	; 0xae
 800c96e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c972:	689b      	ldr	r3, [r3, #8]
 800c974:	6839      	ldr	r1, [r7, #0]
 800c976:	6878      	ldr	r0, [r7, #4]
 800c978:	4798      	blx	r3
 800c97a:	4603      	mov	r3, r0
 800c97c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800c97e:	e156      	b.n	800cc2e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c980:	683b      	ldr	r3, [r7, #0]
 800c982:	785b      	ldrb	r3, [r3, #1]
 800c984:	2b03      	cmp	r3, #3
 800c986:	d008      	beq.n	800c99a <USBD_StdEPReq+0x9a>
 800c988:	2b03      	cmp	r3, #3
 800c98a:	f300 8145 	bgt.w	800cc18 <USBD_StdEPReq+0x318>
 800c98e:	2b00      	cmp	r3, #0
 800c990:	f000 809b 	beq.w	800caca <USBD_StdEPReq+0x1ca>
 800c994:	2b01      	cmp	r3, #1
 800c996:	d03c      	beq.n	800ca12 <USBD_StdEPReq+0x112>
 800c998:	e13e      	b.n	800cc18 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c9a0:	b2db      	uxtb	r3, r3
 800c9a2:	2b02      	cmp	r3, #2
 800c9a4:	d002      	beq.n	800c9ac <USBD_StdEPReq+0xac>
 800c9a6:	2b03      	cmp	r3, #3
 800c9a8:	d016      	beq.n	800c9d8 <USBD_StdEPReq+0xd8>
 800c9aa:	e02c      	b.n	800ca06 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c9ac:	7bbb      	ldrb	r3, [r7, #14]
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d00d      	beq.n	800c9ce <USBD_StdEPReq+0xce>
 800c9b2:	7bbb      	ldrb	r3, [r7, #14]
 800c9b4:	2b80      	cmp	r3, #128	; 0x80
 800c9b6:	d00a      	beq.n	800c9ce <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c9b8:	7bbb      	ldrb	r3, [r7, #14]
 800c9ba:	4619      	mov	r1, r3
 800c9bc:	6878      	ldr	r0, [r7, #4]
 800c9be:	f001 f8fd 	bl	800dbbc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c9c2:	2180      	movs	r1, #128	; 0x80
 800c9c4:	6878      	ldr	r0, [r7, #4]
 800c9c6:	f001 f8f9 	bl	800dbbc <USBD_LL_StallEP>
 800c9ca:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c9cc:	e020      	b.n	800ca10 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800c9ce:	6839      	ldr	r1, [r7, #0]
 800c9d0:	6878      	ldr	r0, [r7, #4]
 800c9d2:	f000 fc7a 	bl	800d2ca <USBD_CtlError>
              break;
 800c9d6:	e01b      	b.n	800ca10 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c9d8:	683b      	ldr	r3, [r7, #0]
 800c9da:	885b      	ldrh	r3, [r3, #2]
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d10e      	bne.n	800c9fe <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c9e0:	7bbb      	ldrb	r3, [r7, #14]
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d00b      	beq.n	800c9fe <USBD_StdEPReq+0xfe>
 800c9e6:	7bbb      	ldrb	r3, [r7, #14]
 800c9e8:	2b80      	cmp	r3, #128	; 0x80
 800c9ea:	d008      	beq.n	800c9fe <USBD_StdEPReq+0xfe>
 800c9ec:	683b      	ldr	r3, [r7, #0]
 800c9ee:	88db      	ldrh	r3, [r3, #6]
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d104      	bne.n	800c9fe <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c9f4:	7bbb      	ldrb	r3, [r7, #14]
 800c9f6:	4619      	mov	r1, r3
 800c9f8:	6878      	ldr	r0, [r7, #4]
 800c9fa:	f001 f8df 	bl	800dbbc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c9fe:	6878      	ldr	r0, [r7, #4]
 800ca00:	f000 fd2e 	bl	800d460 <USBD_CtlSendStatus>

              break;
 800ca04:	e004      	b.n	800ca10 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800ca06:	6839      	ldr	r1, [r7, #0]
 800ca08:	6878      	ldr	r0, [r7, #4]
 800ca0a:	f000 fc5e 	bl	800d2ca <USBD_CtlError>
              break;
 800ca0e:	bf00      	nop
          }
          break;
 800ca10:	e107      	b.n	800cc22 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ca18:	b2db      	uxtb	r3, r3
 800ca1a:	2b02      	cmp	r3, #2
 800ca1c:	d002      	beq.n	800ca24 <USBD_StdEPReq+0x124>
 800ca1e:	2b03      	cmp	r3, #3
 800ca20:	d016      	beq.n	800ca50 <USBD_StdEPReq+0x150>
 800ca22:	e04b      	b.n	800cabc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ca24:	7bbb      	ldrb	r3, [r7, #14]
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d00d      	beq.n	800ca46 <USBD_StdEPReq+0x146>
 800ca2a:	7bbb      	ldrb	r3, [r7, #14]
 800ca2c:	2b80      	cmp	r3, #128	; 0x80
 800ca2e:	d00a      	beq.n	800ca46 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ca30:	7bbb      	ldrb	r3, [r7, #14]
 800ca32:	4619      	mov	r1, r3
 800ca34:	6878      	ldr	r0, [r7, #4]
 800ca36:	f001 f8c1 	bl	800dbbc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ca3a:	2180      	movs	r1, #128	; 0x80
 800ca3c:	6878      	ldr	r0, [r7, #4]
 800ca3e:	f001 f8bd 	bl	800dbbc <USBD_LL_StallEP>
 800ca42:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ca44:	e040      	b.n	800cac8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800ca46:	6839      	ldr	r1, [r7, #0]
 800ca48:	6878      	ldr	r0, [r7, #4]
 800ca4a:	f000 fc3e 	bl	800d2ca <USBD_CtlError>
              break;
 800ca4e:	e03b      	b.n	800cac8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ca50:	683b      	ldr	r3, [r7, #0]
 800ca52:	885b      	ldrh	r3, [r3, #2]
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d136      	bne.n	800cac6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800ca58:	7bbb      	ldrb	r3, [r7, #14]
 800ca5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d004      	beq.n	800ca6c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800ca62:	7bbb      	ldrb	r3, [r7, #14]
 800ca64:	4619      	mov	r1, r3
 800ca66:	6878      	ldr	r0, [r7, #4]
 800ca68:	f001 f8c7 	bl	800dbfa <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800ca6c:	6878      	ldr	r0, [r7, #4]
 800ca6e:	f000 fcf7 	bl	800d460 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800ca72:	7bbb      	ldrb	r3, [r7, #14]
 800ca74:	4619      	mov	r1, r3
 800ca76:	6878      	ldr	r0, [r7, #4]
 800ca78:	f7ff fe38 	bl	800c6ec <USBD_CoreFindEP>
 800ca7c:	4603      	mov	r3, r0
 800ca7e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ca80:	7b7b      	ldrb	r3, [r7, #13]
 800ca82:	2bff      	cmp	r3, #255	; 0xff
 800ca84:	d01f      	beq.n	800cac6 <USBD_StdEPReq+0x1c6>
 800ca86:	7b7b      	ldrb	r3, [r7, #13]
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d11c      	bne.n	800cac6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800ca8c:	7b7a      	ldrb	r2, [r7, #13]
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800ca94:	7b7a      	ldrb	r2, [r7, #13]
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	32ae      	adds	r2, #174	; 0xae
 800ca9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca9e:	689b      	ldr	r3, [r3, #8]
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d010      	beq.n	800cac6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800caa4:	7b7a      	ldrb	r2, [r7, #13]
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	32ae      	adds	r2, #174	; 0xae
 800caaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800caae:	689b      	ldr	r3, [r3, #8]
 800cab0:	6839      	ldr	r1, [r7, #0]
 800cab2:	6878      	ldr	r0, [r7, #4]
 800cab4:	4798      	blx	r3
 800cab6:	4603      	mov	r3, r0
 800cab8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800caba:	e004      	b.n	800cac6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800cabc:	6839      	ldr	r1, [r7, #0]
 800cabe:	6878      	ldr	r0, [r7, #4]
 800cac0:	f000 fc03 	bl	800d2ca <USBD_CtlError>
              break;
 800cac4:	e000      	b.n	800cac8 <USBD_StdEPReq+0x1c8>
              break;
 800cac6:	bf00      	nop
          }
          break;
 800cac8:	e0ab      	b.n	800cc22 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cad0:	b2db      	uxtb	r3, r3
 800cad2:	2b02      	cmp	r3, #2
 800cad4:	d002      	beq.n	800cadc <USBD_StdEPReq+0x1dc>
 800cad6:	2b03      	cmp	r3, #3
 800cad8:	d032      	beq.n	800cb40 <USBD_StdEPReq+0x240>
 800cada:	e097      	b.n	800cc0c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cadc:	7bbb      	ldrb	r3, [r7, #14]
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d007      	beq.n	800caf2 <USBD_StdEPReq+0x1f2>
 800cae2:	7bbb      	ldrb	r3, [r7, #14]
 800cae4:	2b80      	cmp	r3, #128	; 0x80
 800cae6:	d004      	beq.n	800caf2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800cae8:	6839      	ldr	r1, [r7, #0]
 800caea:	6878      	ldr	r0, [r7, #4]
 800caec:	f000 fbed 	bl	800d2ca <USBD_CtlError>
                break;
 800caf0:	e091      	b.n	800cc16 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800caf2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	da0b      	bge.n	800cb12 <USBD_StdEPReq+0x212>
 800cafa:	7bbb      	ldrb	r3, [r7, #14]
 800cafc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cb00:	4613      	mov	r3, r2
 800cb02:	009b      	lsls	r3, r3, #2
 800cb04:	4413      	add	r3, r2
 800cb06:	009b      	lsls	r3, r3, #2
 800cb08:	3310      	adds	r3, #16
 800cb0a:	687a      	ldr	r2, [r7, #4]
 800cb0c:	4413      	add	r3, r2
 800cb0e:	3304      	adds	r3, #4
 800cb10:	e00b      	b.n	800cb2a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800cb12:	7bbb      	ldrb	r3, [r7, #14]
 800cb14:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cb18:	4613      	mov	r3, r2
 800cb1a:	009b      	lsls	r3, r3, #2
 800cb1c:	4413      	add	r3, r2
 800cb1e:	009b      	lsls	r3, r3, #2
 800cb20:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800cb24:	687a      	ldr	r2, [r7, #4]
 800cb26:	4413      	add	r3, r2
 800cb28:	3304      	adds	r3, #4
 800cb2a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800cb2c:	68bb      	ldr	r3, [r7, #8]
 800cb2e:	2200      	movs	r2, #0
 800cb30:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800cb32:	68bb      	ldr	r3, [r7, #8]
 800cb34:	2202      	movs	r2, #2
 800cb36:	4619      	mov	r1, r3
 800cb38:	6878      	ldr	r0, [r7, #4]
 800cb3a:	f000 fc37 	bl	800d3ac <USBD_CtlSendData>
              break;
 800cb3e:	e06a      	b.n	800cc16 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800cb40:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	da11      	bge.n	800cb6c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800cb48:	7bbb      	ldrb	r3, [r7, #14]
 800cb4a:	f003 020f 	and.w	r2, r3, #15
 800cb4e:	6879      	ldr	r1, [r7, #4]
 800cb50:	4613      	mov	r3, r2
 800cb52:	009b      	lsls	r3, r3, #2
 800cb54:	4413      	add	r3, r2
 800cb56:	009b      	lsls	r3, r3, #2
 800cb58:	440b      	add	r3, r1
 800cb5a:	3324      	adds	r3, #36	; 0x24
 800cb5c:	881b      	ldrh	r3, [r3, #0]
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d117      	bne.n	800cb92 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800cb62:	6839      	ldr	r1, [r7, #0]
 800cb64:	6878      	ldr	r0, [r7, #4]
 800cb66:	f000 fbb0 	bl	800d2ca <USBD_CtlError>
                  break;
 800cb6a:	e054      	b.n	800cc16 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800cb6c:	7bbb      	ldrb	r3, [r7, #14]
 800cb6e:	f003 020f 	and.w	r2, r3, #15
 800cb72:	6879      	ldr	r1, [r7, #4]
 800cb74:	4613      	mov	r3, r2
 800cb76:	009b      	lsls	r3, r3, #2
 800cb78:	4413      	add	r3, r2
 800cb7a:	009b      	lsls	r3, r3, #2
 800cb7c:	440b      	add	r3, r1
 800cb7e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800cb82:	881b      	ldrh	r3, [r3, #0]
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d104      	bne.n	800cb92 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800cb88:	6839      	ldr	r1, [r7, #0]
 800cb8a:	6878      	ldr	r0, [r7, #4]
 800cb8c:	f000 fb9d 	bl	800d2ca <USBD_CtlError>
                  break;
 800cb90:	e041      	b.n	800cc16 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cb92:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	da0b      	bge.n	800cbb2 <USBD_StdEPReq+0x2b2>
 800cb9a:	7bbb      	ldrb	r3, [r7, #14]
 800cb9c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cba0:	4613      	mov	r3, r2
 800cba2:	009b      	lsls	r3, r3, #2
 800cba4:	4413      	add	r3, r2
 800cba6:	009b      	lsls	r3, r3, #2
 800cba8:	3310      	adds	r3, #16
 800cbaa:	687a      	ldr	r2, [r7, #4]
 800cbac:	4413      	add	r3, r2
 800cbae:	3304      	adds	r3, #4
 800cbb0:	e00b      	b.n	800cbca <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800cbb2:	7bbb      	ldrb	r3, [r7, #14]
 800cbb4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cbb8:	4613      	mov	r3, r2
 800cbba:	009b      	lsls	r3, r3, #2
 800cbbc:	4413      	add	r3, r2
 800cbbe:	009b      	lsls	r3, r3, #2
 800cbc0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800cbc4:	687a      	ldr	r2, [r7, #4]
 800cbc6:	4413      	add	r3, r2
 800cbc8:	3304      	adds	r3, #4
 800cbca:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800cbcc:	7bbb      	ldrb	r3, [r7, #14]
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d002      	beq.n	800cbd8 <USBD_StdEPReq+0x2d8>
 800cbd2:	7bbb      	ldrb	r3, [r7, #14]
 800cbd4:	2b80      	cmp	r3, #128	; 0x80
 800cbd6:	d103      	bne.n	800cbe0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800cbd8:	68bb      	ldr	r3, [r7, #8]
 800cbda:	2200      	movs	r2, #0
 800cbdc:	601a      	str	r2, [r3, #0]
 800cbde:	e00e      	b.n	800cbfe <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800cbe0:	7bbb      	ldrb	r3, [r7, #14]
 800cbe2:	4619      	mov	r1, r3
 800cbe4:	6878      	ldr	r0, [r7, #4]
 800cbe6:	f001 f827 	bl	800dc38 <USBD_LL_IsStallEP>
 800cbea:	4603      	mov	r3, r0
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d003      	beq.n	800cbf8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800cbf0:	68bb      	ldr	r3, [r7, #8]
 800cbf2:	2201      	movs	r2, #1
 800cbf4:	601a      	str	r2, [r3, #0]
 800cbf6:	e002      	b.n	800cbfe <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800cbf8:	68bb      	ldr	r3, [r7, #8]
 800cbfa:	2200      	movs	r2, #0
 800cbfc:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800cbfe:	68bb      	ldr	r3, [r7, #8]
 800cc00:	2202      	movs	r2, #2
 800cc02:	4619      	mov	r1, r3
 800cc04:	6878      	ldr	r0, [r7, #4]
 800cc06:	f000 fbd1 	bl	800d3ac <USBD_CtlSendData>
              break;
 800cc0a:	e004      	b.n	800cc16 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800cc0c:	6839      	ldr	r1, [r7, #0]
 800cc0e:	6878      	ldr	r0, [r7, #4]
 800cc10:	f000 fb5b 	bl	800d2ca <USBD_CtlError>
              break;
 800cc14:	bf00      	nop
          }
          break;
 800cc16:	e004      	b.n	800cc22 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800cc18:	6839      	ldr	r1, [r7, #0]
 800cc1a:	6878      	ldr	r0, [r7, #4]
 800cc1c:	f000 fb55 	bl	800d2ca <USBD_CtlError>
          break;
 800cc20:	bf00      	nop
      }
      break;
 800cc22:	e005      	b.n	800cc30 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800cc24:	6839      	ldr	r1, [r7, #0]
 800cc26:	6878      	ldr	r0, [r7, #4]
 800cc28:	f000 fb4f 	bl	800d2ca <USBD_CtlError>
      break;
 800cc2c:	e000      	b.n	800cc30 <USBD_StdEPReq+0x330>
      break;
 800cc2e:	bf00      	nop
  }

  return ret;
 800cc30:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc32:	4618      	mov	r0, r3
 800cc34:	3710      	adds	r7, #16
 800cc36:	46bd      	mov	sp, r7
 800cc38:	bd80      	pop	{r7, pc}
	...

0800cc3c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cc3c:	b580      	push	{r7, lr}
 800cc3e:	b084      	sub	sp, #16
 800cc40:	af00      	add	r7, sp, #0
 800cc42:	6078      	str	r0, [r7, #4]
 800cc44:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800cc46:	2300      	movs	r3, #0
 800cc48:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800cc4a:	2300      	movs	r3, #0
 800cc4c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800cc4e:	2300      	movs	r3, #0
 800cc50:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800cc52:	683b      	ldr	r3, [r7, #0]
 800cc54:	885b      	ldrh	r3, [r3, #2]
 800cc56:	0a1b      	lsrs	r3, r3, #8
 800cc58:	b29b      	uxth	r3, r3
 800cc5a:	3b01      	subs	r3, #1
 800cc5c:	2b06      	cmp	r3, #6
 800cc5e:	f200 8128 	bhi.w	800ceb2 <USBD_GetDescriptor+0x276>
 800cc62:	a201      	add	r2, pc, #4	; (adr r2, 800cc68 <USBD_GetDescriptor+0x2c>)
 800cc64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc68:	0800cc85 	.word	0x0800cc85
 800cc6c:	0800cc9d 	.word	0x0800cc9d
 800cc70:	0800ccdd 	.word	0x0800ccdd
 800cc74:	0800ceb3 	.word	0x0800ceb3
 800cc78:	0800ceb3 	.word	0x0800ceb3
 800cc7c:	0800ce53 	.word	0x0800ce53
 800cc80:	0800ce7f 	.word	0x0800ce7f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	687a      	ldr	r2, [r7, #4]
 800cc8e:	7c12      	ldrb	r2, [r2, #16]
 800cc90:	f107 0108 	add.w	r1, r7, #8
 800cc94:	4610      	mov	r0, r2
 800cc96:	4798      	blx	r3
 800cc98:	60f8      	str	r0, [r7, #12]
      break;
 800cc9a:	e112      	b.n	800cec2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	7c1b      	ldrb	r3, [r3, #16]
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d10d      	bne.n	800ccc0 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ccaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ccac:	f107 0208 	add.w	r2, r7, #8
 800ccb0:	4610      	mov	r0, r2
 800ccb2:	4798      	blx	r3
 800ccb4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ccb6:	68fb      	ldr	r3, [r7, #12]
 800ccb8:	3301      	adds	r3, #1
 800ccba:	2202      	movs	r2, #2
 800ccbc:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800ccbe:	e100      	b.n	800cec2 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ccc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccc8:	f107 0208 	add.w	r2, r7, #8
 800cccc:	4610      	mov	r0, r2
 800ccce:	4798      	blx	r3
 800ccd0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	3301      	adds	r3, #1
 800ccd6:	2202      	movs	r2, #2
 800ccd8:	701a      	strb	r2, [r3, #0]
      break;
 800ccda:	e0f2      	b.n	800cec2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800ccdc:	683b      	ldr	r3, [r7, #0]
 800ccde:	885b      	ldrh	r3, [r3, #2]
 800cce0:	b2db      	uxtb	r3, r3
 800cce2:	2b05      	cmp	r3, #5
 800cce4:	f200 80ac 	bhi.w	800ce40 <USBD_GetDescriptor+0x204>
 800cce8:	a201      	add	r2, pc, #4	; (adr r2, 800ccf0 <USBD_GetDescriptor+0xb4>)
 800ccea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccee:	bf00      	nop
 800ccf0:	0800cd09 	.word	0x0800cd09
 800ccf4:	0800cd3d 	.word	0x0800cd3d
 800ccf8:	0800cd71 	.word	0x0800cd71
 800ccfc:	0800cda5 	.word	0x0800cda5
 800cd00:	0800cdd9 	.word	0x0800cdd9
 800cd04:	0800ce0d 	.word	0x0800ce0d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cd0e:	685b      	ldr	r3, [r3, #4]
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d00b      	beq.n	800cd2c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cd1a:	685b      	ldr	r3, [r3, #4]
 800cd1c:	687a      	ldr	r2, [r7, #4]
 800cd1e:	7c12      	ldrb	r2, [r2, #16]
 800cd20:	f107 0108 	add.w	r1, r7, #8
 800cd24:	4610      	mov	r0, r2
 800cd26:	4798      	blx	r3
 800cd28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cd2a:	e091      	b.n	800ce50 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cd2c:	6839      	ldr	r1, [r7, #0]
 800cd2e:	6878      	ldr	r0, [r7, #4]
 800cd30:	f000 facb 	bl	800d2ca <USBD_CtlError>
            err++;
 800cd34:	7afb      	ldrb	r3, [r7, #11]
 800cd36:	3301      	adds	r3, #1
 800cd38:	72fb      	strb	r3, [r7, #11]
          break;
 800cd3a:	e089      	b.n	800ce50 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cd42:	689b      	ldr	r3, [r3, #8]
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d00b      	beq.n	800cd60 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cd4e:	689b      	ldr	r3, [r3, #8]
 800cd50:	687a      	ldr	r2, [r7, #4]
 800cd52:	7c12      	ldrb	r2, [r2, #16]
 800cd54:	f107 0108 	add.w	r1, r7, #8
 800cd58:	4610      	mov	r0, r2
 800cd5a:	4798      	blx	r3
 800cd5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cd5e:	e077      	b.n	800ce50 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cd60:	6839      	ldr	r1, [r7, #0]
 800cd62:	6878      	ldr	r0, [r7, #4]
 800cd64:	f000 fab1 	bl	800d2ca <USBD_CtlError>
            err++;
 800cd68:	7afb      	ldrb	r3, [r7, #11]
 800cd6a:	3301      	adds	r3, #1
 800cd6c:	72fb      	strb	r3, [r7, #11]
          break;
 800cd6e:	e06f      	b.n	800ce50 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cd76:	68db      	ldr	r3, [r3, #12]
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d00b      	beq.n	800cd94 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cd82:	68db      	ldr	r3, [r3, #12]
 800cd84:	687a      	ldr	r2, [r7, #4]
 800cd86:	7c12      	ldrb	r2, [r2, #16]
 800cd88:	f107 0108 	add.w	r1, r7, #8
 800cd8c:	4610      	mov	r0, r2
 800cd8e:	4798      	blx	r3
 800cd90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cd92:	e05d      	b.n	800ce50 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cd94:	6839      	ldr	r1, [r7, #0]
 800cd96:	6878      	ldr	r0, [r7, #4]
 800cd98:	f000 fa97 	bl	800d2ca <USBD_CtlError>
            err++;
 800cd9c:	7afb      	ldrb	r3, [r7, #11]
 800cd9e:	3301      	adds	r3, #1
 800cda0:	72fb      	strb	r3, [r7, #11]
          break;
 800cda2:	e055      	b.n	800ce50 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cdaa:	691b      	ldr	r3, [r3, #16]
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d00b      	beq.n	800cdc8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cdb6:	691b      	ldr	r3, [r3, #16]
 800cdb8:	687a      	ldr	r2, [r7, #4]
 800cdba:	7c12      	ldrb	r2, [r2, #16]
 800cdbc:	f107 0108 	add.w	r1, r7, #8
 800cdc0:	4610      	mov	r0, r2
 800cdc2:	4798      	blx	r3
 800cdc4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cdc6:	e043      	b.n	800ce50 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cdc8:	6839      	ldr	r1, [r7, #0]
 800cdca:	6878      	ldr	r0, [r7, #4]
 800cdcc:	f000 fa7d 	bl	800d2ca <USBD_CtlError>
            err++;
 800cdd0:	7afb      	ldrb	r3, [r7, #11]
 800cdd2:	3301      	adds	r3, #1
 800cdd4:	72fb      	strb	r3, [r7, #11]
          break;
 800cdd6:	e03b      	b.n	800ce50 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cdde:	695b      	ldr	r3, [r3, #20]
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d00b      	beq.n	800cdfc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cdea:	695b      	ldr	r3, [r3, #20]
 800cdec:	687a      	ldr	r2, [r7, #4]
 800cdee:	7c12      	ldrb	r2, [r2, #16]
 800cdf0:	f107 0108 	add.w	r1, r7, #8
 800cdf4:	4610      	mov	r0, r2
 800cdf6:	4798      	blx	r3
 800cdf8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cdfa:	e029      	b.n	800ce50 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cdfc:	6839      	ldr	r1, [r7, #0]
 800cdfe:	6878      	ldr	r0, [r7, #4]
 800ce00:	f000 fa63 	bl	800d2ca <USBD_CtlError>
            err++;
 800ce04:	7afb      	ldrb	r3, [r7, #11]
 800ce06:	3301      	adds	r3, #1
 800ce08:	72fb      	strb	r3, [r7, #11]
          break;
 800ce0a:	e021      	b.n	800ce50 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ce12:	699b      	ldr	r3, [r3, #24]
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d00b      	beq.n	800ce30 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ce1e:	699b      	ldr	r3, [r3, #24]
 800ce20:	687a      	ldr	r2, [r7, #4]
 800ce22:	7c12      	ldrb	r2, [r2, #16]
 800ce24:	f107 0108 	add.w	r1, r7, #8
 800ce28:	4610      	mov	r0, r2
 800ce2a:	4798      	blx	r3
 800ce2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ce2e:	e00f      	b.n	800ce50 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ce30:	6839      	ldr	r1, [r7, #0]
 800ce32:	6878      	ldr	r0, [r7, #4]
 800ce34:	f000 fa49 	bl	800d2ca <USBD_CtlError>
            err++;
 800ce38:	7afb      	ldrb	r3, [r7, #11]
 800ce3a:	3301      	adds	r3, #1
 800ce3c:	72fb      	strb	r3, [r7, #11]
          break;
 800ce3e:	e007      	b.n	800ce50 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800ce40:	6839      	ldr	r1, [r7, #0]
 800ce42:	6878      	ldr	r0, [r7, #4]
 800ce44:	f000 fa41 	bl	800d2ca <USBD_CtlError>
          err++;
 800ce48:	7afb      	ldrb	r3, [r7, #11]
 800ce4a:	3301      	adds	r3, #1
 800ce4c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800ce4e:	bf00      	nop
      }
      break;
 800ce50:	e037      	b.n	800cec2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	7c1b      	ldrb	r3, [r3, #16]
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d109      	bne.n	800ce6e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ce60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce62:	f107 0208 	add.w	r2, r7, #8
 800ce66:	4610      	mov	r0, r2
 800ce68:	4798      	blx	r3
 800ce6a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ce6c:	e029      	b.n	800cec2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ce6e:	6839      	ldr	r1, [r7, #0]
 800ce70:	6878      	ldr	r0, [r7, #4]
 800ce72:	f000 fa2a 	bl	800d2ca <USBD_CtlError>
        err++;
 800ce76:	7afb      	ldrb	r3, [r7, #11]
 800ce78:	3301      	adds	r3, #1
 800ce7a:	72fb      	strb	r3, [r7, #11]
      break;
 800ce7c:	e021      	b.n	800cec2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	7c1b      	ldrb	r3, [r3, #16]
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d10d      	bne.n	800cea2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ce8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce8e:	f107 0208 	add.w	r2, r7, #8
 800ce92:	4610      	mov	r0, r2
 800ce94:	4798      	blx	r3
 800ce96:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	3301      	adds	r3, #1
 800ce9c:	2207      	movs	r2, #7
 800ce9e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cea0:	e00f      	b.n	800cec2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800cea2:	6839      	ldr	r1, [r7, #0]
 800cea4:	6878      	ldr	r0, [r7, #4]
 800cea6:	f000 fa10 	bl	800d2ca <USBD_CtlError>
        err++;
 800ceaa:	7afb      	ldrb	r3, [r7, #11]
 800ceac:	3301      	adds	r3, #1
 800ceae:	72fb      	strb	r3, [r7, #11]
      break;
 800ceb0:	e007      	b.n	800cec2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800ceb2:	6839      	ldr	r1, [r7, #0]
 800ceb4:	6878      	ldr	r0, [r7, #4]
 800ceb6:	f000 fa08 	bl	800d2ca <USBD_CtlError>
      err++;
 800ceba:	7afb      	ldrb	r3, [r7, #11]
 800cebc:	3301      	adds	r3, #1
 800cebe:	72fb      	strb	r3, [r7, #11]
      break;
 800cec0:	bf00      	nop
  }

  if (err != 0U)
 800cec2:	7afb      	ldrb	r3, [r7, #11]
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d11e      	bne.n	800cf06 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800cec8:	683b      	ldr	r3, [r7, #0]
 800ceca:	88db      	ldrh	r3, [r3, #6]
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d016      	beq.n	800cefe <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800ced0:	893b      	ldrh	r3, [r7, #8]
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d00e      	beq.n	800cef4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800ced6:	683b      	ldr	r3, [r7, #0]
 800ced8:	88da      	ldrh	r2, [r3, #6]
 800ceda:	893b      	ldrh	r3, [r7, #8]
 800cedc:	4293      	cmp	r3, r2
 800cede:	bf28      	it	cs
 800cee0:	4613      	movcs	r3, r2
 800cee2:	b29b      	uxth	r3, r3
 800cee4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800cee6:	893b      	ldrh	r3, [r7, #8]
 800cee8:	461a      	mov	r2, r3
 800ceea:	68f9      	ldr	r1, [r7, #12]
 800ceec:	6878      	ldr	r0, [r7, #4]
 800ceee:	f000 fa5d 	bl	800d3ac <USBD_CtlSendData>
 800cef2:	e009      	b.n	800cf08 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800cef4:	6839      	ldr	r1, [r7, #0]
 800cef6:	6878      	ldr	r0, [r7, #4]
 800cef8:	f000 f9e7 	bl	800d2ca <USBD_CtlError>
 800cefc:	e004      	b.n	800cf08 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800cefe:	6878      	ldr	r0, [r7, #4]
 800cf00:	f000 faae 	bl	800d460 <USBD_CtlSendStatus>
 800cf04:	e000      	b.n	800cf08 <USBD_GetDescriptor+0x2cc>
    return;
 800cf06:	bf00      	nop
  }
}
 800cf08:	3710      	adds	r7, #16
 800cf0a:	46bd      	mov	sp, r7
 800cf0c:	bd80      	pop	{r7, pc}
 800cf0e:	bf00      	nop

0800cf10 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cf10:	b580      	push	{r7, lr}
 800cf12:	b084      	sub	sp, #16
 800cf14:	af00      	add	r7, sp, #0
 800cf16:	6078      	str	r0, [r7, #4]
 800cf18:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800cf1a:	683b      	ldr	r3, [r7, #0]
 800cf1c:	889b      	ldrh	r3, [r3, #4]
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d131      	bne.n	800cf86 <USBD_SetAddress+0x76>
 800cf22:	683b      	ldr	r3, [r7, #0]
 800cf24:	88db      	ldrh	r3, [r3, #6]
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d12d      	bne.n	800cf86 <USBD_SetAddress+0x76>
 800cf2a:	683b      	ldr	r3, [r7, #0]
 800cf2c:	885b      	ldrh	r3, [r3, #2]
 800cf2e:	2b7f      	cmp	r3, #127	; 0x7f
 800cf30:	d829      	bhi.n	800cf86 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800cf32:	683b      	ldr	r3, [r7, #0]
 800cf34:	885b      	ldrh	r3, [r3, #2]
 800cf36:	b2db      	uxtb	r3, r3
 800cf38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cf3c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cf44:	b2db      	uxtb	r3, r3
 800cf46:	2b03      	cmp	r3, #3
 800cf48:	d104      	bne.n	800cf54 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800cf4a:	6839      	ldr	r1, [r7, #0]
 800cf4c:	6878      	ldr	r0, [r7, #4]
 800cf4e:	f000 f9bc 	bl	800d2ca <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cf52:	e01d      	b.n	800cf90 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	7bfa      	ldrb	r2, [r7, #15]
 800cf58:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800cf5c:	7bfb      	ldrb	r3, [r7, #15]
 800cf5e:	4619      	mov	r1, r3
 800cf60:	6878      	ldr	r0, [r7, #4]
 800cf62:	f000 fe95 	bl	800dc90 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800cf66:	6878      	ldr	r0, [r7, #4]
 800cf68:	f000 fa7a 	bl	800d460 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800cf6c:	7bfb      	ldrb	r3, [r7, #15]
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d004      	beq.n	800cf7c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	2202      	movs	r2, #2
 800cf76:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cf7a:	e009      	b.n	800cf90 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	2201      	movs	r2, #1
 800cf80:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cf84:	e004      	b.n	800cf90 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800cf86:	6839      	ldr	r1, [r7, #0]
 800cf88:	6878      	ldr	r0, [r7, #4]
 800cf8a:	f000 f99e 	bl	800d2ca <USBD_CtlError>
  }
}
 800cf8e:	bf00      	nop
 800cf90:	bf00      	nop
 800cf92:	3710      	adds	r7, #16
 800cf94:	46bd      	mov	sp, r7
 800cf96:	bd80      	pop	{r7, pc}

0800cf98 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cf98:	b580      	push	{r7, lr}
 800cf9a:	b084      	sub	sp, #16
 800cf9c:	af00      	add	r7, sp, #0
 800cf9e:	6078      	str	r0, [r7, #4]
 800cfa0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cfa2:	2300      	movs	r3, #0
 800cfa4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800cfa6:	683b      	ldr	r3, [r7, #0]
 800cfa8:	885b      	ldrh	r3, [r3, #2]
 800cfaa:	b2da      	uxtb	r2, r3
 800cfac:	4b4e      	ldr	r3, [pc, #312]	; (800d0e8 <USBD_SetConfig+0x150>)
 800cfae:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800cfb0:	4b4d      	ldr	r3, [pc, #308]	; (800d0e8 <USBD_SetConfig+0x150>)
 800cfb2:	781b      	ldrb	r3, [r3, #0]
 800cfb4:	2b01      	cmp	r3, #1
 800cfb6:	d905      	bls.n	800cfc4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800cfb8:	6839      	ldr	r1, [r7, #0]
 800cfba:	6878      	ldr	r0, [r7, #4]
 800cfbc:	f000 f985 	bl	800d2ca <USBD_CtlError>
    return USBD_FAIL;
 800cfc0:	2303      	movs	r3, #3
 800cfc2:	e08c      	b.n	800d0de <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cfca:	b2db      	uxtb	r3, r3
 800cfcc:	2b02      	cmp	r3, #2
 800cfce:	d002      	beq.n	800cfd6 <USBD_SetConfig+0x3e>
 800cfd0:	2b03      	cmp	r3, #3
 800cfd2:	d029      	beq.n	800d028 <USBD_SetConfig+0x90>
 800cfd4:	e075      	b.n	800d0c2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800cfd6:	4b44      	ldr	r3, [pc, #272]	; (800d0e8 <USBD_SetConfig+0x150>)
 800cfd8:	781b      	ldrb	r3, [r3, #0]
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d020      	beq.n	800d020 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800cfde:	4b42      	ldr	r3, [pc, #264]	; (800d0e8 <USBD_SetConfig+0x150>)
 800cfe0:	781b      	ldrb	r3, [r3, #0]
 800cfe2:	461a      	mov	r2, r3
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800cfe8:	4b3f      	ldr	r3, [pc, #252]	; (800d0e8 <USBD_SetConfig+0x150>)
 800cfea:	781b      	ldrb	r3, [r3, #0]
 800cfec:	4619      	mov	r1, r3
 800cfee:	6878      	ldr	r0, [r7, #4]
 800cff0:	f7ff f83d 	bl	800c06e <USBD_SetClassConfig>
 800cff4:	4603      	mov	r3, r0
 800cff6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800cff8:	7bfb      	ldrb	r3, [r7, #15]
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d008      	beq.n	800d010 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800cffe:	6839      	ldr	r1, [r7, #0]
 800d000:	6878      	ldr	r0, [r7, #4]
 800d002:	f000 f962 	bl	800d2ca <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	2202      	movs	r2, #2
 800d00a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d00e:	e065      	b.n	800d0dc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d010:	6878      	ldr	r0, [r7, #4]
 800d012:	f000 fa25 	bl	800d460 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	2203      	movs	r2, #3
 800d01a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800d01e:	e05d      	b.n	800d0dc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d020:	6878      	ldr	r0, [r7, #4]
 800d022:	f000 fa1d 	bl	800d460 <USBD_CtlSendStatus>
      break;
 800d026:	e059      	b.n	800d0dc <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800d028:	4b2f      	ldr	r3, [pc, #188]	; (800d0e8 <USBD_SetConfig+0x150>)
 800d02a:	781b      	ldrb	r3, [r3, #0]
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d112      	bne.n	800d056 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	2202      	movs	r2, #2
 800d034:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800d038:	4b2b      	ldr	r3, [pc, #172]	; (800d0e8 <USBD_SetConfig+0x150>)
 800d03a:	781b      	ldrb	r3, [r3, #0]
 800d03c:	461a      	mov	r2, r3
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d042:	4b29      	ldr	r3, [pc, #164]	; (800d0e8 <USBD_SetConfig+0x150>)
 800d044:	781b      	ldrb	r3, [r3, #0]
 800d046:	4619      	mov	r1, r3
 800d048:	6878      	ldr	r0, [r7, #4]
 800d04a:	f7ff f82c 	bl	800c0a6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800d04e:	6878      	ldr	r0, [r7, #4]
 800d050:	f000 fa06 	bl	800d460 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d054:	e042      	b.n	800d0dc <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800d056:	4b24      	ldr	r3, [pc, #144]	; (800d0e8 <USBD_SetConfig+0x150>)
 800d058:	781b      	ldrb	r3, [r3, #0]
 800d05a:	461a      	mov	r2, r3
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	685b      	ldr	r3, [r3, #4]
 800d060:	429a      	cmp	r2, r3
 800d062:	d02a      	beq.n	800d0ba <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	685b      	ldr	r3, [r3, #4]
 800d068:	b2db      	uxtb	r3, r3
 800d06a:	4619      	mov	r1, r3
 800d06c:	6878      	ldr	r0, [r7, #4]
 800d06e:	f7ff f81a 	bl	800c0a6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800d072:	4b1d      	ldr	r3, [pc, #116]	; (800d0e8 <USBD_SetConfig+0x150>)
 800d074:	781b      	ldrb	r3, [r3, #0]
 800d076:	461a      	mov	r2, r3
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d07c:	4b1a      	ldr	r3, [pc, #104]	; (800d0e8 <USBD_SetConfig+0x150>)
 800d07e:	781b      	ldrb	r3, [r3, #0]
 800d080:	4619      	mov	r1, r3
 800d082:	6878      	ldr	r0, [r7, #4]
 800d084:	f7fe fff3 	bl	800c06e <USBD_SetClassConfig>
 800d088:	4603      	mov	r3, r0
 800d08a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800d08c:	7bfb      	ldrb	r3, [r7, #15]
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d00f      	beq.n	800d0b2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800d092:	6839      	ldr	r1, [r7, #0]
 800d094:	6878      	ldr	r0, [r7, #4]
 800d096:	f000 f918 	bl	800d2ca <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	685b      	ldr	r3, [r3, #4]
 800d09e:	b2db      	uxtb	r3, r3
 800d0a0:	4619      	mov	r1, r3
 800d0a2:	6878      	ldr	r0, [r7, #4]
 800d0a4:	f7fe ffff 	bl	800c0a6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	2202      	movs	r2, #2
 800d0ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800d0b0:	e014      	b.n	800d0dc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d0b2:	6878      	ldr	r0, [r7, #4]
 800d0b4:	f000 f9d4 	bl	800d460 <USBD_CtlSendStatus>
      break;
 800d0b8:	e010      	b.n	800d0dc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d0ba:	6878      	ldr	r0, [r7, #4]
 800d0bc:	f000 f9d0 	bl	800d460 <USBD_CtlSendStatus>
      break;
 800d0c0:	e00c      	b.n	800d0dc <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800d0c2:	6839      	ldr	r1, [r7, #0]
 800d0c4:	6878      	ldr	r0, [r7, #4]
 800d0c6:	f000 f900 	bl	800d2ca <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d0ca:	4b07      	ldr	r3, [pc, #28]	; (800d0e8 <USBD_SetConfig+0x150>)
 800d0cc:	781b      	ldrb	r3, [r3, #0]
 800d0ce:	4619      	mov	r1, r3
 800d0d0:	6878      	ldr	r0, [r7, #4]
 800d0d2:	f7fe ffe8 	bl	800c0a6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800d0d6:	2303      	movs	r3, #3
 800d0d8:	73fb      	strb	r3, [r7, #15]
      break;
 800d0da:	bf00      	nop
  }

  return ret;
 800d0dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800d0de:	4618      	mov	r0, r3
 800d0e0:	3710      	adds	r7, #16
 800d0e2:	46bd      	mov	sp, r7
 800d0e4:	bd80      	pop	{r7, pc}
 800d0e6:	bf00      	nop
 800d0e8:	2000127c 	.word	0x2000127c

0800d0ec <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d0ec:	b580      	push	{r7, lr}
 800d0ee:	b082      	sub	sp, #8
 800d0f0:	af00      	add	r7, sp, #0
 800d0f2:	6078      	str	r0, [r7, #4]
 800d0f4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d0f6:	683b      	ldr	r3, [r7, #0]
 800d0f8:	88db      	ldrh	r3, [r3, #6]
 800d0fa:	2b01      	cmp	r3, #1
 800d0fc:	d004      	beq.n	800d108 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800d0fe:	6839      	ldr	r1, [r7, #0]
 800d100:	6878      	ldr	r0, [r7, #4]
 800d102:	f000 f8e2 	bl	800d2ca <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800d106:	e023      	b.n	800d150 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d10e:	b2db      	uxtb	r3, r3
 800d110:	2b02      	cmp	r3, #2
 800d112:	dc02      	bgt.n	800d11a <USBD_GetConfig+0x2e>
 800d114:	2b00      	cmp	r3, #0
 800d116:	dc03      	bgt.n	800d120 <USBD_GetConfig+0x34>
 800d118:	e015      	b.n	800d146 <USBD_GetConfig+0x5a>
 800d11a:	2b03      	cmp	r3, #3
 800d11c:	d00b      	beq.n	800d136 <USBD_GetConfig+0x4a>
 800d11e:	e012      	b.n	800d146 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	2200      	movs	r2, #0
 800d124:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	3308      	adds	r3, #8
 800d12a:	2201      	movs	r2, #1
 800d12c:	4619      	mov	r1, r3
 800d12e:	6878      	ldr	r0, [r7, #4]
 800d130:	f000 f93c 	bl	800d3ac <USBD_CtlSendData>
        break;
 800d134:	e00c      	b.n	800d150 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	3304      	adds	r3, #4
 800d13a:	2201      	movs	r2, #1
 800d13c:	4619      	mov	r1, r3
 800d13e:	6878      	ldr	r0, [r7, #4]
 800d140:	f000 f934 	bl	800d3ac <USBD_CtlSendData>
        break;
 800d144:	e004      	b.n	800d150 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800d146:	6839      	ldr	r1, [r7, #0]
 800d148:	6878      	ldr	r0, [r7, #4]
 800d14a:	f000 f8be 	bl	800d2ca <USBD_CtlError>
        break;
 800d14e:	bf00      	nop
}
 800d150:	bf00      	nop
 800d152:	3708      	adds	r7, #8
 800d154:	46bd      	mov	sp, r7
 800d156:	bd80      	pop	{r7, pc}

0800d158 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d158:	b580      	push	{r7, lr}
 800d15a:	b082      	sub	sp, #8
 800d15c:	af00      	add	r7, sp, #0
 800d15e:	6078      	str	r0, [r7, #4]
 800d160:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d168:	b2db      	uxtb	r3, r3
 800d16a:	3b01      	subs	r3, #1
 800d16c:	2b02      	cmp	r3, #2
 800d16e:	d81e      	bhi.n	800d1ae <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800d170:	683b      	ldr	r3, [r7, #0]
 800d172:	88db      	ldrh	r3, [r3, #6]
 800d174:	2b02      	cmp	r3, #2
 800d176:	d004      	beq.n	800d182 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800d178:	6839      	ldr	r1, [r7, #0]
 800d17a:	6878      	ldr	r0, [r7, #4]
 800d17c:	f000 f8a5 	bl	800d2ca <USBD_CtlError>
        break;
 800d180:	e01a      	b.n	800d1b8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	2201      	movs	r2, #1
 800d186:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d005      	beq.n	800d19e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	68db      	ldr	r3, [r3, #12]
 800d196:	f043 0202 	orr.w	r2, r3, #2
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	330c      	adds	r3, #12
 800d1a2:	2202      	movs	r2, #2
 800d1a4:	4619      	mov	r1, r3
 800d1a6:	6878      	ldr	r0, [r7, #4]
 800d1a8:	f000 f900 	bl	800d3ac <USBD_CtlSendData>
      break;
 800d1ac:	e004      	b.n	800d1b8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800d1ae:	6839      	ldr	r1, [r7, #0]
 800d1b0:	6878      	ldr	r0, [r7, #4]
 800d1b2:	f000 f88a 	bl	800d2ca <USBD_CtlError>
      break;
 800d1b6:	bf00      	nop
  }
}
 800d1b8:	bf00      	nop
 800d1ba:	3708      	adds	r7, #8
 800d1bc:	46bd      	mov	sp, r7
 800d1be:	bd80      	pop	{r7, pc}

0800d1c0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d1c0:	b580      	push	{r7, lr}
 800d1c2:	b082      	sub	sp, #8
 800d1c4:	af00      	add	r7, sp, #0
 800d1c6:	6078      	str	r0, [r7, #4]
 800d1c8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d1ca:	683b      	ldr	r3, [r7, #0]
 800d1cc:	885b      	ldrh	r3, [r3, #2]
 800d1ce:	2b01      	cmp	r3, #1
 800d1d0:	d107      	bne.n	800d1e2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	2201      	movs	r2, #1
 800d1d6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800d1da:	6878      	ldr	r0, [r7, #4]
 800d1dc:	f000 f940 	bl	800d460 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800d1e0:	e013      	b.n	800d20a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800d1e2:	683b      	ldr	r3, [r7, #0]
 800d1e4:	885b      	ldrh	r3, [r3, #2]
 800d1e6:	2b02      	cmp	r3, #2
 800d1e8:	d10b      	bne.n	800d202 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800d1ea:	683b      	ldr	r3, [r7, #0]
 800d1ec:	889b      	ldrh	r3, [r3, #4]
 800d1ee:	0a1b      	lsrs	r3, r3, #8
 800d1f0:	b29b      	uxth	r3, r3
 800d1f2:	b2da      	uxtb	r2, r3
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800d1fa:	6878      	ldr	r0, [r7, #4]
 800d1fc:	f000 f930 	bl	800d460 <USBD_CtlSendStatus>
}
 800d200:	e003      	b.n	800d20a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800d202:	6839      	ldr	r1, [r7, #0]
 800d204:	6878      	ldr	r0, [r7, #4]
 800d206:	f000 f860 	bl	800d2ca <USBD_CtlError>
}
 800d20a:	bf00      	nop
 800d20c:	3708      	adds	r7, #8
 800d20e:	46bd      	mov	sp, r7
 800d210:	bd80      	pop	{r7, pc}

0800d212 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d212:	b580      	push	{r7, lr}
 800d214:	b082      	sub	sp, #8
 800d216:	af00      	add	r7, sp, #0
 800d218:	6078      	str	r0, [r7, #4]
 800d21a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d222:	b2db      	uxtb	r3, r3
 800d224:	3b01      	subs	r3, #1
 800d226:	2b02      	cmp	r3, #2
 800d228:	d80b      	bhi.n	800d242 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d22a:	683b      	ldr	r3, [r7, #0]
 800d22c:	885b      	ldrh	r3, [r3, #2]
 800d22e:	2b01      	cmp	r3, #1
 800d230:	d10c      	bne.n	800d24c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	2200      	movs	r2, #0
 800d236:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800d23a:	6878      	ldr	r0, [r7, #4]
 800d23c:	f000 f910 	bl	800d460 <USBD_CtlSendStatus>
      }
      break;
 800d240:	e004      	b.n	800d24c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800d242:	6839      	ldr	r1, [r7, #0]
 800d244:	6878      	ldr	r0, [r7, #4]
 800d246:	f000 f840 	bl	800d2ca <USBD_CtlError>
      break;
 800d24a:	e000      	b.n	800d24e <USBD_ClrFeature+0x3c>
      break;
 800d24c:	bf00      	nop
  }
}
 800d24e:	bf00      	nop
 800d250:	3708      	adds	r7, #8
 800d252:	46bd      	mov	sp, r7
 800d254:	bd80      	pop	{r7, pc}

0800d256 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d256:	b580      	push	{r7, lr}
 800d258:	b084      	sub	sp, #16
 800d25a:	af00      	add	r7, sp, #0
 800d25c:	6078      	str	r0, [r7, #4]
 800d25e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800d260:	683b      	ldr	r3, [r7, #0]
 800d262:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	781a      	ldrb	r2, [r3, #0]
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	3301      	adds	r3, #1
 800d270:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	781a      	ldrb	r2, [r3, #0]
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	3301      	adds	r3, #1
 800d27e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800d280:	68f8      	ldr	r0, [r7, #12]
 800d282:	f7ff fa40 	bl	800c706 <SWAPBYTE>
 800d286:	4603      	mov	r3, r0
 800d288:	461a      	mov	r2, r3
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	3301      	adds	r3, #1
 800d292:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	3301      	adds	r3, #1
 800d298:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800d29a:	68f8      	ldr	r0, [r7, #12]
 800d29c:	f7ff fa33 	bl	800c706 <SWAPBYTE>
 800d2a0:	4603      	mov	r3, r0
 800d2a2:	461a      	mov	r2, r3
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	3301      	adds	r3, #1
 800d2ac:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d2ae:	68fb      	ldr	r3, [r7, #12]
 800d2b0:	3301      	adds	r3, #1
 800d2b2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800d2b4:	68f8      	ldr	r0, [r7, #12]
 800d2b6:	f7ff fa26 	bl	800c706 <SWAPBYTE>
 800d2ba:	4603      	mov	r3, r0
 800d2bc:	461a      	mov	r2, r3
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	80da      	strh	r2, [r3, #6]
}
 800d2c2:	bf00      	nop
 800d2c4:	3710      	adds	r7, #16
 800d2c6:	46bd      	mov	sp, r7
 800d2c8:	bd80      	pop	{r7, pc}

0800d2ca <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d2ca:	b580      	push	{r7, lr}
 800d2cc:	b082      	sub	sp, #8
 800d2ce:	af00      	add	r7, sp, #0
 800d2d0:	6078      	str	r0, [r7, #4]
 800d2d2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800d2d4:	2180      	movs	r1, #128	; 0x80
 800d2d6:	6878      	ldr	r0, [r7, #4]
 800d2d8:	f000 fc70 	bl	800dbbc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800d2dc:	2100      	movs	r1, #0
 800d2de:	6878      	ldr	r0, [r7, #4]
 800d2e0:	f000 fc6c 	bl	800dbbc <USBD_LL_StallEP>
}
 800d2e4:	bf00      	nop
 800d2e6:	3708      	adds	r7, #8
 800d2e8:	46bd      	mov	sp, r7
 800d2ea:	bd80      	pop	{r7, pc}

0800d2ec <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d2ec:	b580      	push	{r7, lr}
 800d2ee:	b086      	sub	sp, #24
 800d2f0:	af00      	add	r7, sp, #0
 800d2f2:	60f8      	str	r0, [r7, #12]
 800d2f4:	60b9      	str	r1, [r7, #8]
 800d2f6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d2f8:	2300      	movs	r3, #0
 800d2fa:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d036      	beq.n	800d370 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800d302:	68fb      	ldr	r3, [r7, #12]
 800d304:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800d306:	6938      	ldr	r0, [r7, #16]
 800d308:	f000 f836 	bl	800d378 <USBD_GetLen>
 800d30c:	4603      	mov	r3, r0
 800d30e:	3301      	adds	r3, #1
 800d310:	b29b      	uxth	r3, r3
 800d312:	005b      	lsls	r3, r3, #1
 800d314:	b29a      	uxth	r2, r3
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800d31a:	7dfb      	ldrb	r3, [r7, #23]
 800d31c:	68ba      	ldr	r2, [r7, #8]
 800d31e:	4413      	add	r3, r2
 800d320:	687a      	ldr	r2, [r7, #4]
 800d322:	7812      	ldrb	r2, [r2, #0]
 800d324:	701a      	strb	r2, [r3, #0]
  idx++;
 800d326:	7dfb      	ldrb	r3, [r7, #23]
 800d328:	3301      	adds	r3, #1
 800d32a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800d32c:	7dfb      	ldrb	r3, [r7, #23]
 800d32e:	68ba      	ldr	r2, [r7, #8]
 800d330:	4413      	add	r3, r2
 800d332:	2203      	movs	r2, #3
 800d334:	701a      	strb	r2, [r3, #0]
  idx++;
 800d336:	7dfb      	ldrb	r3, [r7, #23]
 800d338:	3301      	adds	r3, #1
 800d33a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800d33c:	e013      	b.n	800d366 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800d33e:	7dfb      	ldrb	r3, [r7, #23]
 800d340:	68ba      	ldr	r2, [r7, #8]
 800d342:	4413      	add	r3, r2
 800d344:	693a      	ldr	r2, [r7, #16]
 800d346:	7812      	ldrb	r2, [r2, #0]
 800d348:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800d34a:	693b      	ldr	r3, [r7, #16]
 800d34c:	3301      	adds	r3, #1
 800d34e:	613b      	str	r3, [r7, #16]
    idx++;
 800d350:	7dfb      	ldrb	r3, [r7, #23]
 800d352:	3301      	adds	r3, #1
 800d354:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800d356:	7dfb      	ldrb	r3, [r7, #23]
 800d358:	68ba      	ldr	r2, [r7, #8]
 800d35a:	4413      	add	r3, r2
 800d35c:	2200      	movs	r2, #0
 800d35e:	701a      	strb	r2, [r3, #0]
    idx++;
 800d360:	7dfb      	ldrb	r3, [r7, #23]
 800d362:	3301      	adds	r3, #1
 800d364:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800d366:	693b      	ldr	r3, [r7, #16]
 800d368:	781b      	ldrb	r3, [r3, #0]
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d1e7      	bne.n	800d33e <USBD_GetString+0x52>
 800d36e:	e000      	b.n	800d372 <USBD_GetString+0x86>
    return;
 800d370:	bf00      	nop
  }
}
 800d372:	3718      	adds	r7, #24
 800d374:	46bd      	mov	sp, r7
 800d376:	bd80      	pop	{r7, pc}

0800d378 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d378:	b480      	push	{r7}
 800d37a:	b085      	sub	sp, #20
 800d37c:	af00      	add	r7, sp, #0
 800d37e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800d380:	2300      	movs	r3, #0
 800d382:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800d388:	e005      	b.n	800d396 <USBD_GetLen+0x1e>
  {
    len++;
 800d38a:	7bfb      	ldrb	r3, [r7, #15]
 800d38c:	3301      	adds	r3, #1
 800d38e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800d390:	68bb      	ldr	r3, [r7, #8]
 800d392:	3301      	adds	r3, #1
 800d394:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800d396:	68bb      	ldr	r3, [r7, #8]
 800d398:	781b      	ldrb	r3, [r3, #0]
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d1f5      	bne.n	800d38a <USBD_GetLen+0x12>
  }

  return len;
 800d39e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3a0:	4618      	mov	r0, r3
 800d3a2:	3714      	adds	r7, #20
 800d3a4:	46bd      	mov	sp, r7
 800d3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3aa:	4770      	bx	lr

0800d3ac <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800d3ac:	b580      	push	{r7, lr}
 800d3ae:	b084      	sub	sp, #16
 800d3b0:	af00      	add	r7, sp, #0
 800d3b2:	60f8      	str	r0, [r7, #12]
 800d3b4:	60b9      	str	r1, [r7, #8]
 800d3b6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	2202      	movs	r2, #2
 800d3bc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	687a      	ldr	r2, [r7, #4]
 800d3c4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	687a      	ldr	r2, [r7, #4]
 800d3ca:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	68ba      	ldr	r2, [r7, #8]
 800d3d0:	2100      	movs	r1, #0
 800d3d2:	68f8      	ldr	r0, [r7, #12]
 800d3d4:	f000 fc7b 	bl	800dcce <USBD_LL_Transmit>

  return USBD_OK;
 800d3d8:	2300      	movs	r3, #0
}
 800d3da:	4618      	mov	r0, r3
 800d3dc:	3710      	adds	r7, #16
 800d3de:	46bd      	mov	sp, r7
 800d3e0:	bd80      	pop	{r7, pc}

0800d3e2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800d3e2:	b580      	push	{r7, lr}
 800d3e4:	b084      	sub	sp, #16
 800d3e6:	af00      	add	r7, sp, #0
 800d3e8:	60f8      	str	r0, [r7, #12]
 800d3ea:	60b9      	str	r1, [r7, #8]
 800d3ec:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	68ba      	ldr	r2, [r7, #8]
 800d3f2:	2100      	movs	r1, #0
 800d3f4:	68f8      	ldr	r0, [r7, #12]
 800d3f6:	f000 fc6a 	bl	800dcce <USBD_LL_Transmit>

  return USBD_OK;
 800d3fa:	2300      	movs	r3, #0
}
 800d3fc:	4618      	mov	r0, r3
 800d3fe:	3710      	adds	r7, #16
 800d400:	46bd      	mov	sp, r7
 800d402:	bd80      	pop	{r7, pc}

0800d404 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800d404:	b580      	push	{r7, lr}
 800d406:	b084      	sub	sp, #16
 800d408:	af00      	add	r7, sp, #0
 800d40a:	60f8      	str	r0, [r7, #12]
 800d40c:	60b9      	str	r1, [r7, #8]
 800d40e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	2203      	movs	r2, #3
 800d414:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	687a      	ldr	r2, [r7, #4]
 800d41c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	687a      	ldr	r2, [r7, #4]
 800d424:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	68ba      	ldr	r2, [r7, #8]
 800d42c:	2100      	movs	r1, #0
 800d42e:	68f8      	ldr	r0, [r7, #12]
 800d430:	f000 fc6e 	bl	800dd10 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d434:	2300      	movs	r3, #0
}
 800d436:	4618      	mov	r0, r3
 800d438:	3710      	adds	r7, #16
 800d43a:	46bd      	mov	sp, r7
 800d43c:	bd80      	pop	{r7, pc}

0800d43e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800d43e:	b580      	push	{r7, lr}
 800d440:	b084      	sub	sp, #16
 800d442:	af00      	add	r7, sp, #0
 800d444:	60f8      	str	r0, [r7, #12]
 800d446:	60b9      	str	r1, [r7, #8]
 800d448:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	68ba      	ldr	r2, [r7, #8]
 800d44e:	2100      	movs	r1, #0
 800d450:	68f8      	ldr	r0, [r7, #12]
 800d452:	f000 fc5d 	bl	800dd10 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d456:	2300      	movs	r3, #0
}
 800d458:	4618      	mov	r0, r3
 800d45a:	3710      	adds	r7, #16
 800d45c:	46bd      	mov	sp, r7
 800d45e:	bd80      	pop	{r7, pc}

0800d460 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d460:	b580      	push	{r7, lr}
 800d462:	b082      	sub	sp, #8
 800d464:	af00      	add	r7, sp, #0
 800d466:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	2204      	movs	r2, #4
 800d46c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d470:	2300      	movs	r3, #0
 800d472:	2200      	movs	r2, #0
 800d474:	2100      	movs	r1, #0
 800d476:	6878      	ldr	r0, [r7, #4]
 800d478:	f000 fc29 	bl	800dcce <USBD_LL_Transmit>

  return USBD_OK;
 800d47c:	2300      	movs	r3, #0
}
 800d47e:	4618      	mov	r0, r3
 800d480:	3708      	adds	r7, #8
 800d482:	46bd      	mov	sp, r7
 800d484:	bd80      	pop	{r7, pc}

0800d486 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d486:	b580      	push	{r7, lr}
 800d488:	b082      	sub	sp, #8
 800d48a:	af00      	add	r7, sp, #0
 800d48c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	2205      	movs	r2, #5
 800d492:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d496:	2300      	movs	r3, #0
 800d498:	2200      	movs	r2, #0
 800d49a:	2100      	movs	r1, #0
 800d49c:	6878      	ldr	r0, [r7, #4]
 800d49e:	f000 fc37 	bl	800dd10 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d4a2:	2300      	movs	r3, #0
}
 800d4a4:	4618      	mov	r0, r3
 800d4a6:	3708      	adds	r7, #8
 800d4a8:	46bd      	mov	sp, r7
 800d4aa:	bd80      	pop	{r7, pc}

0800d4ac <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800d4ac:	b580      	push	{r7, lr}
 800d4ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800d4b0:	2200      	movs	r2, #0
 800d4b2:	4912      	ldr	r1, [pc, #72]	; (800d4fc <MX_USB_DEVICE_Init+0x50>)
 800d4b4:	4812      	ldr	r0, [pc, #72]	; (800d500 <MX_USB_DEVICE_Init+0x54>)
 800d4b6:	f7fe fd5d 	bl	800bf74 <USBD_Init>
 800d4ba:	4603      	mov	r3, r0
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d001      	beq.n	800d4c4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800d4c0:	f7f5 fb2c 	bl	8002b1c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 800d4c4:	490f      	ldr	r1, [pc, #60]	; (800d504 <MX_USB_DEVICE_Init+0x58>)
 800d4c6:	480e      	ldr	r0, [pc, #56]	; (800d500 <MX_USB_DEVICE_Init+0x54>)
 800d4c8:	f7fe fd84 	bl	800bfd4 <USBD_RegisterClass>
 800d4cc:	4603      	mov	r3, r0
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d001      	beq.n	800d4d6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800d4d2:	f7f5 fb23 	bl	8002b1c <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 800d4d6:	490c      	ldr	r1, [pc, #48]	; (800d508 <MX_USB_DEVICE_Init+0x5c>)
 800d4d8:	4809      	ldr	r0, [pc, #36]	; (800d500 <MX_USB_DEVICE_Init+0x54>)
 800d4da:	f7fe fd31 	bl	800bf40 <USBD_CUSTOM_HID_RegisterInterface>
 800d4de:	4603      	mov	r3, r0
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d001      	beq.n	800d4e8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800d4e4:	f7f5 fb1a 	bl	8002b1c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800d4e8:	4805      	ldr	r0, [pc, #20]	; (800d500 <MX_USB_DEVICE_Init+0x54>)
 800d4ea:	f7fe fda9 	bl	800c040 <USBD_Start>
 800d4ee:	4603      	mov	r3, r0
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d001      	beq.n	800d4f8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800d4f4:	f7f5 fb12 	bl	8002b1c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  //NVIC_SetPriority(OTG_FS_IRQn,1);
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d4f8:	bf00      	nop
 800d4fa:	bd80      	pop	{r7, pc}
 800d4fc:	200002d4 	.word	0x200002d4
 800d500:	20001280 	.word	0x20001280
 800d504:	200001a0 	.word	0x200001a0
 800d508:	200002c4 	.word	0x200002c4

0800d50c <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 800d50c:	b480      	push	{r7}
 800d50e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d510:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d512:	4618      	mov	r0, r3
 800d514:	46bd      	mov	sp, r7
 800d516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d51a:	4770      	bx	lr

0800d51c <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 800d51c:	b480      	push	{r7}
 800d51e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 800d520:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d522:	4618      	mov	r0, r3
 800d524:	46bd      	mov	sp, r7
 800d526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d52a:	4770      	bx	lr

0800d52c <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 800d52c:	b580      	push	{r7, lr}
 800d52e:	b084      	sub	sp, #16
 800d530:	af00      	add	r7, sp, #0
 800d532:	4603      	mov	r3, r0
 800d534:	460a      	mov	r2, r1
 800d536:	71fb      	strb	r3, [r7, #7]
 800d538:	4613      	mov	r3, r2
 800d53a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  UNUSED(event_idx);
  UNUSED(state);
  KeyPadDataFrame_t *ReceivedData = (KeyPadDataFrame_t*)&hUsbDeviceFS.pData;
 800d53c:	4b1e      	ldr	r3, [pc, #120]	; (800d5b8 <CUSTOM_HID_OutEvent_FS+0x8c>)
 800d53e:	60fb      	str	r3, [r7, #12]
  switch(ReceivedData->KeyType){
 800d540:	68fb      	ldr	r3, [r7, #12]
 800d542:	781b      	ldrb	r3, [r3, #0]
 800d544:	2b02      	cmp	r3, #2
 800d546:	d01c      	beq.n	800d582 <CUSTOM_HID_OutEvent_FS+0x56>
 800d548:	2b02      	cmp	r3, #2
 800d54a:	dc25      	bgt.n	800d598 <CUSTOM_HID_OutEvent_FS+0x6c>
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d002      	beq.n	800d556 <CUSTOM_HID_OutEvent_FS+0x2a>
 800d550:	2b01      	cmp	r3, #1
 800d552:	d00b      	beq.n	800d56c <CUSTOM_HID_OutEvent_FS+0x40>
		  break;
  case(JoystickType):
		  AssignNewJoystickFunction(ReceivedData->KeyAddress, ReceivedData->NewFunction);
		  break;
  default:
	      break;
 800d554:	e020      	b.n	800d598 <CUSTOM_HID_OutEvent_FS+0x6c>
		  AssignNewButtonFunction(ReceivedData->KeyAddress, ReceivedData->NewFunction);
 800d556:	68fb      	ldr	r3, [r7, #12]
 800d558:	785a      	ldrb	r2, [r3, #1]
 800d55a:	68fb      	ldr	r3, [r7, #12]
 800d55c:	f8d3 1002 	ldr.w	r1, [r3, #2]
 800d560:	460b      	mov	r3, r1
 800d562:	4619      	mov	r1, r3
 800d564:	4610      	mov	r0, r2
 800d566:	f7f4 fc85 	bl	8001e74 <AssignNewButtonFunction>
		  break;
 800d56a:	e016      	b.n	800d59a <CUSTOM_HID_OutEvent_FS+0x6e>
		  AssignNewTouchButtonFunction(ReceivedData->KeyAddress, ReceivedData->NewFunction);
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	785a      	ldrb	r2, [r3, #1]
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	f8d3 1002 	ldr.w	r1, [r3, #2]
 800d576:	460b      	mov	r3, r1
 800d578:	4619      	mov	r1, r3
 800d57a:	4610      	mov	r0, r2
 800d57c:	f7f4 fc98 	bl	8001eb0 <AssignNewTouchButtonFunction>
		  break;
 800d580:	e00b      	b.n	800d59a <CUSTOM_HID_OutEvent_FS+0x6e>
		  AssignNewJoystickFunction(ReceivedData->KeyAddress, ReceivedData->NewFunction);
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	785a      	ldrb	r2, [r3, #1]
 800d586:	68fb      	ldr	r3, [r7, #12]
 800d588:	f8d3 1002 	ldr.w	r1, [r3, #2]
 800d58c:	460b      	mov	r3, r1
 800d58e:	4619      	mov	r1, r3
 800d590:	4610      	mov	r0, r2
 800d592:	f7f4 fcab 	bl	8001eec <AssignNewJoystickFunction>
		  break;
 800d596:	e000      	b.n	800d59a <CUSTOM_HID_OutEvent_FS+0x6e>
	      break;
 800d598:	bf00      	nop
  }

  /* Start next USB packet transfer once data processing is completed */
  if (USBD_CUSTOM_HID_ReceivePacket(&hUsbDeviceFS) != (uint8_t)USBD_OK)
 800d59a:	4808      	ldr	r0, [pc, #32]	; (800d5bc <CUSTOM_HID_OutEvent_FS+0x90>)
 800d59c:	f7fe fc72 	bl	800be84 <USBD_CUSTOM_HID_ReceivePacket>
 800d5a0:	4603      	mov	r3, r0
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d002      	beq.n	800d5ac <CUSTOM_HID_OutEvent_FS+0x80>
  {
    return -1;
 800d5a6:	f04f 33ff 	mov.w	r3, #4294967295
 800d5aa:	e000      	b.n	800d5ae <CUSTOM_HID_OutEvent_FS+0x82>
  }

  return (USBD_OK);
 800d5ac:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d5ae:	4618      	mov	r0, r3
 800d5b0:	3710      	adds	r7, #16
 800d5b2:	46bd      	mov	sp, r7
 800d5b4:	bd80      	pop	{r7, pc}
 800d5b6:	bf00      	nop
 800d5b8:	20001548 	.word	0x20001548
 800d5bc:	20001280 	.word	0x20001280

0800d5c0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d5c0:	b480      	push	{r7}
 800d5c2:	b083      	sub	sp, #12
 800d5c4:	af00      	add	r7, sp, #0
 800d5c6:	4603      	mov	r3, r0
 800d5c8:	6039      	str	r1, [r7, #0]
 800d5ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(KeyPad_DeviceDesc);
 800d5cc:	683b      	ldr	r3, [r7, #0]
 800d5ce:	2212      	movs	r2, #18
 800d5d0:	801a      	strh	r2, [r3, #0]
  return KeyPad_DeviceDesc;
 800d5d2:	4b03      	ldr	r3, [pc, #12]	; (800d5e0 <USBD_FS_DeviceDescriptor+0x20>)
}
 800d5d4:	4618      	mov	r0, r3
 800d5d6:	370c      	adds	r7, #12
 800d5d8:	46bd      	mov	sp, r7
 800d5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5de:	4770      	bx	lr
 800d5e0:	200002f0 	.word	0x200002f0

0800d5e4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d5e4:	b480      	push	{r7}
 800d5e6:	b083      	sub	sp, #12
 800d5e8:	af00      	add	r7, sp, #0
 800d5ea:	4603      	mov	r3, r0
 800d5ec:	6039      	str	r1, [r7, #0]
 800d5ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d5f0:	683b      	ldr	r3, [r7, #0]
 800d5f2:	2204      	movs	r2, #4
 800d5f4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d5f6:	4b03      	ldr	r3, [pc, #12]	; (800d604 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800d5f8:	4618      	mov	r0, r3
 800d5fa:	370c      	adds	r7, #12
 800d5fc:	46bd      	mov	sp, r7
 800d5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d602:	4770      	bx	lr
 800d604:	20000304 	.word	0x20000304

0800d608 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d608:	b580      	push	{r7, lr}
 800d60a:	b082      	sub	sp, #8
 800d60c:	af00      	add	r7, sp, #0
 800d60e:	4603      	mov	r3, r0
 800d610:	6039      	str	r1, [r7, #0]
 800d612:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d614:	79fb      	ldrb	r3, [r7, #7]
 800d616:	2b00      	cmp	r3, #0
 800d618:	d105      	bne.n	800d626 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d61a:	683a      	ldr	r2, [r7, #0]
 800d61c:	4907      	ldr	r1, [pc, #28]	; (800d63c <USBD_FS_ProductStrDescriptor+0x34>)
 800d61e:	4808      	ldr	r0, [pc, #32]	; (800d640 <USBD_FS_ProductStrDescriptor+0x38>)
 800d620:	f7ff fe64 	bl	800d2ec <USBD_GetString>
 800d624:	e004      	b.n	800d630 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d626:	683a      	ldr	r2, [r7, #0]
 800d628:	4904      	ldr	r1, [pc, #16]	; (800d63c <USBD_FS_ProductStrDescriptor+0x34>)
 800d62a:	4805      	ldr	r0, [pc, #20]	; (800d640 <USBD_FS_ProductStrDescriptor+0x38>)
 800d62c:	f7ff fe5e 	bl	800d2ec <USBD_GetString>
  }
  return USBD_StrDesc;
 800d630:	4b02      	ldr	r3, [pc, #8]	; (800d63c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800d632:	4618      	mov	r0, r3
 800d634:	3708      	adds	r7, #8
 800d636:	46bd      	mov	sp, r7
 800d638:	bd80      	pop	{r7, pc}
 800d63a:	bf00      	nop
 800d63c:	2000155c 	.word	0x2000155c
 800d640:	0800f1e8 	.word	0x0800f1e8

0800d644 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d644:	b580      	push	{r7, lr}
 800d646:	b082      	sub	sp, #8
 800d648:	af00      	add	r7, sp, #0
 800d64a:	4603      	mov	r3, r0
 800d64c:	6039      	str	r1, [r7, #0]
 800d64e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d650:	683a      	ldr	r2, [r7, #0]
 800d652:	4904      	ldr	r1, [pc, #16]	; (800d664 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800d654:	4804      	ldr	r0, [pc, #16]	; (800d668 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800d656:	f7ff fe49 	bl	800d2ec <USBD_GetString>
  return USBD_StrDesc;
 800d65a:	4b02      	ldr	r3, [pc, #8]	; (800d664 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800d65c:	4618      	mov	r0, r3
 800d65e:	3708      	adds	r7, #8
 800d660:	46bd      	mov	sp, r7
 800d662:	bd80      	pop	{r7, pc}
 800d664:	2000155c 	.word	0x2000155c
 800d668:	0800f20c 	.word	0x0800f20c

0800d66c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d66c:	b580      	push	{r7, lr}
 800d66e:	b082      	sub	sp, #8
 800d670:	af00      	add	r7, sp, #0
 800d672:	4603      	mov	r3, r0
 800d674:	6039      	str	r1, [r7, #0]
 800d676:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d678:	683b      	ldr	r3, [r7, #0]
 800d67a:	221a      	movs	r2, #26
 800d67c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d67e:	f000 f843 	bl	800d708 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800d682:	4b02      	ldr	r3, [pc, #8]	; (800d68c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800d684:	4618      	mov	r0, r3
 800d686:	3708      	adds	r7, #8
 800d688:	46bd      	mov	sp, r7
 800d68a:	bd80      	pop	{r7, pc}
 800d68c:	20000308 	.word	0x20000308

0800d690 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d690:	b580      	push	{r7, lr}
 800d692:	b082      	sub	sp, #8
 800d694:	af00      	add	r7, sp, #0
 800d696:	4603      	mov	r3, r0
 800d698:	6039      	str	r1, [r7, #0]
 800d69a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d69c:	79fb      	ldrb	r3, [r7, #7]
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d105      	bne.n	800d6ae <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d6a2:	683a      	ldr	r2, [r7, #0]
 800d6a4:	4907      	ldr	r1, [pc, #28]	; (800d6c4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d6a6:	4808      	ldr	r0, [pc, #32]	; (800d6c8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d6a8:	f7ff fe20 	bl	800d2ec <USBD_GetString>
 800d6ac:	e004      	b.n	800d6b8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d6ae:	683a      	ldr	r2, [r7, #0]
 800d6b0:	4904      	ldr	r1, [pc, #16]	; (800d6c4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d6b2:	4805      	ldr	r0, [pc, #20]	; (800d6c8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d6b4:	f7ff fe1a 	bl	800d2ec <USBD_GetString>
  }
  return USBD_StrDesc;
 800d6b8:	4b02      	ldr	r3, [pc, #8]	; (800d6c4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800d6ba:	4618      	mov	r0, r3
 800d6bc:	3708      	adds	r7, #8
 800d6be:	46bd      	mov	sp, r7
 800d6c0:	bd80      	pop	{r7, pc}
 800d6c2:	bf00      	nop
 800d6c4:	2000155c 	.word	0x2000155c
 800d6c8:	0800f218 	.word	0x0800f218

0800d6cc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d6cc:	b580      	push	{r7, lr}
 800d6ce:	b082      	sub	sp, #8
 800d6d0:	af00      	add	r7, sp, #0
 800d6d2:	4603      	mov	r3, r0
 800d6d4:	6039      	str	r1, [r7, #0]
 800d6d6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d6d8:	79fb      	ldrb	r3, [r7, #7]
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d105      	bne.n	800d6ea <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d6de:	683a      	ldr	r2, [r7, #0]
 800d6e0:	4907      	ldr	r1, [pc, #28]	; (800d700 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d6e2:	4808      	ldr	r0, [pc, #32]	; (800d704 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d6e4:	f7ff fe02 	bl	800d2ec <USBD_GetString>
 800d6e8:	e004      	b.n	800d6f4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d6ea:	683a      	ldr	r2, [r7, #0]
 800d6ec:	4904      	ldr	r1, [pc, #16]	; (800d700 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d6ee:	4805      	ldr	r0, [pc, #20]	; (800d704 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d6f0:	f7ff fdfc 	bl	800d2ec <USBD_GetString>
  }
  return USBD_StrDesc;
 800d6f4:	4b02      	ldr	r3, [pc, #8]	; (800d700 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800d6f6:	4618      	mov	r0, r3
 800d6f8:	3708      	adds	r7, #8
 800d6fa:	46bd      	mov	sp, r7
 800d6fc:	bd80      	pop	{r7, pc}
 800d6fe:	bf00      	nop
 800d700:	2000155c 	.word	0x2000155c
 800d704:	0800f234 	.word	0x0800f234

0800d708 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d708:	b580      	push	{r7, lr}
 800d70a:	b084      	sub	sp, #16
 800d70c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d70e:	4b0f      	ldr	r3, [pc, #60]	; (800d74c <Get_SerialNum+0x44>)
 800d710:	681b      	ldr	r3, [r3, #0]
 800d712:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d714:	4b0e      	ldr	r3, [pc, #56]	; (800d750 <Get_SerialNum+0x48>)
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d71a:	4b0e      	ldr	r3, [pc, #56]	; (800d754 <Get_SerialNum+0x4c>)
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d720:	68fa      	ldr	r2, [r7, #12]
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	4413      	add	r3, r2
 800d726:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d728:	68fb      	ldr	r3, [r7, #12]
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d009      	beq.n	800d742 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d72e:	2208      	movs	r2, #8
 800d730:	4909      	ldr	r1, [pc, #36]	; (800d758 <Get_SerialNum+0x50>)
 800d732:	68f8      	ldr	r0, [r7, #12]
 800d734:	f000 f814 	bl	800d760 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d738:	2204      	movs	r2, #4
 800d73a:	4908      	ldr	r1, [pc, #32]	; (800d75c <Get_SerialNum+0x54>)
 800d73c:	68b8      	ldr	r0, [r7, #8]
 800d73e:	f000 f80f 	bl	800d760 <IntToUnicode>
  }
}
 800d742:	bf00      	nop
 800d744:	3710      	adds	r7, #16
 800d746:	46bd      	mov	sp, r7
 800d748:	bd80      	pop	{r7, pc}
 800d74a:	bf00      	nop
 800d74c:	1fff7a10 	.word	0x1fff7a10
 800d750:	1fff7a14 	.word	0x1fff7a14
 800d754:	1fff7a18 	.word	0x1fff7a18
 800d758:	2000030a 	.word	0x2000030a
 800d75c:	2000031a 	.word	0x2000031a

0800d760 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d760:	b480      	push	{r7}
 800d762:	b087      	sub	sp, #28
 800d764:	af00      	add	r7, sp, #0
 800d766:	60f8      	str	r0, [r7, #12]
 800d768:	60b9      	str	r1, [r7, #8]
 800d76a:	4613      	mov	r3, r2
 800d76c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d76e:	2300      	movs	r3, #0
 800d770:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d772:	2300      	movs	r3, #0
 800d774:	75fb      	strb	r3, [r7, #23]
 800d776:	e027      	b.n	800d7c8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d778:	68fb      	ldr	r3, [r7, #12]
 800d77a:	0f1b      	lsrs	r3, r3, #28
 800d77c:	2b09      	cmp	r3, #9
 800d77e:	d80b      	bhi.n	800d798 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	0f1b      	lsrs	r3, r3, #28
 800d784:	b2da      	uxtb	r2, r3
 800d786:	7dfb      	ldrb	r3, [r7, #23]
 800d788:	005b      	lsls	r3, r3, #1
 800d78a:	4619      	mov	r1, r3
 800d78c:	68bb      	ldr	r3, [r7, #8]
 800d78e:	440b      	add	r3, r1
 800d790:	3230      	adds	r2, #48	; 0x30
 800d792:	b2d2      	uxtb	r2, r2
 800d794:	701a      	strb	r2, [r3, #0]
 800d796:	e00a      	b.n	800d7ae <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d798:	68fb      	ldr	r3, [r7, #12]
 800d79a:	0f1b      	lsrs	r3, r3, #28
 800d79c:	b2da      	uxtb	r2, r3
 800d79e:	7dfb      	ldrb	r3, [r7, #23]
 800d7a0:	005b      	lsls	r3, r3, #1
 800d7a2:	4619      	mov	r1, r3
 800d7a4:	68bb      	ldr	r3, [r7, #8]
 800d7a6:	440b      	add	r3, r1
 800d7a8:	3237      	adds	r2, #55	; 0x37
 800d7aa:	b2d2      	uxtb	r2, r2
 800d7ac:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d7ae:	68fb      	ldr	r3, [r7, #12]
 800d7b0:	011b      	lsls	r3, r3, #4
 800d7b2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d7b4:	7dfb      	ldrb	r3, [r7, #23]
 800d7b6:	005b      	lsls	r3, r3, #1
 800d7b8:	3301      	adds	r3, #1
 800d7ba:	68ba      	ldr	r2, [r7, #8]
 800d7bc:	4413      	add	r3, r2
 800d7be:	2200      	movs	r2, #0
 800d7c0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d7c2:	7dfb      	ldrb	r3, [r7, #23]
 800d7c4:	3301      	adds	r3, #1
 800d7c6:	75fb      	strb	r3, [r7, #23]
 800d7c8:	7dfa      	ldrb	r2, [r7, #23]
 800d7ca:	79fb      	ldrb	r3, [r7, #7]
 800d7cc:	429a      	cmp	r2, r3
 800d7ce:	d3d3      	bcc.n	800d778 <IntToUnicode+0x18>
  }
}
 800d7d0:	bf00      	nop
 800d7d2:	bf00      	nop
 800d7d4:	371c      	adds	r7, #28
 800d7d6:	46bd      	mov	sp, r7
 800d7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7dc:	4770      	bx	lr
	...

0800d7e0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d7e0:	b580      	push	{r7, lr}
 800d7e2:	b08a      	sub	sp, #40	; 0x28
 800d7e4:	af00      	add	r7, sp, #0
 800d7e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d7e8:	f107 0314 	add.w	r3, r7, #20
 800d7ec:	2200      	movs	r2, #0
 800d7ee:	601a      	str	r2, [r3, #0]
 800d7f0:	605a      	str	r2, [r3, #4]
 800d7f2:	609a      	str	r2, [r3, #8]
 800d7f4:	60da      	str	r2, [r3, #12]
 800d7f6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d800:	d13a      	bne.n	800d878 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d802:	2300      	movs	r3, #0
 800d804:	613b      	str	r3, [r7, #16]
 800d806:	4b1e      	ldr	r3, [pc, #120]	; (800d880 <HAL_PCD_MspInit+0xa0>)
 800d808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d80a:	4a1d      	ldr	r2, [pc, #116]	; (800d880 <HAL_PCD_MspInit+0xa0>)
 800d80c:	f043 0301 	orr.w	r3, r3, #1
 800d810:	6313      	str	r3, [r2, #48]	; 0x30
 800d812:	4b1b      	ldr	r3, [pc, #108]	; (800d880 <HAL_PCD_MspInit+0xa0>)
 800d814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d816:	f003 0301 	and.w	r3, r3, #1
 800d81a:	613b      	str	r3, [r7, #16]
 800d81c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800d81e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800d822:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d824:	2302      	movs	r3, #2
 800d826:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d828:	2300      	movs	r3, #0
 800d82a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d82c:	2303      	movs	r3, #3
 800d82e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d830:	230a      	movs	r3, #10
 800d832:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d834:	f107 0314 	add.w	r3, r7, #20
 800d838:	4619      	mov	r1, r3
 800d83a:	4812      	ldr	r0, [pc, #72]	; (800d884 <HAL_PCD_MspInit+0xa4>)
 800d83c:	f7f7 fb8c 	bl	8004f58 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d840:	4b0f      	ldr	r3, [pc, #60]	; (800d880 <HAL_PCD_MspInit+0xa0>)
 800d842:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d844:	4a0e      	ldr	r2, [pc, #56]	; (800d880 <HAL_PCD_MspInit+0xa0>)
 800d846:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d84a:	6353      	str	r3, [r2, #52]	; 0x34
 800d84c:	2300      	movs	r3, #0
 800d84e:	60fb      	str	r3, [r7, #12]
 800d850:	4b0b      	ldr	r3, [pc, #44]	; (800d880 <HAL_PCD_MspInit+0xa0>)
 800d852:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d854:	4a0a      	ldr	r2, [pc, #40]	; (800d880 <HAL_PCD_MspInit+0xa0>)
 800d856:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d85a:	6453      	str	r3, [r2, #68]	; 0x44
 800d85c:	4b08      	ldr	r3, [pc, #32]	; (800d880 <HAL_PCD_MspInit+0xa0>)
 800d85e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d860:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d864:	60fb      	str	r3, [r7, #12]
 800d866:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 2, 0);
 800d868:	2200      	movs	r2, #0
 800d86a:	2102      	movs	r1, #2
 800d86c:	2043      	movs	r0, #67	; 0x43
 800d86e:	f7f6 ff12 	bl	8004696 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d872:	2043      	movs	r0, #67	; 0x43
 800d874:	f7f6 ff2b 	bl	80046ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d878:	bf00      	nop
 800d87a:	3728      	adds	r7, #40	; 0x28
 800d87c:	46bd      	mov	sp, r7
 800d87e:	bd80      	pop	{r7, pc}
 800d880:	40023800 	.word	0x40023800
 800d884:	40020000 	.word	0x40020000

0800d888 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d888:	b580      	push	{r7, lr}
 800d88a:	b082      	sub	sp, #8
 800d88c:	af00      	add	r7, sp, #0
 800d88e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800d89c:	4619      	mov	r1, r3
 800d89e:	4610      	mov	r0, r2
 800d8a0:	f7fe fc1b 	bl	800c0da <USBD_LL_SetupStage>
}
 800d8a4:	bf00      	nop
 800d8a6:	3708      	adds	r7, #8
 800d8a8:	46bd      	mov	sp, r7
 800d8aa:	bd80      	pop	{r7, pc}

0800d8ac <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d8ac:	b580      	push	{r7, lr}
 800d8ae:	b082      	sub	sp, #8
 800d8b0:	af00      	add	r7, sp, #0
 800d8b2:	6078      	str	r0, [r7, #4]
 800d8b4:	460b      	mov	r3, r1
 800d8b6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800d8be:	78fa      	ldrb	r2, [r7, #3]
 800d8c0:	6879      	ldr	r1, [r7, #4]
 800d8c2:	4613      	mov	r3, r2
 800d8c4:	00db      	lsls	r3, r3, #3
 800d8c6:	4413      	add	r3, r2
 800d8c8:	009b      	lsls	r3, r3, #2
 800d8ca:	440b      	add	r3, r1
 800d8cc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800d8d0:	681a      	ldr	r2, [r3, #0]
 800d8d2:	78fb      	ldrb	r3, [r7, #3]
 800d8d4:	4619      	mov	r1, r3
 800d8d6:	f7fe fc55 	bl	800c184 <USBD_LL_DataOutStage>
}
 800d8da:	bf00      	nop
 800d8dc:	3708      	adds	r7, #8
 800d8de:	46bd      	mov	sp, r7
 800d8e0:	bd80      	pop	{r7, pc}

0800d8e2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d8e2:	b580      	push	{r7, lr}
 800d8e4:	b082      	sub	sp, #8
 800d8e6:	af00      	add	r7, sp, #0
 800d8e8:	6078      	str	r0, [r7, #4]
 800d8ea:	460b      	mov	r3, r1
 800d8ec:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800d8f4:	78fa      	ldrb	r2, [r7, #3]
 800d8f6:	6879      	ldr	r1, [r7, #4]
 800d8f8:	4613      	mov	r3, r2
 800d8fa:	00db      	lsls	r3, r3, #3
 800d8fc:	4413      	add	r3, r2
 800d8fe:	009b      	lsls	r3, r3, #2
 800d900:	440b      	add	r3, r1
 800d902:	334c      	adds	r3, #76	; 0x4c
 800d904:	681a      	ldr	r2, [r3, #0]
 800d906:	78fb      	ldrb	r3, [r7, #3]
 800d908:	4619      	mov	r1, r3
 800d90a:	f7fe fcee 	bl	800c2ea <USBD_LL_DataInStage>
}
 800d90e:	bf00      	nop
 800d910:	3708      	adds	r7, #8
 800d912:	46bd      	mov	sp, r7
 800d914:	bd80      	pop	{r7, pc}

0800d916 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d916:	b580      	push	{r7, lr}
 800d918:	b082      	sub	sp, #8
 800d91a:	af00      	add	r7, sp, #0
 800d91c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d924:	4618      	mov	r0, r3
 800d926:	f7fe fe22 	bl	800c56e <USBD_LL_SOF>
}
 800d92a:	bf00      	nop
 800d92c:	3708      	adds	r7, #8
 800d92e:	46bd      	mov	sp, r7
 800d930:	bd80      	pop	{r7, pc}

0800d932 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d932:	b580      	push	{r7, lr}
 800d934:	b084      	sub	sp, #16
 800d936:	af00      	add	r7, sp, #0
 800d938:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d93a:	2301      	movs	r3, #1
 800d93c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	68db      	ldr	r3, [r3, #12]
 800d942:	2b02      	cmp	r3, #2
 800d944:	d001      	beq.n	800d94a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800d946:	f7f5 f8e9 	bl	8002b1c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d950:	7bfa      	ldrb	r2, [r7, #15]
 800d952:	4611      	mov	r1, r2
 800d954:	4618      	mov	r0, r3
 800d956:	f7fe fdcc 	bl	800c4f2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d960:	4618      	mov	r0, r3
 800d962:	f7fe fd74 	bl	800c44e <USBD_LL_Reset>
}
 800d966:	bf00      	nop
 800d968:	3710      	adds	r7, #16
 800d96a:	46bd      	mov	sp, r7
 800d96c:	bd80      	pop	{r7, pc}
	...

0800d970 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d970:	b580      	push	{r7, lr}
 800d972:	b082      	sub	sp, #8
 800d974:	af00      	add	r7, sp, #0
 800d976:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d97e:	4618      	mov	r0, r3
 800d980:	f7fe fdc7 	bl	800c512 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	681b      	ldr	r3, [r3, #0]
 800d988:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	687a      	ldr	r2, [r7, #4]
 800d990:	6812      	ldr	r2, [r2, #0]
 800d992:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d996:	f043 0301 	orr.w	r3, r3, #1
 800d99a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	6a1b      	ldr	r3, [r3, #32]
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d005      	beq.n	800d9b0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d9a4:	4b04      	ldr	r3, [pc, #16]	; (800d9b8 <HAL_PCD_SuspendCallback+0x48>)
 800d9a6:	691b      	ldr	r3, [r3, #16]
 800d9a8:	4a03      	ldr	r2, [pc, #12]	; (800d9b8 <HAL_PCD_SuspendCallback+0x48>)
 800d9aa:	f043 0306 	orr.w	r3, r3, #6
 800d9ae:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d9b0:	bf00      	nop
 800d9b2:	3708      	adds	r7, #8
 800d9b4:	46bd      	mov	sp, r7
 800d9b6:	bd80      	pop	{r7, pc}
 800d9b8:	e000ed00 	.word	0xe000ed00

0800d9bc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d9bc:	b580      	push	{r7, lr}
 800d9be:	b082      	sub	sp, #8
 800d9c0:	af00      	add	r7, sp, #0
 800d9c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d9ca:	4618      	mov	r0, r3
 800d9cc:	f7fe fdb7 	bl	800c53e <USBD_LL_Resume>
}
 800d9d0:	bf00      	nop
 800d9d2:	3708      	adds	r7, #8
 800d9d4:	46bd      	mov	sp, r7
 800d9d6:	bd80      	pop	{r7, pc}

0800d9d8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d9d8:	b580      	push	{r7, lr}
 800d9da:	b082      	sub	sp, #8
 800d9dc:	af00      	add	r7, sp, #0
 800d9de:	6078      	str	r0, [r7, #4]
 800d9e0:	460b      	mov	r3, r1
 800d9e2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d9ea:	78fa      	ldrb	r2, [r7, #3]
 800d9ec:	4611      	mov	r1, r2
 800d9ee:	4618      	mov	r0, r3
 800d9f0:	f7fe fe0f 	bl	800c612 <USBD_LL_IsoOUTIncomplete>
}
 800d9f4:	bf00      	nop
 800d9f6:	3708      	adds	r7, #8
 800d9f8:	46bd      	mov	sp, r7
 800d9fa:	bd80      	pop	{r7, pc}

0800d9fc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d9fc:	b580      	push	{r7, lr}
 800d9fe:	b082      	sub	sp, #8
 800da00:	af00      	add	r7, sp, #0
 800da02:	6078      	str	r0, [r7, #4]
 800da04:	460b      	mov	r3, r1
 800da06:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800da0e:	78fa      	ldrb	r2, [r7, #3]
 800da10:	4611      	mov	r1, r2
 800da12:	4618      	mov	r0, r3
 800da14:	f7fe fdcb 	bl	800c5ae <USBD_LL_IsoINIncomplete>
}
 800da18:	bf00      	nop
 800da1a:	3708      	adds	r7, #8
 800da1c:	46bd      	mov	sp, r7
 800da1e:	bd80      	pop	{r7, pc}

0800da20 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800da20:	b580      	push	{r7, lr}
 800da22:	b082      	sub	sp, #8
 800da24:	af00      	add	r7, sp, #0
 800da26:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800da2e:	4618      	mov	r0, r3
 800da30:	f7fe fe21 	bl	800c676 <USBD_LL_DevConnected>
}
 800da34:	bf00      	nop
 800da36:	3708      	adds	r7, #8
 800da38:	46bd      	mov	sp, r7
 800da3a:	bd80      	pop	{r7, pc}

0800da3c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800da3c:	b580      	push	{r7, lr}
 800da3e:	b082      	sub	sp, #8
 800da40:	af00      	add	r7, sp, #0
 800da42:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800da4a:	4618      	mov	r0, r3
 800da4c:	f7fe fe1e 	bl	800c68c <USBD_LL_DevDisconnected>
}
 800da50:	bf00      	nop
 800da52:	3708      	adds	r7, #8
 800da54:	46bd      	mov	sp, r7
 800da56:	bd80      	pop	{r7, pc}

0800da58 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800da58:	b580      	push	{r7, lr}
 800da5a:	b082      	sub	sp, #8
 800da5c:	af00      	add	r7, sp, #0
 800da5e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	781b      	ldrb	r3, [r3, #0]
 800da64:	2b00      	cmp	r3, #0
 800da66:	d141      	bne.n	800daec <USBD_LL_Init+0x94>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800da68:	4a23      	ldr	r2, [pc, #140]	; (800daf8 <USBD_LL_Init+0xa0>)
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	4a21      	ldr	r2, [pc, #132]	; (800daf8 <USBD_LL_Init+0xa0>)
 800da74:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800da78:	4b1f      	ldr	r3, [pc, #124]	; (800daf8 <USBD_LL_Init+0xa0>)
 800da7a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800da7e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800da80:	4b1d      	ldr	r3, [pc, #116]	; (800daf8 <USBD_LL_Init+0xa0>)
 800da82:	2204      	movs	r2, #4
 800da84:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800da86:	4b1c      	ldr	r3, [pc, #112]	; (800daf8 <USBD_LL_Init+0xa0>)
 800da88:	2202      	movs	r2, #2
 800da8a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800da8c:	4b1a      	ldr	r3, [pc, #104]	; (800daf8 <USBD_LL_Init+0xa0>)
 800da8e:	2200      	movs	r2, #0
 800da90:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800da92:	4b19      	ldr	r3, [pc, #100]	; (800daf8 <USBD_LL_Init+0xa0>)
 800da94:	2202      	movs	r2, #2
 800da96:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800da98:	4b17      	ldr	r3, [pc, #92]	; (800daf8 <USBD_LL_Init+0xa0>)
 800da9a:	2200      	movs	r2, #0
 800da9c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800da9e:	4b16      	ldr	r3, [pc, #88]	; (800daf8 <USBD_LL_Init+0xa0>)
 800daa0:	2200      	movs	r2, #0
 800daa2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800daa4:	4b14      	ldr	r3, [pc, #80]	; (800daf8 <USBD_LL_Init+0xa0>)
 800daa6:	2200      	movs	r2, #0
 800daa8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800daaa:	4b13      	ldr	r3, [pc, #76]	; (800daf8 <USBD_LL_Init+0xa0>)
 800daac:	2200      	movs	r2, #0
 800daae:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800dab0:	4b11      	ldr	r3, [pc, #68]	; (800daf8 <USBD_LL_Init+0xa0>)
 800dab2:	2200      	movs	r2, #0
 800dab4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800dab6:	4810      	ldr	r0, [pc, #64]	; (800daf8 <USBD_LL_Init+0xa0>)
 800dab8:	f7f8 fce1 	bl	800647e <HAL_PCD_Init>
 800dabc:	4603      	mov	r3, r0
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d001      	beq.n	800dac6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800dac2:	f7f5 f82b 	bl	8002b1c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800dac6:	2180      	movs	r1, #128	; 0x80
 800dac8:	480b      	ldr	r0, [pc, #44]	; (800daf8 <USBD_LL_Init+0xa0>)
 800daca:	f7f9 ff20 	bl	800790e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800dace:	2240      	movs	r2, #64	; 0x40
 800dad0:	2100      	movs	r1, #0
 800dad2:	4809      	ldr	r0, [pc, #36]	; (800daf8 <USBD_LL_Init+0xa0>)
 800dad4:	f7f9 fed4 	bl	8007880 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x40);
 800dad8:	2240      	movs	r2, #64	; 0x40
 800dada:	2101      	movs	r1, #1
 800dadc:	4806      	ldr	r0, [pc, #24]	; (800daf8 <USBD_LL_Init+0xa0>)
 800dade:	f7f9 fecf 	bl	8007880 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 2, 0x40);
 800dae2:	2240      	movs	r2, #64	; 0x40
 800dae4:	2102      	movs	r1, #2
 800dae6:	4804      	ldr	r0, [pc, #16]	; (800daf8 <USBD_LL_Init+0xa0>)
 800dae8:	f7f9 feca 	bl	8007880 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800daec:	2300      	movs	r3, #0
}
 800daee:	4618      	mov	r0, r3
 800daf0:	3708      	adds	r7, #8
 800daf2:	46bd      	mov	sp, r7
 800daf4:	bd80      	pop	{r7, pc}
 800daf6:	bf00      	nop
 800daf8:	2000175c 	.word	0x2000175c

0800dafc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800dafc:	b580      	push	{r7, lr}
 800dafe:	b084      	sub	sp, #16
 800db00:	af00      	add	r7, sp, #0
 800db02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800db04:	2300      	movs	r3, #0
 800db06:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800db08:	2300      	movs	r3, #0
 800db0a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800db12:	4618      	mov	r0, r3
 800db14:	f7f8 fdd0 	bl	80066b8 <HAL_PCD_Start>
 800db18:	4603      	mov	r3, r0
 800db1a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800db1c:	7bfb      	ldrb	r3, [r7, #15]
 800db1e:	4618      	mov	r0, r3
 800db20:	f000 f930 	bl	800dd84 <USBD_Get_USB_Status>
 800db24:	4603      	mov	r3, r0
 800db26:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800db28:	7bbb      	ldrb	r3, [r7, #14]
}
 800db2a:	4618      	mov	r0, r3
 800db2c:	3710      	adds	r7, #16
 800db2e:	46bd      	mov	sp, r7
 800db30:	bd80      	pop	{r7, pc}

0800db32 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800db32:	b580      	push	{r7, lr}
 800db34:	b084      	sub	sp, #16
 800db36:	af00      	add	r7, sp, #0
 800db38:	6078      	str	r0, [r7, #4]
 800db3a:	4608      	mov	r0, r1
 800db3c:	4611      	mov	r1, r2
 800db3e:	461a      	mov	r2, r3
 800db40:	4603      	mov	r3, r0
 800db42:	70fb      	strb	r3, [r7, #3]
 800db44:	460b      	mov	r3, r1
 800db46:	70bb      	strb	r3, [r7, #2]
 800db48:	4613      	mov	r3, r2
 800db4a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800db4c:	2300      	movs	r3, #0
 800db4e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800db50:	2300      	movs	r3, #0
 800db52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800db5a:	78bb      	ldrb	r3, [r7, #2]
 800db5c:	883a      	ldrh	r2, [r7, #0]
 800db5e:	78f9      	ldrb	r1, [r7, #3]
 800db60:	f7f9 faa1 	bl	80070a6 <HAL_PCD_EP_Open>
 800db64:	4603      	mov	r3, r0
 800db66:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800db68:	7bfb      	ldrb	r3, [r7, #15]
 800db6a:	4618      	mov	r0, r3
 800db6c:	f000 f90a 	bl	800dd84 <USBD_Get_USB_Status>
 800db70:	4603      	mov	r3, r0
 800db72:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800db74:	7bbb      	ldrb	r3, [r7, #14]
}
 800db76:	4618      	mov	r0, r3
 800db78:	3710      	adds	r7, #16
 800db7a:	46bd      	mov	sp, r7
 800db7c:	bd80      	pop	{r7, pc}

0800db7e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800db7e:	b580      	push	{r7, lr}
 800db80:	b084      	sub	sp, #16
 800db82:	af00      	add	r7, sp, #0
 800db84:	6078      	str	r0, [r7, #4]
 800db86:	460b      	mov	r3, r1
 800db88:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800db8a:	2300      	movs	r3, #0
 800db8c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800db8e:	2300      	movs	r3, #0
 800db90:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800db98:	78fa      	ldrb	r2, [r7, #3]
 800db9a:	4611      	mov	r1, r2
 800db9c:	4618      	mov	r0, r3
 800db9e:	f7f9 faea 	bl	8007176 <HAL_PCD_EP_Close>
 800dba2:	4603      	mov	r3, r0
 800dba4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dba6:	7bfb      	ldrb	r3, [r7, #15]
 800dba8:	4618      	mov	r0, r3
 800dbaa:	f000 f8eb 	bl	800dd84 <USBD_Get_USB_Status>
 800dbae:	4603      	mov	r3, r0
 800dbb0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dbb2:	7bbb      	ldrb	r3, [r7, #14]
}
 800dbb4:	4618      	mov	r0, r3
 800dbb6:	3710      	adds	r7, #16
 800dbb8:	46bd      	mov	sp, r7
 800dbba:	bd80      	pop	{r7, pc}

0800dbbc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dbbc:	b580      	push	{r7, lr}
 800dbbe:	b084      	sub	sp, #16
 800dbc0:	af00      	add	r7, sp, #0
 800dbc2:	6078      	str	r0, [r7, #4]
 800dbc4:	460b      	mov	r3, r1
 800dbc6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dbc8:	2300      	movs	r3, #0
 800dbca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dbcc:	2300      	movs	r3, #0
 800dbce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800dbd6:	78fa      	ldrb	r2, [r7, #3]
 800dbd8:	4611      	mov	r1, r2
 800dbda:	4618      	mov	r0, r3
 800dbdc:	f7f9 fbaa 	bl	8007334 <HAL_PCD_EP_SetStall>
 800dbe0:	4603      	mov	r3, r0
 800dbe2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dbe4:	7bfb      	ldrb	r3, [r7, #15]
 800dbe6:	4618      	mov	r0, r3
 800dbe8:	f000 f8cc 	bl	800dd84 <USBD_Get_USB_Status>
 800dbec:	4603      	mov	r3, r0
 800dbee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dbf0:	7bbb      	ldrb	r3, [r7, #14]
}
 800dbf2:	4618      	mov	r0, r3
 800dbf4:	3710      	adds	r7, #16
 800dbf6:	46bd      	mov	sp, r7
 800dbf8:	bd80      	pop	{r7, pc}

0800dbfa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dbfa:	b580      	push	{r7, lr}
 800dbfc:	b084      	sub	sp, #16
 800dbfe:	af00      	add	r7, sp, #0
 800dc00:	6078      	str	r0, [r7, #4]
 800dc02:	460b      	mov	r3, r1
 800dc04:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dc06:	2300      	movs	r3, #0
 800dc08:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dc0a:	2300      	movs	r3, #0
 800dc0c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800dc14:	78fa      	ldrb	r2, [r7, #3]
 800dc16:	4611      	mov	r1, r2
 800dc18:	4618      	mov	r0, r3
 800dc1a:	f7f9 fbef 	bl	80073fc <HAL_PCD_EP_ClrStall>
 800dc1e:	4603      	mov	r3, r0
 800dc20:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dc22:	7bfb      	ldrb	r3, [r7, #15]
 800dc24:	4618      	mov	r0, r3
 800dc26:	f000 f8ad 	bl	800dd84 <USBD_Get_USB_Status>
 800dc2a:	4603      	mov	r3, r0
 800dc2c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dc2e:	7bbb      	ldrb	r3, [r7, #14]
}
 800dc30:	4618      	mov	r0, r3
 800dc32:	3710      	adds	r7, #16
 800dc34:	46bd      	mov	sp, r7
 800dc36:	bd80      	pop	{r7, pc}

0800dc38 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dc38:	b480      	push	{r7}
 800dc3a:	b085      	sub	sp, #20
 800dc3c:	af00      	add	r7, sp, #0
 800dc3e:	6078      	str	r0, [r7, #4]
 800dc40:	460b      	mov	r3, r1
 800dc42:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800dc4a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800dc4c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	da0b      	bge.n	800dc6c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800dc54:	78fb      	ldrb	r3, [r7, #3]
 800dc56:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800dc5a:	68f9      	ldr	r1, [r7, #12]
 800dc5c:	4613      	mov	r3, r2
 800dc5e:	00db      	lsls	r3, r3, #3
 800dc60:	4413      	add	r3, r2
 800dc62:	009b      	lsls	r3, r3, #2
 800dc64:	440b      	add	r3, r1
 800dc66:	333e      	adds	r3, #62	; 0x3e
 800dc68:	781b      	ldrb	r3, [r3, #0]
 800dc6a:	e00b      	b.n	800dc84 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800dc6c:	78fb      	ldrb	r3, [r7, #3]
 800dc6e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800dc72:	68f9      	ldr	r1, [r7, #12]
 800dc74:	4613      	mov	r3, r2
 800dc76:	00db      	lsls	r3, r3, #3
 800dc78:	4413      	add	r3, r2
 800dc7a:	009b      	lsls	r3, r3, #2
 800dc7c:	440b      	add	r3, r1
 800dc7e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800dc82:	781b      	ldrb	r3, [r3, #0]
  }
}
 800dc84:	4618      	mov	r0, r3
 800dc86:	3714      	adds	r7, #20
 800dc88:	46bd      	mov	sp, r7
 800dc8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc8e:	4770      	bx	lr

0800dc90 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800dc90:	b580      	push	{r7, lr}
 800dc92:	b084      	sub	sp, #16
 800dc94:	af00      	add	r7, sp, #0
 800dc96:	6078      	str	r0, [r7, #4]
 800dc98:	460b      	mov	r3, r1
 800dc9a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dc9c:	2300      	movs	r3, #0
 800dc9e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dca0:	2300      	movs	r3, #0
 800dca2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800dcaa:	78fa      	ldrb	r2, [r7, #3]
 800dcac:	4611      	mov	r1, r2
 800dcae:	4618      	mov	r0, r3
 800dcb0:	f7f9 f9d4 	bl	800705c <HAL_PCD_SetAddress>
 800dcb4:	4603      	mov	r3, r0
 800dcb6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dcb8:	7bfb      	ldrb	r3, [r7, #15]
 800dcba:	4618      	mov	r0, r3
 800dcbc:	f000 f862 	bl	800dd84 <USBD_Get_USB_Status>
 800dcc0:	4603      	mov	r3, r0
 800dcc2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dcc4:	7bbb      	ldrb	r3, [r7, #14]
}
 800dcc6:	4618      	mov	r0, r3
 800dcc8:	3710      	adds	r7, #16
 800dcca:	46bd      	mov	sp, r7
 800dccc:	bd80      	pop	{r7, pc}

0800dcce <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800dcce:	b580      	push	{r7, lr}
 800dcd0:	b086      	sub	sp, #24
 800dcd2:	af00      	add	r7, sp, #0
 800dcd4:	60f8      	str	r0, [r7, #12]
 800dcd6:	607a      	str	r2, [r7, #4]
 800dcd8:	603b      	str	r3, [r7, #0]
 800dcda:	460b      	mov	r3, r1
 800dcdc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dcde:	2300      	movs	r3, #0
 800dce0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dce2:	2300      	movs	r3, #0
 800dce4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800dce6:	68fb      	ldr	r3, [r7, #12]
 800dce8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800dcec:	7af9      	ldrb	r1, [r7, #11]
 800dcee:	683b      	ldr	r3, [r7, #0]
 800dcf0:	687a      	ldr	r2, [r7, #4]
 800dcf2:	f7f9 fad5 	bl	80072a0 <HAL_PCD_EP_Transmit>
 800dcf6:	4603      	mov	r3, r0
 800dcf8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dcfa:	7dfb      	ldrb	r3, [r7, #23]
 800dcfc:	4618      	mov	r0, r3
 800dcfe:	f000 f841 	bl	800dd84 <USBD_Get_USB_Status>
 800dd02:	4603      	mov	r3, r0
 800dd04:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800dd06:	7dbb      	ldrb	r3, [r7, #22]
}
 800dd08:	4618      	mov	r0, r3
 800dd0a:	3718      	adds	r7, #24
 800dd0c:	46bd      	mov	sp, r7
 800dd0e:	bd80      	pop	{r7, pc}

0800dd10 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800dd10:	b580      	push	{r7, lr}
 800dd12:	b086      	sub	sp, #24
 800dd14:	af00      	add	r7, sp, #0
 800dd16:	60f8      	str	r0, [r7, #12]
 800dd18:	607a      	str	r2, [r7, #4]
 800dd1a:	603b      	str	r3, [r7, #0]
 800dd1c:	460b      	mov	r3, r1
 800dd1e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dd20:	2300      	movs	r3, #0
 800dd22:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dd24:	2300      	movs	r3, #0
 800dd26:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800dd2e:	7af9      	ldrb	r1, [r7, #11]
 800dd30:	683b      	ldr	r3, [r7, #0]
 800dd32:	687a      	ldr	r2, [r7, #4]
 800dd34:	f7f9 fa69 	bl	800720a <HAL_PCD_EP_Receive>
 800dd38:	4603      	mov	r3, r0
 800dd3a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dd3c:	7dfb      	ldrb	r3, [r7, #23]
 800dd3e:	4618      	mov	r0, r3
 800dd40:	f000 f820 	bl	800dd84 <USBD_Get_USB_Status>
 800dd44:	4603      	mov	r3, r0
 800dd46:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800dd48:	7dbb      	ldrb	r3, [r7, #22]
}
 800dd4a:	4618      	mov	r0, r3
 800dd4c:	3718      	adds	r7, #24
 800dd4e:	46bd      	mov	sp, r7
 800dd50:	bd80      	pop	{r7, pc}
	...

0800dd54 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800dd54:	b480      	push	{r7}
 800dd56:	b083      	sub	sp, #12
 800dd58:	af00      	add	r7, sp, #0
 800dd5a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 800dd5c:	4b03      	ldr	r3, [pc, #12]	; (800dd6c <USBD_static_malloc+0x18>)
}
 800dd5e:	4618      	mov	r0, r3
 800dd60:	370c      	adds	r7, #12
 800dd62:	46bd      	mov	sp, r7
 800dd64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd68:	4770      	bx	lr
 800dd6a:	bf00      	nop
 800dd6c:	20001c68 	.word	0x20001c68

0800dd70 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800dd70:	b480      	push	{r7}
 800dd72:	b083      	sub	sp, #12
 800dd74:	af00      	add	r7, sp, #0
 800dd76:	6078      	str	r0, [r7, #4]

}
 800dd78:	bf00      	nop
 800dd7a:	370c      	adds	r7, #12
 800dd7c:	46bd      	mov	sp, r7
 800dd7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd82:	4770      	bx	lr

0800dd84 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800dd84:	b480      	push	{r7}
 800dd86:	b085      	sub	sp, #20
 800dd88:	af00      	add	r7, sp, #0
 800dd8a:	4603      	mov	r3, r0
 800dd8c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dd8e:	2300      	movs	r3, #0
 800dd90:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800dd92:	79fb      	ldrb	r3, [r7, #7]
 800dd94:	2b03      	cmp	r3, #3
 800dd96:	d817      	bhi.n	800ddc8 <USBD_Get_USB_Status+0x44>
 800dd98:	a201      	add	r2, pc, #4	; (adr r2, 800dda0 <USBD_Get_USB_Status+0x1c>)
 800dd9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd9e:	bf00      	nop
 800dda0:	0800ddb1 	.word	0x0800ddb1
 800dda4:	0800ddb7 	.word	0x0800ddb7
 800dda8:	0800ddbd 	.word	0x0800ddbd
 800ddac:	0800ddc3 	.word	0x0800ddc3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ddb0:	2300      	movs	r3, #0
 800ddb2:	73fb      	strb	r3, [r7, #15]
    break;
 800ddb4:	e00b      	b.n	800ddce <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ddb6:	2303      	movs	r3, #3
 800ddb8:	73fb      	strb	r3, [r7, #15]
    break;
 800ddba:	e008      	b.n	800ddce <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ddbc:	2301      	movs	r3, #1
 800ddbe:	73fb      	strb	r3, [r7, #15]
    break;
 800ddc0:	e005      	b.n	800ddce <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ddc2:	2303      	movs	r3, #3
 800ddc4:	73fb      	strb	r3, [r7, #15]
    break;
 800ddc6:	e002      	b.n	800ddce <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ddc8:	2303      	movs	r3, #3
 800ddca:	73fb      	strb	r3, [r7, #15]
    break;
 800ddcc:	bf00      	nop
  }
  return usb_status;
 800ddce:	7bfb      	ldrb	r3, [r7, #15]
}
 800ddd0:	4618      	mov	r0, r3
 800ddd2:	3714      	adds	r7, #20
 800ddd4:	46bd      	mov	sp, r7
 800ddd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddda:	4770      	bx	lr

0800dddc <__errno>:
 800dddc:	4b01      	ldr	r3, [pc, #4]	; (800dde4 <__errno+0x8>)
 800ddde:	6818      	ldr	r0, [r3, #0]
 800dde0:	4770      	bx	lr
 800dde2:	bf00      	nop
 800dde4:	20000324 	.word	0x20000324

0800dde8 <__libc_init_array>:
 800dde8:	b570      	push	{r4, r5, r6, lr}
 800ddea:	4d0d      	ldr	r5, [pc, #52]	; (800de20 <__libc_init_array+0x38>)
 800ddec:	4c0d      	ldr	r4, [pc, #52]	; (800de24 <__libc_init_array+0x3c>)
 800ddee:	1b64      	subs	r4, r4, r5
 800ddf0:	10a4      	asrs	r4, r4, #2
 800ddf2:	2600      	movs	r6, #0
 800ddf4:	42a6      	cmp	r6, r4
 800ddf6:	d109      	bne.n	800de0c <__libc_init_array+0x24>
 800ddf8:	4d0b      	ldr	r5, [pc, #44]	; (800de28 <__libc_init_array+0x40>)
 800ddfa:	4c0c      	ldr	r4, [pc, #48]	; (800de2c <__libc_init_array+0x44>)
 800ddfc:	f001 f816 	bl	800ee2c <_init>
 800de00:	1b64      	subs	r4, r4, r5
 800de02:	10a4      	asrs	r4, r4, #2
 800de04:	2600      	movs	r6, #0
 800de06:	42a6      	cmp	r6, r4
 800de08:	d105      	bne.n	800de16 <__libc_init_array+0x2e>
 800de0a:	bd70      	pop	{r4, r5, r6, pc}
 800de0c:	f855 3b04 	ldr.w	r3, [r5], #4
 800de10:	4798      	blx	r3
 800de12:	3601      	adds	r6, #1
 800de14:	e7ee      	b.n	800ddf4 <__libc_init_array+0xc>
 800de16:	f855 3b04 	ldr.w	r3, [r5], #4
 800de1a:	4798      	blx	r3
 800de1c:	3601      	adds	r6, #1
 800de1e:	e7f2      	b.n	800de06 <__libc_init_array+0x1e>
 800de20:	08031040 	.word	0x08031040
 800de24:	08031040 	.word	0x08031040
 800de28:	08031040 	.word	0x08031040
 800de2c:	08031044 	.word	0x08031044

0800de30 <memset>:
 800de30:	4402      	add	r2, r0
 800de32:	4603      	mov	r3, r0
 800de34:	4293      	cmp	r3, r2
 800de36:	d100      	bne.n	800de3a <memset+0xa>
 800de38:	4770      	bx	lr
 800de3a:	f803 1b01 	strb.w	r1, [r3], #1
 800de3e:	e7f9      	b.n	800de34 <memset+0x4>

0800de40 <__sfputc_r>:
 800de40:	6893      	ldr	r3, [r2, #8]
 800de42:	3b01      	subs	r3, #1
 800de44:	2b00      	cmp	r3, #0
 800de46:	b410      	push	{r4}
 800de48:	6093      	str	r3, [r2, #8]
 800de4a:	da08      	bge.n	800de5e <__sfputc_r+0x1e>
 800de4c:	6994      	ldr	r4, [r2, #24]
 800de4e:	42a3      	cmp	r3, r4
 800de50:	db01      	blt.n	800de56 <__sfputc_r+0x16>
 800de52:	290a      	cmp	r1, #10
 800de54:	d103      	bne.n	800de5e <__sfputc_r+0x1e>
 800de56:	f85d 4b04 	ldr.w	r4, [sp], #4
 800de5a:	f000 bb17 	b.w	800e48c <__swbuf_r>
 800de5e:	6813      	ldr	r3, [r2, #0]
 800de60:	1c58      	adds	r0, r3, #1
 800de62:	6010      	str	r0, [r2, #0]
 800de64:	7019      	strb	r1, [r3, #0]
 800de66:	4608      	mov	r0, r1
 800de68:	f85d 4b04 	ldr.w	r4, [sp], #4
 800de6c:	4770      	bx	lr

0800de6e <__sfputs_r>:
 800de6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de70:	4606      	mov	r6, r0
 800de72:	460f      	mov	r7, r1
 800de74:	4614      	mov	r4, r2
 800de76:	18d5      	adds	r5, r2, r3
 800de78:	42ac      	cmp	r4, r5
 800de7a:	d101      	bne.n	800de80 <__sfputs_r+0x12>
 800de7c:	2000      	movs	r0, #0
 800de7e:	e007      	b.n	800de90 <__sfputs_r+0x22>
 800de80:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de84:	463a      	mov	r2, r7
 800de86:	4630      	mov	r0, r6
 800de88:	f7ff ffda 	bl	800de40 <__sfputc_r>
 800de8c:	1c43      	adds	r3, r0, #1
 800de8e:	d1f3      	bne.n	800de78 <__sfputs_r+0xa>
 800de90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800de94 <_vfiprintf_r>:
 800de94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de98:	460d      	mov	r5, r1
 800de9a:	b09d      	sub	sp, #116	; 0x74
 800de9c:	4614      	mov	r4, r2
 800de9e:	4698      	mov	r8, r3
 800dea0:	4606      	mov	r6, r0
 800dea2:	b118      	cbz	r0, 800deac <_vfiprintf_r+0x18>
 800dea4:	6983      	ldr	r3, [r0, #24]
 800dea6:	b90b      	cbnz	r3, 800deac <_vfiprintf_r+0x18>
 800dea8:	f000 fcca 	bl	800e840 <__sinit>
 800deac:	4b89      	ldr	r3, [pc, #548]	; (800e0d4 <_vfiprintf_r+0x240>)
 800deae:	429d      	cmp	r5, r3
 800deb0:	d11b      	bne.n	800deea <_vfiprintf_r+0x56>
 800deb2:	6875      	ldr	r5, [r6, #4]
 800deb4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800deb6:	07d9      	lsls	r1, r3, #31
 800deb8:	d405      	bmi.n	800dec6 <_vfiprintf_r+0x32>
 800deba:	89ab      	ldrh	r3, [r5, #12]
 800debc:	059a      	lsls	r2, r3, #22
 800debe:	d402      	bmi.n	800dec6 <_vfiprintf_r+0x32>
 800dec0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dec2:	f000 fd5b 	bl	800e97c <__retarget_lock_acquire_recursive>
 800dec6:	89ab      	ldrh	r3, [r5, #12]
 800dec8:	071b      	lsls	r3, r3, #28
 800deca:	d501      	bpl.n	800ded0 <_vfiprintf_r+0x3c>
 800decc:	692b      	ldr	r3, [r5, #16]
 800dece:	b9eb      	cbnz	r3, 800df0c <_vfiprintf_r+0x78>
 800ded0:	4629      	mov	r1, r5
 800ded2:	4630      	mov	r0, r6
 800ded4:	f000 fb2c 	bl	800e530 <__swsetup_r>
 800ded8:	b1c0      	cbz	r0, 800df0c <_vfiprintf_r+0x78>
 800deda:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dedc:	07dc      	lsls	r4, r3, #31
 800dede:	d50e      	bpl.n	800defe <_vfiprintf_r+0x6a>
 800dee0:	f04f 30ff 	mov.w	r0, #4294967295
 800dee4:	b01d      	add	sp, #116	; 0x74
 800dee6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800deea:	4b7b      	ldr	r3, [pc, #492]	; (800e0d8 <_vfiprintf_r+0x244>)
 800deec:	429d      	cmp	r5, r3
 800deee:	d101      	bne.n	800def4 <_vfiprintf_r+0x60>
 800def0:	68b5      	ldr	r5, [r6, #8]
 800def2:	e7df      	b.n	800deb4 <_vfiprintf_r+0x20>
 800def4:	4b79      	ldr	r3, [pc, #484]	; (800e0dc <_vfiprintf_r+0x248>)
 800def6:	429d      	cmp	r5, r3
 800def8:	bf08      	it	eq
 800defa:	68f5      	ldreq	r5, [r6, #12]
 800defc:	e7da      	b.n	800deb4 <_vfiprintf_r+0x20>
 800defe:	89ab      	ldrh	r3, [r5, #12]
 800df00:	0598      	lsls	r0, r3, #22
 800df02:	d4ed      	bmi.n	800dee0 <_vfiprintf_r+0x4c>
 800df04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800df06:	f000 fd3a 	bl	800e97e <__retarget_lock_release_recursive>
 800df0a:	e7e9      	b.n	800dee0 <_vfiprintf_r+0x4c>
 800df0c:	2300      	movs	r3, #0
 800df0e:	9309      	str	r3, [sp, #36]	; 0x24
 800df10:	2320      	movs	r3, #32
 800df12:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800df16:	f8cd 800c 	str.w	r8, [sp, #12]
 800df1a:	2330      	movs	r3, #48	; 0x30
 800df1c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e0e0 <_vfiprintf_r+0x24c>
 800df20:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800df24:	f04f 0901 	mov.w	r9, #1
 800df28:	4623      	mov	r3, r4
 800df2a:	469a      	mov	sl, r3
 800df2c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800df30:	b10a      	cbz	r2, 800df36 <_vfiprintf_r+0xa2>
 800df32:	2a25      	cmp	r2, #37	; 0x25
 800df34:	d1f9      	bne.n	800df2a <_vfiprintf_r+0x96>
 800df36:	ebba 0b04 	subs.w	fp, sl, r4
 800df3a:	d00b      	beq.n	800df54 <_vfiprintf_r+0xc0>
 800df3c:	465b      	mov	r3, fp
 800df3e:	4622      	mov	r2, r4
 800df40:	4629      	mov	r1, r5
 800df42:	4630      	mov	r0, r6
 800df44:	f7ff ff93 	bl	800de6e <__sfputs_r>
 800df48:	3001      	adds	r0, #1
 800df4a:	f000 80aa 	beq.w	800e0a2 <_vfiprintf_r+0x20e>
 800df4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800df50:	445a      	add	r2, fp
 800df52:	9209      	str	r2, [sp, #36]	; 0x24
 800df54:	f89a 3000 	ldrb.w	r3, [sl]
 800df58:	2b00      	cmp	r3, #0
 800df5a:	f000 80a2 	beq.w	800e0a2 <_vfiprintf_r+0x20e>
 800df5e:	2300      	movs	r3, #0
 800df60:	f04f 32ff 	mov.w	r2, #4294967295
 800df64:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800df68:	f10a 0a01 	add.w	sl, sl, #1
 800df6c:	9304      	str	r3, [sp, #16]
 800df6e:	9307      	str	r3, [sp, #28]
 800df70:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800df74:	931a      	str	r3, [sp, #104]	; 0x68
 800df76:	4654      	mov	r4, sl
 800df78:	2205      	movs	r2, #5
 800df7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df7e:	4858      	ldr	r0, [pc, #352]	; (800e0e0 <_vfiprintf_r+0x24c>)
 800df80:	f7f2 f92e 	bl	80001e0 <memchr>
 800df84:	9a04      	ldr	r2, [sp, #16]
 800df86:	b9d8      	cbnz	r0, 800dfc0 <_vfiprintf_r+0x12c>
 800df88:	06d1      	lsls	r1, r2, #27
 800df8a:	bf44      	itt	mi
 800df8c:	2320      	movmi	r3, #32
 800df8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800df92:	0713      	lsls	r3, r2, #28
 800df94:	bf44      	itt	mi
 800df96:	232b      	movmi	r3, #43	; 0x2b
 800df98:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800df9c:	f89a 3000 	ldrb.w	r3, [sl]
 800dfa0:	2b2a      	cmp	r3, #42	; 0x2a
 800dfa2:	d015      	beq.n	800dfd0 <_vfiprintf_r+0x13c>
 800dfa4:	9a07      	ldr	r2, [sp, #28]
 800dfa6:	4654      	mov	r4, sl
 800dfa8:	2000      	movs	r0, #0
 800dfaa:	f04f 0c0a 	mov.w	ip, #10
 800dfae:	4621      	mov	r1, r4
 800dfb0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dfb4:	3b30      	subs	r3, #48	; 0x30
 800dfb6:	2b09      	cmp	r3, #9
 800dfb8:	d94e      	bls.n	800e058 <_vfiprintf_r+0x1c4>
 800dfba:	b1b0      	cbz	r0, 800dfea <_vfiprintf_r+0x156>
 800dfbc:	9207      	str	r2, [sp, #28]
 800dfbe:	e014      	b.n	800dfea <_vfiprintf_r+0x156>
 800dfc0:	eba0 0308 	sub.w	r3, r0, r8
 800dfc4:	fa09 f303 	lsl.w	r3, r9, r3
 800dfc8:	4313      	orrs	r3, r2
 800dfca:	9304      	str	r3, [sp, #16]
 800dfcc:	46a2      	mov	sl, r4
 800dfce:	e7d2      	b.n	800df76 <_vfiprintf_r+0xe2>
 800dfd0:	9b03      	ldr	r3, [sp, #12]
 800dfd2:	1d19      	adds	r1, r3, #4
 800dfd4:	681b      	ldr	r3, [r3, #0]
 800dfd6:	9103      	str	r1, [sp, #12]
 800dfd8:	2b00      	cmp	r3, #0
 800dfda:	bfbb      	ittet	lt
 800dfdc:	425b      	neglt	r3, r3
 800dfde:	f042 0202 	orrlt.w	r2, r2, #2
 800dfe2:	9307      	strge	r3, [sp, #28]
 800dfe4:	9307      	strlt	r3, [sp, #28]
 800dfe6:	bfb8      	it	lt
 800dfe8:	9204      	strlt	r2, [sp, #16]
 800dfea:	7823      	ldrb	r3, [r4, #0]
 800dfec:	2b2e      	cmp	r3, #46	; 0x2e
 800dfee:	d10c      	bne.n	800e00a <_vfiprintf_r+0x176>
 800dff0:	7863      	ldrb	r3, [r4, #1]
 800dff2:	2b2a      	cmp	r3, #42	; 0x2a
 800dff4:	d135      	bne.n	800e062 <_vfiprintf_r+0x1ce>
 800dff6:	9b03      	ldr	r3, [sp, #12]
 800dff8:	1d1a      	adds	r2, r3, #4
 800dffa:	681b      	ldr	r3, [r3, #0]
 800dffc:	9203      	str	r2, [sp, #12]
 800dffe:	2b00      	cmp	r3, #0
 800e000:	bfb8      	it	lt
 800e002:	f04f 33ff 	movlt.w	r3, #4294967295
 800e006:	3402      	adds	r4, #2
 800e008:	9305      	str	r3, [sp, #20]
 800e00a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e0f0 <_vfiprintf_r+0x25c>
 800e00e:	7821      	ldrb	r1, [r4, #0]
 800e010:	2203      	movs	r2, #3
 800e012:	4650      	mov	r0, sl
 800e014:	f7f2 f8e4 	bl	80001e0 <memchr>
 800e018:	b140      	cbz	r0, 800e02c <_vfiprintf_r+0x198>
 800e01a:	2340      	movs	r3, #64	; 0x40
 800e01c:	eba0 000a 	sub.w	r0, r0, sl
 800e020:	fa03 f000 	lsl.w	r0, r3, r0
 800e024:	9b04      	ldr	r3, [sp, #16]
 800e026:	4303      	orrs	r3, r0
 800e028:	3401      	adds	r4, #1
 800e02a:	9304      	str	r3, [sp, #16]
 800e02c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e030:	482c      	ldr	r0, [pc, #176]	; (800e0e4 <_vfiprintf_r+0x250>)
 800e032:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e036:	2206      	movs	r2, #6
 800e038:	f7f2 f8d2 	bl	80001e0 <memchr>
 800e03c:	2800      	cmp	r0, #0
 800e03e:	d03f      	beq.n	800e0c0 <_vfiprintf_r+0x22c>
 800e040:	4b29      	ldr	r3, [pc, #164]	; (800e0e8 <_vfiprintf_r+0x254>)
 800e042:	bb1b      	cbnz	r3, 800e08c <_vfiprintf_r+0x1f8>
 800e044:	9b03      	ldr	r3, [sp, #12]
 800e046:	3307      	adds	r3, #7
 800e048:	f023 0307 	bic.w	r3, r3, #7
 800e04c:	3308      	adds	r3, #8
 800e04e:	9303      	str	r3, [sp, #12]
 800e050:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e052:	443b      	add	r3, r7
 800e054:	9309      	str	r3, [sp, #36]	; 0x24
 800e056:	e767      	b.n	800df28 <_vfiprintf_r+0x94>
 800e058:	fb0c 3202 	mla	r2, ip, r2, r3
 800e05c:	460c      	mov	r4, r1
 800e05e:	2001      	movs	r0, #1
 800e060:	e7a5      	b.n	800dfae <_vfiprintf_r+0x11a>
 800e062:	2300      	movs	r3, #0
 800e064:	3401      	adds	r4, #1
 800e066:	9305      	str	r3, [sp, #20]
 800e068:	4619      	mov	r1, r3
 800e06a:	f04f 0c0a 	mov.w	ip, #10
 800e06e:	4620      	mov	r0, r4
 800e070:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e074:	3a30      	subs	r2, #48	; 0x30
 800e076:	2a09      	cmp	r2, #9
 800e078:	d903      	bls.n	800e082 <_vfiprintf_r+0x1ee>
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d0c5      	beq.n	800e00a <_vfiprintf_r+0x176>
 800e07e:	9105      	str	r1, [sp, #20]
 800e080:	e7c3      	b.n	800e00a <_vfiprintf_r+0x176>
 800e082:	fb0c 2101 	mla	r1, ip, r1, r2
 800e086:	4604      	mov	r4, r0
 800e088:	2301      	movs	r3, #1
 800e08a:	e7f0      	b.n	800e06e <_vfiprintf_r+0x1da>
 800e08c:	ab03      	add	r3, sp, #12
 800e08e:	9300      	str	r3, [sp, #0]
 800e090:	462a      	mov	r2, r5
 800e092:	4b16      	ldr	r3, [pc, #88]	; (800e0ec <_vfiprintf_r+0x258>)
 800e094:	a904      	add	r1, sp, #16
 800e096:	4630      	mov	r0, r6
 800e098:	f3af 8000 	nop.w
 800e09c:	4607      	mov	r7, r0
 800e09e:	1c78      	adds	r0, r7, #1
 800e0a0:	d1d6      	bne.n	800e050 <_vfiprintf_r+0x1bc>
 800e0a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e0a4:	07d9      	lsls	r1, r3, #31
 800e0a6:	d405      	bmi.n	800e0b4 <_vfiprintf_r+0x220>
 800e0a8:	89ab      	ldrh	r3, [r5, #12]
 800e0aa:	059a      	lsls	r2, r3, #22
 800e0ac:	d402      	bmi.n	800e0b4 <_vfiprintf_r+0x220>
 800e0ae:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e0b0:	f000 fc65 	bl	800e97e <__retarget_lock_release_recursive>
 800e0b4:	89ab      	ldrh	r3, [r5, #12]
 800e0b6:	065b      	lsls	r3, r3, #25
 800e0b8:	f53f af12 	bmi.w	800dee0 <_vfiprintf_r+0x4c>
 800e0bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e0be:	e711      	b.n	800dee4 <_vfiprintf_r+0x50>
 800e0c0:	ab03      	add	r3, sp, #12
 800e0c2:	9300      	str	r3, [sp, #0]
 800e0c4:	462a      	mov	r2, r5
 800e0c6:	4b09      	ldr	r3, [pc, #36]	; (800e0ec <_vfiprintf_r+0x258>)
 800e0c8:	a904      	add	r1, sp, #16
 800e0ca:	4630      	mov	r0, r6
 800e0cc:	f000 f88a 	bl	800e1e4 <_printf_i>
 800e0d0:	e7e4      	b.n	800e09c <_vfiprintf_r+0x208>
 800e0d2:	bf00      	nop
 800e0d4:	08030ff8 	.word	0x08030ff8
 800e0d8:	08031018 	.word	0x08031018
 800e0dc:	08030fd8 	.word	0x08030fd8
 800e0e0:	08030fa4 	.word	0x08030fa4
 800e0e4:	08030fae 	.word	0x08030fae
 800e0e8:	00000000 	.word	0x00000000
 800e0ec:	0800de6f 	.word	0x0800de6f
 800e0f0:	08030faa 	.word	0x08030faa

0800e0f4 <vfiprintf>:
 800e0f4:	4613      	mov	r3, r2
 800e0f6:	460a      	mov	r2, r1
 800e0f8:	4601      	mov	r1, r0
 800e0fa:	4802      	ldr	r0, [pc, #8]	; (800e104 <vfiprintf+0x10>)
 800e0fc:	6800      	ldr	r0, [r0, #0]
 800e0fe:	f7ff bec9 	b.w	800de94 <_vfiprintf_r>
 800e102:	bf00      	nop
 800e104:	20000324 	.word	0x20000324

0800e108 <_printf_common>:
 800e108:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e10c:	4616      	mov	r6, r2
 800e10e:	4699      	mov	r9, r3
 800e110:	688a      	ldr	r2, [r1, #8]
 800e112:	690b      	ldr	r3, [r1, #16]
 800e114:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e118:	4293      	cmp	r3, r2
 800e11a:	bfb8      	it	lt
 800e11c:	4613      	movlt	r3, r2
 800e11e:	6033      	str	r3, [r6, #0]
 800e120:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e124:	4607      	mov	r7, r0
 800e126:	460c      	mov	r4, r1
 800e128:	b10a      	cbz	r2, 800e12e <_printf_common+0x26>
 800e12a:	3301      	adds	r3, #1
 800e12c:	6033      	str	r3, [r6, #0]
 800e12e:	6823      	ldr	r3, [r4, #0]
 800e130:	0699      	lsls	r1, r3, #26
 800e132:	bf42      	ittt	mi
 800e134:	6833      	ldrmi	r3, [r6, #0]
 800e136:	3302      	addmi	r3, #2
 800e138:	6033      	strmi	r3, [r6, #0]
 800e13a:	6825      	ldr	r5, [r4, #0]
 800e13c:	f015 0506 	ands.w	r5, r5, #6
 800e140:	d106      	bne.n	800e150 <_printf_common+0x48>
 800e142:	f104 0a19 	add.w	sl, r4, #25
 800e146:	68e3      	ldr	r3, [r4, #12]
 800e148:	6832      	ldr	r2, [r6, #0]
 800e14a:	1a9b      	subs	r3, r3, r2
 800e14c:	42ab      	cmp	r3, r5
 800e14e:	dc26      	bgt.n	800e19e <_printf_common+0x96>
 800e150:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e154:	1e13      	subs	r3, r2, #0
 800e156:	6822      	ldr	r2, [r4, #0]
 800e158:	bf18      	it	ne
 800e15a:	2301      	movne	r3, #1
 800e15c:	0692      	lsls	r2, r2, #26
 800e15e:	d42b      	bmi.n	800e1b8 <_printf_common+0xb0>
 800e160:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e164:	4649      	mov	r1, r9
 800e166:	4638      	mov	r0, r7
 800e168:	47c0      	blx	r8
 800e16a:	3001      	adds	r0, #1
 800e16c:	d01e      	beq.n	800e1ac <_printf_common+0xa4>
 800e16e:	6823      	ldr	r3, [r4, #0]
 800e170:	68e5      	ldr	r5, [r4, #12]
 800e172:	6832      	ldr	r2, [r6, #0]
 800e174:	f003 0306 	and.w	r3, r3, #6
 800e178:	2b04      	cmp	r3, #4
 800e17a:	bf08      	it	eq
 800e17c:	1aad      	subeq	r5, r5, r2
 800e17e:	68a3      	ldr	r3, [r4, #8]
 800e180:	6922      	ldr	r2, [r4, #16]
 800e182:	bf0c      	ite	eq
 800e184:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e188:	2500      	movne	r5, #0
 800e18a:	4293      	cmp	r3, r2
 800e18c:	bfc4      	itt	gt
 800e18e:	1a9b      	subgt	r3, r3, r2
 800e190:	18ed      	addgt	r5, r5, r3
 800e192:	2600      	movs	r6, #0
 800e194:	341a      	adds	r4, #26
 800e196:	42b5      	cmp	r5, r6
 800e198:	d11a      	bne.n	800e1d0 <_printf_common+0xc8>
 800e19a:	2000      	movs	r0, #0
 800e19c:	e008      	b.n	800e1b0 <_printf_common+0xa8>
 800e19e:	2301      	movs	r3, #1
 800e1a0:	4652      	mov	r2, sl
 800e1a2:	4649      	mov	r1, r9
 800e1a4:	4638      	mov	r0, r7
 800e1a6:	47c0      	blx	r8
 800e1a8:	3001      	adds	r0, #1
 800e1aa:	d103      	bne.n	800e1b4 <_printf_common+0xac>
 800e1ac:	f04f 30ff 	mov.w	r0, #4294967295
 800e1b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e1b4:	3501      	adds	r5, #1
 800e1b6:	e7c6      	b.n	800e146 <_printf_common+0x3e>
 800e1b8:	18e1      	adds	r1, r4, r3
 800e1ba:	1c5a      	adds	r2, r3, #1
 800e1bc:	2030      	movs	r0, #48	; 0x30
 800e1be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e1c2:	4422      	add	r2, r4
 800e1c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e1c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e1cc:	3302      	adds	r3, #2
 800e1ce:	e7c7      	b.n	800e160 <_printf_common+0x58>
 800e1d0:	2301      	movs	r3, #1
 800e1d2:	4622      	mov	r2, r4
 800e1d4:	4649      	mov	r1, r9
 800e1d6:	4638      	mov	r0, r7
 800e1d8:	47c0      	blx	r8
 800e1da:	3001      	adds	r0, #1
 800e1dc:	d0e6      	beq.n	800e1ac <_printf_common+0xa4>
 800e1de:	3601      	adds	r6, #1
 800e1e0:	e7d9      	b.n	800e196 <_printf_common+0x8e>
	...

0800e1e4 <_printf_i>:
 800e1e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e1e8:	7e0f      	ldrb	r7, [r1, #24]
 800e1ea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e1ec:	2f78      	cmp	r7, #120	; 0x78
 800e1ee:	4691      	mov	r9, r2
 800e1f0:	4680      	mov	r8, r0
 800e1f2:	460c      	mov	r4, r1
 800e1f4:	469a      	mov	sl, r3
 800e1f6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e1fa:	d807      	bhi.n	800e20c <_printf_i+0x28>
 800e1fc:	2f62      	cmp	r7, #98	; 0x62
 800e1fe:	d80a      	bhi.n	800e216 <_printf_i+0x32>
 800e200:	2f00      	cmp	r7, #0
 800e202:	f000 80d8 	beq.w	800e3b6 <_printf_i+0x1d2>
 800e206:	2f58      	cmp	r7, #88	; 0x58
 800e208:	f000 80a3 	beq.w	800e352 <_printf_i+0x16e>
 800e20c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e210:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e214:	e03a      	b.n	800e28c <_printf_i+0xa8>
 800e216:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e21a:	2b15      	cmp	r3, #21
 800e21c:	d8f6      	bhi.n	800e20c <_printf_i+0x28>
 800e21e:	a101      	add	r1, pc, #4	; (adr r1, 800e224 <_printf_i+0x40>)
 800e220:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e224:	0800e27d 	.word	0x0800e27d
 800e228:	0800e291 	.word	0x0800e291
 800e22c:	0800e20d 	.word	0x0800e20d
 800e230:	0800e20d 	.word	0x0800e20d
 800e234:	0800e20d 	.word	0x0800e20d
 800e238:	0800e20d 	.word	0x0800e20d
 800e23c:	0800e291 	.word	0x0800e291
 800e240:	0800e20d 	.word	0x0800e20d
 800e244:	0800e20d 	.word	0x0800e20d
 800e248:	0800e20d 	.word	0x0800e20d
 800e24c:	0800e20d 	.word	0x0800e20d
 800e250:	0800e39d 	.word	0x0800e39d
 800e254:	0800e2c1 	.word	0x0800e2c1
 800e258:	0800e37f 	.word	0x0800e37f
 800e25c:	0800e20d 	.word	0x0800e20d
 800e260:	0800e20d 	.word	0x0800e20d
 800e264:	0800e3bf 	.word	0x0800e3bf
 800e268:	0800e20d 	.word	0x0800e20d
 800e26c:	0800e2c1 	.word	0x0800e2c1
 800e270:	0800e20d 	.word	0x0800e20d
 800e274:	0800e20d 	.word	0x0800e20d
 800e278:	0800e387 	.word	0x0800e387
 800e27c:	682b      	ldr	r3, [r5, #0]
 800e27e:	1d1a      	adds	r2, r3, #4
 800e280:	681b      	ldr	r3, [r3, #0]
 800e282:	602a      	str	r2, [r5, #0]
 800e284:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e288:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e28c:	2301      	movs	r3, #1
 800e28e:	e0a3      	b.n	800e3d8 <_printf_i+0x1f4>
 800e290:	6820      	ldr	r0, [r4, #0]
 800e292:	6829      	ldr	r1, [r5, #0]
 800e294:	0606      	lsls	r6, r0, #24
 800e296:	f101 0304 	add.w	r3, r1, #4
 800e29a:	d50a      	bpl.n	800e2b2 <_printf_i+0xce>
 800e29c:	680e      	ldr	r6, [r1, #0]
 800e29e:	602b      	str	r3, [r5, #0]
 800e2a0:	2e00      	cmp	r6, #0
 800e2a2:	da03      	bge.n	800e2ac <_printf_i+0xc8>
 800e2a4:	232d      	movs	r3, #45	; 0x2d
 800e2a6:	4276      	negs	r6, r6
 800e2a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e2ac:	485e      	ldr	r0, [pc, #376]	; (800e428 <_printf_i+0x244>)
 800e2ae:	230a      	movs	r3, #10
 800e2b0:	e019      	b.n	800e2e6 <_printf_i+0x102>
 800e2b2:	680e      	ldr	r6, [r1, #0]
 800e2b4:	602b      	str	r3, [r5, #0]
 800e2b6:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e2ba:	bf18      	it	ne
 800e2bc:	b236      	sxthne	r6, r6
 800e2be:	e7ef      	b.n	800e2a0 <_printf_i+0xbc>
 800e2c0:	682b      	ldr	r3, [r5, #0]
 800e2c2:	6820      	ldr	r0, [r4, #0]
 800e2c4:	1d19      	adds	r1, r3, #4
 800e2c6:	6029      	str	r1, [r5, #0]
 800e2c8:	0601      	lsls	r1, r0, #24
 800e2ca:	d501      	bpl.n	800e2d0 <_printf_i+0xec>
 800e2cc:	681e      	ldr	r6, [r3, #0]
 800e2ce:	e002      	b.n	800e2d6 <_printf_i+0xf2>
 800e2d0:	0646      	lsls	r6, r0, #25
 800e2d2:	d5fb      	bpl.n	800e2cc <_printf_i+0xe8>
 800e2d4:	881e      	ldrh	r6, [r3, #0]
 800e2d6:	4854      	ldr	r0, [pc, #336]	; (800e428 <_printf_i+0x244>)
 800e2d8:	2f6f      	cmp	r7, #111	; 0x6f
 800e2da:	bf0c      	ite	eq
 800e2dc:	2308      	moveq	r3, #8
 800e2de:	230a      	movne	r3, #10
 800e2e0:	2100      	movs	r1, #0
 800e2e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e2e6:	6865      	ldr	r5, [r4, #4]
 800e2e8:	60a5      	str	r5, [r4, #8]
 800e2ea:	2d00      	cmp	r5, #0
 800e2ec:	bfa2      	ittt	ge
 800e2ee:	6821      	ldrge	r1, [r4, #0]
 800e2f0:	f021 0104 	bicge.w	r1, r1, #4
 800e2f4:	6021      	strge	r1, [r4, #0]
 800e2f6:	b90e      	cbnz	r6, 800e2fc <_printf_i+0x118>
 800e2f8:	2d00      	cmp	r5, #0
 800e2fa:	d04d      	beq.n	800e398 <_printf_i+0x1b4>
 800e2fc:	4615      	mov	r5, r2
 800e2fe:	fbb6 f1f3 	udiv	r1, r6, r3
 800e302:	fb03 6711 	mls	r7, r3, r1, r6
 800e306:	5dc7      	ldrb	r7, [r0, r7]
 800e308:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e30c:	4637      	mov	r7, r6
 800e30e:	42bb      	cmp	r3, r7
 800e310:	460e      	mov	r6, r1
 800e312:	d9f4      	bls.n	800e2fe <_printf_i+0x11a>
 800e314:	2b08      	cmp	r3, #8
 800e316:	d10b      	bne.n	800e330 <_printf_i+0x14c>
 800e318:	6823      	ldr	r3, [r4, #0]
 800e31a:	07de      	lsls	r6, r3, #31
 800e31c:	d508      	bpl.n	800e330 <_printf_i+0x14c>
 800e31e:	6923      	ldr	r3, [r4, #16]
 800e320:	6861      	ldr	r1, [r4, #4]
 800e322:	4299      	cmp	r1, r3
 800e324:	bfde      	ittt	le
 800e326:	2330      	movle	r3, #48	; 0x30
 800e328:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e32c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e330:	1b52      	subs	r2, r2, r5
 800e332:	6122      	str	r2, [r4, #16]
 800e334:	f8cd a000 	str.w	sl, [sp]
 800e338:	464b      	mov	r3, r9
 800e33a:	aa03      	add	r2, sp, #12
 800e33c:	4621      	mov	r1, r4
 800e33e:	4640      	mov	r0, r8
 800e340:	f7ff fee2 	bl	800e108 <_printf_common>
 800e344:	3001      	adds	r0, #1
 800e346:	d14c      	bne.n	800e3e2 <_printf_i+0x1fe>
 800e348:	f04f 30ff 	mov.w	r0, #4294967295
 800e34c:	b004      	add	sp, #16
 800e34e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e352:	4835      	ldr	r0, [pc, #212]	; (800e428 <_printf_i+0x244>)
 800e354:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800e358:	6829      	ldr	r1, [r5, #0]
 800e35a:	6823      	ldr	r3, [r4, #0]
 800e35c:	f851 6b04 	ldr.w	r6, [r1], #4
 800e360:	6029      	str	r1, [r5, #0]
 800e362:	061d      	lsls	r5, r3, #24
 800e364:	d514      	bpl.n	800e390 <_printf_i+0x1ac>
 800e366:	07df      	lsls	r7, r3, #31
 800e368:	bf44      	itt	mi
 800e36a:	f043 0320 	orrmi.w	r3, r3, #32
 800e36e:	6023      	strmi	r3, [r4, #0]
 800e370:	b91e      	cbnz	r6, 800e37a <_printf_i+0x196>
 800e372:	6823      	ldr	r3, [r4, #0]
 800e374:	f023 0320 	bic.w	r3, r3, #32
 800e378:	6023      	str	r3, [r4, #0]
 800e37a:	2310      	movs	r3, #16
 800e37c:	e7b0      	b.n	800e2e0 <_printf_i+0xfc>
 800e37e:	6823      	ldr	r3, [r4, #0]
 800e380:	f043 0320 	orr.w	r3, r3, #32
 800e384:	6023      	str	r3, [r4, #0]
 800e386:	2378      	movs	r3, #120	; 0x78
 800e388:	4828      	ldr	r0, [pc, #160]	; (800e42c <_printf_i+0x248>)
 800e38a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e38e:	e7e3      	b.n	800e358 <_printf_i+0x174>
 800e390:	0659      	lsls	r1, r3, #25
 800e392:	bf48      	it	mi
 800e394:	b2b6      	uxthmi	r6, r6
 800e396:	e7e6      	b.n	800e366 <_printf_i+0x182>
 800e398:	4615      	mov	r5, r2
 800e39a:	e7bb      	b.n	800e314 <_printf_i+0x130>
 800e39c:	682b      	ldr	r3, [r5, #0]
 800e39e:	6826      	ldr	r6, [r4, #0]
 800e3a0:	6961      	ldr	r1, [r4, #20]
 800e3a2:	1d18      	adds	r0, r3, #4
 800e3a4:	6028      	str	r0, [r5, #0]
 800e3a6:	0635      	lsls	r5, r6, #24
 800e3a8:	681b      	ldr	r3, [r3, #0]
 800e3aa:	d501      	bpl.n	800e3b0 <_printf_i+0x1cc>
 800e3ac:	6019      	str	r1, [r3, #0]
 800e3ae:	e002      	b.n	800e3b6 <_printf_i+0x1d2>
 800e3b0:	0670      	lsls	r0, r6, #25
 800e3b2:	d5fb      	bpl.n	800e3ac <_printf_i+0x1c8>
 800e3b4:	8019      	strh	r1, [r3, #0]
 800e3b6:	2300      	movs	r3, #0
 800e3b8:	6123      	str	r3, [r4, #16]
 800e3ba:	4615      	mov	r5, r2
 800e3bc:	e7ba      	b.n	800e334 <_printf_i+0x150>
 800e3be:	682b      	ldr	r3, [r5, #0]
 800e3c0:	1d1a      	adds	r2, r3, #4
 800e3c2:	602a      	str	r2, [r5, #0]
 800e3c4:	681d      	ldr	r5, [r3, #0]
 800e3c6:	6862      	ldr	r2, [r4, #4]
 800e3c8:	2100      	movs	r1, #0
 800e3ca:	4628      	mov	r0, r5
 800e3cc:	f7f1 ff08 	bl	80001e0 <memchr>
 800e3d0:	b108      	cbz	r0, 800e3d6 <_printf_i+0x1f2>
 800e3d2:	1b40      	subs	r0, r0, r5
 800e3d4:	6060      	str	r0, [r4, #4]
 800e3d6:	6863      	ldr	r3, [r4, #4]
 800e3d8:	6123      	str	r3, [r4, #16]
 800e3da:	2300      	movs	r3, #0
 800e3dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e3e0:	e7a8      	b.n	800e334 <_printf_i+0x150>
 800e3e2:	6923      	ldr	r3, [r4, #16]
 800e3e4:	462a      	mov	r2, r5
 800e3e6:	4649      	mov	r1, r9
 800e3e8:	4640      	mov	r0, r8
 800e3ea:	47d0      	blx	sl
 800e3ec:	3001      	adds	r0, #1
 800e3ee:	d0ab      	beq.n	800e348 <_printf_i+0x164>
 800e3f0:	6823      	ldr	r3, [r4, #0]
 800e3f2:	079b      	lsls	r3, r3, #30
 800e3f4:	d413      	bmi.n	800e41e <_printf_i+0x23a>
 800e3f6:	68e0      	ldr	r0, [r4, #12]
 800e3f8:	9b03      	ldr	r3, [sp, #12]
 800e3fa:	4298      	cmp	r0, r3
 800e3fc:	bfb8      	it	lt
 800e3fe:	4618      	movlt	r0, r3
 800e400:	e7a4      	b.n	800e34c <_printf_i+0x168>
 800e402:	2301      	movs	r3, #1
 800e404:	4632      	mov	r2, r6
 800e406:	4649      	mov	r1, r9
 800e408:	4640      	mov	r0, r8
 800e40a:	47d0      	blx	sl
 800e40c:	3001      	adds	r0, #1
 800e40e:	d09b      	beq.n	800e348 <_printf_i+0x164>
 800e410:	3501      	adds	r5, #1
 800e412:	68e3      	ldr	r3, [r4, #12]
 800e414:	9903      	ldr	r1, [sp, #12]
 800e416:	1a5b      	subs	r3, r3, r1
 800e418:	42ab      	cmp	r3, r5
 800e41a:	dcf2      	bgt.n	800e402 <_printf_i+0x21e>
 800e41c:	e7eb      	b.n	800e3f6 <_printf_i+0x212>
 800e41e:	2500      	movs	r5, #0
 800e420:	f104 0619 	add.w	r6, r4, #25
 800e424:	e7f5      	b.n	800e412 <_printf_i+0x22e>
 800e426:	bf00      	nop
 800e428:	08030fb5 	.word	0x08030fb5
 800e42c:	08030fc6 	.word	0x08030fc6

0800e430 <iprintf>:
 800e430:	b40f      	push	{r0, r1, r2, r3}
 800e432:	4b0a      	ldr	r3, [pc, #40]	; (800e45c <iprintf+0x2c>)
 800e434:	b513      	push	{r0, r1, r4, lr}
 800e436:	681c      	ldr	r4, [r3, #0]
 800e438:	b124      	cbz	r4, 800e444 <iprintf+0x14>
 800e43a:	69a3      	ldr	r3, [r4, #24]
 800e43c:	b913      	cbnz	r3, 800e444 <iprintf+0x14>
 800e43e:	4620      	mov	r0, r4
 800e440:	f000 f9fe 	bl	800e840 <__sinit>
 800e444:	ab05      	add	r3, sp, #20
 800e446:	9a04      	ldr	r2, [sp, #16]
 800e448:	68a1      	ldr	r1, [r4, #8]
 800e44a:	9301      	str	r3, [sp, #4]
 800e44c:	4620      	mov	r0, r4
 800e44e:	f7ff fd21 	bl	800de94 <_vfiprintf_r>
 800e452:	b002      	add	sp, #8
 800e454:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e458:	b004      	add	sp, #16
 800e45a:	4770      	bx	lr
 800e45c:	20000324 	.word	0x20000324

0800e460 <putchar>:
 800e460:	4b09      	ldr	r3, [pc, #36]	; (800e488 <putchar+0x28>)
 800e462:	b513      	push	{r0, r1, r4, lr}
 800e464:	681c      	ldr	r4, [r3, #0]
 800e466:	4601      	mov	r1, r0
 800e468:	b134      	cbz	r4, 800e478 <putchar+0x18>
 800e46a:	69a3      	ldr	r3, [r4, #24]
 800e46c:	b923      	cbnz	r3, 800e478 <putchar+0x18>
 800e46e:	9001      	str	r0, [sp, #4]
 800e470:	4620      	mov	r0, r4
 800e472:	f000 f9e5 	bl	800e840 <__sinit>
 800e476:	9901      	ldr	r1, [sp, #4]
 800e478:	68a2      	ldr	r2, [r4, #8]
 800e47a:	4620      	mov	r0, r4
 800e47c:	b002      	add	sp, #8
 800e47e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e482:	f000 bbc3 	b.w	800ec0c <_putc_r>
 800e486:	bf00      	nop
 800e488:	20000324 	.word	0x20000324

0800e48c <__swbuf_r>:
 800e48c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e48e:	460e      	mov	r6, r1
 800e490:	4614      	mov	r4, r2
 800e492:	4605      	mov	r5, r0
 800e494:	b118      	cbz	r0, 800e49e <__swbuf_r+0x12>
 800e496:	6983      	ldr	r3, [r0, #24]
 800e498:	b90b      	cbnz	r3, 800e49e <__swbuf_r+0x12>
 800e49a:	f000 f9d1 	bl	800e840 <__sinit>
 800e49e:	4b21      	ldr	r3, [pc, #132]	; (800e524 <__swbuf_r+0x98>)
 800e4a0:	429c      	cmp	r4, r3
 800e4a2:	d12b      	bne.n	800e4fc <__swbuf_r+0x70>
 800e4a4:	686c      	ldr	r4, [r5, #4]
 800e4a6:	69a3      	ldr	r3, [r4, #24]
 800e4a8:	60a3      	str	r3, [r4, #8]
 800e4aa:	89a3      	ldrh	r3, [r4, #12]
 800e4ac:	071a      	lsls	r2, r3, #28
 800e4ae:	d52f      	bpl.n	800e510 <__swbuf_r+0x84>
 800e4b0:	6923      	ldr	r3, [r4, #16]
 800e4b2:	b36b      	cbz	r3, 800e510 <__swbuf_r+0x84>
 800e4b4:	6923      	ldr	r3, [r4, #16]
 800e4b6:	6820      	ldr	r0, [r4, #0]
 800e4b8:	1ac0      	subs	r0, r0, r3
 800e4ba:	6963      	ldr	r3, [r4, #20]
 800e4bc:	b2f6      	uxtb	r6, r6
 800e4be:	4283      	cmp	r3, r0
 800e4c0:	4637      	mov	r7, r6
 800e4c2:	dc04      	bgt.n	800e4ce <__swbuf_r+0x42>
 800e4c4:	4621      	mov	r1, r4
 800e4c6:	4628      	mov	r0, r5
 800e4c8:	f000 f926 	bl	800e718 <_fflush_r>
 800e4cc:	bb30      	cbnz	r0, 800e51c <__swbuf_r+0x90>
 800e4ce:	68a3      	ldr	r3, [r4, #8]
 800e4d0:	3b01      	subs	r3, #1
 800e4d2:	60a3      	str	r3, [r4, #8]
 800e4d4:	6823      	ldr	r3, [r4, #0]
 800e4d6:	1c5a      	adds	r2, r3, #1
 800e4d8:	6022      	str	r2, [r4, #0]
 800e4da:	701e      	strb	r6, [r3, #0]
 800e4dc:	6963      	ldr	r3, [r4, #20]
 800e4de:	3001      	adds	r0, #1
 800e4e0:	4283      	cmp	r3, r0
 800e4e2:	d004      	beq.n	800e4ee <__swbuf_r+0x62>
 800e4e4:	89a3      	ldrh	r3, [r4, #12]
 800e4e6:	07db      	lsls	r3, r3, #31
 800e4e8:	d506      	bpl.n	800e4f8 <__swbuf_r+0x6c>
 800e4ea:	2e0a      	cmp	r6, #10
 800e4ec:	d104      	bne.n	800e4f8 <__swbuf_r+0x6c>
 800e4ee:	4621      	mov	r1, r4
 800e4f0:	4628      	mov	r0, r5
 800e4f2:	f000 f911 	bl	800e718 <_fflush_r>
 800e4f6:	b988      	cbnz	r0, 800e51c <__swbuf_r+0x90>
 800e4f8:	4638      	mov	r0, r7
 800e4fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e4fc:	4b0a      	ldr	r3, [pc, #40]	; (800e528 <__swbuf_r+0x9c>)
 800e4fe:	429c      	cmp	r4, r3
 800e500:	d101      	bne.n	800e506 <__swbuf_r+0x7a>
 800e502:	68ac      	ldr	r4, [r5, #8]
 800e504:	e7cf      	b.n	800e4a6 <__swbuf_r+0x1a>
 800e506:	4b09      	ldr	r3, [pc, #36]	; (800e52c <__swbuf_r+0xa0>)
 800e508:	429c      	cmp	r4, r3
 800e50a:	bf08      	it	eq
 800e50c:	68ec      	ldreq	r4, [r5, #12]
 800e50e:	e7ca      	b.n	800e4a6 <__swbuf_r+0x1a>
 800e510:	4621      	mov	r1, r4
 800e512:	4628      	mov	r0, r5
 800e514:	f000 f80c 	bl	800e530 <__swsetup_r>
 800e518:	2800      	cmp	r0, #0
 800e51a:	d0cb      	beq.n	800e4b4 <__swbuf_r+0x28>
 800e51c:	f04f 37ff 	mov.w	r7, #4294967295
 800e520:	e7ea      	b.n	800e4f8 <__swbuf_r+0x6c>
 800e522:	bf00      	nop
 800e524:	08030ff8 	.word	0x08030ff8
 800e528:	08031018 	.word	0x08031018
 800e52c:	08030fd8 	.word	0x08030fd8

0800e530 <__swsetup_r>:
 800e530:	4b32      	ldr	r3, [pc, #200]	; (800e5fc <__swsetup_r+0xcc>)
 800e532:	b570      	push	{r4, r5, r6, lr}
 800e534:	681d      	ldr	r5, [r3, #0]
 800e536:	4606      	mov	r6, r0
 800e538:	460c      	mov	r4, r1
 800e53a:	b125      	cbz	r5, 800e546 <__swsetup_r+0x16>
 800e53c:	69ab      	ldr	r3, [r5, #24]
 800e53e:	b913      	cbnz	r3, 800e546 <__swsetup_r+0x16>
 800e540:	4628      	mov	r0, r5
 800e542:	f000 f97d 	bl	800e840 <__sinit>
 800e546:	4b2e      	ldr	r3, [pc, #184]	; (800e600 <__swsetup_r+0xd0>)
 800e548:	429c      	cmp	r4, r3
 800e54a:	d10f      	bne.n	800e56c <__swsetup_r+0x3c>
 800e54c:	686c      	ldr	r4, [r5, #4]
 800e54e:	89a3      	ldrh	r3, [r4, #12]
 800e550:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e554:	0719      	lsls	r1, r3, #28
 800e556:	d42c      	bmi.n	800e5b2 <__swsetup_r+0x82>
 800e558:	06dd      	lsls	r5, r3, #27
 800e55a:	d411      	bmi.n	800e580 <__swsetup_r+0x50>
 800e55c:	2309      	movs	r3, #9
 800e55e:	6033      	str	r3, [r6, #0]
 800e560:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e564:	81a3      	strh	r3, [r4, #12]
 800e566:	f04f 30ff 	mov.w	r0, #4294967295
 800e56a:	e03e      	b.n	800e5ea <__swsetup_r+0xba>
 800e56c:	4b25      	ldr	r3, [pc, #148]	; (800e604 <__swsetup_r+0xd4>)
 800e56e:	429c      	cmp	r4, r3
 800e570:	d101      	bne.n	800e576 <__swsetup_r+0x46>
 800e572:	68ac      	ldr	r4, [r5, #8]
 800e574:	e7eb      	b.n	800e54e <__swsetup_r+0x1e>
 800e576:	4b24      	ldr	r3, [pc, #144]	; (800e608 <__swsetup_r+0xd8>)
 800e578:	429c      	cmp	r4, r3
 800e57a:	bf08      	it	eq
 800e57c:	68ec      	ldreq	r4, [r5, #12]
 800e57e:	e7e6      	b.n	800e54e <__swsetup_r+0x1e>
 800e580:	0758      	lsls	r0, r3, #29
 800e582:	d512      	bpl.n	800e5aa <__swsetup_r+0x7a>
 800e584:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e586:	b141      	cbz	r1, 800e59a <__swsetup_r+0x6a>
 800e588:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e58c:	4299      	cmp	r1, r3
 800e58e:	d002      	beq.n	800e596 <__swsetup_r+0x66>
 800e590:	4630      	mov	r0, r6
 800e592:	f000 fa5b 	bl	800ea4c <_free_r>
 800e596:	2300      	movs	r3, #0
 800e598:	6363      	str	r3, [r4, #52]	; 0x34
 800e59a:	89a3      	ldrh	r3, [r4, #12]
 800e59c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e5a0:	81a3      	strh	r3, [r4, #12]
 800e5a2:	2300      	movs	r3, #0
 800e5a4:	6063      	str	r3, [r4, #4]
 800e5a6:	6923      	ldr	r3, [r4, #16]
 800e5a8:	6023      	str	r3, [r4, #0]
 800e5aa:	89a3      	ldrh	r3, [r4, #12]
 800e5ac:	f043 0308 	orr.w	r3, r3, #8
 800e5b0:	81a3      	strh	r3, [r4, #12]
 800e5b2:	6923      	ldr	r3, [r4, #16]
 800e5b4:	b94b      	cbnz	r3, 800e5ca <__swsetup_r+0x9a>
 800e5b6:	89a3      	ldrh	r3, [r4, #12]
 800e5b8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e5bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e5c0:	d003      	beq.n	800e5ca <__swsetup_r+0x9a>
 800e5c2:	4621      	mov	r1, r4
 800e5c4:	4630      	mov	r0, r6
 800e5c6:	f000 fa01 	bl	800e9cc <__smakebuf_r>
 800e5ca:	89a0      	ldrh	r0, [r4, #12]
 800e5cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e5d0:	f010 0301 	ands.w	r3, r0, #1
 800e5d4:	d00a      	beq.n	800e5ec <__swsetup_r+0xbc>
 800e5d6:	2300      	movs	r3, #0
 800e5d8:	60a3      	str	r3, [r4, #8]
 800e5da:	6963      	ldr	r3, [r4, #20]
 800e5dc:	425b      	negs	r3, r3
 800e5de:	61a3      	str	r3, [r4, #24]
 800e5e0:	6923      	ldr	r3, [r4, #16]
 800e5e2:	b943      	cbnz	r3, 800e5f6 <__swsetup_r+0xc6>
 800e5e4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e5e8:	d1ba      	bne.n	800e560 <__swsetup_r+0x30>
 800e5ea:	bd70      	pop	{r4, r5, r6, pc}
 800e5ec:	0781      	lsls	r1, r0, #30
 800e5ee:	bf58      	it	pl
 800e5f0:	6963      	ldrpl	r3, [r4, #20]
 800e5f2:	60a3      	str	r3, [r4, #8]
 800e5f4:	e7f4      	b.n	800e5e0 <__swsetup_r+0xb0>
 800e5f6:	2000      	movs	r0, #0
 800e5f8:	e7f7      	b.n	800e5ea <__swsetup_r+0xba>
 800e5fa:	bf00      	nop
 800e5fc:	20000324 	.word	0x20000324
 800e600:	08030ff8 	.word	0x08030ff8
 800e604:	08031018 	.word	0x08031018
 800e608:	08030fd8 	.word	0x08030fd8

0800e60c <__sflush_r>:
 800e60c:	898a      	ldrh	r2, [r1, #12]
 800e60e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e612:	4605      	mov	r5, r0
 800e614:	0710      	lsls	r0, r2, #28
 800e616:	460c      	mov	r4, r1
 800e618:	d458      	bmi.n	800e6cc <__sflush_r+0xc0>
 800e61a:	684b      	ldr	r3, [r1, #4]
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	dc05      	bgt.n	800e62c <__sflush_r+0x20>
 800e620:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e622:	2b00      	cmp	r3, #0
 800e624:	dc02      	bgt.n	800e62c <__sflush_r+0x20>
 800e626:	2000      	movs	r0, #0
 800e628:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e62c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e62e:	2e00      	cmp	r6, #0
 800e630:	d0f9      	beq.n	800e626 <__sflush_r+0x1a>
 800e632:	2300      	movs	r3, #0
 800e634:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e638:	682f      	ldr	r7, [r5, #0]
 800e63a:	602b      	str	r3, [r5, #0]
 800e63c:	d032      	beq.n	800e6a4 <__sflush_r+0x98>
 800e63e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e640:	89a3      	ldrh	r3, [r4, #12]
 800e642:	075a      	lsls	r2, r3, #29
 800e644:	d505      	bpl.n	800e652 <__sflush_r+0x46>
 800e646:	6863      	ldr	r3, [r4, #4]
 800e648:	1ac0      	subs	r0, r0, r3
 800e64a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e64c:	b10b      	cbz	r3, 800e652 <__sflush_r+0x46>
 800e64e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e650:	1ac0      	subs	r0, r0, r3
 800e652:	2300      	movs	r3, #0
 800e654:	4602      	mov	r2, r0
 800e656:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e658:	6a21      	ldr	r1, [r4, #32]
 800e65a:	4628      	mov	r0, r5
 800e65c:	47b0      	blx	r6
 800e65e:	1c43      	adds	r3, r0, #1
 800e660:	89a3      	ldrh	r3, [r4, #12]
 800e662:	d106      	bne.n	800e672 <__sflush_r+0x66>
 800e664:	6829      	ldr	r1, [r5, #0]
 800e666:	291d      	cmp	r1, #29
 800e668:	d82c      	bhi.n	800e6c4 <__sflush_r+0xb8>
 800e66a:	4a2a      	ldr	r2, [pc, #168]	; (800e714 <__sflush_r+0x108>)
 800e66c:	40ca      	lsrs	r2, r1
 800e66e:	07d6      	lsls	r6, r2, #31
 800e670:	d528      	bpl.n	800e6c4 <__sflush_r+0xb8>
 800e672:	2200      	movs	r2, #0
 800e674:	6062      	str	r2, [r4, #4]
 800e676:	04d9      	lsls	r1, r3, #19
 800e678:	6922      	ldr	r2, [r4, #16]
 800e67a:	6022      	str	r2, [r4, #0]
 800e67c:	d504      	bpl.n	800e688 <__sflush_r+0x7c>
 800e67e:	1c42      	adds	r2, r0, #1
 800e680:	d101      	bne.n	800e686 <__sflush_r+0x7a>
 800e682:	682b      	ldr	r3, [r5, #0]
 800e684:	b903      	cbnz	r3, 800e688 <__sflush_r+0x7c>
 800e686:	6560      	str	r0, [r4, #84]	; 0x54
 800e688:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e68a:	602f      	str	r7, [r5, #0]
 800e68c:	2900      	cmp	r1, #0
 800e68e:	d0ca      	beq.n	800e626 <__sflush_r+0x1a>
 800e690:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e694:	4299      	cmp	r1, r3
 800e696:	d002      	beq.n	800e69e <__sflush_r+0x92>
 800e698:	4628      	mov	r0, r5
 800e69a:	f000 f9d7 	bl	800ea4c <_free_r>
 800e69e:	2000      	movs	r0, #0
 800e6a0:	6360      	str	r0, [r4, #52]	; 0x34
 800e6a2:	e7c1      	b.n	800e628 <__sflush_r+0x1c>
 800e6a4:	6a21      	ldr	r1, [r4, #32]
 800e6a6:	2301      	movs	r3, #1
 800e6a8:	4628      	mov	r0, r5
 800e6aa:	47b0      	blx	r6
 800e6ac:	1c41      	adds	r1, r0, #1
 800e6ae:	d1c7      	bne.n	800e640 <__sflush_r+0x34>
 800e6b0:	682b      	ldr	r3, [r5, #0]
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	d0c4      	beq.n	800e640 <__sflush_r+0x34>
 800e6b6:	2b1d      	cmp	r3, #29
 800e6b8:	d001      	beq.n	800e6be <__sflush_r+0xb2>
 800e6ba:	2b16      	cmp	r3, #22
 800e6bc:	d101      	bne.n	800e6c2 <__sflush_r+0xb6>
 800e6be:	602f      	str	r7, [r5, #0]
 800e6c0:	e7b1      	b.n	800e626 <__sflush_r+0x1a>
 800e6c2:	89a3      	ldrh	r3, [r4, #12]
 800e6c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e6c8:	81a3      	strh	r3, [r4, #12]
 800e6ca:	e7ad      	b.n	800e628 <__sflush_r+0x1c>
 800e6cc:	690f      	ldr	r7, [r1, #16]
 800e6ce:	2f00      	cmp	r7, #0
 800e6d0:	d0a9      	beq.n	800e626 <__sflush_r+0x1a>
 800e6d2:	0793      	lsls	r3, r2, #30
 800e6d4:	680e      	ldr	r6, [r1, #0]
 800e6d6:	bf08      	it	eq
 800e6d8:	694b      	ldreq	r3, [r1, #20]
 800e6da:	600f      	str	r7, [r1, #0]
 800e6dc:	bf18      	it	ne
 800e6de:	2300      	movne	r3, #0
 800e6e0:	eba6 0807 	sub.w	r8, r6, r7
 800e6e4:	608b      	str	r3, [r1, #8]
 800e6e6:	f1b8 0f00 	cmp.w	r8, #0
 800e6ea:	dd9c      	ble.n	800e626 <__sflush_r+0x1a>
 800e6ec:	6a21      	ldr	r1, [r4, #32]
 800e6ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e6f0:	4643      	mov	r3, r8
 800e6f2:	463a      	mov	r2, r7
 800e6f4:	4628      	mov	r0, r5
 800e6f6:	47b0      	blx	r6
 800e6f8:	2800      	cmp	r0, #0
 800e6fa:	dc06      	bgt.n	800e70a <__sflush_r+0xfe>
 800e6fc:	89a3      	ldrh	r3, [r4, #12]
 800e6fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e702:	81a3      	strh	r3, [r4, #12]
 800e704:	f04f 30ff 	mov.w	r0, #4294967295
 800e708:	e78e      	b.n	800e628 <__sflush_r+0x1c>
 800e70a:	4407      	add	r7, r0
 800e70c:	eba8 0800 	sub.w	r8, r8, r0
 800e710:	e7e9      	b.n	800e6e6 <__sflush_r+0xda>
 800e712:	bf00      	nop
 800e714:	20400001 	.word	0x20400001

0800e718 <_fflush_r>:
 800e718:	b538      	push	{r3, r4, r5, lr}
 800e71a:	690b      	ldr	r3, [r1, #16]
 800e71c:	4605      	mov	r5, r0
 800e71e:	460c      	mov	r4, r1
 800e720:	b913      	cbnz	r3, 800e728 <_fflush_r+0x10>
 800e722:	2500      	movs	r5, #0
 800e724:	4628      	mov	r0, r5
 800e726:	bd38      	pop	{r3, r4, r5, pc}
 800e728:	b118      	cbz	r0, 800e732 <_fflush_r+0x1a>
 800e72a:	6983      	ldr	r3, [r0, #24]
 800e72c:	b90b      	cbnz	r3, 800e732 <_fflush_r+0x1a>
 800e72e:	f000 f887 	bl	800e840 <__sinit>
 800e732:	4b14      	ldr	r3, [pc, #80]	; (800e784 <_fflush_r+0x6c>)
 800e734:	429c      	cmp	r4, r3
 800e736:	d11b      	bne.n	800e770 <_fflush_r+0x58>
 800e738:	686c      	ldr	r4, [r5, #4]
 800e73a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e73e:	2b00      	cmp	r3, #0
 800e740:	d0ef      	beq.n	800e722 <_fflush_r+0xa>
 800e742:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e744:	07d0      	lsls	r0, r2, #31
 800e746:	d404      	bmi.n	800e752 <_fflush_r+0x3a>
 800e748:	0599      	lsls	r1, r3, #22
 800e74a:	d402      	bmi.n	800e752 <_fflush_r+0x3a>
 800e74c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e74e:	f000 f915 	bl	800e97c <__retarget_lock_acquire_recursive>
 800e752:	4628      	mov	r0, r5
 800e754:	4621      	mov	r1, r4
 800e756:	f7ff ff59 	bl	800e60c <__sflush_r>
 800e75a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e75c:	07da      	lsls	r2, r3, #31
 800e75e:	4605      	mov	r5, r0
 800e760:	d4e0      	bmi.n	800e724 <_fflush_r+0xc>
 800e762:	89a3      	ldrh	r3, [r4, #12]
 800e764:	059b      	lsls	r3, r3, #22
 800e766:	d4dd      	bmi.n	800e724 <_fflush_r+0xc>
 800e768:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e76a:	f000 f908 	bl	800e97e <__retarget_lock_release_recursive>
 800e76e:	e7d9      	b.n	800e724 <_fflush_r+0xc>
 800e770:	4b05      	ldr	r3, [pc, #20]	; (800e788 <_fflush_r+0x70>)
 800e772:	429c      	cmp	r4, r3
 800e774:	d101      	bne.n	800e77a <_fflush_r+0x62>
 800e776:	68ac      	ldr	r4, [r5, #8]
 800e778:	e7df      	b.n	800e73a <_fflush_r+0x22>
 800e77a:	4b04      	ldr	r3, [pc, #16]	; (800e78c <_fflush_r+0x74>)
 800e77c:	429c      	cmp	r4, r3
 800e77e:	bf08      	it	eq
 800e780:	68ec      	ldreq	r4, [r5, #12]
 800e782:	e7da      	b.n	800e73a <_fflush_r+0x22>
 800e784:	08030ff8 	.word	0x08030ff8
 800e788:	08031018 	.word	0x08031018
 800e78c:	08030fd8 	.word	0x08030fd8

0800e790 <std>:
 800e790:	2300      	movs	r3, #0
 800e792:	b510      	push	{r4, lr}
 800e794:	4604      	mov	r4, r0
 800e796:	e9c0 3300 	strd	r3, r3, [r0]
 800e79a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e79e:	6083      	str	r3, [r0, #8]
 800e7a0:	8181      	strh	r1, [r0, #12]
 800e7a2:	6643      	str	r3, [r0, #100]	; 0x64
 800e7a4:	81c2      	strh	r2, [r0, #14]
 800e7a6:	6183      	str	r3, [r0, #24]
 800e7a8:	4619      	mov	r1, r3
 800e7aa:	2208      	movs	r2, #8
 800e7ac:	305c      	adds	r0, #92	; 0x5c
 800e7ae:	f7ff fb3f 	bl	800de30 <memset>
 800e7b2:	4b05      	ldr	r3, [pc, #20]	; (800e7c8 <std+0x38>)
 800e7b4:	6263      	str	r3, [r4, #36]	; 0x24
 800e7b6:	4b05      	ldr	r3, [pc, #20]	; (800e7cc <std+0x3c>)
 800e7b8:	62a3      	str	r3, [r4, #40]	; 0x28
 800e7ba:	4b05      	ldr	r3, [pc, #20]	; (800e7d0 <std+0x40>)
 800e7bc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e7be:	4b05      	ldr	r3, [pc, #20]	; (800e7d4 <std+0x44>)
 800e7c0:	6224      	str	r4, [r4, #32]
 800e7c2:	6323      	str	r3, [r4, #48]	; 0x30
 800e7c4:	bd10      	pop	{r4, pc}
 800e7c6:	bf00      	nop
 800e7c8:	0800ecbd 	.word	0x0800ecbd
 800e7cc:	0800ecdf 	.word	0x0800ecdf
 800e7d0:	0800ed17 	.word	0x0800ed17
 800e7d4:	0800ed3b 	.word	0x0800ed3b

0800e7d8 <_cleanup_r>:
 800e7d8:	4901      	ldr	r1, [pc, #4]	; (800e7e0 <_cleanup_r+0x8>)
 800e7da:	f000 b8af 	b.w	800e93c <_fwalk_reent>
 800e7de:	bf00      	nop
 800e7e0:	0800e719 	.word	0x0800e719

0800e7e4 <__sfmoreglue>:
 800e7e4:	b570      	push	{r4, r5, r6, lr}
 800e7e6:	2268      	movs	r2, #104	; 0x68
 800e7e8:	1e4d      	subs	r5, r1, #1
 800e7ea:	4355      	muls	r5, r2
 800e7ec:	460e      	mov	r6, r1
 800e7ee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e7f2:	f000 f997 	bl	800eb24 <_malloc_r>
 800e7f6:	4604      	mov	r4, r0
 800e7f8:	b140      	cbz	r0, 800e80c <__sfmoreglue+0x28>
 800e7fa:	2100      	movs	r1, #0
 800e7fc:	e9c0 1600 	strd	r1, r6, [r0]
 800e800:	300c      	adds	r0, #12
 800e802:	60a0      	str	r0, [r4, #8]
 800e804:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e808:	f7ff fb12 	bl	800de30 <memset>
 800e80c:	4620      	mov	r0, r4
 800e80e:	bd70      	pop	{r4, r5, r6, pc}

0800e810 <__sfp_lock_acquire>:
 800e810:	4801      	ldr	r0, [pc, #4]	; (800e818 <__sfp_lock_acquire+0x8>)
 800e812:	f000 b8b3 	b.w	800e97c <__retarget_lock_acquire_recursive>
 800e816:	bf00      	nop
 800e818:	20001cc1 	.word	0x20001cc1

0800e81c <__sfp_lock_release>:
 800e81c:	4801      	ldr	r0, [pc, #4]	; (800e824 <__sfp_lock_release+0x8>)
 800e81e:	f000 b8ae 	b.w	800e97e <__retarget_lock_release_recursive>
 800e822:	bf00      	nop
 800e824:	20001cc1 	.word	0x20001cc1

0800e828 <__sinit_lock_acquire>:
 800e828:	4801      	ldr	r0, [pc, #4]	; (800e830 <__sinit_lock_acquire+0x8>)
 800e82a:	f000 b8a7 	b.w	800e97c <__retarget_lock_acquire_recursive>
 800e82e:	bf00      	nop
 800e830:	20001cc2 	.word	0x20001cc2

0800e834 <__sinit_lock_release>:
 800e834:	4801      	ldr	r0, [pc, #4]	; (800e83c <__sinit_lock_release+0x8>)
 800e836:	f000 b8a2 	b.w	800e97e <__retarget_lock_release_recursive>
 800e83a:	bf00      	nop
 800e83c:	20001cc2 	.word	0x20001cc2

0800e840 <__sinit>:
 800e840:	b510      	push	{r4, lr}
 800e842:	4604      	mov	r4, r0
 800e844:	f7ff fff0 	bl	800e828 <__sinit_lock_acquire>
 800e848:	69a3      	ldr	r3, [r4, #24]
 800e84a:	b11b      	cbz	r3, 800e854 <__sinit+0x14>
 800e84c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e850:	f7ff bff0 	b.w	800e834 <__sinit_lock_release>
 800e854:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e858:	6523      	str	r3, [r4, #80]	; 0x50
 800e85a:	4b13      	ldr	r3, [pc, #76]	; (800e8a8 <__sinit+0x68>)
 800e85c:	4a13      	ldr	r2, [pc, #76]	; (800e8ac <__sinit+0x6c>)
 800e85e:	681b      	ldr	r3, [r3, #0]
 800e860:	62a2      	str	r2, [r4, #40]	; 0x28
 800e862:	42a3      	cmp	r3, r4
 800e864:	bf04      	itt	eq
 800e866:	2301      	moveq	r3, #1
 800e868:	61a3      	streq	r3, [r4, #24]
 800e86a:	4620      	mov	r0, r4
 800e86c:	f000 f820 	bl	800e8b0 <__sfp>
 800e870:	6060      	str	r0, [r4, #4]
 800e872:	4620      	mov	r0, r4
 800e874:	f000 f81c 	bl	800e8b0 <__sfp>
 800e878:	60a0      	str	r0, [r4, #8]
 800e87a:	4620      	mov	r0, r4
 800e87c:	f000 f818 	bl	800e8b0 <__sfp>
 800e880:	2200      	movs	r2, #0
 800e882:	60e0      	str	r0, [r4, #12]
 800e884:	2104      	movs	r1, #4
 800e886:	6860      	ldr	r0, [r4, #4]
 800e888:	f7ff ff82 	bl	800e790 <std>
 800e88c:	68a0      	ldr	r0, [r4, #8]
 800e88e:	2201      	movs	r2, #1
 800e890:	2109      	movs	r1, #9
 800e892:	f7ff ff7d 	bl	800e790 <std>
 800e896:	68e0      	ldr	r0, [r4, #12]
 800e898:	2202      	movs	r2, #2
 800e89a:	2112      	movs	r1, #18
 800e89c:	f7ff ff78 	bl	800e790 <std>
 800e8a0:	2301      	movs	r3, #1
 800e8a2:	61a3      	str	r3, [r4, #24]
 800e8a4:	e7d2      	b.n	800e84c <__sinit+0xc>
 800e8a6:	bf00      	nop
 800e8a8:	08030fa0 	.word	0x08030fa0
 800e8ac:	0800e7d9 	.word	0x0800e7d9

0800e8b0 <__sfp>:
 800e8b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8b2:	4607      	mov	r7, r0
 800e8b4:	f7ff ffac 	bl	800e810 <__sfp_lock_acquire>
 800e8b8:	4b1e      	ldr	r3, [pc, #120]	; (800e934 <__sfp+0x84>)
 800e8ba:	681e      	ldr	r6, [r3, #0]
 800e8bc:	69b3      	ldr	r3, [r6, #24]
 800e8be:	b913      	cbnz	r3, 800e8c6 <__sfp+0x16>
 800e8c0:	4630      	mov	r0, r6
 800e8c2:	f7ff ffbd 	bl	800e840 <__sinit>
 800e8c6:	3648      	adds	r6, #72	; 0x48
 800e8c8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e8cc:	3b01      	subs	r3, #1
 800e8ce:	d503      	bpl.n	800e8d8 <__sfp+0x28>
 800e8d0:	6833      	ldr	r3, [r6, #0]
 800e8d2:	b30b      	cbz	r3, 800e918 <__sfp+0x68>
 800e8d4:	6836      	ldr	r6, [r6, #0]
 800e8d6:	e7f7      	b.n	800e8c8 <__sfp+0x18>
 800e8d8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e8dc:	b9d5      	cbnz	r5, 800e914 <__sfp+0x64>
 800e8de:	4b16      	ldr	r3, [pc, #88]	; (800e938 <__sfp+0x88>)
 800e8e0:	60e3      	str	r3, [r4, #12]
 800e8e2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e8e6:	6665      	str	r5, [r4, #100]	; 0x64
 800e8e8:	f000 f847 	bl	800e97a <__retarget_lock_init_recursive>
 800e8ec:	f7ff ff96 	bl	800e81c <__sfp_lock_release>
 800e8f0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e8f4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e8f8:	6025      	str	r5, [r4, #0]
 800e8fa:	61a5      	str	r5, [r4, #24]
 800e8fc:	2208      	movs	r2, #8
 800e8fe:	4629      	mov	r1, r5
 800e900:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e904:	f7ff fa94 	bl	800de30 <memset>
 800e908:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e90c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e910:	4620      	mov	r0, r4
 800e912:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e914:	3468      	adds	r4, #104	; 0x68
 800e916:	e7d9      	b.n	800e8cc <__sfp+0x1c>
 800e918:	2104      	movs	r1, #4
 800e91a:	4638      	mov	r0, r7
 800e91c:	f7ff ff62 	bl	800e7e4 <__sfmoreglue>
 800e920:	4604      	mov	r4, r0
 800e922:	6030      	str	r0, [r6, #0]
 800e924:	2800      	cmp	r0, #0
 800e926:	d1d5      	bne.n	800e8d4 <__sfp+0x24>
 800e928:	f7ff ff78 	bl	800e81c <__sfp_lock_release>
 800e92c:	230c      	movs	r3, #12
 800e92e:	603b      	str	r3, [r7, #0]
 800e930:	e7ee      	b.n	800e910 <__sfp+0x60>
 800e932:	bf00      	nop
 800e934:	08030fa0 	.word	0x08030fa0
 800e938:	ffff0001 	.word	0xffff0001

0800e93c <_fwalk_reent>:
 800e93c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e940:	4606      	mov	r6, r0
 800e942:	4688      	mov	r8, r1
 800e944:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e948:	2700      	movs	r7, #0
 800e94a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e94e:	f1b9 0901 	subs.w	r9, r9, #1
 800e952:	d505      	bpl.n	800e960 <_fwalk_reent+0x24>
 800e954:	6824      	ldr	r4, [r4, #0]
 800e956:	2c00      	cmp	r4, #0
 800e958:	d1f7      	bne.n	800e94a <_fwalk_reent+0xe>
 800e95a:	4638      	mov	r0, r7
 800e95c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e960:	89ab      	ldrh	r3, [r5, #12]
 800e962:	2b01      	cmp	r3, #1
 800e964:	d907      	bls.n	800e976 <_fwalk_reent+0x3a>
 800e966:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e96a:	3301      	adds	r3, #1
 800e96c:	d003      	beq.n	800e976 <_fwalk_reent+0x3a>
 800e96e:	4629      	mov	r1, r5
 800e970:	4630      	mov	r0, r6
 800e972:	47c0      	blx	r8
 800e974:	4307      	orrs	r7, r0
 800e976:	3568      	adds	r5, #104	; 0x68
 800e978:	e7e9      	b.n	800e94e <_fwalk_reent+0x12>

0800e97a <__retarget_lock_init_recursive>:
 800e97a:	4770      	bx	lr

0800e97c <__retarget_lock_acquire_recursive>:
 800e97c:	4770      	bx	lr

0800e97e <__retarget_lock_release_recursive>:
 800e97e:	4770      	bx	lr

0800e980 <__swhatbuf_r>:
 800e980:	b570      	push	{r4, r5, r6, lr}
 800e982:	460e      	mov	r6, r1
 800e984:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e988:	2900      	cmp	r1, #0
 800e98a:	b096      	sub	sp, #88	; 0x58
 800e98c:	4614      	mov	r4, r2
 800e98e:	461d      	mov	r5, r3
 800e990:	da08      	bge.n	800e9a4 <__swhatbuf_r+0x24>
 800e992:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800e996:	2200      	movs	r2, #0
 800e998:	602a      	str	r2, [r5, #0]
 800e99a:	061a      	lsls	r2, r3, #24
 800e99c:	d410      	bmi.n	800e9c0 <__swhatbuf_r+0x40>
 800e99e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e9a2:	e00e      	b.n	800e9c2 <__swhatbuf_r+0x42>
 800e9a4:	466a      	mov	r2, sp
 800e9a6:	f000 f9ef 	bl	800ed88 <_fstat_r>
 800e9aa:	2800      	cmp	r0, #0
 800e9ac:	dbf1      	blt.n	800e992 <__swhatbuf_r+0x12>
 800e9ae:	9a01      	ldr	r2, [sp, #4]
 800e9b0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e9b4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e9b8:	425a      	negs	r2, r3
 800e9ba:	415a      	adcs	r2, r3
 800e9bc:	602a      	str	r2, [r5, #0]
 800e9be:	e7ee      	b.n	800e99e <__swhatbuf_r+0x1e>
 800e9c0:	2340      	movs	r3, #64	; 0x40
 800e9c2:	2000      	movs	r0, #0
 800e9c4:	6023      	str	r3, [r4, #0]
 800e9c6:	b016      	add	sp, #88	; 0x58
 800e9c8:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e9cc <__smakebuf_r>:
 800e9cc:	898b      	ldrh	r3, [r1, #12]
 800e9ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e9d0:	079d      	lsls	r5, r3, #30
 800e9d2:	4606      	mov	r6, r0
 800e9d4:	460c      	mov	r4, r1
 800e9d6:	d507      	bpl.n	800e9e8 <__smakebuf_r+0x1c>
 800e9d8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e9dc:	6023      	str	r3, [r4, #0]
 800e9de:	6123      	str	r3, [r4, #16]
 800e9e0:	2301      	movs	r3, #1
 800e9e2:	6163      	str	r3, [r4, #20]
 800e9e4:	b002      	add	sp, #8
 800e9e6:	bd70      	pop	{r4, r5, r6, pc}
 800e9e8:	ab01      	add	r3, sp, #4
 800e9ea:	466a      	mov	r2, sp
 800e9ec:	f7ff ffc8 	bl	800e980 <__swhatbuf_r>
 800e9f0:	9900      	ldr	r1, [sp, #0]
 800e9f2:	4605      	mov	r5, r0
 800e9f4:	4630      	mov	r0, r6
 800e9f6:	f000 f895 	bl	800eb24 <_malloc_r>
 800e9fa:	b948      	cbnz	r0, 800ea10 <__smakebuf_r+0x44>
 800e9fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ea00:	059a      	lsls	r2, r3, #22
 800ea02:	d4ef      	bmi.n	800e9e4 <__smakebuf_r+0x18>
 800ea04:	f023 0303 	bic.w	r3, r3, #3
 800ea08:	f043 0302 	orr.w	r3, r3, #2
 800ea0c:	81a3      	strh	r3, [r4, #12]
 800ea0e:	e7e3      	b.n	800e9d8 <__smakebuf_r+0xc>
 800ea10:	4b0d      	ldr	r3, [pc, #52]	; (800ea48 <__smakebuf_r+0x7c>)
 800ea12:	62b3      	str	r3, [r6, #40]	; 0x28
 800ea14:	89a3      	ldrh	r3, [r4, #12]
 800ea16:	6020      	str	r0, [r4, #0]
 800ea18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ea1c:	81a3      	strh	r3, [r4, #12]
 800ea1e:	9b00      	ldr	r3, [sp, #0]
 800ea20:	6163      	str	r3, [r4, #20]
 800ea22:	9b01      	ldr	r3, [sp, #4]
 800ea24:	6120      	str	r0, [r4, #16]
 800ea26:	b15b      	cbz	r3, 800ea40 <__smakebuf_r+0x74>
 800ea28:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ea2c:	4630      	mov	r0, r6
 800ea2e:	f000 f9bd 	bl	800edac <_isatty_r>
 800ea32:	b128      	cbz	r0, 800ea40 <__smakebuf_r+0x74>
 800ea34:	89a3      	ldrh	r3, [r4, #12]
 800ea36:	f023 0303 	bic.w	r3, r3, #3
 800ea3a:	f043 0301 	orr.w	r3, r3, #1
 800ea3e:	81a3      	strh	r3, [r4, #12]
 800ea40:	89a0      	ldrh	r0, [r4, #12]
 800ea42:	4305      	orrs	r5, r0
 800ea44:	81a5      	strh	r5, [r4, #12]
 800ea46:	e7cd      	b.n	800e9e4 <__smakebuf_r+0x18>
 800ea48:	0800e7d9 	.word	0x0800e7d9

0800ea4c <_free_r>:
 800ea4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ea4e:	2900      	cmp	r1, #0
 800ea50:	d044      	beq.n	800eadc <_free_r+0x90>
 800ea52:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ea56:	9001      	str	r0, [sp, #4]
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	f1a1 0404 	sub.w	r4, r1, #4
 800ea5e:	bfb8      	it	lt
 800ea60:	18e4      	addlt	r4, r4, r3
 800ea62:	f000 f9c5 	bl	800edf0 <__malloc_lock>
 800ea66:	4a1e      	ldr	r2, [pc, #120]	; (800eae0 <_free_r+0x94>)
 800ea68:	9801      	ldr	r0, [sp, #4]
 800ea6a:	6813      	ldr	r3, [r2, #0]
 800ea6c:	b933      	cbnz	r3, 800ea7c <_free_r+0x30>
 800ea6e:	6063      	str	r3, [r4, #4]
 800ea70:	6014      	str	r4, [r2, #0]
 800ea72:	b003      	add	sp, #12
 800ea74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ea78:	f000 b9c0 	b.w	800edfc <__malloc_unlock>
 800ea7c:	42a3      	cmp	r3, r4
 800ea7e:	d908      	bls.n	800ea92 <_free_r+0x46>
 800ea80:	6825      	ldr	r5, [r4, #0]
 800ea82:	1961      	adds	r1, r4, r5
 800ea84:	428b      	cmp	r3, r1
 800ea86:	bf01      	itttt	eq
 800ea88:	6819      	ldreq	r1, [r3, #0]
 800ea8a:	685b      	ldreq	r3, [r3, #4]
 800ea8c:	1949      	addeq	r1, r1, r5
 800ea8e:	6021      	streq	r1, [r4, #0]
 800ea90:	e7ed      	b.n	800ea6e <_free_r+0x22>
 800ea92:	461a      	mov	r2, r3
 800ea94:	685b      	ldr	r3, [r3, #4]
 800ea96:	b10b      	cbz	r3, 800ea9c <_free_r+0x50>
 800ea98:	42a3      	cmp	r3, r4
 800ea9a:	d9fa      	bls.n	800ea92 <_free_r+0x46>
 800ea9c:	6811      	ldr	r1, [r2, #0]
 800ea9e:	1855      	adds	r5, r2, r1
 800eaa0:	42a5      	cmp	r5, r4
 800eaa2:	d10b      	bne.n	800eabc <_free_r+0x70>
 800eaa4:	6824      	ldr	r4, [r4, #0]
 800eaa6:	4421      	add	r1, r4
 800eaa8:	1854      	adds	r4, r2, r1
 800eaaa:	42a3      	cmp	r3, r4
 800eaac:	6011      	str	r1, [r2, #0]
 800eaae:	d1e0      	bne.n	800ea72 <_free_r+0x26>
 800eab0:	681c      	ldr	r4, [r3, #0]
 800eab2:	685b      	ldr	r3, [r3, #4]
 800eab4:	6053      	str	r3, [r2, #4]
 800eab6:	4421      	add	r1, r4
 800eab8:	6011      	str	r1, [r2, #0]
 800eaba:	e7da      	b.n	800ea72 <_free_r+0x26>
 800eabc:	d902      	bls.n	800eac4 <_free_r+0x78>
 800eabe:	230c      	movs	r3, #12
 800eac0:	6003      	str	r3, [r0, #0]
 800eac2:	e7d6      	b.n	800ea72 <_free_r+0x26>
 800eac4:	6825      	ldr	r5, [r4, #0]
 800eac6:	1961      	adds	r1, r4, r5
 800eac8:	428b      	cmp	r3, r1
 800eaca:	bf04      	itt	eq
 800eacc:	6819      	ldreq	r1, [r3, #0]
 800eace:	685b      	ldreq	r3, [r3, #4]
 800ead0:	6063      	str	r3, [r4, #4]
 800ead2:	bf04      	itt	eq
 800ead4:	1949      	addeq	r1, r1, r5
 800ead6:	6021      	streq	r1, [r4, #0]
 800ead8:	6054      	str	r4, [r2, #4]
 800eada:	e7ca      	b.n	800ea72 <_free_r+0x26>
 800eadc:	b003      	add	sp, #12
 800eade:	bd30      	pop	{r4, r5, pc}
 800eae0:	20001cc4 	.word	0x20001cc4

0800eae4 <sbrk_aligned>:
 800eae4:	b570      	push	{r4, r5, r6, lr}
 800eae6:	4e0e      	ldr	r6, [pc, #56]	; (800eb20 <sbrk_aligned+0x3c>)
 800eae8:	460c      	mov	r4, r1
 800eaea:	6831      	ldr	r1, [r6, #0]
 800eaec:	4605      	mov	r5, r0
 800eaee:	b911      	cbnz	r1, 800eaf6 <sbrk_aligned+0x12>
 800eaf0:	f000 f8d4 	bl	800ec9c <_sbrk_r>
 800eaf4:	6030      	str	r0, [r6, #0]
 800eaf6:	4621      	mov	r1, r4
 800eaf8:	4628      	mov	r0, r5
 800eafa:	f000 f8cf 	bl	800ec9c <_sbrk_r>
 800eafe:	1c43      	adds	r3, r0, #1
 800eb00:	d00a      	beq.n	800eb18 <sbrk_aligned+0x34>
 800eb02:	1cc4      	adds	r4, r0, #3
 800eb04:	f024 0403 	bic.w	r4, r4, #3
 800eb08:	42a0      	cmp	r0, r4
 800eb0a:	d007      	beq.n	800eb1c <sbrk_aligned+0x38>
 800eb0c:	1a21      	subs	r1, r4, r0
 800eb0e:	4628      	mov	r0, r5
 800eb10:	f000 f8c4 	bl	800ec9c <_sbrk_r>
 800eb14:	3001      	adds	r0, #1
 800eb16:	d101      	bne.n	800eb1c <sbrk_aligned+0x38>
 800eb18:	f04f 34ff 	mov.w	r4, #4294967295
 800eb1c:	4620      	mov	r0, r4
 800eb1e:	bd70      	pop	{r4, r5, r6, pc}
 800eb20:	20001cc8 	.word	0x20001cc8

0800eb24 <_malloc_r>:
 800eb24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb28:	1ccd      	adds	r5, r1, #3
 800eb2a:	f025 0503 	bic.w	r5, r5, #3
 800eb2e:	3508      	adds	r5, #8
 800eb30:	2d0c      	cmp	r5, #12
 800eb32:	bf38      	it	cc
 800eb34:	250c      	movcc	r5, #12
 800eb36:	2d00      	cmp	r5, #0
 800eb38:	4607      	mov	r7, r0
 800eb3a:	db01      	blt.n	800eb40 <_malloc_r+0x1c>
 800eb3c:	42a9      	cmp	r1, r5
 800eb3e:	d905      	bls.n	800eb4c <_malloc_r+0x28>
 800eb40:	230c      	movs	r3, #12
 800eb42:	603b      	str	r3, [r7, #0]
 800eb44:	2600      	movs	r6, #0
 800eb46:	4630      	mov	r0, r6
 800eb48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb4c:	4e2e      	ldr	r6, [pc, #184]	; (800ec08 <_malloc_r+0xe4>)
 800eb4e:	f000 f94f 	bl	800edf0 <__malloc_lock>
 800eb52:	6833      	ldr	r3, [r6, #0]
 800eb54:	461c      	mov	r4, r3
 800eb56:	bb34      	cbnz	r4, 800eba6 <_malloc_r+0x82>
 800eb58:	4629      	mov	r1, r5
 800eb5a:	4638      	mov	r0, r7
 800eb5c:	f7ff ffc2 	bl	800eae4 <sbrk_aligned>
 800eb60:	1c43      	adds	r3, r0, #1
 800eb62:	4604      	mov	r4, r0
 800eb64:	d14d      	bne.n	800ec02 <_malloc_r+0xde>
 800eb66:	6834      	ldr	r4, [r6, #0]
 800eb68:	4626      	mov	r6, r4
 800eb6a:	2e00      	cmp	r6, #0
 800eb6c:	d140      	bne.n	800ebf0 <_malloc_r+0xcc>
 800eb6e:	6823      	ldr	r3, [r4, #0]
 800eb70:	4631      	mov	r1, r6
 800eb72:	4638      	mov	r0, r7
 800eb74:	eb04 0803 	add.w	r8, r4, r3
 800eb78:	f000 f890 	bl	800ec9c <_sbrk_r>
 800eb7c:	4580      	cmp	r8, r0
 800eb7e:	d13a      	bne.n	800ebf6 <_malloc_r+0xd2>
 800eb80:	6821      	ldr	r1, [r4, #0]
 800eb82:	3503      	adds	r5, #3
 800eb84:	1a6d      	subs	r5, r5, r1
 800eb86:	f025 0503 	bic.w	r5, r5, #3
 800eb8a:	3508      	adds	r5, #8
 800eb8c:	2d0c      	cmp	r5, #12
 800eb8e:	bf38      	it	cc
 800eb90:	250c      	movcc	r5, #12
 800eb92:	4629      	mov	r1, r5
 800eb94:	4638      	mov	r0, r7
 800eb96:	f7ff ffa5 	bl	800eae4 <sbrk_aligned>
 800eb9a:	3001      	adds	r0, #1
 800eb9c:	d02b      	beq.n	800ebf6 <_malloc_r+0xd2>
 800eb9e:	6823      	ldr	r3, [r4, #0]
 800eba0:	442b      	add	r3, r5
 800eba2:	6023      	str	r3, [r4, #0]
 800eba4:	e00e      	b.n	800ebc4 <_malloc_r+0xa0>
 800eba6:	6822      	ldr	r2, [r4, #0]
 800eba8:	1b52      	subs	r2, r2, r5
 800ebaa:	d41e      	bmi.n	800ebea <_malloc_r+0xc6>
 800ebac:	2a0b      	cmp	r2, #11
 800ebae:	d916      	bls.n	800ebde <_malloc_r+0xba>
 800ebb0:	1961      	adds	r1, r4, r5
 800ebb2:	42a3      	cmp	r3, r4
 800ebb4:	6025      	str	r5, [r4, #0]
 800ebb6:	bf18      	it	ne
 800ebb8:	6059      	strne	r1, [r3, #4]
 800ebba:	6863      	ldr	r3, [r4, #4]
 800ebbc:	bf08      	it	eq
 800ebbe:	6031      	streq	r1, [r6, #0]
 800ebc0:	5162      	str	r2, [r4, r5]
 800ebc2:	604b      	str	r3, [r1, #4]
 800ebc4:	4638      	mov	r0, r7
 800ebc6:	f104 060b 	add.w	r6, r4, #11
 800ebca:	f000 f917 	bl	800edfc <__malloc_unlock>
 800ebce:	f026 0607 	bic.w	r6, r6, #7
 800ebd2:	1d23      	adds	r3, r4, #4
 800ebd4:	1af2      	subs	r2, r6, r3
 800ebd6:	d0b6      	beq.n	800eb46 <_malloc_r+0x22>
 800ebd8:	1b9b      	subs	r3, r3, r6
 800ebda:	50a3      	str	r3, [r4, r2]
 800ebdc:	e7b3      	b.n	800eb46 <_malloc_r+0x22>
 800ebde:	6862      	ldr	r2, [r4, #4]
 800ebe0:	42a3      	cmp	r3, r4
 800ebe2:	bf0c      	ite	eq
 800ebe4:	6032      	streq	r2, [r6, #0]
 800ebe6:	605a      	strne	r2, [r3, #4]
 800ebe8:	e7ec      	b.n	800ebc4 <_malloc_r+0xa0>
 800ebea:	4623      	mov	r3, r4
 800ebec:	6864      	ldr	r4, [r4, #4]
 800ebee:	e7b2      	b.n	800eb56 <_malloc_r+0x32>
 800ebf0:	4634      	mov	r4, r6
 800ebf2:	6876      	ldr	r6, [r6, #4]
 800ebf4:	e7b9      	b.n	800eb6a <_malloc_r+0x46>
 800ebf6:	230c      	movs	r3, #12
 800ebf8:	603b      	str	r3, [r7, #0]
 800ebfa:	4638      	mov	r0, r7
 800ebfc:	f000 f8fe 	bl	800edfc <__malloc_unlock>
 800ec00:	e7a1      	b.n	800eb46 <_malloc_r+0x22>
 800ec02:	6025      	str	r5, [r4, #0]
 800ec04:	e7de      	b.n	800ebc4 <_malloc_r+0xa0>
 800ec06:	bf00      	nop
 800ec08:	20001cc4 	.word	0x20001cc4

0800ec0c <_putc_r>:
 800ec0c:	b570      	push	{r4, r5, r6, lr}
 800ec0e:	460d      	mov	r5, r1
 800ec10:	4614      	mov	r4, r2
 800ec12:	4606      	mov	r6, r0
 800ec14:	b118      	cbz	r0, 800ec1e <_putc_r+0x12>
 800ec16:	6983      	ldr	r3, [r0, #24]
 800ec18:	b90b      	cbnz	r3, 800ec1e <_putc_r+0x12>
 800ec1a:	f7ff fe11 	bl	800e840 <__sinit>
 800ec1e:	4b1c      	ldr	r3, [pc, #112]	; (800ec90 <_putc_r+0x84>)
 800ec20:	429c      	cmp	r4, r3
 800ec22:	d124      	bne.n	800ec6e <_putc_r+0x62>
 800ec24:	6874      	ldr	r4, [r6, #4]
 800ec26:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ec28:	07d8      	lsls	r0, r3, #31
 800ec2a:	d405      	bmi.n	800ec38 <_putc_r+0x2c>
 800ec2c:	89a3      	ldrh	r3, [r4, #12]
 800ec2e:	0599      	lsls	r1, r3, #22
 800ec30:	d402      	bmi.n	800ec38 <_putc_r+0x2c>
 800ec32:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ec34:	f7ff fea2 	bl	800e97c <__retarget_lock_acquire_recursive>
 800ec38:	68a3      	ldr	r3, [r4, #8]
 800ec3a:	3b01      	subs	r3, #1
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	60a3      	str	r3, [r4, #8]
 800ec40:	da05      	bge.n	800ec4e <_putc_r+0x42>
 800ec42:	69a2      	ldr	r2, [r4, #24]
 800ec44:	4293      	cmp	r3, r2
 800ec46:	db1c      	blt.n	800ec82 <_putc_r+0x76>
 800ec48:	b2eb      	uxtb	r3, r5
 800ec4a:	2b0a      	cmp	r3, #10
 800ec4c:	d019      	beq.n	800ec82 <_putc_r+0x76>
 800ec4e:	6823      	ldr	r3, [r4, #0]
 800ec50:	1c5a      	adds	r2, r3, #1
 800ec52:	6022      	str	r2, [r4, #0]
 800ec54:	701d      	strb	r5, [r3, #0]
 800ec56:	b2ed      	uxtb	r5, r5
 800ec58:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ec5a:	07da      	lsls	r2, r3, #31
 800ec5c:	d405      	bmi.n	800ec6a <_putc_r+0x5e>
 800ec5e:	89a3      	ldrh	r3, [r4, #12]
 800ec60:	059b      	lsls	r3, r3, #22
 800ec62:	d402      	bmi.n	800ec6a <_putc_r+0x5e>
 800ec64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ec66:	f7ff fe8a 	bl	800e97e <__retarget_lock_release_recursive>
 800ec6a:	4628      	mov	r0, r5
 800ec6c:	bd70      	pop	{r4, r5, r6, pc}
 800ec6e:	4b09      	ldr	r3, [pc, #36]	; (800ec94 <_putc_r+0x88>)
 800ec70:	429c      	cmp	r4, r3
 800ec72:	d101      	bne.n	800ec78 <_putc_r+0x6c>
 800ec74:	68b4      	ldr	r4, [r6, #8]
 800ec76:	e7d6      	b.n	800ec26 <_putc_r+0x1a>
 800ec78:	4b07      	ldr	r3, [pc, #28]	; (800ec98 <_putc_r+0x8c>)
 800ec7a:	429c      	cmp	r4, r3
 800ec7c:	bf08      	it	eq
 800ec7e:	68f4      	ldreq	r4, [r6, #12]
 800ec80:	e7d1      	b.n	800ec26 <_putc_r+0x1a>
 800ec82:	4629      	mov	r1, r5
 800ec84:	4622      	mov	r2, r4
 800ec86:	4630      	mov	r0, r6
 800ec88:	f7ff fc00 	bl	800e48c <__swbuf_r>
 800ec8c:	4605      	mov	r5, r0
 800ec8e:	e7e3      	b.n	800ec58 <_putc_r+0x4c>
 800ec90:	08030ff8 	.word	0x08030ff8
 800ec94:	08031018 	.word	0x08031018
 800ec98:	08030fd8 	.word	0x08030fd8

0800ec9c <_sbrk_r>:
 800ec9c:	b538      	push	{r3, r4, r5, lr}
 800ec9e:	4d06      	ldr	r5, [pc, #24]	; (800ecb8 <_sbrk_r+0x1c>)
 800eca0:	2300      	movs	r3, #0
 800eca2:	4604      	mov	r4, r0
 800eca4:	4608      	mov	r0, r1
 800eca6:	602b      	str	r3, [r5, #0]
 800eca8:	f7f4 f8c8 	bl	8002e3c <_sbrk>
 800ecac:	1c43      	adds	r3, r0, #1
 800ecae:	d102      	bne.n	800ecb6 <_sbrk_r+0x1a>
 800ecb0:	682b      	ldr	r3, [r5, #0]
 800ecb2:	b103      	cbz	r3, 800ecb6 <_sbrk_r+0x1a>
 800ecb4:	6023      	str	r3, [r4, #0]
 800ecb6:	bd38      	pop	{r3, r4, r5, pc}
 800ecb8:	20001ccc 	.word	0x20001ccc

0800ecbc <__sread>:
 800ecbc:	b510      	push	{r4, lr}
 800ecbe:	460c      	mov	r4, r1
 800ecc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ecc4:	f000 f8a0 	bl	800ee08 <_read_r>
 800ecc8:	2800      	cmp	r0, #0
 800ecca:	bfab      	itete	ge
 800eccc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ecce:	89a3      	ldrhlt	r3, [r4, #12]
 800ecd0:	181b      	addge	r3, r3, r0
 800ecd2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ecd6:	bfac      	ite	ge
 800ecd8:	6563      	strge	r3, [r4, #84]	; 0x54
 800ecda:	81a3      	strhlt	r3, [r4, #12]
 800ecdc:	bd10      	pop	{r4, pc}

0800ecde <__swrite>:
 800ecde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ece2:	461f      	mov	r7, r3
 800ece4:	898b      	ldrh	r3, [r1, #12]
 800ece6:	05db      	lsls	r3, r3, #23
 800ece8:	4605      	mov	r5, r0
 800ecea:	460c      	mov	r4, r1
 800ecec:	4616      	mov	r6, r2
 800ecee:	d505      	bpl.n	800ecfc <__swrite+0x1e>
 800ecf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ecf4:	2302      	movs	r3, #2
 800ecf6:	2200      	movs	r2, #0
 800ecf8:	f000 f868 	bl	800edcc <_lseek_r>
 800ecfc:	89a3      	ldrh	r3, [r4, #12]
 800ecfe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ed02:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ed06:	81a3      	strh	r3, [r4, #12]
 800ed08:	4632      	mov	r2, r6
 800ed0a:	463b      	mov	r3, r7
 800ed0c:	4628      	mov	r0, r5
 800ed0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ed12:	f000 b817 	b.w	800ed44 <_write_r>

0800ed16 <__sseek>:
 800ed16:	b510      	push	{r4, lr}
 800ed18:	460c      	mov	r4, r1
 800ed1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ed1e:	f000 f855 	bl	800edcc <_lseek_r>
 800ed22:	1c43      	adds	r3, r0, #1
 800ed24:	89a3      	ldrh	r3, [r4, #12]
 800ed26:	bf15      	itete	ne
 800ed28:	6560      	strne	r0, [r4, #84]	; 0x54
 800ed2a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ed2e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ed32:	81a3      	strheq	r3, [r4, #12]
 800ed34:	bf18      	it	ne
 800ed36:	81a3      	strhne	r3, [r4, #12]
 800ed38:	bd10      	pop	{r4, pc}

0800ed3a <__sclose>:
 800ed3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ed3e:	f000 b813 	b.w	800ed68 <_close_r>
	...

0800ed44 <_write_r>:
 800ed44:	b538      	push	{r3, r4, r5, lr}
 800ed46:	4d07      	ldr	r5, [pc, #28]	; (800ed64 <_write_r+0x20>)
 800ed48:	4604      	mov	r4, r0
 800ed4a:	4608      	mov	r0, r1
 800ed4c:	4611      	mov	r1, r2
 800ed4e:	2200      	movs	r2, #0
 800ed50:	602a      	str	r2, [r5, #0]
 800ed52:	461a      	mov	r2, r3
 800ed54:	f7f4 f821 	bl	8002d9a <_write>
 800ed58:	1c43      	adds	r3, r0, #1
 800ed5a:	d102      	bne.n	800ed62 <_write_r+0x1e>
 800ed5c:	682b      	ldr	r3, [r5, #0]
 800ed5e:	b103      	cbz	r3, 800ed62 <_write_r+0x1e>
 800ed60:	6023      	str	r3, [r4, #0]
 800ed62:	bd38      	pop	{r3, r4, r5, pc}
 800ed64:	20001ccc 	.word	0x20001ccc

0800ed68 <_close_r>:
 800ed68:	b538      	push	{r3, r4, r5, lr}
 800ed6a:	4d06      	ldr	r5, [pc, #24]	; (800ed84 <_close_r+0x1c>)
 800ed6c:	2300      	movs	r3, #0
 800ed6e:	4604      	mov	r4, r0
 800ed70:	4608      	mov	r0, r1
 800ed72:	602b      	str	r3, [r5, #0]
 800ed74:	f7f4 f82d 	bl	8002dd2 <_close>
 800ed78:	1c43      	adds	r3, r0, #1
 800ed7a:	d102      	bne.n	800ed82 <_close_r+0x1a>
 800ed7c:	682b      	ldr	r3, [r5, #0]
 800ed7e:	b103      	cbz	r3, 800ed82 <_close_r+0x1a>
 800ed80:	6023      	str	r3, [r4, #0]
 800ed82:	bd38      	pop	{r3, r4, r5, pc}
 800ed84:	20001ccc 	.word	0x20001ccc

0800ed88 <_fstat_r>:
 800ed88:	b538      	push	{r3, r4, r5, lr}
 800ed8a:	4d07      	ldr	r5, [pc, #28]	; (800eda8 <_fstat_r+0x20>)
 800ed8c:	2300      	movs	r3, #0
 800ed8e:	4604      	mov	r4, r0
 800ed90:	4608      	mov	r0, r1
 800ed92:	4611      	mov	r1, r2
 800ed94:	602b      	str	r3, [r5, #0]
 800ed96:	f7f4 f828 	bl	8002dea <_fstat>
 800ed9a:	1c43      	adds	r3, r0, #1
 800ed9c:	d102      	bne.n	800eda4 <_fstat_r+0x1c>
 800ed9e:	682b      	ldr	r3, [r5, #0]
 800eda0:	b103      	cbz	r3, 800eda4 <_fstat_r+0x1c>
 800eda2:	6023      	str	r3, [r4, #0]
 800eda4:	bd38      	pop	{r3, r4, r5, pc}
 800eda6:	bf00      	nop
 800eda8:	20001ccc 	.word	0x20001ccc

0800edac <_isatty_r>:
 800edac:	b538      	push	{r3, r4, r5, lr}
 800edae:	4d06      	ldr	r5, [pc, #24]	; (800edc8 <_isatty_r+0x1c>)
 800edb0:	2300      	movs	r3, #0
 800edb2:	4604      	mov	r4, r0
 800edb4:	4608      	mov	r0, r1
 800edb6:	602b      	str	r3, [r5, #0]
 800edb8:	f7f4 f827 	bl	8002e0a <_isatty>
 800edbc:	1c43      	adds	r3, r0, #1
 800edbe:	d102      	bne.n	800edc6 <_isatty_r+0x1a>
 800edc0:	682b      	ldr	r3, [r5, #0]
 800edc2:	b103      	cbz	r3, 800edc6 <_isatty_r+0x1a>
 800edc4:	6023      	str	r3, [r4, #0]
 800edc6:	bd38      	pop	{r3, r4, r5, pc}
 800edc8:	20001ccc 	.word	0x20001ccc

0800edcc <_lseek_r>:
 800edcc:	b538      	push	{r3, r4, r5, lr}
 800edce:	4d07      	ldr	r5, [pc, #28]	; (800edec <_lseek_r+0x20>)
 800edd0:	4604      	mov	r4, r0
 800edd2:	4608      	mov	r0, r1
 800edd4:	4611      	mov	r1, r2
 800edd6:	2200      	movs	r2, #0
 800edd8:	602a      	str	r2, [r5, #0]
 800edda:	461a      	mov	r2, r3
 800eddc:	f7f4 f820 	bl	8002e20 <_lseek>
 800ede0:	1c43      	adds	r3, r0, #1
 800ede2:	d102      	bne.n	800edea <_lseek_r+0x1e>
 800ede4:	682b      	ldr	r3, [r5, #0]
 800ede6:	b103      	cbz	r3, 800edea <_lseek_r+0x1e>
 800ede8:	6023      	str	r3, [r4, #0]
 800edea:	bd38      	pop	{r3, r4, r5, pc}
 800edec:	20001ccc 	.word	0x20001ccc

0800edf0 <__malloc_lock>:
 800edf0:	4801      	ldr	r0, [pc, #4]	; (800edf8 <__malloc_lock+0x8>)
 800edf2:	f7ff bdc3 	b.w	800e97c <__retarget_lock_acquire_recursive>
 800edf6:	bf00      	nop
 800edf8:	20001cc0 	.word	0x20001cc0

0800edfc <__malloc_unlock>:
 800edfc:	4801      	ldr	r0, [pc, #4]	; (800ee04 <__malloc_unlock+0x8>)
 800edfe:	f7ff bdbe 	b.w	800e97e <__retarget_lock_release_recursive>
 800ee02:	bf00      	nop
 800ee04:	20001cc0 	.word	0x20001cc0

0800ee08 <_read_r>:
 800ee08:	b538      	push	{r3, r4, r5, lr}
 800ee0a:	4d07      	ldr	r5, [pc, #28]	; (800ee28 <_read_r+0x20>)
 800ee0c:	4604      	mov	r4, r0
 800ee0e:	4608      	mov	r0, r1
 800ee10:	4611      	mov	r1, r2
 800ee12:	2200      	movs	r2, #0
 800ee14:	602a      	str	r2, [r5, #0]
 800ee16:	461a      	mov	r2, r3
 800ee18:	f7f3 ffa2 	bl	8002d60 <_read>
 800ee1c:	1c43      	adds	r3, r0, #1
 800ee1e:	d102      	bne.n	800ee26 <_read_r+0x1e>
 800ee20:	682b      	ldr	r3, [r5, #0]
 800ee22:	b103      	cbz	r3, 800ee26 <_read_r+0x1e>
 800ee24:	6023      	str	r3, [r4, #0]
 800ee26:	bd38      	pop	{r3, r4, r5, pc}
 800ee28:	20001ccc 	.word	0x20001ccc

0800ee2c <_init>:
 800ee2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee2e:	bf00      	nop
 800ee30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ee32:	bc08      	pop	{r3}
 800ee34:	469e      	mov	lr, r3
 800ee36:	4770      	bx	lr

0800ee38 <_fini>:
 800ee38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee3a:	bf00      	nop
 800ee3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ee3e:	bc08      	pop	{r3}
 800ee40:	469e      	mov	lr, r3
 800ee42:	4770      	bx	lr
