
KeyPad.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cc90  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000520  0800ce30  0800ce30  0001ce30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d350  0800d350  0002016c  2**0
                  CONTENTS
  4 .ARM          00000008  0800d350  0800d350  0001d350  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d358  0800d358  0002016c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d358  0800d358  0001d358  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d35c  0800d35c  0001d35c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000016c  20000000  0800d360  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001634  2000016c  0800d4cc  0002016c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200017a0  0800d4cc  000217a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002016c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023999  00000000  00000000  0002019c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000056a5  00000000  00000000  00043b35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001cc8  00000000  00000000  000491e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001a48  00000000  00000000  0004aea8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e810  00000000  00000000  0004c8f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002769c  00000000  00000000  0006b100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a4c2d  00000000  00000000  0009279c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001373c9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007e60  00000000  00000000  0013741c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000016c 	.word	0x2000016c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ce18 	.word	0x0800ce18

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000170 	.word	0x20000170
 80001dc:	0800ce18 	.word	0x0800ce18

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <MCP23017_Init>:
 *@Params: Init Struct with desired settings, Device handle to initialize, a low level IO Driver struct
 *@Return: None
 *@Precondition: Init Struct should have desired settings
 *@Postcondition: Device struct will be intialized and ready to use
 **************************************//**************************************/
void MCP23017_Init(MCP23017_Init_Struct_t Settings, MCP23017_Handle_t *Dev, MCP23017_IO_Drv_t IO_Driver){
 8000584:	b590      	push	{r4, r7, lr}
 8000586:	b085      	sub	sp, #20
 8000588:	af00      	add	r7, sp, #0
 800058a:	463c      	mov	r4, r7
 800058c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	Dev->IO_Driver.Init = IO_Driver.Init;
 8000590:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000592:	6a3b      	ldr	r3, [r7, #32]
 8000594:	605a      	str	r2, [r3, #4]
	Dev->IO_Driver.DeInit = IO_Driver.DeInit;
 8000596:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000598:	6a3b      	ldr	r3, [r7, #32]
 800059a:	609a      	str	r2, [r3, #8]
	Dev->IO_Driver.ReadReg = IO_Driver.ReadReg;
 800059c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800059e:	6a3b      	ldr	r3, [r7, #32]
 80005a0:	611a      	str	r2, [r3, #16]
	Dev->IO_Driver.WriteReg = IO_Driver.WriteReg;
 80005a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80005a4:	6a3b      	ldr	r3, [r7, #32]
 80005a6:	60da      	str	r2, [r3, #12]
	Dev->IO_Driver.ioctl = IO_Driver.ioctl;
 80005a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80005aa:	6a3b      	ldr	r3, [r7, #32]
 80005ac:	615a      	str	r2, [r3, #20]
	Dev->IO_Driver.Init();
 80005ae:	6a3b      	ldr	r3, [r7, #32]
 80005b0:	685b      	ldr	r3, [r3, #4]
 80005b2:	4798      	blx	r3

	if(Dev->IO_Driver.WriteReg(MCP23017_IOCON, (uint8_t*)&Settings.Config,1) != MCP23017_Ok){
 80005b4:	6a3b      	ldr	r3, [r7, #32]
 80005b6:	68db      	ldr	r3, [r3, #12]
 80005b8:	200a      	movs	r0, #10
 80005ba:	463a      	mov	r2, r7
 80005bc:	f102 010c 	add.w	r1, r2, #12
 80005c0:	2201      	movs	r2, #1
 80005c2:	4798      	blx	r3
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d003      	beq.n	80005d2 <MCP23017_Init+0x4e>
		_log(log_mcp23017, "Initialization: IOCON Write Failed");
 80005ca:	492e      	ldr	r1, [pc, #184]	; (8000684 <MCP23017_Init+0x100>)
 80005cc:	2005      	movs	r0, #5
 80005ce:	f000 ffe5 	bl	800159c <_log>
	}

	if(Dev->IO_Driver.WriteReg(MCP23017_IODIRA, (uint8_t*)&Settings.Mode,2) != MCP23017_Ok){
 80005d2:	6a3b      	ldr	r3, [r7, #32]
 80005d4:	68db      	ldr	r3, [r3, #12]
 80005d6:	2000      	movs	r0, #0
 80005d8:	4639      	mov	r1, r7
 80005da:	2202      	movs	r2, #2
 80005dc:	4798      	blx	r3
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d003      	beq.n	80005ec <MCP23017_Init+0x68>
		_log(log_mcp23017, "Initialization: IODIR Write Failed");
 80005e4:	4928      	ldr	r1, [pc, #160]	; (8000688 <MCP23017_Init+0x104>)
 80005e6:	2005      	movs	r0, #5
 80005e8:	f000 ffd8 	bl	800159c <_log>
	}

	if(Dev->IO_Driver.WriteReg(MCP23017_IPOLA, (uint8_t*)&Settings.Polarity,2) != MCP23017_Ok){
 80005ec:	6a3b      	ldr	r3, [r7, #32]
 80005ee:	68db      	ldr	r3, [r3, #12]
 80005f0:	2002      	movs	r0, #2
 80005f2:	463a      	mov	r2, r7
 80005f4:	1c91      	adds	r1, r2, #2
 80005f6:	2202      	movs	r2, #2
 80005f8:	4798      	blx	r3
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d003      	beq.n	8000608 <MCP23017_Init+0x84>
		_log(log_mcp23017, "Initialization: IPOL Write Failed");
 8000600:	4922      	ldr	r1, [pc, #136]	; (800068c <MCP23017_Init+0x108>)
 8000602:	2005      	movs	r0, #5
 8000604:	f000 ffca 	bl	800159c <_log>
	}

	if(Dev->IO_Driver.WriteReg(MCP23017_GPINTENA, (uint8_t*)&Settings.IntEnable,2) != MCP23017_Ok){
 8000608:	6a3b      	ldr	r3, [r7, #32]
 800060a:	68db      	ldr	r3, [r3, #12]
 800060c:	2004      	movs	r0, #4
 800060e:	463a      	mov	r2, r7
 8000610:	1d11      	adds	r1, r2, #4
 8000612:	2202      	movs	r2, #2
 8000614:	4798      	blx	r3
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d003      	beq.n	8000624 <MCP23017_Init+0xa0>
		_log(log_mcp23017, "Initialization: INTENA Write Failed");
 800061c:	491c      	ldr	r1, [pc, #112]	; (8000690 <MCP23017_Init+0x10c>)
 800061e:	2005      	movs	r0, #5
 8000620:	f000 ffbc 	bl	800159c <_log>
	}

	if(Dev->IO_Driver.WriteReg(MCP23017_DEFVALA, (uint8_t*)&Settings.DefaultValue,2) != MCP23017_Ok){
 8000624:	6a3b      	ldr	r3, [r7, #32]
 8000626:	68db      	ldr	r3, [r3, #12]
 8000628:	2006      	movs	r0, #6
 800062a:	463a      	mov	r2, r7
 800062c:	1d91      	adds	r1, r2, #6
 800062e:	2202      	movs	r2, #2
 8000630:	4798      	blx	r3
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d003      	beq.n	8000640 <MCP23017_Init+0xbc>
		_log(log_mcp23017, "Initialization: DEFVAL Write Failed");
 8000638:	4916      	ldr	r1, [pc, #88]	; (8000694 <MCP23017_Init+0x110>)
 800063a:	2005      	movs	r0, #5
 800063c:	f000 ffae 	bl	800159c <_log>
	}

	if(Dev->IO_Driver.WriteReg(MCP23017_INTCONA, (uint8_t*)&Settings.IRQControl,2) != MCP23017_Ok){
 8000640:	6a3b      	ldr	r3, [r7, #32]
 8000642:	68db      	ldr	r3, [r3, #12]
 8000644:	2008      	movs	r0, #8
 8000646:	463a      	mov	r2, r7
 8000648:	f102 0108 	add.w	r1, r2, #8
 800064c:	2202      	movs	r2, #2
 800064e:	4798      	blx	r3
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d003      	beq.n	800065e <MCP23017_Init+0xda>
		_log(log_mcp23017, "Initialization: INTCON Write Failed");
 8000656:	4910      	ldr	r1, [pc, #64]	; (8000698 <MCP23017_Init+0x114>)
 8000658:	2005      	movs	r0, #5
 800065a:	f000 ff9f 	bl	800159c <_log>
	}

	if(Dev->IO_Driver.WriteReg(MCP23017_GPPUA, (uint8_t*)&Settings.PullUp,2) != MCP23017_Ok){
 800065e:	6a3b      	ldr	r3, [r7, #32]
 8000660:	68db      	ldr	r3, [r3, #12]
 8000662:	200c      	movs	r0, #12
 8000664:	463a      	mov	r2, r7
 8000666:	f102 010a 	add.w	r1, r2, #10
 800066a:	2202      	movs	r2, #2
 800066c:	4798      	blx	r3
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d003      	beq.n	800067c <MCP23017_Init+0xf8>
		_log(log_mcp23017, "Initialization: GPPU Write Failed");
 8000674:	4909      	ldr	r1, [pc, #36]	; (800069c <MCP23017_Init+0x118>)
 8000676:	2005      	movs	r0, #5
 8000678:	f000 ff90 	bl	800159c <_log>
	}

}
 800067c:	bf00      	nop
 800067e:	3714      	adds	r7, #20
 8000680:	46bd      	mov	sp, r7
 8000682:	bd90      	pop	{r4, r7, pc}
 8000684:	0800ce30 	.word	0x0800ce30
 8000688:	0800ce54 	.word	0x0800ce54
 800068c:	0800ce78 	.word	0x0800ce78
 8000690:	0800ce9c 	.word	0x0800ce9c
 8000694:	0800cec0 	.word	0x0800cec0
 8000698:	0800cee4 	.word	0x0800cee4
 800069c:	0800cf08 	.word	0x0800cf08

080006a0 <MCP23017_DeInit>:
 *@Params: MCP23017 Device handle to deinitialize
 *@Return: None
 *@Precondition: Device handle should be initialized
 *@Postcondition: Device handle will be deinitialized and device registers set to default settings
 **************************************//**************************************/
void MCP23017_DeInit(MCP23017_Handle_t *Dev){
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
	MCP23017_Reset(Dev);
 80006a8:	6878      	ldr	r0, [r7, #4]
 80006aa:	f000 f813 	bl	80006d4 <MCP23017_Reset>
	Dev->IO_Driver.Init = '\0';
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	2200      	movs	r2, #0
 80006b2:	605a      	str	r2, [r3, #4]
	Dev->IO_Driver.DeInit = '\0';
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	2200      	movs	r2, #0
 80006b8:	609a      	str	r2, [r3, #8]
	Dev->IO_Driver.ReadReg = '\0';
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	2200      	movs	r2, #0
 80006be:	611a      	str	r2, [r3, #16]
	Dev->IO_Driver.WriteReg = '\0';
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	2200      	movs	r2, #0
 80006c4:	60da      	str	r2, [r3, #12]
	Dev->IO_Driver.ioctl = '\0';
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	2200      	movs	r2, #0
 80006ca:	615a      	str	r2, [r3, #20]
}
 80006cc:	bf00      	nop
 80006ce:	3708      	adds	r7, #8
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}

080006d4 <MCP23017_Reset>:
 *@Params: MCP23017 Device Handle to reset
 *@Return: None
 *@Precondition: Device handle should be initialized
 *@Postcondition: Device registers will be set to default settings
 **************************************//**************************************/
void MCP23017_Reset(MCP23017_Handle_t *Dev){
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b084      	sub	sp, #16
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
	uint16_t Settings = 0;
 80006dc:	2300      	movs	r3, #0
 80006de:	81fb      	strh	r3, [r7, #14]
	Dev->IO_Driver.DeInit(); //Turn off DMA IRQ and clear pending IRQ
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	689b      	ldr	r3, [r3, #8]
 80006e4:	4798      	blx	r3
	if(Dev->IO_Driver.WriteReg(MCP23017_IOCON, (uint8_t*)&Settings,1) != MCP23017_Ok){
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	68db      	ldr	r3, [r3, #12]
 80006ea:	200a      	movs	r0, #10
 80006ec:	f107 010e 	add.w	r1, r7, #14
 80006f0:	2201      	movs	r2, #1
 80006f2:	4798      	blx	r3
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d003      	beq.n	8000702 <MCP23017_Reset+0x2e>
		_log(log_mcp23017, "DeInitialization: IOCON Write Failed");
 80006fa:	4930      	ldr	r1, [pc, #192]	; (80007bc <MCP23017_Reset+0xe8>)
 80006fc:	2005      	movs	r0, #5
 80006fe:	f000 ff4d 	bl	800159c <_log>
	}

	Settings = 0xFFFF;
 8000702:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000706:	81fb      	strh	r3, [r7, #14]
	if(Dev->IO_Driver.WriteReg(MCP23017_IODIRA, (uint8_t*)&Settings,2) != MCP23017_Ok){
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	68db      	ldr	r3, [r3, #12]
 800070c:	2000      	movs	r0, #0
 800070e:	f107 010e 	add.w	r1, r7, #14
 8000712:	2202      	movs	r2, #2
 8000714:	4798      	blx	r3
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d003      	beq.n	8000724 <MCP23017_Reset+0x50>
		_log(log_mcp23017, "DeInitialization: IODIR Write Failed");
 800071c:	4928      	ldr	r1, [pc, #160]	; (80007c0 <MCP23017_Reset+0xec>)
 800071e:	2005      	movs	r0, #5
 8000720:	f000 ff3c 	bl	800159c <_log>
	}

	Settings = 0x0000;
 8000724:	2300      	movs	r3, #0
 8000726:	81fb      	strh	r3, [r7, #14]
	if(Dev->IO_Driver.WriteReg(MCP23017_IPOLA, (uint8_t*)&Settings,2) != MCP23017_Ok){
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	68db      	ldr	r3, [r3, #12]
 800072c:	2002      	movs	r0, #2
 800072e:	f107 010e 	add.w	r1, r7, #14
 8000732:	2202      	movs	r2, #2
 8000734:	4798      	blx	r3
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d003      	beq.n	8000744 <MCP23017_Reset+0x70>
		_log(log_mcp23017, "DeInitialization: IPOL Write Failed");
 800073c:	4921      	ldr	r1, [pc, #132]	; (80007c4 <MCP23017_Reset+0xf0>)
 800073e:	2005      	movs	r0, #5
 8000740:	f000 ff2c 	bl	800159c <_log>
	}

	if(Dev->IO_Driver.WriteReg(MCP23017_GPINTENA, (uint8_t*)&Settings,2) != MCP23017_Ok){
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	68db      	ldr	r3, [r3, #12]
 8000748:	2004      	movs	r0, #4
 800074a:	f107 010e 	add.w	r1, r7, #14
 800074e:	2202      	movs	r2, #2
 8000750:	4798      	blx	r3
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d003      	beq.n	8000760 <MCP23017_Reset+0x8c>
		_log(log_mcp23017, "DeInitialization: INTENA Write Failed");
 8000758:	491b      	ldr	r1, [pc, #108]	; (80007c8 <MCP23017_Reset+0xf4>)
 800075a:	2005      	movs	r0, #5
 800075c:	f000 ff1e 	bl	800159c <_log>
	}

	if(Dev->IO_Driver.WriteReg(MCP23017_DEFVALA, (uint8_t*)&Settings,2) != MCP23017_Ok){
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	68db      	ldr	r3, [r3, #12]
 8000764:	2006      	movs	r0, #6
 8000766:	f107 010e 	add.w	r1, r7, #14
 800076a:	2202      	movs	r2, #2
 800076c:	4798      	blx	r3
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d003      	beq.n	800077c <MCP23017_Reset+0xa8>
		_log(log_mcp23017, "DeInitialization: DEFVAL Write Failed");
 8000774:	4915      	ldr	r1, [pc, #84]	; (80007cc <MCP23017_Reset+0xf8>)
 8000776:	2005      	movs	r0, #5
 8000778:	f000 ff10 	bl	800159c <_log>
	}

	if(Dev->IO_Driver.WriteReg(MCP23017_INTCONA, (uint8_t*)&Settings,2) != MCP23017_Ok){
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	68db      	ldr	r3, [r3, #12]
 8000780:	2008      	movs	r0, #8
 8000782:	f107 010e 	add.w	r1, r7, #14
 8000786:	2202      	movs	r2, #2
 8000788:	4798      	blx	r3
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d003      	beq.n	8000798 <MCP23017_Reset+0xc4>
		_log(log_mcp23017, "DeInitialization: INTCON Write Failed");
 8000790:	490f      	ldr	r1, [pc, #60]	; (80007d0 <MCP23017_Reset+0xfc>)
 8000792:	2005      	movs	r0, #5
 8000794:	f000 ff02 	bl	800159c <_log>
	}

	if(Dev->IO_Driver.WriteReg(MCP23017_GPPUA, (uint8_t*)&Settings,2) != MCP23017_Ok){
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	68db      	ldr	r3, [r3, #12]
 800079c:	200c      	movs	r0, #12
 800079e:	f107 010e 	add.w	r1, r7, #14
 80007a2:	2202      	movs	r2, #2
 80007a4:	4798      	blx	r3
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d003      	beq.n	80007b4 <MCP23017_Reset+0xe0>
		_log(log_mcp23017, "DeInitialization: GPPU Write Failed");
 80007ac:	4909      	ldr	r1, [pc, #36]	; (80007d4 <MCP23017_Reset+0x100>)
 80007ae:	2005      	movs	r0, #5
 80007b0:	f000 fef4 	bl	800159c <_log>
	}
}
 80007b4:	bf00      	nop
 80007b6:	3710      	adds	r7, #16
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	0800cf2c 	.word	0x0800cf2c
 80007c0:	0800cf54 	.word	0x0800cf54
 80007c4:	0800cf7c 	.word	0x0800cf7c
 80007c8:	0800cfa0 	.word	0x0800cfa0
 80007cc:	0800cfc8 	.word	0x0800cfc8
 80007d0:	0800cff0 	.word	0x0800cff0
 80007d4:	0800d018 	.word	0x0800d018

080007d8 <MCP23017_ReadPins>:
 *@Params: MCP23017 Device Handle
 *@Return: Err if read fails, Ok otherwise
 *@Precondition: Device handle must be initialized
 *@Postcondition: Device Handle PinStates will contain new states of pins
 **************************************//**************************************/
MCP23017_Status_t MCP23017_ReadPins(MCP23017_Handle_t *Dev){
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
	if(Dev->IO_Driver.ReadReg(MCP23017_GPIOA, (uint8_t*)&Dev->PinStates, 2) != MCP23017_Ok){
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	691b      	ldr	r3, [r3, #16]
 80007e4:	2012      	movs	r0, #18
 80007e6:	6879      	ldr	r1, [r7, #4]
 80007e8:	2202      	movs	r2, #2
 80007ea:	4798      	blx	r3
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d005      	beq.n	80007fe <MCP23017_ReadPins+0x26>
		_log(log_mcp23017, "Read Pins Failed");
 80007f2:	4905      	ldr	r1, [pc, #20]	; (8000808 <MCP23017_ReadPins+0x30>)
 80007f4:	2005      	movs	r0, #5
 80007f6:	f000 fed1 	bl	800159c <_log>
		return MCP23017_Err;
 80007fa:	2301      	movs	r3, #1
 80007fc:	e000      	b.n	8000800 <MCP23017_ReadPins+0x28>
	}
	return MCP23017_Ok;
 80007fe:	2300      	movs	r3, #0
}
 8000800:	4618      	mov	r0, r3
 8000802:	3708      	adds	r7, #8
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	0800d088 	.word	0x0800d088

0800080c <MCP23017_IO_Init>:
 *@Params: None
 *@Return: None
 *@Precondition: None
 *@Postcondition: GPIO B Clk will be enabled and I2C1 Peripheral will be initialized
 **************************************//**************************************/
static void MCP23017_IO_Init(){
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
	I2C_DMA_Init();
 8000810:	f000 fd2a 	bl	8001268 <I2C_DMA_Init>
	I2C_GPIO_Init();
 8000814:	f000 fdb6 	bl	8001384 <I2C_GPIO_Init>
	I2C1_Init();
 8000818:	f000 fe7c 	bl	8001514 <I2C1_Init>
}
 800081c:	bf00      	nop
 800081e:	bd80      	pop	{r7, pc}

08000820 <MCP23017_IO_DeInit>:
 *@Params: None
 *@Return: None
 *@Precondition: None
 *@Postcondition: None
 **************************************//**************************************/
static void MCP23017_IO_DeInit(){
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
	HAL_NVIC_DisableIRQ(DMA1_Stream0_IRQn);
 8000824:	200b      	movs	r0, #11
 8000826:	f002 f9f6 	bl	8002c16 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_ClearPendingIRQ(DMA1_Stream0_IRQn);
 800082a:	200b      	movs	r0, #11
 800082c:	f002 fa0d 	bl	8002c4a <HAL_NVIC_ClearPendingIRQ>
}
 8000830:	bf00      	nop
 8000832:	bd80      	pop	{r7, pc}

08000834 <MCP23017_IO_WriteReg>:
 *@Params: MCP23017 Device Address, Register to write to, data to write, data length in bytes
 *@Return: Error if the write fails, otherwise Ok
 *@Precondition: I2C Bus should be initialized
 *@Postcondition: Device register will be written to
 **************************************//**************************************/
static MCP23017_Status_t MCP23017_IO_WriteReg(uint8_t DevAddr, uint8_t RegAddr, uint8_t *Data, uint8_t Length){
 8000834:	b580      	push	{r7, lr}
 8000836:	b086      	sub	sp, #24
 8000838:	af04      	add	r7, sp, #16
 800083a:	603a      	str	r2, [r7, #0]
 800083c:	461a      	mov	r2, r3
 800083e:	4603      	mov	r3, r0
 8000840:	71fb      	strb	r3, [r7, #7]
 8000842:	460b      	mov	r3, r1
 8000844:	71bb      	strb	r3, [r7, #6]
 8000846:	4613      	mov	r3, r2
 8000848:	717b      	strb	r3, [r7, #5]
	if(HAL_I2C_Mem_Write(&hi2c1, DevAddr, RegAddr, I2C_MEMADD_SIZE_8BIT, Data, Length, 50) != HAL_OK){
 800084a:	79fb      	ldrb	r3, [r7, #7]
 800084c:	b299      	uxth	r1, r3
 800084e:	79bb      	ldrb	r3, [r7, #6]
 8000850:	b29a      	uxth	r2, r3
 8000852:	797b      	ldrb	r3, [r7, #5]
 8000854:	b29b      	uxth	r3, r3
 8000856:	2032      	movs	r0, #50	; 0x32
 8000858:	9002      	str	r0, [sp, #8]
 800085a:	9301      	str	r3, [sp, #4]
 800085c:	683b      	ldr	r3, [r7, #0]
 800085e:	9300      	str	r3, [sp, #0]
 8000860:	2301      	movs	r3, #1
 8000862:	4809      	ldr	r0, [pc, #36]	; (8000888 <MCP23017_IO_WriteReg+0x54>)
 8000864:	f003 f8d6 	bl	8003a14 <HAL_I2C_Mem_Write>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d007      	beq.n	800087e <MCP23017_IO_WriteReg+0x4a>
		_log(log_i2c,"Write to MCP23017 Reg address %x failed.", RegAddr);
 800086e:	79bb      	ldrb	r3, [r7, #6]
 8000870:	461a      	mov	r2, r3
 8000872:	4906      	ldr	r1, [pc, #24]	; (800088c <MCP23017_IO_WriteReg+0x58>)
 8000874:	2000      	movs	r0, #0
 8000876:	f000 fe91 	bl	800159c <_log>
		return MCP23017_Err;
 800087a:	2301      	movs	r3, #1
 800087c:	e000      	b.n	8000880 <MCP23017_IO_WriteReg+0x4c>
	}
	return MCP23017_Ok;
 800087e:	2300      	movs	r3, #0
}
 8000880:	4618      	mov	r0, r3
 8000882:	3708      	adds	r7, #8
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	200003d8 	.word	0x200003d8
 800088c:	0800d09c 	.word	0x0800d09c

08000890 <MCP23017_IO_ReadReg>:
 *@Params: MCP23017 Device Address, Register to read to, data buffer to read into, data length in bytes,
 *@Return: Error if the read fails, otherwise Ok
 *@Precondition: I2C Bus must be initialized
 *@Postcondition: Data buffer will have the read data
 **************************************//**************************************/
static MCP23017_Status_t MCP23017_IO_ReadReg(uint8_t DevAddr, uint8_t RegAddr, uint8_t *Data, uint8_t Length){
 8000890:	b580      	push	{r7, lr}
 8000892:	b084      	sub	sp, #16
 8000894:	af02      	add	r7, sp, #8
 8000896:	603a      	str	r2, [r7, #0]
 8000898:	461a      	mov	r2, r3
 800089a:	4603      	mov	r3, r0
 800089c:	71fb      	strb	r3, [r7, #7]
 800089e:	460b      	mov	r3, r1
 80008a0:	71bb      	strb	r3, [r7, #6]
 80008a2:	4613      	mov	r3, r2
 80008a4:	717b      	strb	r3, [r7, #5]
	//HAL_I2C_Mem_Read_DMA(hi2c, DevAddress, MemAddress, MemAddSize, pData, Size)
	//if(HAL_I2C_Mem_Read(&hi2c1, DevAddr, RegAddr, I2C_MEMADD_SIZE_8BIT, Data, Length, 50) != HAL_OK){
	if(HAL_I2C_Mem_Read_DMA(&hi2c1, DevAddr, RegAddr, I2C_MEMADD_SIZE_8BIT, Data, Length) != HAL_OK){
 80008a6:	79fb      	ldrb	r3, [r7, #7]
 80008a8:	b299      	uxth	r1, r3
 80008aa:	79bb      	ldrb	r3, [r7, #6]
 80008ac:	b29a      	uxth	r2, r3
 80008ae:	797b      	ldrb	r3, [r7, #5]
 80008b0:	b29b      	uxth	r3, r3
 80008b2:	9301      	str	r3, [sp, #4]
 80008b4:	683b      	ldr	r3, [r7, #0]
 80008b6:	9300      	str	r3, [sp, #0]
 80008b8:	2301      	movs	r3, #1
 80008ba:	4809      	ldr	r0, [pc, #36]	; (80008e0 <MCP23017_IO_ReadReg+0x50>)
 80008bc:	f003 f9a4 	bl	8003c08 <HAL_I2C_Mem_Read_DMA>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d007      	beq.n	80008d6 <MCP23017_IO_ReadReg+0x46>
		_log(log_i2c,"Read from MCP23017 Reg address %x failed.", RegAddr);
 80008c6:	79bb      	ldrb	r3, [r7, #6]
 80008c8:	461a      	mov	r2, r3
 80008ca:	4906      	ldr	r1, [pc, #24]	; (80008e4 <MCP23017_IO_ReadReg+0x54>)
 80008cc:	2000      	movs	r0, #0
 80008ce:	f000 fe65 	bl	800159c <_log>
		return MCP23017_Err;
 80008d2:	2301      	movs	r3, #1
 80008d4:	e000      	b.n	80008d8 <MCP23017_IO_ReadReg+0x48>
	}
	return MCP23017_Ok;
 80008d6:	2300      	movs	r3, #0
}
 80008d8:	4618      	mov	r0, r3
 80008da:	3708      	adds	r7, #8
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	200003d8 	.word	0x200003d8
 80008e4:	0800d0c8 	.word	0x0800d0c8

080008e8 <MCP23017_IO_ioctl>:
 *@Params: Command
 *@Return: None
 *@Precondition: None
 *@Postcondition: None
 **************************************//**************************************/
static uint8_t MCP23017_IO_ioctl(MCP23017_IO_Cmd_t command){
 80008e8:	b480      	push	{r7}
 80008ea:	b083      	sub	sp, #12
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	4603      	mov	r3, r0
 80008f0:	71fb      	strb	r3, [r7, #7]
	return MCP23017_Ok;
 80008f2:	2300      	movs	r3, #0
}
 80008f4:	4618      	mov	r0, r3
 80008f6:	370c      	adds	r7, #12
 80008f8:	46bd      	mov	sp, r7
 80008fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fe:	4770      	bx	lr

08000900 <MCP23017_IO2_WriteReg>:
 *@Params: Register to write to, data to write, length of data in bytes
 *@Return: Err if write fails, Ok otherwise
 *@Precondition: I2C Bus must be initialized
 *@Postcondition: Device (w/ Address2) register will be modified
 **************************************//**************************************/
static MCP23017_Status_t MCP23017_IO2_WriteReg(uint8_t RegAddr, uint8_t *Data, uint8_t Length){
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	4603      	mov	r3, r0
 8000908:	6039      	str	r1, [r7, #0]
 800090a:	71fb      	strb	r3, [r7, #7]
 800090c:	4613      	mov	r3, r2
 800090e:	71bb      	strb	r3, [r7, #6]
	static const uint8_t address = MCP23017_Address2;
    return MCP23017_IO_WriteReg(address, RegAddr, Data, Length);
 8000910:	4b05      	ldr	r3, [pc, #20]	; (8000928 <MCP23017_IO2_WriteReg+0x28>)
 8000912:	7818      	ldrb	r0, [r3, #0]
 8000914:	79bb      	ldrb	r3, [r7, #6]
 8000916:	79f9      	ldrb	r1, [r7, #7]
 8000918:	683a      	ldr	r2, [r7, #0]
 800091a:	f7ff ff8b 	bl	8000834 <MCP23017_IO_WriteReg>
 800091e:	4603      	mov	r3, r0
}
 8000920:	4618      	mov	r0, r3
 8000922:	3708      	adds	r7, #8
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	0800d26c 	.word	0x0800d26c

0800092c <MCP23017_IO2_ReadReg>:
 *@Params: Register to read from, data buffer to read into, length of data in bytes
 *@Return: Err if read fails, Ok otherwise
 *@Precondition: I2C Bus must be initialized
 *@Postcondition: Data buffer will contain data from device (w/ Address2) register
 **************************************//**************************************/
static MCP23017_Status_t MCP23017_IO2_ReadReg(uint8_t RegAddr, uint8_t *Data, uint8_t Length){
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
 8000932:	4603      	mov	r3, r0
 8000934:	6039      	str	r1, [r7, #0]
 8000936:	71fb      	strb	r3, [r7, #7]
 8000938:	4613      	mov	r3, r2
 800093a:	71bb      	strb	r3, [r7, #6]
	static const uint8_t address = MCP23017_Address2;
	return MCP23017_IO_ReadReg(address, RegAddr, Data, Length);
 800093c:	4b05      	ldr	r3, [pc, #20]	; (8000954 <MCP23017_IO2_ReadReg+0x28>)
 800093e:	7818      	ldrb	r0, [r3, #0]
 8000940:	79bb      	ldrb	r3, [r7, #6]
 8000942:	79f9      	ldrb	r1, [r7, #7]
 8000944:	683a      	ldr	r2, [r7, #0]
 8000946:	f7ff ffa3 	bl	8000890 <MCP23017_IO_ReadReg>
 800094a:	4603      	mov	r3, r0
}
 800094c:	4618      	mov	r0, r3
 800094e:	3708      	adds	r7, #8
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	0800d26d 	.word	0x0800d26d

08000958 <ButtonInit>:
 *@Params: Init struct with settings, Handle to initialized, low level IO driver
 *@Return: None
 *@Precondition: None
 *@Postcondition: Button handle will be initialized and ready to use
 **************************************//**************************************/
void ButtonInit(Button_Init_Struct_t Settings, Button_Handle_t *Button, Button_IO_Drv_t IO){
 8000958:	b082      	sub	sp, #8
 800095a:	b590      	push	{r4, r7, lr}
 800095c:	b085      	sub	sp, #20
 800095e:	af00      	add	r7, sp, #0
 8000960:	f107 0408 	add.w	r4, r7, #8
 8000964:	e884 0003 	stmia.w	r4, {r0, r1}
 8000968:	607a      	str	r2, [r7, #4]
 800096a:	627b      	str	r3, [r7, #36]	; 0x24
	Button->IO_Driver.init   = IO.init;
 800096c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	609a      	str	r2, [r3, #8]
	Button->IO_Driver.deinit = IO.deinit;
 8000972:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	60da      	str	r2, [r3, #12]
	Button->IO_Driver.read   = IO.read;
 8000978:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	611a      	str	r2, [r3, #16]
	Button->IO_Driver.write  = IO.write;
 800097e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	615a      	str	r2, [r3, #20]
	Button->IO_Driver.ioctl  = IO.ioctl;
 8000984:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	619a      	str	r2, [r3, #24]
	Button->IO_Driver.init();
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	689b      	ldr	r3, [r3, #8]
 800098e:	4798      	blx	r3

	Button->ButtonIDNumber = Settings.ButtonIDNumber;
 8000990:	7a3a      	ldrb	r2, [r7, #8]
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	701a      	strb	r2, [r3, #0]
	Button->KeyFunction = Settings.KeyFunction;
 8000996:	7a7a      	ldrb	r2, [r7, #9]
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	705a      	strb	r2, [r3, #1]
	Button->ModKeyFunction = Settings.ModKeyFunction;
 800099c:	7aba      	ldrb	r2, [r7, #10]
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	709a      	strb	r2, [r3, #2]
	Button->MouseFunction = Settings.MouseFunction;
 80009a2:	7afa      	ldrb	r2, [r7, #11]
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	70da      	strb	r2, [r3, #3]
	Button->State = ButtonUnpressed;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	2200      	movs	r2, #0
 80009ac:	715a      	strb	r2, [r3, #5]
}
 80009ae:	bf00      	nop
 80009b0:	3714      	adds	r7, #20
 80009b2:	46bd      	mov	sp, r7
 80009b4:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80009b8:	b002      	add	sp, #8
 80009ba:	4770      	bx	lr

080009bc <ButtonRead>:
 *@Params: Button handle to read
 *@Return: ButtonChanged if the button changed states, otherwise ButtonUnchanged
 *@Precondition: ButtonHandle should be initialized/
 *@Postcondition: ButtonState in the ButtonHandle will be updated.
 **************************************//**************************************/
ButtonStatus_t ButtonRead(Button_Handle_t *Button){
 80009bc:	b580      	push	{r7, lr}
 80009be:	b084      	sub	sp, #16
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
    ButtonState_t Previous_State = Button->State;
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	795b      	ldrb	r3, [r3, #5]
 80009c8:	73fb      	strb	r3, [r7, #15]
    Button->State = Button->IO_Driver.read(Button->ButtonIDNumber);
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	691b      	ldr	r3, [r3, #16]
 80009ce:	687a      	ldr	r2, [r7, #4]
 80009d0:	7812      	ldrb	r2, [r2, #0]
 80009d2:	4610      	mov	r0, r2
 80009d4:	4798      	blx	r3
 80009d6:	4603      	mov	r3, r0
 80009d8:	461a      	mov	r2, r3
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	715a      	strb	r2, [r3, #5]
    if(Previous_State != Button->State){
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	795b      	ldrb	r3, [r3, #5]
 80009e2:	7bfa      	ldrb	r2, [r7, #15]
 80009e4:	429a      	cmp	r2, r3
 80009e6:	d001      	beq.n	80009ec <ButtonRead+0x30>
    	return ButtonChanged;
 80009e8:	2300      	movs	r3, #0
 80009ea:	e000      	b.n	80009ee <ButtonRead+0x32>
    } else {
    	return ButtonUnchanged;
 80009ec:	2301      	movs	r3, #1
    }
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	3710      	adds	r7, #16
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
	...

080009f8 <Button_IO_init>:
 *@Params: None
 *@Return: None
 *@Precondition: None
 *@Postcondition: GPIO, I2C, DMA Peripherals and clocks will be enabled and ready to use
 **************************************//**************************************/
static void Button_IO_init(void){
 80009f8:	b5b0      	push	{r4, r5, r7, lr}
 80009fa:	b08a      	sub	sp, #40	; 0x28
 80009fc:	af06      	add	r7, sp, #24
	const MCP23017_Init_Struct_t InitSettings = {
 80009fe:	4b2b      	ldr	r3, [pc, #172]	; (8000aac <Button_IO_init+0xb4>)
 8000a00:	881b      	ldrh	r3, [r3, #0]
 8000a02:	803b      	strh	r3, [r7, #0]
 8000a04:	4b29      	ldr	r3, [pc, #164]	; (8000aac <Button_IO_init+0xb4>)
 8000a06:	881b      	ldrh	r3, [r3, #0]
 8000a08:	807b      	strh	r3, [r7, #2]
 8000a0a:	4b29      	ldr	r3, [pc, #164]	; (8000ab0 <Button_IO_init+0xb8>)
 8000a0c:	881b      	ldrh	r3, [r3, #0]
 8000a0e:	80bb      	strh	r3, [r7, #4]
 8000a10:	4b27      	ldr	r3, [pc, #156]	; (8000ab0 <Button_IO_init+0xb8>)
 8000a12:	881b      	ldrh	r3, [r3, #0]
 8000a14:	80fb      	strh	r3, [r7, #6]
 8000a16:	4b26      	ldr	r3, [pc, #152]	; (8000ab0 <Button_IO_init+0xb8>)
 8000a18:	881b      	ldrh	r3, [r3, #0]
 8000a1a:	813b      	strh	r3, [r7, #8]
 8000a1c:	4b23      	ldr	r3, [pc, #140]	; (8000aac <Button_IO_init+0xb4>)
 8000a1e:	881b      	ldrh	r3, [r3, #0]
 8000a20:	817b      	strh	r3, [r7, #10]
 8000a22:	2300      	movs	r3, #0
 8000a24:	733b      	strb	r3, [r7, #12]
			.Mode = MCP23017_AllPins,
			.PullUp = MCP23017_AllPins,
			.Polarity = MCP23017_AllPins
	};

	if(initialize_status == ButtonIO_Uninitialized){
 8000a26:	4b23      	ldr	r3, [pc, #140]	; (8000ab4 <Button_IO_init+0xbc>)
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d139      	bne.n	8000aa2 <Button_IO_init+0xaa>
	    MCP23017_Init(InitSettings, &Expander[0], MCP23017_IO1_Drv);
 8000a2e:	4b22      	ldr	r3, [pc, #136]	; (8000ab8 <Button_IO_init+0xc0>)
 8000a30:	ac01      	add	r4, sp, #4
 8000a32:	461d      	mov	r5, r3
 8000a34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a38:	682b      	ldr	r3, [r5, #0]
 8000a3a:	6023      	str	r3, [r4, #0]
 8000a3c:	4b1f      	ldr	r3, [pc, #124]	; (8000abc <Button_IO_init+0xc4>)
 8000a3e:	9300      	str	r3, [sp, #0]
 8000a40:	463b      	mov	r3, r7
 8000a42:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a44:	f7ff fd9e 	bl	8000584 <MCP23017_Init>
	    MCP23017_Init(InitSettings, &Expander[1], MCP23017_IO2_Drv);
 8000a48:	4b1d      	ldr	r3, [pc, #116]	; (8000ac0 <Button_IO_init+0xc8>)
 8000a4a:	ac01      	add	r4, sp, #4
 8000a4c:	461d      	mov	r5, r3
 8000a4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a52:	682b      	ldr	r3, [r5, #0]
 8000a54:	6023      	str	r3, [r4, #0]
 8000a56:	4b1b      	ldr	r3, [pc, #108]	; (8000ac4 <Button_IO_init+0xcc>)
 8000a58:	9300      	str	r3, [sp, #0]
 8000a5a:	463b      	mov	r3, r7
 8000a5c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a5e:	f7ff fd91 	bl	8000584 <MCP23017_Init>
	    MCP23017_Init(InitSettings, &Expander[2], MCP23017_IO3_Drv);
 8000a62:	4b19      	ldr	r3, [pc, #100]	; (8000ac8 <Button_IO_init+0xd0>)
 8000a64:	ac01      	add	r4, sp, #4
 8000a66:	461d      	mov	r5, r3
 8000a68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a6c:	682b      	ldr	r3, [r5, #0]
 8000a6e:	6023      	str	r3, [r4, #0]
 8000a70:	4b16      	ldr	r3, [pc, #88]	; (8000acc <Button_IO_init+0xd4>)
 8000a72:	9300      	str	r3, [sp, #0]
 8000a74:	463b      	mov	r3, r7
 8000a76:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a78:	f7ff fd84 	bl	8000584 <MCP23017_Init>
	    MCP23017_Init(InitSettings, &Expander[3], MCP23017_IO4_Drv);
 8000a7c:	4b14      	ldr	r3, [pc, #80]	; (8000ad0 <Button_IO_init+0xd8>)
 8000a7e:	ac01      	add	r4, sp, #4
 8000a80:	461d      	mov	r5, r3
 8000a82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a84:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a86:	682b      	ldr	r3, [r5, #0]
 8000a88:	6023      	str	r3, [r4, #0]
 8000a8a:	4b12      	ldr	r3, [pc, #72]	; (8000ad4 <Button_IO_init+0xdc>)
 8000a8c:	9300      	str	r3, [sp, #0]
 8000a8e:	463b      	mov	r3, r7
 8000a90:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a92:	f7ff fd77 	bl	8000584 <MCP23017_Init>
	    MCP23017_ReadPins(&Expander[0]); //Start the Button-Read-DMA Engine
 8000a96:	4809      	ldr	r0, [pc, #36]	; (8000abc <Button_IO_init+0xc4>)
 8000a98:	f7ff fe9e 	bl	80007d8 <MCP23017_ReadPins>
	    initialize_status = ButtonIO_Initialized;
 8000a9c:	4b05      	ldr	r3, [pc, #20]	; (8000ab4 <Button_IO_init+0xbc>)
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	701a      	strb	r2, [r3, #0]
	}
}
 8000aa2:	bf00      	nop
 8000aa4:	3710      	adds	r7, #16
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bdb0      	pop	{r4, r5, r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	0800d216 	.word	0x0800d216
 8000ab0:	0800d218 	.word	0x0800d218
 8000ab4:	20000188 	.word	0x20000188
 8000ab8:	0800d21c 	.word	0x0800d21c
 8000abc:	2000018c 	.word	0x2000018c
 8000ac0:	0800d230 	.word	0x0800d230
 8000ac4:	200001a4 	.word	0x200001a4
 8000ac8:	0800d244 	.word	0x0800d244
 8000acc:	200001bc 	.word	0x200001bc
 8000ad0:	0800d258 	.word	0x0800d258
 8000ad4:	200001d4 	.word	0x200001d4

08000ad8 <Button_IO_deinit>:

static void Button_IO_deinit(void){
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0

	if(initialize_status == ButtonIO_Initialized){
 8000adc:	4b0a      	ldr	r3, [pc, #40]	; (8000b08 <Button_IO_deinit+0x30>)
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	2b01      	cmp	r3, #1
 8000ae2:	d10e      	bne.n	8000b02 <Button_IO_deinit+0x2a>
	    MCP23017_DeInit(&Expander[0]);
 8000ae4:	4809      	ldr	r0, [pc, #36]	; (8000b0c <Button_IO_deinit+0x34>)
 8000ae6:	f7ff fddb 	bl	80006a0 <MCP23017_DeInit>
	    MCP23017_DeInit(&Expander[1]);
 8000aea:	4809      	ldr	r0, [pc, #36]	; (8000b10 <Button_IO_deinit+0x38>)
 8000aec:	f7ff fdd8 	bl	80006a0 <MCP23017_DeInit>
	    MCP23017_DeInit(&Expander[2]);
 8000af0:	4808      	ldr	r0, [pc, #32]	; (8000b14 <Button_IO_deinit+0x3c>)
 8000af2:	f7ff fdd5 	bl	80006a0 <MCP23017_DeInit>
	    MCP23017_DeInit(&Expander[3]);
 8000af6:	4808      	ldr	r0, [pc, #32]	; (8000b18 <Button_IO_deinit+0x40>)
 8000af8:	f7ff fdd2 	bl	80006a0 <MCP23017_DeInit>
	    initialize_status = ButtonIO_Uninitialized;
 8000afc:	4b02      	ldr	r3, [pc, #8]	; (8000b08 <Button_IO_deinit+0x30>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	701a      	strb	r2, [r3, #0]
	}
}
 8000b02:	bf00      	nop
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	20000188 	.word	0x20000188
 8000b0c:	2000018c 	.word	0x2000018c
 8000b10:	200001a4 	.word	0x200001a4
 8000b14:	200001bc 	.word	0x200001bc
 8000b18:	200001d4 	.word	0x200001d4

08000b1c <Button_IO_Read>:
 *@Params: Number of the button to read
 *@Return: ButtonUnpressed if the button is not pressed, ButtonPressed if it is pressed.
 *@Precondition: Button IO should be initialized
 *@Postcondition: None
 **************************************//**************************************/
static ButtonState_t Button_IO_Read(uint8_t ButtonNumber){
 8000b1c:	b480      	push	{r7}
 8000b1e:	b085      	sub	sp, #20
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	4603      	mov	r3, r0
 8000b24:	71fb      	strb	r3, [r7, #7]
	uint8_t ExpanderNumber = ButtonNumber / PINS_PER_EXPANDER;
 8000b26:	79fb      	ldrb	r3, [r7, #7]
 8000b28:	091b      	lsrs	r3, r3, #4
 8000b2a:	73fb      	strb	r3, [r7, #15]
	if(ExpanderNumber >= NUMBER_OF_IO_EXPANDERS){
 8000b2c:	7bfb      	ldrb	r3, [r7, #15]
 8000b2e:	2b03      	cmp	r3, #3
 8000b30:	d901      	bls.n	8000b36 <Button_IO_Read+0x1a>
		return ButtonUnpressed;
 8000b32:	2300      	movs	r3, #0
 8000b34:	e018      	b.n	8000b68 <Button_IO_Read+0x4c>
	}

    uint16_t ButtonStates = Expander[ExpanderNumber].PinStates;
 8000b36:	7bfa      	ldrb	r2, [r7, #15]
 8000b38:	490e      	ldr	r1, [pc, #56]	; (8000b74 <Button_IO_Read+0x58>)
 8000b3a:	4613      	mov	r3, r2
 8000b3c:	005b      	lsls	r3, r3, #1
 8000b3e:	4413      	add	r3, r2
 8000b40:	00db      	lsls	r3, r3, #3
 8000b42:	440b      	add	r3, r1
 8000b44:	881b      	ldrh	r3, [r3, #0]
 8000b46:	81bb      	strh	r3, [r7, #12]
    uint16_t ButtonPosition = ButtonNumber % PINS_PER_EXPANDER;
 8000b48:	79fb      	ldrb	r3, [r7, #7]
 8000b4a:	b29b      	uxth	r3, r3
 8000b4c:	f003 030f 	and.w	r3, r3, #15
 8000b50:	817b      	strh	r3, [r7, #10]
    if((ButtonStates & (1 << ButtonPosition)) != 0){
 8000b52:	89ba      	ldrh	r2, [r7, #12]
 8000b54:	897b      	ldrh	r3, [r7, #10]
 8000b56:	fa42 f303 	asr.w	r3, r2, r3
 8000b5a:	f003 0301 	and.w	r3, r3, #1
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <Button_IO_Read+0x4a>
    	return ButtonPressed;
 8000b62:	2301      	movs	r3, #1
 8000b64:	e000      	b.n	8000b68 <Button_IO_Read+0x4c>
    } else {
    	return ButtonUnpressed;
 8000b66:	2300      	movs	r3, #0
    }
}
 8000b68:	4618      	mov	r0, r3
 8000b6a:	3714      	adds	r7, #20
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr
 8000b74:	2000018c 	.word	0x2000018c

08000b78 <HAL_I2C_MemRxCpltCallback>:
 *@Params: I2C Handle used to communicate with MCP23017 IC
 *@Return: None
 *@Precondition: Button IO should be initialized.
 *@Postcondition: MCP23017 Pin states will be updated.
 **************************************//**************************************/
void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c){
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
	static uint8_t counter = 1;
	MCP23017_ReadPins(&Expander[counter % NUMBER_OF_IO_EXPANDERS]);
 8000b80:	4b0b      	ldr	r3, [pc, #44]	; (8000bb0 <HAL_I2C_MemRxCpltCallback+0x38>)
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	f003 0203 	and.w	r2, r3, #3
 8000b88:	4613      	mov	r3, r2
 8000b8a:	005b      	lsls	r3, r3, #1
 8000b8c:	4413      	add	r3, r2
 8000b8e:	00db      	lsls	r3, r3, #3
 8000b90:	4a08      	ldr	r2, [pc, #32]	; (8000bb4 <HAL_I2C_MemRxCpltCallback+0x3c>)
 8000b92:	4413      	add	r3, r2
 8000b94:	4618      	mov	r0, r3
 8000b96:	f7ff fe1f 	bl	80007d8 <MCP23017_ReadPins>
	counter++;
 8000b9a:	4b05      	ldr	r3, [pc, #20]	; (8000bb0 <HAL_I2C_MemRxCpltCallback+0x38>)
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	3301      	adds	r3, #1
 8000ba0:	b2da      	uxtb	r2, r3
 8000ba2:	4b03      	ldr	r3, [pc, #12]	; (8000bb0 <HAL_I2C_MemRxCpltCallback+0x38>)
 8000ba4:	701a      	strb	r2, [r3, #0]
}
 8000ba6:	bf00      	nop
 8000ba8:	3708      	adds	r7, #8
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	20000000 	.word	0x20000000
 8000bb4:	2000018c 	.word	0x2000018c

08000bb8 <JoystickInit>:
 *@Params: Init struct with desired user settings, Joystick handle to initialize, Low level IO Driver
 *@Return: None
 *@Precondition: None
 *@Postcondition: Joystick handle and low level hardware will be initialized and ready to use.
 **************************************//**************************************/
void JoystickInit(Joystick_Init_Struct_t Settings, Joystick_Handle_t *Joystick, Joystick_IO_Drv_t IO){
 8000bb8:	b084      	sub	sp, #16
 8000bba:	b580      	push	{r7, lr}
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	f107 0c08 	add.w	ip, r7, #8
 8000bc2:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	Joystick->IO_Driver.init = IO.init;
 8000bc6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bca:	62da      	str	r2, [r3, #44]	; 0x2c
	Joystick->IO_Driver.deinit = IO.deinit;
 8000bcc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bd0:	631a      	str	r2, [r3, #48]	; 0x30
	Joystick->IO_Driver.read = IO.read;
 8000bd2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bd6:	635a      	str	r2, [r3, #52]	; 0x34
	Joystick->IO_Driver.write = IO.write;
 8000bd8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bdc:	639a      	str	r2, [r3, #56]	; 0x38
	Joystick->IO_Driver.ioctl = IO.ioctl;
 8000bde:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000be2:	63da      	str	r2, [r3, #60]	; 0x3c
	Joystick->IO_Driver.init();
 8000be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000be8:	4798      	blx	r3

	Joystick->DeadZone          = Settings.DeadZone;
 8000bea:	893a      	ldrh	r2, [r7, #8]
 8000bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bee:	80da      	strh	r2, [r3, #6]
	Joystick->UpFunction        = Settings.UpFunction;
 8000bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bf2:	3311      	adds	r3, #17
 8000bf4:	f107 0213 	add.w	r2, r7, #19
 8000bf8:	6812      	ldr	r2, [r2, #0]
 8000bfa:	601a      	str	r2, [r3, #0]
	Joystick->LeftFunction      = Settings.LeftFunction;
 8000bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bfe:	3319      	adds	r3, #25
 8000c00:	f107 021b 	add.w	r2, r7, #27
 8000c04:	6812      	ldr	r2, [r2, #0]
 8000c06:	601a      	str	r2, [r3, #0]
	Joystick->RightFunction     = Settings.RightFunction;
 8000c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c0a:	3309      	adds	r3, #9
 8000c0c:	f107 020b 	add.w	r2, r7, #11
 8000c10:	6812      	ldr	r2, [r2, #0]
 8000c12:	601a      	str	r2, [r3, #0]
	Joystick->UpRightFunction   = Settings.UpRightFunction;
 8000c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c16:	330d      	adds	r3, #13
 8000c18:	f107 020f 	add.w	r2, r7, #15
 8000c1c:	6812      	ldr	r2, [r2, #0]
 8000c1e:	601a      	str	r2, [r3, #0]
	Joystick->UpLeftFunction    = Settings.UpLeftFunction;
 8000c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c22:	3315      	adds	r3, #21
 8000c24:	f107 0217 	add.w	r2, r7, #23
 8000c28:	6812      	ldr	r2, [r2, #0]
 8000c2a:	601a      	str	r2, [r3, #0]
	Joystick->DownFunction      = Settings.DownFunction;
 8000c2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c2e:	3321      	adds	r3, #33	; 0x21
 8000c30:	f107 0223 	add.w	r2, r7, #35	; 0x23
 8000c34:	6812      	ldr	r2, [r2, #0]
 8000c36:	601a      	str	r2, [r3, #0]
	Joystick->DownLeftFunction  = Settings.DownLeftFunction;
 8000c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c3a:	331d      	adds	r3, #29
 8000c3c:	f107 021f 	add.w	r2, r7, #31
 8000c40:	6812      	ldr	r2, [r2, #0]
 8000c42:	601a      	str	r2, [r3, #0]
	Joystick->DownRightFunction = Settings.DownRightFunction;
 8000c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c46:	3325      	adds	r3, #37	; 0x25
 8000c48:	f107 0227 	add.w	r2, r7, #39	; 0x27
 8000c4c:	6812      	ldr	r2, [r2, #0]
 8000c4e:	601a      	str	r2, [r3, #0]
	Joystick->Mode = Settings.Mode;
 8000c50:	7aba      	ldrb	r2, [r7, #10]
 8000c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c54:	721a      	strb	r2, [r3, #8]
	Joystick->Position = JoystickNeutral;
 8000c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c58:	2200      	movs	r2, #0
 8000c5a:	711a      	strb	r2, [r3, #4]
	Joystick->X_PosRaw = 0;
 8000c5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c5e:	2200      	movs	r2, #0
 8000c60:	801a      	strh	r2, [r3, #0]
	Joystick->Y_PosRaw = 0;
 8000c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c64:	2200      	movs	r2, #0
 8000c66:	805a      	strh	r2, [r3, #2]
}
 8000c68:	bf00      	nop
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000c70:	b004      	add	sp, #16
 8000c72:	4770      	bx	lr

08000c74 <JoystickRead>:
 *@Params: Joystick Handle
 *@Return: JoystickChanged if previous position != new position. Uses XPosRaw/YPosRaw in analog mode
 *@Precondition: JoystickHandle must be initialized
 *@Postcondition: Joystick XPosRaw/YPosRaw/State will be updated.
 **************************************//**************************************/
JoystickStatus_t JoystickRead(Joystick_Handle_t *Joystick){
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b084      	sub	sp, #16
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
	JoystickState_t PreviousState = Joystick->Position;
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	791b      	ldrb	r3, [r3, #4]
 8000c80:	73fb      	strb	r3, [r7, #15]
	int16_t PreviousX = Joystick->X_PosRaw;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	881b      	ldrh	r3, [r3, #0]
 8000c86:	81bb      	strh	r3, [r7, #12]
	int16_t PreviousY = Joystick->Y_PosRaw;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	885b      	ldrh	r3, [r3, #2]
 8000c8c:	817b      	strh	r3, [r7, #10]
	Joystick->Position = Joystick->IO_Driver.read(Joystick->DeadZone, &Joystick->X_PosRaw, &Joystick->Y_PosRaw);
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c92:	687a      	ldr	r2, [r7, #4]
 8000c94:	88d0      	ldrh	r0, [r2, #6]
 8000c96:	6879      	ldr	r1, [r7, #4]
 8000c98:	687a      	ldr	r2, [r7, #4]
 8000c9a:	3202      	adds	r2, #2
 8000c9c:	4798      	blx	r3
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	461a      	mov	r2, r3
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	711a      	strb	r2, [r3, #4]

	if(Joystick->Mode == Joystick4Way || Joystick->Mode == Joystick8Way){
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	7a1b      	ldrb	r3, [r3, #8]
 8000caa:	2b01      	cmp	r3, #1
 8000cac:	d003      	beq.n	8000cb6 <JoystickRead+0x42>
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	7a1b      	ldrb	r3, [r3, #8]
 8000cb2:	2b02      	cmp	r3, #2
 8000cb4:	d108      	bne.n	8000cc8 <JoystickRead+0x54>
	    if(Joystick->Position != PreviousState){
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	791b      	ldrb	r3, [r3, #4]
 8000cba:	7bfa      	ldrb	r2, [r7, #15]
 8000cbc:	429a      	cmp	r2, r3
 8000cbe:	d001      	beq.n	8000cc4 <JoystickRead+0x50>
		    return JoystickChanged;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	e012      	b.n	8000cea <JoystickRead+0x76>
	    } else {
		    return JoystickUnchanged;
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	e010      	b.n	8000cea <JoystickRead+0x76>
	    }
	}

	if(Joystick->X_PosRaw != PreviousX || Joystick->Y_PosRaw != PreviousY){
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cce:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000cd2:	429a      	cmp	r2, r3
 8000cd4:	d106      	bne.n	8000ce4 <JoystickRead+0x70>
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000cdc:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	d001      	beq.n	8000ce8 <JoystickRead+0x74>
		return JoystickChanged;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	e000      	b.n	8000cea <JoystickRead+0x76>
	} else {
		return JoystickUnchanged;
 8000ce8:	2301      	movs	r3, #1
	}
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	3710      	adds	r7, #16
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
	...

08000cf4 <JoystickIOInit>:
 *@Params: None
 *@Return: None
 *@Precondition: None
 *@Postcondition: Low level hardware will be initialized. (DMA, ADC, GPIO)
 **************************************//**************************************/
static void JoystickIOInit(){
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
	ADC_GPIO_Init();
 8000cf8:	f000 fb5e 	bl	80013b8 <ADC_GPIO_Init>
	ADC_DMA_Init();
 8000cfc:	f000 fad4 	bl	80012a8 <ADC_DMA_Init>
	ADC1_Init();
 8000d00:	f000 fa52 	bl	80011a8 <ADC1_Init>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buffer, 2);
 8000d04:	2202      	movs	r2, #2
 8000d06:	4903      	ldr	r1, [pc, #12]	; (8000d14 <JoystickIOInit+0x20>)
 8000d08:	4803      	ldr	r0, [pc, #12]	; (8000d18 <JoystickIOInit+0x24>)
 8000d0a:	f001 fa25 	bl	8002158 <HAL_ADC_Start_DMA>
}
 8000d0e:	bf00      	nop
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	20000004 	.word	0x20000004
 8000d18:	20000330 	.word	0x20000330

08000d1c <JoystickIODeInit>:
 *@Params: None
 *@Return: None
 *@Precondition: None
 *@Postcondition: DMA transfers from Joystick will be stopped.
 **************************************//**************************************/
static void JoystickIODeInit(void){
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
   HAL_ADC_Stop_DMA(&hadc1);
 8000d20:	4805      	ldr	r0, [pc, #20]	; (8000d38 <JoystickIODeInit+0x1c>)
 8000d22:	f001 fb09 	bl	8002338 <HAL_ADC_Stop_DMA>
   HAL_NVIC_DisableIRQ(DMA2_Stream0_IRQn);
 8000d26:	2038      	movs	r0, #56	; 0x38
 8000d28:	f001 ff75 	bl	8002c16 <HAL_NVIC_DisableIRQ>
   HAL_NVIC_ClearPendingIRQ(DMA2_Stream0_IRQn);
 8000d2c:	2038      	movs	r0, #56	; 0x38
 8000d2e:	f001 ff8c 	bl	8002c4a <HAL_NVIC_ClearPendingIRQ>
}
 8000d32:	bf00      	nop
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	20000330 	.word	0x20000330

08000d3c <JoystickIORead>:
 *@Params: Joystick Deadzone, X Position buffer, Y Position buffer
 *@Return: Position of the joystick
 *@Precondition: Joystick IO should be initialized
 *@Postcondition: X_Pos and Y_Pos will contain raw joystick value.
 **************************************//**************************************/
static JoystickState_t JoystickIORead(uint16_t Deadzone, int16_t *X_Pos, int16_t *Y_Pos){
 8000d3c:	b480      	push	{r7}
 8000d3e:	b087      	sub	sp, #28
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	4603      	mov	r3, r0
 8000d44:	60b9      	str	r1, [r7, #8]
 8000d46:	607a      	str	r2, [r7, #4]
 8000d48:	81fb      	strh	r3, [r7, #14]
	//Handle Deadzone values that are too large.
    if(Deadzone > INT16_MAX - 1){
 8000d4a:	89fb      	ldrh	r3, [r7, #14]
 8000d4c:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8000d50:	4293      	cmp	r3, r2
 8000d52:	d902      	bls.n	8000d5a <JoystickIORead+0x1e>
    	Deadzone = INT16_MAX - 1;
 8000d54:	f647 73fe 	movw	r3, #32766	; 0x7ffe
 8000d58:	81fb      	strh	r3, [r7, #14]
    }

    //Calculate X Position
	int16_t temp = adc_buffer[ADC_X_INDEX] - 2048;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	461a      	mov	r2, r3
 8000d5e:	4b66      	ldr	r3, [pc, #408]	; (8000ef8 <JoystickIORead+0x1bc>)
 8000d60:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000d64:	b21b      	sxth	r3, r3
 8000d66:	b29b      	uxth	r3, r3
 8000d68:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8000d6c:	b29b      	uxth	r3, r3
 8000d6e:	82fb      	strh	r3, [r7, #22]
	if(temp > ADC_UPPER_LIMIT){
 8000d70:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000d74:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000d78:	4293      	cmp	r3, r2
 8000d7a:	dd03      	ble.n	8000d84 <JoystickIORead+0x48>
		temp = ADC_UPPER_LIMIT;
 8000d7c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000d80:	82fb      	strh	r3, [r7, #22]
 8000d82:	e007      	b.n	8000d94 <JoystickIORead+0x58>
	} else if (temp < ADC_LOWER_LIMIT){
 8000d84:	4a5d      	ldr	r2, [pc, #372]	; (8000efc <JoystickIORead+0x1c0>)
 8000d86:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	da02      	bge.n	8000d94 <JoystickIORead+0x58>
		temp = ADC_LOWER_LIMIT;
 8000d8e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000d92:	82fb      	strh	r3, [r7, #22]
	}
	temp = temp * 16; //convert to 16 bit number
 8000d94:	8afb      	ldrh	r3, [r7, #22]
 8000d96:	011b      	lsls	r3, r3, #4
 8000d98:	b29b      	uxth	r3, r3
 8000d9a:	82fb      	strh	r3, [r7, #22]
	if(temp > Deadzone || temp < -(int16_t)Deadzone){
 8000d9c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8000da0:	89fb      	ldrh	r3, [r7, #14]
 8000da2:	429a      	cmp	r2, r3
 8000da4:	dc06      	bgt.n	8000db4 <JoystickIORead+0x78>
 8000da6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8000daa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000dae:	425b      	negs	r3, r3
 8000db0:	429a      	cmp	r2, r3
 8000db2:	da03      	bge.n	8000dbc <JoystickIORead+0x80>
	    *X_Pos = temp;
 8000db4:	68bb      	ldr	r3, [r7, #8]
 8000db6:	8afa      	ldrh	r2, [r7, #22]
 8000db8:	801a      	strh	r2, [r3, #0]
 8000dba:	e002      	b.n	8000dc2 <JoystickIORead+0x86>
	} else {
        *X_Pos = 0;
 8000dbc:	68bb      	ldr	r3, [r7, #8]
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	801a      	strh	r2, [r3, #0]
	}

	//Calculate Y Position
	temp = adc_buffer[ADC_Y_INDEX] - 2048;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	461a      	mov	r2, r3
 8000dc6:	4b4c      	ldr	r3, [pc, #304]	; (8000ef8 <JoystickIORead+0x1bc>)
 8000dc8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000dcc:	b21b      	sxth	r3, r3
 8000dce:	b29b      	uxth	r3, r3
 8000dd0:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8000dd4:	b29b      	uxth	r3, r3
 8000dd6:	82fb      	strh	r3, [r7, #22]
	if(temp > ADC_UPPER_LIMIT){
 8000dd8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000ddc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000de0:	4293      	cmp	r3, r2
 8000de2:	dd03      	ble.n	8000dec <JoystickIORead+0xb0>
		temp = ADC_UPPER_LIMIT;
 8000de4:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000de8:	82fb      	strh	r3, [r7, #22]
 8000dea:	e007      	b.n	8000dfc <JoystickIORead+0xc0>
	} else if (temp < ADC_LOWER_LIMIT){
 8000dec:	4a43      	ldr	r2, [pc, #268]	; (8000efc <JoystickIORead+0x1c0>)
 8000dee:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000df2:	4293      	cmp	r3, r2
 8000df4:	da02      	bge.n	8000dfc <JoystickIORead+0xc0>
		temp = ADC_LOWER_LIMIT;
 8000df6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000dfa:	82fb      	strh	r3, [r7, #22]
	}
	temp = temp * 16; //convert to 16 bit number
 8000dfc:	8afb      	ldrh	r3, [r7, #22]
 8000dfe:	011b      	lsls	r3, r3, #4
 8000e00:	b29b      	uxth	r3, r3
 8000e02:	82fb      	strh	r3, [r7, #22]
	if(temp > Deadzone || temp < -(int16_t)Deadzone){
 8000e04:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8000e08:	89fb      	ldrh	r3, [r7, #14]
 8000e0a:	429a      	cmp	r2, r3
 8000e0c:	dc06      	bgt.n	8000e1c <JoystickIORead+0xe0>
 8000e0e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8000e12:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000e16:	425b      	negs	r3, r3
 8000e18:	429a      	cmp	r2, r3
 8000e1a:	da03      	bge.n	8000e24 <JoystickIORead+0xe8>
	    *Y_Pos = temp;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	8afa      	ldrh	r2, [r7, #22]
 8000e20:	801a      	strh	r2, [r3, #0]
 8000e22:	e002      	b.n	8000e2a <JoystickIORead+0xee>
	} else {
        *Y_Pos = 0;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	2200      	movs	r2, #0
 8000e28:	801a      	strh	r2, [r3, #0]
	}

	if(*X_Pos == 0 && *Y_Pos == 0){
 8000e2a:	68bb      	ldr	r3, [r7, #8]
 8000e2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d106      	bne.n	8000e42 <JoystickIORead+0x106>
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d101      	bne.n	8000e42 <JoystickIORead+0x106>
		return JoystickNeutral;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	e054      	b.n	8000eec <JoystickIORead+0x1b0>
	} else if(*X_Pos > 0 && *Y_Pos == 0){
 8000e42:	68bb      	ldr	r3, [r7, #8]
 8000e44:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	dd06      	ble.n	8000e5a <JoystickIORead+0x11e>
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d101      	bne.n	8000e5a <JoystickIORead+0x11e>
		return Joystick_Right;
 8000e56:	2301      	movs	r3, #1
 8000e58:	e048      	b.n	8000eec <JoystickIORead+0x1b0>

	} else if(*X_Pos > 0 && *Y_Pos > 0){
 8000e5a:	68bb      	ldr	r3, [r7, #8]
 8000e5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	dd06      	ble.n	8000e72 <JoystickIORead+0x136>
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	dd01      	ble.n	8000e72 <JoystickIORead+0x136>
		return Joystick_UpRight;
 8000e6e:	2302      	movs	r3, #2
 8000e70:	e03c      	b.n	8000eec <JoystickIORead+0x1b0>

	} else if(*X_Pos == 0 && *Y_Pos > 0){
 8000e72:	68bb      	ldr	r3, [r7, #8]
 8000e74:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d106      	bne.n	8000e8a <JoystickIORead+0x14e>
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	dd01      	ble.n	8000e8a <JoystickIORead+0x14e>
		return Joystick_Up;
 8000e86:	2303      	movs	r3, #3
 8000e88:	e030      	b.n	8000eec <JoystickIORead+0x1b0>

	} else if(*X_Pos < 0 && *Y_Pos > 0){
 8000e8a:	68bb      	ldr	r3, [r7, #8]
 8000e8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	da06      	bge.n	8000ea2 <JoystickIORead+0x166>
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	dd01      	ble.n	8000ea2 <JoystickIORead+0x166>
		return Joystick_UpLeft;
 8000e9e:	2304      	movs	r3, #4
 8000ea0:	e024      	b.n	8000eec <JoystickIORead+0x1b0>

	} else if(*X_Pos < 0 && *Y_Pos == 0){
 8000ea2:	68bb      	ldr	r3, [r7, #8]
 8000ea4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	da06      	bge.n	8000eba <JoystickIORead+0x17e>
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d101      	bne.n	8000eba <JoystickIORead+0x17e>
		return Joystick_Left;
 8000eb6:	2305      	movs	r3, #5
 8000eb8:	e018      	b.n	8000eec <JoystickIORead+0x1b0>

	} else if(*X_Pos < 0 && *Y_Pos < 0){
 8000eba:	68bb      	ldr	r3, [r7, #8]
 8000ebc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	da06      	bge.n	8000ed2 <JoystickIORead+0x196>
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	da01      	bge.n	8000ed2 <JoystickIORead+0x196>
		return Joystick_DownLeft;
 8000ece:	2306      	movs	r3, #6
 8000ed0:	e00c      	b.n	8000eec <JoystickIORead+0x1b0>

	} else if(*X_Pos == 0 && *Y_Pos < 0){
 8000ed2:	68bb      	ldr	r3, [r7, #8]
 8000ed4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d106      	bne.n	8000eea <JoystickIORead+0x1ae>
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	da01      	bge.n	8000eea <JoystickIORead+0x1ae>
		return Joystick_Down;
 8000ee6:	2307      	movs	r3, #7
 8000ee8:	e000      	b.n	8000eec <JoystickIORead+0x1b0>
	}
	else{
		return Joystick_DownRight;
 8000eea:	2308      	movs	r3, #8
	}

}
 8000eec:	4618      	mov	r0, r3
 8000eee:	371c      	adds	r7, #28
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr
 8000ef8:	20000004 	.word	0x20000004
 8000efc:	fffff800 	.word	0xfffff800

08000f00 <SerialLEDInit>:
 *  Created on: May 22, 2022
 *      Author: evanl
 */
#include "SerialLED.h"

void SerialLEDInit(SerialLED_InitStruct_t Settings, SerialLED_Handle_t *LED, SerialLED_IO_Drv_t IO){
 8000f00:	b082      	sub	sp, #8
 8000f02:	b5b0      	push	{r4, r5, r7, lr}
 8000f04:	b084      	sub	sp, #16
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	f107 0408 	add.w	r4, r7, #8
 8000f0c:	e884 0003 	stmia.w	r4, {r0, r1}
 8000f10:	607a      	str	r2, [r7, #4]
 8000f12:	627b      	str	r3, [r7, #36]	; 0x24
    LED->IO_Driver = IO;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	f103 0408 	add.w	r4, r3, #8
 8000f1a:	f107 0524 	add.w	r5, r7, #36	; 0x24
 8000f1e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f20:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f22:	682b      	ldr	r3, [r5, #0]
 8000f24:	6023      	str	r3, [r4, #0]
    LED->Address = Settings.address;
 8000f26:	893a      	ldrh	r2, [r7, #8]
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	801a      	strh	r2, [r3, #0]
    LED->red = Settings.red;
 8000f2c:	7afa      	ldrb	r2, [r7, #11]
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	70da      	strb	r2, [r3, #3]
    LED->green = Settings.green;
 8000f32:	7aba      	ldrb	r2, [r7, #10]
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	709a      	strb	r2, [r3, #2]
    LED->blue = Settings.blue;
 8000f38:	7b3a      	ldrb	r2, [r7, #12]
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	711a      	strb	r2, [r3, #4]
    LED->IO_Driver.init();
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	689b      	ldr	r3, [r3, #8]
 8000f42:	4798      	blx	r3
    LED->IO_Driver.write(LED->Address, LED->red, LED->green, LED->blue);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	695c      	ldr	r4, [r3, #20]
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	8818      	ldrh	r0, [r3, #0]
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	78d9      	ldrb	r1, [r3, #3]
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	789a      	ldrb	r2, [r3, #2]
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	791b      	ldrb	r3, [r3, #4]
 8000f58:	47a0      	blx	r4
}
 8000f5a:	bf00      	nop
 8000f5c:	3710      	adds	r7, #16
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8000f64:	b002      	add	sp, #8
 8000f66:	4770      	bx	lr

08000f68 <SerialLED_IO_Init>:
//static const uint8_t TIM_PERIOD = 119;     //1.25uS with 96MHz clock
static const uint8_t ZERO_DUTY_CYCLE = 28; //.3uS
static const uint8_t ONE_DUTY_CYCLE = 58;  //.6uS
static const uint8_t RESET_DUTY_CYCLE = 0;

static void SerialLED_IO_Init(void){
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
	//ensure reset signal is 0
	for(uint32_t i = NUMBER_OF_LEDS * BITS_PER_LED; i < LED_DMA_BUFFER_LENGTH; i++){
 8000f6e:	2360      	movs	r3, #96	; 0x60
 8000f70:	607b      	str	r3, [r7, #4]
 8000f72:	e008      	b.n	8000f86 <SerialLED_IO_Init+0x1e>
		LED_DMA_BUFFER[i] = RESET_DUTY_CYCLE;
 8000f74:	2300      	movs	r3, #0
 8000f76:	b299      	uxth	r1, r3
 8000f78:	4a0d      	ldr	r2, [pc, #52]	; (8000fb0 <SerialLED_IO_Init+0x48>)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(uint32_t i = NUMBER_OF_LEDS * BITS_PER_LED; i < LED_DMA_BUFFER_LENGTH; i++){
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	3301      	adds	r3, #1
 8000f84:	607b      	str	r3, [r7, #4]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2b9f      	cmp	r3, #159	; 0x9f
 8000f8a:	d9f3      	bls.n	8000f74 <SerialLED_IO_Init+0xc>
	}
	TIM3_GPIO_Init();
 8000f8c:	f000 fa2e 	bl	80013ec <TIM3_GPIO_Init>
	TIM_DMA_Init();
 8000f90:	f000 f9a6 	bl	80012e0 <TIM_DMA_Init>
    if(initialize_status == LED_uninitialized){
 8000f94:	4b07      	ldr	r3, [pc, #28]	; (8000fb4 <SerialLED_IO_Init+0x4c>)
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d104      	bne.n	8000fa6 <SerialLED_IO_Init+0x3e>
	    TIM3_Init();
 8000f9c:	f000 fef0 	bl	8001d80 <TIM3_Init>
	    initialize_status = LED_initialized;
 8000fa0:	4b04      	ldr	r3, [pc, #16]	; (8000fb4 <SerialLED_IO_Init+0x4c>)
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	701a      	strb	r2, [r3, #0]
    }

}
 8000fa6:	bf00      	nop
 8000fa8:	3708      	adds	r7, #8
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	200001ec 	.word	0x200001ec
 8000fb4:	2000032c 	.word	0x2000032c

08000fb8 <SerialLED_IO_DeInit>:

static void SerialLED_IO_DeInit(void){
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop_DMA(&htim3, TIM_CHANNEL_1);
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	4802      	ldr	r0, [pc, #8]	; (8000fc8 <SerialLED_IO_DeInit+0x10>)
 8000fc0:	f005 fd94 	bl	8006aec <HAL_TIM_PWM_Stop_DMA>
}
 8000fc4:	bf00      	nop
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	20000c98 	.word	0x20000c98

08000fcc <SerialLED_IO_Write>:

static void SerialLED_IO_Write(uint16_t Address, uint8_t red, uint8_t green, uint8_t blue){
 8000fcc:	b590      	push	{r4, r7, lr}
 8000fce:	b085      	sub	sp, #20
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	4604      	mov	r4, r0
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	4611      	mov	r1, r2
 8000fd8:	461a      	mov	r2, r3
 8000fda:	4623      	mov	r3, r4
 8000fdc:	80fb      	strh	r3, [r7, #6]
 8000fde:	4603      	mov	r3, r0
 8000fe0:	717b      	strb	r3, [r7, #5]
 8000fe2:	460b      	mov	r3, r1
 8000fe4:	713b      	strb	r3, [r7, #4]
 8000fe6:	4613      	mov	r3, r2
 8000fe8:	70fb      	strb	r3, [r7, #3]
	//HAL_TIM_PWM_Stop_DMA(&htim3, TIM_CHANNEL_1);
    for(uint16_t i = 0; i < 8; i++){
 8000fea:	2300      	movs	r3, #0
 8000fec:	81fb      	strh	r3, [r7, #14]
 8000fee:	e052      	b.n	8001096 <SerialLED_IO_Write+0xca>
    	LED_DMA_BUFFER[(Address * BITS_PER_LED) + 0  + i] = green & (1 << (7 - i)) ? ONE_DUTY_CYCLE : ZERO_DUTY_CYCLE;
 8000ff0:	793a      	ldrb	r2, [r7, #4]
 8000ff2:	89fb      	ldrh	r3, [r7, #14]
 8000ff4:	f1c3 0307 	rsb	r3, r3, #7
 8000ff8:	fa42 f303 	asr.w	r3, r2, r3
 8000ffc:	f003 0301 	and.w	r3, r3, #1
 8001000:	2b00      	cmp	r3, #0
 8001002:	d002      	beq.n	800100a <SerialLED_IO_Write+0x3e>
 8001004:	233a      	movs	r3, #58	; 0x3a
 8001006:	b29a      	uxth	r2, r3
 8001008:	e001      	b.n	800100e <SerialLED_IO_Write+0x42>
 800100a:	231c      	movs	r3, #28
 800100c:	b29a      	uxth	r2, r3
 800100e:	88f9      	ldrh	r1, [r7, #6]
 8001010:	460b      	mov	r3, r1
 8001012:	005b      	lsls	r3, r3, #1
 8001014:	440b      	add	r3, r1
 8001016:	00db      	lsls	r3, r3, #3
 8001018:	4619      	mov	r1, r3
 800101a:	89fb      	ldrh	r3, [r7, #14]
 800101c:	440b      	add	r3, r1
 800101e:	4924      	ldr	r1, [pc, #144]	; (80010b0 <SerialLED_IO_Write+0xe4>)
 8001020:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    	LED_DMA_BUFFER[(Address * BITS_PER_LED) + 8  + i] = red   & (1 << (7 - i)) ? ONE_DUTY_CYCLE : ZERO_DUTY_CYCLE;
 8001024:	797a      	ldrb	r2, [r7, #5]
 8001026:	89fb      	ldrh	r3, [r7, #14]
 8001028:	f1c3 0307 	rsb	r3, r3, #7
 800102c:	fa42 f303 	asr.w	r3, r2, r3
 8001030:	f003 0301 	and.w	r3, r3, #1
 8001034:	2b00      	cmp	r3, #0
 8001036:	d002      	beq.n	800103e <SerialLED_IO_Write+0x72>
 8001038:	233a      	movs	r3, #58	; 0x3a
 800103a:	b29a      	uxth	r2, r3
 800103c:	e001      	b.n	8001042 <SerialLED_IO_Write+0x76>
 800103e:	231c      	movs	r3, #28
 8001040:	b29a      	uxth	r2, r3
 8001042:	88f9      	ldrh	r1, [r7, #6]
 8001044:	460b      	mov	r3, r1
 8001046:	005b      	lsls	r3, r3, #1
 8001048:	440b      	add	r3, r1
 800104a:	00db      	lsls	r3, r3, #3
 800104c:	4619      	mov	r1, r3
 800104e:	89fb      	ldrh	r3, [r7, #14]
 8001050:	440b      	add	r3, r1
 8001052:	3308      	adds	r3, #8
 8001054:	4916      	ldr	r1, [pc, #88]	; (80010b0 <SerialLED_IO_Write+0xe4>)
 8001056:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    	LED_DMA_BUFFER[(Address * BITS_PER_LED) + 16 + i] = blue  & (1 << (7 - i)) ? ONE_DUTY_CYCLE : ZERO_DUTY_CYCLE;
 800105a:	78fa      	ldrb	r2, [r7, #3]
 800105c:	89fb      	ldrh	r3, [r7, #14]
 800105e:	f1c3 0307 	rsb	r3, r3, #7
 8001062:	fa42 f303 	asr.w	r3, r2, r3
 8001066:	f003 0301 	and.w	r3, r3, #1
 800106a:	2b00      	cmp	r3, #0
 800106c:	d002      	beq.n	8001074 <SerialLED_IO_Write+0xa8>
 800106e:	233a      	movs	r3, #58	; 0x3a
 8001070:	b29a      	uxth	r2, r3
 8001072:	e001      	b.n	8001078 <SerialLED_IO_Write+0xac>
 8001074:	231c      	movs	r3, #28
 8001076:	b29a      	uxth	r2, r3
 8001078:	88f9      	ldrh	r1, [r7, #6]
 800107a:	460b      	mov	r3, r1
 800107c:	005b      	lsls	r3, r3, #1
 800107e:	440b      	add	r3, r1
 8001080:	00db      	lsls	r3, r3, #3
 8001082:	4619      	mov	r1, r3
 8001084:	89fb      	ldrh	r3, [r7, #14]
 8001086:	440b      	add	r3, r1
 8001088:	3310      	adds	r3, #16
 800108a:	4909      	ldr	r1, [pc, #36]	; (80010b0 <SerialLED_IO_Write+0xe4>)
 800108c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    for(uint16_t i = 0; i < 8; i++){
 8001090:	89fb      	ldrh	r3, [r7, #14]
 8001092:	3301      	adds	r3, #1
 8001094:	81fb      	strh	r3, [r7, #14]
 8001096:	89fb      	ldrh	r3, [r7, #14]
 8001098:	2b07      	cmp	r3, #7
 800109a:	d9a9      	bls.n	8000ff0 <SerialLED_IO_Write+0x24>
    }
    HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, (uint32_t*)LED_DMA_BUFFER, LED_DMA_BUFFER_LENGTH);
 800109c:	23a0      	movs	r3, #160	; 0xa0
 800109e:	4a04      	ldr	r2, [pc, #16]	; (80010b0 <SerialLED_IO_Write+0xe4>)
 80010a0:	2100      	movs	r1, #0
 80010a2:	4804      	ldr	r0, [pc, #16]	; (80010b4 <SerialLED_IO_Write+0xe8>)
 80010a4:	f005 fb72 	bl	800678c <HAL_TIM_PWM_Start_DMA>
}
 80010a8:	bf00      	nop
 80010aa:	3714      	adds	r7, #20
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd90      	pop	{r4, r7, pc}
 80010b0:	200001ec 	.word	0x200001ec
 80010b4:	20000c98 	.word	0x20000c98

080010b8 <HAL_ADC_MspInit>:
  /* USER CODE END ADC1_Init 2 */

}

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b08a      	sub	sp, #40	; 0x28
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c0:	f107 0314 	add.w	r3, r7, #20
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]
 80010c8:	605a      	str	r2, [r3, #4]
 80010ca:	609a      	str	r2, [r3, #8]
 80010cc:	60da      	str	r2, [r3, #12]
 80010ce:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a2f      	ldr	r2, [pc, #188]	; (8001194 <HAL_ADC_MspInit+0xdc>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d157      	bne.n	800118a <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010da:	2300      	movs	r3, #0
 80010dc:	613b      	str	r3, [r7, #16]
 80010de:	4b2e      	ldr	r3, [pc, #184]	; (8001198 <HAL_ADC_MspInit+0xe0>)
 80010e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010e2:	4a2d      	ldr	r2, [pc, #180]	; (8001198 <HAL_ADC_MspInit+0xe0>)
 80010e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010e8:	6453      	str	r3, [r2, #68]	; 0x44
 80010ea:	4b2b      	ldr	r3, [pc, #172]	; (8001198 <HAL_ADC_MspInit+0xe0>)
 80010ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010f2:	613b      	str	r3, [r7, #16]
 80010f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f6:	2300      	movs	r3, #0
 80010f8:	60fb      	str	r3, [r7, #12]
 80010fa:	4b27      	ldr	r3, [pc, #156]	; (8001198 <HAL_ADC_MspInit+0xe0>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fe:	4a26      	ldr	r2, [pc, #152]	; (8001198 <HAL_ADC_MspInit+0xe0>)
 8001100:	f043 0301 	orr.w	r3, r3, #1
 8001104:	6313      	str	r3, [r2, #48]	; 0x30
 8001106:	4b24      	ldr	r3, [pc, #144]	; (8001198 <HAL_ADC_MspInit+0xe0>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110a:	f003 0301 	and.w	r3, r3, #1
 800110e:	60fb      	str	r3, [r7, #12]
 8001110:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = ADC_VX_Pin|ADC_VY_Pin;
 8001112:	2318      	movs	r3, #24
 8001114:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001116:	2303      	movs	r3, #3
 8001118:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111a:	2300      	movs	r3, #0
 800111c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800111e:	f107 0314 	add.w	r3, r7, #20
 8001122:	4619      	mov	r1, r3
 8001124:	481d      	ldr	r0, [pc, #116]	; (800119c <HAL_ADC_MspInit+0xe4>)
 8001126:	f002 f9ad 	bl	8003484 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800112a:	4b1d      	ldr	r3, [pc, #116]	; (80011a0 <HAL_ADC_MspInit+0xe8>)
 800112c:	4a1d      	ldr	r2, [pc, #116]	; (80011a4 <HAL_ADC_MspInit+0xec>)
 800112e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001130:	4b1b      	ldr	r3, [pc, #108]	; (80011a0 <HAL_ADC_MspInit+0xe8>)
 8001132:	2200      	movs	r2, #0
 8001134:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001136:	4b1a      	ldr	r3, [pc, #104]	; (80011a0 <HAL_ADC_MspInit+0xe8>)
 8001138:	2200      	movs	r2, #0
 800113a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800113c:	4b18      	ldr	r3, [pc, #96]	; (80011a0 <HAL_ADC_MspInit+0xe8>)
 800113e:	2200      	movs	r2, #0
 8001140:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001142:	4b17      	ldr	r3, [pc, #92]	; (80011a0 <HAL_ADC_MspInit+0xe8>)
 8001144:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001148:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800114a:	4b15      	ldr	r3, [pc, #84]	; (80011a0 <HAL_ADC_MspInit+0xe8>)
 800114c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001150:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001152:	4b13      	ldr	r3, [pc, #76]	; (80011a0 <HAL_ADC_MspInit+0xe8>)
 8001154:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001158:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800115a:	4b11      	ldr	r3, [pc, #68]	; (80011a0 <HAL_ADC_MspInit+0xe8>)
 800115c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001160:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001162:	4b0f      	ldr	r3, [pc, #60]	; (80011a0 <HAL_ADC_MspInit+0xe8>)
 8001164:	2200      	movs	r2, #0
 8001166:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001168:	4b0d      	ldr	r3, [pc, #52]	; (80011a0 <HAL_ADC_MspInit+0xe8>)
 800116a:	2200      	movs	r2, #0
 800116c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800116e:	480c      	ldr	r0, [pc, #48]	; (80011a0 <HAL_ADC_MspInit+0xe8>)
 8001170:	f001 fd7a 	bl	8002c68 <HAL_DMA_Init>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800117a:	f000 fb99 	bl	80018b0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	4a07      	ldr	r2, [pc, #28]	; (80011a0 <HAL_ADC_MspInit+0xe8>)
 8001182:	639a      	str	r2, [r3, #56]	; 0x38
 8001184:	4a06      	ldr	r2, [pc, #24]	; (80011a0 <HAL_ADC_MspInit+0xe8>)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800118a:	bf00      	nop
 800118c:	3728      	adds	r7, #40	; 0x28
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	40012000 	.word	0x40012000
 8001198:	40023800 	.word	0x40023800
 800119c:	40020000 	.word	0x40020000
 80011a0:	20000378 	.word	0x20000378
 80011a4:	40026410 	.word	0x40026410

080011a8 <ADC1_Init>:
  /* USER CODE END ADC1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void ADC1_Init(void){
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b084      	sub	sp, #16
 80011ac:	af00      	add	r7, sp, #0
	  ADC_ChannelConfTypeDef sConfig = {0};
 80011ae:	463b      	mov	r3, r7
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	605a      	str	r2, [r3, #4]
 80011b6:	609a      	str	r2, [r3, #8]
 80011b8:	60da      	str	r2, [r3, #12]


	  hadc1.Instance = ADC1;
 80011ba:	4b28      	ldr	r3, [pc, #160]	; (800125c <ADC1_Init+0xb4>)
 80011bc:	4a28      	ldr	r2, [pc, #160]	; (8001260 <ADC1_Init+0xb8>)
 80011be:	601a      	str	r2, [r3, #0]
	  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80011c0:	4b26      	ldr	r3, [pc, #152]	; (800125c <ADC1_Init+0xb4>)
 80011c2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80011c6:	605a      	str	r2, [r3, #4]
	  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80011c8:	4b24      	ldr	r3, [pc, #144]	; (800125c <ADC1_Init+0xb4>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	609a      	str	r2, [r3, #8]
	  hadc1.Init.ScanConvMode = ENABLE;
 80011ce:	4b23      	ldr	r3, [pc, #140]	; (800125c <ADC1_Init+0xb4>)
 80011d0:	2201      	movs	r2, #1
 80011d2:	611a      	str	r2, [r3, #16]
	  hadc1.Init.ContinuousConvMode = ENABLE;
 80011d4:	4b21      	ldr	r3, [pc, #132]	; (800125c <ADC1_Init+0xb4>)
 80011d6:	2201      	movs	r2, #1
 80011d8:	761a      	strb	r2, [r3, #24]
	  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011da:	4b20      	ldr	r3, [pc, #128]	; (800125c <ADC1_Init+0xb4>)
 80011dc:	2200      	movs	r2, #0
 80011de:	f883 2020 	strb.w	r2, [r3, #32]
	  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011e2:	4b1e      	ldr	r3, [pc, #120]	; (800125c <ADC1_Init+0xb4>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	62da      	str	r2, [r3, #44]	; 0x2c
	  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011e8:	4b1c      	ldr	r3, [pc, #112]	; (800125c <ADC1_Init+0xb4>)
 80011ea:	4a1e      	ldr	r2, [pc, #120]	; (8001264 <ADC1_Init+0xbc>)
 80011ec:	629a      	str	r2, [r3, #40]	; 0x28
	  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011ee:	4b1b      	ldr	r3, [pc, #108]	; (800125c <ADC1_Init+0xb4>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	60da      	str	r2, [r3, #12]
	  hadc1.Init.NbrOfConversion = 2;
 80011f4:	4b19      	ldr	r3, [pc, #100]	; (800125c <ADC1_Init+0xb4>)
 80011f6:	2202      	movs	r2, #2
 80011f8:	61da      	str	r2, [r3, #28]
	  hadc1.Init.DMAContinuousRequests = ENABLE;
 80011fa:	4b18      	ldr	r3, [pc, #96]	; (800125c <ADC1_Init+0xb4>)
 80011fc:	2201      	movs	r2, #1
 80011fe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001202:	4b16      	ldr	r3, [pc, #88]	; (800125c <ADC1_Init+0xb4>)
 8001204:	2200      	movs	r2, #0
 8001206:	615a      	str	r2, [r3, #20]
	  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001208:	4814      	ldr	r0, [pc, #80]	; (800125c <ADC1_Init+0xb4>)
 800120a:	f000 ff61 	bl	80020d0 <HAL_ADC_Init>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <ADC1_Init+0x70>
	  {
	    Error_Handler();
 8001214:	f000 fb4c 	bl	80018b0 <Error_Handler>
	  }

	  sConfig.Channel = ADC_CHANNEL_3;
 8001218:	2303      	movs	r3, #3
 800121a:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = 1;
 800121c:	2301      	movs	r3, #1
 800121e:	607b      	str	r3, [r7, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001220:	2307      	movs	r3, #7
 8001222:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001224:	463b      	mov	r3, r7
 8001226:	4619      	mov	r1, r3
 8001228:	480c      	ldr	r0, [pc, #48]	; (800125c <ADC1_Init+0xb4>)
 800122a:	f001 f8fd 	bl	8002428 <HAL_ADC_ConfigChannel>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <ADC1_Init+0x90>
	  {
	    Error_Handler();
 8001234:	f000 fb3c 	bl	80018b0 <Error_Handler>
	  }

	  sConfig.Channel = ADC_CHANNEL_4;
 8001238:	2304      	movs	r3, #4
 800123a:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = 2;
 800123c:	2302      	movs	r3, #2
 800123e:	607b      	str	r3, [r7, #4]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001240:	463b      	mov	r3, r7
 8001242:	4619      	mov	r1, r3
 8001244:	4805      	ldr	r0, [pc, #20]	; (800125c <ADC1_Init+0xb4>)
 8001246:	f001 f8ef 	bl	8002428 <HAL_ADC_ConfigChannel>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <ADC1_Init+0xac>
	  {
	    Error_Handler();
 8001250:	f000 fb2e 	bl	80018b0 <Error_Handler>
	  }

}
 8001254:	bf00      	nop
 8001256:	3710      	adds	r7, #16
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	20000330 	.word	0x20000330
 8001260:	40012000 	.word	0x40012000
 8001264:	0f000001 	.word	0x0f000001

08001268 <I2C_DMA_Init>:
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);

}

/* USER CODE BEGIN 2 */
void I2C_DMA_Init(void){
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
	__HAL_RCC_DMA1_CLK_ENABLE();
 800126e:	2300      	movs	r3, #0
 8001270:	607b      	str	r3, [r7, #4]
 8001272:	4b0c      	ldr	r3, [pc, #48]	; (80012a4 <I2C_DMA_Init+0x3c>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001276:	4a0b      	ldr	r2, [pc, #44]	; (80012a4 <I2C_DMA_Init+0x3c>)
 8001278:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800127c:	6313      	str	r3, [r2, #48]	; 0x30
 800127e:	4b09      	ldr	r3, [pc, #36]	; (80012a4 <I2C_DMA_Init+0x3c>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001282:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001286:	607b      	str	r3, [r7, #4]
 8001288:	687b      	ldr	r3, [r7, #4]
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800128a:	2200      	movs	r2, #0
 800128c:	2100      	movs	r1, #0
 800128e:	200b      	movs	r0, #11
 8001290:	f001 fc97 	bl	8002bc2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001294:	200b      	movs	r0, #11
 8001296:	f001 fcb0 	bl	8002bfa <HAL_NVIC_EnableIRQ>
}
 800129a:	bf00      	nop
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	40023800 	.word	0x40023800

080012a8 <ADC_DMA_Init>:
void ADC_DMA_Init(void){
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
	__HAL_RCC_DMA2_CLK_ENABLE();
 80012ae:	2300      	movs	r3, #0
 80012b0:	607b      	str	r3, [r7, #4]
 80012b2:	4b0a      	ldr	r3, [pc, #40]	; (80012dc <ADC_DMA_Init+0x34>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b6:	4a09      	ldr	r2, [pc, #36]	; (80012dc <ADC_DMA_Init+0x34>)
 80012b8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80012bc:	6313      	str	r3, [r2, #48]	; 0x30
 80012be:	4b07      	ldr	r3, [pc, #28]	; (80012dc <ADC_DMA_Init+0x34>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012c6:	607b      	str	r3, [r7, #4]
 80012c8:	687b      	ldr	r3, [r7, #4]
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80012ca:	2200      	movs	r2, #0
 80012cc:	2100      	movs	r1, #0
 80012ce:	2038      	movs	r0, #56	; 0x38
 80012d0:	f001 fc77 	bl	8002bc2 <HAL_NVIC_SetPriority>
	//HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
}
 80012d4:	bf00      	nop
 80012d6:	3708      	adds	r7, #8
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	40023800 	.word	0x40023800

080012e0 <TIM_DMA_Init>:

void TIM_DMA_Init(void){
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
	__HAL_RCC_DMA1_CLK_ENABLE();
 80012e6:	2300      	movs	r3, #0
 80012e8:	607b      	str	r3, [r7, #4]
 80012ea:	4b0a      	ldr	r3, [pc, #40]	; (8001314 <TIM_DMA_Init+0x34>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	4a09      	ldr	r2, [pc, #36]	; (8001314 <TIM_DMA_Init+0x34>)
 80012f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012f4:	6313      	str	r3, [r2, #48]	; 0x30
 80012f6:	4b07      	ldr	r3, [pc, #28]	; (8001314 <TIM_DMA_Init+0x34>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012fe:	607b      	str	r3, [r7, #4]
 8001300:	687b      	ldr	r3, [r7, #4]
	HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8001302:	2200      	movs	r2, #0
 8001304:	2100      	movs	r1, #0
 8001306:	200f      	movs	r0, #15
 8001308:	f001 fc5b 	bl	8002bc2 <HAL_NVIC_SetPriority>
	//HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
}
 800130c:	bf00      	nop
 800130e:	3708      	adds	r7, #8
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	40023800 	.word	0x40023800

08001318 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001318:	b480      	push	{r7}
 800131a:	b085      	sub	sp, #20
 800131c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800131e:	2300      	movs	r3, #0
 8001320:	60fb      	str	r3, [r7, #12]
 8001322:	4b17      	ldr	r3, [pc, #92]	; (8001380 <MX_GPIO_Init+0x68>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001326:	4a16      	ldr	r2, [pc, #88]	; (8001380 <MX_GPIO_Init+0x68>)
 8001328:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800132c:	6313      	str	r3, [r2, #48]	; 0x30
 800132e:	4b14      	ldr	r3, [pc, #80]	; (8001380 <MX_GPIO_Init+0x68>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001332:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001336:	60fb      	str	r3, [r7, #12]
 8001338:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800133a:	2300      	movs	r3, #0
 800133c:	60bb      	str	r3, [r7, #8]
 800133e:	4b10      	ldr	r3, [pc, #64]	; (8001380 <MX_GPIO_Init+0x68>)
 8001340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001342:	4a0f      	ldr	r2, [pc, #60]	; (8001380 <MX_GPIO_Init+0x68>)
 8001344:	f043 0301 	orr.w	r3, r3, #1
 8001348:	6313      	str	r3, [r2, #48]	; 0x30
 800134a:	4b0d      	ldr	r3, [pc, #52]	; (8001380 <MX_GPIO_Init+0x68>)
 800134c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134e:	f003 0301 	and.w	r3, r3, #1
 8001352:	60bb      	str	r3, [r7, #8]
 8001354:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001356:	2300      	movs	r3, #0
 8001358:	607b      	str	r3, [r7, #4]
 800135a:	4b09      	ldr	r3, [pc, #36]	; (8001380 <MX_GPIO_Init+0x68>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135e:	4a08      	ldr	r2, [pc, #32]	; (8001380 <MX_GPIO_Init+0x68>)
 8001360:	f043 0302 	orr.w	r3, r3, #2
 8001364:	6313      	str	r3, [r2, #48]	; 0x30
 8001366:	4b06      	ldr	r3, [pc, #24]	; (8001380 <MX_GPIO_Init+0x68>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136a:	f003 0302 	and.w	r3, r3, #2
 800136e:	607b      	str	r3, [r7, #4]
 8001370:	687b      	ldr	r3, [r7, #4]

}
 8001372:	bf00      	nop
 8001374:	3714      	adds	r7, #20
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	40023800 	.word	0x40023800

08001384 <I2C_GPIO_Init>:

/* USER CODE BEGIN 2 */
void I2C_GPIO_Init(void)
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800138a:	2300      	movs	r3, #0
 800138c:	607b      	str	r3, [r7, #4]
 800138e:	4b09      	ldr	r3, [pc, #36]	; (80013b4 <I2C_GPIO_Init+0x30>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001392:	4a08      	ldr	r2, [pc, #32]	; (80013b4 <I2C_GPIO_Init+0x30>)
 8001394:	f043 0302 	orr.w	r3, r3, #2
 8001398:	6313      	str	r3, [r2, #48]	; 0x30
 800139a:	4b06      	ldr	r3, [pc, #24]	; (80013b4 <I2C_GPIO_Init+0x30>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139e:	f003 0302 	and.w	r3, r3, #2
 80013a2:	607b      	str	r3, [r7, #4]
 80013a4:	687b      	ldr	r3, [r7, #4]

}
 80013a6:	bf00      	nop
 80013a8:	370c      	adds	r7, #12
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
 80013b2:	bf00      	nop
 80013b4:	40023800 	.word	0x40023800

080013b8 <ADC_GPIO_Init>:

void ADC_GPIO_Init(void){
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013be:	2300      	movs	r3, #0
 80013c0:	607b      	str	r3, [r7, #4]
 80013c2:	4b09      	ldr	r3, [pc, #36]	; (80013e8 <ADC_GPIO_Init+0x30>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c6:	4a08      	ldr	r2, [pc, #32]	; (80013e8 <ADC_GPIO_Init+0x30>)
 80013c8:	f043 0302 	orr.w	r3, r3, #2
 80013cc:	6313      	str	r3, [r2, #48]	; 0x30
 80013ce:	4b06      	ldr	r3, [pc, #24]	; (80013e8 <ADC_GPIO_Init+0x30>)
 80013d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d2:	f003 0302 	and.w	r3, r3, #2
 80013d6:	607b      	str	r3, [r7, #4]
 80013d8:	687b      	ldr	r3, [r7, #4]

}
 80013da:	bf00      	nop
 80013dc:	370c      	adds	r7, #12
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	40023800 	.word	0x40023800

080013ec <TIM3_GPIO_Init>:

void TIM3_GPIO_Init(void){
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	607b      	str	r3, [r7, #4]
 80013f6:	4b09      	ldr	r3, [pc, #36]	; (800141c <TIM3_GPIO_Init+0x30>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fa:	4a08      	ldr	r2, [pc, #32]	; (800141c <TIM3_GPIO_Init+0x30>)
 80013fc:	f043 0302 	orr.w	r3, r3, #2
 8001400:	6313      	str	r3, [r2, #48]	; 0x30
 8001402:	4b06      	ldr	r3, [pc, #24]	; (800141c <TIM3_GPIO_Init+0x30>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001406:	f003 0302 	and.w	r3, r3, #2
 800140a:	607b      	str	r3, [r7, #4]
 800140c:	687b      	ldr	r3, [r7, #4]
}
 800140e:	bf00      	nop
 8001410:	370c      	adds	r7, #12
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop
 800141c:	40023800 	.word	0x40023800

08001420 <HAL_I2C_MspInit>:
  /* USER CODE END I2C1_Init 2 */

}

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b08a      	sub	sp, #40	; 0x28
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001428:	f107 0314 	add.w	r3, r7, #20
 800142c:	2200      	movs	r2, #0
 800142e:	601a      	str	r2, [r3, #0]
 8001430:	605a      	str	r2, [r3, #4]
 8001432:	609a      	str	r2, [r3, #8]
 8001434:	60da      	str	r2, [r3, #12]
 8001436:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a30      	ldr	r2, [pc, #192]	; (8001500 <HAL_I2C_MspInit+0xe0>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d159      	bne.n	80014f6 <HAL_I2C_MspInit+0xd6>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001442:	2300      	movs	r3, #0
 8001444:	613b      	str	r3, [r7, #16]
 8001446:	4b2f      	ldr	r3, [pc, #188]	; (8001504 <HAL_I2C_MspInit+0xe4>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144a:	4a2e      	ldr	r2, [pc, #184]	; (8001504 <HAL_I2C_MspInit+0xe4>)
 800144c:	f043 0302 	orr.w	r3, r3, #2
 8001450:	6313      	str	r3, [r2, #48]	; 0x30
 8001452:	4b2c      	ldr	r3, [pc, #176]	; (8001504 <HAL_I2C_MspInit+0xe4>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001456:	f003 0302 	and.w	r3, r3, #2
 800145a:	613b      	str	r3, [r7, #16]
 800145c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800145e:	23c0      	movs	r3, #192	; 0xc0
 8001460:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001462:	2312      	movs	r3, #18
 8001464:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001466:	2301      	movs	r3, #1
 8001468:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800146a:	2303      	movs	r3, #3
 800146c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800146e:	2304      	movs	r3, #4
 8001470:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001472:	f107 0314 	add.w	r3, r7, #20
 8001476:	4619      	mov	r1, r3
 8001478:	4823      	ldr	r0, [pc, #140]	; (8001508 <HAL_I2C_MspInit+0xe8>)
 800147a:	f002 f803 	bl	8003484 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800147e:	2300      	movs	r3, #0
 8001480:	60fb      	str	r3, [r7, #12]
 8001482:	4b20      	ldr	r3, [pc, #128]	; (8001504 <HAL_I2C_MspInit+0xe4>)
 8001484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001486:	4a1f      	ldr	r2, [pc, #124]	; (8001504 <HAL_I2C_MspInit+0xe4>)
 8001488:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800148c:	6413      	str	r3, [r2, #64]	; 0x40
 800148e:	4b1d      	ldr	r3, [pc, #116]	; (8001504 <HAL_I2C_MspInit+0xe4>)
 8001490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001492:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001496:	60fb      	str	r3, [r7, #12]
 8001498:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 800149a:	4b1c      	ldr	r3, [pc, #112]	; (800150c <HAL_I2C_MspInit+0xec>)
 800149c:	4a1c      	ldr	r2, [pc, #112]	; (8001510 <HAL_I2C_MspInit+0xf0>)
 800149e:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80014a0:	4b1a      	ldr	r3, [pc, #104]	; (800150c <HAL_I2C_MspInit+0xec>)
 80014a2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80014a6:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014a8:	4b18      	ldr	r3, [pc, #96]	; (800150c <HAL_I2C_MspInit+0xec>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014ae:	4b17      	ldr	r3, [pc, #92]	; (800150c <HAL_I2C_MspInit+0xec>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80014b4:	4b15      	ldr	r3, [pc, #84]	; (800150c <HAL_I2C_MspInit+0xec>)
 80014b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014ba:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014bc:	4b13      	ldr	r3, [pc, #76]	; (800150c <HAL_I2C_MspInit+0xec>)
 80014be:	2200      	movs	r2, #0
 80014c0:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014c2:	4b12      	ldr	r3, [pc, #72]	; (800150c <HAL_I2C_MspInit+0xec>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80014c8:	4b10      	ldr	r3, [pc, #64]	; (800150c <HAL_I2C_MspInit+0xec>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80014ce:	4b0f      	ldr	r3, [pc, #60]	; (800150c <HAL_I2C_MspInit+0xec>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014d4:	4b0d      	ldr	r3, [pc, #52]	; (800150c <HAL_I2C_MspInit+0xec>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80014da:	480c      	ldr	r0, [pc, #48]	; (800150c <HAL_I2C_MspInit+0xec>)
 80014dc:	f001 fbc4 	bl	8002c68 <HAL_DMA_Init>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <HAL_I2C_MspInit+0xca>
    {
      Error_Handler();
 80014e6:	f000 f9e3 	bl	80018b0 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	4a07      	ldr	r2, [pc, #28]	; (800150c <HAL_I2C_MspInit+0xec>)
 80014ee:	639a      	str	r2, [r3, #56]	; 0x38
 80014f0:	4a06      	ldr	r2, [pc, #24]	; (800150c <HAL_I2C_MspInit+0xec>)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80014f6:	bf00      	nop
 80014f8:	3728      	adds	r7, #40	; 0x28
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	40005400 	.word	0x40005400
 8001504:	40023800 	.word	0x40023800
 8001508:	40020400 	.word	0x40020400
 800150c:	2000042c 	.word	0x2000042c
 8001510:	40026010 	.word	0x40026010

08001514 <I2C1_Init>:
  /* USER CODE END I2C1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void I2C1_Init(void){
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0

	  hi2c1.Instance = I2C1;
 8001518:	4b12      	ldr	r3, [pc, #72]	; (8001564 <I2C1_Init+0x50>)
 800151a:	4a13      	ldr	r2, [pc, #76]	; (8001568 <I2C1_Init+0x54>)
 800151c:	601a      	str	r2, [r3, #0]
	  hi2c1.Init.ClockSpeed = 400000;
 800151e:	4b11      	ldr	r3, [pc, #68]	; (8001564 <I2C1_Init+0x50>)
 8001520:	4a12      	ldr	r2, [pc, #72]	; (800156c <I2C1_Init+0x58>)
 8001522:	605a      	str	r2, [r3, #4]
	  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001524:	4b0f      	ldr	r3, [pc, #60]	; (8001564 <I2C1_Init+0x50>)
 8001526:	2200      	movs	r2, #0
 8001528:	609a      	str	r2, [r3, #8]
	  hi2c1.Init.OwnAddress1 = 0;
 800152a:	4b0e      	ldr	r3, [pc, #56]	; (8001564 <I2C1_Init+0x50>)
 800152c:	2200      	movs	r2, #0
 800152e:	60da      	str	r2, [r3, #12]
	  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001530:	4b0c      	ldr	r3, [pc, #48]	; (8001564 <I2C1_Init+0x50>)
 8001532:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001536:	611a      	str	r2, [r3, #16]
	  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001538:	4b0a      	ldr	r3, [pc, #40]	; (8001564 <I2C1_Init+0x50>)
 800153a:	2200      	movs	r2, #0
 800153c:	615a      	str	r2, [r3, #20]
	  hi2c1.Init.OwnAddress2 = 0;
 800153e:	4b09      	ldr	r3, [pc, #36]	; (8001564 <I2C1_Init+0x50>)
 8001540:	2200      	movs	r2, #0
 8001542:	619a      	str	r2, [r3, #24]
	  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001544:	4b07      	ldr	r3, [pc, #28]	; (8001564 <I2C1_Init+0x50>)
 8001546:	2200      	movs	r2, #0
 8001548:	61da      	str	r2, [r3, #28]
	  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800154a:	4b06      	ldr	r3, [pc, #24]	; (8001564 <I2C1_Init+0x50>)
 800154c:	2200      	movs	r2, #0
 800154e:	621a      	str	r2, [r3, #32]
	  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001550:	4804      	ldr	r0, [pc, #16]	; (8001564 <I2C1_Init+0x50>)
 8001552:	f002 f91b 	bl	800378c <HAL_I2C_Init>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <I2C1_Init+0x4c>
	  {
	    Error_Handler();
 800155c:	f000 f9a8 	bl	80018b0 <Error_Handler>
	  }

}
 8001560:	bf00      	nop
 8001562:	bd80      	pop	{r7, pc}
 8001564:	200003d8 	.word	0x200003d8
 8001568:	40005400 	.word	0x40005400
 800156c:	00061a80 	.word	0x00061a80

08001570 <__io_putchar>:
#include "stm32f4xx_hal.h"
#include "usart.h"
#include <stdio.h>
#include <stdarg.h>

int __io_putchar(int ch){
 8001570:	b580      	push	{r7, lr}
 8001572:	b084      	sub	sp, #16
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
	uint8_t pchar = ch;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	b2db      	uxtb	r3, r3
 800157c:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart1, &pchar, 1, HAL_MAX_DELAY);
 800157e:	f107 010f 	add.w	r1, r7, #15
 8001582:	f04f 33ff 	mov.w	r3, #4294967295
 8001586:	2201      	movs	r2, #1
 8001588:	4803      	ldr	r0, [pc, #12]	; (8001598 <__io_putchar+0x28>)
 800158a:	f006 f974 	bl	8007876 <HAL_UART_Transmit>
	return ch;
 800158e:	687b      	ldr	r3, [r7, #4]
}
 8001590:	4618      	mov	r0, r3
 8001592:	3710      	adds	r7, #16
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	20000d40 	.word	0x20000d40

0800159c <_log>:

void _log(Log_Subsystem_t subsystem, const char* msg, ...){
 800159c:	b40e      	push	{r1, r2, r3}
 800159e:	b580      	push	{r7, lr}
 80015a0:	b085      	sub	sp, #20
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	4603      	mov	r3, r0
 80015a6:	71fb      	strb	r3, [r7, #7]
    va_list args;
	va_start(args, msg);
 80015a8:	f107 0320 	add.w	r3, r7, #32
 80015ac:	60fb      	str	r3, [r7, #12]
	switch(subsystem){
 80015ae:	79fb      	ldrb	r3, [r7, #7]
 80015b0:	2b05      	cmp	r3, #5
 80015b2:	d827      	bhi.n	8001604 <_log+0x68>
 80015b4:	a201      	add	r2, pc, #4	; (adr r2, 80015bc <_log+0x20>)
 80015b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015ba:	bf00      	nop
 80015bc:	080015d5 	.word	0x080015d5
 80015c0:	080015dd 	.word	0x080015dd
 80015c4:	080015e5 	.word	0x080015e5
 80015c8:	080015ed 	.word	0x080015ed
 80015cc:	080015f5 	.word	0x080015f5
 80015d0:	080015fd 	.word	0x080015fd
		case(log_i2c):
			printf("Debug Subsystem I2C: ");
 80015d4:	4816      	ldr	r0, [pc, #88]	; (8001630 <_log+0x94>)
 80015d6:	f00a ff21 	bl	800c41c <iprintf>
				break;
 80015da:	e016      	b.n	800160a <_log+0x6e>
		case(log_lps22hh):
			printf("Debug Subsystem LPS22HH: ");
 80015dc:	4815      	ldr	r0, [pc, #84]	; (8001634 <_log+0x98>)
 80015de:	f00a ff1d 	bl	800c41c <iprintf>
				break;
 80015e2:	e012      	b.n	800160a <_log+0x6e>
		case(log_iis2mdc):
			printf("Debug Subsystem IIS2MDC: ");
 80015e4:	4814      	ldr	r0, [pc, #80]	; (8001638 <_log+0x9c>)
 80015e6:	f00a ff19 	bl	800c41c <iprintf>
				break;
 80015ea:	e00e      	b.n	800160a <_log+0x6e>
		case(log_hts221):
			printf("Debug Subsystem HTS221: ");
 80015ec:	4813      	ldr	r0, [pc, #76]	; (800163c <_log+0xa0>)
 80015ee:	f00a ff15 	bl	800c41c <iprintf>
				break;
 80015f2:	e00a      	b.n	800160a <_log+0x6e>
		case(log_ism330dhcx):
			printf("Debug Subsystem ISM330DHCX: ");
 80015f4:	4812      	ldr	r0, [pc, #72]	; (8001640 <_log+0xa4>)
 80015f6:	f00a ff11 	bl	800c41c <iprintf>
				break;
 80015fa:	e006      	b.n	800160a <_log+0x6e>
		case(log_mcp23017):
			printf("Debug Subsystem MCP23017: ");
 80015fc:	4811      	ldr	r0, [pc, #68]	; (8001644 <_log+0xa8>)
 80015fe:	f00a ff0d 	bl	800c41c <iprintf>
		        break;
 8001602:	e002      	b.n	800160a <_log+0x6e>
		default:
			printf("Unknown Debug Subsystem: ");
 8001604:	4810      	ldr	r0, [pc, #64]	; (8001648 <_log+0xac>)
 8001606:	f00a ff09 	bl	800c41c <iprintf>
	}
	vfprintf(stdout, msg, args);
 800160a:	4b10      	ldr	r3, [pc, #64]	; (800164c <_log+0xb0>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	68fa      	ldr	r2, [r7, #12]
 8001612:	69f9      	ldr	r1, [r7, #28]
 8001614:	4618      	mov	r0, r3
 8001616:	f00a fd63 	bl	800c0e0 <vfiprintf>
	printf("\n");
 800161a:	200a      	movs	r0, #10
 800161c:	f00a ff16 	bl	800c44c <putchar>
	va_end(args);
}
 8001620:	bf00      	nop
 8001622:	3714      	adds	r7, #20
 8001624:	46bd      	mov	sp, r7
 8001626:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800162a:	b003      	add	sp, #12
 800162c:	4770      	bx	lr
 800162e:	bf00      	nop
 8001630:	0800d0f4 	.word	0x0800d0f4
 8001634:	0800d10c 	.word	0x0800d10c
 8001638:	0800d128 	.word	0x0800d128
 800163c:	0800d144 	.word	0x0800d144
 8001640:	0800d160 	.word	0x0800d160
 8001644:	0800d180 	.word	0x0800d180
 8001648:	0800d19c 	.word	0x0800d19c
 800164c:	20000108 	.word	0x20000108

08001650 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001656:	f000 fca5 	bl	8001fa4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800165a:	f000 f835 	bl	80016c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800165e:	f7ff fe5b 	bl	8001318 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001662:	f000 f92b 	bl	80018bc <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8001666:	f000 fc01 	bl	8001e6c <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 800166a:	f009 ff4d 	bl	800b508 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  InitButtons();
 800166e:	f000 f893 	bl	8001798 <InitButtons>
  InitJoystick();
 8001672:	f000 f8bf 	bl	80017f4 <InitJoystick>
  InitLEDs();
 8001676:	f000 f8e7 	bl	8001848 <InitLEDs>
  //HAL_ADC_Start_DMA(&hadc1, (uint32_t*)AdcBuffer.raw,2);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t counter = 0;
 800167a:	2300      	movs	r3, #0
 800167c:	71fb      	strb	r3, [r7, #7]
  while (1)
  {
	 for(uint8_t i = 0; i < PINS_PER_EXPANDER; i++){
 800167e:	2300      	movs	r3, #0
 8001680:	71bb      	strb	r3, [r7, #6]
 8001682:	e012      	b.n	80016aa <main+0x5a>
		 ButtonRead(&Buttons[((counter + NUMBER_OF_IO_EXPANDERS-1) % NUMBER_OF_IO_EXPANDERS)*PINS_PER_EXPANDER + i]);
 8001684:	79fb      	ldrb	r3, [r7, #7]
 8001686:	3303      	adds	r3, #3
 8001688:	f003 0303 	and.w	r3, r3, #3
 800168c:	011a      	lsls	r2, r3, #4
 800168e:	79bb      	ldrb	r3, [r7, #6]
 8001690:	441a      	add	r2, r3
 8001692:	4613      	mov	r3, r2
 8001694:	00db      	lsls	r3, r3, #3
 8001696:	1a9b      	subs	r3, r3, r2
 8001698:	009b      	lsls	r3, r3, #2
 800169a:	4a09      	ldr	r2, [pc, #36]	; (80016c0 <main+0x70>)
 800169c:	4413      	add	r3, r2
 800169e:	4618      	mov	r0, r3
 80016a0:	f7ff f98c 	bl	80009bc <ButtonRead>
	 for(uint8_t i = 0; i < PINS_PER_EXPANDER; i++){
 80016a4:	79bb      	ldrb	r3, [r7, #6]
 80016a6:	3301      	adds	r3, #1
 80016a8:	71bb      	strb	r3, [r7, #6]
 80016aa:	79bb      	ldrb	r3, [r7, #6]
 80016ac:	2b0f      	cmp	r3, #15
 80016ae:	d9e9      	bls.n	8001684 <main+0x34>
	 }
	JoystickRead(&Joystick);
 80016b0:	4804      	ldr	r0, [pc, #16]	; (80016c4 <main+0x74>)
 80016b2:	f7ff fadf 	bl	8000c74 <JoystickRead>
    counter++;
 80016b6:	79fb      	ldrb	r3, [r7, #7]
 80016b8:	3301      	adds	r3, #1
 80016ba:	71fb      	strb	r3, [r7, #7]
	 for(uint8_t i = 0; i < PINS_PER_EXPANDER; i++){
 80016bc:	e7df      	b.n	800167e <main+0x2e>
 80016be:	bf00      	nop
 80016c0:	2000048c 	.word	0x2000048c
 80016c4:	20000b8c 	.word	0x20000b8c

080016c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b094      	sub	sp, #80	; 0x50
 80016cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016ce:	f107 0320 	add.w	r3, r7, #32
 80016d2:	2230      	movs	r2, #48	; 0x30
 80016d4:	2100      	movs	r1, #0
 80016d6:	4618      	mov	r0, r3
 80016d8:	f00a fba0 	bl	800be1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016dc:	f107 030c 	add.w	r3, r7, #12
 80016e0:	2200      	movs	r2, #0
 80016e2:	601a      	str	r2, [r3, #0]
 80016e4:	605a      	str	r2, [r3, #4]
 80016e6:	609a      	str	r2, [r3, #8]
 80016e8:	60da      	str	r2, [r3, #12]
 80016ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016ec:	2300      	movs	r3, #0
 80016ee:	60bb      	str	r3, [r7, #8]
 80016f0:	4b27      	ldr	r3, [pc, #156]	; (8001790 <SystemClock_Config+0xc8>)
 80016f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f4:	4a26      	ldr	r2, [pc, #152]	; (8001790 <SystemClock_Config+0xc8>)
 80016f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016fa:	6413      	str	r3, [r2, #64]	; 0x40
 80016fc:	4b24      	ldr	r3, [pc, #144]	; (8001790 <SystemClock_Config+0xc8>)
 80016fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001700:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001704:	60bb      	str	r3, [r7, #8]
 8001706:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001708:	2300      	movs	r3, #0
 800170a:	607b      	str	r3, [r7, #4]
 800170c:	4b21      	ldr	r3, [pc, #132]	; (8001794 <SystemClock_Config+0xcc>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a20      	ldr	r2, [pc, #128]	; (8001794 <SystemClock_Config+0xcc>)
 8001712:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001716:	6013      	str	r3, [r2, #0]
 8001718:	4b1e      	ldr	r3, [pc, #120]	; (8001794 <SystemClock_Config+0xcc>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001720:	607b      	str	r3, [r7, #4]
 8001722:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001724:	2301      	movs	r3, #1
 8001726:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001728:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800172c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800172e:	2302      	movs	r3, #2
 8001730:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001732:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001736:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001738:	2319      	movs	r3, #25
 800173a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 800173c:	23c0      	movs	r3, #192	; 0xc0
 800173e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001740:	2302      	movs	r3, #2
 8001742:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001744:	2304      	movs	r3, #4
 8001746:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001748:	f107 0320 	add.w	r3, r7, #32
 800174c:	4618      	mov	r0, r3
 800174e:	f004 fa93 	bl	8005c78 <HAL_RCC_OscConfig>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d001      	beq.n	800175c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001758:	f000 f8aa 	bl	80018b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800175c:	230f      	movs	r3, #15
 800175e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001760:	2302      	movs	r3, #2
 8001762:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001764:	2300      	movs	r3, #0
 8001766:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001768:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800176c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800176e:	2300      	movs	r3, #0
 8001770:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001772:	f107 030c 	add.w	r3, r7, #12
 8001776:	2103      	movs	r1, #3
 8001778:	4618      	mov	r0, r3
 800177a:	f004 fcf5 	bl	8006168 <HAL_RCC_ClockConfig>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001784:	f000 f894 	bl	80018b0 <Error_Handler>
  }
}
 8001788:	bf00      	nop
 800178a:	3750      	adds	r7, #80	; 0x50
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	40023800 	.word	0x40023800
 8001794:	40007000 	.word	0x40007000

08001798 <InitButtons>:

/* USER CODE BEGIN 4 */
void InitButtons(){
 8001798:	b5f0      	push	{r4, r5, r6, r7, lr}
 800179a:	b087      	sub	sp, #28
 800179c:	af04      	add	r7, sp, #16
	Button_Init_Struct_t Settings = {
 800179e:	463b      	mov	r3, r7
 80017a0:	2200      	movs	r2, #0
 80017a2:	601a      	str	r2, [r3, #0]
 80017a4:	711a      	strb	r2, [r3, #4]
			.KeyFunction = 0,
			.ModKeyFunction = 0,
			.MouseFunction = 0,
			.WheelFunction = 0,
	};
	for(uint8_t i = 0; i < NUMBER_OF_IO_EXPANDERS*PINS_PER_EXPANDER; i++){
 80017a6:	2300      	movs	r3, #0
 80017a8:	71fb      	strb	r3, [r7, #7]
 80017aa:	e017      	b.n	80017dc <InitButtons+0x44>
		Settings.ButtonIDNumber = i;
 80017ac:	79fb      	ldrb	r3, [r7, #7]
 80017ae:	703b      	strb	r3, [r7, #0]
        ButtonInit(Settings, &Buttons[i], ButtonIO_Driver);
 80017b0:	79fa      	ldrb	r2, [r7, #7]
 80017b2:	4613      	mov	r3, r2
 80017b4:	00db      	lsls	r3, r3, #3
 80017b6:	1a9b      	subs	r3, r3, r2
 80017b8:	009b      	lsls	r3, r3, #2
 80017ba:	4a0c      	ldr	r2, [pc, #48]	; (80017ec <InitButtons+0x54>)
 80017bc:	189e      	adds	r6, r3, r2
 80017be:	4d0c      	ldr	r5, [pc, #48]	; (80017f0 <InitButtons+0x58>)
 80017c0:	466c      	mov	r4, sp
 80017c2:	1d2b      	adds	r3, r5, #4
 80017c4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80017c6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80017ca:	682b      	ldr	r3, [r5, #0]
 80017cc:	4632      	mov	r2, r6
 80017ce:	4639      	mov	r1, r7
 80017d0:	c903      	ldmia	r1, {r0, r1}
 80017d2:	f7ff f8c1 	bl	8000958 <ButtonInit>
	for(uint8_t i = 0; i < NUMBER_OF_IO_EXPANDERS*PINS_PER_EXPANDER; i++){
 80017d6:	79fb      	ldrb	r3, [r7, #7]
 80017d8:	3301      	adds	r3, #1
 80017da:	71fb      	strb	r3, [r7, #7]
 80017dc:	79fb      	ldrb	r3, [r7, #7]
 80017de:	2b3f      	cmp	r3, #63	; 0x3f
 80017e0:	d9e4      	bls.n	80017ac <InitButtons+0x14>
	}
}
 80017e2:	bf00      	nop
 80017e4:	bf00      	nop
 80017e6:	370c      	adds	r7, #12
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017ec:	2000048c 	.word	0x2000048c
 80017f0:	0800d270 	.word	0x0800d270

080017f4 <InitJoystick>:

void InitJoystick(){
 80017f4:	b5b0      	push	{r4, r5, r7, lr}
 80017f6:	b096      	sub	sp, #88	; 0x58
 80017f8:	af0c      	add	r7, sp, #48	; 0x30
    Joystick_Init_Struct_t Settings = {
 80017fa:	1d3b      	adds	r3, r7, #4
 80017fc:	2224      	movs	r2, #36	; 0x24
 80017fe:	2100      	movs	r1, #0
 8001800:	4618      	mov	r0, r3
 8001802:	f00a fb0b 	bl	800be1c <memset>
 8001806:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800180a:	80bb      	strh	r3, [r7, #4]
 800180c:	2302      	movs	r3, #2
 800180e:	71bb      	strb	r3, [r7, #6]
    		.DeadZone = 2000,
			.Mode = Joystick8Way
    };
    JoystickInit(Settings, &Joystick, JoystickIO_Driver);
 8001810:	4b0b      	ldr	r3, [pc, #44]	; (8001840 <InitJoystick+0x4c>)
 8001812:	ac06      	add	r4, sp, #24
 8001814:	461d      	mov	r5, r3
 8001816:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001818:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800181a:	682b      	ldr	r3, [r5, #0]
 800181c:	6023      	str	r3, [r4, #0]
 800181e:	4b09      	ldr	r3, [pc, #36]	; (8001844 <InitJoystick+0x50>)
 8001820:	9305      	str	r3, [sp, #20]
 8001822:	466d      	mov	r5, sp
 8001824:	f107 0414 	add.w	r4, r7, #20
 8001828:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800182a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800182c:	6823      	ldr	r3, [r4, #0]
 800182e:	602b      	str	r3, [r5, #0]
 8001830:	1d3b      	adds	r3, r7, #4
 8001832:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001834:	f7ff f9c0 	bl	8000bb8 <JoystickInit>
}
 8001838:	bf00      	nop
 800183a:	3728      	adds	r7, #40	; 0x28
 800183c:	46bd      	mov	sp, r7
 800183e:	bdb0      	pop	{r4, r5, r7, pc}
 8001840:	0800d284 	.word	0x0800d284
 8001844:	20000b8c 	.word	0x20000b8c

08001848 <InitLEDs>:

void InitLEDs(){
 8001848:	b5f0      	push	{r4, r5, r6, r7, lr}
 800184a:	b087      	sub	sp, #28
 800184c:	af04      	add	r7, sp, #16
	SerialLED_InitStruct_t LED_Settings = {
 800184e:	463b      	mov	r3, r7
 8001850:	2200      	movs	r2, #0
 8001852:	601a      	str	r2, [r3, #0]
 8001854:	809a      	strh	r2, [r3, #4]
 8001856:	23ff      	movs	r3, #255	; 0xff
 8001858:	70bb      	strb	r3, [r7, #2]
 800185a:	23ff      	movs	r3, #255	; 0xff
 800185c:	713b      	strb	r3, [r7, #4]
			.green = 0xFF,
			.red = 0x00,
			.blue = 0xFF
	};
	for(uint8_t i = 0; i < NUMBER_OF_LEDS; i++){
 800185e:	2300      	movs	r3, #0
 8001860:	71fb      	strb	r3, [r7, #7]
 8001862:	e018      	b.n	8001896 <InitLEDs+0x4e>
		LED_Settings.address = i;
 8001864:	79fb      	ldrb	r3, [r7, #7]
 8001866:	b29b      	uxth	r3, r3
 8001868:	803b      	strh	r3, [r7, #0]
		SerialLEDInit(LED_Settings,&LED[i],LED_Drv);
 800186a:	79fa      	ldrb	r2, [r7, #7]
 800186c:	4613      	mov	r3, r2
 800186e:	00db      	lsls	r3, r3, #3
 8001870:	1a9b      	subs	r3, r3, r2
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	4a0c      	ldr	r2, [pc, #48]	; (80018a8 <InitLEDs+0x60>)
 8001876:	189e      	adds	r6, r3, r2
 8001878:	4d0c      	ldr	r5, [pc, #48]	; (80018ac <InitLEDs+0x64>)
 800187a:	466c      	mov	r4, sp
 800187c:	1d2b      	adds	r3, r5, #4
 800187e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001880:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001884:	682b      	ldr	r3, [r5, #0]
 8001886:	4632      	mov	r2, r6
 8001888:	4639      	mov	r1, r7
 800188a:	c903      	ldmia	r1, {r0, r1}
 800188c:	f7ff fb38 	bl	8000f00 <SerialLEDInit>
	for(uint8_t i = 0; i < NUMBER_OF_LEDS; i++){
 8001890:	79fb      	ldrb	r3, [r7, #7]
 8001892:	3301      	adds	r3, #1
 8001894:	71fb      	strb	r3, [r7, #7]
 8001896:	79fb      	ldrb	r3, [r7, #7]
 8001898:	2b03      	cmp	r3, #3
 800189a:	d9e3      	bls.n	8001864 <InitLEDs+0x1c>
	}
}
 800189c:	bf00      	nop
 800189e:	bf00      	nop
 80018a0:	370c      	adds	r7, #12
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018a6:	bf00      	nop
 80018a8:	20000bcc 	.word	0x20000bcc
 80018ac:	20000008 	.word	0x20000008

080018b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018b4:	b672      	cpsid	i
}
 80018b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018b8:	e7fe      	b.n	80018b8 <Error_Handler+0x8>
	...

080018bc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80018c0:	4b17      	ldr	r3, [pc, #92]	; (8001920 <MX_SPI1_Init+0x64>)
 80018c2:	4a18      	ldr	r2, [pc, #96]	; (8001924 <MX_SPI1_Init+0x68>)
 80018c4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80018c6:	4b16      	ldr	r3, [pc, #88]	; (8001920 <MX_SPI1_Init+0x64>)
 80018c8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80018cc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80018ce:	4b14      	ldr	r3, [pc, #80]	; (8001920 <MX_SPI1_Init+0x64>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80018d4:	4b12      	ldr	r3, [pc, #72]	; (8001920 <MX_SPI1_Init+0x64>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80018da:	4b11      	ldr	r3, [pc, #68]	; (8001920 <MX_SPI1_Init+0x64>)
 80018dc:	2200      	movs	r2, #0
 80018de:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80018e0:	4b0f      	ldr	r3, [pc, #60]	; (8001920 <MX_SPI1_Init+0x64>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80018e6:	4b0e      	ldr	r3, [pc, #56]	; (8001920 <MX_SPI1_Init+0x64>)
 80018e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018ec:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80018ee:	4b0c      	ldr	r3, [pc, #48]	; (8001920 <MX_SPI1_Init+0x64>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018f4:	4b0a      	ldr	r3, [pc, #40]	; (8001920 <MX_SPI1_Init+0x64>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80018fa:	4b09      	ldr	r3, [pc, #36]	; (8001920 <MX_SPI1_Init+0x64>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001900:	4b07      	ldr	r3, [pc, #28]	; (8001920 <MX_SPI1_Init+0x64>)
 8001902:	2200      	movs	r2, #0
 8001904:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001906:	4b06      	ldr	r3, [pc, #24]	; (8001920 <MX_SPI1_Init+0x64>)
 8001908:	220a      	movs	r2, #10
 800190a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800190c:	4804      	ldr	r0, [pc, #16]	; (8001920 <MX_SPI1_Init+0x64>)
 800190e:	f004 fe0b 	bl	8006528 <HAL_SPI_Init>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d001      	beq.n	800191c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001918:	f7ff ffca 	bl	80018b0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800191c:	bf00      	nop
 800191e:	bd80      	pop	{r7, pc}
 8001920:	20000c3c 	.word	0x20000c3c
 8001924:	40013000 	.word	0x40013000

08001928 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b08a      	sub	sp, #40	; 0x28
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001930:	f107 0314 	add.w	r3, r7, #20
 8001934:	2200      	movs	r2, #0
 8001936:	601a      	str	r2, [r3, #0]
 8001938:	605a      	str	r2, [r3, #4]
 800193a:	609a      	str	r2, [r3, #8]
 800193c:	60da      	str	r2, [r3, #12]
 800193e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a28      	ldr	r2, [pc, #160]	; (80019e8 <HAL_SPI_MspInit+0xc0>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d149      	bne.n	80019de <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800194a:	2300      	movs	r3, #0
 800194c:	613b      	str	r3, [r7, #16]
 800194e:	4b27      	ldr	r3, [pc, #156]	; (80019ec <HAL_SPI_MspInit+0xc4>)
 8001950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001952:	4a26      	ldr	r2, [pc, #152]	; (80019ec <HAL_SPI_MspInit+0xc4>)
 8001954:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001958:	6453      	str	r3, [r2, #68]	; 0x44
 800195a:	4b24      	ldr	r3, [pc, #144]	; (80019ec <HAL_SPI_MspInit+0xc4>)
 800195c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800195e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001962:	613b      	str	r3, [r7, #16]
 8001964:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001966:	2300      	movs	r3, #0
 8001968:	60fb      	str	r3, [r7, #12]
 800196a:	4b20      	ldr	r3, [pc, #128]	; (80019ec <HAL_SPI_MspInit+0xc4>)
 800196c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196e:	4a1f      	ldr	r2, [pc, #124]	; (80019ec <HAL_SPI_MspInit+0xc4>)
 8001970:	f043 0301 	orr.w	r3, r3, #1
 8001974:	6313      	str	r3, [r2, #48]	; 0x30
 8001976:	4b1d      	ldr	r3, [pc, #116]	; (80019ec <HAL_SPI_MspInit+0xc4>)
 8001978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197a:	f003 0301 	and.w	r3, r3, #1
 800197e:	60fb      	str	r3, [r7, #12]
 8001980:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001982:	2300      	movs	r3, #0
 8001984:	60bb      	str	r3, [r7, #8]
 8001986:	4b19      	ldr	r3, [pc, #100]	; (80019ec <HAL_SPI_MspInit+0xc4>)
 8001988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198a:	4a18      	ldr	r2, [pc, #96]	; (80019ec <HAL_SPI_MspInit+0xc4>)
 800198c:	f043 0302 	orr.w	r3, r3, #2
 8001990:	6313      	str	r3, [r2, #48]	; 0x30
 8001992:	4b16      	ldr	r3, [pc, #88]	; (80019ec <HAL_SPI_MspInit+0xc4>)
 8001994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001996:	f003 0302 	and.w	r3, r3, #2
 800199a:	60bb      	str	r3, [r7, #8]
 800199c:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800199e:	23c0      	movs	r3, #192	; 0xc0
 80019a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a2:	2302      	movs	r3, #2
 80019a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a6:	2300      	movs	r3, #0
 80019a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019aa:	2303      	movs	r3, #3
 80019ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80019ae:	2305      	movs	r3, #5
 80019b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019b2:	f107 0314 	add.w	r3, r7, #20
 80019b6:	4619      	mov	r1, r3
 80019b8:	480d      	ldr	r0, [pc, #52]	; (80019f0 <HAL_SPI_MspInit+0xc8>)
 80019ba:	f001 fd63 	bl	8003484 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80019be:	2308      	movs	r3, #8
 80019c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c2:	2302      	movs	r3, #2
 80019c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c6:	2300      	movs	r3, #0
 80019c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019ca:	2303      	movs	r3, #3
 80019cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80019ce:	2305      	movs	r3, #5
 80019d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019d2:	f107 0314 	add.w	r3, r7, #20
 80019d6:	4619      	mov	r1, r3
 80019d8:	4806      	ldr	r0, [pc, #24]	; (80019f4 <HAL_SPI_MspInit+0xcc>)
 80019da:	f001 fd53 	bl	8003484 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80019de:	bf00      	nop
 80019e0:	3728      	adds	r7, #40	; 0x28
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	40013000 	.word	0x40013000
 80019ec:	40023800 	.word	0x40023800
 80019f0:	40020000 	.word	0x40020000
 80019f4:	40020400 	.word	0x40020400

080019f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019fe:	2300      	movs	r3, #0
 8001a00:	607b      	str	r3, [r7, #4]
 8001a02:	4b10      	ldr	r3, [pc, #64]	; (8001a44 <HAL_MspInit+0x4c>)
 8001a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a06:	4a0f      	ldr	r2, [pc, #60]	; (8001a44 <HAL_MspInit+0x4c>)
 8001a08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a0c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a0e:	4b0d      	ldr	r3, [pc, #52]	; (8001a44 <HAL_MspInit+0x4c>)
 8001a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a16:	607b      	str	r3, [r7, #4]
 8001a18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	603b      	str	r3, [r7, #0]
 8001a1e:	4b09      	ldr	r3, [pc, #36]	; (8001a44 <HAL_MspInit+0x4c>)
 8001a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a22:	4a08      	ldr	r2, [pc, #32]	; (8001a44 <HAL_MspInit+0x4c>)
 8001a24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a28:	6413      	str	r3, [r2, #64]	; 0x40
 8001a2a:	4b06      	ldr	r3, [pc, #24]	; (8001a44 <HAL_MspInit+0x4c>)
 8001a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a32:	603b      	str	r3, [r7, #0]
 8001a34:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a36:	bf00      	nop
 8001a38:	370c      	adds	r7, #12
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	40023800 	.word	0x40023800

08001a48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a4c:	e7fe      	b.n	8001a4c <NMI_Handler+0x4>

08001a4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a4e:	b480      	push	{r7}
 8001a50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a52:	e7fe      	b.n	8001a52 <HardFault_Handler+0x4>

08001a54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a58:	e7fe      	b.n	8001a58 <MemManage_Handler+0x4>

08001a5a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a5a:	b480      	push	{r7}
 8001a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a5e:	e7fe      	b.n	8001a5e <BusFault_Handler+0x4>

08001a60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a64:	e7fe      	b.n	8001a64 <UsageFault_Handler+0x4>

08001a66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a66:	b480      	push	{r7}
 8001a68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a6a:	bf00      	nop
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr

08001a74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a78:	bf00      	nop
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr

08001a82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a82:	b480      	push	{r7}
 8001a84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a86:	bf00      	nop
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr

08001a90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a94:	f000 fad8 	bl	8002048 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a98:	bf00      	nop
 8001a9a:	bd80      	pop	{r7, pc}

08001a9c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001aa0:	4802      	ldr	r0, [pc, #8]	; (8001aac <DMA1_Stream0_IRQHandler+0x10>)
 8001aa2:	f001 fa79 	bl	8002f98 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001aa6:	bf00      	nop
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	2000042c 	.word	0x2000042c

08001ab0 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 8001ab4:	4802      	ldr	r0, [pc, #8]	; (8001ac0 <DMA1_Stream4_IRQHandler+0x10>)
 8001ab6:	f001 fa6f 	bl	8002f98 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001aba:	bf00      	nop
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	20000ce0 	.word	0x20000ce0

08001ac4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001ac8:	4802      	ldr	r0, [pc, #8]	; (8001ad4 <DMA2_Stream0_IRQHandler+0x10>)
 8001aca:	f001 fa65 	bl	8002f98 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001ace:	bf00      	nop
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	20000378 	.word	0x20000378

08001ad8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001adc:	4802      	ldr	r0, [pc, #8]	; (8001ae8 <OTG_FS_IRQHandler+0x10>)
 8001ade:	f002 ffb6 	bl	8004a4e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001ae2:	bf00      	nop
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	20001268 	.word	0x20001268

08001aec <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b086      	sub	sp, #24
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	60f8      	str	r0, [r7, #12]
 8001af4:	60b9      	str	r1, [r7, #8]
 8001af6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001af8:	2300      	movs	r3, #0
 8001afa:	617b      	str	r3, [r7, #20]
 8001afc:	e00a      	b.n	8001b14 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001afe:	f3af 8000 	nop.w
 8001b02:	4601      	mov	r1, r0
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	1c5a      	adds	r2, r3, #1
 8001b08:	60ba      	str	r2, [r7, #8]
 8001b0a:	b2ca      	uxtb	r2, r1
 8001b0c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	3301      	adds	r3, #1
 8001b12:	617b      	str	r3, [r7, #20]
 8001b14:	697a      	ldr	r2, [r7, #20]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	dbf0      	blt.n	8001afe <_read+0x12>
	}

return len;
 8001b1c:	687b      	ldr	r3, [r7, #4]
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3718      	adds	r7, #24
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}

08001b26 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b26:	b580      	push	{r7, lr}
 8001b28:	b086      	sub	sp, #24
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	60f8      	str	r0, [r7, #12]
 8001b2e:	60b9      	str	r1, [r7, #8]
 8001b30:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b32:	2300      	movs	r3, #0
 8001b34:	617b      	str	r3, [r7, #20]
 8001b36:	e009      	b.n	8001b4c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	1c5a      	adds	r2, r3, #1
 8001b3c:	60ba      	str	r2, [r7, #8]
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	4618      	mov	r0, r3
 8001b42:	f7ff fd15 	bl	8001570 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	3301      	adds	r3, #1
 8001b4a:	617b      	str	r3, [r7, #20]
 8001b4c:	697a      	ldr	r2, [r7, #20]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	429a      	cmp	r2, r3
 8001b52:	dbf1      	blt.n	8001b38 <_write+0x12>
	}
	return len;
 8001b54:	687b      	ldr	r3, [r7, #4]
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3718      	adds	r7, #24
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}

08001b5e <_close>:

int _close(int file)
{
 8001b5e:	b480      	push	{r7}
 8001b60:	b083      	sub	sp, #12
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	6078      	str	r0, [r7, #4]
	return -1;
 8001b66:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	370c      	adds	r7, #12
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr

08001b76 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b76:	b480      	push	{r7}
 8001b78:	b083      	sub	sp, #12
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	6078      	str	r0, [r7, #4]
 8001b7e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b86:	605a      	str	r2, [r3, #4]
	return 0;
 8001b88:	2300      	movs	r3, #0
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	370c      	adds	r7, #12
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr

08001b96 <_isatty>:

int _isatty(int file)
{
 8001b96:	b480      	push	{r7}
 8001b98:	b083      	sub	sp, #12
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	6078      	str	r0, [r7, #4]
	return 1;
 8001b9e:	2301      	movs	r3, #1
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	370c      	adds	r7, #12
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr

08001bac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b085      	sub	sp, #20
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	60f8      	str	r0, [r7, #12]
 8001bb4:	60b9      	str	r1, [r7, #8]
 8001bb6:	607a      	str	r2, [r7, #4]
	return 0;
 8001bb8:	2300      	movs	r3, #0
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3714      	adds	r7, #20
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr
	...

08001bc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b086      	sub	sp, #24
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bd0:	4a14      	ldr	r2, [pc, #80]	; (8001c24 <_sbrk+0x5c>)
 8001bd2:	4b15      	ldr	r3, [pc, #84]	; (8001c28 <_sbrk+0x60>)
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bdc:	4b13      	ldr	r3, [pc, #76]	; (8001c2c <_sbrk+0x64>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d102      	bne.n	8001bea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001be4:	4b11      	ldr	r3, [pc, #68]	; (8001c2c <_sbrk+0x64>)
 8001be6:	4a12      	ldr	r2, [pc, #72]	; (8001c30 <_sbrk+0x68>)
 8001be8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bea:	4b10      	ldr	r3, [pc, #64]	; (8001c2c <_sbrk+0x64>)
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4413      	add	r3, r2
 8001bf2:	693a      	ldr	r2, [r7, #16]
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d207      	bcs.n	8001c08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bf8:	f00a f8e6 	bl	800bdc8 <__errno>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	220c      	movs	r2, #12
 8001c00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c02:	f04f 33ff 	mov.w	r3, #4294967295
 8001c06:	e009      	b.n	8001c1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c08:	4b08      	ldr	r3, [pc, #32]	; (8001c2c <_sbrk+0x64>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c0e:	4b07      	ldr	r3, [pc, #28]	; (8001c2c <_sbrk+0x64>)
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4413      	add	r3, r2
 8001c16:	4a05      	ldr	r2, [pc, #20]	; (8001c2c <_sbrk+0x64>)
 8001c18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	3718      	adds	r7, #24
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	20020000 	.word	0x20020000
 8001c28:	00000400 	.word	0x00000400
 8001c2c:	20000c94 	.word	0x20000c94
 8001c30:	200017a0 	.word	0x200017a0

08001c34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c38:	4b06      	ldr	r3, [pc, #24]	; (8001c54 <SystemInit+0x20>)
 8001c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c3e:	4a05      	ldr	r2, [pc, #20]	; (8001c54 <SystemInit+0x20>)
 8001c40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c48:	bf00      	nop
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	e000ed00 	.word	0xe000ed00

08001c58 <HAL_TIM_Base_MspInit>:
  HAL_TIM_MspPostInit(&htim3);

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b084      	sub	sp, #16
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a25      	ldr	r2, [pc, #148]	; (8001cfc <HAL_TIM_Base_MspInit+0xa4>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d144      	bne.n	8001cf4 <HAL_TIM_Base_MspInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	60fb      	str	r3, [r7, #12]
 8001c6e:	4b24      	ldr	r3, [pc, #144]	; (8001d00 <HAL_TIM_Base_MspInit+0xa8>)
 8001c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c72:	4a23      	ldr	r2, [pc, #140]	; (8001d00 <HAL_TIM_Base_MspInit+0xa8>)
 8001c74:	f043 0302 	orr.w	r3, r3, #2
 8001c78:	6413      	str	r3, [r2, #64]	; 0x40
 8001c7a:	4b21      	ldr	r3, [pc, #132]	; (8001d00 <HAL_TIM_Base_MspInit+0xa8>)
 8001c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7e:	f003 0302 	and.w	r3, r3, #2
 8001c82:	60fb      	str	r3, [r7, #12]
 8001c84:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH1_TRIG Init */
    hdma_tim3_ch1_trig.Instance = DMA1_Stream4;
 8001c86:	4b1f      	ldr	r3, [pc, #124]	; (8001d04 <HAL_TIM_Base_MspInit+0xac>)
 8001c88:	4a1f      	ldr	r2, [pc, #124]	; (8001d08 <HAL_TIM_Base_MspInit+0xb0>)
 8001c8a:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Channel = DMA_CHANNEL_5;
 8001c8c:	4b1d      	ldr	r3, [pc, #116]	; (8001d04 <HAL_TIM_Base_MspInit+0xac>)
 8001c8e:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8001c92:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c94:	4b1b      	ldr	r3, [pc, #108]	; (8001d04 <HAL_TIM_Base_MspInit+0xac>)
 8001c96:	2240      	movs	r2, #64	; 0x40
 8001c98:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c9a:	4b1a      	ldr	r3, [pc, #104]	; (8001d04 <HAL_TIM_Base_MspInit+0xac>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 8001ca0:	4b18      	ldr	r3, [pc, #96]	; (8001d04 <HAL_TIM_Base_MspInit+0xac>)
 8001ca2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ca6:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001ca8:	4b16      	ldr	r3, [pc, #88]	; (8001d04 <HAL_TIM_Base_MspInit+0xac>)
 8001caa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001cae:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001cb0:	4b14      	ldr	r3, [pc, #80]	; (8001d04 <HAL_TIM_Base_MspInit+0xac>)
 8001cb2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001cb6:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Mode = DMA_CIRCULAR;
 8001cb8:	4b12      	ldr	r3, [pc, #72]	; (8001d04 <HAL_TIM_Base_MspInit+0xac>)
 8001cba:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001cbe:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_LOW;
 8001cc0:	4b10      	ldr	r3, [pc, #64]	; (8001d04 <HAL_TIM_Base_MspInit+0xac>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1_trig.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001cc6:	4b0f      	ldr	r3, [pc, #60]	; (8001d04 <HAL_TIM_Base_MspInit+0xac>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 8001ccc:	480d      	ldr	r0, [pc, #52]	; (8001d04 <HAL_TIM_Base_MspInit+0xac>)
 8001cce:	f000 ffcb 	bl	8002c68 <HAL_DMA_Init>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d001      	beq.n	8001cdc <HAL_TIM_Base_MspInit+0x84>
    {
      Error_Handler();
 8001cd8:	f7ff fdea 	bl	80018b0 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	4a09      	ldr	r2, [pc, #36]	; (8001d04 <HAL_TIM_Base_MspInit+0xac>)
 8001ce0:	625a      	str	r2, [r3, #36]	; 0x24
 8001ce2:	4a08      	ldr	r2, [pc, #32]	; (8001d04 <HAL_TIM_Base_MspInit+0xac>)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	4a06      	ldr	r2, [pc, #24]	; (8001d04 <HAL_TIM_Base_MspInit+0xac>)
 8001cec:	639a      	str	r2, [r3, #56]	; 0x38
 8001cee:	4a05      	ldr	r2, [pc, #20]	; (8001d04 <HAL_TIM_Base_MspInit+0xac>)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001cf4:	bf00      	nop
 8001cf6:	3710      	adds	r7, #16
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	40000400 	.word	0x40000400
 8001d00:	40023800 	.word	0x40023800
 8001d04:	20000ce0 	.word	0x20000ce0
 8001d08:	40026070 	.word	0x40026070

08001d0c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b088      	sub	sp, #32
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d14:	f107 030c 	add.w	r3, r7, #12
 8001d18:	2200      	movs	r2, #0
 8001d1a:	601a      	str	r2, [r3, #0]
 8001d1c:	605a      	str	r2, [r3, #4]
 8001d1e:	609a      	str	r2, [r3, #8]
 8001d20:	60da      	str	r2, [r3, #12]
 8001d22:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a12      	ldr	r2, [pc, #72]	; (8001d74 <HAL_TIM_MspPostInit+0x68>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d11d      	bne.n	8001d6a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d2e:	2300      	movs	r3, #0
 8001d30:	60bb      	str	r3, [r7, #8]
 8001d32:	4b11      	ldr	r3, [pc, #68]	; (8001d78 <HAL_TIM_MspPostInit+0x6c>)
 8001d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d36:	4a10      	ldr	r2, [pc, #64]	; (8001d78 <HAL_TIM_MspPostInit+0x6c>)
 8001d38:	f043 0302 	orr.w	r3, r3, #2
 8001d3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d3e:	4b0e      	ldr	r3, [pc, #56]	; (8001d78 <HAL_TIM_MspPostInit+0x6c>)
 8001d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d42:	f003 0302 	and.w	r3, r3, #2
 8001d46:	60bb      	str	r3, [r7, #8]
 8001d48:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001d4a:	2310      	movs	r3, #16
 8001d4c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d4e:	2302      	movs	r3, #2
 8001d50:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d52:	2300      	movs	r3, #0
 8001d54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d56:	2300      	movs	r3, #0
 8001d58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001d5a:	2302      	movs	r3, #2
 8001d5c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d5e:	f107 030c 	add.w	r3, r7, #12
 8001d62:	4619      	mov	r1, r3
 8001d64:	4805      	ldr	r0, [pc, #20]	; (8001d7c <HAL_TIM_MspPostInit+0x70>)
 8001d66:	f001 fb8d 	bl	8003484 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001d6a:	bf00      	nop
 8001d6c:	3720      	adds	r7, #32
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	40000400 	.word	0x40000400
 8001d78:	40023800 	.word	0x40023800
 8001d7c:	40020400 	.word	0x40020400

08001d80 <TIM3_Init>:
  /* USER CODE END TIM3_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void TIM3_Init(void){
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b08e      	sub	sp, #56	; 0x38
 8001d84:	af00      	add	r7, sp, #0

	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d86:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	601a      	str	r2, [r3, #0]
 8001d8e:	605a      	str	r2, [r3, #4]
 8001d90:	609a      	str	r2, [r3, #8]
 8001d92:	60da      	str	r2, [r3, #12]
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d94:	f107 0320 	add.w	r3, r7, #32
 8001d98:	2200      	movs	r2, #0
 8001d9a:	601a      	str	r2, [r3, #0]
 8001d9c:	605a      	str	r2, [r3, #4]
	  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d9e:	1d3b      	adds	r3, r7, #4
 8001da0:	2200      	movs	r2, #0
 8001da2:	601a      	str	r2, [r3, #0]
 8001da4:	605a      	str	r2, [r3, #4]
 8001da6:	609a      	str	r2, [r3, #8]
 8001da8:	60da      	str	r2, [r3, #12]
 8001daa:	611a      	str	r2, [r3, #16]
 8001dac:	615a      	str	r2, [r3, #20]
 8001dae:	619a      	str	r2, [r3, #24]


	  htim3.Instance = TIM3;
 8001db0:	4b2c      	ldr	r3, [pc, #176]	; (8001e64 <TIM3_Init+0xe4>)
 8001db2:	4a2d      	ldr	r2, [pc, #180]	; (8001e68 <TIM3_Init+0xe8>)
 8001db4:	601a      	str	r2, [r3, #0]
	  htim3.Init.Prescaler = 0;
 8001db6:	4b2b      	ldr	r3, [pc, #172]	; (8001e64 <TIM3_Init+0xe4>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	605a      	str	r2, [r3, #4]
	  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dbc:	4b29      	ldr	r3, [pc, #164]	; (8001e64 <TIM3_Init+0xe4>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	609a      	str	r2, [r3, #8]
	  htim3.Init.Period = 120 - 1;
 8001dc2:	4b28      	ldr	r3, [pc, #160]	; (8001e64 <TIM3_Init+0xe4>)
 8001dc4:	2277      	movs	r2, #119	; 0x77
 8001dc6:	60da      	str	r2, [r3, #12]
	  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dc8:	4b26      	ldr	r3, [pc, #152]	; (8001e64 <TIM3_Init+0xe4>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	611a      	str	r2, [r3, #16]
	  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dce:	4b25      	ldr	r3, [pc, #148]	; (8001e64 <TIM3_Init+0xe4>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	619a      	str	r2, [r3, #24]
	  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001dd4:	4823      	ldr	r0, [pc, #140]	; (8001e64 <TIM3_Init+0xe4>)
 8001dd6:	f004 fc30 	bl	800663a <HAL_TIM_Base_Init>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d001      	beq.n	8001de4 <TIM3_Init+0x64>
	  {
	    Error_Handler();
 8001de0:	f7ff fd66 	bl	80018b0 <Error_Handler>
	  }
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001de4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001de8:	62bb      	str	r3, [r7, #40]	; 0x28
	  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001dea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001dee:	4619      	mov	r1, r3
 8001df0:	481c      	ldr	r0, [pc, #112]	; (8001e64 <TIM3_Init+0xe4>)
 8001df2:	f005 f803 	bl	8006dfc <HAL_TIM_ConfigClockSource>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d001      	beq.n	8001e00 <TIM3_Init+0x80>
	  {
	    Error_Handler();
 8001dfc:	f7ff fd58 	bl	80018b0 <Error_Handler>
	  }
	  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001e00:	4818      	ldr	r0, [pc, #96]	; (8001e64 <TIM3_Init+0xe4>)
 8001e02:	f004 fc69 	bl	80066d8 <HAL_TIM_PWM_Init>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d001      	beq.n	8001e10 <TIM3_Init+0x90>
	  {
	    Error_Handler();
 8001e0c:	f7ff fd50 	bl	80018b0 <Error_Handler>
	  }
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e10:	2300      	movs	r3, #0
 8001e12:	623b      	str	r3, [r7, #32]
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e14:	2300      	movs	r3, #0
 8001e16:	627b      	str	r3, [r7, #36]	; 0x24
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001e18:	f107 0320 	add.w	r3, r7, #32
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	4811      	ldr	r0, [pc, #68]	; (8001e64 <TIM3_Init+0xe4>)
 8001e20:	f005 fc6e 	bl	8007700 <HAL_TIMEx_MasterConfigSynchronization>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d001      	beq.n	8001e2e <TIM3_Init+0xae>
	  {
	    Error_Handler();
 8001e2a:	f7ff fd41 	bl	80018b0 <Error_Handler>
	  }
	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e2e:	2360      	movs	r3, #96	; 0x60
 8001e30:	607b      	str	r3, [r7, #4]
	  sConfigOC.Pulse = 0;
 8001e32:	2300      	movs	r3, #0
 8001e34:	60bb      	str	r3, [r7, #8]
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e36:	2300      	movs	r3, #0
 8001e38:	60fb      	str	r3, [r7, #12]
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	617b      	str	r3, [r7, #20]
	  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e3e:	1d3b      	adds	r3, r7, #4
 8001e40:	2200      	movs	r2, #0
 8001e42:	4619      	mov	r1, r3
 8001e44:	4807      	ldr	r0, [pc, #28]	; (8001e64 <TIM3_Init+0xe4>)
 8001e46:	f004 ff17 	bl	8006c78 <HAL_TIM_PWM_ConfigChannel>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d001      	beq.n	8001e54 <TIM3_Init+0xd4>
	  {
	    Error_Handler();
 8001e50:	f7ff fd2e 	bl	80018b0 <Error_Handler>
	  }

	  HAL_TIM_MspPostInit(&htim3);
 8001e54:	4803      	ldr	r0, [pc, #12]	; (8001e64 <TIM3_Init+0xe4>)
 8001e56:	f7ff ff59 	bl	8001d0c <HAL_TIM_MspPostInit>
}
 8001e5a:	bf00      	nop
 8001e5c:	3738      	adds	r7, #56	; 0x38
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	20000c98 	.word	0x20000c98
 8001e68:	40000400 	.word	0x40000400

08001e6c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001e70:	4b11      	ldr	r3, [pc, #68]	; (8001eb8 <MX_USART1_UART_Init+0x4c>)
 8001e72:	4a12      	ldr	r2, [pc, #72]	; (8001ebc <MX_USART1_UART_Init+0x50>)
 8001e74:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001e76:	4b10      	ldr	r3, [pc, #64]	; (8001eb8 <MX_USART1_UART_Init+0x4c>)
 8001e78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e7c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e7e:	4b0e      	ldr	r3, [pc, #56]	; (8001eb8 <MX_USART1_UART_Init+0x4c>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001e84:	4b0c      	ldr	r3, [pc, #48]	; (8001eb8 <MX_USART1_UART_Init+0x4c>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001e8a:	4b0b      	ldr	r3, [pc, #44]	; (8001eb8 <MX_USART1_UART_Init+0x4c>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001e90:	4b09      	ldr	r3, [pc, #36]	; (8001eb8 <MX_USART1_UART_Init+0x4c>)
 8001e92:	220c      	movs	r2, #12
 8001e94:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e96:	4b08      	ldr	r3, [pc, #32]	; (8001eb8 <MX_USART1_UART_Init+0x4c>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e9c:	4b06      	ldr	r3, [pc, #24]	; (8001eb8 <MX_USART1_UART_Init+0x4c>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001ea2:	4805      	ldr	r0, [pc, #20]	; (8001eb8 <MX_USART1_UART_Init+0x4c>)
 8001ea4:	f005 fc9a 	bl	80077dc <HAL_UART_Init>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d001      	beq.n	8001eb2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001eae:	f7ff fcff 	bl	80018b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001eb2:	bf00      	nop
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	20000d40 	.word	0x20000d40
 8001ebc:	40011000 	.word	0x40011000

08001ec0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b08a      	sub	sp, #40	; 0x28
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ec8:	f107 0314 	add.w	r3, r7, #20
 8001ecc:	2200      	movs	r2, #0
 8001ece:	601a      	str	r2, [r3, #0]
 8001ed0:	605a      	str	r2, [r3, #4]
 8001ed2:	609a      	str	r2, [r3, #8]
 8001ed4:	60da      	str	r2, [r3, #12]
 8001ed6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a19      	ldr	r2, [pc, #100]	; (8001f44 <HAL_UART_MspInit+0x84>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d12c      	bne.n	8001f3c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	613b      	str	r3, [r7, #16]
 8001ee6:	4b18      	ldr	r3, [pc, #96]	; (8001f48 <HAL_UART_MspInit+0x88>)
 8001ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eea:	4a17      	ldr	r2, [pc, #92]	; (8001f48 <HAL_UART_MspInit+0x88>)
 8001eec:	f043 0310 	orr.w	r3, r3, #16
 8001ef0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ef2:	4b15      	ldr	r3, [pc, #84]	; (8001f48 <HAL_UART_MspInit+0x88>)
 8001ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ef6:	f003 0310 	and.w	r3, r3, #16
 8001efa:	613b      	str	r3, [r7, #16]
 8001efc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001efe:	2300      	movs	r3, #0
 8001f00:	60fb      	str	r3, [r7, #12]
 8001f02:	4b11      	ldr	r3, [pc, #68]	; (8001f48 <HAL_UART_MspInit+0x88>)
 8001f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f06:	4a10      	ldr	r2, [pc, #64]	; (8001f48 <HAL_UART_MspInit+0x88>)
 8001f08:	f043 0301 	orr.w	r3, r3, #1
 8001f0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f0e:	4b0e      	ldr	r3, [pc, #56]	; (8001f48 <HAL_UART_MspInit+0x88>)
 8001f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f12:	f003 0301 	and.w	r3, r3, #1
 8001f16:	60fb      	str	r3, [r7, #12]
 8001f18:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001f1a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001f1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f20:	2302      	movs	r3, #2
 8001f22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f24:	2300      	movs	r3, #0
 8001f26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f28:	2303      	movs	r3, #3
 8001f2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001f2c:	2307      	movs	r3, #7
 8001f2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f30:	f107 0314 	add.w	r3, r7, #20
 8001f34:	4619      	mov	r1, r3
 8001f36:	4805      	ldr	r0, [pc, #20]	; (8001f4c <HAL_UART_MspInit+0x8c>)
 8001f38:	f001 faa4 	bl	8003484 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001f3c:	bf00      	nop
 8001f3e:	3728      	adds	r7, #40	; 0x28
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	40011000 	.word	0x40011000
 8001f48:	40023800 	.word	0x40023800
 8001f4c:	40020000 	.word	0x40020000

08001f50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001f50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f88 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f54:	480d      	ldr	r0, [pc, #52]	; (8001f8c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001f56:	490e      	ldr	r1, [pc, #56]	; (8001f90 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001f58:	4a0e      	ldr	r2, [pc, #56]	; (8001f94 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f5c:	e002      	b.n	8001f64 <LoopCopyDataInit>

08001f5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f62:	3304      	adds	r3, #4

08001f64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f68:	d3f9      	bcc.n	8001f5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f6a:	4a0b      	ldr	r2, [pc, #44]	; (8001f98 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001f6c:	4c0b      	ldr	r4, [pc, #44]	; (8001f9c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001f6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f70:	e001      	b.n	8001f76 <LoopFillZerobss>

08001f72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f74:	3204      	adds	r2, #4

08001f76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f78:	d3fb      	bcc.n	8001f72 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001f7a:	f7ff fe5b 	bl	8001c34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f7e:	f009 ff29 	bl	800bdd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f82:	f7ff fb65 	bl	8001650 <main>
  bx  lr    
 8001f86:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001f88:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001f8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f90:	2000016c 	.word	0x2000016c
  ldr r2, =_sidata
 8001f94:	0800d360 	.word	0x0800d360
  ldr r2, =_sbss
 8001f98:	2000016c 	.word	0x2000016c
  ldr r4, =_ebss
 8001f9c:	200017a0 	.word	0x200017a0

08001fa0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001fa0:	e7fe      	b.n	8001fa0 <ADC_IRQHandler>
	...

08001fa4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001fa8:	4b0e      	ldr	r3, [pc, #56]	; (8001fe4 <HAL_Init+0x40>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a0d      	ldr	r2, [pc, #52]	; (8001fe4 <HAL_Init+0x40>)
 8001fae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fb2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001fb4:	4b0b      	ldr	r3, [pc, #44]	; (8001fe4 <HAL_Init+0x40>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a0a      	ldr	r2, [pc, #40]	; (8001fe4 <HAL_Init+0x40>)
 8001fba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001fbe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fc0:	4b08      	ldr	r3, [pc, #32]	; (8001fe4 <HAL_Init+0x40>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a07      	ldr	r2, [pc, #28]	; (8001fe4 <HAL_Init+0x40>)
 8001fc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fcc:	2003      	movs	r0, #3
 8001fce:	f000 fded 	bl	8002bac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fd2:	200f      	movs	r0, #15
 8001fd4:	f000 f808 	bl	8001fe8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fd8:	f7ff fd0e 	bl	80019f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fdc:	2300      	movs	r3, #0
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	40023c00 	.word	0x40023c00

08001fe8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b082      	sub	sp, #8
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ff0:	4b12      	ldr	r3, [pc, #72]	; (800203c <HAL_InitTick+0x54>)
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	4b12      	ldr	r3, [pc, #72]	; (8002040 <HAL_InitTick+0x58>)
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ffe:	fbb3 f3f1 	udiv	r3, r3, r1
 8002002:	fbb2 f3f3 	udiv	r3, r2, r3
 8002006:	4618      	mov	r0, r3
 8002008:	f000 fe13 	bl	8002c32 <HAL_SYSTICK_Config>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d001      	beq.n	8002016 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e00e      	b.n	8002034 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2b0f      	cmp	r3, #15
 800201a:	d80a      	bhi.n	8002032 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800201c:	2200      	movs	r2, #0
 800201e:	6879      	ldr	r1, [r7, #4]
 8002020:	f04f 30ff 	mov.w	r0, #4294967295
 8002024:	f000 fdcd 	bl	8002bc2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002028:	4a06      	ldr	r2, [pc, #24]	; (8002044 <HAL_InitTick+0x5c>)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800202e:	2300      	movs	r3, #0
 8002030:	e000      	b.n	8002034 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
}
 8002034:	4618      	mov	r0, r3
 8002036:	3708      	adds	r7, #8
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}
 800203c:	2000001c 	.word	0x2000001c
 8002040:	20000024 	.word	0x20000024
 8002044:	20000020 	.word	0x20000020

08002048 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002048:	b480      	push	{r7}
 800204a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800204c:	4b06      	ldr	r3, [pc, #24]	; (8002068 <HAL_IncTick+0x20>)
 800204e:	781b      	ldrb	r3, [r3, #0]
 8002050:	461a      	mov	r2, r3
 8002052:	4b06      	ldr	r3, [pc, #24]	; (800206c <HAL_IncTick+0x24>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4413      	add	r3, r2
 8002058:	4a04      	ldr	r2, [pc, #16]	; (800206c <HAL_IncTick+0x24>)
 800205a:	6013      	str	r3, [r2, #0]
}
 800205c:	bf00      	nop
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr
 8002066:	bf00      	nop
 8002068:	20000024 	.word	0x20000024
 800206c:	20000d84 	.word	0x20000d84

08002070 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0
  return uwTick;
 8002074:	4b03      	ldr	r3, [pc, #12]	; (8002084 <HAL_GetTick+0x14>)
 8002076:	681b      	ldr	r3, [r3, #0]
}
 8002078:	4618      	mov	r0, r3
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr
 8002082:	bf00      	nop
 8002084:	20000d84 	.word	0x20000d84

08002088 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b084      	sub	sp, #16
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002090:	f7ff ffee 	bl	8002070 <HAL_GetTick>
 8002094:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020a0:	d005      	beq.n	80020ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020a2:	4b0a      	ldr	r3, [pc, #40]	; (80020cc <HAL_Delay+0x44>)
 80020a4:	781b      	ldrb	r3, [r3, #0]
 80020a6:	461a      	mov	r2, r3
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	4413      	add	r3, r2
 80020ac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80020ae:	bf00      	nop
 80020b0:	f7ff ffde 	bl	8002070 <HAL_GetTick>
 80020b4:	4602      	mov	r2, r0
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	68fa      	ldr	r2, [r7, #12]
 80020bc:	429a      	cmp	r2, r3
 80020be:	d8f7      	bhi.n	80020b0 <HAL_Delay+0x28>
  {
  }
}
 80020c0:	bf00      	nop
 80020c2:	bf00      	nop
 80020c4:	3710      	adds	r7, #16
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	20000024 	.word	0x20000024

080020d0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b084      	sub	sp, #16
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020d8:	2300      	movs	r3, #0
 80020da:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d101      	bne.n	80020e6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e033      	b.n	800214e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d109      	bne.n	8002102 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f7fe ffe2 	bl	80010b8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2200      	movs	r2, #0
 80020f8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2200      	movs	r2, #0
 80020fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002106:	f003 0310 	and.w	r3, r3, #16
 800210a:	2b00      	cmp	r3, #0
 800210c:	d118      	bne.n	8002140 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002112:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002116:	f023 0302 	bic.w	r3, r3, #2
 800211a:	f043 0202 	orr.w	r2, r3, #2
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f000 fab2 	bl	800268c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2200      	movs	r2, #0
 800212c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002132:	f023 0303 	bic.w	r3, r3, #3
 8002136:	f043 0201 	orr.w	r2, r3, #1
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	641a      	str	r2, [r3, #64]	; 0x40
 800213e:	e001      	b.n	8002144 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2200      	movs	r2, #0
 8002148:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800214c:	7bfb      	ldrb	r3, [r7, #15]
}
 800214e:	4618      	mov	r0, r3
 8002150:	3710      	adds	r7, #16
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
	...

08002158 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b086      	sub	sp, #24
 800215c:	af00      	add	r7, sp, #0
 800215e:	60f8      	str	r0, [r7, #12]
 8002160:	60b9      	str	r1, [r7, #8]
 8002162:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002164:	2300      	movs	r3, #0
 8002166:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800216e:	2b01      	cmp	r3, #1
 8002170:	d101      	bne.n	8002176 <HAL_ADC_Start_DMA+0x1e>
 8002172:	2302      	movs	r3, #2
 8002174:	e0ce      	b.n	8002314 <HAL_ADC_Start_DMA+0x1bc>
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	2201      	movs	r2, #1
 800217a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	f003 0301 	and.w	r3, r3, #1
 8002188:	2b01      	cmp	r3, #1
 800218a:	d018      	beq.n	80021be <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	689a      	ldr	r2, [r3, #8]
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f042 0201 	orr.w	r2, r2, #1
 800219a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800219c:	4b5f      	ldr	r3, [pc, #380]	; (800231c <HAL_ADC_Start_DMA+0x1c4>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a5f      	ldr	r2, [pc, #380]	; (8002320 <HAL_ADC_Start_DMA+0x1c8>)
 80021a2:	fba2 2303 	umull	r2, r3, r2, r3
 80021a6:	0c9a      	lsrs	r2, r3, #18
 80021a8:	4613      	mov	r3, r2
 80021aa:	005b      	lsls	r3, r3, #1
 80021ac:	4413      	add	r3, r2
 80021ae:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80021b0:	e002      	b.n	80021b8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	3b01      	subs	r3, #1
 80021b6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d1f9      	bne.n	80021b2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80021cc:	d107      	bne.n	80021de <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	689a      	ldr	r2, [r3, #8]
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80021dc:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	f003 0301 	and.w	r3, r3, #1
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	f040 8086 	bne.w	80022fa <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80021f6:	f023 0301 	bic.w	r3, r3, #1
 80021fa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800220c:	2b00      	cmp	r3, #0
 800220e:	d007      	beq.n	8002220 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002214:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002218:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002224:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002228:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800222c:	d106      	bne.n	800223c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002232:	f023 0206 	bic.w	r2, r3, #6
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	645a      	str	r2, [r3, #68]	; 0x44
 800223a:	e002      	b.n	8002242 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	2200      	movs	r2, #0
 8002240:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2200      	movs	r2, #0
 8002246:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800224a:	4b36      	ldr	r3, [pc, #216]	; (8002324 <HAL_ADC_Start_DMA+0x1cc>)
 800224c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002252:	4a35      	ldr	r2, [pc, #212]	; (8002328 <HAL_ADC_Start_DMA+0x1d0>)
 8002254:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800225a:	4a34      	ldr	r2, [pc, #208]	; (800232c <HAL_ADC_Start_DMA+0x1d4>)
 800225c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002262:	4a33      	ldr	r2, [pc, #204]	; (8002330 <HAL_ADC_Start_DMA+0x1d8>)
 8002264:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800226e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	685a      	ldr	r2, [r3, #4]
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800227e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	689a      	ldr	r2, [r3, #8]
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800228e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	334c      	adds	r3, #76	; 0x4c
 800229a:	4619      	mov	r1, r3
 800229c:	68ba      	ldr	r2, [r7, #8]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	f000 fd90 	bl	8002dc4 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f003 031f 	and.w	r3, r3, #31
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d10f      	bne.n	80022d0 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d129      	bne.n	8002312 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	689a      	ldr	r2, [r3, #8]
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80022cc:	609a      	str	r2, [r3, #8]
 80022ce:	e020      	b.n	8002312 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a17      	ldr	r2, [pc, #92]	; (8002334 <HAL_ADC_Start_DMA+0x1dc>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d11b      	bne.n	8002312 <HAL_ADC_Start_DMA+0x1ba>
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d114      	bne.n	8002312 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	689a      	ldr	r2, [r3, #8]
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80022f6:	609a      	str	r2, [r3, #8]
 80022f8:	e00b      	b.n	8002312 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fe:	f043 0210 	orr.w	r2, r3, #16
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800230a:	f043 0201 	orr.w	r2, r3, #1
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002312:	2300      	movs	r3, #0
}
 8002314:	4618      	mov	r0, r3
 8002316:	3718      	adds	r7, #24
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}
 800231c:	2000001c 	.word	0x2000001c
 8002320:	431bde83 	.word	0x431bde83
 8002324:	40012300 	.word	0x40012300
 8002328:	08002885 	.word	0x08002885
 800232c:	0800293f 	.word	0x0800293f
 8002330:	0800295b 	.word	0x0800295b
 8002334:	40012000 	.word	0x40012000

08002338 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b084      	sub	sp, #16
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002340:	2300      	movs	r3, #0
 8002342:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800234a:	2b01      	cmp	r3, #1
 800234c:	d101      	bne.n	8002352 <HAL_ADC_Stop_DMA+0x1a>
 800234e:	2302      	movs	r3, #2
 8002350:	e048      	b.n	80023e4 <HAL_ADC_Stop_DMA+0xac>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2201      	movs	r2, #1
 8002356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	689a      	ldr	r2, [r3, #8]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f022 0201 	bic.w	r2, r2, #1
 8002368:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	f003 0301 	and.w	r3, r3, #1
 8002374:	2b00      	cmp	r3, #0
 8002376:	d130      	bne.n	80023da <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	689a      	ldr	r2, [r3, #8]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002386:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800238c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002390:	b2db      	uxtb	r3, r3
 8002392:	2b02      	cmp	r3, #2
 8002394:	d10f      	bne.n	80023b6 <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800239a:	4618      	mov	r0, r3
 800239c:	f000 fd6a 	bl	8002e74 <HAL_DMA_Abort>
 80023a0:	4603      	mov	r3, r0
 80023a2:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 80023a4:	7bfb      	ldrb	r3, [r7, #15]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d005      	beq.n	80023b6 <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	685a      	ldr	r2, [r3, #4]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 80023c4:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ca:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80023ce:	f023 0301 	bic.w	r3, r3, #1
 80023d2:	f043 0201 	orr.w	r2, r3, #1
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2200      	movs	r2, #0
 80023de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80023e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	3710      	adds	r7, #16
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}

080023ec <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b083      	sub	sp, #12
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80023f4:	bf00      	nop
 80023f6:	370c      	adds	r7, #12
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr

08002400 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002408:	bf00      	nop
 800240a:	370c      	adds	r7, #12
 800240c:	46bd      	mov	sp, r7
 800240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002412:	4770      	bx	lr

08002414 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002414:	b480      	push	{r7}
 8002416:	b083      	sub	sp, #12
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800241c:	bf00      	nop
 800241e:	370c      	adds	r7, #12
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr

08002428 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002428:	b480      	push	{r7}
 800242a:	b085      	sub	sp, #20
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002432:	2300      	movs	r3, #0
 8002434:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800243c:	2b01      	cmp	r3, #1
 800243e:	d101      	bne.n	8002444 <HAL_ADC_ConfigChannel+0x1c>
 8002440:	2302      	movs	r3, #2
 8002442:	e113      	b.n	800266c <HAL_ADC_ConfigChannel+0x244>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2201      	movs	r2, #1
 8002448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	2b09      	cmp	r3, #9
 8002452:	d925      	bls.n	80024a0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	68d9      	ldr	r1, [r3, #12]
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	b29b      	uxth	r3, r3
 8002460:	461a      	mov	r2, r3
 8002462:	4613      	mov	r3, r2
 8002464:	005b      	lsls	r3, r3, #1
 8002466:	4413      	add	r3, r2
 8002468:	3b1e      	subs	r3, #30
 800246a:	2207      	movs	r2, #7
 800246c:	fa02 f303 	lsl.w	r3, r2, r3
 8002470:	43da      	mvns	r2, r3
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	400a      	ands	r2, r1
 8002478:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	68d9      	ldr	r1, [r3, #12]
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	689a      	ldr	r2, [r3, #8]
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	b29b      	uxth	r3, r3
 800248a:	4618      	mov	r0, r3
 800248c:	4603      	mov	r3, r0
 800248e:	005b      	lsls	r3, r3, #1
 8002490:	4403      	add	r3, r0
 8002492:	3b1e      	subs	r3, #30
 8002494:	409a      	lsls	r2, r3
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	430a      	orrs	r2, r1
 800249c:	60da      	str	r2, [r3, #12]
 800249e:	e022      	b.n	80024e6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	6919      	ldr	r1, [r3, #16]
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	b29b      	uxth	r3, r3
 80024ac:	461a      	mov	r2, r3
 80024ae:	4613      	mov	r3, r2
 80024b0:	005b      	lsls	r3, r3, #1
 80024b2:	4413      	add	r3, r2
 80024b4:	2207      	movs	r2, #7
 80024b6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ba:	43da      	mvns	r2, r3
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	400a      	ands	r2, r1
 80024c2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	6919      	ldr	r1, [r3, #16]
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	689a      	ldr	r2, [r3, #8]
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	b29b      	uxth	r3, r3
 80024d4:	4618      	mov	r0, r3
 80024d6:	4603      	mov	r3, r0
 80024d8:	005b      	lsls	r3, r3, #1
 80024da:	4403      	add	r3, r0
 80024dc:	409a      	lsls	r2, r3
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	430a      	orrs	r2, r1
 80024e4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	2b06      	cmp	r3, #6
 80024ec:	d824      	bhi.n	8002538 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	685a      	ldr	r2, [r3, #4]
 80024f8:	4613      	mov	r3, r2
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	4413      	add	r3, r2
 80024fe:	3b05      	subs	r3, #5
 8002500:	221f      	movs	r2, #31
 8002502:	fa02 f303 	lsl.w	r3, r2, r3
 8002506:	43da      	mvns	r2, r3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	400a      	ands	r2, r1
 800250e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	b29b      	uxth	r3, r3
 800251c:	4618      	mov	r0, r3
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	685a      	ldr	r2, [r3, #4]
 8002522:	4613      	mov	r3, r2
 8002524:	009b      	lsls	r3, r3, #2
 8002526:	4413      	add	r3, r2
 8002528:	3b05      	subs	r3, #5
 800252a:	fa00 f203 	lsl.w	r2, r0, r3
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	430a      	orrs	r2, r1
 8002534:	635a      	str	r2, [r3, #52]	; 0x34
 8002536:	e04c      	b.n	80025d2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	2b0c      	cmp	r3, #12
 800253e:	d824      	bhi.n	800258a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	685a      	ldr	r2, [r3, #4]
 800254a:	4613      	mov	r3, r2
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	4413      	add	r3, r2
 8002550:	3b23      	subs	r3, #35	; 0x23
 8002552:	221f      	movs	r2, #31
 8002554:	fa02 f303 	lsl.w	r3, r2, r3
 8002558:	43da      	mvns	r2, r3
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	400a      	ands	r2, r1
 8002560:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	b29b      	uxth	r3, r3
 800256e:	4618      	mov	r0, r3
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	685a      	ldr	r2, [r3, #4]
 8002574:	4613      	mov	r3, r2
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	4413      	add	r3, r2
 800257a:	3b23      	subs	r3, #35	; 0x23
 800257c:	fa00 f203 	lsl.w	r2, r0, r3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	430a      	orrs	r2, r1
 8002586:	631a      	str	r2, [r3, #48]	; 0x30
 8002588:	e023      	b.n	80025d2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	685a      	ldr	r2, [r3, #4]
 8002594:	4613      	mov	r3, r2
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	4413      	add	r3, r2
 800259a:	3b41      	subs	r3, #65	; 0x41
 800259c:	221f      	movs	r2, #31
 800259e:	fa02 f303 	lsl.w	r3, r2, r3
 80025a2:	43da      	mvns	r2, r3
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	400a      	ands	r2, r1
 80025aa:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	b29b      	uxth	r3, r3
 80025b8:	4618      	mov	r0, r3
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	685a      	ldr	r2, [r3, #4]
 80025be:	4613      	mov	r3, r2
 80025c0:	009b      	lsls	r3, r3, #2
 80025c2:	4413      	add	r3, r2
 80025c4:	3b41      	subs	r3, #65	; 0x41
 80025c6:	fa00 f203 	lsl.w	r2, r0, r3
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	430a      	orrs	r2, r1
 80025d0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80025d2:	4b29      	ldr	r3, [pc, #164]	; (8002678 <HAL_ADC_ConfigChannel+0x250>)
 80025d4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a28      	ldr	r2, [pc, #160]	; (800267c <HAL_ADC_ConfigChannel+0x254>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d10f      	bne.n	8002600 <HAL_ADC_ConfigChannel+0x1d8>
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	2b12      	cmp	r3, #18
 80025e6:	d10b      	bne.n	8002600 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a1d      	ldr	r2, [pc, #116]	; (800267c <HAL_ADC_ConfigChannel+0x254>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d12b      	bne.n	8002662 <HAL_ADC_ConfigChannel+0x23a>
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a1c      	ldr	r2, [pc, #112]	; (8002680 <HAL_ADC_ConfigChannel+0x258>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d003      	beq.n	800261c <HAL_ADC_ConfigChannel+0x1f4>
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	2b11      	cmp	r3, #17
 800261a:	d122      	bne.n	8002662 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a11      	ldr	r2, [pc, #68]	; (8002680 <HAL_ADC_ConfigChannel+0x258>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d111      	bne.n	8002662 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800263e:	4b11      	ldr	r3, [pc, #68]	; (8002684 <HAL_ADC_ConfigChannel+0x25c>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a11      	ldr	r2, [pc, #68]	; (8002688 <HAL_ADC_ConfigChannel+0x260>)
 8002644:	fba2 2303 	umull	r2, r3, r2, r3
 8002648:	0c9a      	lsrs	r2, r3, #18
 800264a:	4613      	mov	r3, r2
 800264c:	009b      	lsls	r3, r3, #2
 800264e:	4413      	add	r3, r2
 8002650:	005b      	lsls	r3, r3, #1
 8002652:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002654:	e002      	b.n	800265c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	3b01      	subs	r3, #1
 800265a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d1f9      	bne.n	8002656 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2200      	movs	r2, #0
 8002666:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800266a:	2300      	movs	r3, #0
}
 800266c:	4618      	mov	r0, r3
 800266e:	3714      	adds	r7, #20
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr
 8002678:	40012300 	.word	0x40012300
 800267c:	40012000 	.word	0x40012000
 8002680:	10000012 	.word	0x10000012
 8002684:	2000001c 	.word	0x2000001c
 8002688:	431bde83 	.word	0x431bde83

0800268c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800268c:	b480      	push	{r7}
 800268e:	b085      	sub	sp, #20
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002694:	4b79      	ldr	r3, [pc, #484]	; (800287c <ADC_Init+0x1f0>)
 8002696:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	685a      	ldr	r2, [r3, #4]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	431a      	orrs	r2, r3
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	685a      	ldr	r2, [r3, #4]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80026c0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	6859      	ldr	r1, [r3, #4]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	691b      	ldr	r3, [r3, #16]
 80026cc:	021a      	lsls	r2, r3, #8
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	430a      	orrs	r2, r1
 80026d4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	685a      	ldr	r2, [r3, #4]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80026e4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	6859      	ldr	r1, [r3, #4]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	689a      	ldr	r2, [r3, #8]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	430a      	orrs	r2, r1
 80026f6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	689a      	ldr	r2, [r3, #8]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002706:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	6899      	ldr	r1, [r3, #8]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	68da      	ldr	r2, [r3, #12]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	430a      	orrs	r2, r1
 8002718:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800271e:	4a58      	ldr	r2, [pc, #352]	; (8002880 <ADC_Init+0x1f4>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d022      	beq.n	800276a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	689a      	ldr	r2, [r3, #8]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002732:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	6899      	ldr	r1, [r3, #8]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	430a      	orrs	r2, r1
 8002744:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	689a      	ldr	r2, [r3, #8]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002754:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	6899      	ldr	r1, [r3, #8]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	430a      	orrs	r2, r1
 8002766:	609a      	str	r2, [r3, #8]
 8002768:	e00f      	b.n	800278a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	689a      	ldr	r2, [r3, #8]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002778:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	689a      	ldr	r2, [r3, #8]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002788:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	689a      	ldr	r2, [r3, #8]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f022 0202 	bic.w	r2, r2, #2
 8002798:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	6899      	ldr	r1, [r3, #8]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	7e1b      	ldrb	r3, [r3, #24]
 80027a4:	005a      	lsls	r2, r3, #1
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	430a      	orrs	r2, r1
 80027ac:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d01b      	beq.n	80027f0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	685a      	ldr	r2, [r3, #4]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80027c6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	685a      	ldr	r2, [r3, #4]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80027d6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	6859      	ldr	r1, [r3, #4]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e2:	3b01      	subs	r3, #1
 80027e4:	035a      	lsls	r2, r3, #13
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	430a      	orrs	r2, r1
 80027ec:	605a      	str	r2, [r3, #4]
 80027ee:	e007      	b.n	8002800 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	685a      	ldr	r2, [r3, #4]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027fe:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800280e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	69db      	ldr	r3, [r3, #28]
 800281a:	3b01      	subs	r3, #1
 800281c:	051a      	lsls	r2, r3, #20
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	430a      	orrs	r2, r1
 8002824:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	689a      	ldr	r2, [r3, #8]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002834:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	6899      	ldr	r1, [r3, #8]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002842:	025a      	lsls	r2, r3, #9
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	430a      	orrs	r2, r1
 800284a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	689a      	ldr	r2, [r3, #8]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800285a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	6899      	ldr	r1, [r3, #8]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	695b      	ldr	r3, [r3, #20]
 8002866:	029a      	lsls	r2, r3, #10
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	430a      	orrs	r2, r1
 800286e:	609a      	str	r2, [r3, #8]
}
 8002870:	bf00      	nop
 8002872:	3714      	adds	r7, #20
 8002874:	46bd      	mov	sp, r7
 8002876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287a:	4770      	bx	lr
 800287c:	40012300 	.word	0x40012300
 8002880:	0f000001 	.word	0x0f000001

08002884 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b084      	sub	sp, #16
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002890:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002896:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800289a:	2b00      	cmp	r3, #0
 800289c:	d13c      	bne.n	8002918 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d12b      	bne.n	8002910 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d127      	bne.n	8002910 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028c6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d006      	beq.n	80028dc <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d119      	bne.n	8002910 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	685a      	ldr	r2, [r3, #4]
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f022 0220 	bic.w	r2, r2, #32
 80028ea:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002900:	2b00      	cmp	r3, #0
 8002902:	d105      	bne.n	8002910 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002908:	f043 0201 	orr.w	r2, r3, #1
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002910:	68f8      	ldr	r0, [r7, #12]
 8002912:	f7ff fd6b 	bl	80023ec <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002916:	e00e      	b.n	8002936 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291c:	f003 0310 	and.w	r3, r3, #16
 8002920:	2b00      	cmp	r3, #0
 8002922:	d003      	beq.n	800292c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002924:	68f8      	ldr	r0, [r7, #12]
 8002926:	f7ff fd75 	bl	8002414 <HAL_ADC_ErrorCallback>
}
 800292a:	e004      	b.n	8002936 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002932:	6878      	ldr	r0, [r7, #4]
 8002934:	4798      	blx	r3
}
 8002936:	bf00      	nop
 8002938:	3710      	adds	r7, #16
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}

0800293e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800293e:	b580      	push	{r7, lr}
 8002940:	b084      	sub	sp, #16
 8002942:	af00      	add	r7, sp, #0
 8002944:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800294a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800294c:	68f8      	ldr	r0, [r7, #12]
 800294e:	f7ff fd57 	bl	8002400 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002952:	bf00      	nop
 8002954:	3710      	adds	r7, #16
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}

0800295a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800295a:	b580      	push	{r7, lr}
 800295c:	b084      	sub	sp, #16
 800295e:	af00      	add	r7, sp, #0
 8002960:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002966:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2240      	movs	r2, #64	; 0x40
 800296c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002972:	f043 0204 	orr.w	r2, r3, #4
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800297a:	68f8      	ldr	r0, [r7, #12]
 800297c:	f7ff fd4a 	bl	8002414 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002980:	bf00      	nop
 8002982:	3710      	adds	r7, #16
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}

08002988 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002988:	b480      	push	{r7}
 800298a:	b085      	sub	sp, #20
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	f003 0307 	and.w	r3, r3, #7
 8002996:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002998:	4b0c      	ldr	r3, [pc, #48]	; (80029cc <__NVIC_SetPriorityGrouping+0x44>)
 800299a:	68db      	ldr	r3, [r3, #12]
 800299c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800299e:	68ba      	ldr	r2, [r7, #8]
 80029a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80029a4:	4013      	ands	r3, r2
 80029a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80029b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029ba:	4a04      	ldr	r2, [pc, #16]	; (80029cc <__NVIC_SetPriorityGrouping+0x44>)
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	60d3      	str	r3, [r2, #12]
}
 80029c0:	bf00      	nop
 80029c2:	3714      	adds	r7, #20
 80029c4:	46bd      	mov	sp, r7
 80029c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ca:	4770      	bx	lr
 80029cc:	e000ed00 	.word	0xe000ed00

080029d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029d0:	b480      	push	{r7}
 80029d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029d4:	4b04      	ldr	r3, [pc, #16]	; (80029e8 <__NVIC_GetPriorityGrouping+0x18>)
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	0a1b      	lsrs	r3, r3, #8
 80029da:	f003 0307 	and.w	r3, r3, #7
}
 80029de:	4618      	mov	r0, r3
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr
 80029e8:	e000ed00 	.word	0xe000ed00

080029ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b083      	sub	sp, #12
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	4603      	mov	r3, r0
 80029f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	db0b      	blt.n	8002a16 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029fe:	79fb      	ldrb	r3, [r7, #7]
 8002a00:	f003 021f 	and.w	r2, r3, #31
 8002a04:	4907      	ldr	r1, [pc, #28]	; (8002a24 <__NVIC_EnableIRQ+0x38>)
 8002a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a0a:	095b      	lsrs	r3, r3, #5
 8002a0c:	2001      	movs	r0, #1
 8002a0e:	fa00 f202 	lsl.w	r2, r0, r2
 8002a12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a16:	bf00      	nop
 8002a18:	370c      	adds	r7, #12
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr
 8002a22:	bf00      	nop
 8002a24:	e000e100 	.word	0xe000e100

08002a28 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b083      	sub	sp, #12
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	4603      	mov	r3, r0
 8002a30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	db12      	blt.n	8002a60 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a3a:	79fb      	ldrb	r3, [r7, #7]
 8002a3c:	f003 021f 	and.w	r2, r3, #31
 8002a40:	490a      	ldr	r1, [pc, #40]	; (8002a6c <__NVIC_DisableIRQ+0x44>)
 8002a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a46:	095b      	lsrs	r3, r3, #5
 8002a48:	2001      	movs	r0, #1
 8002a4a:	fa00 f202 	lsl.w	r2, r0, r2
 8002a4e:	3320      	adds	r3, #32
 8002a50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002a54:	f3bf 8f4f 	dsb	sy
}
 8002a58:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002a5a:	f3bf 8f6f 	isb	sy
}
 8002a5e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002a60:	bf00      	nop
 8002a62:	370c      	adds	r7, #12
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr
 8002a6c:	e000e100 	.word	0xe000e100

08002a70 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b083      	sub	sp, #12
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	4603      	mov	r3, r0
 8002a78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	db0c      	blt.n	8002a9c <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a82:	79fb      	ldrb	r3, [r7, #7]
 8002a84:	f003 021f 	and.w	r2, r3, #31
 8002a88:	4907      	ldr	r1, [pc, #28]	; (8002aa8 <__NVIC_ClearPendingIRQ+0x38>)
 8002a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a8e:	095b      	lsrs	r3, r3, #5
 8002a90:	2001      	movs	r0, #1
 8002a92:	fa00 f202 	lsl.w	r2, r0, r2
 8002a96:	3360      	adds	r3, #96	; 0x60
 8002a98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a9c:	bf00      	nop
 8002a9e:	370c      	adds	r7, #12
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr
 8002aa8:	e000e100 	.word	0xe000e100

08002aac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b083      	sub	sp, #12
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	6039      	str	r1, [r7, #0]
 8002ab6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ab8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	db0a      	blt.n	8002ad6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	b2da      	uxtb	r2, r3
 8002ac4:	490c      	ldr	r1, [pc, #48]	; (8002af8 <__NVIC_SetPriority+0x4c>)
 8002ac6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aca:	0112      	lsls	r2, r2, #4
 8002acc:	b2d2      	uxtb	r2, r2
 8002ace:	440b      	add	r3, r1
 8002ad0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ad4:	e00a      	b.n	8002aec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	b2da      	uxtb	r2, r3
 8002ada:	4908      	ldr	r1, [pc, #32]	; (8002afc <__NVIC_SetPriority+0x50>)
 8002adc:	79fb      	ldrb	r3, [r7, #7]
 8002ade:	f003 030f 	and.w	r3, r3, #15
 8002ae2:	3b04      	subs	r3, #4
 8002ae4:	0112      	lsls	r2, r2, #4
 8002ae6:	b2d2      	uxtb	r2, r2
 8002ae8:	440b      	add	r3, r1
 8002aea:	761a      	strb	r2, [r3, #24]
}
 8002aec:	bf00      	nop
 8002aee:	370c      	adds	r7, #12
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr
 8002af8:	e000e100 	.word	0xe000e100
 8002afc:	e000ed00 	.word	0xe000ed00

08002b00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b089      	sub	sp, #36	; 0x24
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	60f8      	str	r0, [r7, #12]
 8002b08:	60b9      	str	r1, [r7, #8]
 8002b0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	f003 0307 	and.w	r3, r3, #7
 8002b12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	f1c3 0307 	rsb	r3, r3, #7
 8002b1a:	2b04      	cmp	r3, #4
 8002b1c:	bf28      	it	cs
 8002b1e:	2304      	movcs	r3, #4
 8002b20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	3304      	adds	r3, #4
 8002b26:	2b06      	cmp	r3, #6
 8002b28:	d902      	bls.n	8002b30 <NVIC_EncodePriority+0x30>
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	3b03      	subs	r3, #3
 8002b2e:	e000      	b.n	8002b32 <NVIC_EncodePriority+0x32>
 8002b30:	2300      	movs	r3, #0
 8002b32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b34:	f04f 32ff 	mov.w	r2, #4294967295
 8002b38:	69bb      	ldr	r3, [r7, #24]
 8002b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3e:	43da      	mvns	r2, r3
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	401a      	ands	r2, r3
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b48:	f04f 31ff 	mov.w	r1, #4294967295
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b52:	43d9      	mvns	r1, r3
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b58:	4313      	orrs	r3, r2
         );
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	3724      	adds	r7, #36	; 0x24
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr
	...

08002b68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b082      	sub	sp, #8
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	3b01      	subs	r3, #1
 8002b74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b78:	d301      	bcc.n	8002b7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e00f      	b.n	8002b9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b7e:	4a0a      	ldr	r2, [pc, #40]	; (8002ba8 <SysTick_Config+0x40>)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	3b01      	subs	r3, #1
 8002b84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b86:	210f      	movs	r1, #15
 8002b88:	f04f 30ff 	mov.w	r0, #4294967295
 8002b8c:	f7ff ff8e 	bl	8002aac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b90:	4b05      	ldr	r3, [pc, #20]	; (8002ba8 <SysTick_Config+0x40>)
 8002b92:	2200      	movs	r2, #0
 8002b94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b96:	4b04      	ldr	r3, [pc, #16]	; (8002ba8 <SysTick_Config+0x40>)
 8002b98:	2207      	movs	r2, #7
 8002b9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b9c:	2300      	movs	r3, #0
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	3708      	adds	r7, #8
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	bf00      	nop
 8002ba8:	e000e010 	.word	0xe000e010

08002bac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b082      	sub	sp, #8
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	f7ff fee7 	bl	8002988 <__NVIC_SetPriorityGrouping>
}
 8002bba:	bf00      	nop
 8002bbc:	3708      	adds	r7, #8
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}

08002bc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002bc2:	b580      	push	{r7, lr}
 8002bc4:	b086      	sub	sp, #24
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	4603      	mov	r3, r0
 8002bca:	60b9      	str	r1, [r7, #8]
 8002bcc:	607a      	str	r2, [r7, #4]
 8002bce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002bd4:	f7ff fefc 	bl	80029d0 <__NVIC_GetPriorityGrouping>
 8002bd8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bda:	687a      	ldr	r2, [r7, #4]
 8002bdc:	68b9      	ldr	r1, [r7, #8]
 8002bde:	6978      	ldr	r0, [r7, #20]
 8002be0:	f7ff ff8e 	bl	8002b00 <NVIC_EncodePriority>
 8002be4:	4602      	mov	r2, r0
 8002be6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bea:	4611      	mov	r1, r2
 8002bec:	4618      	mov	r0, r3
 8002bee:	f7ff ff5d 	bl	8002aac <__NVIC_SetPriority>
}
 8002bf2:	bf00      	nop
 8002bf4:	3718      	adds	r7, #24
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}

08002bfa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bfa:	b580      	push	{r7, lr}
 8002bfc:	b082      	sub	sp, #8
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	4603      	mov	r3, r0
 8002c02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f7ff feef 	bl	80029ec <__NVIC_EnableIRQ>
}
 8002c0e:	bf00      	nop
 8002c10:	3708      	adds	r7, #8
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}

08002c16 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002c16:	b580      	push	{r7, lr}
 8002c18:	b082      	sub	sp, #8
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002c20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c24:	4618      	mov	r0, r3
 8002c26:	f7ff feff 	bl	8002a28 <__NVIC_DisableIRQ>
}
 8002c2a:	bf00      	nop
 8002c2c:	3708      	adds	r7, #8
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}

08002c32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c32:	b580      	push	{r7, lr}
 8002c34:	b082      	sub	sp, #8
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f7ff ff94 	bl	8002b68 <SysTick_Config>
 8002c40:	4603      	mov	r3, r0
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3708      	adds	r7, #8
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}

08002c4a <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002c4a:	b580      	push	{r7, lr}
 8002c4c:	b082      	sub	sp, #8
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	4603      	mov	r3, r0
 8002c52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8002c54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f7ff ff09 	bl	8002a70 <__NVIC_ClearPendingIRQ>
}
 8002c5e:	bf00      	nop
 8002c60:	3708      	adds	r7, #8
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}
	...

08002c68 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b086      	sub	sp, #24
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002c70:	2300      	movs	r3, #0
 8002c72:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002c74:	f7ff f9fc 	bl	8002070 <HAL_GetTick>
 8002c78:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d101      	bne.n	8002c84 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	e099      	b.n	8002db8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2202      	movs	r2, #2
 8002c88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f022 0201 	bic.w	r2, r2, #1
 8002ca2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ca4:	e00f      	b.n	8002cc6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ca6:	f7ff f9e3 	bl	8002070 <HAL_GetTick>
 8002caa:	4602      	mov	r2, r0
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	1ad3      	subs	r3, r2, r3
 8002cb0:	2b05      	cmp	r3, #5
 8002cb2:	d908      	bls.n	8002cc6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2220      	movs	r2, #32
 8002cb8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2203      	movs	r2, #3
 8002cbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002cc2:	2303      	movs	r3, #3
 8002cc4:	e078      	b.n	8002db8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 0301 	and.w	r3, r3, #1
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d1e8      	bne.n	8002ca6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002cdc:	697a      	ldr	r2, [r7, #20]
 8002cde:	4b38      	ldr	r3, [pc, #224]	; (8002dc0 <HAL_DMA_Init+0x158>)
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	685a      	ldr	r2, [r3, #4]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002cf2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	691b      	ldr	r3, [r3, #16]
 8002cf8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cfe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	699b      	ldr	r3, [r3, #24]
 8002d04:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d0a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6a1b      	ldr	r3, [r3, #32]
 8002d10:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d12:	697a      	ldr	r2, [r7, #20]
 8002d14:	4313      	orrs	r3, r2
 8002d16:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d1c:	2b04      	cmp	r3, #4
 8002d1e:	d107      	bne.n	8002d30 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	697a      	ldr	r2, [r7, #20]
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	697a      	ldr	r2, [r7, #20]
 8002d36:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	695b      	ldr	r3, [r3, #20]
 8002d3e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	f023 0307 	bic.w	r3, r3, #7
 8002d46:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d4c:	697a      	ldr	r2, [r7, #20]
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d56:	2b04      	cmp	r3, #4
 8002d58:	d117      	bne.n	8002d8a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d5e:	697a      	ldr	r2, [r7, #20]
 8002d60:	4313      	orrs	r3, r2
 8002d62:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d00e      	beq.n	8002d8a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	f000 fb0d 	bl	800338c <DMA_CheckFifoParam>
 8002d72:	4603      	mov	r3, r0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d008      	beq.n	8002d8a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2240      	movs	r2, #64	; 0x40
 8002d7c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2201      	movs	r2, #1
 8002d82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002d86:	2301      	movs	r3, #1
 8002d88:	e016      	b.n	8002db8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	697a      	ldr	r2, [r7, #20]
 8002d90:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	f000 fac4 	bl	8003320 <DMA_CalcBaseAndBitshift>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002da0:	223f      	movs	r2, #63	; 0x3f
 8002da2:	409a      	lsls	r2, r3
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2200      	movs	r2, #0
 8002dac:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2201      	movs	r2, #1
 8002db2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002db6:	2300      	movs	r3, #0
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3718      	adds	r7, #24
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}
 8002dc0:	f010803f 	.word	0xf010803f

08002dc4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b086      	sub	sp, #24
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	60f8      	str	r0, [r7, #12]
 8002dcc:	60b9      	str	r1, [r7, #8]
 8002dce:	607a      	str	r2, [r7, #4]
 8002dd0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dda:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d101      	bne.n	8002dea <HAL_DMA_Start_IT+0x26>
 8002de6:	2302      	movs	r3, #2
 8002de8:	e040      	b.n	8002e6c <HAL_DMA_Start_IT+0xa8>
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2201      	movs	r2, #1
 8002dee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d12f      	bne.n	8002e5e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2202      	movs	r2, #2
 8002e02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	68b9      	ldr	r1, [r7, #8]
 8002e12:	68f8      	ldr	r0, [r7, #12]
 8002e14:	f000 fa56 	bl	80032c4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e1c:	223f      	movs	r2, #63	; 0x3f
 8002e1e:	409a      	lsls	r2, r3
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f042 0216 	orr.w	r2, r2, #22
 8002e32:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d007      	beq.n	8002e4c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f042 0208 	orr.w	r2, r2, #8
 8002e4a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f042 0201 	orr.w	r2, r2, #1
 8002e5a:	601a      	str	r2, [r3, #0]
 8002e5c:	e005      	b.n	8002e6a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2200      	movs	r2, #0
 8002e62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002e66:	2302      	movs	r3, #2
 8002e68:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002e6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	3718      	adds	r7, #24
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}

08002e74 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b084      	sub	sp, #16
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e80:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002e82:	f7ff f8f5 	bl	8002070 <HAL_GetTick>
 8002e86:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	2b02      	cmp	r3, #2
 8002e92:	d008      	beq.n	8002ea6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2280      	movs	r2, #128	; 0x80
 8002e98:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e052      	b.n	8002f4c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f022 0216 	bic.w	r2, r2, #22
 8002eb4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	695a      	ldr	r2, [r3, #20]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ec4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d103      	bne.n	8002ed6 <HAL_DMA_Abort+0x62>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d007      	beq.n	8002ee6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f022 0208 	bic.w	r2, r2, #8
 8002ee4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f022 0201 	bic.w	r2, r2, #1
 8002ef4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ef6:	e013      	b.n	8002f20 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ef8:	f7ff f8ba 	bl	8002070 <HAL_GetTick>
 8002efc:	4602      	mov	r2, r0
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	2b05      	cmp	r3, #5
 8002f04:	d90c      	bls.n	8002f20 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2220      	movs	r2, #32
 8002f0a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2203      	movs	r2, #3
 8002f10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2200      	movs	r2, #0
 8002f18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002f1c:	2303      	movs	r3, #3
 8002f1e:	e015      	b.n	8002f4c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 0301 	and.w	r3, r3, #1
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d1e4      	bne.n	8002ef8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f32:	223f      	movs	r2, #63	; 0x3f
 8002f34:	409a      	lsls	r2, r3
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2200      	movs	r2, #0
 8002f46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002f4a:	2300      	movs	r3, #0
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	3710      	adds	r7, #16
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}

08002f54 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b083      	sub	sp, #12
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	2b02      	cmp	r3, #2
 8002f66:	d004      	beq.n	8002f72 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2280      	movs	r2, #128	; 0x80
 8002f6c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e00c      	b.n	8002f8c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2205      	movs	r2, #5
 8002f76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f022 0201 	bic.w	r2, r2, #1
 8002f88:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002f8a:	2300      	movs	r3, #0
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	370c      	adds	r7, #12
 8002f90:	46bd      	mov	sp, r7
 8002f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f96:	4770      	bx	lr

08002f98 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b086      	sub	sp, #24
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002fa4:	4b8e      	ldr	r3, [pc, #568]	; (80031e0 <HAL_DMA_IRQHandler+0x248>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a8e      	ldr	r2, [pc, #568]	; (80031e4 <HAL_DMA_IRQHandler+0x24c>)
 8002faa:	fba2 2303 	umull	r2, r3, r2, r3
 8002fae:	0a9b      	lsrs	r3, r3, #10
 8002fb0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fb6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fc2:	2208      	movs	r2, #8
 8002fc4:	409a      	lsls	r2, r3
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	4013      	ands	r3, r2
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d01a      	beq.n	8003004 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 0304 	and.w	r3, r3, #4
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d013      	beq.n	8003004 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f022 0204 	bic.w	r2, r2, #4
 8002fea:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ff0:	2208      	movs	r2, #8
 8002ff2:	409a      	lsls	r2, r3
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ffc:	f043 0201 	orr.w	r2, r3, #1
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003008:	2201      	movs	r2, #1
 800300a:	409a      	lsls	r2, r3
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	4013      	ands	r3, r2
 8003010:	2b00      	cmp	r3, #0
 8003012:	d012      	beq.n	800303a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	695b      	ldr	r3, [r3, #20]
 800301a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800301e:	2b00      	cmp	r3, #0
 8003020:	d00b      	beq.n	800303a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003026:	2201      	movs	r2, #1
 8003028:	409a      	lsls	r2, r3
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003032:	f043 0202 	orr.w	r2, r3, #2
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800303e:	2204      	movs	r2, #4
 8003040:	409a      	lsls	r2, r3
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	4013      	ands	r3, r2
 8003046:	2b00      	cmp	r3, #0
 8003048:	d012      	beq.n	8003070 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 0302 	and.w	r3, r3, #2
 8003054:	2b00      	cmp	r3, #0
 8003056:	d00b      	beq.n	8003070 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800305c:	2204      	movs	r2, #4
 800305e:	409a      	lsls	r2, r3
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003068:	f043 0204 	orr.w	r2, r3, #4
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003074:	2210      	movs	r2, #16
 8003076:	409a      	lsls	r2, r3
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	4013      	ands	r3, r2
 800307c:	2b00      	cmp	r3, #0
 800307e:	d043      	beq.n	8003108 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 0308 	and.w	r3, r3, #8
 800308a:	2b00      	cmp	r3, #0
 800308c:	d03c      	beq.n	8003108 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003092:	2210      	movs	r2, #16
 8003094:	409a      	lsls	r2, r3
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d018      	beq.n	80030da <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d108      	bne.n	80030c8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d024      	beq.n	8003108 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	4798      	blx	r3
 80030c6:	e01f      	b.n	8003108 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d01b      	beq.n	8003108 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030d4:	6878      	ldr	r0, [r7, #4]
 80030d6:	4798      	blx	r3
 80030d8:	e016      	b.n	8003108 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d107      	bne.n	80030f8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f022 0208 	bic.w	r2, r2, #8
 80030f6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d003      	beq.n	8003108 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003104:	6878      	ldr	r0, [r7, #4]
 8003106:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800310c:	2220      	movs	r2, #32
 800310e:	409a      	lsls	r2, r3
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	4013      	ands	r3, r2
 8003114:	2b00      	cmp	r3, #0
 8003116:	f000 808f 	beq.w	8003238 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 0310 	and.w	r3, r3, #16
 8003124:	2b00      	cmp	r3, #0
 8003126:	f000 8087 	beq.w	8003238 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800312e:	2220      	movs	r2, #32
 8003130:	409a      	lsls	r2, r3
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800313c:	b2db      	uxtb	r3, r3
 800313e:	2b05      	cmp	r3, #5
 8003140:	d136      	bne.n	80031b0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f022 0216 	bic.w	r2, r2, #22
 8003150:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	695a      	ldr	r2, [r3, #20]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003160:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003166:	2b00      	cmp	r3, #0
 8003168:	d103      	bne.n	8003172 <HAL_DMA_IRQHandler+0x1da>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800316e:	2b00      	cmp	r3, #0
 8003170:	d007      	beq.n	8003182 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f022 0208 	bic.w	r2, r2, #8
 8003180:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003186:	223f      	movs	r2, #63	; 0x3f
 8003188:	409a      	lsls	r2, r3
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2201      	movs	r2, #1
 8003192:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2200      	movs	r2, #0
 800319a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d07e      	beq.n	80032a4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	4798      	blx	r3
        }
        return;
 80031ae:	e079      	b.n	80032a4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d01d      	beq.n	80031fa <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d10d      	bne.n	80031e8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d031      	beq.n	8003238 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031d8:	6878      	ldr	r0, [r7, #4]
 80031da:	4798      	blx	r3
 80031dc:	e02c      	b.n	8003238 <HAL_DMA_IRQHandler+0x2a0>
 80031de:	bf00      	nop
 80031e0:	2000001c 	.word	0x2000001c
 80031e4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d023      	beq.n	8003238 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	4798      	blx	r3
 80031f8:	e01e      	b.n	8003238 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003204:	2b00      	cmp	r3, #0
 8003206:	d10f      	bne.n	8003228 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f022 0210 	bic.w	r2, r2, #16
 8003216:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2201      	movs	r2, #1
 800321c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2200      	movs	r2, #0
 8003224:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800322c:	2b00      	cmp	r3, #0
 800322e:	d003      	beq.n	8003238 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003234:	6878      	ldr	r0, [r7, #4]
 8003236:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800323c:	2b00      	cmp	r3, #0
 800323e:	d032      	beq.n	80032a6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003244:	f003 0301 	and.w	r3, r3, #1
 8003248:	2b00      	cmp	r3, #0
 800324a:	d022      	beq.n	8003292 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2205      	movs	r2, #5
 8003250:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f022 0201 	bic.w	r2, r2, #1
 8003262:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	3301      	adds	r3, #1
 8003268:	60bb      	str	r3, [r7, #8]
 800326a:	697a      	ldr	r2, [r7, #20]
 800326c:	429a      	cmp	r2, r3
 800326e:	d307      	bcc.n	8003280 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 0301 	and.w	r3, r3, #1
 800327a:	2b00      	cmp	r3, #0
 800327c:	d1f2      	bne.n	8003264 <HAL_DMA_IRQHandler+0x2cc>
 800327e:	e000      	b.n	8003282 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003280:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2201      	movs	r2, #1
 8003286:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2200      	movs	r2, #0
 800328e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003296:	2b00      	cmp	r3, #0
 8003298:	d005      	beq.n	80032a6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	4798      	blx	r3
 80032a2:	e000      	b.n	80032a6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80032a4:	bf00      	nop
    }
  }
}
 80032a6:	3718      	adds	r7, #24
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}

080032ac <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b083      	sub	sp, #12
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	370c      	adds	r7, #12
 80032bc:	46bd      	mov	sp, r7
 80032be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c2:	4770      	bx	lr

080032c4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b085      	sub	sp, #20
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	60f8      	str	r0, [r7, #12]
 80032cc:	60b9      	str	r1, [r7, #8]
 80032ce:	607a      	str	r2, [r7, #4]
 80032d0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80032e0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	683a      	ldr	r2, [r7, #0]
 80032e8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	2b40      	cmp	r3, #64	; 0x40
 80032f0:	d108      	bne.n	8003304 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	687a      	ldr	r2, [r7, #4]
 80032f8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	68ba      	ldr	r2, [r7, #8]
 8003300:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003302:	e007      	b.n	8003314 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	68ba      	ldr	r2, [r7, #8]
 800330a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	687a      	ldr	r2, [r7, #4]
 8003312:	60da      	str	r2, [r3, #12]
}
 8003314:	bf00      	nop
 8003316:	3714      	adds	r7, #20
 8003318:	46bd      	mov	sp, r7
 800331a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331e:	4770      	bx	lr

08003320 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003320:	b480      	push	{r7}
 8003322:	b085      	sub	sp, #20
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	b2db      	uxtb	r3, r3
 800332e:	3b10      	subs	r3, #16
 8003330:	4a14      	ldr	r2, [pc, #80]	; (8003384 <DMA_CalcBaseAndBitshift+0x64>)
 8003332:	fba2 2303 	umull	r2, r3, r2, r3
 8003336:	091b      	lsrs	r3, r3, #4
 8003338:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800333a:	4a13      	ldr	r2, [pc, #76]	; (8003388 <DMA_CalcBaseAndBitshift+0x68>)
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	4413      	add	r3, r2
 8003340:	781b      	ldrb	r3, [r3, #0]
 8003342:	461a      	mov	r2, r3
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2b03      	cmp	r3, #3
 800334c:	d909      	bls.n	8003362 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003356:	f023 0303 	bic.w	r3, r3, #3
 800335a:	1d1a      	adds	r2, r3, #4
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	659a      	str	r2, [r3, #88]	; 0x58
 8003360:	e007      	b.n	8003372 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800336a:	f023 0303 	bic.w	r3, r3, #3
 800336e:	687a      	ldr	r2, [r7, #4]
 8003370:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003376:	4618      	mov	r0, r3
 8003378:	3714      	adds	r7, #20
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr
 8003382:	bf00      	nop
 8003384:	aaaaaaab 	.word	0xaaaaaaab
 8003388:	0800d2b0 	.word	0x0800d2b0

0800338c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800338c:	b480      	push	{r7}
 800338e:	b085      	sub	sp, #20
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003394:	2300      	movs	r3, #0
 8003396:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800339c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	699b      	ldr	r3, [r3, #24]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d11f      	bne.n	80033e6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	2b03      	cmp	r3, #3
 80033aa:	d856      	bhi.n	800345a <DMA_CheckFifoParam+0xce>
 80033ac:	a201      	add	r2, pc, #4	; (adr r2, 80033b4 <DMA_CheckFifoParam+0x28>)
 80033ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033b2:	bf00      	nop
 80033b4:	080033c5 	.word	0x080033c5
 80033b8:	080033d7 	.word	0x080033d7
 80033bc:	080033c5 	.word	0x080033c5
 80033c0:	0800345b 	.word	0x0800345b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d046      	beq.n	800345e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033d4:	e043      	b.n	800345e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033da:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80033de:	d140      	bne.n	8003462 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033e4:	e03d      	b.n	8003462 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	699b      	ldr	r3, [r3, #24]
 80033ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033ee:	d121      	bne.n	8003434 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	2b03      	cmp	r3, #3
 80033f4:	d837      	bhi.n	8003466 <DMA_CheckFifoParam+0xda>
 80033f6:	a201      	add	r2, pc, #4	; (adr r2, 80033fc <DMA_CheckFifoParam+0x70>)
 80033f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033fc:	0800340d 	.word	0x0800340d
 8003400:	08003413 	.word	0x08003413
 8003404:	0800340d 	.word	0x0800340d
 8003408:	08003425 	.word	0x08003425
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	73fb      	strb	r3, [r7, #15]
      break;
 8003410:	e030      	b.n	8003474 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003416:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d025      	beq.n	800346a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003422:	e022      	b.n	800346a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003428:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800342c:	d11f      	bne.n	800346e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003432:	e01c      	b.n	800346e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	2b02      	cmp	r3, #2
 8003438:	d903      	bls.n	8003442 <DMA_CheckFifoParam+0xb6>
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	2b03      	cmp	r3, #3
 800343e:	d003      	beq.n	8003448 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003440:	e018      	b.n	8003474 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	73fb      	strb	r3, [r7, #15]
      break;
 8003446:	e015      	b.n	8003474 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800344c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003450:	2b00      	cmp	r3, #0
 8003452:	d00e      	beq.n	8003472 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	73fb      	strb	r3, [r7, #15]
      break;
 8003458:	e00b      	b.n	8003472 <DMA_CheckFifoParam+0xe6>
      break;
 800345a:	bf00      	nop
 800345c:	e00a      	b.n	8003474 <DMA_CheckFifoParam+0xe8>
      break;
 800345e:	bf00      	nop
 8003460:	e008      	b.n	8003474 <DMA_CheckFifoParam+0xe8>
      break;
 8003462:	bf00      	nop
 8003464:	e006      	b.n	8003474 <DMA_CheckFifoParam+0xe8>
      break;
 8003466:	bf00      	nop
 8003468:	e004      	b.n	8003474 <DMA_CheckFifoParam+0xe8>
      break;
 800346a:	bf00      	nop
 800346c:	e002      	b.n	8003474 <DMA_CheckFifoParam+0xe8>
      break;   
 800346e:	bf00      	nop
 8003470:	e000      	b.n	8003474 <DMA_CheckFifoParam+0xe8>
      break;
 8003472:	bf00      	nop
    }
  } 
  
  return status; 
 8003474:	7bfb      	ldrb	r3, [r7, #15]
}
 8003476:	4618      	mov	r0, r3
 8003478:	3714      	adds	r7, #20
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr
 8003482:	bf00      	nop

08003484 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003484:	b480      	push	{r7}
 8003486:	b089      	sub	sp, #36	; 0x24
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
 800348c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800348e:	2300      	movs	r3, #0
 8003490:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003492:	2300      	movs	r3, #0
 8003494:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003496:	2300      	movs	r3, #0
 8003498:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800349a:	2300      	movs	r3, #0
 800349c:	61fb      	str	r3, [r7, #28]
 800349e:	e159      	b.n	8003754 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80034a0:	2201      	movs	r2, #1
 80034a2:	69fb      	ldr	r3, [r7, #28]
 80034a4:	fa02 f303 	lsl.w	r3, r2, r3
 80034a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	697a      	ldr	r2, [r7, #20]
 80034b0:	4013      	ands	r3, r2
 80034b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80034b4:	693a      	ldr	r2, [r7, #16]
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	429a      	cmp	r2, r3
 80034ba:	f040 8148 	bne.w	800374e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	f003 0303 	and.w	r3, r3, #3
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d005      	beq.n	80034d6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80034d2:	2b02      	cmp	r3, #2
 80034d4:	d130      	bne.n	8003538 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80034dc:	69fb      	ldr	r3, [r7, #28]
 80034de:	005b      	lsls	r3, r3, #1
 80034e0:	2203      	movs	r2, #3
 80034e2:	fa02 f303 	lsl.w	r3, r2, r3
 80034e6:	43db      	mvns	r3, r3
 80034e8:	69ba      	ldr	r2, [r7, #24]
 80034ea:	4013      	ands	r3, r2
 80034ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	68da      	ldr	r2, [r3, #12]
 80034f2:	69fb      	ldr	r3, [r7, #28]
 80034f4:	005b      	lsls	r3, r3, #1
 80034f6:	fa02 f303 	lsl.w	r3, r2, r3
 80034fa:	69ba      	ldr	r2, [r7, #24]
 80034fc:	4313      	orrs	r3, r2
 80034fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	69ba      	ldr	r2, [r7, #24]
 8003504:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800350c:	2201      	movs	r2, #1
 800350e:	69fb      	ldr	r3, [r7, #28]
 8003510:	fa02 f303 	lsl.w	r3, r2, r3
 8003514:	43db      	mvns	r3, r3
 8003516:	69ba      	ldr	r2, [r7, #24]
 8003518:	4013      	ands	r3, r2
 800351a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	091b      	lsrs	r3, r3, #4
 8003522:	f003 0201 	and.w	r2, r3, #1
 8003526:	69fb      	ldr	r3, [r7, #28]
 8003528:	fa02 f303 	lsl.w	r3, r2, r3
 800352c:	69ba      	ldr	r2, [r7, #24]
 800352e:	4313      	orrs	r3, r2
 8003530:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	69ba      	ldr	r2, [r7, #24]
 8003536:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	f003 0303 	and.w	r3, r3, #3
 8003540:	2b03      	cmp	r3, #3
 8003542:	d017      	beq.n	8003574 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800354a:	69fb      	ldr	r3, [r7, #28]
 800354c:	005b      	lsls	r3, r3, #1
 800354e:	2203      	movs	r2, #3
 8003550:	fa02 f303 	lsl.w	r3, r2, r3
 8003554:	43db      	mvns	r3, r3
 8003556:	69ba      	ldr	r2, [r7, #24]
 8003558:	4013      	ands	r3, r2
 800355a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	689a      	ldr	r2, [r3, #8]
 8003560:	69fb      	ldr	r3, [r7, #28]
 8003562:	005b      	lsls	r3, r3, #1
 8003564:	fa02 f303 	lsl.w	r3, r2, r3
 8003568:	69ba      	ldr	r2, [r7, #24]
 800356a:	4313      	orrs	r3, r2
 800356c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	69ba      	ldr	r2, [r7, #24]
 8003572:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	f003 0303 	and.w	r3, r3, #3
 800357c:	2b02      	cmp	r3, #2
 800357e:	d123      	bne.n	80035c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003580:	69fb      	ldr	r3, [r7, #28]
 8003582:	08da      	lsrs	r2, r3, #3
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	3208      	adds	r2, #8
 8003588:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800358c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800358e:	69fb      	ldr	r3, [r7, #28]
 8003590:	f003 0307 	and.w	r3, r3, #7
 8003594:	009b      	lsls	r3, r3, #2
 8003596:	220f      	movs	r2, #15
 8003598:	fa02 f303 	lsl.w	r3, r2, r3
 800359c:	43db      	mvns	r3, r3
 800359e:	69ba      	ldr	r2, [r7, #24]
 80035a0:	4013      	ands	r3, r2
 80035a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	691a      	ldr	r2, [r3, #16]
 80035a8:	69fb      	ldr	r3, [r7, #28]
 80035aa:	f003 0307 	and.w	r3, r3, #7
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	fa02 f303 	lsl.w	r3, r2, r3
 80035b4:	69ba      	ldr	r2, [r7, #24]
 80035b6:	4313      	orrs	r3, r2
 80035b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80035ba:	69fb      	ldr	r3, [r7, #28]
 80035bc:	08da      	lsrs	r2, r3, #3
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	3208      	adds	r2, #8
 80035c2:	69b9      	ldr	r1, [r7, #24]
 80035c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	005b      	lsls	r3, r3, #1
 80035d2:	2203      	movs	r2, #3
 80035d4:	fa02 f303 	lsl.w	r3, r2, r3
 80035d8:	43db      	mvns	r3, r3
 80035da:	69ba      	ldr	r2, [r7, #24]
 80035dc:	4013      	ands	r3, r2
 80035de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	f003 0203 	and.w	r2, r3, #3
 80035e8:	69fb      	ldr	r3, [r7, #28]
 80035ea:	005b      	lsls	r3, r3, #1
 80035ec:	fa02 f303 	lsl.w	r3, r2, r3
 80035f0:	69ba      	ldr	r2, [r7, #24]
 80035f2:	4313      	orrs	r3, r2
 80035f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	69ba      	ldr	r2, [r7, #24]
 80035fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003604:	2b00      	cmp	r3, #0
 8003606:	f000 80a2 	beq.w	800374e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800360a:	2300      	movs	r3, #0
 800360c:	60fb      	str	r3, [r7, #12]
 800360e:	4b57      	ldr	r3, [pc, #348]	; (800376c <HAL_GPIO_Init+0x2e8>)
 8003610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003612:	4a56      	ldr	r2, [pc, #344]	; (800376c <HAL_GPIO_Init+0x2e8>)
 8003614:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003618:	6453      	str	r3, [r2, #68]	; 0x44
 800361a:	4b54      	ldr	r3, [pc, #336]	; (800376c <HAL_GPIO_Init+0x2e8>)
 800361c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800361e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003622:	60fb      	str	r3, [r7, #12]
 8003624:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003626:	4a52      	ldr	r2, [pc, #328]	; (8003770 <HAL_GPIO_Init+0x2ec>)
 8003628:	69fb      	ldr	r3, [r7, #28]
 800362a:	089b      	lsrs	r3, r3, #2
 800362c:	3302      	adds	r3, #2
 800362e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003632:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003634:	69fb      	ldr	r3, [r7, #28]
 8003636:	f003 0303 	and.w	r3, r3, #3
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	220f      	movs	r2, #15
 800363e:	fa02 f303 	lsl.w	r3, r2, r3
 8003642:	43db      	mvns	r3, r3
 8003644:	69ba      	ldr	r2, [r7, #24]
 8003646:	4013      	ands	r3, r2
 8003648:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	4a49      	ldr	r2, [pc, #292]	; (8003774 <HAL_GPIO_Init+0x2f0>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d019      	beq.n	8003686 <HAL_GPIO_Init+0x202>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	4a48      	ldr	r2, [pc, #288]	; (8003778 <HAL_GPIO_Init+0x2f4>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d013      	beq.n	8003682 <HAL_GPIO_Init+0x1fe>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	4a47      	ldr	r2, [pc, #284]	; (800377c <HAL_GPIO_Init+0x2f8>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d00d      	beq.n	800367e <HAL_GPIO_Init+0x1fa>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	4a46      	ldr	r2, [pc, #280]	; (8003780 <HAL_GPIO_Init+0x2fc>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d007      	beq.n	800367a <HAL_GPIO_Init+0x1f6>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	4a45      	ldr	r2, [pc, #276]	; (8003784 <HAL_GPIO_Init+0x300>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d101      	bne.n	8003676 <HAL_GPIO_Init+0x1f2>
 8003672:	2304      	movs	r3, #4
 8003674:	e008      	b.n	8003688 <HAL_GPIO_Init+0x204>
 8003676:	2307      	movs	r3, #7
 8003678:	e006      	b.n	8003688 <HAL_GPIO_Init+0x204>
 800367a:	2303      	movs	r3, #3
 800367c:	e004      	b.n	8003688 <HAL_GPIO_Init+0x204>
 800367e:	2302      	movs	r3, #2
 8003680:	e002      	b.n	8003688 <HAL_GPIO_Init+0x204>
 8003682:	2301      	movs	r3, #1
 8003684:	e000      	b.n	8003688 <HAL_GPIO_Init+0x204>
 8003686:	2300      	movs	r3, #0
 8003688:	69fa      	ldr	r2, [r7, #28]
 800368a:	f002 0203 	and.w	r2, r2, #3
 800368e:	0092      	lsls	r2, r2, #2
 8003690:	4093      	lsls	r3, r2
 8003692:	69ba      	ldr	r2, [r7, #24]
 8003694:	4313      	orrs	r3, r2
 8003696:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003698:	4935      	ldr	r1, [pc, #212]	; (8003770 <HAL_GPIO_Init+0x2ec>)
 800369a:	69fb      	ldr	r3, [r7, #28]
 800369c:	089b      	lsrs	r3, r3, #2
 800369e:	3302      	adds	r3, #2
 80036a0:	69ba      	ldr	r2, [r7, #24]
 80036a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80036a6:	4b38      	ldr	r3, [pc, #224]	; (8003788 <HAL_GPIO_Init+0x304>)
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	43db      	mvns	r3, r3
 80036b0:	69ba      	ldr	r2, [r7, #24]
 80036b2:	4013      	ands	r3, r2
 80036b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d003      	beq.n	80036ca <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80036c2:	69ba      	ldr	r2, [r7, #24]
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	4313      	orrs	r3, r2
 80036c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80036ca:	4a2f      	ldr	r2, [pc, #188]	; (8003788 <HAL_GPIO_Init+0x304>)
 80036cc:	69bb      	ldr	r3, [r7, #24]
 80036ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80036d0:	4b2d      	ldr	r3, [pc, #180]	; (8003788 <HAL_GPIO_Init+0x304>)
 80036d2:	68db      	ldr	r3, [r3, #12]
 80036d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	43db      	mvns	r3, r3
 80036da:	69ba      	ldr	r2, [r7, #24]
 80036dc:	4013      	ands	r3, r2
 80036de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d003      	beq.n	80036f4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80036ec:	69ba      	ldr	r2, [r7, #24]
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	4313      	orrs	r3, r2
 80036f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80036f4:	4a24      	ldr	r2, [pc, #144]	; (8003788 <HAL_GPIO_Init+0x304>)
 80036f6:	69bb      	ldr	r3, [r7, #24]
 80036f8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80036fa:	4b23      	ldr	r3, [pc, #140]	; (8003788 <HAL_GPIO_Init+0x304>)
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	43db      	mvns	r3, r3
 8003704:	69ba      	ldr	r2, [r7, #24]
 8003706:	4013      	ands	r3, r2
 8003708:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003712:	2b00      	cmp	r3, #0
 8003714:	d003      	beq.n	800371e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003716:	69ba      	ldr	r2, [r7, #24]
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	4313      	orrs	r3, r2
 800371c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800371e:	4a1a      	ldr	r2, [pc, #104]	; (8003788 <HAL_GPIO_Init+0x304>)
 8003720:	69bb      	ldr	r3, [r7, #24]
 8003722:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003724:	4b18      	ldr	r3, [pc, #96]	; (8003788 <HAL_GPIO_Init+0x304>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	43db      	mvns	r3, r3
 800372e:	69ba      	ldr	r2, [r7, #24]
 8003730:	4013      	ands	r3, r2
 8003732:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800373c:	2b00      	cmp	r3, #0
 800373e:	d003      	beq.n	8003748 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003740:	69ba      	ldr	r2, [r7, #24]
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	4313      	orrs	r3, r2
 8003746:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003748:	4a0f      	ldr	r2, [pc, #60]	; (8003788 <HAL_GPIO_Init+0x304>)
 800374a:	69bb      	ldr	r3, [r7, #24]
 800374c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800374e:	69fb      	ldr	r3, [r7, #28]
 8003750:	3301      	adds	r3, #1
 8003752:	61fb      	str	r3, [r7, #28]
 8003754:	69fb      	ldr	r3, [r7, #28]
 8003756:	2b0f      	cmp	r3, #15
 8003758:	f67f aea2 	bls.w	80034a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800375c:	bf00      	nop
 800375e:	bf00      	nop
 8003760:	3724      	adds	r7, #36	; 0x24
 8003762:	46bd      	mov	sp, r7
 8003764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003768:	4770      	bx	lr
 800376a:	bf00      	nop
 800376c:	40023800 	.word	0x40023800
 8003770:	40013800 	.word	0x40013800
 8003774:	40020000 	.word	0x40020000
 8003778:	40020400 	.word	0x40020400
 800377c:	40020800 	.word	0x40020800
 8003780:	40020c00 	.word	0x40020c00
 8003784:	40021000 	.word	0x40021000
 8003788:	40013c00 	.word	0x40013c00

0800378c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b084      	sub	sp, #16
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d101      	bne.n	800379e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e12b      	b.n	80039f6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d106      	bne.n	80037b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2200      	movs	r2, #0
 80037ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f7fd fe34 	bl	8001420 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2224      	movs	r2, #36	; 0x24
 80037bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f022 0201 	bic.w	r2, r2, #1
 80037ce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80037de:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80037ee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80037f0:	f002 fe72 	bl	80064d8 <HAL_RCC_GetPCLK1Freq>
 80037f4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	4a81      	ldr	r2, [pc, #516]	; (8003a00 <HAL_I2C_Init+0x274>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d807      	bhi.n	8003810 <HAL_I2C_Init+0x84>
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	4a80      	ldr	r2, [pc, #512]	; (8003a04 <HAL_I2C_Init+0x278>)
 8003804:	4293      	cmp	r3, r2
 8003806:	bf94      	ite	ls
 8003808:	2301      	movls	r3, #1
 800380a:	2300      	movhi	r3, #0
 800380c:	b2db      	uxtb	r3, r3
 800380e:	e006      	b.n	800381e <HAL_I2C_Init+0x92>
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	4a7d      	ldr	r2, [pc, #500]	; (8003a08 <HAL_I2C_Init+0x27c>)
 8003814:	4293      	cmp	r3, r2
 8003816:	bf94      	ite	ls
 8003818:	2301      	movls	r3, #1
 800381a:	2300      	movhi	r3, #0
 800381c:	b2db      	uxtb	r3, r3
 800381e:	2b00      	cmp	r3, #0
 8003820:	d001      	beq.n	8003826 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e0e7      	b.n	80039f6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	4a78      	ldr	r2, [pc, #480]	; (8003a0c <HAL_I2C_Init+0x280>)
 800382a:	fba2 2303 	umull	r2, r3, r2, r3
 800382e:	0c9b      	lsrs	r3, r3, #18
 8003830:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	68ba      	ldr	r2, [r7, #8]
 8003842:	430a      	orrs	r2, r1
 8003844:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	6a1b      	ldr	r3, [r3, #32]
 800384c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	4a6a      	ldr	r2, [pc, #424]	; (8003a00 <HAL_I2C_Init+0x274>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d802      	bhi.n	8003860 <HAL_I2C_Init+0xd4>
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	3301      	adds	r3, #1
 800385e:	e009      	b.n	8003874 <HAL_I2C_Init+0xe8>
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003866:	fb02 f303 	mul.w	r3, r2, r3
 800386a:	4a69      	ldr	r2, [pc, #420]	; (8003a10 <HAL_I2C_Init+0x284>)
 800386c:	fba2 2303 	umull	r2, r3, r2, r3
 8003870:	099b      	lsrs	r3, r3, #6
 8003872:	3301      	adds	r3, #1
 8003874:	687a      	ldr	r2, [r7, #4]
 8003876:	6812      	ldr	r2, [r2, #0]
 8003878:	430b      	orrs	r3, r1
 800387a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	69db      	ldr	r3, [r3, #28]
 8003882:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003886:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	495c      	ldr	r1, [pc, #368]	; (8003a00 <HAL_I2C_Init+0x274>)
 8003890:	428b      	cmp	r3, r1
 8003892:	d819      	bhi.n	80038c8 <HAL_I2C_Init+0x13c>
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	1e59      	subs	r1, r3, #1
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	005b      	lsls	r3, r3, #1
 800389e:	fbb1 f3f3 	udiv	r3, r1, r3
 80038a2:	1c59      	adds	r1, r3, #1
 80038a4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80038a8:	400b      	ands	r3, r1
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d00a      	beq.n	80038c4 <HAL_I2C_Init+0x138>
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	1e59      	subs	r1, r3, #1
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	005b      	lsls	r3, r3, #1
 80038b8:	fbb1 f3f3 	udiv	r3, r1, r3
 80038bc:	3301      	adds	r3, #1
 80038be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038c2:	e051      	b.n	8003968 <HAL_I2C_Init+0x1dc>
 80038c4:	2304      	movs	r3, #4
 80038c6:	e04f      	b.n	8003968 <HAL_I2C_Init+0x1dc>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d111      	bne.n	80038f4 <HAL_I2C_Init+0x168>
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	1e58      	subs	r0, r3, #1
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6859      	ldr	r1, [r3, #4]
 80038d8:	460b      	mov	r3, r1
 80038da:	005b      	lsls	r3, r3, #1
 80038dc:	440b      	add	r3, r1
 80038de:	fbb0 f3f3 	udiv	r3, r0, r3
 80038e2:	3301      	adds	r3, #1
 80038e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	bf0c      	ite	eq
 80038ec:	2301      	moveq	r3, #1
 80038ee:	2300      	movne	r3, #0
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	e012      	b.n	800391a <HAL_I2C_Init+0x18e>
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	1e58      	subs	r0, r3, #1
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6859      	ldr	r1, [r3, #4]
 80038fc:	460b      	mov	r3, r1
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	440b      	add	r3, r1
 8003902:	0099      	lsls	r1, r3, #2
 8003904:	440b      	add	r3, r1
 8003906:	fbb0 f3f3 	udiv	r3, r0, r3
 800390a:	3301      	adds	r3, #1
 800390c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003910:	2b00      	cmp	r3, #0
 8003912:	bf0c      	ite	eq
 8003914:	2301      	moveq	r3, #1
 8003916:	2300      	movne	r3, #0
 8003918:	b2db      	uxtb	r3, r3
 800391a:	2b00      	cmp	r3, #0
 800391c:	d001      	beq.n	8003922 <HAL_I2C_Init+0x196>
 800391e:	2301      	movs	r3, #1
 8003920:	e022      	b.n	8003968 <HAL_I2C_Init+0x1dc>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d10e      	bne.n	8003948 <HAL_I2C_Init+0x1bc>
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	1e58      	subs	r0, r3, #1
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6859      	ldr	r1, [r3, #4]
 8003932:	460b      	mov	r3, r1
 8003934:	005b      	lsls	r3, r3, #1
 8003936:	440b      	add	r3, r1
 8003938:	fbb0 f3f3 	udiv	r3, r0, r3
 800393c:	3301      	adds	r3, #1
 800393e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003942:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003946:	e00f      	b.n	8003968 <HAL_I2C_Init+0x1dc>
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	1e58      	subs	r0, r3, #1
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6859      	ldr	r1, [r3, #4]
 8003950:	460b      	mov	r3, r1
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	440b      	add	r3, r1
 8003956:	0099      	lsls	r1, r3, #2
 8003958:	440b      	add	r3, r1
 800395a:	fbb0 f3f3 	udiv	r3, r0, r3
 800395e:	3301      	adds	r3, #1
 8003960:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003964:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003968:	6879      	ldr	r1, [r7, #4]
 800396a:	6809      	ldr	r1, [r1, #0]
 800396c:	4313      	orrs	r3, r2
 800396e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	69da      	ldr	r2, [r3, #28]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6a1b      	ldr	r3, [r3, #32]
 8003982:	431a      	orrs	r2, r3
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	430a      	orrs	r2, r1
 800398a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003996:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800399a:	687a      	ldr	r2, [r7, #4]
 800399c:	6911      	ldr	r1, [r2, #16]
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	68d2      	ldr	r2, [r2, #12]
 80039a2:	4311      	orrs	r1, r2
 80039a4:	687a      	ldr	r2, [r7, #4]
 80039a6:	6812      	ldr	r2, [r2, #0]
 80039a8:	430b      	orrs	r3, r1
 80039aa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	68db      	ldr	r3, [r3, #12]
 80039b2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	695a      	ldr	r2, [r3, #20]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	699b      	ldr	r3, [r3, #24]
 80039be:	431a      	orrs	r2, r3
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	430a      	orrs	r2, r1
 80039c6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f042 0201 	orr.w	r2, r2, #1
 80039d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2200      	movs	r2, #0
 80039dc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2220      	movs	r2, #32
 80039e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2200      	movs	r2, #0
 80039ea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2200      	movs	r2, #0
 80039f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80039f4:	2300      	movs	r3, #0
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	3710      	adds	r7, #16
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}
 80039fe:	bf00      	nop
 8003a00:	000186a0 	.word	0x000186a0
 8003a04:	001e847f 	.word	0x001e847f
 8003a08:	003d08ff 	.word	0x003d08ff
 8003a0c:	431bde83 	.word	0x431bde83
 8003a10:	10624dd3 	.word	0x10624dd3

08003a14 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b088      	sub	sp, #32
 8003a18:	af02      	add	r7, sp, #8
 8003a1a:	60f8      	str	r0, [r7, #12]
 8003a1c:	4608      	mov	r0, r1
 8003a1e:	4611      	mov	r1, r2
 8003a20:	461a      	mov	r2, r3
 8003a22:	4603      	mov	r3, r0
 8003a24:	817b      	strh	r3, [r7, #10]
 8003a26:	460b      	mov	r3, r1
 8003a28:	813b      	strh	r3, [r7, #8]
 8003a2a:	4613      	mov	r3, r2
 8003a2c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003a2e:	f7fe fb1f 	bl	8002070 <HAL_GetTick>
 8003a32:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a3a:	b2db      	uxtb	r3, r3
 8003a3c:	2b20      	cmp	r3, #32
 8003a3e:	f040 80d9 	bne.w	8003bf4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	9300      	str	r3, [sp, #0]
 8003a46:	2319      	movs	r3, #25
 8003a48:	2201      	movs	r2, #1
 8003a4a:	496d      	ldr	r1, [pc, #436]	; (8003c00 <HAL_I2C_Mem_Write+0x1ec>)
 8003a4c:	68f8      	ldr	r0, [r7, #12]
 8003a4e:	f000 fd27 	bl	80044a0 <I2C_WaitOnFlagUntilTimeout>
 8003a52:	4603      	mov	r3, r0
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d001      	beq.n	8003a5c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003a58:	2302      	movs	r3, #2
 8003a5a:	e0cc      	b.n	8003bf6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d101      	bne.n	8003a6a <HAL_I2C_Mem_Write+0x56>
 8003a66:	2302      	movs	r3, #2
 8003a68:	e0c5      	b.n	8003bf6 <HAL_I2C_Mem_Write+0x1e2>
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f003 0301 	and.w	r3, r3, #1
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d007      	beq.n	8003a90 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f042 0201 	orr.w	r2, r2, #1
 8003a8e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a9e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2221      	movs	r2, #33	; 0x21
 8003aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2240      	movs	r2, #64	; 0x40
 8003aac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	6a3a      	ldr	r2, [r7, #32]
 8003aba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003ac0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ac6:	b29a      	uxth	r2, r3
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	4a4d      	ldr	r2, [pc, #308]	; (8003c04 <HAL_I2C_Mem_Write+0x1f0>)
 8003ad0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003ad2:	88f8      	ldrh	r0, [r7, #6]
 8003ad4:	893a      	ldrh	r2, [r7, #8]
 8003ad6:	8979      	ldrh	r1, [r7, #10]
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	9301      	str	r3, [sp, #4]
 8003adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ade:	9300      	str	r3, [sp, #0]
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	68f8      	ldr	r0, [r7, #12]
 8003ae4:	f000 fa4c 	bl	8003f80 <I2C_RequestMemoryWrite>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d052      	beq.n	8003b94 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	e081      	b.n	8003bf6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003af2:	697a      	ldr	r2, [r7, #20]
 8003af4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003af6:	68f8      	ldr	r0, [r7, #12]
 8003af8:	f000 fda8 	bl	800464c <I2C_WaitOnTXEFlagUntilTimeout>
 8003afc:	4603      	mov	r3, r0
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d00d      	beq.n	8003b1e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b06:	2b04      	cmp	r3, #4
 8003b08:	d107      	bne.n	8003b1a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b18:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e06b      	b.n	8003bf6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b22:	781a      	ldrb	r2, [r3, #0]
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b2e:	1c5a      	adds	r2, r3, #1
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b38:	3b01      	subs	r3, #1
 8003b3a:	b29a      	uxth	r2, r3
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b44:	b29b      	uxth	r3, r3
 8003b46:	3b01      	subs	r3, #1
 8003b48:	b29a      	uxth	r2, r3
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	695b      	ldr	r3, [r3, #20]
 8003b54:	f003 0304 	and.w	r3, r3, #4
 8003b58:	2b04      	cmp	r3, #4
 8003b5a:	d11b      	bne.n	8003b94 <HAL_I2C_Mem_Write+0x180>
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d017      	beq.n	8003b94 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b68:	781a      	ldrb	r2, [r3, #0]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b74:	1c5a      	adds	r2, r3, #1
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b7e:	3b01      	subs	r3, #1
 8003b80:	b29a      	uxth	r2, r3
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b8a:	b29b      	uxth	r3, r3
 8003b8c:	3b01      	subs	r3, #1
 8003b8e:	b29a      	uxth	r2, r3
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d1aa      	bne.n	8003af2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b9c:	697a      	ldr	r2, [r7, #20]
 8003b9e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ba0:	68f8      	ldr	r0, [r7, #12]
 8003ba2:	f000 fd94 	bl	80046ce <I2C_WaitOnBTFFlagUntilTimeout>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d00d      	beq.n	8003bc8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb0:	2b04      	cmp	r3, #4
 8003bb2:	d107      	bne.n	8003bc4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bc2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	e016      	b.n	8003bf6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bd6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2220      	movs	r2, #32
 8003bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2200      	movs	r2, #0
 8003be4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2200      	movs	r2, #0
 8003bec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	e000      	b.n	8003bf6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003bf4:	2302      	movs	r3, #2
  }
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3718      	adds	r7, #24
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}
 8003bfe:	bf00      	nop
 8003c00:	00100002 	.word	0x00100002
 8003c04:	ffff0000 	.word	0xffff0000

08003c08 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b08c      	sub	sp, #48	; 0x30
 8003c0c:	af02      	add	r7, sp, #8
 8003c0e:	60f8      	str	r0, [r7, #12]
 8003c10:	4608      	mov	r0, r1
 8003c12:	4611      	mov	r1, r2
 8003c14:	461a      	mov	r2, r3
 8003c16:	4603      	mov	r3, r0
 8003c18:	817b      	strh	r3, [r7, #10]
 8003c1a:	460b      	mov	r3, r1
 8003c1c:	813b      	strh	r3, [r7, #8]
 8003c1e:	4613      	mov	r3, r2
 8003c20:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003c22:	f7fe fa25 	bl	8002070 <HAL_GetTick>
 8003c26:	6278      	str	r0, [r7, #36]	; 0x24
  __IO uint32_t count = 0U;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c32:	b2db      	uxtb	r3, r3
 8003c34:	2b20      	cmp	r3, #32
 8003c36:	f040 8176 	bne.w	8003f26 <HAL_I2C_Mem_Read_DMA+0x31e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8003c3a:	4b95      	ldr	r3, [pc, #596]	; (8003e90 <HAL_I2C_Mem_Read_DMA+0x288>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	08db      	lsrs	r3, r3, #3
 8003c40:	4a94      	ldr	r2, [pc, #592]	; (8003e94 <HAL_I2C_Mem_Read_DMA+0x28c>)
 8003c42:	fba2 2303 	umull	r2, r3, r2, r3
 8003c46:	0a1a      	lsrs	r2, r3, #8
 8003c48:	4613      	mov	r3, r2
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	4413      	add	r3, r2
 8003c4e:	009a      	lsls	r2, r3, #2
 8003c50:	4413      	add	r3, r2
 8003c52:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 8003c54:	69fb      	ldr	r3, [r7, #28]
 8003c56:	3b01      	subs	r3, #1
 8003c58:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 8003c5a:	69fb      	ldr	r3, [r7, #28]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d116      	bne.n	8003c8e <HAL_I2C_Mem_Read_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2200      	movs	r2, #0
 8003c64:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2220      	movs	r2, #32
 8003c6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2200      	movs	r2, #0
 8003c72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c7a:	f043 0220 	orr.w	r2, r3, #32
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2200      	movs	r2, #0
 8003c86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e14c      	b.n	8003f28 <HAL_I2C_Mem_Read_DMA+0x320>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	699b      	ldr	r3, [r3, #24]
 8003c94:	f003 0302 	and.w	r3, r3, #2
 8003c98:	2b02      	cmp	r3, #2
 8003c9a:	d0db      	beq.n	8003c54 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d101      	bne.n	8003caa <HAL_I2C_Mem_Read_DMA+0xa2>
 8003ca6:	2302      	movs	r3, #2
 8003ca8:	e13e      	b.n	8003f28 <HAL_I2C_Mem_Read_DMA+0x320>
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2201      	movs	r2, #1
 8003cae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 0301 	and.w	r3, r3, #1
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d007      	beq.n	8003cd0 <HAL_I2C_Mem_Read_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f042 0201 	orr.w	r2, r2, #1
 8003cce:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003cde:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2222      	movs	r2, #34	; 0x22
 8003ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2240      	movs	r2, #64	; 0x40
 8003cec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003cfa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003d00:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d06:	b29a      	uxth	r2, r3
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	4a62      	ldr	r2, [pc, #392]	; (8003e98 <HAL_I2C_Mem_Read_DMA+0x290>)
 8003d10:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8003d12:	897a      	ldrh	r2, [r7, #10]
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 8003d18:	893a      	ldrh	r2, [r7, #8]
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 8003d1e:	88fa      	ldrh	r2, [r7, #6]
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2200      	movs	r2, #0
 8003d28:	651a      	str	r2, [r3, #80]	; 0x50

    if (hi2c->XferSize > 0U)
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	f000 80cc 	beq.w	8003ecc <HAL_I2C_Mem_Read_DMA+0x2c4>
    {
      if (hi2c->hdmarx != NULL)
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d02d      	beq.n	8003d98 <HAL_I2C_Mem_Read_DMA+0x190>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d40:	4a56      	ldr	r2, [pc, #344]	; (8003e9c <HAL_I2C_Mem_Read_DMA+0x294>)
 8003d42:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d48:	4a55      	ldr	r2, [pc, #340]	; (8003ea0 <HAL_I2C_Mem_Read_DMA+0x298>)
 8003d4a:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d50:	2200      	movs	r2, #0
 8003d52:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d58:	2200      	movs	r2, #0
 8003d5a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d60:	2200      	movs	r2, #0
 8003d62:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d68:	2200      	movs	r2, #0
 8003d6a:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	3310      	adds	r3, #16
 8003d76:	4619      	mov	r1, r3
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d7c:	461a      	mov	r2, r3
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d82:	f7ff f81f 	bl	8002dc4 <HAL_DMA_Start_IT>
 8003d86:	4603      	mov	r3, r0
 8003d88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8003d8c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	f040 8087 	bne.w	8003ea4 <HAL_I2C_Mem_Read_DMA+0x29c>
 8003d96:	e013      	b.n	8003dc0 <HAL_I2C_Mem_Read_DMA+0x1b8>
        hi2c->State     = HAL_I2C_STATE_READY;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2220      	movs	r2, #32
 8003d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2200      	movs	r2, #0
 8003da4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dac:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2200      	movs	r2, #0
 8003db8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e0b3      	b.n	8003f28 <HAL_I2C_Mem_Read_DMA+0x320>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8003dc0:	88f8      	ldrh	r0, [r7, #6]
 8003dc2:	893a      	ldrh	r2, [r7, #8]
 8003dc4:	8979      	ldrh	r1, [r7, #10]
 8003dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc8:	9301      	str	r3, [sp, #4]
 8003dca:	2323      	movs	r3, #35	; 0x23
 8003dcc:	9300      	str	r3, [sp, #0]
 8003dce:	4603      	mov	r3, r0
 8003dd0:	68f8      	ldr	r0, [r7, #12]
 8003dd2:	f000 f96b 	bl	80040ac <I2C_RequestMemoryRead>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d023      	beq.n	8003e24 <HAL_I2C_Mem_Read_DMA+0x21c>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003de0:	4618      	mov	r0, r3
 8003de2:	f7ff f8b7 	bl	8002f54 <HAL_DMA_Abort_IT>
 8003de6:	4603      	mov	r3, r0
 8003de8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003df0:	2200      	movs	r2, #0
 8003df2:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e02:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2200      	movs	r2, #0
 8003e08:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount = 0U;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f022 0201 	bic.w	r2, r2, #1
 8003e1e:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8003e20:	2301      	movs	r3, #1
 8003e22:	e081      	b.n	8003f28 <HAL_I2C_Mem_Read_DMA+0x320>
        }

        if (hi2c->XferSize == 1U)
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d108      	bne.n	8003e3e <HAL_I2C_Mem_Read_DMA+0x236>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e3a:	601a      	str	r2, [r3, #0]
 8003e3c:	e007      	b.n	8003e4e <HAL_I2C_Mem_Read_DMA+0x246>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	685a      	ldr	r2, [r3, #4]
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003e4c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e4e:	2300      	movs	r3, #0
 8003e50:	61bb      	str	r3, [r7, #24]
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	695b      	ldr	r3, [r3, #20]
 8003e58:	61bb      	str	r3, [r7, #24]
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	699b      	ldr	r3, [r3, #24]
 8003e60:	61bb      	str	r3, [r7, #24]
 8003e62:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2200      	movs	r2, #0
 8003e68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	685a      	ldr	r2, [r3, #4]
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e7a:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	685a      	ldr	r2, [r3, #4]
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e8a:	605a      	str	r2, [r3, #4]
 8003e8c:	e049      	b.n	8003f22 <HAL_I2C_Mem_Read_DMA+0x31a>
 8003e8e:	bf00      	nop
 8003e90:	2000001c 	.word	0x2000001c
 8003e94:	14f8b589 	.word	0x14f8b589
 8003e98:	ffff0000 	.word	0xffff0000
 8003e9c:	0800427d 	.word	0x0800427d
 8003ea0:	08004427 	.word	0x08004427
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2220      	movs	r2, #32
 8003ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb8:	f043 0210 	orr.w	r2, r3, #16
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e02d      	b.n	8003f28 <HAL_I2C_Mem_Read_DMA+0x320>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8003ecc:	88f8      	ldrh	r0, [r7, #6]
 8003ece:	893a      	ldrh	r2, [r7, #8]
 8003ed0:	8979      	ldrh	r1, [r7, #10]
 8003ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed4:	9301      	str	r3, [sp, #4]
 8003ed6:	2323      	movs	r3, #35	; 0x23
 8003ed8:	9300      	str	r3, [sp, #0]
 8003eda:	4603      	mov	r3, r0
 8003edc:	68f8      	ldr	r0, [r7, #12]
 8003ede:	f000 f8e5 	bl	80040ac <I2C_RequestMemoryRead>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d001      	beq.n	8003eec <HAL_I2C_Mem_Read_DMA+0x2e4>
      {
        return HAL_ERROR;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	e01d      	b.n	8003f28 <HAL_I2C_Mem_Read_DMA+0x320>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003eec:	2300      	movs	r3, #0
 8003eee:	617b      	str	r3, [r7, #20]
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	695b      	ldr	r3, [r3, #20]
 8003ef6:	617b      	str	r3, [r7, #20]
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	699b      	ldr	r3, [r3, #24]
 8003efe:	617b      	str	r3, [r7, #20]
 8003f00:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f10:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	2220      	movs	r2, #32
 8003f16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }

    return HAL_OK;
 8003f22:	2300      	movs	r3, #0
 8003f24:	e000      	b.n	8003f28 <HAL_I2C_Mem_Read_DMA+0x320>
  }
  else
  {
    return HAL_BUSY;
 8003f26:	2302      	movs	r3, #2
  }
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	3728      	adds	r7, #40	; 0x28
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}

08003f30 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b083      	sub	sp, #12
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003f38:	bf00      	nop
 8003f3a:	370c      	adds	r7, #12
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr

08003f44 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b083      	sub	sp, #12
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003f4c:	bf00      	nop
 8003f4e:	370c      	adds	r7, #12
 8003f50:	46bd      	mov	sp, r7
 8003f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f56:	4770      	bx	lr

08003f58 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b083      	sub	sp, #12
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003f60:	bf00      	nop
 8003f62:	370c      	adds	r7, #12
 8003f64:	46bd      	mov	sp, r7
 8003f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6a:	4770      	bx	lr

08003f6c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b083      	sub	sp, #12
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003f74:	bf00      	nop
 8003f76:	370c      	adds	r7, #12
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7e:	4770      	bx	lr

08003f80 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b088      	sub	sp, #32
 8003f84:	af02      	add	r7, sp, #8
 8003f86:	60f8      	str	r0, [r7, #12]
 8003f88:	4608      	mov	r0, r1
 8003f8a:	4611      	mov	r1, r2
 8003f8c:	461a      	mov	r2, r3
 8003f8e:	4603      	mov	r3, r0
 8003f90:	817b      	strh	r3, [r7, #10]
 8003f92:	460b      	mov	r3, r1
 8003f94:	813b      	strh	r3, [r7, #8]
 8003f96:	4613      	mov	r3, r2
 8003f98:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fa8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fac:	9300      	str	r3, [sp, #0]
 8003fae:	6a3b      	ldr	r3, [r7, #32]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003fb6:	68f8      	ldr	r0, [r7, #12]
 8003fb8:	f000 fa72 	bl	80044a0 <I2C_WaitOnFlagUntilTimeout>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d00d      	beq.n	8003fde <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fcc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fd0:	d103      	bne.n	8003fda <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003fd8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003fda:	2303      	movs	r3, #3
 8003fdc:	e05f      	b.n	800409e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003fde:	897b      	ldrh	r3, [r7, #10]
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	461a      	mov	r2, r3
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003fec:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff0:	6a3a      	ldr	r2, [r7, #32]
 8003ff2:	492d      	ldr	r1, [pc, #180]	; (80040a8 <I2C_RequestMemoryWrite+0x128>)
 8003ff4:	68f8      	ldr	r0, [r7, #12]
 8003ff6:	f000 faaa 	bl	800454e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d001      	beq.n	8004004 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	e04c      	b.n	800409e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004004:	2300      	movs	r3, #0
 8004006:	617b      	str	r3, [r7, #20]
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	695b      	ldr	r3, [r3, #20]
 800400e:	617b      	str	r3, [r7, #20]
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	699b      	ldr	r3, [r3, #24]
 8004016:	617b      	str	r3, [r7, #20]
 8004018:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800401a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800401c:	6a39      	ldr	r1, [r7, #32]
 800401e:	68f8      	ldr	r0, [r7, #12]
 8004020:	f000 fb14 	bl	800464c <I2C_WaitOnTXEFlagUntilTimeout>
 8004024:	4603      	mov	r3, r0
 8004026:	2b00      	cmp	r3, #0
 8004028:	d00d      	beq.n	8004046 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800402e:	2b04      	cmp	r3, #4
 8004030:	d107      	bne.n	8004042 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004040:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	e02b      	b.n	800409e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004046:	88fb      	ldrh	r3, [r7, #6]
 8004048:	2b01      	cmp	r3, #1
 800404a:	d105      	bne.n	8004058 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800404c:	893b      	ldrh	r3, [r7, #8]
 800404e:	b2da      	uxtb	r2, r3
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	611a      	str	r2, [r3, #16]
 8004056:	e021      	b.n	800409c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004058:	893b      	ldrh	r3, [r7, #8]
 800405a:	0a1b      	lsrs	r3, r3, #8
 800405c:	b29b      	uxth	r3, r3
 800405e:	b2da      	uxtb	r2, r3
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004066:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004068:	6a39      	ldr	r1, [r7, #32]
 800406a:	68f8      	ldr	r0, [r7, #12]
 800406c:	f000 faee 	bl	800464c <I2C_WaitOnTXEFlagUntilTimeout>
 8004070:	4603      	mov	r3, r0
 8004072:	2b00      	cmp	r3, #0
 8004074:	d00d      	beq.n	8004092 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800407a:	2b04      	cmp	r3, #4
 800407c:	d107      	bne.n	800408e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800408c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	e005      	b.n	800409e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004092:	893b      	ldrh	r3, [r7, #8]
 8004094:	b2da      	uxtb	r2, r3
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800409c:	2300      	movs	r3, #0
}
 800409e:	4618      	mov	r0, r3
 80040a0:	3718      	adds	r7, #24
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}
 80040a6:	bf00      	nop
 80040a8:	00010002 	.word	0x00010002

080040ac <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b088      	sub	sp, #32
 80040b0:	af02      	add	r7, sp, #8
 80040b2:	60f8      	str	r0, [r7, #12]
 80040b4:	4608      	mov	r0, r1
 80040b6:	4611      	mov	r1, r2
 80040b8:	461a      	mov	r2, r3
 80040ba:	4603      	mov	r3, r0
 80040bc:	817b      	strh	r3, [r7, #10]
 80040be:	460b      	mov	r3, r1
 80040c0:	813b      	strh	r3, [r7, #8]
 80040c2:	4613      	mov	r3, r2
 80040c4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80040d4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040e4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80040e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e8:	9300      	str	r3, [sp, #0]
 80040ea:	6a3b      	ldr	r3, [r7, #32]
 80040ec:	2200      	movs	r2, #0
 80040ee:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80040f2:	68f8      	ldr	r0, [r7, #12]
 80040f4:	f000 f9d4 	bl	80044a0 <I2C_WaitOnFlagUntilTimeout>
 80040f8:	4603      	mov	r3, r0
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d00d      	beq.n	800411a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004108:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800410c:	d103      	bne.n	8004116 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004114:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004116:	2303      	movs	r3, #3
 8004118:	e0aa      	b.n	8004270 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800411a:	897b      	ldrh	r3, [r7, #10]
 800411c:	b2db      	uxtb	r3, r3
 800411e:	461a      	mov	r2, r3
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004128:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800412a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800412c:	6a3a      	ldr	r2, [r7, #32]
 800412e:	4952      	ldr	r1, [pc, #328]	; (8004278 <I2C_RequestMemoryRead+0x1cc>)
 8004130:	68f8      	ldr	r0, [r7, #12]
 8004132:	f000 fa0c 	bl	800454e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004136:	4603      	mov	r3, r0
 8004138:	2b00      	cmp	r3, #0
 800413a:	d001      	beq.n	8004140 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800413c:	2301      	movs	r3, #1
 800413e:	e097      	b.n	8004270 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004140:	2300      	movs	r3, #0
 8004142:	617b      	str	r3, [r7, #20]
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	695b      	ldr	r3, [r3, #20]
 800414a:	617b      	str	r3, [r7, #20]
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	699b      	ldr	r3, [r3, #24]
 8004152:	617b      	str	r3, [r7, #20]
 8004154:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004156:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004158:	6a39      	ldr	r1, [r7, #32]
 800415a:	68f8      	ldr	r0, [r7, #12]
 800415c:	f000 fa76 	bl	800464c <I2C_WaitOnTXEFlagUntilTimeout>
 8004160:	4603      	mov	r3, r0
 8004162:	2b00      	cmp	r3, #0
 8004164:	d00d      	beq.n	8004182 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800416a:	2b04      	cmp	r3, #4
 800416c:	d107      	bne.n	800417e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800417c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	e076      	b.n	8004270 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004182:	88fb      	ldrh	r3, [r7, #6]
 8004184:	2b01      	cmp	r3, #1
 8004186:	d105      	bne.n	8004194 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004188:	893b      	ldrh	r3, [r7, #8]
 800418a:	b2da      	uxtb	r2, r3
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	611a      	str	r2, [r3, #16]
 8004192:	e021      	b.n	80041d8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004194:	893b      	ldrh	r3, [r7, #8]
 8004196:	0a1b      	lsrs	r3, r3, #8
 8004198:	b29b      	uxth	r3, r3
 800419a:	b2da      	uxtb	r2, r3
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041a4:	6a39      	ldr	r1, [r7, #32]
 80041a6:	68f8      	ldr	r0, [r7, #12]
 80041a8:	f000 fa50 	bl	800464c <I2C_WaitOnTXEFlagUntilTimeout>
 80041ac:	4603      	mov	r3, r0
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d00d      	beq.n	80041ce <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b6:	2b04      	cmp	r3, #4
 80041b8:	d107      	bne.n	80041ca <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	681a      	ldr	r2, [r3, #0]
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041c8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e050      	b.n	8004270 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80041ce:	893b      	ldrh	r3, [r7, #8]
 80041d0:	b2da      	uxtb	r2, r3
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041da:	6a39      	ldr	r1, [r7, #32]
 80041dc:	68f8      	ldr	r0, [r7, #12]
 80041de:	f000 fa35 	bl	800464c <I2C_WaitOnTXEFlagUntilTimeout>
 80041e2:	4603      	mov	r3, r0
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d00d      	beq.n	8004204 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ec:	2b04      	cmp	r3, #4
 80041ee:	d107      	bne.n	8004200 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	681a      	ldr	r2, [r3, #0]
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041fe:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	e035      	b.n	8004270 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	681a      	ldr	r2, [r3, #0]
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004212:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004216:	9300      	str	r3, [sp, #0]
 8004218:	6a3b      	ldr	r3, [r7, #32]
 800421a:	2200      	movs	r2, #0
 800421c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004220:	68f8      	ldr	r0, [r7, #12]
 8004222:	f000 f93d 	bl	80044a0 <I2C_WaitOnFlagUntilTimeout>
 8004226:	4603      	mov	r3, r0
 8004228:	2b00      	cmp	r3, #0
 800422a:	d00d      	beq.n	8004248 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004236:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800423a:	d103      	bne.n	8004244 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004242:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004244:	2303      	movs	r3, #3
 8004246:	e013      	b.n	8004270 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004248:	897b      	ldrh	r3, [r7, #10]
 800424a:	b2db      	uxtb	r3, r3
 800424c:	f043 0301 	orr.w	r3, r3, #1
 8004250:	b2da      	uxtb	r2, r3
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800425a:	6a3a      	ldr	r2, [r7, #32]
 800425c:	4906      	ldr	r1, [pc, #24]	; (8004278 <I2C_RequestMemoryRead+0x1cc>)
 800425e:	68f8      	ldr	r0, [r7, #12]
 8004260:	f000 f975 	bl	800454e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004264:	4603      	mov	r3, r0
 8004266:	2b00      	cmp	r3, #0
 8004268:	d001      	beq.n	800426e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	e000      	b.n	8004270 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800426e:	2300      	movs	r3, #0
}
 8004270:	4618      	mov	r0, r3
 8004272:	3718      	adds	r7, #24
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}
 8004278:	00010002 	.word	0x00010002

0800427c <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b086      	sub	sp, #24
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004288:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004290:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004298:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800429e:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	685a      	ldr	r2, [r3, #4]
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80042ae:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d003      	beq.n	80042c0 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042bc:	2200      	movs	r2, #0
 80042be:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d003      	beq.n	80042d0 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042cc:	2200      	movs	r2, #0
 80042ce:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 80042d0:	7cfb      	ldrb	r3, [r7, #19]
 80042d2:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80042d6:	2b21      	cmp	r3, #33	; 0x21
 80042d8:	d007      	beq.n	80042ea <I2C_DMAXferCplt+0x6e>
 80042da:	7cfb      	ldrb	r3, [r7, #19]
 80042dc:	f003 0322 	and.w	r3, r3, #34	; 0x22
 80042e0:	2b22      	cmp	r3, #34	; 0x22
 80042e2:	d131      	bne.n	8004348 <I2C_DMAXferCplt+0xcc>
 80042e4:	7cbb      	ldrb	r3, [r7, #18]
 80042e6:	2b20      	cmp	r3, #32
 80042e8:	d12e      	bne.n	8004348 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	685a      	ldr	r2, [r3, #4]
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042f8:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	2200      	movs	r2, #0
 80042fe:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004300:	7cfb      	ldrb	r3, [r7, #19]
 8004302:	2b29      	cmp	r3, #41	; 0x29
 8004304:	d10a      	bne.n	800431c <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	2221      	movs	r2, #33	; 0x21
 800430a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	2228      	movs	r2, #40	; 0x28
 8004310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004314:	6978      	ldr	r0, [r7, #20]
 8004316:	f7ff fe15 	bl	8003f44 <HAL_I2C_SlaveTxCpltCallback>
 800431a:	e00c      	b.n	8004336 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800431c:	7cfb      	ldrb	r3, [r7, #19]
 800431e:	2b2a      	cmp	r3, #42	; 0x2a
 8004320:	d109      	bne.n	8004336 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	2222      	movs	r2, #34	; 0x22
 8004326:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	2228      	movs	r2, #40	; 0x28
 800432c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004330:	6978      	ldr	r0, [r7, #20]
 8004332:	f7ff fe11 	bl	8003f58 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	685a      	ldr	r2, [r3, #4]
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004344:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004346:	e06a      	b.n	800441e <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800434e:	b2db      	uxtb	r3, r3
 8004350:	2b00      	cmp	r3, #0
 8004352:	d064      	beq.n	800441e <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004358:	b29b      	uxth	r3, r3
 800435a:	2b01      	cmp	r3, #1
 800435c:	d107      	bne.n	800436e <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	681a      	ldr	r2, [r3, #0]
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800436c:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	685a      	ldr	r2, [r3, #4]
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800437c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004384:	d009      	beq.n	800439a <I2C_DMAXferCplt+0x11e>
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2b08      	cmp	r3, #8
 800438a:	d006      	beq.n	800439a <I2C_DMAXferCplt+0x11e>
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004392:	d002      	beq.n	800439a <I2C_DMAXferCplt+0x11e>
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2b20      	cmp	r3, #32
 8004398:	d107      	bne.n	80043aa <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	681a      	ldr	r2, [r3, #0]
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043a8:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	685a      	ldr	r2, [r3, #4]
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80043b8:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	685a      	ldr	r2, [r3, #4]
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80043c8:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	2200      	movs	r2, #0
 80043ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d003      	beq.n	80043e0 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 80043d8:	6978      	ldr	r0, [r7, #20]
 80043da:	f7ff fdc7 	bl	8003f6c <HAL_I2C_ErrorCallback>
}
 80043de:	e01e      	b.n	800441e <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	2220      	movs	r2, #32
 80043e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80043ee:	b2db      	uxtb	r3, r3
 80043f0:	2b40      	cmp	r3, #64	; 0x40
 80043f2:	d10a      	bne.n	800440a <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	2200      	movs	r2, #0
 80043f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	2200      	movs	r2, #0
 8004400:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8004402:	6978      	ldr	r0, [r7, #20]
 8004404:	f7fc fbb8 	bl	8000b78 <HAL_I2C_MemRxCpltCallback>
}
 8004408:	e009      	b.n	800441e <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	2200      	movs	r2, #0
 800440e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	2212      	movs	r2, #18
 8004416:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8004418:	6978      	ldr	r0, [r7, #20]
 800441a:	f7ff fd89 	bl	8003f30 <HAL_I2C_MasterRxCpltCallback>
}
 800441e:	bf00      	nop
 8004420:	3718      	adds	r7, #24
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}

08004426 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8004426:	b580      	push	{r7, lr}
 8004428:	b084      	sub	sp, #16
 800442a:	af00      	add	r7, sp, #0
 800442c:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004432:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004438:	2b00      	cmp	r3, #0
 800443a:	d003      	beq.n	8004444 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004440:	2200      	movs	r2, #0
 8004442:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004448:	2b00      	cmp	r3, #0
 800444a:	d003      	beq.n	8004454 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004450:	2200      	movs	r2, #0
 8004452:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8004454:	6878      	ldr	r0, [r7, #4]
 8004456:	f7fe ff29 	bl	80032ac <HAL_DMA_GetError>
 800445a:	4603      	mov	r3, r0
 800445c:	2b02      	cmp	r3, #2
 800445e:	d01b      	beq.n	8004498 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	681a      	ldr	r2, [r3, #0]
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800446e:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	2200      	movs	r2, #0
 8004474:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2220      	movs	r2, #32
 800447a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2200      	movs	r2, #0
 8004482:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800448a:	f043 0210 	orr.w	r2, r3, #16
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004492:	68f8      	ldr	r0, [r7, #12]
 8004494:	f7ff fd6a 	bl	8003f6c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004498:	bf00      	nop
 800449a:	3710      	adds	r7, #16
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}

080044a0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b084      	sub	sp, #16
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	60f8      	str	r0, [r7, #12]
 80044a8:	60b9      	str	r1, [r7, #8]
 80044aa:	603b      	str	r3, [r7, #0]
 80044ac:	4613      	mov	r3, r2
 80044ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80044b0:	e025      	b.n	80044fe <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044b8:	d021      	beq.n	80044fe <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044ba:	f7fd fdd9 	bl	8002070 <HAL_GetTick>
 80044be:	4602      	mov	r2, r0
 80044c0:	69bb      	ldr	r3, [r7, #24]
 80044c2:	1ad3      	subs	r3, r2, r3
 80044c4:	683a      	ldr	r2, [r7, #0]
 80044c6:	429a      	cmp	r2, r3
 80044c8:	d302      	bcc.n	80044d0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d116      	bne.n	80044fe <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2200      	movs	r2, #0
 80044d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2220      	movs	r2, #32
 80044da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2200      	movs	r2, #0
 80044e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ea:	f043 0220 	orr.w	r2, r3, #32
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2200      	movs	r2, #0
 80044f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	e023      	b.n	8004546 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	0c1b      	lsrs	r3, r3, #16
 8004502:	b2db      	uxtb	r3, r3
 8004504:	2b01      	cmp	r3, #1
 8004506:	d10d      	bne.n	8004524 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	695b      	ldr	r3, [r3, #20]
 800450e:	43da      	mvns	r2, r3
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	4013      	ands	r3, r2
 8004514:	b29b      	uxth	r3, r3
 8004516:	2b00      	cmp	r3, #0
 8004518:	bf0c      	ite	eq
 800451a:	2301      	moveq	r3, #1
 800451c:	2300      	movne	r3, #0
 800451e:	b2db      	uxtb	r3, r3
 8004520:	461a      	mov	r2, r3
 8004522:	e00c      	b.n	800453e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	699b      	ldr	r3, [r3, #24]
 800452a:	43da      	mvns	r2, r3
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	4013      	ands	r3, r2
 8004530:	b29b      	uxth	r3, r3
 8004532:	2b00      	cmp	r3, #0
 8004534:	bf0c      	ite	eq
 8004536:	2301      	moveq	r3, #1
 8004538:	2300      	movne	r3, #0
 800453a:	b2db      	uxtb	r3, r3
 800453c:	461a      	mov	r2, r3
 800453e:	79fb      	ldrb	r3, [r7, #7]
 8004540:	429a      	cmp	r2, r3
 8004542:	d0b6      	beq.n	80044b2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004544:	2300      	movs	r3, #0
}
 8004546:	4618      	mov	r0, r3
 8004548:	3710      	adds	r7, #16
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}

0800454e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800454e:	b580      	push	{r7, lr}
 8004550:	b084      	sub	sp, #16
 8004552:	af00      	add	r7, sp, #0
 8004554:	60f8      	str	r0, [r7, #12]
 8004556:	60b9      	str	r1, [r7, #8]
 8004558:	607a      	str	r2, [r7, #4]
 800455a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800455c:	e051      	b.n	8004602 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	695b      	ldr	r3, [r3, #20]
 8004564:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004568:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800456c:	d123      	bne.n	80045b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800457c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004586:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2200      	movs	r2, #0
 800458c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2220      	movs	r2, #32
 8004592:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2200      	movs	r2, #0
 800459a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a2:	f043 0204 	orr.w	r2, r3, #4
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2200      	movs	r2, #0
 80045ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	e046      	b.n	8004644 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045bc:	d021      	beq.n	8004602 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045be:	f7fd fd57 	bl	8002070 <HAL_GetTick>
 80045c2:	4602      	mov	r2, r0
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	1ad3      	subs	r3, r2, r3
 80045c8:	687a      	ldr	r2, [r7, #4]
 80045ca:	429a      	cmp	r2, r3
 80045cc:	d302      	bcc.n	80045d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d116      	bne.n	8004602 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2200      	movs	r2, #0
 80045d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2220      	movs	r2, #32
 80045de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2200      	movs	r2, #0
 80045e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ee:	f043 0220 	orr.w	r2, r3, #32
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2200      	movs	r2, #0
 80045fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	e020      	b.n	8004644 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	0c1b      	lsrs	r3, r3, #16
 8004606:	b2db      	uxtb	r3, r3
 8004608:	2b01      	cmp	r3, #1
 800460a:	d10c      	bne.n	8004626 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	695b      	ldr	r3, [r3, #20]
 8004612:	43da      	mvns	r2, r3
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	4013      	ands	r3, r2
 8004618:	b29b      	uxth	r3, r3
 800461a:	2b00      	cmp	r3, #0
 800461c:	bf14      	ite	ne
 800461e:	2301      	movne	r3, #1
 8004620:	2300      	moveq	r3, #0
 8004622:	b2db      	uxtb	r3, r3
 8004624:	e00b      	b.n	800463e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	699b      	ldr	r3, [r3, #24]
 800462c:	43da      	mvns	r2, r3
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	4013      	ands	r3, r2
 8004632:	b29b      	uxth	r3, r3
 8004634:	2b00      	cmp	r3, #0
 8004636:	bf14      	ite	ne
 8004638:	2301      	movne	r3, #1
 800463a:	2300      	moveq	r3, #0
 800463c:	b2db      	uxtb	r3, r3
 800463e:	2b00      	cmp	r3, #0
 8004640:	d18d      	bne.n	800455e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004642:	2300      	movs	r3, #0
}
 8004644:	4618      	mov	r0, r3
 8004646:	3710      	adds	r7, #16
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}

0800464c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b084      	sub	sp, #16
 8004650:	af00      	add	r7, sp, #0
 8004652:	60f8      	str	r0, [r7, #12]
 8004654:	60b9      	str	r1, [r7, #8]
 8004656:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004658:	e02d      	b.n	80046b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800465a:	68f8      	ldr	r0, [r7, #12]
 800465c:	f000 f878 	bl	8004750 <I2C_IsAcknowledgeFailed>
 8004660:	4603      	mov	r3, r0
 8004662:	2b00      	cmp	r3, #0
 8004664:	d001      	beq.n	800466a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004666:	2301      	movs	r3, #1
 8004668:	e02d      	b.n	80046c6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004670:	d021      	beq.n	80046b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004672:	f7fd fcfd 	bl	8002070 <HAL_GetTick>
 8004676:	4602      	mov	r2, r0
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	1ad3      	subs	r3, r2, r3
 800467c:	68ba      	ldr	r2, [r7, #8]
 800467e:	429a      	cmp	r2, r3
 8004680:	d302      	bcc.n	8004688 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d116      	bne.n	80046b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2200      	movs	r2, #0
 800468c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2220      	movs	r2, #32
 8004692:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2200      	movs	r2, #0
 800469a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a2:	f043 0220 	orr.w	r2, r3, #32
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2200      	movs	r2, #0
 80046ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	e007      	b.n	80046c6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	695b      	ldr	r3, [r3, #20]
 80046bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046c0:	2b80      	cmp	r3, #128	; 0x80
 80046c2:	d1ca      	bne.n	800465a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80046c4:	2300      	movs	r3, #0
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3710      	adds	r7, #16
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}

080046ce <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80046ce:	b580      	push	{r7, lr}
 80046d0:	b084      	sub	sp, #16
 80046d2:	af00      	add	r7, sp, #0
 80046d4:	60f8      	str	r0, [r7, #12]
 80046d6:	60b9      	str	r1, [r7, #8]
 80046d8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80046da:	e02d      	b.n	8004738 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80046dc:	68f8      	ldr	r0, [r7, #12]
 80046de:	f000 f837 	bl	8004750 <I2C_IsAcknowledgeFailed>
 80046e2:	4603      	mov	r3, r0
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d001      	beq.n	80046ec <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	e02d      	b.n	8004748 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046f2:	d021      	beq.n	8004738 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046f4:	f7fd fcbc 	bl	8002070 <HAL_GetTick>
 80046f8:	4602      	mov	r2, r0
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	1ad3      	subs	r3, r2, r3
 80046fe:	68ba      	ldr	r2, [r7, #8]
 8004700:	429a      	cmp	r2, r3
 8004702:	d302      	bcc.n	800470a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d116      	bne.n	8004738 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2200      	movs	r2, #0
 800470e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2220      	movs	r2, #32
 8004714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	2200      	movs	r2, #0
 800471c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004724:	f043 0220 	orr.w	r2, r3, #32
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2200      	movs	r2, #0
 8004730:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004734:	2301      	movs	r3, #1
 8004736:	e007      	b.n	8004748 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	695b      	ldr	r3, [r3, #20]
 800473e:	f003 0304 	and.w	r3, r3, #4
 8004742:	2b04      	cmp	r3, #4
 8004744:	d1ca      	bne.n	80046dc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004746:	2300      	movs	r3, #0
}
 8004748:	4618      	mov	r0, r3
 800474a:	3710      	adds	r7, #16
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}

08004750 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004750:	b480      	push	{r7}
 8004752:	b083      	sub	sp, #12
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	695b      	ldr	r3, [r3, #20]
 800475e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004762:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004766:	d11b      	bne.n	80047a0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004770:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2200      	movs	r2, #0
 8004776:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2220      	movs	r2, #32
 800477c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2200      	movs	r2, #0
 8004784:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800478c:	f043 0204 	orr.w	r2, r3, #4
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2200      	movs	r2, #0
 8004798:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800479c:	2301      	movs	r3, #1
 800479e:	e000      	b.n	80047a2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80047a0:	2300      	movs	r3, #0
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	370c      	adds	r7, #12
 80047a6:	46bd      	mov	sp, r7
 80047a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ac:	4770      	bx	lr

080047ae <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80047ae:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047b0:	b08f      	sub	sp, #60	; 0x3c
 80047b2:	af0a      	add	r7, sp, #40	; 0x28
 80047b4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d101      	bne.n	80047c0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80047bc:	2301      	movs	r3, #1
 80047be:	e10f      	b.n	80049e0 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80047cc:	b2db      	uxtb	r3, r3
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d106      	bne.n	80047e0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2200      	movs	r2, #0
 80047d6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f006 fffc 	bl	800b7d8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2203      	movs	r2, #3
 80047e4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d102      	bne.n	80047fa <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2200      	movs	r2, #0
 80047f8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4618      	mov	r0, r3
 8004800:	f003 fcc3 	bl	800818a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	603b      	str	r3, [r7, #0]
 800480a:	687e      	ldr	r6, [r7, #4]
 800480c:	466d      	mov	r5, sp
 800480e:	f106 0410 	add.w	r4, r6, #16
 8004812:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004814:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004816:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004818:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800481a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800481e:	e885 0003 	stmia.w	r5, {r0, r1}
 8004822:	1d33      	adds	r3, r6, #4
 8004824:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004826:	6838      	ldr	r0, [r7, #0]
 8004828:	f003 fb9a 	bl	8007f60 <USB_CoreInit>
 800482c:	4603      	mov	r3, r0
 800482e:	2b00      	cmp	r3, #0
 8004830:	d005      	beq.n	800483e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2202      	movs	r2, #2
 8004836:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	e0d0      	b.n	80049e0 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	2100      	movs	r1, #0
 8004844:	4618      	mov	r0, r3
 8004846:	f003 fcb1 	bl	80081ac <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800484a:	2300      	movs	r3, #0
 800484c:	73fb      	strb	r3, [r7, #15]
 800484e:	e04a      	b.n	80048e6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004850:	7bfa      	ldrb	r2, [r7, #15]
 8004852:	6879      	ldr	r1, [r7, #4]
 8004854:	4613      	mov	r3, r2
 8004856:	00db      	lsls	r3, r3, #3
 8004858:	4413      	add	r3, r2
 800485a:	009b      	lsls	r3, r3, #2
 800485c:	440b      	add	r3, r1
 800485e:	333d      	adds	r3, #61	; 0x3d
 8004860:	2201      	movs	r2, #1
 8004862:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004864:	7bfa      	ldrb	r2, [r7, #15]
 8004866:	6879      	ldr	r1, [r7, #4]
 8004868:	4613      	mov	r3, r2
 800486a:	00db      	lsls	r3, r3, #3
 800486c:	4413      	add	r3, r2
 800486e:	009b      	lsls	r3, r3, #2
 8004870:	440b      	add	r3, r1
 8004872:	333c      	adds	r3, #60	; 0x3c
 8004874:	7bfa      	ldrb	r2, [r7, #15]
 8004876:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004878:	7bfa      	ldrb	r2, [r7, #15]
 800487a:	7bfb      	ldrb	r3, [r7, #15]
 800487c:	b298      	uxth	r0, r3
 800487e:	6879      	ldr	r1, [r7, #4]
 8004880:	4613      	mov	r3, r2
 8004882:	00db      	lsls	r3, r3, #3
 8004884:	4413      	add	r3, r2
 8004886:	009b      	lsls	r3, r3, #2
 8004888:	440b      	add	r3, r1
 800488a:	3344      	adds	r3, #68	; 0x44
 800488c:	4602      	mov	r2, r0
 800488e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004890:	7bfa      	ldrb	r2, [r7, #15]
 8004892:	6879      	ldr	r1, [r7, #4]
 8004894:	4613      	mov	r3, r2
 8004896:	00db      	lsls	r3, r3, #3
 8004898:	4413      	add	r3, r2
 800489a:	009b      	lsls	r3, r3, #2
 800489c:	440b      	add	r3, r1
 800489e:	3340      	adds	r3, #64	; 0x40
 80048a0:	2200      	movs	r2, #0
 80048a2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80048a4:	7bfa      	ldrb	r2, [r7, #15]
 80048a6:	6879      	ldr	r1, [r7, #4]
 80048a8:	4613      	mov	r3, r2
 80048aa:	00db      	lsls	r3, r3, #3
 80048ac:	4413      	add	r3, r2
 80048ae:	009b      	lsls	r3, r3, #2
 80048b0:	440b      	add	r3, r1
 80048b2:	3348      	adds	r3, #72	; 0x48
 80048b4:	2200      	movs	r2, #0
 80048b6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80048b8:	7bfa      	ldrb	r2, [r7, #15]
 80048ba:	6879      	ldr	r1, [r7, #4]
 80048bc:	4613      	mov	r3, r2
 80048be:	00db      	lsls	r3, r3, #3
 80048c0:	4413      	add	r3, r2
 80048c2:	009b      	lsls	r3, r3, #2
 80048c4:	440b      	add	r3, r1
 80048c6:	334c      	adds	r3, #76	; 0x4c
 80048c8:	2200      	movs	r2, #0
 80048ca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80048cc:	7bfa      	ldrb	r2, [r7, #15]
 80048ce:	6879      	ldr	r1, [r7, #4]
 80048d0:	4613      	mov	r3, r2
 80048d2:	00db      	lsls	r3, r3, #3
 80048d4:	4413      	add	r3, r2
 80048d6:	009b      	lsls	r3, r3, #2
 80048d8:	440b      	add	r3, r1
 80048da:	3354      	adds	r3, #84	; 0x54
 80048dc:	2200      	movs	r2, #0
 80048de:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80048e0:	7bfb      	ldrb	r3, [r7, #15]
 80048e2:	3301      	adds	r3, #1
 80048e4:	73fb      	strb	r3, [r7, #15]
 80048e6:	7bfa      	ldrb	r2, [r7, #15]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	429a      	cmp	r2, r3
 80048ee:	d3af      	bcc.n	8004850 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80048f0:	2300      	movs	r3, #0
 80048f2:	73fb      	strb	r3, [r7, #15]
 80048f4:	e044      	b.n	8004980 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80048f6:	7bfa      	ldrb	r2, [r7, #15]
 80048f8:	6879      	ldr	r1, [r7, #4]
 80048fa:	4613      	mov	r3, r2
 80048fc:	00db      	lsls	r3, r3, #3
 80048fe:	4413      	add	r3, r2
 8004900:	009b      	lsls	r3, r3, #2
 8004902:	440b      	add	r3, r1
 8004904:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8004908:	2200      	movs	r2, #0
 800490a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800490c:	7bfa      	ldrb	r2, [r7, #15]
 800490e:	6879      	ldr	r1, [r7, #4]
 8004910:	4613      	mov	r3, r2
 8004912:	00db      	lsls	r3, r3, #3
 8004914:	4413      	add	r3, r2
 8004916:	009b      	lsls	r3, r3, #2
 8004918:	440b      	add	r3, r1
 800491a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800491e:	7bfa      	ldrb	r2, [r7, #15]
 8004920:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004922:	7bfa      	ldrb	r2, [r7, #15]
 8004924:	6879      	ldr	r1, [r7, #4]
 8004926:	4613      	mov	r3, r2
 8004928:	00db      	lsls	r3, r3, #3
 800492a:	4413      	add	r3, r2
 800492c:	009b      	lsls	r3, r3, #2
 800492e:	440b      	add	r3, r1
 8004930:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004934:	2200      	movs	r2, #0
 8004936:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004938:	7bfa      	ldrb	r2, [r7, #15]
 800493a:	6879      	ldr	r1, [r7, #4]
 800493c:	4613      	mov	r3, r2
 800493e:	00db      	lsls	r3, r3, #3
 8004940:	4413      	add	r3, r2
 8004942:	009b      	lsls	r3, r3, #2
 8004944:	440b      	add	r3, r1
 8004946:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800494a:	2200      	movs	r2, #0
 800494c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800494e:	7bfa      	ldrb	r2, [r7, #15]
 8004950:	6879      	ldr	r1, [r7, #4]
 8004952:	4613      	mov	r3, r2
 8004954:	00db      	lsls	r3, r3, #3
 8004956:	4413      	add	r3, r2
 8004958:	009b      	lsls	r3, r3, #2
 800495a:	440b      	add	r3, r1
 800495c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004960:	2200      	movs	r2, #0
 8004962:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004964:	7bfa      	ldrb	r2, [r7, #15]
 8004966:	6879      	ldr	r1, [r7, #4]
 8004968:	4613      	mov	r3, r2
 800496a:	00db      	lsls	r3, r3, #3
 800496c:	4413      	add	r3, r2
 800496e:	009b      	lsls	r3, r3, #2
 8004970:	440b      	add	r3, r1
 8004972:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004976:	2200      	movs	r2, #0
 8004978:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800497a:	7bfb      	ldrb	r3, [r7, #15]
 800497c:	3301      	adds	r3, #1
 800497e:	73fb      	strb	r3, [r7, #15]
 8004980:	7bfa      	ldrb	r2, [r7, #15]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	429a      	cmp	r2, r3
 8004988:	d3b5      	bcc.n	80048f6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	603b      	str	r3, [r7, #0]
 8004990:	687e      	ldr	r6, [r7, #4]
 8004992:	466d      	mov	r5, sp
 8004994:	f106 0410 	add.w	r4, r6, #16
 8004998:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800499a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800499c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800499e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80049a0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80049a4:	e885 0003 	stmia.w	r5, {r0, r1}
 80049a8:	1d33      	adds	r3, r6, #4
 80049aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80049ac:	6838      	ldr	r0, [r7, #0]
 80049ae:	f003 fc49 	bl	8008244 <USB_DevInit>
 80049b2:	4603      	mov	r3, r0
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d005      	beq.n	80049c4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2202      	movs	r2, #2
 80049bc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80049c0:	2301      	movs	r3, #1
 80049c2:	e00d      	b.n	80049e0 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2200      	movs	r2, #0
 80049c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2201      	movs	r2, #1
 80049d0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4618      	mov	r0, r3
 80049da:	f004 fd98 	bl	800950e <USB_DevDisconnect>

  return HAL_OK;
 80049de:	2300      	movs	r3, #0
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	3714      	adds	r7, #20
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080049e8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b084      	sub	sp, #16
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80049fc:	2b01      	cmp	r3, #1
 80049fe:	d101      	bne.n	8004a04 <HAL_PCD_Start+0x1c>
 8004a00:	2302      	movs	r3, #2
 8004a02:	e020      	b.n	8004a46 <HAL_PCD_Start+0x5e>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2201      	movs	r2, #1
 8004a08:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	d109      	bne.n	8004a28 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d005      	beq.n	8004a28 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a20:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	f003 fb9b 	bl	8008168 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4618      	mov	r0, r3
 8004a38:	f004 fd48 	bl	80094cc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004a44:	2300      	movs	r3, #0
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	3710      	adds	r7, #16
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}

08004a4e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004a4e:	b590      	push	{r4, r7, lr}
 8004a50:	b08d      	sub	sp, #52	; 0x34
 8004a52:	af00      	add	r7, sp, #0
 8004a54:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a5c:	6a3b      	ldr	r3, [r7, #32]
 8004a5e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4618      	mov	r0, r3
 8004a66:	f004 fe06 	bl	8009676 <USB_GetMode>
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	f040 848a 	bne.w	8005386 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4618      	mov	r0, r3
 8004a78:	f004 fd6a 	bl	8009550 <USB_ReadInterrupts>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	f000 8480 	beq.w	8005384 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004a84:	69fb      	ldr	r3, [r7, #28]
 8004a86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	0a1b      	lsrs	r3, r3, #8
 8004a8e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	f004 fd57 	bl	8009550 <USB_ReadInterrupts>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	f003 0302 	and.w	r3, r3, #2
 8004aa8:	2b02      	cmp	r3, #2
 8004aaa:	d107      	bne.n	8004abc <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	695a      	ldr	r2, [r3, #20]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f002 0202 	and.w	r2, r2, #2
 8004aba:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	f004 fd45 	bl	8009550 <USB_ReadInterrupts>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	f003 0310 	and.w	r3, r3, #16
 8004acc:	2b10      	cmp	r3, #16
 8004ace:	d161      	bne.n	8004b94 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	699a      	ldr	r2, [r3, #24]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f022 0210 	bic.w	r2, r2, #16
 8004ade:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004ae0:	6a3b      	ldr	r3, [r7, #32]
 8004ae2:	6a1b      	ldr	r3, [r3, #32]
 8004ae4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8004ae6:	69bb      	ldr	r3, [r7, #24]
 8004ae8:	f003 020f 	and.w	r2, r3, #15
 8004aec:	4613      	mov	r3, r2
 8004aee:	00db      	lsls	r3, r3, #3
 8004af0:	4413      	add	r3, r2
 8004af2:	009b      	lsls	r3, r3, #2
 8004af4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004af8:	687a      	ldr	r2, [r7, #4]
 8004afa:	4413      	add	r3, r2
 8004afc:	3304      	adds	r3, #4
 8004afe:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004b00:	69bb      	ldr	r3, [r7, #24]
 8004b02:	0c5b      	lsrs	r3, r3, #17
 8004b04:	f003 030f 	and.w	r3, r3, #15
 8004b08:	2b02      	cmp	r3, #2
 8004b0a:	d124      	bne.n	8004b56 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004b0c:	69ba      	ldr	r2, [r7, #24]
 8004b0e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8004b12:	4013      	ands	r3, r2
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d035      	beq.n	8004b84 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004b1c:	69bb      	ldr	r3, [r7, #24]
 8004b1e:	091b      	lsrs	r3, r3, #4
 8004b20:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004b22:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004b26:	b29b      	uxth	r3, r3
 8004b28:	461a      	mov	r2, r3
 8004b2a:	6a38      	ldr	r0, [r7, #32]
 8004b2c:	f004 fb7c 	bl	8009228 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	691a      	ldr	r2, [r3, #16]
 8004b34:	69bb      	ldr	r3, [r7, #24]
 8004b36:	091b      	lsrs	r3, r3, #4
 8004b38:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004b3c:	441a      	add	r2, r3
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	6a1a      	ldr	r2, [r3, #32]
 8004b46:	69bb      	ldr	r3, [r7, #24]
 8004b48:	091b      	lsrs	r3, r3, #4
 8004b4a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004b4e:	441a      	add	r2, r3
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	621a      	str	r2, [r3, #32]
 8004b54:	e016      	b.n	8004b84 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8004b56:	69bb      	ldr	r3, [r7, #24]
 8004b58:	0c5b      	lsrs	r3, r3, #17
 8004b5a:	f003 030f 	and.w	r3, r3, #15
 8004b5e:	2b06      	cmp	r3, #6
 8004b60:	d110      	bne.n	8004b84 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004b68:	2208      	movs	r2, #8
 8004b6a:	4619      	mov	r1, r3
 8004b6c:	6a38      	ldr	r0, [r7, #32]
 8004b6e:	f004 fb5b 	bl	8009228 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	6a1a      	ldr	r2, [r3, #32]
 8004b76:	69bb      	ldr	r3, [r7, #24]
 8004b78:	091b      	lsrs	r3, r3, #4
 8004b7a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004b7e:	441a      	add	r2, r3
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	699a      	ldr	r2, [r3, #24]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f042 0210 	orr.w	r2, r2, #16
 8004b92:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4618      	mov	r0, r3
 8004b9a:	f004 fcd9 	bl	8009550 <USB_ReadInterrupts>
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ba4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004ba8:	f040 80a7 	bne.w	8004cfa <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004bac:	2300      	movs	r3, #0
 8004bae:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	f004 fcde 	bl	8009576 <USB_ReadDevAllOutEpInterrupt>
 8004bba:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004bbc:	e099      	b.n	8004cf2 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bc0:	f003 0301 	and.w	r3, r3, #1
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	f000 808e 	beq.w	8004ce6 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bd0:	b2d2      	uxtb	r2, r2
 8004bd2:	4611      	mov	r1, r2
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	f004 fd02 	bl	80095de <USB_ReadDevOutEPInterrupt>
 8004bda:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004bdc:	693b      	ldr	r3, [r7, #16]
 8004bde:	f003 0301 	and.w	r3, r3, #1
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d00c      	beq.n	8004c00 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be8:	015a      	lsls	r2, r3, #5
 8004bea:	69fb      	ldr	r3, [r7, #28]
 8004bec:	4413      	add	r3, r2
 8004bee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bf2:	461a      	mov	r2, r3
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004bf8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f000 feaa 	bl	8005954 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	f003 0308 	and.w	r3, r3, #8
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d00c      	beq.n	8004c24 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c0c:	015a      	lsls	r2, r3, #5
 8004c0e:	69fb      	ldr	r3, [r7, #28]
 8004c10:	4413      	add	r3, r2
 8004c12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c16:	461a      	mov	r2, r3
 8004c18:	2308      	movs	r3, #8
 8004c1a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004c1c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f000 ff80 	bl	8005b24 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004c24:	693b      	ldr	r3, [r7, #16]
 8004c26:	f003 0310 	and.w	r3, r3, #16
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d008      	beq.n	8004c40 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c30:	015a      	lsls	r2, r3, #5
 8004c32:	69fb      	ldr	r3, [r7, #28]
 8004c34:	4413      	add	r3, r2
 8004c36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c3a:	461a      	mov	r2, r3
 8004c3c:	2310      	movs	r3, #16
 8004c3e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	f003 0302 	and.w	r3, r3, #2
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d030      	beq.n	8004cac <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8004c4a:	6a3b      	ldr	r3, [r7, #32]
 8004c4c:	695b      	ldr	r3, [r3, #20]
 8004c4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c52:	2b80      	cmp	r3, #128	; 0x80
 8004c54:	d109      	bne.n	8004c6a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8004c56:	69fb      	ldr	r3, [r7, #28]
 8004c58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	69fa      	ldr	r2, [r7, #28]
 8004c60:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c64:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004c68:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8004c6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c6c:	4613      	mov	r3, r2
 8004c6e:	00db      	lsls	r3, r3, #3
 8004c70:	4413      	add	r3, r2
 8004c72:	009b      	lsls	r3, r3, #2
 8004c74:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004c78:	687a      	ldr	r2, [r7, #4]
 8004c7a:	4413      	add	r3, r2
 8004c7c:	3304      	adds	r3, #4
 8004c7e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	78db      	ldrb	r3, [r3, #3]
 8004c84:	2b01      	cmp	r3, #1
 8004c86:	d108      	bne.n	8004c9a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c90:	b2db      	uxtb	r3, r3
 8004c92:	4619      	mov	r1, r3
 8004c94:	6878      	ldr	r0, [r7, #4]
 8004c96:	f006 fe9b 	bl	800b9d0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c9c:	015a      	lsls	r2, r3, #5
 8004c9e:	69fb      	ldr	r3, [r7, #28]
 8004ca0:	4413      	add	r3, r2
 8004ca2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ca6:	461a      	mov	r2, r3
 8004ca8:	2302      	movs	r3, #2
 8004caa:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	f003 0320 	and.w	r3, r3, #32
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d008      	beq.n	8004cc8 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb8:	015a      	lsls	r2, r3, #5
 8004cba:	69fb      	ldr	r3, [r7, #28]
 8004cbc:	4413      	add	r3, r2
 8004cbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cc2:	461a      	mov	r2, r3
 8004cc4:	2320      	movs	r3, #32
 8004cc6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d009      	beq.n	8004ce6 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd4:	015a      	lsls	r2, r3, #5
 8004cd6:	69fb      	ldr	r3, [r7, #28]
 8004cd8:	4413      	add	r3, r2
 8004cda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cde:	461a      	mov	r2, r3
 8004ce0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004ce4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce8:	3301      	adds	r3, #1
 8004cea:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cee:	085b      	lsrs	r3, r3, #1
 8004cf0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	f47f af62 	bne.w	8004bbe <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4618      	mov	r0, r3
 8004d00:	f004 fc26 	bl	8009550 <USB_ReadInterrupts>
 8004d04:	4603      	mov	r3, r0
 8004d06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d0a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004d0e:	f040 80db 	bne.w	8004ec8 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4618      	mov	r0, r3
 8004d18:	f004 fc47 	bl	80095aa <USB_ReadDevAllInEpInterrupt>
 8004d1c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8004d22:	e0cd      	b.n	8004ec0 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d26:	f003 0301 	and.w	r3, r3, #1
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	f000 80c2 	beq.w	8004eb4 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d36:	b2d2      	uxtb	r2, r2
 8004d38:	4611      	mov	r1, r2
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f004 fc6d 	bl	800961a <USB_ReadDevInEPInterrupt>
 8004d40:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	f003 0301 	and.w	r3, r3, #1
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d057      	beq.n	8004dfc <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d4e:	f003 030f 	and.w	r3, r3, #15
 8004d52:	2201      	movs	r2, #1
 8004d54:	fa02 f303 	lsl.w	r3, r2, r3
 8004d58:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004d5a:	69fb      	ldr	r3, [r7, #28]
 8004d5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	43db      	mvns	r3, r3
 8004d66:	69f9      	ldr	r1, [r7, #28]
 8004d68:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d6c:	4013      	ands	r3, r2
 8004d6e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d72:	015a      	lsls	r2, r3, #5
 8004d74:	69fb      	ldr	r3, [r7, #28]
 8004d76:	4413      	add	r3, r2
 8004d78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d7c:	461a      	mov	r2, r3
 8004d7e:	2301      	movs	r3, #1
 8004d80:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	691b      	ldr	r3, [r3, #16]
 8004d86:	2b01      	cmp	r3, #1
 8004d88:	d132      	bne.n	8004df0 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004d8a:	6879      	ldr	r1, [r7, #4]
 8004d8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d8e:	4613      	mov	r3, r2
 8004d90:	00db      	lsls	r3, r3, #3
 8004d92:	4413      	add	r3, r2
 8004d94:	009b      	lsls	r3, r3, #2
 8004d96:	440b      	add	r3, r1
 8004d98:	334c      	adds	r3, #76	; 0x4c
 8004d9a:	6819      	ldr	r1, [r3, #0]
 8004d9c:	6878      	ldr	r0, [r7, #4]
 8004d9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004da0:	4613      	mov	r3, r2
 8004da2:	00db      	lsls	r3, r3, #3
 8004da4:	4413      	add	r3, r2
 8004da6:	009b      	lsls	r3, r3, #2
 8004da8:	4403      	add	r3, r0
 8004daa:	3348      	adds	r3, #72	; 0x48
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4419      	add	r1, r3
 8004db0:	6878      	ldr	r0, [r7, #4]
 8004db2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004db4:	4613      	mov	r3, r2
 8004db6:	00db      	lsls	r3, r3, #3
 8004db8:	4413      	add	r3, r2
 8004dba:	009b      	lsls	r3, r3, #2
 8004dbc:	4403      	add	r3, r0
 8004dbe:	334c      	adds	r3, #76	; 0x4c
 8004dc0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d113      	bne.n	8004df0 <HAL_PCD_IRQHandler+0x3a2>
 8004dc8:	6879      	ldr	r1, [r7, #4]
 8004dca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dcc:	4613      	mov	r3, r2
 8004dce:	00db      	lsls	r3, r3, #3
 8004dd0:	4413      	add	r3, r2
 8004dd2:	009b      	lsls	r3, r3, #2
 8004dd4:	440b      	add	r3, r1
 8004dd6:	3354      	adds	r3, #84	; 0x54
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d108      	bne.n	8004df0 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6818      	ldr	r0, [r3, #0]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004de8:	461a      	mov	r2, r3
 8004dea:	2101      	movs	r1, #1
 8004dec:	f004 fc74 	bl	80096d8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df2:	b2db      	uxtb	r3, r3
 8004df4:	4619      	mov	r1, r3
 8004df6:	6878      	ldr	r0, [r7, #4]
 8004df8:	f006 fd6f 	bl	800b8da <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	f003 0308 	and.w	r3, r3, #8
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d008      	beq.n	8004e18 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e08:	015a      	lsls	r2, r3, #5
 8004e0a:	69fb      	ldr	r3, [r7, #28]
 8004e0c:	4413      	add	r3, r2
 8004e0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e12:	461a      	mov	r2, r3
 8004e14:	2308      	movs	r3, #8
 8004e16:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	f003 0310 	and.w	r3, r3, #16
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d008      	beq.n	8004e34 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e24:	015a      	lsls	r2, r3, #5
 8004e26:	69fb      	ldr	r3, [r7, #28]
 8004e28:	4413      	add	r3, r2
 8004e2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e2e:	461a      	mov	r2, r3
 8004e30:	2310      	movs	r3, #16
 8004e32:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d008      	beq.n	8004e50 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e40:	015a      	lsls	r2, r3, #5
 8004e42:	69fb      	ldr	r3, [r7, #28]
 8004e44:	4413      	add	r3, r2
 8004e46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e4a:	461a      	mov	r2, r3
 8004e4c:	2340      	movs	r3, #64	; 0x40
 8004e4e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	f003 0302 	and.w	r3, r3, #2
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d023      	beq.n	8004ea2 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004e5a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004e5c:	6a38      	ldr	r0, [r7, #32]
 8004e5e:	f003 fb55 	bl	800850c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004e62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e64:	4613      	mov	r3, r2
 8004e66:	00db      	lsls	r3, r3, #3
 8004e68:	4413      	add	r3, r2
 8004e6a:	009b      	lsls	r3, r3, #2
 8004e6c:	3338      	adds	r3, #56	; 0x38
 8004e6e:	687a      	ldr	r2, [r7, #4]
 8004e70:	4413      	add	r3, r2
 8004e72:	3304      	adds	r3, #4
 8004e74:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	78db      	ldrb	r3, [r3, #3]
 8004e7a:	2b01      	cmp	r3, #1
 8004e7c:	d108      	bne.n	8004e90 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	2200      	movs	r2, #0
 8004e82:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e86:	b2db      	uxtb	r3, r3
 8004e88:	4619      	mov	r1, r3
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	f006 fdb2 	bl	800b9f4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e92:	015a      	lsls	r2, r3, #5
 8004e94:	69fb      	ldr	r3, [r7, #28]
 8004e96:	4413      	add	r3, r2
 8004e98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e9c:	461a      	mov	r2, r3
 8004e9e:	2302      	movs	r3, #2
 8004ea0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d003      	beq.n	8004eb4 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004eac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f000 fcc3 	bl	800583a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb6:	3301      	adds	r3, #1
 8004eb8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ebc:	085b      	lsrs	r3, r3, #1
 8004ebe:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	f47f af2e 	bne.w	8004d24 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4618      	mov	r0, r3
 8004ece:	f004 fb3f 	bl	8009550 <USB_ReadInterrupts>
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ed8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004edc:	d122      	bne.n	8004f24 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004ede:	69fb      	ldr	r3, [r7, #28]
 8004ee0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	69fa      	ldr	r2, [r7, #28]
 8004ee8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004eec:	f023 0301 	bic.w	r3, r3, #1
 8004ef0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8004ef8:	2b01      	cmp	r3, #1
 8004efa:	d108      	bne.n	8004f0e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2200      	movs	r2, #0
 8004f00:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004f04:	2100      	movs	r1, #0
 8004f06:	6878      	ldr	r0, [r7, #4]
 8004f08:	f000 feaa 	bl	8005c60 <HAL_PCDEx_LPM_Callback>
 8004f0c:	e002      	b.n	8004f14 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f006 fd50 	bl	800b9b4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	695a      	ldr	r2, [r3, #20]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004f22:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4618      	mov	r0, r3
 8004f2a:	f004 fb11 	bl	8009550 <USB_ReadInterrupts>
 8004f2e:	4603      	mov	r3, r0
 8004f30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f38:	d112      	bne.n	8004f60 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004f3a:	69fb      	ldr	r3, [r7, #28]
 8004f3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	f003 0301 	and.w	r3, r3, #1
 8004f46:	2b01      	cmp	r3, #1
 8004f48:	d102      	bne.n	8004f50 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	f006 fd0c 	bl	800b968 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	695a      	ldr	r2, [r3, #20]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004f5e:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4618      	mov	r0, r3
 8004f66:	f004 faf3 	bl	8009550 <USB_ReadInterrupts>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f74:	f040 80b7 	bne.w	80050e6 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004f78:	69fb      	ldr	r3, [r7, #28]
 8004f7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	69fa      	ldr	r2, [r7, #28]
 8004f82:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f86:	f023 0301 	bic.w	r3, r3, #1
 8004f8a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	2110      	movs	r1, #16
 8004f92:	4618      	mov	r0, r3
 8004f94:	f003 faba 	bl	800850c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f98:	2300      	movs	r3, #0
 8004f9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f9c:	e046      	b.n	800502c <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004f9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fa0:	015a      	lsls	r2, r3, #5
 8004fa2:	69fb      	ldr	r3, [r7, #28]
 8004fa4:	4413      	add	r3, r2
 8004fa6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004faa:	461a      	mov	r2, r3
 8004fac:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004fb0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004fb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fb4:	015a      	lsls	r2, r3, #5
 8004fb6:	69fb      	ldr	r3, [r7, #28]
 8004fb8:	4413      	add	r3, r2
 8004fba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004fc2:	0151      	lsls	r1, r2, #5
 8004fc4:	69fa      	ldr	r2, [r7, #28]
 8004fc6:	440a      	add	r2, r1
 8004fc8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fcc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004fd0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fd4:	015a      	lsls	r2, r3, #5
 8004fd6:	69fb      	ldr	r3, [r7, #28]
 8004fd8:	4413      	add	r3, r2
 8004fda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fde:	461a      	mov	r2, r3
 8004fe0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004fe4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fe8:	015a      	lsls	r2, r3, #5
 8004fea:	69fb      	ldr	r3, [r7, #28]
 8004fec:	4413      	add	r3, r2
 8004fee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ff6:	0151      	lsls	r1, r2, #5
 8004ff8:	69fa      	ldr	r2, [r7, #28]
 8004ffa:	440a      	add	r2, r1
 8004ffc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005000:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005004:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005008:	015a      	lsls	r2, r3, #5
 800500a:	69fb      	ldr	r3, [r7, #28]
 800500c:	4413      	add	r3, r2
 800500e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005016:	0151      	lsls	r1, r2, #5
 8005018:	69fa      	ldr	r2, [r7, #28]
 800501a:	440a      	add	r2, r1
 800501c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005020:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005024:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005028:	3301      	adds	r3, #1
 800502a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005032:	429a      	cmp	r2, r3
 8005034:	d3b3      	bcc.n	8004f9e <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005036:	69fb      	ldr	r3, [r7, #28]
 8005038:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800503c:	69db      	ldr	r3, [r3, #28]
 800503e:	69fa      	ldr	r2, [r7, #28]
 8005040:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005044:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8005048:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800504e:	2b00      	cmp	r3, #0
 8005050:	d016      	beq.n	8005080 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005052:	69fb      	ldr	r3, [r7, #28]
 8005054:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005058:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800505c:	69fa      	ldr	r2, [r7, #28]
 800505e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005062:	f043 030b 	orr.w	r3, r3, #11
 8005066:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800506a:	69fb      	ldr	r3, [r7, #28]
 800506c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005072:	69fa      	ldr	r2, [r7, #28]
 8005074:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005078:	f043 030b 	orr.w	r3, r3, #11
 800507c:	6453      	str	r3, [r2, #68]	; 0x44
 800507e:	e015      	b.n	80050ac <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005080:	69fb      	ldr	r3, [r7, #28]
 8005082:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005086:	695b      	ldr	r3, [r3, #20]
 8005088:	69fa      	ldr	r2, [r7, #28]
 800508a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800508e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005092:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8005096:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005098:	69fb      	ldr	r3, [r7, #28]
 800509a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800509e:	691b      	ldr	r3, [r3, #16]
 80050a0:	69fa      	ldr	r2, [r7, #28]
 80050a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80050a6:	f043 030b 	orr.w	r3, r3, #11
 80050aa:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80050ac:	69fb      	ldr	r3, [r7, #28]
 80050ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	69fa      	ldr	r2, [r7, #28]
 80050b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80050ba:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80050be:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6818      	ldr	r0, [r3, #0]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	691b      	ldr	r3, [r3, #16]
 80050c8:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80050d0:	461a      	mov	r2, r3
 80050d2:	f004 fb01 	bl	80096d8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	695a      	ldr	r2, [r3, #20]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80050e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4618      	mov	r0, r3
 80050ec:	f004 fa30 	bl	8009550 <USB_ReadInterrupts>
 80050f0:	4603      	mov	r3, r0
 80050f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80050f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050fa:	d124      	bne.n	8005146 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4618      	mov	r0, r3
 8005102:	f004 fac6 	bl	8009692 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4618      	mov	r0, r3
 800510c:	f003 fa7b 	bl	8008606 <USB_GetDevSpeed>
 8005110:	4603      	mov	r3, r0
 8005112:	461a      	mov	r2, r3
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681c      	ldr	r4, [r3, #0]
 800511c:	f001 f9d0 	bl	80064c0 <HAL_RCC_GetHCLKFreq>
 8005120:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005126:	b2db      	uxtb	r3, r3
 8005128:	461a      	mov	r2, r3
 800512a:	4620      	mov	r0, r4
 800512c:	f002 ff7a 	bl	8008024 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005130:	6878      	ldr	r0, [r7, #4]
 8005132:	f006 fbfa 	bl	800b92a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	695a      	ldr	r2, [r3, #20]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005144:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4618      	mov	r0, r3
 800514c:	f004 fa00 	bl	8009550 <USB_ReadInterrupts>
 8005150:	4603      	mov	r3, r0
 8005152:	f003 0308 	and.w	r3, r3, #8
 8005156:	2b08      	cmp	r3, #8
 8005158:	d10a      	bne.n	8005170 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f006 fbd7 	bl	800b90e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	695a      	ldr	r2, [r3, #20]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f002 0208 	and.w	r2, r2, #8
 800516e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4618      	mov	r0, r3
 8005176:	f004 f9eb 	bl	8009550 <USB_ReadInterrupts>
 800517a:	4603      	mov	r3, r0
 800517c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005180:	2b80      	cmp	r3, #128	; 0x80
 8005182:	d122      	bne.n	80051ca <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8005184:	6a3b      	ldr	r3, [r7, #32]
 8005186:	699b      	ldr	r3, [r3, #24]
 8005188:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800518c:	6a3b      	ldr	r3, [r7, #32]
 800518e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005190:	2301      	movs	r3, #1
 8005192:	627b      	str	r3, [r7, #36]	; 0x24
 8005194:	e014      	b.n	80051c0 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8005196:	6879      	ldr	r1, [r7, #4]
 8005198:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800519a:	4613      	mov	r3, r2
 800519c:	00db      	lsls	r3, r3, #3
 800519e:	4413      	add	r3, r2
 80051a0:	009b      	lsls	r3, r3, #2
 80051a2:	440b      	add	r3, r1
 80051a4:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80051a8:	781b      	ldrb	r3, [r3, #0]
 80051aa:	2b01      	cmp	r3, #1
 80051ac:	d105      	bne.n	80051ba <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80051ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b0:	b2db      	uxtb	r3, r3
 80051b2:	4619      	mov	r1, r3
 80051b4:	6878      	ldr	r0, [r7, #4]
 80051b6:	f000 fb0f 	bl	80057d8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80051ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051bc:	3301      	adds	r3, #1
 80051be:	627b      	str	r3, [r7, #36]	; 0x24
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051c6:	429a      	cmp	r2, r3
 80051c8:	d3e5      	bcc.n	8005196 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4618      	mov	r0, r3
 80051d0:	f004 f9be 	bl	8009550 <USB_ReadInterrupts>
 80051d4:	4603      	mov	r3, r0
 80051d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80051da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051de:	d13b      	bne.n	8005258 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80051e0:	2301      	movs	r3, #1
 80051e2:	627b      	str	r3, [r7, #36]	; 0x24
 80051e4:	e02b      	b.n	800523e <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80051e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e8:	015a      	lsls	r2, r3, #5
 80051ea:	69fb      	ldr	r3, [r7, #28]
 80051ec:	4413      	add	r3, r2
 80051ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80051f6:	6879      	ldr	r1, [r7, #4]
 80051f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051fa:	4613      	mov	r3, r2
 80051fc:	00db      	lsls	r3, r3, #3
 80051fe:	4413      	add	r3, r2
 8005200:	009b      	lsls	r3, r3, #2
 8005202:	440b      	add	r3, r1
 8005204:	3340      	adds	r3, #64	; 0x40
 8005206:	781b      	ldrb	r3, [r3, #0]
 8005208:	2b01      	cmp	r3, #1
 800520a:	d115      	bne.n	8005238 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800520c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800520e:	2b00      	cmp	r3, #0
 8005210:	da12      	bge.n	8005238 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005212:	6879      	ldr	r1, [r7, #4]
 8005214:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005216:	4613      	mov	r3, r2
 8005218:	00db      	lsls	r3, r3, #3
 800521a:	4413      	add	r3, r2
 800521c:	009b      	lsls	r3, r3, #2
 800521e:	440b      	add	r3, r1
 8005220:	333f      	adds	r3, #63	; 0x3f
 8005222:	2201      	movs	r2, #1
 8005224:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8005226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005228:	b2db      	uxtb	r3, r3
 800522a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800522e:	b2db      	uxtb	r3, r3
 8005230:	4619      	mov	r1, r3
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f000 fad0 	bl	80057d8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800523a:	3301      	adds	r3, #1
 800523c:	627b      	str	r3, [r7, #36]	; 0x24
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005244:	429a      	cmp	r2, r3
 8005246:	d3ce      	bcc.n	80051e6 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	695a      	ldr	r2, [r3, #20]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8005256:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4618      	mov	r0, r3
 800525e:	f004 f977 	bl	8009550 <USB_ReadInterrupts>
 8005262:	4603      	mov	r3, r0
 8005264:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005268:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800526c:	d155      	bne.n	800531a <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800526e:	2301      	movs	r3, #1
 8005270:	627b      	str	r3, [r7, #36]	; 0x24
 8005272:	e045      	b.n	8005300 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8005274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005276:	015a      	lsls	r2, r3, #5
 8005278:	69fb      	ldr	r3, [r7, #28]
 800527a:	4413      	add	r3, r2
 800527c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005284:	6879      	ldr	r1, [r7, #4]
 8005286:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005288:	4613      	mov	r3, r2
 800528a:	00db      	lsls	r3, r3, #3
 800528c:	4413      	add	r3, r2
 800528e:	009b      	lsls	r3, r3, #2
 8005290:	440b      	add	r3, r1
 8005292:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005296:	781b      	ldrb	r3, [r3, #0]
 8005298:	2b01      	cmp	r3, #1
 800529a:	d12e      	bne.n	80052fa <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800529c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800529e:	2b00      	cmp	r3, #0
 80052a0:	da2b      	bge.n	80052fa <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80052a2:	69bb      	ldr	r3, [r7, #24]
 80052a4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80052ae:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80052b2:	429a      	cmp	r2, r3
 80052b4:	d121      	bne.n	80052fa <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80052b6:	6879      	ldr	r1, [r7, #4]
 80052b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052ba:	4613      	mov	r3, r2
 80052bc:	00db      	lsls	r3, r3, #3
 80052be:	4413      	add	r3, r2
 80052c0:	009b      	lsls	r3, r3, #2
 80052c2:	440b      	add	r3, r1
 80052c4:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80052c8:	2201      	movs	r2, #1
 80052ca:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80052cc:	6a3b      	ldr	r3, [r7, #32]
 80052ce:	699b      	ldr	r3, [r3, #24]
 80052d0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80052d4:	6a3b      	ldr	r3, [r7, #32]
 80052d6:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80052d8:	6a3b      	ldr	r3, [r7, #32]
 80052da:	695b      	ldr	r3, [r3, #20]
 80052dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d10a      	bne.n	80052fa <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80052e4:	69fb      	ldr	r3, [r7, #28]
 80052e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	69fa      	ldr	r2, [r7, #28]
 80052ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80052f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80052f6:	6053      	str	r3, [r2, #4]
            break;
 80052f8:	e007      	b.n	800530a <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80052fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052fc:	3301      	adds	r3, #1
 80052fe:	627b      	str	r3, [r7, #36]	; 0x24
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005306:	429a      	cmp	r2, r3
 8005308:	d3b4      	bcc.n	8005274 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	695a      	ldr	r2, [r3, #20]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8005318:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4618      	mov	r0, r3
 8005320:	f004 f916 	bl	8009550 <USB_ReadInterrupts>
 8005324:	4603      	mov	r3, r0
 8005326:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800532a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800532e:	d10a      	bne.n	8005346 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005330:	6878      	ldr	r0, [r7, #4]
 8005332:	f006 fb71 	bl	800ba18 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	695a      	ldr	r2, [r3, #20]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005344:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4618      	mov	r0, r3
 800534c:	f004 f900 	bl	8009550 <USB_ReadInterrupts>
 8005350:	4603      	mov	r3, r0
 8005352:	f003 0304 	and.w	r3, r3, #4
 8005356:	2b04      	cmp	r3, #4
 8005358:	d115      	bne.n	8005386 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005362:	69bb      	ldr	r3, [r7, #24]
 8005364:	f003 0304 	and.w	r3, r3, #4
 8005368:	2b00      	cmp	r3, #0
 800536a:	d002      	beq.n	8005372 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800536c:	6878      	ldr	r0, [r7, #4]
 800536e:	f006 fb61 	bl	800ba34 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	6859      	ldr	r1, [r3, #4]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	69ba      	ldr	r2, [r7, #24]
 800537e:	430a      	orrs	r2, r1
 8005380:	605a      	str	r2, [r3, #4]
 8005382:	e000      	b.n	8005386 <HAL_PCD_IRQHandler+0x938>
      return;
 8005384:	bf00      	nop
    }
  }
}
 8005386:	3734      	adds	r7, #52	; 0x34
 8005388:	46bd      	mov	sp, r7
 800538a:	bd90      	pop	{r4, r7, pc}

0800538c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b082      	sub	sp, #8
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
 8005394:	460b      	mov	r3, r1
 8005396:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800539e:	2b01      	cmp	r3, #1
 80053a0:	d101      	bne.n	80053a6 <HAL_PCD_SetAddress+0x1a>
 80053a2:	2302      	movs	r3, #2
 80053a4:	e013      	b.n	80053ce <HAL_PCD_SetAddress+0x42>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2201      	movs	r2, #1
 80053aa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	78fa      	ldrb	r2, [r7, #3]
 80053b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	78fa      	ldrb	r2, [r7, #3]
 80053bc:	4611      	mov	r1, r2
 80053be:	4618      	mov	r0, r3
 80053c0:	f004 f85e 	bl	8009480 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2200      	movs	r2, #0
 80053c8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80053cc:	2300      	movs	r3, #0
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	3708      	adds	r7, #8
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}

080053d6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80053d6:	b580      	push	{r7, lr}
 80053d8:	b084      	sub	sp, #16
 80053da:	af00      	add	r7, sp, #0
 80053dc:	6078      	str	r0, [r7, #4]
 80053de:	4608      	mov	r0, r1
 80053e0:	4611      	mov	r1, r2
 80053e2:	461a      	mov	r2, r3
 80053e4:	4603      	mov	r3, r0
 80053e6:	70fb      	strb	r3, [r7, #3]
 80053e8:	460b      	mov	r3, r1
 80053ea:	803b      	strh	r3, [r7, #0]
 80053ec:	4613      	mov	r3, r2
 80053ee:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80053f0:	2300      	movs	r3, #0
 80053f2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80053f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	da0f      	bge.n	800541c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80053fc:	78fb      	ldrb	r3, [r7, #3]
 80053fe:	f003 020f 	and.w	r2, r3, #15
 8005402:	4613      	mov	r3, r2
 8005404:	00db      	lsls	r3, r3, #3
 8005406:	4413      	add	r3, r2
 8005408:	009b      	lsls	r3, r3, #2
 800540a:	3338      	adds	r3, #56	; 0x38
 800540c:	687a      	ldr	r2, [r7, #4]
 800540e:	4413      	add	r3, r2
 8005410:	3304      	adds	r3, #4
 8005412:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	2201      	movs	r2, #1
 8005418:	705a      	strb	r2, [r3, #1]
 800541a:	e00f      	b.n	800543c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800541c:	78fb      	ldrb	r3, [r7, #3]
 800541e:	f003 020f 	and.w	r2, r3, #15
 8005422:	4613      	mov	r3, r2
 8005424:	00db      	lsls	r3, r3, #3
 8005426:	4413      	add	r3, r2
 8005428:	009b      	lsls	r3, r3, #2
 800542a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800542e:	687a      	ldr	r2, [r7, #4]
 8005430:	4413      	add	r3, r2
 8005432:	3304      	adds	r3, #4
 8005434:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	2200      	movs	r2, #0
 800543a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800543c:	78fb      	ldrb	r3, [r7, #3]
 800543e:	f003 030f 	and.w	r3, r3, #15
 8005442:	b2da      	uxtb	r2, r3
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005448:	883a      	ldrh	r2, [r7, #0]
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	78ba      	ldrb	r2, [r7, #2]
 8005452:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	785b      	ldrb	r3, [r3, #1]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d004      	beq.n	8005466 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	781b      	ldrb	r3, [r3, #0]
 8005460:	b29a      	uxth	r2, r3
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005466:	78bb      	ldrb	r3, [r7, #2]
 8005468:	2b02      	cmp	r3, #2
 800546a:	d102      	bne.n	8005472 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2200      	movs	r2, #0
 8005470:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005478:	2b01      	cmp	r3, #1
 800547a:	d101      	bne.n	8005480 <HAL_PCD_EP_Open+0xaa>
 800547c:	2302      	movs	r3, #2
 800547e:	e00e      	b.n	800549e <HAL_PCD_EP_Open+0xc8>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2201      	movs	r2, #1
 8005484:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	68f9      	ldr	r1, [r7, #12]
 800548e:	4618      	mov	r0, r3
 8005490:	f003 f8de 	bl	8008650 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2200      	movs	r2, #0
 8005498:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800549c:	7afb      	ldrb	r3, [r7, #11]
}
 800549e:	4618      	mov	r0, r3
 80054a0:	3710      	adds	r7, #16
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bd80      	pop	{r7, pc}

080054a6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80054a6:	b580      	push	{r7, lr}
 80054a8:	b084      	sub	sp, #16
 80054aa:	af00      	add	r7, sp, #0
 80054ac:	6078      	str	r0, [r7, #4]
 80054ae:	460b      	mov	r3, r1
 80054b0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80054b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	da0f      	bge.n	80054da <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80054ba:	78fb      	ldrb	r3, [r7, #3]
 80054bc:	f003 020f 	and.w	r2, r3, #15
 80054c0:	4613      	mov	r3, r2
 80054c2:	00db      	lsls	r3, r3, #3
 80054c4:	4413      	add	r3, r2
 80054c6:	009b      	lsls	r3, r3, #2
 80054c8:	3338      	adds	r3, #56	; 0x38
 80054ca:	687a      	ldr	r2, [r7, #4]
 80054cc:	4413      	add	r3, r2
 80054ce:	3304      	adds	r3, #4
 80054d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	2201      	movs	r2, #1
 80054d6:	705a      	strb	r2, [r3, #1]
 80054d8:	e00f      	b.n	80054fa <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80054da:	78fb      	ldrb	r3, [r7, #3]
 80054dc:	f003 020f 	and.w	r2, r3, #15
 80054e0:	4613      	mov	r3, r2
 80054e2:	00db      	lsls	r3, r3, #3
 80054e4:	4413      	add	r3, r2
 80054e6:	009b      	lsls	r3, r3, #2
 80054e8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80054ec:	687a      	ldr	r2, [r7, #4]
 80054ee:	4413      	add	r3, r2
 80054f0:	3304      	adds	r3, #4
 80054f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	2200      	movs	r2, #0
 80054f8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80054fa:	78fb      	ldrb	r3, [r7, #3]
 80054fc:	f003 030f 	and.w	r3, r3, #15
 8005500:	b2da      	uxtb	r2, r3
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800550c:	2b01      	cmp	r3, #1
 800550e:	d101      	bne.n	8005514 <HAL_PCD_EP_Close+0x6e>
 8005510:	2302      	movs	r3, #2
 8005512:	e00e      	b.n	8005532 <HAL_PCD_EP_Close+0x8c>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2201      	movs	r2, #1
 8005518:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	68f9      	ldr	r1, [r7, #12]
 8005522:	4618      	mov	r0, r3
 8005524:	f003 f91c 	bl	8008760 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2200      	movs	r2, #0
 800552c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8005530:	2300      	movs	r3, #0
}
 8005532:	4618      	mov	r0, r3
 8005534:	3710      	adds	r7, #16
 8005536:	46bd      	mov	sp, r7
 8005538:	bd80      	pop	{r7, pc}

0800553a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800553a:	b580      	push	{r7, lr}
 800553c:	b086      	sub	sp, #24
 800553e:	af00      	add	r7, sp, #0
 8005540:	60f8      	str	r0, [r7, #12]
 8005542:	607a      	str	r2, [r7, #4]
 8005544:	603b      	str	r3, [r7, #0]
 8005546:	460b      	mov	r3, r1
 8005548:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800554a:	7afb      	ldrb	r3, [r7, #11]
 800554c:	f003 020f 	and.w	r2, r3, #15
 8005550:	4613      	mov	r3, r2
 8005552:	00db      	lsls	r3, r3, #3
 8005554:	4413      	add	r3, r2
 8005556:	009b      	lsls	r3, r3, #2
 8005558:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800555c:	68fa      	ldr	r2, [r7, #12]
 800555e:	4413      	add	r3, r2
 8005560:	3304      	adds	r3, #4
 8005562:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005564:	697b      	ldr	r3, [r7, #20]
 8005566:	687a      	ldr	r2, [r7, #4]
 8005568:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	683a      	ldr	r2, [r7, #0]
 800556e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005570:	697b      	ldr	r3, [r7, #20]
 8005572:	2200      	movs	r2, #0
 8005574:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	2200      	movs	r2, #0
 800557a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800557c:	7afb      	ldrb	r3, [r7, #11]
 800557e:	f003 030f 	and.w	r3, r3, #15
 8005582:	b2da      	uxtb	r2, r3
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	691b      	ldr	r3, [r3, #16]
 800558c:	2b01      	cmp	r3, #1
 800558e:	d102      	bne.n	8005596 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005590:	687a      	ldr	r2, [r7, #4]
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005596:	7afb      	ldrb	r3, [r7, #11]
 8005598:	f003 030f 	and.w	r3, r3, #15
 800559c:	2b00      	cmp	r3, #0
 800559e:	d109      	bne.n	80055b4 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	6818      	ldr	r0, [r3, #0]
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	691b      	ldr	r3, [r3, #16]
 80055a8:	b2db      	uxtb	r3, r3
 80055aa:	461a      	mov	r2, r3
 80055ac:	6979      	ldr	r1, [r7, #20]
 80055ae:	f003 fbfb 	bl	8008da8 <USB_EP0StartXfer>
 80055b2:	e008      	b.n	80055c6 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	6818      	ldr	r0, [r3, #0]
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	691b      	ldr	r3, [r3, #16]
 80055bc:	b2db      	uxtb	r3, r3
 80055be:	461a      	mov	r2, r3
 80055c0:	6979      	ldr	r1, [r7, #20]
 80055c2:	f003 f9a9 	bl	8008918 <USB_EPStartXfer>
  }

  return HAL_OK;
 80055c6:	2300      	movs	r3, #0
}
 80055c8:	4618      	mov	r0, r3
 80055ca:	3718      	adds	r7, #24
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bd80      	pop	{r7, pc}

080055d0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b086      	sub	sp, #24
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	60f8      	str	r0, [r7, #12]
 80055d8:	607a      	str	r2, [r7, #4]
 80055da:	603b      	str	r3, [r7, #0]
 80055dc:	460b      	mov	r3, r1
 80055de:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80055e0:	7afb      	ldrb	r3, [r7, #11]
 80055e2:	f003 020f 	and.w	r2, r3, #15
 80055e6:	4613      	mov	r3, r2
 80055e8:	00db      	lsls	r3, r3, #3
 80055ea:	4413      	add	r3, r2
 80055ec:	009b      	lsls	r3, r3, #2
 80055ee:	3338      	adds	r3, #56	; 0x38
 80055f0:	68fa      	ldr	r2, [r7, #12]
 80055f2:	4413      	add	r3, r2
 80055f4:	3304      	adds	r3, #4
 80055f6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	687a      	ldr	r2, [r7, #4]
 80055fc:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80055fe:	697b      	ldr	r3, [r7, #20]
 8005600:	683a      	ldr	r2, [r7, #0]
 8005602:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005604:	697b      	ldr	r3, [r7, #20]
 8005606:	2200      	movs	r2, #0
 8005608:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	2201      	movs	r2, #1
 800560e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005610:	7afb      	ldrb	r3, [r7, #11]
 8005612:	f003 030f 	and.w	r3, r3, #15
 8005616:	b2da      	uxtb	r2, r3
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	691b      	ldr	r3, [r3, #16]
 8005620:	2b01      	cmp	r3, #1
 8005622:	d102      	bne.n	800562a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005624:	687a      	ldr	r2, [r7, #4]
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800562a:	7afb      	ldrb	r3, [r7, #11]
 800562c:	f003 030f 	and.w	r3, r3, #15
 8005630:	2b00      	cmp	r3, #0
 8005632:	d109      	bne.n	8005648 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	6818      	ldr	r0, [r3, #0]
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	691b      	ldr	r3, [r3, #16]
 800563c:	b2db      	uxtb	r3, r3
 800563e:	461a      	mov	r2, r3
 8005640:	6979      	ldr	r1, [r7, #20]
 8005642:	f003 fbb1 	bl	8008da8 <USB_EP0StartXfer>
 8005646:	e008      	b.n	800565a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	6818      	ldr	r0, [r3, #0]
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	691b      	ldr	r3, [r3, #16]
 8005650:	b2db      	uxtb	r3, r3
 8005652:	461a      	mov	r2, r3
 8005654:	6979      	ldr	r1, [r7, #20]
 8005656:	f003 f95f 	bl	8008918 <USB_EPStartXfer>
  }

  return HAL_OK;
 800565a:	2300      	movs	r3, #0
}
 800565c:	4618      	mov	r0, r3
 800565e:	3718      	adds	r7, #24
 8005660:	46bd      	mov	sp, r7
 8005662:	bd80      	pop	{r7, pc}

08005664 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b084      	sub	sp, #16
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
 800566c:	460b      	mov	r3, r1
 800566e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005670:	78fb      	ldrb	r3, [r7, #3]
 8005672:	f003 020f 	and.w	r2, r3, #15
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	429a      	cmp	r2, r3
 800567c:	d901      	bls.n	8005682 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	e050      	b.n	8005724 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005682:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005686:	2b00      	cmp	r3, #0
 8005688:	da0f      	bge.n	80056aa <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800568a:	78fb      	ldrb	r3, [r7, #3]
 800568c:	f003 020f 	and.w	r2, r3, #15
 8005690:	4613      	mov	r3, r2
 8005692:	00db      	lsls	r3, r3, #3
 8005694:	4413      	add	r3, r2
 8005696:	009b      	lsls	r3, r3, #2
 8005698:	3338      	adds	r3, #56	; 0x38
 800569a:	687a      	ldr	r2, [r7, #4]
 800569c:	4413      	add	r3, r2
 800569e:	3304      	adds	r3, #4
 80056a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	2201      	movs	r2, #1
 80056a6:	705a      	strb	r2, [r3, #1]
 80056a8:	e00d      	b.n	80056c6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80056aa:	78fa      	ldrb	r2, [r7, #3]
 80056ac:	4613      	mov	r3, r2
 80056ae:	00db      	lsls	r3, r3, #3
 80056b0:	4413      	add	r3, r2
 80056b2:	009b      	lsls	r3, r3, #2
 80056b4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80056b8:	687a      	ldr	r2, [r7, #4]
 80056ba:	4413      	add	r3, r2
 80056bc:	3304      	adds	r3, #4
 80056be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	2200      	movs	r2, #0
 80056c4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	2201      	movs	r2, #1
 80056ca:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80056cc:	78fb      	ldrb	r3, [r7, #3]
 80056ce:	f003 030f 	and.w	r3, r3, #15
 80056d2:	b2da      	uxtb	r2, r3
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80056de:	2b01      	cmp	r3, #1
 80056e0:	d101      	bne.n	80056e6 <HAL_PCD_EP_SetStall+0x82>
 80056e2:	2302      	movs	r3, #2
 80056e4:	e01e      	b.n	8005724 <HAL_PCD_EP_SetStall+0xc0>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2201      	movs	r2, #1
 80056ea:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	68f9      	ldr	r1, [r7, #12]
 80056f4:	4618      	mov	r0, r3
 80056f6:	f003 fdef 	bl	80092d8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80056fa:	78fb      	ldrb	r3, [r7, #3]
 80056fc:	f003 030f 	and.w	r3, r3, #15
 8005700:	2b00      	cmp	r3, #0
 8005702:	d10a      	bne.n	800571a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6818      	ldr	r0, [r3, #0]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	691b      	ldr	r3, [r3, #16]
 800570c:	b2d9      	uxtb	r1, r3
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005714:	461a      	mov	r2, r3
 8005716:	f003 ffdf 	bl	80096d8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2200      	movs	r2, #0
 800571e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005722:	2300      	movs	r3, #0
}
 8005724:	4618      	mov	r0, r3
 8005726:	3710      	adds	r7, #16
 8005728:	46bd      	mov	sp, r7
 800572a:	bd80      	pop	{r7, pc}

0800572c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b084      	sub	sp, #16
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
 8005734:	460b      	mov	r3, r1
 8005736:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005738:	78fb      	ldrb	r3, [r7, #3]
 800573a:	f003 020f 	and.w	r2, r3, #15
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	429a      	cmp	r2, r3
 8005744:	d901      	bls.n	800574a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005746:	2301      	movs	r3, #1
 8005748:	e042      	b.n	80057d0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800574a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800574e:	2b00      	cmp	r3, #0
 8005750:	da0f      	bge.n	8005772 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005752:	78fb      	ldrb	r3, [r7, #3]
 8005754:	f003 020f 	and.w	r2, r3, #15
 8005758:	4613      	mov	r3, r2
 800575a:	00db      	lsls	r3, r3, #3
 800575c:	4413      	add	r3, r2
 800575e:	009b      	lsls	r3, r3, #2
 8005760:	3338      	adds	r3, #56	; 0x38
 8005762:	687a      	ldr	r2, [r7, #4]
 8005764:	4413      	add	r3, r2
 8005766:	3304      	adds	r3, #4
 8005768:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	2201      	movs	r2, #1
 800576e:	705a      	strb	r2, [r3, #1]
 8005770:	e00f      	b.n	8005792 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005772:	78fb      	ldrb	r3, [r7, #3]
 8005774:	f003 020f 	and.w	r2, r3, #15
 8005778:	4613      	mov	r3, r2
 800577a:	00db      	lsls	r3, r3, #3
 800577c:	4413      	add	r3, r2
 800577e:	009b      	lsls	r3, r3, #2
 8005780:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005784:	687a      	ldr	r2, [r7, #4]
 8005786:	4413      	add	r3, r2
 8005788:	3304      	adds	r3, #4
 800578a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	2200      	movs	r2, #0
 8005790:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2200      	movs	r2, #0
 8005796:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005798:	78fb      	ldrb	r3, [r7, #3]
 800579a:	f003 030f 	and.w	r3, r3, #15
 800579e:	b2da      	uxtb	r2, r3
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80057aa:	2b01      	cmp	r3, #1
 80057ac:	d101      	bne.n	80057b2 <HAL_PCD_EP_ClrStall+0x86>
 80057ae:	2302      	movs	r3, #2
 80057b0:	e00e      	b.n	80057d0 <HAL_PCD_EP_ClrStall+0xa4>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2201      	movs	r2, #1
 80057b6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	68f9      	ldr	r1, [r7, #12]
 80057c0:	4618      	mov	r0, r3
 80057c2:	f003 fdf7 	bl	80093b4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2200      	movs	r2, #0
 80057ca:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80057ce:	2300      	movs	r3, #0
}
 80057d0:	4618      	mov	r0, r3
 80057d2:	3710      	adds	r7, #16
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bd80      	pop	{r7, pc}

080057d8 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b084      	sub	sp, #16
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
 80057e0:	460b      	mov	r3, r1
 80057e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80057e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	da0c      	bge.n	8005806 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80057ec:	78fb      	ldrb	r3, [r7, #3]
 80057ee:	f003 020f 	and.w	r2, r3, #15
 80057f2:	4613      	mov	r3, r2
 80057f4:	00db      	lsls	r3, r3, #3
 80057f6:	4413      	add	r3, r2
 80057f8:	009b      	lsls	r3, r3, #2
 80057fa:	3338      	adds	r3, #56	; 0x38
 80057fc:	687a      	ldr	r2, [r7, #4]
 80057fe:	4413      	add	r3, r2
 8005800:	3304      	adds	r3, #4
 8005802:	60fb      	str	r3, [r7, #12]
 8005804:	e00c      	b.n	8005820 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005806:	78fb      	ldrb	r3, [r7, #3]
 8005808:	f003 020f 	and.w	r2, r3, #15
 800580c:	4613      	mov	r3, r2
 800580e:	00db      	lsls	r3, r3, #3
 8005810:	4413      	add	r3, r2
 8005812:	009b      	lsls	r3, r3, #2
 8005814:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005818:	687a      	ldr	r2, [r7, #4]
 800581a:	4413      	add	r3, r2
 800581c:	3304      	adds	r3, #4
 800581e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	68f9      	ldr	r1, [r7, #12]
 8005826:	4618      	mov	r0, r3
 8005828:	f003 fc16 	bl	8009058 <USB_EPStopXfer>
 800582c:	4603      	mov	r3, r0
 800582e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005830:	7afb      	ldrb	r3, [r7, #11]
}
 8005832:	4618      	mov	r0, r3
 8005834:	3710      	adds	r7, #16
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}

0800583a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800583a:	b580      	push	{r7, lr}
 800583c:	b08a      	sub	sp, #40	; 0x28
 800583e:	af02      	add	r7, sp, #8
 8005840:	6078      	str	r0, [r7, #4]
 8005842:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800584e:	683a      	ldr	r2, [r7, #0]
 8005850:	4613      	mov	r3, r2
 8005852:	00db      	lsls	r3, r3, #3
 8005854:	4413      	add	r3, r2
 8005856:	009b      	lsls	r3, r3, #2
 8005858:	3338      	adds	r3, #56	; 0x38
 800585a:	687a      	ldr	r2, [r7, #4]
 800585c:	4413      	add	r3, r2
 800585e:	3304      	adds	r3, #4
 8005860:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	6a1a      	ldr	r2, [r3, #32]
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	699b      	ldr	r3, [r3, #24]
 800586a:	429a      	cmp	r2, r3
 800586c:	d901      	bls.n	8005872 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800586e:	2301      	movs	r3, #1
 8005870:	e06c      	b.n	800594c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	699a      	ldr	r2, [r3, #24]
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	6a1b      	ldr	r3, [r3, #32]
 800587a:	1ad3      	subs	r3, r2, r3
 800587c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	68db      	ldr	r3, [r3, #12]
 8005882:	69fa      	ldr	r2, [r7, #28]
 8005884:	429a      	cmp	r2, r3
 8005886:	d902      	bls.n	800588e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	68db      	ldr	r3, [r3, #12]
 800588c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800588e:	69fb      	ldr	r3, [r7, #28]
 8005890:	3303      	adds	r3, #3
 8005892:	089b      	lsrs	r3, r3, #2
 8005894:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005896:	e02b      	b.n	80058f0 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	699a      	ldr	r2, [r3, #24]
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	6a1b      	ldr	r3, [r3, #32]
 80058a0:	1ad3      	subs	r3, r2, r3
 80058a2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	68db      	ldr	r3, [r3, #12]
 80058a8:	69fa      	ldr	r2, [r7, #28]
 80058aa:	429a      	cmp	r2, r3
 80058ac:	d902      	bls.n	80058b4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	68db      	ldr	r3, [r3, #12]
 80058b2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80058b4:	69fb      	ldr	r3, [r7, #28]
 80058b6:	3303      	adds	r3, #3
 80058b8:	089b      	lsrs	r3, r3, #2
 80058ba:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	6919      	ldr	r1, [r3, #16]
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	b2da      	uxtb	r2, r3
 80058c4:	69fb      	ldr	r3, [r7, #28]
 80058c6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80058cc:	b2db      	uxtb	r3, r3
 80058ce:	9300      	str	r3, [sp, #0]
 80058d0:	4603      	mov	r3, r0
 80058d2:	6978      	ldr	r0, [r7, #20]
 80058d4:	f003 fc6a 	bl	80091ac <USB_WritePacket>

    ep->xfer_buff  += len;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	691a      	ldr	r2, [r3, #16]
 80058dc:	69fb      	ldr	r3, [r7, #28]
 80058de:	441a      	add	r2, r3
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	6a1a      	ldr	r2, [r3, #32]
 80058e8:	69fb      	ldr	r3, [r7, #28]
 80058ea:	441a      	add	r2, r3
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	015a      	lsls	r2, r3, #5
 80058f4:	693b      	ldr	r3, [r7, #16]
 80058f6:	4413      	add	r3, r2
 80058f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058fc:	699b      	ldr	r3, [r3, #24]
 80058fe:	b29b      	uxth	r3, r3
 8005900:	69ba      	ldr	r2, [r7, #24]
 8005902:	429a      	cmp	r2, r3
 8005904:	d809      	bhi.n	800591a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	6a1a      	ldr	r2, [r3, #32]
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800590e:	429a      	cmp	r2, r3
 8005910:	d203      	bcs.n	800591a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	699b      	ldr	r3, [r3, #24]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d1be      	bne.n	8005898 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	699a      	ldr	r2, [r3, #24]
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	6a1b      	ldr	r3, [r3, #32]
 8005922:	429a      	cmp	r2, r3
 8005924:	d811      	bhi.n	800594a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	f003 030f 	and.w	r3, r3, #15
 800592c:	2201      	movs	r2, #1
 800592e:	fa02 f303 	lsl.w	r3, r2, r3
 8005932:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005934:	693b      	ldr	r3, [r7, #16]
 8005936:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800593a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	43db      	mvns	r3, r3
 8005940:	6939      	ldr	r1, [r7, #16]
 8005942:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005946:	4013      	ands	r3, r2
 8005948:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800594a:	2300      	movs	r3, #0
}
 800594c:	4618      	mov	r0, r3
 800594e:	3720      	adds	r7, #32
 8005950:	46bd      	mov	sp, r7
 8005952:	bd80      	pop	{r7, pc}

08005954 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b088      	sub	sp, #32
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
 800595c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005964:	69fb      	ldr	r3, [r7, #28]
 8005966:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005968:	69fb      	ldr	r3, [r7, #28]
 800596a:	333c      	adds	r3, #60	; 0x3c
 800596c:	3304      	adds	r3, #4
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	015a      	lsls	r2, r3, #5
 8005976:	69bb      	ldr	r3, [r7, #24]
 8005978:	4413      	add	r3, r2
 800597a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800597e:	689b      	ldr	r3, [r3, #8]
 8005980:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	691b      	ldr	r3, [r3, #16]
 8005986:	2b01      	cmp	r3, #1
 8005988:	d17b      	bne.n	8005a82 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800598a:	693b      	ldr	r3, [r7, #16]
 800598c:	f003 0308 	and.w	r3, r3, #8
 8005990:	2b00      	cmp	r3, #0
 8005992:	d015      	beq.n	80059c0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	4a61      	ldr	r2, [pc, #388]	; (8005b1c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005998:	4293      	cmp	r3, r2
 800599a:	f240 80b9 	bls.w	8005b10 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	f000 80b3 	beq.w	8005b10 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	015a      	lsls	r2, r3, #5
 80059ae:	69bb      	ldr	r3, [r7, #24]
 80059b0:	4413      	add	r3, r2
 80059b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059b6:	461a      	mov	r2, r3
 80059b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80059bc:	6093      	str	r3, [r2, #8]
 80059be:	e0a7      	b.n	8005b10 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80059c0:	693b      	ldr	r3, [r7, #16]
 80059c2:	f003 0320 	and.w	r3, r3, #32
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d009      	beq.n	80059de <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	015a      	lsls	r2, r3, #5
 80059ce:	69bb      	ldr	r3, [r7, #24]
 80059d0:	4413      	add	r3, r2
 80059d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059d6:	461a      	mov	r2, r3
 80059d8:	2320      	movs	r3, #32
 80059da:	6093      	str	r3, [r2, #8]
 80059dc:	e098      	b.n	8005b10 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80059de:	693b      	ldr	r3, [r7, #16]
 80059e0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	f040 8093 	bne.w	8005b10 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	4a4b      	ldr	r2, [pc, #300]	; (8005b1c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d90f      	bls.n	8005a12 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d00a      	beq.n	8005a12 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	015a      	lsls	r2, r3, #5
 8005a00:	69bb      	ldr	r3, [r7, #24]
 8005a02:	4413      	add	r3, r2
 8005a04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a08:	461a      	mov	r2, r3
 8005a0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a0e:	6093      	str	r3, [r2, #8]
 8005a10:	e07e      	b.n	8005b10 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8005a12:	683a      	ldr	r2, [r7, #0]
 8005a14:	4613      	mov	r3, r2
 8005a16:	00db      	lsls	r3, r3, #3
 8005a18:	4413      	add	r3, r2
 8005a1a:	009b      	lsls	r3, r3, #2
 8005a1c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005a20:	687a      	ldr	r2, [r7, #4]
 8005a22:	4413      	add	r3, r2
 8005a24:	3304      	adds	r3, #4
 8005a26:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	69da      	ldr	r2, [r3, #28]
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	0159      	lsls	r1, r3, #5
 8005a30:	69bb      	ldr	r3, [r7, #24]
 8005a32:	440b      	add	r3, r1
 8005a34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a38:	691b      	ldr	r3, [r3, #16]
 8005a3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a3e:	1ad2      	subs	r2, r2, r3
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d114      	bne.n	8005a74 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	699b      	ldr	r3, [r3, #24]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d109      	bne.n	8005a66 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6818      	ldr	r0, [r3, #0]
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005a5c:	461a      	mov	r2, r3
 8005a5e:	2101      	movs	r1, #1
 8005a60:	f003 fe3a 	bl	80096d8 <USB_EP0_OutStart>
 8005a64:	e006      	b.n	8005a74 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	691a      	ldr	r2, [r3, #16]
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	6a1b      	ldr	r3, [r3, #32]
 8005a6e:	441a      	add	r2, r3
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	b2db      	uxtb	r3, r3
 8005a78:	4619      	mov	r1, r3
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	f005 ff12 	bl	800b8a4 <HAL_PCD_DataOutStageCallback>
 8005a80:	e046      	b.n	8005b10 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	4a26      	ldr	r2, [pc, #152]	; (8005b20 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d124      	bne.n	8005ad4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005a8a:	693b      	ldr	r3, [r7, #16]
 8005a8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d00a      	beq.n	8005aaa <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	015a      	lsls	r2, r3, #5
 8005a98:	69bb      	ldr	r3, [r7, #24]
 8005a9a:	4413      	add	r3, r2
 8005a9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005aa0:	461a      	mov	r2, r3
 8005aa2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005aa6:	6093      	str	r3, [r2, #8]
 8005aa8:	e032      	b.n	8005b10 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005aaa:	693b      	ldr	r3, [r7, #16]
 8005aac:	f003 0320 	and.w	r3, r3, #32
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d008      	beq.n	8005ac6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	015a      	lsls	r2, r3, #5
 8005ab8:	69bb      	ldr	r3, [r7, #24]
 8005aba:	4413      	add	r3, r2
 8005abc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ac0:	461a      	mov	r2, r3
 8005ac2:	2320      	movs	r3, #32
 8005ac4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	b2db      	uxtb	r3, r3
 8005aca:	4619      	mov	r1, r3
 8005acc:	6878      	ldr	r0, [r7, #4]
 8005ace:	f005 fee9 	bl	800b8a4 <HAL_PCD_DataOutStageCallback>
 8005ad2:	e01d      	b.n	8005b10 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d114      	bne.n	8005b04 <PCD_EP_OutXfrComplete_int+0x1b0>
 8005ada:	6879      	ldr	r1, [r7, #4]
 8005adc:	683a      	ldr	r2, [r7, #0]
 8005ade:	4613      	mov	r3, r2
 8005ae0:	00db      	lsls	r3, r3, #3
 8005ae2:	4413      	add	r3, r2
 8005ae4:	009b      	lsls	r3, r3, #2
 8005ae6:	440b      	add	r3, r1
 8005ae8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d108      	bne.n	8005b04 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6818      	ldr	r0, [r3, #0]
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005afc:	461a      	mov	r2, r3
 8005afe:	2100      	movs	r1, #0
 8005b00:	f003 fdea 	bl	80096d8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	b2db      	uxtb	r3, r3
 8005b08:	4619      	mov	r1, r3
 8005b0a:	6878      	ldr	r0, [r7, #4]
 8005b0c:	f005 feca 	bl	800b8a4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005b10:	2300      	movs	r3, #0
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	3720      	adds	r7, #32
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bd80      	pop	{r7, pc}
 8005b1a:	bf00      	nop
 8005b1c:	4f54300a 	.word	0x4f54300a
 8005b20:	4f54310a 	.word	0x4f54310a

08005b24 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b086      	sub	sp, #24
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
 8005b2c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b34:	697b      	ldr	r3, [r7, #20]
 8005b36:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005b38:	697b      	ldr	r3, [r7, #20]
 8005b3a:	333c      	adds	r3, #60	; 0x3c
 8005b3c:	3304      	adds	r3, #4
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	015a      	lsls	r2, r3, #5
 8005b46:	693b      	ldr	r3, [r7, #16]
 8005b48:	4413      	add	r3, r2
 8005b4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b4e:	689b      	ldr	r3, [r3, #8]
 8005b50:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	4a15      	ldr	r2, [pc, #84]	; (8005bac <PCD_EP_OutSetupPacket_int+0x88>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d90e      	bls.n	8005b78 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d009      	beq.n	8005b78 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	015a      	lsls	r2, r3, #5
 8005b68:	693b      	ldr	r3, [r7, #16]
 8005b6a:	4413      	add	r3, r2
 8005b6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b70:	461a      	mov	r2, r3
 8005b72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b76:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005b78:	6878      	ldr	r0, [r7, #4]
 8005b7a:	f005 fe81 	bl	800b880 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	4a0a      	ldr	r2, [pc, #40]	; (8005bac <PCD_EP_OutSetupPacket_int+0x88>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d90c      	bls.n	8005ba0 <PCD_EP_OutSetupPacket_int+0x7c>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	691b      	ldr	r3, [r3, #16]
 8005b8a:	2b01      	cmp	r3, #1
 8005b8c:	d108      	bne.n	8005ba0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6818      	ldr	r0, [r3, #0]
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005b98:	461a      	mov	r2, r3
 8005b9a:	2101      	movs	r1, #1
 8005b9c:	f003 fd9c 	bl	80096d8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005ba0:	2300      	movs	r3, #0
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	3718      	adds	r7, #24
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd80      	pop	{r7, pc}
 8005baa:	bf00      	nop
 8005bac:	4f54300a 	.word	0x4f54300a

08005bb0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	b085      	sub	sp, #20
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
 8005bb8:	460b      	mov	r3, r1
 8005bba:	70fb      	strb	r3, [r7, #3]
 8005bbc:	4613      	mov	r3, r2
 8005bbe:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bc6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005bc8:	78fb      	ldrb	r3, [r7, #3]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d107      	bne.n	8005bde <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005bce:	883b      	ldrh	r3, [r7, #0]
 8005bd0:	0419      	lsls	r1, r3, #16
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	68ba      	ldr	r2, [r7, #8]
 8005bd8:	430a      	orrs	r2, r1
 8005bda:	629a      	str	r2, [r3, #40]	; 0x28
 8005bdc:	e028      	b.n	8005c30 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005be4:	0c1b      	lsrs	r3, r3, #16
 8005be6:	68ba      	ldr	r2, [r7, #8]
 8005be8:	4413      	add	r3, r2
 8005bea:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005bec:	2300      	movs	r3, #0
 8005bee:	73fb      	strb	r3, [r7, #15]
 8005bf0:	e00d      	b.n	8005c0e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681a      	ldr	r2, [r3, #0]
 8005bf6:	7bfb      	ldrb	r3, [r7, #15]
 8005bf8:	3340      	adds	r3, #64	; 0x40
 8005bfa:	009b      	lsls	r3, r3, #2
 8005bfc:	4413      	add	r3, r2
 8005bfe:	685b      	ldr	r3, [r3, #4]
 8005c00:	0c1b      	lsrs	r3, r3, #16
 8005c02:	68ba      	ldr	r2, [r7, #8]
 8005c04:	4413      	add	r3, r2
 8005c06:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005c08:	7bfb      	ldrb	r3, [r7, #15]
 8005c0a:	3301      	adds	r3, #1
 8005c0c:	73fb      	strb	r3, [r7, #15]
 8005c0e:	7bfa      	ldrb	r2, [r7, #15]
 8005c10:	78fb      	ldrb	r3, [r7, #3]
 8005c12:	3b01      	subs	r3, #1
 8005c14:	429a      	cmp	r2, r3
 8005c16:	d3ec      	bcc.n	8005bf2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005c18:	883b      	ldrh	r3, [r7, #0]
 8005c1a:	0418      	lsls	r0, r3, #16
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6819      	ldr	r1, [r3, #0]
 8005c20:	78fb      	ldrb	r3, [r7, #3]
 8005c22:	3b01      	subs	r3, #1
 8005c24:	68ba      	ldr	r2, [r7, #8]
 8005c26:	4302      	orrs	r2, r0
 8005c28:	3340      	adds	r3, #64	; 0x40
 8005c2a:	009b      	lsls	r3, r3, #2
 8005c2c:	440b      	add	r3, r1
 8005c2e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005c30:	2300      	movs	r3, #0
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	3714      	adds	r7, #20
 8005c36:	46bd      	mov	sp, r7
 8005c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3c:	4770      	bx	lr

08005c3e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005c3e:	b480      	push	{r7}
 8005c40:	b083      	sub	sp, #12
 8005c42:	af00      	add	r7, sp, #0
 8005c44:	6078      	str	r0, [r7, #4]
 8005c46:	460b      	mov	r3, r1
 8005c48:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	887a      	ldrh	r2, [r7, #2]
 8005c50:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005c52:	2300      	movs	r3, #0
}
 8005c54:	4618      	mov	r0, r3
 8005c56:	370c      	adds	r7, #12
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5e:	4770      	bx	lr

08005c60 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005c60:	b480      	push	{r7}
 8005c62:	b083      	sub	sp, #12
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
 8005c68:	460b      	mov	r3, r1
 8005c6a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005c6c:	bf00      	nop
 8005c6e:	370c      	adds	r7, #12
 8005c70:	46bd      	mov	sp, r7
 8005c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c76:	4770      	bx	lr

08005c78 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b086      	sub	sp, #24
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d101      	bne.n	8005c8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005c86:	2301      	movs	r3, #1
 8005c88:	e267      	b.n	800615a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f003 0301 	and.w	r3, r3, #1
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d075      	beq.n	8005d82 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005c96:	4b88      	ldr	r3, [pc, #544]	; (8005eb8 <HAL_RCC_OscConfig+0x240>)
 8005c98:	689b      	ldr	r3, [r3, #8]
 8005c9a:	f003 030c 	and.w	r3, r3, #12
 8005c9e:	2b04      	cmp	r3, #4
 8005ca0:	d00c      	beq.n	8005cbc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005ca2:	4b85      	ldr	r3, [pc, #532]	; (8005eb8 <HAL_RCC_OscConfig+0x240>)
 8005ca4:	689b      	ldr	r3, [r3, #8]
 8005ca6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005caa:	2b08      	cmp	r3, #8
 8005cac:	d112      	bne.n	8005cd4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005cae:	4b82      	ldr	r3, [pc, #520]	; (8005eb8 <HAL_RCC_OscConfig+0x240>)
 8005cb0:	685b      	ldr	r3, [r3, #4]
 8005cb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005cb6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005cba:	d10b      	bne.n	8005cd4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005cbc:	4b7e      	ldr	r3, [pc, #504]	; (8005eb8 <HAL_RCC_OscConfig+0x240>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d05b      	beq.n	8005d80 <HAL_RCC_OscConfig+0x108>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d157      	bne.n	8005d80 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	e242      	b.n	800615a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cdc:	d106      	bne.n	8005cec <HAL_RCC_OscConfig+0x74>
 8005cde:	4b76      	ldr	r3, [pc, #472]	; (8005eb8 <HAL_RCC_OscConfig+0x240>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4a75      	ldr	r2, [pc, #468]	; (8005eb8 <HAL_RCC_OscConfig+0x240>)
 8005ce4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ce8:	6013      	str	r3, [r2, #0]
 8005cea:	e01d      	b.n	8005d28 <HAL_RCC_OscConfig+0xb0>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	685b      	ldr	r3, [r3, #4]
 8005cf0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005cf4:	d10c      	bne.n	8005d10 <HAL_RCC_OscConfig+0x98>
 8005cf6:	4b70      	ldr	r3, [pc, #448]	; (8005eb8 <HAL_RCC_OscConfig+0x240>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4a6f      	ldr	r2, [pc, #444]	; (8005eb8 <HAL_RCC_OscConfig+0x240>)
 8005cfc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005d00:	6013      	str	r3, [r2, #0]
 8005d02:	4b6d      	ldr	r3, [pc, #436]	; (8005eb8 <HAL_RCC_OscConfig+0x240>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4a6c      	ldr	r2, [pc, #432]	; (8005eb8 <HAL_RCC_OscConfig+0x240>)
 8005d08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d0c:	6013      	str	r3, [r2, #0]
 8005d0e:	e00b      	b.n	8005d28 <HAL_RCC_OscConfig+0xb0>
 8005d10:	4b69      	ldr	r3, [pc, #420]	; (8005eb8 <HAL_RCC_OscConfig+0x240>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a68      	ldr	r2, [pc, #416]	; (8005eb8 <HAL_RCC_OscConfig+0x240>)
 8005d16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d1a:	6013      	str	r3, [r2, #0]
 8005d1c:	4b66      	ldr	r3, [pc, #408]	; (8005eb8 <HAL_RCC_OscConfig+0x240>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a65      	ldr	r2, [pc, #404]	; (8005eb8 <HAL_RCC_OscConfig+0x240>)
 8005d22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d013      	beq.n	8005d58 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d30:	f7fc f99e 	bl	8002070 <HAL_GetTick>
 8005d34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d36:	e008      	b.n	8005d4a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005d38:	f7fc f99a 	bl	8002070 <HAL_GetTick>
 8005d3c:	4602      	mov	r2, r0
 8005d3e:	693b      	ldr	r3, [r7, #16]
 8005d40:	1ad3      	subs	r3, r2, r3
 8005d42:	2b64      	cmp	r3, #100	; 0x64
 8005d44:	d901      	bls.n	8005d4a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005d46:	2303      	movs	r3, #3
 8005d48:	e207      	b.n	800615a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d4a:	4b5b      	ldr	r3, [pc, #364]	; (8005eb8 <HAL_RCC_OscConfig+0x240>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d0f0      	beq.n	8005d38 <HAL_RCC_OscConfig+0xc0>
 8005d56:	e014      	b.n	8005d82 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d58:	f7fc f98a 	bl	8002070 <HAL_GetTick>
 8005d5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d5e:	e008      	b.n	8005d72 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005d60:	f7fc f986 	bl	8002070 <HAL_GetTick>
 8005d64:	4602      	mov	r2, r0
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	1ad3      	subs	r3, r2, r3
 8005d6a:	2b64      	cmp	r3, #100	; 0x64
 8005d6c:	d901      	bls.n	8005d72 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005d6e:	2303      	movs	r3, #3
 8005d70:	e1f3      	b.n	800615a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d72:	4b51      	ldr	r3, [pc, #324]	; (8005eb8 <HAL_RCC_OscConfig+0x240>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d1f0      	bne.n	8005d60 <HAL_RCC_OscConfig+0xe8>
 8005d7e:	e000      	b.n	8005d82 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f003 0302 	and.w	r3, r3, #2
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d063      	beq.n	8005e56 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005d8e:	4b4a      	ldr	r3, [pc, #296]	; (8005eb8 <HAL_RCC_OscConfig+0x240>)
 8005d90:	689b      	ldr	r3, [r3, #8]
 8005d92:	f003 030c 	and.w	r3, r3, #12
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d00b      	beq.n	8005db2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005d9a:	4b47      	ldr	r3, [pc, #284]	; (8005eb8 <HAL_RCC_OscConfig+0x240>)
 8005d9c:	689b      	ldr	r3, [r3, #8]
 8005d9e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005da2:	2b08      	cmp	r3, #8
 8005da4:	d11c      	bne.n	8005de0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005da6:	4b44      	ldr	r3, [pc, #272]	; (8005eb8 <HAL_RCC_OscConfig+0x240>)
 8005da8:	685b      	ldr	r3, [r3, #4]
 8005daa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d116      	bne.n	8005de0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005db2:	4b41      	ldr	r3, [pc, #260]	; (8005eb8 <HAL_RCC_OscConfig+0x240>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f003 0302 	and.w	r3, r3, #2
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d005      	beq.n	8005dca <HAL_RCC_OscConfig+0x152>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	68db      	ldr	r3, [r3, #12]
 8005dc2:	2b01      	cmp	r3, #1
 8005dc4:	d001      	beq.n	8005dca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	e1c7      	b.n	800615a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005dca:	4b3b      	ldr	r3, [pc, #236]	; (8005eb8 <HAL_RCC_OscConfig+0x240>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	691b      	ldr	r3, [r3, #16]
 8005dd6:	00db      	lsls	r3, r3, #3
 8005dd8:	4937      	ldr	r1, [pc, #220]	; (8005eb8 <HAL_RCC_OscConfig+0x240>)
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005dde:	e03a      	b.n	8005e56 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	68db      	ldr	r3, [r3, #12]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d020      	beq.n	8005e2a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005de8:	4b34      	ldr	r3, [pc, #208]	; (8005ebc <HAL_RCC_OscConfig+0x244>)
 8005dea:	2201      	movs	r2, #1
 8005dec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dee:	f7fc f93f 	bl	8002070 <HAL_GetTick>
 8005df2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005df4:	e008      	b.n	8005e08 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005df6:	f7fc f93b 	bl	8002070 <HAL_GetTick>
 8005dfa:	4602      	mov	r2, r0
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	1ad3      	subs	r3, r2, r3
 8005e00:	2b02      	cmp	r3, #2
 8005e02:	d901      	bls.n	8005e08 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005e04:	2303      	movs	r3, #3
 8005e06:	e1a8      	b.n	800615a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e08:	4b2b      	ldr	r3, [pc, #172]	; (8005eb8 <HAL_RCC_OscConfig+0x240>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f003 0302 	and.w	r3, r3, #2
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d0f0      	beq.n	8005df6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e14:	4b28      	ldr	r3, [pc, #160]	; (8005eb8 <HAL_RCC_OscConfig+0x240>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	691b      	ldr	r3, [r3, #16]
 8005e20:	00db      	lsls	r3, r3, #3
 8005e22:	4925      	ldr	r1, [pc, #148]	; (8005eb8 <HAL_RCC_OscConfig+0x240>)
 8005e24:	4313      	orrs	r3, r2
 8005e26:	600b      	str	r3, [r1, #0]
 8005e28:	e015      	b.n	8005e56 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005e2a:	4b24      	ldr	r3, [pc, #144]	; (8005ebc <HAL_RCC_OscConfig+0x244>)
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e30:	f7fc f91e 	bl	8002070 <HAL_GetTick>
 8005e34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e36:	e008      	b.n	8005e4a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005e38:	f7fc f91a 	bl	8002070 <HAL_GetTick>
 8005e3c:	4602      	mov	r2, r0
 8005e3e:	693b      	ldr	r3, [r7, #16]
 8005e40:	1ad3      	subs	r3, r2, r3
 8005e42:	2b02      	cmp	r3, #2
 8005e44:	d901      	bls.n	8005e4a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005e46:	2303      	movs	r3, #3
 8005e48:	e187      	b.n	800615a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e4a:	4b1b      	ldr	r3, [pc, #108]	; (8005eb8 <HAL_RCC_OscConfig+0x240>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f003 0302 	and.w	r3, r3, #2
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d1f0      	bne.n	8005e38 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f003 0308 	and.w	r3, r3, #8
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d036      	beq.n	8005ed0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	695b      	ldr	r3, [r3, #20]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d016      	beq.n	8005e98 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005e6a:	4b15      	ldr	r3, [pc, #84]	; (8005ec0 <HAL_RCC_OscConfig+0x248>)
 8005e6c:	2201      	movs	r2, #1
 8005e6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e70:	f7fc f8fe 	bl	8002070 <HAL_GetTick>
 8005e74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e76:	e008      	b.n	8005e8a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005e78:	f7fc f8fa 	bl	8002070 <HAL_GetTick>
 8005e7c:	4602      	mov	r2, r0
 8005e7e:	693b      	ldr	r3, [r7, #16]
 8005e80:	1ad3      	subs	r3, r2, r3
 8005e82:	2b02      	cmp	r3, #2
 8005e84:	d901      	bls.n	8005e8a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005e86:	2303      	movs	r3, #3
 8005e88:	e167      	b.n	800615a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e8a:	4b0b      	ldr	r3, [pc, #44]	; (8005eb8 <HAL_RCC_OscConfig+0x240>)
 8005e8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e8e:	f003 0302 	and.w	r3, r3, #2
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d0f0      	beq.n	8005e78 <HAL_RCC_OscConfig+0x200>
 8005e96:	e01b      	b.n	8005ed0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005e98:	4b09      	ldr	r3, [pc, #36]	; (8005ec0 <HAL_RCC_OscConfig+0x248>)
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e9e:	f7fc f8e7 	bl	8002070 <HAL_GetTick>
 8005ea2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ea4:	e00e      	b.n	8005ec4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005ea6:	f7fc f8e3 	bl	8002070 <HAL_GetTick>
 8005eaa:	4602      	mov	r2, r0
 8005eac:	693b      	ldr	r3, [r7, #16]
 8005eae:	1ad3      	subs	r3, r2, r3
 8005eb0:	2b02      	cmp	r3, #2
 8005eb2:	d907      	bls.n	8005ec4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005eb4:	2303      	movs	r3, #3
 8005eb6:	e150      	b.n	800615a <HAL_RCC_OscConfig+0x4e2>
 8005eb8:	40023800 	.word	0x40023800
 8005ebc:	42470000 	.word	0x42470000
 8005ec0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ec4:	4b88      	ldr	r3, [pc, #544]	; (80060e8 <HAL_RCC_OscConfig+0x470>)
 8005ec6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ec8:	f003 0302 	and.w	r3, r3, #2
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d1ea      	bne.n	8005ea6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f003 0304 	and.w	r3, r3, #4
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	f000 8097 	beq.w	800600c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005ede:	2300      	movs	r3, #0
 8005ee0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005ee2:	4b81      	ldr	r3, [pc, #516]	; (80060e8 <HAL_RCC_OscConfig+0x470>)
 8005ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ee6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d10f      	bne.n	8005f0e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005eee:	2300      	movs	r3, #0
 8005ef0:	60bb      	str	r3, [r7, #8]
 8005ef2:	4b7d      	ldr	r3, [pc, #500]	; (80060e8 <HAL_RCC_OscConfig+0x470>)
 8005ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ef6:	4a7c      	ldr	r2, [pc, #496]	; (80060e8 <HAL_RCC_OscConfig+0x470>)
 8005ef8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005efc:	6413      	str	r3, [r2, #64]	; 0x40
 8005efe:	4b7a      	ldr	r3, [pc, #488]	; (80060e8 <HAL_RCC_OscConfig+0x470>)
 8005f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f06:	60bb      	str	r3, [r7, #8]
 8005f08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f0e:	4b77      	ldr	r3, [pc, #476]	; (80060ec <HAL_RCC_OscConfig+0x474>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d118      	bne.n	8005f4c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005f1a:	4b74      	ldr	r3, [pc, #464]	; (80060ec <HAL_RCC_OscConfig+0x474>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4a73      	ldr	r2, [pc, #460]	; (80060ec <HAL_RCC_OscConfig+0x474>)
 8005f20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f26:	f7fc f8a3 	bl	8002070 <HAL_GetTick>
 8005f2a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f2c:	e008      	b.n	8005f40 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f2e:	f7fc f89f 	bl	8002070 <HAL_GetTick>
 8005f32:	4602      	mov	r2, r0
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	1ad3      	subs	r3, r2, r3
 8005f38:	2b02      	cmp	r3, #2
 8005f3a:	d901      	bls.n	8005f40 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005f3c:	2303      	movs	r3, #3
 8005f3e:	e10c      	b.n	800615a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f40:	4b6a      	ldr	r3, [pc, #424]	; (80060ec <HAL_RCC_OscConfig+0x474>)
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d0f0      	beq.n	8005f2e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	689b      	ldr	r3, [r3, #8]
 8005f50:	2b01      	cmp	r3, #1
 8005f52:	d106      	bne.n	8005f62 <HAL_RCC_OscConfig+0x2ea>
 8005f54:	4b64      	ldr	r3, [pc, #400]	; (80060e8 <HAL_RCC_OscConfig+0x470>)
 8005f56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f58:	4a63      	ldr	r2, [pc, #396]	; (80060e8 <HAL_RCC_OscConfig+0x470>)
 8005f5a:	f043 0301 	orr.w	r3, r3, #1
 8005f5e:	6713      	str	r3, [r2, #112]	; 0x70
 8005f60:	e01c      	b.n	8005f9c <HAL_RCC_OscConfig+0x324>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	689b      	ldr	r3, [r3, #8]
 8005f66:	2b05      	cmp	r3, #5
 8005f68:	d10c      	bne.n	8005f84 <HAL_RCC_OscConfig+0x30c>
 8005f6a:	4b5f      	ldr	r3, [pc, #380]	; (80060e8 <HAL_RCC_OscConfig+0x470>)
 8005f6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f6e:	4a5e      	ldr	r2, [pc, #376]	; (80060e8 <HAL_RCC_OscConfig+0x470>)
 8005f70:	f043 0304 	orr.w	r3, r3, #4
 8005f74:	6713      	str	r3, [r2, #112]	; 0x70
 8005f76:	4b5c      	ldr	r3, [pc, #368]	; (80060e8 <HAL_RCC_OscConfig+0x470>)
 8005f78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f7a:	4a5b      	ldr	r2, [pc, #364]	; (80060e8 <HAL_RCC_OscConfig+0x470>)
 8005f7c:	f043 0301 	orr.w	r3, r3, #1
 8005f80:	6713      	str	r3, [r2, #112]	; 0x70
 8005f82:	e00b      	b.n	8005f9c <HAL_RCC_OscConfig+0x324>
 8005f84:	4b58      	ldr	r3, [pc, #352]	; (80060e8 <HAL_RCC_OscConfig+0x470>)
 8005f86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f88:	4a57      	ldr	r2, [pc, #348]	; (80060e8 <HAL_RCC_OscConfig+0x470>)
 8005f8a:	f023 0301 	bic.w	r3, r3, #1
 8005f8e:	6713      	str	r3, [r2, #112]	; 0x70
 8005f90:	4b55      	ldr	r3, [pc, #340]	; (80060e8 <HAL_RCC_OscConfig+0x470>)
 8005f92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f94:	4a54      	ldr	r2, [pc, #336]	; (80060e8 <HAL_RCC_OscConfig+0x470>)
 8005f96:	f023 0304 	bic.w	r3, r3, #4
 8005f9a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	689b      	ldr	r3, [r3, #8]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d015      	beq.n	8005fd0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fa4:	f7fc f864 	bl	8002070 <HAL_GetTick>
 8005fa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005faa:	e00a      	b.n	8005fc2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005fac:	f7fc f860 	bl	8002070 <HAL_GetTick>
 8005fb0:	4602      	mov	r2, r0
 8005fb2:	693b      	ldr	r3, [r7, #16]
 8005fb4:	1ad3      	subs	r3, r2, r3
 8005fb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d901      	bls.n	8005fc2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005fbe:	2303      	movs	r3, #3
 8005fc0:	e0cb      	b.n	800615a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005fc2:	4b49      	ldr	r3, [pc, #292]	; (80060e8 <HAL_RCC_OscConfig+0x470>)
 8005fc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fc6:	f003 0302 	and.w	r3, r3, #2
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d0ee      	beq.n	8005fac <HAL_RCC_OscConfig+0x334>
 8005fce:	e014      	b.n	8005ffa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005fd0:	f7fc f84e 	bl	8002070 <HAL_GetTick>
 8005fd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005fd6:	e00a      	b.n	8005fee <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005fd8:	f7fc f84a 	bl	8002070 <HAL_GetTick>
 8005fdc:	4602      	mov	r2, r0
 8005fde:	693b      	ldr	r3, [r7, #16]
 8005fe0:	1ad3      	subs	r3, r2, r3
 8005fe2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d901      	bls.n	8005fee <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005fea:	2303      	movs	r3, #3
 8005fec:	e0b5      	b.n	800615a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005fee:	4b3e      	ldr	r3, [pc, #248]	; (80060e8 <HAL_RCC_OscConfig+0x470>)
 8005ff0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ff2:	f003 0302 	and.w	r3, r3, #2
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d1ee      	bne.n	8005fd8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005ffa:	7dfb      	ldrb	r3, [r7, #23]
 8005ffc:	2b01      	cmp	r3, #1
 8005ffe:	d105      	bne.n	800600c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006000:	4b39      	ldr	r3, [pc, #228]	; (80060e8 <HAL_RCC_OscConfig+0x470>)
 8006002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006004:	4a38      	ldr	r2, [pc, #224]	; (80060e8 <HAL_RCC_OscConfig+0x470>)
 8006006:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800600a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	699b      	ldr	r3, [r3, #24]
 8006010:	2b00      	cmp	r3, #0
 8006012:	f000 80a1 	beq.w	8006158 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006016:	4b34      	ldr	r3, [pc, #208]	; (80060e8 <HAL_RCC_OscConfig+0x470>)
 8006018:	689b      	ldr	r3, [r3, #8]
 800601a:	f003 030c 	and.w	r3, r3, #12
 800601e:	2b08      	cmp	r3, #8
 8006020:	d05c      	beq.n	80060dc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	699b      	ldr	r3, [r3, #24]
 8006026:	2b02      	cmp	r3, #2
 8006028:	d141      	bne.n	80060ae <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800602a:	4b31      	ldr	r3, [pc, #196]	; (80060f0 <HAL_RCC_OscConfig+0x478>)
 800602c:	2200      	movs	r2, #0
 800602e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006030:	f7fc f81e 	bl	8002070 <HAL_GetTick>
 8006034:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006036:	e008      	b.n	800604a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006038:	f7fc f81a 	bl	8002070 <HAL_GetTick>
 800603c:	4602      	mov	r2, r0
 800603e:	693b      	ldr	r3, [r7, #16]
 8006040:	1ad3      	subs	r3, r2, r3
 8006042:	2b02      	cmp	r3, #2
 8006044:	d901      	bls.n	800604a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006046:	2303      	movs	r3, #3
 8006048:	e087      	b.n	800615a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800604a:	4b27      	ldr	r3, [pc, #156]	; (80060e8 <HAL_RCC_OscConfig+0x470>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006052:	2b00      	cmp	r3, #0
 8006054:	d1f0      	bne.n	8006038 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	69da      	ldr	r2, [r3, #28]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6a1b      	ldr	r3, [r3, #32]
 800605e:	431a      	orrs	r2, r3
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006064:	019b      	lsls	r3, r3, #6
 8006066:	431a      	orrs	r2, r3
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800606c:	085b      	lsrs	r3, r3, #1
 800606e:	3b01      	subs	r3, #1
 8006070:	041b      	lsls	r3, r3, #16
 8006072:	431a      	orrs	r2, r3
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006078:	061b      	lsls	r3, r3, #24
 800607a:	491b      	ldr	r1, [pc, #108]	; (80060e8 <HAL_RCC_OscConfig+0x470>)
 800607c:	4313      	orrs	r3, r2
 800607e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006080:	4b1b      	ldr	r3, [pc, #108]	; (80060f0 <HAL_RCC_OscConfig+0x478>)
 8006082:	2201      	movs	r2, #1
 8006084:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006086:	f7fb fff3 	bl	8002070 <HAL_GetTick>
 800608a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800608c:	e008      	b.n	80060a0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800608e:	f7fb ffef 	bl	8002070 <HAL_GetTick>
 8006092:	4602      	mov	r2, r0
 8006094:	693b      	ldr	r3, [r7, #16]
 8006096:	1ad3      	subs	r3, r2, r3
 8006098:	2b02      	cmp	r3, #2
 800609a:	d901      	bls.n	80060a0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800609c:	2303      	movs	r3, #3
 800609e:	e05c      	b.n	800615a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80060a0:	4b11      	ldr	r3, [pc, #68]	; (80060e8 <HAL_RCC_OscConfig+0x470>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d0f0      	beq.n	800608e <HAL_RCC_OscConfig+0x416>
 80060ac:	e054      	b.n	8006158 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060ae:	4b10      	ldr	r3, [pc, #64]	; (80060f0 <HAL_RCC_OscConfig+0x478>)
 80060b0:	2200      	movs	r2, #0
 80060b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060b4:	f7fb ffdc 	bl	8002070 <HAL_GetTick>
 80060b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060ba:	e008      	b.n	80060ce <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80060bc:	f7fb ffd8 	bl	8002070 <HAL_GetTick>
 80060c0:	4602      	mov	r2, r0
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	1ad3      	subs	r3, r2, r3
 80060c6:	2b02      	cmp	r3, #2
 80060c8:	d901      	bls.n	80060ce <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80060ca:	2303      	movs	r3, #3
 80060cc:	e045      	b.n	800615a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060ce:	4b06      	ldr	r3, [pc, #24]	; (80060e8 <HAL_RCC_OscConfig+0x470>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d1f0      	bne.n	80060bc <HAL_RCC_OscConfig+0x444>
 80060da:	e03d      	b.n	8006158 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	699b      	ldr	r3, [r3, #24]
 80060e0:	2b01      	cmp	r3, #1
 80060e2:	d107      	bne.n	80060f4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80060e4:	2301      	movs	r3, #1
 80060e6:	e038      	b.n	800615a <HAL_RCC_OscConfig+0x4e2>
 80060e8:	40023800 	.word	0x40023800
 80060ec:	40007000 	.word	0x40007000
 80060f0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80060f4:	4b1b      	ldr	r3, [pc, #108]	; (8006164 <HAL_RCC_OscConfig+0x4ec>)
 80060f6:	685b      	ldr	r3, [r3, #4]
 80060f8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	699b      	ldr	r3, [r3, #24]
 80060fe:	2b01      	cmp	r3, #1
 8006100:	d028      	beq.n	8006154 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800610c:	429a      	cmp	r2, r3
 800610e:	d121      	bne.n	8006154 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800611a:	429a      	cmp	r2, r3
 800611c:	d11a      	bne.n	8006154 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800611e:	68fa      	ldr	r2, [r7, #12]
 8006120:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006124:	4013      	ands	r3, r2
 8006126:	687a      	ldr	r2, [r7, #4]
 8006128:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800612a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800612c:	4293      	cmp	r3, r2
 800612e:	d111      	bne.n	8006154 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800613a:	085b      	lsrs	r3, r3, #1
 800613c:	3b01      	subs	r3, #1
 800613e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006140:	429a      	cmp	r2, r3
 8006142:	d107      	bne.n	8006154 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800614e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006150:	429a      	cmp	r2, r3
 8006152:	d001      	beq.n	8006158 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006154:	2301      	movs	r3, #1
 8006156:	e000      	b.n	800615a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006158:	2300      	movs	r3, #0
}
 800615a:	4618      	mov	r0, r3
 800615c:	3718      	adds	r7, #24
 800615e:	46bd      	mov	sp, r7
 8006160:	bd80      	pop	{r7, pc}
 8006162:	bf00      	nop
 8006164:	40023800 	.word	0x40023800

08006168 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b084      	sub	sp, #16
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
 8006170:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d101      	bne.n	800617c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006178:	2301      	movs	r3, #1
 800617a:	e0cc      	b.n	8006316 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800617c:	4b68      	ldr	r3, [pc, #416]	; (8006320 <HAL_RCC_ClockConfig+0x1b8>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f003 0307 	and.w	r3, r3, #7
 8006184:	683a      	ldr	r2, [r7, #0]
 8006186:	429a      	cmp	r2, r3
 8006188:	d90c      	bls.n	80061a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800618a:	4b65      	ldr	r3, [pc, #404]	; (8006320 <HAL_RCC_ClockConfig+0x1b8>)
 800618c:	683a      	ldr	r2, [r7, #0]
 800618e:	b2d2      	uxtb	r2, r2
 8006190:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006192:	4b63      	ldr	r3, [pc, #396]	; (8006320 <HAL_RCC_ClockConfig+0x1b8>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f003 0307 	and.w	r3, r3, #7
 800619a:	683a      	ldr	r2, [r7, #0]
 800619c:	429a      	cmp	r2, r3
 800619e:	d001      	beq.n	80061a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80061a0:	2301      	movs	r3, #1
 80061a2:	e0b8      	b.n	8006316 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f003 0302 	and.w	r3, r3, #2
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d020      	beq.n	80061f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f003 0304 	and.w	r3, r3, #4
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d005      	beq.n	80061c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80061bc:	4b59      	ldr	r3, [pc, #356]	; (8006324 <HAL_RCC_ClockConfig+0x1bc>)
 80061be:	689b      	ldr	r3, [r3, #8]
 80061c0:	4a58      	ldr	r2, [pc, #352]	; (8006324 <HAL_RCC_ClockConfig+0x1bc>)
 80061c2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80061c6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f003 0308 	and.w	r3, r3, #8
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d005      	beq.n	80061e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80061d4:	4b53      	ldr	r3, [pc, #332]	; (8006324 <HAL_RCC_ClockConfig+0x1bc>)
 80061d6:	689b      	ldr	r3, [r3, #8]
 80061d8:	4a52      	ldr	r2, [pc, #328]	; (8006324 <HAL_RCC_ClockConfig+0x1bc>)
 80061da:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80061de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80061e0:	4b50      	ldr	r3, [pc, #320]	; (8006324 <HAL_RCC_ClockConfig+0x1bc>)
 80061e2:	689b      	ldr	r3, [r3, #8]
 80061e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	689b      	ldr	r3, [r3, #8]
 80061ec:	494d      	ldr	r1, [pc, #308]	; (8006324 <HAL_RCC_ClockConfig+0x1bc>)
 80061ee:	4313      	orrs	r3, r2
 80061f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f003 0301 	and.w	r3, r3, #1
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d044      	beq.n	8006288 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	685b      	ldr	r3, [r3, #4]
 8006202:	2b01      	cmp	r3, #1
 8006204:	d107      	bne.n	8006216 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006206:	4b47      	ldr	r3, [pc, #284]	; (8006324 <HAL_RCC_ClockConfig+0x1bc>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800620e:	2b00      	cmp	r3, #0
 8006210:	d119      	bne.n	8006246 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006212:	2301      	movs	r3, #1
 8006214:	e07f      	b.n	8006316 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	685b      	ldr	r3, [r3, #4]
 800621a:	2b02      	cmp	r3, #2
 800621c:	d003      	beq.n	8006226 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006222:	2b03      	cmp	r3, #3
 8006224:	d107      	bne.n	8006236 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006226:	4b3f      	ldr	r3, [pc, #252]	; (8006324 <HAL_RCC_ClockConfig+0x1bc>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800622e:	2b00      	cmp	r3, #0
 8006230:	d109      	bne.n	8006246 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006232:	2301      	movs	r3, #1
 8006234:	e06f      	b.n	8006316 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006236:	4b3b      	ldr	r3, [pc, #236]	; (8006324 <HAL_RCC_ClockConfig+0x1bc>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f003 0302 	and.w	r3, r3, #2
 800623e:	2b00      	cmp	r3, #0
 8006240:	d101      	bne.n	8006246 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006242:	2301      	movs	r3, #1
 8006244:	e067      	b.n	8006316 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006246:	4b37      	ldr	r3, [pc, #220]	; (8006324 <HAL_RCC_ClockConfig+0x1bc>)
 8006248:	689b      	ldr	r3, [r3, #8]
 800624a:	f023 0203 	bic.w	r2, r3, #3
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	685b      	ldr	r3, [r3, #4]
 8006252:	4934      	ldr	r1, [pc, #208]	; (8006324 <HAL_RCC_ClockConfig+0x1bc>)
 8006254:	4313      	orrs	r3, r2
 8006256:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006258:	f7fb ff0a 	bl	8002070 <HAL_GetTick>
 800625c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800625e:	e00a      	b.n	8006276 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006260:	f7fb ff06 	bl	8002070 <HAL_GetTick>
 8006264:	4602      	mov	r2, r0
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	1ad3      	subs	r3, r2, r3
 800626a:	f241 3288 	movw	r2, #5000	; 0x1388
 800626e:	4293      	cmp	r3, r2
 8006270:	d901      	bls.n	8006276 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006272:	2303      	movs	r3, #3
 8006274:	e04f      	b.n	8006316 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006276:	4b2b      	ldr	r3, [pc, #172]	; (8006324 <HAL_RCC_ClockConfig+0x1bc>)
 8006278:	689b      	ldr	r3, [r3, #8]
 800627a:	f003 020c 	and.w	r2, r3, #12
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	009b      	lsls	r3, r3, #2
 8006284:	429a      	cmp	r2, r3
 8006286:	d1eb      	bne.n	8006260 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006288:	4b25      	ldr	r3, [pc, #148]	; (8006320 <HAL_RCC_ClockConfig+0x1b8>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f003 0307 	and.w	r3, r3, #7
 8006290:	683a      	ldr	r2, [r7, #0]
 8006292:	429a      	cmp	r2, r3
 8006294:	d20c      	bcs.n	80062b0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006296:	4b22      	ldr	r3, [pc, #136]	; (8006320 <HAL_RCC_ClockConfig+0x1b8>)
 8006298:	683a      	ldr	r2, [r7, #0]
 800629a:	b2d2      	uxtb	r2, r2
 800629c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800629e:	4b20      	ldr	r3, [pc, #128]	; (8006320 <HAL_RCC_ClockConfig+0x1b8>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f003 0307 	and.w	r3, r3, #7
 80062a6:	683a      	ldr	r2, [r7, #0]
 80062a8:	429a      	cmp	r2, r3
 80062aa:	d001      	beq.n	80062b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80062ac:	2301      	movs	r3, #1
 80062ae:	e032      	b.n	8006316 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f003 0304 	and.w	r3, r3, #4
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d008      	beq.n	80062ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80062bc:	4b19      	ldr	r3, [pc, #100]	; (8006324 <HAL_RCC_ClockConfig+0x1bc>)
 80062be:	689b      	ldr	r3, [r3, #8]
 80062c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	68db      	ldr	r3, [r3, #12]
 80062c8:	4916      	ldr	r1, [pc, #88]	; (8006324 <HAL_RCC_ClockConfig+0x1bc>)
 80062ca:	4313      	orrs	r3, r2
 80062cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f003 0308 	and.w	r3, r3, #8
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d009      	beq.n	80062ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80062da:	4b12      	ldr	r3, [pc, #72]	; (8006324 <HAL_RCC_ClockConfig+0x1bc>)
 80062dc:	689b      	ldr	r3, [r3, #8]
 80062de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	691b      	ldr	r3, [r3, #16]
 80062e6:	00db      	lsls	r3, r3, #3
 80062e8:	490e      	ldr	r1, [pc, #56]	; (8006324 <HAL_RCC_ClockConfig+0x1bc>)
 80062ea:	4313      	orrs	r3, r2
 80062ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80062ee:	f000 f821 	bl	8006334 <HAL_RCC_GetSysClockFreq>
 80062f2:	4602      	mov	r2, r0
 80062f4:	4b0b      	ldr	r3, [pc, #44]	; (8006324 <HAL_RCC_ClockConfig+0x1bc>)
 80062f6:	689b      	ldr	r3, [r3, #8]
 80062f8:	091b      	lsrs	r3, r3, #4
 80062fa:	f003 030f 	and.w	r3, r3, #15
 80062fe:	490a      	ldr	r1, [pc, #40]	; (8006328 <HAL_RCC_ClockConfig+0x1c0>)
 8006300:	5ccb      	ldrb	r3, [r1, r3]
 8006302:	fa22 f303 	lsr.w	r3, r2, r3
 8006306:	4a09      	ldr	r2, [pc, #36]	; (800632c <HAL_RCC_ClockConfig+0x1c4>)
 8006308:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800630a:	4b09      	ldr	r3, [pc, #36]	; (8006330 <HAL_RCC_ClockConfig+0x1c8>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4618      	mov	r0, r3
 8006310:	f7fb fe6a 	bl	8001fe8 <HAL_InitTick>

  return HAL_OK;
 8006314:	2300      	movs	r3, #0
}
 8006316:	4618      	mov	r0, r3
 8006318:	3710      	adds	r7, #16
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}
 800631e:	bf00      	nop
 8006320:	40023c00 	.word	0x40023c00
 8006324:	40023800 	.word	0x40023800
 8006328:	0800d298 	.word	0x0800d298
 800632c:	2000001c 	.word	0x2000001c
 8006330:	20000020 	.word	0x20000020

08006334 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006334:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006338:	b090      	sub	sp, #64	; 0x40
 800633a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800633c:	2300      	movs	r3, #0
 800633e:	637b      	str	r3, [r7, #52]	; 0x34
 8006340:	2300      	movs	r3, #0
 8006342:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006344:	2300      	movs	r3, #0
 8006346:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8006348:	2300      	movs	r3, #0
 800634a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800634c:	4b59      	ldr	r3, [pc, #356]	; (80064b4 <HAL_RCC_GetSysClockFreq+0x180>)
 800634e:	689b      	ldr	r3, [r3, #8]
 8006350:	f003 030c 	and.w	r3, r3, #12
 8006354:	2b08      	cmp	r3, #8
 8006356:	d00d      	beq.n	8006374 <HAL_RCC_GetSysClockFreq+0x40>
 8006358:	2b08      	cmp	r3, #8
 800635a:	f200 80a1 	bhi.w	80064a0 <HAL_RCC_GetSysClockFreq+0x16c>
 800635e:	2b00      	cmp	r3, #0
 8006360:	d002      	beq.n	8006368 <HAL_RCC_GetSysClockFreq+0x34>
 8006362:	2b04      	cmp	r3, #4
 8006364:	d003      	beq.n	800636e <HAL_RCC_GetSysClockFreq+0x3a>
 8006366:	e09b      	b.n	80064a0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006368:	4b53      	ldr	r3, [pc, #332]	; (80064b8 <HAL_RCC_GetSysClockFreq+0x184>)
 800636a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800636c:	e09b      	b.n	80064a6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800636e:	4b53      	ldr	r3, [pc, #332]	; (80064bc <HAL_RCC_GetSysClockFreq+0x188>)
 8006370:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006372:	e098      	b.n	80064a6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006374:	4b4f      	ldr	r3, [pc, #316]	; (80064b4 <HAL_RCC_GetSysClockFreq+0x180>)
 8006376:	685b      	ldr	r3, [r3, #4]
 8006378:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800637c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800637e:	4b4d      	ldr	r3, [pc, #308]	; (80064b4 <HAL_RCC_GetSysClockFreq+0x180>)
 8006380:	685b      	ldr	r3, [r3, #4]
 8006382:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006386:	2b00      	cmp	r3, #0
 8006388:	d028      	beq.n	80063dc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800638a:	4b4a      	ldr	r3, [pc, #296]	; (80064b4 <HAL_RCC_GetSysClockFreq+0x180>)
 800638c:	685b      	ldr	r3, [r3, #4]
 800638e:	099b      	lsrs	r3, r3, #6
 8006390:	2200      	movs	r2, #0
 8006392:	623b      	str	r3, [r7, #32]
 8006394:	627a      	str	r2, [r7, #36]	; 0x24
 8006396:	6a3b      	ldr	r3, [r7, #32]
 8006398:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800639c:	2100      	movs	r1, #0
 800639e:	4b47      	ldr	r3, [pc, #284]	; (80064bc <HAL_RCC_GetSysClockFreq+0x188>)
 80063a0:	fb03 f201 	mul.w	r2, r3, r1
 80063a4:	2300      	movs	r3, #0
 80063a6:	fb00 f303 	mul.w	r3, r0, r3
 80063aa:	4413      	add	r3, r2
 80063ac:	4a43      	ldr	r2, [pc, #268]	; (80064bc <HAL_RCC_GetSysClockFreq+0x188>)
 80063ae:	fba0 1202 	umull	r1, r2, r0, r2
 80063b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80063b4:	460a      	mov	r2, r1
 80063b6:	62ba      	str	r2, [r7, #40]	; 0x28
 80063b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80063ba:	4413      	add	r3, r2
 80063bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80063be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063c0:	2200      	movs	r2, #0
 80063c2:	61bb      	str	r3, [r7, #24]
 80063c4:	61fa      	str	r2, [r7, #28]
 80063c6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80063ca:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80063ce:	f7f9 ff57 	bl	8000280 <__aeabi_uldivmod>
 80063d2:	4602      	mov	r2, r0
 80063d4:	460b      	mov	r3, r1
 80063d6:	4613      	mov	r3, r2
 80063d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80063da:	e053      	b.n	8006484 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80063dc:	4b35      	ldr	r3, [pc, #212]	; (80064b4 <HAL_RCC_GetSysClockFreq+0x180>)
 80063de:	685b      	ldr	r3, [r3, #4]
 80063e0:	099b      	lsrs	r3, r3, #6
 80063e2:	2200      	movs	r2, #0
 80063e4:	613b      	str	r3, [r7, #16]
 80063e6:	617a      	str	r2, [r7, #20]
 80063e8:	693b      	ldr	r3, [r7, #16]
 80063ea:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80063ee:	f04f 0b00 	mov.w	fp, #0
 80063f2:	4652      	mov	r2, sl
 80063f4:	465b      	mov	r3, fp
 80063f6:	f04f 0000 	mov.w	r0, #0
 80063fa:	f04f 0100 	mov.w	r1, #0
 80063fe:	0159      	lsls	r1, r3, #5
 8006400:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006404:	0150      	lsls	r0, r2, #5
 8006406:	4602      	mov	r2, r0
 8006408:	460b      	mov	r3, r1
 800640a:	ebb2 080a 	subs.w	r8, r2, sl
 800640e:	eb63 090b 	sbc.w	r9, r3, fp
 8006412:	f04f 0200 	mov.w	r2, #0
 8006416:	f04f 0300 	mov.w	r3, #0
 800641a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800641e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006422:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006426:	ebb2 0408 	subs.w	r4, r2, r8
 800642a:	eb63 0509 	sbc.w	r5, r3, r9
 800642e:	f04f 0200 	mov.w	r2, #0
 8006432:	f04f 0300 	mov.w	r3, #0
 8006436:	00eb      	lsls	r3, r5, #3
 8006438:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800643c:	00e2      	lsls	r2, r4, #3
 800643e:	4614      	mov	r4, r2
 8006440:	461d      	mov	r5, r3
 8006442:	eb14 030a 	adds.w	r3, r4, sl
 8006446:	603b      	str	r3, [r7, #0]
 8006448:	eb45 030b 	adc.w	r3, r5, fp
 800644c:	607b      	str	r3, [r7, #4]
 800644e:	f04f 0200 	mov.w	r2, #0
 8006452:	f04f 0300 	mov.w	r3, #0
 8006456:	e9d7 4500 	ldrd	r4, r5, [r7]
 800645a:	4629      	mov	r1, r5
 800645c:	028b      	lsls	r3, r1, #10
 800645e:	4621      	mov	r1, r4
 8006460:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006464:	4621      	mov	r1, r4
 8006466:	028a      	lsls	r2, r1, #10
 8006468:	4610      	mov	r0, r2
 800646a:	4619      	mov	r1, r3
 800646c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800646e:	2200      	movs	r2, #0
 8006470:	60bb      	str	r3, [r7, #8]
 8006472:	60fa      	str	r2, [r7, #12]
 8006474:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006478:	f7f9 ff02 	bl	8000280 <__aeabi_uldivmod>
 800647c:	4602      	mov	r2, r0
 800647e:	460b      	mov	r3, r1
 8006480:	4613      	mov	r3, r2
 8006482:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006484:	4b0b      	ldr	r3, [pc, #44]	; (80064b4 <HAL_RCC_GetSysClockFreq+0x180>)
 8006486:	685b      	ldr	r3, [r3, #4]
 8006488:	0c1b      	lsrs	r3, r3, #16
 800648a:	f003 0303 	and.w	r3, r3, #3
 800648e:	3301      	adds	r3, #1
 8006490:	005b      	lsls	r3, r3, #1
 8006492:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8006494:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006498:	fbb2 f3f3 	udiv	r3, r2, r3
 800649c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800649e:	e002      	b.n	80064a6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80064a0:	4b05      	ldr	r3, [pc, #20]	; (80064b8 <HAL_RCC_GetSysClockFreq+0x184>)
 80064a2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80064a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80064a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80064a8:	4618      	mov	r0, r3
 80064aa:	3740      	adds	r7, #64	; 0x40
 80064ac:	46bd      	mov	sp, r7
 80064ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80064b2:	bf00      	nop
 80064b4:	40023800 	.word	0x40023800
 80064b8:	00f42400 	.word	0x00f42400
 80064bc:	017d7840 	.word	0x017d7840

080064c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80064c0:	b480      	push	{r7}
 80064c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80064c4:	4b03      	ldr	r3, [pc, #12]	; (80064d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80064c6:	681b      	ldr	r3, [r3, #0]
}
 80064c8:	4618      	mov	r0, r3
 80064ca:	46bd      	mov	sp, r7
 80064cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d0:	4770      	bx	lr
 80064d2:	bf00      	nop
 80064d4:	2000001c 	.word	0x2000001c

080064d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80064dc:	f7ff fff0 	bl	80064c0 <HAL_RCC_GetHCLKFreq>
 80064e0:	4602      	mov	r2, r0
 80064e2:	4b05      	ldr	r3, [pc, #20]	; (80064f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80064e4:	689b      	ldr	r3, [r3, #8]
 80064e6:	0a9b      	lsrs	r3, r3, #10
 80064e8:	f003 0307 	and.w	r3, r3, #7
 80064ec:	4903      	ldr	r1, [pc, #12]	; (80064fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80064ee:	5ccb      	ldrb	r3, [r1, r3]
 80064f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80064f4:	4618      	mov	r0, r3
 80064f6:	bd80      	pop	{r7, pc}
 80064f8:	40023800 	.word	0x40023800
 80064fc:	0800d2a8 	.word	0x0800d2a8

08006500 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006504:	f7ff ffdc 	bl	80064c0 <HAL_RCC_GetHCLKFreq>
 8006508:	4602      	mov	r2, r0
 800650a:	4b05      	ldr	r3, [pc, #20]	; (8006520 <HAL_RCC_GetPCLK2Freq+0x20>)
 800650c:	689b      	ldr	r3, [r3, #8]
 800650e:	0b5b      	lsrs	r3, r3, #13
 8006510:	f003 0307 	and.w	r3, r3, #7
 8006514:	4903      	ldr	r1, [pc, #12]	; (8006524 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006516:	5ccb      	ldrb	r3, [r1, r3]
 8006518:	fa22 f303 	lsr.w	r3, r2, r3
}
 800651c:	4618      	mov	r0, r3
 800651e:	bd80      	pop	{r7, pc}
 8006520:	40023800 	.word	0x40023800
 8006524:	0800d2a8 	.word	0x0800d2a8

08006528 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b082      	sub	sp, #8
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d101      	bne.n	800653a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006536:	2301      	movs	r3, #1
 8006538:	e07b      	b.n	8006632 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800653e:	2b00      	cmp	r3, #0
 8006540:	d108      	bne.n	8006554 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	685b      	ldr	r3, [r3, #4]
 8006546:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800654a:	d009      	beq.n	8006560 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2200      	movs	r2, #0
 8006550:	61da      	str	r2, [r3, #28]
 8006552:	e005      	b.n	8006560 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2200      	movs	r2, #0
 8006558:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2200      	movs	r2, #0
 800655e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2200      	movs	r2, #0
 8006564:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800656c:	b2db      	uxtb	r3, r3
 800656e:	2b00      	cmp	r3, #0
 8006570:	d106      	bne.n	8006580 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2200      	movs	r2, #0
 8006576:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800657a:	6878      	ldr	r0, [r7, #4]
 800657c:	f7fb f9d4 	bl	8001928 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2202      	movs	r2, #2
 8006584:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	681a      	ldr	r2, [r3, #0]
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006596:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	685b      	ldr	r3, [r3, #4]
 800659c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	689b      	ldr	r3, [r3, #8]
 80065a4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80065a8:	431a      	orrs	r2, r3
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	68db      	ldr	r3, [r3, #12]
 80065ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80065b2:	431a      	orrs	r2, r3
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	691b      	ldr	r3, [r3, #16]
 80065b8:	f003 0302 	and.w	r3, r3, #2
 80065bc:	431a      	orrs	r2, r3
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	695b      	ldr	r3, [r3, #20]
 80065c2:	f003 0301 	and.w	r3, r3, #1
 80065c6:	431a      	orrs	r2, r3
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	699b      	ldr	r3, [r3, #24]
 80065cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80065d0:	431a      	orrs	r2, r3
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	69db      	ldr	r3, [r3, #28]
 80065d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80065da:	431a      	orrs	r2, r3
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6a1b      	ldr	r3, [r3, #32]
 80065e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065e4:	ea42 0103 	orr.w	r1, r2, r3
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065ec:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	430a      	orrs	r2, r1
 80065f6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	699b      	ldr	r3, [r3, #24]
 80065fc:	0c1b      	lsrs	r3, r3, #16
 80065fe:	f003 0104 	and.w	r1, r3, #4
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006606:	f003 0210 	and.w	r2, r3, #16
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	430a      	orrs	r2, r1
 8006610:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	69da      	ldr	r2, [r3, #28]
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006620:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2200      	movs	r2, #0
 8006626:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2201      	movs	r2, #1
 800662c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006630:	2300      	movs	r3, #0
}
 8006632:	4618      	mov	r0, r3
 8006634:	3708      	adds	r7, #8
 8006636:	46bd      	mov	sp, r7
 8006638:	bd80      	pop	{r7, pc}

0800663a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800663a:	b580      	push	{r7, lr}
 800663c:	b082      	sub	sp, #8
 800663e:	af00      	add	r7, sp, #0
 8006640:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d101      	bne.n	800664c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006648:	2301      	movs	r3, #1
 800664a:	e041      	b.n	80066d0 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006652:	b2db      	uxtb	r3, r3
 8006654:	2b00      	cmp	r3, #0
 8006656:	d106      	bne.n	8006666 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2200      	movs	r2, #0
 800665c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006660:	6878      	ldr	r0, [r7, #4]
 8006662:	f7fb faf9 	bl	8001c58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2202      	movs	r2, #2
 800666a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681a      	ldr	r2, [r3, #0]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	3304      	adds	r3, #4
 8006676:	4619      	mov	r1, r3
 8006678:	4610      	mov	r0, r2
 800667a:	f000 fd75 	bl	8007168 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2201      	movs	r2, #1
 8006682:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2201      	movs	r2, #1
 800668a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2201      	movs	r2, #1
 8006692:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2201      	movs	r2, #1
 800669a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2201      	movs	r2, #1
 80066a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2201      	movs	r2, #1
 80066aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2201      	movs	r2, #1
 80066b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2201      	movs	r2, #1
 80066ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2201      	movs	r2, #1
 80066c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2201      	movs	r2, #1
 80066ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80066ce:	2300      	movs	r3, #0
}
 80066d0:	4618      	mov	r0, r3
 80066d2:	3708      	adds	r7, #8
 80066d4:	46bd      	mov	sp, r7
 80066d6:	bd80      	pop	{r7, pc}

080066d8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b082      	sub	sp, #8
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d101      	bne.n	80066ea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80066e6:	2301      	movs	r3, #1
 80066e8:	e041      	b.n	800676e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066f0:	b2db      	uxtb	r3, r3
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d106      	bne.n	8006704 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2200      	movs	r2, #0
 80066fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	f000 f839 	bl	8006776 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2202      	movs	r2, #2
 8006708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681a      	ldr	r2, [r3, #0]
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	3304      	adds	r3, #4
 8006714:	4619      	mov	r1, r3
 8006716:	4610      	mov	r0, r2
 8006718:	f000 fd26 	bl	8007168 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2201      	movs	r2, #1
 8006720:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2201      	movs	r2, #1
 8006728:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2201      	movs	r2, #1
 8006730:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2201      	movs	r2, #1
 8006738:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2201      	movs	r2, #1
 8006740:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2201      	movs	r2, #1
 8006748:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2201      	movs	r2, #1
 8006750:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2201      	movs	r2, #1
 8006758:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2201      	movs	r2, #1
 8006760:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2201      	movs	r2, #1
 8006768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800676c:	2300      	movs	r3, #0
}
 800676e:	4618      	mov	r0, r3
 8006770:	3708      	adds	r7, #8
 8006772:	46bd      	mov	sp, r7
 8006774:	bd80      	pop	{r7, pc}

08006776 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006776:	b480      	push	{r7}
 8006778:	b083      	sub	sp, #12
 800677a:	af00      	add	r7, sp, #0
 800677c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800677e:	bf00      	nop
 8006780:	370c      	adds	r7, #12
 8006782:	46bd      	mov	sp, r7
 8006784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006788:	4770      	bx	lr
	...

0800678c <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b086      	sub	sp, #24
 8006790:	af00      	add	r7, sp, #0
 8006792:	60f8      	str	r0, [r7, #12]
 8006794:	60b9      	str	r1, [r7, #8]
 8006796:	607a      	str	r2, [r7, #4]
 8006798:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800679a:	2300      	movs	r3, #0
 800679c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d109      	bne.n	80067b8 <HAL_TIM_PWM_Start_DMA+0x2c>
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80067aa:	b2db      	uxtb	r3, r3
 80067ac:	2b02      	cmp	r3, #2
 80067ae:	bf0c      	ite	eq
 80067b0:	2301      	moveq	r3, #1
 80067b2:	2300      	movne	r3, #0
 80067b4:	b2db      	uxtb	r3, r3
 80067b6:	e022      	b.n	80067fe <HAL_TIM_PWM_Start_DMA+0x72>
 80067b8:	68bb      	ldr	r3, [r7, #8]
 80067ba:	2b04      	cmp	r3, #4
 80067bc:	d109      	bne.n	80067d2 <HAL_TIM_PWM_Start_DMA+0x46>
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80067c4:	b2db      	uxtb	r3, r3
 80067c6:	2b02      	cmp	r3, #2
 80067c8:	bf0c      	ite	eq
 80067ca:	2301      	moveq	r3, #1
 80067cc:	2300      	movne	r3, #0
 80067ce:	b2db      	uxtb	r3, r3
 80067d0:	e015      	b.n	80067fe <HAL_TIM_PWM_Start_DMA+0x72>
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	2b08      	cmp	r3, #8
 80067d6:	d109      	bne.n	80067ec <HAL_TIM_PWM_Start_DMA+0x60>
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80067de:	b2db      	uxtb	r3, r3
 80067e0:	2b02      	cmp	r3, #2
 80067e2:	bf0c      	ite	eq
 80067e4:	2301      	moveq	r3, #1
 80067e6:	2300      	movne	r3, #0
 80067e8:	b2db      	uxtb	r3, r3
 80067ea:	e008      	b.n	80067fe <HAL_TIM_PWM_Start_DMA+0x72>
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80067f2:	b2db      	uxtb	r3, r3
 80067f4:	2b02      	cmp	r3, #2
 80067f6:	bf0c      	ite	eq
 80067f8:	2301      	moveq	r3, #1
 80067fa:	2300      	movne	r3, #0
 80067fc:	b2db      	uxtb	r3, r3
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d001      	beq.n	8006806 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8006802:	2302      	movs	r3, #2
 8006804:	e15d      	b.n	8006ac2 <HAL_TIM_PWM_Start_DMA+0x336>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d109      	bne.n	8006820 <HAL_TIM_PWM_Start_DMA+0x94>
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006812:	b2db      	uxtb	r3, r3
 8006814:	2b01      	cmp	r3, #1
 8006816:	bf0c      	ite	eq
 8006818:	2301      	moveq	r3, #1
 800681a:	2300      	movne	r3, #0
 800681c:	b2db      	uxtb	r3, r3
 800681e:	e022      	b.n	8006866 <HAL_TIM_PWM_Start_DMA+0xda>
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	2b04      	cmp	r3, #4
 8006824:	d109      	bne.n	800683a <HAL_TIM_PWM_Start_DMA+0xae>
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800682c:	b2db      	uxtb	r3, r3
 800682e:	2b01      	cmp	r3, #1
 8006830:	bf0c      	ite	eq
 8006832:	2301      	moveq	r3, #1
 8006834:	2300      	movne	r3, #0
 8006836:	b2db      	uxtb	r3, r3
 8006838:	e015      	b.n	8006866 <HAL_TIM_PWM_Start_DMA+0xda>
 800683a:	68bb      	ldr	r3, [r7, #8]
 800683c:	2b08      	cmp	r3, #8
 800683e:	d109      	bne.n	8006854 <HAL_TIM_PWM_Start_DMA+0xc8>
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006846:	b2db      	uxtb	r3, r3
 8006848:	2b01      	cmp	r3, #1
 800684a:	bf0c      	ite	eq
 800684c:	2301      	moveq	r3, #1
 800684e:	2300      	movne	r3, #0
 8006850:	b2db      	uxtb	r3, r3
 8006852:	e008      	b.n	8006866 <HAL_TIM_PWM_Start_DMA+0xda>
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800685a:	b2db      	uxtb	r3, r3
 800685c:	2b01      	cmp	r3, #1
 800685e:	bf0c      	ite	eq
 8006860:	2301      	moveq	r3, #1
 8006862:	2300      	movne	r3, #0
 8006864:	b2db      	uxtb	r3, r3
 8006866:	2b00      	cmp	r3, #0
 8006868:	d024      	beq.n	80068b4 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d104      	bne.n	800687a <HAL_TIM_PWM_Start_DMA+0xee>
 8006870:	887b      	ldrh	r3, [r7, #2]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d001      	beq.n	800687a <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8006876:	2301      	movs	r3, #1
 8006878:	e123      	b.n	8006ac2 <HAL_TIM_PWM_Start_DMA+0x336>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d104      	bne.n	800688a <HAL_TIM_PWM_Start_DMA+0xfe>
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	2202      	movs	r2, #2
 8006884:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006888:	e016      	b.n	80068b8 <HAL_TIM_PWM_Start_DMA+0x12c>
 800688a:	68bb      	ldr	r3, [r7, #8]
 800688c:	2b04      	cmp	r3, #4
 800688e:	d104      	bne.n	800689a <HAL_TIM_PWM_Start_DMA+0x10e>
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	2202      	movs	r2, #2
 8006894:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006898:	e00e      	b.n	80068b8 <HAL_TIM_PWM_Start_DMA+0x12c>
 800689a:	68bb      	ldr	r3, [r7, #8]
 800689c:	2b08      	cmp	r3, #8
 800689e:	d104      	bne.n	80068aa <HAL_TIM_PWM_Start_DMA+0x11e>
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	2202      	movs	r2, #2
 80068a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80068a8:	e006      	b.n	80068b8 <HAL_TIM_PWM_Start_DMA+0x12c>
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	2202      	movs	r2, #2
 80068ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80068b2:	e001      	b.n	80068b8 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 80068b4:	2301      	movs	r3, #1
 80068b6:	e104      	b.n	8006ac2 <HAL_TIM_PWM_Start_DMA+0x336>
  }

  switch (Channel)
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	2b0c      	cmp	r3, #12
 80068bc:	f200 80ae 	bhi.w	8006a1c <HAL_TIM_PWM_Start_DMA+0x290>
 80068c0:	a201      	add	r2, pc, #4	; (adr r2, 80068c8 <HAL_TIM_PWM_Start_DMA+0x13c>)
 80068c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068c6:	bf00      	nop
 80068c8:	080068fd 	.word	0x080068fd
 80068cc:	08006a1d 	.word	0x08006a1d
 80068d0:	08006a1d 	.word	0x08006a1d
 80068d4:	08006a1d 	.word	0x08006a1d
 80068d8:	08006945 	.word	0x08006945
 80068dc:	08006a1d 	.word	0x08006a1d
 80068e0:	08006a1d 	.word	0x08006a1d
 80068e4:	08006a1d 	.word	0x08006a1d
 80068e8:	0800698d 	.word	0x0800698d
 80068ec:	08006a1d 	.word	0x08006a1d
 80068f0:	08006a1d 	.word	0x08006a1d
 80068f4:	08006a1d 	.word	0x08006a1d
 80068f8:	080069d5 	.word	0x080069d5
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006900:	4a72      	ldr	r2, [pc, #456]	; (8006acc <HAL_TIM_PWM_Start_DMA+0x340>)
 8006902:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006908:	4a71      	ldr	r2, [pc, #452]	; (8006ad0 <HAL_TIM_PWM_Start_DMA+0x344>)
 800690a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006910:	4a70      	ldr	r2, [pc, #448]	; (8006ad4 <HAL_TIM_PWM_Start_DMA+0x348>)
 8006912:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8006918:	6879      	ldr	r1, [r7, #4]
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	3334      	adds	r3, #52	; 0x34
 8006920:	461a      	mov	r2, r3
 8006922:	887b      	ldrh	r3, [r7, #2]
 8006924:	f7fc fa4e 	bl	8002dc4 <HAL_DMA_Start_IT>
 8006928:	4603      	mov	r3, r0
 800692a:	2b00      	cmp	r3, #0
 800692c:	d001      	beq.n	8006932 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800692e:	2301      	movs	r3, #1
 8006930:	e0c7      	b.n	8006ac2 <HAL_TIM_PWM_Start_DMA+0x336>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	68da      	ldr	r2, [r3, #12]
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006940:	60da      	str	r2, [r3, #12]
      break;
 8006942:	e06e      	b.n	8006a22 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006948:	4a60      	ldr	r2, [pc, #384]	; (8006acc <HAL_TIM_PWM_Start_DMA+0x340>)
 800694a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006950:	4a5f      	ldr	r2, [pc, #380]	; (8006ad0 <HAL_TIM_PWM_Start_DMA+0x344>)
 8006952:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006958:	4a5e      	ldr	r2, [pc, #376]	; (8006ad4 <HAL_TIM_PWM_Start_DMA+0x348>)
 800695a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8006960:	6879      	ldr	r1, [r7, #4]
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	3338      	adds	r3, #56	; 0x38
 8006968:	461a      	mov	r2, r3
 800696a:	887b      	ldrh	r3, [r7, #2]
 800696c:	f7fc fa2a 	bl	8002dc4 <HAL_DMA_Start_IT>
 8006970:	4603      	mov	r3, r0
 8006972:	2b00      	cmp	r3, #0
 8006974:	d001      	beq.n	800697a <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006976:	2301      	movs	r3, #1
 8006978:	e0a3      	b.n	8006ac2 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	68da      	ldr	r2, [r3, #12]
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006988:	60da      	str	r2, [r3, #12]
      break;
 800698a:	e04a      	b.n	8006a22 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006990:	4a4e      	ldr	r2, [pc, #312]	; (8006acc <HAL_TIM_PWM_Start_DMA+0x340>)
 8006992:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006998:	4a4d      	ldr	r2, [pc, #308]	; (8006ad0 <HAL_TIM_PWM_Start_DMA+0x344>)
 800699a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069a0:	4a4c      	ldr	r2, [pc, #304]	; (8006ad4 <HAL_TIM_PWM_Start_DMA+0x348>)
 80069a2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80069a8:	6879      	ldr	r1, [r7, #4]
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	333c      	adds	r3, #60	; 0x3c
 80069b0:	461a      	mov	r2, r3
 80069b2:	887b      	ldrh	r3, [r7, #2]
 80069b4:	f7fc fa06 	bl	8002dc4 <HAL_DMA_Start_IT>
 80069b8:	4603      	mov	r3, r0
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d001      	beq.n	80069c2 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80069be:	2301      	movs	r3, #1
 80069c0:	e07f      	b.n	8006ac2 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	68da      	ldr	r2, [r3, #12]
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80069d0:	60da      	str	r2, [r3, #12]
      break;
 80069d2:	e026      	b.n	8006a22 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069d8:	4a3c      	ldr	r2, [pc, #240]	; (8006acc <HAL_TIM_PWM_Start_DMA+0x340>)
 80069da:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069e0:	4a3b      	ldr	r2, [pc, #236]	; (8006ad0 <HAL_TIM_PWM_Start_DMA+0x344>)
 80069e2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069e8:	4a3a      	ldr	r2, [pc, #232]	; (8006ad4 <HAL_TIM_PWM_Start_DMA+0x348>)
 80069ea:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80069f0:	6879      	ldr	r1, [r7, #4]
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	3340      	adds	r3, #64	; 0x40
 80069f8:	461a      	mov	r2, r3
 80069fa:	887b      	ldrh	r3, [r7, #2]
 80069fc:	f7fc f9e2 	bl	8002dc4 <HAL_DMA_Start_IT>
 8006a00:	4603      	mov	r3, r0
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d001      	beq.n	8006a0a <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006a06:	2301      	movs	r3, #1
 8006a08:	e05b      	b.n	8006ac2 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	68da      	ldr	r2, [r3, #12]
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006a18:	60da      	str	r2, [r3, #12]
      break;
 8006a1a:	e002      	b.n	8006a22 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	75fb      	strb	r3, [r7, #23]
      break;
 8006a20:	bf00      	nop
  }

  if (status == HAL_OK)
 8006a22:	7dfb      	ldrb	r3, [r7, #23]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d14b      	bne.n	8006ac0 <HAL_TIM_PWM_Start_DMA+0x334>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	2201      	movs	r2, #1
 8006a2e:	68b9      	ldr	r1, [r7, #8]
 8006a30:	4618      	mov	r0, r3
 8006a32:	f000 fe3f 	bl	80076b4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4a27      	ldr	r2, [pc, #156]	; (8006ad8 <HAL_TIM_PWM_Start_DMA+0x34c>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d107      	bne.n	8006a50 <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006a4e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	4a20      	ldr	r2, [pc, #128]	; (8006ad8 <HAL_TIM_PWM_Start_DMA+0x34c>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d018      	beq.n	8006a8c <HAL_TIM_PWM_Start_DMA+0x300>
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a62:	d013      	beq.n	8006a8c <HAL_TIM_PWM_Start_DMA+0x300>
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	4a1c      	ldr	r2, [pc, #112]	; (8006adc <HAL_TIM_PWM_Start_DMA+0x350>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d00e      	beq.n	8006a8c <HAL_TIM_PWM_Start_DMA+0x300>
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	4a1b      	ldr	r2, [pc, #108]	; (8006ae0 <HAL_TIM_PWM_Start_DMA+0x354>)
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d009      	beq.n	8006a8c <HAL_TIM_PWM_Start_DMA+0x300>
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4a19      	ldr	r2, [pc, #100]	; (8006ae4 <HAL_TIM_PWM_Start_DMA+0x358>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d004      	beq.n	8006a8c <HAL_TIM_PWM_Start_DMA+0x300>
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	4a18      	ldr	r2, [pc, #96]	; (8006ae8 <HAL_TIM_PWM_Start_DMA+0x35c>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d111      	bne.n	8006ab0 <HAL_TIM_PWM_Start_DMA+0x324>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	689b      	ldr	r3, [r3, #8]
 8006a92:	f003 0307 	and.w	r3, r3, #7
 8006a96:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a98:	693b      	ldr	r3, [r7, #16]
 8006a9a:	2b06      	cmp	r3, #6
 8006a9c:	d010      	beq.n	8006ac0 <HAL_TIM_PWM_Start_DMA+0x334>
      {
        __HAL_TIM_ENABLE(htim);
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	681a      	ldr	r2, [r3, #0]
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f042 0201 	orr.w	r2, r2, #1
 8006aac:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006aae:	e007      	b.n	8006ac0 <HAL_TIM_PWM_Start_DMA+0x334>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	681a      	ldr	r2, [r3, #0]
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f042 0201 	orr.w	r2, r2, #1
 8006abe:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8006ac0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	3718      	adds	r7, #24
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bd80      	pop	{r7, pc}
 8006aca:	bf00      	nop
 8006acc:	08007059 	.word	0x08007059
 8006ad0:	08007101 	.word	0x08007101
 8006ad4:	08006fc7 	.word	0x08006fc7
 8006ad8:	40010000 	.word	0x40010000
 8006adc:	40000400 	.word	0x40000400
 8006ae0:	40000800 	.word	0x40000800
 8006ae4:	40000c00 	.word	0x40000c00
 8006ae8:	40014000 	.word	0x40014000

08006aec <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b084      	sub	sp, #16
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
 8006af4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006af6:	2300      	movs	r3, #0
 8006af8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	2b0c      	cmp	r3, #12
 8006afe:	d855      	bhi.n	8006bac <HAL_TIM_PWM_Stop_DMA+0xc0>
 8006b00:	a201      	add	r2, pc, #4	; (adr r2, 8006b08 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8006b02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b06:	bf00      	nop
 8006b08:	08006b3d 	.word	0x08006b3d
 8006b0c:	08006bad 	.word	0x08006bad
 8006b10:	08006bad 	.word	0x08006bad
 8006b14:	08006bad 	.word	0x08006bad
 8006b18:	08006b59 	.word	0x08006b59
 8006b1c:	08006bad 	.word	0x08006bad
 8006b20:	08006bad 	.word	0x08006bad
 8006b24:	08006bad 	.word	0x08006bad
 8006b28:	08006b75 	.word	0x08006b75
 8006b2c:	08006bad 	.word	0x08006bad
 8006b30:	08006bad 	.word	0x08006bad
 8006b34:	08006bad 	.word	0x08006bad
 8006b38:	08006b91 	.word	0x08006b91
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	68da      	ldr	r2, [r3, #12]
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006b4a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b50:	4618      	mov	r0, r3
 8006b52:	f7fc f9ff 	bl	8002f54 <HAL_DMA_Abort_IT>
      break;
 8006b56:	e02c      	b.n	8006bb2 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	68da      	ldr	r2, [r3, #12]
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b66:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	f7fc f9f1 	bl	8002f54 <HAL_DMA_Abort_IT>
      break;
 8006b72:	e01e      	b.n	8006bb2 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	68da      	ldr	r2, [r3, #12]
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006b82:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b88:	4618      	mov	r0, r3
 8006b8a:	f7fc f9e3 	bl	8002f54 <HAL_DMA_Abort_IT>
      break;
 8006b8e:	e010      	b.n	8006bb2 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	68da      	ldr	r2, [r3, #12]
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006b9e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	f7fc f9d5 	bl	8002f54 <HAL_DMA_Abort_IT>
      break;
 8006baa:	e002      	b.n	8006bb2 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8006bac:	2301      	movs	r3, #1
 8006bae:	73fb      	strb	r3, [r7, #15]
      break;
 8006bb0:	bf00      	nop
  }

  if (status == HAL_OK)
 8006bb2:	7bfb      	ldrb	r3, [r7, #15]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d157      	bne.n	8006c68 <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	6839      	ldr	r1, [r7, #0]
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	f000 fd77 	bl	80076b4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	4a2a      	ldr	r2, [pc, #168]	; (8006c74 <HAL_TIM_PWM_Stop_DMA+0x188>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d117      	bne.n	8006c00 <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	6a1a      	ldr	r2, [r3, #32]
 8006bd6:	f241 1311 	movw	r3, #4369	; 0x1111
 8006bda:	4013      	ands	r3, r2
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d10f      	bne.n	8006c00 <HAL_TIM_PWM_Stop_DMA+0x114>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	6a1a      	ldr	r2, [r3, #32]
 8006be6:	f240 4344 	movw	r3, #1092	; 0x444
 8006bea:	4013      	ands	r3, r2
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d107      	bne.n	8006c00 <HAL_TIM_PWM_Stop_DMA+0x114>
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006bfe:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	6a1a      	ldr	r2, [r3, #32]
 8006c06:	f241 1311 	movw	r3, #4369	; 0x1111
 8006c0a:	4013      	ands	r3, r2
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d10f      	bne.n	8006c30 <HAL_TIM_PWM_Stop_DMA+0x144>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	6a1a      	ldr	r2, [r3, #32]
 8006c16:	f240 4344 	movw	r3, #1092	; 0x444
 8006c1a:	4013      	ands	r3, r2
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d107      	bne.n	8006c30 <HAL_TIM_PWM_Stop_DMA+0x144>
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	681a      	ldr	r2, [r3, #0]
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f022 0201 	bic.w	r2, r2, #1
 8006c2e:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d104      	bne.n	8006c40 <HAL_TIM_PWM_Stop_DMA+0x154>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2201      	movs	r2, #1
 8006c3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c3e:	e013      	b.n	8006c68 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	2b04      	cmp	r3, #4
 8006c44:	d104      	bne.n	8006c50 <HAL_TIM_PWM_Stop_DMA+0x164>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2201      	movs	r2, #1
 8006c4a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c4e:	e00b      	b.n	8006c68 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	2b08      	cmp	r3, #8
 8006c54:	d104      	bne.n	8006c60 <HAL_TIM_PWM_Stop_DMA+0x174>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2201      	movs	r2, #1
 8006c5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c5e:	e003      	b.n	8006c68 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2201      	movs	r2, #1
 8006c64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8006c68:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	3710      	adds	r7, #16
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	bd80      	pop	{r7, pc}
 8006c72:	bf00      	nop
 8006c74:	40010000 	.word	0x40010000

08006c78 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b086      	sub	sp, #24
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	60f8      	str	r0, [r7, #12]
 8006c80:	60b9      	str	r1, [r7, #8]
 8006c82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006c84:	2300      	movs	r3, #0
 8006c86:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c8e:	2b01      	cmp	r3, #1
 8006c90:	d101      	bne.n	8006c96 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006c92:	2302      	movs	r3, #2
 8006c94:	e0ae      	b.n	8006df4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	2201      	movs	r2, #1
 8006c9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2b0c      	cmp	r3, #12
 8006ca2:	f200 809f 	bhi.w	8006de4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006ca6:	a201      	add	r2, pc, #4	; (adr r2, 8006cac <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cac:	08006ce1 	.word	0x08006ce1
 8006cb0:	08006de5 	.word	0x08006de5
 8006cb4:	08006de5 	.word	0x08006de5
 8006cb8:	08006de5 	.word	0x08006de5
 8006cbc:	08006d21 	.word	0x08006d21
 8006cc0:	08006de5 	.word	0x08006de5
 8006cc4:	08006de5 	.word	0x08006de5
 8006cc8:	08006de5 	.word	0x08006de5
 8006ccc:	08006d63 	.word	0x08006d63
 8006cd0:	08006de5 	.word	0x08006de5
 8006cd4:	08006de5 	.word	0x08006de5
 8006cd8:	08006de5 	.word	0x08006de5
 8006cdc:	08006da3 	.word	0x08006da3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	68b9      	ldr	r1, [r7, #8]
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	f000 fabe 	bl	8007268 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	699a      	ldr	r2, [r3, #24]
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f042 0208 	orr.w	r2, r2, #8
 8006cfa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	699a      	ldr	r2, [r3, #24]
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f022 0204 	bic.w	r2, r2, #4
 8006d0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	6999      	ldr	r1, [r3, #24]
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	691a      	ldr	r2, [r3, #16]
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	430a      	orrs	r2, r1
 8006d1c:	619a      	str	r2, [r3, #24]
      break;
 8006d1e:	e064      	b.n	8006dea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	68b9      	ldr	r1, [r7, #8]
 8006d26:	4618      	mov	r0, r3
 8006d28:	f000 fb04 	bl	8007334 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	699a      	ldr	r2, [r3, #24]
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006d3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	699a      	ldr	r2, [r3, #24]
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	6999      	ldr	r1, [r3, #24]
 8006d52:	68bb      	ldr	r3, [r7, #8]
 8006d54:	691b      	ldr	r3, [r3, #16]
 8006d56:	021a      	lsls	r2, r3, #8
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	430a      	orrs	r2, r1
 8006d5e:	619a      	str	r2, [r3, #24]
      break;
 8006d60:	e043      	b.n	8006dea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	68b9      	ldr	r1, [r7, #8]
 8006d68:	4618      	mov	r0, r3
 8006d6a:	f000 fb4f 	bl	800740c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	69da      	ldr	r2, [r3, #28]
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f042 0208 	orr.w	r2, r2, #8
 8006d7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	69da      	ldr	r2, [r3, #28]
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f022 0204 	bic.w	r2, r2, #4
 8006d8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	69d9      	ldr	r1, [r3, #28]
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	691a      	ldr	r2, [r3, #16]
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	430a      	orrs	r2, r1
 8006d9e:	61da      	str	r2, [r3, #28]
      break;
 8006da0:	e023      	b.n	8006dea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	68b9      	ldr	r1, [r7, #8]
 8006da8:	4618      	mov	r0, r3
 8006daa:	f000 fb99 	bl	80074e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	69da      	ldr	r2, [r3, #28]
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006dbc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	69da      	ldr	r2, [r3, #28]
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006dcc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	69d9      	ldr	r1, [r3, #28]
 8006dd4:	68bb      	ldr	r3, [r7, #8]
 8006dd6:	691b      	ldr	r3, [r3, #16]
 8006dd8:	021a      	lsls	r2, r3, #8
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	430a      	orrs	r2, r1
 8006de0:	61da      	str	r2, [r3, #28]
      break;
 8006de2:	e002      	b.n	8006dea <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006de4:	2301      	movs	r3, #1
 8006de6:	75fb      	strb	r3, [r7, #23]
      break;
 8006de8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	2200      	movs	r2, #0
 8006dee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006df2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006df4:	4618      	mov	r0, r3
 8006df6:	3718      	adds	r7, #24
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	bd80      	pop	{r7, pc}

08006dfc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b084      	sub	sp, #16
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
 8006e04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006e06:	2300      	movs	r3, #0
 8006e08:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e10:	2b01      	cmp	r3, #1
 8006e12:	d101      	bne.n	8006e18 <HAL_TIM_ConfigClockSource+0x1c>
 8006e14:	2302      	movs	r3, #2
 8006e16:	e0b4      	b.n	8006f82 <HAL_TIM_ConfigClockSource+0x186>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2201      	movs	r2, #1
 8006e1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2202      	movs	r2, #2
 8006e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	689b      	ldr	r3, [r3, #8]
 8006e2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006e36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006e3e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	68ba      	ldr	r2, [r7, #8]
 8006e46:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e50:	d03e      	beq.n	8006ed0 <HAL_TIM_ConfigClockSource+0xd4>
 8006e52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e56:	f200 8087 	bhi.w	8006f68 <HAL_TIM_ConfigClockSource+0x16c>
 8006e5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e5e:	f000 8086 	beq.w	8006f6e <HAL_TIM_ConfigClockSource+0x172>
 8006e62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e66:	d87f      	bhi.n	8006f68 <HAL_TIM_ConfigClockSource+0x16c>
 8006e68:	2b70      	cmp	r3, #112	; 0x70
 8006e6a:	d01a      	beq.n	8006ea2 <HAL_TIM_ConfigClockSource+0xa6>
 8006e6c:	2b70      	cmp	r3, #112	; 0x70
 8006e6e:	d87b      	bhi.n	8006f68 <HAL_TIM_ConfigClockSource+0x16c>
 8006e70:	2b60      	cmp	r3, #96	; 0x60
 8006e72:	d050      	beq.n	8006f16 <HAL_TIM_ConfigClockSource+0x11a>
 8006e74:	2b60      	cmp	r3, #96	; 0x60
 8006e76:	d877      	bhi.n	8006f68 <HAL_TIM_ConfigClockSource+0x16c>
 8006e78:	2b50      	cmp	r3, #80	; 0x50
 8006e7a:	d03c      	beq.n	8006ef6 <HAL_TIM_ConfigClockSource+0xfa>
 8006e7c:	2b50      	cmp	r3, #80	; 0x50
 8006e7e:	d873      	bhi.n	8006f68 <HAL_TIM_ConfigClockSource+0x16c>
 8006e80:	2b40      	cmp	r3, #64	; 0x40
 8006e82:	d058      	beq.n	8006f36 <HAL_TIM_ConfigClockSource+0x13a>
 8006e84:	2b40      	cmp	r3, #64	; 0x40
 8006e86:	d86f      	bhi.n	8006f68 <HAL_TIM_ConfigClockSource+0x16c>
 8006e88:	2b30      	cmp	r3, #48	; 0x30
 8006e8a:	d064      	beq.n	8006f56 <HAL_TIM_ConfigClockSource+0x15a>
 8006e8c:	2b30      	cmp	r3, #48	; 0x30
 8006e8e:	d86b      	bhi.n	8006f68 <HAL_TIM_ConfigClockSource+0x16c>
 8006e90:	2b20      	cmp	r3, #32
 8006e92:	d060      	beq.n	8006f56 <HAL_TIM_ConfigClockSource+0x15a>
 8006e94:	2b20      	cmp	r3, #32
 8006e96:	d867      	bhi.n	8006f68 <HAL_TIM_ConfigClockSource+0x16c>
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d05c      	beq.n	8006f56 <HAL_TIM_ConfigClockSource+0x15a>
 8006e9c:	2b10      	cmp	r3, #16
 8006e9e:	d05a      	beq.n	8006f56 <HAL_TIM_ConfigClockSource+0x15a>
 8006ea0:	e062      	b.n	8006f68 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6818      	ldr	r0, [r3, #0]
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	6899      	ldr	r1, [r3, #8]
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	685a      	ldr	r2, [r3, #4]
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	68db      	ldr	r3, [r3, #12]
 8006eb2:	f000 fbdf 	bl	8007674 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	689b      	ldr	r3, [r3, #8]
 8006ebc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006ebe:	68bb      	ldr	r3, [r7, #8]
 8006ec0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006ec4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	68ba      	ldr	r2, [r7, #8]
 8006ecc:	609a      	str	r2, [r3, #8]
      break;
 8006ece:	e04f      	b.n	8006f70 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6818      	ldr	r0, [r3, #0]
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	6899      	ldr	r1, [r3, #8]
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	685a      	ldr	r2, [r3, #4]
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	68db      	ldr	r3, [r3, #12]
 8006ee0:	f000 fbc8 	bl	8007674 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	689a      	ldr	r2, [r3, #8]
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006ef2:	609a      	str	r2, [r3, #8]
      break;
 8006ef4:	e03c      	b.n	8006f70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6818      	ldr	r0, [r3, #0]
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	6859      	ldr	r1, [r3, #4]
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	68db      	ldr	r3, [r3, #12]
 8006f02:	461a      	mov	r2, r3
 8006f04:	f000 fb3c 	bl	8007580 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	2150      	movs	r1, #80	; 0x50
 8006f0e:	4618      	mov	r0, r3
 8006f10:	f000 fb95 	bl	800763e <TIM_ITRx_SetConfig>
      break;
 8006f14:	e02c      	b.n	8006f70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6818      	ldr	r0, [r3, #0]
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	6859      	ldr	r1, [r3, #4]
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	68db      	ldr	r3, [r3, #12]
 8006f22:	461a      	mov	r2, r3
 8006f24:	f000 fb5b 	bl	80075de <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	2160      	movs	r1, #96	; 0x60
 8006f2e:	4618      	mov	r0, r3
 8006f30:	f000 fb85 	bl	800763e <TIM_ITRx_SetConfig>
      break;
 8006f34:	e01c      	b.n	8006f70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6818      	ldr	r0, [r3, #0]
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	6859      	ldr	r1, [r3, #4]
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	68db      	ldr	r3, [r3, #12]
 8006f42:	461a      	mov	r2, r3
 8006f44:	f000 fb1c 	bl	8007580 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	2140      	movs	r1, #64	; 0x40
 8006f4e:	4618      	mov	r0, r3
 8006f50:	f000 fb75 	bl	800763e <TIM_ITRx_SetConfig>
      break;
 8006f54:	e00c      	b.n	8006f70 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681a      	ldr	r2, [r3, #0]
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	4619      	mov	r1, r3
 8006f60:	4610      	mov	r0, r2
 8006f62:	f000 fb6c 	bl	800763e <TIM_ITRx_SetConfig>
      break;
 8006f66:	e003      	b.n	8006f70 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006f68:	2301      	movs	r3, #1
 8006f6a:	73fb      	strb	r3, [r7, #15]
      break;
 8006f6c:	e000      	b.n	8006f70 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006f6e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2201      	movs	r2, #1
 8006f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006f80:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f82:	4618      	mov	r0, r3
 8006f84:	3710      	adds	r7, #16
 8006f86:	46bd      	mov	sp, r7
 8006f88:	bd80      	pop	{r7, pc}

08006f8a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006f8a:	b480      	push	{r7}
 8006f8c:	b083      	sub	sp, #12
 8006f8e:	af00      	add	r7, sp, #0
 8006f90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006f92:	bf00      	nop
 8006f94:	370c      	adds	r7, #12
 8006f96:	46bd      	mov	sp, r7
 8006f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9c:	4770      	bx	lr

08006f9e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006f9e:	b480      	push	{r7}
 8006fa0:	b083      	sub	sp, #12
 8006fa2:	af00      	add	r7, sp, #0
 8006fa4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8006fa6:	bf00      	nop
 8006fa8:	370c      	adds	r7, #12
 8006faa:	46bd      	mov	sp, r7
 8006fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb0:	4770      	bx	lr

08006fb2 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8006fb2:	b480      	push	{r7}
 8006fb4:	b083      	sub	sp, #12
 8006fb6:	af00      	add	r7, sp, #0
 8006fb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8006fba:	bf00      	nop
 8006fbc:	370c      	adds	r7, #12
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc4:	4770      	bx	lr

08006fc6 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8006fc6:	b580      	push	{r7, lr}
 8006fc8:	b084      	sub	sp, #16
 8006fca:	af00      	add	r7, sp, #0
 8006fcc:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fd2:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fd8:	687a      	ldr	r2, [r7, #4]
 8006fda:	429a      	cmp	r2, r3
 8006fdc:	d107      	bne.n	8006fee <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	2201      	movs	r2, #1
 8006fe2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	2201      	movs	r2, #1
 8006fe8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006fec:	e02a      	b.n	8007044 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ff2:	687a      	ldr	r2, [r7, #4]
 8006ff4:	429a      	cmp	r2, r3
 8006ff6:	d107      	bne.n	8007008 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	2202      	movs	r2, #2
 8006ffc:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	2201      	movs	r2, #1
 8007002:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007006:	e01d      	b.n	8007044 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800700c:	687a      	ldr	r2, [r7, #4]
 800700e:	429a      	cmp	r2, r3
 8007010:	d107      	bne.n	8007022 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	2204      	movs	r2, #4
 8007016:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	2201      	movs	r2, #1
 800701c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007020:	e010      	b.n	8007044 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007026:	687a      	ldr	r2, [r7, #4]
 8007028:	429a      	cmp	r2, r3
 800702a:	d107      	bne.n	800703c <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	2208      	movs	r2, #8
 8007030:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	2201      	movs	r2, #1
 8007036:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800703a:	e003      	b.n	8007044 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	2201      	movs	r2, #1
 8007040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8007044:	68f8      	ldr	r0, [r7, #12]
 8007046:	f7ff ffb4 	bl	8006fb2 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	2200      	movs	r2, #0
 800704e:	771a      	strb	r2, [r3, #28]
}
 8007050:	bf00      	nop
 8007052:	3710      	adds	r7, #16
 8007054:	46bd      	mov	sp, r7
 8007056:	bd80      	pop	{r7, pc}

08007058 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b084      	sub	sp, #16
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007064:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800706a:	687a      	ldr	r2, [r7, #4]
 800706c:	429a      	cmp	r2, r3
 800706e:	d10b      	bne.n	8007088 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	2201      	movs	r2, #1
 8007074:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	69db      	ldr	r3, [r3, #28]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d136      	bne.n	80070ec <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	2201      	movs	r2, #1
 8007082:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007086:	e031      	b.n	80070ec <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800708c:	687a      	ldr	r2, [r7, #4]
 800708e:	429a      	cmp	r2, r3
 8007090:	d10b      	bne.n	80070aa <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	2202      	movs	r2, #2
 8007096:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	69db      	ldr	r3, [r3, #28]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d125      	bne.n	80070ec <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	2201      	movs	r2, #1
 80070a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80070a8:	e020      	b.n	80070ec <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070ae:	687a      	ldr	r2, [r7, #4]
 80070b0:	429a      	cmp	r2, r3
 80070b2:	d10b      	bne.n	80070cc <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	2204      	movs	r2, #4
 80070b8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	69db      	ldr	r3, [r3, #28]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d114      	bne.n	80070ec <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	2201      	movs	r2, #1
 80070c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80070ca:	e00f      	b.n	80070ec <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070d0:	687a      	ldr	r2, [r7, #4]
 80070d2:	429a      	cmp	r2, r3
 80070d4:	d10a      	bne.n	80070ec <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	2208      	movs	r2, #8
 80070da:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	69db      	ldr	r3, [r3, #28]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d103      	bne.n	80070ec <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	2201      	movs	r2, #1
 80070e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070ec:	68f8      	ldr	r0, [r7, #12]
 80070ee:	f7ff ff4c 	bl	8006f8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	2200      	movs	r2, #0
 80070f6:	771a      	strb	r2, [r3, #28]
}
 80070f8:	bf00      	nop
 80070fa:	3710      	adds	r7, #16
 80070fc:	46bd      	mov	sp, r7
 80070fe:	bd80      	pop	{r7, pc}

08007100 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b084      	sub	sp, #16
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800710c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007112:	687a      	ldr	r2, [r7, #4]
 8007114:	429a      	cmp	r2, r3
 8007116:	d103      	bne.n	8007120 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	2201      	movs	r2, #1
 800711c:	771a      	strb	r2, [r3, #28]
 800711e:	e019      	b.n	8007154 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007124:	687a      	ldr	r2, [r7, #4]
 8007126:	429a      	cmp	r2, r3
 8007128:	d103      	bne.n	8007132 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	2202      	movs	r2, #2
 800712e:	771a      	strb	r2, [r3, #28]
 8007130:	e010      	b.n	8007154 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007136:	687a      	ldr	r2, [r7, #4]
 8007138:	429a      	cmp	r2, r3
 800713a:	d103      	bne.n	8007144 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	2204      	movs	r2, #4
 8007140:	771a      	strb	r2, [r3, #28]
 8007142:	e007      	b.n	8007154 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007148:	687a      	ldr	r2, [r7, #4]
 800714a:	429a      	cmp	r2, r3
 800714c:	d102      	bne.n	8007154 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	2208      	movs	r2, #8
 8007152:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8007154:	68f8      	ldr	r0, [r7, #12]
 8007156:	f7ff ff22 	bl	8006f9e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	2200      	movs	r2, #0
 800715e:	771a      	strb	r2, [r3, #28]
}
 8007160:	bf00      	nop
 8007162:	3710      	adds	r7, #16
 8007164:	46bd      	mov	sp, r7
 8007166:	bd80      	pop	{r7, pc}

08007168 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007168:	b480      	push	{r7}
 800716a:	b085      	sub	sp, #20
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
 8007170:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	4a34      	ldr	r2, [pc, #208]	; (800724c <TIM_Base_SetConfig+0xe4>)
 800717c:	4293      	cmp	r3, r2
 800717e:	d00f      	beq.n	80071a0 <TIM_Base_SetConfig+0x38>
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007186:	d00b      	beq.n	80071a0 <TIM_Base_SetConfig+0x38>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	4a31      	ldr	r2, [pc, #196]	; (8007250 <TIM_Base_SetConfig+0xe8>)
 800718c:	4293      	cmp	r3, r2
 800718e:	d007      	beq.n	80071a0 <TIM_Base_SetConfig+0x38>
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	4a30      	ldr	r2, [pc, #192]	; (8007254 <TIM_Base_SetConfig+0xec>)
 8007194:	4293      	cmp	r3, r2
 8007196:	d003      	beq.n	80071a0 <TIM_Base_SetConfig+0x38>
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	4a2f      	ldr	r2, [pc, #188]	; (8007258 <TIM_Base_SetConfig+0xf0>)
 800719c:	4293      	cmp	r3, r2
 800719e:	d108      	bne.n	80071b2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	685b      	ldr	r3, [r3, #4]
 80071ac:	68fa      	ldr	r2, [r7, #12]
 80071ae:	4313      	orrs	r3, r2
 80071b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	4a25      	ldr	r2, [pc, #148]	; (800724c <TIM_Base_SetConfig+0xe4>)
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d01b      	beq.n	80071f2 <TIM_Base_SetConfig+0x8a>
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071c0:	d017      	beq.n	80071f2 <TIM_Base_SetConfig+0x8a>
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	4a22      	ldr	r2, [pc, #136]	; (8007250 <TIM_Base_SetConfig+0xe8>)
 80071c6:	4293      	cmp	r3, r2
 80071c8:	d013      	beq.n	80071f2 <TIM_Base_SetConfig+0x8a>
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	4a21      	ldr	r2, [pc, #132]	; (8007254 <TIM_Base_SetConfig+0xec>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d00f      	beq.n	80071f2 <TIM_Base_SetConfig+0x8a>
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	4a20      	ldr	r2, [pc, #128]	; (8007258 <TIM_Base_SetConfig+0xf0>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d00b      	beq.n	80071f2 <TIM_Base_SetConfig+0x8a>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	4a1f      	ldr	r2, [pc, #124]	; (800725c <TIM_Base_SetConfig+0xf4>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d007      	beq.n	80071f2 <TIM_Base_SetConfig+0x8a>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	4a1e      	ldr	r2, [pc, #120]	; (8007260 <TIM_Base_SetConfig+0xf8>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d003      	beq.n	80071f2 <TIM_Base_SetConfig+0x8a>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	4a1d      	ldr	r2, [pc, #116]	; (8007264 <TIM_Base_SetConfig+0xfc>)
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d108      	bne.n	8007204 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80071f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	68db      	ldr	r3, [r3, #12]
 80071fe:	68fa      	ldr	r2, [r7, #12]
 8007200:	4313      	orrs	r3, r2
 8007202:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	695b      	ldr	r3, [r3, #20]
 800720e:	4313      	orrs	r3, r2
 8007210:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	68fa      	ldr	r2, [r7, #12]
 8007216:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	689a      	ldr	r2, [r3, #8]
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	681a      	ldr	r2, [r3, #0]
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	4a08      	ldr	r2, [pc, #32]	; (800724c <TIM_Base_SetConfig+0xe4>)
 800722c:	4293      	cmp	r3, r2
 800722e:	d103      	bne.n	8007238 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	691a      	ldr	r2, [r3, #16]
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2201      	movs	r2, #1
 800723c:	615a      	str	r2, [r3, #20]
}
 800723e:	bf00      	nop
 8007240:	3714      	adds	r7, #20
 8007242:	46bd      	mov	sp, r7
 8007244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007248:	4770      	bx	lr
 800724a:	bf00      	nop
 800724c:	40010000 	.word	0x40010000
 8007250:	40000400 	.word	0x40000400
 8007254:	40000800 	.word	0x40000800
 8007258:	40000c00 	.word	0x40000c00
 800725c:	40014000 	.word	0x40014000
 8007260:	40014400 	.word	0x40014400
 8007264:	40014800 	.word	0x40014800

08007268 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007268:	b480      	push	{r7}
 800726a:	b087      	sub	sp, #28
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
 8007270:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6a1b      	ldr	r3, [r3, #32]
 8007276:	f023 0201 	bic.w	r2, r3, #1
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6a1b      	ldr	r3, [r3, #32]
 8007282:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	685b      	ldr	r3, [r3, #4]
 8007288:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	699b      	ldr	r3, [r3, #24]
 800728e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007296:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	f023 0303 	bic.w	r3, r3, #3
 800729e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	68fa      	ldr	r2, [r7, #12]
 80072a6:	4313      	orrs	r3, r2
 80072a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80072aa:	697b      	ldr	r3, [r7, #20]
 80072ac:	f023 0302 	bic.w	r3, r3, #2
 80072b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	689b      	ldr	r3, [r3, #8]
 80072b6:	697a      	ldr	r2, [r7, #20]
 80072b8:	4313      	orrs	r3, r2
 80072ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	4a1c      	ldr	r2, [pc, #112]	; (8007330 <TIM_OC1_SetConfig+0xc8>)
 80072c0:	4293      	cmp	r3, r2
 80072c2:	d10c      	bne.n	80072de <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80072c4:	697b      	ldr	r3, [r7, #20]
 80072c6:	f023 0308 	bic.w	r3, r3, #8
 80072ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	68db      	ldr	r3, [r3, #12]
 80072d0:	697a      	ldr	r2, [r7, #20]
 80072d2:	4313      	orrs	r3, r2
 80072d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80072d6:	697b      	ldr	r3, [r7, #20]
 80072d8:	f023 0304 	bic.w	r3, r3, #4
 80072dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	4a13      	ldr	r2, [pc, #76]	; (8007330 <TIM_OC1_SetConfig+0xc8>)
 80072e2:	4293      	cmp	r3, r2
 80072e4:	d111      	bne.n	800730a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80072e6:	693b      	ldr	r3, [r7, #16]
 80072e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80072ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80072ee:	693b      	ldr	r3, [r7, #16]
 80072f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80072f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	695b      	ldr	r3, [r3, #20]
 80072fa:	693a      	ldr	r2, [r7, #16]
 80072fc:	4313      	orrs	r3, r2
 80072fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	699b      	ldr	r3, [r3, #24]
 8007304:	693a      	ldr	r2, [r7, #16]
 8007306:	4313      	orrs	r3, r2
 8007308:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	693a      	ldr	r2, [r7, #16]
 800730e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	68fa      	ldr	r2, [r7, #12]
 8007314:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	685a      	ldr	r2, [r3, #4]
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	697a      	ldr	r2, [r7, #20]
 8007322:	621a      	str	r2, [r3, #32]
}
 8007324:	bf00      	nop
 8007326:	371c      	adds	r7, #28
 8007328:	46bd      	mov	sp, r7
 800732a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732e:	4770      	bx	lr
 8007330:	40010000 	.word	0x40010000

08007334 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007334:	b480      	push	{r7}
 8007336:	b087      	sub	sp, #28
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
 800733c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6a1b      	ldr	r3, [r3, #32]
 8007342:	f023 0210 	bic.w	r2, r3, #16
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6a1b      	ldr	r3, [r3, #32]
 800734e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	685b      	ldr	r3, [r3, #4]
 8007354:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	699b      	ldr	r3, [r3, #24]
 800735a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007362:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800736a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	021b      	lsls	r3, r3, #8
 8007372:	68fa      	ldr	r2, [r7, #12]
 8007374:	4313      	orrs	r3, r2
 8007376:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007378:	697b      	ldr	r3, [r7, #20]
 800737a:	f023 0320 	bic.w	r3, r3, #32
 800737e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	689b      	ldr	r3, [r3, #8]
 8007384:	011b      	lsls	r3, r3, #4
 8007386:	697a      	ldr	r2, [r7, #20]
 8007388:	4313      	orrs	r3, r2
 800738a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	4a1e      	ldr	r2, [pc, #120]	; (8007408 <TIM_OC2_SetConfig+0xd4>)
 8007390:	4293      	cmp	r3, r2
 8007392:	d10d      	bne.n	80073b0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007394:	697b      	ldr	r3, [r7, #20]
 8007396:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800739a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	68db      	ldr	r3, [r3, #12]
 80073a0:	011b      	lsls	r3, r3, #4
 80073a2:	697a      	ldr	r2, [r7, #20]
 80073a4:	4313      	orrs	r3, r2
 80073a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80073a8:	697b      	ldr	r3, [r7, #20]
 80073aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073ae:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	4a15      	ldr	r2, [pc, #84]	; (8007408 <TIM_OC2_SetConfig+0xd4>)
 80073b4:	4293      	cmp	r3, r2
 80073b6:	d113      	bne.n	80073e0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80073b8:	693b      	ldr	r3, [r7, #16]
 80073ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80073be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80073c0:	693b      	ldr	r3, [r7, #16]
 80073c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80073c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	695b      	ldr	r3, [r3, #20]
 80073cc:	009b      	lsls	r3, r3, #2
 80073ce:	693a      	ldr	r2, [r7, #16]
 80073d0:	4313      	orrs	r3, r2
 80073d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	699b      	ldr	r3, [r3, #24]
 80073d8:	009b      	lsls	r3, r3, #2
 80073da:	693a      	ldr	r2, [r7, #16]
 80073dc:	4313      	orrs	r3, r2
 80073de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	693a      	ldr	r2, [r7, #16]
 80073e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	68fa      	ldr	r2, [r7, #12]
 80073ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	685a      	ldr	r2, [r3, #4]
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	697a      	ldr	r2, [r7, #20]
 80073f8:	621a      	str	r2, [r3, #32]
}
 80073fa:	bf00      	nop
 80073fc:	371c      	adds	r7, #28
 80073fe:	46bd      	mov	sp, r7
 8007400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007404:	4770      	bx	lr
 8007406:	bf00      	nop
 8007408:	40010000 	.word	0x40010000

0800740c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800740c:	b480      	push	{r7}
 800740e:	b087      	sub	sp, #28
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
 8007414:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6a1b      	ldr	r3, [r3, #32]
 800741a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6a1b      	ldr	r3, [r3, #32]
 8007426:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	685b      	ldr	r3, [r3, #4]
 800742c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	69db      	ldr	r3, [r3, #28]
 8007432:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800743a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	f023 0303 	bic.w	r3, r3, #3
 8007442:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	68fa      	ldr	r2, [r7, #12]
 800744a:	4313      	orrs	r3, r2
 800744c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800744e:	697b      	ldr	r3, [r7, #20]
 8007450:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007454:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	689b      	ldr	r3, [r3, #8]
 800745a:	021b      	lsls	r3, r3, #8
 800745c:	697a      	ldr	r2, [r7, #20]
 800745e:	4313      	orrs	r3, r2
 8007460:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	4a1d      	ldr	r2, [pc, #116]	; (80074dc <TIM_OC3_SetConfig+0xd0>)
 8007466:	4293      	cmp	r3, r2
 8007468:	d10d      	bne.n	8007486 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800746a:	697b      	ldr	r3, [r7, #20]
 800746c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007470:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	68db      	ldr	r3, [r3, #12]
 8007476:	021b      	lsls	r3, r3, #8
 8007478:	697a      	ldr	r2, [r7, #20]
 800747a:	4313      	orrs	r3, r2
 800747c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800747e:	697b      	ldr	r3, [r7, #20]
 8007480:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007484:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	4a14      	ldr	r2, [pc, #80]	; (80074dc <TIM_OC3_SetConfig+0xd0>)
 800748a:	4293      	cmp	r3, r2
 800748c:	d113      	bne.n	80074b6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800748e:	693b      	ldr	r3, [r7, #16]
 8007490:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007494:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007496:	693b      	ldr	r3, [r7, #16]
 8007498:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800749c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	695b      	ldr	r3, [r3, #20]
 80074a2:	011b      	lsls	r3, r3, #4
 80074a4:	693a      	ldr	r2, [r7, #16]
 80074a6:	4313      	orrs	r3, r2
 80074a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	699b      	ldr	r3, [r3, #24]
 80074ae:	011b      	lsls	r3, r3, #4
 80074b0:	693a      	ldr	r2, [r7, #16]
 80074b2:	4313      	orrs	r3, r2
 80074b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	693a      	ldr	r2, [r7, #16]
 80074ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	68fa      	ldr	r2, [r7, #12]
 80074c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	685a      	ldr	r2, [r3, #4]
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	697a      	ldr	r2, [r7, #20]
 80074ce:	621a      	str	r2, [r3, #32]
}
 80074d0:	bf00      	nop
 80074d2:	371c      	adds	r7, #28
 80074d4:	46bd      	mov	sp, r7
 80074d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074da:	4770      	bx	lr
 80074dc:	40010000 	.word	0x40010000

080074e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80074e0:	b480      	push	{r7}
 80074e2:	b087      	sub	sp, #28
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
 80074e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6a1b      	ldr	r3, [r3, #32]
 80074ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6a1b      	ldr	r3, [r3, #32]
 80074fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	685b      	ldr	r3, [r3, #4]
 8007500:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	69db      	ldr	r3, [r3, #28]
 8007506:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800750e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007516:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	021b      	lsls	r3, r3, #8
 800751e:	68fa      	ldr	r2, [r7, #12]
 8007520:	4313      	orrs	r3, r2
 8007522:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007524:	693b      	ldr	r3, [r7, #16]
 8007526:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800752a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	689b      	ldr	r3, [r3, #8]
 8007530:	031b      	lsls	r3, r3, #12
 8007532:	693a      	ldr	r2, [r7, #16]
 8007534:	4313      	orrs	r3, r2
 8007536:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	4a10      	ldr	r2, [pc, #64]	; (800757c <TIM_OC4_SetConfig+0x9c>)
 800753c:	4293      	cmp	r3, r2
 800753e:	d109      	bne.n	8007554 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007540:	697b      	ldr	r3, [r7, #20]
 8007542:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007546:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	695b      	ldr	r3, [r3, #20]
 800754c:	019b      	lsls	r3, r3, #6
 800754e:	697a      	ldr	r2, [r7, #20]
 8007550:	4313      	orrs	r3, r2
 8007552:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	697a      	ldr	r2, [r7, #20]
 8007558:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	68fa      	ldr	r2, [r7, #12]
 800755e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	685a      	ldr	r2, [r3, #4]
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	693a      	ldr	r2, [r7, #16]
 800756c:	621a      	str	r2, [r3, #32]
}
 800756e:	bf00      	nop
 8007570:	371c      	adds	r7, #28
 8007572:	46bd      	mov	sp, r7
 8007574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007578:	4770      	bx	lr
 800757a:	bf00      	nop
 800757c:	40010000 	.word	0x40010000

08007580 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007580:	b480      	push	{r7}
 8007582:	b087      	sub	sp, #28
 8007584:	af00      	add	r7, sp, #0
 8007586:	60f8      	str	r0, [r7, #12]
 8007588:	60b9      	str	r1, [r7, #8]
 800758a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	6a1b      	ldr	r3, [r3, #32]
 8007590:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	6a1b      	ldr	r3, [r3, #32]
 8007596:	f023 0201 	bic.w	r2, r3, #1
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	699b      	ldr	r3, [r3, #24]
 80075a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80075a4:	693b      	ldr	r3, [r7, #16]
 80075a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80075aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	011b      	lsls	r3, r3, #4
 80075b0:	693a      	ldr	r2, [r7, #16]
 80075b2:	4313      	orrs	r3, r2
 80075b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80075b6:	697b      	ldr	r3, [r7, #20]
 80075b8:	f023 030a 	bic.w	r3, r3, #10
 80075bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80075be:	697a      	ldr	r2, [r7, #20]
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	4313      	orrs	r3, r2
 80075c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	693a      	ldr	r2, [r7, #16]
 80075ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	697a      	ldr	r2, [r7, #20]
 80075d0:	621a      	str	r2, [r3, #32]
}
 80075d2:	bf00      	nop
 80075d4:	371c      	adds	r7, #28
 80075d6:	46bd      	mov	sp, r7
 80075d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075dc:	4770      	bx	lr

080075de <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80075de:	b480      	push	{r7}
 80075e0:	b087      	sub	sp, #28
 80075e2:	af00      	add	r7, sp, #0
 80075e4:	60f8      	str	r0, [r7, #12]
 80075e6:	60b9      	str	r1, [r7, #8]
 80075e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	6a1b      	ldr	r3, [r3, #32]
 80075ee:	f023 0210 	bic.w	r2, r3, #16
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	699b      	ldr	r3, [r3, #24]
 80075fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	6a1b      	ldr	r3, [r3, #32]
 8007600:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007602:	697b      	ldr	r3, [r7, #20]
 8007604:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007608:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	031b      	lsls	r3, r3, #12
 800760e:	697a      	ldr	r2, [r7, #20]
 8007610:	4313      	orrs	r3, r2
 8007612:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007614:	693b      	ldr	r3, [r7, #16]
 8007616:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800761a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800761c:	68bb      	ldr	r3, [r7, #8]
 800761e:	011b      	lsls	r3, r3, #4
 8007620:	693a      	ldr	r2, [r7, #16]
 8007622:	4313      	orrs	r3, r2
 8007624:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	697a      	ldr	r2, [r7, #20]
 800762a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	693a      	ldr	r2, [r7, #16]
 8007630:	621a      	str	r2, [r3, #32]
}
 8007632:	bf00      	nop
 8007634:	371c      	adds	r7, #28
 8007636:	46bd      	mov	sp, r7
 8007638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763c:	4770      	bx	lr

0800763e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800763e:	b480      	push	{r7}
 8007640:	b085      	sub	sp, #20
 8007642:	af00      	add	r7, sp, #0
 8007644:	6078      	str	r0, [r7, #4]
 8007646:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	689b      	ldr	r3, [r3, #8]
 800764c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007654:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007656:	683a      	ldr	r2, [r7, #0]
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	4313      	orrs	r3, r2
 800765c:	f043 0307 	orr.w	r3, r3, #7
 8007660:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	68fa      	ldr	r2, [r7, #12]
 8007666:	609a      	str	r2, [r3, #8]
}
 8007668:	bf00      	nop
 800766a:	3714      	adds	r7, #20
 800766c:	46bd      	mov	sp, r7
 800766e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007672:	4770      	bx	lr

08007674 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007674:	b480      	push	{r7}
 8007676:	b087      	sub	sp, #28
 8007678:	af00      	add	r7, sp, #0
 800767a:	60f8      	str	r0, [r7, #12]
 800767c:	60b9      	str	r1, [r7, #8]
 800767e:	607a      	str	r2, [r7, #4]
 8007680:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	689b      	ldr	r3, [r3, #8]
 8007686:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007688:	697b      	ldr	r3, [r7, #20]
 800768a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800768e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	021a      	lsls	r2, r3, #8
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	431a      	orrs	r2, r3
 8007698:	68bb      	ldr	r3, [r7, #8]
 800769a:	4313      	orrs	r3, r2
 800769c:	697a      	ldr	r2, [r7, #20]
 800769e:	4313      	orrs	r3, r2
 80076a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	697a      	ldr	r2, [r7, #20]
 80076a6:	609a      	str	r2, [r3, #8]
}
 80076a8:	bf00      	nop
 80076aa:	371c      	adds	r7, #28
 80076ac:	46bd      	mov	sp, r7
 80076ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b2:	4770      	bx	lr

080076b4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80076b4:	b480      	push	{r7}
 80076b6:	b087      	sub	sp, #28
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	60f8      	str	r0, [r7, #12]
 80076bc:	60b9      	str	r1, [r7, #8]
 80076be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	f003 031f 	and.w	r3, r3, #31
 80076c6:	2201      	movs	r2, #1
 80076c8:	fa02 f303 	lsl.w	r3, r2, r3
 80076cc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	6a1a      	ldr	r2, [r3, #32]
 80076d2:	697b      	ldr	r3, [r7, #20]
 80076d4:	43db      	mvns	r3, r3
 80076d6:	401a      	ands	r2, r3
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	6a1a      	ldr	r2, [r3, #32]
 80076e0:	68bb      	ldr	r3, [r7, #8]
 80076e2:	f003 031f 	and.w	r3, r3, #31
 80076e6:	6879      	ldr	r1, [r7, #4]
 80076e8:	fa01 f303 	lsl.w	r3, r1, r3
 80076ec:	431a      	orrs	r2, r3
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	621a      	str	r2, [r3, #32]
}
 80076f2:	bf00      	nop
 80076f4:	371c      	adds	r7, #28
 80076f6:	46bd      	mov	sp, r7
 80076f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fc:	4770      	bx	lr
	...

08007700 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007700:	b480      	push	{r7}
 8007702:	b085      	sub	sp, #20
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
 8007708:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007710:	2b01      	cmp	r3, #1
 8007712:	d101      	bne.n	8007718 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007714:	2302      	movs	r3, #2
 8007716:	e050      	b.n	80077ba <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2201      	movs	r2, #1
 800771c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2202      	movs	r2, #2
 8007724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	685b      	ldr	r3, [r3, #4]
 800772e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	689b      	ldr	r3, [r3, #8]
 8007736:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800773e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	68fa      	ldr	r2, [r7, #12]
 8007746:	4313      	orrs	r3, r2
 8007748:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	68fa      	ldr	r2, [r7, #12]
 8007750:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	4a1c      	ldr	r2, [pc, #112]	; (80077c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007758:	4293      	cmp	r3, r2
 800775a:	d018      	beq.n	800778e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007764:	d013      	beq.n	800778e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	4a18      	ldr	r2, [pc, #96]	; (80077cc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800776c:	4293      	cmp	r3, r2
 800776e:	d00e      	beq.n	800778e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	4a16      	ldr	r2, [pc, #88]	; (80077d0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007776:	4293      	cmp	r3, r2
 8007778:	d009      	beq.n	800778e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	4a15      	ldr	r2, [pc, #84]	; (80077d4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007780:	4293      	cmp	r3, r2
 8007782:	d004      	beq.n	800778e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	4a13      	ldr	r2, [pc, #76]	; (80077d8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800778a:	4293      	cmp	r3, r2
 800778c:	d10c      	bne.n	80077a8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800778e:	68bb      	ldr	r3, [r7, #8]
 8007790:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007794:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007796:	683b      	ldr	r3, [r7, #0]
 8007798:	685b      	ldr	r3, [r3, #4]
 800779a:	68ba      	ldr	r2, [r7, #8]
 800779c:	4313      	orrs	r3, r2
 800779e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	68ba      	ldr	r2, [r7, #8]
 80077a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2201      	movs	r2, #1
 80077ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2200      	movs	r2, #0
 80077b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80077b8:	2300      	movs	r3, #0
}
 80077ba:	4618      	mov	r0, r3
 80077bc:	3714      	adds	r7, #20
 80077be:	46bd      	mov	sp, r7
 80077c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c4:	4770      	bx	lr
 80077c6:	bf00      	nop
 80077c8:	40010000 	.word	0x40010000
 80077cc:	40000400 	.word	0x40000400
 80077d0:	40000800 	.word	0x40000800
 80077d4:	40000c00 	.word	0x40000c00
 80077d8:	40014000 	.word	0x40014000

080077dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b082      	sub	sp, #8
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d101      	bne.n	80077ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80077ea:	2301      	movs	r3, #1
 80077ec:	e03f      	b.n	800786e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077f4:	b2db      	uxtb	r3, r3
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d106      	bne.n	8007808 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2200      	movs	r2, #0
 80077fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007802:	6878      	ldr	r0, [r7, #4]
 8007804:	f7fa fb5c 	bl	8001ec0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2224      	movs	r2, #36	; 0x24
 800780c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	68da      	ldr	r2, [r3, #12]
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800781e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007820:	6878      	ldr	r0, [r7, #4]
 8007822:	f000 f929 	bl	8007a78 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	691a      	ldr	r2, [r3, #16]
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007834:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	695a      	ldr	r2, [r3, #20]
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007844:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	68da      	ldr	r2, [r3, #12]
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007854:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2200      	movs	r2, #0
 800785a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2220      	movs	r2, #32
 8007860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2220      	movs	r2, #32
 8007868:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800786c:	2300      	movs	r3, #0
}
 800786e:	4618      	mov	r0, r3
 8007870:	3708      	adds	r7, #8
 8007872:	46bd      	mov	sp, r7
 8007874:	bd80      	pop	{r7, pc}

08007876 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007876:	b580      	push	{r7, lr}
 8007878:	b08a      	sub	sp, #40	; 0x28
 800787a:	af02      	add	r7, sp, #8
 800787c:	60f8      	str	r0, [r7, #12]
 800787e:	60b9      	str	r1, [r7, #8]
 8007880:	603b      	str	r3, [r7, #0]
 8007882:	4613      	mov	r3, r2
 8007884:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007886:	2300      	movs	r3, #0
 8007888:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007890:	b2db      	uxtb	r3, r3
 8007892:	2b20      	cmp	r3, #32
 8007894:	d17c      	bne.n	8007990 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007896:	68bb      	ldr	r3, [r7, #8]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d002      	beq.n	80078a2 <HAL_UART_Transmit+0x2c>
 800789c:	88fb      	ldrh	r3, [r7, #6]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d101      	bne.n	80078a6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80078a2:	2301      	movs	r3, #1
 80078a4:	e075      	b.n	8007992 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80078ac:	2b01      	cmp	r3, #1
 80078ae:	d101      	bne.n	80078b4 <HAL_UART_Transmit+0x3e>
 80078b0:	2302      	movs	r3, #2
 80078b2:	e06e      	b.n	8007992 <HAL_UART_Transmit+0x11c>
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	2201      	movs	r2, #1
 80078b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	2200      	movs	r2, #0
 80078c0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	2221      	movs	r2, #33	; 0x21
 80078c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80078ca:	f7fa fbd1 	bl	8002070 <HAL_GetTick>
 80078ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	88fa      	ldrh	r2, [r7, #6]
 80078d4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	88fa      	ldrh	r2, [r7, #6]
 80078da:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	689b      	ldr	r3, [r3, #8]
 80078e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078e4:	d108      	bne.n	80078f8 <HAL_UART_Transmit+0x82>
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	691b      	ldr	r3, [r3, #16]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d104      	bne.n	80078f8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80078ee:	2300      	movs	r3, #0
 80078f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80078f2:	68bb      	ldr	r3, [r7, #8]
 80078f4:	61bb      	str	r3, [r7, #24]
 80078f6:	e003      	b.n	8007900 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80078f8:	68bb      	ldr	r3, [r7, #8]
 80078fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80078fc:	2300      	movs	r3, #0
 80078fe:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	2200      	movs	r2, #0
 8007904:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007908:	e02a      	b.n	8007960 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	9300      	str	r3, [sp, #0]
 800790e:	697b      	ldr	r3, [r7, #20]
 8007910:	2200      	movs	r2, #0
 8007912:	2180      	movs	r1, #128	; 0x80
 8007914:	68f8      	ldr	r0, [r7, #12]
 8007916:	f000 f840 	bl	800799a <UART_WaitOnFlagUntilTimeout>
 800791a:	4603      	mov	r3, r0
 800791c:	2b00      	cmp	r3, #0
 800791e:	d001      	beq.n	8007924 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007920:	2303      	movs	r3, #3
 8007922:	e036      	b.n	8007992 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007924:	69fb      	ldr	r3, [r7, #28]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d10b      	bne.n	8007942 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800792a:	69bb      	ldr	r3, [r7, #24]
 800792c:	881b      	ldrh	r3, [r3, #0]
 800792e:	461a      	mov	r2, r3
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007938:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800793a:	69bb      	ldr	r3, [r7, #24]
 800793c:	3302      	adds	r3, #2
 800793e:	61bb      	str	r3, [r7, #24]
 8007940:	e007      	b.n	8007952 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007942:	69fb      	ldr	r3, [r7, #28]
 8007944:	781a      	ldrb	r2, [r3, #0]
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800794c:	69fb      	ldr	r3, [r7, #28]
 800794e:	3301      	adds	r3, #1
 8007950:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007956:	b29b      	uxth	r3, r3
 8007958:	3b01      	subs	r3, #1
 800795a:	b29a      	uxth	r2, r3
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007964:	b29b      	uxth	r3, r3
 8007966:	2b00      	cmp	r3, #0
 8007968:	d1cf      	bne.n	800790a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	9300      	str	r3, [sp, #0]
 800796e:	697b      	ldr	r3, [r7, #20]
 8007970:	2200      	movs	r2, #0
 8007972:	2140      	movs	r1, #64	; 0x40
 8007974:	68f8      	ldr	r0, [r7, #12]
 8007976:	f000 f810 	bl	800799a <UART_WaitOnFlagUntilTimeout>
 800797a:	4603      	mov	r3, r0
 800797c:	2b00      	cmp	r3, #0
 800797e:	d001      	beq.n	8007984 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007980:	2303      	movs	r3, #3
 8007982:	e006      	b.n	8007992 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	2220      	movs	r2, #32
 8007988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800798c:	2300      	movs	r3, #0
 800798e:	e000      	b.n	8007992 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007990:	2302      	movs	r3, #2
  }
}
 8007992:	4618      	mov	r0, r3
 8007994:	3720      	adds	r7, #32
 8007996:	46bd      	mov	sp, r7
 8007998:	bd80      	pop	{r7, pc}

0800799a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800799a:	b580      	push	{r7, lr}
 800799c:	b090      	sub	sp, #64	; 0x40
 800799e:	af00      	add	r7, sp, #0
 80079a0:	60f8      	str	r0, [r7, #12]
 80079a2:	60b9      	str	r1, [r7, #8]
 80079a4:	603b      	str	r3, [r7, #0]
 80079a6:	4613      	mov	r3, r2
 80079a8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80079aa:	e050      	b.n	8007a4e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80079ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80079ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079b2:	d04c      	beq.n	8007a4e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80079b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d007      	beq.n	80079ca <UART_WaitOnFlagUntilTimeout+0x30>
 80079ba:	f7fa fb59 	bl	8002070 <HAL_GetTick>
 80079be:	4602      	mov	r2, r0
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	1ad3      	subs	r3, r2, r3
 80079c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80079c6:	429a      	cmp	r2, r3
 80079c8:	d241      	bcs.n	8007a4e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	330c      	adds	r3, #12
 80079d0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079d4:	e853 3f00 	ldrex	r3, [r3]
 80079d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80079da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079dc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80079e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	330c      	adds	r3, #12
 80079e8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80079ea:	637a      	str	r2, [r7, #52]	; 0x34
 80079ec:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079ee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80079f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80079f2:	e841 2300 	strex	r3, r2, [r1]
 80079f6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80079f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d1e5      	bne.n	80079ca <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	3314      	adds	r3, #20
 8007a04:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a06:	697b      	ldr	r3, [r7, #20]
 8007a08:	e853 3f00 	ldrex	r3, [r3]
 8007a0c:	613b      	str	r3, [r7, #16]
   return(result);
 8007a0e:	693b      	ldr	r3, [r7, #16]
 8007a10:	f023 0301 	bic.w	r3, r3, #1
 8007a14:	63bb      	str	r3, [r7, #56]	; 0x38
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	3314      	adds	r3, #20
 8007a1c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007a1e:	623a      	str	r2, [r7, #32]
 8007a20:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a22:	69f9      	ldr	r1, [r7, #28]
 8007a24:	6a3a      	ldr	r2, [r7, #32]
 8007a26:	e841 2300 	strex	r3, r2, [r1]
 8007a2a:	61bb      	str	r3, [r7, #24]
   return(result);
 8007a2c:	69bb      	ldr	r3, [r7, #24]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d1e5      	bne.n	80079fe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	2220      	movs	r2, #32
 8007a36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	2220      	movs	r2, #32
 8007a3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	2200      	movs	r2, #0
 8007a46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007a4a:	2303      	movs	r3, #3
 8007a4c:	e00f      	b.n	8007a6e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	681a      	ldr	r2, [r3, #0]
 8007a54:	68bb      	ldr	r3, [r7, #8]
 8007a56:	4013      	ands	r3, r2
 8007a58:	68ba      	ldr	r2, [r7, #8]
 8007a5a:	429a      	cmp	r2, r3
 8007a5c:	bf0c      	ite	eq
 8007a5e:	2301      	moveq	r3, #1
 8007a60:	2300      	movne	r3, #0
 8007a62:	b2db      	uxtb	r3, r3
 8007a64:	461a      	mov	r2, r3
 8007a66:	79fb      	ldrb	r3, [r7, #7]
 8007a68:	429a      	cmp	r2, r3
 8007a6a:	d09f      	beq.n	80079ac <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007a6c:	2300      	movs	r3, #0
}
 8007a6e:	4618      	mov	r0, r3
 8007a70:	3740      	adds	r7, #64	; 0x40
 8007a72:	46bd      	mov	sp, r7
 8007a74:	bd80      	pop	{r7, pc}
	...

08007a78 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007a78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007a7c:	b0c0      	sub	sp, #256	; 0x100
 8007a7e:	af00      	add	r7, sp, #0
 8007a80:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007a84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	691b      	ldr	r3, [r3, #16]
 8007a8c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007a90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a94:	68d9      	ldr	r1, [r3, #12]
 8007a96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a9a:	681a      	ldr	r2, [r3, #0]
 8007a9c:	ea40 0301 	orr.w	r3, r0, r1
 8007aa0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007aa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007aa6:	689a      	ldr	r2, [r3, #8]
 8007aa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007aac:	691b      	ldr	r3, [r3, #16]
 8007aae:	431a      	orrs	r2, r3
 8007ab0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ab4:	695b      	ldr	r3, [r3, #20]
 8007ab6:	431a      	orrs	r2, r3
 8007ab8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007abc:	69db      	ldr	r3, [r3, #28]
 8007abe:	4313      	orrs	r3, r2
 8007ac0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007ac4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	68db      	ldr	r3, [r3, #12]
 8007acc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007ad0:	f021 010c 	bic.w	r1, r1, #12
 8007ad4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ad8:	681a      	ldr	r2, [r3, #0]
 8007ada:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007ade:	430b      	orrs	r3, r1
 8007ae0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007ae2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	695b      	ldr	r3, [r3, #20]
 8007aea:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007aee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007af2:	6999      	ldr	r1, [r3, #24]
 8007af4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007af8:	681a      	ldr	r2, [r3, #0]
 8007afa:	ea40 0301 	orr.w	r3, r0, r1
 8007afe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007b00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b04:	681a      	ldr	r2, [r3, #0]
 8007b06:	4b8f      	ldr	r3, [pc, #572]	; (8007d44 <UART_SetConfig+0x2cc>)
 8007b08:	429a      	cmp	r2, r3
 8007b0a:	d005      	beq.n	8007b18 <UART_SetConfig+0xa0>
 8007b0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b10:	681a      	ldr	r2, [r3, #0]
 8007b12:	4b8d      	ldr	r3, [pc, #564]	; (8007d48 <UART_SetConfig+0x2d0>)
 8007b14:	429a      	cmp	r2, r3
 8007b16:	d104      	bne.n	8007b22 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007b18:	f7fe fcf2 	bl	8006500 <HAL_RCC_GetPCLK2Freq>
 8007b1c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007b20:	e003      	b.n	8007b2a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007b22:	f7fe fcd9 	bl	80064d8 <HAL_RCC_GetPCLK1Freq>
 8007b26:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007b2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b2e:	69db      	ldr	r3, [r3, #28]
 8007b30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b34:	f040 810c 	bne.w	8007d50 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007b38:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007b42:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007b46:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007b4a:	4622      	mov	r2, r4
 8007b4c:	462b      	mov	r3, r5
 8007b4e:	1891      	adds	r1, r2, r2
 8007b50:	65b9      	str	r1, [r7, #88]	; 0x58
 8007b52:	415b      	adcs	r3, r3
 8007b54:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007b56:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007b5a:	4621      	mov	r1, r4
 8007b5c:	eb12 0801 	adds.w	r8, r2, r1
 8007b60:	4629      	mov	r1, r5
 8007b62:	eb43 0901 	adc.w	r9, r3, r1
 8007b66:	f04f 0200 	mov.w	r2, #0
 8007b6a:	f04f 0300 	mov.w	r3, #0
 8007b6e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007b72:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007b76:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007b7a:	4690      	mov	r8, r2
 8007b7c:	4699      	mov	r9, r3
 8007b7e:	4623      	mov	r3, r4
 8007b80:	eb18 0303 	adds.w	r3, r8, r3
 8007b84:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007b88:	462b      	mov	r3, r5
 8007b8a:	eb49 0303 	adc.w	r3, r9, r3
 8007b8e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007b92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b96:	685b      	ldr	r3, [r3, #4]
 8007b98:	2200      	movs	r2, #0
 8007b9a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007b9e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007ba2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007ba6:	460b      	mov	r3, r1
 8007ba8:	18db      	adds	r3, r3, r3
 8007baa:	653b      	str	r3, [r7, #80]	; 0x50
 8007bac:	4613      	mov	r3, r2
 8007bae:	eb42 0303 	adc.w	r3, r2, r3
 8007bb2:	657b      	str	r3, [r7, #84]	; 0x54
 8007bb4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007bb8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007bbc:	f7f8 fb60 	bl	8000280 <__aeabi_uldivmod>
 8007bc0:	4602      	mov	r2, r0
 8007bc2:	460b      	mov	r3, r1
 8007bc4:	4b61      	ldr	r3, [pc, #388]	; (8007d4c <UART_SetConfig+0x2d4>)
 8007bc6:	fba3 2302 	umull	r2, r3, r3, r2
 8007bca:	095b      	lsrs	r3, r3, #5
 8007bcc:	011c      	lsls	r4, r3, #4
 8007bce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007bd8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007bdc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007be0:	4642      	mov	r2, r8
 8007be2:	464b      	mov	r3, r9
 8007be4:	1891      	adds	r1, r2, r2
 8007be6:	64b9      	str	r1, [r7, #72]	; 0x48
 8007be8:	415b      	adcs	r3, r3
 8007bea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007bec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007bf0:	4641      	mov	r1, r8
 8007bf2:	eb12 0a01 	adds.w	sl, r2, r1
 8007bf6:	4649      	mov	r1, r9
 8007bf8:	eb43 0b01 	adc.w	fp, r3, r1
 8007bfc:	f04f 0200 	mov.w	r2, #0
 8007c00:	f04f 0300 	mov.w	r3, #0
 8007c04:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007c08:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007c0c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007c10:	4692      	mov	sl, r2
 8007c12:	469b      	mov	fp, r3
 8007c14:	4643      	mov	r3, r8
 8007c16:	eb1a 0303 	adds.w	r3, sl, r3
 8007c1a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007c1e:	464b      	mov	r3, r9
 8007c20:	eb4b 0303 	adc.w	r3, fp, r3
 8007c24:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007c28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c2c:	685b      	ldr	r3, [r3, #4]
 8007c2e:	2200      	movs	r2, #0
 8007c30:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007c34:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007c38:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007c3c:	460b      	mov	r3, r1
 8007c3e:	18db      	adds	r3, r3, r3
 8007c40:	643b      	str	r3, [r7, #64]	; 0x40
 8007c42:	4613      	mov	r3, r2
 8007c44:	eb42 0303 	adc.w	r3, r2, r3
 8007c48:	647b      	str	r3, [r7, #68]	; 0x44
 8007c4a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007c4e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007c52:	f7f8 fb15 	bl	8000280 <__aeabi_uldivmod>
 8007c56:	4602      	mov	r2, r0
 8007c58:	460b      	mov	r3, r1
 8007c5a:	4611      	mov	r1, r2
 8007c5c:	4b3b      	ldr	r3, [pc, #236]	; (8007d4c <UART_SetConfig+0x2d4>)
 8007c5e:	fba3 2301 	umull	r2, r3, r3, r1
 8007c62:	095b      	lsrs	r3, r3, #5
 8007c64:	2264      	movs	r2, #100	; 0x64
 8007c66:	fb02 f303 	mul.w	r3, r2, r3
 8007c6a:	1acb      	subs	r3, r1, r3
 8007c6c:	00db      	lsls	r3, r3, #3
 8007c6e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007c72:	4b36      	ldr	r3, [pc, #216]	; (8007d4c <UART_SetConfig+0x2d4>)
 8007c74:	fba3 2302 	umull	r2, r3, r3, r2
 8007c78:	095b      	lsrs	r3, r3, #5
 8007c7a:	005b      	lsls	r3, r3, #1
 8007c7c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007c80:	441c      	add	r4, r3
 8007c82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007c86:	2200      	movs	r2, #0
 8007c88:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007c8c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007c90:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007c94:	4642      	mov	r2, r8
 8007c96:	464b      	mov	r3, r9
 8007c98:	1891      	adds	r1, r2, r2
 8007c9a:	63b9      	str	r1, [r7, #56]	; 0x38
 8007c9c:	415b      	adcs	r3, r3
 8007c9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ca0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007ca4:	4641      	mov	r1, r8
 8007ca6:	1851      	adds	r1, r2, r1
 8007ca8:	6339      	str	r1, [r7, #48]	; 0x30
 8007caa:	4649      	mov	r1, r9
 8007cac:	414b      	adcs	r3, r1
 8007cae:	637b      	str	r3, [r7, #52]	; 0x34
 8007cb0:	f04f 0200 	mov.w	r2, #0
 8007cb4:	f04f 0300 	mov.w	r3, #0
 8007cb8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007cbc:	4659      	mov	r1, fp
 8007cbe:	00cb      	lsls	r3, r1, #3
 8007cc0:	4651      	mov	r1, sl
 8007cc2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007cc6:	4651      	mov	r1, sl
 8007cc8:	00ca      	lsls	r2, r1, #3
 8007cca:	4610      	mov	r0, r2
 8007ccc:	4619      	mov	r1, r3
 8007cce:	4603      	mov	r3, r0
 8007cd0:	4642      	mov	r2, r8
 8007cd2:	189b      	adds	r3, r3, r2
 8007cd4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007cd8:	464b      	mov	r3, r9
 8007cda:	460a      	mov	r2, r1
 8007cdc:	eb42 0303 	adc.w	r3, r2, r3
 8007ce0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007ce4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ce8:	685b      	ldr	r3, [r3, #4]
 8007cea:	2200      	movs	r2, #0
 8007cec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007cf0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007cf4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007cf8:	460b      	mov	r3, r1
 8007cfa:	18db      	adds	r3, r3, r3
 8007cfc:	62bb      	str	r3, [r7, #40]	; 0x28
 8007cfe:	4613      	mov	r3, r2
 8007d00:	eb42 0303 	adc.w	r3, r2, r3
 8007d04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007d06:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007d0a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007d0e:	f7f8 fab7 	bl	8000280 <__aeabi_uldivmod>
 8007d12:	4602      	mov	r2, r0
 8007d14:	460b      	mov	r3, r1
 8007d16:	4b0d      	ldr	r3, [pc, #52]	; (8007d4c <UART_SetConfig+0x2d4>)
 8007d18:	fba3 1302 	umull	r1, r3, r3, r2
 8007d1c:	095b      	lsrs	r3, r3, #5
 8007d1e:	2164      	movs	r1, #100	; 0x64
 8007d20:	fb01 f303 	mul.w	r3, r1, r3
 8007d24:	1ad3      	subs	r3, r2, r3
 8007d26:	00db      	lsls	r3, r3, #3
 8007d28:	3332      	adds	r3, #50	; 0x32
 8007d2a:	4a08      	ldr	r2, [pc, #32]	; (8007d4c <UART_SetConfig+0x2d4>)
 8007d2c:	fba2 2303 	umull	r2, r3, r2, r3
 8007d30:	095b      	lsrs	r3, r3, #5
 8007d32:	f003 0207 	and.w	r2, r3, #7
 8007d36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	4422      	add	r2, r4
 8007d3e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007d40:	e105      	b.n	8007f4e <UART_SetConfig+0x4d6>
 8007d42:	bf00      	nop
 8007d44:	40011000 	.word	0x40011000
 8007d48:	40011400 	.word	0x40011400
 8007d4c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007d50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007d54:	2200      	movs	r2, #0
 8007d56:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007d5a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007d5e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007d62:	4642      	mov	r2, r8
 8007d64:	464b      	mov	r3, r9
 8007d66:	1891      	adds	r1, r2, r2
 8007d68:	6239      	str	r1, [r7, #32]
 8007d6a:	415b      	adcs	r3, r3
 8007d6c:	627b      	str	r3, [r7, #36]	; 0x24
 8007d6e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007d72:	4641      	mov	r1, r8
 8007d74:	1854      	adds	r4, r2, r1
 8007d76:	4649      	mov	r1, r9
 8007d78:	eb43 0501 	adc.w	r5, r3, r1
 8007d7c:	f04f 0200 	mov.w	r2, #0
 8007d80:	f04f 0300 	mov.w	r3, #0
 8007d84:	00eb      	lsls	r3, r5, #3
 8007d86:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007d8a:	00e2      	lsls	r2, r4, #3
 8007d8c:	4614      	mov	r4, r2
 8007d8e:	461d      	mov	r5, r3
 8007d90:	4643      	mov	r3, r8
 8007d92:	18e3      	adds	r3, r4, r3
 8007d94:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007d98:	464b      	mov	r3, r9
 8007d9a:	eb45 0303 	adc.w	r3, r5, r3
 8007d9e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007da2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007da6:	685b      	ldr	r3, [r3, #4]
 8007da8:	2200      	movs	r2, #0
 8007daa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007dae:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007db2:	f04f 0200 	mov.w	r2, #0
 8007db6:	f04f 0300 	mov.w	r3, #0
 8007dba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007dbe:	4629      	mov	r1, r5
 8007dc0:	008b      	lsls	r3, r1, #2
 8007dc2:	4621      	mov	r1, r4
 8007dc4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007dc8:	4621      	mov	r1, r4
 8007dca:	008a      	lsls	r2, r1, #2
 8007dcc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007dd0:	f7f8 fa56 	bl	8000280 <__aeabi_uldivmod>
 8007dd4:	4602      	mov	r2, r0
 8007dd6:	460b      	mov	r3, r1
 8007dd8:	4b60      	ldr	r3, [pc, #384]	; (8007f5c <UART_SetConfig+0x4e4>)
 8007dda:	fba3 2302 	umull	r2, r3, r3, r2
 8007dde:	095b      	lsrs	r3, r3, #5
 8007de0:	011c      	lsls	r4, r3, #4
 8007de2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007de6:	2200      	movs	r2, #0
 8007de8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007dec:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007df0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007df4:	4642      	mov	r2, r8
 8007df6:	464b      	mov	r3, r9
 8007df8:	1891      	adds	r1, r2, r2
 8007dfa:	61b9      	str	r1, [r7, #24]
 8007dfc:	415b      	adcs	r3, r3
 8007dfe:	61fb      	str	r3, [r7, #28]
 8007e00:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007e04:	4641      	mov	r1, r8
 8007e06:	1851      	adds	r1, r2, r1
 8007e08:	6139      	str	r1, [r7, #16]
 8007e0a:	4649      	mov	r1, r9
 8007e0c:	414b      	adcs	r3, r1
 8007e0e:	617b      	str	r3, [r7, #20]
 8007e10:	f04f 0200 	mov.w	r2, #0
 8007e14:	f04f 0300 	mov.w	r3, #0
 8007e18:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007e1c:	4659      	mov	r1, fp
 8007e1e:	00cb      	lsls	r3, r1, #3
 8007e20:	4651      	mov	r1, sl
 8007e22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007e26:	4651      	mov	r1, sl
 8007e28:	00ca      	lsls	r2, r1, #3
 8007e2a:	4610      	mov	r0, r2
 8007e2c:	4619      	mov	r1, r3
 8007e2e:	4603      	mov	r3, r0
 8007e30:	4642      	mov	r2, r8
 8007e32:	189b      	adds	r3, r3, r2
 8007e34:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007e38:	464b      	mov	r3, r9
 8007e3a:	460a      	mov	r2, r1
 8007e3c:	eb42 0303 	adc.w	r3, r2, r3
 8007e40:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007e44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e48:	685b      	ldr	r3, [r3, #4]
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	67bb      	str	r3, [r7, #120]	; 0x78
 8007e4e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007e50:	f04f 0200 	mov.w	r2, #0
 8007e54:	f04f 0300 	mov.w	r3, #0
 8007e58:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007e5c:	4649      	mov	r1, r9
 8007e5e:	008b      	lsls	r3, r1, #2
 8007e60:	4641      	mov	r1, r8
 8007e62:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007e66:	4641      	mov	r1, r8
 8007e68:	008a      	lsls	r2, r1, #2
 8007e6a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007e6e:	f7f8 fa07 	bl	8000280 <__aeabi_uldivmod>
 8007e72:	4602      	mov	r2, r0
 8007e74:	460b      	mov	r3, r1
 8007e76:	4b39      	ldr	r3, [pc, #228]	; (8007f5c <UART_SetConfig+0x4e4>)
 8007e78:	fba3 1302 	umull	r1, r3, r3, r2
 8007e7c:	095b      	lsrs	r3, r3, #5
 8007e7e:	2164      	movs	r1, #100	; 0x64
 8007e80:	fb01 f303 	mul.w	r3, r1, r3
 8007e84:	1ad3      	subs	r3, r2, r3
 8007e86:	011b      	lsls	r3, r3, #4
 8007e88:	3332      	adds	r3, #50	; 0x32
 8007e8a:	4a34      	ldr	r2, [pc, #208]	; (8007f5c <UART_SetConfig+0x4e4>)
 8007e8c:	fba2 2303 	umull	r2, r3, r2, r3
 8007e90:	095b      	lsrs	r3, r3, #5
 8007e92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007e96:	441c      	add	r4, r3
 8007e98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	673b      	str	r3, [r7, #112]	; 0x70
 8007ea0:	677a      	str	r2, [r7, #116]	; 0x74
 8007ea2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007ea6:	4642      	mov	r2, r8
 8007ea8:	464b      	mov	r3, r9
 8007eaa:	1891      	adds	r1, r2, r2
 8007eac:	60b9      	str	r1, [r7, #8]
 8007eae:	415b      	adcs	r3, r3
 8007eb0:	60fb      	str	r3, [r7, #12]
 8007eb2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007eb6:	4641      	mov	r1, r8
 8007eb8:	1851      	adds	r1, r2, r1
 8007eba:	6039      	str	r1, [r7, #0]
 8007ebc:	4649      	mov	r1, r9
 8007ebe:	414b      	adcs	r3, r1
 8007ec0:	607b      	str	r3, [r7, #4]
 8007ec2:	f04f 0200 	mov.w	r2, #0
 8007ec6:	f04f 0300 	mov.w	r3, #0
 8007eca:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007ece:	4659      	mov	r1, fp
 8007ed0:	00cb      	lsls	r3, r1, #3
 8007ed2:	4651      	mov	r1, sl
 8007ed4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007ed8:	4651      	mov	r1, sl
 8007eda:	00ca      	lsls	r2, r1, #3
 8007edc:	4610      	mov	r0, r2
 8007ede:	4619      	mov	r1, r3
 8007ee0:	4603      	mov	r3, r0
 8007ee2:	4642      	mov	r2, r8
 8007ee4:	189b      	adds	r3, r3, r2
 8007ee6:	66bb      	str	r3, [r7, #104]	; 0x68
 8007ee8:	464b      	mov	r3, r9
 8007eea:	460a      	mov	r2, r1
 8007eec:	eb42 0303 	adc.w	r3, r2, r3
 8007ef0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007ef2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ef6:	685b      	ldr	r3, [r3, #4]
 8007ef8:	2200      	movs	r2, #0
 8007efa:	663b      	str	r3, [r7, #96]	; 0x60
 8007efc:	667a      	str	r2, [r7, #100]	; 0x64
 8007efe:	f04f 0200 	mov.w	r2, #0
 8007f02:	f04f 0300 	mov.w	r3, #0
 8007f06:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007f0a:	4649      	mov	r1, r9
 8007f0c:	008b      	lsls	r3, r1, #2
 8007f0e:	4641      	mov	r1, r8
 8007f10:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007f14:	4641      	mov	r1, r8
 8007f16:	008a      	lsls	r2, r1, #2
 8007f18:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007f1c:	f7f8 f9b0 	bl	8000280 <__aeabi_uldivmod>
 8007f20:	4602      	mov	r2, r0
 8007f22:	460b      	mov	r3, r1
 8007f24:	4b0d      	ldr	r3, [pc, #52]	; (8007f5c <UART_SetConfig+0x4e4>)
 8007f26:	fba3 1302 	umull	r1, r3, r3, r2
 8007f2a:	095b      	lsrs	r3, r3, #5
 8007f2c:	2164      	movs	r1, #100	; 0x64
 8007f2e:	fb01 f303 	mul.w	r3, r1, r3
 8007f32:	1ad3      	subs	r3, r2, r3
 8007f34:	011b      	lsls	r3, r3, #4
 8007f36:	3332      	adds	r3, #50	; 0x32
 8007f38:	4a08      	ldr	r2, [pc, #32]	; (8007f5c <UART_SetConfig+0x4e4>)
 8007f3a:	fba2 2303 	umull	r2, r3, r2, r3
 8007f3e:	095b      	lsrs	r3, r3, #5
 8007f40:	f003 020f 	and.w	r2, r3, #15
 8007f44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	4422      	add	r2, r4
 8007f4c:	609a      	str	r2, [r3, #8]
}
 8007f4e:	bf00      	nop
 8007f50:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007f54:	46bd      	mov	sp, r7
 8007f56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007f5a:	bf00      	nop
 8007f5c:	51eb851f 	.word	0x51eb851f

08007f60 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007f60:	b084      	sub	sp, #16
 8007f62:	b580      	push	{r7, lr}
 8007f64:	b084      	sub	sp, #16
 8007f66:	af00      	add	r7, sp, #0
 8007f68:	6078      	str	r0, [r7, #4]
 8007f6a:	f107 001c 	add.w	r0, r7, #28
 8007f6e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f74:	2b01      	cmp	r3, #1
 8007f76:	d122      	bne.n	8007fbe <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f7c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	68db      	ldr	r3, [r3, #12]
 8007f88:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007f8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f90:	687a      	ldr	r2, [r7, #4]
 8007f92:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	68db      	ldr	r3, [r3, #12]
 8007f98:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007fa0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007fa2:	2b01      	cmp	r3, #1
 8007fa4:	d105      	bne.n	8007fb2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	68db      	ldr	r3, [r3, #12]
 8007faa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007fb2:	6878      	ldr	r0, [r7, #4]
 8007fb4:	f001 fbee 	bl	8009794 <USB_CoreReset>
 8007fb8:	4603      	mov	r3, r0
 8007fba:	73fb      	strb	r3, [r7, #15]
 8007fbc:	e01a      	b.n	8007ff4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	68db      	ldr	r3, [r3, #12]
 8007fc2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007fca:	6878      	ldr	r0, [r7, #4]
 8007fcc:	f001 fbe2 	bl	8009794 <USB_CoreReset>
 8007fd0:	4603      	mov	r3, r0
 8007fd2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007fd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d106      	bne.n	8007fe8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fde:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	639a      	str	r2, [r3, #56]	; 0x38
 8007fe6:	e005      	b.n	8007ff4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ff6:	2b01      	cmp	r3, #1
 8007ff8:	d10b      	bne.n	8008012 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	689b      	ldr	r3, [r3, #8]
 8007ffe:	f043 0206 	orr.w	r2, r3, #6
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	689b      	ldr	r3, [r3, #8]
 800800a:	f043 0220 	orr.w	r2, r3, #32
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008012:	7bfb      	ldrb	r3, [r7, #15]
}
 8008014:	4618      	mov	r0, r3
 8008016:	3710      	adds	r7, #16
 8008018:	46bd      	mov	sp, r7
 800801a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800801e:	b004      	add	sp, #16
 8008020:	4770      	bx	lr
	...

08008024 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008024:	b480      	push	{r7}
 8008026:	b087      	sub	sp, #28
 8008028:	af00      	add	r7, sp, #0
 800802a:	60f8      	str	r0, [r7, #12]
 800802c:	60b9      	str	r1, [r7, #8]
 800802e:	4613      	mov	r3, r2
 8008030:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008032:	79fb      	ldrb	r3, [r7, #7]
 8008034:	2b02      	cmp	r3, #2
 8008036:	d165      	bne.n	8008104 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008038:	68bb      	ldr	r3, [r7, #8]
 800803a:	4a41      	ldr	r2, [pc, #260]	; (8008140 <USB_SetTurnaroundTime+0x11c>)
 800803c:	4293      	cmp	r3, r2
 800803e:	d906      	bls.n	800804e <USB_SetTurnaroundTime+0x2a>
 8008040:	68bb      	ldr	r3, [r7, #8]
 8008042:	4a40      	ldr	r2, [pc, #256]	; (8008144 <USB_SetTurnaroundTime+0x120>)
 8008044:	4293      	cmp	r3, r2
 8008046:	d202      	bcs.n	800804e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008048:	230f      	movs	r3, #15
 800804a:	617b      	str	r3, [r7, #20]
 800804c:	e062      	b.n	8008114 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800804e:	68bb      	ldr	r3, [r7, #8]
 8008050:	4a3c      	ldr	r2, [pc, #240]	; (8008144 <USB_SetTurnaroundTime+0x120>)
 8008052:	4293      	cmp	r3, r2
 8008054:	d306      	bcc.n	8008064 <USB_SetTurnaroundTime+0x40>
 8008056:	68bb      	ldr	r3, [r7, #8]
 8008058:	4a3b      	ldr	r2, [pc, #236]	; (8008148 <USB_SetTurnaroundTime+0x124>)
 800805a:	4293      	cmp	r3, r2
 800805c:	d202      	bcs.n	8008064 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800805e:	230e      	movs	r3, #14
 8008060:	617b      	str	r3, [r7, #20]
 8008062:	e057      	b.n	8008114 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008064:	68bb      	ldr	r3, [r7, #8]
 8008066:	4a38      	ldr	r2, [pc, #224]	; (8008148 <USB_SetTurnaroundTime+0x124>)
 8008068:	4293      	cmp	r3, r2
 800806a:	d306      	bcc.n	800807a <USB_SetTurnaroundTime+0x56>
 800806c:	68bb      	ldr	r3, [r7, #8]
 800806e:	4a37      	ldr	r2, [pc, #220]	; (800814c <USB_SetTurnaroundTime+0x128>)
 8008070:	4293      	cmp	r3, r2
 8008072:	d202      	bcs.n	800807a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008074:	230d      	movs	r3, #13
 8008076:	617b      	str	r3, [r7, #20]
 8008078:	e04c      	b.n	8008114 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800807a:	68bb      	ldr	r3, [r7, #8]
 800807c:	4a33      	ldr	r2, [pc, #204]	; (800814c <USB_SetTurnaroundTime+0x128>)
 800807e:	4293      	cmp	r3, r2
 8008080:	d306      	bcc.n	8008090 <USB_SetTurnaroundTime+0x6c>
 8008082:	68bb      	ldr	r3, [r7, #8]
 8008084:	4a32      	ldr	r2, [pc, #200]	; (8008150 <USB_SetTurnaroundTime+0x12c>)
 8008086:	4293      	cmp	r3, r2
 8008088:	d802      	bhi.n	8008090 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800808a:	230c      	movs	r3, #12
 800808c:	617b      	str	r3, [r7, #20]
 800808e:	e041      	b.n	8008114 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008090:	68bb      	ldr	r3, [r7, #8]
 8008092:	4a2f      	ldr	r2, [pc, #188]	; (8008150 <USB_SetTurnaroundTime+0x12c>)
 8008094:	4293      	cmp	r3, r2
 8008096:	d906      	bls.n	80080a6 <USB_SetTurnaroundTime+0x82>
 8008098:	68bb      	ldr	r3, [r7, #8]
 800809a:	4a2e      	ldr	r2, [pc, #184]	; (8008154 <USB_SetTurnaroundTime+0x130>)
 800809c:	4293      	cmp	r3, r2
 800809e:	d802      	bhi.n	80080a6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80080a0:	230b      	movs	r3, #11
 80080a2:	617b      	str	r3, [r7, #20]
 80080a4:	e036      	b.n	8008114 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80080a6:	68bb      	ldr	r3, [r7, #8]
 80080a8:	4a2a      	ldr	r2, [pc, #168]	; (8008154 <USB_SetTurnaroundTime+0x130>)
 80080aa:	4293      	cmp	r3, r2
 80080ac:	d906      	bls.n	80080bc <USB_SetTurnaroundTime+0x98>
 80080ae:	68bb      	ldr	r3, [r7, #8]
 80080b0:	4a29      	ldr	r2, [pc, #164]	; (8008158 <USB_SetTurnaroundTime+0x134>)
 80080b2:	4293      	cmp	r3, r2
 80080b4:	d802      	bhi.n	80080bc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80080b6:	230a      	movs	r3, #10
 80080b8:	617b      	str	r3, [r7, #20]
 80080ba:	e02b      	b.n	8008114 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80080bc:	68bb      	ldr	r3, [r7, #8]
 80080be:	4a26      	ldr	r2, [pc, #152]	; (8008158 <USB_SetTurnaroundTime+0x134>)
 80080c0:	4293      	cmp	r3, r2
 80080c2:	d906      	bls.n	80080d2 <USB_SetTurnaroundTime+0xae>
 80080c4:	68bb      	ldr	r3, [r7, #8]
 80080c6:	4a25      	ldr	r2, [pc, #148]	; (800815c <USB_SetTurnaroundTime+0x138>)
 80080c8:	4293      	cmp	r3, r2
 80080ca:	d202      	bcs.n	80080d2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80080cc:	2309      	movs	r3, #9
 80080ce:	617b      	str	r3, [r7, #20]
 80080d0:	e020      	b.n	8008114 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80080d2:	68bb      	ldr	r3, [r7, #8]
 80080d4:	4a21      	ldr	r2, [pc, #132]	; (800815c <USB_SetTurnaroundTime+0x138>)
 80080d6:	4293      	cmp	r3, r2
 80080d8:	d306      	bcc.n	80080e8 <USB_SetTurnaroundTime+0xc4>
 80080da:	68bb      	ldr	r3, [r7, #8]
 80080dc:	4a20      	ldr	r2, [pc, #128]	; (8008160 <USB_SetTurnaroundTime+0x13c>)
 80080de:	4293      	cmp	r3, r2
 80080e0:	d802      	bhi.n	80080e8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80080e2:	2308      	movs	r3, #8
 80080e4:	617b      	str	r3, [r7, #20]
 80080e6:	e015      	b.n	8008114 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80080e8:	68bb      	ldr	r3, [r7, #8]
 80080ea:	4a1d      	ldr	r2, [pc, #116]	; (8008160 <USB_SetTurnaroundTime+0x13c>)
 80080ec:	4293      	cmp	r3, r2
 80080ee:	d906      	bls.n	80080fe <USB_SetTurnaroundTime+0xda>
 80080f0:	68bb      	ldr	r3, [r7, #8]
 80080f2:	4a1c      	ldr	r2, [pc, #112]	; (8008164 <USB_SetTurnaroundTime+0x140>)
 80080f4:	4293      	cmp	r3, r2
 80080f6:	d202      	bcs.n	80080fe <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80080f8:	2307      	movs	r3, #7
 80080fa:	617b      	str	r3, [r7, #20]
 80080fc:	e00a      	b.n	8008114 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80080fe:	2306      	movs	r3, #6
 8008100:	617b      	str	r3, [r7, #20]
 8008102:	e007      	b.n	8008114 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008104:	79fb      	ldrb	r3, [r7, #7]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d102      	bne.n	8008110 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800810a:	2309      	movs	r3, #9
 800810c:	617b      	str	r3, [r7, #20]
 800810e:	e001      	b.n	8008114 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008110:	2309      	movs	r3, #9
 8008112:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	68db      	ldr	r3, [r3, #12]
 8008118:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	68da      	ldr	r2, [r3, #12]
 8008124:	697b      	ldr	r3, [r7, #20]
 8008126:	029b      	lsls	r3, r3, #10
 8008128:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800812c:	431a      	orrs	r2, r3
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008132:	2300      	movs	r3, #0
}
 8008134:	4618      	mov	r0, r3
 8008136:	371c      	adds	r7, #28
 8008138:	46bd      	mov	sp, r7
 800813a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813e:	4770      	bx	lr
 8008140:	00d8acbf 	.word	0x00d8acbf
 8008144:	00e4e1c0 	.word	0x00e4e1c0
 8008148:	00f42400 	.word	0x00f42400
 800814c:	01067380 	.word	0x01067380
 8008150:	011a499f 	.word	0x011a499f
 8008154:	01312cff 	.word	0x01312cff
 8008158:	014ca43f 	.word	0x014ca43f
 800815c:	016e3600 	.word	0x016e3600
 8008160:	01a6ab1f 	.word	0x01a6ab1f
 8008164:	01e84800 	.word	0x01e84800

08008168 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008168:	b480      	push	{r7}
 800816a:	b083      	sub	sp, #12
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	689b      	ldr	r3, [r3, #8]
 8008174:	f043 0201 	orr.w	r2, r3, #1
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800817c:	2300      	movs	r3, #0
}
 800817e:	4618      	mov	r0, r3
 8008180:	370c      	adds	r7, #12
 8008182:	46bd      	mov	sp, r7
 8008184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008188:	4770      	bx	lr

0800818a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800818a:	b480      	push	{r7}
 800818c:	b083      	sub	sp, #12
 800818e:	af00      	add	r7, sp, #0
 8008190:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	689b      	ldr	r3, [r3, #8]
 8008196:	f023 0201 	bic.w	r2, r3, #1
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800819e:	2300      	movs	r3, #0
}
 80081a0:	4618      	mov	r0, r3
 80081a2:	370c      	adds	r7, #12
 80081a4:	46bd      	mov	sp, r7
 80081a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081aa:	4770      	bx	lr

080081ac <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b084      	sub	sp, #16
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
 80081b4:	460b      	mov	r3, r1
 80081b6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80081b8:	2300      	movs	r3, #0
 80081ba:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	68db      	ldr	r3, [r3, #12]
 80081c0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80081c8:	78fb      	ldrb	r3, [r7, #3]
 80081ca:	2b01      	cmp	r3, #1
 80081cc:	d115      	bne.n	80081fa <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	68db      	ldr	r3, [r3, #12]
 80081d2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80081da:	2001      	movs	r0, #1
 80081dc:	f7f9 ff54 	bl	8002088 <HAL_Delay>
      ms++;
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	3301      	adds	r3, #1
 80081e4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80081e6:	6878      	ldr	r0, [r7, #4]
 80081e8:	f001 fa45 	bl	8009676 <USB_GetMode>
 80081ec:	4603      	mov	r3, r0
 80081ee:	2b01      	cmp	r3, #1
 80081f0:	d01e      	beq.n	8008230 <USB_SetCurrentMode+0x84>
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	2b31      	cmp	r3, #49	; 0x31
 80081f6:	d9f0      	bls.n	80081da <USB_SetCurrentMode+0x2e>
 80081f8:	e01a      	b.n	8008230 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80081fa:	78fb      	ldrb	r3, [r7, #3]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d115      	bne.n	800822c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	68db      	ldr	r3, [r3, #12]
 8008204:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800820c:	2001      	movs	r0, #1
 800820e:	f7f9 ff3b 	bl	8002088 <HAL_Delay>
      ms++;
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	3301      	adds	r3, #1
 8008216:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008218:	6878      	ldr	r0, [r7, #4]
 800821a:	f001 fa2c 	bl	8009676 <USB_GetMode>
 800821e:	4603      	mov	r3, r0
 8008220:	2b00      	cmp	r3, #0
 8008222:	d005      	beq.n	8008230 <USB_SetCurrentMode+0x84>
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	2b31      	cmp	r3, #49	; 0x31
 8008228:	d9f0      	bls.n	800820c <USB_SetCurrentMode+0x60>
 800822a:	e001      	b.n	8008230 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800822c:	2301      	movs	r3, #1
 800822e:	e005      	b.n	800823c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	2b32      	cmp	r3, #50	; 0x32
 8008234:	d101      	bne.n	800823a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008236:	2301      	movs	r3, #1
 8008238:	e000      	b.n	800823c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800823a:	2300      	movs	r3, #0
}
 800823c:	4618      	mov	r0, r3
 800823e:	3710      	adds	r7, #16
 8008240:	46bd      	mov	sp, r7
 8008242:	bd80      	pop	{r7, pc}

08008244 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008244:	b084      	sub	sp, #16
 8008246:	b580      	push	{r7, lr}
 8008248:	b086      	sub	sp, #24
 800824a:	af00      	add	r7, sp, #0
 800824c:	6078      	str	r0, [r7, #4]
 800824e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008252:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008256:	2300      	movs	r3, #0
 8008258:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800825e:	2300      	movs	r3, #0
 8008260:	613b      	str	r3, [r7, #16]
 8008262:	e009      	b.n	8008278 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008264:	687a      	ldr	r2, [r7, #4]
 8008266:	693b      	ldr	r3, [r7, #16]
 8008268:	3340      	adds	r3, #64	; 0x40
 800826a:	009b      	lsls	r3, r3, #2
 800826c:	4413      	add	r3, r2
 800826e:	2200      	movs	r2, #0
 8008270:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008272:	693b      	ldr	r3, [r7, #16]
 8008274:	3301      	adds	r3, #1
 8008276:	613b      	str	r3, [r7, #16]
 8008278:	693b      	ldr	r3, [r7, #16]
 800827a:	2b0e      	cmp	r3, #14
 800827c:	d9f2      	bls.n	8008264 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800827e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008280:	2b00      	cmp	r3, #0
 8008282:	d11c      	bne.n	80082be <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800828a:	685b      	ldr	r3, [r3, #4]
 800828c:	68fa      	ldr	r2, [r7, #12]
 800828e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008292:	f043 0302 	orr.w	r3, r3, #2
 8008296:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800829c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082a8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082b4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	639a      	str	r2, [r3, #56]	; 0x38
 80082bc:	e00b      	b.n	80082d6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082c2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082ce:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80082dc:	461a      	mov	r2, r3
 80082de:	2300      	movs	r3, #0
 80082e0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082e8:	4619      	mov	r1, r3
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082f0:	461a      	mov	r2, r3
 80082f2:	680b      	ldr	r3, [r1, #0]
 80082f4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80082f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082f8:	2b01      	cmp	r3, #1
 80082fa:	d10c      	bne.n	8008316 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80082fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d104      	bne.n	800830c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008302:	2100      	movs	r1, #0
 8008304:	6878      	ldr	r0, [r7, #4]
 8008306:	f000 f965 	bl	80085d4 <USB_SetDevSpeed>
 800830a:	e008      	b.n	800831e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800830c:	2101      	movs	r1, #1
 800830e:	6878      	ldr	r0, [r7, #4]
 8008310:	f000 f960 	bl	80085d4 <USB_SetDevSpeed>
 8008314:	e003      	b.n	800831e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008316:	2103      	movs	r1, #3
 8008318:	6878      	ldr	r0, [r7, #4]
 800831a:	f000 f95b 	bl	80085d4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800831e:	2110      	movs	r1, #16
 8008320:	6878      	ldr	r0, [r7, #4]
 8008322:	f000 f8f3 	bl	800850c <USB_FlushTxFifo>
 8008326:	4603      	mov	r3, r0
 8008328:	2b00      	cmp	r3, #0
 800832a:	d001      	beq.n	8008330 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800832c:	2301      	movs	r3, #1
 800832e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008330:	6878      	ldr	r0, [r7, #4]
 8008332:	f000 f91f 	bl	8008574 <USB_FlushRxFifo>
 8008336:	4603      	mov	r3, r0
 8008338:	2b00      	cmp	r3, #0
 800833a:	d001      	beq.n	8008340 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800833c:	2301      	movs	r3, #1
 800833e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008346:	461a      	mov	r2, r3
 8008348:	2300      	movs	r3, #0
 800834a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008352:	461a      	mov	r2, r3
 8008354:	2300      	movs	r3, #0
 8008356:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800835e:	461a      	mov	r2, r3
 8008360:	2300      	movs	r3, #0
 8008362:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008364:	2300      	movs	r3, #0
 8008366:	613b      	str	r3, [r7, #16]
 8008368:	e043      	b.n	80083f2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800836a:	693b      	ldr	r3, [r7, #16]
 800836c:	015a      	lsls	r2, r3, #5
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	4413      	add	r3, r2
 8008372:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800837c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008380:	d118      	bne.n	80083b4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8008382:	693b      	ldr	r3, [r7, #16]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d10a      	bne.n	800839e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008388:	693b      	ldr	r3, [r7, #16]
 800838a:	015a      	lsls	r2, r3, #5
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	4413      	add	r3, r2
 8008390:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008394:	461a      	mov	r2, r3
 8008396:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800839a:	6013      	str	r3, [r2, #0]
 800839c:	e013      	b.n	80083c6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800839e:	693b      	ldr	r3, [r7, #16]
 80083a0:	015a      	lsls	r2, r3, #5
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	4413      	add	r3, r2
 80083a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083aa:	461a      	mov	r2, r3
 80083ac:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80083b0:	6013      	str	r3, [r2, #0]
 80083b2:	e008      	b.n	80083c6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80083b4:	693b      	ldr	r3, [r7, #16]
 80083b6:	015a      	lsls	r2, r3, #5
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	4413      	add	r3, r2
 80083bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083c0:	461a      	mov	r2, r3
 80083c2:	2300      	movs	r3, #0
 80083c4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80083c6:	693b      	ldr	r3, [r7, #16]
 80083c8:	015a      	lsls	r2, r3, #5
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	4413      	add	r3, r2
 80083ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083d2:	461a      	mov	r2, r3
 80083d4:	2300      	movs	r3, #0
 80083d6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80083d8:	693b      	ldr	r3, [r7, #16]
 80083da:	015a      	lsls	r2, r3, #5
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	4413      	add	r3, r2
 80083e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083e4:	461a      	mov	r2, r3
 80083e6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80083ea:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80083ec:	693b      	ldr	r3, [r7, #16]
 80083ee:	3301      	adds	r3, #1
 80083f0:	613b      	str	r3, [r7, #16]
 80083f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083f4:	693a      	ldr	r2, [r7, #16]
 80083f6:	429a      	cmp	r2, r3
 80083f8:	d3b7      	bcc.n	800836a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80083fa:	2300      	movs	r3, #0
 80083fc:	613b      	str	r3, [r7, #16]
 80083fe:	e043      	b.n	8008488 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008400:	693b      	ldr	r3, [r7, #16]
 8008402:	015a      	lsls	r2, r3, #5
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	4413      	add	r3, r2
 8008408:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008412:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008416:	d118      	bne.n	800844a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8008418:	693b      	ldr	r3, [r7, #16]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d10a      	bne.n	8008434 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800841e:	693b      	ldr	r3, [r7, #16]
 8008420:	015a      	lsls	r2, r3, #5
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	4413      	add	r3, r2
 8008426:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800842a:	461a      	mov	r2, r3
 800842c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008430:	6013      	str	r3, [r2, #0]
 8008432:	e013      	b.n	800845c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008434:	693b      	ldr	r3, [r7, #16]
 8008436:	015a      	lsls	r2, r3, #5
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	4413      	add	r3, r2
 800843c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008440:	461a      	mov	r2, r3
 8008442:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008446:	6013      	str	r3, [r2, #0]
 8008448:	e008      	b.n	800845c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800844a:	693b      	ldr	r3, [r7, #16]
 800844c:	015a      	lsls	r2, r3, #5
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	4413      	add	r3, r2
 8008452:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008456:	461a      	mov	r2, r3
 8008458:	2300      	movs	r3, #0
 800845a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800845c:	693b      	ldr	r3, [r7, #16]
 800845e:	015a      	lsls	r2, r3, #5
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	4413      	add	r3, r2
 8008464:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008468:	461a      	mov	r2, r3
 800846a:	2300      	movs	r3, #0
 800846c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800846e:	693b      	ldr	r3, [r7, #16]
 8008470:	015a      	lsls	r2, r3, #5
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	4413      	add	r3, r2
 8008476:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800847a:	461a      	mov	r2, r3
 800847c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008480:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008482:	693b      	ldr	r3, [r7, #16]
 8008484:	3301      	adds	r3, #1
 8008486:	613b      	str	r3, [r7, #16]
 8008488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800848a:	693a      	ldr	r2, [r7, #16]
 800848c:	429a      	cmp	r2, r3
 800848e:	d3b7      	bcc.n	8008400 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008496:	691b      	ldr	r3, [r3, #16]
 8008498:	68fa      	ldr	r2, [r7, #12]
 800849a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800849e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80084a2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2200      	movs	r2, #0
 80084a8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80084b0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80084b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d105      	bne.n	80084c4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	699b      	ldr	r3, [r3, #24]
 80084bc:	f043 0210 	orr.w	r2, r3, #16
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	699a      	ldr	r2, [r3, #24]
 80084c8:	4b0f      	ldr	r3, [pc, #60]	; (8008508 <USB_DevInit+0x2c4>)
 80084ca:	4313      	orrs	r3, r2
 80084cc:	687a      	ldr	r2, [r7, #4]
 80084ce:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80084d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d005      	beq.n	80084e2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	699b      	ldr	r3, [r3, #24]
 80084da:	f043 0208 	orr.w	r2, r3, #8
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80084e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084e4:	2b01      	cmp	r3, #1
 80084e6:	d107      	bne.n	80084f8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	699b      	ldr	r3, [r3, #24]
 80084ec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80084f0:	f043 0304 	orr.w	r3, r3, #4
 80084f4:	687a      	ldr	r2, [r7, #4]
 80084f6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80084f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80084fa:	4618      	mov	r0, r3
 80084fc:	3718      	adds	r7, #24
 80084fe:	46bd      	mov	sp, r7
 8008500:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008504:	b004      	add	sp, #16
 8008506:	4770      	bx	lr
 8008508:	803c3800 	.word	0x803c3800

0800850c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800850c:	b480      	push	{r7}
 800850e:	b085      	sub	sp, #20
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
 8008514:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008516:	2300      	movs	r3, #0
 8008518:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	3301      	adds	r3, #1
 800851e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	4a13      	ldr	r2, [pc, #76]	; (8008570 <USB_FlushTxFifo+0x64>)
 8008524:	4293      	cmp	r3, r2
 8008526:	d901      	bls.n	800852c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008528:	2303      	movs	r3, #3
 800852a:	e01b      	b.n	8008564 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	691b      	ldr	r3, [r3, #16]
 8008530:	2b00      	cmp	r3, #0
 8008532:	daf2      	bge.n	800851a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008534:	2300      	movs	r3, #0
 8008536:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	019b      	lsls	r3, r3, #6
 800853c:	f043 0220 	orr.w	r2, r3, #32
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	3301      	adds	r3, #1
 8008548:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	4a08      	ldr	r2, [pc, #32]	; (8008570 <USB_FlushTxFifo+0x64>)
 800854e:	4293      	cmp	r3, r2
 8008550:	d901      	bls.n	8008556 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008552:	2303      	movs	r3, #3
 8008554:	e006      	b.n	8008564 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	691b      	ldr	r3, [r3, #16]
 800855a:	f003 0320 	and.w	r3, r3, #32
 800855e:	2b20      	cmp	r3, #32
 8008560:	d0f0      	beq.n	8008544 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008562:	2300      	movs	r3, #0
}
 8008564:	4618      	mov	r0, r3
 8008566:	3714      	adds	r7, #20
 8008568:	46bd      	mov	sp, r7
 800856a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856e:	4770      	bx	lr
 8008570:	00030d40 	.word	0x00030d40

08008574 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008574:	b480      	push	{r7}
 8008576:	b085      	sub	sp, #20
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800857c:	2300      	movs	r3, #0
 800857e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	3301      	adds	r3, #1
 8008584:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	4a11      	ldr	r2, [pc, #68]	; (80085d0 <USB_FlushRxFifo+0x5c>)
 800858a:	4293      	cmp	r3, r2
 800858c:	d901      	bls.n	8008592 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800858e:	2303      	movs	r3, #3
 8008590:	e018      	b.n	80085c4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	691b      	ldr	r3, [r3, #16]
 8008596:	2b00      	cmp	r3, #0
 8008598:	daf2      	bge.n	8008580 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800859a:	2300      	movs	r3, #0
 800859c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2210      	movs	r2, #16
 80085a2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	3301      	adds	r3, #1
 80085a8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	4a08      	ldr	r2, [pc, #32]	; (80085d0 <USB_FlushRxFifo+0x5c>)
 80085ae:	4293      	cmp	r3, r2
 80085b0:	d901      	bls.n	80085b6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80085b2:	2303      	movs	r3, #3
 80085b4:	e006      	b.n	80085c4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	691b      	ldr	r3, [r3, #16]
 80085ba:	f003 0310 	and.w	r3, r3, #16
 80085be:	2b10      	cmp	r3, #16
 80085c0:	d0f0      	beq.n	80085a4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80085c2:	2300      	movs	r3, #0
}
 80085c4:	4618      	mov	r0, r3
 80085c6:	3714      	adds	r7, #20
 80085c8:	46bd      	mov	sp, r7
 80085ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ce:	4770      	bx	lr
 80085d0:	00030d40 	.word	0x00030d40

080085d4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80085d4:	b480      	push	{r7}
 80085d6:	b085      	sub	sp, #20
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
 80085dc:	460b      	mov	r3, r1
 80085de:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085ea:	681a      	ldr	r2, [r3, #0]
 80085ec:	78fb      	ldrb	r3, [r7, #3]
 80085ee:	68f9      	ldr	r1, [r7, #12]
 80085f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80085f4:	4313      	orrs	r3, r2
 80085f6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80085f8:	2300      	movs	r3, #0
}
 80085fa:	4618      	mov	r0, r3
 80085fc:	3714      	adds	r7, #20
 80085fe:	46bd      	mov	sp, r7
 8008600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008604:	4770      	bx	lr

08008606 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008606:	b480      	push	{r7}
 8008608:	b087      	sub	sp, #28
 800860a:	af00      	add	r7, sp, #0
 800860c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008612:	693b      	ldr	r3, [r7, #16]
 8008614:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008618:	689b      	ldr	r3, [r3, #8]
 800861a:	f003 0306 	and.w	r3, r3, #6
 800861e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d102      	bne.n	800862c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8008626:	2300      	movs	r3, #0
 8008628:	75fb      	strb	r3, [r7, #23]
 800862a:	e00a      	b.n	8008642 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	2b02      	cmp	r3, #2
 8008630:	d002      	beq.n	8008638 <USB_GetDevSpeed+0x32>
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	2b06      	cmp	r3, #6
 8008636:	d102      	bne.n	800863e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008638:	2302      	movs	r3, #2
 800863a:	75fb      	strb	r3, [r7, #23]
 800863c:	e001      	b.n	8008642 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800863e:	230f      	movs	r3, #15
 8008640:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008642:	7dfb      	ldrb	r3, [r7, #23]
}
 8008644:	4618      	mov	r0, r3
 8008646:	371c      	adds	r7, #28
 8008648:	46bd      	mov	sp, r7
 800864a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864e:	4770      	bx	lr

08008650 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008650:	b480      	push	{r7}
 8008652:	b085      	sub	sp, #20
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
 8008658:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800865e:	683b      	ldr	r3, [r7, #0]
 8008660:	781b      	ldrb	r3, [r3, #0]
 8008662:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008664:	683b      	ldr	r3, [r7, #0]
 8008666:	785b      	ldrb	r3, [r3, #1]
 8008668:	2b01      	cmp	r3, #1
 800866a:	d13a      	bne.n	80086e2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008672:	69da      	ldr	r2, [r3, #28]
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	781b      	ldrb	r3, [r3, #0]
 8008678:	f003 030f 	and.w	r3, r3, #15
 800867c:	2101      	movs	r1, #1
 800867e:	fa01 f303 	lsl.w	r3, r1, r3
 8008682:	b29b      	uxth	r3, r3
 8008684:	68f9      	ldr	r1, [r7, #12]
 8008686:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800868a:	4313      	orrs	r3, r2
 800868c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800868e:	68bb      	ldr	r3, [r7, #8]
 8008690:	015a      	lsls	r2, r3, #5
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	4413      	add	r3, r2
 8008696:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d155      	bne.n	8008750 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80086a4:	68bb      	ldr	r3, [r7, #8]
 80086a6:	015a      	lsls	r2, r3, #5
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	4413      	add	r3, r2
 80086ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086b0:	681a      	ldr	r2, [r3, #0]
 80086b2:	683b      	ldr	r3, [r7, #0]
 80086b4:	68db      	ldr	r3, [r3, #12]
 80086b6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80086ba:	683b      	ldr	r3, [r7, #0]
 80086bc:	791b      	ldrb	r3, [r3, #4]
 80086be:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80086c0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80086c2:	68bb      	ldr	r3, [r7, #8]
 80086c4:	059b      	lsls	r3, r3, #22
 80086c6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80086c8:	4313      	orrs	r3, r2
 80086ca:	68ba      	ldr	r2, [r7, #8]
 80086cc:	0151      	lsls	r1, r2, #5
 80086ce:	68fa      	ldr	r2, [r7, #12]
 80086d0:	440a      	add	r2, r1
 80086d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80086d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80086da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80086de:	6013      	str	r3, [r2, #0]
 80086e0:	e036      	b.n	8008750 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086e8:	69da      	ldr	r2, [r3, #28]
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	781b      	ldrb	r3, [r3, #0]
 80086ee:	f003 030f 	and.w	r3, r3, #15
 80086f2:	2101      	movs	r1, #1
 80086f4:	fa01 f303 	lsl.w	r3, r1, r3
 80086f8:	041b      	lsls	r3, r3, #16
 80086fa:	68f9      	ldr	r1, [r7, #12]
 80086fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008700:	4313      	orrs	r3, r2
 8008702:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008704:	68bb      	ldr	r3, [r7, #8]
 8008706:	015a      	lsls	r2, r3, #5
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	4413      	add	r3, r2
 800870c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008716:	2b00      	cmp	r3, #0
 8008718:	d11a      	bne.n	8008750 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800871a:	68bb      	ldr	r3, [r7, #8]
 800871c:	015a      	lsls	r2, r3, #5
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	4413      	add	r3, r2
 8008722:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008726:	681a      	ldr	r2, [r3, #0]
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	68db      	ldr	r3, [r3, #12]
 800872c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008730:	683b      	ldr	r3, [r7, #0]
 8008732:	791b      	ldrb	r3, [r3, #4]
 8008734:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008736:	430b      	orrs	r3, r1
 8008738:	4313      	orrs	r3, r2
 800873a:	68ba      	ldr	r2, [r7, #8]
 800873c:	0151      	lsls	r1, r2, #5
 800873e:	68fa      	ldr	r2, [r7, #12]
 8008740:	440a      	add	r2, r1
 8008742:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008746:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800874a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800874e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008750:	2300      	movs	r3, #0
}
 8008752:	4618      	mov	r0, r3
 8008754:	3714      	adds	r7, #20
 8008756:	46bd      	mov	sp, r7
 8008758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875c:	4770      	bx	lr
	...

08008760 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008760:	b480      	push	{r7}
 8008762:	b085      	sub	sp, #20
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
 8008768:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800876e:	683b      	ldr	r3, [r7, #0]
 8008770:	781b      	ldrb	r3, [r3, #0]
 8008772:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008774:	683b      	ldr	r3, [r7, #0]
 8008776:	785b      	ldrb	r3, [r3, #1]
 8008778:	2b01      	cmp	r3, #1
 800877a:	d161      	bne.n	8008840 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800877c:	68bb      	ldr	r3, [r7, #8]
 800877e:	015a      	lsls	r2, r3, #5
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	4413      	add	r3, r2
 8008784:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800878e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008792:	d11f      	bne.n	80087d4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008794:	68bb      	ldr	r3, [r7, #8]
 8008796:	015a      	lsls	r2, r3, #5
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	4413      	add	r3, r2
 800879c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	68ba      	ldr	r2, [r7, #8]
 80087a4:	0151      	lsls	r1, r2, #5
 80087a6:	68fa      	ldr	r2, [r7, #12]
 80087a8:	440a      	add	r2, r1
 80087aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80087ae:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80087b2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80087b4:	68bb      	ldr	r3, [r7, #8]
 80087b6:	015a      	lsls	r2, r3, #5
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	4413      	add	r3, r2
 80087bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	68ba      	ldr	r2, [r7, #8]
 80087c4:	0151      	lsls	r1, r2, #5
 80087c6:	68fa      	ldr	r2, [r7, #12]
 80087c8:	440a      	add	r2, r1
 80087ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80087ce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80087d2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80087dc:	683b      	ldr	r3, [r7, #0]
 80087de:	781b      	ldrb	r3, [r3, #0]
 80087e0:	f003 030f 	and.w	r3, r3, #15
 80087e4:	2101      	movs	r1, #1
 80087e6:	fa01 f303 	lsl.w	r3, r1, r3
 80087ea:	b29b      	uxth	r3, r3
 80087ec:	43db      	mvns	r3, r3
 80087ee:	68f9      	ldr	r1, [r7, #12]
 80087f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80087f4:	4013      	ands	r3, r2
 80087f6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087fe:	69da      	ldr	r2, [r3, #28]
 8008800:	683b      	ldr	r3, [r7, #0]
 8008802:	781b      	ldrb	r3, [r3, #0]
 8008804:	f003 030f 	and.w	r3, r3, #15
 8008808:	2101      	movs	r1, #1
 800880a:	fa01 f303 	lsl.w	r3, r1, r3
 800880e:	b29b      	uxth	r3, r3
 8008810:	43db      	mvns	r3, r3
 8008812:	68f9      	ldr	r1, [r7, #12]
 8008814:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008818:	4013      	ands	r3, r2
 800881a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800881c:	68bb      	ldr	r3, [r7, #8]
 800881e:	015a      	lsls	r2, r3, #5
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	4413      	add	r3, r2
 8008824:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008828:	681a      	ldr	r2, [r3, #0]
 800882a:	68bb      	ldr	r3, [r7, #8]
 800882c:	0159      	lsls	r1, r3, #5
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	440b      	add	r3, r1
 8008832:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008836:	4619      	mov	r1, r3
 8008838:	4b35      	ldr	r3, [pc, #212]	; (8008910 <USB_DeactivateEndpoint+0x1b0>)
 800883a:	4013      	ands	r3, r2
 800883c:	600b      	str	r3, [r1, #0]
 800883e:	e060      	b.n	8008902 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008840:	68bb      	ldr	r3, [r7, #8]
 8008842:	015a      	lsls	r2, r3, #5
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	4413      	add	r3, r2
 8008848:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008852:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008856:	d11f      	bne.n	8008898 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008858:	68bb      	ldr	r3, [r7, #8]
 800885a:	015a      	lsls	r2, r3, #5
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	4413      	add	r3, r2
 8008860:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	68ba      	ldr	r2, [r7, #8]
 8008868:	0151      	lsls	r1, r2, #5
 800886a:	68fa      	ldr	r2, [r7, #12]
 800886c:	440a      	add	r2, r1
 800886e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008872:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008876:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008878:	68bb      	ldr	r3, [r7, #8]
 800887a:	015a      	lsls	r2, r3, #5
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	4413      	add	r3, r2
 8008880:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	68ba      	ldr	r2, [r7, #8]
 8008888:	0151      	lsls	r1, r2, #5
 800888a:	68fa      	ldr	r2, [r7, #12]
 800888c:	440a      	add	r2, r1
 800888e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008892:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008896:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800889e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80088a0:	683b      	ldr	r3, [r7, #0]
 80088a2:	781b      	ldrb	r3, [r3, #0]
 80088a4:	f003 030f 	and.w	r3, r3, #15
 80088a8:	2101      	movs	r1, #1
 80088aa:	fa01 f303 	lsl.w	r3, r1, r3
 80088ae:	041b      	lsls	r3, r3, #16
 80088b0:	43db      	mvns	r3, r3
 80088b2:	68f9      	ldr	r1, [r7, #12]
 80088b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80088b8:	4013      	ands	r3, r2
 80088ba:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088c2:	69da      	ldr	r2, [r3, #28]
 80088c4:	683b      	ldr	r3, [r7, #0]
 80088c6:	781b      	ldrb	r3, [r3, #0]
 80088c8:	f003 030f 	and.w	r3, r3, #15
 80088cc:	2101      	movs	r1, #1
 80088ce:	fa01 f303 	lsl.w	r3, r1, r3
 80088d2:	041b      	lsls	r3, r3, #16
 80088d4:	43db      	mvns	r3, r3
 80088d6:	68f9      	ldr	r1, [r7, #12]
 80088d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80088dc:	4013      	ands	r3, r2
 80088de:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80088e0:	68bb      	ldr	r3, [r7, #8]
 80088e2:	015a      	lsls	r2, r3, #5
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	4413      	add	r3, r2
 80088e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088ec:	681a      	ldr	r2, [r3, #0]
 80088ee:	68bb      	ldr	r3, [r7, #8]
 80088f0:	0159      	lsls	r1, r3, #5
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	440b      	add	r3, r1
 80088f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088fa:	4619      	mov	r1, r3
 80088fc:	4b05      	ldr	r3, [pc, #20]	; (8008914 <USB_DeactivateEndpoint+0x1b4>)
 80088fe:	4013      	ands	r3, r2
 8008900:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8008902:	2300      	movs	r3, #0
}
 8008904:	4618      	mov	r0, r3
 8008906:	3714      	adds	r7, #20
 8008908:	46bd      	mov	sp, r7
 800890a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890e:	4770      	bx	lr
 8008910:	ec337800 	.word	0xec337800
 8008914:	eff37800 	.word	0xeff37800

08008918 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b08a      	sub	sp, #40	; 0x28
 800891c:	af02      	add	r7, sp, #8
 800891e:	60f8      	str	r0, [r7, #12]
 8008920:	60b9      	str	r1, [r7, #8]
 8008922:	4613      	mov	r3, r2
 8008924:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800892a:	68bb      	ldr	r3, [r7, #8]
 800892c:	781b      	ldrb	r3, [r3, #0]
 800892e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008930:	68bb      	ldr	r3, [r7, #8]
 8008932:	785b      	ldrb	r3, [r3, #1]
 8008934:	2b01      	cmp	r3, #1
 8008936:	f040 815c 	bne.w	8008bf2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800893a:	68bb      	ldr	r3, [r7, #8]
 800893c:	699b      	ldr	r3, [r3, #24]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d132      	bne.n	80089a8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008942:	69bb      	ldr	r3, [r7, #24]
 8008944:	015a      	lsls	r2, r3, #5
 8008946:	69fb      	ldr	r3, [r7, #28]
 8008948:	4413      	add	r3, r2
 800894a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800894e:	691b      	ldr	r3, [r3, #16]
 8008950:	69ba      	ldr	r2, [r7, #24]
 8008952:	0151      	lsls	r1, r2, #5
 8008954:	69fa      	ldr	r2, [r7, #28]
 8008956:	440a      	add	r2, r1
 8008958:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800895c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008960:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008964:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008966:	69bb      	ldr	r3, [r7, #24]
 8008968:	015a      	lsls	r2, r3, #5
 800896a:	69fb      	ldr	r3, [r7, #28]
 800896c:	4413      	add	r3, r2
 800896e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008972:	691b      	ldr	r3, [r3, #16]
 8008974:	69ba      	ldr	r2, [r7, #24]
 8008976:	0151      	lsls	r1, r2, #5
 8008978:	69fa      	ldr	r2, [r7, #28]
 800897a:	440a      	add	r2, r1
 800897c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008980:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008984:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008986:	69bb      	ldr	r3, [r7, #24]
 8008988:	015a      	lsls	r2, r3, #5
 800898a:	69fb      	ldr	r3, [r7, #28]
 800898c:	4413      	add	r3, r2
 800898e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008992:	691b      	ldr	r3, [r3, #16]
 8008994:	69ba      	ldr	r2, [r7, #24]
 8008996:	0151      	lsls	r1, r2, #5
 8008998:	69fa      	ldr	r2, [r7, #28]
 800899a:	440a      	add	r2, r1
 800899c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80089a0:	0cdb      	lsrs	r3, r3, #19
 80089a2:	04db      	lsls	r3, r3, #19
 80089a4:	6113      	str	r3, [r2, #16]
 80089a6:	e074      	b.n	8008a92 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80089a8:	69bb      	ldr	r3, [r7, #24]
 80089aa:	015a      	lsls	r2, r3, #5
 80089ac:	69fb      	ldr	r3, [r7, #28]
 80089ae:	4413      	add	r3, r2
 80089b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089b4:	691b      	ldr	r3, [r3, #16]
 80089b6:	69ba      	ldr	r2, [r7, #24]
 80089b8:	0151      	lsls	r1, r2, #5
 80089ba:	69fa      	ldr	r2, [r7, #28]
 80089bc:	440a      	add	r2, r1
 80089be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80089c2:	0cdb      	lsrs	r3, r3, #19
 80089c4:	04db      	lsls	r3, r3, #19
 80089c6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80089c8:	69bb      	ldr	r3, [r7, #24]
 80089ca:	015a      	lsls	r2, r3, #5
 80089cc:	69fb      	ldr	r3, [r7, #28]
 80089ce:	4413      	add	r3, r2
 80089d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089d4:	691b      	ldr	r3, [r3, #16]
 80089d6:	69ba      	ldr	r2, [r7, #24]
 80089d8:	0151      	lsls	r1, r2, #5
 80089da:	69fa      	ldr	r2, [r7, #28]
 80089dc:	440a      	add	r2, r1
 80089de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80089e2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80089e6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80089ea:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80089ec:	69bb      	ldr	r3, [r7, #24]
 80089ee:	015a      	lsls	r2, r3, #5
 80089f0:	69fb      	ldr	r3, [r7, #28]
 80089f2:	4413      	add	r3, r2
 80089f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089f8:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80089fa:	68bb      	ldr	r3, [r7, #8]
 80089fc:	6999      	ldr	r1, [r3, #24]
 80089fe:	68bb      	ldr	r3, [r7, #8]
 8008a00:	68db      	ldr	r3, [r3, #12]
 8008a02:	440b      	add	r3, r1
 8008a04:	1e59      	subs	r1, r3, #1
 8008a06:	68bb      	ldr	r3, [r7, #8]
 8008a08:	68db      	ldr	r3, [r3, #12]
 8008a0a:	fbb1 f3f3 	udiv	r3, r1, r3
 8008a0e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008a10:	4b9d      	ldr	r3, [pc, #628]	; (8008c88 <USB_EPStartXfer+0x370>)
 8008a12:	400b      	ands	r3, r1
 8008a14:	69b9      	ldr	r1, [r7, #24]
 8008a16:	0148      	lsls	r0, r1, #5
 8008a18:	69f9      	ldr	r1, [r7, #28]
 8008a1a:	4401      	add	r1, r0
 8008a1c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008a20:	4313      	orrs	r3, r2
 8008a22:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008a24:	69bb      	ldr	r3, [r7, #24]
 8008a26:	015a      	lsls	r2, r3, #5
 8008a28:	69fb      	ldr	r3, [r7, #28]
 8008a2a:	4413      	add	r3, r2
 8008a2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a30:	691a      	ldr	r2, [r3, #16]
 8008a32:	68bb      	ldr	r3, [r7, #8]
 8008a34:	699b      	ldr	r3, [r3, #24]
 8008a36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008a3a:	69b9      	ldr	r1, [r7, #24]
 8008a3c:	0148      	lsls	r0, r1, #5
 8008a3e:	69f9      	ldr	r1, [r7, #28]
 8008a40:	4401      	add	r1, r0
 8008a42:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008a46:	4313      	orrs	r3, r2
 8008a48:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8008a4a:	68bb      	ldr	r3, [r7, #8]
 8008a4c:	791b      	ldrb	r3, [r3, #4]
 8008a4e:	2b01      	cmp	r3, #1
 8008a50:	d11f      	bne.n	8008a92 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008a52:	69bb      	ldr	r3, [r7, #24]
 8008a54:	015a      	lsls	r2, r3, #5
 8008a56:	69fb      	ldr	r3, [r7, #28]
 8008a58:	4413      	add	r3, r2
 8008a5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a5e:	691b      	ldr	r3, [r3, #16]
 8008a60:	69ba      	ldr	r2, [r7, #24]
 8008a62:	0151      	lsls	r1, r2, #5
 8008a64:	69fa      	ldr	r2, [r7, #28]
 8008a66:	440a      	add	r2, r1
 8008a68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a6c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8008a70:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8008a72:	69bb      	ldr	r3, [r7, #24]
 8008a74:	015a      	lsls	r2, r3, #5
 8008a76:	69fb      	ldr	r3, [r7, #28]
 8008a78:	4413      	add	r3, r2
 8008a7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a7e:	691b      	ldr	r3, [r3, #16]
 8008a80:	69ba      	ldr	r2, [r7, #24]
 8008a82:	0151      	lsls	r1, r2, #5
 8008a84:	69fa      	ldr	r2, [r7, #28]
 8008a86:	440a      	add	r2, r1
 8008a88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a8c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008a90:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8008a92:	79fb      	ldrb	r3, [r7, #7]
 8008a94:	2b01      	cmp	r3, #1
 8008a96:	d14b      	bne.n	8008b30 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008a98:	68bb      	ldr	r3, [r7, #8]
 8008a9a:	695b      	ldr	r3, [r3, #20]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d009      	beq.n	8008ab4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008aa0:	69bb      	ldr	r3, [r7, #24]
 8008aa2:	015a      	lsls	r2, r3, #5
 8008aa4:	69fb      	ldr	r3, [r7, #28]
 8008aa6:	4413      	add	r3, r2
 8008aa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008aac:	461a      	mov	r2, r3
 8008aae:	68bb      	ldr	r3, [r7, #8]
 8008ab0:	695b      	ldr	r3, [r3, #20]
 8008ab2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008ab4:	68bb      	ldr	r3, [r7, #8]
 8008ab6:	791b      	ldrb	r3, [r3, #4]
 8008ab8:	2b01      	cmp	r3, #1
 8008aba:	d128      	bne.n	8008b0e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008abc:	69fb      	ldr	r3, [r7, #28]
 8008abe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ac2:	689b      	ldr	r3, [r3, #8]
 8008ac4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d110      	bne.n	8008aee <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008acc:	69bb      	ldr	r3, [r7, #24]
 8008ace:	015a      	lsls	r2, r3, #5
 8008ad0:	69fb      	ldr	r3, [r7, #28]
 8008ad2:	4413      	add	r3, r2
 8008ad4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	69ba      	ldr	r2, [r7, #24]
 8008adc:	0151      	lsls	r1, r2, #5
 8008ade:	69fa      	ldr	r2, [r7, #28]
 8008ae0:	440a      	add	r2, r1
 8008ae2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ae6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008aea:	6013      	str	r3, [r2, #0]
 8008aec:	e00f      	b.n	8008b0e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008aee:	69bb      	ldr	r3, [r7, #24]
 8008af0:	015a      	lsls	r2, r3, #5
 8008af2:	69fb      	ldr	r3, [r7, #28]
 8008af4:	4413      	add	r3, r2
 8008af6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	69ba      	ldr	r2, [r7, #24]
 8008afe:	0151      	lsls	r1, r2, #5
 8008b00:	69fa      	ldr	r2, [r7, #28]
 8008b02:	440a      	add	r2, r1
 8008b04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008b0c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008b0e:	69bb      	ldr	r3, [r7, #24]
 8008b10:	015a      	lsls	r2, r3, #5
 8008b12:	69fb      	ldr	r3, [r7, #28]
 8008b14:	4413      	add	r3, r2
 8008b16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	69ba      	ldr	r2, [r7, #24]
 8008b1e:	0151      	lsls	r1, r2, #5
 8008b20:	69fa      	ldr	r2, [r7, #28]
 8008b22:	440a      	add	r2, r1
 8008b24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b28:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008b2c:	6013      	str	r3, [r2, #0]
 8008b2e:	e133      	b.n	8008d98 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008b30:	69bb      	ldr	r3, [r7, #24]
 8008b32:	015a      	lsls	r2, r3, #5
 8008b34:	69fb      	ldr	r3, [r7, #28]
 8008b36:	4413      	add	r3, r2
 8008b38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	69ba      	ldr	r2, [r7, #24]
 8008b40:	0151      	lsls	r1, r2, #5
 8008b42:	69fa      	ldr	r2, [r7, #28]
 8008b44:	440a      	add	r2, r1
 8008b46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b4a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008b4e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008b50:	68bb      	ldr	r3, [r7, #8]
 8008b52:	791b      	ldrb	r3, [r3, #4]
 8008b54:	2b01      	cmp	r3, #1
 8008b56:	d015      	beq.n	8008b84 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008b58:	68bb      	ldr	r3, [r7, #8]
 8008b5a:	699b      	ldr	r3, [r3, #24]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	f000 811b 	beq.w	8008d98 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008b62:	69fb      	ldr	r3, [r7, #28]
 8008b64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008b6a:	68bb      	ldr	r3, [r7, #8]
 8008b6c:	781b      	ldrb	r3, [r3, #0]
 8008b6e:	f003 030f 	and.w	r3, r3, #15
 8008b72:	2101      	movs	r1, #1
 8008b74:	fa01 f303 	lsl.w	r3, r1, r3
 8008b78:	69f9      	ldr	r1, [r7, #28]
 8008b7a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008b7e:	4313      	orrs	r3, r2
 8008b80:	634b      	str	r3, [r1, #52]	; 0x34
 8008b82:	e109      	b.n	8008d98 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008b84:	69fb      	ldr	r3, [r7, #28]
 8008b86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b8a:	689b      	ldr	r3, [r3, #8]
 8008b8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d110      	bne.n	8008bb6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008b94:	69bb      	ldr	r3, [r7, #24]
 8008b96:	015a      	lsls	r2, r3, #5
 8008b98:	69fb      	ldr	r3, [r7, #28]
 8008b9a:	4413      	add	r3, r2
 8008b9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	69ba      	ldr	r2, [r7, #24]
 8008ba4:	0151      	lsls	r1, r2, #5
 8008ba6:	69fa      	ldr	r2, [r7, #28]
 8008ba8:	440a      	add	r2, r1
 8008baa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008bae:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008bb2:	6013      	str	r3, [r2, #0]
 8008bb4:	e00f      	b.n	8008bd6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008bb6:	69bb      	ldr	r3, [r7, #24]
 8008bb8:	015a      	lsls	r2, r3, #5
 8008bba:	69fb      	ldr	r3, [r7, #28]
 8008bbc:	4413      	add	r3, r2
 8008bbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	69ba      	ldr	r2, [r7, #24]
 8008bc6:	0151      	lsls	r1, r2, #5
 8008bc8:	69fa      	ldr	r2, [r7, #28]
 8008bca:	440a      	add	r2, r1
 8008bcc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008bd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008bd4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008bd6:	68bb      	ldr	r3, [r7, #8]
 8008bd8:	6919      	ldr	r1, [r3, #16]
 8008bda:	68bb      	ldr	r3, [r7, #8]
 8008bdc:	781a      	ldrb	r2, [r3, #0]
 8008bde:	68bb      	ldr	r3, [r7, #8]
 8008be0:	699b      	ldr	r3, [r3, #24]
 8008be2:	b298      	uxth	r0, r3
 8008be4:	79fb      	ldrb	r3, [r7, #7]
 8008be6:	9300      	str	r3, [sp, #0]
 8008be8:	4603      	mov	r3, r0
 8008bea:	68f8      	ldr	r0, [r7, #12]
 8008bec:	f000 fade 	bl	80091ac <USB_WritePacket>
 8008bf0:	e0d2      	b.n	8008d98 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008bf2:	69bb      	ldr	r3, [r7, #24]
 8008bf4:	015a      	lsls	r2, r3, #5
 8008bf6:	69fb      	ldr	r3, [r7, #28]
 8008bf8:	4413      	add	r3, r2
 8008bfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bfe:	691b      	ldr	r3, [r3, #16]
 8008c00:	69ba      	ldr	r2, [r7, #24]
 8008c02:	0151      	lsls	r1, r2, #5
 8008c04:	69fa      	ldr	r2, [r7, #28]
 8008c06:	440a      	add	r2, r1
 8008c08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c0c:	0cdb      	lsrs	r3, r3, #19
 8008c0e:	04db      	lsls	r3, r3, #19
 8008c10:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008c12:	69bb      	ldr	r3, [r7, #24]
 8008c14:	015a      	lsls	r2, r3, #5
 8008c16:	69fb      	ldr	r3, [r7, #28]
 8008c18:	4413      	add	r3, r2
 8008c1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c1e:	691b      	ldr	r3, [r3, #16]
 8008c20:	69ba      	ldr	r2, [r7, #24]
 8008c22:	0151      	lsls	r1, r2, #5
 8008c24:	69fa      	ldr	r2, [r7, #28]
 8008c26:	440a      	add	r2, r1
 8008c28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c2c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008c30:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008c34:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8008c36:	68bb      	ldr	r3, [r7, #8]
 8008c38:	699b      	ldr	r3, [r3, #24]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d126      	bne.n	8008c8c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008c3e:	69bb      	ldr	r3, [r7, #24]
 8008c40:	015a      	lsls	r2, r3, #5
 8008c42:	69fb      	ldr	r3, [r7, #28]
 8008c44:	4413      	add	r3, r2
 8008c46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c4a:	691a      	ldr	r2, [r3, #16]
 8008c4c:	68bb      	ldr	r3, [r7, #8]
 8008c4e:	68db      	ldr	r3, [r3, #12]
 8008c50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008c54:	69b9      	ldr	r1, [r7, #24]
 8008c56:	0148      	lsls	r0, r1, #5
 8008c58:	69f9      	ldr	r1, [r7, #28]
 8008c5a:	4401      	add	r1, r0
 8008c5c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008c60:	4313      	orrs	r3, r2
 8008c62:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008c64:	69bb      	ldr	r3, [r7, #24]
 8008c66:	015a      	lsls	r2, r3, #5
 8008c68:	69fb      	ldr	r3, [r7, #28]
 8008c6a:	4413      	add	r3, r2
 8008c6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c70:	691b      	ldr	r3, [r3, #16]
 8008c72:	69ba      	ldr	r2, [r7, #24]
 8008c74:	0151      	lsls	r1, r2, #5
 8008c76:	69fa      	ldr	r2, [r7, #28]
 8008c78:	440a      	add	r2, r1
 8008c7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c7e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008c82:	6113      	str	r3, [r2, #16]
 8008c84:	e03a      	b.n	8008cfc <USB_EPStartXfer+0x3e4>
 8008c86:	bf00      	nop
 8008c88:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008c8c:	68bb      	ldr	r3, [r7, #8]
 8008c8e:	699a      	ldr	r2, [r3, #24]
 8008c90:	68bb      	ldr	r3, [r7, #8]
 8008c92:	68db      	ldr	r3, [r3, #12]
 8008c94:	4413      	add	r3, r2
 8008c96:	1e5a      	subs	r2, r3, #1
 8008c98:	68bb      	ldr	r3, [r7, #8]
 8008c9a:	68db      	ldr	r3, [r3, #12]
 8008c9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ca0:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8008ca2:	68bb      	ldr	r3, [r7, #8]
 8008ca4:	68db      	ldr	r3, [r3, #12]
 8008ca6:	8afa      	ldrh	r2, [r7, #22]
 8008ca8:	fb03 f202 	mul.w	r2, r3, r2
 8008cac:	68bb      	ldr	r3, [r7, #8]
 8008cae:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008cb0:	69bb      	ldr	r3, [r7, #24]
 8008cb2:	015a      	lsls	r2, r3, #5
 8008cb4:	69fb      	ldr	r3, [r7, #28]
 8008cb6:	4413      	add	r3, r2
 8008cb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cbc:	691a      	ldr	r2, [r3, #16]
 8008cbe:	8afb      	ldrh	r3, [r7, #22]
 8008cc0:	04d9      	lsls	r1, r3, #19
 8008cc2:	4b38      	ldr	r3, [pc, #224]	; (8008da4 <USB_EPStartXfer+0x48c>)
 8008cc4:	400b      	ands	r3, r1
 8008cc6:	69b9      	ldr	r1, [r7, #24]
 8008cc8:	0148      	lsls	r0, r1, #5
 8008cca:	69f9      	ldr	r1, [r7, #28]
 8008ccc:	4401      	add	r1, r0
 8008cce:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008cd2:	4313      	orrs	r3, r2
 8008cd4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8008cd6:	69bb      	ldr	r3, [r7, #24]
 8008cd8:	015a      	lsls	r2, r3, #5
 8008cda:	69fb      	ldr	r3, [r7, #28]
 8008cdc:	4413      	add	r3, r2
 8008cde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ce2:	691a      	ldr	r2, [r3, #16]
 8008ce4:	68bb      	ldr	r3, [r7, #8]
 8008ce6:	69db      	ldr	r3, [r3, #28]
 8008ce8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008cec:	69b9      	ldr	r1, [r7, #24]
 8008cee:	0148      	lsls	r0, r1, #5
 8008cf0:	69f9      	ldr	r1, [r7, #28]
 8008cf2:	4401      	add	r1, r0
 8008cf4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008cf8:	4313      	orrs	r3, r2
 8008cfa:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008cfc:	79fb      	ldrb	r3, [r7, #7]
 8008cfe:	2b01      	cmp	r3, #1
 8008d00:	d10d      	bne.n	8008d1e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008d02:	68bb      	ldr	r3, [r7, #8]
 8008d04:	691b      	ldr	r3, [r3, #16]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d009      	beq.n	8008d1e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008d0a:	68bb      	ldr	r3, [r7, #8]
 8008d0c:	6919      	ldr	r1, [r3, #16]
 8008d0e:	69bb      	ldr	r3, [r7, #24]
 8008d10:	015a      	lsls	r2, r3, #5
 8008d12:	69fb      	ldr	r3, [r7, #28]
 8008d14:	4413      	add	r3, r2
 8008d16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d1a:	460a      	mov	r2, r1
 8008d1c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008d1e:	68bb      	ldr	r3, [r7, #8]
 8008d20:	791b      	ldrb	r3, [r3, #4]
 8008d22:	2b01      	cmp	r3, #1
 8008d24:	d128      	bne.n	8008d78 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008d26:	69fb      	ldr	r3, [r7, #28]
 8008d28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d2c:	689b      	ldr	r3, [r3, #8]
 8008d2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d110      	bne.n	8008d58 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008d36:	69bb      	ldr	r3, [r7, #24]
 8008d38:	015a      	lsls	r2, r3, #5
 8008d3a:	69fb      	ldr	r3, [r7, #28]
 8008d3c:	4413      	add	r3, r2
 8008d3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	69ba      	ldr	r2, [r7, #24]
 8008d46:	0151      	lsls	r1, r2, #5
 8008d48:	69fa      	ldr	r2, [r7, #28]
 8008d4a:	440a      	add	r2, r1
 8008d4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008d50:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008d54:	6013      	str	r3, [r2, #0]
 8008d56:	e00f      	b.n	8008d78 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008d58:	69bb      	ldr	r3, [r7, #24]
 8008d5a:	015a      	lsls	r2, r3, #5
 8008d5c:	69fb      	ldr	r3, [r7, #28]
 8008d5e:	4413      	add	r3, r2
 8008d60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	69ba      	ldr	r2, [r7, #24]
 8008d68:	0151      	lsls	r1, r2, #5
 8008d6a:	69fa      	ldr	r2, [r7, #28]
 8008d6c:	440a      	add	r2, r1
 8008d6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008d72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008d76:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008d78:	69bb      	ldr	r3, [r7, #24]
 8008d7a:	015a      	lsls	r2, r3, #5
 8008d7c:	69fb      	ldr	r3, [r7, #28]
 8008d7e:	4413      	add	r3, r2
 8008d80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	69ba      	ldr	r2, [r7, #24]
 8008d88:	0151      	lsls	r1, r2, #5
 8008d8a:	69fa      	ldr	r2, [r7, #28]
 8008d8c:	440a      	add	r2, r1
 8008d8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008d92:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008d96:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008d98:	2300      	movs	r3, #0
}
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	3720      	adds	r7, #32
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	bd80      	pop	{r7, pc}
 8008da2:	bf00      	nop
 8008da4:	1ff80000 	.word	0x1ff80000

08008da8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008da8:	b480      	push	{r7}
 8008daa:	b087      	sub	sp, #28
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	60f8      	str	r0, [r7, #12]
 8008db0:	60b9      	str	r1, [r7, #8]
 8008db2:	4613      	mov	r3, r2
 8008db4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8008dba:	68bb      	ldr	r3, [r7, #8]
 8008dbc:	781b      	ldrb	r3, [r3, #0]
 8008dbe:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008dc0:	68bb      	ldr	r3, [r7, #8]
 8008dc2:	785b      	ldrb	r3, [r3, #1]
 8008dc4:	2b01      	cmp	r3, #1
 8008dc6:	f040 80ce 	bne.w	8008f66 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008dca:	68bb      	ldr	r3, [r7, #8]
 8008dcc:	699b      	ldr	r3, [r3, #24]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d132      	bne.n	8008e38 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008dd2:	693b      	ldr	r3, [r7, #16]
 8008dd4:	015a      	lsls	r2, r3, #5
 8008dd6:	697b      	ldr	r3, [r7, #20]
 8008dd8:	4413      	add	r3, r2
 8008dda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008dde:	691b      	ldr	r3, [r3, #16]
 8008de0:	693a      	ldr	r2, [r7, #16]
 8008de2:	0151      	lsls	r1, r2, #5
 8008de4:	697a      	ldr	r2, [r7, #20]
 8008de6:	440a      	add	r2, r1
 8008de8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008dec:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008df0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008df4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008df6:	693b      	ldr	r3, [r7, #16]
 8008df8:	015a      	lsls	r2, r3, #5
 8008dfa:	697b      	ldr	r3, [r7, #20]
 8008dfc:	4413      	add	r3, r2
 8008dfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e02:	691b      	ldr	r3, [r3, #16]
 8008e04:	693a      	ldr	r2, [r7, #16]
 8008e06:	0151      	lsls	r1, r2, #5
 8008e08:	697a      	ldr	r2, [r7, #20]
 8008e0a:	440a      	add	r2, r1
 8008e0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e10:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008e14:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008e16:	693b      	ldr	r3, [r7, #16]
 8008e18:	015a      	lsls	r2, r3, #5
 8008e1a:	697b      	ldr	r3, [r7, #20]
 8008e1c:	4413      	add	r3, r2
 8008e1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e22:	691b      	ldr	r3, [r3, #16]
 8008e24:	693a      	ldr	r2, [r7, #16]
 8008e26:	0151      	lsls	r1, r2, #5
 8008e28:	697a      	ldr	r2, [r7, #20]
 8008e2a:	440a      	add	r2, r1
 8008e2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e30:	0cdb      	lsrs	r3, r3, #19
 8008e32:	04db      	lsls	r3, r3, #19
 8008e34:	6113      	str	r3, [r2, #16]
 8008e36:	e04e      	b.n	8008ed6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008e38:	693b      	ldr	r3, [r7, #16]
 8008e3a:	015a      	lsls	r2, r3, #5
 8008e3c:	697b      	ldr	r3, [r7, #20]
 8008e3e:	4413      	add	r3, r2
 8008e40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e44:	691b      	ldr	r3, [r3, #16]
 8008e46:	693a      	ldr	r2, [r7, #16]
 8008e48:	0151      	lsls	r1, r2, #5
 8008e4a:	697a      	ldr	r2, [r7, #20]
 8008e4c:	440a      	add	r2, r1
 8008e4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e52:	0cdb      	lsrs	r3, r3, #19
 8008e54:	04db      	lsls	r3, r3, #19
 8008e56:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008e58:	693b      	ldr	r3, [r7, #16]
 8008e5a:	015a      	lsls	r2, r3, #5
 8008e5c:	697b      	ldr	r3, [r7, #20]
 8008e5e:	4413      	add	r3, r2
 8008e60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e64:	691b      	ldr	r3, [r3, #16]
 8008e66:	693a      	ldr	r2, [r7, #16]
 8008e68:	0151      	lsls	r1, r2, #5
 8008e6a:	697a      	ldr	r2, [r7, #20]
 8008e6c:	440a      	add	r2, r1
 8008e6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e72:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008e76:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008e7a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8008e7c:	68bb      	ldr	r3, [r7, #8]
 8008e7e:	699a      	ldr	r2, [r3, #24]
 8008e80:	68bb      	ldr	r3, [r7, #8]
 8008e82:	68db      	ldr	r3, [r3, #12]
 8008e84:	429a      	cmp	r2, r3
 8008e86:	d903      	bls.n	8008e90 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8008e88:	68bb      	ldr	r3, [r7, #8]
 8008e8a:	68da      	ldr	r2, [r3, #12]
 8008e8c:	68bb      	ldr	r3, [r7, #8]
 8008e8e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008e90:	693b      	ldr	r3, [r7, #16]
 8008e92:	015a      	lsls	r2, r3, #5
 8008e94:	697b      	ldr	r3, [r7, #20]
 8008e96:	4413      	add	r3, r2
 8008e98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e9c:	691b      	ldr	r3, [r3, #16]
 8008e9e:	693a      	ldr	r2, [r7, #16]
 8008ea0:	0151      	lsls	r1, r2, #5
 8008ea2:	697a      	ldr	r2, [r7, #20]
 8008ea4:	440a      	add	r2, r1
 8008ea6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008eaa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008eae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008eb0:	693b      	ldr	r3, [r7, #16]
 8008eb2:	015a      	lsls	r2, r3, #5
 8008eb4:	697b      	ldr	r3, [r7, #20]
 8008eb6:	4413      	add	r3, r2
 8008eb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ebc:	691a      	ldr	r2, [r3, #16]
 8008ebe:	68bb      	ldr	r3, [r7, #8]
 8008ec0:	699b      	ldr	r3, [r3, #24]
 8008ec2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008ec6:	6939      	ldr	r1, [r7, #16]
 8008ec8:	0148      	lsls	r0, r1, #5
 8008eca:	6979      	ldr	r1, [r7, #20]
 8008ecc:	4401      	add	r1, r0
 8008ece:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008ed2:	4313      	orrs	r3, r2
 8008ed4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008ed6:	79fb      	ldrb	r3, [r7, #7]
 8008ed8:	2b01      	cmp	r3, #1
 8008eda:	d11e      	bne.n	8008f1a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008edc:	68bb      	ldr	r3, [r7, #8]
 8008ede:	695b      	ldr	r3, [r3, #20]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d009      	beq.n	8008ef8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008ee4:	693b      	ldr	r3, [r7, #16]
 8008ee6:	015a      	lsls	r2, r3, #5
 8008ee8:	697b      	ldr	r3, [r7, #20]
 8008eea:	4413      	add	r3, r2
 8008eec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ef0:	461a      	mov	r2, r3
 8008ef2:	68bb      	ldr	r3, [r7, #8]
 8008ef4:	695b      	ldr	r3, [r3, #20]
 8008ef6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008ef8:	693b      	ldr	r3, [r7, #16]
 8008efa:	015a      	lsls	r2, r3, #5
 8008efc:	697b      	ldr	r3, [r7, #20]
 8008efe:	4413      	add	r3, r2
 8008f00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	693a      	ldr	r2, [r7, #16]
 8008f08:	0151      	lsls	r1, r2, #5
 8008f0a:	697a      	ldr	r2, [r7, #20]
 8008f0c:	440a      	add	r2, r1
 8008f0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f12:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008f16:	6013      	str	r3, [r2, #0]
 8008f18:	e097      	b.n	800904a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008f1a:	693b      	ldr	r3, [r7, #16]
 8008f1c:	015a      	lsls	r2, r3, #5
 8008f1e:	697b      	ldr	r3, [r7, #20]
 8008f20:	4413      	add	r3, r2
 8008f22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	693a      	ldr	r2, [r7, #16]
 8008f2a:	0151      	lsls	r1, r2, #5
 8008f2c:	697a      	ldr	r2, [r7, #20]
 8008f2e:	440a      	add	r2, r1
 8008f30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f34:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008f38:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8008f3a:	68bb      	ldr	r3, [r7, #8]
 8008f3c:	699b      	ldr	r3, [r3, #24]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	f000 8083 	beq.w	800904a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008f44:	697b      	ldr	r3, [r7, #20]
 8008f46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008f4c:	68bb      	ldr	r3, [r7, #8]
 8008f4e:	781b      	ldrb	r3, [r3, #0]
 8008f50:	f003 030f 	and.w	r3, r3, #15
 8008f54:	2101      	movs	r1, #1
 8008f56:	fa01 f303 	lsl.w	r3, r1, r3
 8008f5a:	6979      	ldr	r1, [r7, #20]
 8008f5c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008f60:	4313      	orrs	r3, r2
 8008f62:	634b      	str	r3, [r1, #52]	; 0x34
 8008f64:	e071      	b.n	800904a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008f66:	693b      	ldr	r3, [r7, #16]
 8008f68:	015a      	lsls	r2, r3, #5
 8008f6a:	697b      	ldr	r3, [r7, #20]
 8008f6c:	4413      	add	r3, r2
 8008f6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f72:	691b      	ldr	r3, [r3, #16]
 8008f74:	693a      	ldr	r2, [r7, #16]
 8008f76:	0151      	lsls	r1, r2, #5
 8008f78:	697a      	ldr	r2, [r7, #20]
 8008f7a:	440a      	add	r2, r1
 8008f7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f80:	0cdb      	lsrs	r3, r3, #19
 8008f82:	04db      	lsls	r3, r3, #19
 8008f84:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008f86:	693b      	ldr	r3, [r7, #16]
 8008f88:	015a      	lsls	r2, r3, #5
 8008f8a:	697b      	ldr	r3, [r7, #20]
 8008f8c:	4413      	add	r3, r2
 8008f8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f92:	691b      	ldr	r3, [r3, #16]
 8008f94:	693a      	ldr	r2, [r7, #16]
 8008f96:	0151      	lsls	r1, r2, #5
 8008f98:	697a      	ldr	r2, [r7, #20]
 8008f9a:	440a      	add	r2, r1
 8008f9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008fa0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008fa4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008fa8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8008faa:	68bb      	ldr	r3, [r7, #8]
 8008fac:	699b      	ldr	r3, [r3, #24]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d003      	beq.n	8008fba <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8008fb2:	68bb      	ldr	r3, [r7, #8]
 8008fb4:	68da      	ldr	r2, [r3, #12]
 8008fb6:	68bb      	ldr	r3, [r7, #8]
 8008fb8:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8008fba:	68bb      	ldr	r3, [r7, #8]
 8008fbc:	68da      	ldr	r2, [r3, #12]
 8008fbe:	68bb      	ldr	r3, [r7, #8]
 8008fc0:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008fc2:	693b      	ldr	r3, [r7, #16]
 8008fc4:	015a      	lsls	r2, r3, #5
 8008fc6:	697b      	ldr	r3, [r7, #20]
 8008fc8:	4413      	add	r3, r2
 8008fca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fce:	691b      	ldr	r3, [r3, #16]
 8008fd0:	693a      	ldr	r2, [r7, #16]
 8008fd2:	0151      	lsls	r1, r2, #5
 8008fd4:	697a      	ldr	r2, [r7, #20]
 8008fd6:	440a      	add	r2, r1
 8008fd8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008fdc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008fe0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8008fe2:	693b      	ldr	r3, [r7, #16]
 8008fe4:	015a      	lsls	r2, r3, #5
 8008fe6:	697b      	ldr	r3, [r7, #20]
 8008fe8:	4413      	add	r3, r2
 8008fea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fee:	691a      	ldr	r2, [r3, #16]
 8008ff0:	68bb      	ldr	r3, [r7, #8]
 8008ff2:	69db      	ldr	r3, [r3, #28]
 8008ff4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008ff8:	6939      	ldr	r1, [r7, #16]
 8008ffa:	0148      	lsls	r0, r1, #5
 8008ffc:	6979      	ldr	r1, [r7, #20]
 8008ffe:	4401      	add	r1, r0
 8009000:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009004:	4313      	orrs	r3, r2
 8009006:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8009008:	79fb      	ldrb	r3, [r7, #7]
 800900a:	2b01      	cmp	r3, #1
 800900c:	d10d      	bne.n	800902a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800900e:	68bb      	ldr	r3, [r7, #8]
 8009010:	691b      	ldr	r3, [r3, #16]
 8009012:	2b00      	cmp	r3, #0
 8009014:	d009      	beq.n	800902a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009016:	68bb      	ldr	r3, [r7, #8]
 8009018:	6919      	ldr	r1, [r3, #16]
 800901a:	693b      	ldr	r3, [r7, #16]
 800901c:	015a      	lsls	r2, r3, #5
 800901e:	697b      	ldr	r3, [r7, #20]
 8009020:	4413      	add	r3, r2
 8009022:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009026:	460a      	mov	r2, r1
 8009028:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800902a:	693b      	ldr	r3, [r7, #16]
 800902c:	015a      	lsls	r2, r3, #5
 800902e:	697b      	ldr	r3, [r7, #20]
 8009030:	4413      	add	r3, r2
 8009032:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	693a      	ldr	r2, [r7, #16]
 800903a:	0151      	lsls	r1, r2, #5
 800903c:	697a      	ldr	r2, [r7, #20]
 800903e:	440a      	add	r2, r1
 8009040:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009044:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009048:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800904a:	2300      	movs	r3, #0
}
 800904c:	4618      	mov	r0, r3
 800904e:	371c      	adds	r7, #28
 8009050:	46bd      	mov	sp, r7
 8009052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009056:	4770      	bx	lr

08009058 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009058:	b480      	push	{r7}
 800905a:	b087      	sub	sp, #28
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]
 8009060:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009062:	2300      	movs	r3, #0
 8009064:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8009066:	2300      	movs	r3, #0
 8009068:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800906e:	683b      	ldr	r3, [r7, #0]
 8009070:	785b      	ldrb	r3, [r3, #1]
 8009072:	2b01      	cmp	r3, #1
 8009074:	d14a      	bne.n	800910c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009076:	683b      	ldr	r3, [r7, #0]
 8009078:	781b      	ldrb	r3, [r3, #0]
 800907a:	015a      	lsls	r2, r3, #5
 800907c:	693b      	ldr	r3, [r7, #16]
 800907e:	4413      	add	r3, r2
 8009080:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800908a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800908e:	f040 8086 	bne.w	800919e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8009092:	683b      	ldr	r3, [r7, #0]
 8009094:	781b      	ldrb	r3, [r3, #0]
 8009096:	015a      	lsls	r2, r3, #5
 8009098:	693b      	ldr	r3, [r7, #16]
 800909a:	4413      	add	r3, r2
 800909c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	683a      	ldr	r2, [r7, #0]
 80090a4:	7812      	ldrb	r2, [r2, #0]
 80090a6:	0151      	lsls	r1, r2, #5
 80090a8:	693a      	ldr	r2, [r7, #16]
 80090aa:	440a      	add	r2, r1
 80090ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80090b0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80090b4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80090b6:	683b      	ldr	r3, [r7, #0]
 80090b8:	781b      	ldrb	r3, [r3, #0]
 80090ba:	015a      	lsls	r2, r3, #5
 80090bc:	693b      	ldr	r3, [r7, #16]
 80090be:	4413      	add	r3, r2
 80090c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	683a      	ldr	r2, [r7, #0]
 80090c8:	7812      	ldrb	r2, [r2, #0]
 80090ca:	0151      	lsls	r1, r2, #5
 80090cc:	693a      	ldr	r2, [r7, #16]
 80090ce:	440a      	add	r2, r1
 80090d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80090d4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80090d8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	3301      	adds	r3, #1
 80090de:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	f242 7210 	movw	r2, #10000	; 0x2710
 80090e6:	4293      	cmp	r3, r2
 80090e8:	d902      	bls.n	80090f0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80090ea:	2301      	movs	r3, #1
 80090ec:	75fb      	strb	r3, [r7, #23]
          break;
 80090ee:	e056      	b.n	800919e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80090f0:	683b      	ldr	r3, [r7, #0]
 80090f2:	781b      	ldrb	r3, [r3, #0]
 80090f4:	015a      	lsls	r2, r3, #5
 80090f6:	693b      	ldr	r3, [r7, #16]
 80090f8:	4413      	add	r3, r2
 80090fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009104:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009108:	d0e7      	beq.n	80090da <USB_EPStopXfer+0x82>
 800910a:	e048      	b.n	800919e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800910c:	683b      	ldr	r3, [r7, #0]
 800910e:	781b      	ldrb	r3, [r3, #0]
 8009110:	015a      	lsls	r2, r3, #5
 8009112:	693b      	ldr	r3, [r7, #16]
 8009114:	4413      	add	r3, r2
 8009116:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009120:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009124:	d13b      	bne.n	800919e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8009126:	683b      	ldr	r3, [r7, #0]
 8009128:	781b      	ldrb	r3, [r3, #0]
 800912a:	015a      	lsls	r2, r3, #5
 800912c:	693b      	ldr	r3, [r7, #16]
 800912e:	4413      	add	r3, r2
 8009130:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	683a      	ldr	r2, [r7, #0]
 8009138:	7812      	ldrb	r2, [r2, #0]
 800913a:	0151      	lsls	r1, r2, #5
 800913c:	693a      	ldr	r2, [r7, #16]
 800913e:	440a      	add	r2, r1
 8009140:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009144:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009148:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800914a:	683b      	ldr	r3, [r7, #0]
 800914c:	781b      	ldrb	r3, [r3, #0]
 800914e:	015a      	lsls	r2, r3, #5
 8009150:	693b      	ldr	r3, [r7, #16]
 8009152:	4413      	add	r3, r2
 8009154:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	683a      	ldr	r2, [r7, #0]
 800915c:	7812      	ldrb	r2, [r2, #0]
 800915e:	0151      	lsls	r1, r2, #5
 8009160:	693a      	ldr	r2, [r7, #16]
 8009162:	440a      	add	r2, r1
 8009164:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009168:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800916c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	3301      	adds	r3, #1
 8009172:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	f242 7210 	movw	r2, #10000	; 0x2710
 800917a:	4293      	cmp	r3, r2
 800917c:	d902      	bls.n	8009184 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800917e:	2301      	movs	r3, #1
 8009180:	75fb      	strb	r3, [r7, #23]
          break;
 8009182:	e00c      	b.n	800919e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8009184:	683b      	ldr	r3, [r7, #0]
 8009186:	781b      	ldrb	r3, [r3, #0]
 8009188:	015a      	lsls	r2, r3, #5
 800918a:	693b      	ldr	r3, [r7, #16]
 800918c:	4413      	add	r3, r2
 800918e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009198:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800919c:	d0e7      	beq.n	800916e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800919e:	7dfb      	ldrb	r3, [r7, #23]
}
 80091a0:	4618      	mov	r0, r3
 80091a2:	371c      	adds	r7, #28
 80091a4:	46bd      	mov	sp, r7
 80091a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091aa:	4770      	bx	lr

080091ac <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80091ac:	b480      	push	{r7}
 80091ae:	b089      	sub	sp, #36	; 0x24
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	60f8      	str	r0, [r7, #12]
 80091b4:	60b9      	str	r1, [r7, #8]
 80091b6:	4611      	mov	r1, r2
 80091b8:	461a      	mov	r2, r3
 80091ba:	460b      	mov	r3, r1
 80091bc:	71fb      	strb	r3, [r7, #7]
 80091be:	4613      	mov	r3, r2
 80091c0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80091c6:	68bb      	ldr	r3, [r7, #8]
 80091c8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80091ca:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d123      	bne.n	800921a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80091d2:	88bb      	ldrh	r3, [r7, #4]
 80091d4:	3303      	adds	r3, #3
 80091d6:	089b      	lsrs	r3, r3, #2
 80091d8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80091da:	2300      	movs	r3, #0
 80091dc:	61bb      	str	r3, [r7, #24]
 80091de:	e018      	b.n	8009212 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80091e0:	79fb      	ldrb	r3, [r7, #7]
 80091e2:	031a      	lsls	r2, r3, #12
 80091e4:	697b      	ldr	r3, [r7, #20]
 80091e6:	4413      	add	r3, r2
 80091e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80091ec:	461a      	mov	r2, r3
 80091ee:	69fb      	ldr	r3, [r7, #28]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80091f4:	69fb      	ldr	r3, [r7, #28]
 80091f6:	3301      	adds	r3, #1
 80091f8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80091fa:	69fb      	ldr	r3, [r7, #28]
 80091fc:	3301      	adds	r3, #1
 80091fe:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009200:	69fb      	ldr	r3, [r7, #28]
 8009202:	3301      	adds	r3, #1
 8009204:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009206:	69fb      	ldr	r3, [r7, #28]
 8009208:	3301      	adds	r3, #1
 800920a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800920c:	69bb      	ldr	r3, [r7, #24]
 800920e:	3301      	adds	r3, #1
 8009210:	61bb      	str	r3, [r7, #24]
 8009212:	69ba      	ldr	r2, [r7, #24]
 8009214:	693b      	ldr	r3, [r7, #16]
 8009216:	429a      	cmp	r2, r3
 8009218:	d3e2      	bcc.n	80091e0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800921a:	2300      	movs	r3, #0
}
 800921c:	4618      	mov	r0, r3
 800921e:	3724      	adds	r7, #36	; 0x24
 8009220:	46bd      	mov	sp, r7
 8009222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009226:	4770      	bx	lr

08009228 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009228:	b480      	push	{r7}
 800922a:	b08b      	sub	sp, #44	; 0x2c
 800922c:	af00      	add	r7, sp, #0
 800922e:	60f8      	str	r0, [r7, #12]
 8009230:	60b9      	str	r1, [r7, #8]
 8009232:	4613      	mov	r3, r2
 8009234:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800923a:	68bb      	ldr	r3, [r7, #8]
 800923c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800923e:	88fb      	ldrh	r3, [r7, #6]
 8009240:	089b      	lsrs	r3, r3, #2
 8009242:	b29b      	uxth	r3, r3
 8009244:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009246:	88fb      	ldrh	r3, [r7, #6]
 8009248:	f003 0303 	and.w	r3, r3, #3
 800924c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800924e:	2300      	movs	r3, #0
 8009250:	623b      	str	r3, [r7, #32]
 8009252:	e014      	b.n	800927e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009254:	69bb      	ldr	r3, [r7, #24]
 8009256:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800925a:	681a      	ldr	r2, [r3, #0]
 800925c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800925e:	601a      	str	r2, [r3, #0]
    pDest++;
 8009260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009262:	3301      	adds	r3, #1
 8009264:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009268:	3301      	adds	r3, #1
 800926a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800926c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800926e:	3301      	adds	r3, #1
 8009270:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009274:	3301      	adds	r3, #1
 8009276:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8009278:	6a3b      	ldr	r3, [r7, #32]
 800927a:	3301      	adds	r3, #1
 800927c:	623b      	str	r3, [r7, #32]
 800927e:	6a3a      	ldr	r2, [r7, #32]
 8009280:	697b      	ldr	r3, [r7, #20]
 8009282:	429a      	cmp	r2, r3
 8009284:	d3e6      	bcc.n	8009254 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009286:	8bfb      	ldrh	r3, [r7, #30]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d01e      	beq.n	80092ca <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800928c:	2300      	movs	r3, #0
 800928e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009290:	69bb      	ldr	r3, [r7, #24]
 8009292:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009296:	461a      	mov	r2, r3
 8009298:	f107 0310 	add.w	r3, r7, #16
 800929c:	6812      	ldr	r2, [r2, #0]
 800929e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80092a0:	693a      	ldr	r2, [r7, #16]
 80092a2:	6a3b      	ldr	r3, [r7, #32]
 80092a4:	b2db      	uxtb	r3, r3
 80092a6:	00db      	lsls	r3, r3, #3
 80092a8:	fa22 f303 	lsr.w	r3, r2, r3
 80092ac:	b2da      	uxtb	r2, r3
 80092ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092b0:	701a      	strb	r2, [r3, #0]
      i++;
 80092b2:	6a3b      	ldr	r3, [r7, #32]
 80092b4:	3301      	adds	r3, #1
 80092b6:	623b      	str	r3, [r7, #32]
      pDest++;
 80092b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092ba:	3301      	adds	r3, #1
 80092bc:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80092be:	8bfb      	ldrh	r3, [r7, #30]
 80092c0:	3b01      	subs	r3, #1
 80092c2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80092c4:	8bfb      	ldrh	r3, [r7, #30]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d1ea      	bne.n	80092a0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80092ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80092cc:	4618      	mov	r0, r3
 80092ce:	372c      	adds	r7, #44	; 0x2c
 80092d0:	46bd      	mov	sp, r7
 80092d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d6:	4770      	bx	lr

080092d8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80092d8:	b480      	push	{r7}
 80092da:	b085      	sub	sp, #20
 80092dc:	af00      	add	r7, sp, #0
 80092de:	6078      	str	r0, [r7, #4]
 80092e0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80092e6:	683b      	ldr	r3, [r7, #0]
 80092e8:	781b      	ldrb	r3, [r3, #0]
 80092ea:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80092ec:	683b      	ldr	r3, [r7, #0]
 80092ee:	785b      	ldrb	r3, [r3, #1]
 80092f0:	2b01      	cmp	r3, #1
 80092f2:	d12c      	bne.n	800934e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80092f4:	68bb      	ldr	r3, [r7, #8]
 80092f6:	015a      	lsls	r2, r3, #5
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	4413      	add	r3, r2
 80092fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	2b00      	cmp	r3, #0
 8009304:	db12      	blt.n	800932c <USB_EPSetStall+0x54>
 8009306:	68bb      	ldr	r3, [r7, #8]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d00f      	beq.n	800932c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800930c:	68bb      	ldr	r3, [r7, #8]
 800930e:	015a      	lsls	r2, r3, #5
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	4413      	add	r3, r2
 8009314:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	68ba      	ldr	r2, [r7, #8]
 800931c:	0151      	lsls	r1, r2, #5
 800931e:	68fa      	ldr	r2, [r7, #12]
 8009320:	440a      	add	r2, r1
 8009322:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009326:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800932a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800932c:	68bb      	ldr	r3, [r7, #8]
 800932e:	015a      	lsls	r2, r3, #5
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	4413      	add	r3, r2
 8009334:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	68ba      	ldr	r2, [r7, #8]
 800933c:	0151      	lsls	r1, r2, #5
 800933e:	68fa      	ldr	r2, [r7, #12]
 8009340:	440a      	add	r2, r1
 8009342:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009346:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800934a:	6013      	str	r3, [r2, #0]
 800934c:	e02b      	b.n	80093a6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800934e:	68bb      	ldr	r3, [r7, #8]
 8009350:	015a      	lsls	r2, r3, #5
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	4413      	add	r3, r2
 8009356:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	2b00      	cmp	r3, #0
 800935e:	db12      	blt.n	8009386 <USB_EPSetStall+0xae>
 8009360:	68bb      	ldr	r3, [r7, #8]
 8009362:	2b00      	cmp	r3, #0
 8009364:	d00f      	beq.n	8009386 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009366:	68bb      	ldr	r3, [r7, #8]
 8009368:	015a      	lsls	r2, r3, #5
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	4413      	add	r3, r2
 800936e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	68ba      	ldr	r2, [r7, #8]
 8009376:	0151      	lsls	r1, r2, #5
 8009378:	68fa      	ldr	r2, [r7, #12]
 800937a:	440a      	add	r2, r1
 800937c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009380:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009384:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009386:	68bb      	ldr	r3, [r7, #8]
 8009388:	015a      	lsls	r2, r3, #5
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	4413      	add	r3, r2
 800938e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	68ba      	ldr	r2, [r7, #8]
 8009396:	0151      	lsls	r1, r2, #5
 8009398:	68fa      	ldr	r2, [r7, #12]
 800939a:	440a      	add	r2, r1
 800939c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80093a0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80093a4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80093a6:	2300      	movs	r3, #0
}
 80093a8:	4618      	mov	r0, r3
 80093aa:	3714      	adds	r7, #20
 80093ac:	46bd      	mov	sp, r7
 80093ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b2:	4770      	bx	lr

080093b4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80093b4:	b480      	push	{r7}
 80093b6:	b085      	sub	sp, #20
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
 80093bc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80093c2:	683b      	ldr	r3, [r7, #0]
 80093c4:	781b      	ldrb	r3, [r3, #0]
 80093c6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80093c8:	683b      	ldr	r3, [r7, #0]
 80093ca:	785b      	ldrb	r3, [r3, #1]
 80093cc:	2b01      	cmp	r3, #1
 80093ce:	d128      	bne.n	8009422 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80093d0:	68bb      	ldr	r3, [r7, #8]
 80093d2:	015a      	lsls	r2, r3, #5
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	4413      	add	r3, r2
 80093d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	68ba      	ldr	r2, [r7, #8]
 80093e0:	0151      	lsls	r1, r2, #5
 80093e2:	68fa      	ldr	r2, [r7, #12]
 80093e4:	440a      	add	r2, r1
 80093e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80093ea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80093ee:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80093f0:	683b      	ldr	r3, [r7, #0]
 80093f2:	791b      	ldrb	r3, [r3, #4]
 80093f4:	2b03      	cmp	r3, #3
 80093f6:	d003      	beq.n	8009400 <USB_EPClearStall+0x4c>
 80093f8:	683b      	ldr	r3, [r7, #0]
 80093fa:	791b      	ldrb	r3, [r3, #4]
 80093fc:	2b02      	cmp	r3, #2
 80093fe:	d138      	bne.n	8009472 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009400:	68bb      	ldr	r3, [r7, #8]
 8009402:	015a      	lsls	r2, r3, #5
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	4413      	add	r3, r2
 8009408:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	68ba      	ldr	r2, [r7, #8]
 8009410:	0151      	lsls	r1, r2, #5
 8009412:	68fa      	ldr	r2, [r7, #12]
 8009414:	440a      	add	r2, r1
 8009416:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800941a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800941e:	6013      	str	r3, [r2, #0]
 8009420:	e027      	b.n	8009472 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009422:	68bb      	ldr	r3, [r7, #8]
 8009424:	015a      	lsls	r2, r3, #5
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	4413      	add	r3, r2
 800942a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	68ba      	ldr	r2, [r7, #8]
 8009432:	0151      	lsls	r1, r2, #5
 8009434:	68fa      	ldr	r2, [r7, #12]
 8009436:	440a      	add	r2, r1
 8009438:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800943c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009440:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009442:	683b      	ldr	r3, [r7, #0]
 8009444:	791b      	ldrb	r3, [r3, #4]
 8009446:	2b03      	cmp	r3, #3
 8009448:	d003      	beq.n	8009452 <USB_EPClearStall+0x9e>
 800944a:	683b      	ldr	r3, [r7, #0]
 800944c:	791b      	ldrb	r3, [r3, #4]
 800944e:	2b02      	cmp	r3, #2
 8009450:	d10f      	bne.n	8009472 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009452:	68bb      	ldr	r3, [r7, #8]
 8009454:	015a      	lsls	r2, r3, #5
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	4413      	add	r3, r2
 800945a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	68ba      	ldr	r2, [r7, #8]
 8009462:	0151      	lsls	r1, r2, #5
 8009464:	68fa      	ldr	r2, [r7, #12]
 8009466:	440a      	add	r2, r1
 8009468:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800946c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009470:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009472:	2300      	movs	r3, #0
}
 8009474:	4618      	mov	r0, r3
 8009476:	3714      	adds	r7, #20
 8009478:	46bd      	mov	sp, r7
 800947a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800947e:	4770      	bx	lr

08009480 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009480:	b480      	push	{r7}
 8009482:	b085      	sub	sp, #20
 8009484:	af00      	add	r7, sp, #0
 8009486:	6078      	str	r0, [r7, #4]
 8009488:	460b      	mov	r3, r1
 800948a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	68fa      	ldr	r2, [r7, #12]
 800949a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800949e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80094a2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094aa:	681a      	ldr	r2, [r3, #0]
 80094ac:	78fb      	ldrb	r3, [r7, #3]
 80094ae:	011b      	lsls	r3, r3, #4
 80094b0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80094b4:	68f9      	ldr	r1, [r7, #12]
 80094b6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80094ba:	4313      	orrs	r3, r2
 80094bc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80094be:	2300      	movs	r3, #0
}
 80094c0:	4618      	mov	r0, r3
 80094c2:	3714      	adds	r7, #20
 80094c4:	46bd      	mov	sp, r7
 80094c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ca:	4770      	bx	lr

080094cc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80094cc:	b480      	push	{r7}
 80094ce:	b085      	sub	sp, #20
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	68fa      	ldr	r2, [r7, #12]
 80094e2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80094e6:	f023 0303 	bic.w	r3, r3, #3
 80094ea:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094f2:	685b      	ldr	r3, [r3, #4]
 80094f4:	68fa      	ldr	r2, [r7, #12]
 80094f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80094fa:	f023 0302 	bic.w	r3, r3, #2
 80094fe:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009500:	2300      	movs	r3, #0
}
 8009502:	4618      	mov	r0, r3
 8009504:	3714      	adds	r7, #20
 8009506:	46bd      	mov	sp, r7
 8009508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950c:	4770      	bx	lr

0800950e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800950e:	b480      	push	{r7}
 8009510:	b085      	sub	sp, #20
 8009512:	af00      	add	r7, sp, #0
 8009514:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	68fa      	ldr	r2, [r7, #12]
 8009524:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009528:	f023 0303 	bic.w	r3, r3, #3
 800952c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009534:	685b      	ldr	r3, [r3, #4]
 8009536:	68fa      	ldr	r2, [r7, #12]
 8009538:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800953c:	f043 0302 	orr.w	r3, r3, #2
 8009540:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009542:	2300      	movs	r3, #0
}
 8009544:	4618      	mov	r0, r3
 8009546:	3714      	adds	r7, #20
 8009548:	46bd      	mov	sp, r7
 800954a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954e:	4770      	bx	lr

08009550 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009550:	b480      	push	{r7}
 8009552:	b085      	sub	sp, #20
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	695b      	ldr	r3, [r3, #20]
 800955c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	699b      	ldr	r3, [r3, #24]
 8009562:	68fa      	ldr	r2, [r7, #12]
 8009564:	4013      	ands	r3, r2
 8009566:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009568:	68fb      	ldr	r3, [r7, #12]
}
 800956a:	4618      	mov	r0, r3
 800956c:	3714      	adds	r7, #20
 800956e:	46bd      	mov	sp, r7
 8009570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009574:	4770      	bx	lr

08009576 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009576:	b480      	push	{r7}
 8009578:	b085      	sub	sp, #20
 800957a:	af00      	add	r7, sp, #0
 800957c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009588:	699b      	ldr	r3, [r3, #24]
 800958a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009592:	69db      	ldr	r3, [r3, #28]
 8009594:	68ba      	ldr	r2, [r7, #8]
 8009596:	4013      	ands	r3, r2
 8009598:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800959a:	68bb      	ldr	r3, [r7, #8]
 800959c:	0c1b      	lsrs	r3, r3, #16
}
 800959e:	4618      	mov	r0, r3
 80095a0:	3714      	adds	r7, #20
 80095a2:	46bd      	mov	sp, r7
 80095a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a8:	4770      	bx	lr

080095aa <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80095aa:	b480      	push	{r7}
 80095ac:	b085      	sub	sp, #20
 80095ae:	af00      	add	r7, sp, #0
 80095b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095bc:	699b      	ldr	r3, [r3, #24]
 80095be:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095c6:	69db      	ldr	r3, [r3, #28]
 80095c8:	68ba      	ldr	r2, [r7, #8]
 80095ca:	4013      	ands	r3, r2
 80095cc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80095ce:	68bb      	ldr	r3, [r7, #8]
 80095d0:	b29b      	uxth	r3, r3
}
 80095d2:	4618      	mov	r0, r3
 80095d4:	3714      	adds	r7, #20
 80095d6:	46bd      	mov	sp, r7
 80095d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095dc:	4770      	bx	lr

080095de <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80095de:	b480      	push	{r7}
 80095e0:	b085      	sub	sp, #20
 80095e2:	af00      	add	r7, sp, #0
 80095e4:	6078      	str	r0, [r7, #4]
 80095e6:	460b      	mov	r3, r1
 80095e8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80095ee:	78fb      	ldrb	r3, [r7, #3]
 80095f0:	015a      	lsls	r2, r3, #5
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	4413      	add	r3, r2
 80095f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095fa:	689b      	ldr	r3, [r3, #8]
 80095fc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009604:	695b      	ldr	r3, [r3, #20]
 8009606:	68ba      	ldr	r2, [r7, #8]
 8009608:	4013      	ands	r3, r2
 800960a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800960c:	68bb      	ldr	r3, [r7, #8]
}
 800960e:	4618      	mov	r0, r3
 8009610:	3714      	adds	r7, #20
 8009612:	46bd      	mov	sp, r7
 8009614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009618:	4770      	bx	lr

0800961a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800961a:	b480      	push	{r7}
 800961c:	b087      	sub	sp, #28
 800961e:	af00      	add	r7, sp, #0
 8009620:	6078      	str	r0, [r7, #4]
 8009622:	460b      	mov	r3, r1
 8009624:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800962a:	697b      	ldr	r3, [r7, #20]
 800962c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009630:	691b      	ldr	r3, [r3, #16]
 8009632:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009634:	697b      	ldr	r3, [r7, #20]
 8009636:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800963a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800963c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800963e:	78fb      	ldrb	r3, [r7, #3]
 8009640:	f003 030f 	and.w	r3, r3, #15
 8009644:	68fa      	ldr	r2, [r7, #12]
 8009646:	fa22 f303 	lsr.w	r3, r2, r3
 800964a:	01db      	lsls	r3, r3, #7
 800964c:	b2db      	uxtb	r3, r3
 800964e:	693a      	ldr	r2, [r7, #16]
 8009650:	4313      	orrs	r3, r2
 8009652:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009654:	78fb      	ldrb	r3, [r7, #3]
 8009656:	015a      	lsls	r2, r3, #5
 8009658:	697b      	ldr	r3, [r7, #20]
 800965a:	4413      	add	r3, r2
 800965c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009660:	689b      	ldr	r3, [r3, #8]
 8009662:	693a      	ldr	r2, [r7, #16]
 8009664:	4013      	ands	r3, r2
 8009666:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009668:	68bb      	ldr	r3, [r7, #8]
}
 800966a:	4618      	mov	r0, r3
 800966c:	371c      	adds	r7, #28
 800966e:	46bd      	mov	sp, r7
 8009670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009674:	4770      	bx	lr

08009676 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009676:	b480      	push	{r7}
 8009678:	b083      	sub	sp, #12
 800967a:	af00      	add	r7, sp, #0
 800967c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	695b      	ldr	r3, [r3, #20]
 8009682:	f003 0301 	and.w	r3, r3, #1
}
 8009686:	4618      	mov	r0, r3
 8009688:	370c      	adds	r7, #12
 800968a:	46bd      	mov	sp, r7
 800968c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009690:	4770      	bx	lr

08009692 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8009692:	b480      	push	{r7}
 8009694:	b085      	sub	sp, #20
 8009696:	af00      	add	r7, sp, #0
 8009698:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	68fa      	ldr	r2, [r7, #12]
 80096a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80096ac:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80096b0:	f023 0307 	bic.w	r3, r3, #7
 80096b4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096bc:	685b      	ldr	r3, [r3, #4]
 80096be:	68fa      	ldr	r2, [r7, #12]
 80096c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80096c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80096c8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80096ca:	2300      	movs	r3, #0
}
 80096cc:	4618      	mov	r0, r3
 80096ce:	3714      	adds	r7, #20
 80096d0:	46bd      	mov	sp, r7
 80096d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d6:	4770      	bx	lr

080096d8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80096d8:	b480      	push	{r7}
 80096da:	b087      	sub	sp, #28
 80096dc:	af00      	add	r7, sp, #0
 80096de:	60f8      	str	r0, [r7, #12]
 80096e0:	460b      	mov	r3, r1
 80096e2:	607a      	str	r2, [r7, #4]
 80096e4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	333c      	adds	r3, #60	; 0x3c
 80096ee:	3304      	adds	r3, #4
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80096f4:	693b      	ldr	r3, [r7, #16]
 80096f6:	4a26      	ldr	r2, [pc, #152]	; (8009790 <USB_EP0_OutStart+0xb8>)
 80096f8:	4293      	cmp	r3, r2
 80096fa:	d90a      	bls.n	8009712 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80096fc:	697b      	ldr	r3, [r7, #20]
 80096fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009708:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800970c:	d101      	bne.n	8009712 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800970e:	2300      	movs	r3, #0
 8009710:	e037      	b.n	8009782 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009712:	697b      	ldr	r3, [r7, #20]
 8009714:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009718:	461a      	mov	r2, r3
 800971a:	2300      	movs	r3, #0
 800971c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800971e:	697b      	ldr	r3, [r7, #20]
 8009720:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009724:	691b      	ldr	r3, [r3, #16]
 8009726:	697a      	ldr	r2, [r7, #20]
 8009728:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800972c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009730:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009732:	697b      	ldr	r3, [r7, #20]
 8009734:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009738:	691b      	ldr	r3, [r3, #16]
 800973a:	697a      	ldr	r2, [r7, #20]
 800973c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009740:	f043 0318 	orr.w	r3, r3, #24
 8009744:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009746:	697b      	ldr	r3, [r7, #20]
 8009748:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800974c:	691b      	ldr	r3, [r3, #16]
 800974e:	697a      	ldr	r2, [r7, #20]
 8009750:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009754:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8009758:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800975a:	7afb      	ldrb	r3, [r7, #11]
 800975c:	2b01      	cmp	r3, #1
 800975e:	d10f      	bne.n	8009780 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009760:	697b      	ldr	r3, [r7, #20]
 8009762:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009766:	461a      	mov	r2, r3
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800976c:	697b      	ldr	r3, [r7, #20]
 800976e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	697a      	ldr	r2, [r7, #20]
 8009776:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800977a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800977e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009780:	2300      	movs	r3, #0
}
 8009782:	4618      	mov	r0, r3
 8009784:	371c      	adds	r7, #28
 8009786:	46bd      	mov	sp, r7
 8009788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978c:	4770      	bx	lr
 800978e:	bf00      	nop
 8009790:	4f54300a 	.word	0x4f54300a

08009794 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009794:	b480      	push	{r7}
 8009796:	b085      	sub	sp, #20
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800979c:	2300      	movs	r3, #0
 800979e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	3301      	adds	r3, #1
 80097a4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	4a13      	ldr	r2, [pc, #76]	; (80097f8 <USB_CoreReset+0x64>)
 80097aa:	4293      	cmp	r3, r2
 80097ac:	d901      	bls.n	80097b2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80097ae:	2303      	movs	r3, #3
 80097b0:	e01b      	b.n	80097ea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	691b      	ldr	r3, [r3, #16]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	daf2      	bge.n	80097a0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80097ba:	2300      	movs	r3, #0
 80097bc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	691b      	ldr	r3, [r3, #16]
 80097c2:	f043 0201 	orr.w	r2, r3, #1
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	3301      	adds	r3, #1
 80097ce:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	4a09      	ldr	r2, [pc, #36]	; (80097f8 <USB_CoreReset+0x64>)
 80097d4:	4293      	cmp	r3, r2
 80097d6:	d901      	bls.n	80097dc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80097d8:	2303      	movs	r3, #3
 80097da:	e006      	b.n	80097ea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	691b      	ldr	r3, [r3, #16]
 80097e0:	f003 0301 	and.w	r3, r3, #1
 80097e4:	2b01      	cmp	r3, #1
 80097e6:	d0f0      	beq.n	80097ca <USB_CoreReset+0x36>

  return HAL_OK;
 80097e8:	2300      	movs	r3, #0
}
 80097ea:	4618      	mov	r0, r3
 80097ec:	3714      	adds	r7, #20
 80097ee:	46bd      	mov	sp, r7
 80097f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f4:	4770      	bx	lr
 80097f6:	bf00      	nop
 80097f8:	00030d40 	.word	0x00030d40

080097fc <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80097fc:	b580      	push	{r7, lr}
 80097fe:	b084      	sub	sp, #16
 8009800:	af00      	add	r7, sp, #0
 8009802:	6078      	str	r0, [r7, #4]
 8009804:	460b      	mov	r3, r1
 8009806:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 8009808:	2018      	movs	r0, #24
 800980a:	f002 fa99 	bl	800bd40 <USBD_static_malloc>
 800980e:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	2b00      	cmp	r3, #0
 8009814:	d109      	bne.n	800982a <USBD_CUSTOM_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	32b0      	adds	r2, #176	; 0xb0
 8009820:	2100      	movs	r1, #0
 8009822:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8009826:	2302      	movs	r3, #2
 8009828:	e08a      	b.n	8009940 <USBD_CUSTOM_HID_Init+0x144>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	32b0      	adds	r2, #176	; 0xb0
 8009834:	68f9      	ldr	r1, [r7, #12]
 8009836:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	32b0      	adds	r2, #176	; 0xb0
 8009844:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	7c1b      	ldrb	r3, [r3, #16]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d11b      	bne.n	800988e <USBD_CUSTOM_HID_Init+0x92>
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8009856:	4b3c      	ldr	r3, [pc, #240]	; (8009948 <USBD_CUSTOM_HID_Init+0x14c>)
 8009858:	781b      	ldrb	r3, [r3, #0]
 800985a:	f003 020f 	and.w	r2, r3, #15
 800985e:	6879      	ldr	r1, [r7, #4]
 8009860:	4613      	mov	r3, r2
 8009862:	009b      	lsls	r3, r3, #2
 8009864:	4413      	add	r3, r2
 8009866:	009b      	lsls	r3, r3, #2
 8009868:	440b      	add	r3, r1
 800986a:	3326      	adds	r3, #38	; 0x26
 800986c:	2205      	movs	r2, #5
 800986e:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8009870:	4b36      	ldr	r3, [pc, #216]	; (800994c <USBD_CUSTOM_HID_Init+0x150>)
 8009872:	781b      	ldrb	r3, [r3, #0]
 8009874:	f003 020f 	and.w	r2, r3, #15
 8009878:	6879      	ldr	r1, [r7, #4]
 800987a:	4613      	mov	r3, r2
 800987c:	009b      	lsls	r3, r3, #2
 800987e:	4413      	add	r3, r2
 8009880:	009b      	lsls	r3, r3, #2
 8009882:	440b      	add	r3, r1
 8009884:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 8009888:	2205      	movs	r2, #5
 800988a:	801a      	strh	r2, [r3, #0]
 800988c:	e01a      	b.n	80098c4 <USBD_CUSTOM_HID_Init+0xc8>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 800988e:	4b2e      	ldr	r3, [pc, #184]	; (8009948 <USBD_CUSTOM_HID_Init+0x14c>)
 8009890:	781b      	ldrb	r3, [r3, #0]
 8009892:	f003 020f 	and.w	r2, r3, #15
 8009896:	6879      	ldr	r1, [r7, #4]
 8009898:	4613      	mov	r3, r2
 800989a:	009b      	lsls	r3, r3, #2
 800989c:	4413      	add	r3, r2
 800989e:	009b      	lsls	r3, r3, #2
 80098a0:	440b      	add	r3, r1
 80098a2:	3326      	adds	r3, #38	; 0x26
 80098a4:	2205      	movs	r2, #5
 80098a6:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 80098a8:	4b28      	ldr	r3, [pc, #160]	; (800994c <USBD_CUSTOM_HID_Init+0x150>)
 80098aa:	781b      	ldrb	r3, [r3, #0]
 80098ac:	f003 020f 	and.w	r2, r3, #15
 80098b0:	6879      	ldr	r1, [r7, #4]
 80098b2:	4613      	mov	r3, r2
 80098b4:	009b      	lsls	r3, r3, #2
 80098b6:	4413      	add	r3, r2
 80098b8:	009b      	lsls	r3, r3, #2
 80098ba:	440b      	add	r3, r1
 80098bc:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 80098c0:	2205      	movs	r2, #5
 80098c2:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDInEpAdd, USBD_EP_TYPE_INTR,
 80098c4:	4b20      	ldr	r3, [pc, #128]	; (8009948 <USBD_CUSTOM_HID_Init+0x14c>)
 80098c6:	7819      	ldrb	r1, [r3, #0]
 80098c8:	2302      	movs	r3, #2
 80098ca:	2203      	movs	r2, #3
 80098cc:	6878      	ldr	r0, [r7, #4]
 80098ce:	f002 f926 	bl	800bb1e <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 1U;
 80098d2:	4b1d      	ldr	r3, [pc, #116]	; (8009948 <USBD_CUSTOM_HID_Init+0x14c>)
 80098d4:	781b      	ldrb	r3, [r3, #0]
 80098d6:	f003 020f 	and.w	r2, r3, #15
 80098da:	6879      	ldr	r1, [r7, #4]
 80098dc:	4613      	mov	r3, r2
 80098de:	009b      	lsls	r3, r3, #2
 80098e0:	4413      	add	r3, r2
 80098e2:	009b      	lsls	r3, r3, #2
 80098e4:	440b      	add	r3, r1
 80098e6:	3324      	adds	r3, #36	; 0x24
 80098e8:	2201      	movs	r2, #1
 80098ea:	801a      	strh	r2, [r3, #0]

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDOutEpAdd, USBD_EP_TYPE_INTR,
 80098ec:	4b17      	ldr	r3, [pc, #92]	; (800994c <USBD_CUSTOM_HID_Init+0x150>)
 80098ee:	7819      	ldrb	r1, [r3, #0]
 80098f0:	2302      	movs	r3, #2
 80098f2:	2203      	movs	r2, #3
 80098f4:	6878      	ldr	r0, [r7, #4]
 80098f6:	f002 f912 	bl	800bb1e <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 1U;
 80098fa:	4b14      	ldr	r3, [pc, #80]	; (800994c <USBD_CUSTOM_HID_Init+0x150>)
 80098fc:	781b      	ldrb	r3, [r3, #0]
 80098fe:	f003 020f 	and.w	r2, r3, #15
 8009902:	6879      	ldr	r1, [r7, #4]
 8009904:	4613      	mov	r3, r2
 8009906:	009b      	lsls	r3, r3, #2
 8009908:	4413      	add	r3, r2
 800990a:	009b      	lsls	r3, r3, #2
 800990c:	440b      	add	r3, r1
 800990e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009912:	2201      	movs	r2, #1
 8009914:	801a      	strh	r2, [r3, #0]

  hhid->state = CUSTOM_HID_IDLE;
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	2200      	movs	r2, #0
 800991a:	751a      	strb	r2, [r3, #20]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009922:	687a      	ldr	r2, [r7, #4]
 8009924:	33b0      	adds	r3, #176	; 0xb0
 8009926:	009b      	lsls	r3, r3, #2
 8009928:	4413      	add	r3, r2
 800992a:	685b      	ldr	r3, [r3, #4]
 800992c:	685b      	ldr	r3, [r3, #4]
 800992e:	4798      	blx	r3

  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 8009930:	4b06      	ldr	r3, [pc, #24]	; (800994c <USBD_CUSTOM_HID_Init+0x150>)
 8009932:	7819      	ldrb	r1, [r3, #0]
 8009934:	68fa      	ldr	r2, [r7, #12]
 8009936:	2302      	movs	r3, #2
 8009938:	6878      	ldr	r0, [r7, #4]
 800993a:	f002 f9df 	bl	800bcfc <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 800993e:	2300      	movs	r3, #0
}
 8009940:	4618      	mov	r0, r3
 8009942:	3710      	adds	r7, #16
 8009944:	46bd      	mov	sp, r7
 8009946:	bd80      	pop	{r7, pc}
 8009948:	200000a2 	.word	0x200000a2
 800994c:	200000a3 	.word	0x200000a3

08009950 <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009950:	b580      	push	{r7, lr}
 8009952:	b082      	sub	sp, #8
 8009954:	af00      	add	r7, sp, #0
 8009956:	6078      	str	r0, [r7, #4]
 8009958:	460b      	mov	r3, r1
 800995a:	70fb      	strb	r3, [r7, #3]
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDInEpAdd);
 800995c:	4b37      	ldr	r3, [pc, #220]	; (8009a3c <USBD_CUSTOM_HID_DeInit+0xec>)
 800995e:	781b      	ldrb	r3, [r3, #0]
 8009960:	4619      	mov	r1, r3
 8009962:	6878      	ldr	r0, [r7, #4]
 8009964:	f002 f901 	bl	800bb6a <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 0U;
 8009968:	4b34      	ldr	r3, [pc, #208]	; (8009a3c <USBD_CUSTOM_HID_DeInit+0xec>)
 800996a:	781b      	ldrb	r3, [r3, #0]
 800996c:	f003 020f 	and.w	r2, r3, #15
 8009970:	6879      	ldr	r1, [r7, #4]
 8009972:	4613      	mov	r3, r2
 8009974:	009b      	lsls	r3, r3, #2
 8009976:	4413      	add	r3, r2
 8009978:	009b      	lsls	r3, r3, #2
 800997a:	440b      	add	r3, r1
 800997c:	3324      	adds	r3, #36	; 0x24
 800997e:	2200      	movs	r2, #0
 8009980:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = 0U;
 8009982:	4b2e      	ldr	r3, [pc, #184]	; (8009a3c <USBD_CUSTOM_HID_DeInit+0xec>)
 8009984:	781b      	ldrb	r3, [r3, #0]
 8009986:	f003 020f 	and.w	r2, r3, #15
 800998a:	6879      	ldr	r1, [r7, #4]
 800998c:	4613      	mov	r3, r2
 800998e:	009b      	lsls	r3, r3, #2
 8009990:	4413      	add	r3, r2
 8009992:	009b      	lsls	r3, r3, #2
 8009994:	440b      	add	r3, r1
 8009996:	3326      	adds	r3, #38	; 0x26
 8009998:	2200      	movs	r2, #0
 800999a:	801a      	strh	r2, [r3, #0]

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDOutEpAdd);
 800999c:	4b28      	ldr	r3, [pc, #160]	; (8009a40 <USBD_CUSTOM_HID_DeInit+0xf0>)
 800999e:	781b      	ldrb	r3, [r3, #0]
 80099a0:	4619      	mov	r1, r3
 80099a2:	6878      	ldr	r0, [r7, #4]
 80099a4:	f002 f8e1 	bl	800bb6a <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 0U;
 80099a8:	4b25      	ldr	r3, [pc, #148]	; (8009a40 <USBD_CUSTOM_HID_DeInit+0xf0>)
 80099aa:	781b      	ldrb	r3, [r3, #0]
 80099ac:	f003 020f 	and.w	r2, r3, #15
 80099b0:	6879      	ldr	r1, [r7, #4]
 80099b2:	4613      	mov	r3, r2
 80099b4:	009b      	lsls	r3, r3, #2
 80099b6:	4413      	add	r3, r2
 80099b8:	009b      	lsls	r3, r3, #2
 80099ba:	440b      	add	r3, r1
 80099bc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80099c0:	2200      	movs	r2, #0
 80099c2:	801a      	strh	r2, [r3, #0]
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = 0U;
 80099c4:	4b1e      	ldr	r3, [pc, #120]	; (8009a40 <USBD_CUSTOM_HID_DeInit+0xf0>)
 80099c6:	781b      	ldrb	r3, [r3, #0]
 80099c8:	f003 020f 	and.w	r2, r3, #15
 80099cc:	6879      	ldr	r1, [r7, #4]
 80099ce:	4613      	mov	r3, r2
 80099d0:	009b      	lsls	r3, r3, #2
 80099d2:	4413      	add	r3, r2
 80099d4:	009b      	lsls	r3, r3, #2
 80099d6:	440b      	add	r3, r1
 80099d8:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 80099dc:	2200      	movs	r2, #0
 80099de:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	32b0      	adds	r2, #176	; 0xb0
 80099ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d01f      	beq.n	8009a32 <USBD_CUSTOM_HID_DeInit+0xe2>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80099f8:	687a      	ldr	r2, [r7, #4]
 80099fa:	33b0      	adds	r3, #176	; 0xb0
 80099fc:	009b      	lsls	r3, r3, #2
 80099fe:	4413      	add	r3, r2
 8009a00:	685b      	ldr	r3, [r3, #4]
 8009a02:	689b      	ldr	r3, [r3, #8]
 8009a04:	4798      	blx	r3
    USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	32b0      	adds	r2, #176	; 0xb0
 8009a10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a14:	4618      	mov	r0, r3
 8009a16:	f002 f9a1 	bl	800bd5c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	32b0      	adds	r2, #176	; 0xb0
 8009a24:	2100      	movs	r1, #0
 8009a26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	2200      	movs	r2, #0
 8009a2e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009a32:	2300      	movs	r3, #0
}
 8009a34:	4618      	mov	r0, r3
 8009a36:	3708      	adds	r7, #8
 8009a38:	46bd      	mov	sp, r7
 8009a3a:	bd80      	pop	{r7, pc}
 8009a3c:	200000a2 	.word	0x200000a2
 8009a40:	200000a3 	.word	0x200000a3

08009a44 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 8009a44:	b580      	push	{r7, lr}
 8009a46:	b088      	sub	sp, #32
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
 8009a4c:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	32b0      	adds	r2, #176	; 0xb0
 8009a58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a5c:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8009a5e:	2300      	movs	r3, #0
 8009a60:	83fb      	strh	r3, [r7, #30]
  uint8_t  *pbuf = NULL;
 8009a62:	2300      	movs	r3, #0
 8009a64:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8009a66:	2300      	movs	r3, #0
 8009a68:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
 8009a6e:	693b      	ldr	r3, [r7, #16]
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d101      	bne.n	8009a78 <USBD_CUSTOM_HID_Setup+0x34>
  {
    return (uint8_t)USBD_FAIL;
 8009a74:	2303      	movs	r3, #3
 8009a76:	e0f8      	b.n	8009c6a <USBD_CUSTOM_HID_Setup+0x226>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009a78:	683b      	ldr	r3, [r7, #0]
 8009a7a:	781b      	ldrb	r3, [r3, #0]
 8009a7c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d056      	beq.n	8009b32 <USBD_CUSTOM_HID_Setup+0xee>
 8009a84:	2b20      	cmp	r3, #32
 8009a86:	f040 80e8 	bne.w	8009c5a <USBD_CUSTOM_HID_Setup+0x216>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8009a8a:	683b      	ldr	r3, [r7, #0]
 8009a8c:	785b      	ldrb	r3, [r3, #1]
 8009a8e:	3b02      	subs	r3, #2
 8009a90:	2b09      	cmp	r3, #9
 8009a92:	d846      	bhi.n	8009b22 <USBD_CUSTOM_HID_Setup+0xde>
 8009a94:	a201      	add	r2, pc, #4	; (adr r2, 8009a9c <USBD_CUSTOM_HID_Setup+0x58>)
 8009a96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a9a:	bf00      	nop
 8009a9c:	08009af5 	.word	0x08009af5
 8009aa0:	08009ad3 	.word	0x08009ad3
 8009aa4:	08009b23 	.word	0x08009b23
 8009aa8:	08009b23 	.word	0x08009b23
 8009aac:	08009b23 	.word	0x08009b23
 8009ab0:	08009b23 	.word	0x08009b23
 8009ab4:	08009b23 	.word	0x08009b23
 8009ab8:	08009b05 	.word	0x08009b05
 8009abc:	08009ae3 	.word	0x08009ae3
 8009ac0:	08009ac5 	.word	0x08009ac5
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8009ac4:	683b      	ldr	r3, [r7, #0]
 8009ac6:	885b      	ldrh	r3, [r3, #2]
 8009ac8:	b2db      	uxtb	r3, r3
 8009aca:	461a      	mov	r2, r3
 8009acc:	693b      	ldr	r3, [r7, #16]
 8009ace:	605a      	str	r2, [r3, #4]
          break;
 8009ad0:	e02e      	b.n	8009b30 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8009ad2:	693b      	ldr	r3, [r7, #16]
 8009ad4:	3304      	adds	r3, #4
 8009ad6:	2201      	movs	r2, #1
 8009ad8:	4619      	mov	r1, r3
 8009ada:	6878      	ldr	r0, [r7, #4]
 8009adc:	f001 fc94 	bl	800b408 <USBD_CtlSendData>
          break;
 8009ae0:	e026      	b.n	8009b30 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8009ae2:	683b      	ldr	r3, [r7, #0]
 8009ae4:	885b      	ldrh	r3, [r3, #2]
 8009ae6:	0a1b      	lsrs	r3, r3, #8
 8009ae8:	b29b      	uxth	r3, r3
 8009aea:	b2db      	uxtb	r3, r3
 8009aec:	461a      	mov	r2, r3
 8009aee:	693b      	ldr	r3, [r7, #16]
 8009af0:	609a      	str	r2, [r3, #8]
          break;
 8009af2:	e01d      	b.n	8009b30 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8009af4:	693b      	ldr	r3, [r7, #16]
 8009af6:	3308      	adds	r3, #8
 8009af8:	2201      	movs	r2, #1
 8009afa:	4619      	mov	r1, r3
 8009afc:	6878      	ldr	r0, [r7, #4]
 8009afe:	f001 fc83 	bl	800b408 <USBD_CtlSendData>
          break;
 8009b02:	e015      	b.n	8009b30 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_SET_REPORT:
          hhid->IsReportAvailable = 1U;
 8009b04:	693b      	ldr	r3, [r7, #16]
 8009b06:	2201      	movs	r2, #1
 8009b08:	611a      	str	r2, [r3, #16]
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 8009b0a:	6939      	ldr	r1, [r7, #16]
                                  MIN(req->wLength, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE));
 8009b0c:	683b      	ldr	r3, [r7, #0]
 8009b0e:	88db      	ldrh	r3, [r3, #6]
 8009b10:	2b02      	cmp	r3, #2
 8009b12:	bf28      	it	cs
 8009b14:	2302      	movcs	r3, #2
 8009b16:	b29b      	uxth	r3, r3
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 8009b18:	461a      	mov	r2, r3
 8009b1a:	6878      	ldr	r0, [r7, #4]
 8009b1c:	f001 fca0 	bl	800b460 <USBD_CtlPrepareRx>
          break;
 8009b20:	e006      	b.n	8009b30 <USBD_CUSTOM_HID_Setup+0xec>

        default:
          USBD_CtlError(pdev, req);
 8009b22:	6839      	ldr	r1, [r7, #0]
 8009b24:	6878      	ldr	r0, [r7, #4]
 8009b26:	f001 fbfe 	bl	800b326 <USBD_CtlError>
          ret = USBD_FAIL;
 8009b2a:	2303      	movs	r3, #3
 8009b2c:	75fb      	strb	r3, [r7, #23]
          break;
 8009b2e:	bf00      	nop
      }
      break;
 8009b30:	e09a      	b.n	8009c68 <USBD_CUSTOM_HID_Setup+0x224>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009b32:	683b      	ldr	r3, [r7, #0]
 8009b34:	785b      	ldrb	r3, [r3, #1]
 8009b36:	2b0b      	cmp	r3, #11
 8009b38:	f200 8086 	bhi.w	8009c48 <USBD_CUSTOM_HID_Setup+0x204>
 8009b3c:	a201      	add	r2, pc, #4	; (adr r2, 8009b44 <USBD_CUSTOM_HID_Setup+0x100>)
 8009b3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b42:	bf00      	nop
 8009b44:	08009b75 	.word	0x08009b75
 8009b48:	08009c57 	.word	0x08009c57
 8009b4c:	08009c49 	.word	0x08009c49
 8009b50:	08009c49 	.word	0x08009c49
 8009b54:	08009c49 	.word	0x08009c49
 8009b58:	08009c49 	.word	0x08009c49
 8009b5c:	08009b9f 	.word	0x08009b9f
 8009b60:	08009c49 	.word	0x08009c49
 8009b64:	08009c49 	.word	0x08009c49
 8009b68:	08009c49 	.word	0x08009c49
 8009b6c:	08009bf7 	.word	0x08009bf7
 8009b70:	08009c21 	.word	0x08009c21
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b7a:	b2db      	uxtb	r3, r3
 8009b7c:	2b03      	cmp	r3, #3
 8009b7e:	d107      	bne.n	8009b90 <USBD_CUSTOM_HID_Setup+0x14c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009b80:	f107 030e 	add.w	r3, r7, #14
 8009b84:	2202      	movs	r2, #2
 8009b86:	4619      	mov	r1, r3
 8009b88:	6878      	ldr	r0, [r7, #4]
 8009b8a:	f001 fc3d 	bl	800b408 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009b8e:	e063      	b.n	8009c58 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 8009b90:	6839      	ldr	r1, [r7, #0]
 8009b92:	6878      	ldr	r0, [r7, #4]
 8009b94:	f001 fbc7 	bl	800b326 <USBD_CtlError>
            ret = USBD_FAIL;
 8009b98:	2303      	movs	r3, #3
 8009b9a:	75fb      	strb	r3, [r7, #23]
          break;
 8009b9c:	e05c      	b.n	8009c58 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 8009b9e:	683b      	ldr	r3, [r7, #0]
 8009ba0:	885b      	ldrh	r3, [r3, #2]
 8009ba2:	0a1b      	lsrs	r3, r3, #8
 8009ba4:	b29b      	uxth	r3, r3
 8009ba6:	2b22      	cmp	r3, #34	; 0x22
 8009ba8:	d110      	bne.n	8009bcc <USBD_CUSTOM_HID_Setup+0x188>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 8009baa:	683b      	ldr	r3, [r7, #0]
 8009bac:	88db      	ldrh	r3, [r3, #6]
 8009bae:	2b02      	cmp	r3, #2
 8009bb0:	bf28      	it	cs
 8009bb2:	2302      	movcs	r3, #2
 8009bb4:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->pReport;
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009bbc:	687a      	ldr	r2, [r7, #4]
 8009bbe:	33b0      	adds	r3, #176	; 0xb0
 8009bc0:	009b      	lsls	r3, r3, #2
 8009bc2:	4413      	add	r3, r2
 8009bc4:	685b      	ldr	r3, [r3, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	61bb      	str	r3, [r7, #24]
 8009bca:	e00d      	b.n	8009be8 <USBD_CUSTOM_HID_Setup+0x1a4>
          }
          else
          {
            if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 8009bcc:	683b      	ldr	r3, [r7, #0]
 8009bce:	885b      	ldrh	r3, [r3, #2]
 8009bd0:	0a1b      	lsrs	r3, r3, #8
 8009bd2:	b29b      	uxth	r3, r3
 8009bd4:	2b21      	cmp	r3, #33	; 0x21
 8009bd6:	d107      	bne.n	8009be8 <USBD_CUSTOM_HID_Setup+0x1a4>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 8009bd8:	4b26      	ldr	r3, [pc, #152]	; (8009c74 <USBD_CUSTOM_HID_Setup+0x230>)
 8009bda:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8009bdc:	683b      	ldr	r3, [r7, #0]
 8009bde:	88db      	ldrh	r3, [r3, #6]
 8009be0:	2b09      	cmp	r3, #9
 8009be2:	bf28      	it	cs
 8009be4:	2309      	movcs	r3, #9
 8009be6:	83fb      	strh	r3, [r7, #30]
            }
          }

          (void)USBD_CtlSendData(pdev, pbuf, len);
 8009be8:	8bfb      	ldrh	r3, [r7, #30]
 8009bea:	461a      	mov	r2, r3
 8009bec:	69b9      	ldr	r1, [r7, #24]
 8009bee:	6878      	ldr	r0, [r7, #4]
 8009bf0:	f001 fc0a 	bl	800b408 <USBD_CtlSendData>
          break;
 8009bf4:	e030      	b.n	8009c58 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009bfc:	b2db      	uxtb	r3, r3
 8009bfe:	2b03      	cmp	r3, #3
 8009c00:	d107      	bne.n	8009c12 <USBD_CUSTOM_HID_Setup+0x1ce>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8009c02:	693b      	ldr	r3, [r7, #16]
 8009c04:	330c      	adds	r3, #12
 8009c06:	2201      	movs	r2, #1
 8009c08:	4619      	mov	r1, r3
 8009c0a:	6878      	ldr	r0, [r7, #4]
 8009c0c:	f001 fbfc 	bl	800b408 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009c10:	e022      	b.n	8009c58 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 8009c12:	6839      	ldr	r1, [r7, #0]
 8009c14:	6878      	ldr	r0, [r7, #4]
 8009c16:	f001 fb86 	bl	800b326 <USBD_CtlError>
            ret = USBD_FAIL;
 8009c1a:	2303      	movs	r3, #3
 8009c1c:	75fb      	strb	r3, [r7, #23]
          break;
 8009c1e:	e01b      	b.n	8009c58 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c26:	b2db      	uxtb	r3, r3
 8009c28:	2b03      	cmp	r3, #3
 8009c2a:	d106      	bne.n	8009c3a <USBD_CUSTOM_HID_Setup+0x1f6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8009c2c:	683b      	ldr	r3, [r7, #0]
 8009c2e:	885b      	ldrh	r3, [r3, #2]
 8009c30:	b2db      	uxtb	r3, r3
 8009c32:	461a      	mov	r2, r3
 8009c34:	693b      	ldr	r3, [r7, #16]
 8009c36:	60da      	str	r2, [r3, #12]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009c38:	e00e      	b.n	8009c58 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 8009c3a:	6839      	ldr	r1, [r7, #0]
 8009c3c:	6878      	ldr	r0, [r7, #4]
 8009c3e:	f001 fb72 	bl	800b326 <USBD_CtlError>
            ret = USBD_FAIL;
 8009c42:	2303      	movs	r3, #3
 8009c44:	75fb      	strb	r3, [r7, #23]
          break;
 8009c46:	e007      	b.n	8009c58 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009c48:	6839      	ldr	r1, [r7, #0]
 8009c4a:	6878      	ldr	r0, [r7, #4]
 8009c4c:	f001 fb6b 	bl	800b326 <USBD_CtlError>
          ret = USBD_FAIL;
 8009c50:	2303      	movs	r3, #3
 8009c52:	75fb      	strb	r3, [r7, #23]
          break;
 8009c54:	e000      	b.n	8009c58 <USBD_CUSTOM_HID_Setup+0x214>
          break;
 8009c56:	bf00      	nop
      }
      break;
 8009c58:	e006      	b.n	8009c68 <USBD_CUSTOM_HID_Setup+0x224>

    default:
      USBD_CtlError(pdev, req);
 8009c5a:	6839      	ldr	r1, [r7, #0]
 8009c5c:	6878      	ldr	r0, [r7, #4]
 8009c5e:	f001 fb62 	bl	800b326 <USBD_CtlError>
      ret = USBD_FAIL;
 8009c62:	2303      	movs	r3, #3
 8009c64:	75fb      	strb	r3, [r7, #23]
      break;
 8009c66:	bf00      	nop
  }
  return (uint8_t)ret;
 8009c68:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	3720      	adds	r7, #32
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	bd80      	pop	{r7, pc}
 8009c72:	bf00      	nop
 8009c74:	2000008c 	.word	0x2000008c

08009c78 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 8009c78:	b580      	push	{r7, lr}
 8009c7a:	b084      	sub	sp, #16
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8009c80:	2181      	movs	r1, #129	; 0x81
 8009c82:	4815      	ldr	r0, [pc, #84]	; (8009cd8 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 8009c84:	f000 fd17 	bl	800a6b6 <USBD_GetEpDesc>
 8009c88:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8009c8a:	2101      	movs	r1, #1
 8009c8c:	4812      	ldr	r0, [pc, #72]	; (8009cd8 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 8009c8e:	f000 fd12 	bl	800a6b6 <USBD_GetEpDesc>
 8009c92:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d009      	beq.n	8009cae <USBD_CUSTOM_HID_GetFSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	2200      	movs	r2, #0
 8009c9e:	f042 0202 	orr.w	r2, r2, #2
 8009ca2:	711a      	strb	r2, [r3, #4]
 8009ca4:	2200      	movs	r2, #0
 8009ca6:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	2205      	movs	r2, #5
 8009cac:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009cae:	68bb      	ldr	r3, [r7, #8]
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d009      	beq.n	8009cc8 <USBD_CUSTOM_HID_GetFSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8009cb4:	68bb      	ldr	r3, [r7, #8]
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	f042 0202 	orr.w	r2, r2, #2
 8009cbc:	711a      	strb	r2, [r3, #4]
 8009cbe:	2200      	movs	r2, #0
 8009cc0:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8009cc2:	68bb      	ldr	r3, [r7, #8]
 8009cc4:	2205      	movs	r2, #5
 8009cc6:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	2229      	movs	r2, #41	; 0x29
 8009ccc:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8009cce:	4b02      	ldr	r3, [pc, #8]	; (8009cd8 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
}
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	3710      	adds	r7, #16
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	bd80      	pop	{r7, pc}
 8009cd8:	20000060 	.word	0x20000060

08009cdc <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 8009cdc:	b580      	push	{r7, lr}
 8009cde:	b084      	sub	sp, #16
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8009ce4:	2181      	movs	r1, #129	; 0x81
 8009ce6:	4815      	ldr	r0, [pc, #84]	; (8009d3c <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 8009ce8:	f000 fce5 	bl	800a6b6 <USBD_GetEpDesc>
 8009cec:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8009cee:	2101      	movs	r1, #1
 8009cf0:	4812      	ldr	r0, [pc, #72]	; (8009d3c <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 8009cf2:	f000 fce0 	bl	800a6b6 <USBD_GetEpDesc>
 8009cf6:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d009      	beq.n	8009d12 <USBD_CUSTOM_HID_GetHSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	2200      	movs	r2, #0
 8009d02:	f042 0202 	orr.w	r2, r2, #2
 8009d06:	711a      	strb	r2, [r3, #4]
 8009d08:	2200      	movs	r2, #0
 8009d0a:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	2205      	movs	r2, #5
 8009d10:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009d12:	68bb      	ldr	r3, [r7, #8]
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d009      	beq.n	8009d2c <USBD_CUSTOM_HID_GetHSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8009d18:	68bb      	ldr	r3, [r7, #8]
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	f042 0202 	orr.w	r2, r2, #2
 8009d20:	711a      	strb	r2, [r3, #4]
 8009d22:	2200      	movs	r2, #0
 8009d24:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 8009d26:	68bb      	ldr	r3, [r7, #8]
 8009d28:	2205      	movs	r2, #5
 8009d2a:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	2229      	movs	r2, #41	; 0x29
 8009d30:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8009d32:	4b02      	ldr	r3, [pc, #8]	; (8009d3c <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
}
 8009d34:	4618      	mov	r0, r3
 8009d36:	3710      	adds	r7, #16
 8009d38:	46bd      	mov	sp, r7
 8009d3a:	bd80      	pop	{r7, pc}
 8009d3c:	20000060 	.word	0x20000060

08009d40 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009d40:	b580      	push	{r7, lr}
 8009d42:	b084      	sub	sp, #16
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8009d48:	2181      	movs	r1, #129	; 0x81
 8009d4a:	4815      	ldr	r0, [pc, #84]	; (8009da0 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 8009d4c:	f000 fcb3 	bl	800a6b6 <USBD_GetEpDesc>
 8009d50:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8009d52:	2101      	movs	r1, #1
 8009d54:	4812      	ldr	r0, [pc, #72]	; (8009da0 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 8009d56:	f000 fcae 	bl	800a6b6 <USBD_GetEpDesc>
 8009d5a:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d009      	beq.n	8009d76 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	2200      	movs	r2, #0
 8009d66:	f042 0202 	orr.w	r2, r2, #2
 8009d6a:	711a      	strb	r2, [r3, #4]
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	2205      	movs	r2, #5
 8009d74:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009d76:	68bb      	ldr	r3, [r7, #8]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d009      	beq.n	8009d90 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8009d7c:	68bb      	ldr	r3, [r7, #8]
 8009d7e:	2200      	movs	r2, #0
 8009d80:	f042 0202 	orr.w	r2, r2, #2
 8009d84:	711a      	strb	r2, [r3, #4]
 8009d86:	2200      	movs	r2, #0
 8009d88:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8009d8a:	68bb      	ldr	r3, [r7, #8]
 8009d8c:	2205      	movs	r2, #5
 8009d8e:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	2229      	movs	r2, #41	; 0x29
 8009d94:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8009d96:	4b02      	ldr	r3, [pc, #8]	; (8009da0 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
}
 8009d98:	4618      	mov	r0, r3
 8009d9a:	3710      	adds	r7, #16
 8009d9c:	46bd      	mov	sp, r7
 8009d9e:	bd80      	pop	{r7, pc}
 8009da0:	20000060 	.word	0x20000060

08009da4 <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009da4:	b480      	push	{r7}
 8009da6:	b083      	sub	sp, #12
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	6078      	str	r0, [r7, #4]
 8009dac:	460b      	mov	r3, r1
 8009dae:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = CUSTOM_HID_IDLE;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	32b0      	adds	r2, #176	; 0xb0
 8009dba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009dbe:	2200      	movs	r2, #0
 8009dc0:	751a      	strb	r2, [r3, #20]

  return (uint8_t)USBD_OK;
 8009dc2:	2300      	movs	r3, #0
}
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	370c      	adds	r7, #12
 8009dc8:	46bd      	mov	sp, r7
 8009dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dce:	4770      	bx	lr

08009dd0 <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	b084      	sub	sp, #16
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	6078      	str	r0, [r7, #4]
 8009dd8:	460b      	mov	r3, r1
 8009dda:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	32b0      	adds	r2, #176	; 0xb0
 8009de6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d101      	bne.n	8009df2 <USBD_CUSTOM_HID_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009dee:	2303      	movs	r3, #3
 8009df0:	e017      	b.n	8009e22 <USBD_CUSTOM_HID_DataOut+0x52>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	32b0      	adds	r2, #176	; 0xb0
 8009dfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e00:	60fb      	str	r3, [r7, #12]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009e08:	687a      	ldr	r2, [r7, #4]
 8009e0a:	33b0      	adds	r3, #176	; 0xb0
 8009e0c:	009b      	lsls	r3, r3, #2
 8009e0e:	4413      	add	r3, r2
 8009e10:	685b      	ldr	r3, [r3, #4]
 8009e12:	68db      	ldr	r3, [r3, #12]
 8009e14:	68fa      	ldr	r2, [r7, #12]
 8009e16:	7810      	ldrb	r0, [r2, #0]
 8009e18:	68fa      	ldr	r2, [r7, #12]
 8009e1a:	7852      	ldrb	r2, [r2, #1]
 8009e1c:	4611      	mov	r1, r2
 8009e1e:	4798      	blx	r3
                                                                           hhid->Report_buf[1]);

  return (uint8_t)USBD_OK;
 8009e20:	2300      	movs	r3, #0
}
 8009e22:	4618      	mov	r0, r3
 8009e24:	3710      	adds	r7, #16
 8009e26:	46bd      	mov	sp, r7
 8009e28:	bd80      	pop	{r7, pc}
	...

08009e2c <USBD_CUSTOM_HID_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009e2c:	b580      	push	{r7, lr}
 8009e2e:	b084      	sub	sp, #16
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	32b0      	adds	r2, #176	; 0xb0
 8009e3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d101      	bne.n	8009e4a <USBD_CUSTOM_HID_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8009e46:	2303      	movs	r3, #3
 8009e48:	e00f      	b.n	8009e6a <USBD_CUSTOM_HID_ReceivePacket+0x3e>
#ifdef USE_USBD_COMPOSITE
  /* Get OUT Endpoint address allocated for this class instance */
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	32b0      	adds	r2, #176	; 0xb0
 8009e54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e58:	60fb      	str	r3, [r7, #12]

  /* Resume USB Out process */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 8009e5a:	4b06      	ldr	r3, [pc, #24]	; (8009e74 <USBD_CUSTOM_HID_ReceivePacket+0x48>)
 8009e5c:	7819      	ldrb	r1, [r3, #0]
 8009e5e:	68fa      	ldr	r2, [r7, #12]
 8009e60:	2302      	movs	r3, #2
 8009e62:	6878      	ldr	r0, [r7, #4]
 8009e64:	f001 ff4a 	bl	800bcfc <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 8009e68:	2300      	movs	r3, #0
}
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	3710      	adds	r7, #16
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	bd80      	pop	{r7, pc}
 8009e72:	bf00      	nop
 8009e74:	200000a3 	.word	0x200000a3

08009e78 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009e78:	b580      	push	{r7, lr}
 8009e7a:	b084      	sub	sp, #16
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	32b0      	adds	r2, #176	; 0xb0
 8009e8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e8e:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d101      	bne.n	8009e9a <USBD_CUSTOM_HID_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009e96:	2303      	movs	r3, #3
 8009e98:	e016      	b.n	8009ec8 <USBD_CUSTOM_HID_EP0_RxReady+0x50>
  }

  if (hhid->IsReportAvailable == 1U)
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	691b      	ldr	r3, [r3, #16]
 8009e9e:	2b01      	cmp	r3, #1
 8009ea0:	d111      	bne.n	8009ec6 <USBD_CUSTOM_HID_EP0_RxReady+0x4e>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009ea8:	687a      	ldr	r2, [r7, #4]
 8009eaa:	33b0      	adds	r3, #176	; 0xb0
 8009eac:	009b      	lsls	r3, r3, #2
 8009eae:	4413      	add	r3, r2
 8009eb0:	685b      	ldr	r3, [r3, #4]
 8009eb2:	68db      	ldr	r3, [r3, #12]
 8009eb4:	68fa      	ldr	r2, [r7, #12]
 8009eb6:	7810      	ldrb	r0, [r2, #0]
 8009eb8:	68fa      	ldr	r2, [r7, #12]
 8009eba:	7852      	ldrb	r2, [r2, #1]
 8009ebc:	4611      	mov	r1, r2
 8009ebe:	4798      	blx	r3
                                                                             hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	2200      	movs	r2, #0
 8009ec4:	611a      	str	r2, [r3, #16]
  }

  return (uint8_t)USBD_OK;
 8009ec6:	2300      	movs	r3, #0
}
 8009ec8:	4618      	mov	r0, r3
 8009eca:	3710      	adds	r7, #16
 8009ecc:	46bd      	mov	sp, r7
 8009ece:	bd80      	pop	{r7, pc}

08009ed0 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8009ed0:	b480      	push	{r7}
 8009ed2:	b083      	sub	sp, #12
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	220a      	movs	r2, #10
 8009edc:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 8009ede:	4b03      	ldr	r3, [pc, #12]	; (8009eec <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	370c      	adds	r7, #12
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eea:	4770      	bx	lr
 8009eec:	20000098 	.word	0x20000098

08009ef0 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 8009ef0:	b480      	push	{r7}
 8009ef2:	b083      	sub	sp, #12
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	6078      	str	r0, [r7, #4]
 8009ef8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009efa:	683b      	ldr	r3, [r7, #0]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d101      	bne.n	8009f04 <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009f00:	2303      	movs	r3, #3
 8009f02:	e009      	b.n	8009f18 <USBD_CUSTOM_HID_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009f0a:	687a      	ldr	r2, [r7, #4]
 8009f0c:	33b0      	adds	r3, #176	; 0xb0
 8009f0e:	009b      	lsls	r3, r3, #2
 8009f10:	4413      	add	r3, r2
 8009f12:	683a      	ldr	r2, [r7, #0]
 8009f14:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8009f16:	2300      	movs	r3, #0
}
 8009f18:	4618      	mov	r0, r3
 8009f1a:	370c      	adds	r7, #12
 8009f1c:	46bd      	mov	sp, r7
 8009f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f22:	4770      	bx	lr

08009f24 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009f24:	b580      	push	{r7, lr}
 8009f26:	b086      	sub	sp, #24
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	60f8      	str	r0, [r7, #12]
 8009f2c:	60b9      	str	r1, [r7, #8]
 8009f2e:	4613      	mov	r3, r2
 8009f30:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d101      	bne.n	8009f3c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009f38:	2303      	movs	r3, #3
 8009f3a:	e01f      	b.n	8009f7c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	2200      	movs	r2, #0
 8009f40:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	2200      	movs	r2, #0
 8009f48:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	2200      	movs	r2, #0
 8009f50:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009f54:	68bb      	ldr	r3, [r7, #8]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d003      	beq.n	8009f62 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	68ba      	ldr	r2, [r7, #8]
 8009f5e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	2201      	movs	r2, #1
 8009f66:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	79fa      	ldrb	r2, [r7, #7]
 8009f6e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009f70:	68f8      	ldr	r0, [r7, #12]
 8009f72:	f001 fd6d 	bl	800ba50 <USBD_LL_Init>
 8009f76:	4603      	mov	r3, r0
 8009f78:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009f7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	3718      	adds	r7, #24
 8009f80:	46bd      	mov	sp, r7
 8009f82:	bd80      	pop	{r7, pc}

08009f84 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009f84:	b580      	push	{r7, lr}
 8009f86:	b084      	sub	sp, #16
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	6078      	str	r0, [r7, #4]
 8009f8c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009f8e:	2300      	movs	r3, #0
 8009f90:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009f92:	683b      	ldr	r3, [r7, #0]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d101      	bne.n	8009f9c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009f98:	2303      	movs	r3, #3
 8009f9a:	e025      	b.n	8009fe8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	683a      	ldr	r2, [r7, #0]
 8009fa0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	32ae      	adds	r2, #174	; 0xae
 8009fae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d00f      	beq.n	8009fd8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	32ae      	adds	r2, #174	; 0xae
 8009fc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fc8:	f107 020e 	add.w	r2, r7, #14
 8009fcc:	4610      	mov	r0, r2
 8009fce:	4798      	blx	r3
 8009fd0:	4602      	mov	r2, r0
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8009fde:	1c5a      	adds	r2, r3, #1
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8009fe6:	2300      	movs	r3, #0
}
 8009fe8:	4618      	mov	r0, r3
 8009fea:	3710      	adds	r7, #16
 8009fec:	46bd      	mov	sp, r7
 8009fee:	bd80      	pop	{r7, pc}

08009ff0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009ff0:	b580      	push	{r7, lr}
 8009ff2:	b082      	sub	sp, #8
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009ff8:	6878      	ldr	r0, [r7, #4]
 8009ffa:	f001 fd75 	bl	800bae8 <USBD_LL_Start>
 8009ffe:	4603      	mov	r3, r0
}
 800a000:	4618      	mov	r0, r3
 800a002:	3708      	adds	r7, #8
 800a004:	46bd      	mov	sp, r7
 800a006:	bd80      	pop	{r7, pc}

0800a008 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800a008:	b480      	push	{r7}
 800a00a:	b083      	sub	sp, #12
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a010:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800a012:	4618      	mov	r0, r3
 800a014:	370c      	adds	r7, #12
 800a016:	46bd      	mov	sp, r7
 800a018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a01c:	4770      	bx	lr

0800a01e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a01e:	b580      	push	{r7, lr}
 800a020:	b084      	sub	sp, #16
 800a022:	af00      	add	r7, sp, #0
 800a024:	6078      	str	r0, [r7, #4]
 800a026:	460b      	mov	r3, r1
 800a028:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a02a:	2300      	movs	r3, #0
 800a02c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a034:	2b00      	cmp	r3, #0
 800a036:	d009      	beq.n	800a04c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	78fa      	ldrb	r2, [r7, #3]
 800a042:	4611      	mov	r1, r2
 800a044:	6878      	ldr	r0, [r7, #4]
 800a046:	4798      	blx	r3
 800a048:	4603      	mov	r3, r0
 800a04a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a04c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a04e:	4618      	mov	r0, r3
 800a050:	3710      	adds	r7, #16
 800a052:	46bd      	mov	sp, r7
 800a054:	bd80      	pop	{r7, pc}

0800a056 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a056:	b580      	push	{r7, lr}
 800a058:	b084      	sub	sp, #16
 800a05a:	af00      	add	r7, sp, #0
 800a05c:	6078      	str	r0, [r7, #4]
 800a05e:	460b      	mov	r3, r1
 800a060:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a062:	2300      	movs	r3, #0
 800a064:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a06c:	685b      	ldr	r3, [r3, #4]
 800a06e:	78fa      	ldrb	r2, [r7, #3]
 800a070:	4611      	mov	r1, r2
 800a072:	6878      	ldr	r0, [r7, #4]
 800a074:	4798      	blx	r3
 800a076:	4603      	mov	r3, r0
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d001      	beq.n	800a080 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800a07c:	2303      	movs	r3, #3
 800a07e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a080:	7bfb      	ldrb	r3, [r7, #15]
}
 800a082:	4618      	mov	r0, r3
 800a084:	3710      	adds	r7, #16
 800a086:	46bd      	mov	sp, r7
 800a088:	bd80      	pop	{r7, pc}

0800a08a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a08a:	b580      	push	{r7, lr}
 800a08c:	b084      	sub	sp, #16
 800a08e:	af00      	add	r7, sp, #0
 800a090:	6078      	str	r0, [r7, #4]
 800a092:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a09a:	6839      	ldr	r1, [r7, #0]
 800a09c:	4618      	mov	r0, r3
 800a09e:	f001 f908 	bl	800b2b2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	2201      	movs	r2, #1
 800a0a6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800a0b0:	461a      	mov	r2, r3
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a0be:	f003 031f 	and.w	r3, r3, #31
 800a0c2:	2b02      	cmp	r3, #2
 800a0c4:	d01a      	beq.n	800a0fc <USBD_LL_SetupStage+0x72>
 800a0c6:	2b02      	cmp	r3, #2
 800a0c8:	d822      	bhi.n	800a110 <USBD_LL_SetupStage+0x86>
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d002      	beq.n	800a0d4 <USBD_LL_SetupStage+0x4a>
 800a0ce:	2b01      	cmp	r3, #1
 800a0d0:	d00a      	beq.n	800a0e8 <USBD_LL_SetupStage+0x5e>
 800a0d2:	e01d      	b.n	800a110 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a0da:	4619      	mov	r1, r3
 800a0dc:	6878      	ldr	r0, [r7, #4]
 800a0de:	f000 fb5f 	bl	800a7a0 <USBD_StdDevReq>
 800a0e2:	4603      	mov	r3, r0
 800a0e4:	73fb      	strb	r3, [r7, #15]
      break;
 800a0e6:	e020      	b.n	800a12a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a0ee:	4619      	mov	r1, r3
 800a0f0:	6878      	ldr	r0, [r7, #4]
 800a0f2:	f000 fbc7 	bl	800a884 <USBD_StdItfReq>
 800a0f6:	4603      	mov	r3, r0
 800a0f8:	73fb      	strb	r3, [r7, #15]
      break;
 800a0fa:	e016      	b.n	800a12a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a102:	4619      	mov	r1, r3
 800a104:	6878      	ldr	r0, [r7, #4]
 800a106:	f000 fc29 	bl	800a95c <USBD_StdEPReq>
 800a10a:	4603      	mov	r3, r0
 800a10c:	73fb      	strb	r3, [r7, #15]
      break;
 800a10e:	e00c      	b.n	800a12a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a116:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a11a:	b2db      	uxtb	r3, r3
 800a11c:	4619      	mov	r1, r3
 800a11e:	6878      	ldr	r0, [r7, #4]
 800a120:	f001 fd42 	bl	800bba8 <USBD_LL_StallEP>
 800a124:	4603      	mov	r3, r0
 800a126:	73fb      	strb	r3, [r7, #15]
      break;
 800a128:	bf00      	nop
  }

  return ret;
 800a12a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a12c:	4618      	mov	r0, r3
 800a12e:	3710      	adds	r7, #16
 800a130:	46bd      	mov	sp, r7
 800a132:	bd80      	pop	{r7, pc}

0800a134 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a134:	b580      	push	{r7, lr}
 800a136:	b086      	sub	sp, #24
 800a138:	af00      	add	r7, sp, #0
 800a13a:	60f8      	str	r0, [r7, #12]
 800a13c:	460b      	mov	r3, r1
 800a13e:	607a      	str	r2, [r7, #4]
 800a140:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800a142:	2300      	movs	r3, #0
 800a144:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800a146:	7afb      	ldrb	r3, [r7, #11]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d16e      	bne.n	800a22a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a152:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a15a:	2b03      	cmp	r3, #3
 800a15c:	f040 8098 	bne.w	800a290 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800a160:	693b      	ldr	r3, [r7, #16]
 800a162:	689a      	ldr	r2, [r3, #8]
 800a164:	693b      	ldr	r3, [r7, #16]
 800a166:	68db      	ldr	r3, [r3, #12]
 800a168:	429a      	cmp	r2, r3
 800a16a:	d913      	bls.n	800a194 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800a16c:	693b      	ldr	r3, [r7, #16]
 800a16e:	689a      	ldr	r2, [r3, #8]
 800a170:	693b      	ldr	r3, [r7, #16]
 800a172:	68db      	ldr	r3, [r3, #12]
 800a174:	1ad2      	subs	r2, r2, r3
 800a176:	693b      	ldr	r3, [r7, #16]
 800a178:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a17a:	693b      	ldr	r3, [r7, #16]
 800a17c:	68da      	ldr	r2, [r3, #12]
 800a17e:	693b      	ldr	r3, [r7, #16]
 800a180:	689b      	ldr	r3, [r3, #8]
 800a182:	4293      	cmp	r3, r2
 800a184:	bf28      	it	cs
 800a186:	4613      	movcs	r3, r2
 800a188:	461a      	mov	r2, r3
 800a18a:	6879      	ldr	r1, [r7, #4]
 800a18c:	68f8      	ldr	r0, [r7, #12]
 800a18e:	f001 f984 	bl	800b49a <USBD_CtlContinueRx>
 800a192:	e07d      	b.n	800a290 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a19a:	f003 031f 	and.w	r3, r3, #31
 800a19e:	2b02      	cmp	r3, #2
 800a1a0:	d014      	beq.n	800a1cc <USBD_LL_DataOutStage+0x98>
 800a1a2:	2b02      	cmp	r3, #2
 800a1a4:	d81d      	bhi.n	800a1e2 <USBD_LL_DataOutStage+0xae>
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d002      	beq.n	800a1b0 <USBD_LL_DataOutStage+0x7c>
 800a1aa:	2b01      	cmp	r3, #1
 800a1ac:	d003      	beq.n	800a1b6 <USBD_LL_DataOutStage+0x82>
 800a1ae:	e018      	b.n	800a1e2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800a1b0:	2300      	movs	r3, #0
 800a1b2:	75bb      	strb	r3, [r7, #22]
            break;
 800a1b4:	e018      	b.n	800a1e8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a1bc:	b2db      	uxtb	r3, r3
 800a1be:	4619      	mov	r1, r3
 800a1c0:	68f8      	ldr	r0, [r7, #12]
 800a1c2:	f000 fa5e 	bl	800a682 <USBD_CoreFindIF>
 800a1c6:	4603      	mov	r3, r0
 800a1c8:	75bb      	strb	r3, [r7, #22]
            break;
 800a1ca:	e00d      	b.n	800a1e8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a1d2:	b2db      	uxtb	r3, r3
 800a1d4:	4619      	mov	r1, r3
 800a1d6:	68f8      	ldr	r0, [r7, #12]
 800a1d8:	f000 fa60 	bl	800a69c <USBD_CoreFindEP>
 800a1dc:	4603      	mov	r3, r0
 800a1de:	75bb      	strb	r3, [r7, #22]
            break;
 800a1e0:	e002      	b.n	800a1e8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800a1e2:	2300      	movs	r3, #0
 800a1e4:	75bb      	strb	r3, [r7, #22]
            break;
 800a1e6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a1e8:	7dbb      	ldrb	r3, [r7, #22]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d119      	bne.n	800a222 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a1f4:	b2db      	uxtb	r3, r3
 800a1f6:	2b03      	cmp	r3, #3
 800a1f8:	d113      	bne.n	800a222 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a1fa:	7dba      	ldrb	r2, [r7, #22]
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	32ae      	adds	r2, #174	; 0xae
 800a200:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a204:	691b      	ldr	r3, [r3, #16]
 800a206:	2b00      	cmp	r3, #0
 800a208:	d00b      	beq.n	800a222 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800a20a:	7dba      	ldrb	r2, [r7, #22]
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a212:	7dba      	ldrb	r2, [r7, #22]
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	32ae      	adds	r2, #174	; 0xae
 800a218:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a21c:	691b      	ldr	r3, [r3, #16]
 800a21e:	68f8      	ldr	r0, [r7, #12]
 800a220:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a222:	68f8      	ldr	r0, [r7, #12]
 800a224:	f001 f94a 	bl	800b4bc <USBD_CtlSendStatus>
 800a228:	e032      	b.n	800a290 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a22a:	7afb      	ldrb	r3, [r7, #11]
 800a22c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a230:	b2db      	uxtb	r3, r3
 800a232:	4619      	mov	r1, r3
 800a234:	68f8      	ldr	r0, [r7, #12]
 800a236:	f000 fa31 	bl	800a69c <USBD_CoreFindEP>
 800a23a:	4603      	mov	r3, r0
 800a23c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a23e:	7dbb      	ldrb	r3, [r7, #22]
 800a240:	2bff      	cmp	r3, #255	; 0xff
 800a242:	d025      	beq.n	800a290 <USBD_LL_DataOutStage+0x15c>
 800a244:	7dbb      	ldrb	r3, [r7, #22]
 800a246:	2b00      	cmp	r3, #0
 800a248:	d122      	bne.n	800a290 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a250:	b2db      	uxtb	r3, r3
 800a252:	2b03      	cmp	r3, #3
 800a254:	d117      	bne.n	800a286 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a256:	7dba      	ldrb	r2, [r7, #22]
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	32ae      	adds	r2, #174	; 0xae
 800a25c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a260:	699b      	ldr	r3, [r3, #24]
 800a262:	2b00      	cmp	r3, #0
 800a264:	d00f      	beq.n	800a286 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800a266:	7dba      	ldrb	r2, [r7, #22]
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a26e:	7dba      	ldrb	r2, [r7, #22]
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	32ae      	adds	r2, #174	; 0xae
 800a274:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a278:	699b      	ldr	r3, [r3, #24]
 800a27a:	7afa      	ldrb	r2, [r7, #11]
 800a27c:	4611      	mov	r1, r2
 800a27e:	68f8      	ldr	r0, [r7, #12]
 800a280:	4798      	blx	r3
 800a282:	4603      	mov	r3, r0
 800a284:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a286:	7dfb      	ldrb	r3, [r7, #23]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d001      	beq.n	800a290 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800a28c:	7dfb      	ldrb	r3, [r7, #23]
 800a28e:	e000      	b.n	800a292 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800a290:	2300      	movs	r3, #0
}
 800a292:	4618      	mov	r0, r3
 800a294:	3718      	adds	r7, #24
 800a296:	46bd      	mov	sp, r7
 800a298:	bd80      	pop	{r7, pc}

0800a29a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a29a:	b580      	push	{r7, lr}
 800a29c:	b086      	sub	sp, #24
 800a29e:	af00      	add	r7, sp, #0
 800a2a0:	60f8      	str	r0, [r7, #12]
 800a2a2:	460b      	mov	r3, r1
 800a2a4:	607a      	str	r2, [r7, #4]
 800a2a6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800a2a8:	7afb      	ldrb	r3, [r7, #11]
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d16f      	bne.n	800a38e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	3314      	adds	r3, #20
 800a2b2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a2ba:	2b02      	cmp	r3, #2
 800a2bc:	d15a      	bne.n	800a374 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800a2be:	693b      	ldr	r3, [r7, #16]
 800a2c0:	689a      	ldr	r2, [r3, #8]
 800a2c2:	693b      	ldr	r3, [r7, #16]
 800a2c4:	68db      	ldr	r3, [r3, #12]
 800a2c6:	429a      	cmp	r2, r3
 800a2c8:	d914      	bls.n	800a2f4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a2ca:	693b      	ldr	r3, [r7, #16]
 800a2cc:	689a      	ldr	r2, [r3, #8]
 800a2ce:	693b      	ldr	r3, [r7, #16]
 800a2d0:	68db      	ldr	r3, [r3, #12]
 800a2d2:	1ad2      	subs	r2, r2, r3
 800a2d4:	693b      	ldr	r3, [r7, #16]
 800a2d6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a2d8:	693b      	ldr	r3, [r7, #16]
 800a2da:	689b      	ldr	r3, [r3, #8]
 800a2dc:	461a      	mov	r2, r3
 800a2de:	6879      	ldr	r1, [r7, #4]
 800a2e0:	68f8      	ldr	r0, [r7, #12]
 800a2e2:	f001 f8ac 	bl	800b43e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a2e6:	2300      	movs	r3, #0
 800a2e8:	2200      	movs	r2, #0
 800a2ea:	2100      	movs	r1, #0
 800a2ec:	68f8      	ldr	r0, [r7, #12]
 800a2ee:	f001 fd05 	bl	800bcfc <USBD_LL_PrepareReceive>
 800a2f2:	e03f      	b.n	800a374 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a2f4:	693b      	ldr	r3, [r7, #16]
 800a2f6:	68da      	ldr	r2, [r3, #12]
 800a2f8:	693b      	ldr	r3, [r7, #16]
 800a2fa:	689b      	ldr	r3, [r3, #8]
 800a2fc:	429a      	cmp	r2, r3
 800a2fe:	d11c      	bne.n	800a33a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a300:	693b      	ldr	r3, [r7, #16]
 800a302:	685a      	ldr	r2, [r3, #4]
 800a304:	693b      	ldr	r3, [r7, #16]
 800a306:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a308:	429a      	cmp	r2, r3
 800a30a:	d316      	bcc.n	800a33a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a30c:	693b      	ldr	r3, [r7, #16]
 800a30e:	685a      	ldr	r2, [r3, #4]
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a316:	429a      	cmp	r2, r3
 800a318:	d20f      	bcs.n	800a33a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a31a:	2200      	movs	r2, #0
 800a31c:	2100      	movs	r1, #0
 800a31e:	68f8      	ldr	r0, [r7, #12]
 800a320:	f001 f88d 	bl	800b43e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	2200      	movs	r2, #0
 800a328:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a32c:	2300      	movs	r3, #0
 800a32e:	2200      	movs	r2, #0
 800a330:	2100      	movs	r1, #0
 800a332:	68f8      	ldr	r0, [r7, #12]
 800a334:	f001 fce2 	bl	800bcfc <USBD_LL_PrepareReceive>
 800a338:	e01c      	b.n	800a374 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a340:	b2db      	uxtb	r3, r3
 800a342:	2b03      	cmp	r3, #3
 800a344:	d10f      	bne.n	800a366 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a34c:	68db      	ldr	r3, [r3, #12]
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d009      	beq.n	800a366 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	2200      	movs	r2, #0
 800a356:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a360:	68db      	ldr	r3, [r3, #12]
 800a362:	68f8      	ldr	r0, [r7, #12]
 800a364:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a366:	2180      	movs	r1, #128	; 0x80
 800a368:	68f8      	ldr	r0, [r7, #12]
 800a36a:	f001 fc1d 	bl	800bba8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a36e:	68f8      	ldr	r0, [r7, #12]
 800a370:	f001 f8b7 	bl	800b4e2 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d03a      	beq.n	800a3f4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800a37e:	68f8      	ldr	r0, [r7, #12]
 800a380:	f7ff fe42 	bl	800a008 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	2200      	movs	r2, #0
 800a388:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a38c:	e032      	b.n	800a3f4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a38e:	7afb      	ldrb	r3, [r7, #11]
 800a390:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a394:	b2db      	uxtb	r3, r3
 800a396:	4619      	mov	r1, r3
 800a398:	68f8      	ldr	r0, [r7, #12]
 800a39a:	f000 f97f 	bl	800a69c <USBD_CoreFindEP>
 800a39e:	4603      	mov	r3, r0
 800a3a0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a3a2:	7dfb      	ldrb	r3, [r7, #23]
 800a3a4:	2bff      	cmp	r3, #255	; 0xff
 800a3a6:	d025      	beq.n	800a3f4 <USBD_LL_DataInStage+0x15a>
 800a3a8:	7dfb      	ldrb	r3, [r7, #23]
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d122      	bne.n	800a3f4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a3b4:	b2db      	uxtb	r3, r3
 800a3b6:	2b03      	cmp	r3, #3
 800a3b8:	d11c      	bne.n	800a3f4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a3ba:	7dfa      	ldrb	r2, [r7, #23]
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	32ae      	adds	r2, #174	; 0xae
 800a3c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3c4:	695b      	ldr	r3, [r3, #20]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d014      	beq.n	800a3f4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800a3ca:	7dfa      	ldrb	r2, [r7, #23]
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a3d2:	7dfa      	ldrb	r2, [r7, #23]
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	32ae      	adds	r2, #174	; 0xae
 800a3d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3dc:	695b      	ldr	r3, [r3, #20]
 800a3de:	7afa      	ldrb	r2, [r7, #11]
 800a3e0:	4611      	mov	r1, r2
 800a3e2:	68f8      	ldr	r0, [r7, #12]
 800a3e4:	4798      	blx	r3
 800a3e6:	4603      	mov	r3, r0
 800a3e8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a3ea:	7dbb      	ldrb	r3, [r7, #22]
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d001      	beq.n	800a3f4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800a3f0:	7dbb      	ldrb	r3, [r7, #22]
 800a3f2:	e000      	b.n	800a3f6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800a3f4:	2300      	movs	r3, #0
}
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	3718      	adds	r7, #24
 800a3fa:	46bd      	mov	sp, r7
 800a3fc:	bd80      	pop	{r7, pc}

0800a3fe <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a3fe:	b580      	push	{r7, lr}
 800a400:	b084      	sub	sp, #16
 800a402:	af00      	add	r7, sp, #0
 800a404:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a406:	2300      	movs	r3, #0
 800a408:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	2201      	movs	r2, #1
 800a40e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	2200      	movs	r2, #0
 800a416:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	2200      	movs	r2, #0
 800a41e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	2200      	movs	r2, #0
 800a424:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	2200      	movs	r2, #0
 800a42c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a436:	2b00      	cmp	r3, #0
 800a438:	d014      	beq.n	800a464 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a440:	685b      	ldr	r3, [r3, #4]
 800a442:	2b00      	cmp	r3, #0
 800a444:	d00e      	beq.n	800a464 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a44c:	685b      	ldr	r3, [r3, #4]
 800a44e:	687a      	ldr	r2, [r7, #4]
 800a450:	6852      	ldr	r2, [r2, #4]
 800a452:	b2d2      	uxtb	r2, r2
 800a454:	4611      	mov	r1, r2
 800a456:	6878      	ldr	r0, [r7, #4]
 800a458:	4798      	blx	r3
 800a45a:	4603      	mov	r3, r0
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d001      	beq.n	800a464 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800a460:	2303      	movs	r3, #3
 800a462:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a464:	2340      	movs	r3, #64	; 0x40
 800a466:	2200      	movs	r2, #0
 800a468:	2100      	movs	r1, #0
 800a46a:	6878      	ldr	r0, [r7, #4]
 800a46c:	f001 fb57 	bl	800bb1e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	2201      	movs	r2, #1
 800a474:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	2240      	movs	r2, #64	; 0x40
 800a47c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a480:	2340      	movs	r3, #64	; 0x40
 800a482:	2200      	movs	r2, #0
 800a484:	2180      	movs	r1, #128	; 0x80
 800a486:	6878      	ldr	r0, [r7, #4]
 800a488:	f001 fb49 	bl	800bb1e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	2201      	movs	r2, #1
 800a490:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	2240      	movs	r2, #64	; 0x40
 800a496:	621a      	str	r2, [r3, #32]

  return ret;
 800a498:	7bfb      	ldrb	r3, [r7, #15]
}
 800a49a:	4618      	mov	r0, r3
 800a49c:	3710      	adds	r7, #16
 800a49e:	46bd      	mov	sp, r7
 800a4a0:	bd80      	pop	{r7, pc}

0800a4a2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a4a2:	b480      	push	{r7}
 800a4a4:	b083      	sub	sp, #12
 800a4a6:	af00      	add	r7, sp, #0
 800a4a8:	6078      	str	r0, [r7, #4]
 800a4aa:	460b      	mov	r3, r1
 800a4ac:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	78fa      	ldrb	r2, [r7, #3]
 800a4b2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a4b4:	2300      	movs	r3, #0
}
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	370c      	adds	r7, #12
 800a4ba:	46bd      	mov	sp, r7
 800a4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c0:	4770      	bx	lr

0800a4c2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a4c2:	b480      	push	{r7}
 800a4c4:	b083      	sub	sp, #12
 800a4c6:	af00      	add	r7, sp, #0
 800a4c8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a4d0:	b2da      	uxtb	r2, r3
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	2204      	movs	r2, #4
 800a4dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a4e0:	2300      	movs	r3, #0
}
 800a4e2:	4618      	mov	r0, r3
 800a4e4:	370c      	adds	r7, #12
 800a4e6:	46bd      	mov	sp, r7
 800a4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ec:	4770      	bx	lr

0800a4ee <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a4ee:	b480      	push	{r7}
 800a4f0:	b083      	sub	sp, #12
 800a4f2:	af00      	add	r7, sp, #0
 800a4f4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a4fc:	b2db      	uxtb	r3, r3
 800a4fe:	2b04      	cmp	r3, #4
 800a500:	d106      	bne.n	800a510 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800a508:	b2da      	uxtb	r2, r3
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a510:	2300      	movs	r3, #0
}
 800a512:	4618      	mov	r0, r3
 800a514:	370c      	adds	r7, #12
 800a516:	46bd      	mov	sp, r7
 800a518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a51c:	4770      	bx	lr

0800a51e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a51e:	b580      	push	{r7, lr}
 800a520:	b082      	sub	sp, #8
 800a522:	af00      	add	r7, sp, #0
 800a524:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a52c:	b2db      	uxtb	r3, r3
 800a52e:	2b03      	cmp	r3, #3
 800a530:	d110      	bne.n	800a554 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d00b      	beq.n	800a554 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a542:	69db      	ldr	r3, [r3, #28]
 800a544:	2b00      	cmp	r3, #0
 800a546:	d005      	beq.n	800a554 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a54e:	69db      	ldr	r3, [r3, #28]
 800a550:	6878      	ldr	r0, [r7, #4]
 800a552:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800a554:	2300      	movs	r3, #0
}
 800a556:	4618      	mov	r0, r3
 800a558:	3708      	adds	r7, #8
 800a55a:	46bd      	mov	sp, r7
 800a55c:	bd80      	pop	{r7, pc}

0800a55e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a55e:	b580      	push	{r7, lr}
 800a560:	b082      	sub	sp, #8
 800a562:	af00      	add	r7, sp, #0
 800a564:	6078      	str	r0, [r7, #4]
 800a566:	460b      	mov	r3, r1
 800a568:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	32ae      	adds	r2, #174	; 0xae
 800a574:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d101      	bne.n	800a580 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800a57c:	2303      	movs	r3, #3
 800a57e:	e01c      	b.n	800a5ba <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a586:	b2db      	uxtb	r3, r3
 800a588:	2b03      	cmp	r3, #3
 800a58a:	d115      	bne.n	800a5b8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	32ae      	adds	r2, #174	; 0xae
 800a596:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a59a:	6a1b      	ldr	r3, [r3, #32]
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d00b      	beq.n	800a5b8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	32ae      	adds	r2, #174	; 0xae
 800a5aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5ae:	6a1b      	ldr	r3, [r3, #32]
 800a5b0:	78fa      	ldrb	r2, [r7, #3]
 800a5b2:	4611      	mov	r1, r2
 800a5b4:	6878      	ldr	r0, [r7, #4]
 800a5b6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a5b8:	2300      	movs	r3, #0
}
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	3708      	adds	r7, #8
 800a5be:	46bd      	mov	sp, r7
 800a5c0:	bd80      	pop	{r7, pc}

0800a5c2 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a5c2:	b580      	push	{r7, lr}
 800a5c4:	b082      	sub	sp, #8
 800a5c6:	af00      	add	r7, sp, #0
 800a5c8:	6078      	str	r0, [r7, #4]
 800a5ca:	460b      	mov	r3, r1
 800a5cc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	32ae      	adds	r2, #174	; 0xae
 800a5d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d101      	bne.n	800a5e4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800a5e0:	2303      	movs	r3, #3
 800a5e2:	e01c      	b.n	800a61e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a5ea:	b2db      	uxtb	r3, r3
 800a5ec:	2b03      	cmp	r3, #3
 800a5ee:	d115      	bne.n	800a61c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	32ae      	adds	r2, #174	; 0xae
 800a5fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a600:	2b00      	cmp	r3, #0
 800a602:	d00b      	beq.n	800a61c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	32ae      	adds	r2, #174	; 0xae
 800a60e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a614:	78fa      	ldrb	r2, [r7, #3]
 800a616:	4611      	mov	r1, r2
 800a618:	6878      	ldr	r0, [r7, #4]
 800a61a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a61c:	2300      	movs	r3, #0
}
 800a61e:	4618      	mov	r0, r3
 800a620:	3708      	adds	r7, #8
 800a622:	46bd      	mov	sp, r7
 800a624:	bd80      	pop	{r7, pc}

0800a626 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a626:	b480      	push	{r7}
 800a628:	b083      	sub	sp, #12
 800a62a:	af00      	add	r7, sp, #0
 800a62c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a62e:	2300      	movs	r3, #0
}
 800a630:	4618      	mov	r0, r3
 800a632:	370c      	adds	r7, #12
 800a634:	46bd      	mov	sp, r7
 800a636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a63a:	4770      	bx	lr

0800a63c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a63c:	b580      	push	{r7, lr}
 800a63e:	b084      	sub	sp, #16
 800a640:	af00      	add	r7, sp, #0
 800a642:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800a644:	2300      	movs	r3, #0
 800a646:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	2201      	movs	r2, #1
 800a64c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a656:	2b00      	cmp	r3, #0
 800a658:	d00e      	beq.n	800a678 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a660:	685b      	ldr	r3, [r3, #4]
 800a662:	687a      	ldr	r2, [r7, #4]
 800a664:	6852      	ldr	r2, [r2, #4]
 800a666:	b2d2      	uxtb	r2, r2
 800a668:	4611      	mov	r1, r2
 800a66a:	6878      	ldr	r0, [r7, #4]
 800a66c:	4798      	blx	r3
 800a66e:	4603      	mov	r3, r0
 800a670:	2b00      	cmp	r3, #0
 800a672:	d001      	beq.n	800a678 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800a674:	2303      	movs	r3, #3
 800a676:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a678:	7bfb      	ldrb	r3, [r7, #15]
}
 800a67a:	4618      	mov	r0, r3
 800a67c:	3710      	adds	r7, #16
 800a67e:	46bd      	mov	sp, r7
 800a680:	bd80      	pop	{r7, pc}

0800a682 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a682:	b480      	push	{r7}
 800a684:	b083      	sub	sp, #12
 800a686:	af00      	add	r7, sp, #0
 800a688:	6078      	str	r0, [r7, #4]
 800a68a:	460b      	mov	r3, r1
 800a68c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a68e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a690:	4618      	mov	r0, r3
 800a692:	370c      	adds	r7, #12
 800a694:	46bd      	mov	sp, r7
 800a696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a69a:	4770      	bx	lr

0800a69c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a69c:	b480      	push	{r7}
 800a69e:	b083      	sub	sp, #12
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	6078      	str	r0, [r7, #4]
 800a6a4:	460b      	mov	r3, r1
 800a6a6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a6a8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	370c      	adds	r7, #12
 800a6ae:	46bd      	mov	sp, r7
 800a6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b4:	4770      	bx	lr

0800a6b6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800a6b6:	b580      	push	{r7, lr}
 800a6b8:	b086      	sub	sp, #24
 800a6ba:	af00      	add	r7, sp, #0
 800a6bc:	6078      	str	r0, [r7, #4]
 800a6be:	460b      	mov	r3, r1
 800a6c0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800a6ca:	2300      	movs	r3, #0
 800a6cc:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	885b      	ldrh	r3, [r3, #2]
 800a6d2:	b29a      	uxth	r2, r3
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	781b      	ldrb	r3, [r3, #0]
 800a6d8:	b29b      	uxth	r3, r3
 800a6da:	429a      	cmp	r2, r3
 800a6dc:	d920      	bls.n	800a720 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	781b      	ldrb	r3, [r3, #0]
 800a6e2:	b29b      	uxth	r3, r3
 800a6e4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800a6e6:	e013      	b.n	800a710 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800a6e8:	f107 030a 	add.w	r3, r7, #10
 800a6ec:	4619      	mov	r1, r3
 800a6ee:	6978      	ldr	r0, [r7, #20]
 800a6f0:	f000 f81b 	bl	800a72a <USBD_GetNextDesc>
 800a6f4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a6f6:	697b      	ldr	r3, [r7, #20]
 800a6f8:	785b      	ldrb	r3, [r3, #1]
 800a6fa:	2b05      	cmp	r3, #5
 800a6fc:	d108      	bne.n	800a710 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800a6fe:	697b      	ldr	r3, [r7, #20]
 800a700:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800a702:	693b      	ldr	r3, [r7, #16]
 800a704:	789b      	ldrb	r3, [r3, #2]
 800a706:	78fa      	ldrb	r2, [r7, #3]
 800a708:	429a      	cmp	r2, r3
 800a70a:	d008      	beq.n	800a71e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800a70c:	2300      	movs	r3, #0
 800a70e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	885b      	ldrh	r3, [r3, #2]
 800a714:	b29a      	uxth	r2, r3
 800a716:	897b      	ldrh	r3, [r7, #10]
 800a718:	429a      	cmp	r2, r3
 800a71a:	d8e5      	bhi.n	800a6e8 <USBD_GetEpDesc+0x32>
 800a71c:	e000      	b.n	800a720 <USBD_GetEpDesc+0x6a>
          break;
 800a71e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800a720:	693b      	ldr	r3, [r7, #16]
}
 800a722:	4618      	mov	r0, r3
 800a724:	3718      	adds	r7, #24
 800a726:	46bd      	mov	sp, r7
 800a728:	bd80      	pop	{r7, pc}

0800a72a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a72a:	b480      	push	{r7}
 800a72c:	b085      	sub	sp, #20
 800a72e:	af00      	add	r7, sp, #0
 800a730:	6078      	str	r0, [r7, #4]
 800a732:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800a738:	683b      	ldr	r3, [r7, #0]
 800a73a:	881a      	ldrh	r2, [r3, #0]
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	781b      	ldrb	r3, [r3, #0]
 800a740:	b29b      	uxth	r3, r3
 800a742:	4413      	add	r3, r2
 800a744:	b29a      	uxth	r2, r3
 800a746:	683b      	ldr	r3, [r7, #0]
 800a748:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	781b      	ldrb	r3, [r3, #0]
 800a74e:	461a      	mov	r2, r3
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	4413      	add	r3, r2
 800a754:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a756:	68fb      	ldr	r3, [r7, #12]
}
 800a758:	4618      	mov	r0, r3
 800a75a:	3714      	adds	r7, #20
 800a75c:	46bd      	mov	sp, r7
 800a75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a762:	4770      	bx	lr

0800a764 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a764:	b480      	push	{r7}
 800a766:	b087      	sub	sp, #28
 800a768:	af00      	add	r7, sp, #0
 800a76a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a770:	697b      	ldr	r3, [r7, #20]
 800a772:	781b      	ldrb	r3, [r3, #0]
 800a774:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a776:	697b      	ldr	r3, [r7, #20]
 800a778:	3301      	adds	r3, #1
 800a77a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a77c:	697b      	ldr	r3, [r7, #20]
 800a77e:	781b      	ldrb	r3, [r3, #0]
 800a780:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a782:	8a3b      	ldrh	r3, [r7, #16]
 800a784:	021b      	lsls	r3, r3, #8
 800a786:	b21a      	sxth	r2, r3
 800a788:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a78c:	4313      	orrs	r3, r2
 800a78e:	b21b      	sxth	r3, r3
 800a790:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a792:	89fb      	ldrh	r3, [r7, #14]
}
 800a794:	4618      	mov	r0, r3
 800a796:	371c      	adds	r7, #28
 800a798:	46bd      	mov	sp, r7
 800a79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a79e:	4770      	bx	lr

0800a7a0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a7a0:	b580      	push	{r7, lr}
 800a7a2:	b084      	sub	sp, #16
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	6078      	str	r0, [r7, #4]
 800a7a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a7aa:	2300      	movs	r3, #0
 800a7ac:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a7ae:	683b      	ldr	r3, [r7, #0]
 800a7b0:	781b      	ldrb	r3, [r3, #0]
 800a7b2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a7b6:	2b40      	cmp	r3, #64	; 0x40
 800a7b8:	d005      	beq.n	800a7c6 <USBD_StdDevReq+0x26>
 800a7ba:	2b40      	cmp	r3, #64	; 0x40
 800a7bc:	d857      	bhi.n	800a86e <USBD_StdDevReq+0xce>
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d00f      	beq.n	800a7e2 <USBD_StdDevReq+0x42>
 800a7c2:	2b20      	cmp	r3, #32
 800a7c4:	d153      	bne.n	800a86e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	32ae      	adds	r2, #174	; 0xae
 800a7d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7d4:	689b      	ldr	r3, [r3, #8]
 800a7d6:	6839      	ldr	r1, [r7, #0]
 800a7d8:	6878      	ldr	r0, [r7, #4]
 800a7da:	4798      	blx	r3
 800a7dc:	4603      	mov	r3, r0
 800a7de:	73fb      	strb	r3, [r7, #15]
      break;
 800a7e0:	e04a      	b.n	800a878 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a7e2:	683b      	ldr	r3, [r7, #0]
 800a7e4:	785b      	ldrb	r3, [r3, #1]
 800a7e6:	2b09      	cmp	r3, #9
 800a7e8:	d83b      	bhi.n	800a862 <USBD_StdDevReq+0xc2>
 800a7ea:	a201      	add	r2, pc, #4	; (adr r2, 800a7f0 <USBD_StdDevReq+0x50>)
 800a7ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7f0:	0800a845 	.word	0x0800a845
 800a7f4:	0800a859 	.word	0x0800a859
 800a7f8:	0800a863 	.word	0x0800a863
 800a7fc:	0800a84f 	.word	0x0800a84f
 800a800:	0800a863 	.word	0x0800a863
 800a804:	0800a823 	.word	0x0800a823
 800a808:	0800a819 	.word	0x0800a819
 800a80c:	0800a863 	.word	0x0800a863
 800a810:	0800a83b 	.word	0x0800a83b
 800a814:	0800a82d 	.word	0x0800a82d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a818:	6839      	ldr	r1, [r7, #0]
 800a81a:	6878      	ldr	r0, [r7, #4]
 800a81c:	f000 fa3c 	bl	800ac98 <USBD_GetDescriptor>
          break;
 800a820:	e024      	b.n	800a86c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a822:	6839      	ldr	r1, [r7, #0]
 800a824:	6878      	ldr	r0, [r7, #4]
 800a826:	f000 fba1 	bl	800af6c <USBD_SetAddress>
          break;
 800a82a:	e01f      	b.n	800a86c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a82c:	6839      	ldr	r1, [r7, #0]
 800a82e:	6878      	ldr	r0, [r7, #4]
 800a830:	f000 fbe0 	bl	800aff4 <USBD_SetConfig>
 800a834:	4603      	mov	r3, r0
 800a836:	73fb      	strb	r3, [r7, #15]
          break;
 800a838:	e018      	b.n	800a86c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a83a:	6839      	ldr	r1, [r7, #0]
 800a83c:	6878      	ldr	r0, [r7, #4]
 800a83e:	f000 fc83 	bl	800b148 <USBD_GetConfig>
          break;
 800a842:	e013      	b.n	800a86c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a844:	6839      	ldr	r1, [r7, #0]
 800a846:	6878      	ldr	r0, [r7, #4]
 800a848:	f000 fcb4 	bl	800b1b4 <USBD_GetStatus>
          break;
 800a84c:	e00e      	b.n	800a86c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a84e:	6839      	ldr	r1, [r7, #0]
 800a850:	6878      	ldr	r0, [r7, #4]
 800a852:	f000 fce3 	bl	800b21c <USBD_SetFeature>
          break;
 800a856:	e009      	b.n	800a86c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a858:	6839      	ldr	r1, [r7, #0]
 800a85a:	6878      	ldr	r0, [r7, #4]
 800a85c:	f000 fd07 	bl	800b26e <USBD_ClrFeature>
          break;
 800a860:	e004      	b.n	800a86c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800a862:	6839      	ldr	r1, [r7, #0]
 800a864:	6878      	ldr	r0, [r7, #4]
 800a866:	f000 fd5e 	bl	800b326 <USBD_CtlError>
          break;
 800a86a:	bf00      	nop
      }
      break;
 800a86c:	e004      	b.n	800a878 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800a86e:	6839      	ldr	r1, [r7, #0]
 800a870:	6878      	ldr	r0, [r7, #4]
 800a872:	f000 fd58 	bl	800b326 <USBD_CtlError>
      break;
 800a876:	bf00      	nop
  }

  return ret;
 800a878:	7bfb      	ldrb	r3, [r7, #15]
}
 800a87a:	4618      	mov	r0, r3
 800a87c:	3710      	adds	r7, #16
 800a87e:	46bd      	mov	sp, r7
 800a880:	bd80      	pop	{r7, pc}
 800a882:	bf00      	nop

0800a884 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a884:	b580      	push	{r7, lr}
 800a886:	b084      	sub	sp, #16
 800a888:	af00      	add	r7, sp, #0
 800a88a:	6078      	str	r0, [r7, #4]
 800a88c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a88e:	2300      	movs	r3, #0
 800a890:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a892:	683b      	ldr	r3, [r7, #0]
 800a894:	781b      	ldrb	r3, [r3, #0]
 800a896:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a89a:	2b40      	cmp	r3, #64	; 0x40
 800a89c:	d005      	beq.n	800a8aa <USBD_StdItfReq+0x26>
 800a89e:	2b40      	cmp	r3, #64	; 0x40
 800a8a0:	d852      	bhi.n	800a948 <USBD_StdItfReq+0xc4>
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d001      	beq.n	800a8aa <USBD_StdItfReq+0x26>
 800a8a6:	2b20      	cmp	r3, #32
 800a8a8:	d14e      	bne.n	800a948 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a8b0:	b2db      	uxtb	r3, r3
 800a8b2:	3b01      	subs	r3, #1
 800a8b4:	2b02      	cmp	r3, #2
 800a8b6:	d840      	bhi.n	800a93a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a8b8:	683b      	ldr	r3, [r7, #0]
 800a8ba:	889b      	ldrh	r3, [r3, #4]
 800a8bc:	b2db      	uxtb	r3, r3
 800a8be:	2b01      	cmp	r3, #1
 800a8c0:	d836      	bhi.n	800a930 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800a8c2:	683b      	ldr	r3, [r7, #0]
 800a8c4:	889b      	ldrh	r3, [r3, #4]
 800a8c6:	b2db      	uxtb	r3, r3
 800a8c8:	4619      	mov	r1, r3
 800a8ca:	6878      	ldr	r0, [r7, #4]
 800a8cc:	f7ff fed9 	bl	800a682 <USBD_CoreFindIF>
 800a8d0:	4603      	mov	r3, r0
 800a8d2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a8d4:	7bbb      	ldrb	r3, [r7, #14]
 800a8d6:	2bff      	cmp	r3, #255	; 0xff
 800a8d8:	d01d      	beq.n	800a916 <USBD_StdItfReq+0x92>
 800a8da:	7bbb      	ldrb	r3, [r7, #14]
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d11a      	bne.n	800a916 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800a8e0:	7bba      	ldrb	r2, [r7, #14]
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	32ae      	adds	r2, #174	; 0xae
 800a8e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8ea:	689b      	ldr	r3, [r3, #8]
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d00f      	beq.n	800a910 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800a8f0:	7bba      	ldrb	r2, [r7, #14]
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a8f8:	7bba      	ldrb	r2, [r7, #14]
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	32ae      	adds	r2, #174	; 0xae
 800a8fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a902:	689b      	ldr	r3, [r3, #8]
 800a904:	6839      	ldr	r1, [r7, #0]
 800a906:	6878      	ldr	r0, [r7, #4]
 800a908:	4798      	blx	r3
 800a90a:	4603      	mov	r3, r0
 800a90c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a90e:	e004      	b.n	800a91a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800a910:	2303      	movs	r3, #3
 800a912:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a914:	e001      	b.n	800a91a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800a916:	2303      	movs	r3, #3
 800a918:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a91a:	683b      	ldr	r3, [r7, #0]
 800a91c:	88db      	ldrh	r3, [r3, #6]
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d110      	bne.n	800a944 <USBD_StdItfReq+0xc0>
 800a922:	7bfb      	ldrb	r3, [r7, #15]
 800a924:	2b00      	cmp	r3, #0
 800a926:	d10d      	bne.n	800a944 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a928:	6878      	ldr	r0, [r7, #4]
 800a92a:	f000 fdc7 	bl	800b4bc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a92e:	e009      	b.n	800a944 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800a930:	6839      	ldr	r1, [r7, #0]
 800a932:	6878      	ldr	r0, [r7, #4]
 800a934:	f000 fcf7 	bl	800b326 <USBD_CtlError>
          break;
 800a938:	e004      	b.n	800a944 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800a93a:	6839      	ldr	r1, [r7, #0]
 800a93c:	6878      	ldr	r0, [r7, #4]
 800a93e:	f000 fcf2 	bl	800b326 <USBD_CtlError>
          break;
 800a942:	e000      	b.n	800a946 <USBD_StdItfReq+0xc2>
          break;
 800a944:	bf00      	nop
      }
      break;
 800a946:	e004      	b.n	800a952 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800a948:	6839      	ldr	r1, [r7, #0]
 800a94a:	6878      	ldr	r0, [r7, #4]
 800a94c:	f000 fceb 	bl	800b326 <USBD_CtlError>
      break;
 800a950:	bf00      	nop
  }

  return ret;
 800a952:	7bfb      	ldrb	r3, [r7, #15]
}
 800a954:	4618      	mov	r0, r3
 800a956:	3710      	adds	r7, #16
 800a958:	46bd      	mov	sp, r7
 800a95a:	bd80      	pop	{r7, pc}

0800a95c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a95c:	b580      	push	{r7, lr}
 800a95e:	b084      	sub	sp, #16
 800a960:	af00      	add	r7, sp, #0
 800a962:	6078      	str	r0, [r7, #4]
 800a964:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800a966:	2300      	movs	r3, #0
 800a968:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800a96a:	683b      	ldr	r3, [r7, #0]
 800a96c:	889b      	ldrh	r3, [r3, #4]
 800a96e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a970:	683b      	ldr	r3, [r7, #0]
 800a972:	781b      	ldrb	r3, [r3, #0]
 800a974:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a978:	2b40      	cmp	r3, #64	; 0x40
 800a97a:	d007      	beq.n	800a98c <USBD_StdEPReq+0x30>
 800a97c:	2b40      	cmp	r3, #64	; 0x40
 800a97e:	f200 817f 	bhi.w	800ac80 <USBD_StdEPReq+0x324>
 800a982:	2b00      	cmp	r3, #0
 800a984:	d02a      	beq.n	800a9dc <USBD_StdEPReq+0x80>
 800a986:	2b20      	cmp	r3, #32
 800a988:	f040 817a 	bne.w	800ac80 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800a98c:	7bbb      	ldrb	r3, [r7, #14]
 800a98e:	4619      	mov	r1, r3
 800a990:	6878      	ldr	r0, [r7, #4]
 800a992:	f7ff fe83 	bl	800a69c <USBD_CoreFindEP>
 800a996:	4603      	mov	r3, r0
 800a998:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a99a:	7b7b      	ldrb	r3, [r7, #13]
 800a99c:	2bff      	cmp	r3, #255	; 0xff
 800a99e:	f000 8174 	beq.w	800ac8a <USBD_StdEPReq+0x32e>
 800a9a2:	7b7b      	ldrb	r3, [r7, #13]
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	f040 8170 	bne.w	800ac8a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800a9aa:	7b7a      	ldrb	r2, [r7, #13]
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800a9b2:	7b7a      	ldrb	r2, [r7, #13]
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	32ae      	adds	r2, #174	; 0xae
 800a9b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9bc:	689b      	ldr	r3, [r3, #8]
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	f000 8163 	beq.w	800ac8a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800a9c4:	7b7a      	ldrb	r2, [r7, #13]
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	32ae      	adds	r2, #174	; 0xae
 800a9ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9ce:	689b      	ldr	r3, [r3, #8]
 800a9d0:	6839      	ldr	r1, [r7, #0]
 800a9d2:	6878      	ldr	r0, [r7, #4]
 800a9d4:	4798      	blx	r3
 800a9d6:	4603      	mov	r3, r0
 800a9d8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a9da:	e156      	b.n	800ac8a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a9dc:	683b      	ldr	r3, [r7, #0]
 800a9de:	785b      	ldrb	r3, [r3, #1]
 800a9e0:	2b03      	cmp	r3, #3
 800a9e2:	d008      	beq.n	800a9f6 <USBD_StdEPReq+0x9a>
 800a9e4:	2b03      	cmp	r3, #3
 800a9e6:	f300 8145 	bgt.w	800ac74 <USBD_StdEPReq+0x318>
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	f000 809b 	beq.w	800ab26 <USBD_StdEPReq+0x1ca>
 800a9f0:	2b01      	cmp	r3, #1
 800a9f2:	d03c      	beq.n	800aa6e <USBD_StdEPReq+0x112>
 800a9f4:	e13e      	b.n	800ac74 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a9fc:	b2db      	uxtb	r3, r3
 800a9fe:	2b02      	cmp	r3, #2
 800aa00:	d002      	beq.n	800aa08 <USBD_StdEPReq+0xac>
 800aa02:	2b03      	cmp	r3, #3
 800aa04:	d016      	beq.n	800aa34 <USBD_StdEPReq+0xd8>
 800aa06:	e02c      	b.n	800aa62 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800aa08:	7bbb      	ldrb	r3, [r7, #14]
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d00d      	beq.n	800aa2a <USBD_StdEPReq+0xce>
 800aa0e:	7bbb      	ldrb	r3, [r7, #14]
 800aa10:	2b80      	cmp	r3, #128	; 0x80
 800aa12:	d00a      	beq.n	800aa2a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800aa14:	7bbb      	ldrb	r3, [r7, #14]
 800aa16:	4619      	mov	r1, r3
 800aa18:	6878      	ldr	r0, [r7, #4]
 800aa1a:	f001 f8c5 	bl	800bba8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800aa1e:	2180      	movs	r1, #128	; 0x80
 800aa20:	6878      	ldr	r0, [r7, #4]
 800aa22:	f001 f8c1 	bl	800bba8 <USBD_LL_StallEP>
 800aa26:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800aa28:	e020      	b.n	800aa6c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800aa2a:	6839      	ldr	r1, [r7, #0]
 800aa2c:	6878      	ldr	r0, [r7, #4]
 800aa2e:	f000 fc7a 	bl	800b326 <USBD_CtlError>
              break;
 800aa32:	e01b      	b.n	800aa6c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800aa34:	683b      	ldr	r3, [r7, #0]
 800aa36:	885b      	ldrh	r3, [r3, #2]
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d10e      	bne.n	800aa5a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800aa3c:	7bbb      	ldrb	r3, [r7, #14]
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d00b      	beq.n	800aa5a <USBD_StdEPReq+0xfe>
 800aa42:	7bbb      	ldrb	r3, [r7, #14]
 800aa44:	2b80      	cmp	r3, #128	; 0x80
 800aa46:	d008      	beq.n	800aa5a <USBD_StdEPReq+0xfe>
 800aa48:	683b      	ldr	r3, [r7, #0]
 800aa4a:	88db      	ldrh	r3, [r3, #6]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d104      	bne.n	800aa5a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800aa50:	7bbb      	ldrb	r3, [r7, #14]
 800aa52:	4619      	mov	r1, r3
 800aa54:	6878      	ldr	r0, [r7, #4]
 800aa56:	f001 f8a7 	bl	800bba8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800aa5a:	6878      	ldr	r0, [r7, #4]
 800aa5c:	f000 fd2e 	bl	800b4bc <USBD_CtlSendStatus>

              break;
 800aa60:	e004      	b.n	800aa6c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800aa62:	6839      	ldr	r1, [r7, #0]
 800aa64:	6878      	ldr	r0, [r7, #4]
 800aa66:	f000 fc5e 	bl	800b326 <USBD_CtlError>
              break;
 800aa6a:	bf00      	nop
          }
          break;
 800aa6c:	e107      	b.n	800ac7e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa74:	b2db      	uxtb	r3, r3
 800aa76:	2b02      	cmp	r3, #2
 800aa78:	d002      	beq.n	800aa80 <USBD_StdEPReq+0x124>
 800aa7a:	2b03      	cmp	r3, #3
 800aa7c:	d016      	beq.n	800aaac <USBD_StdEPReq+0x150>
 800aa7e:	e04b      	b.n	800ab18 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800aa80:	7bbb      	ldrb	r3, [r7, #14]
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d00d      	beq.n	800aaa2 <USBD_StdEPReq+0x146>
 800aa86:	7bbb      	ldrb	r3, [r7, #14]
 800aa88:	2b80      	cmp	r3, #128	; 0x80
 800aa8a:	d00a      	beq.n	800aaa2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800aa8c:	7bbb      	ldrb	r3, [r7, #14]
 800aa8e:	4619      	mov	r1, r3
 800aa90:	6878      	ldr	r0, [r7, #4]
 800aa92:	f001 f889 	bl	800bba8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800aa96:	2180      	movs	r1, #128	; 0x80
 800aa98:	6878      	ldr	r0, [r7, #4]
 800aa9a:	f001 f885 	bl	800bba8 <USBD_LL_StallEP>
 800aa9e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800aaa0:	e040      	b.n	800ab24 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800aaa2:	6839      	ldr	r1, [r7, #0]
 800aaa4:	6878      	ldr	r0, [r7, #4]
 800aaa6:	f000 fc3e 	bl	800b326 <USBD_CtlError>
              break;
 800aaaa:	e03b      	b.n	800ab24 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800aaac:	683b      	ldr	r3, [r7, #0]
 800aaae:	885b      	ldrh	r3, [r3, #2]
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d136      	bne.n	800ab22 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800aab4:	7bbb      	ldrb	r3, [r7, #14]
 800aab6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d004      	beq.n	800aac8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800aabe:	7bbb      	ldrb	r3, [r7, #14]
 800aac0:	4619      	mov	r1, r3
 800aac2:	6878      	ldr	r0, [r7, #4]
 800aac4:	f001 f88f 	bl	800bbe6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800aac8:	6878      	ldr	r0, [r7, #4]
 800aaca:	f000 fcf7 	bl	800b4bc <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800aace:	7bbb      	ldrb	r3, [r7, #14]
 800aad0:	4619      	mov	r1, r3
 800aad2:	6878      	ldr	r0, [r7, #4]
 800aad4:	f7ff fde2 	bl	800a69c <USBD_CoreFindEP>
 800aad8:	4603      	mov	r3, r0
 800aada:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800aadc:	7b7b      	ldrb	r3, [r7, #13]
 800aade:	2bff      	cmp	r3, #255	; 0xff
 800aae0:	d01f      	beq.n	800ab22 <USBD_StdEPReq+0x1c6>
 800aae2:	7b7b      	ldrb	r3, [r7, #13]
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d11c      	bne.n	800ab22 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800aae8:	7b7a      	ldrb	r2, [r7, #13]
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800aaf0:	7b7a      	ldrb	r2, [r7, #13]
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	32ae      	adds	r2, #174	; 0xae
 800aaf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aafa:	689b      	ldr	r3, [r3, #8]
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d010      	beq.n	800ab22 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ab00:	7b7a      	ldrb	r2, [r7, #13]
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	32ae      	adds	r2, #174	; 0xae
 800ab06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab0a:	689b      	ldr	r3, [r3, #8]
 800ab0c:	6839      	ldr	r1, [r7, #0]
 800ab0e:	6878      	ldr	r0, [r7, #4]
 800ab10:	4798      	blx	r3
 800ab12:	4603      	mov	r3, r0
 800ab14:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800ab16:	e004      	b.n	800ab22 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800ab18:	6839      	ldr	r1, [r7, #0]
 800ab1a:	6878      	ldr	r0, [r7, #4]
 800ab1c:	f000 fc03 	bl	800b326 <USBD_CtlError>
              break;
 800ab20:	e000      	b.n	800ab24 <USBD_StdEPReq+0x1c8>
              break;
 800ab22:	bf00      	nop
          }
          break;
 800ab24:	e0ab      	b.n	800ac7e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab2c:	b2db      	uxtb	r3, r3
 800ab2e:	2b02      	cmp	r3, #2
 800ab30:	d002      	beq.n	800ab38 <USBD_StdEPReq+0x1dc>
 800ab32:	2b03      	cmp	r3, #3
 800ab34:	d032      	beq.n	800ab9c <USBD_StdEPReq+0x240>
 800ab36:	e097      	b.n	800ac68 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ab38:	7bbb      	ldrb	r3, [r7, #14]
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d007      	beq.n	800ab4e <USBD_StdEPReq+0x1f2>
 800ab3e:	7bbb      	ldrb	r3, [r7, #14]
 800ab40:	2b80      	cmp	r3, #128	; 0x80
 800ab42:	d004      	beq.n	800ab4e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800ab44:	6839      	ldr	r1, [r7, #0]
 800ab46:	6878      	ldr	r0, [r7, #4]
 800ab48:	f000 fbed 	bl	800b326 <USBD_CtlError>
                break;
 800ab4c:	e091      	b.n	800ac72 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ab4e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	da0b      	bge.n	800ab6e <USBD_StdEPReq+0x212>
 800ab56:	7bbb      	ldrb	r3, [r7, #14]
 800ab58:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ab5c:	4613      	mov	r3, r2
 800ab5e:	009b      	lsls	r3, r3, #2
 800ab60:	4413      	add	r3, r2
 800ab62:	009b      	lsls	r3, r3, #2
 800ab64:	3310      	adds	r3, #16
 800ab66:	687a      	ldr	r2, [r7, #4]
 800ab68:	4413      	add	r3, r2
 800ab6a:	3304      	adds	r3, #4
 800ab6c:	e00b      	b.n	800ab86 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ab6e:	7bbb      	ldrb	r3, [r7, #14]
 800ab70:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ab74:	4613      	mov	r3, r2
 800ab76:	009b      	lsls	r3, r3, #2
 800ab78:	4413      	add	r3, r2
 800ab7a:	009b      	lsls	r3, r3, #2
 800ab7c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ab80:	687a      	ldr	r2, [r7, #4]
 800ab82:	4413      	add	r3, r2
 800ab84:	3304      	adds	r3, #4
 800ab86:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800ab88:	68bb      	ldr	r3, [r7, #8]
 800ab8a:	2200      	movs	r2, #0
 800ab8c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ab8e:	68bb      	ldr	r3, [r7, #8]
 800ab90:	2202      	movs	r2, #2
 800ab92:	4619      	mov	r1, r3
 800ab94:	6878      	ldr	r0, [r7, #4]
 800ab96:	f000 fc37 	bl	800b408 <USBD_CtlSendData>
              break;
 800ab9a:	e06a      	b.n	800ac72 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800ab9c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	da11      	bge.n	800abc8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800aba4:	7bbb      	ldrb	r3, [r7, #14]
 800aba6:	f003 020f 	and.w	r2, r3, #15
 800abaa:	6879      	ldr	r1, [r7, #4]
 800abac:	4613      	mov	r3, r2
 800abae:	009b      	lsls	r3, r3, #2
 800abb0:	4413      	add	r3, r2
 800abb2:	009b      	lsls	r3, r3, #2
 800abb4:	440b      	add	r3, r1
 800abb6:	3324      	adds	r3, #36	; 0x24
 800abb8:	881b      	ldrh	r3, [r3, #0]
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d117      	bne.n	800abee <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800abbe:	6839      	ldr	r1, [r7, #0]
 800abc0:	6878      	ldr	r0, [r7, #4]
 800abc2:	f000 fbb0 	bl	800b326 <USBD_CtlError>
                  break;
 800abc6:	e054      	b.n	800ac72 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800abc8:	7bbb      	ldrb	r3, [r7, #14]
 800abca:	f003 020f 	and.w	r2, r3, #15
 800abce:	6879      	ldr	r1, [r7, #4]
 800abd0:	4613      	mov	r3, r2
 800abd2:	009b      	lsls	r3, r3, #2
 800abd4:	4413      	add	r3, r2
 800abd6:	009b      	lsls	r3, r3, #2
 800abd8:	440b      	add	r3, r1
 800abda:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800abde:	881b      	ldrh	r3, [r3, #0]
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d104      	bne.n	800abee <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800abe4:	6839      	ldr	r1, [r7, #0]
 800abe6:	6878      	ldr	r0, [r7, #4]
 800abe8:	f000 fb9d 	bl	800b326 <USBD_CtlError>
                  break;
 800abec:	e041      	b.n	800ac72 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800abee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	da0b      	bge.n	800ac0e <USBD_StdEPReq+0x2b2>
 800abf6:	7bbb      	ldrb	r3, [r7, #14]
 800abf8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800abfc:	4613      	mov	r3, r2
 800abfe:	009b      	lsls	r3, r3, #2
 800ac00:	4413      	add	r3, r2
 800ac02:	009b      	lsls	r3, r3, #2
 800ac04:	3310      	adds	r3, #16
 800ac06:	687a      	ldr	r2, [r7, #4]
 800ac08:	4413      	add	r3, r2
 800ac0a:	3304      	adds	r3, #4
 800ac0c:	e00b      	b.n	800ac26 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ac0e:	7bbb      	ldrb	r3, [r7, #14]
 800ac10:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ac14:	4613      	mov	r3, r2
 800ac16:	009b      	lsls	r3, r3, #2
 800ac18:	4413      	add	r3, r2
 800ac1a:	009b      	lsls	r3, r3, #2
 800ac1c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ac20:	687a      	ldr	r2, [r7, #4]
 800ac22:	4413      	add	r3, r2
 800ac24:	3304      	adds	r3, #4
 800ac26:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ac28:	7bbb      	ldrb	r3, [r7, #14]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d002      	beq.n	800ac34 <USBD_StdEPReq+0x2d8>
 800ac2e:	7bbb      	ldrb	r3, [r7, #14]
 800ac30:	2b80      	cmp	r3, #128	; 0x80
 800ac32:	d103      	bne.n	800ac3c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800ac34:	68bb      	ldr	r3, [r7, #8]
 800ac36:	2200      	movs	r2, #0
 800ac38:	601a      	str	r2, [r3, #0]
 800ac3a:	e00e      	b.n	800ac5a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800ac3c:	7bbb      	ldrb	r3, [r7, #14]
 800ac3e:	4619      	mov	r1, r3
 800ac40:	6878      	ldr	r0, [r7, #4]
 800ac42:	f000 ffef 	bl	800bc24 <USBD_LL_IsStallEP>
 800ac46:	4603      	mov	r3, r0
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d003      	beq.n	800ac54 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800ac4c:	68bb      	ldr	r3, [r7, #8]
 800ac4e:	2201      	movs	r2, #1
 800ac50:	601a      	str	r2, [r3, #0]
 800ac52:	e002      	b.n	800ac5a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800ac54:	68bb      	ldr	r3, [r7, #8]
 800ac56:	2200      	movs	r2, #0
 800ac58:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ac5a:	68bb      	ldr	r3, [r7, #8]
 800ac5c:	2202      	movs	r2, #2
 800ac5e:	4619      	mov	r1, r3
 800ac60:	6878      	ldr	r0, [r7, #4]
 800ac62:	f000 fbd1 	bl	800b408 <USBD_CtlSendData>
              break;
 800ac66:	e004      	b.n	800ac72 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800ac68:	6839      	ldr	r1, [r7, #0]
 800ac6a:	6878      	ldr	r0, [r7, #4]
 800ac6c:	f000 fb5b 	bl	800b326 <USBD_CtlError>
              break;
 800ac70:	bf00      	nop
          }
          break;
 800ac72:	e004      	b.n	800ac7e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800ac74:	6839      	ldr	r1, [r7, #0]
 800ac76:	6878      	ldr	r0, [r7, #4]
 800ac78:	f000 fb55 	bl	800b326 <USBD_CtlError>
          break;
 800ac7c:	bf00      	nop
      }
      break;
 800ac7e:	e005      	b.n	800ac8c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800ac80:	6839      	ldr	r1, [r7, #0]
 800ac82:	6878      	ldr	r0, [r7, #4]
 800ac84:	f000 fb4f 	bl	800b326 <USBD_CtlError>
      break;
 800ac88:	e000      	b.n	800ac8c <USBD_StdEPReq+0x330>
      break;
 800ac8a:	bf00      	nop
  }

  return ret;
 800ac8c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac8e:	4618      	mov	r0, r3
 800ac90:	3710      	adds	r7, #16
 800ac92:	46bd      	mov	sp, r7
 800ac94:	bd80      	pop	{r7, pc}
	...

0800ac98 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ac98:	b580      	push	{r7, lr}
 800ac9a:	b084      	sub	sp, #16
 800ac9c:	af00      	add	r7, sp, #0
 800ac9e:	6078      	str	r0, [r7, #4]
 800aca0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800aca2:	2300      	movs	r3, #0
 800aca4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800aca6:	2300      	movs	r3, #0
 800aca8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800acaa:	2300      	movs	r3, #0
 800acac:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800acae:	683b      	ldr	r3, [r7, #0]
 800acb0:	885b      	ldrh	r3, [r3, #2]
 800acb2:	0a1b      	lsrs	r3, r3, #8
 800acb4:	b29b      	uxth	r3, r3
 800acb6:	3b01      	subs	r3, #1
 800acb8:	2b06      	cmp	r3, #6
 800acba:	f200 8128 	bhi.w	800af0e <USBD_GetDescriptor+0x276>
 800acbe:	a201      	add	r2, pc, #4	; (adr r2, 800acc4 <USBD_GetDescriptor+0x2c>)
 800acc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acc4:	0800ace1 	.word	0x0800ace1
 800acc8:	0800acf9 	.word	0x0800acf9
 800accc:	0800ad39 	.word	0x0800ad39
 800acd0:	0800af0f 	.word	0x0800af0f
 800acd4:	0800af0f 	.word	0x0800af0f
 800acd8:	0800aeaf 	.word	0x0800aeaf
 800acdc:	0800aedb 	.word	0x0800aedb
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	687a      	ldr	r2, [r7, #4]
 800acea:	7c12      	ldrb	r2, [r2, #16]
 800acec:	f107 0108 	add.w	r1, r7, #8
 800acf0:	4610      	mov	r0, r2
 800acf2:	4798      	blx	r3
 800acf4:	60f8      	str	r0, [r7, #12]
      break;
 800acf6:	e112      	b.n	800af1e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	7c1b      	ldrb	r3, [r3, #16]
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d10d      	bne.n	800ad1c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad08:	f107 0208 	add.w	r2, r7, #8
 800ad0c:	4610      	mov	r0, r2
 800ad0e:	4798      	blx	r3
 800ad10:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	3301      	adds	r3, #1
 800ad16:	2202      	movs	r2, #2
 800ad18:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800ad1a:	e100      	b.n	800af1e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad24:	f107 0208 	add.w	r2, r7, #8
 800ad28:	4610      	mov	r0, r2
 800ad2a:	4798      	blx	r3
 800ad2c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	3301      	adds	r3, #1
 800ad32:	2202      	movs	r2, #2
 800ad34:	701a      	strb	r2, [r3, #0]
      break;
 800ad36:	e0f2      	b.n	800af1e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800ad38:	683b      	ldr	r3, [r7, #0]
 800ad3a:	885b      	ldrh	r3, [r3, #2]
 800ad3c:	b2db      	uxtb	r3, r3
 800ad3e:	2b05      	cmp	r3, #5
 800ad40:	f200 80ac 	bhi.w	800ae9c <USBD_GetDescriptor+0x204>
 800ad44:	a201      	add	r2, pc, #4	; (adr r2, 800ad4c <USBD_GetDescriptor+0xb4>)
 800ad46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad4a:	bf00      	nop
 800ad4c:	0800ad65 	.word	0x0800ad65
 800ad50:	0800ad99 	.word	0x0800ad99
 800ad54:	0800adcd 	.word	0x0800adcd
 800ad58:	0800ae01 	.word	0x0800ae01
 800ad5c:	0800ae35 	.word	0x0800ae35
 800ad60:	0800ae69 	.word	0x0800ae69
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad6a:	685b      	ldr	r3, [r3, #4]
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d00b      	beq.n	800ad88 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad76:	685b      	ldr	r3, [r3, #4]
 800ad78:	687a      	ldr	r2, [r7, #4]
 800ad7a:	7c12      	ldrb	r2, [r2, #16]
 800ad7c:	f107 0108 	add.w	r1, r7, #8
 800ad80:	4610      	mov	r0, r2
 800ad82:	4798      	blx	r3
 800ad84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ad86:	e091      	b.n	800aeac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ad88:	6839      	ldr	r1, [r7, #0]
 800ad8a:	6878      	ldr	r0, [r7, #4]
 800ad8c:	f000 facb 	bl	800b326 <USBD_CtlError>
            err++;
 800ad90:	7afb      	ldrb	r3, [r7, #11]
 800ad92:	3301      	adds	r3, #1
 800ad94:	72fb      	strb	r3, [r7, #11]
          break;
 800ad96:	e089      	b.n	800aeac <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad9e:	689b      	ldr	r3, [r3, #8]
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d00b      	beq.n	800adbc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800adaa:	689b      	ldr	r3, [r3, #8]
 800adac:	687a      	ldr	r2, [r7, #4]
 800adae:	7c12      	ldrb	r2, [r2, #16]
 800adb0:	f107 0108 	add.w	r1, r7, #8
 800adb4:	4610      	mov	r0, r2
 800adb6:	4798      	blx	r3
 800adb8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800adba:	e077      	b.n	800aeac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800adbc:	6839      	ldr	r1, [r7, #0]
 800adbe:	6878      	ldr	r0, [r7, #4]
 800adc0:	f000 fab1 	bl	800b326 <USBD_CtlError>
            err++;
 800adc4:	7afb      	ldrb	r3, [r7, #11]
 800adc6:	3301      	adds	r3, #1
 800adc8:	72fb      	strb	r3, [r7, #11]
          break;
 800adca:	e06f      	b.n	800aeac <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800add2:	68db      	ldr	r3, [r3, #12]
 800add4:	2b00      	cmp	r3, #0
 800add6:	d00b      	beq.n	800adf0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800adde:	68db      	ldr	r3, [r3, #12]
 800ade0:	687a      	ldr	r2, [r7, #4]
 800ade2:	7c12      	ldrb	r2, [r2, #16]
 800ade4:	f107 0108 	add.w	r1, r7, #8
 800ade8:	4610      	mov	r0, r2
 800adea:	4798      	blx	r3
 800adec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800adee:	e05d      	b.n	800aeac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800adf0:	6839      	ldr	r1, [r7, #0]
 800adf2:	6878      	ldr	r0, [r7, #4]
 800adf4:	f000 fa97 	bl	800b326 <USBD_CtlError>
            err++;
 800adf8:	7afb      	ldrb	r3, [r7, #11]
 800adfa:	3301      	adds	r3, #1
 800adfc:	72fb      	strb	r3, [r7, #11]
          break;
 800adfe:	e055      	b.n	800aeac <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae06:	691b      	ldr	r3, [r3, #16]
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d00b      	beq.n	800ae24 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae12:	691b      	ldr	r3, [r3, #16]
 800ae14:	687a      	ldr	r2, [r7, #4]
 800ae16:	7c12      	ldrb	r2, [r2, #16]
 800ae18:	f107 0108 	add.w	r1, r7, #8
 800ae1c:	4610      	mov	r0, r2
 800ae1e:	4798      	blx	r3
 800ae20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ae22:	e043      	b.n	800aeac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ae24:	6839      	ldr	r1, [r7, #0]
 800ae26:	6878      	ldr	r0, [r7, #4]
 800ae28:	f000 fa7d 	bl	800b326 <USBD_CtlError>
            err++;
 800ae2c:	7afb      	ldrb	r3, [r7, #11]
 800ae2e:	3301      	adds	r3, #1
 800ae30:	72fb      	strb	r3, [r7, #11]
          break;
 800ae32:	e03b      	b.n	800aeac <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae3a:	695b      	ldr	r3, [r3, #20]
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d00b      	beq.n	800ae58 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae46:	695b      	ldr	r3, [r3, #20]
 800ae48:	687a      	ldr	r2, [r7, #4]
 800ae4a:	7c12      	ldrb	r2, [r2, #16]
 800ae4c:	f107 0108 	add.w	r1, r7, #8
 800ae50:	4610      	mov	r0, r2
 800ae52:	4798      	blx	r3
 800ae54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ae56:	e029      	b.n	800aeac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ae58:	6839      	ldr	r1, [r7, #0]
 800ae5a:	6878      	ldr	r0, [r7, #4]
 800ae5c:	f000 fa63 	bl	800b326 <USBD_CtlError>
            err++;
 800ae60:	7afb      	ldrb	r3, [r7, #11]
 800ae62:	3301      	adds	r3, #1
 800ae64:	72fb      	strb	r3, [r7, #11]
          break;
 800ae66:	e021      	b.n	800aeac <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae6e:	699b      	ldr	r3, [r3, #24]
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d00b      	beq.n	800ae8c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae7a:	699b      	ldr	r3, [r3, #24]
 800ae7c:	687a      	ldr	r2, [r7, #4]
 800ae7e:	7c12      	ldrb	r2, [r2, #16]
 800ae80:	f107 0108 	add.w	r1, r7, #8
 800ae84:	4610      	mov	r0, r2
 800ae86:	4798      	blx	r3
 800ae88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ae8a:	e00f      	b.n	800aeac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ae8c:	6839      	ldr	r1, [r7, #0]
 800ae8e:	6878      	ldr	r0, [r7, #4]
 800ae90:	f000 fa49 	bl	800b326 <USBD_CtlError>
            err++;
 800ae94:	7afb      	ldrb	r3, [r7, #11]
 800ae96:	3301      	adds	r3, #1
 800ae98:	72fb      	strb	r3, [r7, #11]
          break;
 800ae9a:	e007      	b.n	800aeac <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800ae9c:	6839      	ldr	r1, [r7, #0]
 800ae9e:	6878      	ldr	r0, [r7, #4]
 800aea0:	f000 fa41 	bl	800b326 <USBD_CtlError>
          err++;
 800aea4:	7afb      	ldrb	r3, [r7, #11]
 800aea6:	3301      	adds	r3, #1
 800aea8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800aeaa:	bf00      	nop
      }
      break;
 800aeac:	e037      	b.n	800af1e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	7c1b      	ldrb	r3, [r3, #16]
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d109      	bne.n	800aeca <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aebc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aebe:	f107 0208 	add.w	r2, r7, #8
 800aec2:	4610      	mov	r0, r2
 800aec4:	4798      	blx	r3
 800aec6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800aec8:	e029      	b.n	800af1e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800aeca:	6839      	ldr	r1, [r7, #0]
 800aecc:	6878      	ldr	r0, [r7, #4]
 800aece:	f000 fa2a 	bl	800b326 <USBD_CtlError>
        err++;
 800aed2:	7afb      	ldrb	r3, [r7, #11]
 800aed4:	3301      	adds	r3, #1
 800aed6:	72fb      	strb	r3, [r7, #11]
      break;
 800aed8:	e021      	b.n	800af1e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	7c1b      	ldrb	r3, [r3, #16]
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d10d      	bne.n	800aefe <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aeea:	f107 0208 	add.w	r2, r7, #8
 800aeee:	4610      	mov	r0, r2
 800aef0:	4798      	blx	r3
 800aef2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	3301      	adds	r3, #1
 800aef8:	2207      	movs	r2, #7
 800aefa:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800aefc:	e00f      	b.n	800af1e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800aefe:	6839      	ldr	r1, [r7, #0]
 800af00:	6878      	ldr	r0, [r7, #4]
 800af02:	f000 fa10 	bl	800b326 <USBD_CtlError>
        err++;
 800af06:	7afb      	ldrb	r3, [r7, #11]
 800af08:	3301      	adds	r3, #1
 800af0a:	72fb      	strb	r3, [r7, #11]
      break;
 800af0c:	e007      	b.n	800af1e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800af0e:	6839      	ldr	r1, [r7, #0]
 800af10:	6878      	ldr	r0, [r7, #4]
 800af12:	f000 fa08 	bl	800b326 <USBD_CtlError>
      err++;
 800af16:	7afb      	ldrb	r3, [r7, #11]
 800af18:	3301      	adds	r3, #1
 800af1a:	72fb      	strb	r3, [r7, #11]
      break;
 800af1c:	bf00      	nop
  }

  if (err != 0U)
 800af1e:	7afb      	ldrb	r3, [r7, #11]
 800af20:	2b00      	cmp	r3, #0
 800af22:	d11e      	bne.n	800af62 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800af24:	683b      	ldr	r3, [r7, #0]
 800af26:	88db      	ldrh	r3, [r3, #6]
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d016      	beq.n	800af5a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800af2c:	893b      	ldrh	r3, [r7, #8]
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d00e      	beq.n	800af50 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800af32:	683b      	ldr	r3, [r7, #0]
 800af34:	88da      	ldrh	r2, [r3, #6]
 800af36:	893b      	ldrh	r3, [r7, #8]
 800af38:	4293      	cmp	r3, r2
 800af3a:	bf28      	it	cs
 800af3c:	4613      	movcs	r3, r2
 800af3e:	b29b      	uxth	r3, r3
 800af40:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800af42:	893b      	ldrh	r3, [r7, #8]
 800af44:	461a      	mov	r2, r3
 800af46:	68f9      	ldr	r1, [r7, #12]
 800af48:	6878      	ldr	r0, [r7, #4]
 800af4a:	f000 fa5d 	bl	800b408 <USBD_CtlSendData>
 800af4e:	e009      	b.n	800af64 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800af50:	6839      	ldr	r1, [r7, #0]
 800af52:	6878      	ldr	r0, [r7, #4]
 800af54:	f000 f9e7 	bl	800b326 <USBD_CtlError>
 800af58:	e004      	b.n	800af64 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800af5a:	6878      	ldr	r0, [r7, #4]
 800af5c:	f000 faae 	bl	800b4bc <USBD_CtlSendStatus>
 800af60:	e000      	b.n	800af64 <USBD_GetDescriptor+0x2cc>
    return;
 800af62:	bf00      	nop
  }
}
 800af64:	3710      	adds	r7, #16
 800af66:	46bd      	mov	sp, r7
 800af68:	bd80      	pop	{r7, pc}
 800af6a:	bf00      	nop

0800af6c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af6c:	b580      	push	{r7, lr}
 800af6e:	b084      	sub	sp, #16
 800af70:	af00      	add	r7, sp, #0
 800af72:	6078      	str	r0, [r7, #4]
 800af74:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800af76:	683b      	ldr	r3, [r7, #0]
 800af78:	889b      	ldrh	r3, [r3, #4]
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d131      	bne.n	800afe2 <USBD_SetAddress+0x76>
 800af7e:	683b      	ldr	r3, [r7, #0]
 800af80:	88db      	ldrh	r3, [r3, #6]
 800af82:	2b00      	cmp	r3, #0
 800af84:	d12d      	bne.n	800afe2 <USBD_SetAddress+0x76>
 800af86:	683b      	ldr	r3, [r7, #0]
 800af88:	885b      	ldrh	r3, [r3, #2]
 800af8a:	2b7f      	cmp	r3, #127	; 0x7f
 800af8c:	d829      	bhi.n	800afe2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800af8e:	683b      	ldr	r3, [r7, #0]
 800af90:	885b      	ldrh	r3, [r3, #2]
 800af92:	b2db      	uxtb	r3, r3
 800af94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800af98:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800afa0:	b2db      	uxtb	r3, r3
 800afa2:	2b03      	cmp	r3, #3
 800afa4:	d104      	bne.n	800afb0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800afa6:	6839      	ldr	r1, [r7, #0]
 800afa8:	6878      	ldr	r0, [r7, #4]
 800afaa:	f000 f9bc 	bl	800b326 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800afae:	e01d      	b.n	800afec <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	7bfa      	ldrb	r2, [r7, #15]
 800afb4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800afb8:	7bfb      	ldrb	r3, [r7, #15]
 800afba:	4619      	mov	r1, r3
 800afbc:	6878      	ldr	r0, [r7, #4]
 800afbe:	f000 fe5d 	bl	800bc7c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800afc2:	6878      	ldr	r0, [r7, #4]
 800afc4:	f000 fa7a 	bl	800b4bc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800afc8:	7bfb      	ldrb	r3, [r7, #15]
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d004      	beq.n	800afd8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	2202      	movs	r2, #2
 800afd2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800afd6:	e009      	b.n	800afec <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	2201      	movs	r2, #1
 800afdc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800afe0:	e004      	b.n	800afec <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800afe2:	6839      	ldr	r1, [r7, #0]
 800afe4:	6878      	ldr	r0, [r7, #4]
 800afe6:	f000 f99e 	bl	800b326 <USBD_CtlError>
  }
}
 800afea:	bf00      	nop
 800afec:	bf00      	nop
 800afee:	3710      	adds	r7, #16
 800aff0:	46bd      	mov	sp, r7
 800aff2:	bd80      	pop	{r7, pc}

0800aff4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aff4:	b580      	push	{r7, lr}
 800aff6:	b084      	sub	sp, #16
 800aff8:	af00      	add	r7, sp, #0
 800affa:	6078      	str	r0, [r7, #4]
 800affc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800affe:	2300      	movs	r3, #0
 800b000:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b002:	683b      	ldr	r3, [r7, #0]
 800b004:	885b      	ldrh	r3, [r3, #2]
 800b006:	b2da      	uxtb	r2, r3
 800b008:	4b4e      	ldr	r3, [pc, #312]	; (800b144 <USBD_SetConfig+0x150>)
 800b00a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b00c:	4b4d      	ldr	r3, [pc, #308]	; (800b144 <USBD_SetConfig+0x150>)
 800b00e:	781b      	ldrb	r3, [r3, #0]
 800b010:	2b01      	cmp	r3, #1
 800b012:	d905      	bls.n	800b020 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b014:	6839      	ldr	r1, [r7, #0]
 800b016:	6878      	ldr	r0, [r7, #4]
 800b018:	f000 f985 	bl	800b326 <USBD_CtlError>
    return USBD_FAIL;
 800b01c:	2303      	movs	r3, #3
 800b01e:	e08c      	b.n	800b13a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b026:	b2db      	uxtb	r3, r3
 800b028:	2b02      	cmp	r3, #2
 800b02a:	d002      	beq.n	800b032 <USBD_SetConfig+0x3e>
 800b02c:	2b03      	cmp	r3, #3
 800b02e:	d029      	beq.n	800b084 <USBD_SetConfig+0x90>
 800b030:	e075      	b.n	800b11e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b032:	4b44      	ldr	r3, [pc, #272]	; (800b144 <USBD_SetConfig+0x150>)
 800b034:	781b      	ldrb	r3, [r3, #0]
 800b036:	2b00      	cmp	r3, #0
 800b038:	d020      	beq.n	800b07c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800b03a:	4b42      	ldr	r3, [pc, #264]	; (800b144 <USBD_SetConfig+0x150>)
 800b03c:	781b      	ldrb	r3, [r3, #0]
 800b03e:	461a      	mov	r2, r3
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b044:	4b3f      	ldr	r3, [pc, #252]	; (800b144 <USBD_SetConfig+0x150>)
 800b046:	781b      	ldrb	r3, [r3, #0]
 800b048:	4619      	mov	r1, r3
 800b04a:	6878      	ldr	r0, [r7, #4]
 800b04c:	f7fe ffe7 	bl	800a01e <USBD_SetClassConfig>
 800b050:	4603      	mov	r3, r0
 800b052:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b054:	7bfb      	ldrb	r3, [r7, #15]
 800b056:	2b00      	cmp	r3, #0
 800b058:	d008      	beq.n	800b06c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800b05a:	6839      	ldr	r1, [r7, #0]
 800b05c:	6878      	ldr	r0, [r7, #4]
 800b05e:	f000 f962 	bl	800b326 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	2202      	movs	r2, #2
 800b066:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b06a:	e065      	b.n	800b138 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b06c:	6878      	ldr	r0, [r7, #4]
 800b06e:	f000 fa25 	bl	800b4bc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	2203      	movs	r2, #3
 800b076:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b07a:	e05d      	b.n	800b138 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b07c:	6878      	ldr	r0, [r7, #4]
 800b07e:	f000 fa1d 	bl	800b4bc <USBD_CtlSendStatus>
      break;
 800b082:	e059      	b.n	800b138 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b084:	4b2f      	ldr	r3, [pc, #188]	; (800b144 <USBD_SetConfig+0x150>)
 800b086:	781b      	ldrb	r3, [r3, #0]
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d112      	bne.n	800b0b2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	2202      	movs	r2, #2
 800b090:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800b094:	4b2b      	ldr	r3, [pc, #172]	; (800b144 <USBD_SetConfig+0x150>)
 800b096:	781b      	ldrb	r3, [r3, #0]
 800b098:	461a      	mov	r2, r3
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b09e:	4b29      	ldr	r3, [pc, #164]	; (800b144 <USBD_SetConfig+0x150>)
 800b0a0:	781b      	ldrb	r3, [r3, #0]
 800b0a2:	4619      	mov	r1, r3
 800b0a4:	6878      	ldr	r0, [r7, #4]
 800b0a6:	f7fe ffd6 	bl	800a056 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b0aa:	6878      	ldr	r0, [r7, #4]
 800b0ac:	f000 fa06 	bl	800b4bc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b0b0:	e042      	b.n	800b138 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800b0b2:	4b24      	ldr	r3, [pc, #144]	; (800b144 <USBD_SetConfig+0x150>)
 800b0b4:	781b      	ldrb	r3, [r3, #0]
 800b0b6:	461a      	mov	r2, r3
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	685b      	ldr	r3, [r3, #4]
 800b0bc:	429a      	cmp	r2, r3
 800b0be:	d02a      	beq.n	800b116 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	685b      	ldr	r3, [r3, #4]
 800b0c4:	b2db      	uxtb	r3, r3
 800b0c6:	4619      	mov	r1, r3
 800b0c8:	6878      	ldr	r0, [r7, #4]
 800b0ca:	f7fe ffc4 	bl	800a056 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b0ce:	4b1d      	ldr	r3, [pc, #116]	; (800b144 <USBD_SetConfig+0x150>)
 800b0d0:	781b      	ldrb	r3, [r3, #0]
 800b0d2:	461a      	mov	r2, r3
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b0d8:	4b1a      	ldr	r3, [pc, #104]	; (800b144 <USBD_SetConfig+0x150>)
 800b0da:	781b      	ldrb	r3, [r3, #0]
 800b0dc:	4619      	mov	r1, r3
 800b0de:	6878      	ldr	r0, [r7, #4]
 800b0e0:	f7fe ff9d 	bl	800a01e <USBD_SetClassConfig>
 800b0e4:	4603      	mov	r3, r0
 800b0e6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b0e8:	7bfb      	ldrb	r3, [r7, #15]
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d00f      	beq.n	800b10e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800b0ee:	6839      	ldr	r1, [r7, #0]
 800b0f0:	6878      	ldr	r0, [r7, #4]
 800b0f2:	f000 f918 	bl	800b326 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	685b      	ldr	r3, [r3, #4]
 800b0fa:	b2db      	uxtb	r3, r3
 800b0fc:	4619      	mov	r1, r3
 800b0fe:	6878      	ldr	r0, [r7, #4]
 800b100:	f7fe ffa9 	bl	800a056 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	2202      	movs	r2, #2
 800b108:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b10c:	e014      	b.n	800b138 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b10e:	6878      	ldr	r0, [r7, #4]
 800b110:	f000 f9d4 	bl	800b4bc <USBD_CtlSendStatus>
      break;
 800b114:	e010      	b.n	800b138 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b116:	6878      	ldr	r0, [r7, #4]
 800b118:	f000 f9d0 	bl	800b4bc <USBD_CtlSendStatus>
      break;
 800b11c:	e00c      	b.n	800b138 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800b11e:	6839      	ldr	r1, [r7, #0]
 800b120:	6878      	ldr	r0, [r7, #4]
 800b122:	f000 f900 	bl	800b326 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b126:	4b07      	ldr	r3, [pc, #28]	; (800b144 <USBD_SetConfig+0x150>)
 800b128:	781b      	ldrb	r3, [r3, #0]
 800b12a:	4619      	mov	r1, r3
 800b12c:	6878      	ldr	r0, [r7, #4]
 800b12e:	f7fe ff92 	bl	800a056 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b132:	2303      	movs	r3, #3
 800b134:	73fb      	strb	r3, [r7, #15]
      break;
 800b136:	bf00      	nop
  }

  return ret;
 800b138:	7bfb      	ldrb	r3, [r7, #15]
}
 800b13a:	4618      	mov	r0, r3
 800b13c:	3710      	adds	r7, #16
 800b13e:	46bd      	mov	sp, r7
 800b140:	bd80      	pop	{r7, pc}
 800b142:	bf00      	nop
 800b144:	20000d88 	.word	0x20000d88

0800b148 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b148:	b580      	push	{r7, lr}
 800b14a:	b082      	sub	sp, #8
 800b14c:	af00      	add	r7, sp, #0
 800b14e:	6078      	str	r0, [r7, #4]
 800b150:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b152:	683b      	ldr	r3, [r7, #0]
 800b154:	88db      	ldrh	r3, [r3, #6]
 800b156:	2b01      	cmp	r3, #1
 800b158:	d004      	beq.n	800b164 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b15a:	6839      	ldr	r1, [r7, #0]
 800b15c:	6878      	ldr	r0, [r7, #4]
 800b15e:	f000 f8e2 	bl	800b326 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b162:	e023      	b.n	800b1ac <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b16a:	b2db      	uxtb	r3, r3
 800b16c:	2b02      	cmp	r3, #2
 800b16e:	dc02      	bgt.n	800b176 <USBD_GetConfig+0x2e>
 800b170:	2b00      	cmp	r3, #0
 800b172:	dc03      	bgt.n	800b17c <USBD_GetConfig+0x34>
 800b174:	e015      	b.n	800b1a2 <USBD_GetConfig+0x5a>
 800b176:	2b03      	cmp	r3, #3
 800b178:	d00b      	beq.n	800b192 <USBD_GetConfig+0x4a>
 800b17a:	e012      	b.n	800b1a2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	2200      	movs	r2, #0
 800b180:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	3308      	adds	r3, #8
 800b186:	2201      	movs	r2, #1
 800b188:	4619      	mov	r1, r3
 800b18a:	6878      	ldr	r0, [r7, #4]
 800b18c:	f000 f93c 	bl	800b408 <USBD_CtlSendData>
        break;
 800b190:	e00c      	b.n	800b1ac <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	3304      	adds	r3, #4
 800b196:	2201      	movs	r2, #1
 800b198:	4619      	mov	r1, r3
 800b19a:	6878      	ldr	r0, [r7, #4]
 800b19c:	f000 f934 	bl	800b408 <USBD_CtlSendData>
        break;
 800b1a0:	e004      	b.n	800b1ac <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b1a2:	6839      	ldr	r1, [r7, #0]
 800b1a4:	6878      	ldr	r0, [r7, #4]
 800b1a6:	f000 f8be 	bl	800b326 <USBD_CtlError>
        break;
 800b1aa:	bf00      	nop
}
 800b1ac:	bf00      	nop
 800b1ae:	3708      	adds	r7, #8
 800b1b0:	46bd      	mov	sp, r7
 800b1b2:	bd80      	pop	{r7, pc}

0800b1b4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b1b4:	b580      	push	{r7, lr}
 800b1b6:	b082      	sub	sp, #8
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	6078      	str	r0, [r7, #4]
 800b1bc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b1c4:	b2db      	uxtb	r3, r3
 800b1c6:	3b01      	subs	r3, #1
 800b1c8:	2b02      	cmp	r3, #2
 800b1ca:	d81e      	bhi.n	800b20a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b1cc:	683b      	ldr	r3, [r7, #0]
 800b1ce:	88db      	ldrh	r3, [r3, #6]
 800b1d0:	2b02      	cmp	r3, #2
 800b1d2:	d004      	beq.n	800b1de <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b1d4:	6839      	ldr	r1, [r7, #0]
 800b1d6:	6878      	ldr	r0, [r7, #4]
 800b1d8:	f000 f8a5 	bl	800b326 <USBD_CtlError>
        break;
 800b1dc:	e01a      	b.n	800b214 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	2201      	movs	r2, #1
 800b1e2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d005      	beq.n	800b1fa <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	68db      	ldr	r3, [r3, #12]
 800b1f2:	f043 0202 	orr.w	r2, r3, #2
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	330c      	adds	r3, #12
 800b1fe:	2202      	movs	r2, #2
 800b200:	4619      	mov	r1, r3
 800b202:	6878      	ldr	r0, [r7, #4]
 800b204:	f000 f900 	bl	800b408 <USBD_CtlSendData>
      break;
 800b208:	e004      	b.n	800b214 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b20a:	6839      	ldr	r1, [r7, #0]
 800b20c:	6878      	ldr	r0, [r7, #4]
 800b20e:	f000 f88a 	bl	800b326 <USBD_CtlError>
      break;
 800b212:	bf00      	nop
  }
}
 800b214:	bf00      	nop
 800b216:	3708      	adds	r7, #8
 800b218:	46bd      	mov	sp, r7
 800b21a:	bd80      	pop	{r7, pc}

0800b21c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b21c:	b580      	push	{r7, lr}
 800b21e:	b082      	sub	sp, #8
 800b220:	af00      	add	r7, sp, #0
 800b222:	6078      	str	r0, [r7, #4]
 800b224:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b226:	683b      	ldr	r3, [r7, #0]
 800b228:	885b      	ldrh	r3, [r3, #2]
 800b22a:	2b01      	cmp	r3, #1
 800b22c:	d107      	bne.n	800b23e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	2201      	movs	r2, #1
 800b232:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b236:	6878      	ldr	r0, [r7, #4]
 800b238:	f000 f940 	bl	800b4bc <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800b23c:	e013      	b.n	800b266 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b23e:	683b      	ldr	r3, [r7, #0]
 800b240:	885b      	ldrh	r3, [r3, #2]
 800b242:	2b02      	cmp	r3, #2
 800b244:	d10b      	bne.n	800b25e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800b246:	683b      	ldr	r3, [r7, #0]
 800b248:	889b      	ldrh	r3, [r3, #4]
 800b24a:	0a1b      	lsrs	r3, r3, #8
 800b24c:	b29b      	uxth	r3, r3
 800b24e:	b2da      	uxtb	r2, r3
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800b256:	6878      	ldr	r0, [r7, #4]
 800b258:	f000 f930 	bl	800b4bc <USBD_CtlSendStatus>
}
 800b25c:	e003      	b.n	800b266 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800b25e:	6839      	ldr	r1, [r7, #0]
 800b260:	6878      	ldr	r0, [r7, #4]
 800b262:	f000 f860 	bl	800b326 <USBD_CtlError>
}
 800b266:	bf00      	nop
 800b268:	3708      	adds	r7, #8
 800b26a:	46bd      	mov	sp, r7
 800b26c:	bd80      	pop	{r7, pc}

0800b26e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b26e:	b580      	push	{r7, lr}
 800b270:	b082      	sub	sp, #8
 800b272:	af00      	add	r7, sp, #0
 800b274:	6078      	str	r0, [r7, #4]
 800b276:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b27e:	b2db      	uxtb	r3, r3
 800b280:	3b01      	subs	r3, #1
 800b282:	2b02      	cmp	r3, #2
 800b284:	d80b      	bhi.n	800b29e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b286:	683b      	ldr	r3, [r7, #0]
 800b288:	885b      	ldrh	r3, [r3, #2]
 800b28a:	2b01      	cmp	r3, #1
 800b28c:	d10c      	bne.n	800b2a8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	2200      	movs	r2, #0
 800b292:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b296:	6878      	ldr	r0, [r7, #4]
 800b298:	f000 f910 	bl	800b4bc <USBD_CtlSendStatus>
      }
      break;
 800b29c:	e004      	b.n	800b2a8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b29e:	6839      	ldr	r1, [r7, #0]
 800b2a0:	6878      	ldr	r0, [r7, #4]
 800b2a2:	f000 f840 	bl	800b326 <USBD_CtlError>
      break;
 800b2a6:	e000      	b.n	800b2aa <USBD_ClrFeature+0x3c>
      break;
 800b2a8:	bf00      	nop
  }
}
 800b2aa:	bf00      	nop
 800b2ac:	3708      	adds	r7, #8
 800b2ae:	46bd      	mov	sp, r7
 800b2b0:	bd80      	pop	{r7, pc}

0800b2b2 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b2b2:	b580      	push	{r7, lr}
 800b2b4:	b084      	sub	sp, #16
 800b2b6:	af00      	add	r7, sp, #0
 800b2b8:	6078      	str	r0, [r7, #4]
 800b2ba:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b2bc:	683b      	ldr	r3, [r7, #0]
 800b2be:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	781a      	ldrb	r2, [r3, #0]
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	3301      	adds	r3, #1
 800b2cc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	781a      	ldrb	r2, [r3, #0]
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	3301      	adds	r3, #1
 800b2da:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b2dc:	68f8      	ldr	r0, [r7, #12]
 800b2de:	f7ff fa41 	bl	800a764 <SWAPBYTE>
 800b2e2:	4603      	mov	r3, r0
 800b2e4:	461a      	mov	r2, r3
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	3301      	adds	r3, #1
 800b2ee:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	3301      	adds	r3, #1
 800b2f4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b2f6:	68f8      	ldr	r0, [r7, #12]
 800b2f8:	f7ff fa34 	bl	800a764 <SWAPBYTE>
 800b2fc:	4603      	mov	r3, r0
 800b2fe:	461a      	mov	r2, r3
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	3301      	adds	r3, #1
 800b308:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	3301      	adds	r3, #1
 800b30e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b310:	68f8      	ldr	r0, [r7, #12]
 800b312:	f7ff fa27 	bl	800a764 <SWAPBYTE>
 800b316:	4603      	mov	r3, r0
 800b318:	461a      	mov	r2, r3
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	80da      	strh	r2, [r3, #6]
}
 800b31e:	bf00      	nop
 800b320:	3710      	adds	r7, #16
 800b322:	46bd      	mov	sp, r7
 800b324:	bd80      	pop	{r7, pc}

0800b326 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b326:	b580      	push	{r7, lr}
 800b328:	b082      	sub	sp, #8
 800b32a:	af00      	add	r7, sp, #0
 800b32c:	6078      	str	r0, [r7, #4]
 800b32e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b330:	2180      	movs	r1, #128	; 0x80
 800b332:	6878      	ldr	r0, [r7, #4]
 800b334:	f000 fc38 	bl	800bba8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b338:	2100      	movs	r1, #0
 800b33a:	6878      	ldr	r0, [r7, #4]
 800b33c:	f000 fc34 	bl	800bba8 <USBD_LL_StallEP>
}
 800b340:	bf00      	nop
 800b342:	3708      	adds	r7, #8
 800b344:	46bd      	mov	sp, r7
 800b346:	bd80      	pop	{r7, pc}

0800b348 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b348:	b580      	push	{r7, lr}
 800b34a:	b086      	sub	sp, #24
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	60f8      	str	r0, [r7, #12]
 800b350:	60b9      	str	r1, [r7, #8]
 800b352:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b354:	2300      	movs	r3, #0
 800b356:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d036      	beq.n	800b3cc <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b362:	6938      	ldr	r0, [r7, #16]
 800b364:	f000 f836 	bl	800b3d4 <USBD_GetLen>
 800b368:	4603      	mov	r3, r0
 800b36a:	3301      	adds	r3, #1
 800b36c:	b29b      	uxth	r3, r3
 800b36e:	005b      	lsls	r3, r3, #1
 800b370:	b29a      	uxth	r2, r3
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b376:	7dfb      	ldrb	r3, [r7, #23]
 800b378:	68ba      	ldr	r2, [r7, #8]
 800b37a:	4413      	add	r3, r2
 800b37c:	687a      	ldr	r2, [r7, #4]
 800b37e:	7812      	ldrb	r2, [r2, #0]
 800b380:	701a      	strb	r2, [r3, #0]
  idx++;
 800b382:	7dfb      	ldrb	r3, [r7, #23]
 800b384:	3301      	adds	r3, #1
 800b386:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b388:	7dfb      	ldrb	r3, [r7, #23]
 800b38a:	68ba      	ldr	r2, [r7, #8]
 800b38c:	4413      	add	r3, r2
 800b38e:	2203      	movs	r2, #3
 800b390:	701a      	strb	r2, [r3, #0]
  idx++;
 800b392:	7dfb      	ldrb	r3, [r7, #23]
 800b394:	3301      	adds	r3, #1
 800b396:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b398:	e013      	b.n	800b3c2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b39a:	7dfb      	ldrb	r3, [r7, #23]
 800b39c:	68ba      	ldr	r2, [r7, #8]
 800b39e:	4413      	add	r3, r2
 800b3a0:	693a      	ldr	r2, [r7, #16]
 800b3a2:	7812      	ldrb	r2, [r2, #0]
 800b3a4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b3a6:	693b      	ldr	r3, [r7, #16]
 800b3a8:	3301      	adds	r3, #1
 800b3aa:	613b      	str	r3, [r7, #16]
    idx++;
 800b3ac:	7dfb      	ldrb	r3, [r7, #23]
 800b3ae:	3301      	adds	r3, #1
 800b3b0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b3b2:	7dfb      	ldrb	r3, [r7, #23]
 800b3b4:	68ba      	ldr	r2, [r7, #8]
 800b3b6:	4413      	add	r3, r2
 800b3b8:	2200      	movs	r2, #0
 800b3ba:	701a      	strb	r2, [r3, #0]
    idx++;
 800b3bc:	7dfb      	ldrb	r3, [r7, #23]
 800b3be:	3301      	adds	r3, #1
 800b3c0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b3c2:	693b      	ldr	r3, [r7, #16]
 800b3c4:	781b      	ldrb	r3, [r3, #0]
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d1e7      	bne.n	800b39a <USBD_GetString+0x52>
 800b3ca:	e000      	b.n	800b3ce <USBD_GetString+0x86>
    return;
 800b3cc:	bf00      	nop
  }
}
 800b3ce:	3718      	adds	r7, #24
 800b3d0:	46bd      	mov	sp, r7
 800b3d2:	bd80      	pop	{r7, pc}

0800b3d4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b3d4:	b480      	push	{r7}
 800b3d6:	b085      	sub	sp, #20
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b3dc:	2300      	movs	r3, #0
 800b3de:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b3e4:	e005      	b.n	800b3f2 <USBD_GetLen+0x1e>
  {
    len++;
 800b3e6:	7bfb      	ldrb	r3, [r7, #15]
 800b3e8:	3301      	adds	r3, #1
 800b3ea:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b3ec:	68bb      	ldr	r3, [r7, #8]
 800b3ee:	3301      	adds	r3, #1
 800b3f0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b3f2:	68bb      	ldr	r3, [r7, #8]
 800b3f4:	781b      	ldrb	r3, [r3, #0]
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d1f5      	bne.n	800b3e6 <USBD_GetLen+0x12>
  }

  return len;
 800b3fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3fc:	4618      	mov	r0, r3
 800b3fe:	3714      	adds	r7, #20
 800b400:	46bd      	mov	sp, r7
 800b402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b406:	4770      	bx	lr

0800b408 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b408:	b580      	push	{r7, lr}
 800b40a:	b084      	sub	sp, #16
 800b40c:	af00      	add	r7, sp, #0
 800b40e:	60f8      	str	r0, [r7, #12]
 800b410:	60b9      	str	r1, [r7, #8]
 800b412:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	2202      	movs	r2, #2
 800b418:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	687a      	ldr	r2, [r7, #4]
 800b420:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	687a      	ldr	r2, [r7, #4]
 800b426:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	68ba      	ldr	r2, [r7, #8]
 800b42c:	2100      	movs	r1, #0
 800b42e:	68f8      	ldr	r0, [r7, #12]
 800b430:	f000 fc43 	bl	800bcba <USBD_LL_Transmit>

  return USBD_OK;
 800b434:	2300      	movs	r3, #0
}
 800b436:	4618      	mov	r0, r3
 800b438:	3710      	adds	r7, #16
 800b43a:	46bd      	mov	sp, r7
 800b43c:	bd80      	pop	{r7, pc}

0800b43e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b43e:	b580      	push	{r7, lr}
 800b440:	b084      	sub	sp, #16
 800b442:	af00      	add	r7, sp, #0
 800b444:	60f8      	str	r0, [r7, #12]
 800b446:	60b9      	str	r1, [r7, #8]
 800b448:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	68ba      	ldr	r2, [r7, #8]
 800b44e:	2100      	movs	r1, #0
 800b450:	68f8      	ldr	r0, [r7, #12]
 800b452:	f000 fc32 	bl	800bcba <USBD_LL_Transmit>

  return USBD_OK;
 800b456:	2300      	movs	r3, #0
}
 800b458:	4618      	mov	r0, r3
 800b45a:	3710      	adds	r7, #16
 800b45c:	46bd      	mov	sp, r7
 800b45e:	bd80      	pop	{r7, pc}

0800b460 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b460:	b580      	push	{r7, lr}
 800b462:	b084      	sub	sp, #16
 800b464:	af00      	add	r7, sp, #0
 800b466:	60f8      	str	r0, [r7, #12]
 800b468:	60b9      	str	r1, [r7, #8]
 800b46a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	2203      	movs	r2, #3
 800b470:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	687a      	ldr	r2, [r7, #4]
 800b478:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	687a      	ldr	r2, [r7, #4]
 800b480:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	68ba      	ldr	r2, [r7, #8]
 800b488:	2100      	movs	r1, #0
 800b48a:	68f8      	ldr	r0, [r7, #12]
 800b48c:	f000 fc36 	bl	800bcfc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b490:	2300      	movs	r3, #0
}
 800b492:	4618      	mov	r0, r3
 800b494:	3710      	adds	r7, #16
 800b496:	46bd      	mov	sp, r7
 800b498:	bd80      	pop	{r7, pc}

0800b49a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b49a:	b580      	push	{r7, lr}
 800b49c:	b084      	sub	sp, #16
 800b49e:	af00      	add	r7, sp, #0
 800b4a0:	60f8      	str	r0, [r7, #12]
 800b4a2:	60b9      	str	r1, [r7, #8]
 800b4a4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	68ba      	ldr	r2, [r7, #8]
 800b4aa:	2100      	movs	r1, #0
 800b4ac:	68f8      	ldr	r0, [r7, #12]
 800b4ae:	f000 fc25 	bl	800bcfc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b4b2:	2300      	movs	r3, #0
}
 800b4b4:	4618      	mov	r0, r3
 800b4b6:	3710      	adds	r7, #16
 800b4b8:	46bd      	mov	sp, r7
 800b4ba:	bd80      	pop	{r7, pc}

0800b4bc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b4bc:	b580      	push	{r7, lr}
 800b4be:	b082      	sub	sp, #8
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	2204      	movs	r2, #4
 800b4c8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b4cc:	2300      	movs	r3, #0
 800b4ce:	2200      	movs	r2, #0
 800b4d0:	2100      	movs	r1, #0
 800b4d2:	6878      	ldr	r0, [r7, #4]
 800b4d4:	f000 fbf1 	bl	800bcba <USBD_LL_Transmit>

  return USBD_OK;
 800b4d8:	2300      	movs	r3, #0
}
 800b4da:	4618      	mov	r0, r3
 800b4dc:	3708      	adds	r7, #8
 800b4de:	46bd      	mov	sp, r7
 800b4e0:	bd80      	pop	{r7, pc}

0800b4e2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b4e2:	b580      	push	{r7, lr}
 800b4e4:	b082      	sub	sp, #8
 800b4e6:	af00      	add	r7, sp, #0
 800b4e8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	2205      	movs	r2, #5
 800b4ee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b4f2:	2300      	movs	r3, #0
 800b4f4:	2200      	movs	r2, #0
 800b4f6:	2100      	movs	r1, #0
 800b4f8:	6878      	ldr	r0, [r7, #4]
 800b4fa:	f000 fbff 	bl	800bcfc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b4fe:	2300      	movs	r3, #0
}
 800b500:	4618      	mov	r0, r3
 800b502:	3708      	adds	r7, #8
 800b504:	46bd      	mov	sp, r7
 800b506:	bd80      	pop	{r7, pc}

0800b508 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b508:	b580      	push	{r7, lr}
 800b50a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b50c:	2200      	movs	r2, #0
 800b50e:	4912      	ldr	r1, [pc, #72]	; (800b558 <MX_USB_DEVICE_Init+0x50>)
 800b510:	4812      	ldr	r0, [pc, #72]	; (800b55c <MX_USB_DEVICE_Init+0x54>)
 800b512:	f7fe fd07 	bl	8009f24 <USBD_Init>
 800b516:	4603      	mov	r3, r0
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d001      	beq.n	800b520 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b51c:	f7f6 f9c8 	bl	80018b0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 800b520:	490f      	ldr	r1, [pc, #60]	; (800b560 <MX_USB_DEVICE_Init+0x58>)
 800b522:	480e      	ldr	r0, [pc, #56]	; (800b55c <MX_USB_DEVICE_Init+0x54>)
 800b524:	f7fe fd2e 	bl	8009f84 <USBD_RegisterClass>
 800b528:	4603      	mov	r3, r0
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d001      	beq.n	800b532 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b52e:	f7f6 f9bf 	bl	80018b0 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 800b532:	490c      	ldr	r1, [pc, #48]	; (800b564 <MX_USB_DEVICE_Init+0x5c>)
 800b534:	4809      	ldr	r0, [pc, #36]	; (800b55c <MX_USB_DEVICE_Init+0x54>)
 800b536:	f7fe fcdb 	bl	8009ef0 <USBD_CUSTOM_HID_RegisterInterface>
 800b53a:	4603      	mov	r3, r0
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d001      	beq.n	800b544 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b540:	f7f6 f9b6 	bl	80018b0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b544:	4805      	ldr	r0, [pc, #20]	; (800b55c <MX_USB_DEVICE_Init+0x54>)
 800b546:	f7fe fd53 	bl	8009ff0 <USBD_Start>
 800b54a:	4603      	mov	r3, r0
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d001      	beq.n	800b554 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b550:	f7f6 f9ae 	bl	80018b0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b554:	bf00      	nop
 800b556:	bd80      	pop	{r7, pc}
 800b558:	200000b8 	.word	0x200000b8
 800b55c:	20000d8c 	.word	0x20000d8c
 800b560:	20000028 	.word	0x20000028
 800b564:	200000a8 	.word	0x200000a8

0800b568 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 800b568:	b480      	push	{r7}
 800b56a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b56c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b56e:	4618      	mov	r0, r3
 800b570:	46bd      	mov	sp, r7
 800b572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b576:	4770      	bx	lr

0800b578 <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 800b578:	b480      	push	{r7}
 800b57a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 800b57c:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b57e:	4618      	mov	r0, r3
 800b580:	46bd      	mov	sp, r7
 800b582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b586:	4770      	bx	lr

0800b588 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 800b588:	b580      	push	{r7, lr}
 800b58a:	b082      	sub	sp, #8
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	4603      	mov	r3, r0
 800b590:	460a      	mov	r2, r1
 800b592:	71fb      	strb	r3, [r7, #7]
 800b594:	4613      	mov	r3, r2
 800b596:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  UNUSED(event_idx);
  UNUSED(state);

  /* Start next USB packet transfer once data processing is completed */
  if (USBD_CUSTOM_HID_ReceivePacket(&hUsbDeviceFS) != (uint8_t)USBD_OK)
 800b598:	4806      	ldr	r0, [pc, #24]	; (800b5b4 <CUSTOM_HID_OutEvent_FS+0x2c>)
 800b59a:	f7fe fc47 	bl	8009e2c <USBD_CUSTOM_HID_ReceivePacket>
 800b59e:	4603      	mov	r3, r0
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d002      	beq.n	800b5aa <CUSTOM_HID_OutEvent_FS+0x22>
  {
    return -1;
 800b5a4:	f04f 33ff 	mov.w	r3, #4294967295
 800b5a8:	e000      	b.n	800b5ac <CUSTOM_HID_OutEvent_FS+0x24>
  }

  return (USBD_OK);
 800b5aa:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b5ac:	4618      	mov	r0, r3
 800b5ae:	3708      	adds	r7, #8
 800b5b0:	46bd      	mov	sp, r7
 800b5b2:	bd80      	pop	{r7, pc}
 800b5b4:	20000d8c 	.word	0x20000d8c

0800b5b8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b5b8:	b480      	push	{r7}
 800b5ba:	b083      	sub	sp, #12
 800b5bc:	af00      	add	r7, sp, #0
 800b5be:	4603      	mov	r3, r0
 800b5c0:	6039      	str	r1, [r7, #0]
 800b5c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b5c4:	683b      	ldr	r3, [r7, #0]
 800b5c6:	2212      	movs	r2, #18
 800b5c8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b5ca:	4b03      	ldr	r3, [pc, #12]	; (800b5d8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b5cc:	4618      	mov	r0, r3
 800b5ce:	370c      	adds	r7, #12
 800b5d0:	46bd      	mov	sp, r7
 800b5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d6:	4770      	bx	lr
 800b5d8:	200000d4 	.word	0x200000d4

0800b5dc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b5dc:	b480      	push	{r7}
 800b5de:	b083      	sub	sp, #12
 800b5e0:	af00      	add	r7, sp, #0
 800b5e2:	4603      	mov	r3, r0
 800b5e4:	6039      	str	r1, [r7, #0]
 800b5e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b5e8:	683b      	ldr	r3, [r7, #0]
 800b5ea:	2204      	movs	r2, #4
 800b5ec:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b5ee:	4b03      	ldr	r3, [pc, #12]	; (800b5fc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b5f0:	4618      	mov	r0, r3
 800b5f2:	370c      	adds	r7, #12
 800b5f4:	46bd      	mov	sp, r7
 800b5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5fa:	4770      	bx	lr
 800b5fc:	200000e8 	.word	0x200000e8

0800b600 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b600:	b580      	push	{r7, lr}
 800b602:	b082      	sub	sp, #8
 800b604:	af00      	add	r7, sp, #0
 800b606:	4603      	mov	r3, r0
 800b608:	6039      	str	r1, [r7, #0]
 800b60a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b60c:	79fb      	ldrb	r3, [r7, #7]
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d105      	bne.n	800b61e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b612:	683a      	ldr	r2, [r7, #0]
 800b614:	4907      	ldr	r1, [pc, #28]	; (800b634 <USBD_FS_ProductStrDescriptor+0x34>)
 800b616:	4808      	ldr	r0, [pc, #32]	; (800b638 <USBD_FS_ProductStrDescriptor+0x38>)
 800b618:	f7ff fe96 	bl	800b348 <USBD_GetString>
 800b61c:	e004      	b.n	800b628 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b61e:	683a      	ldr	r2, [r7, #0]
 800b620:	4904      	ldr	r1, [pc, #16]	; (800b634 <USBD_FS_ProductStrDescriptor+0x34>)
 800b622:	4805      	ldr	r0, [pc, #20]	; (800b638 <USBD_FS_ProductStrDescriptor+0x38>)
 800b624:	f7ff fe90 	bl	800b348 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b628:	4b02      	ldr	r3, [pc, #8]	; (800b634 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b62a:	4618      	mov	r0, r3
 800b62c:	3708      	adds	r7, #8
 800b62e:	46bd      	mov	sp, r7
 800b630:	bd80      	pop	{r7, pc}
 800b632:	bf00      	nop
 800b634:	20001068 	.word	0x20001068
 800b638:	0800d1b8 	.word	0x0800d1b8

0800b63c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b63c:	b580      	push	{r7, lr}
 800b63e:	b082      	sub	sp, #8
 800b640:	af00      	add	r7, sp, #0
 800b642:	4603      	mov	r3, r0
 800b644:	6039      	str	r1, [r7, #0]
 800b646:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b648:	683a      	ldr	r2, [r7, #0]
 800b64a:	4904      	ldr	r1, [pc, #16]	; (800b65c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b64c:	4804      	ldr	r0, [pc, #16]	; (800b660 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b64e:	f7ff fe7b 	bl	800b348 <USBD_GetString>
  return USBD_StrDesc;
 800b652:	4b02      	ldr	r3, [pc, #8]	; (800b65c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b654:	4618      	mov	r0, r3
 800b656:	3708      	adds	r7, #8
 800b658:	46bd      	mov	sp, r7
 800b65a:	bd80      	pop	{r7, pc}
 800b65c:	20001068 	.word	0x20001068
 800b660:	0800d1d8 	.word	0x0800d1d8

0800b664 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b664:	b580      	push	{r7, lr}
 800b666:	b082      	sub	sp, #8
 800b668:	af00      	add	r7, sp, #0
 800b66a:	4603      	mov	r3, r0
 800b66c:	6039      	str	r1, [r7, #0]
 800b66e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b670:	683b      	ldr	r3, [r7, #0]
 800b672:	221a      	movs	r2, #26
 800b674:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b676:	f000 f843 	bl	800b700 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b67a:	4b02      	ldr	r3, [pc, #8]	; (800b684 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b67c:	4618      	mov	r0, r3
 800b67e:	3708      	adds	r7, #8
 800b680:	46bd      	mov	sp, r7
 800b682:	bd80      	pop	{r7, pc}
 800b684:	200000ec 	.word	0x200000ec

0800b688 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b688:	b580      	push	{r7, lr}
 800b68a:	b082      	sub	sp, #8
 800b68c:	af00      	add	r7, sp, #0
 800b68e:	4603      	mov	r3, r0
 800b690:	6039      	str	r1, [r7, #0]
 800b692:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b694:	79fb      	ldrb	r3, [r7, #7]
 800b696:	2b00      	cmp	r3, #0
 800b698:	d105      	bne.n	800b6a6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b69a:	683a      	ldr	r2, [r7, #0]
 800b69c:	4907      	ldr	r1, [pc, #28]	; (800b6bc <USBD_FS_ConfigStrDescriptor+0x34>)
 800b69e:	4808      	ldr	r0, [pc, #32]	; (800b6c0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b6a0:	f7ff fe52 	bl	800b348 <USBD_GetString>
 800b6a4:	e004      	b.n	800b6b0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b6a6:	683a      	ldr	r2, [r7, #0]
 800b6a8:	4904      	ldr	r1, [pc, #16]	; (800b6bc <USBD_FS_ConfigStrDescriptor+0x34>)
 800b6aa:	4805      	ldr	r0, [pc, #20]	; (800b6c0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b6ac:	f7ff fe4c 	bl	800b348 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b6b0:	4b02      	ldr	r3, [pc, #8]	; (800b6bc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b6b2:	4618      	mov	r0, r3
 800b6b4:	3708      	adds	r7, #8
 800b6b6:	46bd      	mov	sp, r7
 800b6b8:	bd80      	pop	{r7, pc}
 800b6ba:	bf00      	nop
 800b6bc:	20001068 	.word	0x20001068
 800b6c0:	0800d1ec 	.word	0x0800d1ec

0800b6c4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b6c4:	b580      	push	{r7, lr}
 800b6c6:	b082      	sub	sp, #8
 800b6c8:	af00      	add	r7, sp, #0
 800b6ca:	4603      	mov	r3, r0
 800b6cc:	6039      	str	r1, [r7, #0]
 800b6ce:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b6d0:	79fb      	ldrb	r3, [r7, #7]
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d105      	bne.n	800b6e2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b6d6:	683a      	ldr	r2, [r7, #0]
 800b6d8:	4907      	ldr	r1, [pc, #28]	; (800b6f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b6da:	4808      	ldr	r0, [pc, #32]	; (800b6fc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b6dc:	f7ff fe34 	bl	800b348 <USBD_GetString>
 800b6e0:	e004      	b.n	800b6ec <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b6e2:	683a      	ldr	r2, [r7, #0]
 800b6e4:	4904      	ldr	r1, [pc, #16]	; (800b6f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b6e6:	4805      	ldr	r0, [pc, #20]	; (800b6fc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b6e8:	f7ff fe2e 	bl	800b348 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b6ec:	4b02      	ldr	r3, [pc, #8]	; (800b6f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b6ee:	4618      	mov	r0, r3
 800b6f0:	3708      	adds	r7, #8
 800b6f2:	46bd      	mov	sp, r7
 800b6f4:	bd80      	pop	{r7, pc}
 800b6f6:	bf00      	nop
 800b6f8:	20001068 	.word	0x20001068
 800b6fc:	0800d200 	.word	0x0800d200

0800b700 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b700:	b580      	push	{r7, lr}
 800b702:	b084      	sub	sp, #16
 800b704:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b706:	4b0f      	ldr	r3, [pc, #60]	; (800b744 <Get_SerialNum+0x44>)
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b70c:	4b0e      	ldr	r3, [pc, #56]	; (800b748 <Get_SerialNum+0x48>)
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b712:	4b0e      	ldr	r3, [pc, #56]	; (800b74c <Get_SerialNum+0x4c>)
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b718:	68fa      	ldr	r2, [r7, #12]
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	4413      	add	r3, r2
 800b71e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	2b00      	cmp	r3, #0
 800b724:	d009      	beq.n	800b73a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b726:	2208      	movs	r2, #8
 800b728:	4909      	ldr	r1, [pc, #36]	; (800b750 <Get_SerialNum+0x50>)
 800b72a:	68f8      	ldr	r0, [r7, #12]
 800b72c:	f000 f814 	bl	800b758 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b730:	2204      	movs	r2, #4
 800b732:	4908      	ldr	r1, [pc, #32]	; (800b754 <Get_SerialNum+0x54>)
 800b734:	68b8      	ldr	r0, [r7, #8]
 800b736:	f000 f80f 	bl	800b758 <IntToUnicode>
  }
}
 800b73a:	bf00      	nop
 800b73c:	3710      	adds	r7, #16
 800b73e:	46bd      	mov	sp, r7
 800b740:	bd80      	pop	{r7, pc}
 800b742:	bf00      	nop
 800b744:	1fff7a10 	.word	0x1fff7a10
 800b748:	1fff7a14 	.word	0x1fff7a14
 800b74c:	1fff7a18 	.word	0x1fff7a18
 800b750:	200000ee 	.word	0x200000ee
 800b754:	200000fe 	.word	0x200000fe

0800b758 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b758:	b480      	push	{r7}
 800b75a:	b087      	sub	sp, #28
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	60f8      	str	r0, [r7, #12]
 800b760:	60b9      	str	r1, [r7, #8]
 800b762:	4613      	mov	r3, r2
 800b764:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b766:	2300      	movs	r3, #0
 800b768:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b76a:	2300      	movs	r3, #0
 800b76c:	75fb      	strb	r3, [r7, #23]
 800b76e:	e027      	b.n	800b7c0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	0f1b      	lsrs	r3, r3, #28
 800b774:	2b09      	cmp	r3, #9
 800b776:	d80b      	bhi.n	800b790 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	0f1b      	lsrs	r3, r3, #28
 800b77c:	b2da      	uxtb	r2, r3
 800b77e:	7dfb      	ldrb	r3, [r7, #23]
 800b780:	005b      	lsls	r3, r3, #1
 800b782:	4619      	mov	r1, r3
 800b784:	68bb      	ldr	r3, [r7, #8]
 800b786:	440b      	add	r3, r1
 800b788:	3230      	adds	r2, #48	; 0x30
 800b78a:	b2d2      	uxtb	r2, r2
 800b78c:	701a      	strb	r2, [r3, #0]
 800b78e:	e00a      	b.n	800b7a6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	0f1b      	lsrs	r3, r3, #28
 800b794:	b2da      	uxtb	r2, r3
 800b796:	7dfb      	ldrb	r3, [r7, #23]
 800b798:	005b      	lsls	r3, r3, #1
 800b79a:	4619      	mov	r1, r3
 800b79c:	68bb      	ldr	r3, [r7, #8]
 800b79e:	440b      	add	r3, r1
 800b7a0:	3237      	adds	r2, #55	; 0x37
 800b7a2:	b2d2      	uxtb	r2, r2
 800b7a4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	011b      	lsls	r3, r3, #4
 800b7aa:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b7ac:	7dfb      	ldrb	r3, [r7, #23]
 800b7ae:	005b      	lsls	r3, r3, #1
 800b7b0:	3301      	adds	r3, #1
 800b7b2:	68ba      	ldr	r2, [r7, #8]
 800b7b4:	4413      	add	r3, r2
 800b7b6:	2200      	movs	r2, #0
 800b7b8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b7ba:	7dfb      	ldrb	r3, [r7, #23]
 800b7bc:	3301      	adds	r3, #1
 800b7be:	75fb      	strb	r3, [r7, #23]
 800b7c0:	7dfa      	ldrb	r2, [r7, #23]
 800b7c2:	79fb      	ldrb	r3, [r7, #7]
 800b7c4:	429a      	cmp	r2, r3
 800b7c6:	d3d3      	bcc.n	800b770 <IntToUnicode+0x18>
  }
}
 800b7c8:	bf00      	nop
 800b7ca:	bf00      	nop
 800b7cc:	371c      	adds	r7, #28
 800b7ce:	46bd      	mov	sp, r7
 800b7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d4:	4770      	bx	lr
	...

0800b7d8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b7d8:	b580      	push	{r7, lr}
 800b7da:	b08a      	sub	sp, #40	; 0x28
 800b7dc:	af00      	add	r7, sp, #0
 800b7de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b7e0:	f107 0314 	add.w	r3, r7, #20
 800b7e4:	2200      	movs	r2, #0
 800b7e6:	601a      	str	r2, [r3, #0]
 800b7e8:	605a      	str	r2, [r3, #4]
 800b7ea:	609a      	str	r2, [r3, #8]
 800b7ec:	60da      	str	r2, [r3, #12]
 800b7ee:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b7f8:	d13a      	bne.n	800b870 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b7fa:	2300      	movs	r3, #0
 800b7fc:	613b      	str	r3, [r7, #16]
 800b7fe:	4b1e      	ldr	r3, [pc, #120]	; (800b878 <HAL_PCD_MspInit+0xa0>)
 800b800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b802:	4a1d      	ldr	r2, [pc, #116]	; (800b878 <HAL_PCD_MspInit+0xa0>)
 800b804:	f043 0301 	orr.w	r3, r3, #1
 800b808:	6313      	str	r3, [r2, #48]	; 0x30
 800b80a:	4b1b      	ldr	r3, [pc, #108]	; (800b878 <HAL_PCD_MspInit+0xa0>)
 800b80c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b80e:	f003 0301 	and.w	r3, r3, #1
 800b812:	613b      	str	r3, [r7, #16]
 800b814:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800b816:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800b81a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b81c:	2302      	movs	r3, #2
 800b81e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b820:	2300      	movs	r3, #0
 800b822:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b824:	2303      	movs	r3, #3
 800b826:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b828:	230a      	movs	r3, #10
 800b82a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b82c:	f107 0314 	add.w	r3, r7, #20
 800b830:	4619      	mov	r1, r3
 800b832:	4812      	ldr	r0, [pc, #72]	; (800b87c <HAL_PCD_MspInit+0xa4>)
 800b834:	f7f7 fe26 	bl	8003484 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b838:	4b0f      	ldr	r3, [pc, #60]	; (800b878 <HAL_PCD_MspInit+0xa0>)
 800b83a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b83c:	4a0e      	ldr	r2, [pc, #56]	; (800b878 <HAL_PCD_MspInit+0xa0>)
 800b83e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b842:	6353      	str	r3, [r2, #52]	; 0x34
 800b844:	2300      	movs	r3, #0
 800b846:	60fb      	str	r3, [r7, #12]
 800b848:	4b0b      	ldr	r3, [pc, #44]	; (800b878 <HAL_PCD_MspInit+0xa0>)
 800b84a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b84c:	4a0a      	ldr	r2, [pc, #40]	; (800b878 <HAL_PCD_MspInit+0xa0>)
 800b84e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b852:	6453      	str	r3, [r2, #68]	; 0x44
 800b854:	4b08      	ldr	r3, [pc, #32]	; (800b878 <HAL_PCD_MspInit+0xa0>)
 800b856:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b858:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b85c:	60fb      	str	r3, [r7, #12]
 800b85e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b860:	2200      	movs	r2, #0
 800b862:	2100      	movs	r1, #0
 800b864:	2043      	movs	r0, #67	; 0x43
 800b866:	f7f7 f9ac 	bl	8002bc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b86a:	2043      	movs	r0, #67	; 0x43
 800b86c:	f7f7 f9c5 	bl	8002bfa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b870:	bf00      	nop
 800b872:	3728      	adds	r7, #40	; 0x28
 800b874:	46bd      	mov	sp, r7
 800b876:	bd80      	pop	{r7, pc}
 800b878:	40023800 	.word	0x40023800
 800b87c:	40020000 	.word	0x40020000

0800b880 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b880:	b580      	push	{r7, lr}
 800b882:	b082      	sub	sp, #8
 800b884:	af00      	add	r7, sp, #0
 800b886:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800b894:	4619      	mov	r1, r3
 800b896:	4610      	mov	r0, r2
 800b898:	f7fe fbf7 	bl	800a08a <USBD_LL_SetupStage>
}
 800b89c:	bf00      	nop
 800b89e:	3708      	adds	r7, #8
 800b8a0:	46bd      	mov	sp, r7
 800b8a2:	bd80      	pop	{r7, pc}

0800b8a4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b8a4:	b580      	push	{r7, lr}
 800b8a6:	b082      	sub	sp, #8
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	6078      	str	r0, [r7, #4]
 800b8ac:	460b      	mov	r3, r1
 800b8ae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800b8b6:	78fa      	ldrb	r2, [r7, #3]
 800b8b8:	6879      	ldr	r1, [r7, #4]
 800b8ba:	4613      	mov	r3, r2
 800b8bc:	00db      	lsls	r3, r3, #3
 800b8be:	4413      	add	r3, r2
 800b8c0:	009b      	lsls	r3, r3, #2
 800b8c2:	440b      	add	r3, r1
 800b8c4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800b8c8:	681a      	ldr	r2, [r3, #0]
 800b8ca:	78fb      	ldrb	r3, [r7, #3]
 800b8cc:	4619      	mov	r1, r3
 800b8ce:	f7fe fc31 	bl	800a134 <USBD_LL_DataOutStage>
}
 800b8d2:	bf00      	nop
 800b8d4:	3708      	adds	r7, #8
 800b8d6:	46bd      	mov	sp, r7
 800b8d8:	bd80      	pop	{r7, pc}

0800b8da <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b8da:	b580      	push	{r7, lr}
 800b8dc:	b082      	sub	sp, #8
 800b8de:	af00      	add	r7, sp, #0
 800b8e0:	6078      	str	r0, [r7, #4]
 800b8e2:	460b      	mov	r3, r1
 800b8e4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800b8ec:	78fa      	ldrb	r2, [r7, #3]
 800b8ee:	6879      	ldr	r1, [r7, #4]
 800b8f0:	4613      	mov	r3, r2
 800b8f2:	00db      	lsls	r3, r3, #3
 800b8f4:	4413      	add	r3, r2
 800b8f6:	009b      	lsls	r3, r3, #2
 800b8f8:	440b      	add	r3, r1
 800b8fa:	334c      	adds	r3, #76	; 0x4c
 800b8fc:	681a      	ldr	r2, [r3, #0]
 800b8fe:	78fb      	ldrb	r3, [r7, #3]
 800b900:	4619      	mov	r1, r3
 800b902:	f7fe fcca 	bl	800a29a <USBD_LL_DataInStage>
}
 800b906:	bf00      	nop
 800b908:	3708      	adds	r7, #8
 800b90a:	46bd      	mov	sp, r7
 800b90c:	bd80      	pop	{r7, pc}

0800b90e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b90e:	b580      	push	{r7, lr}
 800b910:	b082      	sub	sp, #8
 800b912:	af00      	add	r7, sp, #0
 800b914:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b91c:	4618      	mov	r0, r3
 800b91e:	f7fe fdfe 	bl	800a51e <USBD_LL_SOF>
}
 800b922:	bf00      	nop
 800b924:	3708      	adds	r7, #8
 800b926:	46bd      	mov	sp, r7
 800b928:	bd80      	pop	{r7, pc}

0800b92a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b92a:	b580      	push	{r7, lr}
 800b92c:	b084      	sub	sp, #16
 800b92e:	af00      	add	r7, sp, #0
 800b930:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b932:	2301      	movs	r3, #1
 800b934:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	68db      	ldr	r3, [r3, #12]
 800b93a:	2b02      	cmp	r3, #2
 800b93c:	d001      	beq.n	800b942 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b93e:	f7f5 ffb7 	bl	80018b0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b948:	7bfa      	ldrb	r2, [r7, #15]
 800b94a:	4611      	mov	r1, r2
 800b94c:	4618      	mov	r0, r3
 800b94e:	f7fe fda8 	bl	800a4a2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b958:	4618      	mov	r0, r3
 800b95a:	f7fe fd50 	bl	800a3fe <USBD_LL_Reset>
}
 800b95e:	bf00      	nop
 800b960:	3710      	adds	r7, #16
 800b962:	46bd      	mov	sp, r7
 800b964:	bd80      	pop	{r7, pc}
	...

0800b968 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b968:	b580      	push	{r7, lr}
 800b96a:	b082      	sub	sp, #8
 800b96c:	af00      	add	r7, sp, #0
 800b96e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b976:	4618      	mov	r0, r3
 800b978:	f7fe fda3 	bl	800a4c2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	687a      	ldr	r2, [r7, #4]
 800b988:	6812      	ldr	r2, [r2, #0]
 800b98a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b98e:	f043 0301 	orr.w	r3, r3, #1
 800b992:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	6a1b      	ldr	r3, [r3, #32]
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d005      	beq.n	800b9a8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b99c:	4b04      	ldr	r3, [pc, #16]	; (800b9b0 <HAL_PCD_SuspendCallback+0x48>)
 800b99e:	691b      	ldr	r3, [r3, #16]
 800b9a0:	4a03      	ldr	r2, [pc, #12]	; (800b9b0 <HAL_PCD_SuspendCallback+0x48>)
 800b9a2:	f043 0306 	orr.w	r3, r3, #6
 800b9a6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b9a8:	bf00      	nop
 800b9aa:	3708      	adds	r7, #8
 800b9ac:	46bd      	mov	sp, r7
 800b9ae:	bd80      	pop	{r7, pc}
 800b9b0:	e000ed00 	.word	0xe000ed00

0800b9b4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b9b4:	b580      	push	{r7, lr}
 800b9b6:	b082      	sub	sp, #8
 800b9b8:	af00      	add	r7, sp, #0
 800b9ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b9c2:	4618      	mov	r0, r3
 800b9c4:	f7fe fd93 	bl	800a4ee <USBD_LL_Resume>
}
 800b9c8:	bf00      	nop
 800b9ca:	3708      	adds	r7, #8
 800b9cc:	46bd      	mov	sp, r7
 800b9ce:	bd80      	pop	{r7, pc}

0800b9d0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b9d0:	b580      	push	{r7, lr}
 800b9d2:	b082      	sub	sp, #8
 800b9d4:	af00      	add	r7, sp, #0
 800b9d6:	6078      	str	r0, [r7, #4]
 800b9d8:	460b      	mov	r3, r1
 800b9da:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b9e2:	78fa      	ldrb	r2, [r7, #3]
 800b9e4:	4611      	mov	r1, r2
 800b9e6:	4618      	mov	r0, r3
 800b9e8:	f7fe fdeb 	bl	800a5c2 <USBD_LL_IsoOUTIncomplete>
}
 800b9ec:	bf00      	nop
 800b9ee:	3708      	adds	r7, #8
 800b9f0:	46bd      	mov	sp, r7
 800b9f2:	bd80      	pop	{r7, pc}

0800b9f4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b9f4:	b580      	push	{r7, lr}
 800b9f6:	b082      	sub	sp, #8
 800b9f8:	af00      	add	r7, sp, #0
 800b9fa:	6078      	str	r0, [r7, #4]
 800b9fc:	460b      	mov	r3, r1
 800b9fe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ba06:	78fa      	ldrb	r2, [r7, #3]
 800ba08:	4611      	mov	r1, r2
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	f7fe fda7 	bl	800a55e <USBD_LL_IsoINIncomplete>
}
 800ba10:	bf00      	nop
 800ba12:	3708      	adds	r7, #8
 800ba14:	46bd      	mov	sp, r7
 800ba16:	bd80      	pop	{r7, pc}

0800ba18 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba18:	b580      	push	{r7, lr}
 800ba1a:	b082      	sub	sp, #8
 800ba1c:	af00      	add	r7, sp, #0
 800ba1e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ba26:	4618      	mov	r0, r3
 800ba28:	f7fe fdfd 	bl	800a626 <USBD_LL_DevConnected>
}
 800ba2c:	bf00      	nop
 800ba2e:	3708      	adds	r7, #8
 800ba30:	46bd      	mov	sp, r7
 800ba32:	bd80      	pop	{r7, pc}

0800ba34 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba34:	b580      	push	{r7, lr}
 800ba36:	b082      	sub	sp, #8
 800ba38:	af00      	add	r7, sp, #0
 800ba3a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ba42:	4618      	mov	r0, r3
 800ba44:	f7fe fdfa 	bl	800a63c <USBD_LL_DevDisconnected>
}
 800ba48:	bf00      	nop
 800ba4a:	3708      	adds	r7, #8
 800ba4c:	46bd      	mov	sp, r7
 800ba4e:	bd80      	pop	{r7, pc}

0800ba50 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ba50:	b580      	push	{r7, lr}
 800ba52:	b082      	sub	sp, #8
 800ba54:	af00      	add	r7, sp, #0
 800ba56:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	781b      	ldrb	r3, [r3, #0]
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d13c      	bne.n	800bada <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800ba60:	4a20      	ldr	r2, [pc, #128]	; (800bae4 <USBD_LL_Init+0x94>)
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	4a1e      	ldr	r2, [pc, #120]	; (800bae4 <USBD_LL_Init+0x94>)
 800ba6c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ba70:	4b1c      	ldr	r3, [pc, #112]	; (800bae4 <USBD_LL_Init+0x94>)
 800ba72:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800ba76:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800ba78:	4b1a      	ldr	r3, [pc, #104]	; (800bae4 <USBD_LL_Init+0x94>)
 800ba7a:	2204      	movs	r2, #4
 800ba7c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800ba7e:	4b19      	ldr	r3, [pc, #100]	; (800bae4 <USBD_LL_Init+0x94>)
 800ba80:	2202      	movs	r2, #2
 800ba82:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ba84:	4b17      	ldr	r3, [pc, #92]	; (800bae4 <USBD_LL_Init+0x94>)
 800ba86:	2200      	movs	r2, #0
 800ba88:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ba8a:	4b16      	ldr	r3, [pc, #88]	; (800bae4 <USBD_LL_Init+0x94>)
 800ba8c:	2202      	movs	r2, #2
 800ba8e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ba90:	4b14      	ldr	r3, [pc, #80]	; (800bae4 <USBD_LL_Init+0x94>)
 800ba92:	2200      	movs	r2, #0
 800ba94:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800ba96:	4b13      	ldr	r3, [pc, #76]	; (800bae4 <USBD_LL_Init+0x94>)
 800ba98:	2200      	movs	r2, #0
 800ba9a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800ba9c:	4b11      	ldr	r3, [pc, #68]	; (800bae4 <USBD_LL_Init+0x94>)
 800ba9e:	2200      	movs	r2, #0
 800baa0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800baa2:	4b10      	ldr	r3, [pc, #64]	; (800bae4 <USBD_LL_Init+0x94>)
 800baa4:	2200      	movs	r2, #0
 800baa6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800baa8:	4b0e      	ldr	r3, [pc, #56]	; (800bae4 <USBD_LL_Init+0x94>)
 800baaa:	2200      	movs	r2, #0
 800baac:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800baae:	480d      	ldr	r0, [pc, #52]	; (800bae4 <USBD_LL_Init+0x94>)
 800bab0:	f7f8 fe7d 	bl	80047ae <HAL_PCD_Init>
 800bab4:	4603      	mov	r3, r0
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d001      	beq.n	800babe <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800baba:	f7f5 fef9 	bl	80018b0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800babe:	2180      	movs	r1, #128	; 0x80
 800bac0:	4808      	ldr	r0, [pc, #32]	; (800bae4 <USBD_LL_Init+0x94>)
 800bac2:	f7fa f8bc 	bl	8005c3e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800bac6:	2240      	movs	r2, #64	; 0x40
 800bac8:	2100      	movs	r1, #0
 800baca:	4806      	ldr	r0, [pc, #24]	; (800bae4 <USBD_LL_Init+0x94>)
 800bacc:	f7fa f870 	bl	8005bb0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800bad0:	2280      	movs	r2, #128	; 0x80
 800bad2:	2101      	movs	r1, #1
 800bad4:	4803      	ldr	r0, [pc, #12]	; (800bae4 <USBD_LL_Init+0x94>)
 800bad6:	f7fa f86b 	bl	8005bb0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800bada:	2300      	movs	r3, #0
}
 800badc:	4618      	mov	r0, r3
 800bade:	3708      	adds	r7, #8
 800bae0:	46bd      	mov	sp, r7
 800bae2:	bd80      	pop	{r7, pc}
 800bae4:	20001268 	.word	0x20001268

0800bae8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800bae8:	b580      	push	{r7, lr}
 800baea:	b084      	sub	sp, #16
 800baec:	af00      	add	r7, sp, #0
 800baee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800baf0:	2300      	movs	r3, #0
 800baf2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800baf4:	2300      	movs	r3, #0
 800baf6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bafe:	4618      	mov	r0, r3
 800bb00:	f7f8 ff72 	bl	80049e8 <HAL_PCD_Start>
 800bb04:	4603      	mov	r3, r0
 800bb06:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bb08:	7bfb      	ldrb	r3, [r7, #15]
 800bb0a:	4618      	mov	r0, r3
 800bb0c:	f000 f930 	bl	800bd70 <USBD_Get_USB_Status>
 800bb10:	4603      	mov	r3, r0
 800bb12:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bb14:	7bbb      	ldrb	r3, [r7, #14]
}
 800bb16:	4618      	mov	r0, r3
 800bb18:	3710      	adds	r7, #16
 800bb1a:	46bd      	mov	sp, r7
 800bb1c:	bd80      	pop	{r7, pc}

0800bb1e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800bb1e:	b580      	push	{r7, lr}
 800bb20:	b084      	sub	sp, #16
 800bb22:	af00      	add	r7, sp, #0
 800bb24:	6078      	str	r0, [r7, #4]
 800bb26:	4608      	mov	r0, r1
 800bb28:	4611      	mov	r1, r2
 800bb2a:	461a      	mov	r2, r3
 800bb2c:	4603      	mov	r3, r0
 800bb2e:	70fb      	strb	r3, [r7, #3]
 800bb30:	460b      	mov	r3, r1
 800bb32:	70bb      	strb	r3, [r7, #2]
 800bb34:	4613      	mov	r3, r2
 800bb36:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb38:	2300      	movs	r3, #0
 800bb3a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb3c:	2300      	movs	r3, #0
 800bb3e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800bb46:	78bb      	ldrb	r3, [r7, #2]
 800bb48:	883a      	ldrh	r2, [r7, #0]
 800bb4a:	78f9      	ldrb	r1, [r7, #3]
 800bb4c:	f7f9 fc43 	bl	80053d6 <HAL_PCD_EP_Open>
 800bb50:	4603      	mov	r3, r0
 800bb52:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bb54:	7bfb      	ldrb	r3, [r7, #15]
 800bb56:	4618      	mov	r0, r3
 800bb58:	f000 f90a 	bl	800bd70 <USBD_Get_USB_Status>
 800bb5c:	4603      	mov	r3, r0
 800bb5e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bb60:	7bbb      	ldrb	r3, [r7, #14]
}
 800bb62:	4618      	mov	r0, r3
 800bb64:	3710      	adds	r7, #16
 800bb66:	46bd      	mov	sp, r7
 800bb68:	bd80      	pop	{r7, pc}

0800bb6a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bb6a:	b580      	push	{r7, lr}
 800bb6c:	b084      	sub	sp, #16
 800bb6e:	af00      	add	r7, sp, #0
 800bb70:	6078      	str	r0, [r7, #4]
 800bb72:	460b      	mov	r3, r1
 800bb74:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb76:	2300      	movs	r3, #0
 800bb78:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb7a:	2300      	movs	r3, #0
 800bb7c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bb84:	78fa      	ldrb	r2, [r7, #3]
 800bb86:	4611      	mov	r1, r2
 800bb88:	4618      	mov	r0, r3
 800bb8a:	f7f9 fc8c 	bl	80054a6 <HAL_PCD_EP_Close>
 800bb8e:	4603      	mov	r3, r0
 800bb90:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bb92:	7bfb      	ldrb	r3, [r7, #15]
 800bb94:	4618      	mov	r0, r3
 800bb96:	f000 f8eb 	bl	800bd70 <USBD_Get_USB_Status>
 800bb9a:	4603      	mov	r3, r0
 800bb9c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bb9e:	7bbb      	ldrb	r3, [r7, #14]
}
 800bba0:	4618      	mov	r0, r3
 800bba2:	3710      	adds	r7, #16
 800bba4:	46bd      	mov	sp, r7
 800bba6:	bd80      	pop	{r7, pc}

0800bba8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bba8:	b580      	push	{r7, lr}
 800bbaa:	b084      	sub	sp, #16
 800bbac:	af00      	add	r7, sp, #0
 800bbae:	6078      	str	r0, [r7, #4]
 800bbb0:	460b      	mov	r3, r1
 800bbb2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bbb4:	2300      	movs	r3, #0
 800bbb6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bbb8:	2300      	movs	r3, #0
 800bbba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bbc2:	78fa      	ldrb	r2, [r7, #3]
 800bbc4:	4611      	mov	r1, r2
 800bbc6:	4618      	mov	r0, r3
 800bbc8:	f7f9 fd4c 	bl	8005664 <HAL_PCD_EP_SetStall>
 800bbcc:	4603      	mov	r3, r0
 800bbce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bbd0:	7bfb      	ldrb	r3, [r7, #15]
 800bbd2:	4618      	mov	r0, r3
 800bbd4:	f000 f8cc 	bl	800bd70 <USBD_Get_USB_Status>
 800bbd8:	4603      	mov	r3, r0
 800bbda:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bbdc:	7bbb      	ldrb	r3, [r7, #14]
}
 800bbde:	4618      	mov	r0, r3
 800bbe0:	3710      	adds	r7, #16
 800bbe2:	46bd      	mov	sp, r7
 800bbe4:	bd80      	pop	{r7, pc}

0800bbe6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bbe6:	b580      	push	{r7, lr}
 800bbe8:	b084      	sub	sp, #16
 800bbea:	af00      	add	r7, sp, #0
 800bbec:	6078      	str	r0, [r7, #4]
 800bbee:	460b      	mov	r3, r1
 800bbf0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bbf2:	2300      	movs	r3, #0
 800bbf4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bbf6:	2300      	movs	r3, #0
 800bbf8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bc00:	78fa      	ldrb	r2, [r7, #3]
 800bc02:	4611      	mov	r1, r2
 800bc04:	4618      	mov	r0, r3
 800bc06:	f7f9 fd91 	bl	800572c <HAL_PCD_EP_ClrStall>
 800bc0a:	4603      	mov	r3, r0
 800bc0c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bc0e:	7bfb      	ldrb	r3, [r7, #15]
 800bc10:	4618      	mov	r0, r3
 800bc12:	f000 f8ad 	bl	800bd70 <USBD_Get_USB_Status>
 800bc16:	4603      	mov	r3, r0
 800bc18:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bc1a:	7bbb      	ldrb	r3, [r7, #14]
}
 800bc1c:	4618      	mov	r0, r3
 800bc1e:	3710      	adds	r7, #16
 800bc20:	46bd      	mov	sp, r7
 800bc22:	bd80      	pop	{r7, pc}

0800bc24 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bc24:	b480      	push	{r7}
 800bc26:	b085      	sub	sp, #20
 800bc28:	af00      	add	r7, sp, #0
 800bc2a:	6078      	str	r0, [r7, #4]
 800bc2c:	460b      	mov	r3, r1
 800bc2e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bc36:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800bc38:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	da0b      	bge.n	800bc58 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800bc40:	78fb      	ldrb	r3, [r7, #3]
 800bc42:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bc46:	68f9      	ldr	r1, [r7, #12]
 800bc48:	4613      	mov	r3, r2
 800bc4a:	00db      	lsls	r3, r3, #3
 800bc4c:	4413      	add	r3, r2
 800bc4e:	009b      	lsls	r3, r3, #2
 800bc50:	440b      	add	r3, r1
 800bc52:	333e      	adds	r3, #62	; 0x3e
 800bc54:	781b      	ldrb	r3, [r3, #0]
 800bc56:	e00b      	b.n	800bc70 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800bc58:	78fb      	ldrb	r3, [r7, #3]
 800bc5a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bc5e:	68f9      	ldr	r1, [r7, #12]
 800bc60:	4613      	mov	r3, r2
 800bc62:	00db      	lsls	r3, r3, #3
 800bc64:	4413      	add	r3, r2
 800bc66:	009b      	lsls	r3, r3, #2
 800bc68:	440b      	add	r3, r1
 800bc6a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800bc6e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800bc70:	4618      	mov	r0, r3
 800bc72:	3714      	adds	r7, #20
 800bc74:	46bd      	mov	sp, r7
 800bc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc7a:	4770      	bx	lr

0800bc7c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800bc7c:	b580      	push	{r7, lr}
 800bc7e:	b084      	sub	sp, #16
 800bc80:	af00      	add	r7, sp, #0
 800bc82:	6078      	str	r0, [r7, #4]
 800bc84:	460b      	mov	r3, r1
 800bc86:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc88:	2300      	movs	r3, #0
 800bc8a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc8c:	2300      	movs	r3, #0
 800bc8e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bc96:	78fa      	ldrb	r2, [r7, #3]
 800bc98:	4611      	mov	r1, r2
 800bc9a:	4618      	mov	r0, r3
 800bc9c:	f7f9 fb76 	bl	800538c <HAL_PCD_SetAddress>
 800bca0:	4603      	mov	r3, r0
 800bca2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bca4:	7bfb      	ldrb	r3, [r7, #15]
 800bca6:	4618      	mov	r0, r3
 800bca8:	f000 f862 	bl	800bd70 <USBD_Get_USB_Status>
 800bcac:	4603      	mov	r3, r0
 800bcae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bcb0:	7bbb      	ldrb	r3, [r7, #14]
}
 800bcb2:	4618      	mov	r0, r3
 800bcb4:	3710      	adds	r7, #16
 800bcb6:	46bd      	mov	sp, r7
 800bcb8:	bd80      	pop	{r7, pc}

0800bcba <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bcba:	b580      	push	{r7, lr}
 800bcbc:	b086      	sub	sp, #24
 800bcbe:	af00      	add	r7, sp, #0
 800bcc0:	60f8      	str	r0, [r7, #12]
 800bcc2:	607a      	str	r2, [r7, #4]
 800bcc4:	603b      	str	r3, [r7, #0]
 800bcc6:	460b      	mov	r3, r1
 800bcc8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bcca:	2300      	movs	r3, #0
 800bccc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bcce:	2300      	movs	r3, #0
 800bcd0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800bcd8:	7af9      	ldrb	r1, [r7, #11]
 800bcda:	683b      	ldr	r3, [r7, #0]
 800bcdc:	687a      	ldr	r2, [r7, #4]
 800bcde:	f7f9 fc77 	bl	80055d0 <HAL_PCD_EP_Transmit>
 800bce2:	4603      	mov	r3, r0
 800bce4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bce6:	7dfb      	ldrb	r3, [r7, #23]
 800bce8:	4618      	mov	r0, r3
 800bcea:	f000 f841 	bl	800bd70 <USBD_Get_USB_Status>
 800bcee:	4603      	mov	r3, r0
 800bcf0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bcf2:	7dbb      	ldrb	r3, [r7, #22]
}
 800bcf4:	4618      	mov	r0, r3
 800bcf6:	3718      	adds	r7, #24
 800bcf8:	46bd      	mov	sp, r7
 800bcfa:	bd80      	pop	{r7, pc}

0800bcfc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bcfc:	b580      	push	{r7, lr}
 800bcfe:	b086      	sub	sp, #24
 800bd00:	af00      	add	r7, sp, #0
 800bd02:	60f8      	str	r0, [r7, #12]
 800bd04:	607a      	str	r2, [r7, #4]
 800bd06:	603b      	str	r3, [r7, #0]
 800bd08:	460b      	mov	r3, r1
 800bd0a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd0c:	2300      	movs	r3, #0
 800bd0e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd10:	2300      	movs	r3, #0
 800bd12:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800bd1a:	7af9      	ldrb	r1, [r7, #11]
 800bd1c:	683b      	ldr	r3, [r7, #0]
 800bd1e:	687a      	ldr	r2, [r7, #4]
 800bd20:	f7f9 fc0b 	bl	800553a <HAL_PCD_EP_Receive>
 800bd24:	4603      	mov	r3, r0
 800bd26:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bd28:	7dfb      	ldrb	r3, [r7, #23]
 800bd2a:	4618      	mov	r0, r3
 800bd2c:	f000 f820 	bl	800bd70 <USBD_Get_USB_Status>
 800bd30:	4603      	mov	r3, r0
 800bd32:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bd34:	7dbb      	ldrb	r3, [r7, #22]
}
 800bd36:	4618      	mov	r0, r3
 800bd38:	3718      	adds	r7, #24
 800bd3a:	46bd      	mov	sp, r7
 800bd3c:	bd80      	pop	{r7, pc}
	...

0800bd40 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800bd40:	b480      	push	{r7}
 800bd42:	b083      	sub	sp, #12
 800bd44:	af00      	add	r7, sp, #0
 800bd46:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 800bd48:	4b03      	ldr	r3, [pc, #12]	; (800bd58 <USBD_static_malloc+0x18>)
}
 800bd4a:	4618      	mov	r0, r3
 800bd4c:	370c      	adds	r7, #12
 800bd4e:	46bd      	mov	sp, r7
 800bd50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd54:	4770      	bx	lr
 800bd56:	bf00      	nop
 800bd58:	20001774 	.word	0x20001774

0800bd5c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800bd5c:	b480      	push	{r7}
 800bd5e:	b083      	sub	sp, #12
 800bd60:	af00      	add	r7, sp, #0
 800bd62:	6078      	str	r0, [r7, #4]

}
 800bd64:	bf00      	nop
 800bd66:	370c      	adds	r7, #12
 800bd68:	46bd      	mov	sp, r7
 800bd6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd6e:	4770      	bx	lr

0800bd70 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800bd70:	b480      	push	{r7}
 800bd72:	b085      	sub	sp, #20
 800bd74:	af00      	add	r7, sp, #0
 800bd76:	4603      	mov	r3, r0
 800bd78:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd7a:	2300      	movs	r3, #0
 800bd7c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800bd7e:	79fb      	ldrb	r3, [r7, #7]
 800bd80:	2b03      	cmp	r3, #3
 800bd82:	d817      	bhi.n	800bdb4 <USBD_Get_USB_Status+0x44>
 800bd84:	a201      	add	r2, pc, #4	; (adr r2, 800bd8c <USBD_Get_USB_Status+0x1c>)
 800bd86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd8a:	bf00      	nop
 800bd8c:	0800bd9d 	.word	0x0800bd9d
 800bd90:	0800bda3 	.word	0x0800bda3
 800bd94:	0800bda9 	.word	0x0800bda9
 800bd98:	0800bdaf 	.word	0x0800bdaf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800bd9c:	2300      	movs	r3, #0
 800bd9e:	73fb      	strb	r3, [r7, #15]
    break;
 800bda0:	e00b      	b.n	800bdba <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bda2:	2303      	movs	r3, #3
 800bda4:	73fb      	strb	r3, [r7, #15]
    break;
 800bda6:	e008      	b.n	800bdba <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bda8:	2301      	movs	r3, #1
 800bdaa:	73fb      	strb	r3, [r7, #15]
    break;
 800bdac:	e005      	b.n	800bdba <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bdae:	2303      	movs	r3, #3
 800bdb0:	73fb      	strb	r3, [r7, #15]
    break;
 800bdb2:	e002      	b.n	800bdba <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800bdb4:	2303      	movs	r3, #3
 800bdb6:	73fb      	strb	r3, [r7, #15]
    break;
 800bdb8:	bf00      	nop
  }
  return usb_status;
 800bdba:	7bfb      	ldrb	r3, [r7, #15]
}
 800bdbc:	4618      	mov	r0, r3
 800bdbe:	3714      	adds	r7, #20
 800bdc0:	46bd      	mov	sp, r7
 800bdc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc6:	4770      	bx	lr

0800bdc8 <__errno>:
 800bdc8:	4b01      	ldr	r3, [pc, #4]	; (800bdd0 <__errno+0x8>)
 800bdca:	6818      	ldr	r0, [r3, #0]
 800bdcc:	4770      	bx	lr
 800bdce:	bf00      	nop
 800bdd0:	20000108 	.word	0x20000108

0800bdd4 <__libc_init_array>:
 800bdd4:	b570      	push	{r4, r5, r6, lr}
 800bdd6:	4d0d      	ldr	r5, [pc, #52]	; (800be0c <__libc_init_array+0x38>)
 800bdd8:	4c0d      	ldr	r4, [pc, #52]	; (800be10 <__libc_init_array+0x3c>)
 800bdda:	1b64      	subs	r4, r4, r5
 800bddc:	10a4      	asrs	r4, r4, #2
 800bdde:	2600      	movs	r6, #0
 800bde0:	42a6      	cmp	r6, r4
 800bde2:	d109      	bne.n	800bdf8 <__libc_init_array+0x24>
 800bde4:	4d0b      	ldr	r5, [pc, #44]	; (800be14 <__libc_init_array+0x40>)
 800bde6:	4c0c      	ldr	r4, [pc, #48]	; (800be18 <__libc_init_array+0x44>)
 800bde8:	f001 f816 	bl	800ce18 <_init>
 800bdec:	1b64      	subs	r4, r4, r5
 800bdee:	10a4      	asrs	r4, r4, #2
 800bdf0:	2600      	movs	r6, #0
 800bdf2:	42a6      	cmp	r6, r4
 800bdf4:	d105      	bne.n	800be02 <__libc_init_array+0x2e>
 800bdf6:	bd70      	pop	{r4, r5, r6, pc}
 800bdf8:	f855 3b04 	ldr.w	r3, [r5], #4
 800bdfc:	4798      	blx	r3
 800bdfe:	3601      	adds	r6, #1
 800be00:	e7ee      	b.n	800bde0 <__libc_init_array+0xc>
 800be02:	f855 3b04 	ldr.w	r3, [r5], #4
 800be06:	4798      	blx	r3
 800be08:	3601      	adds	r6, #1
 800be0a:	e7f2      	b.n	800bdf2 <__libc_init_array+0x1e>
 800be0c:	0800d358 	.word	0x0800d358
 800be10:	0800d358 	.word	0x0800d358
 800be14:	0800d358 	.word	0x0800d358
 800be18:	0800d35c 	.word	0x0800d35c

0800be1c <memset>:
 800be1c:	4402      	add	r2, r0
 800be1e:	4603      	mov	r3, r0
 800be20:	4293      	cmp	r3, r2
 800be22:	d100      	bne.n	800be26 <memset+0xa>
 800be24:	4770      	bx	lr
 800be26:	f803 1b01 	strb.w	r1, [r3], #1
 800be2a:	e7f9      	b.n	800be20 <memset+0x4>

0800be2c <__sfputc_r>:
 800be2c:	6893      	ldr	r3, [r2, #8]
 800be2e:	3b01      	subs	r3, #1
 800be30:	2b00      	cmp	r3, #0
 800be32:	b410      	push	{r4}
 800be34:	6093      	str	r3, [r2, #8]
 800be36:	da08      	bge.n	800be4a <__sfputc_r+0x1e>
 800be38:	6994      	ldr	r4, [r2, #24]
 800be3a:	42a3      	cmp	r3, r4
 800be3c:	db01      	blt.n	800be42 <__sfputc_r+0x16>
 800be3e:	290a      	cmp	r1, #10
 800be40:	d103      	bne.n	800be4a <__sfputc_r+0x1e>
 800be42:	f85d 4b04 	ldr.w	r4, [sp], #4
 800be46:	f000 bb17 	b.w	800c478 <__swbuf_r>
 800be4a:	6813      	ldr	r3, [r2, #0]
 800be4c:	1c58      	adds	r0, r3, #1
 800be4e:	6010      	str	r0, [r2, #0]
 800be50:	7019      	strb	r1, [r3, #0]
 800be52:	4608      	mov	r0, r1
 800be54:	f85d 4b04 	ldr.w	r4, [sp], #4
 800be58:	4770      	bx	lr

0800be5a <__sfputs_r>:
 800be5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be5c:	4606      	mov	r6, r0
 800be5e:	460f      	mov	r7, r1
 800be60:	4614      	mov	r4, r2
 800be62:	18d5      	adds	r5, r2, r3
 800be64:	42ac      	cmp	r4, r5
 800be66:	d101      	bne.n	800be6c <__sfputs_r+0x12>
 800be68:	2000      	movs	r0, #0
 800be6a:	e007      	b.n	800be7c <__sfputs_r+0x22>
 800be6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be70:	463a      	mov	r2, r7
 800be72:	4630      	mov	r0, r6
 800be74:	f7ff ffda 	bl	800be2c <__sfputc_r>
 800be78:	1c43      	adds	r3, r0, #1
 800be7a:	d1f3      	bne.n	800be64 <__sfputs_r+0xa>
 800be7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800be80 <_vfiprintf_r>:
 800be80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be84:	460d      	mov	r5, r1
 800be86:	b09d      	sub	sp, #116	; 0x74
 800be88:	4614      	mov	r4, r2
 800be8a:	4698      	mov	r8, r3
 800be8c:	4606      	mov	r6, r0
 800be8e:	b118      	cbz	r0, 800be98 <_vfiprintf_r+0x18>
 800be90:	6983      	ldr	r3, [r0, #24]
 800be92:	b90b      	cbnz	r3, 800be98 <_vfiprintf_r+0x18>
 800be94:	f000 fcca 	bl	800c82c <__sinit>
 800be98:	4b89      	ldr	r3, [pc, #548]	; (800c0c0 <_vfiprintf_r+0x240>)
 800be9a:	429d      	cmp	r5, r3
 800be9c:	d11b      	bne.n	800bed6 <_vfiprintf_r+0x56>
 800be9e:	6875      	ldr	r5, [r6, #4]
 800bea0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bea2:	07d9      	lsls	r1, r3, #31
 800bea4:	d405      	bmi.n	800beb2 <_vfiprintf_r+0x32>
 800bea6:	89ab      	ldrh	r3, [r5, #12]
 800bea8:	059a      	lsls	r2, r3, #22
 800beaa:	d402      	bmi.n	800beb2 <_vfiprintf_r+0x32>
 800beac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800beae:	f000 fd5b 	bl	800c968 <__retarget_lock_acquire_recursive>
 800beb2:	89ab      	ldrh	r3, [r5, #12]
 800beb4:	071b      	lsls	r3, r3, #28
 800beb6:	d501      	bpl.n	800bebc <_vfiprintf_r+0x3c>
 800beb8:	692b      	ldr	r3, [r5, #16]
 800beba:	b9eb      	cbnz	r3, 800bef8 <_vfiprintf_r+0x78>
 800bebc:	4629      	mov	r1, r5
 800bebe:	4630      	mov	r0, r6
 800bec0:	f000 fb2c 	bl	800c51c <__swsetup_r>
 800bec4:	b1c0      	cbz	r0, 800bef8 <_vfiprintf_r+0x78>
 800bec6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bec8:	07dc      	lsls	r4, r3, #31
 800beca:	d50e      	bpl.n	800beea <_vfiprintf_r+0x6a>
 800becc:	f04f 30ff 	mov.w	r0, #4294967295
 800bed0:	b01d      	add	sp, #116	; 0x74
 800bed2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bed6:	4b7b      	ldr	r3, [pc, #492]	; (800c0c4 <_vfiprintf_r+0x244>)
 800bed8:	429d      	cmp	r5, r3
 800beda:	d101      	bne.n	800bee0 <_vfiprintf_r+0x60>
 800bedc:	68b5      	ldr	r5, [r6, #8]
 800bede:	e7df      	b.n	800bea0 <_vfiprintf_r+0x20>
 800bee0:	4b79      	ldr	r3, [pc, #484]	; (800c0c8 <_vfiprintf_r+0x248>)
 800bee2:	429d      	cmp	r5, r3
 800bee4:	bf08      	it	eq
 800bee6:	68f5      	ldreq	r5, [r6, #12]
 800bee8:	e7da      	b.n	800bea0 <_vfiprintf_r+0x20>
 800beea:	89ab      	ldrh	r3, [r5, #12]
 800beec:	0598      	lsls	r0, r3, #22
 800beee:	d4ed      	bmi.n	800becc <_vfiprintf_r+0x4c>
 800bef0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bef2:	f000 fd3a 	bl	800c96a <__retarget_lock_release_recursive>
 800bef6:	e7e9      	b.n	800becc <_vfiprintf_r+0x4c>
 800bef8:	2300      	movs	r3, #0
 800befa:	9309      	str	r3, [sp, #36]	; 0x24
 800befc:	2320      	movs	r3, #32
 800befe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bf02:	f8cd 800c 	str.w	r8, [sp, #12]
 800bf06:	2330      	movs	r3, #48	; 0x30
 800bf08:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c0cc <_vfiprintf_r+0x24c>
 800bf0c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bf10:	f04f 0901 	mov.w	r9, #1
 800bf14:	4623      	mov	r3, r4
 800bf16:	469a      	mov	sl, r3
 800bf18:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bf1c:	b10a      	cbz	r2, 800bf22 <_vfiprintf_r+0xa2>
 800bf1e:	2a25      	cmp	r2, #37	; 0x25
 800bf20:	d1f9      	bne.n	800bf16 <_vfiprintf_r+0x96>
 800bf22:	ebba 0b04 	subs.w	fp, sl, r4
 800bf26:	d00b      	beq.n	800bf40 <_vfiprintf_r+0xc0>
 800bf28:	465b      	mov	r3, fp
 800bf2a:	4622      	mov	r2, r4
 800bf2c:	4629      	mov	r1, r5
 800bf2e:	4630      	mov	r0, r6
 800bf30:	f7ff ff93 	bl	800be5a <__sfputs_r>
 800bf34:	3001      	adds	r0, #1
 800bf36:	f000 80aa 	beq.w	800c08e <_vfiprintf_r+0x20e>
 800bf3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bf3c:	445a      	add	r2, fp
 800bf3e:	9209      	str	r2, [sp, #36]	; 0x24
 800bf40:	f89a 3000 	ldrb.w	r3, [sl]
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	f000 80a2 	beq.w	800c08e <_vfiprintf_r+0x20e>
 800bf4a:	2300      	movs	r3, #0
 800bf4c:	f04f 32ff 	mov.w	r2, #4294967295
 800bf50:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bf54:	f10a 0a01 	add.w	sl, sl, #1
 800bf58:	9304      	str	r3, [sp, #16]
 800bf5a:	9307      	str	r3, [sp, #28]
 800bf5c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bf60:	931a      	str	r3, [sp, #104]	; 0x68
 800bf62:	4654      	mov	r4, sl
 800bf64:	2205      	movs	r2, #5
 800bf66:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf6a:	4858      	ldr	r0, [pc, #352]	; (800c0cc <_vfiprintf_r+0x24c>)
 800bf6c:	f7f4 f938 	bl	80001e0 <memchr>
 800bf70:	9a04      	ldr	r2, [sp, #16]
 800bf72:	b9d8      	cbnz	r0, 800bfac <_vfiprintf_r+0x12c>
 800bf74:	06d1      	lsls	r1, r2, #27
 800bf76:	bf44      	itt	mi
 800bf78:	2320      	movmi	r3, #32
 800bf7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bf7e:	0713      	lsls	r3, r2, #28
 800bf80:	bf44      	itt	mi
 800bf82:	232b      	movmi	r3, #43	; 0x2b
 800bf84:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bf88:	f89a 3000 	ldrb.w	r3, [sl]
 800bf8c:	2b2a      	cmp	r3, #42	; 0x2a
 800bf8e:	d015      	beq.n	800bfbc <_vfiprintf_r+0x13c>
 800bf90:	9a07      	ldr	r2, [sp, #28]
 800bf92:	4654      	mov	r4, sl
 800bf94:	2000      	movs	r0, #0
 800bf96:	f04f 0c0a 	mov.w	ip, #10
 800bf9a:	4621      	mov	r1, r4
 800bf9c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bfa0:	3b30      	subs	r3, #48	; 0x30
 800bfa2:	2b09      	cmp	r3, #9
 800bfa4:	d94e      	bls.n	800c044 <_vfiprintf_r+0x1c4>
 800bfa6:	b1b0      	cbz	r0, 800bfd6 <_vfiprintf_r+0x156>
 800bfa8:	9207      	str	r2, [sp, #28]
 800bfaa:	e014      	b.n	800bfd6 <_vfiprintf_r+0x156>
 800bfac:	eba0 0308 	sub.w	r3, r0, r8
 800bfb0:	fa09 f303 	lsl.w	r3, r9, r3
 800bfb4:	4313      	orrs	r3, r2
 800bfb6:	9304      	str	r3, [sp, #16]
 800bfb8:	46a2      	mov	sl, r4
 800bfba:	e7d2      	b.n	800bf62 <_vfiprintf_r+0xe2>
 800bfbc:	9b03      	ldr	r3, [sp, #12]
 800bfbe:	1d19      	adds	r1, r3, #4
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	9103      	str	r1, [sp, #12]
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	bfbb      	ittet	lt
 800bfc8:	425b      	neglt	r3, r3
 800bfca:	f042 0202 	orrlt.w	r2, r2, #2
 800bfce:	9307      	strge	r3, [sp, #28]
 800bfd0:	9307      	strlt	r3, [sp, #28]
 800bfd2:	bfb8      	it	lt
 800bfd4:	9204      	strlt	r2, [sp, #16]
 800bfd6:	7823      	ldrb	r3, [r4, #0]
 800bfd8:	2b2e      	cmp	r3, #46	; 0x2e
 800bfda:	d10c      	bne.n	800bff6 <_vfiprintf_r+0x176>
 800bfdc:	7863      	ldrb	r3, [r4, #1]
 800bfde:	2b2a      	cmp	r3, #42	; 0x2a
 800bfe0:	d135      	bne.n	800c04e <_vfiprintf_r+0x1ce>
 800bfe2:	9b03      	ldr	r3, [sp, #12]
 800bfe4:	1d1a      	adds	r2, r3, #4
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	9203      	str	r2, [sp, #12]
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	bfb8      	it	lt
 800bfee:	f04f 33ff 	movlt.w	r3, #4294967295
 800bff2:	3402      	adds	r4, #2
 800bff4:	9305      	str	r3, [sp, #20]
 800bff6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c0dc <_vfiprintf_r+0x25c>
 800bffa:	7821      	ldrb	r1, [r4, #0]
 800bffc:	2203      	movs	r2, #3
 800bffe:	4650      	mov	r0, sl
 800c000:	f7f4 f8ee 	bl	80001e0 <memchr>
 800c004:	b140      	cbz	r0, 800c018 <_vfiprintf_r+0x198>
 800c006:	2340      	movs	r3, #64	; 0x40
 800c008:	eba0 000a 	sub.w	r0, r0, sl
 800c00c:	fa03 f000 	lsl.w	r0, r3, r0
 800c010:	9b04      	ldr	r3, [sp, #16]
 800c012:	4303      	orrs	r3, r0
 800c014:	3401      	adds	r4, #1
 800c016:	9304      	str	r3, [sp, #16]
 800c018:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c01c:	482c      	ldr	r0, [pc, #176]	; (800c0d0 <_vfiprintf_r+0x250>)
 800c01e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c022:	2206      	movs	r2, #6
 800c024:	f7f4 f8dc 	bl	80001e0 <memchr>
 800c028:	2800      	cmp	r0, #0
 800c02a:	d03f      	beq.n	800c0ac <_vfiprintf_r+0x22c>
 800c02c:	4b29      	ldr	r3, [pc, #164]	; (800c0d4 <_vfiprintf_r+0x254>)
 800c02e:	bb1b      	cbnz	r3, 800c078 <_vfiprintf_r+0x1f8>
 800c030:	9b03      	ldr	r3, [sp, #12]
 800c032:	3307      	adds	r3, #7
 800c034:	f023 0307 	bic.w	r3, r3, #7
 800c038:	3308      	adds	r3, #8
 800c03a:	9303      	str	r3, [sp, #12]
 800c03c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c03e:	443b      	add	r3, r7
 800c040:	9309      	str	r3, [sp, #36]	; 0x24
 800c042:	e767      	b.n	800bf14 <_vfiprintf_r+0x94>
 800c044:	fb0c 3202 	mla	r2, ip, r2, r3
 800c048:	460c      	mov	r4, r1
 800c04a:	2001      	movs	r0, #1
 800c04c:	e7a5      	b.n	800bf9a <_vfiprintf_r+0x11a>
 800c04e:	2300      	movs	r3, #0
 800c050:	3401      	adds	r4, #1
 800c052:	9305      	str	r3, [sp, #20]
 800c054:	4619      	mov	r1, r3
 800c056:	f04f 0c0a 	mov.w	ip, #10
 800c05a:	4620      	mov	r0, r4
 800c05c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c060:	3a30      	subs	r2, #48	; 0x30
 800c062:	2a09      	cmp	r2, #9
 800c064:	d903      	bls.n	800c06e <_vfiprintf_r+0x1ee>
 800c066:	2b00      	cmp	r3, #0
 800c068:	d0c5      	beq.n	800bff6 <_vfiprintf_r+0x176>
 800c06a:	9105      	str	r1, [sp, #20]
 800c06c:	e7c3      	b.n	800bff6 <_vfiprintf_r+0x176>
 800c06e:	fb0c 2101 	mla	r1, ip, r1, r2
 800c072:	4604      	mov	r4, r0
 800c074:	2301      	movs	r3, #1
 800c076:	e7f0      	b.n	800c05a <_vfiprintf_r+0x1da>
 800c078:	ab03      	add	r3, sp, #12
 800c07a:	9300      	str	r3, [sp, #0]
 800c07c:	462a      	mov	r2, r5
 800c07e:	4b16      	ldr	r3, [pc, #88]	; (800c0d8 <_vfiprintf_r+0x258>)
 800c080:	a904      	add	r1, sp, #16
 800c082:	4630      	mov	r0, r6
 800c084:	f3af 8000 	nop.w
 800c088:	4607      	mov	r7, r0
 800c08a:	1c78      	adds	r0, r7, #1
 800c08c:	d1d6      	bne.n	800c03c <_vfiprintf_r+0x1bc>
 800c08e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c090:	07d9      	lsls	r1, r3, #31
 800c092:	d405      	bmi.n	800c0a0 <_vfiprintf_r+0x220>
 800c094:	89ab      	ldrh	r3, [r5, #12]
 800c096:	059a      	lsls	r2, r3, #22
 800c098:	d402      	bmi.n	800c0a0 <_vfiprintf_r+0x220>
 800c09a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c09c:	f000 fc65 	bl	800c96a <__retarget_lock_release_recursive>
 800c0a0:	89ab      	ldrh	r3, [r5, #12]
 800c0a2:	065b      	lsls	r3, r3, #25
 800c0a4:	f53f af12 	bmi.w	800becc <_vfiprintf_r+0x4c>
 800c0a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c0aa:	e711      	b.n	800bed0 <_vfiprintf_r+0x50>
 800c0ac:	ab03      	add	r3, sp, #12
 800c0ae:	9300      	str	r3, [sp, #0]
 800c0b0:	462a      	mov	r2, r5
 800c0b2:	4b09      	ldr	r3, [pc, #36]	; (800c0d8 <_vfiprintf_r+0x258>)
 800c0b4:	a904      	add	r1, sp, #16
 800c0b6:	4630      	mov	r0, r6
 800c0b8:	f000 f88a 	bl	800c1d0 <_printf_i>
 800c0bc:	e7e4      	b.n	800c088 <_vfiprintf_r+0x208>
 800c0be:	bf00      	nop
 800c0c0:	0800d310 	.word	0x0800d310
 800c0c4:	0800d330 	.word	0x0800d330
 800c0c8:	0800d2f0 	.word	0x0800d2f0
 800c0cc:	0800d2bc 	.word	0x0800d2bc
 800c0d0:	0800d2c6 	.word	0x0800d2c6
 800c0d4:	00000000 	.word	0x00000000
 800c0d8:	0800be5b 	.word	0x0800be5b
 800c0dc:	0800d2c2 	.word	0x0800d2c2

0800c0e0 <vfiprintf>:
 800c0e0:	4613      	mov	r3, r2
 800c0e2:	460a      	mov	r2, r1
 800c0e4:	4601      	mov	r1, r0
 800c0e6:	4802      	ldr	r0, [pc, #8]	; (800c0f0 <vfiprintf+0x10>)
 800c0e8:	6800      	ldr	r0, [r0, #0]
 800c0ea:	f7ff bec9 	b.w	800be80 <_vfiprintf_r>
 800c0ee:	bf00      	nop
 800c0f0:	20000108 	.word	0x20000108

0800c0f4 <_printf_common>:
 800c0f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c0f8:	4616      	mov	r6, r2
 800c0fa:	4699      	mov	r9, r3
 800c0fc:	688a      	ldr	r2, [r1, #8]
 800c0fe:	690b      	ldr	r3, [r1, #16]
 800c100:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c104:	4293      	cmp	r3, r2
 800c106:	bfb8      	it	lt
 800c108:	4613      	movlt	r3, r2
 800c10a:	6033      	str	r3, [r6, #0]
 800c10c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c110:	4607      	mov	r7, r0
 800c112:	460c      	mov	r4, r1
 800c114:	b10a      	cbz	r2, 800c11a <_printf_common+0x26>
 800c116:	3301      	adds	r3, #1
 800c118:	6033      	str	r3, [r6, #0]
 800c11a:	6823      	ldr	r3, [r4, #0]
 800c11c:	0699      	lsls	r1, r3, #26
 800c11e:	bf42      	ittt	mi
 800c120:	6833      	ldrmi	r3, [r6, #0]
 800c122:	3302      	addmi	r3, #2
 800c124:	6033      	strmi	r3, [r6, #0]
 800c126:	6825      	ldr	r5, [r4, #0]
 800c128:	f015 0506 	ands.w	r5, r5, #6
 800c12c:	d106      	bne.n	800c13c <_printf_common+0x48>
 800c12e:	f104 0a19 	add.w	sl, r4, #25
 800c132:	68e3      	ldr	r3, [r4, #12]
 800c134:	6832      	ldr	r2, [r6, #0]
 800c136:	1a9b      	subs	r3, r3, r2
 800c138:	42ab      	cmp	r3, r5
 800c13a:	dc26      	bgt.n	800c18a <_printf_common+0x96>
 800c13c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c140:	1e13      	subs	r3, r2, #0
 800c142:	6822      	ldr	r2, [r4, #0]
 800c144:	bf18      	it	ne
 800c146:	2301      	movne	r3, #1
 800c148:	0692      	lsls	r2, r2, #26
 800c14a:	d42b      	bmi.n	800c1a4 <_printf_common+0xb0>
 800c14c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c150:	4649      	mov	r1, r9
 800c152:	4638      	mov	r0, r7
 800c154:	47c0      	blx	r8
 800c156:	3001      	adds	r0, #1
 800c158:	d01e      	beq.n	800c198 <_printf_common+0xa4>
 800c15a:	6823      	ldr	r3, [r4, #0]
 800c15c:	68e5      	ldr	r5, [r4, #12]
 800c15e:	6832      	ldr	r2, [r6, #0]
 800c160:	f003 0306 	and.w	r3, r3, #6
 800c164:	2b04      	cmp	r3, #4
 800c166:	bf08      	it	eq
 800c168:	1aad      	subeq	r5, r5, r2
 800c16a:	68a3      	ldr	r3, [r4, #8]
 800c16c:	6922      	ldr	r2, [r4, #16]
 800c16e:	bf0c      	ite	eq
 800c170:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c174:	2500      	movne	r5, #0
 800c176:	4293      	cmp	r3, r2
 800c178:	bfc4      	itt	gt
 800c17a:	1a9b      	subgt	r3, r3, r2
 800c17c:	18ed      	addgt	r5, r5, r3
 800c17e:	2600      	movs	r6, #0
 800c180:	341a      	adds	r4, #26
 800c182:	42b5      	cmp	r5, r6
 800c184:	d11a      	bne.n	800c1bc <_printf_common+0xc8>
 800c186:	2000      	movs	r0, #0
 800c188:	e008      	b.n	800c19c <_printf_common+0xa8>
 800c18a:	2301      	movs	r3, #1
 800c18c:	4652      	mov	r2, sl
 800c18e:	4649      	mov	r1, r9
 800c190:	4638      	mov	r0, r7
 800c192:	47c0      	blx	r8
 800c194:	3001      	adds	r0, #1
 800c196:	d103      	bne.n	800c1a0 <_printf_common+0xac>
 800c198:	f04f 30ff 	mov.w	r0, #4294967295
 800c19c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1a0:	3501      	adds	r5, #1
 800c1a2:	e7c6      	b.n	800c132 <_printf_common+0x3e>
 800c1a4:	18e1      	adds	r1, r4, r3
 800c1a6:	1c5a      	adds	r2, r3, #1
 800c1a8:	2030      	movs	r0, #48	; 0x30
 800c1aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c1ae:	4422      	add	r2, r4
 800c1b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c1b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c1b8:	3302      	adds	r3, #2
 800c1ba:	e7c7      	b.n	800c14c <_printf_common+0x58>
 800c1bc:	2301      	movs	r3, #1
 800c1be:	4622      	mov	r2, r4
 800c1c0:	4649      	mov	r1, r9
 800c1c2:	4638      	mov	r0, r7
 800c1c4:	47c0      	blx	r8
 800c1c6:	3001      	adds	r0, #1
 800c1c8:	d0e6      	beq.n	800c198 <_printf_common+0xa4>
 800c1ca:	3601      	adds	r6, #1
 800c1cc:	e7d9      	b.n	800c182 <_printf_common+0x8e>
	...

0800c1d0 <_printf_i>:
 800c1d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c1d4:	7e0f      	ldrb	r7, [r1, #24]
 800c1d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c1d8:	2f78      	cmp	r7, #120	; 0x78
 800c1da:	4691      	mov	r9, r2
 800c1dc:	4680      	mov	r8, r0
 800c1de:	460c      	mov	r4, r1
 800c1e0:	469a      	mov	sl, r3
 800c1e2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c1e6:	d807      	bhi.n	800c1f8 <_printf_i+0x28>
 800c1e8:	2f62      	cmp	r7, #98	; 0x62
 800c1ea:	d80a      	bhi.n	800c202 <_printf_i+0x32>
 800c1ec:	2f00      	cmp	r7, #0
 800c1ee:	f000 80d8 	beq.w	800c3a2 <_printf_i+0x1d2>
 800c1f2:	2f58      	cmp	r7, #88	; 0x58
 800c1f4:	f000 80a3 	beq.w	800c33e <_printf_i+0x16e>
 800c1f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c1fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c200:	e03a      	b.n	800c278 <_printf_i+0xa8>
 800c202:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c206:	2b15      	cmp	r3, #21
 800c208:	d8f6      	bhi.n	800c1f8 <_printf_i+0x28>
 800c20a:	a101      	add	r1, pc, #4	; (adr r1, 800c210 <_printf_i+0x40>)
 800c20c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c210:	0800c269 	.word	0x0800c269
 800c214:	0800c27d 	.word	0x0800c27d
 800c218:	0800c1f9 	.word	0x0800c1f9
 800c21c:	0800c1f9 	.word	0x0800c1f9
 800c220:	0800c1f9 	.word	0x0800c1f9
 800c224:	0800c1f9 	.word	0x0800c1f9
 800c228:	0800c27d 	.word	0x0800c27d
 800c22c:	0800c1f9 	.word	0x0800c1f9
 800c230:	0800c1f9 	.word	0x0800c1f9
 800c234:	0800c1f9 	.word	0x0800c1f9
 800c238:	0800c1f9 	.word	0x0800c1f9
 800c23c:	0800c389 	.word	0x0800c389
 800c240:	0800c2ad 	.word	0x0800c2ad
 800c244:	0800c36b 	.word	0x0800c36b
 800c248:	0800c1f9 	.word	0x0800c1f9
 800c24c:	0800c1f9 	.word	0x0800c1f9
 800c250:	0800c3ab 	.word	0x0800c3ab
 800c254:	0800c1f9 	.word	0x0800c1f9
 800c258:	0800c2ad 	.word	0x0800c2ad
 800c25c:	0800c1f9 	.word	0x0800c1f9
 800c260:	0800c1f9 	.word	0x0800c1f9
 800c264:	0800c373 	.word	0x0800c373
 800c268:	682b      	ldr	r3, [r5, #0]
 800c26a:	1d1a      	adds	r2, r3, #4
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	602a      	str	r2, [r5, #0]
 800c270:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c274:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c278:	2301      	movs	r3, #1
 800c27a:	e0a3      	b.n	800c3c4 <_printf_i+0x1f4>
 800c27c:	6820      	ldr	r0, [r4, #0]
 800c27e:	6829      	ldr	r1, [r5, #0]
 800c280:	0606      	lsls	r6, r0, #24
 800c282:	f101 0304 	add.w	r3, r1, #4
 800c286:	d50a      	bpl.n	800c29e <_printf_i+0xce>
 800c288:	680e      	ldr	r6, [r1, #0]
 800c28a:	602b      	str	r3, [r5, #0]
 800c28c:	2e00      	cmp	r6, #0
 800c28e:	da03      	bge.n	800c298 <_printf_i+0xc8>
 800c290:	232d      	movs	r3, #45	; 0x2d
 800c292:	4276      	negs	r6, r6
 800c294:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c298:	485e      	ldr	r0, [pc, #376]	; (800c414 <_printf_i+0x244>)
 800c29a:	230a      	movs	r3, #10
 800c29c:	e019      	b.n	800c2d2 <_printf_i+0x102>
 800c29e:	680e      	ldr	r6, [r1, #0]
 800c2a0:	602b      	str	r3, [r5, #0]
 800c2a2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c2a6:	bf18      	it	ne
 800c2a8:	b236      	sxthne	r6, r6
 800c2aa:	e7ef      	b.n	800c28c <_printf_i+0xbc>
 800c2ac:	682b      	ldr	r3, [r5, #0]
 800c2ae:	6820      	ldr	r0, [r4, #0]
 800c2b0:	1d19      	adds	r1, r3, #4
 800c2b2:	6029      	str	r1, [r5, #0]
 800c2b4:	0601      	lsls	r1, r0, #24
 800c2b6:	d501      	bpl.n	800c2bc <_printf_i+0xec>
 800c2b8:	681e      	ldr	r6, [r3, #0]
 800c2ba:	e002      	b.n	800c2c2 <_printf_i+0xf2>
 800c2bc:	0646      	lsls	r6, r0, #25
 800c2be:	d5fb      	bpl.n	800c2b8 <_printf_i+0xe8>
 800c2c0:	881e      	ldrh	r6, [r3, #0]
 800c2c2:	4854      	ldr	r0, [pc, #336]	; (800c414 <_printf_i+0x244>)
 800c2c4:	2f6f      	cmp	r7, #111	; 0x6f
 800c2c6:	bf0c      	ite	eq
 800c2c8:	2308      	moveq	r3, #8
 800c2ca:	230a      	movne	r3, #10
 800c2cc:	2100      	movs	r1, #0
 800c2ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c2d2:	6865      	ldr	r5, [r4, #4]
 800c2d4:	60a5      	str	r5, [r4, #8]
 800c2d6:	2d00      	cmp	r5, #0
 800c2d8:	bfa2      	ittt	ge
 800c2da:	6821      	ldrge	r1, [r4, #0]
 800c2dc:	f021 0104 	bicge.w	r1, r1, #4
 800c2e0:	6021      	strge	r1, [r4, #0]
 800c2e2:	b90e      	cbnz	r6, 800c2e8 <_printf_i+0x118>
 800c2e4:	2d00      	cmp	r5, #0
 800c2e6:	d04d      	beq.n	800c384 <_printf_i+0x1b4>
 800c2e8:	4615      	mov	r5, r2
 800c2ea:	fbb6 f1f3 	udiv	r1, r6, r3
 800c2ee:	fb03 6711 	mls	r7, r3, r1, r6
 800c2f2:	5dc7      	ldrb	r7, [r0, r7]
 800c2f4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c2f8:	4637      	mov	r7, r6
 800c2fa:	42bb      	cmp	r3, r7
 800c2fc:	460e      	mov	r6, r1
 800c2fe:	d9f4      	bls.n	800c2ea <_printf_i+0x11a>
 800c300:	2b08      	cmp	r3, #8
 800c302:	d10b      	bne.n	800c31c <_printf_i+0x14c>
 800c304:	6823      	ldr	r3, [r4, #0]
 800c306:	07de      	lsls	r6, r3, #31
 800c308:	d508      	bpl.n	800c31c <_printf_i+0x14c>
 800c30a:	6923      	ldr	r3, [r4, #16]
 800c30c:	6861      	ldr	r1, [r4, #4]
 800c30e:	4299      	cmp	r1, r3
 800c310:	bfde      	ittt	le
 800c312:	2330      	movle	r3, #48	; 0x30
 800c314:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c318:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c31c:	1b52      	subs	r2, r2, r5
 800c31e:	6122      	str	r2, [r4, #16]
 800c320:	f8cd a000 	str.w	sl, [sp]
 800c324:	464b      	mov	r3, r9
 800c326:	aa03      	add	r2, sp, #12
 800c328:	4621      	mov	r1, r4
 800c32a:	4640      	mov	r0, r8
 800c32c:	f7ff fee2 	bl	800c0f4 <_printf_common>
 800c330:	3001      	adds	r0, #1
 800c332:	d14c      	bne.n	800c3ce <_printf_i+0x1fe>
 800c334:	f04f 30ff 	mov.w	r0, #4294967295
 800c338:	b004      	add	sp, #16
 800c33a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c33e:	4835      	ldr	r0, [pc, #212]	; (800c414 <_printf_i+0x244>)
 800c340:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c344:	6829      	ldr	r1, [r5, #0]
 800c346:	6823      	ldr	r3, [r4, #0]
 800c348:	f851 6b04 	ldr.w	r6, [r1], #4
 800c34c:	6029      	str	r1, [r5, #0]
 800c34e:	061d      	lsls	r5, r3, #24
 800c350:	d514      	bpl.n	800c37c <_printf_i+0x1ac>
 800c352:	07df      	lsls	r7, r3, #31
 800c354:	bf44      	itt	mi
 800c356:	f043 0320 	orrmi.w	r3, r3, #32
 800c35a:	6023      	strmi	r3, [r4, #0]
 800c35c:	b91e      	cbnz	r6, 800c366 <_printf_i+0x196>
 800c35e:	6823      	ldr	r3, [r4, #0]
 800c360:	f023 0320 	bic.w	r3, r3, #32
 800c364:	6023      	str	r3, [r4, #0]
 800c366:	2310      	movs	r3, #16
 800c368:	e7b0      	b.n	800c2cc <_printf_i+0xfc>
 800c36a:	6823      	ldr	r3, [r4, #0]
 800c36c:	f043 0320 	orr.w	r3, r3, #32
 800c370:	6023      	str	r3, [r4, #0]
 800c372:	2378      	movs	r3, #120	; 0x78
 800c374:	4828      	ldr	r0, [pc, #160]	; (800c418 <_printf_i+0x248>)
 800c376:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c37a:	e7e3      	b.n	800c344 <_printf_i+0x174>
 800c37c:	0659      	lsls	r1, r3, #25
 800c37e:	bf48      	it	mi
 800c380:	b2b6      	uxthmi	r6, r6
 800c382:	e7e6      	b.n	800c352 <_printf_i+0x182>
 800c384:	4615      	mov	r5, r2
 800c386:	e7bb      	b.n	800c300 <_printf_i+0x130>
 800c388:	682b      	ldr	r3, [r5, #0]
 800c38a:	6826      	ldr	r6, [r4, #0]
 800c38c:	6961      	ldr	r1, [r4, #20]
 800c38e:	1d18      	adds	r0, r3, #4
 800c390:	6028      	str	r0, [r5, #0]
 800c392:	0635      	lsls	r5, r6, #24
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	d501      	bpl.n	800c39c <_printf_i+0x1cc>
 800c398:	6019      	str	r1, [r3, #0]
 800c39a:	e002      	b.n	800c3a2 <_printf_i+0x1d2>
 800c39c:	0670      	lsls	r0, r6, #25
 800c39e:	d5fb      	bpl.n	800c398 <_printf_i+0x1c8>
 800c3a0:	8019      	strh	r1, [r3, #0]
 800c3a2:	2300      	movs	r3, #0
 800c3a4:	6123      	str	r3, [r4, #16]
 800c3a6:	4615      	mov	r5, r2
 800c3a8:	e7ba      	b.n	800c320 <_printf_i+0x150>
 800c3aa:	682b      	ldr	r3, [r5, #0]
 800c3ac:	1d1a      	adds	r2, r3, #4
 800c3ae:	602a      	str	r2, [r5, #0]
 800c3b0:	681d      	ldr	r5, [r3, #0]
 800c3b2:	6862      	ldr	r2, [r4, #4]
 800c3b4:	2100      	movs	r1, #0
 800c3b6:	4628      	mov	r0, r5
 800c3b8:	f7f3 ff12 	bl	80001e0 <memchr>
 800c3bc:	b108      	cbz	r0, 800c3c2 <_printf_i+0x1f2>
 800c3be:	1b40      	subs	r0, r0, r5
 800c3c0:	6060      	str	r0, [r4, #4]
 800c3c2:	6863      	ldr	r3, [r4, #4]
 800c3c4:	6123      	str	r3, [r4, #16]
 800c3c6:	2300      	movs	r3, #0
 800c3c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c3cc:	e7a8      	b.n	800c320 <_printf_i+0x150>
 800c3ce:	6923      	ldr	r3, [r4, #16]
 800c3d0:	462a      	mov	r2, r5
 800c3d2:	4649      	mov	r1, r9
 800c3d4:	4640      	mov	r0, r8
 800c3d6:	47d0      	blx	sl
 800c3d8:	3001      	adds	r0, #1
 800c3da:	d0ab      	beq.n	800c334 <_printf_i+0x164>
 800c3dc:	6823      	ldr	r3, [r4, #0]
 800c3de:	079b      	lsls	r3, r3, #30
 800c3e0:	d413      	bmi.n	800c40a <_printf_i+0x23a>
 800c3e2:	68e0      	ldr	r0, [r4, #12]
 800c3e4:	9b03      	ldr	r3, [sp, #12]
 800c3e6:	4298      	cmp	r0, r3
 800c3e8:	bfb8      	it	lt
 800c3ea:	4618      	movlt	r0, r3
 800c3ec:	e7a4      	b.n	800c338 <_printf_i+0x168>
 800c3ee:	2301      	movs	r3, #1
 800c3f0:	4632      	mov	r2, r6
 800c3f2:	4649      	mov	r1, r9
 800c3f4:	4640      	mov	r0, r8
 800c3f6:	47d0      	blx	sl
 800c3f8:	3001      	adds	r0, #1
 800c3fa:	d09b      	beq.n	800c334 <_printf_i+0x164>
 800c3fc:	3501      	adds	r5, #1
 800c3fe:	68e3      	ldr	r3, [r4, #12]
 800c400:	9903      	ldr	r1, [sp, #12]
 800c402:	1a5b      	subs	r3, r3, r1
 800c404:	42ab      	cmp	r3, r5
 800c406:	dcf2      	bgt.n	800c3ee <_printf_i+0x21e>
 800c408:	e7eb      	b.n	800c3e2 <_printf_i+0x212>
 800c40a:	2500      	movs	r5, #0
 800c40c:	f104 0619 	add.w	r6, r4, #25
 800c410:	e7f5      	b.n	800c3fe <_printf_i+0x22e>
 800c412:	bf00      	nop
 800c414:	0800d2cd 	.word	0x0800d2cd
 800c418:	0800d2de 	.word	0x0800d2de

0800c41c <iprintf>:
 800c41c:	b40f      	push	{r0, r1, r2, r3}
 800c41e:	4b0a      	ldr	r3, [pc, #40]	; (800c448 <iprintf+0x2c>)
 800c420:	b513      	push	{r0, r1, r4, lr}
 800c422:	681c      	ldr	r4, [r3, #0]
 800c424:	b124      	cbz	r4, 800c430 <iprintf+0x14>
 800c426:	69a3      	ldr	r3, [r4, #24]
 800c428:	b913      	cbnz	r3, 800c430 <iprintf+0x14>
 800c42a:	4620      	mov	r0, r4
 800c42c:	f000 f9fe 	bl	800c82c <__sinit>
 800c430:	ab05      	add	r3, sp, #20
 800c432:	9a04      	ldr	r2, [sp, #16]
 800c434:	68a1      	ldr	r1, [r4, #8]
 800c436:	9301      	str	r3, [sp, #4]
 800c438:	4620      	mov	r0, r4
 800c43a:	f7ff fd21 	bl	800be80 <_vfiprintf_r>
 800c43e:	b002      	add	sp, #8
 800c440:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c444:	b004      	add	sp, #16
 800c446:	4770      	bx	lr
 800c448:	20000108 	.word	0x20000108

0800c44c <putchar>:
 800c44c:	4b09      	ldr	r3, [pc, #36]	; (800c474 <putchar+0x28>)
 800c44e:	b513      	push	{r0, r1, r4, lr}
 800c450:	681c      	ldr	r4, [r3, #0]
 800c452:	4601      	mov	r1, r0
 800c454:	b134      	cbz	r4, 800c464 <putchar+0x18>
 800c456:	69a3      	ldr	r3, [r4, #24]
 800c458:	b923      	cbnz	r3, 800c464 <putchar+0x18>
 800c45a:	9001      	str	r0, [sp, #4]
 800c45c:	4620      	mov	r0, r4
 800c45e:	f000 f9e5 	bl	800c82c <__sinit>
 800c462:	9901      	ldr	r1, [sp, #4]
 800c464:	68a2      	ldr	r2, [r4, #8]
 800c466:	4620      	mov	r0, r4
 800c468:	b002      	add	sp, #8
 800c46a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c46e:	f000 bbc3 	b.w	800cbf8 <_putc_r>
 800c472:	bf00      	nop
 800c474:	20000108 	.word	0x20000108

0800c478 <__swbuf_r>:
 800c478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c47a:	460e      	mov	r6, r1
 800c47c:	4614      	mov	r4, r2
 800c47e:	4605      	mov	r5, r0
 800c480:	b118      	cbz	r0, 800c48a <__swbuf_r+0x12>
 800c482:	6983      	ldr	r3, [r0, #24]
 800c484:	b90b      	cbnz	r3, 800c48a <__swbuf_r+0x12>
 800c486:	f000 f9d1 	bl	800c82c <__sinit>
 800c48a:	4b21      	ldr	r3, [pc, #132]	; (800c510 <__swbuf_r+0x98>)
 800c48c:	429c      	cmp	r4, r3
 800c48e:	d12b      	bne.n	800c4e8 <__swbuf_r+0x70>
 800c490:	686c      	ldr	r4, [r5, #4]
 800c492:	69a3      	ldr	r3, [r4, #24]
 800c494:	60a3      	str	r3, [r4, #8]
 800c496:	89a3      	ldrh	r3, [r4, #12]
 800c498:	071a      	lsls	r2, r3, #28
 800c49a:	d52f      	bpl.n	800c4fc <__swbuf_r+0x84>
 800c49c:	6923      	ldr	r3, [r4, #16]
 800c49e:	b36b      	cbz	r3, 800c4fc <__swbuf_r+0x84>
 800c4a0:	6923      	ldr	r3, [r4, #16]
 800c4a2:	6820      	ldr	r0, [r4, #0]
 800c4a4:	1ac0      	subs	r0, r0, r3
 800c4a6:	6963      	ldr	r3, [r4, #20]
 800c4a8:	b2f6      	uxtb	r6, r6
 800c4aa:	4283      	cmp	r3, r0
 800c4ac:	4637      	mov	r7, r6
 800c4ae:	dc04      	bgt.n	800c4ba <__swbuf_r+0x42>
 800c4b0:	4621      	mov	r1, r4
 800c4b2:	4628      	mov	r0, r5
 800c4b4:	f000 f926 	bl	800c704 <_fflush_r>
 800c4b8:	bb30      	cbnz	r0, 800c508 <__swbuf_r+0x90>
 800c4ba:	68a3      	ldr	r3, [r4, #8]
 800c4bc:	3b01      	subs	r3, #1
 800c4be:	60a3      	str	r3, [r4, #8]
 800c4c0:	6823      	ldr	r3, [r4, #0]
 800c4c2:	1c5a      	adds	r2, r3, #1
 800c4c4:	6022      	str	r2, [r4, #0]
 800c4c6:	701e      	strb	r6, [r3, #0]
 800c4c8:	6963      	ldr	r3, [r4, #20]
 800c4ca:	3001      	adds	r0, #1
 800c4cc:	4283      	cmp	r3, r0
 800c4ce:	d004      	beq.n	800c4da <__swbuf_r+0x62>
 800c4d0:	89a3      	ldrh	r3, [r4, #12]
 800c4d2:	07db      	lsls	r3, r3, #31
 800c4d4:	d506      	bpl.n	800c4e4 <__swbuf_r+0x6c>
 800c4d6:	2e0a      	cmp	r6, #10
 800c4d8:	d104      	bne.n	800c4e4 <__swbuf_r+0x6c>
 800c4da:	4621      	mov	r1, r4
 800c4dc:	4628      	mov	r0, r5
 800c4de:	f000 f911 	bl	800c704 <_fflush_r>
 800c4e2:	b988      	cbnz	r0, 800c508 <__swbuf_r+0x90>
 800c4e4:	4638      	mov	r0, r7
 800c4e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c4e8:	4b0a      	ldr	r3, [pc, #40]	; (800c514 <__swbuf_r+0x9c>)
 800c4ea:	429c      	cmp	r4, r3
 800c4ec:	d101      	bne.n	800c4f2 <__swbuf_r+0x7a>
 800c4ee:	68ac      	ldr	r4, [r5, #8]
 800c4f0:	e7cf      	b.n	800c492 <__swbuf_r+0x1a>
 800c4f2:	4b09      	ldr	r3, [pc, #36]	; (800c518 <__swbuf_r+0xa0>)
 800c4f4:	429c      	cmp	r4, r3
 800c4f6:	bf08      	it	eq
 800c4f8:	68ec      	ldreq	r4, [r5, #12]
 800c4fa:	e7ca      	b.n	800c492 <__swbuf_r+0x1a>
 800c4fc:	4621      	mov	r1, r4
 800c4fe:	4628      	mov	r0, r5
 800c500:	f000 f80c 	bl	800c51c <__swsetup_r>
 800c504:	2800      	cmp	r0, #0
 800c506:	d0cb      	beq.n	800c4a0 <__swbuf_r+0x28>
 800c508:	f04f 37ff 	mov.w	r7, #4294967295
 800c50c:	e7ea      	b.n	800c4e4 <__swbuf_r+0x6c>
 800c50e:	bf00      	nop
 800c510:	0800d310 	.word	0x0800d310
 800c514:	0800d330 	.word	0x0800d330
 800c518:	0800d2f0 	.word	0x0800d2f0

0800c51c <__swsetup_r>:
 800c51c:	4b32      	ldr	r3, [pc, #200]	; (800c5e8 <__swsetup_r+0xcc>)
 800c51e:	b570      	push	{r4, r5, r6, lr}
 800c520:	681d      	ldr	r5, [r3, #0]
 800c522:	4606      	mov	r6, r0
 800c524:	460c      	mov	r4, r1
 800c526:	b125      	cbz	r5, 800c532 <__swsetup_r+0x16>
 800c528:	69ab      	ldr	r3, [r5, #24]
 800c52a:	b913      	cbnz	r3, 800c532 <__swsetup_r+0x16>
 800c52c:	4628      	mov	r0, r5
 800c52e:	f000 f97d 	bl	800c82c <__sinit>
 800c532:	4b2e      	ldr	r3, [pc, #184]	; (800c5ec <__swsetup_r+0xd0>)
 800c534:	429c      	cmp	r4, r3
 800c536:	d10f      	bne.n	800c558 <__swsetup_r+0x3c>
 800c538:	686c      	ldr	r4, [r5, #4]
 800c53a:	89a3      	ldrh	r3, [r4, #12]
 800c53c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c540:	0719      	lsls	r1, r3, #28
 800c542:	d42c      	bmi.n	800c59e <__swsetup_r+0x82>
 800c544:	06dd      	lsls	r5, r3, #27
 800c546:	d411      	bmi.n	800c56c <__swsetup_r+0x50>
 800c548:	2309      	movs	r3, #9
 800c54a:	6033      	str	r3, [r6, #0]
 800c54c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c550:	81a3      	strh	r3, [r4, #12]
 800c552:	f04f 30ff 	mov.w	r0, #4294967295
 800c556:	e03e      	b.n	800c5d6 <__swsetup_r+0xba>
 800c558:	4b25      	ldr	r3, [pc, #148]	; (800c5f0 <__swsetup_r+0xd4>)
 800c55a:	429c      	cmp	r4, r3
 800c55c:	d101      	bne.n	800c562 <__swsetup_r+0x46>
 800c55e:	68ac      	ldr	r4, [r5, #8]
 800c560:	e7eb      	b.n	800c53a <__swsetup_r+0x1e>
 800c562:	4b24      	ldr	r3, [pc, #144]	; (800c5f4 <__swsetup_r+0xd8>)
 800c564:	429c      	cmp	r4, r3
 800c566:	bf08      	it	eq
 800c568:	68ec      	ldreq	r4, [r5, #12]
 800c56a:	e7e6      	b.n	800c53a <__swsetup_r+0x1e>
 800c56c:	0758      	lsls	r0, r3, #29
 800c56e:	d512      	bpl.n	800c596 <__swsetup_r+0x7a>
 800c570:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c572:	b141      	cbz	r1, 800c586 <__swsetup_r+0x6a>
 800c574:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c578:	4299      	cmp	r1, r3
 800c57a:	d002      	beq.n	800c582 <__swsetup_r+0x66>
 800c57c:	4630      	mov	r0, r6
 800c57e:	f000 fa5b 	bl	800ca38 <_free_r>
 800c582:	2300      	movs	r3, #0
 800c584:	6363      	str	r3, [r4, #52]	; 0x34
 800c586:	89a3      	ldrh	r3, [r4, #12]
 800c588:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c58c:	81a3      	strh	r3, [r4, #12]
 800c58e:	2300      	movs	r3, #0
 800c590:	6063      	str	r3, [r4, #4]
 800c592:	6923      	ldr	r3, [r4, #16]
 800c594:	6023      	str	r3, [r4, #0]
 800c596:	89a3      	ldrh	r3, [r4, #12]
 800c598:	f043 0308 	orr.w	r3, r3, #8
 800c59c:	81a3      	strh	r3, [r4, #12]
 800c59e:	6923      	ldr	r3, [r4, #16]
 800c5a0:	b94b      	cbnz	r3, 800c5b6 <__swsetup_r+0x9a>
 800c5a2:	89a3      	ldrh	r3, [r4, #12]
 800c5a4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c5a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c5ac:	d003      	beq.n	800c5b6 <__swsetup_r+0x9a>
 800c5ae:	4621      	mov	r1, r4
 800c5b0:	4630      	mov	r0, r6
 800c5b2:	f000 fa01 	bl	800c9b8 <__smakebuf_r>
 800c5b6:	89a0      	ldrh	r0, [r4, #12]
 800c5b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c5bc:	f010 0301 	ands.w	r3, r0, #1
 800c5c0:	d00a      	beq.n	800c5d8 <__swsetup_r+0xbc>
 800c5c2:	2300      	movs	r3, #0
 800c5c4:	60a3      	str	r3, [r4, #8]
 800c5c6:	6963      	ldr	r3, [r4, #20]
 800c5c8:	425b      	negs	r3, r3
 800c5ca:	61a3      	str	r3, [r4, #24]
 800c5cc:	6923      	ldr	r3, [r4, #16]
 800c5ce:	b943      	cbnz	r3, 800c5e2 <__swsetup_r+0xc6>
 800c5d0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c5d4:	d1ba      	bne.n	800c54c <__swsetup_r+0x30>
 800c5d6:	bd70      	pop	{r4, r5, r6, pc}
 800c5d8:	0781      	lsls	r1, r0, #30
 800c5da:	bf58      	it	pl
 800c5dc:	6963      	ldrpl	r3, [r4, #20]
 800c5de:	60a3      	str	r3, [r4, #8]
 800c5e0:	e7f4      	b.n	800c5cc <__swsetup_r+0xb0>
 800c5e2:	2000      	movs	r0, #0
 800c5e4:	e7f7      	b.n	800c5d6 <__swsetup_r+0xba>
 800c5e6:	bf00      	nop
 800c5e8:	20000108 	.word	0x20000108
 800c5ec:	0800d310 	.word	0x0800d310
 800c5f0:	0800d330 	.word	0x0800d330
 800c5f4:	0800d2f0 	.word	0x0800d2f0

0800c5f8 <__sflush_r>:
 800c5f8:	898a      	ldrh	r2, [r1, #12]
 800c5fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c5fe:	4605      	mov	r5, r0
 800c600:	0710      	lsls	r0, r2, #28
 800c602:	460c      	mov	r4, r1
 800c604:	d458      	bmi.n	800c6b8 <__sflush_r+0xc0>
 800c606:	684b      	ldr	r3, [r1, #4]
 800c608:	2b00      	cmp	r3, #0
 800c60a:	dc05      	bgt.n	800c618 <__sflush_r+0x20>
 800c60c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c60e:	2b00      	cmp	r3, #0
 800c610:	dc02      	bgt.n	800c618 <__sflush_r+0x20>
 800c612:	2000      	movs	r0, #0
 800c614:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c618:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c61a:	2e00      	cmp	r6, #0
 800c61c:	d0f9      	beq.n	800c612 <__sflush_r+0x1a>
 800c61e:	2300      	movs	r3, #0
 800c620:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c624:	682f      	ldr	r7, [r5, #0]
 800c626:	602b      	str	r3, [r5, #0]
 800c628:	d032      	beq.n	800c690 <__sflush_r+0x98>
 800c62a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c62c:	89a3      	ldrh	r3, [r4, #12]
 800c62e:	075a      	lsls	r2, r3, #29
 800c630:	d505      	bpl.n	800c63e <__sflush_r+0x46>
 800c632:	6863      	ldr	r3, [r4, #4]
 800c634:	1ac0      	subs	r0, r0, r3
 800c636:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c638:	b10b      	cbz	r3, 800c63e <__sflush_r+0x46>
 800c63a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c63c:	1ac0      	subs	r0, r0, r3
 800c63e:	2300      	movs	r3, #0
 800c640:	4602      	mov	r2, r0
 800c642:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c644:	6a21      	ldr	r1, [r4, #32]
 800c646:	4628      	mov	r0, r5
 800c648:	47b0      	blx	r6
 800c64a:	1c43      	adds	r3, r0, #1
 800c64c:	89a3      	ldrh	r3, [r4, #12]
 800c64e:	d106      	bne.n	800c65e <__sflush_r+0x66>
 800c650:	6829      	ldr	r1, [r5, #0]
 800c652:	291d      	cmp	r1, #29
 800c654:	d82c      	bhi.n	800c6b0 <__sflush_r+0xb8>
 800c656:	4a2a      	ldr	r2, [pc, #168]	; (800c700 <__sflush_r+0x108>)
 800c658:	40ca      	lsrs	r2, r1
 800c65a:	07d6      	lsls	r6, r2, #31
 800c65c:	d528      	bpl.n	800c6b0 <__sflush_r+0xb8>
 800c65e:	2200      	movs	r2, #0
 800c660:	6062      	str	r2, [r4, #4]
 800c662:	04d9      	lsls	r1, r3, #19
 800c664:	6922      	ldr	r2, [r4, #16]
 800c666:	6022      	str	r2, [r4, #0]
 800c668:	d504      	bpl.n	800c674 <__sflush_r+0x7c>
 800c66a:	1c42      	adds	r2, r0, #1
 800c66c:	d101      	bne.n	800c672 <__sflush_r+0x7a>
 800c66e:	682b      	ldr	r3, [r5, #0]
 800c670:	b903      	cbnz	r3, 800c674 <__sflush_r+0x7c>
 800c672:	6560      	str	r0, [r4, #84]	; 0x54
 800c674:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c676:	602f      	str	r7, [r5, #0]
 800c678:	2900      	cmp	r1, #0
 800c67a:	d0ca      	beq.n	800c612 <__sflush_r+0x1a>
 800c67c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c680:	4299      	cmp	r1, r3
 800c682:	d002      	beq.n	800c68a <__sflush_r+0x92>
 800c684:	4628      	mov	r0, r5
 800c686:	f000 f9d7 	bl	800ca38 <_free_r>
 800c68a:	2000      	movs	r0, #0
 800c68c:	6360      	str	r0, [r4, #52]	; 0x34
 800c68e:	e7c1      	b.n	800c614 <__sflush_r+0x1c>
 800c690:	6a21      	ldr	r1, [r4, #32]
 800c692:	2301      	movs	r3, #1
 800c694:	4628      	mov	r0, r5
 800c696:	47b0      	blx	r6
 800c698:	1c41      	adds	r1, r0, #1
 800c69a:	d1c7      	bne.n	800c62c <__sflush_r+0x34>
 800c69c:	682b      	ldr	r3, [r5, #0]
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d0c4      	beq.n	800c62c <__sflush_r+0x34>
 800c6a2:	2b1d      	cmp	r3, #29
 800c6a4:	d001      	beq.n	800c6aa <__sflush_r+0xb2>
 800c6a6:	2b16      	cmp	r3, #22
 800c6a8:	d101      	bne.n	800c6ae <__sflush_r+0xb6>
 800c6aa:	602f      	str	r7, [r5, #0]
 800c6ac:	e7b1      	b.n	800c612 <__sflush_r+0x1a>
 800c6ae:	89a3      	ldrh	r3, [r4, #12]
 800c6b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c6b4:	81a3      	strh	r3, [r4, #12]
 800c6b6:	e7ad      	b.n	800c614 <__sflush_r+0x1c>
 800c6b8:	690f      	ldr	r7, [r1, #16]
 800c6ba:	2f00      	cmp	r7, #0
 800c6bc:	d0a9      	beq.n	800c612 <__sflush_r+0x1a>
 800c6be:	0793      	lsls	r3, r2, #30
 800c6c0:	680e      	ldr	r6, [r1, #0]
 800c6c2:	bf08      	it	eq
 800c6c4:	694b      	ldreq	r3, [r1, #20]
 800c6c6:	600f      	str	r7, [r1, #0]
 800c6c8:	bf18      	it	ne
 800c6ca:	2300      	movne	r3, #0
 800c6cc:	eba6 0807 	sub.w	r8, r6, r7
 800c6d0:	608b      	str	r3, [r1, #8]
 800c6d2:	f1b8 0f00 	cmp.w	r8, #0
 800c6d6:	dd9c      	ble.n	800c612 <__sflush_r+0x1a>
 800c6d8:	6a21      	ldr	r1, [r4, #32]
 800c6da:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c6dc:	4643      	mov	r3, r8
 800c6de:	463a      	mov	r2, r7
 800c6e0:	4628      	mov	r0, r5
 800c6e2:	47b0      	blx	r6
 800c6e4:	2800      	cmp	r0, #0
 800c6e6:	dc06      	bgt.n	800c6f6 <__sflush_r+0xfe>
 800c6e8:	89a3      	ldrh	r3, [r4, #12]
 800c6ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c6ee:	81a3      	strh	r3, [r4, #12]
 800c6f0:	f04f 30ff 	mov.w	r0, #4294967295
 800c6f4:	e78e      	b.n	800c614 <__sflush_r+0x1c>
 800c6f6:	4407      	add	r7, r0
 800c6f8:	eba8 0800 	sub.w	r8, r8, r0
 800c6fc:	e7e9      	b.n	800c6d2 <__sflush_r+0xda>
 800c6fe:	bf00      	nop
 800c700:	20400001 	.word	0x20400001

0800c704 <_fflush_r>:
 800c704:	b538      	push	{r3, r4, r5, lr}
 800c706:	690b      	ldr	r3, [r1, #16]
 800c708:	4605      	mov	r5, r0
 800c70a:	460c      	mov	r4, r1
 800c70c:	b913      	cbnz	r3, 800c714 <_fflush_r+0x10>
 800c70e:	2500      	movs	r5, #0
 800c710:	4628      	mov	r0, r5
 800c712:	bd38      	pop	{r3, r4, r5, pc}
 800c714:	b118      	cbz	r0, 800c71e <_fflush_r+0x1a>
 800c716:	6983      	ldr	r3, [r0, #24]
 800c718:	b90b      	cbnz	r3, 800c71e <_fflush_r+0x1a>
 800c71a:	f000 f887 	bl	800c82c <__sinit>
 800c71e:	4b14      	ldr	r3, [pc, #80]	; (800c770 <_fflush_r+0x6c>)
 800c720:	429c      	cmp	r4, r3
 800c722:	d11b      	bne.n	800c75c <_fflush_r+0x58>
 800c724:	686c      	ldr	r4, [r5, #4]
 800c726:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d0ef      	beq.n	800c70e <_fflush_r+0xa>
 800c72e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c730:	07d0      	lsls	r0, r2, #31
 800c732:	d404      	bmi.n	800c73e <_fflush_r+0x3a>
 800c734:	0599      	lsls	r1, r3, #22
 800c736:	d402      	bmi.n	800c73e <_fflush_r+0x3a>
 800c738:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c73a:	f000 f915 	bl	800c968 <__retarget_lock_acquire_recursive>
 800c73e:	4628      	mov	r0, r5
 800c740:	4621      	mov	r1, r4
 800c742:	f7ff ff59 	bl	800c5f8 <__sflush_r>
 800c746:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c748:	07da      	lsls	r2, r3, #31
 800c74a:	4605      	mov	r5, r0
 800c74c:	d4e0      	bmi.n	800c710 <_fflush_r+0xc>
 800c74e:	89a3      	ldrh	r3, [r4, #12]
 800c750:	059b      	lsls	r3, r3, #22
 800c752:	d4dd      	bmi.n	800c710 <_fflush_r+0xc>
 800c754:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c756:	f000 f908 	bl	800c96a <__retarget_lock_release_recursive>
 800c75a:	e7d9      	b.n	800c710 <_fflush_r+0xc>
 800c75c:	4b05      	ldr	r3, [pc, #20]	; (800c774 <_fflush_r+0x70>)
 800c75e:	429c      	cmp	r4, r3
 800c760:	d101      	bne.n	800c766 <_fflush_r+0x62>
 800c762:	68ac      	ldr	r4, [r5, #8]
 800c764:	e7df      	b.n	800c726 <_fflush_r+0x22>
 800c766:	4b04      	ldr	r3, [pc, #16]	; (800c778 <_fflush_r+0x74>)
 800c768:	429c      	cmp	r4, r3
 800c76a:	bf08      	it	eq
 800c76c:	68ec      	ldreq	r4, [r5, #12]
 800c76e:	e7da      	b.n	800c726 <_fflush_r+0x22>
 800c770:	0800d310 	.word	0x0800d310
 800c774:	0800d330 	.word	0x0800d330
 800c778:	0800d2f0 	.word	0x0800d2f0

0800c77c <std>:
 800c77c:	2300      	movs	r3, #0
 800c77e:	b510      	push	{r4, lr}
 800c780:	4604      	mov	r4, r0
 800c782:	e9c0 3300 	strd	r3, r3, [r0]
 800c786:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c78a:	6083      	str	r3, [r0, #8]
 800c78c:	8181      	strh	r1, [r0, #12]
 800c78e:	6643      	str	r3, [r0, #100]	; 0x64
 800c790:	81c2      	strh	r2, [r0, #14]
 800c792:	6183      	str	r3, [r0, #24]
 800c794:	4619      	mov	r1, r3
 800c796:	2208      	movs	r2, #8
 800c798:	305c      	adds	r0, #92	; 0x5c
 800c79a:	f7ff fb3f 	bl	800be1c <memset>
 800c79e:	4b05      	ldr	r3, [pc, #20]	; (800c7b4 <std+0x38>)
 800c7a0:	6263      	str	r3, [r4, #36]	; 0x24
 800c7a2:	4b05      	ldr	r3, [pc, #20]	; (800c7b8 <std+0x3c>)
 800c7a4:	62a3      	str	r3, [r4, #40]	; 0x28
 800c7a6:	4b05      	ldr	r3, [pc, #20]	; (800c7bc <std+0x40>)
 800c7a8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c7aa:	4b05      	ldr	r3, [pc, #20]	; (800c7c0 <std+0x44>)
 800c7ac:	6224      	str	r4, [r4, #32]
 800c7ae:	6323      	str	r3, [r4, #48]	; 0x30
 800c7b0:	bd10      	pop	{r4, pc}
 800c7b2:	bf00      	nop
 800c7b4:	0800cca9 	.word	0x0800cca9
 800c7b8:	0800cccb 	.word	0x0800cccb
 800c7bc:	0800cd03 	.word	0x0800cd03
 800c7c0:	0800cd27 	.word	0x0800cd27

0800c7c4 <_cleanup_r>:
 800c7c4:	4901      	ldr	r1, [pc, #4]	; (800c7cc <_cleanup_r+0x8>)
 800c7c6:	f000 b8af 	b.w	800c928 <_fwalk_reent>
 800c7ca:	bf00      	nop
 800c7cc:	0800c705 	.word	0x0800c705

0800c7d0 <__sfmoreglue>:
 800c7d0:	b570      	push	{r4, r5, r6, lr}
 800c7d2:	2268      	movs	r2, #104	; 0x68
 800c7d4:	1e4d      	subs	r5, r1, #1
 800c7d6:	4355      	muls	r5, r2
 800c7d8:	460e      	mov	r6, r1
 800c7da:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c7de:	f000 f997 	bl	800cb10 <_malloc_r>
 800c7e2:	4604      	mov	r4, r0
 800c7e4:	b140      	cbz	r0, 800c7f8 <__sfmoreglue+0x28>
 800c7e6:	2100      	movs	r1, #0
 800c7e8:	e9c0 1600 	strd	r1, r6, [r0]
 800c7ec:	300c      	adds	r0, #12
 800c7ee:	60a0      	str	r0, [r4, #8]
 800c7f0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c7f4:	f7ff fb12 	bl	800be1c <memset>
 800c7f8:	4620      	mov	r0, r4
 800c7fa:	bd70      	pop	{r4, r5, r6, pc}

0800c7fc <__sfp_lock_acquire>:
 800c7fc:	4801      	ldr	r0, [pc, #4]	; (800c804 <__sfp_lock_acquire+0x8>)
 800c7fe:	f000 b8b3 	b.w	800c968 <__retarget_lock_acquire_recursive>
 800c802:	bf00      	nop
 800c804:	20001791 	.word	0x20001791

0800c808 <__sfp_lock_release>:
 800c808:	4801      	ldr	r0, [pc, #4]	; (800c810 <__sfp_lock_release+0x8>)
 800c80a:	f000 b8ae 	b.w	800c96a <__retarget_lock_release_recursive>
 800c80e:	bf00      	nop
 800c810:	20001791 	.word	0x20001791

0800c814 <__sinit_lock_acquire>:
 800c814:	4801      	ldr	r0, [pc, #4]	; (800c81c <__sinit_lock_acquire+0x8>)
 800c816:	f000 b8a7 	b.w	800c968 <__retarget_lock_acquire_recursive>
 800c81a:	bf00      	nop
 800c81c:	20001792 	.word	0x20001792

0800c820 <__sinit_lock_release>:
 800c820:	4801      	ldr	r0, [pc, #4]	; (800c828 <__sinit_lock_release+0x8>)
 800c822:	f000 b8a2 	b.w	800c96a <__retarget_lock_release_recursive>
 800c826:	bf00      	nop
 800c828:	20001792 	.word	0x20001792

0800c82c <__sinit>:
 800c82c:	b510      	push	{r4, lr}
 800c82e:	4604      	mov	r4, r0
 800c830:	f7ff fff0 	bl	800c814 <__sinit_lock_acquire>
 800c834:	69a3      	ldr	r3, [r4, #24]
 800c836:	b11b      	cbz	r3, 800c840 <__sinit+0x14>
 800c838:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c83c:	f7ff bff0 	b.w	800c820 <__sinit_lock_release>
 800c840:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c844:	6523      	str	r3, [r4, #80]	; 0x50
 800c846:	4b13      	ldr	r3, [pc, #76]	; (800c894 <__sinit+0x68>)
 800c848:	4a13      	ldr	r2, [pc, #76]	; (800c898 <__sinit+0x6c>)
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	62a2      	str	r2, [r4, #40]	; 0x28
 800c84e:	42a3      	cmp	r3, r4
 800c850:	bf04      	itt	eq
 800c852:	2301      	moveq	r3, #1
 800c854:	61a3      	streq	r3, [r4, #24]
 800c856:	4620      	mov	r0, r4
 800c858:	f000 f820 	bl	800c89c <__sfp>
 800c85c:	6060      	str	r0, [r4, #4]
 800c85e:	4620      	mov	r0, r4
 800c860:	f000 f81c 	bl	800c89c <__sfp>
 800c864:	60a0      	str	r0, [r4, #8]
 800c866:	4620      	mov	r0, r4
 800c868:	f000 f818 	bl	800c89c <__sfp>
 800c86c:	2200      	movs	r2, #0
 800c86e:	60e0      	str	r0, [r4, #12]
 800c870:	2104      	movs	r1, #4
 800c872:	6860      	ldr	r0, [r4, #4]
 800c874:	f7ff ff82 	bl	800c77c <std>
 800c878:	68a0      	ldr	r0, [r4, #8]
 800c87a:	2201      	movs	r2, #1
 800c87c:	2109      	movs	r1, #9
 800c87e:	f7ff ff7d 	bl	800c77c <std>
 800c882:	68e0      	ldr	r0, [r4, #12]
 800c884:	2202      	movs	r2, #2
 800c886:	2112      	movs	r1, #18
 800c888:	f7ff ff78 	bl	800c77c <std>
 800c88c:	2301      	movs	r3, #1
 800c88e:	61a3      	str	r3, [r4, #24]
 800c890:	e7d2      	b.n	800c838 <__sinit+0xc>
 800c892:	bf00      	nop
 800c894:	0800d2b8 	.word	0x0800d2b8
 800c898:	0800c7c5 	.word	0x0800c7c5

0800c89c <__sfp>:
 800c89c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c89e:	4607      	mov	r7, r0
 800c8a0:	f7ff ffac 	bl	800c7fc <__sfp_lock_acquire>
 800c8a4:	4b1e      	ldr	r3, [pc, #120]	; (800c920 <__sfp+0x84>)
 800c8a6:	681e      	ldr	r6, [r3, #0]
 800c8a8:	69b3      	ldr	r3, [r6, #24]
 800c8aa:	b913      	cbnz	r3, 800c8b2 <__sfp+0x16>
 800c8ac:	4630      	mov	r0, r6
 800c8ae:	f7ff ffbd 	bl	800c82c <__sinit>
 800c8b2:	3648      	adds	r6, #72	; 0x48
 800c8b4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c8b8:	3b01      	subs	r3, #1
 800c8ba:	d503      	bpl.n	800c8c4 <__sfp+0x28>
 800c8bc:	6833      	ldr	r3, [r6, #0]
 800c8be:	b30b      	cbz	r3, 800c904 <__sfp+0x68>
 800c8c0:	6836      	ldr	r6, [r6, #0]
 800c8c2:	e7f7      	b.n	800c8b4 <__sfp+0x18>
 800c8c4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c8c8:	b9d5      	cbnz	r5, 800c900 <__sfp+0x64>
 800c8ca:	4b16      	ldr	r3, [pc, #88]	; (800c924 <__sfp+0x88>)
 800c8cc:	60e3      	str	r3, [r4, #12]
 800c8ce:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c8d2:	6665      	str	r5, [r4, #100]	; 0x64
 800c8d4:	f000 f847 	bl	800c966 <__retarget_lock_init_recursive>
 800c8d8:	f7ff ff96 	bl	800c808 <__sfp_lock_release>
 800c8dc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c8e0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c8e4:	6025      	str	r5, [r4, #0]
 800c8e6:	61a5      	str	r5, [r4, #24]
 800c8e8:	2208      	movs	r2, #8
 800c8ea:	4629      	mov	r1, r5
 800c8ec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c8f0:	f7ff fa94 	bl	800be1c <memset>
 800c8f4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c8f8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c8fc:	4620      	mov	r0, r4
 800c8fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c900:	3468      	adds	r4, #104	; 0x68
 800c902:	e7d9      	b.n	800c8b8 <__sfp+0x1c>
 800c904:	2104      	movs	r1, #4
 800c906:	4638      	mov	r0, r7
 800c908:	f7ff ff62 	bl	800c7d0 <__sfmoreglue>
 800c90c:	4604      	mov	r4, r0
 800c90e:	6030      	str	r0, [r6, #0]
 800c910:	2800      	cmp	r0, #0
 800c912:	d1d5      	bne.n	800c8c0 <__sfp+0x24>
 800c914:	f7ff ff78 	bl	800c808 <__sfp_lock_release>
 800c918:	230c      	movs	r3, #12
 800c91a:	603b      	str	r3, [r7, #0]
 800c91c:	e7ee      	b.n	800c8fc <__sfp+0x60>
 800c91e:	bf00      	nop
 800c920:	0800d2b8 	.word	0x0800d2b8
 800c924:	ffff0001 	.word	0xffff0001

0800c928 <_fwalk_reent>:
 800c928:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c92c:	4606      	mov	r6, r0
 800c92e:	4688      	mov	r8, r1
 800c930:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c934:	2700      	movs	r7, #0
 800c936:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c93a:	f1b9 0901 	subs.w	r9, r9, #1
 800c93e:	d505      	bpl.n	800c94c <_fwalk_reent+0x24>
 800c940:	6824      	ldr	r4, [r4, #0]
 800c942:	2c00      	cmp	r4, #0
 800c944:	d1f7      	bne.n	800c936 <_fwalk_reent+0xe>
 800c946:	4638      	mov	r0, r7
 800c948:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c94c:	89ab      	ldrh	r3, [r5, #12]
 800c94e:	2b01      	cmp	r3, #1
 800c950:	d907      	bls.n	800c962 <_fwalk_reent+0x3a>
 800c952:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c956:	3301      	adds	r3, #1
 800c958:	d003      	beq.n	800c962 <_fwalk_reent+0x3a>
 800c95a:	4629      	mov	r1, r5
 800c95c:	4630      	mov	r0, r6
 800c95e:	47c0      	blx	r8
 800c960:	4307      	orrs	r7, r0
 800c962:	3568      	adds	r5, #104	; 0x68
 800c964:	e7e9      	b.n	800c93a <_fwalk_reent+0x12>

0800c966 <__retarget_lock_init_recursive>:
 800c966:	4770      	bx	lr

0800c968 <__retarget_lock_acquire_recursive>:
 800c968:	4770      	bx	lr

0800c96a <__retarget_lock_release_recursive>:
 800c96a:	4770      	bx	lr

0800c96c <__swhatbuf_r>:
 800c96c:	b570      	push	{r4, r5, r6, lr}
 800c96e:	460e      	mov	r6, r1
 800c970:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c974:	2900      	cmp	r1, #0
 800c976:	b096      	sub	sp, #88	; 0x58
 800c978:	4614      	mov	r4, r2
 800c97a:	461d      	mov	r5, r3
 800c97c:	da08      	bge.n	800c990 <__swhatbuf_r+0x24>
 800c97e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c982:	2200      	movs	r2, #0
 800c984:	602a      	str	r2, [r5, #0]
 800c986:	061a      	lsls	r2, r3, #24
 800c988:	d410      	bmi.n	800c9ac <__swhatbuf_r+0x40>
 800c98a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c98e:	e00e      	b.n	800c9ae <__swhatbuf_r+0x42>
 800c990:	466a      	mov	r2, sp
 800c992:	f000 f9ef 	bl	800cd74 <_fstat_r>
 800c996:	2800      	cmp	r0, #0
 800c998:	dbf1      	blt.n	800c97e <__swhatbuf_r+0x12>
 800c99a:	9a01      	ldr	r2, [sp, #4]
 800c99c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c9a0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c9a4:	425a      	negs	r2, r3
 800c9a6:	415a      	adcs	r2, r3
 800c9a8:	602a      	str	r2, [r5, #0]
 800c9aa:	e7ee      	b.n	800c98a <__swhatbuf_r+0x1e>
 800c9ac:	2340      	movs	r3, #64	; 0x40
 800c9ae:	2000      	movs	r0, #0
 800c9b0:	6023      	str	r3, [r4, #0]
 800c9b2:	b016      	add	sp, #88	; 0x58
 800c9b4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c9b8 <__smakebuf_r>:
 800c9b8:	898b      	ldrh	r3, [r1, #12]
 800c9ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c9bc:	079d      	lsls	r5, r3, #30
 800c9be:	4606      	mov	r6, r0
 800c9c0:	460c      	mov	r4, r1
 800c9c2:	d507      	bpl.n	800c9d4 <__smakebuf_r+0x1c>
 800c9c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c9c8:	6023      	str	r3, [r4, #0]
 800c9ca:	6123      	str	r3, [r4, #16]
 800c9cc:	2301      	movs	r3, #1
 800c9ce:	6163      	str	r3, [r4, #20]
 800c9d0:	b002      	add	sp, #8
 800c9d2:	bd70      	pop	{r4, r5, r6, pc}
 800c9d4:	ab01      	add	r3, sp, #4
 800c9d6:	466a      	mov	r2, sp
 800c9d8:	f7ff ffc8 	bl	800c96c <__swhatbuf_r>
 800c9dc:	9900      	ldr	r1, [sp, #0]
 800c9de:	4605      	mov	r5, r0
 800c9e0:	4630      	mov	r0, r6
 800c9e2:	f000 f895 	bl	800cb10 <_malloc_r>
 800c9e6:	b948      	cbnz	r0, 800c9fc <__smakebuf_r+0x44>
 800c9e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c9ec:	059a      	lsls	r2, r3, #22
 800c9ee:	d4ef      	bmi.n	800c9d0 <__smakebuf_r+0x18>
 800c9f0:	f023 0303 	bic.w	r3, r3, #3
 800c9f4:	f043 0302 	orr.w	r3, r3, #2
 800c9f8:	81a3      	strh	r3, [r4, #12]
 800c9fa:	e7e3      	b.n	800c9c4 <__smakebuf_r+0xc>
 800c9fc:	4b0d      	ldr	r3, [pc, #52]	; (800ca34 <__smakebuf_r+0x7c>)
 800c9fe:	62b3      	str	r3, [r6, #40]	; 0x28
 800ca00:	89a3      	ldrh	r3, [r4, #12]
 800ca02:	6020      	str	r0, [r4, #0]
 800ca04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ca08:	81a3      	strh	r3, [r4, #12]
 800ca0a:	9b00      	ldr	r3, [sp, #0]
 800ca0c:	6163      	str	r3, [r4, #20]
 800ca0e:	9b01      	ldr	r3, [sp, #4]
 800ca10:	6120      	str	r0, [r4, #16]
 800ca12:	b15b      	cbz	r3, 800ca2c <__smakebuf_r+0x74>
 800ca14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ca18:	4630      	mov	r0, r6
 800ca1a:	f000 f9bd 	bl	800cd98 <_isatty_r>
 800ca1e:	b128      	cbz	r0, 800ca2c <__smakebuf_r+0x74>
 800ca20:	89a3      	ldrh	r3, [r4, #12]
 800ca22:	f023 0303 	bic.w	r3, r3, #3
 800ca26:	f043 0301 	orr.w	r3, r3, #1
 800ca2a:	81a3      	strh	r3, [r4, #12]
 800ca2c:	89a0      	ldrh	r0, [r4, #12]
 800ca2e:	4305      	orrs	r5, r0
 800ca30:	81a5      	strh	r5, [r4, #12]
 800ca32:	e7cd      	b.n	800c9d0 <__smakebuf_r+0x18>
 800ca34:	0800c7c5 	.word	0x0800c7c5

0800ca38 <_free_r>:
 800ca38:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ca3a:	2900      	cmp	r1, #0
 800ca3c:	d044      	beq.n	800cac8 <_free_r+0x90>
 800ca3e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ca42:	9001      	str	r0, [sp, #4]
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	f1a1 0404 	sub.w	r4, r1, #4
 800ca4a:	bfb8      	it	lt
 800ca4c:	18e4      	addlt	r4, r4, r3
 800ca4e:	f000 f9c5 	bl	800cddc <__malloc_lock>
 800ca52:	4a1e      	ldr	r2, [pc, #120]	; (800cacc <_free_r+0x94>)
 800ca54:	9801      	ldr	r0, [sp, #4]
 800ca56:	6813      	ldr	r3, [r2, #0]
 800ca58:	b933      	cbnz	r3, 800ca68 <_free_r+0x30>
 800ca5a:	6063      	str	r3, [r4, #4]
 800ca5c:	6014      	str	r4, [r2, #0]
 800ca5e:	b003      	add	sp, #12
 800ca60:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ca64:	f000 b9c0 	b.w	800cde8 <__malloc_unlock>
 800ca68:	42a3      	cmp	r3, r4
 800ca6a:	d908      	bls.n	800ca7e <_free_r+0x46>
 800ca6c:	6825      	ldr	r5, [r4, #0]
 800ca6e:	1961      	adds	r1, r4, r5
 800ca70:	428b      	cmp	r3, r1
 800ca72:	bf01      	itttt	eq
 800ca74:	6819      	ldreq	r1, [r3, #0]
 800ca76:	685b      	ldreq	r3, [r3, #4]
 800ca78:	1949      	addeq	r1, r1, r5
 800ca7a:	6021      	streq	r1, [r4, #0]
 800ca7c:	e7ed      	b.n	800ca5a <_free_r+0x22>
 800ca7e:	461a      	mov	r2, r3
 800ca80:	685b      	ldr	r3, [r3, #4]
 800ca82:	b10b      	cbz	r3, 800ca88 <_free_r+0x50>
 800ca84:	42a3      	cmp	r3, r4
 800ca86:	d9fa      	bls.n	800ca7e <_free_r+0x46>
 800ca88:	6811      	ldr	r1, [r2, #0]
 800ca8a:	1855      	adds	r5, r2, r1
 800ca8c:	42a5      	cmp	r5, r4
 800ca8e:	d10b      	bne.n	800caa8 <_free_r+0x70>
 800ca90:	6824      	ldr	r4, [r4, #0]
 800ca92:	4421      	add	r1, r4
 800ca94:	1854      	adds	r4, r2, r1
 800ca96:	42a3      	cmp	r3, r4
 800ca98:	6011      	str	r1, [r2, #0]
 800ca9a:	d1e0      	bne.n	800ca5e <_free_r+0x26>
 800ca9c:	681c      	ldr	r4, [r3, #0]
 800ca9e:	685b      	ldr	r3, [r3, #4]
 800caa0:	6053      	str	r3, [r2, #4]
 800caa2:	4421      	add	r1, r4
 800caa4:	6011      	str	r1, [r2, #0]
 800caa6:	e7da      	b.n	800ca5e <_free_r+0x26>
 800caa8:	d902      	bls.n	800cab0 <_free_r+0x78>
 800caaa:	230c      	movs	r3, #12
 800caac:	6003      	str	r3, [r0, #0]
 800caae:	e7d6      	b.n	800ca5e <_free_r+0x26>
 800cab0:	6825      	ldr	r5, [r4, #0]
 800cab2:	1961      	adds	r1, r4, r5
 800cab4:	428b      	cmp	r3, r1
 800cab6:	bf04      	itt	eq
 800cab8:	6819      	ldreq	r1, [r3, #0]
 800caba:	685b      	ldreq	r3, [r3, #4]
 800cabc:	6063      	str	r3, [r4, #4]
 800cabe:	bf04      	itt	eq
 800cac0:	1949      	addeq	r1, r1, r5
 800cac2:	6021      	streq	r1, [r4, #0]
 800cac4:	6054      	str	r4, [r2, #4]
 800cac6:	e7ca      	b.n	800ca5e <_free_r+0x26>
 800cac8:	b003      	add	sp, #12
 800caca:	bd30      	pop	{r4, r5, pc}
 800cacc:	20001794 	.word	0x20001794

0800cad0 <sbrk_aligned>:
 800cad0:	b570      	push	{r4, r5, r6, lr}
 800cad2:	4e0e      	ldr	r6, [pc, #56]	; (800cb0c <sbrk_aligned+0x3c>)
 800cad4:	460c      	mov	r4, r1
 800cad6:	6831      	ldr	r1, [r6, #0]
 800cad8:	4605      	mov	r5, r0
 800cada:	b911      	cbnz	r1, 800cae2 <sbrk_aligned+0x12>
 800cadc:	f000 f8d4 	bl	800cc88 <_sbrk_r>
 800cae0:	6030      	str	r0, [r6, #0]
 800cae2:	4621      	mov	r1, r4
 800cae4:	4628      	mov	r0, r5
 800cae6:	f000 f8cf 	bl	800cc88 <_sbrk_r>
 800caea:	1c43      	adds	r3, r0, #1
 800caec:	d00a      	beq.n	800cb04 <sbrk_aligned+0x34>
 800caee:	1cc4      	adds	r4, r0, #3
 800caf0:	f024 0403 	bic.w	r4, r4, #3
 800caf4:	42a0      	cmp	r0, r4
 800caf6:	d007      	beq.n	800cb08 <sbrk_aligned+0x38>
 800caf8:	1a21      	subs	r1, r4, r0
 800cafa:	4628      	mov	r0, r5
 800cafc:	f000 f8c4 	bl	800cc88 <_sbrk_r>
 800cb00:	3001      	adds	r0, #1
 800cb02:	d101      	bne.n	800cb08 <sbrk_aligned+0x38>
 800cb04:	f04f 34ff 	mov.w	r4, #4294967295
 800cb08:	4620      	mov	r0, r4
 800cb0a:	bd70      	pop	{r4, r5, r6, pc}
 800cb0c:	20001798 	.word	0x20001798

0800cb10 <_malloc_r>:
 800cb10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb14:	1ccd      	adds	r5, r1, #3
 800cb16:	f025 0503 	bic.w	r5, r5, #3
 800cb1a:	3508      	adds	r5, #8
 800cb1c:	2d0c      	cmp	r5, #12
 800cb1e:	bf38      	it	cc
 800cb20:	250c      	movcc	r5, #12
 800cb22:	2d00      	cmp	r5, #0
 800cb24:	4607      	mov	r7, r0
 800cb26:	db01      	blt.n	800cb2c <_malloc_r+0x1c>
 800cb28:	42a9      	cmp	r1, r5
 800cb2a:	d905      	bls.n	800cb38 <_malloc_r+0x28>
 800cb2c:	230c      	movs	r3, #12
 800cb2e:	603b      	str	r3, [r7, #0]
 800cb30:	2600      	movs	r6, #0
 800cb32:	4630      	mov	r0, r6
 800cb34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb38:	4e2e      	ldr	r6, [pc, #184]	; (800cbf4 <_malloc_r+0xe4>)
 800cb3a:	f000 f94f 	bl	800cddc <__malloc_lock>
 800cb3e:	6833      	ldr	r3, [r6, #0]
 800cb40:	461c      	mov	r4, r3
 800cb42:	bb34      	cbnz	r4, 800cb92 <_malloc_r+0x82>
 800cb44:	4629      	mov	r1, r5
 800cb46:	4638      	mov	r0, r7
 800cb48:	f7ff ffc2 	bl	800cad0 <sbrk_aligned>
 800cb4c:	1c43      	adds	r3, r0, #1
 800cb4e:	4604      	mov	r4, r0
 800cb50:	d14d      	bne.n	800cbee <_malloc_r+0xde>
 800cb52:	6834      	ldr	r4, [r6, #0]
 800cb54:	4626      	mov	r6, r4
 800cb56:	2e00      	cmp	r6, #0
 800cb58:	d140      	bne.n	800cbdc <_malloc_r+0xcc>
 800cb5a:	6823      	ldr	r3, [r4, #0]
 800cb5c:	4631      	mov	r1, r6
 800cb5e:	4638      	mov	r0, r7
 800cb60:	eb04 0803 	add.w	r8, r4, r3
 800cb64:	f000 f890 	bl	800cc88 <_sbrk_r>
 800cb68:	4580      	cmp	r8, r0
 800cb6a:	d13a      	bne.n	800cbe2 <_malloc_r+0xd2>
 800cb6c:	6821      	ldr	r1, [r4, #0]
 800cb6e:	3503      	adds	r5, #3
 800cb70:	1a6d      	subs	r5, r5, r1
 800cb72:	f025 0503 	bic.w	r5, r5, #3
 800cb76:	3508      	adds	r5, #8
 800cb78:	2d0c      	cmp	r5, #12
 800cb7a:	bf38      	it	cc
 800cb7c:	250c      	movcc	r5, #12
 800cb7e:	4629      	mov	r1, r5
 800cb80:	4638      	mov	r0, r7
 800cb82:	f7ff ffa5 	bl	800cad0 <sbrk_aligned>
 800cb86:	3001      	adds	r0, #1
 800cb88:	d02b      	beq.n	800cbe2 <_malloc_r+0xd2>
 800cb8a:	6823      	ldr	r3, [r4, #0]
 800cb8c:	442b      	add	r3, r5
 800cb8e:	6023      	str	r3, [r4, #0]
 800cb90:	e00e      	b.n	800cbb0 <_malloc_r+0xa0>
 800cb92:	6822      	ldr	r2, [r4, #0]
 800cb94:	1b52      	subs	r2, r2, r5
 800cb96:	d41e      	bmi.n	800cbd6 <_malloc_r+0xc6>
 800cb98:	2a0b      	cmp	r2, #11
 800cb9a:	d916      	bls.n	800cbca <_malloc_r+0xba>
 800cb9c:	1961      	adds	r1, r4, r5
 800cb9e:	42a3      	cmp	r3, r4
 800cba0:	6025      	str	r5, [r4, #0]
 800cba2:	bf18      	it	ne
 800cba4:	6059      	strne	r1, [r3, #4]
 800cba6:	6863      	ldr	r3, [r4, #4]
 800cba8:	bf08      	it	eq
 800cbaa:	6031      	streq	r1, [r6, #0]
 800cbac:	5162      	str	r2, [r4, r5]
 800cbae:	604b      	str	r3, [r1, #4]
 800cbb0:	4638      	mov	r0, r7
 800cbb2:	f104 060b 	add.w	r6, r4, #11
 800cbb6:	f000 f917 	bl	800cde8 <__malloc_unlock>
 800cbba:	f026 0607 	bic.w	r6, r6, #7
 800cbbe:	1d23      	adds	r3, r4, #4
 800cbc0:	1af2      	subs	r2, r6, r3
 800cbc2:	d0b6      	beq.n	800cb32 <_malloc_r+0x22>
 800cbc4:	1b9b      	subs	r3, r3, r6
 800cbc6:	50a3      	str	r3, [r4, r2]
 800cbc8:	e7b3      	b.n	800cb32 <_malloc_r+0x22>
 800cbca:	6862      	ldr	r2, [r4, #4]
 800cbcc:	42a3      	cmp	r3, r4
 800cbce:	bf0c      	ite	eq
 800cbd0:	6032      	streq	r2, [r6, #0]
 800cbd2:	605a      	strne	r2, [r3, #4]
 800cbd4:	e7ec      	b.n	800cbb0 <_malloc_r+0xa0>
 800cbd6:	4623      	mov	r3, r4
 800cbd8:	6864      	ldr	r4, [r4, #4]
 800cbda:	e7b2      	b.n	800cb42 <_malloc_r+0x32>
 800cbdc:	4634      	mov	r4, r6
 800cbde:	6876      	ldr	r6, [r6, #4]
 800cbe0:	e7b9      	b.n	800cb56 <_malloc_r+0x46>
 800cbe2:	230c      	movs	r3, #12
 800cbe4:	603b      	str	r3, [r7, #0]
 800cbe6:	4638      	mov	r0, r7
 800cbe8:	f000 f8fe 	bl	800cde8 <__malloc_unlock>
 800cbec:	e7a1      	b.n	800cb32 <_malloc_r+0x22>
 800cbee:	6025      	str	r5, [r4, #0]
 800cbf0:	e7de      	b.n	800cbb0 <_malloc_r+0xa0>
 800cbf2:	bf00      	nop
 800cbf4:	20001794 	.word	0x20001794

0800cbf8 <_putc_r>:
 800cbf8:	b570      	push	{r4, r5, r6, lr}
 800cbfa:	460d      	mov	r5, r1
 800cbfc:	4614      	mov	r4, r2
 800cbfe:	4606      	mov	r6, r0
 800cc00:	b118      	cbz	r0, 800cc0a <_putc_r+0x12>
 800cc02:	6983      	ldr	r3, [r0, #24]
 800cc04:	b90b      	cbnz	r3, 800cc0a <_putc_r+0x12>
 800cc06:	f7ff fe11 	bl	800c82c <__sinit>
 800cc0a:	4b1c      	ldr	r3, [pc, #112]	; (800cc7c <_putc_r+0x84>)
 800cc0c:	429c      	cmp	r4, r3
 800cc0e:	d124      	bne.n	800cc5a <_putc_r+0x62>
 800cc10:	6874      	ldr	r4, [r6, #4]
 800cc12:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cc14:	07d8      	lsls	r0, r3, #31
 800cc16:	d405      	bmi.n	800cc24 <_putc_r+0x2c>
 800cc18:	89a3      	ldrh	r3, [r4, #12]
 800cc1a:	0599      	lsls	r1, r3, #22
 800cc1c:	d402      	bmi.n	800cc24 <_putc_r+0x2c>
 800cc1e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cc20:	f7ff fea2 	bl	800c968 <__retarget_lock_acquire_recursive>
 800cc24:	68a3      	ldr	r3, [r4, #8]
 800cc26:	3b01      	subs	r3, #1
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	60a3      	str	r3, [r4, #8]
 800cc2c:	da05      	bge.n	800cc3a <_putc_r+0x42>
 800cc2e:	69a2      	ldr	r2, [r4, #24]
 800cc30:	4293      	cmp	r3, r2
 800cc32:	db1c      	blt.n	800cc6e <_putc_r+0x76>
 800cc34:	b2eb      	uxtb	r3, r5
 800cc36:	2b0a      	cmp	r3, #10
 800cc38:	d019      	beq.n	800cc6e <_putc_r+0x76>
 800cc3a:	6823      	ldr	r3, [r4, #0]
 800cc3c:	1c5a      	adds	r2, r3, #1
 800cc3e:	6022      	str	r2, [r4, #0]
 800cc40:	701d      	strb	r5, [r3, #0]
 800cc42:	b2ed      	uxtb	r5, r5
 800cc44:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cc46:	07da      	lsls	r2, r3, #31
 800cc48:	d405      	bmi.n	800cc56 <_putc_r+0x5e>
 800cc4a:	89a3      	ldrh	r3, [r4, #12]
 800cc4c:	059b      	lsls	r3, r3, #22
 800cc4e:	d402      	bmi.n	800cc56 <_putc_r+0x5e>
 800cc50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cc52:	f7ff fe8a 	bl	800c96a <__retarget_lock_release_recursive>
 800cc56:	4628      	mov	r0, r5
 800cc58:	bd70      	pop	{r4, r5, r6, pc}
 800cc5a:	4b09      	ldr	r3, [pc, #36]	; (800cc80 <_putc_r+0x88>)
 800cc5c:	429c      	cmp	r4, r3
 800cc5e:	d101      	bne.n	800cc64 <_putc_r+0x6c>
 800cc60:	68b4      	ldr	r4, [r6, #8]
 800cc62:	e7d6      	b.n	800cc12 <_putc_r+0x1a>
 800cc64:	4b07      	ldr	r3, [pc, #28]	; (800cc84 <_putc_r+0x8c>)
 800cc66:	429c      	cmp	r4, r3
 800cc68:	bf08      	it	eq
 800cc6a:	68f4      	ldreq	r4, [r6, #12]
 800cc6c:	e7d1      	b.n	800cc12 <_putc_r+0x1a>
 800cc6e:	4629      	mov	r1, r5
 800cc70:	4622      	mov	r2, r4
 800cc72:	4630      	mov	r0, r6
 800cc74:	f7ff fc00 	bl	800c478 <__swbuf_r>
 800cc78:	4605      	mov	r5, r0
 800cc7a:	e7e3      	b.n	800cc44 <_putc_r+0x4c>
 800cc7c:	0800d310 	.word	0x0800d310
 800cc80:	0800d330 	.word	0x0800d330
 800cc84:	0800d2f0 	.word	0x0800d2f0

0800cc88 <_sbrk_r>:
 800cc88:	b538      	push	{r3, r4, r5, lr}
 800cc8a:	4d06      	ldr	r5, [pc, #24]	; (800cca4 <_sbrk_r+0x1c>)
 800cc8c:	2300      	movs	r3, #0
 800cc8e:	4604      	mov	r4, r0
 800cc90:	4608      	mov	r0, r1
 800cc92:	602b      	str	r3, [r5, #0]
 800cc94:	f7f4 ff98 	bl	8001bc8 <_sbrk>
 800cc98:	1c43      	adds	r3, r0, #1
 800cc9a:	d102      	bne.n	800cca2 <_sbrk_r+0x1a>
 800cc9c:	682b      	ldr	r3, [r5, #0]
 800cc9e:	b103      	cbz	r3, 800cca2 <_sbrk_r+0x1a>
 800cca0:	6023      	str	r3, [r4, #0]
 800cca2:	bd38      	pop	{r3, r4, r5, pc}
 800cca4:	2000179c 	.word	0x2000179c

0800cca8 <__sread>:
 800cca8:	b510      	push	{r4, lr}
 800ccaa:	460c      	mov	r4, r1
 800ccac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ccb0:	f000 f8a0 	bl	800cdf4 <_read_r>
 800ccb4:	2800      	cmp	r0, #0
 800ccb6:	bfab      	itete	ge
 800ccb8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ccba:	89a3      	ldrhlt	r3, [r4, #12]
 800ccbc:	181b      	addge	r3, r3, r0
 800ccbe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ccc2:	bfac      	ite	ge
 800ccc4:	6563      	strge	r3, [r4, #84]	; 0x54
 800ccc6:	81a3      	strhlt	r3, [r4, #12]
 800ccc8:	bd10      	pop	{r4, pc}

0800ccca <__swrite>:
 800ccca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ccce:	461f      	mov	r7, r3
 800ccd0:	898b      	ldrh	r3, [r1, #12]
 800ccd2:	05db      	lsls	r3, r3, #23
 800ccd4:	4605      	mov	r5, r0
 800ccd6:	460c      	mov	r4, r1
 800ccd8:	4616      	mov	r6, r2
 800ccda:	d505      	bpl.n	800cce8 <__swrite+0x1e>
 800ccdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cce0:	2302      	movs	r3, #2
 800cce2:	2200      	movs	r2, #0
 800cce4:	f000 f868 	bl	800cdb8 <_lseek_r>
 800cce8:	89a3      	ldrh	r3, [r4, #12]
 800ccea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ccee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ccf2:	81a3      	strh	r3, [r4, #12]
 800ccf4:	4632      	mov	r2, r6
 800ccf6:	463b      	mov	r3, r7
 800ccf8:	4628      	mov	r0, r5
 800ccfa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ccfe:	f000 b817 	b.w	800cd30 <_write_r>

0800cd02 <__sseek>:
 800cd02:	b510      	push	{r4, lr}
 800cd04:	460c      	mov	r4, r1
 800cd06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd0a:	f000 f855 	bl	800cdb8 <_lseek_r>
 800cd0e:	1c43      	adds	r3, r0, #1
 800cd10:	89a3      	ldrh	r3, [r4, #12]
 800cd12:	bf15      	itete	ne
 800cd14:	6560      	strne	r0, [r4, #84]	; 0x54
 800cd16:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cd1a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cd1e:	81a3      	strheq	r3, [r4, #12]
 800cd20:	bf18      	it	ne
 800cd22:	81a3      	strhne	r3, [r4, #12]
 800cd24:	bd10      	pop	{r4, pc}

0800cd26 <__sclose>:
 800cd26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd2a:	f000 b813 	b.w	800cd54 <_close_r>
	...

0800cd30 <_write_r>:
 800cd30:	b538      	push	{r3, r4, r5, lr}
 800cd32:	4d07      	ldr	r5, [pc, #28]	; (800cd50 <_write_r+0x20>)
 800cd34:	4604      	mov	r4, r0
 800cd36:	4608      	mov	r0, r1
 800cd38:	4611      	mov	r1, r2
 800cd3a:	2200      	movs	r2, #0
 800cd3c:	602a      	str	r2, [r5, #0]
 800cd3e:	461a      	mov	r2, r3
 800cd40:	f7f4 fef1 	bl	8001b26 <_write>
 800cd44:	1c43      	adds	r3, r0, #1
 800cd46:	d102      	bne.n	800cd4e <_write_r+0x1e>
 800cd48:	682b      	ldr	r3, [r5, #0]
 800cd4a:	b103      	cbz	r3, 800cd4e <_write_r+0x1e>
 800cd4c:	6023      	str	r3, [r4, #0]
 800cd4e:	bd38      	pop	{r3, r4, r5, pc}
 800cd50:	2000179c 	.word	0x2000179c

0800cd54 <_close_r>:
 800cd54:	b538      	push	{r3, r4, r5, lr}
 800cd56:	4d06      	ldr	r5, [pc, #24]	; (800cd70 <_close_r+0x1c>)
 800cd58:	2300      	movs	r3, #0
 800cd5a:	4604      	mov	r4, r0
 800cd5c:	4608      	mov	r0, r1
 800cd5e:	602b      	str	r3, [r5, #0]
 800cd60:	f7f4 fefd 	bl	8001b5e <_close>
 800cd64:	1c43      	adds	r3, r0, #1
 800cd66:	d102      	bne.n	800cd6e <_close_r+0x1a>
 800cd68:	682b      	ldr	r3, [r5, #0]
 800cd6a:	b103      	cbz	r3, 800cd6e <_close_r+0x1a>
 800cd6c:	6023      	str	r3, [r4, #0]
 800cd6e:	bd38      	pop	{r3, r4, r5, pc}
 800cd70:	2000179c 	.word	0x2000179c

0800cd74 <_fstat_r>:
 800cd74:	b538      	push	{r3, r4, r5, lr}
 800cd76:	4d07      	ldr	r5, [pc, #28]	; (800cd94 <_fstat_r+0x20>)
 800cd78:	2300      	movs	r3, #0
 800cd7a:	4604      	mov	r4, r0
 800cd7c:	4608      	mov	r0, r1
 800cd7e:	4611      	mov	r1, r2
 800cd80:	602b      	str	r3, [r5, #0]
 800cd82:	f7f4 fef8 	bl	8001b76 <_fstat>
 800cd86:	1c43      	adds	r3, r0, #1
 800cd88:	d102      	bne.n	800cd90 <_fstat_r+0x1c>
 800cd8a:	682b      	ldr	r3, [r5, #0]
 800cd8c:	b103      	cbz	r3, 800cd90 <_fstat_r+0x1c>
 800cd8e:	6023      	str	r3, [r4, #0]
 800cd90:	bd38      	pop	{r3, r4, r5, pc}
 800cd92:	bf00      	nop
 800cd94:	2000179c 	.word	0x2000179c

0800cd98 <_isatty_r>:
 800cd98:	b538      	push	{r3, r4, r5, lr}
 800cd9a:	4d06      	ldr	r5, [pc, #24]	; (800cdb4 <_isatty_r+0x1c>)
 800cd9c:	2300      	movs	r3, #0
 800cd9e:	4604      	mov	r4, r0
 800cda0:	4608      	mov	r0, r1
 800cda2:	602b      	str	r3, [r5, #0]
 800cda4:	f7f4 fef7 	bl	8001b96 <_isatty>
 800cda8:	1c43      	adds	r3, r0, #1
 800cdaa:	d102      	bne.n	800cdb2 <_isatty_r+0x1a>
 800cdac:	682b      	ldr	r3, [r5, #0]
 800cdae:	b103      	cbz	r3, 800cdb2 <_isatty_r+0x1a>
 800cdb0:	6023      	str	r3, [r4, #0]
 800cdb2:	bd38      	pop	{r3, r4, r5, pc}
 800cdb4:	2000179c 	.word	0x2000179c

0800cdb8 <_lseek_r>:
 800cdb8:	b538      	push	{r3, r4, r5, lr}
 800cdba:	4d07      	ldr	r5, [pc, #28]	; (800cdd8 <_lseek_r+0x20>)
 800cdbc:	4604      	mov	r4, r0
 800cdbe:	4608      	mov	r0, r1
 800cdc0:	4611      	mov	r1, r2
 800cdc2:	2200      	movs	r2, #0
 800cdc4:	602a      	str	r2, [r5, #0]
 800cdc6:	461a      	mov	r2, r3
 800cdc8:	f7f4 fef0 	bl	8001bac <_lseek>
 800cdcc:	1c43      	adds	r3, r0, #1
 800cdce:	d102      	bne.n	800cdd6 <_lseek_r+0x1e>
 800cdd0:	682b      	ldr	r3, [r5, #0]
 800cdd2:	b103      	cbz	r3, 800cdd6 <_lseek_r+0x1e>
 800cdd4:	6023      	str	r3, [r4, #0]
 800cdd6:	bd38      	pop	{r3, r4, r5, pc}
 800cdd8:	2000179c 	.word	0x2000179c

0800cddc <__malloc_lock>:
 800cddc:	4801      	ldr	r0, [pc, #4]	; (800cde4 <__malloc_lock+0x8>)
 800cdde:	f7ff bdc3 	b.w	800c968 <__retarget_lock_acquire_recursive>
 800cde2:	bf00      	nop
 800cde4:	20001790 	.word	0x20001790

0800cde8 <__malloc_unlock>:
 800cde8:	4801      	ldr	r0, [pc, #4]	; (800cdf0 <__malloc_unlock+0x8>)
 800cdea:	f7ff bdbe 	b.w	800c96a <__retarget_lock_release_recursive>
 800cdee:	bf00      	nop
 800cdf0:	20001790 	.word	0x20001790

0800cdf4 <_read_r>:
 800cdf4:	b538      	push	{r3, r4, r5, lr}
 800cdf6:	4d07      	ldr	r5, [pc, #28]	; (800ce14 <_read_r+0x20>)
 800cdf8:	4604      	mov	r4, r0
 800cdfa:	4608      	mov	r0, r1
 800cdfc:	4611      	mov	r1, r2
 800cdfe:	2200      	movs	r2, #0
 800ce00:	602a      	str	r2, [r5, #0]
 800ce02:	461a      	mov	r2, r3
 800ce04:	f7f4 fe72 	bl	8001aec <_read>
 800ce08:	1c43      	adds	r3, r0, #1
 800ce0a:	d102      	bne.n	800ce12 <_read_r+0x1e>
 800ce0c:	682b      	ldr	r3, [r5, #0]
 800ce0e:	b103      	cbz	r3, 800ce12 <_read_r+0x1e>
 800ce10:	6023      	str	r3, [r4, #0]
 800ce12:	bd38      	pop	{r3, r4, r5, pc}
 800ce14:	2000179c 	.word	0x2000179c

0800ce18 <_init>:
 800ce18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce1a:	bf00      	nop
 800ce1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce1e:	bc08      	pop	{r3}
 800ce20:	469e      	mov	lr, r3
 800ce22:	4770      	bx	lr

0800ce24 <_fini>:
 800ce24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce26:	bf00      	nop
 800ce28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce2a:	bc08      	pop	{r3}
 800ce2c:	469e      	mov	lr, r3
 800ce2e:	4770      	bx	lr
