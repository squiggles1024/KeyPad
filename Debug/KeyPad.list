
KeyPad.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e3a8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000221f0  0800e548  0800e548  0001e548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08030738  08030738  00050194  2**0
                  CONTENTS
  4 .ARM          00000008  08030738  08030738  00040738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08030740  08030740  00050194  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08030740  08030740  00040740  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08030744  08030744  00040744  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000194  20000000  08030748  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000018dc  20000194  080308dc  00050194  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001a70  080308dc  00051a70  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00050194  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026df3  00000000  00000000  000501c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006198  00000000  00000000  00076fb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ef8  00000000  00000000  0007d150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001c00  00000000  00000000  0007f048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f221  00000000  00000000  00080c48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002a6f4  00000000  00000000  0009fe69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a6144  00000000  00000000  000ca55d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001706a1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008594  00000000  00000000  001706f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000194 	.word	0x20000194
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800e530 	.word	0x0800e530

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000198 	.word	0x20000198
 80001dc:	0800e530 	.word	0x0800e530

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <FT6206_Init>:
const FT6206_Reg_t RELEASE_CODE_ID = 0xAF;
const FT6206_Reg_t STATE = 0xBC;

static uint8_t touch_screen_buffer[4];

void FT6206_Init(FT6206_Handle_t *Dev, FT6206_IO_Drv_t IO_Drv){
 8000584:	b084      	sub	sp, #16
 8000586:	b5b0      	push	{r4, r5, r7, lr}
 8000588:	b082      	sub	sp, #8
 800058a:	af00      	add	r7, sp, #0
 800058c:	6078      	str	r0, [r7, #4]
 800058e:	f107 001c 	add.w	r0, r7, #28
 8000592:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	Dev->P1_XPos = 0;
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	2200      	movs	r2, #0
 800059a:	801a      	strh	r2, [r3, #0]
	Dev->P1_YPos = 0;
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	2200      	movs	r2, #0
 80005a0:	805a      	strh	r2, [r3, #2]
	Dev->P1_EventFlag = 0;
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	2200      	movs	r2, #0
 80005a6:	711a      	strb	r2, [r3, #4]
	Dev->IO_Driver = IO_Drv;
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	f103 0408 	add.w	r4, r3, #8
 80005ae:	f107 051c 	add.w	r5, r7, #28
 80005b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005b6:	682b      	ldr	r3, [r5, #0]
 80005b8:	6023      	str	r3, [r4, #0]
	Dev->IO_Driver.init();
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	689b      	ldr	r3, [r3, #8]
 80005be:	4798      	blx	r3
	Dev->IO_Driver.read(P1_XH, touch_screen_buffer, 4);
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	695b      	ldr	r3, [r3, #20]
 80005c4:	2003      	movs	r0, #3
 80005c6:	2204      	movs	r2, #4
 80005c8:	4904      	ldr	r1, [pc, #16]	; (80005dc <FT6206_Init+0x58>)
 80005ca:	4798      	blx	r3
	//FT6206_ReadScreen(Dev);
}
 80005cc:	bf00      	nop
 80005ce:	3708      	adds	r7, #8
 80005d0:	46bd      	mov	sp, r7
 80005d2:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80005d6:	b004      	add	sp, #16
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop
 80005dc:	200001b0 	.word	0x200001b0

080005e0 <FT6206_DeInit>:

void FT6206_DeInit(FT6206_Handle_t *Dev){
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
	Dev->IO_Driver.deinit();
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	68db      	ldr	r3, [r3, #12]
 80005ec:	4798      	blx	r3
	Dev->IO_Driver.init = '\0';
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	2200      	movs	r2, #0
 80005f2:	609a      	str	r2, [r3, #8]
	Dev->IO_Driver.deinit = '\0';
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	2200      	movs	r2, #0
 80005f8:	60da      	str	r2, [r3, #12]
	Dev->IO_Driver.read = '\0';
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	2200      	movs	r2, #0
 80005fe:	615a      	str	r2, [r3, #20]
	Dev->IO_Driver.write = '\0';
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	2200      	movs	r2, #0
 8000604:	611a      	str	r2, [r3, #16]
	Dev->IO_Driver.ioctl = '\0';
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	2200      	movs	r2, #0
 800060a:	619a      	str	r2, [r3, #24]
}
 800060c:	bf00      	nop
 800060e:	3708      	adds	r7, #8
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}

08000614 <FT6206_ReadScreen>:

void FT6206_ReadScreen(FT6206_Handle_t *Dev){
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
	//uint8_t buffer[4];
	Dev->P1_YPos = 240 - ((touch_screen_buffer[0] << 8 | touch_screen_buffer[1]) & 0x0FFF);
 800061c:	4b18      	ldr	r3, [pc, #96]	; (8000680 <FT6206_ReadScreen+0x6c>)
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	021b      	lsls	r3, r3, #8
 8000622:	b21a      	sxth	r2, r3
 8000624:	4b16      	ldr	r3, [pc, #88]	; (8000680 <FT6206_ReadScreen+0x6c>)
 8000626:	785b      	ldrb	r3, [r3, #1]
 8000628:	b21b      	sxth	r3, r3
 800062a:	4313      	orrs	r3, r2
 800062c:	b21b      	sxth	r3, r3
 800062e:	b29b      	uxth	r3, r3
 8000630:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000634:	b29b      	uxth	r3, r3
 8000636:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 800063a:	b29a      	uxth	r2, r3
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	805a      	strh	r2, [r3, #2]
	Dev->P1_EventFlag = touch_screen_buffer[0] >> 6;
 8000640:	4b0f      	ldr	r3, [pc, #60]	; (8000680 <FT6206_ReadScreen+0x6c>)
 8000642:	781b      	ldrb	r3, [r3, #0]
 8000644:	099b      	lsrs	r3, r3, #6
 8000646:	b2da      	uxtb	r2, r3
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	711a      	strb	r2, [r3, #4]
	Dev->P1_XPos = (touch_screen_buffer[2] << 8 | touch_screen_buffer[3]) & 0x0FFF;
 800064c:	4b0c      	ldr	r3, [pc, #48]	; (8000680 <FT6206_ReadScreen+0x6c>)
 800064e:	789b      	ldrb	r3, [r3, #2]
 8000650:	021b      	lsls	r3, r3, #8
 8000652:	b21a      	sxth	r2, r3
 8000654:	4b0a      	ldr	r3, [pc, #40]	; (8000680 <FT6206_ReadScreen+0x6c>)
 8000656:	78db      	ldrb	r3, [r3, #3]
 8000658:	b21b      	sxth	r3, r3
 800065a:	4313      	orrs	r3, r2
 800065c:	b21b      	sxth	r3, r3
 800065e:	b29b      	uxth	r3, r3
 8000660:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000664:	b29a      	uxth	r2, r3
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	801a      	strh	r2, [r3, #0]
	Dev->IO_Driver.read(P1_XH, touch_screen_buffer, 4);
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	695b      	ldr	r3, [r3, #20]
 800066e:	2003      	movs	r0, #3
 8000670:	2204      	movs	r2, #4
 8000672:	4903      	ldr	r1, [pc, #12]	; (8000680 <FT6206_ReadScreen+0x6c>)
 8000674:	4798      	blx	r3
}
 8000676:	bf00      	nop
 8000678:	3708      	adds	r7, #8
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	200001b0 	.word	0x200001b0

08000684 <FT6206_IO_Init>:
#include "gpio.h"
#include "dma.h"

static const uint8_t DevAddr = 0x70;

static void FT6206_IO_Init(void){
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
	I2C2_DMA_Init();
 8000688:	f000 ff08 	bl	800149c <I2C2_DMA_Init>
	I2C_GPIO_Init();
 800068c:	f000 ff26 	bl	80014dc <I2C_GPIO_Init>
	I2C2_Init();
 8000690:	f001 f8dc 	bl	800184c <I2C2_Init>
}
 8000694:	bf00      	nop
 8000696:	bd80      	pop	{r7, pc}

08000698 <FT6206_IO_DeInit>:

static void FT6206_IO_DeInit(void){
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
	HAL_NVIC_DisableIRQ(DMA1_Stream2_IRQn);
 800069c:	200d      	movs	r0, #13
 800069e:	f003 fb00 	bl	8003ca2 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_ClearPendingIRQ(DMA1_Stream2_IRQn);
 80006a2:	200d      	movs	r0, #13
 80006a4:	f003 fb17 	bl	8003cd6 <HAL_NVIC_ClearPendingIRQ>
}
 80006a8:	bf00      	nop
 80006aa:	bd80      	pop	{r7, pc}

080006ac <FT6206_IO_Write>:

static FT6206_Status_t FT6206_IO_Write(uint8_t Reg, uint8_t* pdata, uint8_t length){
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b086      	sub	sp, #24
 80006b0:	af04      	add	r7, sp, #16
 80006b2:	4603      	mov	r3, r0
 80006b4:	6039      	str	r1, [r7, #0]
 80006b6:	71fb      	strb	r3, [r7, #7]
 80006b8:	4613      	mov	r3, r2
 80006ba:	71bb      	strb	r3, [r7, #6]
	if(HAL_I2C_Mem_Write(&hi2c2, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pdata, length, 100) != HAL_OK){
 80006bc:	2370      	movs	r3, #112	; 0x70
 80006be:	b299      	uxth	r1, r3
 80006c0:	79fb      	ldrb	r3, [r7, #7]
 80006c2:	b29a      	uxth	r2, r3
 80006c4:	79bb      	ldrb	r3, [r7, #6]
 80006c6:	b29b      	uxth	r3, r3
 80006c8:	2064      	movs	r0, #100	; 0x64
 80006ca:	9002      	str	r0, [sp, #8]
 80006cc:	9301      	str	r3, [sp, #4]
 80006ce:	683b      	ldr	r3, [r7, #0]
 80006d0:	9300      	str	r3, [sp, #0]
 80006d2:	2301      	movs	r3, #1
 80006d4:	4806      	ldr	r0, [pc, #24]	; (80006f0 <FT6206_IO_Write+0x44>)
 80006d6:	f004 fae1 	bl	8004c9c <HAL_I2C_Mem_Write>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <FT6206_IO_Write+0x38>
		return FT6206_Err;
 80006e0:	2301      	movs	r3, #1
 80006e2:	e000      	b.n	80006e6 <FT6206_IO_Write+0x3a>
	}
	return FT6206_Ok;
 80006e4:	2300      	movs	r3, #0
}
 80006e6:	4618      	mov	r0, r3
 80006e8:	3708      	adds	r7, #8
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	200002b0 	.word	0x200002b0

080006f4 <FT6206_IO_Read>:

static FT6206_Status_t FT6206_IO_Read(uint8_t Reg, uint8_t* pdata, uint8_t length){
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b084      	sub	sp, #16
 80006f8:	af02      	add	r7, sp, #8
 80006fa:	4603      	mov	r3, r0
 80006fc:	6039      	str	r1, [r7, #0]
 80006fe:	71fb      	strb	r3, [r7, #7]
 8000700:	4613      	mov	r3, r2
 8000702:	71bb      	strb	r3, [r7, #6]
	if(HAL_I2C_Mem_Read_DMA(&hi2c2, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pdata, length) != HAL_OK){
 8000704:	2370      	movs	r3, #112	; 0x70
 8000706:	b299      	uxth	r1, r3
 8000708:	79fb      	ldrb	r3, [r7, #7]
 800070a:	b29a      	uxth	r2, r3
 800070c:	79bb      	ldrb	r3, [r7, #6]
 800070e:	b29b      	uxth	r3, r3
 8000710:	9301      	str	r3, [sp, #4]
 8000712:	683b      	ldr	r3, [r7, #0]
 8000714:	9300      	str	r3, [sp, #0]
 8000716:	2301      	movs	r3, #1
 8000718:	4806      	ldr	r0, [pc, #24]	; (8000734 <FT6206_IO_Read+0x40>)
 800071a:	f004 fbb9 	bl	8004e90 <HAL_I2C_Mem_Read_DMA>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <FT6206_IO_Read+0x34>
		return FT6206_Err;
 8000724:	2301      	movs	r3, #1
 8000726:	e000      	b.n	800072a <FT6206_IO_Read+0x36>
	}
	return FT6206_Ok;
 8000728:	2300      	movs	r3, #0
}
 800072a:	4618      	mov	r0, r3
 800072c:	3708      	adds	r7, #8
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	200002b0 	.word	0x200002b0

08000738 <FT6206_IO_ioctl>:

static uint8_t FT6206_IO_ioctl(FT6206_IO_Cmd_t Command){
 8000738:	b480      	push	{r7}
 800073a:	b083      	sub	sp, #12
 800073c:	af00      	add	r7, sp, #0
 800073e:	4603      	mov	r3, r0
 8000740:	71fb      	strb	r3, [r7, #7]
	return FT6206_Ok;
 8000742:	2300      	movs	r3, #0
}
 8000744:	4618      	mov	r0, r3
 8000746:	370c      	adds	r7, #12
 8000748:	46bd      	mov	sp, r7
 800074a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074e:	4770      	bx	lr

08000750 <ILI9341_Init>:
 *@brief: Initializes the LCD Hardware and prepares it to receive image data
 * See https://cdn-shop.adafruit.com/datasheets/ILI9341.pdf for details regarding commands and data
 * Credit to ST Micro ILI9341.c Driver for initilization sequence
 ******************************************************************/

void ILI9341_Init(ILI9341_Init_Struct_t Settings, ILI9341_Handle_t *Dev, ILI9341_IO_Drv_t IO_Driver){
 8000750:	b5b0      	push	{r4, r5, r7, lr}
 8000752:	b08a      	sub	sp, #40	; 0x28
 8000754:	af00      	add	r7, sp, #0
 8000756:	1d3c      	adds	r4, r7, #4
 8000758:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800075c:	603b      	str	r3, [r7, #0]
	Dev->Orientation = Settings.Orientation;
 800075e:	793a      	ldrb	r2, [r7, #4]
 8000760:	683b      	ldr	r3, [r7, #0]
 8000762:	701a      	strb	r2, [r3, #0]
	Dev->ScreenHeight = Settings.ScreenHeight;
 8000764:	68fa      	ldr	r2, [r7, #12]
 8000766:	683b      	ldr	r3, [r7, #0]
 8000768:	609a      	str	r2, [r3, #8]
	Dev->ScreenWidth = Settings.ScreenWidth;
 800076a:	68ba      	ldr	r2, [r7, #8]
 800076c:	683b      	ldr	r3, [r7, #0]
 800076e:	605a      	str	r2, [r3, #4]
	Dev->Cursor.X = 0;
 8000770:	683b      	ldr	r3, [r7, #0]
 8000772:	2200      	movs	r2, #0
 8000774:	819a      	strh	r2, [r3, #12]
	Dev->Cursor.Y = 0;
 8000776:	683b      	ldr	r3, [r7, #0]
 8000778:	2200      	movs	r2, #0
 800077a:	81da      	strh	r2, [r3, #14]
	Dev->IO_Drv = IO_Driver;
 800077c:	683b      	ldr	r3, [r7, #0]
 800077e:	f103 0410 	add.w	r4, r3, #16
 8000782:	f107 0538 	add.w	r5, r7, #56	; 0x38
 8000786:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000788:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800078a:	682b      	ldr	r3, [r5, #0]
 800078c:	6023      	str	r3, [r4, #0]

	Dev->IO_Drv.init();
 800078e:	683b      	ldr	r3, [r7, #0]
 8000790:	691b      	ldr	r3, [r3, #16]
 8000792:	4798      	blx	r3
	uint8_t buffer[20];


	Dev->IO_Drv.write(ILI9341_SWRESET, buffer, 0);
 8000794:	683b      	ldr	r3, [r7, #0]
 8000796:	699b      	ldr	r3, [r3, #24]
 8000798:	f107 0114 	add.w	r1, r7, #20
 800079c:	2200      	movs	r2, #0
 800079e:	2001      	movs	r0, #1
 80007a0:	4798      	blx	r3
	Dev->IO_Drv.ioctl(ILI9341_Delay1000);
 80007a2:	683b      	ldr	r3, [r7, #0]
 80007a4:	6a1b      	ldr	r3, [r3, #32]
 80007a6:	2001      	movs	r0, #1
 80007a8:	4798      	blx	r3
    

	//Power Control A - Page 195
    buffer[0] = 0x39;
 80007aa:	2339      	movs	r3, #57	; 0x39
 80007ac:	753b      	strb	r3, [r7, #20]
    buffer[1] = 0x2C;
 80007ae:	232c      	movs	r3, #44	; 0x2c
 80007b0:	757b      	strb	r3, [r7, #21]
    buffer[2] = 0x00;
 80007b2:	2300      	movs	r3, #0
 80007b4:	75bb      	strb	r3, [r7, #22]
    buffer[3] = 0x34;
 80007b6:	2334      	movs	r3, #52	; 0x34
 80007b8:	75fb      	strb	r3, [r7, #23]
    buffer[4] = 0x02;
 80007ba:	2302      	movs	r3, #2
 80007bc:	763b      	strb	r3, [r7, #24]
	Dev->IO_Drv.write(ILI9341_PWRCONTROLA, buffer, 5);
 80007be:	683b      	ldr	r3, [r7, #0]
 80007c0:	699b      	ldr	r3, [r3, #24]
 80007c2:	f107 0114 	add.w	r1, r7, #20
 80007c6:	2205      	movs	r2, #5
 80007c8:	20cb      	movs	r0, #203	; 0xcb
 80007ca:	4798      	blx	r3


	//Power Control B - Page 196
    buffer[0] = 0x00;
 80007cc:	2300      	movs	r3, #0
 80007ce:	753b      	strb	r3, [r7, #20]
    buffer[1] = 0xC1;
 80007d0:	23c1      	movs	r3, #193	; 0xc1
 80007d2:	757b      	strb	r3, [r7, #21]
    buffer[2] = 0x30;
 80007d4:	2330      	movs	r3, #48	; 0x30
 80007d6:	75bb      	strb	r3, [r7, #22]
    Dev->IO_Drv.write(ILI9341_PWRCONTROLB, buffer, 3);
 80007d8:	683b      	ldr	r3, [r7, #0]
 80007da:	699b      	ldr	r3, [r3, #24]
 80007dc:	f107 0114 	add.w	r1, r7, #20
 80007e0:	2203      	movs	r2, #3
 80007e2:	20cf      	movs	r0, #207	; 0xcf
 80007e4:	4798      	blx	r3

    //Driver Timing Control A - Page 197
    buffer[0] = 0x85;
 80007e6:	2385      	movs	r3, #133	; 0x85
 80007e8:	753b      	strb	r3, [r7, #20]
    buffer[1] = 0x00;
 80007ea:	2300      	movs	r3, #0
 80007ec:	757b      	strb	r3, [r7, #21]
    buffer[2] = 0x78;
 80007ee:	2378      	movs	r3, #120	; 0x78
 80007f0:	75bb      	strb	r3, [r7, #22]
    Dev->IO_Drv.write(ILI9341_TIMINGCONTROLA, buffer, 3);
 80007f2:	683b      	ldr	r3, [r7, #0]
 80007f4:	699b      	ldr	r3, [r3, #24]
 80007f6:	f107 0114 	add.w	r1, r7, #20
 80007fa:	2203      	movs	r2, #3
 80007fc:	20e8      	movs	r0, #232	; 0xe8
 80007fe:	4798      	blx	r3

    //Driver Timing Control B - Page 199
    buffer[0] = 0x00;
 8000800:	2300      	movs	r3, #0
 8000802:	753b      	strb	r3, [r7, #20]
    buffer[1] = 0x00;
 8000804:	2300      	movs	r3, #0
 8000806:	757b      	strb	r3, [r7, #21]
    Dev->IO_Drv.write(ILI9341_TIMINGCONTROLB, buffer, 2);
 8000808:	683b      	ldr	r3, [r7, #0]
 800080a:	699b      	ldr	r3, [r3, #24]
 800080c:	f107 0114 	add.w	r1, r7, #20
 8000810:	2202      	movs	r2, #2
 8000812:	20ea      	movs	r0, #234	; 0xea
 8000814:	4798      	blx	r3

    //Power on Sequence Control - Page 200
    buffer[0] = 0x64;
 8000816:	2364      	movs	r3, #100	; 0x64
 8000818:	753b      	strb	r3, [r7, #20]
    buffer[1] = 0x03;
 800081a:	2303      	movs	r3, #3
 800081c:	757b      	strb	r3, [r7, #21]
    buffer[2] = 0x12;
 800081e:	2312      	movs	r3, #18
 8000820:	75bb      	strb	r3, [r7, #22]
    buffer[3] = 0x81;
 8000822:	2381      	movs	r3, #129	; 0x81
 8000824:	75fb      	strb	r3, [r7, #23]
    Dev->IO_Drv.write(ILI9341_Pwr_on_sequence_control, buffer, 4);
 8000826:	683b      	ldr	r3, [r7, #0]
 8000828:	699b      	ldr	r3, [r3, #24]
 800082a:	f107 0114 	add.w	r1, r7, #20
 800082e:	2204      	movs	r2, #4
 8000830:	20ed      	movs	r0, #237	; 0xed
 8000832:	4798      	blx	r3

    //Pump Ratio Control - Page 202
    buffer[0] = 0x20;
 8000834:	2320      	movs	r3, #32
 8000836:	753b      	strb	r3, [r7, #20]
    Dev->IO_Drv.write(ILI9341_Pump_ratio_control, buffer, 1);
 8000838:	683b      	ldr	r3, [r7, #0]
 800083a:	699b      	ldr	r3, [r3, #24]
 800083c:	f107 0114 	add.w	r1, r7, #20
 8000840:	2201      	movs	r2, #1
 8000842:	20f7      	movs	r0, #247	; 0xf7
 8000844:	4798      	blx	r3

    //Power Control 1 - Page 178
    buffer[0] = 0x10;
 8000846:	2310      	movs	r3, #16
 8000848:	753b      	strb	r3, [r7, #20]
    Dev->IO_Drv.write(ILI9341_PWCTRL_1, buffer, 1);
 800084a:	683b      	ldr	r3, [r7, #0]
 800084c:	699b      	ldr	r3, [r3, #24]
 800084e:	f107 0114 	add.w	r1, r7, #20
 8000852:	2201      	movs	r2, #1
 8000854:	20c0      	movs	r0, #192	; 0xc0
 8000856:	4798      	blx	r3

    //Power Control 2 - Page 179
    buffer[0] = 0x10;
 8000858:	2310      	movs	r3, #16
 800085a:	753b      	strb	r3, [r7, #20]
    Dev->IO_Drv.write(ILI9341_PWCTRL_2, buffer, 1);
 800085c:	683b      	ldr	r3, [r7, #0]
 800085e:	699b      	ldr	r3, [r3, #24]
 8000860:	f107 0114 	add.w	r1, r7, #20
 8000864:	2201      	movs	r2, #1
 8000866:	20c1      	movs	r0, #193	; 0xc1
 8000868:	4798      	blx	r3

    //VCOM Control 1 - Page 180
    buffer[0] = 0x45;
 800086a:	2345      	movs	r3, #69	; 0x45
 800086c:	753b      	strb	r3, [r7, #20]
    buffer[1] = 0x15;
 800086e:	2315      	movs	r3, #21
 8000870:	757b      	strb	r3, [r7, #21]
    Dev->IO_Drv.write(ILI9341_VMCTRL1, buffer, 2);
 8000872:	683b      	ldr	r3, [r7, #0]
 8000874:	699b      	ldr	r3, [r3, #24]
 8000876:	f107 0114 	add.w	r1, r7, #20
 800087a:	2202      	movs	r2, #2
 800087c:	20c5      	movs	r0, #197	; 0xc5
 800087e:	4798      	blx	r3

    //VCOM Control 2 - Page 182
    buffer[0] = 0x90;
 8000880:	2390      	movs	r3, #144	; 0x90
 8000882:	753b      	strb	r3, [r7, #20]
    Dev->IO_Drv.write(ILI9341_VMCTRL2, buffer, 1);
 8000884:	683b      	ldr	r3, [r7, #0]
 8000886:	699b      	ldr	r3, [r3, #24]
 8000888:	f107 0114 	add.w	r1, r7, #20
 800088c:	2201      	movs	r2, #1
 800088e:	20c7      	movs	r0, #199	; 0xc7
 8000890:	4798      	blx	r3

    //Memory Access Control - Page 127
    buffer[0] = 0x30;
 8000892:	2330      	movs	r3, #48	; 0x30
 8000894:	753b      	strb	r3, [r7, #20]
    Dev->IO_Drv.write(ILI9341_MADCTL, buffer, 1);
 8000896:	683b      	ldr	r3, [r7, #0]
 8000898:	699b      	ldr	r3, [r3, #24]
 800089a:	f107 0114 	add.w	r1, r7, #20
 800089e:	2201      	movs	r2, #1
 80008a0:	2036      	movs	r0, #54	; 0x36
 80008a2:	4798      	blx	r3

    //Pixel Format Set - Page 134
    buffer[0] = 0x66;
 80008a4:	2366      	movs	r3, #102	; 0x66
 80008a6:	753b      	strb	r3, [r7, #20]
    Dev->IO_Drv.write(ILI9341_PIXSET, buffer, 1);
 80008a8:	683b      	ldr	r3, [r7, #0]
 80008aa:	699b      	ldr	r3, [r3, #24]
 80008ac:	f107 0114 	add.w	r1, r7, #20
 80008b0:	2201      	movs	r2, #1
 80008b2:	203a      	movs	r0, #58	; 0x3a
 80008b4:	4798      	blx	r3

    //Frame Rate Control (In Normal Mode/Full Colors) - Page 155
    buffer[0] = 0x00;
 80008b6:	2300      	movs	r3, #0
 80008b8:	753b      	strb	r3, [r7, #20]
    buffer[1] = 0x18;
 80008ba:	2318      	movs	r3, #24
 80008bc:	757b      	strb	r3, [r7, #21]
    Dev->IO_Drv.write(ILI9341_FRMCTR1, buffer, 2);
 80008be:	683b      	ldr	r3, [r7, #0]
 80008c0:	699b      	ldr	r3, [r3, #24]
 80008c2:	f107 0114 	add.w	r1, r7, #20
 80008c6:	2202      	movs	r2, #2
 80008c8:	20b1      	movs	r0, #177	; 0xb1
 80008ca:	4798      	blx	r3

    // Display Function Control - Page 164
    buffer[0] = 0x08;
 80008cc:	2308      	movs	r3, #8
 80008ce:	753b      	strb	r3, [r7, #20]
    buffer[1] = 0x82;
 80008d0:	2382      	movs	r3, #130	; 0x82
 80008d2:	757b      	strb	r3, [r7, #21]
    buffer[2] = 0x27;
 80008d4:	2327      	movs	r3, #39	; 0x27
 80008d6:	75bb      	strb	r3, [r7, #22]
    Dev->IO_Drv.write(ILI9341_DISCTRL, buffer, 3);
 80008d8:	683b      	ldr	r3, [r7, #0]
 80008da:	699b      	ldr	r3, [r3, #24]
 80008dc:	f107 0114 	add.w	r1, r7, #20
 80008e0:	2203      	movs	r2, #3
 80008e2:	20b6      	movs	r0, #182	; 0xb6
 80008e4:	4798      	blx	r3

    //Enable 3G - Page 201
    buffer[0] = 0x00;
 80008e6:	2300      	movs	r3, #0
 80008e8:	753b      	strb	r3, [r7, #20]
    Dev->IO_Drv.write(ILI9341_Enable_3G, buffer, 1);
 80008ea:	683b      	ldr	r3, [r7, #0]
 80008ec:	699b      	ldr	r3, [r3, #24]
 80008ee:	f107 0114 	add.w	r1, r7, #20
 80008f2:	2201      	movs	r2, #1
 80008f4:	20f2      	movs	r0, #242	; 0xf2
 80008f6:	4798      	blx	r3

    //Gamma Set - Page 107
    buffer[0] = 0x01;
 80008f8:	2301      	movs	r3, #1
 80008fa:	753b      	strb	r3, [r7, #20]
    Dev->IO_Drv.write(ILI9341_GAMSET, buffer, 1);
 80008fc:	683b      	ldr	r3, [r7, #0]
 80008fe:	699b      	ldr	r3, [r3, #24]
 8000900:	f107 0114 	add.w	r1, r7, #20
 8000904:	2201      	movs	r2, #1
 8000906:	2026      	movs	r0, #38	; 0x26
 8000908:	4798      	blx	r3

    //Positive Gamma Correction - Page 188
    buffer[0] = 0x0F;
 800090a:	230f      	movs	r3, #15
 800090c:	753b      	strb	r3, [r7, #20]
    buffer[1] = 0x29;
 800090e:	2329      	movs	r3, #41	; 0x29
 8000910:	757b      	strb	r3, [r7, #21]
    buffer[2] = 0x24;
 8000912:	2324      	movs	r3, #36	; 0x24
 8000914:	75bb      	strb	r3, [r7, #22]
    buffer[3] = 0x0C;
 8000916:	230c      	movs	r3, #12
 8000918:	75fb      	strb	r3, [r7, #23]
    buffer[4] = 0x0E;
 800091a:	230e      	movs	r3, #14
 800091c:	763b      	strb	r3, [r7, #24]
    buffer[5] = 0x09;
 800091e:	2309      	movs	r3, #9
 8000920:	767b      	strb	r3, [r7, #25]
    buffer[6] = 0x4E;
 8000922:	234e      	movs	r3, #78	; 0x4e
 8000924:	76bb      	strb	r3, [r7, #26]
    buffer[7] = 0x78;
 8000926:	2378      	movs	r3, #120	; 0x78
 8000928:	76fb      	strb	r3, [r7, #27]
    buffer[8] = 0x3C;
 800092a:	233c      	movs	r3, #60	; 0x3c
 800092c:	773b      	strb	r3, [r7, #28]
    buffer[9] = 0x09;
 800092e:	2309      	movs	r3, #9
 8000930:	777b      	strb	r3, [r7, #29]
    buffer[10] = 0x13;
 8000932:	2313      	movs	r3, #19
 8000934:	77bb      	strb	r3, [r7, #30]
    buffer[11] = 0x05;
 8000936:	2305      	movs	r3, #5
 8000938:	77fb      	strb	r3, [r7, #31]
    buffer[12] = 0x17;
 800093a:	2317      	movs	r3, #23
 800093c:	f887 3020 	strb.w	r3, [r7, #32]
    buffer[13] = 0x11;
 8000940:	2311      	movs	r3, #17
 8000942:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    buffer[14] = 0x00;
 8000946:	2300      	movs	r3, #0
 8000948:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    Dev->IO_Drv.write(ILI9341_PGAMCTRL, buffer, 15);
 800094c:	683b      	ldr	r3, [r7, #0]
 800094e:	699b      	ldr	r3, [r3, #24]
 8000950:	f107 0114 	add.w	r1, r7, #20
 8000954:	220f      	movs	r2, #15
 8000956:	20e0      	movs	r0, #224	; 0xe0
 8000958:	4798      	blx	r3

    //Negative Gamma Correction - Page 189
    buffer[0] = 0x00;
 800095a:	2300      	movs	r3, #0
 800095c:	753b      	strb	r3, [r7, #20]
    buffer[1] = 0x16;
 800095e:	2316      	movs	r3, #22
 8000960:	757b      	strb	r3, [r7, #21]
    buffer[2] = 0x1B;
 8000962:	231b      	movs	r3, #27
 8000964:	75bb      	strb	r3, [r7, #22]
    buffer[3] = 0x04;
 8000966:	2304      	movs	r3, #4
 8000968:	75fb      	strb	r3, [r7, #23]
    buffer[4] = 0x11;
 800096a:	2311      	movs	r3, #17
 800096c:	763b      	strb	r3, [r7, #24]
    buffer[5] = 0x07;
 800096e:	2307      	movs	r3, #7
 8000970:	767b      	strb	r3, [r7, #25]
    buffer[6] = 0x31;
 8000972:	2331      	movs	r3, #49	; 0x31
 8000974:	76bb      	strb	r3, [r7, #26]
    buffer[7] = 0x33;
 8000976:	2333      	movs	r3, #51	; 0x33
 8000978:	76fb      	strb	r3, [r7, #27]
    buffer[8] = 0x42;
 800097a:	2342      	movs	r3, #66	; 0x42
 800097c:	773b      	strb	r3, [r7, #28]
    buffer[9] = 0x05;
 800097e:	2305      	movs	r3, #5
 8000980:	777b      	strb	r3, [r7, #29]
    buffer[10] = 0x0C;
 8000982:	230c      	movs	r3, #12
 8000984:	77bb      	strb	r3, [r7, #30]
    buffer[11] = 0x0A;
 8000986:	230a      	movs	r3, #10
 8000988:	77fb      	strb	r3, [r7, #31]
    buffer[12] = 0x28;
 800098a:	2328      	movs	r3, #40	; 0x28
 800098c:	f887 3020 	strb.w	r3, [r7, #32]
    buffer[13] = 0x2F;
 8000990:	232f      	movs	r3, #47	; 0x2f
 8000992:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    buffer[14] = 0x0F;
 8000996:	230f      	movs	r3, #15
 8000998:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    Dev->IO_Drv.write(ILI9341_NGAMCTRL, buffer, 15);
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	699b      	ldr	r3, [r3, #24]
 80009a0:	f107 0114 	add.w	r1, r7, #20
 80009a4:	220f      	movs	r2, #15
 80009a6:	20e1      	movs	r0, #225	; 0xe1
 80009a8:	4798      	blx	r3

    //Sleep Out - Page 101
    Dev->IO_Drv.write(ILI9341_SLPOUT, buffer, 0);
 80009aa:	683b      	ldr	r3, [r7, #0]
 80009ac:	699b      	ldr	r3, [r3, #24]
 80009ae:	f107 0114 	add.w	r1, r7, #20
 80009b2:	2200      	movs	r2, #0
 80009b4:	2011      	movs	r0, #17
 80009b6:	4798      	blx	r3
    Dev->IO_Drv.ioctl(ILI9341_Delay150);
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	6a1b      	ldr	r3, [r3, #32]
 80009bc:	2000      	movs	r0, #0
 80009be:	4798      	blx	r3


    //Display ON - Page 109
    Dev->IO_Drv.write(ILI9341_DISPON, buffer, 0);
 80009c0:	683b      	ldr	r3, [r7, #0]
 80009c2:	699b      	ldr	r3, [r3, #24]
 80009c4:	f107 0114 	add.w	r1, r7, #20
 80009c8:	2200      	movs	r2, #0
 80009ca:	2029      	movs	r0, #41	; 0x29
 80009cc:	4798      	blx	r3

    Dev->IO_Drv.write(ILI9341_MADCTL, &Settings.Orientation,1);
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	699b      	ldr	r3, [r3, #24]
 80009d2:	1d39      	adds	r1, r7, #4
 80009d4:	2201      	movs	r2, #1
 80009d6:	2036      	movs	r0, #54	; 0x36
 80009d8:	4798      	blx	r3
}
 80009da:	bf00      	nop
 80009dc:	3728      	adds	r7, #40	; 0x28
 80009de:	46bd      	mov	sp, r7
 80009e0:	bdb0      	pop	{r4, r5, r7, pc}

080009e2 <ILI9341_FillSceen>:
void ILI9341_DrawPixel(ILI9341_Handle_t *Dev, ILI9341_Color_t Color, ILI9341_Coordinate_t Position){
    ILI9341_SetCoordinates(Dev,Position,Position);
    Dev->IO_Drv.write(ILI9341_RAMWR,(uint8_t*)&Color,3);
}

void ILI9341_FillSceen(ILI9341_Handle_t *Dev, ILI9341_Color_t Color){
 80009e2:	b580      	push	{r7, lr}
 80009e4:	b084      	sub	sp, #16
 80009e6:	af00      	add	r7, sp, #0
 80009e8:	6078      	str	r0, [r7, #4]
 80009ea:	6039      	str	r1, [r7, #0]
    ILI9341_Coordinate_t CoordinateStart = {.X = 0, .Y = 0};
 80009ec:	2300      	movs	r3, #0
 80009ee:	81bb      	strh	r3, [r7, #12]
 80009f0:	2300      	movs	r3, #0
 80009f2:	81fb      	strh	r3, [r7, #14]
    ILI9341_Coordinate_t CoordinateEnd = {.X = Dev->ScreenWidth-1, .Y = Dev->ScreenHeight-1};
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	685b      	ldr	r3, [r3, #4]
 80009f8:	b29b      	uxth	r3, r3
 80009fa:	3b01      	subs	r3, #1
 80009fc:	b29b      	uxth	r3, r3
 80009fe:	b21b      	sxth	r3, r3
 8000a00:	813b      	strh	r3, [r7, #8]
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	689b      	ldr	r3, [r3, #8]
 8000a06:	b29b      	uxth	r3, r3
 8000a08:	3b01      	subs	r3, #1
 8000a0a:	b29b      	uxth	r3, r3
 8000a0c:	b21b      	sxth	r3, r3
 8000a0e:	817b      	strh	r3, [r7, #10]
    ILI9341_SetCoordinates(Dev, CoordinateStart, CoordinateEnd);
 8000a10:	68ba      	ldr	r2, [r7, #8]
 8000a12:	68f9      	ldr	r1, [r7, #12]
 8000a14:	6878      	ldr	r0, [r7, #4]
 8000a16:	f000 f811 	bl	8000a3c <ILI9341_SetCoordinates>
    Dev->IO_Drv.write(ILI9341_RAMWR,(uint8_t*)&Color, 0);
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	699b      	ldr	r3, [r3, #24]
 8000a1e:	4639      	mov	r1, r7
 8000a20:	2200      	movs	r2, #0
 8000a22:	202c      	movs	r0, #44	; 0x2c
 8000a24:	4798      	blx	r3
    Dev->IO_Drv.write(ILI9341_NOCOMMAND, (uint8_t*)&Color, TOTAL_SCREEN_BYTES);
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	699b      	ldr	r3, [r3, #24]
 8000a2a:	4639      	mov	r1, r7
 8000a2c:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8000a30:	20ff      	movs	r0, #255	; 0xff
 8000a32:	4798      	blx	r3
}
 8000a34:	bf00      	nop
 8000a36:	3710      	adds	r7, #16
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}

08000a3c <ILI9341_SetCoordinates>:
    uint32_t TotalBytes = width*height*3;
    Dev->IO_Drv.write(ILI9341_RAMWR,(uint8_t*)&Color,0);
    Dev->IO_Drv.write(ILI9341_NOCOMMAND, (uint8_t*)&Color, TotalBytes);
}

static void ILI9341_SetCoordinates(ILI9341_Handle_t *Dev, ILI9341_Coordinate_t StartCorner, ILI9341_Coordinate_t EndCorner){
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b086      	sub	sp, #24
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	60f8      	str	r0, [r7, #12]
 8000a44:	60b9      	str	r1, [r7, #8]
 8000a46:	607a      	str	r2, [r7, #4]
    ILI9341_DrawBounds_t Coordinate = {.S_MSB = StartCorner.X >> 8, .S_LSB = StartCorner.X, .E_MSB = EndCorner.X >> 8, .E_LSB = EndCorner.X};
 8000a48:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000a4c:	121b      	asrs	r3, r3, #8
 8000a4e:	b21b      	sxth	r3, r3
 8000a50:	b2db      	uxtb	r3, r3
 8000a52:	753b      	strb	r3, [r7, #20]
 8000a54:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000a58:	b2db      	uxtb	r3, r3
 8000a5a:	757b      	strb	r3, [r7, #21]
 8000a5c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000a60:	121b      	asrs	r3, r3, #8
 8000a62:	b21b      	sxth	r3, r3
 8000a64:	b2db      	uxtb	r3, r3
 8000a66:	75bb      	strb	r3, [r7, #22]
 8000a68:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000a6c:	b2db      	uxtb	r3, r3
 8000a6e:	75fb      	strb	r3, [r7, #23]
    Dev->IO_Drv.write(ILI9341_CASET,(uint8_t*)&Coordinate,4);
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	699b      	ldr	r3, [r3, #24]
 8000a74:	f107 0114 	add.w	r1, r7, #20
 8000a78:	2204      	movs	r2, #4
 8000a7a:	202a      	movs	r0, #42	; 0x2a
 8000a7c:	4798      	blx	r3
    Coordinate.S_MSB = StartCorner.Y >> 8;
 8000a7e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000a82:	121b      	asrs	r3, r3, #8
 8000a84:	b21b      	sxth	r3, r3
 8000a86:	b2db      	uxtb	r3, r3
 8000a88:	753b      	strb	r3, [r7, #20]
    Coordinate.S_LSB = StartCorner.Y;
 8000a8a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000a8e:	b2db      	uxtb	r3, r3
 8000a90:	757b      	strb	r3, [r7, #21]
    Coordinate.E_MSB = EndCorner.Y >> 8;
 8000a92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a96:	121b      	asrs	r3, r3, #8
 8000a98:	b21b      	sxth	r3, r3
 8000a9a:	b2db      	uxtb	r3, r3
 8000a9c:	75bb      	strb	r3, [r7, #22]
    Coordinate.E_LSB = EndCorner.Y;
 8000a9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000aa2:	b2db      	uxtb	r3, r3
 8000aa4:	75fb      	strb	r3, [r7, #23]
    Dev->IO_Drv.write(ILI9341_PASET,(uint8_t*)&Coordinate,4);
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	699b      	ldr	r3, [r3, #24]
 8000aaa:	f107 0114 	add.w	r1, r7, #20
 8000aae:	2204      	movs	r2, #4
 8000ab0:	202b      	movs	r0, #43	; 0x2b
 8000ab2:	4798      	blx	r3
}
 8000ab4:	bf00      	nop
 8000ab6:	3718      	adds	r7, #24
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}

08000abc <ILI9341_DisplayImage>:
        return DimensionsInvalid;
    }
    return DimensionsValid;
}

void ILI9341_DisplayImage(ILI9341_Handle_t *Dev, const ILI9341_Image_t Image){
 8000abc:	b084      	sub	sp, #16
 8000abe:	b580      	push	{r7, lr}
 8000ac0:	b084      	sub	sp, #16
 8000ac2:	af00      	add	r7, sp, #0
 8000ac4:	6078      	str	r0, [r7, #4]
 8000ac6:	f107 001c 	add.w	r0, r7, #28
 8000aca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    ILI9341_Coordinate_t CoordinateStart = {.X = Dev->Cursor.X, .Y = Dev->Cursor.Y};
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8000ad4:	81bb      	strh	r3, [r7, #12]
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000adc:	81fb      	strh	r3, [r7, #14]
    ILI9341_Coordinate_t CoordinateEnd = {.X = CoordinateStart.X + Image.Width - 1, .Y = CoordinateStart.Y + Image.Height - 1};
 8000ade:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000ae2:	b29a      	uxth	r2, r3
 8000ae4:	69fb      	ldr	r3, [r7, #28]
 8000ae6:	b29b      	uxth	r3, r3
 8000ae8:	4413      	add	r3, r2
 8000aea:	b29b      	uxth	r3, r3
 8000aec:	3b01      	subs	r3, #1
 8000aee:	b29b      	uxth	r3, r3
 8000af0:	b21b      	sxth	r3, r3
 8000af2:	813b      	strh	r3, [r7, #8]
 8000af4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000af8:	b29a      	uxth	r2, r3
 8000afa:	6a3b      	ldr	r3, [r7, #32]
 8000afc:	b29b      	uxth	r3, r3
 8000afe:	4413      	add	r3, r2
 8000b00:	b29b      	uxth	r3, r3
 8000b02:	3b01      	subs	r3, #1
 8000b04:	b29b      	uxth	r3, r3
 8000b06:	b21b      	sxth	r3, r3
 8000b08:	817b      	strh	r3, [r7, #10]
    ILI9341_SetCoordinates(Dev,CoordinateStart,CoordinateEnd);
 8000b0a:	68ba      	ldr	r2, [r7, #8]
 8000b0c:	68f9      	ldr	r1, [r7, #12]
 8000b0e:	6878      	ldr	r0, [r7, #4]
 8000b10:	f7ff ff94 	bl	8000a3c <ILI9341_SetCoordinates>
    //Dev->IO_Drv.write(ILI9341_RAMWR,(uint8_t*)&dummy,0);
    Dev->IO_Drv.write(ILI9341_RAMWR, (uint8_t*)Image.ImageData, Image.ImageLength);
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	699b      	ldr	r3, [r3, #24]
 8000b18:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000b1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b1c:	202c      	movs	r0, #44	; 0x2c
 8000b1e:	4798      	blx	r3
}
 8000b20:	bf00      	nop
 8000b22:	3710      	adds	r7, #16
 8000b24:	46bd      	mov	sp, r7
 8000b26:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000b2a:	b004      	add	sp, #16
 8000b2c:	4770      	bx	lr

08000b2e <ILI9341_IO_Init>:
#include "gpio.h"

static void ILI9341_CSState(uint8_t state);
static void ILI9341_DCRSState(uint8_t state);

static void ILI9341_IO_Init(void){
 8000b2e:	b580      	push	{r7, lr}
 8000b30:	af00      	add	r7, sp, #0
  ILI9341_GPIO_Init();
 8000b32:	f000 fd21 	bl	8001578 <ILI9341_GPIO_Init>
  ILI9341_SPI_Init();
 8000b36:	f001 fb4f 	bl	80021d8 <ILI9341_SPI_Init>
}
 8000b3a:	bf00      	nop
 8000b3c:	bd80      	pop	{r7, pc}

08000b3e <ILI9341_IO_DeInit>:

static void ILI9341_IO_DeInit(void){
 8000b3e:	b580      	push	{r7, lr}
 8000b40:	af00      	add	r7, sp, #0
	ILI9341_GPIO_DeInit();
 8000b42:	f000 fd5b 	bl	80015fc <ILI9341_GPIO_DeInit>
}
 8000b46:	bf00      	nop
 8000b48:	bd80      	pop	{r7, pc}

08000b4a <ILI9341_IO_ioctl>:

static ILI9341_Status_t ILI9341_IO_ioctl(ILI9341_Cmd_t Command){
 8000b4a:	b580      	push	{r7, lr}
 8000b4c:	b082      	sub	sp, #8
 8000b4e:	af00      	add	r7, sp, #0
 8000b50:	4603      	mov	r3, r0
 8000b52:	71fb      	strb	r3, [r7, #7]
    switch(Command){
 8000b54:	79fb      	ldrb	r3, [r7, #7]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d002      	beq.n	8000b60 <ILI9341_IO_ioctl+0x16>
 8000b5a:	2b01      	cmp	r3, #1
 8000b5c:	d005      	beq.n	8000b6a <ILI9341_IO_ioctl+0x20>
 8000b5e:	e00a      	b.n	8000b76 <ILI9341_IO_ioctl+0x2c>
    case(ILI9341_Delay150):
    		HAL_Delay(150);
 8000b60:	2096      	movs	r0, #150	; 0x96
 8000b62:	f002 fad7 	bl	8003114 <HAL_Delay>
            return ILI9341_Ok;
 8000b66:	2300      	movs	r3, #0
 8000b68:	e006      	b.n	8000b78 <ILI9341_IO_ioctl+0x2e>
    case(ILI9341_Delay1000):
    		HAL_Delay(1000);
 8000b6a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b6e:	f002 fad1 	bl	8003114 <HAL_Delay>
            return ILI9341_Ok;
 8000b72:	2300      	movs	r3, #0
 8000b74:	e000      	b.n	8000b78 <ILI9341_IO_ioctl+0x2e>
    default:
    	return ILI9341_Ok;
 8000b76:	2300      	movs	r3, #0
    }
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	3708      	adds	r7, #8
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}

08000b80 <ILI9341_IO_WriteReg>:

static ILI9341_Status_t ILI9341_IO_WriteReg(uint8_t reg, uint8_t* pdata, uint32_t length){
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b086      	sub	sp, #24
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	4603      	mov	r3, r0
 8000b88:	60b9      	str	r1, [r7, #8]
 8000b8a:	607a      	str	r2, [r7, #4]
 8000b8c:	73fb      	strb	r3, [r7, #15]
	ILI9341_CSState(GPIO_PIN_RESET);
 8000b8e:	2000      	movs	r0, #0
 8000b90:	f000 f8ae 	bl	8000cf0 <ILI9341_CSState>
	if(reg != 0xFF){
 8000b94:	7bfb      	ldrb	r3, [r7, #15]
 8000b96:	2bff      	cmp	r3, #255	; 0xff
 8000b98:	d00f      	beq.n	8000bba <ILI9341_IO_WriteReg+0x3a>
		ILI9341_DCRSState(GPIO_PIN_RESET);
 8000b9a:	2000      	movs	r0, #0
 8000b9c:	f000 f8c2 	bl	8000d24 <ILI9341_DCRSState>
		if(HAL_SPI_Transmit(&hspi1, &reg, 1, 1000) != HAL_OK){
 8000ba0:	f107 010f 	add.w	r1, r7, #15
 8000ba4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ba8:	2201      	movs	r2, #1
 8000baa:	4834      	ldr	r0, [pc, #208]	; (8000c7c <ILI9341_IO_WriteReg+0xfc>)
 8000bac:	f006 fe75 	bl	800789a <HAL_SPI_Transmit>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <ILI9341_IO_WriteReg+0x3a>
			return ILI9341_Err;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	e05c      	b.n	8000c74 <ILI9341_IO_WriteReg+0xf4>
		}
	}

	ILI9341_DCRSState(GPIO_PIN_SET);
 8000bba:	2001      	movs	r0, #1
 8000bbc:	f000 f8b2 	bl	8000d24 <ILI9341_DCRSState>
	if(length != 0 && reg != 0xFF){
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d00f      	beq.n	8000be6 <ILI9341_IO_WriteReg+0x66>
 8000bc6:	7bfb      	ldrb	r3, [r7, #15]
 8000bc8:	2bff      	cmp	r3, #255	; 0xff
 8000bca:	d00c      	beq.n	8000be6 <ILI9341_IO_WriteReg+0x66>
		if(HAL_SPI_Transmit(&hspi1, pdata, length, 1000) != HAL_OK){
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	b29a      	uxth	r2, r3
 8000bd0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bd4:	68b9      	ldr	r1, [r7, #8]
 8000bd6:	4829      	ldr	r0, [pc, #164]	; (8000c7c <ILI9341_IO_WriteReg+0xfc>)
 8000bd8:	f006 fe5f 	bl	800789a <HAL_SPI_Transmit>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d047      	beq.n	8000c72 <ILI9341_IO_WriteReg+0xf2>
			return ILI9341_Err;
 8000be2:	2301      	movs	r3, #1
 8000be4:	e046      	b.n	8000c74 <ILI9341_IO_WriteReg+0xf4>
		}
	}else if(length != 0 && reg == 0xFF){
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d03f      	beq.n	8000c6c <ILI9341_IO_WriteReg+0xec>
 8000bec:	7bfb      	ldrb	r3, [r7, #15]
 8000bee:	2bff      	cmp	r3, #255	; 0xff
 8000bf0:	d13c      	bne.n	8000c6c <ILI9341_IO_WriteReg+0xec>
        for(uint32_t i = 0; i < length; i = i + 3){
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	617b      	str	r3, [r7, #20]
 8000bf6:	e034      	b.n	8000c62 <ILI9341_IO_WriteReg+0xe2>
    		if(HAL_SPI_Transmit(&hspi1, pdata, 1, 1000) != HAL_OK){
 8000bf8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	68b9      	ldr	r1, [r7, #8]
 8000c00:	481e      	ldr	r0, [pc, #120]	; (8000c7c <ILI9341_IO_WriteReg+0xfc>)
 8000c02:	f006 fe4a 	bl	800789a <HAL_SPI_Transmit>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <ILI9341_IO_WriteReg+0x90>
    			return ILI9341_Err;
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	e031      	b.n	8000c74 <ILI9341_IO_WriteReg+0xf4>
    		}

    		if(HAL_SPI_Transmit(&hspi1, pdata + 1, 1, 1000) != HAL_OK){
 8000c10:	68bb      	ldr	r3, [r7, #8]
 8000c12:	1c59      	adds	r1, r3, #1
 8000c14:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c18:	2201      	movs	r2, #1
 8000c1a:	4818      	ldr	r0, [pc, #96]	; (8000c7c <ILI9341_IO_WriteReg+0xfc>)
 8000c1c:	f006 fe3d 	bl	800789a <HAL_SPI_Transmit>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <ILI9341_IO_WriteReg+0xaa>
    			return ILI9341_Err;
 8000c26:	2301      	movs	r3, #1
 8000c28:	e024      	b.n	8000c74 <ILI9341_IO_WriteReg+0xf4>
    		}

    		if(HAL_SPI_Transmit(&hspi1, pdata + 2, 1, 1000) != HAL_OK){
 8000c2a:	68bb      	ldr	r3, [r7, #8]
 8000c2c:	1c99      	adds	r1, r3, #2
 8000c2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c32:	2201      	movs	r2, #1
 8000c34:	4811      	ldr	r0, [pc, #68]	; (8000c7c <ILI9341_IO_WriteReg+0xfc>)
 8000c36:	f006 fe30 	bl	800789a <HAL_SPI_Transmit>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <ILI9341_IO_WriteReg+0xc4>
    			return ILI9341_Err;
 8000c40:	2301      	movs	r3, #1
 8000c42:	e017      	b.n	8000c74 <ILI9341_IO_WriteReg+0xf4>
    		}
    		if(i == length - 10000){
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	f5a3 531c 	sub.w	r3, r3, #9984	; 0x2700
 8000c4a:	3b10      	subs	r3, #16
 8000c4c:	697a      	ldr	r2, [r7, #20]
 8000c4e:	429a      	cmp	r2, r3
 8000c50:	d104      	bne.n	8000c5c <ILI9341_IO_WriteReg+0xdc>
    			uint8_t j =0;
 8000c52:	2300      	movs	r3, #0
 8000c54:	74fb      	strb	r3, [r7, #19]
    			j++;
 8000c56:	7cfb      	ldrb	r3, [r7, #19]
 8000c58:	3301      	adds	r3, #1
 8000c5a:	74fb      	strb	r3, [r7, #19]
        for(uint32_t i = 0; i < length; i = i + 3){
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	3303      	adds	r3, #3
 8000c60:	617b      	str	r3, [r7, #20]
 8000c62:	697a      	ldr	r2, [r7, #20]
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	429a      	cmp	r2, r3
 8000c68:	d3c6      	bcc.n	8000bf8 <ILI9341_IO_WriteReg+0x78>
 8000c6a:	e002      	b.n	8000c72 <ILI9341_IO_WriteReg+0xf2>
    		}
        }
	}else {
		ILI9341_CSState(GPIO_PIN_SET);
 8000c6c:	2001      	movs	r0, #1
 8000c6e:	f000 f83f 	bl	8000cf0 <ILI9341_CSState>
	}
	return ILI9341_Ok;
 8000c72:	2300      	movs	r3, #0
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	3718      	adds	r7, #24
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	20000d48 	.word	0x20000d48

08000c80 <ILI9341_IO_ReadReg>:

static ILI9341_Status_t ILI9341_IO_ReadReg(uint8_t reg, uint8_t* pdata, uint32_t length){
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b084      	sub	sp, #16
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	4603      	mov	r3, r0
 8000c88:	60b9      	str	r1, [r7, #8]
 8000c8a:	607a      	str	r2, [r7, #4]
 8000c8c:	73fb      	strb	r3, [r7, #15]
	ILI9341_CSState(GPIO_PIN_RESET);
 8000c8e:	2000      	movs	r0, #0
 8000c90:	f000 f82e 	bl	8000cf0 <ILI9341_CSState>
	ILI9341_DCRSState(GPIO_PIN_RESET);
 8000c94:	2000      	movs	r0, #0
 8000c96:	f000 f845 	bl	8000d24 <ILI9341_DCRSState>
	if(HAL_SPI_Transmit(&hspi1, &reg, 1, 1000) != HAL_OK){
 8000c9a:	f107 010f 	add.w	r1, r7, #15
 8000c9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	4811      	ldr	r0, [pc, #68]	; (8000cec <ILI9341_IO_ReadReg+0x6c>)
 8000ca6:	f006 fdf8 	bl	800789a <HAL_SPI_Transmit>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d001      	beq.n	8000cb4 <ILI9341_IO_ReadReg+0x34>
        return ILI9341_Err;
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	e016      	b.n	8000ce2 <ILI9341_IO_ReadReg+0x62>
	}
	ILI9341_DCRSState(GPIO_PIN_SET);
 8000cb4:	2001      	movs	r0, #1
 8000cb6:	f000 f835 	bl	8000d24 <ILI9341_DCRSState>

	if(length != 0){
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d00c      	beq.n	8000cda <ILI9341_IO_ReadReg+0x5a>
		if(HAL_SPI_Receive(&hspi1, pdata, length, 1000) != HAL_OK){
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	b29a      	uxth	r2, r3
 8000cc4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cc8:	68b9      	ldr	r1, [r7, #8]
 8000cca:	4808      	ldr	r0, [pc, #32]	; (8000cec <ILI9341_IO_ReadReg+0x6c>)
 8000ccc:	f006 ff21 	bl	8007b12 <HAL_SPI_Receive>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <ILI9341_IO_ReadReg+0x5a>
			return ILI9341_Err;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	e003      	b.n	8000ce2 <ILI9341_IO_ReadReg+0x62>
		}
	}
	ILI9341_CSState(GPIO_PIN_SET);
 8000cda:	2001      	movs	r0, #1
 8000cdc:	f000 f808 	bl	8000cf0 <ILI9341_CSState>
	return ILI9341_Ok;
 8000ce0:	2300      	movs	r3, #0
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	3710      	adds	r7, #16
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	20000d48 	.word	0x20000d48

08000cf0 <ILI9341_CSState>:

static void ILI9341_CSState(uint8_t state){
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	71fb      	strb	r3, [r7, #7]
  if(state){
 8000cfa:	79fb      	ldrb	r3, [r7, #7]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d005      	beq.n	8000d0c <ILI9341_CSState+0x1c>
    HAL_GPIO_WritePin(SPI1_CSN_GPIO_Port, SPI1_CSN_Pin, GPIO_PIN_SET);
 8000d00:	2201      	movs	r2, #1
 8000d02:	2101      	movs	r1, #1
 8000d04:	4806      	ldr	r0, [pc, #24]	; (8000d20 <ILI9341_CSState+0x30>)
 8000d06:	f003 fe6b 	bl	80049e0 <HAL_GPIO_WritePin>
  } else {
    HAL_GPIO_WritePin(SPI1_CSN_GPIO_Port, SPI1_CSN_Pin, GPIO_PIN_RESET);
  }
}
 8000d0a:	e004      	b.n	8000d16 <ILI9341_CSState+0x26>
    HAL_GPIO_WritePin(SPI1_CSN_GPIO_Port, SPI1_CSN_Pin, GPIO_PIN_RESET);
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	2101      	movs	r1, #1
 8000d10:	4803      	ldr	r0, [pc, #12]	; (8000d20 <ILI9341_CSState+0x30>)
 8000d12:	f003 fe65 	bl	80049e0 <HAL_GPIO_WritePin>
}
 8000d16:	bf00      	nop
 8000d18:	3708      	adds	r7, #8
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	40020400 	.word	0x40020400

08000d24 <ILI9341_DCRSState>:

static void ILI9341_DCRSState(uint8_t state){
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	71fb      	strb	r3, [r7, #7]
  if(state){
 8000d2e:	79fb      	ldrb	r3, [r7, #7]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d005      	beq.n	8000d40 <ILI9341_DCRSState+0x1c>
    HAL_GPIO_WritePin(DCRS_GPIO_Port, DCRS_Pin, GPIO_PIN_SET);
 8000d34:	2201      	movs	r2, #1
 8000d36:	2102      	movs	r1, #2
 8000d38:	4806      	ldr	r0, [pc, #24]	; (8000d54 <ILI9341_DCRSState+0x30>)
 8000d3a:	f003 fe51 	bl	80049e0 <HAL_GPIO_WritePin>
  } else {
    HAL_GPIO_WritePin(DCRS_GPIO_Port, DCRS_Pin, GPIO_PIN_RESET);
  }
}
 8000d3e:	e004      	b.n	8000d4a <ILI9341_DCRSState+0x26>
    HAL_GPIO_WritePin(DCRS_GPIO_Port, DCRS_Pin, GPIO_PIN_RESET);
 8000d40:	2200      	movs	r2, #0
 8000d42:	2102      	movs	r1, #2
 8000d44:	4803      	ldr	r0, [pc, #12]	; (8000d54 <ILI9341_DCRSState+0x30>)
 8000d46:	f003 fe4b 	bl	80049e0 <HAL_GPIO_WritePin>
}
 8000d4a:	bf00      	nop
 8000d4c:	3708      	adds	r7, #8
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	40020400 	.word	0x40020400

08000d58 <MCP23017_Init>:
 *@Params: Init Struct with desired settings, Device handle to initialize, a low level IO Driver struct
 *@Return: None
 *@Precondition: Init Struct should have desired settings
 *@Postcondition: Device struct will be intialized and ready to use
 **************************************//**************************************/
void MCP23017_Init(MCP23017_Init_Struct_t Settings, MCP23017_Handle_t *Dev, MCP23017_IO_Drv_t IO_Driver){
 8000d58:	b590      	push	{r4, r7, lr}
 8000d5a:	b085      	sub	sp, #20
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	463c      	mov	r4, r7
 8000d60:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	Dev->IO_Driver.Init = IO_Driver.Init;
 8000d64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d66:	6a3b      	ldr	r3, [r7, #32]
 8000d68:	605a      	str	r2, [r3, #4]
	Dev->IO_Driver.DeInit = IO_Driver.DeInit;
 8000d6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000d6c:	6a3b      	ldr	r3, [r7, #32]
 8000d6e:	609a      	str	r2, [r3, #8]
	Dev->IO_Driver.ReadReg = IO_Driver.ReadReg;
 8000d70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000d72:	6a3b      	ldr	r3, [r7, #32]
 8000d74:	611a      	str	r2, [r3, #16]
	Dev->IO_Driver.WriteReg = IO_Driver.WriteReg;
 8000d76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000d78:	6a3b      	ldr	r3, [r7, #32]
 8000d7a:	60da      	str	r2, [r3, #12]
	Dev->IO_Driver.ioctl = IO_Driver.ioctl;
 8000d7c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000d7e:	6a3b      	ldr	r3, [r7, #32]
 8000d80:	615a      	str	r2, [r3, #20]
	Dev->IO_Driver.Init();
 8000d82:	6a3b      	ldr	r3, [r7, #32]
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	4798      	blx	r3

	if(Dev->IO_Driver.WriteReg(MCP23017_IOCON, (uint8_t*)&Settings.Config,1) != MCP23017_Ok){
 8000d88:	6a3b      	ldr	r3, [r7, #32]
 8000d8a:	68db      	ldr	r3, [r3, #12]
 8000d8c:	200a      	movs	r0, #10
 8000d8e:	463a      	mov	r2, r7
 8000d90:	f102 010c 	add.w	r1, r2, #12
 8000d94:	2201      	movs	r2, #1
 8000d96:	4798      	blx	r3
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d003      	beq.n	8000da6 <MCP23017_Init+0x4e>
		_log(log_mcp23017, "Initialization: IOCON Write Failed");
 8000d9e:	492e      	ldr	r1, [pc, #184]	; (8000e58 <MCP23017_Init+0x100>)
 8000da0:	2005      	movs	r0, #5
 8000da2:	f000 fd97 	bl	80018d4 <_log>
	}

	if(Dev->IO_Driver.WriteReg(MCP23017_IODIRA, (uint8_t*)&Settings.Mode,2) != MCP23017_Ok){
 8000da6:	6a3b      	ldr	r3, [r7, #32]
 8000da8:	68db      	ldr	r3, [r3, #12]
 8000daa:	2000      	movs	r0, #0
 8000dac:	4639      	mov	r1, r7
 8000dae:	2202      	movs	r2, #2
 8000db0:	4798      	blx	r3
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d003      	beq.n	8000dc0 <MCP23017_Init+0x68>
		_log(log_mcp23017, "Initialization: IODIR Write Failed");
 8000db8:	4928      	ldr	r1, [pc, #160]	; (8000e5c <MCP23017_Init+0x104>)
 8000dba:	2005      	movs	r0, #5
 8000dbc:	f000 fd8a 	bl	80018d4 <_log>
	}

	if(Dev->IO_Driver.WriteReg(MCP23017_IPOLA, (uint8_t*)&Settings.Polarity,2) != MCP23017_Ok){
 8000dc0:	6a3b      	ldr	r3, [r7, #32]
 8000dc2:	68db      	ldr	r3, [r3, #12]
 8000dc4:	2002      	movs	r0, #2
 8000dc6:	463a      	mov	r2, r7
 8000dc8:	1c91      	adds	r1, r2, #2
 8000dca:	2202      	movs	r2, #2
 8000dcc:	4798      	blx	r3
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d003      	beq.n	8000ddc <MCP23017_Init+0x84>
		_log(log_mcp23017, "Initialization: IPOL Write Failed");
 8000dd4:	4922      	ldr	r1, [pc, #136]	; (8000e60 <MCP23017_Init+0x108>)
 8000dd6:	2005      	movs	r0, #5
 8000dd8:	f000 fd7c 	bl	80018d4 <_log>
	}

	if(Dev->IO_Driver.WriteReg(MCP23017_GPINTENA, (uint8_t*)&Settings.IntEnable,2) != MCP23017_Ok){
 8000ddc:	6a3b      	ldr	r3, [r7, #32]
 8000dde:	68db      	ldr	r3, [r3, #12]
 8000de0:	2004      	movs	r0, #4
 8000de2:	463a      	mov	r2, r7
 8000de4:	1d11      	adds	r1, r2, #4
 8000de6:	2202      	movs	r2, #2
 8000de8:	4798      	blx	r3
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d003      	beq.n	8000df8 <MCP23017_Init+0xa0>
		_log(log_mcp23017, "Initialization: INTENA Write Failed");
 8000df0:	491c      	ldr	r1, [pc, #112]	; (8000e64 <MCP23017_Init+0x10c>)
 8000df2:	2005      	movs	r0, #5
 8000df4:	f000 fd6e 	bl	80018d4 <_log>
	}

	if(Dev->IO_Driver.WriteReg(MCP23017_DEFVALA, (uint8_t*)&Settings.DefaultValue,2) != MCP23017_Ok){
 8000df8:	6a3b      	ldr	r3, [r7, #32]
 8000dfa:	68db      	ldr	r3, [r3, #12]
 8000dfc:	2006      	movs	r0, #6
 8000dfe:	463a      	mov	r2, r7
 8000e00:	1d91      	adds	r1, r2, #6
 8000e02:	2202      	movs	r2, #2
 8000e04:	4798      	blx	r3
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d003      	beq.n	8000e14 <MCP23017_Init+0xbc>
		_log(log_mcp23017, "Initialization: DEFVAL Write Failed");
 8000e0c:	4916      	ldr	r1, [pc, #88]	; (8000e68 <MCP23017_Init+0x110>)
 8000e0e:	2005      	movs	r0, #5
 8000e10:	f000 fd60 	bl	80018d4 <_log>
	}

	if(Dev->IO_Driver.WriteReg(MCP23017_INTCONA, (uint8_t*)&Settings.IRQControl,2) != MCP23017_Ok){
 8000e14:	6a3b      	ldr	r3, [r7, #32]
 8000e16:	68db      	ldr	r3, [r3, #12]
 8000e18:	2008      	movs	r0, #8
 8000e1a:	463a      	mov	r2, r7
 8000e1c:	f102 0108 	add.w	r1, r2, #8
 8000e20:	2202      	movs	r2, #2
 8000e22:	4798      	blx	r3
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d003      	beq.n	8000e32 <MCP23017_Init+0xda>
		_log(log_mcp23017, "Initialization: INTCON Write Failed");
 8000e2a:	4910      	ldr	r1, [pc, #64]	; (8000e6c <MCP23017_Init+0x114>)
 8000e2c:	2005      	movs	r0, #5
 8000e2e:	f000 fd51 	bl	80018d4 <_log>
	}

	if(Dev->IO_Driver.WriteReg(MCP23017_GPPUA, (uint8_t*)&Settings.PullUp,2) != MCP23017_Ok){
 8000e32:	6a3b      	ldr	r3, [r7, #32]
 8000e34:	68db      	ldr	r3, [r3, #12]
 8000e36:	200c      	movs	r0, #12
 8000e38:	463a      	mov	r2, r7
 8000e3a:	f102 010a 	add.w	r1, r2, #10
 8000e3e:	2202      	movs	r2, #2
 8000e40:	4798      	blx	r3
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d003      	beq.n	8000e50 <MCP23017_Init+0xf8>
		_log(log_mcp23017, "Initialization: GPPU Write Failed");
 8000e48:	4909      	ldr	r1, [pc, #36]	; (8000e70 <MCP23017_Init+0x118>)
 8000e4a:	2005      	movs	r0, #5
 8000e4c:	f000 fd42 	bl	80018d4 <_log>
	}

}
 8000e50:	bf00      	nop
 8000e52:	3714      	adds	r7, #20
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd90      	pop	{r4, r7, pc}
 8000e58:	0800e548 	.word	0x0800e548
 8000e5c:	0800e56c 	.word	0x0800e56c
 8000e60:	0800e590 	.word	0x0800e590
 8000e64:	0800e5b4 	.word	0x0800e5b4
 8000e68:	0800e5d8 	.word	0x0800e5d8
 8000e6c:	0800e5fc 	.word	0x0800e5fc
 8000e70:	0800e620 	.word	0x0800e620

08000e74 <MCP23017_DeInit>:
 *@Params: MCP23017 Device handle to deinitialize
 *@Return: None
 *@Precondition: Device handle should be initialized
 *@Postcondition: Device handle will be deinitialized and device registers set to default settings
 **************************************//**************************************/
void MCP23017_DeInit(MCP23017_Handle_t *Dev){
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
	MCP23017_Reset(Dev);
 8000e7c:	6878      	ldr	r0, [r7, #4]
 8000e7e:	f000 f813 	bl	8000ea8 <MCP23017_Reset>
	Dev->IO_Driver.Init = '\0';
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	2200      	movs	r2, #0
 8000e86:	605a      	str	r2, [r3, #4]
	Dev->IO_Driver.DeInit = '\0';
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	609a      	str	r2, [r3, #8]
	Dev->IO_Driver.ReadReg = '\0';
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	2200      	movs	r2, #0
 8000e92:	611a      	str	r2, [r3, #16]
	Dev->IO_Driver.WriteReg = '\0';
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	2200      	movs	r2, #0
 8000e98:	60da      	str	r2, [r3, #12]
	Dev->IO_Driver.ioctl = '\0';
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	615a      	str	r2, [r3, #20]
}
 8000ea0:	bf00      	nop
 8000ea2:	3708      	adds	r7, #8
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}

08000ea8 <MCP23017_Reset>:
 *@Params: MCP23017 Device Handle to reset
 *@Return: None
 *@Precondition: Device handle should be initialized
 *@Postcondition: Device registers will be set to default settings
 **************************************//**************************************/
void MCP23017_Reset(MCP23017_Handle_t *Dev){
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b084      	sub	sp, #16
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
	uint16_t Settings = 0;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	81fb      	strh	r3, [r7, #14]
	Dev->IO_Driver.DeInit(); //Turn off DMA IRQ and clear pending IRQ
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	689b      	ldr	r3, [r3, #8]
 8000eb8:	4798      	blx	r3
	if(Dev->IO_Driver.WriteReg(MCP23017_IOCON, (uint8_t*)&Settings,1) != MCP23017_Ok){
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	68db      	ldr	r3, [r3, #12]
 8000ebe:	200a      	movs	r0, #10
 8000ec0:	f107 010e 	add.w	r1, r7, #14
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	4798      	blx	r3
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d003      	beq.n	8000ed6 <MCP23017_Reset+0x2e>
		_log(log_mcp23017, "DeInitialization: IOCON Write Failed");
 8000ece:	4930      	ldr	r1, [pc, #192]	; (8000f90 <MCP23017_Reset+0xe8>)
 8000ed0:	2005      	movs	r0, #5
 8000ed2:	f000 fcff 	bl	80018d4 <_log>
	}

	Settings = 0xFFFF;
 8000ed6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000eda:	81fb      	strh	r3, [r7, #14]
	if(Dev->IO_Driver.WriteReg(MCP23017_IODIRA, (uint8_t*)&Settings,2) != MCP23017_Ok){
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	68db      	ldr	r3, [r3, #12]
 8000ee0:	2000      	movs	r0, #0
 8000ee2:	f107 010e 	add.w	r1, r7, #14
 8000ee6:	2202      	movs	r2, #2
 8000ee8:	4798      	blx	r3
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d003      	beq.n	8000ef8 <MCP23017_Reset+0x50>
		_log(log_mcp23017, "DeInitialization: IODIR Write Failed");
 8000ef0:	4928      	ldr	r1, [pc, #160]	; (8000f94 <MCP23017_Reset+0xec>)
 8000ef2:	2005      	movs	r0, #5
 8000ef4:	f000 fcee 	bl	80018d4 <_log>
	}

	Settings = 0x0000;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	81fb      	strh	r3, [r7, #14]
	if(Dev->IO_Driver.WriteReg(MCP23017_IPOLA, (uint8_t*)&Settings,2) != MCP23017_Ok){
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	68db      	ldr	r3, [r3, #12]
 8000f00:	2002      	movs	r0, #2
 8000f02:	f107 010e 	add.w	r1, r7, #14
 8000f06:	2202      	movs	r2, #2
 8000f08:	4798      	blx	r3
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d003      	beq.n	8000f18 <MCP23017_Reset+0x70>
		_log(log_mcp23017, "DeInitialization: IPOL Write Failed");
 8000f10:	4921      	ldr	r1, [pc, #132]	; (8000f98 <MCP23017_Reset+0xf0>)
 8000f12:	2005      	movs	r0, #5
 8000f14:	f000 fcde 	bl	80018d4 <_log>
	}

	if(Dev->IO_Driver.WriteReg(MCP23017_GPINTENA, (uint8_t*)&Settings,2) != MCP23017_Ok){
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	68db      	ldr	r3, [r3, #12]
 8000f1c:	2004      	movs	r0, #4
 8000f1e:	f107 010e 	add.w	r1, r7, #14
 8000f22:	2202      	movs	r2, #2
 8000f24:	4798      	blx	r3
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d003      	beq.n	8000f34 <MCP23017_Reset+0x8c>
		_log(log_mcp23017, "DeInitialization: INTENA Write Failed");
 8000f2c:	491b      	ldr	r1, [pc, #108]	; (8000f9c <MCP23017_Reset+0xf4>)
 8000f2e:	2005      	movs	r0, #5
 8000f30:	f000 fcd0 	bl	80018d4 <_log>
	}

	if(Dev->IO_Driver.WriteReg(MCP23017_DEFVALA, (uint8_t*)&Settings,2) != MCP23017_Ok){
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	68db      	ldr	r3, [r3, #12]
 8000f38:	2006      	movs	r0, #6
 8000f3a:	f107 010e 	add.w	r1, r7, #14
 8000f3e:	2202      	movs	r2, #2
 8000f40:	4798      	blx	r3
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d003      	beq.n	8000f50 <MCP23017_Reset+0xa8>
		_log(log_mcp23017, "DeInitialization: DEFVAL Write Failed");
 8000f48:	4915      	ldr	r1, [pc, #84]	; (8000fa0 <MCP23017_Reset+0xf8>)
 8000f4a:	2005      	movs	r0, #5
 8000f4c:	f000 fcc2 	bl	80018d4 <_log>
	}

	if(Dev->IO_Driver.WriteReg(MCP23017_INTCONA, (uint8_t*)&Settings,2) != MCP23017_Ok){
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	68db      	ldr	r3, [r3, #12]
 8000f54:	2008      	movs	r0, #8
 8000f56:	f107 010e 	add.w	r1, r7, #14
 8000f5a:	2202      	movs	r2, #2
 8000f5c:	4798      	blx	r3
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d003      	beq.n	8000f6c <MCP23017_Reset+0xc4>
		_log(log_mcp23017, "DeInitialization: INTCON Write Failed");
 8000f64:	490f      	ldr	r1, [pc, #60]	; (8000fa4 <MCP23017_Reset+0xfc>)
 8000f66:	2005      	movs	r0, #5
 8000f68:	f000 fcb4 	bl	80018d4 <_log>
	}

	if(Dev->IO_Driver.WriteReg(MCP23017_GPPUA, (uint8_t*)&Settings,2) != MCP23017_Ok){
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	68db      	ldr	r3, [r3, #12]
 8000f70:	200c      	movs	r0, #12
 8000f72:	f107 010e 	add.w	r1, r7, #14
 8000f76:	2202      	movs	r2, #2
 8000f78:	4798      	blx	r3
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d003      	beq.n	8000f88 <MCP23017_Reset+0xe0>
		_log(log_mcp23017, "DeInitialization: GPPU Write Failed");
 8000f80:	4909      	ldr	r1, [pc, #36]	; (8000fa8 <MCP23017_Reset+0x100>)
 8000f82:	2005      	movs	r0, #5
 8000f84:	f000 fca6 	bl	80018d4 <_log>
	}
}
 8000f88:	bf00      	nop
 8000f8a:	3710      	adds	r7, #16
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	0800e644 	.word	0x0800e644
 8000f94:	0800e66c 	.word	0x0800e66c
 8000f98:	0800e694 	.word	0x0800e694
 8000f9c:	0800e6b8 	.word	0x0800e6b8
 8000fa0:	0800e6e0 	.word	0x0800e6e0
 8000fa4:	0800e708 	.word	0x0800e708
 8000fa8:	0800e730 	.word	0x0800e730

08000fac <MCP23017_ReadPins>:
 *@Params: MCP23017 Device Handle
 *@Return: Err if read fails, Ok otherwise
 *@Precondition: Device handle must be initialized
 *@Postcondition: Device Handle PinStates will contain new states of pins
 **************************************//**************************************/
MCP23017_Status_t MCP23017_ReadPins(MCP23017_Handle_t *Dev){
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
	if(Dev->IO_Driver.ReadReg(MCP23017_GPIOA, (uint8_t*)&Dev->PinStates, 2) != MCP23017_Ok){
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	691b      	ldr	r3, [r3, #16]
 8000fb8:	2012      	movs	r0, #18
 8000fba:	6879      	ldr	r1, [r7, #4]
 8000fbc:	2202      	movs	r2, #2
 8000fbe:	4798      	blx	r3
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d005      	beq.n	8000fd2 <MCP23017_ReadPins+0x26>
		_log(log_mcp23017, "Read Pins Failed");
 8000fc6:	4905      	ldr	r1, [pc, #20]	; (8000fdc <MCP23017_ReadPins+0x30>)
 8000fc8:	2005      	movs	r0, #5
 8000fca:	f000 fc83 	bl	80018d4 <_log>
		return MCP23017_Err;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	e000      	b.n	8000fd4 <MCP23017_ReadPins+0x28>
	}
	return MCP23017_Ok;
 8000fd2:	2300      	movs	r3, #0
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	3708      	adds	r7, #8
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	0800e7a0 	.word	0x0800e7a0

08000fe0 <MCP23017_IO_Init>:
 *@Params: None
 *@Return: None
 *@Precondition: None
 *@Postcondition: GPIO B Clk will be enabled and I2C1 Peripheral will be initialized
 **************************************//**************************************/
static void MCP23017_IO_Init(){
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
	I2C1_DMA_Init();
 8000fe4:	f000 f9fe 	bl	80013e4 <I2C1_DMA_Init>
	I2C_GPIO_Init();
 8000fe8:	f000 fa78 	bl	80014dc <I2C_GPIO_Init>
	I2C1_Init();
 8000fec:	f000 fc00 	bl	80017f0 <I2C1_Init>
}
 8000ff0:	bf00      	nop
 8000ff2:	bd80      	pop	{r7, pc}

08000ff4 <MCP23017_IO_DeInit>:
 *@Params: None
 *@Return: None
 *@Precondition: None
 *@Postcondition: None
 **************************************//**************************************/
static void MCP23017_IO_DeInit(){
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
	HAL_NVIC_DisableIRQ(DMA1_Stream0_IRQn);
 8000ff8:	200b      	movs	r0, #11
 8000ffa:	f002 fe52 	bl	8003ca2 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_ClearPendingIRQ(DMA1_Stream0_IRQn);
 8000ffe:	200b      	movs	r0, #11
 8001000:	f002 fe69 	bl	8003cd6 <HAL_NVIC_ClearPendingIRQ>
}
 8001004:	bf00      	nop
 8001006:	bd80      	pop	{r7, pc}

08001008 <MCP23017_IO_WriteReg>:
 *@Params: MCP23017 Device Address, Register to write to, data to write, data length in bytes
 *@Return: Error if the write fails, otherwise Ok
 *@Precondition: I2C Bus should be initialized
 *@Postcondition: Device register will be written to
 **************************************//**************************************/
static MCP23017_Status_t MCP23017_IO_WriteReg(uint8_t DevAddr, uint8_t RegAddr, uint8_t *Data, uint8_t Length){
 8001008:	b580      	push	{r7, lr}
 800100a:	b086      	sub	sp, #24
 800100c:	af04      	add	r7, sp, #16
 800100e:	603a      	str	r2, [r7, #0]
 8001010:	461a      	mov	r2, r3
 8001012:	4603      	mov	r3, r0
 8001014:	71fb      	strb	r3, [r7, #7]
 8001016:	460b      	mov	r3, r1
 8001018:	71bb      	strb	r3, [r7, #6]
 800101a:	4613      	mov	r3, r2
 800101c:	717b      	strb	r3, [r7, #5]
	if(HAL_I2C_Mem_Write(&hi2c1, DevAddr, RegAddr, I2C_MEMADD_SIZE_8BIT, Data, Length, 50) != HAL_OK){
 800101e:	79fb      	ldrb	r3, [r7, #7]
 8001020:	b299      	uxth	r1, r3
 8001022:	79bb      	ldrb	r3, [r7, #6]
 8001024:	b29a      	uxth	r2, r3
 8001026:	797b      	ldrb	r3, [r7, #5]
 8001028:	b29b      	uxth	r3, r3
 800102a:	2032      	movs	r0, #50	; 0x32
 800102c:	9002      	str	r0, [sp, #8]
 800102e:	9301      	str	r3, [sp, #4]
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	9300      	str	r3, [sp, #0]
 8001034:	2301      	movs	r3, #1
 8001036:	4809      	ldr	r0, [pc, #36]	; (800105c <MCP23017_IO_WriteReg+0x54>)
 8001038:	f003 fe30 	bl	8004c9c <HAL_I2C_Mem_Write>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d007      	beq.n	8001052 <MCP23017_IO_WriteReg+0x4a>
		_log(log_i2c,"Write to MCP23017 Reg address %x failed.", RegAddr);
 8001042:	79bb      	ldrb	r3, [r7, #6]
 8001044:	461a      	mov	r2, r3
 8001046:	4906      	ldr	r1, [pc, #24]	; (8001060 <MCP23017_IO_WriteReg+0x58>)
 8001048:	2000      	movs	r0, #0
 800104a:	f000 fc43 	bl	80018d4 <_log>
		return MCP23017_Err;
 800104e:	2301      	movs	r3, #1
 8001050:	e000      	b.n	8001054 <MCP23017_IO_WriteReg+0x4c>
	}
	return MCP23017_Ok;
 8001052:	2300      	movs	r3, #0
}
 8001054:	4618      	mov	r0, r3
 8001056:	3708      	adds	r7, #8
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	2000025c 	.word	0x2000025c
 8001060:	0800e7b4 	.word	0x0800e7b4

08001064 <MCP23017_IO_ReadReg>:
 *@Params: MCP23017 Device Address, Register to read to, data buffer to read into, data length in bytes,
 *@Return: Error if the read fails, otherwise Ok
 *@Precondition: I2C Bus must be initialized
 *@Postcondition: Data buffer will have the read data
 **************************************//**************************************/
static MCP23017_Status_t MCP23017_IO_ReadReg(uint8_t DevAddr, uint8_t RegAddr, uint8_t *Data, uint8_t Length){
 8001064:	b580      	push	{r7, lr}
 8001066:	b084      	sub	sp, #16
 8001068:	af02      	add	r7, sp, #8
 800106a:	603a      	str	r2, [r7, #0]
 800106c:	461a      	mov	r2, r3
 800106e:	4603      	mov	r3, r0
 8001070:	71fb      	strb	r3, [r7, #7]
 8001072:	460b      	mov	r3, r1
 8001074:	71bb      	strb	r3, [r7, #6]
 8001076:	4613      	mov	r3, r2
 8001078:	717b      	strb	r3, [r7, #5]
	//HAL_I2C_Mem_Read_DMA(hi2c, DevAddress, MemAddress, MemAddSize, pData, Size)
	//if(HAL_I2C_Mem_Read(&hi2c1, DevAddr, RegAddr, I2C_MEMADD_SIZE_8BIT, Data, Length, 50) != HAL_OK){
	if(HAL_I2C_Mem_Read_DMA(&hi2c1, DevAddr, RegAddr, I2C_MEMADD_SIZE_8BIT, Data, Length) != HAL_OK){
 800107a:	79fb      	ldrb	r3, [r7, #7]
 800107c:	b299      	uxth	r1, r3
 800107e:	79bb      	ldrb	r3, [r7, #6]
 8001080:	b29a      	uxth	r2, r3
 8001082:	797b      	ldrb	r3, [r7, #5]
 8001084:	b29b      	uxth	r3, r3
 8001086:	9301      	str	r3, [sp, #4]
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	9300      	str	r3, [sp, #0]
 800108c:	2301      	movs	r3, #1
 800108e:	4809      	ldr	r0, [pc, #36]	; (80010b4 <MCP23017_IO_ReadReg+0x50>)
 8001090:	f003 fefe 	bl	8004e90 <HAL_I2C_Mem_Read_DMA>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d007      	beq.n	80010aa <MCP23017_IO_ReadReg+0x46>
		_log(log_i2c,"Read from MCP23017 Reg address %x failed.", RegAddr);
 800109a:	79bb      	ldrb	r3, [r7, #6]
 800109c:	461a      	mov	r2, r3
 800109e:	4906      	ldr	r1, [pc, #24]	; (80010b8 <MCP23017_IO_ReadReg+0x54>)
 80010a0:	2000      	movs	r0, #0
 80010a2:	f000 fc17 	bl	80018d4 <_log>
		return MCP23017_Err;
 80010a6:	2301      	movs	r3, #1
 80010a8:	e000      	b.n	80010ac <MCP23017_IO_ReadReg+0x48>
	}
	return MCP23017_Ok;
 80010aa:	2300      	movs	r3, #0
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3708      	adds	r7, #8
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	2000025c 	.word	0x2000025c
 80010b8:	0800e7e0 	.word	0x0800e7e0

080010bc <MCP23017_IO_ioctl>:
 *@Params: Command
 *@Return: None
 *@Precondition: None
 *@Postcondition: None
 **************************************//**************************************/
static uint8_t MCP23017_IO_ioctl(MCP23017_IO_Cmd_t command){
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	4603      	mov	r3, r0
 80010c4:	71fb      	strb	r3, [r7, #7]
	return MCP23017_Ok;
 80010c6:	2300      	movs	r3, #0
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	370c      	adds	r7, #12
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr

080010d4 <MCP23017_IO1_WriteReg>:
 *@Params: Register to write to, data to write, length of data in bytes
 *@Return: Err if write fails, Ok otherwise
 *@Precondition: I2C Bus must be initialized
 *@Postcondition: Device (w/ Address1) register will be modified
 **************************************//**************************************/
static MCP23017_Status_t MCP23017_IO1_WriteReg(uint8_t RegAddr, uint8_t *Data, uint8_t Length){
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	4603      	mov	r3, r0
 80010dc:	6039      	str	r1, [r7, #0]
 80010de:	71fb      	strb	r3, [r7, #7]
 80010e0:	4613      	mov	r3, r2
 80010e2:	71bb      	strb	r3, [r7, #6]
	static const uint8_t address = MCP23017_Address1;
    return MCP23017_IO_WriteReg(address, RegAddr, Data, Length);
 80010e4:	4b05      	ldr	r3, [pc, #20]	; (80010fc <MCP23017_IO1_WriteReg+0x28>)
 80010e6:	7818      	ldrb	r0, [r3, #0]
 80010e8:	79bb      	ldrb	r3, [r7, #6]
 80010ea:	79f9      	ldrb	r1, [r7, #7]
 80010ec:	683a      	ldr	r2, [r7, #0]
 80010ee:	f7ff ff8b 	bl	8001008 <MCP23017_IO_WriteReg>
 80010f2:	4603      	mov	r3, r0
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	3708      	adds	r7, #8
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	0800e9ac 	.word	0x0800e9ac

08001100 <MCP23017_IO1_ReadReg>:
 *@Params: Register to read from, data buffer to read into, length of data in bytes
 *@Return: Err if read fails, Ok otherwise
 *@Precondition: I2C Bus must be initialized
 *@Postcondition: Data buffer will contain data from device (w/ Address1) register
 **************************************//**************************************/
static MCP23017_Status_t MCP23017_IO1_ReadReg(uint8_t RegAddr, uint8_t *Data, uint8_t Length){
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	4603      	mov	r3, r0
 8001108:	6039      	str	r1, [r7, #0]
 800110a:	71fb      	strb	r3, [r7, #7]
 800110c:	4613      	mov	r3, r2
 800110e:	71bb      	strb	r3, [r7, #6]
	static const uint8_t address = MCP23017_Address1;
	return MCP23017_IO_ReadReg(address, RegAddr, Data, Length);
 8001110:	4b05      	ldr	r3, [pc, #20]	; (8001128 <MCP23017_IO1_ReadReg+0x28>)
 8001112:	7818      	ldrb	r0, [r3, #0]
 8001114:	79bb      	ldrb	r3, [r7, #6]
 8001116:	79f9      	ldrb	r1, [r7, #7]
 8001118:	683a      	ldr	r2, [r7, #0]
 800111a:	f7ff ffa3 	bl	8001064 <MCP23017_IO_ReadReg>
 800111e:	4603      	mov	r3, r0
}
 8001120:	4618      	mov	r0, r3
 8001122:	3708      	adds	r7, #8
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	0800e9ad 	.word	0x0800e9ad

0800112c <MCP23017_IO2_WriteReg>:
 *@Params: Register to write to, data to write, length of data in bytes
 *@Return: Err if write fails, Ok otherwise
 *@Precondition: I2C Bus must be initialized
 *@Postcondition: Device (w/ Address2) register will be modified
 **************************************//**************************************/
static MCP23017_Status_t MCP23017_IO2_WriteReg(uint8_t RegAddr, uint8_t *Data, uint8_t Length){
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	4603      	mov	r3, r0
 8001134:	6039      	str	r1, [r7, #0]
 8001136:	71fb      	strb	r3, [r7, #7]
 8001138:	4613      	mov	r3, r2
 800113a:	71bb      	strb	r3, [r7, #6]
	static const uint8_t address = MCP23017_Address2;
    return MCP23017_IO_WriteReg(address, RegAddr, Data, Length);
 800113c:	4b05      	ldr	r3, [pc, #20]	; (8001154 <MCP23017_IO2_WriteReg+0x28>)
 800113e:	7818      	ldrb	r0, [r3, #0]
 8001140:	79bb      	ldrb	r3, [r7, #6]
 8001142:	79f9      	ldrb	r1, [r7, #7]
 8001144:	683a      	ldr	r2, [r7, #0]
 8001146:	f7ff ff5f 	bl	8001008 <MCP23017_IO_WriteReg>
 800114a:	4603      	mov	r3, r0
}
 800114c:	4618      	mov	r0, r3
 800114e:	3708      	adds	r7, #8
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	0800e9ae 	.word	0x0800e9ae

08001158 <MCP23017_IO2_ReadReg>:
 *@Params: Register to read from, data buffer to read into, length of data in bytes
 *@Return: Err if read fails, Ok otherwise
 *@Precondition: I2C Bus must be initialized
 *@Postcondition: Data buffer will contain data from device (w/ Address2) register
 **************************************//**************************************/
static MCP23017_Status_t MCP23017_IO2_ReadReg(uint8_t RegAddr, uint8_t *Data, uint8_t Length){
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	4603      	mov	r3, r0
 8001160:	6039      	str	r1, [r7, #0]
 8001162:	71fb      	strb	r3, [r7, #7]
 8001164:	4613      	mov	r3, r2
 8001166:	71bb      	strb	r3, [r7, #6]
	static const uint8_t address = MCP23017_Address2;
	return MCP23017_IO_ReadReg(address, RegAddr, Data, Length);
 8001168:	4b05      	ldr	r3, [pc, #20]	; (8001180 <MCP23017_IO2_ReadReg+0x28>)
 800116a:	7818      	ldrb	r0, [r3, #0]
 800116c:	79bb      	ldrb	r3, [r7, #6]
 800116e:	79f9      	ldrb	r1, [r7, #7]
 8001170:	683a      	ldr	r2, [r7, #0]
 8001172:	f7ff ff77 	bl	8001064 <MCP23017_IO_ReadReg>
 8001176:	4603      	mov	r3, r0
}
 8001178:	4618      	mov	r0, r3
 800117a:	3708      	adds	r7, #8
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	0800e9af 	.word	0x0800e9af

08001184 <MCP23017_IO3_WriteReg>:
 *@Params: Register to write to, data to write, length of data in bytes
 *@Return: Err if write fails, Ok otherwise
 *@Precondition: I2C Bus must be initialized
 *@Postcondition: Device (w/ Address3) register will be modified
 **************************************//**************************************/
static MCP23017_Status_t MCP23017_IO3_WriteReg(uint8_t RegAddr, uint8_t *Data, uint8_t Length){
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	4603      	mov	r3, r0
 800118c:	6039      	str	r1, [r7, #0]
 800118e:	71fb      	strb	r3, [r7, #7]
 8001190:	4613      	mov	r3, r2
 8001192:	71bb      	strb	r3, [r7, #6]
	static const uint8_t address = MCP23017_Address3;
    return MCP23017_IO_WriteReg(address, RegAddr, Data, Length);
 8001194:	4b05      	ldr	r3, [pc, #20]	; (80011ac <MCP23017_IO3_WriteReg+0x28>)
 8001196:	7818      	ldrb	r0, [r3, #0]
 8001198:	79bb      	ldrb	r3, [r7, #6]
 800119a:	79f9      	ldrb	r1, [r7, #7]
 800119c:	683a      	ldr	r2, [r7, #0]
 800119e:	f7ff ff33 	bl	8001008 <MCP23017_IO_WriteReg>
 80011a2:	4603      	mov	r3, r0
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	3708      	adds	r7, #8
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	0800e9b0 	.word	0x0800e9b0

080011b0 <MCP23017_IO3_ReadReg>:
 *@Params: Register to read from, data buffer to read into, length of data in bytes
 *@Return: Err if read fails, Ok otherwise
 *@Precondition: I2C Bus must be initialized
 *@Postcondition: Data buffer will contain data from device (w/ Address3) register
 **************************************//**************************************/
static MCP23017_Status_t MCP23017_IO3_ReadReg(uint8_t RegAddr, uint8_t *Data, uint8_t Length){
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	4603      	mov	r3, r0
 80011b8:	6039      	str	r1, [r7, #0]
 80011ba:	71fb      	strb	r3, [r7, #7]
 80011bc:	4613      	mov	r3, r2
 80011be:	71bb      	strb	r3, [r7, #6]
	static const uint8_t address = MCP23017_Address3;
	return MCP23017_IO_ReadReg(address, RegAddr, Data, Length);
 80011c0:	4b05      	ldr	r3, [pc, #20]	; (80011d8 <MCP23017_IO3_ReadReg+0x28>)
 80011c2:	7818      	ldrb	r0, [r3, #0]
 80011c4:	79bb      	ldrb	r3, [r7, #6]
 80011c6:	79f9      	ldrb	r1, [r7, #7]
 80011c8:	683a      	ldr	r2, [r7, #0]
 80011ca:	f7ff ff4b 	bl	8001064 <MCP23017_IO_ReadReg>
 80011ce:	4603      	mov	r3, r0
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	3708      	adds	r7, #8
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	0800e9b1 	.word	0x0800e9b1

080011dc <MCP23017_IO4_WriteReg>:
 *@Params: Register to write to, data to write, length of data in bytes
 *@Return: Err if write fails, Ok otherwise
 *@Precondition: I2C Bus must be initialized
 *@Postcondition: Device (w/ Address4) register will be modified
 **************************************//**************************************/
static MCP23017_Status_t MCP23017_IO4_WriteReg(uint8_t RegAddr, uint8_t *Data, uint8_t Length){
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	4603      	mov	r3, r0
 80011e4:	6039      	str	r1, [r7, #0]
 80011e6:	71fb      	strb	r3, [r7, #7]
 80011e8:	4613      	mov	r3, r2
 80011ea:	71bb      	strb	r3, [r7, #6]
	static const uint8_t address = MCP23017_Address4;
    return MCP23017_IO_WriteReg(address, RegAddr, Data, Length);
 80011ec:	4b05      	ldr	r3, [pc, #20]	; (8001204 <MCP23017_IO4_WriteReg+0x28>)
 80011ee:	7818      	ldrb	r0, [r3, #0]
 80011f0:	79bb      	ldrb	r3, [r7, #6]
 80011f2:	79f9      	ldrb	r1, [r7, #7]
 80011f4:	683a      	ldr	r2, [r7, #0]
 80011f6:	f7ff ff07 	bl	8001008 <MCP23017_IO_WriteReg>
 80011fa:	4603      	mov	r3, r0
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	3708      	adds	r7, #8
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	0800e9b2 	.word	0x0800e9b2

08001208 <MCP23017_IO4_ReadReg>:
 *@Params: Register to read from, data buffer to read into, length of data in bytes
 *@Return: Err if read fails, Ok otherwise
 *@Precondition: I2C Bus must be initialized
 *@Postcondition: Data buffer will contain data from device (w/ Address4) register
 **************************************//**************************************/
static MCP23017_Status_t MCP23017_IO4_ReadReg(uint8_t RegAddr, uint8_t *Data, uint8_t Length){
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	4603      	mov	r3, r0
 8001210:	6039      	str	r1, [r7, #0]
 8001212:	71fb      	strb	r3, [r7, #7]
 8001214:	4613      	mov	r3, r2
 8001216:	71bb      	strb	r3, [r7, #6]
	static const uint8_t address = MCP23017_Address4;
	return MCP23017_IO_ReadReg(address, RegAddr, Data, Length);
 8001218:	4b05      	ldr	r3, [pc, #20]	; (8001230 <MCP23017_IO4_ReadReg+0x28>)
 800121a:	7818      	ldrb	r0, [r3, #0]
 800121c:	79bb      	ldrb	r3, [r7, #6]
 800121e:	79f9      	ldrb	r1, [r7, #7]
 8001220:	683a      	ldr	r2, [r7, #0]
 8001222:	f7ff ff1f 	bl	8001064 <MCP23017_IO_ReadReg>
 8001226:	4603      	mov	r3, r0
}
 8001228:	4618      	mov	r0, r3
 800122a:	3708      	adds	r7, #8
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	0800e9b3 	.word	0x0800e9b3

08001234 <HAL_ADC_MspInit>:
  /* USER CODE END ADC1_Init 2 */

}

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b08a      	sub	sp, #40	; 0x28
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800123c:	f107 0314 	add.w	r3, r7, #20
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
 8001244:	605a      	str	r2, [r3, #4]
 8001246:	609a      	str	r2, [r3, #8]
 8001248:	60da      	str	r2, [r3, #12]
 800124a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a2f      	ldr	r2, [pc, #188]	; (8001310 <HAL_ADC_MspInit+0xdc>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d157      	bne.n	8001306 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	613b      	str	r3, [r7, #16]
 800125a:	4b2e      	ldr	r3, [pc, #184]	; (8001314 <HAL_ADC_MspInit+0xe0>)
 800125c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800125e:	4a2d      	ldr	r2, [pc, #180]	; (8001314 <HAL_ADC_MspInit+0xe0>)
 8001260:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001264:	6453      	str	r3, [r2, #68]	; 0x44
 8001266:	4b2b      	ldr	r3, [pc, #172]	; (8001314 <HAL_ADC_MspInit+0xe0>)
 8001268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800126a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800126e:	613b      	str	r3, [r7, #16]
 8001270:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001272:	2300      	movs	r3, #0
 8001274:	60fb      	str	r3, [r7, #12]
 8001276:	4b27      	ldr	r3, [pc, #156]	; (8001314 <HAL_ADC_MspInit+0xe0>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127a:	4a26      	ldr	r2, [pc, #152]	; (8001314 <HAL_ADC_MspInit+0xe0>)
 800127c:	f043 0301 	orr.w	r3, r3, #1
 8001280:	6313      	str	r3, [r2, #48]	; 0x30
 8001282:	4b24      	ldr	r3, [pc, #144]	; (8001314 <HAL_ADC_MspInit+0xe0>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001286:	f003 0301 	and.w	r3, r3, #1
 800128a:	60fb      	str	r3, [r7, #12]
 800128c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = ADC_VX_Pin|ADC_VY_Pin;
 800128e:	2318      	movs	r3, #24
 8001290:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001292:	2303      	movs	r3, #3
 8001294:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001296:	2300      	movs	r3, #0
 8001298:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800129a:	f107 0314 	add.w	r3, r7, #20
 800129e:	4619      	mov	r1, r3
 80012a0:	481d      	ldr	r0, [pc, #116]	; (8001318 <HAL_ADC_MspInit+0xe4>)
 80012a2:	f003 f935 	bl	8004510 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80012a6:	4b1d      	ldr	r3, [pc, #116]	; (800131c <HAL_ADC_MspInit+0xe8>)
 80012a8:	4a1d      	ldr	r2, [pc, #116]	; (8001320 <HAL_ADC_MspInit+0xec>)
 80012aa:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80012ac:	4b1b      	ldr	r3, [pc, #108]	; (800131c <HAL_ADC_MspInit+0xe8>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012b2:	4b1a      	ldr	r3, [pc, #104]	; (800131c <HAL_ADC_MspInit+0xe8>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80012b8:	4b18      	ldr	r3, [pc, #96]	; (800131c <HAL_ADC_MspInit+0xe8>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80012be:	4b17      	ldr	r3, [pc, #92]	; (800131c <HAL_ADC_MspInit+0xe8>)
 80012c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012c4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80012c6:	4b15      	ldr	r3, [pc, #84]	; (800131c <HAL_ADC_MspInit+0xe8>)
 80012c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80012cc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80012ce:	4b13      	ldr	r3, [pc, #76]	; (800131c <HAL_ADC_MspInit+0xe8>)
 80012d0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012d4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80012d6:	4b11      	ldr	r3, [pc, #68]	; (800131c <HAL_ADC_MspInit+0xe8>)
 80012d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012dc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80012de:	4b0f      	ldr	r3, [pc, #60]	; (800131c <HAL_ADC_MspInit+0xe8>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80012e4:	4b0d      	ldr	r3, [pc, #52]	; (800131c <HAL_ADC_MspInit+0xe8>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80012ea:	480c      	ldr	r0, [pc, #48]	; (800131c <HAL_ADC_MspInit+0xe8>)
 80012ec:	f002 fd02 	bl	8003cf4 <HAL_DMA_Init>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80012f6:	f000 ff21 	bl	800213c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4a07      	ldr	r2, [pc, #28]	; (800131c <HAL_ADC_MspInit+0xe8>)
 80012fe:	639a      	str	r2, [r3, #56]	; 0x38
 8001300:	4a06      	ldr	r2, [pc, #24]	; (800131c <HAL_ADC_MspInit+0xe8>)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001306:	bf00      	nop
 8001308:	3728      	adds	r7, #40	; 0x28
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	40012000 	.word	0x40012000
 8001314:	40023800 	.word	0x40023800
 8001318:	40020000 	.word	0x40020000
 800131c:	200001fc 	.word	0x200001fc
 8001320:	40026410 	.word	0x40026410

08001324 <ADC1_Init>:
  /* USER CODE END ADC1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void ADC1_Init(void){
 8001324:	b580      	push	{r7, lr}
 8001326:	b084      	sub	sp, #16
 8001328:	af00      	add	r7, sp, #0
	  ADC_ChannelConfTypeDef sConfig = {0};
 800132a:	463b      	mov	r3, r7
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	605a      	str	r2, [r3, #4]
 8001332:	609a      	str	r2, [r3, #8]
 8001334:	60da      	str	r2, [r3, #12]


	  hadc1.Instance = ADC1;
 8001336:	4b28      	ldr	r3, [pc, #160]	; (80013d8 <ADC1_Init+0xb4>)
 8001338:	4a28      	ldr	r2, [pc, #160]	; (80013dc <ADC1_Init+0xb8>)
 800133a:	601a      	str	r2, [r3, #0]
	  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800133c:	4b26      	ldr	r3, [pc, #152]	; (80013d8 <ADC1_Init+0xb4>)
 800133e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001342:	605a      	str	r2, [r3, #4]
	  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001344:	4b24      	ldr	r3, [pc, #144]	; (80013d8 <ADC1_Init+0xb4>)
 8001346:	2200      	movs	r2, #0
 8001348:	609a      	str	r2, [r3, #8]
	  hadc1.Init.ScanConvMode = ENABLE;
 800134a:	4b23      	ldr	r3, [pc, #140]	; (80013d8 <ADC1_Init+0xb4>)
 800134c:	2201      	movs	r2, #1
 800134e:	611a      	str	r2, [r3, #16]
	  hadc1.Init.ContinuousConvMode = ENABLE;
 8001350:	4b21      	ldr	r3, [pc, #132]	; (80013d8 <ADC1_Init+0xb4>)
 8001352:	2201      	movs	r2, #1
 8001354:	761a      	strb	r2, [r3, #24]
	  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001356:	4b20      	ldr	r3, [pc, #128]	; (80013d8 <ADC1_Init+0xb4>)
 8001358:	2200      	movs	r2, #0
 800135a:	f883 2020 	strb.w	r2, [r3, #32]
	  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800135e:	4b1e      	ldr	r3, [pc, #120]	; (80013d8 <ADC1_Init+0xb4>)
 8001360:	2200      	movs	r2, #0
 8001362:	62da      	str	r2, [r3, #44]	; 0x2c
	  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001364:	4b1c      	ldr	r3, [pc, #112]	; (80013d8 <ADC1_Init+0xb4>)
 8001366:	4a1e      	ldr	r2, [pc, #120]	; (80013e0 <ADC1_Init+0xbc>)
 8001368:	629a      	str	r2, [r3, #40]	; 0x28
	  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800136a:	4b1b      	ldr	r3, [pc, #108]	; (80013d8 <ADC1_Init+0xb4>)
 800136c:	2200      	movs	r2, #0
 800136e:	60da      	str	r2, [r3, #12]
	  hadc1.Init.NbrOfConversion = 2;
 8001370:	4b19      	ldr	r3, [pc, #100]	; (80013d8 <ADC1_Init+0xb4>)
 8001372:	2202      	movs	r2, #2
 8001374:	61da      	str	r2, [r3, #28]
	  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001376:	4b18      	ldr	r3, [pc, #96]	; (80013d8 <ADC1_Init+0xb4>)
 8001378:	2201      	movs	r2, #1
 800137a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800137e:	4b16      	ldr	r3, [pc, #88]	; (80013d8 <ADC1_Init+0xb4>)
 8001380:	2200      	movs	r2, #0
 8001382:	615a      	str	r2, [r3, #20]
	  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001384:	4814      	ldr	r0, [pc, #80]	; (80013d8 <ADC1_Init+0xb4>)
 8001386:	f001 fee9 	bl	800315c <HAL_ADC_Init>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <ADC1_Init+0x70>
	  {
	    Error_Handler();
 8001390:	f000 fed4 	bl	800213c <Error_Handler>
	  }

	  sConfig.Channel = ADC_CHANNEL_3;
 8001394:	2303      	movs	r3, #3
 8001396:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = 1;
 8001398:	2301      	movs	r3, #1
 800139a:	607b      	str	r3, [r7, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800139c:	2307      	movs	r3, #7
 800139e:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013a0:	463b      	mov	r3, r7
 80013a2:	4619      	mov	r1, r3
 80013a4:	480c      	ldr	r0, [pc, #48]	; (80013d8 <ADC1_Init+0xb4>)
 80013a6:	f002 f885 	bl	80034b4 <HAL_ADC_ConfigChannel>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <ADC1_Init+0x90>
	  {
	    Error_Handler();
 80013b0:	f000 fec4 	bl	800213c <Error_Handler>
	  }

	  sConfig.Channel = ADC_CHANNEL_4;
 80013b4:	2304      	movs	r3, #4
 80013b6:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = 2;
 80013b8:	2302      	movs	r3, #2
 80013ba:	607b      	str	r3, [r7, #4]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013bc:	463b      	mov	r3, r7
 80013be:	4619      	mov	r1, r3
 80013c0:	4805      	ldr	r0, [pc, #20]	; (80013d8 <ADC1_Init+0xb4>)
 80013c2:	f002 f877 	bl	80034b4 <HAL_ADC_ConfigChannel>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <ADC1_Init+0xac>
	  {
	    Error_Handler();
 80013cc:	f000 feb6 	bl	800213c <Error_Handler>
	  }

}
 80013d0:	bf00      	nop
 80013d2:	3710      	adds	r7, #16
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	200001b4 	.word	0x200001b4
 80013dc:	40012000 	.word	0x40012000
 80013e0:	0f000001 	.word	0x0f000001

080013e4 <I2C1_DMA_Init>:
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);

}

/* USER CODE BEGIN 2 */
void I2C1_DMA_Init(void){
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
	__HAL_RCC_DMA1_CLK_ENABLE();
 80013ea:	2300      	movs	r3, #0
 80013ec:	607b      	str	r3, [r7, #4]
 80013ee:	4b0c      	ldr	r3, [pc, #48]	; (8001420 <I2C1_DMA_Init+0x3c>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f2:	4a0b      	ldr	r2, [pc, #44]	; (8001420 <I2C1_DMA_Init+0x3c>)
 80013f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013f8:	6313      	str	r3, [r2, #48]	; 0x30
 80013fa:	4b09      	ldr	r3, [pc, #36]	; (8001420 <I2C1_DMA_Init+0x3c>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001402:	607b      	str	r3, [r7, #4]
 8001404:	687b      	ldr	r3, [r7, #4]
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 1, 0);
 8001406:	2200      	movs	r2, #0
 8001408:	2101      	movs	r1, #1
 800140a:	200b      	movs	r0, #11
 800140c:	f002 fc1f 	bl	8003c4e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001410:	200b      	movs	r0, #11
 8001412:	f002 fc38 	bl	8003c86 <HAL_NVIC_EnableIRQ>
}
 8001416:	bf00      	nop
 8001418:	3708      	adds	r7, #8
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	40023800 	.word	0x40023800

08001424 <ADC_DMA_Init>:
void ADC_DMA_Init(void){
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
	__HAL_RCC_DMA2_CLK_ENABLE();
 800142a:	2300      	movs	r3, #0
 800142c:	607b      	str	r3, [r7, #4]
 800142e:	4b0a      	ldr	r3, [pc, #40]	; (8001458 <ADC_DMA_Init+0x34>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001432:	4a09      	ldr	r2, [pc, #36]	; (8001458 <ADC_DMA_Init+0x34>)
 8001434:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001438:	6313      	str	r3, [r2, #48]	; 0x30
 800143a:	4b07      	ldr	r3, [pc, #28]	; (8001458 <ADC_DMA_Init+0x34>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001442:	607b      	str	r3, [r7, #4]
 8001444:	687b      	ldr	r3, [r7, #4]
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 1, 0);
 8001446:	2200      	movs	r2, #0
 8001448:	2101      	movs	r1, #1
 800144a:	2038      	movs	r0, #56	; 0x38
 800144c:	f002 fbff 	bl	8003c4e <HAL_NVIC_SetPriority>
	//HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
}
 8001450:	bf00      	nop
 8001452:	3708      	adds	r7, #8
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	40023800 	.word	0x40023800

0800145c <TIM_DMA_Init>:

void TIM_DMA_Init(void){
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
	__HAL_RCC_DMA1_CLK_ENABLE();
 8001462:	2300      	movs	r3, #0
 8001464:	607b      	str	r3, [r7, #4]
 8001466:	4b0c      	ldr	r3, [pc, #48]	; (8001498 <TIM_DMA_Init+0x3c>)
 8001468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146a:	4a0b      	ldr	r2, [pc, #44]	; (8001498 <TIM_DMA_Init+0x3c>)
 800146c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001470:	6313      	str	r3, [r2, #48]	; 0x30
 8001472:	4b09      	ldr	r3, [pc, #36]	; (8001498 <TIM_DMA_Init+0x3c>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001476:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800147a:	607b      	str	r3, [r7, #4]
 800147c:	687b      	ldr	r3, [r7, #4]
	HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 1, 0);
 800147e:	2200      	movs	r2, #0
 8001480:	2101      	movs	r1, #1
 8001482:	200f      	movs	r0, #15
 8001484:	f002 fbe3 	bl	8003c4e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001488:	200f      	movs	r0, #15
 800148a:	f002 fbfc 	bl	8003c86 <HAL_NVIC_EnableIRQ>
}
 800148e:	bf00      	nop
 8001490:	3708      	adds	r7, #8
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	40023800 	.word	0x40023800

0800149c <I2C2_DMA_Init>:

void I2C2_DMA_Init(void){
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
	__HAL_RCC_DMA1_CLK_ENABLE();
 80014a2:	2300      	movs	r3, #0
 80014a4:	607b      	str	r3, [r7, #4]
 80014a6:	4b0c      	ldr	r3, [pc, #48]	; (80014d8 <I2C2_DMA_Init+0x3c>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014aa:	4a0b      	ldr	r2, [pc, #44]	; (80014d8 <I2C2_DMA_Init+0x3c>)
 80014ac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014b0:	6313      	str	r3, [r2, #48]	; 0x30
 80014b2:	4b09      	ldr	r3, [pc, #36]	; (80014d8 <I2C2_DMA_Init+0x3c>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014ba:	607b      	str	r3, [r7, #4]
 80014bc:	687b      	ldr	r3, [r7, #4]
	  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 1, 0);
 80014be:	2200      	movs	r2, #0
 80014c0:	2101      	movs	r1, #1
 80014c2:	200d      	movs	r0, #13
 80014c4:	f002 fbc3 	bl	8003c4e <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80014c8:	200d      	movs	r0, #13
 80014ca:	f002 fbdc 	bl	8003c86 <HAL_NVIC_EnableIRQ>
}
 80014ce:	bf00      	nop
 80014d0:	3708      	adds	r7, #8
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	40023800 	.word	0x40023800

080014dc <I2C_GPIO_Init>:

}

/* USER CODE BEGIN 2 */
void I2C_GPIO_Init(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014e2:	2300      	movs	r3, #0
 80014e4:	607b      	str	r3, [r7, #4]
 80014e6:	4b09      	ldr	r3, [pc, #36]	; (800150c <I2C_GPIO_Init+0x30>)
 80014e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ea:	4a08      	ldr	r2, [pc, #32]	; (800150c <I2C_GPIO_Init+0x30>)
 80014ec:	f043 0302 	orr.w	r3, r3, #2
 80014f0:	6313      	str	r3, [r2, #48]	; 0x30
 80014f2:	4b06      	ldr	r3, [pc, #24]	; (800150c <I2C_GPIO_Init+0x30>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f6:	f003 0302 	and.w	r3, r3, #2
 80014fa:	607b      	str	r3, [r7, #4]
 80014fc:	687b      	ldr	r3, [r7, #4]

}
 80014fe:	bf00      	nop
 8001500:	370c      	adds	r7, #12
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	40023800 	.word	0x40023800

08001510 <ADC_GPIO_Init>:

void ADC_GPIO_Init(void){
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001516:	2300      	movs	r3, #0
 8001518:	607b      	str	r3, [r7, #4]
 800151a:	4b09      	ldr	r3, [pc, #36]	; (8001540 <ADC_GPIO_Init+0x30>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151e:	4a08      	ldr	r2, [pc, #32]	; (8001540 <ADC_GPIO_Init+0x30>)
 8001520:	f043 0302 	orr.w	r3, r3, #2
 8001524:	6313      	str	r3, [r2, #48]	; 0x30
 8001526:	4b06      	ldr	r3, [pc, #24]	; (8001540 <ADC_GPIO_Init+0x30>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152a:	f003 0302 	and.w	r3, r3, #2
 800152e:	607b      	str	r3, [r7, #4]
 8001530:	687b      	ldr	r3, [r7, #4]

}
 8001532:	bf00      	nop
 8001534:	370c      	adds	r7, #12
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	40023800 	.word	0x40023800

08001544 <TIM3_GPIO_Init>:

void TIM3_GPIO_Init(void){
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800154a:	2300      	movs	r3, #0
 800154c:	607b      	str	r3, [r7, #4]
 800154e:	4b09      	ldr	r3, [pc, #36]	; (8001574 <TIM3_GPIO_Init+0x30>)
 8001550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001552:	4a08      	ldr	r2, [pc, #32]	; (8001574 <TIM3_GPIO_Init+0x30>)
 8001554:	f043 0302 	orr.w	r3, r3, #2
 8001558:	6313      	str	r3, [r2, #48]	; 0x30
 800155a:	4b06      	ldr	r3, [pc, #24]	; (8001574 <TIM3_GPIO_Init+0x30>)
 800155c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155e:	f003 0302 	and.w	r3, r3, #2
 8001562:	607b      	str	r3, [r7, #4]
 8001564:	687b      	ldr	r3, [r7, #4]
}
 8001566:	bf00      	nop
 8001568:	370c      	adds	r7, #12
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	40023800 	.word	0x40023800

08001578 <ILI9341_GPIO_Init>:

void ILI9341_GPIO_Init(void){
 8001578:	b580      	push	{r7, lr}
 800157a:	b088      	sub	sp, #32
 800157c:	af00      	add	r7, sp, #0
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 800157e:	2300      	movs	r3, #0
 8001580:	60bb      	str	r3, [r7, #8]
 8001582:	4b1c      	ldr	r3, [pc, #112]	; (80015f4 <ILI9341_GPIO_Init+0x7c>)
 8001584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001586:	4a1b      	ldr	r2, [pc, #108]	; (80015f4 <ILI9341_GPIO_Init+0x7c>)
 8001588:	f043 0301 	orr.w	r3, r3, #1
 800158c:	6313      	str	r3, [r2, #48]	; 0x30
 800158e:	4b19      	ldr	r3, [pc, #100]	; (80015f4 <ILI9341_GPIO_Init+0x7c>)
 8001590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001592:	f003 0301 	and.w	r3, r3, #1
 8001596:	60bb      	str	r3, [r7, #8]
 8001598:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 800159a:	2300      	movs	r3, #0
 800159c:	607b      	str	r3, [r7, #4]
 800159e:	4b15      	ldr	r3, [pc, #84]	; (80015f4 <ILI9341_GPIO_Init+0x7c>)
 80015a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a2:	4a14      	ldr	r2, [pc, #80]	; (80015f4 <ILI9341_GPIO_Init+0x7c>)
 80015a4:	f043 0302 	orr.w	r3, r3, #2
 80015a8:	6313      	str	r3, [r2, #48]	; 0x30
 80015aa:	4b12      	ldr	r3, [pc, #72]	; (80015f4 <ILI9341_GPIO_Init+0x7c>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ae:	f003 0302 	and.w	r3, r3, #2
 80015b2:	607b      	str	r3, [r7, #4]
 80015b4:	687b      	ldr	r3, [r7, #4]
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b6:	f107 030c 	add.w	r3, r7, #12
 80015ba:	2200      	movs	r2, #0
 80015bc:	601a      	str	r2, [r3, #0]
 80015be:	605a      	str	r2, [r3, #4]
 80015c0:	609a      	str	r2, [r3, #8]
 80015c2:	60da      	str	r2, [r3, #12]
 80015c4:	611a      	str	r2, [r3, #16]
	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(GPIOB, SPI1_CSN_Pin|DCRS_Pin, GPIO_PIN_SET);
 80015c6:	2201      	movs	r2, #1
 80015c8:	2103      	movs	r1, #3
 80015ca:	480b      	ldr	r0, [pc, #44]	; (80015f8 <ILI9341_GPIO_Init+0x80>)
 80015cc:	f003 fa08 	bl	80049e0 <HAL_GPIO_WritePin>

	  /*Configure GPIO pins : PBPin PBPin */
	  GPIO_InitStruct.Pin = SPI1_CSN_Pin|DCRS_Pin;
 80015d0:	2303      	movs	r3, #3
 80015d2:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015d4:	2301      	movs	r3, #1
 80015d6:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d8:	2300      	movs	r3, #0
 80015da:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015dc:	2303      	movs	r3, #3
 80015de:	61bb      	str	r3, [r7, #24]
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015e0:	f107 030c 	add.w	r3, r7, #12
 80015e4:	4619      	mov	r1, r3
 80015e6:	4804      	ldr	r0, [pc, #16]	; (80015f8 <ILI9341_GPIO_Init+0x80>)
 80015e8:	f002 ff92 	bl	8004510 <HAL_GPIO_Init>

}
 80015ec:	bf00      	nop
 80015ee:	3720      	adds	r7, #32
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	40023800 	.word	0x40023800
 80015f8:	40020400 	.word	0x40020400

080015fc <ILI9341_GPIO_DeInit>:

void ILI9341_GPIO_DeInit(void){
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
	HAL_GPIO_DeInit(GPIOB, SPI1_CSN_Pin|DCRS_Pin);
 8001600:	2103      	movs	r1, #3
 8001602:	4802      	ldr	r0, [pc, #8]	; (800160c <ILI9341_GPIO_DeInit+0x10>)
 8001604:	f003 f908 	bl	8004818 <HAL_GPIO_DeInit>
}
 8001608:	bf00      	nop
 800160a:	bd80      	pop	{r7, pc}
 800160c:	40020400 	.word	0x40020400

08001610 <HAL_I2C_MspInit>:
  /* USER CODE END I2C2_Init 2 */

}

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b08c      	sub	sp, #48	; 0x30
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001618:	f107 031c 	add.w	r3, r7, #28
 800161c:	2200      	movs	r2, #0
 800161e:	601a      	str	r2, [r3, #0]
 8001620:	605a      	str	r2, [r3, #4]
 8001622:	609a      	str	r2, [r3, #8]
 8001624:	60da      	str	r2, [r3, #12]
 8001626:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a68      	ldr	r2, [pc, #416]	; (80017d0 <HAL_I2C_MspInit+0x1c0>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d15a      	bne.n	80016e8 <HAL_I2C_MspInit+0xd8>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001632:	2300      	movs	r3, #0
 8001634:	61bb      	str	r3, [r7, #24]
 8001636:	4b67      	ldr	r3, [pc, #412]	; (80017d4 <HAL_I2C_MspInit+0x1c4>)
 8001638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163a:	4a66      	ldr	r2, [pc, #408]	; (80017d4 <HAL_I2C_MspInit+0x1c4>)
 800163c:	f043 0302 	orr.w	r3, r3, #2
 8001640:	6313      	str	r3, [r2, #48]	; 0x30
 8001642:	4b64      	ldr	r3, [pc, #400]	; (80017d4 <HAL_I2C_MspInit+0x1c4>)
 8001644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001646:	f003 0302 	and.w	r3, r3, #2
 800164a:	61bb      	str	r3, [r7, #24]
 800164c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800164e:	23c0      	movs	r3, #192	; 0xc0
 8001650:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001652:	2312      	movs	r3, #18
 8001654:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001656:	2301      	movs	r3, #1
 8001658:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800165a:	2303      	movs	r3, #3
 800165c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800165e:	2304      	movs	r3, #4
 8001660:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001662:	f107 031c 	add.w	r3, r7, #28
 8001666:	4619      	mov	r1, r3
 8001668:	485b      	ldr	r0, [pc, #364]	; (80017d8 <HAL_I2C_MspInit+0x1c8>)
 800166a:	f002 ff51 	bl	8004510 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800166e:	2300      	movs	r3, #0
 8001670:	617b      	str	r3, [r7, #20]
 8001672:	4b58      	ldr	r3, [pc, #352]	; (80017d4 <HAL_I2C_MspInit+0x1c4>)
 8001674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001676:	4a57      	ldr	r2, [pc, #348]	; (80017d4 <HAL_I2C_MspInit+0x1c4>)
 8001678:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800167c:	6413      	str	r3, [r2, #64]	; 0x40
 800167e:	4b55      	ldr	r3, [pc, #340]	; (80017d4 <HAL_I2C_MspInit+0x1c4>)
 8001680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001682:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001686:	617b      	str	r3, [r7, #20]
 8001688:	697b      	ldr	r3, [r7, #20]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 800168a:	4b54      	ldr	r3, [pc, #336]	; (80017dc <HAL_I2C_MspInit+0x1cc>)
 800168c:	4a54      	ldr	r2, [pc, #336]	; (80017e0 <HAL_I2C_MspInit+0x1d0>)
 800168e:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8001690:	4b52      	ldr	r3, [pc, #328]	; (80017dc <HAL_I2C_MspInit+0x1cc>)
 8001692:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001696:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001698:	4b50      	ldr	r3, [pc, #320]	; (80017dc <HAL_I2C_MspInit+0x1cc>)
 800169a:	2200      	movs	r2, #0
 800169c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800169e:	4b4f      	ldr	r3, [pc, #316]	; (80017dc <HAL_I2C_MspInit+0x1cc>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80016a4:	4b4d      	ldr	r3, [pc, #308]	; (80017dc <HAL_I2C_MspInit+0x1cc>)
 80016a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016aa:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016ac:	4b4b      	ldr	r3, [pc, #300]	; (80017dc <HAL_I2C_MspInit+0x1cc>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016b2:	4b4a      	ldr	r3, [pc, #296]	; (80017dc <HAL_I2C_MspInit+0x1cc>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80016b8:	4b48      	ldr	r3, [pc, #288]	; (80017dc <HAL_I2C_MspInit+0x1cc>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80016be:	4b47      	ldr	r3, [pc, #284]	; (80017dc <HAL_I2C_MspInit+0x1cc>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80016c4:	4b45      	ldr	r3, [pc, #276]	; (80017dc <HAL_I2C_MspInit+0x1cc>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80016ca:	4844      	ldr	r0, [pc, #272]	; (80017dc <HAL_I2C_MspInit+0x1cc>)
 80016cc:	f002 fb12 	bl	8003cf4 <HAL_DMA_Init>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <HAL_I2C_MspInit+0xca>
    {
      Error_Handler();
 80016d6:	f000 fd31 	bl	800213c <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	4a3f      	ldr	r2, [pc, #252]	; (80017dc <HAL_I2C_MspInit+0x1cc>)
 80016de:	639a      	str	r2, [r3, #56]	; 0x38
 80016e0:	4a3e      	ldr	r2, [pc, #248]	; (80017dc <HAL_I2C_MspInit+0x1cc>)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80016e6:	e06f      	b.n	80017c8 <HAL_I2C_MspInit+0x1b8>
  else if(i2cHandle->Instance==I2C2)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a3d      	ldr	r2, [pc, #244]	; (80017e4 <HAL_I2C_MspInit+0x1d4>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d16a      	bne.n	80017c8 <HAL_I2C_MspInit+0x1b8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016f2:	2300      	movs	r3, #0
 80016f4:	613b      	str	r3, [r7, #16]
 80016f6:	4b37      	ldr	r3, [pc, #220]	; (80017d4 <HAL_I2C_MspInit+0x1c4>)
 80016f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fa:	4a36      	ldr	r2, [pc, #216]	; (80017d4 <HAL_I2C_MspInit+0x1c4>)
 80016fc:	f043 0302 	orr.w	r3, r3, #2
 8001700:	6313      	str	r3, [r2, #48]	; 0x30
 8001702:	4b34      	ldr	r3, [pc, #208]	; (80017d4 <HAL_I2C_MspInit+0x1c4>)
 8001704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001706:	f003 0302 	and.w	r3, r3, #2
 800170a:	613b      	str	r3, [r7, #16]
 800170c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800170e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001712:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001714:	2312      	movs	r3, #18
 8001716:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001718:	2300      	movs	r3, #0
 800171a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800171c:	2303      	movs	r3, #3
 800171e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001720:	2304      	movs	r3, #4
 8001722:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001724:	f107 031c 	add.w	r3, r7, #28
 8001728:	4619      	mov	r1, r3
 800172a:	482b      	ldr	r0, [pc, #172]	; (80017d8 <HAL_I2C_MspInit+0x1c8>)
 800172c:	f002 fef0 	bl	8004510 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001730:	2308      	movs	r3, #8
 8001732:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001734:	2312      	movs	r3, #18
 8001736:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001738:	2300      	movs	r3, #0
 800173a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800173c:	2303      	movs	r3, #3
 800173e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8001740:	2309      	movs	r3, #9
 8001742:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001744:	f107 031c 	add.w	r3, r7, #28
 8001748:	4619      	mov	r1, r3
 800174a:	4823      	ldr	r0, [pc, #140]	; (80017d8 <HAL_I2C_MspInit+0x1c8>)
 800174c:	f002 fee0 	bl	8004510 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001750:	2300      	movs	r3, #0
 8001752:	60fb      	str	r3, [r7, #12]
 8001754:	4b1f      	ldr	r3, [pc, #124]	; (80017d4 <HAL_I2C_MspInit+0x1c4>)
 8001756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001758:	4a1e      	ldr	r2, [pc, #120]	; (80017d4 <HAL_I2C_MspInit+0x1c4>)
 800175a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800175e:	6413      	str	r3, [r2, #64]	; 0x40
 8001760:	4b1c      	ldr	r3, [pc, #112]	; (80017d4 <HAL_I2C_MspInit+0x1c4>)
 8001762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001764:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001768:	60fb      	str	r3, [r7, #12]
 800176a:	68fb      	ldr	r3, [r7, #12]
    hdma_i2c2_rx.Instance = DMA1_Stream2;
 800176c:	4b1e      	ldr	r3, [pc, #120]	; (80017e8 <HAL_I2C_MspInit+0x1d8>)
 800176e:	4a1f      	ldr	r2, [pc, #124]	; (80017ec <HAL_I2C_MspInit+0x1dc>)
 8001770:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Channel = DMA_CHANNEL_7;
 8001772:	4b1d      	ldr	r3, [pc, #116]	; (80017e8 <HAL_I2C_MspInit+0x1d8>)
 8001774:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8001778:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800177a:	4b1b      	ldr	r3, [pc, #108]	; (80017e8 <HAL_I2C_MspInit+0x1d8>)
 800177c:	2200      	movs	r2, #0
 800177e:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001780:	4b19      	ldr	r3, [pc, #100]	; (80017e8 <HAL_I2C_MspInit+0x1d8>)
 8001782:	2200      	movs	r2, #0
 8001784:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001786:	4b18      	ldr	r3, [pc, #96]	; (80017e8 <HAL_I2C_MspInit+0x1d8>)
 8001788:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800178c:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800178e:	4b16      	ldr	r3, [pc, #88]	; (80017e8 <HAL_I2C_MspInit+0x1d8>)
 8001790:	2200      	movs	r2, #0
 8001792:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001794:	4b14      	ldr	r3, [pc, #80]	; (80017e8 <HAL_I2C_MspInit+0x1d8>)
 8001796:	2200      	movs	r2, #0
 8001798:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 800179a:	4b13      	ldr	r3, [pc, #76]	; (80017e8 <HAL_I2C_MspInit+0x1d8>)
 800179c:	2200      	movs	r2, #0
 800179e:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80017a0:	4b11      	ldr	r3, [pc, #68]	; (80017e8 <HAL_I2C_MspInit+0x1d8>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017a6:	4b10      	ldr	r3, [pc, #64]	; (80017e8 <HAL_I2C_MspInit+0x1d8>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 80017ac:	480e      	ldr	r0, [pc, #56]	; (80017e8 <HAL_I2C_MspInit+0x1d8>)
 80017ae:	f002 faa1 	bl	8003cf4 <HAL_DMA_Init>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d001      	beq.n	80017bc <HAL_I2C_MspInit+0x1ac>
      Error_Handler();
 80017b8:	f000 fcc0 	bl	800213c <Error_Handler>
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c2_rx);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	4a0a      	ldr	r2, [pc, #40]	; (80017e8 <HAL_I2C_MspInit+0x1d8>)
 80017c0:	639a      	str	r2, [r3, #56]	; 0x38
 80017c2:	4a09      	ldr	r2, [pc, #36]	; (80017e8 <HAL_I2C_MspInit+0x1d8>)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6393      	str	r3, [r2, #56]	; 0x38
}
 80017c8:	bf00      	nop
 80017ca:	3730      	adds	r7, #48	; 0x30
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	40005400 	.word	0x40005400
 80017d4:	40023800 	.word	0x40023800
 80017d8:	40020400 	.word	0x40020400
 80017dc:	20000304 	.word	0x20000304
 80017e0:	40026010 	.word	0x40026010
 80017e4:	40005800 	.word	0x40005800
 80017e8:	20000364 	.word	0x20000364
 80017ec:	40026040 	.word	0x40026040

080017f0 <I2C1_Init>:
  /* USER CODE END I2C2_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void I2C1_Init(void){
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0

	  hi2c1.Instance = I2C1;
 80017f4:	4b12      	ldr	r3, [pc, #72]	; (8001840 <I2C1_Init+0x50>)
 80017f6:	4a13      	ldr	r2, [pc, #76]	; (8001844 <I2C1_Init+0x54>)
 80017f8:	601a      	str	r2, [r3, #0]
	  hi2c1.Init.ClockSpeed = 400000;
 80017fa:	4b11      	ldr	r3, [pc, #68]	; (8001840 <I2C1_Init+0x50>)
 80017fc:	4a12      	ldr	r2, [pc, #72]	; (8001848 <I2C1_Init+0x58>)
 80017fe:	605a      	str	r2, [r3, #4]
	  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001800:	4b0f      	ldr	r3, [pc, #60]	; (8001840 <I2C1_Init+0x50>)
 8001802:	2200      	movs	r2, #0
 8001804:	609a      	str	r2, [r3, #8]
	  hi2c1.Init.OwnAddress1 = 0;
 8001806:	4b0e      	ldr	r3, [pc, #56]	; (8001840 <I2C1_Init+0x50>)
 8001808:	2200      	movs	r2, #0
 800180a:	60da      	str	r2, [r3, #12]
	  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800180c:	4b0c      	ldr	r3, [pc, #48]	; (8001840 <I2C1_Init+0x50>)
 800180e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001812:	611a      	str	r2, [r3, #16]
	  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001814:	4b0a      	ldr	r3, [pc, #40]	; (8001840 <I2C1_Init+0x50>)
 8001816:	2200      	movs	r2, #0
 8001818:	615a      	str	r2, [r3, #20]
	  hi2c1.Init.OwnAddress2 = 0;
 800181a:	4b09      	ldr	r3, [pc, #36]	; (8001840 <I2C1_Init+0x50>)
 800181c:	2200      	movs	r2, #0
 800181e:	619a      	str	r2, [r3, #24]
	  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001820:	4b07      	ldr	r3, [pc, #28]	; (8001840 <I2C1_Init+0x50>)
 8001822:	2200      	movs	r2, #0
 8001824:	61da      	str	r2, [r3, #28]
	  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001826:	4b06      	ldr	r3, [pc, #24]	; (8001840 <I2C1_Init+0x50>)
 8001828:	2200      	movs	r2, #0
 800182a:	621a      	str	r2, [r3, #32]
	  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800182c:	4804      	ldr	r0, [pc, #16]	; (8001840 <I2C1_Init+0x50>)
 800182e:	f003 f8f1 	bl	8004a14 <HAL_I2C_Init>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d001      	beq.n	800183c <I2C1_Init+0x4c>
	  {
	    Error_Handler();
 8001838:	f000 fc80 	bl	800213c <Error_Handler>
	  }

}
 800183c:	bf00      	nop
 800183e:	bd80      	pop	{r7, pc}
 8001840:	2000025c 	.word	0x2000025c
 8001844:	40005400 	.word	0x40005400
 8001848:	00061a80 	.word	0x00061a80

0800184c <I2C2_Init>:

void I2C2_Init(void){
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
	  hi2c2.Instance = I2C2;
 8001850:	4b12      	ldr	r3, [pc, #72]	; (800189c <I2C2_Init+0x50>)
 8001852:	4a13      	ldr	r2, [pc, #76]	; (80018a0 <I2C2_Init+0x54>)
 8001854:	601a      	str	r2, [r3, #0]
	  hi2c2.Init.ClockSpeed = 100000;
 8001856:	4b11      	ldr	r3, [pc, #68]	; (800189c <I2C2_Init+0x50>)
 8001858:	4a12      	ldr	r2, [pc, #72]	; (80018a4 <I2C2_Init+0x58>)
 800185a:	605a      	str	r2, [r3, #4]
	  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800185c:	4b0f      	ldr	r3, [pc, #60]	; (800189c <I2C2_Init+0x50>)
 800185e:	2200      	movs	r2, #0
 8001860:	609a      	str	r2, [r3, #8]
	  hi2c2.Init.OwnAddress1 = 0;
 8001862:	4b0e      	ldr	r3, [pc, #56]	; (800189c <I2C2_Init+0x50>)
 8001864:	2200      	movs	r2, #0
 8001866:	60da      	str	r2, [r3, #12]
	  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001868:	4b0c      	ldr	r3, [pc, #48]	; (800189c <I2C2_Init+0x50>)
 800186a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800186e:	611a      	str	r2, [r3, #16]
	  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001870:	4b0a      	ldr	r3, [pc, #40]	; (800189c <I2C2_Init+0x50>)
 8001872:	2200      	movs	r2, #0
 8001874:	615a      	str	r2, [r3, #20]
	  hi2c2.Init.OwnAddress2 = 0;
 8001876:	4b09      	ldr	r3, [pc, #36]	; (800189c <I2C2_Init+0x50>)
 8001878:	2200      	movs	r2, #0
 800187a:	619a      	str	r2, [r3, #24]
	  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800187c:	4b07      	ldr	r3, [pc, #28]	; (800189c <I2C2_Init+0x50>)
 800187e:	2200      	movs	r2, #0
 8001880:	61da      	str	r2, [r3, #28]
	  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001882:	4b06      	ldr	r3, [pc, #24]	; (800189c <I2C2_Init+0x50>)
 8001884:	2200      	movs	r2, #0
 8001886:	621a      	str	r2, [r3, #32]
	  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001888:	4804      	ldr	r0, [pc, #16]	; (800189c <I2C2_Init+0x50>)
 800188a:	f003 f8c3 	bl	8004a14 <HAL_I2C_Init>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d001      	beq.n	8001898 <I2C2_Init+0x4c>
	  {
	    Error_Handler();
 8001894:	f000 fc52 	bl	800213c <Error_Handler>
	  }
}
 8001898:	bf00      	nop
 800189a:	bd80      	pop	{r7, pc}
 800189c:	200002b0 	.word	0x200002b0
 80018a0:	40005800 	.word	0x40005800
 80018a4:	000186a0 	.word	0x000186a0

080018a8 <__io_putchar>:
#include "stm32f4xx_hal.h"
#include "usart.h"
#include <stdio.h>
#include <stdarg.h>

int __io_putchar(int ch){
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b084      	sub	sp, #16
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
	uint8_t pchar = ch;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	b2db      	uxtb	r3, r3
 80018b4:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart1, &pchar, 1, HAL_MAX_DELAY);
 80018b6:	f107 010f 	add.w	r1, r7, #15
 80018ba:	f04f 33ff 	mov.w	r3, #4294967295
 80018be:	2201      	movs	r2, #1
 80018c0:	4803      	ldr	r0, [pc, #12]	; (80018d0 <__io_putchar+0x28>)
 80018c2:	f007 fdd9 	bl	8009478 <HAL_UART_Transmit>
	return ch;
 80018c6:	687b      	ldr	r3, [r7, #4]
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	3710      	adds	r7, #16
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	20000e4c 	.word	0x20000e4c

080018d4 <_log>:

void _log(Log_Subsystem_t subsystem, const char* msg, ...){
 80018d4:	b40e      	push	{r1, r2, r3}
 80018d6:	b580      	push	{r7, lr}
 80018d8:	b085      	sub	sp, #20
 80018da:	af00      	add	r7, sp, #0
 80018dc:	4603      	mov	r3, r0
 80018de:	71fb      	strb	r3, [r7, #7]
    va_list args;
	va_start(args, msg);
 80018e0:	f107 0320 	add.w	r3, r7, #32
 80018e4:	60fb      	str	r3, [r7, #12]
	switch(subsystem){
 80018e6:	79fb      	ldrb	r3, [r7, #7]
 80018e8:	2b05      	cmp	r3, #5
 80018ea:	d827      	bhi.n	800193c <_log+0x68>
 80018ec:	a201      	add	r2, pc, #4	; (adr r2, 80018f4 <_log+0x20>)
 80018ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018f2:	bf00      	nop
 80018f4:	0800190d 	.word	0x0800190d
 80018f8:	08001915 	.word	0x08001915
 80018fc:	0800191d 	.word	0x0800191d
 8001900:	08001925 	.word	0x08001925
 8001904:	0800192d 	.word	0x0800192d
 8001908:	08001935 	.word	0x08001935
		case(log_i2c):
			printf("Debug Subsystem I2C: ");
 800190c:	4816      	ldr	r0, [pc, #88]	; (8001968 <_log+0x94>)
 800190e:	f00c f911 	bl	800db34 <iprintf>
				break;
 8001912:	e016      	b.n	8001942 <_log+0x6e>
		case(log_lps22hh):
			printf("Debug Subsystem LPS22HH: ");
 8001914:	4815      	ldr	r0, [pc, #84]	; (800196c <_log+0x98>)
 8001916:	f00c f90d 	bl	800db34 <iprintf>
				break;
 800191a:	e012      	b.n	8001942 <_log+0x6e>
		case(log_iis2mdc):
			printf("Debug Subsystem IIS2MDC: ");
 800191c:	4814      	ldr	r0, [pc, #80]	; (8001970 <_log+0x9c>)
 800191e:	f00c f909 	bl	800db34 <iprintf>
				break;
 8001922:	e00e      	b.n	8001942 <_log+0x6e>
		case(log_hts221):
			printf("Debug Subsystem HTS221: ");
 8001924:	4813      	ldr	r0, [pc, #76]	; (8001974 <_log+0xa0>)
 8001926:	f00c f905 	bl	800db34 <iprintf>
				break;
 800192a:	e00a      	b.n	8001942 <_log+0x6e>
		case(log_ism330dhcx):
			printf("Debug Subsystem ISM330DHCX: ");
 800192c:	4812      	ldr	r0, [pc, #72]	; (8001978 <_log+0xa4>)
 800192e:	f00c f901 	bl	800db34 <iprintf>
				break;
 8001932:	e006      	b.n	8001942 <_log+0x6e>
		case(log_mcp23017):
			printf("Debug Subsystem MCP23017: ");
 8001934:	4811      	ldr	r0, [pc, #68]	; (800197c <_log+0xa8>)
 8001936:	f00c f8fd 	bl	800db34 <iprintf>
		        break;
 800193a:	e002      	b.n	8001942 <_log+0x6e>
		default:
			printf("Unknown Debug Subsystem: ");
 800193c:	4810      	ldr	r0, [pc, #64]	; (8001980 <_log+0xac>)
 800193e:	f00c f8f9 	bl	800db34 <iprintf>
	}
	vfprintf(stdout, msg, args);
 8001942:	4b10      	ldr	r3, [pc, #64]	; (8001984 <_log+0xb0>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	68fa      	ldr	r2, [r7, #12]
 800194a:	69f9      	ldr	r1, [r7, #28]
 800194c:	4618      	mov	r0, r3
 800194e:	f00b ff53 	bl	800d7f8 <vfiprintf>
	printf("\n");
 8001952:	200a      	movs	r0, #10
 8001954:	f00c f906 	bl	800db64 <putchar>
	va_end(args);
}
 8001958:	bf00      	nop
 800195a:	3714      	adds	r7, #20
 800195c:	46bd      	mov	sp, r7
 800195e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001962:	b003      	add	sp, #12
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	0800e80c 	.word	0x0800e80c
 800196c:	0800e824 	.word	0x0800e824
 8001970:	0800e840 	.word	0x0800e840
 8001974:	0800e85c 	.word	0x0800e85c
 8001978:	0800e878 	.word	0x0800e878
 800197c:	0800e898 	.word	0x0800e898
 8001980:	0800e8b4 	.word	0x0800e8b4
 8001984:	20000130 	.word	0x20000130

08001988 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800198e:	f001 fb4f 	bl	8003030 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001992:	f000 f83d 	bl	8001a10 <SystemClock_Config>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */

  /* USER CODE BEGIN 2 */
  MX_USB_DEVICE_Init();
 8001996:	f00b f943 	bl	800cc20 <MX_USB_DEVICE_Init>
  InitScreen();
 800199a:	f000 f94f 	bl	8001c3c <InitScreen>
  InitLEDs();
 800199e:	f000 f8f7 	bl	8001b90 <InitLEDs>
  InitTouchButtons();
 80019a2:	f000 fadb 	bl	8001f5c <InitTouchButtons>
  InitButtons();
 80019a6:	f000 f89b 	bl	8001ae0 <InitButtons>
  InitJoystick();
 80019aa:	f000 f8c7 	bl	8001b3c <InitJoystick>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 for(uint8_t i = 0; i < 64; i++){
 80019ae:	2300      	movs	r3, #0
 80019b0:	71fb      	strb	r3, [r7, #7]
 80019b2:	e00c      	b.n	80019ce <main+0x46>
		 ButtonRead(&Buttons[i]);
 80019b4:	79fa      	ldrb	r2, [r7, #7]
 80019b6:	4613      	mov	r3, r2
 80019b8:	00db      	lsls	r3, r3, #3
 80019ba:	1a9b      	subs	r3, r3, r2
 80019bc:	009b      	lsls	r3, r3, #2
 80019be:	4a11      	ldr	r2, [pc, #68]	; (8001a04 <main+0x7c>)
 80019c0:	4413      	add	r3, r2
 80019c2:	4618      	mov	r0, r3
 80019c4:	f000 fece 	bl	8002764 <ButtonRead>
	 for(uint8_t i = 0; i < 64; i++){
 80019c8:	79fb      	ldrb	r3, [r7, #7]
 80019ca:	3301      	adds	r3, #1
 80019cc:	71fb      	strb	r3, [r7, #7]
 80019ce:	79fb      	ldrb	r3, [r7, #7]
 80019d0:	2b3f      	cmp	r3, #63	; 0x3f
 80019d2:	d9ef      	bls.n	80019b4 <main+0x2c>
	 }
	 for(uint8_t i = 0; i < 12; i++){
 80019d4:	2300      	movs	r3, #0
 80019d6:	71bb      	strb	r3, [r7, #6]
 80019d8:	e00c      	b.n	80019f4 <main+0x6c>
		 TouchButtonRead(&TouchButton[i]);
 80019da:	79ba      	ldrb	r2, [r7, #6]
 80019dc:	4613      	mov	r3, r2
 80019de:	00db      	lsls	r3, r3, #3
 80019e0:	4413      	add	r3, r2
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	4a08      	ldr	r2, [pc, #32]	; (8001a08 <main+0x80>)
 80019e6:	4413      	add	r3, r2
 80019e8:	4618      	mov	r0, r3
 80019ea:	f001 fa6c 	bl	8002ec6 <TouchButtonRead>
	 for(uint8_t i = 0; i < 12; i++){
 80019ee:	79bb      	ldrb	r3, [r7, #6]
 80019f0:	3301      	adds	r3, #1
 80019f2:	71bb      	strb	r3, [r7, #6]
 80019f4:	79bb      	ldrb	r3, [r7, #6]
 80019f6:	2b0b      	cmp	r3, #11
 80019f8:	d9ef      	bls.n	80019da <main+0x52>
	 }
	JoystickRead(&Joystick);
 80019fa:	4804      	ldr	r0, [pc, #16]	; (8001a0c <main+0x84>)
 80019fc:	f001 f80a 	bl	8002a14 <JoystickRead>
	 for(uint8_t i = 0; i < 64; i++){
 8001a00:	e7d5      	b.n	80019ae <main+0x26>
 8001a02:	bf00      	nop
 8001a04:	200003c4 	.word	0x200003c4
 8001a08:	20000b98 	.word	0x20000b98
 8001a0c:	20000ac4 	.word	0x20000ac4

08001a10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b094      	sub	sp, #80	; 0x50
 8001a14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a16:	f107 0320 	add.w	r3, r7, #32
 8001a1a:	2230      	movs	r2, #48	; 0x30
 8001a1c:	2100      	movs	r1, #0
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f00b fd88 	bl	800d534 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a24:	f107 030c 	add.w	r3, r7, #12
 8001a28:	2200      	movs	r2, #0
 8001a2a:	601a      	str	r2, [r3, #0]
 8001a2c:	605a      	str	r2, [r3, #4]
 8001a2e:	609a      	str	r2, [r3, #8]
 8001a30:	60da      	str	r2, [r3, #12]
 8001a32:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a34:	2300      	movs	r3, #0
 8001a36:	60bb      	str	r3, [r7, #8]
 8001a38:	4b27      	ldr	r3, [pc, #156]	; (8001ad8 <SystemClock_Config+0xc8>)
 8001a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3c:	4a26      	ldr	r2, [pc, #152]	; (8001ad8 <SystemClock_Config+0xc8>)
 8001a3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a42:	6413      	str	r3, [r2, #64]	; 0x40
 8001a44:	4b24      	ldr	r3, [pc, #144]	; (8001ad8 <SystemClock_Config+0xc8>)
 8001a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a4c:	60bb      	str	r3, [r7, #8]
 8001a4e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a50:	2300      	movs	r3, #0
 8001a52:	607b      	str	r3, [r7, #4]
 8001a54:	4b21      	ldr	r3, [pc, #132]	; (8001adc <SystemClock_Config+0xcc>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a20      	ldr	r2, [pc, #128]	; (8001adc <SystemClock_Config+0xcc>)
 8001a5a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a5e:	6013      	str	r3, [r2, #0]
 8001a60:	4b1e      	ldr	r3, [pc, #120]	; (8001adc <SystemClock_Config+0xcc>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001a68:	607b      	str	r3, [r7, #4]
 8001a6a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a70:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a74:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a76:	2302      	movs	r3, #2
 8001a78:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a7a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001a80:	2319      	movs	r3, #25
 8001a82:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001a84:	23c0      	movs	r3, #192	; 0xc0
 8001a86:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a88:	2302      	movs	r3, #2
 8001a8a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001a8c:	2304      	movs	r3, #4
 8001a8e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a90:	f107 0320 	add.w	r3, r7, #32
 8001a94:	4618      	mov	r0, r3
 8001a96:	f005 fa33 	bl	8006f00 <HAL_RCC_OscConfig>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d001      	beq.n	8001aa4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001aa0:	f000 fb4c 	bl	800213c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001aa4:	230f      	movs	r3, #15
 8001aa6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001aa8:	2302      	movs	r3, #2
 8001aaa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001aac:	2300      	movs	r3, #0
 8001aae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ab0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ab4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001aba:	f107 030c 	add.w	r3, r7, #12
 8001abe:	2103      	movs	r1, #3
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f005 fc95 	bl	80073f0 <HAL_RCC_ClockConfig>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d001      	beq.n	8001ad0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001acc:	f000 fb36 	bl	800213c <Error_Handler>
  }
}
 8001ad0:	bf00      	nop
 8001ad2:	3750      	adds	r7, #80	; 0x50
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	40023800 	.word	0x40023800
 8001adc:	40007000 	.word	0x40007000

08001ae0 <InitButtons>:

/* USER CODE BEGIN 4 */
void InitButtons(){
 8001ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ae2:	b087      	sub	sp, #28
 8001ae4:	af04      	add	r7, sp, #16
	Button_Init_Struct_t Settings = {
 8001ae6:	463b      	mov	r3, r7
 8001ae8:	2200      	movs	r2, #0
 8001aea:	601a      	str	r2, [r3, #0]
 8001aec:	711a      	strb	r2, [r3, #4]
			.KeyFunction = 0,
			.ModKeyFunction = 0,
			.MouseFunction = 0,
			.WheelFunction = 0,
	};
	for(uint8_t i = 0; i < NUMBER_OF_IO_EXPANDERS*PINS_PER_EXPANDER; i++){
 8001aee:	2300      	movs	r3, #0
 8001af0:	71fb      	strb	r3, [r7, #7]
 8001af2:	e017      	b.n	8001b24 <InitButtons+0x44>
		Settings.ButtonIDNumber = i;
 8001af4:	79fb      	ldrb	r3, [r7, #7]
 8001af6:	703b      	strb	r3, [r7, #0]
        ButtonInit(Settings, &Buttons[i], ButtonIO_Driver);
 8001af8:	79fa      	ldrb	r2, [r7, #7]
 8001afa:	4613      	mov	r3, r2
 8001afc:	00db      	lsls	r3, r3, #3
 8001afe:	1a9b      	subs	r3, r3, r2
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	4a0c      	ldr	r2, [pc, #48]	; (8001b34 <InitButtons+0x54>)
 8001b04:	189e      	adds	r6, r3, r2
 8001b06:	4d0c      	ldr	r5, [pc, #48]	; (8001b38 <InitButtons+0x58>)
 8001b08:	466c      	mov	r4, sp
 8001b0a:	1d2b      	adds	r3, r5, #4
 8001b0c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b0e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001b12:	682b      	ldr	r3, [r5, #0]
 8001b14:	4632      	mov	r2, r6
 8001b16:	4639      	mov	r1, r7
 8001b18:	c903      	ldmia	r1, {r0, r1}
 8001b1a:	f000 fdf1 	bl	8002700 <ButtonInit>
	for(uint8_t i = 0; i < NUMBER_OF_IO_EXPANDERS*PINS_PER_EXPANDER; i++){
 8001b1e:	79fb      	ldrb	r3, [r7, #7]
 8001b20:	3301      	adds	r3, #1
 8001b22:	71fb      	strb	r3, [r7, #7]
 8001b24:	79fb      	ldrb	r3, [r7, #7]
 8001b26:	2b3f      	cmp	r3, #63	; 0x3f
 8001b28:	d9e4      	bls.n	8001af4 <InitButtons+0x14>
	}
}
 8001b2a:	bf00      	nop
 8001b2c:	bf00      	nop
 8001b2e:	370c      	adds	r7, #12
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b34:	200003c4 	.word	0x200003c4
 8001b38:	0800e9cc 	.word	0x0800e9cc

08001b3c <InitJoystick>:

void InitJoystick(){
 8001b3c:	b5b0      	push	{r4, r5, r7, lr}
 8001b3e:	b096      	sub	sp, #88	; 0x58
 8001b40:	af0c      	add	r7, sp, #48	; 0x30
    Joystick_Init_Struct_t Settings = {
 8001b42:	1d3b      	adds	r3, r7, #4
 8001b44:	2224      	movs	r2, #36	; 0x24
 8001b46:	2100      	movs	r1, #0
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f00b fcf3 	bl	800d534 <memset>
 8001b4e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001b52:	80bb      	strh	r3, [r7, #4]
 8001b54:	2301      	movs	r3, #1
 8001b56:	71bb      	strb	r3, [r7, #6]
    		.DeadZone = 2000,
			.Mode = Joystick4Way
    };
    JoystickInit(Settings, &Joystick, JoystickIO_Driver);
 8001b58:	4b0b      	ldr	r3, [pc, #44]	; (8001b88 <InitJoystick+0x4c>)
 8001b5a:	ac06      	add	r4, sp, #24
 8001b5c:	461d      	mov	r5, r3
 8001b5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b62:	682b      	ldr	r3, [r5, #0]
 8001b64:	6023      	str	r3, [r4, #0]
 8001b66:	4b09      	ldr	r3, [pc, #36]	; (8001b8c <InitJoystick+0x50>)
 8001b68:	9305      	str	r3, [sp, #20]
 8001b6a:	466d      	mov	r5, sp
 8001b6c:	f107 0414 	add.w	r4, r7, #20
 8001b70:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b72:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b74:	6823      	ldr	r3, [r4, #0]
 8001b76:	602b      	str	r3, [r5, #0]
 8001b78:	1d3b      	adds	r3, r7, #4
 8001b7a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b7c:	f000 feec 	bl	8002958 <JoystickInit>
}
 8001b80:	bf00      	nop
 8001b82:	3728      	adds	r7, #40	; 0x28
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bdb0      	pop	{r4, r5, r7, pc}
 8001b88:	0800e9e0 	.word	0x0800e9e0
 8001b8c:	20000ac4 	.word	0x20000ac4

08001b90 <InitLEDs>:

void InitLEDs(){
 8001b90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b92:	b08d      	sub	sp, #52	; 0x34
 8001b94:	af04      	add	r7, sp, #16
	SerialLED_InitStruct_t LED_Settings[4] = {
 8001b96:	1d3b      	adds	r3, r7, #4
 8001b98:	2200      	movs	r2, #0
 8001b9a:	601a      	str	r2, [r3, #0]
 8001b9c:	605a      	str	r2, [r3, #4]
 8001b9e:	609a      	str	r2, [r3, #8]
 8001ba0:	60da      	str	r2, [r3, #12]
 8001ba2:	611a      	str	r2, [r3, #16]
 8001ba4:	615a      	str	r2, [r3, #20]
 8001ba6:	23ff      	movs	r3, #255	; 0xff
 8001ba8:	71fb      	strb	r3, [r7, #7]
 8001baa:	23ff      	movs	r3, #255	; 0xff
 8001bac:	733b      	strb	r3, [r7, #12]
 8001bae:	23ff      	movs	r3, #255	; 0xff
 8001bb0:	753b      	strb	r3, [r7, #20]
 8001bb2:	23ff      	movs	r3, #255	; 0xff
 8001bb4:	763b      	strb	r3, [r7, #24]
 8001bb6:	23ff      	movs	r3, #255	; 0xff
 8001bb8:	767b      	strb	r3, [r7, #25]
			{.red = 0xFF,
			 .green = 0xFF,
			 .blue = 0x00
			}
	};
	for(uint8_t i = 0; i < NUMBER_OF_LEDS; i++){
 8001bba:	2300      	movs	r3, #0
 8001bbc:	77fb      	strb	r3, [r7, #31]
 8001bbe:	e030      	b.n	8001c22 <InitLEDs+0x92>
		LED_Settings[i].address = i;
 8001bc0:	7ffa      	ldrb	r2, [r7, #31]
 8001bc2:	7ffb      	ldrb	r3, [r7, #31]
 8001bc4:	b299      	uxth	r1, r3
 8001bc6:	4613      	mov	r3, r2
 8001bc8:	005b      	lsls	r3, r3, #1
 8001bca:	4413      	add	r3, r2
 8001bcc:	005b      	lsls	r3, r3, #1
 8001bce:	3320      	adds	r3, #32
 8001bd0:	443b      	add	r3, r7
 8001bd2:	3b1c      	subs	r3, #28
 8001bd4:	460a      	mov	r2, r1
 8001bd6:	801a      	strh	r2, [r3, #0]
		SerialLEDInit(LED_Settings[i],&LED[i],LED_Drv);
 8001bd8:	7ffa      	ldrb	r2, [r7, #31]
 8001bda:	7ff9      	ldrb	r1, [r7, #31]
 8001bdc:	460b      	mov	r3, r1
 8001bde:	00db      	lsls	r3, r3, #3
 8001be0:	1a5b      	subs	r3, r3, r1
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	4913      	ldr	r1, [pc, #76]	; (8001c34 <InitLEDs+0xa4>)
 8001be6:	eb03 0c01 	add.w	ip, r3, r1
 8001bea:	4e13      	ldr	r6, [pc, #76]	; (8001c38 <InitLEDs+0xa8>)
 8001bec:	4613      	mov	r3, r2
 8001bee:	005b      	lsls	r3, r3, #1
 8001bf0:	4413      	add	r3, r2
 8001bf2:	005b      	lsls	r3, r3, #1
 8001bf4:	3320      	adds	r3, #32
 8001bf6:	443b      	add	r3, r7
 8001bf8:	3b1c      	subs	r3, #28
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	4696      	mov	lr, r2
 8001bfe:	889b      	ldrh	r3, [r3, #4]
 8001c00:	2400      	movs	r4, #0
 8001c02:	f363 040f 	bfi	r4, r3, #0, #16
 8001c06:	466d      	mov	r5, sp
 8001c08:	1d33      	adds	r3, r6, #4
 8001c0a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c0c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001c10:	6833      	ldr	r3, [r6, #0]
 8001c12:	4662      	mov	r2, ip
 8001c14:	4670      	mov	r0, lr
 8001c16:	4621      	mov	r1, r4
 8001c18:	f001 f84c 	bl	8002cb4 <SerialLEDInit>
	for(uint8_t i = 0; i < NUMBER_OF_LEDS; i++){
 8001c1c:	7ffb      	ldrb	r3, [r7, #31]
 8001c1e:	3301      	adds	r3, #1
 8001c20:	77fb      	strb	r3, [r7, #31]
 8001c22:	7ffb      	ldrb	r3, [r7, #31]
 8001c24:	2b03      	cmp	r3, #3
 8001c26:	d9cb      	bls.n	8001bc0 <InitLEDs+0x30>
	}
}
 8001c28:	bf00      	nop
 8001c2a:	bf00      	nop
 8001c2c:	3724      	adds	r7, #36	; 0x24
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c32:	bf00      	nop
 8001c34:	20000b04 	.word	0x20000b04
 8001c38:	20000034 	.word	0x20000034

08001c3c <InitScreen>:

void InitScreen(){
 8001c3c:	b5b0      	push	{r4, r5, r7, lr}
 8001c3e:	b08e      	sub	sp, #56	; 0x38
 8001c40:	af06      	add	r7, sp, #24
	ILI9341_Init_Struct_t Settings = {
 8001c42:	4a9c      	ldr	r2, [pc, #624]	; (8001eb4 <InitScreen+0x278>)
 8001c44:	f107 0314 	add.w	r3, r7, #20
 8001c48:	ca07      	ldmia	r2, {r0, r1, r2}
 8001c4a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			.Orientation = XYExchangeXYMirror,
			.ScreenHeight = 240,
			.ScreenWidth = 320
	};
	ILI9341_Init(Settings, &LCD, ILI931_IO);
 8001c4e:	4b9a      	ldr	r3, [pc, #616]	; (8001eb8 <InitScreen+0x27c>)
 8001c50:	466c      	mov	r4, sp
 8001c52:	461d      	mov	r5, r3
 8001c54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c58:	682b      	ldr	r3, [r5, #0]
 8001c5a:	6023      	str	r3, [r4, #0]
 8001c5c:	4b97      	ldr	r3, [pc, #604]	; (8001ebc <InitScreen+0x280>)
 8001c5e:	f107 0214 	add.w	r2, r7, #20
 8001c62:	ca07      	ldmia	r2, {r0, r1, r2}
 8001c64:	f7fe fd74 	bl	8000750 <ILI9341_Init>
    ILI9341_Color_t Color = {
 8001c68:	2300      	movs	r3, #0
 8001c6a:	743b      	strb	r3, [r7, #16]
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	747b      	strb	r3, [r7, #17]
 8001c70:	2300      	movs	r3, #0
 8001c72:	74bb      	strb	r3, [r7, #18]
    		.red = 0,
    		.green = 0,
			.blue = 0
    };
    ILI9341_FillSceen(&LCD, Color);
 8001c74:	6939      	ldr	r1, [r7, #16]
 8001c76:	4891      	ldr	r0, [pc, #580]	; (8001ebc <InitScreen+0x280>)
 8001c78:	f7fe feb3 	bl	80009e2 <ILI9341_FillSceen>
    ILI9341_Image_t Image = {
 8001c7c:	4b90      	ldr	r3, [pc, #576]	; (8001ec0 <InitScreen+0x284>)
 8001c7e:	463c      	mov	r4, r7
 8001c80:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c82:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    		.Height = 62,
			.Width = 62,
			.ImageLength = 62*62*3,
			.ImageData = char_image
    };
    HAL_Delay(100);
 8001c86:	2064      	movs	r0, #100	; 0x64
 8001c88:	f001 fa44 	bl	8003114 <HAL_Delay>
    LCD.Cursor.X = 40 - Image.Width / 2;
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	085b      	lsrs	r3, r3, #1
 8001c90:	b29b      	uxth	r3, r3
 8001c92:	f1c3 0328 	rsb	r3, r3, #40	; 0x28
 8001c96:	b29b      	uxth	r3, r3
 8001c98:	b21a      	sxth	r2, r3
 8001c9a:	4b88      	ldr	r3, [pc, #544]	; (8001ebc <InitScreen+0x280>)
 8001c9c:	819a      	strh	r2, [r3, #12]
    LCD.Cursor.Y = 40 - Image.Height / 2;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	085b      	lsrs	r3, r3, #1
 8001ca2:	b29b      	uxth	r3, r3
 8001ca4:	f1c3 0328 	rsb	r3, r3, #40	; 0x28
 8001ca8:	b29b      	uxth	r3, r3
 8001caa:	b21a      	sxth	r2, r3
 8001cac:	4b83      	ldr	r3, [pc, #524]	; (8001ebc <InitScreen+0x280>)
 8001cae:	81da      	strh	r2, [r3, #14]
    ILI9341_DisplayImage(&LCD, Image);
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	9300      	str	r3, [sp, #0]
 8001cb4:	463b      	mov	r3, r7
 8001cb6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001cb8:	4880      	ldr	r0, [pc, #512]	; (8001ebc <InitScreen+0x280>)
 8001cba:	f7fe feff 	bl	8000abc <ILI9341_DisplayImage>

    Image.ImageData = bag_image;
 8001cbe:	4b81      	ldr	r3, [pc, #516]	; (8001ec4 <InitScreen+0x288>)
 8001cc0:	60fb      	str	r3, [r7, #12]
    LCD.Cursor.X = 120 - Image.Width / 2;
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	085b      	lsrs	r3, r3, #1
 8001cc6:	b29b      	uxth	r3, r3
 8001cc8:	f1c3 0378 	rsb	r3, r3, #120	; 0x78
 8001ccc:	b29b      	uxth	r3, r3
 8001cce:	b21a      	sxth	r2, r3
 8001cd0:	4b7a      	ldr	r3, [pc, #488]	; (8001ebc <InitScreen+0x280>)
 8001cd2:	819a      	strh	r2, [r3, #12]
    LCD.Cursor.Y = 40 - Image.Height / 2;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	085b      	lsrs	r3, r3, #1
 8001cd8:	b29b      	uxth	r3, r3
 8001cda:	f1c3 0328 	rsb	r3, r3, #40	; 0x28
 8001cde:	b29b      	uxth	r3, r3
 8001ce0:	b21a      	sxth	r2, r3
 8001ce2:	4b76      	ldr	r3, [pc, #472]	; (8001ebc <InitScreen+0x280>)
 8001ce4:	81da      	strh	r2, [r3, #14]
    ILI9341_DisplayImage(&LCD, Image);
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	9300      	str	r3, [sp, #0]
 8001cea:	463b      	mov	r3, r7
 8001cec:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001cee:	4873      	ldr	r0, [pc, #460]	; (8001ebc <InitScreen+0x280>)
 8001cf0:	f7fe fee4 	bl	8000abc <ILI9341_DisplayImage>

    Image.ImageData = mounts_image;
 8001cf4:	4b74      	ldr	r3, [pc, #464]	; (8001ec8 <InitScreen+0x28c>)
 8001cf6:	60fb      	str	r3, [r7, #12]
    LCD.Cursor.X = 200 - Image.Width / 2;
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	085b      	lsrs	r3, r3, #1
 8001cfc:	b29b      	uxth	r3, r3
 8001cfe:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
 8001d02:	b29b      	uxth	r3, r3
 8001d04:	b21a      	sxth	r2, r3
 8001d06:	4b6d      	ldr	r3, [pc, #436]	; (8001ebc <InitScreen+0x280>)
 8001d08:	819a      	strh	r2, [r3, #12]
    LCD.Cursor.Y = 40 - Image.Height / 2;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	085b      	lsrs	r3, r3, #1
 8001d0e:	b29b      	uxth	r3, r3
 8001d10:	f1c3 0328 	rsb	r3, r3, #40	; 0x28
 8001d14:	b29b      	uxth	r3, r3
 8001d16:	b21a      	sxth	r2, r3
 8001d18:	4b68      	ldr	r3, [pc, #416]	; (8001ebc <InitScreen+0x280>)
 8001d1a:	81da      	strh	r2, [r3, #14]
    ILI9341_DisplayImage(&LCD, Image);
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	9300      	str	r3, [sp, #0]
 8001d20:	463b      	mov	r3, r7
 8001d22:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d24:	4865      	ldr	r0, [pc, #404]	; (8001ebc <InitScreen+0x280>)
 8001d26:	f7fe fec9 	bl	8000abc <ILI9341_DisplayImage>

    Image.ImageData = LFD_image;
 8001d2a:	4b68      	ldr	r3, [pc, #416]	; (8001ecc <InitScreen+0x290>)
 8001d2c:	60fb      	str	r3, [r7, #12]
    LCD.Cursor.X = 280 - Image.Width / 2;
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	085b      	lsrs	r3, r3, #1
 8001d32:	b29b      	uxth	r3, r3
 8001d34:	f5c3 738c 	rsb	r3, r3, #280	; 0x118
 8001d38:	b29b      	uxth	r3, r3
 8001d3a:	b21a      	sxth	r2, r3
 8001d3c:	4b5f      	ldr	r3, [pc, #380]	; (8001ebc <InitScreen+0x280>)
 8001d3e:	819a      	strh	r2, [r3, #12]
    LCD.Cursor.Y = 40 - Image.Height / 2;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	085b      	lsrs	r3, r3, #1
 8001d44:	b29b      	uxth	r3, r3
 8001d46:	f1c3 0328 	rsb	r3, r3, #40	; 0x28
 8001d4a:	b29b      	uxth	r3, r3
 8001d4c:	b21a      	sxth	r2, r3
 8001d4e:	4b5b      	ldr	r3, [pc, #364]	; (8001ebc <InitScreen+0x280>)
 8001d50:	81da      	strh	r2, [r3, #14]
    ILI9341_DisplayImage(&LCD, Image);
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	9300      	str	r3, [sp, #0]
 8001d56:	463b      	mov	r3, r7
 8001d58:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d5a:	4858      	ldr	r0, [pc, #352]	; (8001ebc <InitScreen+0x280>)
 8001d5c:	f7fe feae 	bl	8000abc <ILI9341_DisplayImage>

    Image.ImageData = spells_image;
 8001d60:	4b5b      	ldr	r3, [pc, #364]	; (8001ed0 <InitScreen+0x294>)
 8001d62:	60fb      	str	r3, [r7, #12]
    LCD.Cursor.X = 40 - Image.Width / 2;
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	085b      	lsrs	r3, r3, #1
 8001d68:	b29b      	uxth	r3, r3
 8001d6a:	f1c3 0328 	rsb	r3, r3, #40	; 0x28
 8001d6e:	b29b      	uxth	r3, r3
 8001d70:	b21a      	sxth	r2, r3
 8001d72:	4b52      	ldr	r3, [pc, #328]	; (8001ebc <InitScreen+0x280>)
 8001d74:	819a      	strh	r2, [r3, #12]
    LCD.Cursor.Y = 120 - Image.Height / 2;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	085b      	lsrs	r3, r3, #1
 8001d7a:	b29b      	uxth	r3, r3
 8001d7c:	f1c3 0378 	rsb	r3, r3, #120	; 0x78
 8001d80:	b29b      	uxth	r3, r3
 8001d82:	b21a      	sxth	r2, r3
 8001d84:	4b4d      	ldr	r3, [pc, #308]	; (8001ebc <InitScreen+0x280>)
 8001d86:	81da      	strh	r2, [r3, #14]
    ILI9341_DisplayImage(&LCD, Image);
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	9300      	str	r3, [sp, #0]
 8001d8c:	463b      	mov	r3, r7
 8001d8e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d90:	484a      	ldr	r0, [pc, #296]	; (8001ebc <InitScreen+0x280>)
 8001d92:	f7fe fe93 	bl	8000abc <ILI9341_DisplayImage>

    Image.ImageData = talents_image;
 8001d96:	4b4f      	ldr	r3, [pc, #316]	; (8001ed4 <InitScreen+0x298>)
 8001d98:	60fb      	str	r3, [r7, #12]
    LCD.Cursor.X = 120 - Image.Width / 2;
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	085b      	lsrs	r3, r3, #1
 8001d9e:	b29b      	uxth	r3, r3
 8001da0:	f1c3 0378 	rsb	r3, r3, #120	; 0x78
 8001da4:	b29b      	uxth	r3, r3
 8001da6:	b21a      	sxth	r2, r3
 8001da8:	4b44      	ldr	r3, [pc, #272]	; (8001ebc <InitScreen+0x280>)
 8001daa:	819a      	strh	r2, [r3, #12]
    LCD.Cursor.Y = 120 - Image.Height / 2;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	085b      	lsrs	r3, r3, #1
 8001db0:	b29b      	uxth	r3, r3
 8001db2:	f1c3 0378 	rsb	r3, r3, #120	; 0x78
 8001db6:	b29b      	uxth	r3, r3
 8001db8:	b21a      	sxth	r2, r3
 8001dba:	4b40      	ldr	r3, [pc, #256]	; (8001ebc <InitScreen+0x280>)
 8001dbc:	81da      	strh	r2, [r3, #14]
    ILI9341_DisplayImage(&LCD, Image);
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	9300      	str	r3, [sp, #0]
 8001dc2:	463b      	mov	r3, r7
 8001dc4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001dc6:	483d      	ldr	r0, [pc, #244]	; (8001ebc <InitScreen+0x280>)
 8001dc8:	f7fe fe78 	bl	8000abc <ILI9341_DisplayImage>

    Image.ImageData = social_image;
 8001dcc:	4b42      	ldr	r3, [pc, #264]	; (8001ed8 <InitScreen+0x29c>)
 8001dce:	60fb      	str	r3, [r7, #12]
    LCD.Cursor.X = 200 - Image.Width / 2;
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	085b      	lsrs	r3, r3, #1
 8001dd4:	b29b      	uxth	r3, r3
 8001dd6:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
 8001dda:	b29b      	uxth	r3, r3
 8001ddc:	b21a      	sxth	r2, r3
 8001dde:	4b37      	ldr	r3, [pc, #220]	; (8001ebc <InitScreen+0x280>)
 8001de0:	819a      	strh	r2, [r3, #12]
    LCD.Cursor.Y = 120 - Image.Height / 2;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	085b      	lsrs	r3, r3, #1
 8001de6:	b29b      	uxth	r3, r3
 8001de8:	f1c3 0378 	rsb	r3, r3, #120	; 0x78
 8001dec:	b29b      	uxth	r3, r3
 8001dee:	b21a      	sxth	r2, r3
 8001df0:	4b32      	ldr	r3, [pc, #200]	; (8001ebc <InitScreen+0x280>)
 8001df2:	81da      	strh	r2, [r3, #14]
    ILI9341_DisplayImage(&LCD, Image);
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	9300      	str	r3, [sp, #0]
 8001df8:	463b      	mov	r3, r7
 8001dfa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001dfc:	482f      	ldr	r0, [pc, #188]	; (8001ebc <InitScreen+0x280>)
 8001dfe:	f7fe fe5d 	bl	8000abc <ILI9341_DisplayImage>

    Image.ImageData = guild_image;
 8001e02:	4b36      	ldr	r3, [pc, #216]	; (8001edc <InitScreen+0x2a0>)
 8001e04:	60fb      	str	r3, [r7, #12]
    LCD.Cursor.X = 280 - Image.Width / 2;
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	085b      	lsrs	r3, r3, #1
 8001e0a:	b29b      	uxth	r3, r3
 8001e0c:	f5c3 738c 	rsb	r3, r3, #280	; 0x118
 8001e10:	b29b      	uxth	r3, r3
 8001e12:	b21a      	sxth	r2, r3
 8001e14:	4b29      	ldr	r3, [pc, #164]	; (8001ebc <InitScreen+0x280>)
 8001e16:	819a      	strh	r2, [r3, #12]
    LCD.Cursor.Y = 120 - Image.Height / 2;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	085b      	lsrs	r3, r3, #1
 8001e1c:	b29b      	uxth	r3, r3
 8001e1e:	f1c3 0378 	rsb	r3, r3, #120	; 0x78
 8001e22:	b29b      	uxth	r3, r3
 8001e24:	b21a      	sxth	r2, r3
 8001e26:	4b25      	ldr	r3, [pc, #148]	; (8001ebc <InitScreen+0x280>)
 8001e28:	81da      	strh	r2, [r3, #14]
    ILI9341_DisplayImage(&LCD, Image);
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	9300      	str	r3, [sp, #0]
 8001e2e:	463b      	mov	r3, r7
 8001e30:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e32:	4822      	ldr	r0, [pc, #136]	; (8001ebc <InitScreen+0x280>)
 8001e34:	f7fe fe42 	bl	8000abc <ILI9341_DisplayImage>

    Image.ImageData = map_image;
 8001e38:	4b29      	ldr	r3, [pc, #164]	; (8001ee0 <InitScreen+0x2a4>)
 8001e3a:	60fb      	str	r3, [r7, #12]
    LCD.Cursor.X = 40 - Image.Width / 2;
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	085b      	lsrs	r3, r3, #1
 8001e40:	b29b      	uxth	r3, r3
 8001e42:	f1c3 0328 	rsb	r3, r3, #40	; 0x28
 8001e46:	b29b      	uxth	r3, r3
 8001e48:	b21a      	sxth	r2, r3
 8001e4a:	4b1c      	ldr	r3, [pc, #112]	; (8001ebc <InitScreen+0x280>)
 8001e4c:	819a      	strh	r2, [r3, #12]
    LCD.Cursor.Y = 200 - Image.Height / 2;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	085b      	lsrs	r3, r3, #1
 8001e52:	b29b      	uxth	r3, r3
 8001e54:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
 8001e58:	b29b      	uxth	r3, r3
 8001e5a:	b21a      	sxth	r2, r3
 8001e5c:	4b17      	ldr	r3, [pc, #92]	; (8001ebc <InitScreen+0x280>)
 8001e5e:	81da      	strh	r2, [r3, #14]
    ILI9341_DisplayImage(&LCD, Image);
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	9300      	str	r3, [sp, #0]
 8001e64:	463b      	mov	r3, r7
 8001e66:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e68:	4814      	ldr	r0, [pc, #80]	; (8001ebc <InitScreen+0x280>)
 8001e6a:	f7fe fe27 	bl	8000abc <ILI9341_DisplayImage>

    Image.ImageData = achievements_image;
 8001e6e:	4b1d      	ldr	r3, [pc, #116]	; (8001ee4 <InitScreen+0x2a8>)
 8001e70:	60fb      	str	r3, [r7, #12]
    LCD.Cursor.X = 120 - Image.Width / 2;
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	085b      	lsrs	r3, r3, #1
 8001e76:	b29b      	uxth	r3, r3
 8001e78:	f1c3 0378 	rsb	r3, r3, #120	; 0x78
 8001e7c:	b29b      	uxth	r3, r3
 8001e7e:	b21a      	sxth	r2, r3
 8001e80:	4b0e      	ldr	r3, [pc, #56]	; (8001ebc <InitScreen+0x280>)
 8001e82:	819a      	strh	r2, [r3, #12]
    LCD.Cursor.Y = 200 - Image.Height / 2;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	085b      	lsrs	r3, r3, #1
 8001e88:	b29b      	uxth	r3, r3
 8001e8a:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
 8001e8e:	b29b      	uxth	r3, r3
 8001e90:	b21a      	sxth	r2, r3
 8001e92:	4b0a      	ldr	r3, [pc, #40]	; (8001ebc <InitScreen+0x280>)
 8001e94:	81da      	strh	r2, [r3, #14]
    ILI9341_DisplayImage(&LCD, Image);
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	9300      	str	r3, [sp, #0]
 8001e9a:	463b      	mov	r3, r7
 8001e9c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e9e:	4807      	ldr	r0, [pc, #28]	; (8001ebc <InitScreen+0x280>)
 8001ea0:	f7fe fe0c 	bl	8000abc <ILI9341_DisplayImage>

    Image.ImageData = adventureguide_image;
 8001ea4:	4b10      	ldr	r3, [pc, #64]	; (8001ee8 <InitScreen+0x2ac>)
 8001ea6:	60fb      	str	r3, [r7, #12]
    LCD.Cursor.X = 200 - Image.Width / 2;
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	085b      	lsrs	r3, r3, #1
 8001eac:	b29b      	uxth	r3, r3
 8001eae:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
 8001eb2:	e01b      	b.n	8001eec <InitScreen+0x2b0>
 8001eb4:	0800e8d0 	.word	0x0800e8d0
 8001eb8:	20000014 	.word	0x20000014
 8001ebc:	20000b74 	.word	0x20000b74
 8001ec0:	0800e8dc 	.word	0x0800e8dc
 8001ec4:	08011714 	.word	0x08011714
 8001ec8:	08014420 	.word	0x08014420
 8001ecc:	0801712c 	.word	0x0801712c
 8001ed0:	08019e38 	.word	0x08019e38
 8001ed4:	0801cb44 	.word	0x0801cb44
 8001ed8:	0801f850 	.word	0x0801f850
 8001edc:	0802255c 	.word	0x0802255c
 8001ee0:	08025268 	.word	0x08025268
 8001ee4:	08027f74 	.word	0x08027f74
 8001ee8:	0802ac80 	.word	0x0802ac80
 8001eec:	b29b      	uxth	r3, r3
 8001eee:	b21a      	sxth	r2, r3
 8001ef0:	4b18      	ldr	r3, [pc, #96]	; (8001f54 <InitScreen+0x318>)
 8001ef2:	819a      	strh	r2, [r3, #12]
    LCD.Cursor.Y = 200 - Image.Height / 2;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	085b      	lsrs	r3, r3, #1
 8001ef8:	b29b      	uxth	r3, r3
 8001efa:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
 8001efe:	b29b      	uxth	r3, r3
 8001f00:	b21a      	sxth	r2, r3
 8001f02:	4b14      	ldr	r3, [pc, #80]	; (8001f54 <InitScreen+0x318>)
 8001f04:	81da      	strh	r2, [r3, #14]
    ILI9341_DisplayImage(&LCD, Image);
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	9300      	str	r3, [sp, #0]
 8001f0a:	463b      	mov	r3, r7
 8001f0c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f0e:	4811      	ldr	r0, [pc, #68]	; (8001f54 <InitScreen+0x318>)
 8001f10:	f7fe fdd4 	bl	8000abc <ILI9341_DisplayImage>

    Image.ImageData = menu_image;
 8001f14:	4b10      	ldr	r3, [pc, #64]	; (8001f58 <InitScreen+0x31c>)
 8001f16:	60fb      	str	r3, [r7, #12]
    LCD.Cursor.X = 280 - Image.Width / 2;
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	085b      	lsrs	r3, r3, #1
 8001f1c:	b29b      	uxth	r3, r3
 8001f1e:	f5c3 738c 	rsb	r3, r3, #280	; 0x118
 8001f22:	b29b      	uxth	r3, r3
 8001f24:	b21a      	sxth	r2, r3
 8001f26:	4b0b      	ldr	r3, [pc, #44]	; (8001f54 <InitScreen+0x318>)
 8001f28:	819a      	strh	r2, [r3, #12]
    LCD.Cursor.Y = 200 - Image.Height / 2;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	085b      	lsrs	r3, r3, #1
 8001f2e:	b29b      	uxth	r3, r3
 8001f30:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
 8001f34:	b29b      	uxth	r3, r3
 8001f36:	b21a      	sxth	r2, r3
 8001f38:	4b06      	ldr	r3, [pc, #24]	; (8001f54 <InitScreen+0x318>)
 8001f3a:	81da      	strh	r2, [r3, #14]
    ILI9341_DisplayImage(&LCD, Image);
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	9300      	str	r3, [sp, #0]
 8001f40:	463b      	mov	r3, r7
 8001f42:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f44:	4803      	ldr	r0, [pc, #12]	; (8001f54 <InitScreen+0x318>)
 8001f46:	f7fe fdb9 	bl	8000abc <ILI9341_DisplayImage>
}
 8001f4a:	bf00      	nop
 8001f4c:	3720      	adds	r7, #32
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bdb0      	pop	{r4, r5, r7, pc}
 8001f52:	bf00      	nop
 8001f54:	20000b74 	.word	0x20000b74
 8001f58:	0802d98c 	.word	0x0802d98c

08001f5c <InitTouchButtons>:

//void InitTouch(){
    //FT6206_Init(&TouchScreen, FT6202_Drv);
//}
void InitTouchButtons(){
 8001f5c:	b5b0      	push	{r4, r5, r7, lr}
 8001f5e:	b08a      	sub	sp, #40	; 0x28
 8001f60:	af06      	add	r7, sp, #24
	TouchButton_Init_Struct_t Settings = {
 8001f62:	4a68      	ldr	r2, [pc, #416]	; (8002104 <InitTouchButtons+0x1a8>)
 8001f64:	1d3b      	adds	r3, r7, #4
 8001f66:	ca07      	ldmia	r2, {r0, r1, r2}
 8001f68:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			.KeyFunction = 0,
			.ModKeyFunction = 0,
			.WheelFunction = 0,
			.MouseFunction = 0
	};
	TouchButtonInit(Settings, &TouchButton[0], TouchButton_IO_Driver);
 8001f6c:	4b66      	ldr	r3, [pc, #408]	; (8002108 <InitTouchButtons+0x1ac>)
 8001f6e:	466c      	mov	r4, sp
 8001f70:	461d      	mov	r5, r3
 8001f72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f76:	682b      	ldr	r3, [r5, #0]
 8001f78:	6023      	str	r3, [r4, #0]
 8001f7a:	4b64      	ldr	r3, [pc, #400]	; (800210c <InitTouchButtons+0x1b0>)
 8001f7c:	1d3a      	adds	r2, r7, #4
 8001f7e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001f80:	f000 ff74 	bl	8002e6c <TouchButtonInit>

	Settings.TopLeftBound.X_Position = 120 - 31;
 8001f84:	2359      	movs	r3, #89	; 0x59
 8001f86:	80bb      	strh	r3, [r7, #4]
	Settings.BottomRightBound.X_Position = 120 + 31;
 8001f88:	2397      	movs	r3, #151	; 0x97
 8001f8a:	813b      	strh	r3, [r7, #8]
	TouchButtonInit(Settings, &TouchButton[1], TouchButton_IO_Driver);
 8001f8c:	4b5e      	ldr	r3, [pc, #376]	; (8002108 <InitTouchButtons+0x1ac>)
 8001f8e:	466c      	mov	r4, sp
 8001f90:	461d      	mov	r5, r3
 8001f92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f96:	682b      	ldr	r3, [r5, #0]
 8001f98:	6023      	str	r3, [r4, #0]
 8001f9a:	4b5d      	ldr	r3, [pc, #372]	; (8002110 <InitTouchButtons+0x1b4>)
 8001f9c:	1d3a      	adds	r2, r7, #4
 8001f9e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001fa0:	f000 ff64 	bl	8002e6c <TouchButtonInit>

	Settings.TopLeftBound.X_Position = 200 - 31;
 8001fa4:	23a9      	movs	r3, #169	; 0xa9
 8001fa6:	80bb      	strh	r3, [r7, #4]
	Settings.BottomRightBound.X_Position = 200 + 31;
 8001fa8:	23e7      	movs	r3, #231	; 0xe7
 8001faa:	813b      	strh	r3, [r7, #8]
	TouchButtonInit(Settings, &TouchButton[2], TouchButton_IO_Driver);
 8001fac:	4b56      	ldr	r3, [pc, #344]	; (8002108 <InitTouchButtons+0x1ac>)
 8001fae:	466c      	mov	r4, sp
 8001fb0:	461d      	mov	r5, r3
 8001fb2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001fb4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001fb6:	682b      	ldr	r3, [r5, #0]
 8001fb8:	6023      	str	r3, [r4, #0]
 8001fba:	4b56      	ldr	r3, [pc, #344]	; (8002114 <InitTouchButtons+0x1b8>)
 8001fbc:	1d3a      	adds	r2, r7, #4
 8001fbe:	ca07      	ldmia	r2, {r0, r1, r2}
 8001fc0:	f000 ff54 	bl	8002e6c <TouchButtonInit>

	Settings.TopLeftBound.X_Position = 280 - 31;
 8001fc4:	23f9      	movs	r3, #249	; 0xf9
 8001fc6:	80bb      	strh	r3, [r7, #4]
	Settings.BottomRightBound.X_Position = 280 + 31;
 8001fc8:	f240 1337 	movw	r3, #311	; 0x137
 8001fcc:	813b      	strh	r3, [r7, #8]
	TouchButtonInit(Settings, &TouchButton[3], TouchButton_IO_Driver);
 8001fce:	4b4e      	ldr	r3, [pc, #312]	; (8002108 <InitTouchButtons+0x1ac>)
 8001fd0:	466c      	mov	r4, sp
 8001fd2:	461d      	mov	r5, r3
 8001fd4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001fd6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001fd8:	682b      	ldr	r3, [r5, #0]
 8001fda:	6023      	str	r3, [r4, #0]
 8001fdc:	4b4e      	ldr	r3, [pc, #312]	; (8002118 <InitTouchButtons+0x1bc>)
 8001fde:	1d3a      	adds	r2, r7, #4
 8001fe0:	ca07      	ldmia	r2, {r0, r1, r2}
 8001fe2:	f000 ff43 	bl	8002e6c <TouchButtonInit>

	Settings.TopLeftBound.X_Position = 40 - 31;
 8001fe6:	2309      	movs	r3, #9
 8001fe8:	80bb      	strh	r3, [r7, #4]
	Settings.BottomRightBound.X_Position = 40 + 31;
 8001fea:	2347      	movs	r3, #71	; 0x47
 8001fec:	813b      	strh	r3, [r7, #8]
	Settings.TopLeftBound.Y_Position = 120 - 31;
 8001fee:	2359      	movs	r3, #89	; 0x59
 8001ff0:	80fb      	strh	r3, [r7, #6]
	Settings.BottomRightBound.Y_Position = 120 + 31;
 8001ff2:	2397      	movs	r3, #151	; 0x97
 8001ff4:	817b      	strh	r3, [r7, #10]
	TouchButtonInit(Settings, &TouchButton[4], TouchButton_IO_Driver);
 8001ff6:	4b44      	ldr	r3, [pc, #272]	; (8002108 <InitTouchButtons+0x1ac>)
 8001ff8:	466c      	mov	r4, sp
 8001ffa:	461d      	mov	r5, r3
 8001ffc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ffe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002000:	682b      	ldr	r3, [r5, #0]
 8002002:	6023      	str	r3, [r4, #0]
 8002004:	4b45      	ldr	r3, [pc, #276]	; (800211c <InitTouchButtons+0x1c0>)
 8002006:	1d3a      	adds	r2, r7, #4
 8002008:	ca07      	ldmia	r2, {r0, r1, r2}
 800200a:	f000 ff2f 	bl	8002e6c <TouchButtonInit>

	Settings.TopLeftBound.X_Position = 120 - 31;
 800200e:	2359      	movs	r3, #89	; 0x59
 8002010:	80bb      	strh	r3, [r7, #4]
	Settings.BottomRightBound.X_Position = 120 + 31;
 8002012:	2397      	movs	r3, #151	; 0x97
 8002014:	813b      	strh	r3, [r7, #8]
	TouchButtonInit(Settings, &TouchButton[5], TouchButton_IO_Driver);
 8002016:	4b3c      	ldr	r3, [pc, #240]	; (8002108 <InitTouchButtons+0x1ac>)
 8002018:	466c      	mov	r4, sp
 800201a:	461d      	mov	r5, r3
 800201c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800201e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002020:	682b      	ldr	r3, [r5, #0]
 8002022:	6023      	str	r3, [r4, #0]
 8002024:	4b3e      	ldr	r3, [pc, #248]	; (8002120 <InitTouchButtons+0x1c4>)
 8002026:	1d3a      	adds	r2, r7, #4
 8002028:	ca07      	ldmia	r2, {r0, r1, r2}
 800202a:	f000 ff1f 	bl	8002e6c <TouchButtonInit>

	Settings.TopLeftBound.X_Position = 200 - 31;
 800202e:	23a9      	movs	r3, #169	; 0xa9
 8002030:	80bb      	strh	r3, [r7, #4]
	Settings.BottomRightBound.X_Position = 200 + 31;
 8002032:	23e7      	movs	r3, #231	; 0xe7
 8002034:	813b      	strh	r3, [r7, #8]
	TouchButtonInit(Settings, &TouchButton[6], TouchButton_IO_Driver);
 8002036:	4b34      	ldr	r3, [pc, #208]	; (8002108 <InitTouchButtons+0x1ac>)
 8002038:	466c      	mov	r4, sp
 800203a:	461d      	mov	r5, r3
 800203c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800203e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002040:	682b      	ldr	r3, [r5, #0]
 8002042:	6023      	str	r3, [r4, #0]
 8002044:	4b37      	ldr	r3, [pc, #220]	; (8002124 <InitTouchButtons+0x1c8>)
 8002046:	1d3a      	adds	r2, r7, #4
 8002048:	ca07      	ldmia	r2, {r0, r1, r2}
 800204a:	f000 ff0f 	bl	8002e6c <TouchButtonInit>

	Settings.TopLeftBound.X_Position = 280 - 31;
 800204e:	23f9      	movs	r3, #249	; 0xf9
 8002050:	80bb      	strh	r3, [r7, #4]
	Settings.BottomRightBound.X_Position = 280 + 31;
 8002052:	f240 1337 	movw	r3, #311	; 0x137
 8002056:	813b      	strh	r3, [r7, #8]
	TouchButtonInit(Settings, &TouchButton[7], TouchButton_IO_Driver);
 8002058:	4b2b      	ldr	r3, [pc, #172]	; (8002108 <InitTouchButtons+0x1ac>)
 800205a:	466c      	mov	r4, sp
 800205c:	461d      	mov	r5, r3
 800205e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002060:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002062:	682b      	ldr	r3, [r5, #0]
 8002064:	6023      	str	r3, [r4, #0]
 8002066:	4b30      	ldr	r3, [pc, #192]	; (8002128 <InitTouchButtons+0x1cc>)
 8002068:	1d3a      	adds	r2, r7, #4
 800206a:	ca07      	ldmia	r2, {r0, r1, r2}
 800206c:	f000 fefe 	bl	8002e6c <TouchButtonInit>

	Settings.TopLeftBound.X_Position = 40 - 31;
 8002070:	2309      	movs	r3, #9
 8002072:	80bb      	strh	r3, [r7, #4]
	Settings.BottomRightBound.X_Position = 40 + 31;
 8002074:	2347      	movs	r3, #71	; 0x47
 8002076:	813b      	strh	r3, [r7, #8]
	Settings.TopLeftBound.Y_Position = 180 - 31;
 8002078:	2395      	movs	r3, #149	; 0x95
 800207a:	80fb      	strh	r3, [r7, #6]
	Settings.BottomRightBound.Y_Position = 180 + 31;
 800207c:	23d3      	movs	r3, #211	; 0xd3
 800207e:	817b      	strh	r3, [r7, #10]
	TouchButtonInit(Settings, &TouchButton[8], TouchButton_IO_Driver);
 8002080:	4b21      	ldr	r3, [pc, #132]	; (8002108 <InitTouchButtons+0x1ac>)
 8002082:	466c      	mov	r4, sp
 8002084:	461d      	mov	r5, r3
 8002086:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002088:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800208a:	682b      	ldr	r3, [r5, #0]
 800208c:	6023      	str	r3, [r4, #0]
 800208e:	4b27      	ldr	r3, [pc, #156]	; (800212c <InitTouchButtons+0x1d0>)
 8002090:	1d3a      	adds	r2, r7, #4
 8002092:	ca07      	ldmia	r2, {r0, r1, r2}
 8002094:	f000 feea 	bl	8002e6c <TouchButtonInit>

	Settings.TopLeftBound.X_Position = 120 - 31;
 8002098:	2359      	movs	r3, #89	; 0x59
 800209a:	80bb      	strh	r3, [r7, #4]
	Settings.BottomRightBound.X_Position = 120 + 31;
 800209c:	2397      	movs	r3, #151	; 0x97
 800209e:	813b      	strh	r3, [r7, #8]
	TouchButtonInit(Settings, &TouchButton[9], TouchButton_IO_Driver);
 80020a0:	4b19      	ldr	r3, [pc, #100]	; (8002108 <InitTouchButtons+0x1ac>)
 80020a2:	466c      	mov	r4, sp
 80020a4:	461d      	mov	r5, r3
 80020a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020aa:	682b      	ldr	r3, [r5, #0]
 80020ac:	6023      	str	r3, [r4, #0]
 80020ae:	4b20      	ldr	r3, [pc, #128]	; (8002130 <InitTouchButtons+0x1d4>)
 80020b0:	1d3a      	adds	r2, r7, #4
 80020b2:	ca07      	ldmia	r2, {r0, r1, r2}
 80020b4:	f000 feda 	bl	8002e6c <TouchButtonInit>

	Settings.TopLeftBound.X_Position = 200 - 31;
 80020b8:	23a9      	movs	r3, #169	; 0xa9
 80020ba:	80bb      	strh	r3, [r7, #4]
	Settings.BottomRightBound.X_Position = 200 + 31;
 80020bc:	23e7      	movs	r3, #231	; 0xe7
 80020be:	813b      	strh	r3, [r7, #8]
	TouchButtonInit(Settings, &TouchButton[10], TouchButton_IO_Driver);
 80020c0:	4b11      	ldr	r3, [pc, #68]	; (8002108 <InitTouchButtons+0x1ac>)
 80020c2:	466c      	mov	r4, sp
 80020c4:	461d      	mov	r5, r3
 80020c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020ca:	682b      	ldr	r3, [r5, #0]
 80020cc:	6023      	str	r3, [r4, #0]
 80020ce:	4b19      	ldr	r3, [pc, #100]	; (8002134 <InitTouchButtons+0x1d8>)
 80020d0:	1d3a      	adds	r2, r7, #4
 80020d2:	ca07      	ldmia	r2, {r0, r1, r2}
 80020d4:	f000 feca 	bl	8002e6c <TouchButtonInit>

	Settings.TopLeftBound.X_Position = 280 - 31;
 80020d8:	23f9      	movs	r3, #249	; 0xf9
 80020da:	80bb      	strh	r3, [r7, #4]
	Settings.BottomRightBound.X_Position = 280 + 31;
 80020dc:	f240 1337 	movw	r3, #311	; 0x137
 80020e0:	813b      	strh	r3, [r7, #8]
	TouchButtonInit(Settings, &TouchButton[11], TouchButton_IO_Driver);
 80020e2:	4b09      	ldr	r3, [pc, #36]	; (8002108 <InitTouchButtons+0x1ac>)
 80020e4:	466c      	mov	r4, sp
 80020e6:	461d      	mov	r5, r3
 80020e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020ec:	682b      	ldr	r3, [r5, #0]
 80020ee:	6023      	str	r3, [r4, #0]
 80020f0:	4b11      	ldr	r3, [pc, #68]	; (8002138 <InitTouchButtons+0x1dc>)
 80020f2:	1d3a      	adds	r2, r7, #4
 80020f4:	ca07      	ldmia	r2, {r0, r1, r2}
 80020f6:	f000 feb9 	bl	8002e6c <TouchButtonInit>
}
 80020fa:	bf00      	nop
 80020fc:	3710      	adds	r7, #16
 80020fe:	46bd      	mov	sp, r7
 8002100:	bdb0      	pop	{r4, r5, r7, pc}
 8002102:	bf00      	nop
 8002104:	0800e8ec 	.word	0x0800e8ec
 8002108:	0800e9f4 	.word	0x0800e9f4
 800210c:	20000b98 	.word	0x20000b98
 8002110:	20000bbc 	.word	0x20000bbc
 8002114:	20000be0 	.word	0x20000be0
 8002118:	20000c04 	.word	0x20000c04
 800211c:	20000c28 	.word	0x20000c28
 8002120:	20000c4c 	.word	0x20000c4c
 8002124:	20000c70 	.word	0x20000c70
 8002128:	20000c94 	.word	0x20000c94
 800212c:	20000cb8 	.word	0x20000cb8
 8002130:	20000cdc 	.word	0x20000cdc
 8002134:	20000d00 	.word	0x20000d00
 8002138:	20000d24 	.word	0x20000d24

0800213c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800213c:	b480      	push	{r7}
 800213e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002140:	b672      	cpsid	i
}
 8002142:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002144:	e7fe      	b.n	8002144 <Error_Handler+0x8>
	...

08002148 <HAL_SPI_MspInit>:
  /* USER CODE END SPI1_Init 2 */

}

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b08a      	sub	sp, #40	; 0x28
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002150:	f107 0314 	add.w	r3, r7, #20
 8002154:	2200      	movs	r2, #0
 8002156:	601a      	str	r2, [r3, #0]
 8002158:	605a      	str	r2, [r3, #4]
 800215a:	609a      	str	r2, [r3, #8]
 800215c:	60da      	str	r2, [r3, #12]
 800215e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a19      	ldr	r2, [pc, #100]	; (80021cc <HAL_SPI_MspInit+0x84>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d12b      	bne.n	80021c2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800216a:	2300      	movs	r3, #0
 800216c:	613b      	str	r3, [r7, #16]
 800216e:	4b18      	ldr	r3, [pc, #96]	; (80021d0 <HAL_SPI_MspInit+0x88>)
 8002170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002172:	4a17      	ldr	r2, [pc, #92]	; (80021d0 <HAL_SPI_MspInit+0x88>)
 8002174:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002178:	6453      	str	r3, [r2, #68]	; 0x44
 800217a:	4b15      	ldr	r3, [pc, #84]	; (80021d0 <HAL_SPI_MspInit+0x88>)
 800217c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800217e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002182:	613b      	str	r3, [r7, #16]
 8002184:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002186:	2300      	movs	r3, #0
 8002188:	60fb      	str	r3, [r7, #12]
 800218a:	4b11      	ldr	r3, [pc, #68]	; (80021d0 <HAL_SPI_MspInit+0x88>)
 800218c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218e:	4a10      	ldr	r2, [pc, #64]	; (80021d0 <HAL_SPI_MspInit+0x88>)
 8002190:	f043 0301 	orr.w	r3, r3, #1
 8002194:	6313      	str	r3, [r2, #48]	; 0x30
 8002196:	4b0e      	ldr	r3, [pc, #56]	; (80021d0 <HAL_SPI_MspInit+0x88>)
 8002198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219a:	f003 0301 	and.w	r3, r3, #1
 800219e:	60fb      	str	r3, [r7, #12]
 80021a0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80021a2:	23e0      	movs	r3, #224	; 0xe0
 80021a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021a6:	2302      	movs	r3, #2
 80021a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021aa:	2300      	movs	r3, #0
 80021ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021ae:	2303      	movs	r3, #3
 80021b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80021b2:	2305      	movs	r3, #5
 80021b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021b6:	f107 0314 	add.w	r3, r7, #20
 80021ba:	4619      	mov	r1, r3
 80021bc:	4805      	ldr	r0, [pc, #20]	; (80021d4 <HAL_SPI_MspInit+0x8c>)
 80021be:	f002 f9a7 	bl	8004510 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80021c2:	bf00      	nop
 80021c4:	3728      	adds	r7, #40	; 0x28
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	40013000 	.word	0x40013000
 80021d0:	40023800 	.word	0x40023800
 80021d4:	40020000 	.word	0x40020000

080021d8 <ILI9341_SPI_Init>:
  /* USER CODE END SPI1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void ILI9341_SPI_Init(void){
 80021d8:	b580      	push	{r7, lr}
 80021da:	af00      	add	r7, sp, #0
	  hspi1.Instance = SPI1;
 80021dc:	4b17      	ldr	r3, [pc, #92]	; (800223c <ILI9341_SPI_Init+0x64>)
 80021de:	4a18      	ldr	r2, [pc, #96]	; (8002240 <ILI9341_SPI_Init+0x68>)
 80021e0:	601a      	str	r2, [r3, #0]
	  hspi1.Init.Mode = SPI_MODE_MASTER;
 80021e2:	4b16      	ldr	r3, [pc, #88]	; (800223c <ILI9341_SPI_Init+0x64>)
 80021e4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80021e8:	605a      	str	r2, [r3, #4]
	  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80021ea:	4b14      	ldr	r3, [pc, #80]	; (800223c <ILI9341_SPI_Init+0x64>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	609a      	str	r2, [r3, #8]
	  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80021f0:	4b12      	ldr	r3, [pc, #72]	; (800223c <ILI9341_SPI_Init+0x64>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	60da      	str	r2, [r3, #12]
	  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80021f6:	4b11      	ldr	r3, [pc, #68]	; (800223c <ILI9341_SPI_Init+0x64>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	611a      	str	r2, [r3, #16]
	  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80021fc:	4b0f      	ldr	r3, [pc, #60]	; (800223c <ILI9341_SPI_Init+0x64>)
 80021fe:	2200      	movs	r2, #0
 8002200:	615a      	str	r2, [r3, #20]
	  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002202:	4b0e      	ldr	r3, [pc, #56]	; (800223c <ILI9341_SPI_Init+0x64>)
 8002204:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002208:	619a      	str	r2, [r3, #24]
	  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800220a:	4b0c      	ldr	r3, [pc, #48]	; (800223c <ILI9341_SPI_Init+0x64>)
 800220c:	2218      	movs	r2, #24
 800220e:	61da      	str	r2, [r3, #28]
	  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002210:	4b0a      	ldr	r3, [pc, #40]	; (800223c <ILI9341_SPI_Init+0x64>)
 8002212:	2200      	movs	r2, #0
 8002214:	621a      	str	r2, [r3, #32]
	  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002216:	4b09      	ldr	r3, [pc, #36]	; (800223c <ILI9341_SPI_Init+0x64>)
 8002218:	2200      	movs	r2, #0
 800221a:	625a      	str	r2, [r3, #36]	; 0x24
	  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800221c:	4b07      	ldr	r3, [pc, #28]	; (800223c <ILI9341_SPI_Init+0x64>)
 800221e:	2200      	movs	r2, #0
 8002220:	629a      	str	r2, [r3, #40]	; 0x28
	  hspi1.Init.CRCPolynomial = 10;
 8002222:	4b06      	ldr	r3, [pc, #24]	; (800223c <ILI9341_SPI_Init+0x64>)
 8002224:	220a      	movs	r2, #10
 8002226:	62da      	str	r2, [r3, #44]	; 0x2c
	  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002228:	4804      	ldr	r0, [pc, #16]	; (800223c <ILI9341_SPI_Init+0x64>)
 800222a:	f005 faad 	bl	8007788 <HAL_SPI_Init>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d001      	beq.n	8002238 <ILI9341_SPI_Init+0x60>
	  {
	    Error_Handler();
 8002234:	f7ff ff82 	bl	800213c <Error_Handler>
	  }
}
 8002238:	bf00      	nop
 800223a:	bd80      	pop	{r7, pc}
 800223c:	20000d48 	.word	0x20000d48
 8002240:	40013000 	.word	0x40013000

08002244 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002244:	b480      	push	{r7}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800224a:	2300      	movs	r3, #0
 800224c:	607b      	str	r3, [r7, #4]
 800224e:	4b10      	ldr	r3, [pc, #64]	; (8002290 <HAL_MspInit+0x4c>)
 8002250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002252:	4a0f      	ldr	r2, [pc, #60]	; (8002290 <HAL_MspInit+0x4c>)
 8002254:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002258:	6453      	str	r3, [r2, #68]	; 0x44
 800225a:	4b0d      	ldr	r3, [pc, #52]	; (8002290 <HAL_MspInit+0x4c>)
 800225c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800225e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002262:	607b      	str	r3, [r7, #4]
 8002264:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002266:	2300      	movs	r3, #0
 8002268:	603b      	str	r3, [r7, #0]
 800226a:	4b09      	ldr	r3, [pc, #36]	; (8002290 <HAL_MspInit+0x4c>)
 800226c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226e:	4a08      	ldr	r2, [pc, #32]	; (8002290 <HAL_MspInit+0x4c>)
 8002270:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002274:	6413      	str	r3, [r2, #64]	; 0x40
 8002276:	4b06      	ldr	r3, [pc, #24]	; (8002290 <HAL_MspInit+0x4c>)
 8002278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800227e:	603b      	str	r3, [r7, #0]
 8002280:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002282:	bf00      	nop
 8002284:	370c      	adds	r7, #12
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr
 800228e:	bf00      	nop
 8002290:	40023800 	.word	0x40023800

08002294 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002294:	b480      	push	{r7}
 8002296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002298:	e7fe      	b.n	8002298 <NMI_Handler+0x4>

0800229a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800229a:	b480      	push	{r7}
 800229c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800229e:	e7fe      	b.n	800229e <HardFault_Handler+0x4>

080022a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022a0:	b480      	push	{r7}
 80022a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022a4:	e7fe      	b.n	80022a4 <MemManage_Handler+0x4>

080022a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022a6:	b480      	push	{r7}
 80022a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022aa:	e7fe      	b.n	80022aa <BusFault_Handler+0x4>

080022ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022ac:	b480      	push	{r7}
 80022ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022b0:	e7fe      	b.n	80022b0 <UsageFault_Handler+0x4>

080022b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022b2:	b480      	push	{r7}
 80022b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022b6:	bf00      	nop
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr

080022c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022c4:	bf00      	nop
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr

080022ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022ce:	b480      	push	{r7}
 80022d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022d2:	bf00      	nop
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr

080022dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022e0:	f000 fef8 	bl	80030d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022e4:	bf00      	nop
 80022e6:	bd80      	pop	{r7, pc}

080022e8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80022ec:	4802      	ldr	r0, [pc, #8]	; (80022f8 <DMA1_Stream0_IRQHandler+0x10>)
 80022ee:	f001 fe99 	bl	8004024 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80022f2:	bf00      	nop
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	20000304 	.word	0x20000304

080022fc <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 8002300:	4802      	ldr	r0, [pc, #8]	; (800230c <DMA1_Stream2_IRQHandler+0x10>)
 8002302:	f001 fe8f 	bl	8004024 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8002306:	bf00      	nop
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	20000364 	.word	0x20000364

08002310 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 8002314:	4802      	ldr	r0, [pc, #8]	; (8002320 <DMA1_Stream4_IRQHandler+0x10>)
 8002316:	f001 fe85 	bl	8004024 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800231a:	bf00      	nop
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	20000dec 	.word	0x20000dec

08002324 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002328:	4802      	ldr	r0, [pc, #8]	; (8002334 <DMA2_Stream0_IRQHandler+0x10>)
 800232a:	f001 fe7b 	bl	8004024 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800232e:	bf00      	nop
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	200001fc 	.word	0x200001fc

08002338 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800233c:	4802      	ldr	r0, [pc, #8]	; (8002348 <OTG_FS_IRQHandler+0x10>)
 800233e:	f003 fcca 	bl	8005cd6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002342:	bf00      	nop
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	20001538 	.word	0x20001538

0800234c <HAL_I2C_MemRxCpltCallback>:

/* USER CODE BEGIN 1 */
void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c){
 800234c:	b580      	push	{r7, lr}
 800234e:	b082      	sub	sp, #8
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
	if(hi2c == &hi2c1){
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	4a08      	ldr	r2, [pc, #32]	; (8002378 <HAL_I2C_MemRxCpltCallback+0x2c>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d102      	bne.n	8002362 <HAL_I2C_MemRxCpltCallback+0x16>
	    ButtonIRQCallback();
 800235c:	f000 fae0 	bl	8002920 <ButtonIRQCallback>
	} else if (hi2c == &hi2c2){
        TouchScreenIRQCallback();
	}
}
 8002360:	e005      	b.n	800236e <HAL_I2C_MemRxCpltCallback+0x22>
	} else if (hi2c == &hi2c2){
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4a05      	ldr	r2, [pc, #20]	; (800237c <HAL_I2C_MemRxCpltCallback+0x30>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d101      	bne.n	800236e <HAL_I2C_MemRxCpltCallback+0x22>
        TouchScreenIRQCallback();
 800236a:	f000 fe2d 	bl	8002fc8 <TouchScreenIRQCallback>
}
 800236e:	bf00      	nop
 8002370:	3708      	adds	r7, #8
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	2000025c 	.word	0x2000025c
 800237c:	200002b0 	.word	0x200002b0

08002380 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b086      	sub	sp, #24
 8002384:	af00      	add	r7, sp, #0
 8002386:	60f8      	str	r0, [r7, #12]
 8002388:	60b9      	str	r1, [r7, #8]
 800238a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800238c:	2300      	movs	r3, #0
 800238e:	617b      	str	r3, [r7, #20]
 8002390:	e00a      	b.n	80023a8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002392:	f3af 8000 	nop.w
 8002396:	4601      	mov	r1, r0
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	1c5a      	adds	r2, r3, #1
 800239c:	60ba      	str	r2, [r7, #8]
 800239e:	b2ca      	uxtb	r2, r1
 80023a0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	3301      	adds	r3, #1
 80023a6:	617b      	str	r3, [r7, #20]
 80023a8:	697a      	ldr	r2, [r7, #20]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	429a      	cmp	r2, r3
 80023ae:	dbf0      	blt.n	8002392 <_read+0x12>
	}

return len;
 80023b0:	687b      	ldr	r3, [r7, #4]
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3718      	adds	r7, #24
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}

080023ba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80023ba:	b580      	push	{r7, lr}
 80023bc:	b086      	sub	sp, #24
 80023be:	af00      	add	r7, sp, #0
 80023c0:	60f8      	str	r0, [r7, #12]
 80023c2:	60b9      	str	r1, [r7, #8]
 80023c4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023c6:	2300      	movs	r3, #0
 80023c8:	617b      	str	r3, [r7, #20]
 80023ca:	e009      	b.n	80023e0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	1c5a      	adds	r2, r3, #1
 80023d0:	60ba      	str	r2, [r7, #8]
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	4618      	mov	r0, r3
 80023d6:	f7ff fa67 	bl	80018a8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	3301      	adds	r3, #1
 80023de:	617b      	str	r3, [r7, #20]
 80023e0:	697a      	ldr	r2, [r7, #20]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	429a      	cmp	r2, r3
 80023e6:	dbf1      	blt.n	80023cc <_write+0x12>
	}
	return len;
 80023e8:	687b      	ldr	r3, [r7, #4]
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3718      	adds	r7, #24
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}

080023f2 <_close>:

int _close(int file)
{
 80023f2:	b480      	push	{r7}
 80023f4:	b083      	sub	sp, #12
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	6078      	str	r0, [r7, #4]
	return -1;
 80023fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023fe:	4618      	mov	r0, r3
 8002400:	370c      	adds	r7, #12
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr

0800240a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800240a:	b480      	push	{r7}
 800240c:	b083      	sub	sp, #12
 800240e:	af00      	add	r7, sp, #0
 8002410:	6078      	str	r0, [r7, #4]
 8002412:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800241a:	605a      	str	r2, [r3, #4]
	return 0;
 800241c:	2300      	movs	r3, #0
}
 800241e:	4618      	mov	r0, r3
 8002420:	370c      	adds	r7, #12
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr

0800242a <_isatty>:

int _isatty(int file)
{
 800242a:	b480      	push	{r7}
 800242c:	b083      	sub	sp, #12
 800242e:	af00      	add	r7, sp, #0
 8002430:	6078      	str	r0, [r7, #4]
	return 1;
 8002432:	2301      	movs	r3, #1
}
 8002434:	4618      	mov	r0, r3
 8002436:	370c      	adds	r7, #12
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr

08002440 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002440:	b480      	push	{r7}
 8002442:	b085      	sub	sp, #20
 8002444:	af00      	add	r7, sp, #0
 8002446:	60f8      	str	r0, [r7, #12]
 8002448:	60b9      	str	r1, [r7, #8]
 800244a:	607a      	str	r2, [r7, #4]
	return 0;
 800244c:	2300      	movs	r3, #0
}
 800244e:	4618      	mov	r0, r3
 8002450:	3714      	adds	r7, #20
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr
	...

0800245c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b086      	sub	sp, #24
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002464:	4a14      	ldr	r2, [pc, #80]	; (80024b8 <_sbrk+0x5c>)
 8002466:	4b15      	ldr	r3, [pc, #84]	; (80024bc <_sbrk+0x60>)
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002470:	4b13      	ldr	r3, [pc, #76]	; (80024c0 <_sbrk+0x64>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d102      	bne.n	800247e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002478:	4b11      	ldr	r3, [pc, #68]	; (80024c0 <_sbrk+0x64>)
 800247a:	4a12      	ldr	r2, [pc, #72]	; (80024c4 <_sbrk+0x68>)
 800247c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800247e:	4b10      	ldr	r3, [pc, #64]	; (80024c0 <_sbrk+0x64>)
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4413      	add	r3, r2
 8002486:	693a      	ldr	r2, [r7, #16]
 8002488:	429a      	cmp	r2, r3
 800248a:	d207      	bcs.n	800249c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800248c:	f00b f828 	bl	800d4e0 <__errno>
 8002490:	4603      	mov	r3, r0
 8002492:	220c      	movs	r2, #12
 8002494:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002496:	f04f 33ff 	mov.w	r3, #4294967295
 800249a:	e009      	b.n	80024b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800249c:	4b08      	ldr	r3, [pc, #32]	; (80024c0 <_sbrk+0x64>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024a2:	4b07      	ldr	r3, [pc, #28]	; (80024c0 <_sbrk+0x64>)
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	4413      	add	r3, r2
 80024aa:	4a05      	ldr	r2, [pc, #20]	; (80024c0 <_sbrk+0x64>)
 80024ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024ae:	68fb      	ldr	r3, [r7, #12]
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	3718      	adds	r7, #24
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	20020000 	.word	0x20020000
 80024bc:	00000400 	.word	0x00000400
 80024c0:	20000da0 	.word	0x20000da0
 80024c4:	20001a70 	.word	0x20001a70

080024c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80024c8:	b480      	push	{r7}
 80024ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80024cc:	4b06      	ldr	r3, [pc, #24]	; (80024e8 <SystemInit+0x20>)
 80024ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024d2:	4a05      	ldr	r2, [pc, #20]	; (80024e8 <SystemInit+0x20>)
 80024d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80024d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80024dc:	bf00      	nop
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr
 80024e6:	bf00      	nop
 80024e8:	e000ed00 	.word	0xe000ed00

080024ec <HAL_TIM_Base_MspInit>:
  HAL_TIM_MspPostInit(&htim3);

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b084      	sub	sp, #16
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a25      	ldr	r2, [pc, #148]	; (8002590 <HAL_TIM_Base_MspInit+0xa4>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d144      	bne.n	8002588 <HAL_TIM_Base_MspInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80024fe:	2300      	movs	r3, #0
 8002500:	60fb      	str	r3, [r7, #12]
 8002502:	4b24      	ldr	r3, [pc, #144]	; (8002594 <HAL_TIM_Base_MspInit+0xa8>)
 8002504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002506:	4a23      	ldr	r2, [pc, #140]	; (8002594 <HAL_TIM_Base_MspInit+0xa8>)
 8002508:	f043 0302 	orr.w	r3, r3, #2
 800250c:	6413      	str	r3, [r2, #64]	; 0x40
 800250e:	4b21      	ldr	r3, [pc, #132]	; (8002594 <HAL_TIM_Base_MspInit+0xa8>)
 8002510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002512:	f003 0302 	and.w	r3, r3, #2
 8002516:	60fb      	str	r3, [r7, #12]
 8002518:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH1_TRIG Init */
    hdma_tim3_ch1_trig.Instance = DMA1_Stream4;
 800251a:	4b1f      	ldr	r3, [pc, #124]	; (8002598 <HAL_TIM_Base_MspInit+0xac>)
 800251c:	4a1f      	ldr	r2, [pc, #124]	; (800259c <HAL_TIM_Base_MspInit+0xb0>)
 800251e:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Channel = DMA_CHANNEL_5;
 8002520:	4b1d      	ldr	r3, [pc, #116]	; (8002598 <HAL_TIM_Base_MspInit+0xac>)
 8002522:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8002526:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002528:	4b1b      	ldr	r3, [pc, #108]	; (8002598 <HAL_TIM_Base_MspInit+0xac>)
 800252a:	2240      	movs	r2, #64	; 0x40
 800252c:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 800252e:	4b1a      	ldr	r3, [pc, #104]	; (8002598 <HAL_TIM_Base_MspInit+0xac>)
 8002530:	2200      	movs	r2, #0
 8002532:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 8002534:	4b18      	ldr	r3, [pc, #96]	; (8002598 <HAL_TIM_Base_MspInit+0xac>)
 8002536:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800253a:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800253c:	4b16      	ldr	r3, [pc, #88]	; (8002598 <HAL_TIM_Base_MspInit+0xac>)
 800253e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002542:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002544:	4b14      	ldr	r3, [pc, #80]	; (8002598 <HAL_TIM_Base_MspInit+0xac>)
 8002546:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800254a:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Mode = DMA_CIRCULAR;
 800254c:	4b12      	ldr	r3, [pc, #72]	; (8002598 <HAL_TIM_Base_MspInit+0xac>)
 800254e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002552:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_LOW;
 8002554:	4b10      	ldr	r3, [pc, #64]	; (8002598 <HAL_TIM_Base_MspInit+0xac>)
 8002556:	2200      	movs	r2, #0
 8002558:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1_trig.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800255a:	4b0f      	ldr	r3, [pc, #60]	; (8002598 <HAL_TIM_Base_MspInit+0xac>)
 800255c:	2200      	movs	r2, #0
 800255e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 8002560:	480d      	ldr	r0, [pc, #52]	; (8002598 <HAL_TIM_Base_MspInit+0xac>)
 8002562:	f001 fbc7 	bl	8003cf4 <HAL_DMA_Init>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	d001      	beq.n	8002570 <HAL_TIM_Base_MspInit+0x84>
    {
      Error_Handler();
 800256c:	f7ff fde6 	bl	800213c <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	4a09      	ldr	r2, [pc, #36]	; (8002598 <HAL_TIM_Base_MspInit+0xac>)
 8002574:	625a      	str	r2, [r3, #36]	; 0x24
 8002576:	4a08      	ldr	r2, [pc, #32]	; (8002598 <HAL_TIM_Base_MspInit+0xac>)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	4a06      	ldr	r2, [pc, #24]	; (8002598 <HAL_TIM_Base_MspInit+0xac>)
 8002580:	639a      	str	r2, [r3, #56]	; 0x38
 8002582:	4a05      	ldr	r2, [pc, #20]	; (8002598 <HAL_TIM_Base_MspInit+0xac>)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002588:	bf00      	nop
 800258a:	3710      	adds	r7, #16
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}
 8002590:	40000400 	.word	0x40000400
 8002594:	40023800 	.word	0x40023800
 8002598:	20000dec 	.word	0x20000dec
 800259c:	40026070 	.word	0x40026070

080025a0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b088      	sub	sp, #32
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025a8:	f107 030c 	add.w	r3, r7, #12
 80025ac:	2200      	movs	r2, #0
 80025ae:	601a      	str	r2, [r3, #0]
 80025b0:	605a      	str	r2, [r3, #4]
 80025b2:	609a      	str	r2, [r3, #8]
 80025b4:	60da      	str	r2, [r3, #12]
 80025b6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a12      	ldr	r2, [pc, #72]	; (8002608 <HAL_TIM_MspPostInit+0x68>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d11d      	bne.n	80025fe <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025c2:	2300      	movs	r3, #0
 80025c4:	60bb      	str	r3, [r7, #8]
 80025c6:	4b11      	ldr	r3, [pc, #68]	; (800260c <HAL_TIM_MspPostInit+0x6c>)
 80025c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ca:	4a10      	ldr	r2, [pc, #64]	; (800260c <HAL_TIM_MspPostInit+0x6c>)
 80025cc:	f043 0302 	orr.w	r3, r3, #2
 80025d0:	6313      	str	r3, [r2, #48]	; 0x30
 80025d2:	4b0e      	ldr	r3, [pc, #56]	; (800260c <HAL_TIM_MspPostInit+0x6c>)
 80025d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d6:	f003 0302 	and.w	r3, r3, #2
 80025da:	60bb      	str	r3, [r7, #8]
 80025dc:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80025de:	2310      	movs	r3, #16
 80025e0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025e2:	2302      	movs	r3, #2
 80025e4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e6:	2300      	movs	r3, #0
 80025e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025ea:	2303      	movs	r3, #3
 80025ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80025ee:	2302      	movs	r3, #2
 80025f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025f2:	f107 030c 	add.w	r3, r7, #12
 80025f6:	4619      	mov	r1, r3
 80025f8:	4805      	ldr	r0, [pc, #20]	; (8002610 <HAL_TIM_MspPostInit+0x70>)
 80025fa:	f001 ff89 	bl	8004510 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80025fe:	bf00      	nop
 8002600:	3720      	adds	r7, #32
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	40000400 	.word	0x40000400
 800260c:	40023800 	.word	0x40023800
 8002610:	40020400 	.word	0x40020400

08002614 <TIM3_Init>:
  /* USER CODE END TIM3_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void TIM3_Init(void){
 8002614:	b580      	push	{r7, lr}
 8002616:	b08e      	sub	sp, #56	; 0x38
 8002618:	af00      	add	r7, sp, #0

	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800261a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800261e:	2200      	movs	r2, #0
 8002620:	601a      	str	r2, [r3, #0]
 8002622:	605a      	str	r2, [r3, #4]
 8002624:	609a      	str	r2, [r3, #8]
 8002626:	60da      	str	r2, [r3, #12]
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002628:	f107 0320 	add.w	r3, r7, #32
 800262c:	2200      	movs	r2, #0
 800262e:	601a      	str	r2, [r3, #0]
 8002630:	605a      	str	r2, [r3, #4]
	  TIM_OC_InitTypeDef sConfigOC = {0};
 8002632:	1d3b      	adds	r3, r7, #4
 8002634:	2200      	movs	r2, #0
 8002636:	601a      	str	r2, [r3, #0]
 8002638:	605a      	str	r2, [r3, #4]
 800263a:	609a      	str	r2, [r3, #8]
 800263c:	60da      	str	r2, [r3, #12]
 800263e:	611a      	str	r2, [r3, #16]
 8002640:	615a      	str	r2, [r3, #20]
 8002642:	619a      	str	r2, [r3, #24]


	  htim3.Instance = TIM3;
 8002644:	4b2c      	ldr	r3, [pc, #176]	; (80026f8 <TIM3_Init+0xe4>)
 8002646:	4a2d      	ldr	r2, [pc, #180]	; (80026fc <TIM3_Init+0xe8>)
 8002648:	601a      	str	r2, [r3, #0]
	  htim3.Init.Prescaler = 0;
 800264a:	4b2b      	ldr	r3, [pc, #172]	; (80026f8 <TIM3_Init+0xe4>)
 800264c:	2200      	movs	r2, #0
 800264e:	605a      	str	r2, [r3, #4]
	  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002650:	4b29      	ldr	r3, [pc, #164]	; (80026f8 <TIM3_Init+0xe4>)
 8002652:	2200      	movs	r2, #0
 8002654:	609a      	str	r2, [r3, #8]
	  htim3.Init.Period = 120 - 1;
 8002656:	4b28      	ldr	r3, [pc, #160]	; (80026f8 <TIM3_Init+0xe4>)
 8002658:	2277      	movs	r2, #119	; 0x77
 800265a:	60da      	str	r2, [r3, #12]
	  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800265c:	4b26      	ldr	r3, [pc, #152]	; (80026f8 <TIM3_Init+0xe4>)
 800265e:	2200      	movs	r2, #0
 8002660:	611a      	str	r2, [r3, #16]
	  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002662:	4b25      	ldr	r3, [pc, #148]	; (80026f8 <TIM3_Init+0xe4>)
 8002664:	2200      	movs	r2, #0
 8002666:	619a      	str	r2, [r3, #24]
	  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002668:	4823      	ldr	r0, [pc, #140]	; (80026f8 <TIM3_Init+0xe4>)
 800266a:	f005 fe35 	bl	80082d8 <HAL_TIM_Base_Init>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d001      	beq.n	8002678 <TIM3_Init+0x64>
	  {
	    Error_Handler();
 8002674:	f7ff fd62 	bl	800213c <Error_Handler>
	  }
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002678:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800267c:	62bb      	str	r3, [r7, #40]	; 0x28
	  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800267e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002682:	4619      	mov	r1, r3
 8002684:	481c      	ldr	r0, [pc, #112]	; (80026f8 <TIM3_Init+0xe4>)
 8002686:	f006 fa07 	bl	8008a98 <HAL_TIM_ConfigClockSource>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	d001      	beq.n	8002694 <TIM3_Init+0x80>
	  {
	    Error_Handler();
 8002690:	f7ff fd54 	bl	800213c <Error_Handler>
	  }
	  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002694:	4818      	ldr	r0, [pc, #96]	; (80026f8 <TIM3_Init+0xe4>)
 8002696:	f005 fe6e 	bl	8008376 <HAL_TIM_PWM_Init>
 800269a:	4603      	mov	r3, r0
 800269c:	2b00      	cmp	r3, #0
 800269e:	d001      	beq.n	80026a4 <TIM3_Init+0x90>
	  {
	    Error_Handler();
 80026a0:	f7ff fd4c 	bl	800213c <Error_Handler>
	  }
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026a4:	2300      	movs	r3, #0
 80026a6:	623b      	str	r3, [r7, #32]
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026a8:	2300      	movs	r3, #0
 80026aa:	627b      	str	r3, [r7, #36]	; 0x24
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80026ac:	f107 0320 	add.w	r3, r7, #32
 80026b0:	4619      	mov	r1, r3
 80026b2:	4811      	ldr	r0, [pc, #68]	; (80026f8 <TIM3_Init+0xe4>)
 80026b4:	f006 fe72 	bl	800939c <HAL_TIMEx_MasterConfigSynchronization>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d001      	beq.n	80026c2 <TIM3_Init+0xae>
	  {
	    Error_Handler();
 80026be:	f7ff fd3d 	bl	800213c <Error_Handler>
	  }
	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80026c2:	2360      	movs	r3, #96	; 0x60
 80026c4:	607b      	str	r3, [r7, #4]
	  sConfigOC.Pulse = 0;
 80026c6:	2300      	movs	r3, #0
 80026c8:	60bb      	str	r3, [r7, #8]
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80026ca:	2300      	movs	r3, #0
 80026cc:	60fb      	str	r3, [r7, #12]
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80026ce:	2300      	movs	r3, #0
 80026d0:	617b      	str	r3, [r7, #20]
	  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80026d2:	1d3b      	adds	r3, r7, #4
 80026d4:	2200      	movs	r2, #0
 80026d6:	4619      	mov	r1, r3
 80026d8:	4807      	ldr	r0, [pc, #28]	; (80026f8 <TIM3_Init+0xe4>)
 80026da:	f006 f91b 	bl	8008914 <HAL_TIM_PWM_ConfigChannel>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d001      	beq.n	80026e8 <TIM3_Init+0xd4>
	  {
	    Error_Handler();
 80026e4:	f7ff fd2a 	bl	800213c <Error_Handler>
	  }

	  HAL_TIM_MspPostInit(&htim3);
 80026e8:	4803      	ldr	r0, [pc, #12]	; (80026f8 <TIM3_Init+0xe4>)
 80026ea:	f7ff ff59 	bl	80025a0 <HAL_TIM_MspPostInit>
}
 80026ee:	bf00      	nop
 80026f0:	3738      	adds	r7, #56	; 0x38
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	20000da4 	.word	0x20000da4
 80026fc:	40000400 	.word	0x40000400

08002700 <ButtonInit>:
 *@Params: Init struct with settings, Handle to initialized, low level IO driver
 *@Return: None
 *@Precondition: None
 *@Postcondition: Button handle will be initialized and ready to use
 **************************************//**************************************/
void ButtonInit(Button_Init_Struct_t Settings, Button_Handle_t *Button, Button_IO_Drv_t IO){
 8002700:	b082      	sub	sp, #8
 8002702:	b590      	push	{r4, r7, lr}
 8002704:	b085      	sub	sp, #20
 8002706:	af00      	add	r7, sp, #0
 8002708:	f107 0408 	add.w	r4, r7, #8
 800270c:	e884 0003 	stmia.w	r4, {r0, r1}
 8002710:	607a      	str	r2, [r7, #4]
 8002712:	627b      	str	r3, [r7, #36]	; 0x24
	Button->IO_Driver.init   = IO.init;
 8002714:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	609a      	str	r2, [r3, #8]
	Button->IO_Driver.deinit = IO.deinit;
 800271a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	60da      	str	r2, [r3, #12]
	Button->IO_Driver.read   = IO.read;
 8002720:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	611a      	str	r2, [r3, #16]
	Button->IO_Driver.write  = IO.write;
 8002726:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	615a      	str	r2, [r3, #20]
	Button->IO_Driver.ioctl  = IO.ioctl;
 800272c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	619a      	str	r2, [r3, #24]
	Button->IO_Driver.init();
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	4798      	blx	r3

	Button->ButtonIDNumber = Settings.ButtonIDNumber;
 8002738:	7a3a      	ldrb	r2, [r7, #8]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	701a      	strb	r2, [r3, #0]
	Button->KeyFunction = Settings.KeyFunction;
 800273e:	7a7a      	ldrb	r2, [r7, #9]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	705a      	strb	r2, [r3, #1]
	Button->ModKeyFunction = Settings.ModKeyFunction;
 8002744:	7aba      	ldrb	r2, [r7, #10]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	709a      	strb	r2, [r3, #2]
	Button->MouseFunction = Settings.MouseFunction;
 800274a:	7afa      	ldrb	r2, [r7, #11]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	70da      	strb	r2, [r3, #3]
	Button->State = ButtonUnpressed;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2200      	movs	r2, #0
 8002754:	715a      	strb	r2, [r3, #5]
}
 8002756:	bf00      	nop
 8002758:	3714      	adds	r7, #20
 800275a:	46bd      	mov	sp, r7
 800275c:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8002760:	b002      	add	sp, #8
 8002762:	4770      	bx	lr

08002764 <ButtonRead>:
 *@Params: Button handle to read
 *@Return: ButtonChanged if the button changed states, otherwise ButtonUnchanged
 *@Precondition: ButtonHandle should be initialized/
 *@Postcondition: ButtonState in the ButtonHandle will be updated.
 **************************************//**************************************/
ButtonStatus_t ButtonRead(Button_Handle_t *Button){
 8002764:	b580      	push	{r7, lr}
 8002766:	b084      	sub	sp, #16
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
    ButtonState_t Previous_State = Button->State;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	795b      	ldrb	r3, [r3, #5]
 8002770:	73fb      	strb	r3, [r7, #15]
    Button->State = Button->IO_Driver.read(Button->ButtonIDNumber);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	691b      	ldr	r3, [r3, #16]
 8002776:	687a      	ldr	r2, [r7, #4]
 8002778:	7812      	ldrb	r2, [r2, #0]
 800277a:	4610      	mov	r0, r2
 800277c:	4798      	blx	r3
 800277e:	4603      	mov	r3, r0
 8002780:	461a      	mov	r2, r3
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	715a      	strb	r2, [r3, #5]
    if(Previous_State != Button->State){
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	795b      	ldrb	r3, [r3, #5]
 800278a:	7bfa      	ldrb	r2, [r7, #15]
 800278c:	429a      	cmp	r2, r3
 800278e:	d001      	beq.n	8002794 <ButtonRead+0x30>
    	return ButtonChanged;
 8002790:	2300      	movs	r3, #0
 8002792:	e000      	b.n	8002796 <ButtonRead+0x32>
    } else {
    	return ButtonUnchanged;
 8002794:	2301      	movs	r3, #1
    }
}
 8002796:	4618      	mov	r0, r3
 8002798:	3710      	adds	r7, #16
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
	...

080027a0 <Button_IO_init>:
 *@Params: None
 *@Return: None
 *@Precondition: None
 *@Postcondition: GPIO, I2C, DMA Peripherals and clocks will be enabled and ready to use
 **************************************//**************************************/
static void Button_IO_init(void){
 80027a0:	b5b0      	push	{r4, r5, r7, lr}
 80027a2:	b08a      	sub	sp, #40	; 0x28
 80027a4:	af06      	add	r7, sp, #24
	const MCP23017_Init_Struct_t InitSettings = {
 80027a6:	4b2b      	ldr	r3, [pc, #172]	; (8002854 <Button_IO_init+0xb4>)
 80027a8:	881b      	ldrh	r3, [r3, #0]
 80027aa:	803b      	strh	r3, [r7, #0]
 80027ac:	4b29      	ldr	r3, [pc, #164]	; (8002854 <Button_IO_init+0xb4>)
 80027ae:	881b      	ldrh	r3, [r3, #0]
 80027b0:	807b      	strh	r3, [r7, #2]
 80027b2:	4b29      	ldr	r3, [pc, #164]	; (8002858 <Button_IO_init+0xb8>)
 80027b4:	881b      	ldrh	r3, [r3, #0]
 80027b6:	80bb      	strh	r3, [r7, #4]
 80027b8:	4b27      	ldr	r3, [pc, #156]	; (8002858 <Button_IO_init+0xb8>)
 80027ba:	881b      	ldrh	r3, [r3, #0]
 80027bc:	80fb      	strh	r3, [r7, #6]
 80027be:	4b26      	ldr	r3, [pc, #152]	; (8002858 <Button_IO_init+0xb8>)
 80027c0:	881b      	ldrh	r3, [r3, #0]
 80027c2:	813b      	strh	r3, [r7, #8]
 80027c4:	4b23      	ldr	r3, [pc, #140]	; (8002854 <Button_IO_init+0xb4>)
 80027c6:	881b      	ldrh	r3, [r3, #0]
 80027c8:	817b      	strh	r3, [r7, #10]
 80027ca:	2300      	movs	r3, #0
 80027cc:	733b      	strb	r3, [r7, #12]
			.Mode = MCP23017_AllPins,
			.PullUp = MCP23017_AllPins,
			.Polarity = MCP23017_AllPins
	};

	if(initialize_status == ButtonIO_Uninitialized){
 80027ce:	4b23      	ldr	r3, [pc, #140]	; (800285c <Button_IO_init+0xbc>)
 80027d0:	781b      	ldrb	r3, [r3, #0]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d139      	bne.n	800284a <Button_IO_init+0xaa>
	    MCP23017_Init(InitSettings, &Expander[0], MCP23017_IO1_Drv);
 80027d6:	4b22      	ldr	r3, [pc, #136]	; (8002860 <Button_IO_init+0xc0>)
 80027d8:	ac01      	add	r4, sp, #4
 80027da:	461d      	mov	r5, r3
 80027dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027e0:	682b      	ldr	r3, [r5, #0]
 80027e2:	6023      	str	r3, [r4, #0]
 80027e4:	4b1f      	ldr	r3, [pc, #124]	; (8002864 <Button_IO_init+0xc4>)
 80027e6:	9300      	str	r3, [sp, #0]
 80027e8:	463b      	mov	r3, r7
 80027ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80027ec:	f7fe fab4 	bl	8000d58 <MCP23017_Init>
	    MCP23017_Init(InitSettings, &Expander[1], MCP23017_IO2_Drv);
 80027f0:	4b1d      	ldr	r3, [pc, #116]	; (8002868 <Button_IO_init+0xc8>)
 80027f2:	ac01      	add	r4, sp, #4
 80027f4:	461d      	mov	r5, r3
 80027f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027fa:	682b      	ldr	r3, [r5, #0]
 80027fc:	6023      	str	r3, [r4, #0]
 80027fe:	4b1b      	ldr	r3, [pc, #108]	; (800286c <Button_IO_init+0xcc>)
 8002800:	9300      	str	r3, [sp, #0]
 8002802:	463b      	mov	r3, r7
 8002804:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002806:	f7fe faa7 	bl	8000d58 <MCP23017_Init>
	    MCP23017_Init(InitSettings, &Expander[2], MCP23017_IO3_Drv);
 800280a:	4b19      	ldr	r3, [pc, #100]	; (8002870 <Button_IO_init+0xd0>)
 800280c:	ac01      	add	r4, sp, #4
 800280e:	461d      	mov	r5, r3
 8002810:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002812:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002814:	682b      	ldr	r3, [r5, #0]
 8002816:	6023      	str	r3, [r4, #0]
 8002818:	4b16      	ldr	r3, [pc, #88]	; (8002874 <Button_IO_init+0xd4>)
 800281a:	9300      	str	r3, [sp, #0]
 800281c:	463b      	mov	r3, r7
 800281e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002820:	f7fe fa9a 	bl	8000d58 <MCP23017_Init>
	    MCP23017_Init(InitSettings, &Expander[3], MCP23017_IO4_Drv);
 8002824:	4b14      	ldr	r3, [pc, #80]	; (8002878 <Button_IO_init+0xd8>)
 8002826:	ac01      	add	r4, sp, #4
 8002828:	461d      	mov	r5, r3
 800282a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800282c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800282e:	682b      	ldr	r3, [r5, #0]
 8002830:	6023      	str	r3, [r4, #0]
 8002832:	4b12      	ldr	r3, [pc, #72]	; (800287c <Button_IO_init+0xdc>)
 8002834:	9300      	str	r3, [sp, #0]
 8002836:	463b      	mov	r3, r7
 8002838:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800283a:	f7fe fa8d 	bl	8000d58 <MCP23017_Init>
	    MCP23017_ReadPins(&Expander[0]); //Start the Button-Read-DMA Engine
 800283e:	4809      	ldr	r0, [pc, #36]	; (8002864 <Button_IO_init+0xc4>)
 8002840:	f7fe fbb4 	bl	8000fac <MCP23017_ReadPins>
	    initialize_status = ButtonIO_Initialized;
 8002844:	4b05      	ldr	r3, [pc, #20]	; (800285c <Button_IO_init+0xbc>)
 8002846:	2201      	movs	r2, #1
 8002848:	701a      	strb	r2, [r3, #0]
	}
}
 800284a:	bf00      	nop
 800284c:	3710      	adds	r7, #16
 800284e:	46bd      	mov	sp, r7
 8002850:	bdb0      	pop	{r4, r5, r7, pc}
 8002852:	bf00      	nop
 8002854:	0800e956 	.word	0x0800e956
 8002858:	0800e958 	.word	0x0800e958
 800285c:	20000e90 	.word	0x20000e90
 8002860:	0800e95c 	.word	0x0800e95c
 8002864:	20000e94 	.word	0x20000e94
 8002868:	0800e970 	.word	0x0800e970
 800286c:	20000eac 	.word	0x20000eac
 8002870:	0800e984 	.word	0x0800e984
 8002874:	20000ec4 	.word	0x20000ec4
 8002878:	0800e998 	.word	0x0800e998
 800287c:	20000edc 	.word	0x20000edc

08002880 <Button_IO_deinit>:

static void Button_IO_deinit(void){
 8002880:	b580      	push	{r7, lr}
 8002882:	af00      	add	r7, sp, #0

	if(initialize_status == ButtonIO_Initialized){
 8002884:	4b0a      	ldr	r3, [pc, #40]	; (80028b0 <Button_IO_deinit+0x30>)
 8002886:	781b      	ldrb	r3, [r3, #0]
 8002888:	2b01      	cmp	r3, #1
 800288a:	d10e      	bne.n	80028aa <Button_IO_deinit+0x2a>
	    MCP23017_DeInit(&Expander[0]);
 800288c:	4809      	ldr	r0, [pc, #36]	; (80028b4 <Button_IO_deinit+0x34>)
 800288e:	f7fe faf1 	bl	8000e74 <MCP23017_DeInit>
	    MCP23017_DeInit(&Expander[1]);
 8002892:	4809      	ldr	r0, [pc, #36]	; (80028b8 <Button_IO_deinit+0x38>)
 8002894:	f7fe faee 	bl	8000e74 <MCP23017_DeInit>
	    MCP23017_DeInit(&Expander[2]);
 8002898:	4808      	ldr	r0, [pc, #32]	; (80028bc <Button_IO_deinit+0x3c>)
 800289a:	f7fe faeb 	bl	8000e74 <MCP23017_DeInit>
	    MCP23017_DeInit(&Expander[3]);
 800289e:	4808      	ldr	r0, [pc, #32]	; (80028c0 <Button_IO_deinit+0x40>)
 80028a0:	f7fe fae8 	bl	8000e74 <MCP23017_DeInit>
	    initialize_status = ButtonIO_Uninitialized;
 80028a4:	4b02      	ldr	r3, [pc, #8]	; (80028b0 <Button_IO_deinit+0x30>)
 80028a6:	2200      	movs	r2, #0
 80028a8:	701a      	strb	r2, [r3, #0]
	}
}
 80028aa:	bf00      	nop
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	20000e90 	.word	0x20000e90
 80028b4:	20000e94 	.word	0x20000e94
 80028b8:	20000eac 	.word	0x20000eac
 80028bc:	20000ec4 	.word	0x20000ec4
 80028c0:	20000edc 	.word	0x20000edc

080028c4 <Button_IO_Read>:
 *@Params: Number of the button to read
 *@Return: ButtonUnpressed if the button is not pressed, ButtonPressed if it is pressed.
 *@Precondition: Button IO should be initialized
 *@Postcondition: None
 **************************************//**************************************/
static ButtonState_t Button_IO_Read(uint8_t ButtonNumber){
 80028c4:	b480      	push	{r7}
 80028c6:	b085      	sub	sp, #20
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	4603      	mov	r3, r0
 80028cc:	71fb      	strb	r3, [r7, #7]
	uint8_t ExpanderNumber = ButtonNumber / PINS_PER_EXPANDER;
 80028ce:	79fb      	ldrb	r3, [r7, #7]
 80028d0:	091b      	lsrs	r3, r3, #4
 80028d2:	73fb      	strb	r3, [r7, #15]
	if(ExpanderNumber >= NUMBER_OF_IO_EXPANDERS){
 80028d4:	7bfb      	ldrb	r3, [r7, #15]
 80028d6:	2b03      	cmp	r3, #3
 80028d8:	d901      	bls.n	80028de <Button_IO_Read+0x1a>
		return ButtonUnpressed;
 80028da:	2300      	movs	r3, #0
 80028dc:	e018      	b.n	8002910 <Button_IO_Read+0x4c>
	}

    uint16_t ButtonStates = Expander[ExpanderNumber].PinStates;
 80028de:	7bfa      	ldrb	r2, [r7, #15]
 80028e0:	490e      	ldr	r1, [pc, #56]	; (800291c <Button_IO_Read+0x58>)
 80028e2:	4613      	mov	r3, r2
 80028e4:	005b      	lsls	r3, r3, #1
 80028e6:	4413      	add	r3, r2
 80028e8:	00db      	lsls	r3, r3, #3
 80028ea:	440b      	add	r3, r1
 80028ec:	881b      	ldrh	r3, [r3, #0]
 80028ee:	81bb      	strh	r3, [r7, #12]
    uint16_t ButtonPosition = ButtonNumber % PINS_PER_EXPANDER;
 80028f0:	79fb      	ldrb	r3, [r7, #7]
 80028f2:	b29b      	uxth	r3, r3
 80028f4:	f003 030f 	and.w	r3, r3, #15
 80028f8:	817b      	strh	r3, [r7, #10]
    if((ButtonStates & (1 << ButtonPosition)) != 0){
 80028fa:	89ba      	ldrh	r2, [r7, #12]
 80028fc:	897b      	ldrh	r3, [r7, #10]
 80028fe:	fa42 f303 	asr.w	r3, r2, r3
 8002902:	f003 0301 	and.w	r3, r3, #1
 8002906:	2b00      	cmp	r3, #0
 8002908:	d001      	beq.n	800290e <Button_IO_Read+0x4a>
    	return ButtonPressed;
 800290a:	2301      	movs	r3, #1
 800290c:	e000      	b.n	8002910 <Button_IO_Read+0x4c>
    } else {
    	return ButtonUnpressed;
 800290e:	2300      	movs	r3, #0
    }
}
 8002910:	4618      	mov	r0, r3
 8002912:	3714      	adds	r7, #20
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr
 800291c:	20000e94 	.word	0x20000e94

08002920 <ButtonIRQCallback>:
 *@Params: I2C Handle used to communicate with MCP23017 IC
 *@Return: None
 *@Precondition: Button IO should be initialized.
 *@Postcondition: MCP23017 Pin states will be updated.
 **************************************//**************************************/
void ButtonIRQCallback(){
 8002920:	b580      	push	{r7, lr}
 8002922:	af00      	add	r7, sp, #0
//void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c){
	static uint8_t counter = 1;
	MCP23017_ReadPins(&Expander[counter % NUMBER_OF_IO_EXPANDERS]);
 8002924:	4b0a      	ldr	r3, [pc, #40]	; (8002950 <ButtonIRQCallback+0x30>)
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	f003 0203 	and.w	r2, r3, #3
 800292c:	4613      	mov	r3, r2
 800292e:	005b      	lsls	r3, r3, #1
 8002930:	4413      	add	r3, r2
 8002932:	00db      	lsls	r3, r3, #3
 8002934:	4a07      	ldr	r2, [pc, #28]	; (8002954 <ButtonIRQCallback+0x34>)
 8002936:	4413      	add	r3, r2
 8002938:	4618      	mov	r0, r3
 800293a:	f7fe fb37 	bl	8000fac <MCP23017_ReadPins>
	counter++;
 800293e:	4b04      	ldr	r3, [pc, #16]	; (8002950 <ButtonIRQCallback+0x30>)
 8002940:	781b      	ldrb	r3, [r3, #0]
 8002942:	3301      	adds	r3, #1
 8002944:	b2da      	uxtb	r2, r3
 8002946:	4b02      	ldr	r3, [pc, #8]	; (8002950 <ButtonIRQCallback+0x30>)
 8002948:	701a      	strb	r2, [r3, #0]

}
 800294a:	bf00      	nop
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	2000002c 	.word	0x2000002c
 8002954:	20000e94 	.word	0x20000e94

08002958 <JoystickInit>:
 *@Params: Init struct with desired user settings, Joystick handle to initialize, Low level IO Driver
 *@Return: None
 *@Precondition: None
 *@Postcondition: Joystick handle and low level hardware will be initialized and ready to use.
 **************************************//**************************************/
void JoystickInit(Joystick_Init_Struct_t Settings, Joystick_Handle_t *Joystick, Joystick_IO_Drv_t IO){
 8002958:	b084      	sub	sp, #16
 800295a:	b580      	push	{r7, lr}
 800295c:	af00      	add	r7, sp, #0
 800295e:	f107 0c08 	add.w	ip, r7, #8
 8002962:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	Joystick->IO_Driver.init = IO.init;
 8002966:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800296a:	62da      	str	r2, [r3, #44]	; 0x2c
	Joystick->IO_Driver.deinit = IO.deinit;
 800296c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800296e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002970:	631a      	str	r2, [r3, #48]	; 0x30
	Joystick->IO_Driver.read = IO.read;
 8002972:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002976:	635a      	str	r2, [r3, #52]	; 0x34
	Joystick->IO_Driver.write = IO.write;
 8002978:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800297a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800297c:	639a      	str	r2, [r3, #56]	; 0x38
	Joystick->IO_Driver.ioctl = IO.ioctl;
 800297e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002982:	63da      	str	r2, [r3, #60]	; 0x3c
	Joystick->IO_Driver.init();
 8002984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002988:	4798      	blx	r3

	Joystick->DeadZone          = Settings.DeadZone;
 800298a:	893a      	ldrh	r2, [r7, #8]
 800298c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800298e:	80da      	strh	r2, [r3, #6]
	Joystick->UpFunction        = Settings.UpFunction;
 8002990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002992:	3311      	adds	r3, #17
 8002994:	f107 0213 	add.w	r2, r7, #19
 8002998:	6812      	ldr	r2, [r2, #0]
 800299a:	601a      	str	r2, [r3, #0]
	Joystick->LeftFunction      = Settings.LeftFunction;
 800299c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800299e:	3319      	adds	r3, #25
 80029a0:	f107 021b 	add.w	r2, r7, #27
 80029a4:	6812      	ldr	r2, [r2, #0]
 80029a6:	601a      	str	r2, [r3, #0]
	Joystick->RightFunction     = Settings.RightFunction;
 80029a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029aa:	3309      	adds	r3, #9
 80029ac:	f107 020b 	add.w	r2, r7, #11
 80029b0:	6812      	ldr	r2, [r2, #0]
 80029b2:	601a      	str	r2, [r3, #0]
	Joystick->UpRightFunction   = Settings.UpRightFunction;
 80029b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029b6:	330d      	adds	r3, #13
 80029b8:	f107 020f 	add.w	r2, r7, #15
 80029bc:	6812      	ldr	r2, [r2, #0]
 80029be:	601a      	str	r2, [r3, #0]
	Joystick->UpLeftFunction    = Settings.UpLeftFunction;
 80029c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029c2:	3315      	adds	r3, #21
 80029c4:	f107 0217 	add.w	r2, r7, #23
 80029c8:	6812      	ldr	r2, [r2, #0]
 80029ca:	601a      	str	r2, [r3, #0]
	Joystick->DownFunction      = Settings.DownFunction;
 80029cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029ce:	3321      	adds	r3, #33	; 0x21
 80029d0:	f107 0223 	add.w	r2, r7, #35	; 0x23
 80029d4:	6812      	ldr	r2, [r2, #0]
 80029d6:	601a      	str	r2, [r3, #0]
	Joystick->DownLeftFunction  = Settings.DownLeftFunction;
 80029d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029da:	331d      	adds	r3, #29
 80029dc:	f107 021f 	add.w	r2, r7, #31
 80029e0:	6812      	ldr	r2, [r2, #0]
 80029e2:	601a      	str	r2, [r3, #0]
	Joystick->DownRightFunction = Settings.DownRightFunction;
 80029e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029e6:	3325      	adds	r3, #37	; 0x25
 80029e8:	f107 0227 	add.w	r2, r7, #39	; 0x27
 80029ec:	6812      	ldr	r2, [r2, #0]
 80029ee:	601a      	str	r2, [r3, #0]
	Joystick->Mode = Settings.Mode;
 80029f0:	7aba      	ldrb	r2, [r7, #10]
 80029f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029f4:	721a      	strb	r2, [r3, #8]
	Joystick->Position = JoystickNeutral;
 80029f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029f8:	2200      	movs	r2, #0
 80029fa:	711a      	strb	r2, [r3, #4]
	Joystick->X_PosRaw = 0;
 80029fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029fe:	2200      	movs	r2, #0
 8002a00:	801a      	strh	r2, [r3, #0]
	Joystick->Y_PosRaw = 0;
 8002a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a04:	2200      	movs	r2, #0
 8002a06:	805a      	strh	r2, [r3, #2]
}
 8002a08:	bf00      	nop
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002a10:	b004      	add	sp, #16
 8002a12:	4770      	bx	lr

08002a14 <JoystickRead>:
 *@Params: Joystick Handle
 *@Return: JoystickChanged if previous position != new position. Uses XPosRaw/YPosRaw in analog mode
 *@Precondition: JoystickHandle must be initialized
 *@Postcondition: Joystick XPosRaw/YPosRaw/State will be updated.
 **************************************//**************************************/
JoystickStatus_t JoystickRead(Joystick_Handle_t *Joystick){
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b084      	sub	sp, #16
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
	JoystickState_t PreviousState = Joystick->Position;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	791b      	ldrb	r3, [r3, #4]
 8002a20:	73fb      	strb	r3, [r7, #15]
	int16_t PreviousX = Joystick->X_PosRaw;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	881b      	ldrh	r3, [r3, #0]
 8002a26:	81bb      	strh	r3, [r7, #12]
	int16_t PreviousY = Joystick->Y_PosRaw;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	885b      	ldrh	r3, [r3, #2]
 8002a2c:	817b      	strh	r3, [r7, #10]
	Joystick->Position = Joystick->IO_Driver.read(Joystick->DeadZone, &Joystick->X_PosRaw, &Joystick->Y_PosRaw);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	88d0      	ldrh	r0, [r2, #6]
 8002a36:	6879      	ldr	r1, [r7, #4]
 8002a38:	687a      	ldr	r2, [r7, #4]
 8002a3a:	3202      	adds	r2, #2
 8002a3c:	4798      	blx	r3
 8002a3e:	4603      	mov	r3, r0
 8002a40:	461a      	mov	r2, r3
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	711a      	strb	r2, [r3, #4]

	if(Joystick->Mode == Joystick4Way || Joystick->Mode == Joystick8Way){
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	7a1b      	ldrb	r3, [r3, #8]
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d003      	beq.n	8002a56 <JoystickRead+0x42>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	7a1b      	ldrb	r3, [r3, #8]
 8002a52:	2b02      	cmp	r3, #2
 8002a54:	d108      	bne.n	8002a68 <JoystickRead+0x54>
	    if(Joystick->Position != PreviousState){
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	791b      	ldrb	r3, [r3, #4]
 8002a5a:	7bfa      	ldrb	r2, [r7, #15]
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d001      	beq.n	8002a64 <JoystickRead+0x50>
		    return JoystickChanged;
 8002a60:	2300      	movs	r3, #0
 8002a62:	e012      	b.n	8002a8a <JoystickRead+0x76>
	    } else {
		    return JoystickUnchanged;
 8002a64:	2301      	movs	r3, #1
 8002a66:	e010      	b.n	8002a8a <JoystickRead+0x76>
	    }
	}

	if(Joystick->X_PosRaw != PreviousX || Joystick->Y_PosRaw != PreviousY){
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a6e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002a72:	429a      	cmp	r2, r3
 8002a74:	d106      	bne.n	8002a84 <JoystickRead+0x70>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002a7c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d001      	beq.n	8002a88 <JoystickRead+0x74>
		return JoystickChanged;
 8002a84:	2300      	movs	r3, #0
 8002a86:	e000      	b.n	8002a8a <JoystickRead+0x76>
	} else {
		return JoystickUnchanged;
 8002a88:	2301      	movs	r3, #1
	}
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3710      	adds	r7, #16
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
	...

08002a94 <JoystickIOInit>:
 *@Params: None
 *@Return: None
 *@Precondition: None
 *@Postcondition: Low level hardware will be initialized. (DMA, ADC, GPIO)
 **************************************//**************************************/
static void JoystickIOInit(){
 8002a94:	b580      	push	{r7, lr}
 8002a96:	af00      	add	r7, sp, #0
	ADC_GPIO_Init();
 8002a98:	f7fe fd3a 	bl	8001510 <ADC_GPIO_Init>
	ADC_DMA_Init();
 8002a9c:	f7fe fcc2 	bl	8001424 <ADC_DMA_Init>
	ADC1_Init();
 8002aa0:	f7fe fc40 	bl	8001324 <ADC1_Init>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buffer, 2);
 8002aa4:	2202      	movs	r2, #2
 8002aa6:	4903      	ldr	r1, [pc, #12]	; (8002ab4 <JoystickIOInit+0x20>)
 8002aa8:	4803      	ldr	r0, [pc, #12]	; (8002ab8 <JoystickIOInit+0x24>)
 8002aaa:	f000 fb9b 	bl	80031e4 <HAL_ADC_Start_DMA>
}
 8002aae:	bf00      	nop
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	20000030 	.word	0x20000030
 8002ab8:	200001b4 	.word	0x200001b4

08002abc <JoystickIODeInit>:
 *@Params: None
 *@Return: None
 *@Precondition: None
 *@Postcondition: DMA transfers from Joystick will be stopped.
 **************************************//**************************************/
static void JoystickIODeInit(void){
 8002abc:	b580      	push	{r7, lr}
 8002abe:	af00      	add	r7, sp, #0
   HAL_ADC_Stop_DMA(&hadc1);
 8002ac0:	4805      	ldr	r0, [pc, #20]	; (8002ad8 <JoystickIODeInit+0x1c>)
 8002ac2:	f000 fc7f 	bl	80033c4 <HAL_ADC_Stop_DMA>
   HAL_NVIC_DisableIRQ(DMA2_Stream0_IRQn);
 8002ac6:	2038      	movs	r0, #56	; 0x38
 8002ac8:	f001 f8eb 	bl	8003ca2 <HAL_NVIC_DisableIRQ>
   HAL_NVIC_ClearPendingIRQ(DMA2_Stream0_IRQn);
 8002acc:	2038      	movs	r0, #56	; 0x38
 8002ace:	f001 f902 	bl	8003cd6 <HAL_NVIC_ClearPendingIRQ>
}
 8002ad2:	bf00      	nop
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	200001b4 	.word	0x200001b4

08002adc <JoystickIORead>:
 *@Params: Joystick Deadzone, X Position buffer, Y Position buffer
 *@Return: Position of the joystick
 *@Precondition: Joystick IO should be initialized
 *@Postcondition: X_Pos and Y_Pos will contain raw joystick value.
 **************************************//**************************************/
static JoystickState_t JoystickIORead(uint16_t Deadzone, int16_t *X_Pos, int16_t *Y_Pos){
 8002adc:	b480      	push	{r7}
 8002ade:	b087      	sub	sp, #28
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	60b9      	str	r1, [r7, #8]
 8002ae6:	607a      	str	r2, [r7, #4]
 8002ae8:	81fb      	strh	r3, [r7, #14]
	//Handle Deadzone values that are too large.
    if(Deadzone > INT16_MAX - 1){
 8002aea:	89fb      	ldrh	r3, [r7, #14]
 8002aec:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d902      	bls.n	8002afa <JoystickIORead+0x1e>
    	Deadzone = INT16_MAX - 1;
 8002af4:	f647 73fe 	movw	r3, #32766	; 0x7ffe
 8002af8:	81fb      	strh	r3, [r7, #14]
    }

    //Calculate X Position
	int16_t temp = adc_buffer[ADC_X_INDEX] - 2048 + ADC_X_OFFSET;
 8002afa:	2301      	movs	r3, #1
 8002afc:	461a      	mov	r2, r3
 8002afe:	4b6b      	ldr	r3, [pc, #428]	; (8002cac <JoystickIORead+0x1d0>)
 8002b00:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002b04:	b21b      	sxth	r3, r3
 8002b06:	b29a      	uxth	r2, r3
 8002b08:	2305      	movs	r3, #5
 8002b0a:	b29b      	uxth	r3, r3
 8002b0c:	4413      	add	r3, r2
 8002b0e:	b29b      	uxth	r3, r3
 8002b10:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8002b14:	b29b      	uxth	r3, r3
 8002b16:	82fb      	strh	r3, [r7, #22]
	if(temp > ADC_UPPER_LIMIT){
 8002b18:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002b1c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002b20:	4293      	cmp	r3, r2
 8002b22:	dd03      	ble.n	8002b2c <JoystickIORead+0x50>
		temp = ADC_UPPER_LIMIT;
 8002b24:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8002b28:	82fb      	strh	r3, [r7, #22]
 8002b2a:	e007      	b.n	8002b3c <JoystickIORead+0x60>
	} else if (temp < ADC_LOWER_LIMIT){
 8002b2c:	4a60      	ldr	r2, [pc, #384]	; (8002cb0 <JoystickIORead+0x1d4>)
 8002b2e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002b32:	4293      	cmp	r3, r2
 8002b34:	da02      	bge.n	8002b3c <JoystickIORead+0x60>
		temp = ADC_LOWER_LIMIT;
 8002b36:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002b3a:	82fb      	strh	r3, [r7, #22]
	}
	temp = temp * 16; //convert to 16 bit number
 8002b3c:	8afb      	ldrh	r3, [r7, #22]
 8002b3e:	011b      	lsls	r3, r3, #4
 8002b40:	b29b      	uxth	r3, r3
 8002b42:	82fb      	strh	r3, [r7, #22]
	if(temp > Deadzone || temp < -(int16_t)Deadzone){
 8002b44:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002b48:	89fb      	ldrh	r3, [r7, #14]
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	dc06      	bgt.n	8002b5c <JoystickIORead+0x80>
 8002b4e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002b52:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002b56:	425b      	negs	r3, r3
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	da03      	bge.n	8002b64 <JoystickIORead+0x88>
	    *X_Pos = temp;
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	8afa      	ldrh	r2, [r7, #22]
 8002b60:	801a      	strh	r2, [r3, #0]
 8002b62:	e002      	b.n	8002b6a <JoystickIORead+0x8e>
	} else {
        *X_Pos = 0;
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	2200      	movs	r2, #0
 8002b68:	801a      	strh	r2, [r3, #0]
	}

	//Calculate Y Position
	temp = adc_buffer[ADC_Y_INDEX] - 2048 + ADC_Y_OFFSET;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	4b4f      	ldr	r3, [pc, #316]	; (8002cac <JoystickIORead+0x1d0>)
 8002b70:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002b74:	b21b      	sxth	r3, r3
 8002b76:	b29a      	uxth	r2, r3
 8002b78:	f06f 031d 	mvn.w	r3, #29
 8002b7c:	b29b      	uxth	r3, r3
 8002b7e:	4413      	add	r3, r2
 8002b80:	b29b      	uxth	r3, r3
 8002b82:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8002b86:	b29b      	uxth	r3, r3
 8002b88:	82fb      	strh	r3, [r7, #22]
	if(temp > ADC_UPPER_LIMIT){
 8002b8a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002b8e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002b92:	4293      	cmp	r3, r2
 8002b94:	dd03      	ble.n	8002b9e <JoystickIORead+0xc2>
		temp = ADC_UPPER_LIMIT;
 8002b96:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8002b9a:	82fb      	strh	r3, [r7, #22]
 8002b9c:	e007      	b.n	8002bae <JoystickIORead+0xd2>
	} else if (temp < ADC_LOWER_LIMIT){
 8002b9e:	4a44      	ldr	r2, [pc, #272]	; (8002cb0 <JoystickIORead+0x1d4>)
 8002ba0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	da02      	bge.n	8002bae <JoystickIORead+0xd2>
		temp = ADC_LOWER_LIMIT;
 8002ba8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002bac:	82fb      	strh	r3, [r7, #22]
	}
	temp = temp * 16; //convert to 16 bit number
 8002bae:	8afb      	ldrh	r3, [r7, #22]
 8002bb0:	011b      	lsls	r3, r3, #4
 8002bb2:	b29b      	uxth	r3, r3
 8002bb4:	82fb      	strh	r3, [r7, #22]
	if(temp > Deadzone || temp < -(int16_t)Deadzone){
 8002bb6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002bba:	89fb      	ldrh	r3, [r7, #14]
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	dc06      	bgt.n	8002bce <JoystickIORead+0xf2>
 8002bc0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002bc4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002bc8:	425b      	negs	r3, r3
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	da03      	bge.n	8002bd6 <JoystickIORead+0xfa>
	    *Y_Pos = temp;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	8afa      	ldrh	r2, [r7, #22]
 8002bd2:	801a      	strh	r2, [r3, #0]
 8002bd4:	e002      	b.n	8002bdc <JoystickIORead+0x100>
	} else {
        *Y_Pos = 0;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	801a      	strh	r2, [r3, #0]
	}

	if(*X_Pos == 0 && *Y_Pos == 0){
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d106      	bne.n	8002bf4 <JoystickIORead+0x118>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d101      	bne.n	8002bf4 <JoystickIORead+0x118>
		return JoystickNeutral;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	e054      	b.n	8002c9e <JoystickIORead+0x1c2>
	} else if(*X_Pos > 0 && *Y_Pos == 0){
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	dd06      	ble.n	8002c0c <JoystickIORead+0x130>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d101      	bne.n	8002c0c <JoystickIORead+0x130>
		return Joystick_Right;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e048      	b.n	8002c9e <JoystickIORead+0x1c2>

	} else if(*X_Pos > 0 && *Y_Pos > 0){
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	dd06      	ble.n	8002c24 <JoystickIORead+0x148>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	dd01      	ble.n	8002c24 <JoystickIORead+0x148>
		return Joystick_UpRight;
 8002c20:	2302      	movs	r3, #2
 8002c22:	e03c      	b.n	8002c9e <JoystickIORead+0x1c2>

	} else if(*X_Pos == 0 && *Y_Pos > 0){
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d106      	bne.n	8002c3c <JoystickIORead+0x160>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	dd01      	ble.n	8002c3c <JoystickIORead+0x160>
		return Joystick_Up;
 8002c38:	2303      	movs	r3, #3
 8002c3a:	e030      	b.n	8002c9e <JoystickIORead+0x1c2>

	} else if(*X_Pos < 0 && *Y_Pos > 0){
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	da06      	bge.n	8002c54 <JoystickIORead+0x178>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	dd01      	ble.n	8002c54 <JoystickIORead+0x178>
		return Joystick_UpLeft;
 8002c50:	2304      	movs	r3, #4
 8002c52:	e024      	b.n	8002c9e <JoystickIORead+0x1c2>

	} else if(*X_Pos < 0 && *Y_Pos == 0){
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	da06      	bge.n	8002c6c <JoystickIORead+0x190>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d101      	bne.n	8002c6c <JoystickIORead+0x190>
		return Joystick_Left;
 8002c68:	2305      	movs	r3, #5
 8002c6a:	e018      	b.n	8002c9e <JoystickIORead+0x1c2>

	} else if(*X_Pos < 0 && *Y_Pos < 0){
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	da06      	bge.n	8002c84 <JoystickIORead+0x1a8>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	da01      	bge.n	8002c84 <JoystickIORead+0x1a8>
		return Joystick_DownLeft;
 8002c80:	2306      	movs	r3, #6
 8002c82:	e00c      	b.n	8002c9e <JoystickIORead+0x1c2>

	} else if(*X_Pos == 0 && *Y_Pos < 0){
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d106      	bne.n	8002c9c <JoystickIORead+0x1c0>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	da01      	bge.n	8002c9c <JoystickIORead+0x1c0>
		return Joystick_Down;
 8002c98:	2307      	movs	r3, #7
 8002c9a:	e000      	b.n	8002c9e <JoystickIORead+0x1c2>
	}
	else{
		return Joystick_DownRight;
 8002c9c:	2308      	movs	r3, #8
	}

}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	371c      	adds	r7, #28
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr
 8002caa:	bf00      	nop
 8002cac:	20000030 	.word	0x20000030
 8002cb0:	fffff800 	.word	0xfffff800

08002cb4 <SerialLEDInit>:
 *  Created on: May 22, 2022
 *      Author: evanl
 */
#include "SerialLED.h"

void SerialLEDInit(SerialLED_InitStruct_t Settings, SerialLED_Handle_t *LED, SerialLED_IO_Drv_t IO){
 8002cb4:	b082      	sub	sp, #8
 8002cb6:	b5b0      	push	{r4, r5, r7, lr}
 8002cb8:	b084      	sub	sp, #16
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	f107 0408 	add.w	r4, r7, #8
 8002cc0:	e884 0003 	stmia.w	r4, {r0, r1}
 8002cc4:	607a      	str	r2, [r7, #4]
 8002cc6:	627b      	str	r3, [r7, #36]	; 0x24
    LED->IO_Driver = IO;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	f103 0408 	add.w	r4, r3, #8
 8002cce:	f107 0524 	add.w	r5, r7, #36	; 0x24
 8002cd2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002cd4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002cd6:	682b      	ldr	r3, [r5, #0]
 8002cd8:	6023      	str	r3, [r4, #0]
    LED->Address = Settings.address;
 8002cda:	893a      	ldrh	r2, [r7, #8]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	801a      	strh	r2, [r3, #0]
    LED->red = Settings.red;
 8002ce0:	7afa      	ldrb	r2, [r7, #11]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	70da      	strb	r2, [r3, #3]
    LED->green = Settings.green;
 8002ce6:	7aba      	ldrb	r2, [r7, #10]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	709a      	strb	r2, [r3, #2]
    LED->blue = Settings.blue;
 8002cec:	7b3a      	ldrb	r2, [r7, #12]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	711a      	strb	r2, [r3, #4]
    LED->IO_Driver.init();
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	4798      	blx	r3
    LED->IO_Driver.write(LED->Address, LED->red, LED->green, LED->blue);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	695c      	ldr	r4, [r3, #20]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	8818      	ldrh	r0, [r3, #0]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	78d9      	ldrb	r1, [r3, #3]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	789a      	ldrb	r2, [r3, #2]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	791b      	ldrb	r3, [r3, #4]
 8002d0c:	47a0      	blx	r4
}
 8002d0e:	bf00      	nop
 8002d10:	3710      	adds	r7, #16
 8002d12:	46bd      	mov	sp, r7
 8002d14:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8002d18:	b002      	add	sp, #8
 8002d1a:	4770      	bx	lr

08002d1c <SerialLED_IO_Init>:
//static const uint8_t TIM_PERIOD = 119;     //1.25uS with 96MHz clock
static const uint8_t ZERO_DUTY_CYCLE = 29; //.3uS
static const uint8_t ONE_DUTY_CYCLE = 58;  //.6uS
static const uint8_t RESET_DUTY_CYCLE = 0;

static void SerialLED_IO_Init(void){
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b082      	sub	sp, #8
 8002d20:	af00      	add	r7, sp, #0
	//ensure reset signal is 0
	for(uint32_t i = NUMBER_OF_LEDS * BITS_PER_LED; i < LED_DMA_BUFFER_LENGTH; i++){
 8002d22:	2360      	movs	r3, #96	; 0x60
 8002d24:	607b      	str	r3, [r7, #4]
 8002d26:	e008      	b.n	8002d3a <SerialLED_IO_Init+0x1e>
		LED_DMA_BUFFER[i] = RESET_DUTY_CYCLE;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	b299      	uxth	r1, r3
 8002d2c:	4a0d      	ldr	r2, [pc, #52]	; (8002d64 <SerialLED_IO_Init+0x48>)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(uint32_t i = NUMBER_OF_LEDS * BITS_PER_LED; i < LED_DMA_BUFFER_LENGTH; i++){
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	3301      	adds	r3, #1
 8002d38:	607b      	str	r3, [r7, #4]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2b9f      	cmp	r3, #159	; 0x9f
 8002d3e:	d9f3      	bls.n	8002d28 <SerialLED_IO_Init+0xc>
	}
	TIM3_GPIO_Init();
 8002d40:	f7fe fc00 	bl	8001544 <TIM3_GPIO_Init>
	TIM_DMA_Init();
 8002d44:	f7fe fb8a 	bl	800145c <TIM_DMA_Init>
    if(initialize_status == LED_uninitialized){
 8002d48:	4b07      	ldr	r3, [pc, #28]	; (8002d68 <SerialLED_IO_Init+0x4c>)
 8002d4a:	781b      	ldrb	r3, [r3, #0]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d104      	bne.n	8002d5a <SerialLED_IO_Init+0x3e>
	    TIM3_Init();
 8002d50:	f7ff fc60 	bl	8002614 <TIM3_Init>
	    initialize_status = LED_initialized;
 8002d54:	4b04      	ldr	r3, [pc, #16]	; (8002d68 <SerialLED_IO_Init+0x4c>)
 8002d56:	2201      	movs	r2, #1
 8002d58:	701a      	strb	r2, [r3, #0]
    }

}
 8002d5a:	bf00      	nop
 8002d5c:	3708      	adds	r7, #8
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	bf00      	nop
 8002d64:	20000ef4 	.word	0x20000ef4
 8002d68:	20001034 	.word	0x20001034

08002d6c <SerialLED_IO_DeInit>:

static void SerialLED_IO_DeInit(void){
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop_DMA(&htim3, TIM_CHANNEL_1);
 8002d70:	2100      	movs	r1, #0
 8002d72:	4802      	ldr	r0, [pc, #8]	; (8002d7c <SerialLED_IO_DeInit+0x10>)
 8002d74:	f005 fd08 	bl	8008788 <HAL_TIM_PWM_Stop_DMA>
}
 8002d78:	bf00      	nop
 8002d7a:	bd80      	pop	{r7, pc}
 8002d7c:	20000da4 	.word	0x20000da4

08002d80 <SerialLED_IO_Write>:

static void SerialLED_IO_Write(uint16_t Address, uint8_t red, uint8_t green, uint8_t blue){
 8002d80:	b590      	push	{r4, r7, lr}
 8002d82:	b085      	sub	sp, #20
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	4604      	mov	r4, r0
 8002d88:	4608      	mov	r0, r1
 8002d8a:	4611      	mov	r1, r2
 8002d8c:	461a      	mov	r2, r3
 8002d8e:	4623      	mov	r3, r4
 8002d90:	80fb      	strh	r3, [r7, #6]
 8002d92:	4603      	mov	r3, r0
 8002d94:	717b      	strb	r3, [r7, #5]
 8002d96:	460b      	mov	r3, r1
 8002d98:	713b      	strb	r3, [r7, #4]
 8002d9a:	4613      	mov	r3, r2
 8002d9c:	70fb      	strb	r3, [r7, #3]
	//HAL_TIM_PWM_Stop_DMA(&htim3, TIM_CHANNEL_1);
    for(uint16_t i = 0; i < 8; i++){
 8002d9e:	2300      	movs	r3, #0
 8002da0:	81fb      	strh	r3, [r7, #14]
 8002da2:	e052      	b.n	8002e4a <SerialLED_IO_Write+0xca>
    	LED_DMA_BUFFER[(Address * BITS_PER_LED) + 0  + i] = green & (1 << (7 - i)) ? ONE_DUTY_CYCLE : ZERO_DUTY_CYCLE;
 8002da4:	793a      	ldrb	r2, [r7, #4]
 8002da6:	89fb      	ldrh	r3, [r7, #14]
 8002da8:	f1c3 0307 	rsb	r3, r3, #7
 8002dac:	fa42 f303 	asr.w	r3, r2, r3
 8002db0:	f003 0301 	and.w	r3, r3, #1
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d002      	beq.n	8002dbe <SerialLED_IO_Write+0x3e>
 8002db8:	233a      	movs	r3, #58	; 0x3a
 8002dba:	b29a      	uxth	r2, r3
 8002dbc:	e001      	b.n	8002dc2 <SerialLED_IO_Write+0x42>
 8002dbe:	231d      	movs	r3, #29
 8002dc0:	b29a      	uxth	r2, r3
 8002dc2:	88f9      	ldrh	r1, [r7, #6]
 8002dc4:	460b      	mov	r3, r1
 8002dc6:	005b      	lsls	r3, r3, #1
 8002dc8:	440b      	add	r3, r1
 8002dca:	00db      	lsls	r3, r3, #3
 8002dcc:	4619      	mov	r1, r3
 8002dce:	89fb      	ldrh	r3, [r7, #14]
 8002dd0:	440b      	add	r3, r1
 8002dd2:	4924      	ldr	r1, [pc, #144]	; (8002e64 <SerialLED_IO_Write+0xe4>)
 8002dd4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    	LED_DMA_BUFFER[(Address * BITS_PER_LED) + 8  + i] = red   & (1 << (7 - i)) ? ONE_DUTY_CYCLE : ZERO_DUTY_CYCLE;
 8002dd8:	797a      	ldrb	r2, [r7, #5]
 8002dda:	89fb      	ldrh	r3, [r7, #14]
 8002ddc:	f1c3 0307 	rsb	r3, r3, #7
 8002de0:	fa42 f303 	asr.w	r3, r2, r3
 8002de4:	f003 0301 	and.w	r3, r3, #1
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d002      	beq.n	8002df2 <SerialLED_IO_Write+0x72>
 8002dec:	233a      	movs	r3, #58	; 0x3a
 8002dee:	b29a      	uxth	r2, r3
 8002df0:	e001      	b.n	8002df6 <SerialLED_IO_Write+0x76>
 8002df2:	231d      	movs	r3, #29
 8002df4:	b29a      	uxth	r2, r3
 8002df6:	88f9      	ldrh	r1, [r7, #6]
 8002df8:	460b      	mov	r3, r1
 8002dfa:	005b      	lsls	r3, r3, #1
 8002dfc:	440b      	add	r3, r1
 8002dfe:	00db      	lsls	r3, r3, #3
 8002e00:	4619      	mov	r1, r3
 8002e02:	89fb      	ldrh	r3, [r7, #14]
 8002e04:	440b      	add	r3, r1
 8002e06:	3308      	adds	r3, #8
 8002e08:	4916      	ldr	r1, [pc, #88]	; (8002e64 <SerialLED_IO_Write+0xe4>)
 8002e0a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    	LED_DMA_BUFFER[(Address * BITS_PER_LED) + 16 + i] = blue  & (1 << (7 - i)) ? ONE_DUTY_CYCLE : ZERO_DUTY_CYCLE;
 8002e0e:	78fa      	ldrb	r2, [r7, #3]
 8002e10:	89fb      	ldrh	r3, [r7, #14]
 8002e12:	f1c3 0307 	rsb	r3, r3, #7
 8002e16:	fa42 f303 	asr.w	r3, r2, r3
 8002e1a:	f003 0301 	and.w	r3, r3, #1
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d002      	beq.n	8002e28 <SerialLED_IO_Write+0xa8>
 8002e22:	233a      	movs	r3, #58	; 0x3a
 8002e24:	b29a      	uxth	r2, r3
 8002e26:	e001      	b.n	8002e2c <SerialLED_IO_Write+0xac>
 8002e28:	231d      	movs	r3, #29
 8002e2a:	b29a      	uxth	r2, r3
 8002e2c:	88f9      	ldrh	r1, [r7, #6]
 8002e2e:	460b      	mov	r3, r1
 8002e30:	005b      	lsls	r3, r3, #1
 8002e32:	440b      	add	r3, r1
 8002e34:	00db      	lsls	r3, r3, #3
 8002e36:	4619      	mov	r1, r3
 8002e38:	89fb      	ldrh	r3, [r7, #14]
 8002e3a:	440b      	add	r3, r1
 8002e3c:	3310      	adds	r3, #16
 8002e3e:	4909      	ldr	r1, [pc, #36]	; (8002e64 <SerialLED_IO_Write+0xe4>)
 8002e40:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    for(uint16_t i = 0; i < 8; i++){
 8002e44:	89fb      	ldrh	r3, [r7, #14]
 8002e46:	3301      	adds	r3, #1
 8002e48:	81fb      	strh	r3, [r7, #14]
 8002e4a:	89fb      	ldrh	r3, [r7, #14]
 8002e4c:	2b07      	cmp	r3, #7
 8002e4e:	d9a9      	bls.n	8002da4 <SerialLED_IO_Write+0x24>
    }
    HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, (uint32_t*)LED_DMA_BUFFER, LED_DMA_BUFFER_LENGTH);
 8002e50:	23a0      	movs	r3, #160	; 0xa0
 8002e52:	4a04      	ldr	r2, [pc, #16]	; (8002e64 <SerialLED_IO_Write+0xe4>)
 8002e54:	2100      	movs	r1, #0
 8002e56:	4804      	ldr	r0, [pc, #16]	; (8002e68 <SerialLED_IO_Write+0xe8>)
 8002e58:	f005 fae6 	bl	8008428 <HAL_TIM_PWM_Start_DMA>
}
 8002e5c:	bf00      	nop
 8002e5e:	3714      	adds	r7, #20
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd90      	pop	{r4, r7, pc}
 8002e64:	20000ef4 	.word	0x20000ef4
 8002e68:	20000da4 	.word	0x20000da4

08002e6c <TouchButtonInit>:
 *  Created on: May 26, 2022
 *      Author: evanl
 */
#include "TouchButton.h"

void TouchButtonInit(TouchButton_Init_Struct_t Settings, TouchButton_Handle_t *Dev, TouchButton_IO_Drv_t IO_Driver){
 8002e6c:	b5b0      	push	{r4, r5, r7, lr}
 8002e6e:	b084      	sub	sp, #16
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	1d3c      	adds	r4, r7, #4
 8002e74:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002e78:	603b      	str	r3, [r7, #0]
    Dev->IO_Driver = IO_Driver;
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	f103 0410 	add.w	r4, r3, #16
 8002e80:	f107 0520 	add.w	r5, r7, #32
 8002e84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e88:	682b      	ldr	r3, [r5, #0]
 8002e8a:	6023      	str	r3, [r4, #0]
    Dev->KeyFunction = Settings.KeyFunction;
 8002e8c:	7b3a      	ldrb	r2, [r7, #12]
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	721a      	strb	r2, [r3, #8]
    Dev->ModKeyFunction = Settings.ModKeyFunction;
 8002e92:	7b7a      	ldrb	r2, [r7, #13]
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	725a      	strb	r2, [r3, #9]
    Dev->MouseFunction = Settings.MouseFunction;
 8002e98:	7bba      	ldrb	r2, [r7, #14]
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	729a      	strb	r2, [r3, #10]
    Dev->WheelFunction = Settings.WheelFunction;
 8002e9e:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	72da      	strb	r2, [r3, #11]
    Dev->TopLeftBound = Settings.TopLeftBound;
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	687a      	ldr	r2, [r7, #4]
 8002eaa:	601a      	str	r2, [r3, #0]
    Dev->BottomRightBound = Settings.BottomRightBound;
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	68ba      	ldr	r2, [r7, #8]
 8002eb0:	605a      	str	r2, [r3, #4]
    Dev->State = TouchButtonUnpressed;
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	731a      	strb	r2, [r3, #12]
    Dev->IO_Driver.init();
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	691b      	ldr	r3, [r3, #16]
 8002ebc:	4798      	blx	r3
}
 8002ebe:	bf00      	nop
 8002ec0:	3710      	adds	r7, #16
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bdb0      	pop	{r4, r5, r7, pc}

08002ec6 <TouchButtonRead>:
    Dev->ModKeyFunction = ModKey;
    Dev->MouseFunction = MouseFunction;
    Dev->WheelFunction = WheelFunction;
}

TouchButton_Status_t TouchButtonRead(TouchButton_Handle_t *Dev){
 8002ec6:	b580      	push	{r7, lr}
 8002ec8:	b084      	sub	sp, #16
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	6078      	str	r0, [r7, #4]
	TouchButtonState_t Previous_State = Dev->State;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	7b1b      	ldrb	r3, [r3, #12]
 8002ed2:	73fb      	strb	r3, [r7, #15]
    Dev->State = Dev->IO_Driver.read(Dev->TopLeftBound, Dev->BottomRightBound);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	699b      	ldr	r3, [r3, #24]
 8002ed8:	6879      	ldr	r1, [r7, #4]
 8002eda:	687a      	ldr	r2, [r7, #4]
 8002edc:	6849      	ldr	r1, [r1, #4]
 8002ede:	6810      	ldr	r0, [r2, #0]
 8002ee0:	4798      	blx	r3
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	461a      	mov	r2, r3
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	731a      	strb	r2, [r3, #12]
    if(Previous_State != Dev->State){
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	7b1b      	ldrb	r3, [r3, #12]
 8002eee:	7bfa      	ldrb	r2, [r7, #15]
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d001      	beq.n	8002ef8 <TouchButtonRead+0x32>
    	return TouchButtonChanged;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	e000      	b.n	8002efa <TouchButtonRead+0x34>
    } else {
    	return TouchButtonUnchanged;
 8002ef8:	2301      	movs	r3, #1
    }
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3710      	adds	r7, #16
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
	...

08002f04 <TouchButton_IO_Init>:
	TouchButton_Initialized
}TouchButton_Init_Status_t;

static TouchButton_Init_Status_t TouchButton_Init = TouchButton_Uninitialized;

static void TouchButton_IO_Init(void){;
 8002f04:	b590      	push	{r4, r7, lr}
 8002f06:	b083      	sub	sp, #12
 8002f08:	af02      	add	r7, sp, #8
	if(TouchButton_Init == TouchButton_Uninitialized){
 8002f0a:	4b0b      	ldr	r3, [pc, #44]	; (8002f38 <TouchButton_IO_Init+0x34>)
 8002f0c:	781b      	ldrb	r3, [r3, #0]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d10e      	bne.n	8002f30 <TouchButton_IO_Init+0x2c>
		FT6206_Init(&TouchScreen, FT6202_Drv);
 8002f12:	4b0a      	ldr	r3, [pc, #40]	; (8002f3c <TouchButton_IO_Init+0x38>)
 8002f14:	466c      	mov	r4, sp
 8002f16:	f103 020c 	add.w	r2, r3, #12
 8002f1a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002f1e:	e884 0003 	stmia.w	r4, {r0, r1}
 8002f22:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f24:	4806      	ldr	r0, [pc, #24]	; (8002f40 <TouchButton_IO_Init+0x3c>)
 8002f26:	f7fd fb2d 	bl	8000584 <FT6206_Init>
		TouchButton_Init = TouchButton_Initialized;
 8002f2a:	4b03      	ldr	r3, [pc, #12]	; (8002f38 <TouchButton_IO_Init+0x34>)
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	701a      	strb	r2, [r3, #0]
	}
}
 8002f30:	bf00      	nop
 8002f32:	3704      	adds	r7, #4
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd90      	pop	{r4, r7, pc}
 8002f38:	20001035 	.word	0x20001035
 8002f3c:	20000000 	.word	0x20000000
 8002f40:	20001038 	.word	0x20001038

08002f44 <TouchButton_IO_DeInit>:

static void TouchButton_IO_DeInit(void){
 8002f44:	b580      	push	{r7, lr}
 8002f46:	af00      	add	r7, sp, #0
	if(TouchButton_Init == TouchButton_Initialized){
 8002f48:	4b05      	ldr	r3, [pc, #20]	; (8002f60 <TouchButton_IO_DeInit+0x1c>)
 8002f4a:	781b      	ldrb	r3, [r3, #0]
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d105      	bne.n	8002f5c <TouchButton_IO_DeInit+0x18>
		FT6206_DeInit(&TouchScreen);
 8002f50:	4804      	ldr	r0, [pc, #16]	; (8002f64 <TouchButton_IO_DeInit+0x20>)
 8002f52:	f7fd fb45 	bl	80005e0 <FT6206_DeInit>
		TouchButton_Init = TouchButton_Uninitialized;
 8002f56:	4b02      	ldr	r3, [pc, #8]	; (8002f60 <TouchButton_IO_DeInit+0x1c>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	701a      	strb	r2, [r3, #0]
	}
}
 8002f5c:	bf00      	nop
 8002f5e:	bd80      	pop	{r7, pc}
 8002f60:	20001035 	.word	0x20001035
 8002f64:	20001038 	.word	0x20001038

08002f68 <TouchButton_IO_Read>:

static TouchButtonState_t TouchButton_IO_Read(TouchButtonCoordinate_t TopLeftBound, TouchButtonCoordinate_t BottomRightBound){
 8002f68:	b480      	push	{r7}
 8002f6a:	b083      	sub	sp, #12
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
 8002f70:	6039      	str	r1, [r7, #0]
	if(TouchScreen.P1_XPos >= TopLeftBound.X_Position && TouchScreen.P1_XPos <= BottomRightBound.X_Position && TouchScreen.P1_YPos >= TopLeftBound.Y_Position && TouchScreen.P1_YPos <= BottomRightBound.Y_Position){
 8002f72:	4b14      	ldr	r3, [pc, #80]	; (8002fc4 <TouchButton_IO_Read+0x5c>)
 8002f74:	881b      	ldrh	r3, [r3, #0]
 8002f76:	b29a      	uxth	r2, r3
 8002f78:	88bb      	ldrh	r3, [r7, #4]
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d31a      	bcc.n	8002fb4 <TouchButton_IO_Read+0x4c>
 8002f7e:	4b11      	ldr	r3, [pc, #68]	; (8002fc4 <TouchButton_IO_Read+0x5c>)
 8002f80:	881b      	ldrh	r3, [r3, #0]
 8002f82:	b29a      	uxth	r2, r3
 8002f84:	883b      	ldrh	r3, [r7, #0]
 8002f86:	429a      	cmp	r2, r3
 8002f88:	d814      	bhi.n	8002fb4 <TouchButton_IO_Read+0x4c>
 8002f8a:	4b0e      	ldr	r3, [pc, #56]	; (8002fc4 <TouchButton_IO_Read+0x5c>)
 8002f8c:	885b      	ldrh	r3, [r3, #2]
 8002f8e:	b29a      	uxth	r2, r3
 8002f90:	88fb      	ldrh	r3, [r7, #6]
 8002f92:	429a      	cmp	r2, r3
 8002f94:	d30e      	bcc.n	8002fb4 <TouchButton_IO_Read+0x4c>
 8002f96:	4b0b      	ldr	r3, [pc, #44]	; (8002fc4 <TouchButton_IO_Read+0x5c>)
 8002f98:	885b      	ldrh	r3, [r3, #2]
 8002f9a:	b29a      	uxth	r2, r3
 8002f9c:	887b      	ldrh	r3, [r7, #2]
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d808      	bhi.n	8002fb4 <TouchButton_IO_Read+0x4c>
		if(TouchScreen.P1_EventFlag == Contact){
 8002fa2:	4b08      	ldr	r3, [pc, #32]	; (8002fc4 <TouchButton_IO_Read+0x5c>)
 8002fa4:	791b      	ldrb	r3, [r3, #4]
 8002fa6:	b2db      	uxtb	r3, r3
 8002fa8:	2b02      	cmp	r3, #2
 8002faa:	d101      	bne.n	8002fb0 <TouchButton_IO_Read+0x48>
	        return TouchButtonPressed;
 8002fac:	2300      	movs	r3, #0
 8002fae:	e002      	b.n	8002fb6 <TouchButton_IO_Read+0x4e>
		} else {
			return TouchButtonUnpressed;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e000      	b.n	8002fb6 <TouchButton_IO_Read+0x4e>
		}
	} else {
		return TouchButtonUnpressed;
 8002fb4:	2301      	movs	r3, #1
	}
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	370c      	adds	r7, #12
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr
 8002fc2:	bf00      	nop
 8002fc4:	20001038 	.word	0x20001038

08002fc8 <TouchScreenIRQCallback>:
		.read = TouchButton_IO_Read,
		.write = '\0',
		.ioctl = '\0'
};

void TouchScreenIRQCallback(){
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	af00      	add	r7, sp, #0
	FT6206_ReadScreen(&TouchScreen);
 8002fcc:	4802      	ldr	r0, [pc, #8]	; (8002fd8 <TouchScreenIRQCallback+0x10>)
 8002fce:	f7fd fb21 	bl	8000614 <FT6206_ReadScreen>
}
 8002fd2:	bf00      	nop
 8002fd4:	bd80      	pop	{r7, pc}
 8002fd6:	bf00      	nop
 8002fd8:	20001038 	.word	0x20001038

08002fdc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002fdc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003014 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002fe0:	480d      	ldr	r0, [pc, #52]	; (8003018 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002fe2:	490e      	ldr	r1, [pc, #56]	; (800301c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002fe4:	4a0e      	ldr	r2, [pc, #56]	; (8003020 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002fe6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002fe8:	e002      	b.n	8002ff0 <LoopCopyDataInit>

08002fea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002fea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002fec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002fee:	3304      	adds	r3, #4

08002ff0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ff0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ff2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ff4:	d3f9      	bcc.n	8002fea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ff6:	4a0b      	ldr	r2, [pc, #44]	; (8003024 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002ff8:	4c0b      	ldr	r4, [pc, #44]	; (8003028 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002ffa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ffc:	e001      	b.n	8003002 <LoopFillZerobss>

08002ffe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ffe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003000:	3204      	adds	r2, #4

08003002 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003002:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003004:	d3fb      	bcc.n	8002ffe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003006:	f7ff fa5f 	bl	80024c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800300a:	f00a fa6f 	bl	800d4ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800300e:	f7fe fcbb 	bl	8001988 <main>
  bx  lr    
 8003012:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003014:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003018:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800301c:	20000194 	.word	0x20000194
  ldr r2, =_sidata
 8003020:	08030748 	.word	0x08030748
  ldr r2, =_sbss
 8003024:	20000194 	.word	0x20000194
  ldr r4, =_ebss
 8003028:	20001a70 	.word	0x20001a70

0800302c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800302c:	e7fe      	b.n	800302c <ADC_IRQHandler>
	...

08003030 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003034:	4b0e      	ldr	r3, [pc, #56]	; (8003070 <HAL_Init+0x40>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a0d      	ldr	r2, [pc, #52]	; (8003070 <HAL_Init+0x40>)
 800303a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800303e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003040:	4b0b      	ldr	r3, [pc, #44]	; (8003070 <HAL_Init+0x40>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a0a      	ldr	r2, [pc, #40]	; (8003070 <HAL_Init+0x40>)
 8003046:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800304a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800304c:	4b08      	ldr	r3, [pc, #32]	; (8003070 <HAL_Init+0x40>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a07      	ldr	r2, [pc, #28]	; (8003070 <HAL_Init+0x40>)
 8003052:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003056:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003058:	2003      	movs	r0, #3
 800305a:	f000 fded 	bl	8003c38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800305e:	2001      	movs	r0, #1
 8003060:	f000 f808 	bl	8003074 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003064:	f7ff f8ee 	bl	8002244 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003068:	2300      	movs	r3, #0
}
 800306a:	4618      	mov	r0, r3
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop
 8003070:	40023c00 	.word	0x40023c00

08003074 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b082      	sub	sp, #8
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800307c:	4b12      	ldr	r3, [pc, #72]	; (80030c8 <HAL_InitTick+0x54>)
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	4b12      	ldr	r3, [pc, #72]	; (80030cc <HAL_InitTick+0x58>)
 8003082:	781b      	ldrb	r3, [r3, #0]
 8003084:	4619      	mov	r1, r3
 8003086:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800308a:	fbb3 f3f1 	udiv	r3, r3, r1
 800308e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003092:	4618      	mov	r0, r3
 8003094:	f000 fe13 	bl	8003cbe <HAL_SYSTICK_Config>
 8003098:	4603      	mov	r3, r0
 800309a:	2b00      	cmp	r3, #0
 800309c:	d001      	beq.n	80030a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e00e      	b.n	80030c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2b0f      	cmp	r3, #15
 80030a6:	d80a      	bhi.n	80030be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80030a8:	2200      	movs	r2, #0
 80030aa:	6879      	ldr	r1, [r7, #4]
 80030ac:	f04f 30ff 	mov.w	r0, #4294967295
 80030b0:	f000 fdcd 	bl	8003c4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80030b4:	4a06      	ldr	r2, [pc, #24]	; (80030d0 <HAL_InitTick+0x5c>)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80030ba:	2300      	movs	r3, #0
 80030bc:	e000      	b.n	80030c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	3708      	adds	r7, #8
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}
 80030c8:	20000028 	.word	0x20000028
 80030cc:	2000004c 	.word	0x2000004c
 80030d0:	20000048 	.word	0x20000048

080030d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80030d4:	b480      	push	{r7}
 80030d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80030d8:	4b06      	ldr	r3, [pc, #24]	; (80030f4 <HAL_IncTick+0x20>)
 80030da:	781b      	ldrb	r3, [r3, #0]
 80030dc:	461a      	mov	r2, r3
 80030de:	4b06      	ldr	r3, [pc, #24]	; (80030f8 <HAL_IncTick+0x24>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4413      	add	r3, r2
 80030e4:	4a04      	ldr	r2, [pc, #16]	; (80030f8 <HAL_IncTick+0x24>)
 80030e6:	6013      	str	r3, [r2, #0]
}
 80030e8:	bf00      	nop
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr
 80030f2:	bf00      	nop
 80030f4:	2000004c 	.word	0x2000004c
 80030f8:	20001054 	.word	0x20001054

080030fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80030fc:	b480      	push	{r7}
 80030fe:	af00      	add	r7, sp, #0
  return uwTick;
 8003100:	4b03      	ldr	r3, [pc, #12]	; (8003110 <HAL_GetTick+0x14>)
 8003102:	681b      	ldr	r3, [r3, #0]
}
 8003104:	4618      	mov	r0, r3
 8003106:	46bd      	mov	sp, r7
 8003108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310c:	4770      	bx	lr
 800310e:	bf00      	nop
 8003110:	20001054 	.word	0x20001054

08003114 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b084      	sub	sp, #16
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800311c:	f7ff ffee 	bl	80030fc <HAL_GetTick>
 8003120:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	f1b3 3fff 	cmp.w	r3, #4294967295
 800312c:	d005      	beq.n	800313a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800312e:	4b0a      	ldr	r3, [pc, #40]	; (8003158 <HAL_Delay+0x44>)
 8003130:	781b      	ldrb	r3, [r3, #0]
 8003132:	461a      	mov	r2, r3
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	4413      	add	r3, r2
 8003138:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800313a:	bf00      	nop
 800313c:	f7ff ffde 	bl	80030fc <HAL_GetTick>
 8003140:	4602      	mov	r2, r0
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	1ad3      	subs	r3, r2, r3
 8003146:	68fa      	ldr	r2, [r7, #12]
 8003148:	429a      	cmp	r2, r3
 800314a:	d8f7      	bhi.n	800313c <HAL_Delay+0x28>
  {
  }
}
 800314c:	bf00      	nop
 800314e:	bf00      	nop
 8003150:	3710      	adds	r7, #16
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}
 8003156:	bf00      	nop
 8003158:	2000004c 	.word	0x2000004c

0800315c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b084      	sub	sp, #16
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003164:	2300      	movs	r3, #0
 8003166:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d101      	bne.n	8003172 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e033      	b.n	80031da <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003176:	2b00      	cmp	r3, #0
 8003178:	d109      	bne.n	800318e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f7fe f85a 	bl	8001234 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2200      	movs	r2, #0
 8003184:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2200      	movs	r2, #0
 800318a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003192:	f003 0310 	and.w	r3, r3, #16
 8003196:	2b00      	cmp	r3, #0
 8003198:	d118      	bne.n	80031cc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80031a2:	f023 0302 	bic.w	r3, r3, #2
 80031a6:	f043 0202 	orr.w	r2, r3, #2
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	f000 fab2 	bl	8003718 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2200      	movs	r2, #0
 80031b8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031be:	f023 0303 	bic.w	r3, r3, #3
 80031c2:	f043 0201 	orr.w	r2, r3, #1
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	641a      	str	r2, [r3, #64]	; 0x40
 80031ca:	e001      	b.n	80031d0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2200      	movs	r2, #0
 80031d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80031d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3710      	adds	r7, #16
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}
	...

080031e4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b086      	sub	sp, #24
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	60f8      	str	r0, [r7, #12]
 80031ec:	60b9      	str	r1, [r7, #8]
 80031ee:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80031f0:	2300      	movs	r3, #0
 80031f2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d101      	bne.n	8003202 <HAL_ADC_Start_DMA+0x1e>
 80031fe:	2302      	movs	r3, #2
 8003200:	e0ce      	b.n	80033a0 <HAL_ADC_Start_DMA+0x1bc>
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2201      	movs	r2, #1
 8003206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	f003 0301 	and.w	r3, r3, #1
 8003214:	2b01      	cmp	r3, #1
 8003216:	d018      	beq.n	800324a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	689a      	ldr	r2, [r3, #8]
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f042 0201 	orr.w	r2, r2, #1
 8003226:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003228:	4b5f      	ldr	r3, [pc, #380]	; (80033a8 <HAL_ADC_Start_DMA+0x1c4>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a5f      	ldr	r2, [pc, #380]	; (80033ac <HAL_ADC_Start_DMA+0x1c8>)
 800322e:	fba2 2303 	umull	r2, r3, r2, r3
 8003232:	0c9a      	lsrs	r2, r3, #18
 8003234:	4613      	mov	r3, r2
 8003236:	005b      	lsls	r3, r3, #1
 8003238:	4413      	add	r3, r2
 800323a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800323c:	e002      	b.n	8003244 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	3b01      	subs	r3, #1
 8003242:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d1f9      	bne.n	800323e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003254:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003258:	d107      	bne.n	800326a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	689a      	ldr	r2, [r3, #8]
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003268:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	f003 0301 	and.w	r3, r3, #1
 8003274:	2b01      	cmp	r3, #1
 8003276:	f040 8086 	bne.w	8003386 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003282:	f023 0301 	bic.w	r3, r3, #1
 8003286:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003298:	2b00      	cmp	r3, #0
 800329a:	d007      	beq.n	80032ac <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80032a4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032b8:	d106      	bne.n	80032c8 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032be:	f023 0206 	bic.w	r2, r3, #6
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	645a      	str	r2, [r3, #68]	; 0x44
 80032c6:	e002      	b.n	80032ce <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2200      	movs	r2, #0
 80032cc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2200      	movs	r2, #0
 80032d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80032d6:	4b36      	ldr	r3, [pc, #216]	; (80033b0 <HAL_ADC_Start_DMA+0x1cc>)
 80032d8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032de:	4a35      	ldr	r2, [pc, #212]	; (80033b4 <HAL_ADC_Start_DMA+0x1d0>)
 80032e0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032e6:	4a34      	ldr	r2, [pc, #208]	; (80033b8 <HAL_ADC_Start_DMA+0x1d4>)
 80032e8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ee:	4a33      	ldr	r2, [pc, #204]	; (80033bc <HAL_ADC_Start_DMA+0x1d8>)
 80032f0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80032fa:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	685a      	ldr	r2, [r3, #4]
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800330a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	689a      	ldr	r2, [r3, #8]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800331a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	334c      	adds	r3, #76	; 0x4c
 8003326:	4619      	mov	r1, r3
 8003328:	68ba      	ldr	r2, [r7, #8]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	f000 fd90 	bl	8003e50 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	f003 031f 	and.w	r3, r3, #31
 8003338:	2b00      	cmp	r3, #0
 800333a:	d10f      	bne.n	800335c <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003346:	2b00      	cmp	r3, #0
 8003348:	d129      	bne.n	800339e <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	689a      	ldr	r2, [r3, #8]
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003358:	609a      	str	r2, [r3, #8]
 800335a:	e020      	b.n	800339e <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a17      	ldr	r2, [pc, #92]	; (80033c0 <HAL_ADC_Start_DMA+0x1dc>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d11b      	bne.n	800339e <HAL_ADC_Start_DMA+0x1ba>
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003370:	2b00      	cmp	r3, #0
 8003372:	d114      	bne.n	800339e <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	689a      	ldr	r2, [r3, #8]
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003382:	609a      	str	r2, [r3, #8]
 8003384:	e00b      	b.n	800339e <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338a:	f043 0210 	orr.w	r2, r3, #16
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003396:	f043 0201 	orr.w	r2, r3, #1
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800339e:	2300      	movs	r3, #0
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	3718      	adds	r7, #24
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}
 80033a8:	20000028 	.word	0x20000028
 80033ac:	431bde83 	.word	0x431bde83
 80033b0:	40012300 	.word	0x40012300
 80033b4:	08003911 	.word	0x08003911
 80033b8:	080039cb 	.word	0x080039cb
 80033bc:	080039e7 	.word	0x080039e7
 80033c0:	40012000 	.word	0x40012000

080033c4 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b084      	sub	sp, #16
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033cc:	2300      	movs	r3, #0
 80033ce:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d101      	bne.n	80033de <HAL_ADC_Stop_DMA+0x1a>
 80033da:	2302      	movs	r3, #2
 80033dc:	e048      	b.n	8003470 <HAL_ADC_Stop_DMA+0xac>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2201      	movs	r2, #1
 80033e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	689a      	ldr	r2, [r3, #8]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f022 0201 	bic.w	r2, r2, #1
 80033f4:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	f003 0301 	and.w	r3, r3, #1
 8003400:	2b00      	cmp	r3, #0
 8003402:	d130      	bne.n	8003466 <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	689a      	ldr	r2, [r3, #8]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003412:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003418:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800341c:	b2db      	uxtb	r3, r3
 800341e:	2b02      	cmp	r3, #2
 8003420:	d10f      	bne.n	8003442 <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003426:	4618      	mov	r0, r3
 8003428:	f000 fd6a 	bl	8003f00 <HAL_DMA_Abort>
 800342c:	4603      	mov	r3, r0
 800342e:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8003430:	7bfb      	ldrb	r3, [r7, #15]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d005      	beq.n	8003442 <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	685a      	ldr	r2, [r3, #4]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8003450:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003456:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800345a:	f023 0301 	bic.w	r3, r3, #1
 800345e:	f043 0201 	orr.w	r2, r3, #1
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2200      	movs	r2, #0
 800346a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800346e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003470:	4618      	mov	r0, r3
 8003472:	3710      	adds	r7, #16
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}

08003478 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003478:	b480      	push	{r7}
 800347a:	b083      	sub	sp, #12
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8003480:	bf00      	nop
 8003482:	370c      	adds	r7, #12
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr

0800348c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800348c:	b480      	push	{r7}
 800348e:	b083      	sub	sp, #12
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003494:	bf00      	nop
 8003496:	370c      	adds	r7, #12
 8003498:	46bd      	mov	sp, r7
 800349a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349e:	4770      	bx	lr

080034a0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b083      	sub	sp, #12
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80034a8:	bf00      	nop
 80034aa:	370c      	adds	r7, #12
 80034ac:	46bd      	mov	sp, r7
 80034ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b2:	4770      	bx	lr

080034b4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b085      	sub	sp, #20
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
 80034bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80034be:	2300      	movs	r3, #0
 80034c0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d101      	bne.n	80034d0 <HAL_ADC_ConfigChannel+0x1c>
 80034cc:	2302      	movs	r3, #2
 80034ce:	e113      	b.n	80036f8 <HAL_ADC_ConfigChannel+0x244>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2201      	movs	r2, #1
 80034d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	2b09      	cmp	r3, #9
 80034de:	d925      	bls.n	800352c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	68d9      	ldr	r1, [r3, #12]
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	b29b      	uxth	r3, r3
 80034ec:	461a      	mov	r2, r3
 80034ee:	4613      	mov	r3, r2
 80034f0:	005b      	lsls	r3, r3, #1
 80034f2:	4413      	add	r3, r2
 80034f4:	3b1e      	subs	r3, #30
 80034f6:	2207      	movs	r2, #7
 80034f8:	fa02 f303 	lsl.w	r3, r2, r3
 80034fc:	43da      	mvns	r2, r3
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	400a      	ands	r2, r1
 8003504:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	68d9      	ldr	r1, [r3, #12]
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	689a      	ldr	r2, [r3, #8]
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	b29b      	uxth	r3, r3
 8003516:	4618      	mov	r0, r3
 8003518:	4603      	mov	r3, r0
 800351a:	005b      	lsls	r3, r3, #1
 800351c:	4403      	add	r3, r0
 800351e:	3b1e      	subs	r3, #30
 8003520:	409a      	lsls	r2, r3
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	430a      	orrs	r2, r1
 8003528:	60da      	str	r2, [r3, #12]
 800352a:	e022      	b.n	8003572 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	6919      	ldr	r1, [r3, #16]
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	b29b      	uxth	r3, r3
 8003538:	461a      	mov	r2, r3
 800353a:	4613      	mov	r3, r2
 800353c:	005b      	lsls	r3, r3, #1
 800353e:	4413      	add	r3, r2
 8003540:	2207      	movs	r2, #7
 8003542:	fa02 f303 	lsl.w	r3, r2, r3
 8003546:	43da      	mvns	r2, r3
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	400a      	ands	r2, r1
 800354e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	6919      	ldr	r1, [r3, #16]
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	689a      	ldr	r2, [r3, #8]
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	b29b      	uxth	r3, r3
 8003560:	4618      	mov	r0, r3
 8003562:	4603      	mov	r3, r0
 8003564:	005b      	lsls	r3, r3, #1
 8003566:	4403      	add	r3, r0
 8003568:	409a      	lsls	r2, r3
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	430a      	orrs	r2, r1
 8003570:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	2b06      	cmp	r3, #6
 8003578:	d824      	bhi.n	80035c4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	685a      	ldr	r2, [r3, #4]
 8003584:	4613      	mov	r3, r2
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	4413      	add	r3, r2
 800358a:	3b05      	subs	r3, #5
 800358c:	221f      	movs	r2, #31
 800358e:	fa02 f303 	lsl.w	r3, r2, r3
 8003592:	43da      	mvns	r2, r3
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	400a      	ands	r2, r1
 800359a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	b29b      	uxth	r3, r3
 80035a8:	4618      	mov	r0, r3
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	685a      	ldr	r2, [r3, #4]
 80035ae:	4613      	mov	r3, r2
 80035b0:	009b      	lsls	r3, r3, #2
 80035b2:	4413      	add	r3, r2
 80035b4:	3b05      	subs	r3, #5
 80035b6:	fa00 f203 	lsl.w	r2, r0, r3
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	430a      	orrs	r2, r1
 80035c0:	635a      	str	r2, [r3, #52]	; 0x34
 80035c2:	e04c      	b.n	800365e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	2b0c      	cmp	r3, #12
 80035ca:	d824      	bhi.n	8003616 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	685a      	ldr	r2, [r3, #4]
 80035d6:	4613      	mov	r3, r2
 80035d8:	009b      	lsls	r3, r3, #2
 80035da:	4413      	add	r3, r2
 80035dc:	3b23      	subs	r3, #35	; 0x23
 80035de:	221f      	movs	r2, #31
 80035e0:	fa02 f303 	lsl.w	r3, r2, r3
 80035e4:	43da      	mvns	r2, r3
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	400a      	ands	r2, r1
 80035ec:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	b29b      	uxth	r3, r3
 80035fa:	4618      	mov	r0, r3
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	685a      	ldr	r2, [r3, #4]
 8003600:	4613      	mov	r3, r2
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	4413      	add	r3, r2
 8003606:	3b23      	subs	r3, #35	; 0x23
 8003608:	fa00 f203 	lsl.w	r2, r0, r3
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	430a      	orrs	r2, r1
 8003612:	631a      	str	r2, [r3, #48]	; 0x30
 8003614:	e023      	b.n	800365e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	685a      	ldr	r2, [r3, #4]
 8003620:	4613      	mov	r3, r2
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	4413      	add	r3, r2
 8003626:	3b41      	subs	r3, #65	; 0x41
 8003628:	221f      	movs	r2, #31
 800362a:	fa02 f303 	lsl.w	r3, r2, r3
 800362e:	43da      	mvns	r2, r3
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	400a      	ands	r2, r1
 8003636:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	b29b      	uxth	r3, r3
 8003644:	4618      	mov	r0, r3
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	685a      	ldr	r2, [r3, #4]
 800364a:	4613      	mov	r3, r2
 800364c:	009b      	lsls	r3, r3, #2
 800364e:	4413      	add	r3, r2
 8003650:	3b41      	subs	r3, #65	; 0x41
 8003652:	fa00 f203 	lsl.w	r2, r0, r3
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	430a      	orrs	r2, r1
 800365c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800365e:	4b29      	ldr	r3, [pc, #164]	; (8003704 <HAL_ADC_ConfigChannel+0x250>)
 8003660:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a28      	ldr	r2, [pc, #160]	; (8003708 <HAL_ADC_ConfigChannel+0x254>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d10f      	bne.n	800368c <HAL_ADC_ConfigChannel+0x1d8>
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	2b12      	cmp	r3, #18
 8003672:	d10b      	bne.n	800368c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a1d      	ldr	r2, [pc, #116]	; (8003708 <HAL_ADC_ConfigChannel+0x254>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d12b      	bne.n	80036ee <HAL_ADC_ConfigChannel+0x23a>
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a1c      	ldr	r2, [pc, #112]	; (800370c <HAL_ADC_ConfigChannel+0x258>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d003      	beq.n	80036a8 <HAL_ADC_ConfigChannel+0x1f4>
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	2b11      	cmp	r3, #17
 80036a6:	d122      	bne.n	80036ee <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a11      	ldr	r2, [pc, #68]	; (800370c <HAL_ADC_ConfigChannel+0x258>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d111      	bne.n	80036ee <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80036ca:	4b11      	ldr	r3, [pc, #68]	; (8003710 <HAL_ADC_ConfigChannel+0x25c>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a11      	ldr	r2, [pc, #68]	; (8003714 <HAL_ADC_ConfigChannel+0x260>)
 80036d0:	fba2 2303 	umull	r2, r3, r2, r3
 80036d4:	0c9a      	lsrs	r2, r3, #18
 80036d6:	4613      	mov	r3, r2
 80036d8:	009b      	lsls	r3, r3, #2
 80036da:	4413      	add	r3, r2
 80036dc:	005b      	lsls	r3, r3, #1
 80036de:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80036e0:	e002      	b.n	80036e8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	3b01      	subs	r3, #1
 80036e6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d1f9      	bne.n	80036e2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2200      	movs	r2, #0
 80036f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80036f6:	2300      	movs	r3, #0
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	3714      	adds	r7, #20
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr
 8003704:	40012300 	.word	0x40012300
 8003708:	40012000 	.word	0x40012000
 800370c:	10000012 	.word	0x10000012
 8003710:	20000028 	.word	0x20000028
 8003714:	431bde83 	.word	0x431bde83

08003718 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003718:	b480      	push	{r7}
 800371a:	b085      	sub	sp, #20
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003720:	4b79      	ldr	r3, [pc, #484]	; (8003908 <ADC_Init+0x1f0>)
 8003722:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	685a      	ldr	r2, [r3, #4]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	431a      	orrs	r2, r3
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	685a      	ldr	r2, [r3, #4]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800374c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	6859      	ldr	r1, [r3, #4]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	691b      	ldr	r3, [r3, #16]
 8003758:	021a      	lsls	r2, r3, #8
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	430a      	orrs	r2, r1
 8003760:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	685a      	ldr	r2, [r3, #4]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003770:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	6859      	ldr	r1, [r3, #4]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	689a      	ldr	r2, [r3, #8]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	430a      	orrs	r2, r1
 8003782:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	689a      	ldr	r2, [r3, #8]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003792:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	6899      	ldr	r1, [r3, #8]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	68da      	ldr	r2, [r3, #12]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	430a      	orrs	r2, r1
 80037a4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037aa:	4a58      	ldr	r2, [pc, #352]	; (800390c <ADC_Init+0x1f4>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d022      	beq.n	80037f6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	689a      	ldr	r2, [r3, #8]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80037be:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	6899      	ldr	r1, [r3, #8]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	430a      	orrs	r2, r1
 80037d0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	689a      	ldr	r2, [r3, #8]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80037e0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	6899      	ldr	r1, [r3, #8]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	430a      	orrs	r2, r1
 80037f2:	609a      	str	r2, [r3, #8]
 80037f4:	e00f      	b.n	8003816 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	689a      	ldr	r2, [r3, #8]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003804:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	689a      	ldr	r2, [r3, #8]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003814:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	689a      	ldr	r2, [r3, #8]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f022 0202 	bic.w	r2, r2, #2
 8003824:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	6899      	ldr	r1, [r3, #8]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	7e1b      	ldrb	r3, [r3, #24]
 8003830:	005a      	lsls	r2, r3, #1
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	430a      	orrs	r2, r1
 8003838:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d01b      	beq.n	800387c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	685a      	ldr	r2, [r3, #4]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003852:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	685a      	ldr	r2, [r3, #4]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003862:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	6859      	ldr	r1, [r3, #4]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800386e:	3b01      	subs	r3, #1
 8003870:	035a      	lsls	r2, r3, #13
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	430a      	orrs	r2, r1
 8003878:	605a      	str	r2, [r3, #4]
 800387a:	e007      	b.n	800388c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	685a      	ldr	r2, [r3, #4]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800388a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800389a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	69db      	ldr	r3, [r3, #28]
 80038a6:	3b01      	subs	r3, #1
 80038a8:	051a      	lsls	r2, r3, #20
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	430a      	orrs	r2, r1
 80038b0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	689a      	ldr	r2, [r3, #8]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80038c0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	6899      	ldr	r1, [r3, #8]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80038ce:	025a      	lsls	r2, r3, #9
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	430a      	orrs	r2, r1
 80038d6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	689a      	ldr	r2, [r3, #8]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038e6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	6899      	ldr	r1, [r3, #8]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	695b      	ldr	r3, [r3, #20]
 80038f2:	029a      	lsls	r2, r3, #10
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	430a      	orrs	r2, r1
 80038fa:	609a      	str	r2, [r3, #8]
}
 80038fc:	bf00      	nop
 80038fe:	3714      	adds	r7, #20
 8003900:	46bd      	mov	sp, r7
 8003902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003906:	4770      	bx	lr
 8003908:	40012300 	.word	0x40012300
 800390c:	0f000001 	.word	0x0f000001

08003910 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b084      	sub	sp, #16
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800391c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003922:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003926:	2b00      	cmp	r3, #0
 8003928:	d13c      	bne.n	80039a4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003940:	2b00      	cmp	r3, #0
 8003942:	d12b      	bne.n	800399c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003948:	2b00      	cmp	r3, #0
 800394a:	d127      	bne.n	800399c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003952:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003956:	2b00      	cmp	r3, #0
 8003958:	d006      	beq.n	8003968 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003964:	2b00      	cmp	r3, #0
 8003966:	d119      	bne.n	800399c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	685a      	ldr	r2, [r3, #4]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f022 0220 	bic.w	r2, r2, #32
 8003976:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003988:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800398c:	2b00      	cmp	r3, #0
 800398e:	d105      	bne.n	800399c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003994:	f043 0201 	orr.w	r2, r3, #1
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800399c:	68f8      	ldr	r0, [r7, #12]
 800399e:	f7ff fd6b 	bl	8003478 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80039a2:	e00e      	b.n	80039c2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a8:	f003 0310 	and.w	r3, r3, #16
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d003      	beq.n	80039b8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80039b0:	68f8      	ldr	r0, [r7, #12]
 80039b2:	f7ff fd75 	bl	80034a0 <HAL_ADC_ErrorCallback>
}
 80039b6:	e004      	b.n	80039c2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	4798      	blx	r3
}
 80039c2:	bf00      	nop
 80039c4:	3710      	adds	r7, #16
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}

080039ca <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80039ca:	b580      	push	{r7, lr}
 80039cc:	b084      	sub	sp, #16
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039d6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80039d8:	68f8      	ldr	r0, [r7, #12]
 80039da:	f7ff fd57 	bl	800348c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80039de:	bf00      	nop
 80039e0:	3710      	adds	r7, #16
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}

080039e6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80039e6:	b580      	push	{r7, lr}
 80039e8:	b084      	sub	sp, #16
 80039ea:	af00      	add	r7, sp, #0
 80039ec:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039f2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2240      	movs	r2, #64	; 0x40
 80039f8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039fe:	f043 0204 	orr.w	r2, r3, #4
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003a06:	68f8      	ldr	r0, [r7, #12]
 8003a08:	f7ff fd4a 	bl	80034a0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003a0c:	bf00      	nop
 8003a0e:	3710      	adds	r7, #16
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}

08003a14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b085      	sub	sp, #20
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	f003 0307 	and.w	r3, r3, #7
 8003a22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a24:	4b0c      	ldr	r3, [pc, #48]	; (8003a58 <__NVIC_SetPriorityGrouping+0x44>)
 8003a26:	68db      	ldr	r3, [r3, #12]
 8003a28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a2a:	68ba      	ldr	r2, [r7, #8]
 8003a2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003a30:	4013      	ands	r3, r2
 8003a32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003a3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003a40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a46:	4a04      	ldr	r2, [pc, #16]	; (8003a58 <__NVIC_SetPriorityGrouping+0x44>)
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	60d3      	str	r3, [r2, #12]
}
 8003a4c:	bf00      	nop
 8003a4e:	3714      	adds	r7, #20
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr
 8003a58:	e000ed00 	.word	0xe000ed00

08003a5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a60:	4b04      	ldr	r3, [pc, #16]	; (8003a74 <__NVIC_GetPriorityGrouping+0x18>)
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	0a1b      	lsrs	r3, r3, #8
 8003a66:	f003 0307 	and.w	r3, r3, #7
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a72:	4770      	bx	lr
 8003a74:	e000ed00 	.word	0xe000ed00

08003a78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b083      	sub	sp, #12
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	4603      	mov	r3, r0
 8003a80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	db0b      	blt.n	8003aa2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a8a:	79fb      	ldrb	r3, [r7, #7]
 8003a8c:	f003 021f 	and.w	r2, r3, #31
 8003a90:	4907      	ldr	r1, [pc, #28]	; (8003ab0 <__NVIC_EnableIRQ+0x38>)
 8003a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a96:	095b      	lsrs	r3, r3, #5
 8003a98:	2001      	movs	r0, #1
 8003a9a:	fa00 f202 	lsl.w	r2, r0, r2
 8003a9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003aa2:	bf00      	nop
 8003aa4:	370c      	adds	r7, #12
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aac:	4770      	bx	lr
 8003aae:	bf00      	nop
 8003ab0:	e000e100 	.word	0xe000e100

08003ab4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b083      	sub	sp, #12
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	4603      	mov	r3, r0
 8003abc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	db12      	blt.n	8003aec <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ac6:	79fb      	ldrb	r3, [r7, #7]
 8003ac8:	f003 021f 	and.w	r2, r3, #31
 8003acc:	490a      	ldr	r1, [pc, #40]	; (8003af8 <__NVIC_DisableIRQ+0x44>)
 8003ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ad2:	095b      	lsrs	r3, r3, #5
 8003ad4:	2001      	movs	r0, #1
 8003ad6:	fa00 f202 	lsl.w	r2, r0, r2
 8003ada:	3320      	adds	r3, #32
 8003adc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003ae0:	f3bf 8f4f 	dsb	sy
}
 8003ae4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003ae6:	f3bf 8f6f 	isb	sy
}
 8003aea:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003aec:	bf00      	nop
 8003aee:	370c      	adds	r7, #12
 8003af0:	46bd      	mov	sp, r7
 8003af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af6:	4770      	bx	lr
 8003af8:	e000e100 	.word	0xe000e100

08003afc <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b083      	sub	sp, #12
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	4603      	mov	r3, r0
 8003b04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	db0c      	blt.n	8003b28 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b0e:	79fb      	ldrb	r3, [r7, #7]
 8003b10:	f003 021f 	and.w	r2, r3, #31
 8003b14:	4907      	ldr	r1, [pc, #28]	; (8003b34 <__NVIC_ClearPendingIRQ+0x38>)
 8003b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b1a:	095b      	lsrs	r3, r3, #5
 8003b1c:	2001      	movs	r0, #1
 8003b1e:	fa00 f202 	lsl.w	r2, r0, r2
 8003b22:	3360      	adds	r3, #96	; 0x60
 8003b24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003b28:	bf00      	nop
 8003b2a:	370c      	adds	r7, #12
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr
 8003b34:	e000e100 	.word	0xe000e100

08003b38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b083      	sub	sp, #12
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	4603      	mov	r3, r0
 8003b40:	6039      	str	r1, [r7, #0]
 8003b42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	db0a      	blt.n	8003b62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	b2da      	uxtb	r2, r3
 8003b50:	490c      	ldr	r1, [pc, #48]	; (8003b84 <__NVIC_SetPriority+0x4c>)
 8003b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b56:	0112      	lsls	r2, r2, #4
 8003b58:	b2d2      	uxtb	r2, r2
 8003b5a:	440b      	add	r3, r1
 8003b5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b60:	e00a      	b.n	8003b78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	b2da      	uxtb	r2, r3
 8003b66:	4908      	ldr	r1, [pc, #32]	; (8003b88 <__NVIC_SetPriority+0x50>)
 8003b68:	79fb      	ldrb	r3, [r7, #7]
 8003b6a:	f003 030f 	and.w	r3, r3, #15
 8003b6e:	3b04      	subs	r3, #4
 8003b70:	0112      	lsls	r2, r2, #4
 8003b72:	b2d2      	uxtb	r2, r2
 8003b74:	440b      	add	r3, r1
 8003b76:	761a      	strb	r2, [r3, #24]
}
 8003b78:	bf00      	nop
 8003b7a:	370c      	adds	r7, #12
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b82:	4770      	bx	lr
 8003b84:	e000e100 	.word	0xe000e100
 8003b88:	e000ed00 	.word	0xe000ed00

08003b8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b089      	sub	sp, #36	; 0x24
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	60f8      	str	r0, [r7, #12]
 8003b94:	60b9      	str	r1, [r7, #8]
 8003b96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	f003 0307 	and.w	r3, r3, #7
 8003b9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ba0:	69fb      	ldr	r3, [r7, #28]
 8003ba2:	f1c3 0307 	rsb	r3, r3, #7
 8003ba6:	2b04      	cmp	r3, #4
 8003ba8:	bf28      	it	cs
 8003baa:	2304      	movcs	r3, #4
 8003bac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003bae:	69fb      	ldr	r3, [r7, #28]
 8003bb0:	3304      	adds	r3, #4
 8003bb2:	2b06      	cmp	r3, #6
 8003bb4:	d902      	bls.n	8003bbc <NVIC_EncodePriority+0x30>
 8003bb6:	69fb      	ldr	r3, [r7, #28]
 8003bb8:	3b03      	subs	r3, #3
 8003bba:	e000      	b.n	8003bbe <NVIC_EncodePriority+0x32>
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003bc0:	f04f 32ff 	mov.w	r2, #4294967295
 8003bc4:	69bb      	ldr	r3, [r7, #24]
 8003bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bca:	43da      	mvns	r2, r3
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	401a      	ands	r2, r3
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003bd4:	f04f 31ff 	mov.w	r1, #4294967295
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	fa01 f303 	lsl.w	r3, r1, r3
 8003bde:	43d9      	mvns	r1, r3
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003be4:	4313      	orrs	r3, r2
         );
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3724      	adds	r7, #36	; 0x24
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr
	...

08003bf4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b082      	sub	sp, #8
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	3b01      	subs	r3, #1
 8003c00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c04:	d301      	bcc.n	8003c0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003c06:	2301      	movs	r3, #1
 8003c08:	e00f      	b.n	8003c2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c0a:	4a0a      	ldr	r2, [pc, #40]	; (8003c34 <SysTick_Config+0x40>)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	3b01      	subs	r3, #1
 8003c10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003c12:	210f      	movs	r1, #15
 8003c14:	f04f 30ff 	mov.w	r0, #4294967295
 8003c18:	f7ff ff8e 	bl	8003b38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c1c:	4b05      	ldr	r3, [pc, #20]	; (8003c34 <SysTick_Config+0x40>)
 8003c1e:	2200      	movs	r2, #0
 8003c20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c22:	4b04      	ldr	r3, [pc, #16]	; (8003c34 <SysTick_Config+0x40>)
 8003c24:	2207      	movs	r2, #7
 8003c26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003c28:	2300      	movs	r3, #0
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3708      	adds	r7, #8
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}
 8003c32:	bf00      	nop
 8003c34:	e000e010 	.word	0xe000e010

08003c38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b082      	sub	sp, #8
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c40:	6878      	ldr	r0, [r7, #4]
 8003c42:	f7ff fee7 	bl	8003a14 <__NVIC_SetPriorityGrouping>
}
 8003c46:	bf00      	nop
 8003c48:	3708      	adds	r7, #8
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}

08003c4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003c4e:	b580      	push	{r7, lr}
 8003c50:	b086      	sub	sp, #24
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	4603      	mov	r3, r0
 8003c56:	60b9      	str	r1, [r7, #8]
 8003c58:	607a      	str	r2, [r7, #4]
 8003c5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003c60:	f7ff fefc 	bl	8003a5c <__NVIC_GetPriorityGrouping>
 8003c64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c66:	687a      	ldr	r2, [r7, #4]
 8003c68:	68b9      	ldr	r1, [r7, #8]
 8003c6a:	6978      	ldr	r0, [r7, #20]
 8003c6c:	f7ff ff8e 	bl	8003b8c <NVIC_EncodePriority>
 8003c70:	4602      	mov	r2, r0
 8003c72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c76:	4611      	mov	r1, r2
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f7ff ff5d 	bl	8003b38 <__NVIC_SetPriority>
}
 8003c7e:	bf00      	nop
 8003c80:	3718      	adds	r7, #24
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}

08003c86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c86:	b580      	push	{r7, lr}
 8003c88:	b082      	sub	sp, #8
 8003c8a:	af00      	add	r7, sp, #0
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c94:	4618      	mov	r0, r3
 8003c96:	f7ff feef 	bl	8003a78 <__NVIC_EnableIRQ>
}
 8003c9a:	bf00      	nop
 8003c9c:	3708      	adds	r7, #8
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}

08003ca2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003ca2:	b580      	push	{r7, lr}
 8003ca4:	b082      	sub	sp, #8
 8003ca6:	af00      	add	r7, sp, #0
 8003ca8:	4603      	mov	r3, r0
 8003caa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003cac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f7ff feff 	bl	8003ab4 <__NVIC_DisableIRQ>
}
 8003cb6:	bf00      	nop
 8003cb8:	3708      	adds	r7, #8
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}

08003cbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003cbe:	b580      	push	{r7, lr}
 8003cc0:	b082      	sub	sp, #8
 8003cc2:	af00      	add	r7, sp, #0
 8003cc4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	f7ff ff94 	bl	8003bf4 <SysTick_Config>
 8003ccc:	4603      	mov	r3, r0
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	3708      	adds	r7, #8
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}

08003cd6 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003cd6:	b580      	push	{r7, lr}
 8003cd8:	b082      	sub	sp, #8
 8003cda:	af00      	add	r7, sp, #0
 8003cdc:	4603      	mov	r3, r0
 8003cde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8003ce0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f7ff ff09 	bl	8003afc <__NVIC_ClearPendingIRQ>
}
 8003cea:	bf00      	nop
 8003cec:	3708      	adds	r7, #8
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}
	...

08003cf4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b086      	sub	sp, #24
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003d00:	f7ff f9fc 	bl	80030fc <HAL_GetTick>
 8003d04:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d101      	bne.n	8003d10 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	e099      	b.n	8003e44 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2202      	movs	r2, #2
 8003d14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f022 0201 	bic.w	r2, r2, #1
 8003d2e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d30:	e00f      	b.n	8003d52 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003d32:	f7ff f9e3 	bl	80030fc <HAL_GetTick>
 8003d36:	4602      	mov	r2, r0
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	1ad3      	subs	r3, r2, r3
 8003d3c:	2b05      	cmp	r3, #5
 8003d3e:	d908      	bls.n	8003d52 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2220      	movs	r2, #32
 8003d44:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2203      	movs	r2, #3
 8003d4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003d4e:	2303      	movs	r3, #3
 8003d50:	e078      	b.n	8003e44 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f003 0301 	and.w	r3, r3, #1
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d1e8      	bne.n	8003d32 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003d68:	697a      	ldr	r2, [r7, #20]
 8003d6a:	4b38      	ldr	r3, [pc, #224]	; (8003e4c <HAL_DMA_Init+0x158>)
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	685a      	ldr	r2, [r3, #4]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	691b      	ldr	r3, [r3, #16]
 8003d84:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d8a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	699b      	ldr	r3, [r3, #24]
 8003d90:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d96:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6a1b      	ldr	r3, [r3, #32]
 8003d9c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d9e:	697a      	ldr	r2, [r7, #20]
 8003da0:	4313      	orrs	r3, r2
 8003da2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da8:	2b04      	cmp	r3, #4
 8003daa:	d107      	bne.n	8003dbc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003db4:	4313      	orrs	r3, r2
 8003db6:	697a      	ldr	r2, [r7, #20]
 8003db8:	4313      	orrs	r3, r2
 8003dba:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	697a      	ldr	r2, [r7, #20]
 8003dc2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	695b      	ldr	r3, [r3, #20]
 8003dca:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	f023 0307 	bic.w	r3, r3, #7
 8003dd2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd8:	697a      	ldr	r2, [r7, #20]
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de2:	2b04      	cmp	r3, #4
 8003de4:	d117      	bne.n	8003e16 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dea:	697a      	ldr	r2, [r7, #20]
 8003dec:	4313      	orrs	r3, r2
 8003dee:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d00e      	beq.n	8003e16 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	f000 fb0d 	bl	8004418 <DMA_CheckFifoParam>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d008      	beq.n	8003e16 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2240      	movs	r2, #64	; 0x40
 8003e08:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003e12:	2301      	movs	r3, #1
 8003e14:	e016      	b.n	8003e44 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	697a      	ldr	r2, [r7, #20]
 8003e1c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f000 fac4 	bl	80043ac <DMA_CalcBaseAndBitshift>
 8003e24:	4603      	mov	r3, r0
 8003e26:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e2c:	223f      	movs	r2, #63	; 0x3f
 8003e2e:	409a      	lsls	r2, r3
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2200      	movs	r2, #0
 8003e38:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003e42:	2300      	movs	r3, #0
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	3718      	adds	r7, #24
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}
 8003e4c:	f010803f 	.word	0xf010803f

08003e50 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b086      	sub	sp, #24
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	60f8      	str	r0, [r7, #12]
 8003e58:	60b9      	str	r1, [r7, #8]
 8003e5a:	607a      	str	r2, [r7, #4]
 8003e5c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e66:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003e6e:	2b01      	cmp	r3, #1
 8003e70:	d101      	bne.n	8003e76 <HAL_DMA_Start_IT+0x26>
 8003e72:	2302      	movs	r3, #2
 8003e74:	e040      	b.n	8003ef8 <HAL_DMA_Start_IT+0xa8>
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2201      	movs	r2, #1
 8003e7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e84:	b2db      	uxtb	r3, r3
 8003e86:	2b01      	cmp	r3, #1
 8003e88:	d12f      	bne.n	8003eea <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2202      	movs	r2, #2
 8003e8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2200      	movs	r2, #0
 8003e96:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	687a      	ldr	r2, [r7, #4]
 8003e9c:	68b9      	ldr	r1, [r7, #8]
 8003e9e:	68f8      	ldr	r0, [r7, #12]
 8003ea0:	f000 fa56 	bl	8004350 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ea8:	223f      	movs	r2, #63	; 0x3f
 8003eaa:	409a      	lsls	r2, r3
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f042 0216 	orr.w	r2, r2, #22
 8003ebe:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d007      	beq.n	8003ed8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f042 0208 	orr.w	r2, r2, #8
 8003ed6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f042 0201 	orr.w	r2, r2, #1
 8003ee6:	601a      	str	r2, [r3, #0]
 8003ee8:	e005      	b.n	8003ef6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2200      	movs	r2, #0
 8003eee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003ef2:	2302      	movs	r3, #2
 8003ef4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003ef6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	3718      	adds	r7, #24
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd80      	pop	{r7, pc}

08003f00 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b084      	sub	sp, #16
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f0c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003f0e:	f7ff f8f5 	bl	80030fc <HAL_GetTick>
 8003f12:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f1a:	b2db      	uxtb	r3, r3
 8003f1c:	2b02      	cmp	r3, #2
 8003f1e:	d008      	beq.n	8003f32 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2280      	movs	r2, #128	; 0x80
 8003f24:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e052      	b.n	8003fd8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	681a      	ldr	r2, [r3, #0]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f022 0216 	bic.w	r2, r2, #22
 8003f40:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	695a      	ldr	r2, [r3, #20]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f50:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d103      	bne.n	8003f62 <HAL_DMA_Abort+0x62>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d007      	beq.n	8003f72 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	681a      	ldr	r2, [r3, #0]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f022 0208 	bic.w	r2, r2, #8
 8003f70:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f022 0201 	bic.w	r2, r2, #1
 8003f80:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f82:	e013      	b.n	8003fac <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003f84:	f7ff f8ba 	bl	80030fc <HAL_GetTick>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	1ad3      	subs	r3, r2, r3
 8003f8e:	2b05      	cmp	r3, #5
 8003f90:	d90c      	bls.n	8003fac <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2220      	movs	r2, #32
 8003f96:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2203      	movs	r2, #3
 8003f9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003fa8:	2303      	movs	r3, #3
 8003faa:	e015      	b.n	8003fd8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 0301 	and.w	r3, r3, #1
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d1e4      	bne.n	8003f84 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fbe:	223f      	movs	r2, #63	; 0x3f
 8003fc0:	409a      	lsls	r2, r3
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2201      	movs	r2, #1
 8003fca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003fd6:	2300      	movs	r3, #0
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	3710      	adds	r7, #16
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}

08003fe0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b083      	sub	sp, #12
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003fee:	b2db      	uxtb	r3, r3
 8003ff0:	2b02      	cmp	r3, #2
 8003ff2:	d004      	beq.n	8003ffe <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2280      	movs	r2, #128	; 0x80
 8003ff8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e00c      	b.n	8004018 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2205      	movs	r2, #5
 8004002:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f022 0201 	bic.w	r2, r2, #1
 8004014:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004016:	2300      	movs	r3, #0
}
 8004018:	4618      	mov	r0, r3
 800401a:	370c      	adds	r7, #12
 800401c:	46bd      	mov	sp, r7
 800401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004022:	4770      	bx	lr

08004024 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b086      	sub	sp, #24
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800402c:	2300      	movs	r3, #0
 800402e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004030:	4b8e      	ldr	r3, [pc, #568]	; (800426c <HAL_DMA_IRQHandler+0x248>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a8e      	ldr	r2, [pc, #568]	; (8004270 <HAL_DMA_IRQHandler+0x24c>)
 8004036:	fba2 2303 	umull	r2, r3, r2, r3
 800403a:	0a9b      	lsrs	r3, r3, #10
 800403c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004042:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800404e:	2208      	movs	r2, #8
 8004050:	409a      	lsls	r2, r3
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	4013      	ands	r3, r2
 8004056:	2b00      	cmp	r3, #0
 8004058:	d01a      	beq.n	8004090 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f003 0304 	and.w	r3, r3, #4
 8004064:	2b00      	cmp	r3, #0
 8004066:	d013      	beq.n	8004090 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f022 0204 	bic.w	r2, r2, #4
 8004076:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800407c:	2208      	movs	r2, #8
 800407e:	409a      	lsls	r2, r3
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004088:	f043 0201 	orr.w	r2, r3, #1
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004094:	2201      	movs	r2, #1
 8004096:	409a      	lsls	r2, r3
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	4013      	ands	r3, r2
 800409c:	2b00      	cmp	r3, #0
 800409e:	d012      	beq.n	80040c6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	695b      	ldr	r3, [r3, #20]
 80040a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d00b      	beq.n	80040c6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040b2:	2201      	movs	r2, #1
 80040b4:	409a      	lsls	r2, r3
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040be:	f043 0202 	orr.w	r2, r3, #2
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040ca:	2204      	movs	r2, #4
 80040cc:	409a      	lsls	r2, r3
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	4013      	ands	r3, r2
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d012      	beq.n	80040fc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f003 0302 	and.w	r3, r3, #2
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d00b      	beq.n	80040fc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040e8:	2204      	movs	r2, #4
 80040ea:	409a      	lsls	r2, r3
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040f4:	f043 0204 	orr.w	r2, r3, #4
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004100:	2210      	movs	r2, #16
 8004102:	409a      	lsls	r2, r3
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	4013      	ands	r3, r2
 8004108:	2b00      	cmp	r3, #0
 800410a:	d043      	beq.n	8004194 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f003 0308 	and.w	r3, r3, #8
 8004116:	2b00      	cmp	r3, #0
 8004118:	d03c      	beq.n	8004194 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800411e:	2210      	movs	r2, #16
 8004120:	409a      	lsls	r2, r3
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004130:	2b00      	cmp	r3, #0
 8004132:	d018      	beq.n	8004166 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800413e:	2b00      	cmp	r3, #0
 8004140:	d108      	bne.n	8004154 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004146:	2b00      	cmp	r3, #0
 8004148:	d024      	beq.n	8004194 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	4798      	blx	r3
 8004152:	e01f      	b.n	8004194 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004158:	2b00      	cmp	r3, #0
 800415a:	d01b      	beq.n	8004194 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	4798      	blx	r3
 8004164:	e016      	b.n	8004194 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004170:	2b00      	cmp	r3, #0
 8004172:	d107      	bne.n	8004184 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f022 0208 	bic.w	r2, r2, #8
 8004182:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004188:	2b00      	cmp	r3, #0
 800418a:	d003      	beq.n	8004194 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004190:	6878      	ldr	r0, [r7, #4]
 8004192:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004198:	2220      	movs	r2, #32
 800419a:	409a      	lsls	r2, r3
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	4013      	ands	r3, r2
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	f000 808f 	beq.w	80042c4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f003 0310 	and.w	r3, r3, #16
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	f000 8087 	beq.w	80042c4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041ba:	2220      	movs	r2, #32
 80041bc:	409a      	lsls	r2, r3
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80041c8:	b2db      	uxtb	r3, r3
 80041ca:	2b05      	cmp	r3, #5
 80041cc:	d136      	bne.n	800423c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f022 0216 	bic.w	r2, r2, #22
 80041dc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	695a      	ldr	r2, [r3, #20]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80041ec:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d103      	bne.n	80041fe <HAL_DMA_IRQHandler+0x1da>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d007      	beq.n	800420e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f022 0208 	bic.w	r2, r2, #8
 800420c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004212:	223f      	movs	r2, #63	; 0x3f
 8004214:	409a      	lsls	r2, r3
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2201      	movs	r2, #1
 800421e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2200      	movs	r2, #0
 8004226:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800422e:	2b00      	cmp	r3, #0
 8004230:	d07e      	beq.n	8004330 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	4798      	blx	r3
        }
        return;
 800423a:	e079      	b.n	8004330 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004246:	2b00      	cmp	r3, #0
 8004248:	d01d      	beq.n	8004286 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004254:	2b00      	cmp	r3, #0
 8004256:	d10d      	bne.n	8004274 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800425c:	2b00      	cmp	r3, #0
 800425e:	d031      	beq.n	80042c4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004264:	6878      	ldr	r0, [r7, #4]
 8004266:	4798      	blx	r3
 8004268:	e02c      	b.n	80042c4 <HAL_DMA_IRQHandler+0x2a0>
 800426a:	bf00      	nop
 800426c:	20000028 	.word	0x20000028
 8004270:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004278:	2b00      	cmp	r3, #0
 800427a:	d023      	beq.n	80042c4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004280:	6878      	ldr	r0, [r7, #4]
 8004282:	4798      	blx	r3
 8004284:	e01e      	b.n	80042c4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004290:	2b00      	cmp	r3, #0
 8004292:	d10f      	bne.n	80042b4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f022 0210 	bic.w	r2, r2, #16
 80042a2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2201      	movs	r2, #1
 80042a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2200      	movs	r2, #0
 80042b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d003      	beq.n	80042c4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042c0:	6878      	ldr	r0, [r7, #4]
 80042c2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d032      	beq.n	8004332 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042d0:	f003 0301 	and.w	r3, r3, #1
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d022      	beq.n	800431e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2205      	movs	r2, #5
 80042dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	681a      	ldr	r2, [r3, #0]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f022 0201 	bic.w	r2, r2, #1
 80042ee:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	3301      	adds	r3, #1
 80042f4:	60bb      	str	r3, [r7, #8]
 80042f6:	697a      	ldr	r2, [r7, #20]
 80042f8:	429a      	cmp	r2, r3
 80042fa:	d307      	bcc.n	800430c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f003 0301 	and.w	r3, r3, #1
 8004306:	2b00      	cmp	r3, #0
 8004308:	d1f2      	bne.n	80042f0 <HAL_DMA_IRQHandler+0x2cc>
 800430a:	e000      	b.n	800430e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800430c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2201      	movs	r2, #1
 8004312:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2200      	movs	r2, #0
 800431a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004322:	2b00      	cmp	r3, #0
 8004324:	d005      	beq.n	8004332 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	4798      	blx	r3
 800432e:	e000      	b.n	8004332 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004330:	bf00      	nop
    }
  }
}
 8004332:	3718      	adds	r7, #24
 8004334:	46bd      	mov	sp, r7
 8004336:	bd80      	pop	{r7, pc}

08004338 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004338:	b480      	push	{r7}
 800433a:	b083      	sub	sp, #12
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8004344:	4618      	mov	r0, r3
 8004346:	370c      	adds	r7, #12
 8004348:	46bd      	mov	sp, r7
 800434a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434e:	4770      	bx	lr

08004350 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004350:	b480      	push	{r7}
 8004352:	b085      	sub	sp, #20
 8004354:	af00      	add	r7, sp, #0
 8004356:	60f8      	str	r0, [r7, #12]
 8004358:	60b9      	str	r1, [r7, #8]
 800435a:	607a      	str	r2, [r7, #4]
 800435c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	681a      	ldr	r2, [r3, #0]
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800436c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	683a      	ldr	r2, [r7, #0]
 8004374:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	2b40      	cmp	r3, #64	; 0x40
 800437c:	d108      	bne.n	8004390 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	687a      	ldr	r2, [r7, #4]
 8004384:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	68ba      	ldr	r2, [r7, #8]
 800438c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800438e:	e007      	b.n	80043a0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	68ba      	ldr	r2, [r7, #8]
 8004396:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	687a      	ldr	r2, [r7, #4]
 800439e:	60da      	str	r2, [r3, #12]
}
 80043a0:	bf00      	nop
 80043a2:	3714      	adds	r7, #20
 80043a4:	46bd      	mov	sp, r7
 80043a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043aa:	4770      	bx	lr

080043ac <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b085      	sub	sp, #20
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	b2db      	uxtb	r3, r3
 80043ba:	3b10      	subs	r3, #16
 80043bc:	4a14      	ldr	r2, [pc, #80]	; (8004410 <DMA_CalcBaseAndBitshift+0x64>)
 80043be:	fba2 2303 	umull	r2, r3, r2, r3
 80043c2:	091b      	lsrs	r3, r3, #4
 80043c4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80043c6:	4a13      	ldr	r2, [pc, #76]	; (8004414 <DMA_CalcBaseAndBitshift+0x68>)
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	4413      	add	r3, r2
 80043cc:	781b      	ldrb	r3, [r3, #0]
 80043ce:	461a      	mov	r2, r3
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	2b03      	cmp	r3, #3
 80043d8:	d909      	bls.n	80043ee <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80043e2:	f023 0303 	bic.w	r3, r3, #3
 80043e6:	1d1a      	adds	r2, r3, #4
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	659a      	str	r2, [r3, #88]	; 0x58
 80043ec:	e007      	b.n	80043fe <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80043f6:	f023 0303 	bic.w	r3, r3, #3
 80043fa:	687a      	ldr	r2, [r7, #4]
 80043fc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004402:	4618      	mov	r0, r3
 8004404:	3714      	adds	r7, #20
 8004406:	46bd      	mov	sp, r7
 8004408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440c:	4770      	bx	lr
 800440e:	bf00      	nop
 8004410:	aaaaaaab 	.word	0xaaaaaaab
 8004414:	08030698 	.word	0x08030698

08004418 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004418:	b480      	push	{r7}
 800441a:	b085      	sub	sp, #20
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004420:	2300      	movs	r3, #0
 8004422:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004428:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	699b      	ldr	r3, [r3, #24]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d11f      	bne.n	8004472 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	2b03      	cmp	r3, #3
 8004436:	d856      	bhi.n	80044e6 <DMA_CheckFifoParam+0xce>
 8004438:	a201      	add	r2, pc, #4	; (adr r2, 8004440 <DMA_CheckFifoParam+0x28>)
 800443a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800443e:	bf00      	nop
 8004440:	08004451 	.word	0x08004451
 8004444:	08004463 	.word	0x08004463
 8004448:	08004451 	.word	0x08004451
 800444c:	080044e7 	.word	0x080044e7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004454:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004458:	2b00      	cmp	r3, #0
 800445a:	d046      	beq.n	80044ea <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800445c:	2301      	movs	r3, #1
 800445e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004460:	e043      	b.n	80044ea <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004466:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800446a:	d140      	bne.n	80044ee <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800446c:	2301      	movs	r3, #1
 800446e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004470:	e03d      	b.n	80044ee <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	699b      	ldr	r3, [r3, #24]
 8004476:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800447a:	d121      	bne.n	80044c0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	2b03      	cmp	r3, #3
 8004480:	d837      	bhi.n	80044f2 <DMA_CheckFifoParam+0xda>
 8004482:	a201      	add	r2, pc, #4	; (adr r2, 8004488 <DMA_CheckFifoParam+0x70>)
 8004484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004488:	08004499 	.word	0x08004499
 800448c:	0800449f 	.word	0x0800449f
 8004490:	08004499 	.word	0x08004499
 8004494:	080044b1 	.word	0x080044b1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004498:	2301      	movs	r3, #1
 800449a:	73fb      	strb	r3, [r7, #15]
      break;
 800449c:	e030      	b.n	8004500 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d025      	beq.n	80044f6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044ae:	e022      	b.n	80044f6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044b4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80044b8:	d11f      	bne.n	80044fa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80044be:	e01c      	b.n	80044fa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	2b02      	cmp	r3, #2
 80044c4:	d903      	bls.n	80044ce <DMA_CheckFifoParam+0xb6>
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	2b03      	cmp	r3, #3
 80044ca:	d003      	beq.n	80044d4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80044cc:	e018      	b.n	8004500 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	73fb      	strb	r3, [r7, #15]
      break;
 80044d2:	e015      	b.n	8004500 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d00e      	beq.n	80044fe <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80044e0:	2301      	movs	r3, #1
 80044e2:	73fb      	strb	r3, [r7, #15]
      break;
 80044e4:	e00b      	b.n	80044fe <DMA_CheckFifoParam+0xe6>
      break;
 80044e6:	bf00      	nop
 80044e8:	e00a      	b.n	8004500 <DMA_CheckFifoParam+0xe8>
      break;
 80044ea:	bf00      	nop
 80044ec:	e008      	b.n	8004500 <DMA_CheckFifoParam+0xe8>
      break;
 80044ee:	bf00      	nop
 80044f0:	e006      	b.n	8004500 <DMA_CheckFifoParam+0xe8>
      break;
 80044f2:	bf00      	nop
 80044f4:	e004      	b.n	8004500 <DMA_CheckFifoParam+0xe8>
      break;
 80044f6:	bf00      	nop
 80044f8:	e002      	b.n	8004500 <DMA_CheckFifoParam+0xe8>
      break;   
 80044fa:	bf00      	nop
 80044fc:	e000      	b.n	8004500 <DMA_CheckFifoParam+0xe8>
      break;
 80044fe:	bf00      	nop
    }
  } 
  
  return status; 
 8004500:	7bfb      	ldrb	r3, [r7, #15]
}
 8004502:	4618      	mov	r0, r3
 8004504:	3714      	adds	r7, #20
 8004506:	46bd      	mov	sp, r7
 8004508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450c:	4770      	bx	lr
 800450e:	bf00      	nop

08004510 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004510:	b480      	push	{r7}
 8004512:	b089      	sub	sp, #36	; 0x24
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
 8004518:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800451a:	2300      	movs	r3, #0
 800451c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800451e:	2300      	movs	r3, #0
 8004520:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004522:	2300      	movs	r3, #0
 8004524:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004526:	2300      	movs	r3, #0
 8004528:	61fb      	str	r3, [r7, #28]
 800452a:	e159      	b.n	80047e0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800452c:	2201      	movs	r2, #1
 800452e:	69fb      	ldr	r3, [r7, #28]
 8004530:	fa02 f303 	lsl.w	r3, r2, r3
 8004534:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	697a      	ldr	r2, [r7, #20]
 800453c:	4013      	ands	r3, r2
 800453e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004540:	693a      	ldr	r2, [r7, #16]
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	429a      	cmp	r2, r3
 8004546:	f040 8148 	bne.w	80047da <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	f003 0303 	and.w	r3, r3, #3
 8004552:	2b01      	cmp	r3, #1
 8004554:	d005      	beq.n	8004562 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800455e:	2b02      	cmp	r3, #2
 8004560:	d130      	bne.n	80045c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004568:	69fb      	ldr	r3, [r7, #28]
 800456a:	005b      	lsls	r3, r3, #1
 800456c:	2203      	movs	r2, #3
 800456e:	fa02 f303 	lsl.w	r3, r2, r3
 8004572:	43db      	mvns	r3, r3
 8004574:	69ba      	ldr	r2, [r7, #24]
 8004576:	4013      	ands	r3, r2
 8004578:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	68da      	ldr	r2, [r3, #12]
 800457e:	69fb      	ldr	r3, [r7, #28]
 8004580:	005b      	lsls	r3, r3, #1
 8004582:	fa02 f303 	lsl.w	r3, r2, r3
 8004586:	69ba      	ldr	r2, [r7, #24]
 8004588:	4313      	orrs	r3, r2
 800458a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	69ba      	ldr	r2, [r7, #24]
 8004590:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004598:	2201      	movs	r2, #1
 800459a:	69fb      	ldr	r3, [r7, #28]
 800459c:	fa02 f303 	lsl.w	r3, r2, r3
 80045a0:	43db      	mvns	r3, r3
 80045a2:	69ba      	ldr	r2, [r7, #24]
 80045a4:	4013      	ands	r3, r2
 80045a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	091b      	lsrs	r3, r3, #4
 80045ae:	f003 0201 	and.w	r2, r3, #1
 80045b2:	69fb      	ldr	r3, [r7, #28]
 80045b4:	fa02 f303 	lsl.w	r3, r2, r3
 80045b8:	69ba      	ldr	r2, [r7, #24]
 80045ba:	4313      	orrs	r3, r2
 80045bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	69ba      	ldr	r2, [r7, #24]
 80045c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	f003 0303 	and.w	r3, r3, #3
 80045cc:	2b03      	cmp	r3, #3
 80045ce:	d017      	beq.n	8004600 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	68db      	ldr	r3, [r3, #12]
 80045d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80045d6:	69fb      	ldr	r3, [r7, #28]
 80045d8:	005b      	lsls	r3, r3, #1
 80045da:	2203      	movs	r2, #3
 80045dc:	fa02 f303 	lsl.w	r3, r2, r3
 80045e0:	43db      	mvns	r3, r3
 80045e2:	69ba      	ldr	r2, [r7, #24]
 80045e4:	4013      	ands	r3, r2
 80045e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	689a      	ldr	r2, [r3, #8]
 80045ec:	69fb      	ldr	r3, [r7, #28]
 80045ee:	005b      	lsls	r3, r3, #1
 80045f0:	fa02 f303 	lsl.w	r3, r2, r3
 80045f4:	69ba      	ldr	r2, [r7, #24]
 80045f6:	4313      	orrs	r3, r2
 80045f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	69ba      	ldr	r2, [r7, #24]
 80045fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	f003 0303 	and.w	r3, r3, #3
 8004608:	2b02      	cmp	r3, #2
 800460a:	d123      	bne.n	8004654 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800460c:	69fb      	ldr	r3, [r7, #28]
 800460e:	08da      	lsrs	r2, r3, #3
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	3208      	adds	r2, #8
 8004614:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004618:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800461a:	69fb      	ldr	r3, [r7, #28]
 800461c:	f003 0307 	and.w	r3, r3, #7
 8004620:	009b      	lsls	r3, r3, #2
 8004622:	220f      	movs	r2, #15
 8004624:	fa02 f303 	lsl.w	r3, r2, r3
 8004628:	43db      	mvns	r3, r3
 800462a:	69ba      	ldr	r2, [r7, #24]
 800462c:	4013      	ands	r3, r2
 800462e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	691a      	ldr	r2, [r3, #16]
 8004634:	69fb      	ldr	r3, [r7, #28]
 8004636:	f003 0307 	and.w	r3, r3, #7
 800463a:	009b      	lsls	r3, r3, #2
 800463c:	fa02 f303 	lsl.w	r3, r2, r3
 8004640:	69ba      	ldr	r2, [r7, #24]
 8004642:	4313      	orrs	r3, r2
 8004644:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004646:	69fb      	ldr	r3, [r7, #28]
 8004648:	08da      	lsrs	r2, r3, #3
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	3208      	adds	r2, #8
 800464e:	69b9      	ldr	r1, [r7, #24]
 8004650:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800465a:	69fb      	ldr	r3, [r7, #28]
 800465c:	005b      	lsls	r3, r3, #1
 800465e:	2203      	movs	r2, #3
 8004660:	fa02 f303 	lsl.w	r3, r2, r3
 8004664:	43db      	mvns	r3, r3
 8004666:	69ba      	ldr	r2, [r7, #24]
 8004668:	4013      	ands	r3, r2
 800466a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	f003 0203 	and.w	r2, r3, #3
 8004674:	69fb      	ldr	r3, [r7, #28]
 8004676:	005b      	lsls	r3, r3, #1
 8004678:	fa02 f303 	lsl.w	r3, r2, r3
 800467c:	69ba      	ldr	r2, [r7, #24]
 800467e:	4313      	orrs	r3, r2
 8004680:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	69ba      	ldr	r2, [r7, #24]
 8004686:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004690:	2b00      	cmp	r3, #0
 8004692:	f000 80a2 	beq.w	80047da <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004696:	2300      	movs	r3, #0
 8004698:	60fb      	str	r3, [r7, #12]
 800469a:	4b57      	ldr	r3, [pc, #348]	; (80047f8 <HAL_GPIO_Init+0x2e8>)
 800469c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800469e:	4a56      	ldr	r2, [pc, #344]	; (80047f8 <HAL_GPIO_Init+0x2e8>)
 80046a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80046a4:	6453      	str	r3, [r2, #68]	; 0x44
 80046a6:	4b54      	ldr	r3, [pc, #336]	; (80047f8 <HAL_GPIO_Init+0x2e8>)
 80046a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046ae:	60fb      	str	r3, [r7, #12]
 80046b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80046b2:	4a52      	ldr	r2, [pc, #328]	; (80047fc <HAL_GPIO_Init+0x2ec>)
 80046b4:	69fb      	ldr	r3, [r7, #28]
 80046b6:	089b      	lsrs	r3, r3, #2
 80046b8:	3302      	adds	r3, #2
 80046ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80046c0:	69fb      	ldr	r3, [r7, #28]
 80046c2:	f003 0303 	and.w	r3, r3, #3
 80046c6:	009b      	lsls	r3, r3, #2
 80046c8:	220f      	movs	r2, #15
 80046ca:	fa02 f303 	lsl.w	r3, r2, r3
 80046ce:	43db      	mvns	r3, r3
 80046d0:	69ba      	ldr	r2, [r7, #24]
 80046d2:	4013      	ands	r3, r2
 80046d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	4a49      	ldr	r2, [pc, #292]	; (8004800 <HAL_GPIO_Init+0x2f0>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d019      	beq.n	8004712 <HAL_GPIO_Init+0x202>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	4a48      	ldr	r2, [pc, #288]	; (8004804 <HAL_GPIO_Init+0x2f4>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d013      	beq.n	800470e <HAL_GPIO_Init+0x1fe>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	4a47      	ldr	r2, [pc, #284]	; (8004808 <HAL_GPIO_Init+0x2f8>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d00d      	beq.n	800470a <HAL_GPIO_Init+0x1fa>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	4a46      	ldr	r2, [pc, #280]	; (800480c <HAL_GPIO_Init+0x2fc>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d007      	beq.n	8004706 <HAL_GPIO_Init+0x1f6>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	4a45      	ldr	r2, [pc, #276]	; (8004810 <HAL_GPIO_Init+0x300>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d101      	bne.n	8004702 <HAL_GPIO_Init+0x1f2>
 80046fe:	2304      	movs	r3, #4
 8004700:	e008      	b.n	8004714 <HAL_GPIO_Init+0x204>
 8004702:	2307      	movs	r3, #7
 8004704:	e006      	b.n	8004714 <HAL_GPIO_Init+0x204>
 8004706:	2303      	movs	r3, #3
 8004708:	e004      	b.n	8004714 <HAL_GPIO_Init+0x204>
 800470a:	2302      	movs	r3, #2
 800470c:	e002      	b.n	8004714 <HAL_GPIO_Init+0x204>
 800470e:	2301      	movs	r3, #1
 8004710:	e000      	b.n	8004714 <HAL_GPIO_Init+0x204>
 8004712:	2300      	movs	r3, #0
 8004714:	69fa      	ldr	r2, [r7, #28]
 8004716:	f002 0203 	and.w	r2, r2, #3
 800471a:	0092      	lsls	r2, r2, #2
 800471c:	4093      	lsls	r3, r2
 800471e:	69ba      	ldr	r2, [r7, #24]
 8004720:	4313      	orrs	r3, r2
 8004722:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004724:	4935      	ldr	r1, [pc, #212]	; (80047fc <HAL_GPIO_Init+0x2ec>)
 8004726:	69fb      	ldr	r3, [r7, #28]
 8004728:	089b      	lsrs	r3, r3, #2
 800472a:	3302      	adds	r3, #2
 800472c:	69ba      	ldr	r2, [r7, #24]
 800472e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004732:	4b38      	ldr	r3, [pc, #224]	; (8004814 <HAL_GPIO_Init+0x304>)
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	43db      	mvns	r3, r3
 800473c:	69ba      	ldr	r2, [r7, #24]
 800473e:	4013      	ands	r3, r2
 8004740:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800474a:	2b00      	cmp	r3, #0
 800474c:	d003      	beq.n	8004756 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800474e:	69ba      	ldr	r2, [r7, #24]
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	4313      	orrs	r3, r2
 8004754:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004756:	4a2f      	ldr	r2, [pc, #188]	; (8004814 <HAL_GPIO_Init+0x304>)
 8004758:	69bb      	ldr	r3, [r7, #24]
 800475a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800475c:	4b2d      	ldr	r3, [pc, #180]	; (8004814 <HAL_GPIO_Init+0x304>)
 800475e:	68db      	ldr	r3, [r3, #12]
 8004760:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	43db      	mvns	r3, r3
 8004766:	69ba      	ldr	r2, [r7, #24]
 8004768:	4013      	ands	r3, r2
 800476a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004774:	2b00      	cmp	r3, #0
 8004776:	d003      	beq.n	8004780 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004778:	69ba      	ldr	r2, [r7, #24]
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	4313      	orrs	r3, r2
 800477e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004780:	4a24      	ldr	r2, [pc, #144]	; (8004814 <HAL_GPIO_Init+0x304>)
 8004782:	69bb      	ldr	r3, [r7, #24]
 8004784:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004786:	4b23      	ldr	r3, [pc, #140]	; (8004814 <HAL_GPIO_Init+0x304>)
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	43db      	mvns	r3, r3
 8004790:	69ba      	ldr	r2, [r7, #24]
 8004792:	4013      	ands	r3, r2
 8004794:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d003      	beq.n	80047aa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80047a2:	69ba      	ldr	r2, [r7, #24]
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	4313      	orrs	r3, r2
 80047a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80047aa:	4a1a      	ldr	r2, [pc, #104]	; (8004814 <HAL_GPIO_Init+0x304>)
 80047ac:	69bb      	ldr	r3, [r7, #24]
 80047ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80047b0:	4b18      	ldr	r3, [pc, #96]	; (8004814 <HAL_GPIO_Init+0x304>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	43db      	mvns	r3, r3
 80047ba:	69ba      	ldr	r2, [r7, #24]
 80047bc:	4013      	ands	r3, r2
 80047be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d003      	beq.n	80047d4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80047cc:	69ba      	ldr	r2, [r7, #24]
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	4313      	orrs	r3, r2
 80047d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80047d4:	4a0f      	ldr	r2, [pc, #60]	; (8004814 <HAL_GPIO_Init+0x304>)
 80047d6:	69bb      	ldr	r3, [r7, #24]
 80047d8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80047da:	69fb      	ldr	r3, [r7, #28]
 80047dc:	3301      	adds	r3, #1
 80047de:	61fb      	str	r3, [r7, #28]
 80047e0:	69fb      	ldr	r3, [r7, #28]
 80047e2:	2b0f      	cmp	r3, #15
 80047e4:	f67f aea2 	bls.w	800452c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80047e8:	bf00      	nop
 80047ea:	bf00      	nop
 80047ec:	3724      	adds	r7, #36	; 0x24
 80047ee:	46bd      	mov	sp, r7
 80047f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f4:	4770      	bx	lr
 80047f6:	bf00      	nop
 80047f8:	40023800 	.word	0x40023800
 80047fc:	40013800 	.word	0x40013800
 8004800:	40020000 	.word	0x40020000
 8004804:	40020400 	.word	0x40020400
 8004808:	40020800 	.word	0x40020800
 800480c:	40020c00 	.word	0x40020c00
 8004810:	40021000 	.word	0x40021000
 8004814:	40013c00 	.word	0x40013c00

08004818 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004818:	b480      	push	{r7}
 800481a:	b087      	sub	sp, #28
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
 8004820:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004822:	2300      	movs	r3, #0
 8004824:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8004826:	2300      	movs	r3, #0
 8004828:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800482a:	2300      	movs	r3, #0
 800482c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800482e:	2300      	movs	r3, #0
 8004830:	617b      	str	r3, [r7, #20]
 8004832:	e0bb      	b.n	80049ac <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004834:	2201      	movs	r2, #1
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	fa02 f303 	lsl.w	r3, r2, r3
 800483c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800483e:	683a      	ldr	r2, [r7, #0]
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	4013      	ands	r3, r2
 8004844:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8004846:	68fa      	ldr	r2, [r7, #12]
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	429a      	cmp	r2, r3
 800484c:	f040 80ab 	bne.w	80049a6 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8004850:	4a5c      	ldr	r2, [pc, #368]	; (80049c4 <HAL_GPIO_DeInit+0x1ac>)
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	089b      	lsrs	r3, r3, #2
 8004856:	3302      	adds	r3, #2
 8004858:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800485c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	f003 0303 	and.w	r3, r3, #3
 8004864:	009b      	lsls	r3, r3, #2
 8004866:	220f      	movs	r2, #15
 8004868:	fa02 f303 	lsl.w	r3, r2, r3
 800486c:	68ba      	ldr	r2, [r7, #8]
 800486e:	4013      	ands	r3, r2
 8004870:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	4a54      	ldr	r2, [pc, #336]	; (80049c8 <HAL_GPIO_DeInit+0x1b0>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d019      	beq.n	80048ae <HAL_GPIO_DeInit+0x96>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	4a53      	ldr	r2, [pc, #332]	; (80049cc <HAL_GPIO_DeInit+0x1b4>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d013      	beq.n	80048aa <HAL_GPIO_DeInit+0x92>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	4a52      	ldr	r2, [pc, #328]	; (80049d0 <HAL_GPIO_DeInit+0x1b8>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d00d      	beq.n	80048a6 <HAL_GPIO_DeInit+0x8e>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	4a51      	ldr	r2, [pc, #324]	; (80049d4 <HAL_GPIO_DeInit+0x1bc>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d007      	beq.n	80048a2 <HAL_GPIO_DeInit+0x8a>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	4a50      	ldr	r2, [pc, #320]	; (80049d8 <HAL_GPIO_DeInit+0x1c0>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d101      	bne.n	800489e <HAL_GPIO_DeInit+0x86>
 800489a:	2304      	movs	r3, #4
 800489c:	e008      	b.n	80048b0 <HAL_GPIO_DeInit+0x98>
 800489e:	2307      	movs	r3, #7
 80048a0:	e006      	b.n	80048b0 <HAL_GPIO_DeInit+0x98>
 80048a2:	2303      	movs	r3, #3
 80048a4:	e004      	b.n	80048b0 <HAL_GPIO_DeInit+0x98>
 80048a6:	2302      	movs	r3, #2
 80048a8:	e002      	b.n	80048b0 <HAL_GPIO_DeInit+0x98>
 80048aa:	2301      	movs	r3, #1
 80048ac:	e000      	b.n	80048b0 <HAL_GPIO_DeInit+0x98>
 80048ae:	2300      	movs	r3, #0
 80048b0:	697a      	ldr	r2, [r7, #20]
 80048b2:	f002 0203 	and.w	r2, r2, #3
 80048b6:	0092      	lsls	r2, r2, #2
 80048b8:	4093      	lsls	r3, r2
 80048ba:	68ba      	ldr	r2, [r7, #8]
 80048bc:	429a      	cmp	r2, r3
 80048be:	d132      	bne.n	8004926 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80048c0:	4b46      	ldr	r3, [pc, #280]	; (80049dc <HAL_GPIO_DeInit+0x1c4>)
 80048c2:	681a      	ldr	r2, [r3, #0]
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	43db      	mvns	r3, r3
 80048c8:	4944      	ldr	r1, [pc, #272]	; (80049dc <HAL_GPIO_DeInit+0x1c4>)
 80048ca:	4013      	ands	r3, r2
 80048cc:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80048ce:	4b43      	ldr	r3, [pc, #268]	; (80049dc <HAL_GPIO_DeInit+0x1c4>)
 80048d0:	685a      	ldr	r2, [r3, #4]
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	43db      	mvns	r3, r3
 80048d6:	4941      	ldr	r1, [pc, #260]	; (80049dc <HAL_GPIO_DeInit+0x1c4>)
 80048d8:	4013      	ands	r3, r2
 80048da:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80048dc:	4b3f      	ldr	r3, [pc, #252]	; (80049dc <HAL_GPIO_DeInit+0x1c4>)
 80048de:	68da      	ldr	r2, [r3, #12]
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	43db      	mvns	r3, r3
 80048e4:	493d      	ldr	r1, [pc, #244]	; (80049dc <HAL_GPIO_DeInit+0x1c4>)
 80048e6:	4013      	ands	r3, r2
 80048e8:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80048ea:	4b3c      	ldr	r3, [pc, #240]	; (80049dc <HAL_GPIO_DeInit+0x1c4>)
 80048ec:	689a      	ldr	r2, [r3, #8]
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	43db      	mvns	r3, r3
 80048f2:	493a      	ldr	r1, [pc, #232]	; (80049dc <HAL_GPIO_DeInit+0x1c4>)
 80048f4:	4013      	ands	r3, r2
 80048f6:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	f003 0303 	and.w	r3, r3, #3
 80048fe:	009b      	lsls	r3, r3, #2
 8004900:	220f      	movs	r2, #15
 8004902:	fa02 f303 	lsl.w	r3, r2, r3
 8004906:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8004908:	4a2e      	ldr	r2, [pc, #184]	; (80049c4 <HAL_GPIO_DeInit+0x1ac>)
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	089b      	lsrs	r3, r3, #2
 800490e:	3302      	adds	r3, #2
 8004910:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	43da      	mvns	r2, r3
 8004918:	482a      	ldr	r0, [pc, #168]	; (80049c4 <HAL_GPIO_DeInit+0x1ac>)
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	089b      	lsrs	r3, r3, #2
 800491e:	400a      	ands	r2, r1
 8004920:	3302      	adds	r3, #2
 8004922:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681a      	ldr	r2, [r3, #0]
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	005b      	lsls	r3, r3, #1
 800492e:	2103      	movs	r1, #3
 8004930:	fa01 f303 	lsl.w	r3, r1, r3
 8004934:	43db      	mvns	r3, r3
 8004936:	401a      	ands	r2, r3
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	08da      	lsrs	r2, r3, #3
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	3208      	adds	r2, #8
 8004944:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	f003 0307 	and.w	r3, r3, #7
 800494e:	009b      	lsls	r3, r3, #2
 8004950:	220f      	movs	r2, #15
 8004952:	fa02 f303 	lsl.w	r3, r2, r3
 8004956:	43db      	mvns	r3, r3
 8004958:	697a      	ldr	r2, [r7, #20]
 800495a:	08d2      	lsrs	r2, r2, #3
 800495c:	4019      	ands	r1, r3
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	3208      	adds	r2, #8
 8004962:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	68da      	ldr	r2, [r3, #12]
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	005b      	lsls	r3, r3, #1
 800496e:	2103      	movs	r1, #3
 8004970:	fa01 f303 	lsl.w	r3, r1, r3
 8004974:	43db      	mvns	r3, r3
 8004976:	401a      	ands	r2, r3
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	685a      	ldr	r2, [r3, #4]
 8004980:	2101      	movs	r1, #1
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	fa01 f303 	lsl.w	r3, r1, r3
 8004988:	43db      	mvns	r3, r3
 800498a:	401a      	ands	r2, r3
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	689a      	ldr	r2, [r3, #8]
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	005b      	lsls	r3, r3, #1
 8004998:	2103      	movs	r1, #3
 800499a:	fa01 f303 	lsl.w	r3, r1, r3
 800499e:	43db      	mvns	r3, r3
 80049a0:	401a      	ands	r2, r3
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	3301      	adds	r3, #1
 80049aa:	617b      	str	r3, [r7, #20]
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	2b0f      	cmp	r3, #15
 80049b0:	f67f af40 	bls.w	8004834 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80049b4:	bf00      	nop
 80049b6:	bf00      	nop
 80049b8:	371c      	adds	r7, #28
 80049ba:	46bd      	mov	sp, r7
 80049bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c0:	4770      	bx	lr
 80049c2:	bf00      	nop
 80049c4:	40013800 	.word	0x40013800
 80049c8:	40020000 	.word	0x40020000
 80049cc:	40020400 	.word	0x40020400
 80049d0:	40020800 	.word	0x40020800
 80049d4:	40020c00 	.word	0x40020c00
 80049d8:	40021000 	.word	0x40021000
 80049dc:	40013c00 	.word	0x40013c00

080049e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b083      	sub	sp, #12
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
 80049e8:	460b      	mov	r3, r1
 80049ea:	807b      	strh	r3, [r7, #2]
 80049ec:	4613      	mov	r3, r2
 80049ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80049f0:	787b      	ldrb	r3, [r7, #1]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d003      	beq.n	80049fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80049f6:	887a      	ldrh	r2, [r7, #2]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80049fc:	e003      	b.n	8004a06 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80049fe:	887b      	ldrh	r3, [r7, #2]
 8004a00:	041a      	lsls	r2, r3, #16
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	619a      	str	r2, [r3, #24]
}
 8004a06:	bf00      	nop
 8004a08:	370c      	adds	r7, #12
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a10:	4770      	bx	lr
	...

08004a14 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b084      	sub	sp, #16
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d101      	bne.n	8004a26 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	e12b      	b.n	8004c7e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d106      	bne.n	8004a40 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2200      	movs	r2, #0
 8004a36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	f7fc fde8 	bl	8001610 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2224      	movs	r2, #36	; 0x24
 8004a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	681a      	ldr	r2, [r3, #0]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f022 0201 	bic.w	r2, r2, #1
 8004a56:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	681a      	ldr	r2, [r3, #0]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a66:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	681a      	ldr	r2, [r3, #0]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004a76:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004a78:	f002 fe72 	bl	8007760 <HAL_RCC_GetPCLK1Freq>
 8004a7c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	4a81      	ldr	r2, [pc, #516]	; (8004c88 <HAL_I2C_Init+0x274>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d807      	bhi.n	8004a98 <HAL_I2C_Init+0x84>
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	4a80      	ldr	r2, [pc, #512]	; (8004c8c <HAL_I2C_Init+0x278>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	bf94      	ite	ls
 8004a90:	2301      	movls	r3, #1
 8004a92:	2300      	movhi	r3, #0
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	e006      	b.n	8004aa6 <HAL_I2C_Init+0x92>
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	4a7d      	ldr	r2, [pc, #500]	; (8004c90 <HAL_I2C_Init+0x27c>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	bf94      	ite	ls
 8004aa0:	2301      	movls	r3, #1
 8004aa2:	2300      	movhi	r3, #0
 8004aa4:	b2db      	uxtb	r3, r3
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d001      	beq.n	8004aae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	e0e7      	b.n	8004c7e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	4a78      	ldr	r2, [pc, #480]	; (8004c94 <HAL_I2C_Init+0x280>)
 8004ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ab6:	0c9b      	lsrs	r3, r3, #18
 8004ab8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	68ba      	ldr	r2, [r7, #8]
 8004aca:	430a      	orrs	r2, r1
 8004acc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	6a1b      	ldr	r3, [r3, #32]
 8004ad4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	4a6a      	ldr	r2, [pc, #424]	; (8004c88 <HAL_I2C_Init+0x274>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d802      	bhi.n	8004ae8 <HAL_I2C_Init+0xd4>
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	3301      	adds	r3, #1
 8004ae6:	e009      	b.n	8004afc <HAL_I2C_Init+0xe8>
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004aee:	fb02 f303 	mul.w	r3, r2, r3
 8004af2:	4a69      	ldr	r2, [pc, #420]	; (8004c98 <HAL_I2C_Init+0x284>)
 8004af4:	fba2 2303 	umull	r2, r3, r2, r3
 8004af8:	099b      	lsrs	r3, r3, #6
 8004afa:	3301      	adds	r3, #1
 8004afc:	687a      	ldr	r2, [r7, #4]
 8004afe:	6812      	ldr	r2, [r2, #0]
 8004b00:	430b      	orrs	r3, r1
 8004b02:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	69db      	ldr	r3, [r3, #28]
 8004b0a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004b0e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	495c      	ldr	r1, [pc, #368]	; (8004c88 <HAL_I2C_Init+0x274>)
 8004b18:	428b      	cmp	r3, r1
 8004b1a:	d819      	bhi.n	8004b50 <HAL_I2C_Init+0x13c>
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	1e59      	subs	r1, r3, #1
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	005b      	lsls	r3, r3, #1
 8004b26:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b2a:	1c59      	adds	r1, r3, #1
 8004b2c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004b30:	400b      	ands	r3, r1
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d00a      	beq.n	8004b4c <HAL_I2C_Init+0x138>
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	1e59      	subs	r1, r3, #1
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	005b      	lsls	r3, r3, #1
 8004b40:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b44:	3301      	adds	r3, #1
 8004b46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b4a:	e051      	b.n	8004bf0 <HAL_I2C_Init+0x1dc>
 8004b4c:	2304      	movs	r3, #4
 8004b4e:	e04f      	b.n	8004bf0 <HAL_I2C_Init+0x1dc>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d111      	bne.n	8004b7c <HAL_I2C_Init+0x168>
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	1e58      	subs	r0, r3, #1
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6859      	ldr	r1, [r3, #4]
 8004b60:	460b      	mov	r3, r1
 8004b62:	005b      	lsls	r3, r3, #1
 8004b64:	440b      	add	r3, r1
 8004b66:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b6a:	3301      	adds	r3, #1
 8004b6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	bf0c      	ite	eq
 8004b74:	2301      	moveq	r3, #1
 8004b76:	2300      	movne	r3, #0
 8004b78:	b2db      	uxtb	r3, r3
 8004b7a:	e012      	b.n	8004ba2 <HAL_I2C_Init+0x18e>
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	1e58      	subs	r0, r3, #1
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6859      	ldr	r1, [r3, #4]
 8004b84:	460b      	mov	r3, r1
 8004b86:	009b      	lsls	r3, r3, #2
 8004b88:	440b      	add	r3, r1
 8004b8a:	0099      	lsls	r1, r3, #2
 8004b8c:	440b      	add	r3, r1
 8004b8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b92:	3301      	adds	r3, #1
 8004b94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	bf0c      	ite	eq
 8004b9c:	2301      	moveq	r3, #1
 8004b9e:	2300      	movne	r3, #0
 8004ba0:	b2db      	uxtb	r3, r3
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d001      	beq.n	8004baa <HAL_I2C_Init+0x196>
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	e022      	b.n	8004bf0 <HAL_I2C_Init+0x1dc>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	689b      	ldr	r3, [r3, #8]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d10e      	bne.n	8004bd0 <HAL_I2C_Init+0x1bc>
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	1e58      	subs	r0, r3, #1
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6859      	ldr	r1, [r3, #4]
 8004bba:	460b      	mov	r3, r1
 8004bbc:	005b      	lsls	r3, r3, #1
 8004bbe:	440b      	add	r3, r1
 8004bc0:	fbb0 f3f3 	udiv	r3, r0, r3
 8004bc4:	3301      	adds	r3, #1
 8004bc6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bce:	e00f      	b.n	8004bf0 <HAL_I2C_Init+0x1dc>
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	1e58      	subs	r0, r3, #1
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6859      	ldr	r1, [r3, #4]
 8004bd8:	460b      	mov	r3, r1
 8004bda:	009b      	lsls	r3, r3, #2
 8004bdc:	440b      	add	r3, r1
 8004bde:	0099      	lsls	r1, r3, #2
 8004be0:	440b      	add	r3, r1
 8004be2:	fbb0 f3f3 	udiv	r3, r0, r3
 8004be6:	3301      	adds	r3, #1
 8004be8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004bf0:	6879      	ldr	r1, [r7, #4]
 8004bf2:	6809      	ldr	r1, [r1, #0]
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	69da      	ldr	r2, [r3, #28]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6a1b      	ldr	r3, [r3, #32]
 8004c0a:	431a      	orrs	r2, r3
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	430a      	orrs	r2, r1
 8004c12:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	689b      	ldr	r3, [r3, #8]
 8004c1a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004c1e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004c22:	687a      	ldr	r2, [r7, #4]
 8004c24:	6911      	ldr	r1, [r2, #16]
 8004c26:	687a      	ldr	r2, [r7, #4]
 8004c28:	68d2      	ldr	r2, [r2, #12]
 8004c2a:	4311      	orrs	r1, r2
 8004c2c:	687a      	ldr	r2, [r7, #4]
 8004c2e:	6812      	ldr	r2, [r2, #0]
 8004c30:	430b      	orrs	r3, r1
 8004c32:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	68db      	ldr	r3, [r3, #12]
 8004c3a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	695a      	ldr	r2, [r3, #20]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	699b      	ldr	r3, [r3, #24]
 8004c46:	431a      	orrs	r2, r3
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	430a      	orrs	r2, r1
 8004c4e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	681a      	ldr	r2, [r3, #0]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f042 0201 	orr.w	r2, r2, #1
 8004c5e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2200      	movs	r2, #0
 8004c64:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2220      	movs	r2, #32
 8004c6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2200      	movs	r2, #0
 8004c72:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2200      	movs	r2, #0
 8004c78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004c7c:	2300      	movs	r3, #0
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	3710      	adds	r7, #16
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}
 8004c86:	bf00      	nop
 8004c88:	000186a0 	.word	0x000186a0
 8004c8c:	001e847f 	.word	0x001e847f
 8004c90:	003d08ff 	.word	0x003d08ff
 8004c94:	431bde83 	.word	0x431bde83
 8004c98:	10624dd3 	.word	0x10624dd3

08004c9c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b088      	sub	sp, #32
 8004ca0:	af02      	add	r7, sp, #8
 8004ca2:	60f8      	str	r0, [r7, #12]
 8004ca4:	4608      	mov	r0, r1
 8004ca6:	4611      	mov	r1, r2
 8004ca8:	461a      	mov	r2, r3
 8004caa:	4603      	mov	r3, r0
 8004cac:	817b      	strh	r3, [r7, #10]
 8004cae:	460b      	mov	r3, r1
 8004cb0:	813b      	strh	r3, [r7, #8]
 8004cb2:	4613      	mov	r3, r2
 8004cb4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004cb6:	f7fe fa21 	bl	80030fc <HAL_GetTick>
 8004cba:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cc2:	b2db      	uxtb	r3, r3
 8004cc4:	2b20      	cmp	r3, #32
 8004cc6:	f040 80d9 	bne.w	8004e7c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	9300      	str	r3, [sp, #0]
 8004cce:	2319      	movs	r3, #25
 8004cd0:	2201      	movs	r2, #1
 8004cd2:	496d      	ldr	r1, [pc, #436]	; (8004e88 <HAL_I2C_Mem_Write+0x1ec>)
 8004cd4:	68f8      	ldr	r0, [r7, #12]
 8004cd6:	f000 fd27 	bl	8005728 <I2C_WaitOnFlagUntilTimeout>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d001      	beq.n	8004ce4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004ce0:	2302      	movs	r3, #2
 8004ce2:	e0cc      	b.n	8004e7e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cea:	2b01      	cmp	r3, #1
 8004cec:	d101      	bne.n	8004cf2 <HAL_I2C_Mem_Write+0x56>
 8004cee:	2302      	movs	r3, #2
 8004cf0:	e0c5      	b.n	8004e7e <HAL_I2C_Mem_Write+0x1e2>
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2201      	movs	r2, #1
 8004cf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f003 0301 	and.w	r3, r3, #1
 8004d04:	2b01      	cmp	r3, #1
 8004d06:	d007      	beq.n	8004d18 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	681a      	ldr	r2, [r3, #0]
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f042 0201 	orr.w	r2, r2, #1
 8004d16:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	681a      	ldr	r2, [r3, #0]
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d26:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2221      	movs	r2, #33	; 0x21
 8004d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2240      	movs	r2, #64	; 0x40
 8004d34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	6a3a      	ldr	r2, [r7, #32]
 8004d42:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004d48:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d4e:	b29a      	uxth	r2, r3
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	4a4d      	ldr	r2, [pc, #308]	; (8004e8c <HAL_I2C_Mem_Write+0x1f0>)
 8004d58:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004d5a:	88f8      	ldrh	r0, [r7, #6]
 8004d5c:	893a      	ldrh	r2, [r7, #8]
 8004d5e:	8979      	ldrh	r1, [r7, #10]
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	9301      	str	r3, [sp, #4]
 8004d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d66:	9300      	str	r3, [sp, #0]
 8004d68:	4603      	mov	r3, r0
 8004d6a:	68f8      	ldr	r0, [r7, #12]
 8004d6c:	f000 fa4c 	bl	8005208 <I2C_RequestMemoryWrite>
 8004d70:	4603      	mov	r3, r0
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d052      	beq.n	8004e1c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004d76:	2301      	movs	r3, #1
 8004d78:	e081      	b.n	8004e7e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d7a:	697a      	ldr	r2, [r7, #20]
 8004d7c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d7e:	68f8      	ldr	r0, [r7, #12]
 8004d80:	f000 fda8 	bl	80058d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004d84:	4603      	mov	r3, r0
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d00d      	beq.n	8004da6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d8e:	2b04      	cmp	r3, #4
 8004d90:	d107      	bne.n	8004da2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	681a      	ldr	r2, [r3, #0]
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004da0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004da2:	2301      	movs	r3, #1
 8004da4:	e06b      	b.n	8004e7e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004daa:	781a      	ldrb	r2, [r3, #0]
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db6:	1c5a      	adds	r2, r3, #1
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dc0:	3b01      	subs	r3, #1
 8004dc2:	b29a      	uxth	r2, r3
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dcc:	b29b      	uxth	r3, r3
 8004dce:	3b01      	subs	r3, #1
 8004dd0:	b29a      	uxth	r2, r3
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	695b      	ldr	r3, [r3, #20]
 8004ddc:	f003 0304 	and.w	r3, r3, #4
 8004de0:	2b04      	cmp	r3, #4
 8004de2:	d11b      	bne.n	8004e1c <HAL_I2C_Mem_Write+0x180>
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d017      	beq.n	8004e1c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df0:	781a      	ldrb	r2, [r3, #0]
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dfc:	1c5a      	adds	r2, r3, #1
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e06:	3b01      	subs	r3, #1
 8004e08:	b29a      	uxth	r2, r3
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e12:	b29b      	uxth	r3, r3
 8004e14:	3b01      	subs	r3, #1
 8004e16:	b29a      	uxth	r2, r3
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d1aa      	bne.n	8004d7a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e24:	697a      	ldr	r2, [r7, #20]
 8004e26:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004e28:	68f8      	ldr	r0, [r7, #12]
 8004e2a:	f000 fd94 	bl	8005956 <I2C_WaitOnBTFFlagUntilTimeout>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d00d      	beq.n	8004e50 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e38:	2b04      	cmp	r3, #4
 8004e3a:	d107      	bne.n	8004e4c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	681a      	ldr	r2, [r3, #0]
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e4a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	e016      	b.n	8004e7e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	681a      	ldr	r2, [r3, #0]
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e5e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2220      	movs	r2, #32
 8004e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2200      	movs	r2, #0
 8004e74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004e78:	2300      	movs	r3, #0
 8004e7a:	e000      	b.n	8004e7e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004e7c:	2302      	movs	r3, #2
  }
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	3718      	adds	r7, #24
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}
 8004e86:	bf00      	nop
 8004e88:	00100002 	.word	0x00100002
 8004e8c:	ffff0000 	.word	0xffff0000

08004e90 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b08c      	sub	sp, #48	; 0x30
 8004e94:	af02      	add	r7, sp, #8
 8004e96:	60f8      	str	r0, [r7, #12]
 8004e98:	4608      	mov	r0, r1
 8004e9a:	4611      	mov	r1, r2
 8004e9c:	461a      	mov	r2, r3
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	817b      	strh	r3, [r7, #10]
 8004ea2:	460b      	mov	r3, r1
 8004ea4:	813b      	strh	r3, [r7, #8]
 8004ea6:	4613      	mov	r3, r2
 8004ea8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004eaa:	f7fe f927 	bl	80030fc <HAL_GetTick>
 8004eae:	6278      	str	r0, [r7, #36]	; 0x24
  __IO uint32_t count = 0U;
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004eba:	b2db      	uxtb	r3, r3
 8004ebc:	2b20      	cmp	r3, #32
 8004ebe:	f040 8176 	bne.w	80051ae <HAL_I2C_Mem_Read_DMA+0x31e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8004ec2:	4b95      	ldr	r3, [pc, #596]	; (8005118 <HAL_I2C_Mem_Read_DMA+0x288>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	08db      	lsrs	r3, r3, #3
 8004ec8:	4a94      	ldr	r2, [pc, #592]	; (800511c <HAL_I2C_Mem_Read_DMA+0x28c>)
 8004eca:	fba2 2303 	umull	r2, r3, r2, r3
 8004ece:	0a1a      	lsrs	r2, r3, #8
 8004ed0:	4613      	mov	r3, r2
 8004ed2:	009b      	lsls	r3, r3, #2
 8004ed4:	4413      	add	r3, r2
 8004ed6:	009a      	lsls	r2, r3, #2
 8004ed8:	4413      	add	r3, r2
 8004eda:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 8004edc:	69fb      	ldr	r3, [r7, #28]
 8004ede:	3b01      	subs	r3, #1
 8004ee0:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 8004ee2:	69fb      	ldr	r3, [r7, #28]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d116      	bne.n	8004f16 <HAL_I2C_Mem_Read_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2200      	movs	r2, #0
 8004eec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	2220      	movs	r2, #32
 8004ef2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f02:	f043 0220 	orr.w	r2, r3, #32
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004f12:	2301      	movs	r3, #1
 8004f14:	e14c      	b.n	80051b0 <HAL_I2C_Mem_Read_DMA+0x320>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	699b      	ldr	r3, [r3, #24]
 8004f1c:	f003 0302 	and.w	r3, r3, #2
 8004f20:	2b02      	cmp	r3, #2
 8004f22:	d0db      	beq.n	8004edc <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f2a:	2b01      	cmp	r3, #1
 8004f2c:	d101      	bne.n	8004f32 <HAL_I2C_Mem_Read_DMA+0xa2>
 8004f2e:	2302      	movs	r3, #2
 8004f30:	e13e      	b.n	80051b0 <HAL_I2C_Mem_Read_DMA+0x320>
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	2201      	movs	r2, #1
 8004f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f003 0301 	and.w	r3, r3, #1
 8004f44:	2b01      	cmp	r3, #1
 8004f46:	d007      	beq.n	8004f58 <HAL_I2C_Mem_Read_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	681a      	ldr	r2, [r3, #0]
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f042 0201 	orr.w	r2, r2, #1
 8004f56:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	681a      	ldr	r2, [r3, #0]
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f66:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2222      	movs	r2, #34	; 0x22
 8004f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2240      	movs	r2, #64	; 0x40
 8004f74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f82:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004f88:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f8e:	b29a      	uxth	r2, r3
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	4a62      	ldr	r2, [pc, #392]	; (8005120 <HAL_I2C_Mem_Read_DMA+0x290>)
 8004f98:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8004f9a:	897a      	ldrh	r2, [r7, #10]
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 8004fa0:	893a      	ldrh	r2, [r7, #8]
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 8004fa6:	88fa      	ldrh	r2, [r7, #6]
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	651a      	str	r2, [r3, #80]	; 0x50

    if (hi2c->XferSize > 0U)
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	f000 80cc 	beq.w	8005154 <HAL_I2C_Mem_Read_DMA+0x2c4>
    {
      if (hi2c->hdmarx != NULL)
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d02d      	beq.n	8005020 <HAL_I2C_Mem_Read_DMA+0x190>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fc8:	4a56      	ldr	r2, [pc, #344]	; (8005124 <HAL_I2C_Mem_Read_DMA+0x294>)
 8004fca:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fd0:	4a55      	ldr	r2, [pc, #340]	; (8005128 <HAL_I2C_Mem_Read_DMA+0x298>)
 8004fd2:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fd8:	2200      	movs	r2, #0
 8004fda:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fe8:	2200      	movs	r2, #0
 8004fea:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	3310      	adds	r3, #16
 8004ffe:	4619      	mov	r1, r3
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005004:	461a      	mov	r2, r3
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800500a:	f7fe ff21 	bl	8003e50 <HAL_DMA_Start_IT>
 800500e:	4603      	mov	r3, r0
 8005010:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8005014:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005018:	2b00      	cmp	r3, #0
 800501a:	f040 8087 	bne.w	800512c <HAL_I2C_Mem_Read_DMA+0x29c>
 800501e:	e013      	b.n	8005048 <HAL_I2C_Mem_Read_DMA+0x1b8>
        hi2c->State     = HAL_I2C_STATE_READY;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	2220      	movs	r2, #32
 8005024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2200      	movs	r2, #0
 800502c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005034:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2200      	movs	r2, #0
 8005040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8005044:	2301      	movs	r3, #1
 8005046:	e0b3      	b.n	80051b0 <HAL_I2C_Mem_Read_DMA+0x320>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8005048:	88f8      	ldrh	r0, [r7, #6]
 800504a:	893a      	ldrh	r2, [r7, #8]
 800504c:	8979      	ldrh	r1, [r7, #10]
 800504e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005050:	9301      	str	r3, [sp, #4]
 8005052:	2323      	movs	r3, #35	; 0x23
 8005054:	9300      	str	r3, [sp, #0]
 8005056:	4603      	mov	r3, r0
 8005058:	68f8      	ldr	r0, [r7, #12]
 800505a:	f000 f96b 	bl	8005334 <I2C_RequestMemoryRead>
 800505e:	4603      	mov	r3, r0
 8005060:	2b00      	cmp	r3, #0
 8005062:	d023      	beq.n	80050ac <HAL_I2C_Mem_Read_DMA+0x21c>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005068:	4618      	mov	r0, r3
 800506a:	f7fe ffb9 	bl	8003fe0 <HAL_DMA_Abort_IT>
 800506e:	4603      	mov	r3, r0
 8005070:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005078:	2200      	movs	r2, #0
 800507a:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	681a      	ldr	r2, [r3, #0]
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800508a:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	2200      	movs	r2, #0
 8005090:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount = 0U;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	2200      	movs	r2, #0
 8005096:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	681a      	ldr	r2, [r3, #0]
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f022 0201 	bic.w	r2, r2, #1
 80050a6:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 80050a8:	2301      	movs	r3, #1
 80050aa:	e081      	b.n	80051b0 <HAL_I2C_Mem_Read_DMA+0x320>
        }

        if (hi2c->XferSize == 1U)
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050b0:	2b01      	cmp	r3, #1
 80050b2:	d108      	bne.n	80050c6 <HAL_I2C_Mem_Read_DMA+0x236>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	681a      	ldr	r2, [r3, #0]
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050c2:	601a      	str	r2, [r3, #0]
 80050c4:	e007      	b.n	80050d6 <HAL_I2C_Mem_Read_DMA+0x246>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	685a      	ldr	r2, [r3, #4]
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80050d4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050d6:	2300      	movs	r3, #0
 80050d8:	61bb      	str	r3, [r7, #24]
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	695b      	ldr	r3, [r3, #20]
 80050e0:	61bb      	str	r3, [r7, #24]
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	699b      	ldr	r3, [r3, #24]
 80050e8:	61bb      	str	r3, [r7, #24]
 80050ea:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2200      	movs	r2, #0
 80050f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	685a      	ldr	r2, [r3, #4]
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005102:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	685a      	ldr	r2, [r3, #4]
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005112:	605a      	str	r2, [r3, #4]
 8005114:	e049      	b.n	80051aa <HAL_I2C_Mem_Read_DMA+0x31a>
 8005116:	bf00      	nop
 8005118:	20000028 	.word	0x20000028
 800511c:	14f8b589 	.word	0x14f8b589
 8005120:	ffff0000 	.word	0xffff0000
 8005124:	08005505 	.word	0x08005505
 8005128:	080056af 	.word	0x080056af
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	2220      	movs	r2, #32
 8005130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	2200      	movs	r2, #0
 8005138:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005140:	f043 0210 	orr.w	r2, r3, #16
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	2200      	movs	r2, #0
 800514c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005150:	2301      	movs	r3, #1
 8005152:	e02d      	b.n	80051b0 <HAL_I2C_Mem_Read_DMA+0x320>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8005154:	88f8      	ldrh	r0, [r7, #6]
 8005156:	893a      	ldrh	r2, [r7, #8]
 8005158:	8979      	ldrh	r1, [r7, #10]
 800515a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800515c:	9301      	str	r3, [sp, #4]
 800515e:	2323      	movs	r3, #35	; 0x23
 8005160:	9300      	str	r3, [sp, #0]
 8005162:	4603      	mov	r3, r0
 8005164:	68f8      	ldr	r0, [r7, #12]
 8005166:	f000 f8e5 	bl	8005334 <I2C_RequestMemoryRead>
 800516a:	4603      	mov	r3, r0
 800516c:	2b00      	cmp	r3, #0
 800516e:	d001      	beq.n	8005174 <HAL_I2C_Mem_Read_DMA+0x2e4>
      {
        return HAL_ERROR;
 8005170:	2301      	movs	r3, #1
 8005172:	e01d      	b.n	80051b0 <HAL_I2C_Mem_Read_DMA+0x320>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005174:	2300      	movs	r3, #0
 8005176:	617b      	str	r3, [r7, #20]
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	695b      	ldr	r3, [r3, #20]
 800517e:	617b      	str	r3, [r7, #20]
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	699b      	ldr	r3, [r3, #24]
 8005186:	617b      	str	r3, [r7, #20]
 8005188:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	681a      	ldr	r2, [r3, #0]
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005198:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	2220      	movs	r2, #32
 800519e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2200      	movs	r2, #0
 80051a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }

    return HAL_OK;
 80051aa:	2300      	movs	r3, #0
 80051ac:	e000      	b.n	80051b0 <HAL_I2C_Mem_Read_DMA+0x320>
  }
  else
  {
    return HAL_BUSY;
 80051ae:	2302      	movs	r3, #2
  }
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	3728      	adds	r7, #40	; 0x28
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bd80      	pop	{r7, pc}

080051b8 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80051b8:	b480      	push	{r7}
 80051ba:	b083      	sub	sp, #12
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80051c0:	bf00      	nop
 80051c2:	370c      	adds	r7, #12
 80051c4:	46bd      	mov	sp, r7
 80051c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ca:	4770      	bx	lr

080051cc <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80051cc:	b480      	push	{r7}
 80051ce:	b083      	sub	sp, #12
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80051d4:	bf00      	nop
 80051d6:	370c      	adds	r7, #12
 80051d8:	46bd      	mov	sp, r7
 80051da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051de:	4770      	bx	lr

080051e0 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b083      	sub	sp, #12
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80051e8:	bf00      	nop
 80051ea:	370c      	adds	r7, #12
 80051ec:	46bd      	mov	sp, r7
 80051ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f2:	4770      	bx	lr

080051f4 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80051f4:	b480      	push	{r7}
 80051f6:	b083      	sub	sp, #12
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80051fc:	bf00      	nop
 80051fe:	370c      	adds	r7, #12
 8005200:	46bd      	mov	sp, r7
 8005202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005206:	4770      	bx	lr

08005208 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b088      	sub	sp, #32
 800520c:	af02      	add	r7, sp, #8
 800520e:	60f8      	str	r0, [r7, #12]
 8005210:	4608      	mov	r0, r1
 8005212:	4611      	mov	r1, r2
 8005214:	461a      	mov	r2, r3
 8005216:	4603      	mov	r3, r0
 8005218:	817b      	strh	r3, [r7, #10]
 800521a:	460b      	mov	r3, r1
 800521c:	813b      	strh	r3, [r7, #8]
 800521e:	4613      	mov	r3, r2
 8005220:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	681a      	ldr	r2, [r3, #0]
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005230:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005234:	9300      	str	r3, [sp, #0]
 8005236:	6a3b      	ldr	r3, [r7, #32]
 8005238:	2200      	movs	r2, #0
 800523a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800523e:	68f8      	ldr	r0, [r7, #12]
 8005240:	f000 fa72 	bl	8005728 <I2C_WaitOnFlagUntilTimeout>
 8005244:	4603      	mov	r3, r0
 8005246:	2b00      	cmp	r3, #0
 8005248:	d00d      	beq.n	8005266 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005254:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005258:	d103      	bne.n	8005262 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005260:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005262:	2303      	movs	r3, #3
 8005264:	e05f      	b.n	8005326 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005266:	897b      	ldrh	r3, [r7, #10]
 8005268:	b2db      	uxtb	r3, r3
 800526a:	461a      	mov	r2, r3
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005274:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005278:	6a3a      	ldr	r2, [r7, #32]
 800527a:	492d      	ldr	r1, [pc, #180]	; (8005330 <I2C_RequestMemoryWrite+0x128>)
 800527c:	68f8      	ldr	r0, [r7, #12]
 800527e:	f000 faaa 	bl	80057d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005282:	4603      	mov	r3, r0
 8005284:	2b00      	cmp	r3, #0
 8005286:	d001      	beq.n	800528c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005288:	2301      	movs	r3, #1
 800528a:	e04c      	b.n	8005326 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800528c:	2300      	movs	r3, #0
 800528e:	617b      	str	r3, [r7, #20]
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	695b      	ldr	r3, [r3, #20]
 8005296:	617b      	str	r3, [r7, #20]
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	699b      	ldr	r3, [r3, #24]
 800529e:	617b      	str	r3, [r7, #20]
 80052a0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80052a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052a4:	6a39      	ldr	r1, [r7, #32]
 80052a6:	68f8      	ldr	r0, [r7, #12]
 80052a8:	f000 fb14 	bl	80058d4 <I2C_WaitOnTXEFlagUntilTimeout>
 80052ac:	4603      	mov	r3, r0
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d00d      	beq.n	80052ce <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052b6:	2b04      	cmp	r3, #4
 80052b8:	d107      	bne.n	80052ca <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	681a      	ldr	r2, [r3, #0]
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052c8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80052ca:	2301      	movs	r3, #1
 80052cc:	e02b      	b.n	8005326 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80052ce:	88fb      	ldrh	r3, [r7, #6]
 80052d0:	2b01      	cmp	r3, #1
 80052d2:	d105      	bne.n	80052e0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80052d4:	893b      	ldrh	r3, [r7, #8]
 80052d6:	b2da      	uxtb	r2, r3
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	611a      	str	r2, [r3, #16]
 80052de:	e021      	b.n	8005324 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80052e0:	893b      	ldrh	r3, [r7, #8]
 80052e2:	0a1b      	lsrs	r3, r3, #8
 80052e4:	b29b      	uxth	r3, r3
 80052e6:	b2da      	uxtb	r2, r3
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80052ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052f0:	6a39      	ldr	r1, [r7, #32]
 80052f2:	68f8      	ldr	r0, [r7, #12]
 80052f4:	f000 faee 	bl	80058d4 <I2C_WaitOnTXEFlagUntilTimeout>
 80052f8:	4603      	mov	r3, r0
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d00d      	beq.n	800531a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005302:	2b04      	cmp	r3, #4
 8005304:	d107      	bne.n	8005316 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	681a      	ldr	r2, [r3, #0]
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005314:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005316:	2301      	movs	r3, #1
 8005318:	e005      	b.n	8005326 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800531a:	893b      	ldrh	r3, [r7, #8]
 800531c:	b2da      	uxtb	r2, r3
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005324:	2300      	movs	r3, #0
}
 8005326:	4618      	mov	r0, r3
 8005328:	3718      	adds	r7, #24
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}
 800532e:	bf00      	nop
 8005330:	00010002 	.word	0x00010002

08005334 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b088      	sub	sp, #32
 8005338:	af02      	add	r7, sp, #8
 800533a:	60f8      	str	r0, [r7, #12]
 800533c:	4608      	mov	r0, r1
 800533e:	4611      	mov	r1, r2
 8005340:	461a      	mov	r2, r3
 8005342:	4603      	mov	r3, r0
 8005344:	817b      	strh	r3, [r7, #10]
 8005346:	460b      	mov	r3, r1
 8005348:	813b      	strh	r3, [r7, #8]
 800534a:	4613      	mov	r3, r2
 800534c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	681a      	ldr	r2, [r3, #0]
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800535c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	681a      	ldr	r2, [r3, #0]
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800536c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800536e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005370:	9300      	str	r3, [sp, #0]
 8005372:	6a3b      	ldr	r3, [r7, #32]
 8005374:	2200      	movs	r2, #0
 8005376:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800537a:	68f8      	ldr	r0, [r7, #12]
 800537c:	f000 f9d4 	bl	8005728 <I2C_WaitOnFlagUntilTimeout>
 8005380:	4603      	mov	r3, r0
 8005382:	2b00      	cmp	r3, #0
 8005384:	d00d      	beq.n	80053a2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005390:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005394:	d103      	bne.n	800539e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	f44f 7200 	mov.w	r2, #512	; 0x200
 800539c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800539e:	2303      	movs	r3, #3
 80053a0:	e0aa      	b.n	80054f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80053a2:	897b      	ldrh	r3, [r7, #10]
 80053a4:	b2db      	uxtb	r3, r3
 80053a6:	461a      	mov	r2, r3
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80053b0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80053b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b4:	6a3a      	ldr	r2, [r7, #32]
 80053b6:	4952      	ldr	r1, [pc, #328]	; (8005500 <I2C_RequestMemoryRead+0x1cc>)
 80053b8:	68f8      	ldr	r0, [r7, #12]
 80053ba:	f000 fa0c 	bl	80057d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80053be:	4603      	mov	r3, r0
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d001      	beq.n	80053c8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80053c4:	2301      	movs	r3, #1
 80053c6:	e097      	b.n	80054f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053c8:	2300      	movs	r3, #0
 80053ca:	617b      	str	r3, [r7, #20]
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	695b      	ldr	r3, [r3, #20]
 80053d2:	617b      	str	r3, [r7, #20]
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	699b      	ldr	r3, [r3, #24]
 80053da:	617b      	str	r3, [r7, #20]
 80053dc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80053de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053e0:	6a39      	ldr	r1, [r7, #32]
 80053e2:	68f8      	ldr	r0, [r7, #12]
 80053e4:	f000 fa76 	bl	80058d4 <I2C_WaitOnTXEFlagUntilTimeout>
 80053e8:	4603      	mov	r3, r0
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d00d      	beq.n	800540a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053f2:	2b04      	cmp	r3, #4
 80053f4:	d107      	bne.n	8005406 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	681a      	ldr	r2, [r3, #0]
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005404:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005406:	2301      	movs	r3, #1
 8005408:	e076      	b.n	80054f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800540a:	88fb      	ldrh	r3, [r7, #6]
 800540c:	2b01      	cmp	r3, #1
 800540e:	d105      	bne.n	800541c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005410:	893b      	ldrh	r3, [r7, #8]
 8005412:	b2da      	uxtb	r2, r3
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	611a      	str	r2, [r3, #16]
 800541a:	e021      	b.n	8005460 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800541c:	893b      	ldrh	r3, [r7, #8]
 800541e:	0a1b      	lsrs	r3, r3, #8
 8005420:	b29b      	uxth	r3, r3
 8005422:	b2da      	uxtb	r2, r3
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800542a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800542c:	6a39      	ldr	r1, [r7, #32]
 800542e:	68f8      	ldr	r0, [r7, #12]
 8005430:	f000 fa50 	bl	80058d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005434:	4603      	mov	r3, r0
 8005436:	2b00      	cmp	r3, #0
 8005438:	d00d      	beq.n	8005456 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800543e:	2b04      	cmp	r3, #4
 8005440:	d107      	bne.n	8005452 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	681a      	ldr	r2, [r3, #0]
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005450:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005452:	2301      	movs	r3, #1
 8005454:	e050      	b.n	80054f8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005456:	893b      	ldrh	r3, [r7, #8]
 8005458:	b2da      	uxtb	r2, r3
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005460:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005462:	6a39      	ldr	r1, [r7, #32]
 8005464:	68f8      	ldr	r0, [r7, #12]
 8005466:	f000 fa35 	bl	80058d4 <I2C_WaitOnTXEFlagUntilTimeout>
 800546a:	4603      	mov	r3, r0
 800546c:	2b00      	cmp	r3, #0
 800546e:	d00d      	beq.n	800548c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005474:	2b04      	cmp	r3, #4
 8005476:	d107      	bne.n	8005488 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	681a      	ldr	r2, [r3, #0]
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005486:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005488:	2301      	movs	r3, #1
 800548a:	e035      	b.n	80054f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	681a      	ldr	r2, [r3, #0]
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800549a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800549c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800549e:	9300      	str	r3, [sp, #0]
 80054a0:	6a3b      	ldr	r3, [r7, #32]
 80054a2:	2200      	movs	r2, #0
 80054a4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80054a8:	68f8      	ldr	r0, [r7, #12]
 80054aa:	f000 f93d 	bl	8005728 <I2C_WaitOnFlagUntilTimeout>
 80054ae:	4603      	mov	r3, r0
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d00d      	beq.n	80054d0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054c2:	d103      	bne.n	80054cc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80054ca:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80054cc:	2303      	movs	r3, #3
 80054ce:	e013      	b.n	80054f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80054d0:	897b      	ldrh	r3, [r7, #10]
 80054d2:	b2db      	uxtb	r3, r3
 80054d4:	f043 0301 	orr.w	r3, r3, #1
 80054d8:	b2da      	uxtb	r2, r3
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80054e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e2:	6a3a      	ldr	r2, [r7, #32]
 80054e4:	4906      	ldr	r1, [pc, #24]	; (8005500 <I2C_RequestMemoryRead+0x1cc>)
 80054e6:	68f8      	ldr	r0, [r7, #12]
 80054e8:	f000 f975 	bl	80057d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80054ec:	4603      	mov	r3, r0
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d001      	beq.n	80054f6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80054f2:	2301      	movs	r3, #1
 80054f4:	e000      	b.n	80054f8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80054f6:	2300      	movs	r3, #0
}
 80054f8:	4618      	mov	r0, r3
 80054fa:	3718      	adds	r7, #24
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bd80      	pop	{r7, pc}
 8005500:	00010002 	.word	0x00010002

08005504 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b086      	sub	sp, #24
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005510:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005518:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005520:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005526:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	685a      	ldr	r2, [r3, #4]
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005536:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005538:	697b      	ldr	r3, [r7, #20]
 800553a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800553c:	2b00      	cmp	r3, #0
 800553e:	d003      	beq.n	8005548 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005544:	2200      	movs	r2, #0
 8005546:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800554c:	2b00      	cmp	r3, #0
 800554e:	d003      	beq.n	8005558 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005554:	2200      	movs	r2, #0
 8005556:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8005558:	7cfb      	ldrb	r3, [r7, #19]
 800555a:	f003 0321 	and.w	r3, r3, #33	; 0x21
 800555e:	2b21      	cmp	r3, #33	; 0x21
 8005560:	d007      	beq.n	8005572 <I2C_DMAXferCplt+0x6e>
 8005562:	7cfb      	ldrb	r3, [r7, #19]
 8005564:	f003 0322 	and.w	r3, r3, #34	; 0x22
 8005568:	2b22      	cmp	r3, #34	; 0x22
 800556a:	d131      	bne.n	80055d0 <I2C_DMAXferCplt+0xcc>
 800556c:	7cbb      	ldrb	r3, [r7, #18]
 800556e:	2b20      	cmp	r3, #32
 8005570:	d12e      	bne.n	80055d0 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	685a      	ldr	r2, [r3, #4]
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005580:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	2200      	movs	r2, #0
 8005586:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8005588:	7cfb      	ldrb	r3, [r7, #19]
 800558a:	2b29      	cmp	r3, #41	; 0x29
 800558c:	d10a      	bne.n	80055a4 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800558e:	697b      	ldr	r3, [r7, #20]
 8005590:	2221      	movs	r2, #33	; 0x21
 8005592:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	2228      	movs	r2, #40	; 0x28
 8005598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800559c:	6978      	ldr	r0, [r7, #20]
 800559e:	f7ff fe15 	bl	80051cc <HAL_I2C_SlaveTxCpltCallback>
 80055a2:	e00c      	b.n	80055be <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80055a4:	7cfb      	ldrb	r3, [r7, #19]
 80055a6:	2b2a      	cmp	r3, #42	; 0x2a
 80055a8:	d109      	bne.n	80055be <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	2222      	movs	r2, #34	; 0x22
 80055ae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	2228      	movs	r2, #40	; 0x28
 80055b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80055b8:	6978      	ldr	r0, [r7, #20]
 80055ba:	f7ff fe11 	bl	80051e0 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80055be:	697b      	ldr	r3, [r7, #20]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	685a      	ldr	r2, [r3, #4]
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80055cc:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80055ce:	e06a      	b.n	80056a6 <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80055d6:	b2db      	uxtb	r3, r3
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d064      	beq.n	80056a6 <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055e0:	b29b      	uxth	r3, r3
 80055e2:	2b01      	cmp	r3, #1
 80055e4:	d107      	bne.n	80055f6 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	681a      	ldr	r2, [r3, #0]
 80055ec:	697b      	ldr	r3, [r7, #20]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055f4:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	685a      	ldr	r2, [r3, #4]
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005604:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800560c:	d009      	beq.n	8005622 <I2C_DMAXferCplt+0x11e>
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	2b08      	cmp	r3, #8
 8005612:	d006      	beq.n	8005622 <I2C_DMAXferCplt+0x11e>
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800561a:	d002      	beq.n	8005622 <I2C_DMAXferCplt+0x11e>
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	2b20      	cmp	r3, #32
 8005620:	d107      	bne.n	8005632 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005622:	697b      	ldr	r3, [r7, #20]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	681a      	ldr	r2, [r3, #0]
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005630:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005632:	697b      	ldr	r3, [r7, #20]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	685a      	ldr	r2, [r3, #4]
 8005638:	697b      	ldr	r3, [r7, #20]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005640:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	685a      	ldr	r2, [r3, #4]
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005650:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	2200      	movs	r2, #0
 8005656:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800565c:	2b00      	cmp	r3, #0
 800565e:	d003      	beq.n	8005668 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8005660:	6978      	ldr	r0, [r7, #20]
 8005662:	f7ff fdc7 	bl	80051f4 <HAL_I2C_ErrorCallback>
}
 8005666:	e01e      	b.n	80056a6 <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	2220      	movs	r2, #32
 800566c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005670:	697b      	ldr	r3, [r7, #20]
 8005672:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005676:	b2db      	uxtb	r3, r3
 8005678:	2b40      	cmp	r3, #64	; 0x40
 800567a:	d10a      	bne.n	8005692 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	2200      	movs	r2, #0
 8005680:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	2200      	movs	r2, #0
 8005688:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 800568a:	6978      	ldr	r0, [r7, #20]
 800568c:	f7fc fe5e 	bl	800234c <HAL_I2C_MemRxCpltCallback>
}
 8005690:	e009      	b.n	80056a6 <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	2200      	movs	r2, #0
 8005696:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	2212      	movs	r2, #18
 800569e:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 80056a0:	6978      	ldr	r0, [r7, #20]
 80056a2:	f7ff fd89 	bl	80051b8 <HAL_I2C_MasterRxCpltCallback>
}
 80056a6:	bf00      	nop
 80056a8:	3718      	adds	r7, #24
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bd80      	pop	{r7, pc}

080056ae <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80056ae:	b580      	push	{r7, lr}
 80056b0:	b084      	sub	sp, #16
 80056b2:	af00      	add	r7, sp, #0
 80056b4:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ba:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d003      	beq.n	80056cc <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056c8:	2200      	movs	r2, #0
 80056ca:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d003      	beq.n	80056dc <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056d8:	2200      	movs	r2, #0
 80056da:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80056dc:	6878      	ldr	r0, [r7, #4]
 80056de:	f7fe fe2b 	bl	8004338 <HAL_DMA_GetError>
 80056e2:	4603      	mov	r3, r0
 80056e4:	2b02      	cmp	r3, #2
 80056e6:	d01b      	beq.n	8005720 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	681a      	ldr	r2, [r3, #0]
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056f6:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	2200      	movs	r2, #0
 80056fc:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2220      	movs	r2, #32
 8005702:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	2200      	movs	r2, #0
 800570a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005712:	f043 0210 	orr.w	r2, r3, #16
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800571a:	68f8      	ldr	r0, [r7, #12]
 800571c:	f7ff fd6a 	bl	80051f4 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005720:	bf00      	nop
 8005722:	3710      	adds	r7, #16
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}

08005728 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b084      	sub	sp, #16
 800572c:	af00      	add	r7, sp, #0
 800572e:	60f8      	str	r0, [r7, #12]
 8005730:	60b9      	str	r1, [r7, #8]
 8005732:	603b      	str	r3, [r7, #0]
 8005734:	4613      	mov	r3, r2
 8005736:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005738:	e025      	b.n	8005786 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005740:	d021      	beq.n	8005786 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005742:	f7fd fcdb 	bl	80030fc <HAL_GetTick>
 8005746:	4602      	mov	r2, r0
 8005748:	69bb      	ldr	r3, [r7, #24]
 800574a:	1ad3      	subs	r3, r2, r3
 800574c:	683a      	ldr	r2, [r7, #0]
 800574e:	429a      	cmp	r2, r3
 8005750:	d302      	bcc.n	8005758 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d116      	bne.n	8005786 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	2200      	movs	r2, #0
 800575c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	2220      	movs	r2, #32
 8005762:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	2200      	movs	r2, #0
 800576a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005772:	f043 0220 	orr.w	r2, r3, #32
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	2200      	movs	r2, #0
 800577e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005782:	2301      	movs	r3, #1
 8005784:	e023      	b.n	80057ce <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	0c1b      	lsrs	r3, r3, #16
 800578a:	b2db      	uxtb	r3, r3
 800578c:	2b01      	cmp	r3, #1
 800578e:	d10d      	bne.n	80057ac <I2C_WaitOnFlagUntilTimeout+0x84>
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	695b      	ldr	r3, [r3, #20]
 8005796:	43da      	mvns	r2, r3
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	4013      	ands	r3, r2
 800579c:	b29b      	uxth	r3, r3
 800579e:	2b00      	cmp	r3, #0
 80057a0:	bf0c      	ite	eq
 80057a2:	2301      	moveq	r3, #1
 80057a4:	2300      	movne	r3, #0
 80057a6:	b2db      	uxtb	r3, r3
 80057a8:	461a      	mov	r2, r3
 80057aa:	e00c      	b.n	80057c6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	699b      	ldr	r3, [r3, #24]
 80057b2:	43da      	mvns	r2, r3
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	4013      	ands	r3, r2
 80057b8:	b29b      	uxth	r3, r3
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	bf0c      	ite	eq
 80057be:	2301      	moveq	r3, #1
 80057c0:	2300      	movne	r3, #0
 80057c2:	b2db      	uxtb	r3, r3
 80057c4:	461a      	mov	r2, r3
 80057c6:	79fb      	ldrb	r3, [r7, #7]
 80057c8:	429a      	cmp	r2, r3
 80057ca:	d0b6      	beq.n	800573a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80057cc:	2300      	movs	r3, #0
}
 80057ce:	4618      	mov	r0, r3
 80057d0:	3710      	adds	r7, #16
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bd80      	pop	{r7, pc}

080057d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80057d6:	b580      	push	{r7, lr}
 80057d8:	b084      	sub	sp, #16
 80057da:	af00      	add	r7, sp, #0
 80057dc:	60f8      	str	r0, [r7, #12]
 80057de:	60b9      	str	r1, [r7, #8]
 80057e0:	607a      	str	r2, [r7, #4]
 80057e2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80057e4:	e051      	b.n	800588a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	695b      	ldr	r3, [r3, #20]
 80057ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057f4:	d123      	bne.n	800583e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	681a      	ldr	r2, [r3, #0]
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005804:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800580e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	2200      	movs	r2, #0
 8005814:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	2220      	movs	r2, #32
 800581a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	2200      	movs	r2, #0
 8005822:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800582a:	f043 0204 	orr.w	r2, r3, #4
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	2200      	movs	r2, #0
 8005836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800583a:	2301      	movs	r3, #1
 800583c:	e046      	b.n	80058cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005844:	d021      	beq.n	800588a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005846:	f7fd fc59 	bl	80030fc <HAL_GetTick>
 800584a:	4602      	mov	r2, r0
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	1ad3      	subs	r3, r2, r3
 8005850:	687a      	ldr	r2, [r7, #4]
 8005852:	429a      	cmp	r2, r3
 8005854:	d302      	bcc.n	800585c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d116      	bne.n	800588a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	2200      	movs	r2, #0
 8005860:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2220      	movs	r2, #32
 8005866:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	2200      	movs	r2, #0
 800586e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005876:	f043 0220 	orr.w	r2, r3, #32
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	2200      	movs	r2, #0
 8005882:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005886:	2301      	movs	r3, #1
 8005888:	e020      	b.n	80058cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	0c1b      	lsrs	r3, r3, #16
 800588e:	b2db      	uxtb	r3, r3
 8005890:	2b01      	cmp	r3, #1
 8005892:	d10c      	bne.n	80058ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	695b      	ldr	r3, [r3, #20]
 800589a:	43da      	mvns	r2, r3
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	4013      	ands	r3, r2
 80058a0:	b29b      	uxth	r3, r3
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	bf14      	ite	ne
 80058a6:	2301      	movne	r3, #1
 80058a8:	2300      	moveq	r3, #0
 80058aa:	b2db      	uxtb	r3, r3
 80058ac:	e00b      	b.n	80058c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	699b      	ldr	r3, [r3, #24]
 80058b4:	43da      	mvns	r2, r3
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	4013      	ands	r3, r2
 80058ba:	b29b      	uxth	r3, r3
 80058bc:	2b00      	cmp	r3, #0
 80058be:	bf14      	ite	ne
 80058c0:	2301      	movne	r3, #1
 80058c2:	2300      	moveq	r3, #0
 80058c4:	b2db      	uxtb	r3, r3
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d18d      	bne.n	80057e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80058ca:	2300      	movs	r3, #0
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	3710      	adds	r7, #16
 80058d0:	46bd      	mov	sp, r7
 80058d2:	bd80      	pop	{r7, pc}

080058d4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b084      	sub	sp, #16
 80058d8:	af00      	add	r7, sp, #0
 80058da:	60f8      	str	r0, [r7, #12]
 80058dc:	60b9      	str	r1, [r7, #8]
 80058de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80058e0:	e02d      	b.n	800593e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80058e2:	68f8      	ldr	r0, [r7, #12]
 80058e4:	f000 f878 	bl	80059d8 <I2C_IsAcknowledgeFailed>
 80058e8:	4603      	mov	r3, r0
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d001      	beq.n	80058f2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80058ee:	2301      	movs	r3, #1
 80058f0:	e02d      	b.n	800594e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058f8:	d021      	beq.n	800593e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058fa:	f7fd fbff 	bl	80030fc <HAL_GetTick>
 80058fe:	4602      	mov	r2, r0
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	1ad3      	subs	r3, r2, r3
 8005904:	68ba      	ldr	r2, [r7, #8]
 8005906:	429a      	cmp	r2, r3
 8005908:	d302      	bcc.n	8005910 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d116      	bne.n	800593e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	2200      	movs	r2, #0
 8005914:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	2220      	movs	r2, #32
 800591a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	2200      	movs	r2, #0
 8005922:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800592a:	f043 0220 	orr.w	r2, r3, #32
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	2200      	movs	r2, #0
 8005936:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800593a:	2301      	movs	r3, #1
 800593c:	e007      	b.n	800594e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	695b      	ldr	r3, [r3, #20]
 8005944:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005948:	2b80      	cmp	r3, #128	; 0x80
 800594a:	d1ca      	bne.n	80058e2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800594c:	2300      	movs	r3, #0
}
 800594e:	4618      	mov	r0, r3
 8005950:	3710      	adds	r7, #16
 8005952:	46bd      	mov	sp, r7
 8005954:	bd80      	pop	{r7, pc}

08005956 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005956:	b580      	push	{r7, lr}
 8005958:	b084      	sub	sp, #16
 800595a:	af00      	add	r7, sp, #0
 800595c:	60f8      	str	r0, [r7, #12]
 800595e:	60b9      	str	r1, [r7, #8]
 8005960:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005962:	e02d      	b.n	80059c0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005964:	68f8      	ldr	r0, [r7, #12]
 8005966:	f000 f837 	bl	80059d8 <I2C_IsAcknowledgeFailed>
 800596a:	4603      	mov	r3, r0
 800596c:	2b00      	cmp	r3, #0
 800596e:	d001      	beq.n	8005974 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005970:	2301      	movs	r3, #1
 8005972:	e02d      	b.n	80059d0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	f1b3 3fff 	cmp.w	r3, #4294967295
 800597a:	d021      	beq.n	80059c0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800597c:	f7fd fbbe 	bl	80030fc <HAL_GetTick>
 8005980:	4602      	mov	r2, r0
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	1ad3      	subs	r3, r2, r3
 8005986:	68ba      	ldr	r2, [r7, #8]
 8005988:	429a      	cmp	r2, r3
 800598a:	d302      	bcc.n	8005992 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d116      	bne.n	80059c0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	2200      	movs	r2, #0
 8005996:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	2220      	movs	r2, #32
 800599c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	2200      	movs	r2, #0
 80059a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ac:	f043 0220 	orr.w	r2, r3, #32
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	2200      	movs	r2, #0
 80059b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80059bc:	2301      	movs	r3, #1
 80059be:	e007      	b.n	80059d0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	695b      	ldr	r3, [r3, #20]
 80059c6:	f003 0304 	and.w	r3, r3, #4
 80059ca:	2b04      	cmp	r3, #4
 80059cc:	d1ca      	bne.n	8005964 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80059ce:	2300      	movs	r3, #0
}
 80059d0:	4618      	mov	r0, r3
 80059d2:	3710      	adds	r7, #16
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bd80      	pop	{r7, pc}

080059d8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80059d8:	b480      	push	{r7}
 80059da:	b083      	sub	sp, #12
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	695b      	ldr	r3, [r3, #20]
 80059e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059ee:	d11b      	bne.n	8005a28 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80059f8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2200      	movs	r2, #0
 80059fe:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2220      	movs	r2, #32
 8005a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a14:	f043 0204 	orr.w	r2, r3, #4
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005a24:	2301      	movs	r3, #1
 8005a26:	e000      	b.n	8005a2a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005a28:	2300      	movs	r3, #0
}
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	370c      	adds	r7, #12
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a34:	4770      	bx	lr

08005a36 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005a36:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a38:	b08f      	sub	sp, #60	; 0x3c
 8005a3a:	af0a      	add	r7, sp, #40	; 0x28
 8005a3c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d101      	bne.n	8005a48 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005a44:	2301      	movs	r3, #1
 8005a46:	e10f      	b.n	8005c68 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8005a54:	b2db      	uxtb	r3, r3
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d106      	bne.n	8005a68 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	f007 fa44 	bl	800cef0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2203      	movs	r2, #3
 8005a6c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d102      	bne.n	8005a82 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4618      	mov	r0, r3
 8005a88:	f003 ff0b 	bl	80098a2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	603b      	str	r3, [r7, #0]
 8005a92:	687e      	ldr	r6, [r7, #4]
 8005a94:	466d      	mov	r5, sp
 8005a96:	f106 0410 	add.w	r4, r6, #16
 8005a9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005a9c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005a9e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005aa0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005aa2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005aa6:	e885 0003 	stmia.w	r5, {r0, r1}
 8005aaa:	1d33      	adds	r3, r6, #4
 8005aac:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005aae:	6838      	ldr	r0, [r7, #0]
 8005ab0:	f003 fde2 	bl	8009678 <USB_CoreInit>
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d005      	beq.n	8005ac6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2202      	movs	r2, #2
 8005abe:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	e0d0      	b.n	8005c68 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	2100      	movs	r1, #0
 8005acc:	4618      	mov	r0, r3
 8005ace:	f003 fef9 	bl	80098c4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	73fb      	strb	r3, [r7, #15]
 8005ad6:	e04a      	b.n	8005b6e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005ad8:	7bfa      	ldrb	r2, [r7, #15]
 8005ada:	6879      	ldr	r1, [r7, #4]
 8005adc:	4613      	mov	r3, r2
 8005ade:	00db      	lsls	r3, r3, #3
 8005ae0:	4413      	add	r3, r2
 8005ae2:	009b      	lsls	r3, r3, #2
 8005ae4:	440b      	add	r3, r1
 8005ae6:	333d      	adds	r3, #61	; 0x3d
 8005ae8:	2201      	movs	r2, #1
 8005aea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005aec:	7bfa      	ldrb	r2, [r7, #15]
 8005aee:	6879      	ldr	r1, [r7, #4]
 8005af0:	4613      	mov	r3, r2
 8005af2:	00db      	lsls	r3, r3, #3
 8005af4:	4413      	add	r3, r2
 8005af6:	009b      	lsls	r3, r3, #2
 8005af8:	440b      	add	r3, r1
 8005afa:	333c      	adds	r3, #60	; 0x3c
 8005afc:	7bfa      	ldrb	r2, [r7, #15]
 8005afe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005b00:	7bfa      	ldrb	r2, [r7, #15]
 8005b02:	7bfb      	ldrb	r3, [r7, #15]
 8005b04:	b298      	uxth	r0, r3
 8005b06:	6879      	ldr	r1, [r7, #4]
 8005b08:	4613      	mov	r3, r2
 8005b0a:	00db      	lsls	r3, r3, #3
 8005b0c:	4413      	add	r3, r2
 8005b0e:	009b      	lsls	r3, r3, #2
 8005b10:	440b      	add	r3, r1
 8005b12:	3344      	adds	r3, #68	; 0x44
 8005b14:	4602      	mov	r2, r0
 8005b16:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005b18:	7bfa      	ldrb	r2, [r7, #15]
 8005b1a:	6879      	ldr	r1, [r7, #4]
 8005b1c:	4613      	mov	r3, r2
 8005b1e:	00db      	lsls	r3, r3, #3
 8005b20:	4413      	add	r3, r2
 8005b22:	009b      	lsls	r3, r3, #2
 8005b24:	440b      	add	r3, r1
 8005b26:	3340      	adds	r3, #64	; 0x40
 8005b28:	2200      	movs	r2, #0
 8005b2a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005b2c:	7bfa      	ldrb	r2, [r7, #15]
 8005b2e:	6879      	ldr	r1, [r7, #4]
 8005b30:	4613      	mov	r3, r2
 8005b32:	00db      	lsls	r3, r3, #3
 8005b34:	4413      	add	r3, r2
 8005b36:	009b      	lsls	r3, r3, #2
 8005b38:	440b      	add	r3, r1
 8005b3a:	3348      	adds	r3, #72	; 0x48
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005b40:	7bfa      	ldrb	r2, [r7, #15]
 8005b42:	6879      	ldr	r1, [r7, #4]
 8005b44:	4613      	mov	r3, r2
 8005b46:	00db      	lsls	r3, r3, #3
 8005b48:	4413      	add	r3, r2
 8005b4a:	009b      	lsls	r3, r3, #2
 8005b4c:	440b      	add	r3, r1
 8005b4e:	334c      	adds	r3, #76	; 0x4c
 8005b50:	2200      	movs	r2, #0
 8005b52:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005b54:	7bfa      	ldrb	r2, [r7, #15]
 8005b56:	6879      	ldr	r1, [r7, #4]
 8005b58:	4613      	mov	r3, r2
 8005b5a:	00db      	lsls	r3, r3, #3
 8005b5c:	4413      	add	r3, r2
 8005b5e:	009b      	lsls	r3, r3, #2
 8005b60:	440b      	add	r3, r1
 8005b62:	3354      	adds	r3, #84	; 0x54
 8005b64:	2200      	movs	r2, #0
 8005b66:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005b68:	7bfb      	ldrb	r3, [r7, #15]
 8005b6a:	3301      	adds	r3, #1
 8005b6c:	73fb      	strb	r3, [r7, #15]
 8005b6e:	7bfa      	ldrb	r2, [r7, #15]
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	685b      	ldr	r3, [r3, #4]
 8005b74:	429a      	cmp	r2, r3
 8005b76:	d3af      	bcc.n	8005ad8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005b78:	2300      	movs	r3, #0
 8005b7a:	73fb      	strb	r3, [r7, #15]
 8005b7c:	e044      	b.n	8005c08 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005b7e:	7bfa      	ldrb	r2, [r7, #15]
 8005b80:	6879      	ldr	r1, [r7, #4]
 8005b82:	4613      	mov	r3, r2
 8005b84:	00db      	lsls	r3, r3, #3
 8005b86:	4413      	add	r3, r2
 8005b88:	009b      	lsls	r3, r3, #2
 8005b8a:	440b      	add	r3, r1
 8005b8c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8005b90:	2200      	movs	r2, #0
 8005b92:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005b94:	7bfa      	ldrb	r2, [r7, #15]
 8005b96:	6879      	ldr	r1, [r7, #4]
 8005b98:	4613      	mov	r3, r2
 8005b9a:	00db      	lsls	r3, r3, #3
 8005b9c:	4413      	add	r3, r2
 8005b9e:	009b      	lsls	r3, r3, #2
 8005ba0:	440b      	add	r3, r1
 8005ba2:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8005ba6:	7bfa      	ldrb	r2, [r7, #15]
 8005ba8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005baa:	7bfa      	ldrb	r2, [r7, #15]
 8005bac:	6879      	ldr	r1, [r7, #4]
 8005bae:	4613      	mov	r3, r2
 8005bb0:	00db      	lsls	r3, r3, #3
 8005bb2:	4413      	add	r3, r2
 8005bb4:	009b      	lsls	r3, r3, #2
 8005bb6:	440b      	add	r3, r1
 8005bb8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005bc0:	7bfa      	ldrb	r2, [r7, #15]
 8005bc2:	6879      	ldr	r1, [r7, #4]
 8005bc4:	4613      	mov	r3, r2
 8005bc6:	00db      	lsls	r3, r3, #3
 8005bc8:	4413      	add	r3, r2
 8005bca:	009b      	lsls	r3, r3, #2
 8005bcc:	440b      	add	r3, r1
 8005bce:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005bd6:	7bfa      	ldrb	r2, [r7, #15]
 8005bd8:	6879      	ldr	r1, [r7, #4]
 8005bda:	4613      	mov	r3, r2
 8005bdc:	00db      	lsls	r3, r3, #3
 8005bde:	4413      	add	r3, r2
 8005be0:	009b      	lsls	r3, r3, #2
 8005be2:	440b      	add	r3, r1
 8005be4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8005be8:	2200      	movs	r2, #0
 8005bea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005bec:	7bfa      	ldrb	r2, [r7, #15]
 8005bee:	6879      	ldr	r1, [r7, #4]
 8005bf0:	4613      	mov	r3, r2
 8005bf2:	00db      	lsls	r3, r3, #3
 8005bf4:	4413      	add	r3, r2
 8005bf6:	009b      	lsls	r3, r3, #2
 8005bf8:	440b      	add	r3, r1
 8005bfa:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005bfe:	2200      	movs	r2, #0
 8005c00:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005c02:	7bfb      	ldrb	r3, [r7, #15]
 8005c04:	3301      	adds	r3, #1
 8005c06:	73fb      	strb	r3, [r7, #15]
 8005c08:	7bfa      	ldrb	r2, [r7, #15]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	429a      	cmp	r2, r3
 8005c10:	d3b5      	bcc.n	8005b7e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	603b      	str	r3, [r7, #0]
 8005c18:	687e      	ldr	r6, [r7, #4]
 8005c1a:	466d      	mov	r5, sp
 8005c1c:	f106 0410 	add.w	r4, r6, #16
 8005c20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005c22:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005c24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005c26:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005c28:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005c2c:	e885 0003 	stmia.w	r5, {r0, r1}
 8005c30:	1d33      	adds	r3, r6, #4
 8005c32:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005c34:	6838      	ldr	r0, [r7, #0]
 8005c36:	f003 fe91 	bl	800995c <USB_DevInit>
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d005      	beq.n	8005c4c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2202      	movs	r2, #2
 8005c44:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005c48:	2301      	movs	r3, #1
 8005c4a:	e00d      	b.n	8005c68 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2201      	movs	r2, #1
 8005c58:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4618      	mov	r0, r3
 8005c62:	f004 ffe0 	bl	800ac26 <USB_DevDisconnect>

  return HAL_OK;
 8005c66:	2300      	movs	r3, #0
}
 8005c68:	4618      	mov	r0, r3
 8005c6a:	3714      	adds	r7, #20
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005c70 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b084      	sub	sp, #16
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005c84:	2b01      	cmp	r3, #1
 8005c86:	d101      	bne.n	8005c8c <HAL_PCD_Start+0x1c>
 8005c88:	2302      	movs	r3, #2
 8005c8a:	e020      	b.n	8005cce <HAL_PCD_Start+0x5e>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2201      	movs	r2, #1
 8005c90:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c98:	2b01      	cmp	r3, #1
 8005c9a:	d109      	bne.n	8005cb0 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005ca0:	2b01      	cmp	r3, #1
 8005ca2:	d005      	beq.n	8005cb0 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ca8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	f003 fde3 	bl	8009880 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	f004 ff90 	bl	800abe4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005ccc:	2300      	movs	r3, #0
}
 8005cce:	4618      	mov	r0, r3
 8005cd0:	3710      	adds	r7, #16
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bd80      	pop	{r7, pc}

08005cd6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005cd6:	b590      	push	{r4, r7, lr}
 8005cd8:	b08d      	sub	sp, #52	; 0x34
 8005cda:	af00      	add	r7, sp, #0
 8005cdc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ce4:	6a3b      	ldr	r3, [r7, #32]
 8005ce6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4618      	mov	r0, r3
 8005cee:	f005 f84e 	bl	800ad8e <USB_GetMode>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	f040 848a 	bne.w	800660e <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4618      	mov	r0, r3
 8005d00:	f004 ffb2 	bl	800ac68 <USB_ReadInterrupts>
 8005d04:	4603      	mov	r3, r0
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	f000 8480 	beq.w	800660c <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8005d0c:	69fb      	ldr	r3, [r7, #28]
 8005d0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d12:	689b      	ldr	r3, [r3, #8]
 8005d14:	0a1b      	lsrs	r3, r3, #8
 8005d16:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4618      	mov	r0, r3
 8005d26:	f004 ff9f 	bl	800ac68 <USB_ReadInterrupts>
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	f003 0302 	and.w	r3, r3, #2
 8005d30:	2b02      	cmp	r3, #2
 8005d32:	d107      	bne.n	8005d44 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	695a      	ldr	r2, [r3, #20]
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f002 0202 	and.w	r2, r2, #2
 8005d42:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4618      	mov	r0, r3
 8005d4a:	f004 ff8d 	bl	800ac68 <USB_ReadInterrupts>
 8005d4e:	4603      	mov	r3, r0
 8005d50:	f003 0310 	and.w	r3, r3, #16
 8005d54:	2b10      	cmp	r3, #16
 8005d56:	d161      	bne.n	8005e1c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	699a      	ldr	r2, [r3, #24]
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f022 0210 	bic.w	r2, r2, #16
 8005d66:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8005d68:	6a3b      	ldr	r3, [r7, #32]
 8005d6a:	6a1b      	ldr	r3, [r3, #32]
 8005d6c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8005d6e:	69bb      	ldr	r3, [r7, #24]
 8005d70:	f003 020f 	and.w	r2, r3, #15
 8005d74:	4613      	mov	r3, r2
 8005d76:	00db      	lsls	r3, r3, #3
 8005d78:	4413      	add	r3, r2
 8005d7a:	009b      	lsls	r3, r3, #2
 8005d7c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005d80:	687a      	ldr	r2, [r7, #4]
 8005d82:	4413      	add	r3, r2
 8005d84:	3304      	adds	r3, #4
 8005d86:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005d88:	69bb      	ldr	r3, [r7, #24]
 8005d8a:	0c5b      	lsrs	r3, r3, #17
 8005d8c:	f003 030f 	and.w	r3, r3, #15
 8005d90:	2b02      	cmp	r3, #2
 8005d92:	d124      	bne.n	8005dde <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005d94:	69ba      	ldr	r2, [r7, #24]
 8005d96:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8005d9a:	4013      	ands	r3, r2
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d035      	beq.n	8005e0c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005da4:	69bb      	ldr	r3, [r7, #24]
 8005da6:	091b      	lsrs	r3, r3, #4
 8005da8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005daa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005dae:	b29b      	uxth	r3, r3
 8005db0:	461a      	mov	r2, r3
 8005db2:	6a38      	ldr	r0, [r7, #32]
 8005db4:	f004 fdc4 	bl	800a940 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005db8:	697b      	ldr	r3, [r7, #20]
 8005dba:	691a      	ldr	r2, [r3, #16]
 8005dbc:	69bb      	ldr	r3, [r7, #24]
 8005dbe:	091b      	lsrs	r3, r3, #4
 8005dc0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005dc4:	441a      	add	r2, r3
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	6a1a      	ldr	r2, [r3, #32]
 8005dce:	69bb      	ldr	r3, [r7, #24]
 8005dd0:	091b      	lsrs	r3, r3, #4
 8005dd2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005dd6:	441a      	add	r2, r3
 8005dd8:	697b      	ldr	r3, [r7, #20]
 8005dda:	621a      	str	r2, [r3, #32]
 8005ddc:	e016      	b.n	8005e0c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8005dde:	69bb      	ldr	r3, [r7, #24]
 8005de0:	0c5b      	lsrs	r3, r3, #17
 8005de2:	f003 030f 	and.w	r3, r3, #15
 8005de6:	2b06      	cmp	r3, #6
 8005de8:	d110      	bne.n	8005e0c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005df0:	2208      	movs	r2, #8
 8005df2:	4619      	mov	r1, r3
 8005df4:	6a38      	ldr	r0, [r7, #32]
 8005df6:	f004 fda3 	bl	800a940 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	6a1a      	ldr	r2, [r3, #32]
 8005dfe:	69bb      	ldr	r3, [r7, #24]
 8005e00:	091b      	lsrs	r3, r3, #4
 8005e02:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005e06:	441a      	add	r2, r3
 8005e08:	697b      	ldr	r3, [r7, #20]
 8005e0a:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	699a      	ldr	r2, [r3, #24]
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f042 0210 	orr.w	r2, r2, #16
 8005e1a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4618      	mov	r0, r3
 8005e22:	f004 ff21 	bl	800ac68 <USB_ReadInterrupts>
 8005e26:	4603      	mov	r3, r0
 8005e28:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005e2c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005e30:	f040 80a7 	bne.w	8005f82 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8005e34:	2300      	movs	r3, #0
 8005e36:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	f004 ff26 	bl	800ac8e <USB_ReadDevAllOutEpInterrupt>
 8005e42:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8005e44:	e099      	b.n	8005f7a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e48:	f003 0301 	and.w	r3, r3, #1
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	f000 808e 	beq.w	8005f6e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e58:	b2d2      	uxtb	r2, r2
 8005e5a:	4611      	mov	r1, r2
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	f004 ff4a 	bl	800acf6 <USB_ReadDevOutEPInterrupt>
 8005e62:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	f003 0301 	and.w	r3, r3, #1
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d00c      	beq.n	8005e88 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e70:	015a      	lsls	r2, r3, #5
 8005e72:	69fb      	ldr	r3, [r7, #28]
 8005e74:	4413      	add	r3, r2
 8005e76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e7a:	461a      	mov	r2, r3
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005e80:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005e82:	6878      	ldr	r0, [r7, #4]
 8005e84:	f000 feaa 	bl	8006bdc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005e88:	693b      	ldr	r3, [r7, #16]
 8005e8a:	f003 0308 	and.w	r3, r3, #8
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d00c      	beq.n	8005eac <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e94:	015a      	lsls	r2, r3, #5
 8005e96:	69fb      	ldr	r3, [r7, #28]
 8005e98:	4413      	add	r3, r2
 8005e9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e9e:	461a      	mov	r2, r3
 8005ea0:	2308      	movs	r3, #8
 8005ea2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005ea4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f000 ff80 	bl	8006dac <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005eac:	693b      	ldr	r3, [r7, #16]
 8005eae:	f003 0310 	and.w	r3, r3, #16
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d008      	beq.n	8005ec8 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb8:	015a      	lsls	r2, r3, #5
 8005eba:	69fb      	ldr	r3, [r7, #28]
 8005ebc:	4413      	add	r3, r2
 8005ebe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ec2:	461a      	mov	r2, r3
 8005ec4:	2310      	movs	r3, #16
 8005ec6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8005ec8:	693b      	ldr	r3, [r7, #16]
 8005eca:	f003 0302 	and.w	r3, r3, #2
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d030      	beq.n	8005f34 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8005ed2:	6a3b      	ldr	r3, [r7, #32]
 8005ed4:	695b      	ldr	r3, [r3, #20]
 8005ed6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005eda:	2b80      	cmp	r3, #128	; 0x80
 8005edc:	d109      	bne.n	8005ef2 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8005ede:	69fb      	ldr	r3, [r7, #28]
 8005ee0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ee4:	685b      	ldr	r3, [r3, #4]
 8005ee6:	69fa      	ldr	r2, [r7, #28]
 8005ee8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005eec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005ef0:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8005ef2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ef4:	4613      	mov	r3, r2
 8005ef6:	00db      	lsls	r3, r3, #3
 8005ef8:	4413      	add	r3, r2
 8005efa:	009b      	lsls	r3, r3, #2
 8005efc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005f00:	687a      	ldr	r2, [r7, #4]
 8005f02:	4413      	add	r3, r2
 8005f04:	3304      	adds	r3, #4
 8005f06:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005f08:	697b      	ldr	r3, [r7, #20]
 8005f0a:	78db      	ldrb	r3, [r3, #3]
 8005f0c:	2b01      	cmp	r3, #1
 8005f0e:	d108      	bne.n	8005f22 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	2200      	movs	r2, #0
 8005f14:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f18:	b2db      	uxtb	r3, r3
 8005f1a:	4619      	mov	r1, r3
 8005f1c:	6878      	ldr	r0, [r7, #4]
 8005f1e:	f007 f8e3 	bl	800d0e8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8005f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f24:	015a      	lsls	r2, r3, #5
 8005f26:	69fb      	ldr	r3, [r7, #28]
 8005f28:	4413      	add	r3, r2
 8005f2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f2e:	461a      	mov	r2, r3
 8005f30:	2302      	movs	r3, #2
 8005f32:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	f003 0320 	and.w	r3, r3, #32
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d008      	beq.n	8005f50 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f40:	015a      	lsls	r2, r3, #5
 8005f42:	69fb      	ldr	r3, [r7, #28]
 8005f44:	4413      	add	r3, r2
 8005f46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f4a:	461a      	mov	r2, r3
 8005f4c:	2320      	movs	r3, #32
 8005f4e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005f50:	693b      	ldr	r3, [r7, #16]
 8005f52:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d009      	beq.n	8005f6e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f5c:	015a      	lsls	r2, r3, #5
 8005f5e:	69fb      	ldr	r3, [r7, #28]
 8005f60:	4413      	add	r3, r2
 8005f62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f66:	461a      	mov	r2, r3
 8005f68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005f6c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f70:	3301      	adds	r3, #1
 8005f72:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f76:	085b      	lsrs	r3, r3, #1
 8005f78:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	f47f af62 	bne.w	8005e46 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4618      	mov	r0, r3
 8005f88:	f004 fe6e 	bl	800ac68 <USB_ReadInterrupts>
 8005f8c:	4603      	mov	r3, r0
 8005f8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005f92:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005f96:	f040 80db 	bne.w	8006150 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	f004 fe8f 	bl	800acc2 <USB_ReadDevAllInEpInterrupt>
 8005fa4:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8005faa:	e0cd      	b.n	8006148 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fae:	f003 0301 	and.w	r3, r3, #1
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	f000 80c2 	beq.w	800613c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fbe:	b2d2      	uxtb	r2, r2
 8005fc0:	4611      	mov	r1, r2
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	f004 feb5 	bl	800ad32 <USB_ReadDevInEPInterrupt>
 8005fc8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005fca:	693b      	ldr	r3, [r7, #16]
 8005fcc:	f003 0301 	and.w	r3, r3, #1
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d057      	beq.n	8006084 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd6:	f003 030f 	and.w	r3, r3, #15
 8005fda:	2201      	movs	r2, #1
 8005fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8005fe0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005fe2:	69fb      	ldr	r3, [r7, #28]
 8005fe4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fe8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	43db      	mvns	r3, r3
 8005fee:	69f9      	ldr	r1, [r7, #28]
 8005ff0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ff4:	4013      	ands	r3, r2
 8005ff6:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ffa:	015a      	lsls	r2, r3, #5
 8005ffc:	69fb      	ldr	r3, [r7, #28]
 8005ffe:	4413      	add	r3, r2
 8006000:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006004:	461a      	mov	r2, r3
 8006006:	2301      	movs	r3, #1
 8006008:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	691b      	ldr	r3, [r3, #16]
 800600e:	2b01      	cmp	r3, #1
 8006010:	d132      	bne.n	8006078 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8006012:	6879      	ldr	r1, [r7, #4]
 8006014:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006016:	4613      	mov	r3, r2
 8006018:	00db      	lsls	r3, r3, #3
 800601a:	4413      	add	r3, r2
 800601c:	009b      	lsls	r3, r3, #2
 800601e:	440b      	add	r3, r1
 8006020:	334c      	adds	r3, #76	; 0x4c
 8006022:	6819      	ldr	r1, [r3, #0]
 8006024:	6878      	ldr	r0, [r7, #4]
 8006026:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006028:	4613      	mov	r3, r2
 800602a:	00db      	lsls	r3, r3, #3
 800602c:	4413      	add	r3, r2
 800602e:	009b      	lsls	r3, r3, #2
 8006030:	4403      	add	r3, r0
 8006032:	3348      	adds	r3, #72	; 0x48
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4419      	add	r1, r3
 8006038:	6878      	ldr	r0, [r7, #4]
 800603a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800603c:	4613      	mov	r3, r2
 800603e:	00db      	lsls	r3, r3, #3
 8006040:	4413      	add	r3, r2
 8006042:	009b      	lsls	r3, r3, #2
 8006044:	4403      	add	r3, r0
 8006046:	334c      	adds	r3, #76	; 0x4c
 8006048:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800604a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800604c:	2b00      	cmp	r3, #0
 800604e:	d113      	bne.n	8006078 <HAL_PCD_IRQHandler+0x3a2>
 8006050:	6879      	ldr	r1, [r7, #4]
 8006052:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006054:	4613      	mov	r3, r2
 8006056:	00db      	lsls	r3, r3, #3
 8006058:	4413      	add	r3, r2
 800605a:	009b      	lsls	r3, r3, #2
 800605c:	440b      	add	r3, r1
 800605e:	3354      	adds	r3, #84	; 0x54
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d108      	bne.n	8006078 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6818      	ldr	r0, [r3, #0]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006070:	461a      	mov	r2, r3
 8006072:	2101      	movs	r1, #1
 8006074:	f004 febc 	bl	800adf0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8006078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800607a:	b2db      	uxtb	r3, r3
 800607c:	4619      	mov	r1, r3
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f006 ffb7 	bl	800cff2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	f003 0308 	and.w	r3, r3, #8
 800608a:	2b00      	cmp	r3, #0
 800608c:	d008      	beq.n	80060a0 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800608e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006090:	015a      	lsls	r2, r3, #5
 8006092:	69fb      	ldr	r3, [r7, #28]
 8006094:	4413      	add	r3, r2
 8006096:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800609a:	461a      	mov	r2, r3
 800609c:	2308      	movs	r3, #8
 800609e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80060a0:	693b      	ldr	r3, [r7, #16]
 80060a2:	f003 0310 	and.w	r3, r3, #16
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d008      	beq.n	80060bc <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80060aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ac:	015a      	lsls	r2, r3, #5
 80060ae:	69fb      	ldr	r3, [r7, #28]
 80060b0:	4413      	add	r3, r2
 80060b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060b6:	461a      	mov	r2, r3
 80060b8:	2310      	movs	r3, #16
 80060ba:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80060bc:	693b      	ldr	r3, [r7, #16]
 80060be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d008      	beq.n	80060d8 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80060c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c8:	015a      	lsls	r2, r3, #5
 80060ca:	69fb      	ldr	r3, [r7, #28]
 80060cc:	4413      	add	r3, r2
 80060ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060d2:	461a      	mov	r2, r3
 80060d4:	2340      	movs	r3, #64	; 0x40
 80060d6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80060d8:	693b      	ldr	r3, [r7, #16]
 80060da:	f003 0302 	and.w	r3, r3, #2
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d023      	beq.n	800612a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80060e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80060e4:	6a38      	ldr	r0, [r7, #32]
 80060e6:	f003 fd9d 	bl	8009c24 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80060ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060ec:	4613      	mov	r3, r2
 80060ee:	00db      	lsls	r3, r3, #3
 80060f0:	4413      	add	r3, r2
 80060f2:	009b      	lsls	r3, r3, #2
 80060f4:	3338      	adds	r3, #56	; 0x38
 80060f6:	687a      	ldr	r2, [r7, #4]
 80060f8:	4413      	add	r3, r2
 80060fa:	3304      	adds	r3, #4
 80060fc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80060fe:	697b      	ldr	r3, [r7, #20]
 8006100:	78db      	ldrb	r3, [r3, #3]
 8006102:	2b01      	cmp	r3, #1
 8006104:	d108      	bne.n	8006118 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8006106:	697b      	ldr	r3, [r7, #20]
 8006108:	2200      	movs	r2, #0
 800610a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800610c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800610e:	b2db      	uxtb	r3, r3
 8006110:	4619      	mov	r1, r3
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	f006 fffa 	bl	800d10c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8006118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800611a:	015a      	lsls	r2, r3, #5
 800611c:	69fb      	ldr	r3, [r7, #28]
 800611e:	4413      	add	r3, r2
 8006120:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006124:	461a      	mov	r2, r3
 8006126:	2302      	movs	r3, #2
 8006128:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800612a:	693b      	ldr	r3, [r7, #16]
 800612c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006130:	2b00      	cmp	r3, #0
 8006132:	d003      	beq.n	800613c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8006134:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006136:	6878      	ldr	r0, [r7, #4]
 8006138:	f000 fcc3 	bl	8006ac2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800613c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800613e:	3301      	adds	r3, #1
 8006140:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8006142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006144:	085b      	lsrs	r3, r3, #1
 8006146:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800614a:	2b00      	cmp	r3, #0
 800614c:	f47f af2e 	bne.w	8005fac <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4618      	mov	r0, r3
 8006156:	f004 fd87 	bl	800ac68 <USB_ReadInterrupts>
 800615a:	4603      	mov	r3, r0
 800615c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006160:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006164:	d122      	bne.n	80061ac <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006166:	69fb      	ldr	r3, [r7, #28]
 8006168:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800616c:	685b      	ldr	r3, [r3, #4]
 800616e:	69fa      	ldr	r2, [r7, #28]
 8006170:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006174:	f023 0301 	bic.w	r3, r3, #1
 8006178:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8006180:	2b01      	cmp	r3, #1
 8006182:	d108      	bne.n	8006196 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2200      	movs	r2, #0
 8006188:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800618c:	2100      	movs	r1, #0
 800618e:	6878      	ldr	r0, [r7, #4]
 8006190:	f000 feaa 	bl	8006ee8 <HAL_PCDEx_LPM_Callback>
 8006194:	e002      	b.n	800619c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f006 ff98 	bl	800d0cc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	695a      	ldr	r2, [r3, #20]
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80061aa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4618      	mov	r0, r3
 80061b2:	f004 fd59 	bl	800ac68 <USB_ReadInterrupts>
 80061b6:	4603      	mov	r3, r0
 80061b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80061bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061c0:	d112      	bne.n	80061e8 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80061c2:	69fb      	ldr	r3, [r7, #28]
 80061c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061c8:	689b      	ldr	r3, [r3, #8]
 80061ca:	f003 0301 	and.w	r3, r3, #1
 80061ce:	2b01      	cmp	r3, #1
 80061d0:	d102      	bne.n	80061d8 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	f006 ff54 	bl	800d080 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	695a      	ldr	r2, [r3, #20]
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80061e6:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	4618      	mov	r0, r3
 80061ee:	f004 fd3b 	bl	800ac68 <USB_ReadInterrupts>
 80061f2:	4603      	mov	r3, r0
 80061f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80061f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061fc:	f040 80b7 	bne.w	800636e <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006200:	69fb      	ldr	r3, [r7, #28]
 8006202:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006206:	685b      	ldr	r3, [r3, #4]
 8006208:	69fa      	ldr	r2, [r7, #28]
 800620a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800620e:	f023 0301 	bic.w	r3, r3, #1
 8006212:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	2110      	movs	r1, #16
 800621a:	4618      	mov	r0, r3
 800621c:	f003 fd02 	bl	8009c24 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006220:	2300      	movs	r3, #0
 8006222:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006224:	e046      	b.n	80062b4 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8006226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006228:	015a      	lsls	r2, r3, #5
 800622a:	69fb      	ldr	r3, [r7, #28]
 800622c:	4413      	add	r3, r2
 800622e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006232:	461a      	mov	r2, r3
 8006234:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006238:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800623a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800623c:	015a      	lsls	r2, r3, #5
 800623e:	69fb      	ldr	r3, [r7, #28]
 8006240:	4413      	add	r3, r2
 8006242:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800624a:	0151      	lsls	r1, r2, #5
 800624c:	69fa      	ldr	r2, [r7, #28]
 800624e:	440a      	add	r2, r1
 8006250:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006254:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006258:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800625a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800625c:	015a      	lsls	r2, r3, #5
 800625e:	69fb      	ldr	r3, [r7, #28]
 8006260:	4413      	add	r3, r2
 8006262:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006266:	461a      	mov	r2, r3
 8006268:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800626c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800626e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006270:	015a      	lsls	r2, r3, #5
 8006272:	69fb      	ldr	r3, [r7, #28]
 8006274:	4413      	add	r3, r2
 8006276:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800627e:	0151      	lsls	r1, r2, #5
 8006280:	69fa      	ldr	r2, [r7, #28]
 8006282:	440a      	add	r2, r1
 8006284:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006288:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800628c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800628e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006290:	015a      	lsls	r2, r3, #5
 8006292:	69fb      	ldr	r3, [r7, #28]
 8006294:	4413      	add	r3, r2
 8006296:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800629e:	0151      	lsls	r1, r2, #5
 80062a0:	69fa      	ldr	r2, [r7, #28]
 80062a2:	440a      	add	r2, r1
 80062a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062a8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80062ac:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80062ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062b0:	3301      	adds	r3, #1
 80062b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	685b      	ldr	r3, [r3, #4]
 80062b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80062ba:	429a      	cmp	r2, r3
 80062bc:	d3b3      	bcc.n	8006226 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80062be:	69fb      	ldr	r3, [r7, #28]
 80062c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062c4:	69db      	ldr	r3, [r3, #28]
 80062c6:	69fa      	ldr	r2, [r7, #28]
 80062c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80062cc:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80062d0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d016      	beq.n	8006308 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80062da:	69fb      	ldr	r3, [r7, #28]
 80062dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80062e4:	69fa      	ldr	r2, [r7, #28]
 80062e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80062ea:	f043 030b 	orr.w	r3, r3, #11
 80062ee:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80062f2:	69fb      	ldr	r3, [r7, #28]
 80062f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062fa:	69fa      	ldr	r2, [r7, #28]
 80062fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006300:	f043 030b 	orr.w	r3, r3, #11
 8006304:	6453      	str	r3, [r2, #68]	; 0x44
 8006306:	e015      	b.n	8006334 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8006308:	69fb      	ldr	r3, [r7, #28]
 800630a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800630e:	695b      	ldr	r3, [r3, #20]
 8006310:	69fa      	ldr	r2, [r7, #28]
 8006312:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006316:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800631a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800631e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8006320:	69fb      	ldr	r3, [r7, #28]
 8006322:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006326:	691b      	ldr	r3, [r3, #16]
 8006328:	69fa      	ldr	r2, [r7, #28]
 800632a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800632e:	f043 030b 	orr.w	r3, r3, #11
 8006332:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8006334:	69fb      	ldr	r3, [r7, #28]
 8006336:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	69fa      	ldr	r2, [r7, #28]
 800633e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006342:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006346:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6818      	ldr	r0, [r3, #0]
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	691b      	ldr	r3, [r3, #16]
 8006350:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006358:	461a      	mov	r2, r3
 800635a:	f004 fd49 	bl	800adf0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	695a      	ldr	r2, [r3, #20]
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800636c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4618      	mov	r0, r3
 8006374:	f004 fc78 	bl	800ac68 <USB_ReadInterrupts>
 8006378:	4603      	mov	r3, r0
 800637a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800637e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006382:	d124      	bne.n	80063ce <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	4618      	mov	r0, r3
 800638a:	f004 fd0e 	bl	800adaa <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	4618      	mov	r0, r3
 8006394:	f003 fcc3 	bl	8009d1e <USB_GetDevSpeed>
 8006398:	4603      	mov	r3, r0
 800639a:	461a      	mov	r2, r3
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681c      	ldr	r4, [r3, #0]
 80063a4:	f001 f9d0 	bl	8007748 <HAL_RCC_GetHCLKFreq>
 80063a8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80063ae:	b2db      	uxtb	r3, r3
 80063b0:	461a      	mov	r2, r3
 80063b2:	4620      	mov	r0, r4
 80063b4:	f003 f9c2 	bl	800973c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80063b8:	6878      	ldr	r0, [r7, #4]
 80063ba:	f006 fe42 	bl	800d042 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	695a      	ldr	r2, [r3, #20]
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80063cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	4618      	mov	r0, r3
 80063d4:	f004 fc48 	bl	800ac68 <USB_ReadInterrupts>
 80063d8:	4603      	mov	r3, r0
 80063da:	f003 0308 	and.w	r3, r3, #8
 80063de:	2b08      	cmp	r3, #8
 80063e0:	d10a      	bne.n	80063f8 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f006 fe1f 	bl	800d026 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	695a      	ldr	r2, [r3, #20]
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f002 0208 	and.w	r2, r2, #8
 80063f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4618      	mov	r0, r3
 80063fe:	f004 fc33 	bl	800ac68 <USB_ReadInterrupts>
 8006402:	4603      	mov	r3, r0
 8006404:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006408:	2b80      	cmp	r3, #128	; 0x80
 800640a:	d122      	bne.n	8006452 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800640c:	6a3b      	ldr	r3, [r7, #32]
 800640e:	699b      	ldr	r3, [r3, #24]
 8006410:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006414:	6a3b      	ldr	r3, [r7, #32]
 8006416:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006418:	2301      	movs	r3, #1
 800641a:	627b      	str	r3, [r7, #36]	; 0x24
 800641c:	e014      	b.n	8006448 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800641e:	6879      	ldr	r1, [r7, #4]
 8006420:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006422:	4613      	mov	r3, r2
 8006424:	00db      	lsls	r3, r3, #3
 8006426:	4413      	add	r3, r2
 8006428:	009b      	lsls	r3, r3, #2
 800642a:	440b      	add	r3, r1
 800642c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8006430:	781b      	ldrb	r3, [r3, #0]
 8006432:	2b01      	cmp	r3, #1
 8006434:	d105      	bne.n	8006442 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8006436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006438:	b2db      	uxtb	r3, r3
 800643a:	4619      	mov	r1, r3
 800643c:	6878      	ldr	r0, [r7, #4]
 800643e:	f000 fb0f 	bl	8006a60 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006444:	3301      	adds	r3, #1
 8006446:	627b      	str	r3, [r7, #36]	; 0x24
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	685b      	ldr	r3, [r3, #4]
 800644c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800644e:	429a      	cmp	r2, r3
 8006450:	d3e5      	bcc.n	800641e <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4618      	mov	r0, r3
 8006458:	f004 fc06 	bl	800ac68 <USB_ReadInterrupts>
 800645c:	4603      	mov	r3, r0
 800645e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006462:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006466:	d13b      	bne.n	80064e0 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006468:	2301      	movs	r3, #1
 800646a:	627b      	str	r3, [r7, #36]	; 0x24
 800646c:	e02b      	b.n	80064c6 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800646e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006470:	015a      	lsls	r2, r3, #5
 8006472:	69fb      	ldr	r3, [r7, #28]
 8006474:	4413      	add	r3, r2
 8006476:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800647e:	6879      	ldr	r1, [r7, #4]
 8006480:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006482:	4613      	mov	r3, r2
 8006484:	00db      	lsls	r3, r3, #3
 8006486:	4413      	add	r3, r2
 8006488:	009b      	lsls	r3, r3, #2
 800648a:	440b      	add	r3, r1
 800648c:	3340      	adds	r3, #64	; 0x40
 800648e:	781b      	ldrb	r3, [r3, #0]
 8006490:	2b01      	cmp	r3, #1
 8006492:	d115      	bne.n	80064c0 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8006494:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006496:	2b00      	cmp	r3, #0
 8006498:	da12      	bge.n	80064c0 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800649a:	6879      	ldr	r1, [r7, #4]
 800649c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800649e:	4613      	mov	r3, r2
 80064a0:	00db      	lsls	r3, r3, #3
 80064a2:	4413      	add	r3, r2
 80064a4:	009b      	lsls	r3, r3, #2
 80064a6:	440b      	add	r3, r1
 80064a8:	333f      	adds	r3, #63	; 0x3f
 80064aa:	2201      	movs	r2, #1
 80064ac:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80064ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b0:	b2db      	uxtb	r3, r3
 80064b2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80064b6:	b2db      	uxtb	r3, r3
 80064b8:	4619      	mov	r1, r3
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f000 fad0 	bl	8006a60 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80064c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c2:	3301      	adds	r3, #1
 80064c4:	627b      	str	r3, [r7, #36]	; 0x24
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	685b      	ldr	r3, [r3, #4]
 80064ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064cc:	429a      	cmp	r2, r3
 80064ce:	d3ce      	bcc.n	800646e <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	695a      	ldr	r2, [r3, #20]
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80064de:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4618      	mov	r0, r3
 80064e6:	f004 fbbf 	bl	800ac68 <USB_ReadInterrupts>
 80064ea:	4603      	mov	r3, r0
 80064ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80064f0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80064f4:	d155      	bne.n	80065a2 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80064f6:	2301      	movs	r3, #1
 80064f8:	627b      	str	r3, [r7, #36]	; 0x24
 80064fa:	e045      	b.n	8006588 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80064fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064fe:	015a      	lsls	r2, r3, #5
 8006500:	69fb      	ldr	r3, [r7, #28]
 8006502:	4413      	add	r3, r2
 8006504:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800650c:	6879      	ldr	r1, [r7, #4]
 800650e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006510:	4613      	mov	r3, r2
 8006512:	00db      	lsls	r3, r3, #3
 8006514:	4413      	add	r3, r2
 8006516:	009b      	lsls	r3, r3, #2
 8006518:	440b      	add	r3, r1
 800651a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800651e:	781b      	ldrb	r3, [r3, #0]
 8006520:	2b01      	cmp	r3, #1
 8006522:	d12e      	bne.n	8006582 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006524:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006526:	2b00      	cmp	r3, #0
 8006528:	da2b      	bge.n	8006582 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800652a:	69bb      	ldr	r3, [r7, #24]
 800652c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8006536:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800653a:	429a      	cmp	r2, r3
 800653c:	d121      	bne.n	8006582 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800653e:	6879      	ldr	r1, [r7, #4]
 8006540:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006542:	4613      	mov	r3, r2
 8006544:	00db      	lsls	r3, r3, #3
 8006546:	4413      	add	r3, r2
 8006548:	009b      	lsls	r3, r3, #2
 800654a:	440b      	add	r3, r1
 800654c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8006550:	2201      	movs	r2, #1
 8006552:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8006554:	6a3b      	ldr	r3, [r7, #32]
 8006556:	699b      	ldr	r3, [r3, #24]
 8006558:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800655c:	6a3b      	ldr	r3, [r7, #32]
 800655e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8006560:	6a3b      	ldr	r3, [r7, #32]
 8006562:	695b      	ldr	r3, [r3, #20]
 8006564:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006568:	2b00      	cmp	r3, #0
 800656a:	d10a      	bne.n	8006582 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800656c:	69fb      	ldr	r3, [r7, #28]
 800656e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006572:	685b      	ldr	r3, [r3, #4]
 8006574:	69fa      	ldr	r2, [r7, #28]
 8006576:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800657a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800657e:	6053      	str	r3, [r2, #4]
            break;
 8006580:	e007      	b.n	8006592 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006584:	3301      	adds	r3, #1
 8006586:	627b      	str	r3, [r7, #36]	; 0x24
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	685b      	ldr	r3, [r3, #4]
 800658c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800658e:	429a      	cmp	r2, r3
 8006590:	d3b4      	bcc.n	80064fc <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	695a      	ldr	r2, [r3, #20]
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80065a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	4618      	mov	r0, r3
 80065a8:	f004 fb5e 	bl	800ac68 <USB_ReadInterrupts>
 80065ac:	4603      	mov	r3, r0
 80065ae:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80065b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065b6:	d10a      	bne.n	80065ce <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80065b8:	6878      	ldr	r0, [r7, #4]
 80065ba:	f006 fdb9 	bl	800d130 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	695a      	ldr	r2, [r3, #20]
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80065cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4618      	mov	r0, r3
 80065d4:	f004 fb48 	bl	800ac68 <USB_ReadInterrupts>
 80065d8:	4603      	mov	r3, r0
 80065da:	f003 0304 	and.w	r3, r3, #4
 80065de:	2b04      	cmp	r3, #4
 80065e0:	d115      	bne.n	800660e <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	685b      	ldr	r3, [r3, #4]
 80065e8:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80065ea:	69bb      	ldr	r3, [r7, #24]
 80065ec:	f003 0304 	and.w	r3, r3, #4
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d002      	beq.n	80065fa <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80065f4:	6878      	ldr	r0, [r7, #4]
 80065f6:	f006 fda9 	bl	800d14c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	6859      	ldr	r1, [r3, #4]
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	69ba      	ldr	r2, [r7, #24]
 8006606:	430a      	orrs	r2, r1
 8006608:	605a      	str	r2, [r3, #4]
 800660a:	e000      	b.n	800660e <HAL_PCD_IRQHandler+0x938>
      return;
 800660c:	bf00      	nop
    }
  }
}
 800660e:	3734      	adds	r7, #52	; 0x34
 8006610:	46bd      	mov	sp, r7
 8006612:	bd90      	pop	{r4, r7, pc}

08006614 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b082      	sub	sp, #8
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
 800661c:	460b      	mov	r3, r1
 800661e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006626:	2b01      	cmp	r3, #1
 8006628:	d101      	bne.n	800662e <HAL_PCD_SetAddress+0x1a>
 800662a:	2302      	movs	r3, #2
 800662c:	e013      	b.n	8006656 <HAL_PCD_SetAddress+0x42>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2201      	movs	r2, #1
 8006632:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	78fa      	ldrb	r2, [r7, #3]
 800663a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	78fa      	ldrb	r2, [r7, #3]
 8006644:	4611      	mov	r1, r2
 8006646:	4618      	mov	r0, r3
 8006648:	f004 faa6 	bl	800ab98 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2200      	movs	r2, #0
 8006650:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006654:	2300      	movs	r3, #0
}
 8006656:	4618      	mov	r0, r3
 8006658:	3708      	adds	r7, #8
 800665a:	46bd      	mov	sp, r7
 800665c:	bd80      	pop	{r7, pc}

0800665e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800665e:	b580      	push	{r7, lr}
 8006660:	b084      	sub	sp, #16
 8006662:	af00      	add	r7, sp, #0
 8006664:	6078      	str	r0, [r7, #4]
 8006666:	4608      	mov	r0, r1
 8006668:	4611      	mov	r1, r2
 800666a:	461a      	mov	r2, r3
 800666c:	4603      	mov	r3, r0
 800666e:	70fb      	strb	r3, [r7, #3]
 8006670:	460b      	mov	r3, r1
 8006672:	803b      	strh	r3, [r7, #0]
 8006674:	4613      	mov	r3, r2
 8006676:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8006678:	2300      	movs	r3, #0
 800667a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800667c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006680:	2b00      	cmp	r3, #0
 8006682:	da0f      	bge.n	80066a4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006684:	78fb      	ldrb	r3, [r7, #3]
 8006686:	f003 020f 	and.w	r2, r3, #15
 800668a:	4613      	mov	r3, r2
 800668c:	00db      	lsls	r3, r3, #3
 800668e:	4413      	add	r3, r2
 8006690:	009b      	lsls	r3, r3, #2
 8006692:	3338      	adds	r3, #56	; 0x38
 8006694:	687a      	ldr	r2, [r7, #4]
 8006696:	4413      	add	r3, r2
 8006698:	3304      	adds	r3, #4
 800669a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	2201      	movs	r2, #1
 80066a0:	705a      	strb	r2, [r3, #1]
 80066a2:	e00f      	b.n	80066c4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80066a4:	78fb      	ldrb	r3, [r7, #3]
 80066a6:	f003 020f 	and.w	r2, r3, #15
 80066aa:	4613      	mov	r3, r2
 80066ac:	00db      	lsls	r3, r3, #3
 80066ae:	4413      	add	r3, r2
 80066b0:	009b      	lsls	r3, r3, #2
 80066b2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80066b6:	687a      	ldr	r2, [r7, #4]
 80066b8:	4413      	add	r3, r2
 80066ba:	3304      	adds	r3, #4
 80066bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	2200      	movs	r2, #0
 80066c2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80066c4:	78fb      	ldrb	r3, [r7, #3]
 80066c6:	f003 030f 	and.w	r3, r3, #15
 80066ca:	b2da      	uxtb	r2, r3
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80066d0:	883a      	ldrh	r2, [r7, #0]
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	78ba      	ldrb	r2, [r7, #2]
 80066da:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	785b      	ldrb	r3, [r3, #1]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d004      	beq.n	80066ee <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	781b      	ldrb	r3, [r3, #0]
 80066e8:	b29a      	uxth	r2, r3
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80066ee:	78bb      	ldrb	r3, [r7, #2]
 80066f0:	2b02      	cmp	r3, #2
 80066f2:	d102      	bne.n	80066fa <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	2200      	movs	r2, #0
 80066f8:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006700:	2b01      	cmp	r3, #1
 8006702:	d101      	bne.n	8006708 <HAL_PCD_EP_Open+0xaa>
 8006704:	2302      	movs	r3, #2
 8006706:	e00e      	b.n	8006726 <HAL_PCD_EP_Open+0xc8>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2201      	movs	r2, #1
 800670c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	68f9      	ldr	r1, [r7, #12]
 8006716:	4618      	mov	r0, r3
 8006718:	f003 fb26 	bl	8009d68 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2200      	movs	r2, #0
 8006720:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8006724:	7afb      	ldrb	r3, [r7, #11]
}
 8006726:	4618      	mov	r0, r3
 8006728:	3710      	adds	r7, #16
 800672a:	46bd      	mov	sp, r7
 800672c:	bd80      	pop	{r7, pc}

0800672e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800672e:	b580      	push	{r7, lr}
 8006730:	b084      	sub	sp, #16
 8006732:	af00      	add	r7, sp, #0
 8006734:	6078      	str	r0, [r7, #4]
 8006736:	460b      	mov	r3, r1
 8006738:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800673a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800673e:	2b00      	cmp	r3, #0
 8006740:	da0f      	bge.n	8006762 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006742:	78fb      	ldrb	r3, [r7, #3]
 8006744:	f003 020f 	and.w	r2, r3, #15
 8006748:	4613      	mov	r3, r2
 800674a:	00db      	lsls	r3, r3, #3
 800674c:	4413      	add	r3, r2
 800674e:	009b      	lsls	r3, r3, #2
 8006750:	3338      	adds	r3, #56	; 0x38
 8006752:	687a      	ldr	r2, [r7, #4]
 8006754:	4413      	add	r3, r2
 8006756:	3304      	adds	r3, #4
 8006758:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	2201      	movs	r2, #1
 800675e:	705a      	strb	r2, [r3, #1]
 8006760:	e00f      	b.n	8006782 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006762:	78fb      	ldrb	r3, [r7, #3]
 8006764:	f003 020f 	and.w	r2, r3, #15
 8006768:	4613      	mov	r3, r2
 800676a:	00db      	lsls	r3, r3, #3
 800676c:	4413      	add	r3, r2
 800676e:	009b      	lsls	r3, r3, #2
 8006770:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006774:	687a      	ldr	r2, [r7, #4]
 8006776:	4413      	add	r3, r2
 8006778:	3304      	adds	r3, #4
 800677a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	2200      	movs	r2, #0
 8006780:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8006782:	78fb      	ldrb	r3, [r7, #3]
 8006784:	f003 030f 	and.w	r3, r3, #15
 8006788:	b2da      	uxtb	r2, r3
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006794:	2b01      	cmp	r3, #1
 8006796:	d101      	bne.n	800679c <HAL_PCD_EP_Close+0x6e>
 8006798:	2302      	movs	r3, #2
 800679a:	e00e      	b.n	80067ba <HAL_PCD_EP_Close+0x8c>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2201      	movs	r2, #1
 80067a0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	68f9      	ldr	r1, [r7, #12]
 80067aa:	4618      	mov	r0, r3
 80067ac:	f003 fb64 	bl	8009e78 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2200      	movs	r2, #0
 80067b4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80067b8:	2300      	movs	r3, #0
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	3710      	adds	r7, #16
 80067be:	46bd      	mov	sp, r7
 80067c0:	bd80      	pop	{r7, pc}

080067c2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80067c2:	b580      	push	{r7, lr}
 80067c4:	b086      	sub	sp, #24
 80067c6:	af00      	add	r7, sp, #0
 80067c8:	60f8      	str	r0, [r7, #12]
 80067ca:	607a      	str	r2, [r7, #4]
 80067cc:	603b      	str	r3, [r7, #0]
 80067ce:	460b      	mov	r3, r1
 80067d0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80067d2:	7afb      	ldrb	r3, [r7, #11]
 80067d4:	f003 020f 	and.w	r2, r3, #15
 80067d8:	4613      	mov	r3, r2
 80067da:	00db      	lsls	r3, r3, #3
 80067dc:	4413      	add	r3, r2
 80067de:	009b      	lsls	r3, r3, #2
 80067e0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80067e4:	68fa      	ldr	r2, [r7, #12]
 80067e6:	4413      	add	r3, r2
 80067e8:	3304      	adds	r3, #4
 80067ea:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80067ec:	697b      	ldr	r3, [r7, #20]
 80067ee:	687a      	ldr	r2, [r7, #4]
 80067f0:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80067f2:	697b      	ldr	r3, [r7, #20]
 80067f4:	683a      	ldr	r2, [r7, #0]
 80067f6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80067f8:	697b      	ldr	r3, [r7, #20]
 80067fa:	2200      	movs	r2, #0
 80067fc:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80067fe:	697b      	ldr	r3, [r7, #20]
 8006800:	2200      	movs	r2, #0
 8006802:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006804:	7afb      	ldrb	r3, [r7, #11]
 8006806:	f003 030f 	and.w	r3, r3, #15
 800680a:	b2da      	uxtb	r2, r3
 800680c:	697b      	ldr	r3, [r7, #20]
 800680e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	691b      	ldr	r3, [r3, #16]
 8006814:	2b01      	cmp	r3, #1
 8006816:	d102      	bne.n	800681e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006818:	687a      	ldr	r2, [r7, #4]
 800681a:	697b      	ldr	r3, [r7, #20]
 800681c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800681e:	7afb      	ldrb	r3, [r7, #11]
 8006820:	f003 030f 	and.w	r3, r3, #15
 8006824:	2b00      	cmp	r3, #0
 8006826:	d109      	bne.n	800683c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	6818      	ldr	r0, [r3, #0]
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	691b      	ldr	r3, [r3, #16]
 8006830:	b2db      	uxtb	r3, r3
 8006832:	461a      	mov	r2, r3
 8006834:	6979      	ldr	r1, [r7, #20]
 8006836:	f003 fe43 	bl	800a4c0 <USB_EP0StartXfer>
 800683a:	e008      	b.n	800684e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	6818      	ldr	r0, [r3, #0]
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	691b      	ldr	r3, [r3, #16]
 8006844:	b2db      	uxtb	r3, r3
 8006846:	461a      	mov	r2, r3
 8006848:	6979      	ldr	r1, [r7, #20]
 800684a:	f003 fbf1 	bl	800a030 <USB_EPStartXfer>
  }

  return HAL_OK;
 800684e:	2300      	movs	r3, #0
}
 8006850:	4618      	mov	r0, r3
 8006852:	3718      	adds	r7, #24
 8006854:	46bd      	mov	sp, r7
 8006856:	bd80      	pop	{r7, pc}

08006858 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b086      	sub	sp, #24
 800685c:	af00      	add	r7, sp, #0
 800685e:	60f8      	str	r0, [r7, #12]
 8006860:	607a      	str	r2, [r7, #4]
 8006862:	603b      	str	r3, [r7, #0]
 8006864:	460b      	mov	r3, r1
 8006866:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006868:	7afb      	ldrb	r3, [r7, #11]
 800686a:	f003 020f 	and.w	r2, r3, #15
 800686e:	4613      	mov	r3, r2
 8006870:	00db      	lsls	r3, r3, #3
 8006872:	4413      	add	r3, r2
 8006874:	009b      	lsls	r3, r3, #2
 8006876:	3338      	adds	r3, #56	; 0x38
 8006878:	68fa      	ldr	r2, [r7, #12]
 800687a:	4413      	add	r3, r2
 800687c:	3304      	adds	r3, #4
 800687e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006880:	697b      	ldr	r3, [r7, #20]
 8006882:	687a      	ldr	r2, [r7, #4]
 8006884:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8006886:	697b      	ldr	r3, [r7, #20]
 8006888:	683a      	ldr	r2, [r7, #0]
 800688a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800688c:	697b      	ldr	r3, [r7, #20]
 800688e:	2200      	movs	r2, #0
 8006890:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8006892:	697b      	ldr	r3, [r7, #20]
 8006894:	2201      	movs	r2, #1
 8006896:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006898:	7afb      	ldrb	r3, [r7, #11]
 800689a:	f003 030f 	and.w	r3, r3, #15
 800689e:	b2da      	uxtb	r2, r3
 80068a0:	697b      	ldr	r3, [r7, #20]
 80068a2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	691b      	ldr	r3, [r3, #16]
 80068a8:	2b01      	cmp	r3, #1
 80068aa:	d102      	bne.n	80068b2 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80068ac:	687a      	ldr	r2, [r7, #4]
 80068ae:	697b      	ldr	r3, [r7, #20]
 80068b0:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80068b2:	7afb      	ldrb	r3, [r7, #11]
 80068b4:	f003 030f 	and.w	r3, r3, #15
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d109      	bne.n	80068d0 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	6818      	ldr	r0, [r3, #0]
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	691b      	ldr	r3, [r3, #16]
 80068c4:	b2db      	uxtb	r3, r3
 80068c6:	461a      	mov	r2, r3
 80068c8:	6979      	ldr	r1, [r7, #20]
 80068ca:	f003 fdf9 	bl	800a4c0 <USB_EP0StartXfer>
 80068ce:	e008      	b.n	80068e2 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	6818      	ldr	r0, [r3, #0]
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	691b      	ldr	r3, [r3, #16]
 80068d8:	b2db      	uxtb	r3, r3
 80068da:	461a      	mov	r2, r3
 80068dc:	6979      	ldr	r1, [r7, #20]
 80068de:	f003 fba7 	bl	800a030 <USB_EPStartXfer>
  }

  return HAL_OK;
 80068e2:	2300      	movs	r3, #0
}
 80068e4:	4618      	mov	r0, r3
 80068e6:	3718      	adds	r7, #24
 80068e8:	46bd      	mov	sp, r7
 80068ea:	bd80      	pop	{r7, pc}

080068ec <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b084      	sub	sp, #16
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
 80068f4:	460b      	mov	r3, r1
 80068f6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80068f8:	78fb      	ldrb	r3, [r7, #3]
 80068fa:	f003 020f 	and.w	r2, r3, #15
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	685b      	ldr	r3, [r3, #4]
 8006902:	429a      	cmp	r2, r3
 8006904:	d901      	bls.n	800690a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006906:	2301      	movs	r3, #1
 8006908:	e050      	b.n	80069ac <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800690a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800690e:	2b00      	cmp	r3, #0
 8006910:	da0f      	bge.n	8006932 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006912:	78fb      	ldrb	r3, [r7, #3]
 8006914:	f003 020f 	and.w	r2, r3, #15
 8006918:	4613      	mov	r3, r2
 800691a:	00db      	lsls	r3, r3, #3
 800691c:	4413      	add	r3, r2
 800691e:	009b      	lsls	r3, r3, #2
 8006920:	3338      	adds	r3, #56	; 0x38
 8006922:	687a      	ldr	r2, [r7, #4]
 8006924:	4413      	add	r3, r2
 8006926:	3304      	adds	r3, #4
 8006928:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	2201      	movs	r2, #1
 800692e:	705a      	strb	r2, [r3, #1]
 8006930:	e00d      	b.n	800694e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006932:	78fa      	ldrb	r2, [r7, #3]
 8006934:	4613      	mov	r3, r2
 8006936:	00db      	lsls	r3, r3, #3
 8006938:	4413      	add	r3, r2
 800693a:	009b      	lsls	r3, r3, #2
 800693c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006940:	687a      	ldr	r2, [r7, #4]
 8006942:	4413      	add	r3, r2
 8006944:	3304      	adds	r3, #4
 8006946:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	2200      	movs	r2, #0
 800694c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	2201      	movs	r2, #1
 8006952:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006954:	78fb      	ldrb	r3, [r7, #3]
 8006956:	f003 030f 	and.w	r3, r3, #15
 800695a:	b2da      	uxtb	r2, r3
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006966:	2b01      	cmp	r3, #1
 8006968:	d101      	bne.n	800696e <HAL_PCD_EP_SetStall+0x82>
 800696a:	2302      	movs	r3, #2
 800696c:	e01e      	b.n	80069ac <HAL_PCD_EP_SetStall+0xc0>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2201      	movs	r2, #1
 8006972:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	68f9      	ldr	r1, [r7, #12]
 800697c:	4618      	mov	r0, r3
 800697e:	f004 f837 	bl	800a9f0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006982:	78fb      	ldrb	r3, [r7, #3]
 8006984:	f003 030f 	and.w	r3, r3, #15
 8006988:	2b00      	cmp	r3, #0
 800698a:	d10a      	bne.n	80069a2 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6818      	ldr	r0, [r3, #0]
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	691b      	ldr	r3, [r3, #16]
 8006994:	b2d9      	uxtb	r1, r3
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800699c:	461a      	mov	r2, r3
 800699e:	f004 fa27 	bl	800adf0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2200      	movs	r2, #0
 80069a6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80069aa:	2300      	movs	r3, #0
}
 80069ac:	4618      	mov	r0, r3
 80069ae:	3710      	adds	r7, #16
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bd80      	pop	{r7, pc}

080069b4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b084      	sub	sp, #16
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
 80069bc:	460b      	mov	r3, r1
 80069be:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80069c0:	78fb      	ldrb	r3, [r7, #3]
 80069c2:	f003 020f 	and.w	r2, r3, #15
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	685b      	ldr	r3, [r3, #4]
 80069ca:	429a      	cmp	r2, r3
 80069cc:	d901      	bls.n	80069d2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80069ce:	2301      	movs	r3, #1
 80069d0:	e042      	b.n	8006a58 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80069d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	da0f      	bge.n	80069fa <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80069da:	78fb      	ldrb	r3, [r7, #3]
 80069dc:	f003 020f 	and.w	r2, r3, #15
 80069e0:	4613      	mov	r3, r2
 80069e2:	00db      	lsls	r3, r3, #3
 80069e4:	4413      	add	r3, r2
 80069e6:	009b      	lsls	r3, r3, #2
 80069e8:	3338      	adds	r3, #56	; 0x38
 80069ea:	687a      	ldr	r2, [r7, #4]
 80069ec:	4413      	add	r3, r2
 80069ee:	3304      	adds	r3, #4
 80069f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	2201      	movs	r2, #1
 80069f6:	705a      	strb	r2, [r3, #1]
 80069f8:	e00f      	b.n	8006a1a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80069fa:	78fb      	ldrb	r3, [r7, #3]
 80069fc:	f003 020f 	and.w	r2, r3, #15
 8006a00:	4613      	mov	r3, r2
 8006a02:	00db      	lsls	r3, r3, #3
 8006a04:	4413      	add	r3, r2
 8006a06:	009b      	lsls	r3, r3, #2
 8006a08:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006a0c:	687a      	ldr	r2, [r7, #4]
 8006a0e:	4413      	add	r3, r2
 8006a10:	3304      	adds	r3, #4
 8006a12:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	2200      	movs	r2, #0
 8006a18:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006a20:	78fb      	ldrb	r3, [r7, #3]
 8006a22:	f003 030f 	and.w	r3, r3, #15
 8006a26:	b2da      	uxtb	r2, r3
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006a32:	2b01      	cmp	r3, #1
 8006a34:	d101      	bne.n	8006a3a <HAL_PCD_EP_ClrStall+0x86>
 8006a36:	2302      	movs	r3, #2
 8006a38:	e00e      	b.n	8006a58 <HAL_PCD_EP_ClrStall+0xa4>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2201      	movs	r2, #1
 8006a3e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	68f9      	ldr	r1, [r7, #12]
 8006a48:	4618      	mov	r0, r3
 8006a4a:	f004 f83f 	bl	800aacc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2200      	movs	r2, #0
 8006a52:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006a56:	2300      	movs	r3, #0
}
 8006a58:	4618      	mov	r0, r3
 8006a5a:	3710      	adds	r7, #16
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	bd80      	pop	{r7, pc}

08006a60 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b084      	sub	sp, #16
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
 8006a68:	460b      	mov	r3, r1
 8006a6a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8006a6c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	da0c      	bge.n	8006a8e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006a74:	78fb      	ldrb	r3, [r7, #3]
 8006a76:	f003 020f 	and.w	r2, r3, #15
 8006a7a:	4613      	mov	r3, r2
 8006a7c:	00db      	lsls	r3, r3, #3
 8006a7e:	4413      	add	r3, r2
 8006a80:	009b      	lsls	r3, r3, #2
 8006a82:	3338      	adds	r3, #56	; 0x38
 8006a84:	687a      	ldr	r2, [r7, #4]
 8006a86:	4413      	add	r3, r2
 8006a88:	3304      	adds	r3, #4
 8006a8a:	60fb      	str	r3, [r7, #12]
 8006a8c:	e00c      	b.n	8006aa8 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006a8e:	78fb      	ldrb	r3, [r7, #3]
 8006a90:	f003 020f 	and.w	r2, r3, #15
 8006a94:	4613      	mov	r3, r2
 8006a96:	00db      	lsls	r3, r3, #3
 8006a98:	4413      	add	r3, r2
 8006a9a:	009b      	lsls	r3, r3, #2
 8006a9c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006aa0:	687a      	ldr	r2, [r7, #4]
 8006aa2:	4413      	add	r3, r2
 8006aa4:	3304      	adds	r3, #4
 8006aa6:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	68f9      	ldr	r1, [r7, #12]
 8006aae:	4618      	mov	r0, r3
 8006ab0:	f003 fe5e 	bl	800a770 <USB_EPStopXfer>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	72fb      	strb	r3, [r7, #11]

  return ret;
 8006ab8:	7afb      	ldrb	r3, [r7, #11]
}
 8006aba:	4618      	mov	r0, r3
 8006abc:	3710      	adds	r7, #16
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	bd80      	pop	{r7, pc}

08006ac2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006ac2:	b580      	push	{r7, lr}
 8006ac4:	b08a      	sub	sp, #40	; 0x28
 8006ac6:	af02      	add	r7, sp, #8
 8006ac8:	6078      	str	r0, [r7, #4]
 8006aca:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ad2:	697b      	ldr	r3, [r7, #20]
 8006ad4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8006ad6:	683a      	ldr	r2, [r7, #0]
 8006ad8:	4613      	mov	r3, r2
 8006ada:	00db      	lsls	r3, r3, #3
 8006adc:	4413      	add	r3, r2
 8006ade:	009b      	lsls	r3, r3, #2
 8006ae0:	3338      	adds	r3, #56	; 0x38
 8006ae2:	687a      	ldr	r2, [r7, #4]
 8006ae4:	4413      	add	r3, r2
 8006ae6:	3304      	adds	r3, #4
 8006ae8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	6a1a      	ldr	r2, [r3, #32]
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	699b      	ldr	r3, [r3, #24]
 8006af2:	429a      	cmp	r2, r3
 8006af4:	d901      	bls.n	8006afa <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006af6:	2301      	movs	r3, #1
 8006af8:	e06c      	b.n	8006bd4 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	699a      	ldr	r2, [r3, #24]
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	6a1b      	ldr	r3, [r3, #32]
 8006b02:	1ad3      	subs	r3, r2, r3
 8006b04:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	68db      	ldr	r3, [r3, #12]
 8006b0a:	69fa      	ldr	r2, [r7, #28]
 8006b0c:	429a      	cmp	r2, r3
 8006b0e:	d902      	bls.n	8006b16 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	68db      	ldr	r3, [r3, #12]
 8006b14:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006b16:	69fb      	ldr	r3, [r7, #28]
 8006b18:	3303      	adds	r3, #3
 8006b1a:	089b      	lsrs	r3, r3, #2
 8006b1c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006b1e:	e02b      	b.n	8006b78 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	699a      	ldr	r2, [r3, #24]
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	6a1b      	ldr	r3, [r3, #32]
 8006b28:	1ad3      	subs	r3, r2, r3
 8006b2a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	68db      	ldr	r3, [r3, #12]
 8006b30:	69fa      	ldr	r2, [r7, #28]
 8006b32:	429a      	cmp	r2, r3
 8006b34:	d902      	bls.n	8006b3c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	68db      	ldr	r3, [r3, #12]
 8006b3a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8006b3c:	69fb      	ldr	r3, [r7, #28]
 8006b3e:	3303      	adds	r3, #3
 8006b40:	089b      	lsrs	r3, r3, #2
 8006b42:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	6919      	ldr	r1, [r3, #16]
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	b2da      	uxtb	r2, r3
 8006b4c:	69fb      	ldr	r3, [r7, #28]
 8006b4e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006b54:	b2db      	uxtb	r3, r3
 8006b56:	9300      	str	r3, [sp, #0]
 8006b58:	4603      	mov	r3, r0
 8006b5a:	6978      	ldr	r0, [r7, #20]
 8006b5c:	f003 feb2 	bl	800a8c4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	691a      	ldr	r2, [r3, #16]
 8006b64:	69fb      	ldr	r3, [r7, #28]
 8006b66:	441a      	add	r2, r3
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	6a1a      	ldr	r2, [r3, #32]
 8006b70:	69fb      	ldr	r3, [r7, #28]
 8006b72:	441a      	add	r2, r3
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	015a      	lsls	r2, r3, #5
 8006b7c:	693b      	ldr	r3, [r7, #16]
 8006b7e:	4413      	add	r3, r2
 8006b80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b84:	699b      	ldr	r3, [r3, #24]
 8006b86:	b29b      	uxth	r3, r3
 8006b88:	69ba      	ldr	r2, [r7, #24]
 8006b8a:	429a      	cmp	r2, r3
 8006b8c:	d809      	bhi.n	8006ba2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	6a1a      	ldr	r2, [r3, #32]
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006b96:	429a      	cmp	r2, r3
 8006b98:	d203      	bcs.n	8006ba2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	699b      	ldr	r3, [r3, #24]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d1be      	bne.n	8006b20 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	699a      	ldr	r2, [r3, #24]
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	6a1b      	ldr	r3, [r3, #32]
 8006baa:	429a      	cmp	r2, r3
 8006bac:	d811      	bhi.n	8006bd2 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	f003 030f 	and.w	r3, r3, #15
 8006bb4:	2201      	movs	r2, #1
 8006bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8006bba:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006bbc:	693b      	ldr	r3, [r7, #16]
 8006bbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bc2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	43db      	mvns	r3, r3
 8006bc8:	6939      	ldr	r1, [r7, #16]
 8006bca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006bce:	4013      	ands	r3, r2
 8006bd0:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8006bd2:	2300      	movs	r3, #0
}
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	3720      	adds	r7, #32
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bd80      	pop	{r7, pc}

08006bdc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b088      	sub	sp, #32
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
 8006be4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bec:	69fb      	ldr	r3, [r7, #28]
 8006bee:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006bf0:	69fb      	ldr	r3, [r7, #28]
 8006bf2:	333c      	adds	r3, #60	; 0x3c
 8006bf4:	3304      	adds	r3, #4
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	015a      	lsls	r2, r3, #5
 8006bfe:	69bb      	ldr	r3, [r7, #24]
 8006c00:	4413      	add	r3, r2
 8006c02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c06:	689b      	ldr	r3, [r3, #8]
 8006c08:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	691b      	ldr	r3, [r3, #16]
 8006c0e:	2b01      	cmp	r3, #1
 8006c10:	d17b      	bne.n	8006d0a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8006c12:	693b      	ldr	r3, [r7, #16]
 8006c14:	f003 0308 	and.w	r3, r3, #8
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d015      	beq.n	8006c48 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006c1c:	697b      	ldr	r3, [r7, #20]
 8006c1e:	4a61      	ldr	r2, [pc, #388]	; (8006da4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	f240 80b9 	bls.w	8006d98 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006c26:	693b      	ldr	r3, [r7, #16]
 8006c28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	f000 80b3 	beq.w	8006d98 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	015a      	lsls	r2, r3, #5
 8006c36:	69bb      	ldr	r3, [r7, #24]
 8006c38:	4413      	add	r3, r2
 8006c3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c3e:	461a      	mov	r2, r3
 8006c40:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c44:	6093      	str	r3, [r2, #8]
 8006c46:	e0a7      	b.n	8006d98 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006c48:	693b      	ldr	r3, [r7, #16]
 8006c4a:	f003 0320 	and.w	r3, r3, #32
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d009      	beq.n	8006c66 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	015a      	lsls	r2, r3, #5
 8006c56:	69bb      	ldr	r3, [r7, #24]
 8006c58:	4413      	add	r3, r2
 8006c5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c5e:	461a      	mov	r2, r3
 8006c60:	2320      	movs	r3, #32
 8006c62:	6093      	str	r3, [r2, #8]
 8006c64:	e098      	b.n	8006d98 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8006c66:	693b      	ldr	r3, [r7, #16]
 8006c68:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	f040 8093 	bne.w	8006d98 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006c72:	697b      	ldr	r3, [r7, #20]
 8006c74:	4a4b      	ldr	r2, [pc, #300]	; (8006da4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d90f      	bls.n	8006c9a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006c7a:	693b      	ldr	r3, [r7, #16]
 8006c7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d00a      	beq.n	8006c9a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	015a      	lsls	r2, r3, #5
 8006c88:	69bb      	ldr	r3, [r7, #24]
 8006c8a:	4413      	add	r3, r2
 8006c8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c90:	461a      	mov	r2, r3
 8006c92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c96:	6093      	str	r3, [r2, #8]
 8006c98:	e07e      	b.n	8006d98 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8006c9a:	683a      	ldr	r2, [r7, #0]
 8006c9c:	4613      	mov	r3, r2
 8006c9e:	00db      	lsls	r3, r3, #3
 8006ca0:	4413      	add	r3, r2
 8006ca2:	009b      	lsls	r3, r3, #2
 8006ca4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006ca8:	687a      	ldr	r2, [r7, #4]
 8006caa:	4413      	add	r3, r2
 8006cac:	3304      	adds	r3, #4
 8006cae:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	69da      	ldr	r2, [r3, #28]
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	0159      	lsls	r1, r3, #5
 8006cb8:	69bb      	ldr	r3, [r7, #24]
 8006cba:	440b      	add	r3, r1
 8006cbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cc0:	691b      	ldr	r3, [r3, #16]
 8006cc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006cc6:	1ad2      	subs	r2, r2, r3
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d114      	bne.n	8006cfc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	699b      	ldr	r3, [r3, #24]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d109      	bne.n	8006cee <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6818      	ldr	r0, [r3, #0]
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006ce4:	461a      	mov	r2, r3
 8006ce6:	2101      	movs	r1, #1
 8006ce8:	f004 f882 	bl	800adf0 <USB_EP0_OutStart>
 8006cec:	e006      	b.n	8006cfc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	691a      	ldr	r2, [r3, #16]
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	6a1b      	ldr	r3, [r3, #32]
 8006cf6:	441a      	add	r2, r3
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	b2db      	uxtb	r3, r3
 8006d00:	4619      	mov	r1, r3
 8006d02:	6878      	ldr	r0, [r7, #4]
 8006d04:	f006 f95a 	bl	800cfbc <HAL_PCD_DataOutStageCallback>
 8006d08:	e046      	b.n	8006d98 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006d0a:	697b      	ldr	r3, [r7, #20]
 8006d0c:	4a26      	ldr	r2, [pc, #152]	; (8006da8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d124      	bne.n	8006d5c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006d12:	693b      	ldr	r3, [r7, #16]
 8006d14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d00a      	beq.n	8006d32 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	015a      	lsls	r2, r3, #5
 8006d20:	69bb      	ldr	r3, [r7, #24]
 8006d22:	4413      	add	r3, r2
 8006d24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d28:	461a      	mov	r2, r3
 8006d2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d2e:	6093      	str	r3, [r2, #8]
 8006d30:	e032      	b.n	8006d98 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006d32:	693b      	ldr	r3, [r7, #16]
 8006d34:	f003 0320 	and.w	r3, r3, #32
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d008      	beq.n	8006d4e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	015a      	lsls	r2, r3, #5
 8006d40:	69bb      	ldr	r3, [r7, #24]
 8006d42:	4413      	add	r3, r2
 8006d44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d48:	461a      	mov	r2, r3
 8006d4a:	2320      	movs	r3, #32
 8006d4c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	b2db      	uxtb	r3, r3
 8006d52:	4619      	mov	r1, r3
 8006d54:	6878      	ldr	r0, [r7, #4]
 8006d56:	f006 f931 	bl	800cfbc <HAL_PCD_DataOutStageCallback>
 8006d5a:	e01d      	b.n	8006d98 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d114      	bne.n	8006d8c <PCD_EP_OutXfrComplete_int+0x1b0>
 8006d62:	6879      	ldr	r1, [r7, #4]
 8006d64:	683a      	ldr	r2, [r7, #0]
 8006d66:	4613      	mov	r3, r2
 8006d68:	00db      	lsls	r3, r3, #3
 8006d6a:	4413      	add	r3, r2
 8006d6c:	009b      	lsls	r3, r3, #2
 8006d6e:	440b      	add	r3, r1
 8006d70:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d108      	bne.n	8006d8c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6818      	ldr	r0, [r3, #0]
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006d84:	461a      	mov	r2, r3
 8006d86:	2100      	movs	r1, #0
 8006d88:	f004 f832 	bl	800adf0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	b2db      	uxtb	r3, r3
 8006d90:	4619      	mov	r1, r3
 8006d92:	6878      	ldr	r0, [r7, #4]
 8006d94:	f006 f912 	bl	800cfbc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006d98:	2300      	movs	r3, #0
}
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	3720      	adds	r7, #32
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	bd80      	pop	{r7, pc}
 8006da2:	bf00      	nop
 8006da4:	4f54300a 	.word	0x4f54300a
 8006da8:	4f54310a 	.word	0x4f54310a

08006dac <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b086      	sub	sp, #24
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
 8006db4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dbc:	697b      	ldr	r3, [r7, #20]
 8006dbe:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006dc0:	697b      	ldr	r3, [r7, #20]
 8006dc2:	333c      	adds	r3, #60	; 0x3c
 8006dc4:	3304      	adds	r3, #4
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	015a      	lsls	r2, r3, #5
 8006dce:	693b      	ldr	r3, [r7, #16]
 8006dd0:	4413      	add	r3, r2
 8006dd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dd6:	689b      	ldr	r3, [r3, #8]
 8006dd8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	4a15      	ldr	r2, [pc, #84]	; (8006e34 <PCD_EP_OutSetupPacket_int+0x88>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d90e      	bls.n	8006e00 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006de2:	68bb      	ldr	r3, [r7, #8]
 8006de4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d009      	beq.n	8006e00 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	015a      	lsls	r2, r3, #5
 8006df0:	693b      	ldr	r3, [r7, #16]
 8006df2:	4413      	add	r3, r2
 8006df4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006df8:	461a      	mov	r2, r3
 8006dfa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006dfe:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006e00:	6878      	ldr	r0, [r7, #4]
 8006e02:	f006 f8c9 	bl	800cf98 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	4a0a      	ldr	r2, [pc, #40]	; (8006e34 <PCD_EP_OutSetupPacket_int+0x88>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d90c      	bls.n	8006e28 <PCD_EP_OutSetupPacket_int+0x7c>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	691b      	ldr	r3, [r3, #16]
 8006e12:	2b01      	cmp	r3, #1
 8006e14:	d108      	bne.n	8006e28 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6818      	ldr	r0, [r3, #0]
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006e20:	461a      	mov	r2, r3
 8006e22:	2101      	movs	r1, #1
 8006e24:	f003 ffe4 	bl	800adf0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006e28:	2300      	movs	r3, #0
}
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	3718      	adds	r7, #24
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bd80      	pop	{r7, pc}
 8006e32:	bf00      	nop
 8006e34:	4f54300a 	.word	0x4f54300a

08006e38 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006e38:	b480      	push	{r7}
 8006e3a:	b085      	sub	sp, #20
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
 8006e40:	460b      	mov	r3, r1
 8006e42:	70fb      	strb	r3, [r7, #3]
 8006e44:	4613      	mov	r3, r2
 8006e46:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e4e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006e50:	78fb      	ldrb	r3, [r7, #3]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d107      	bne.n	8006e66 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006e56:	883b      	ldrh	r3, [r7, #0]
 8006e58:	0419      	lsls	r1, r3, #16
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	68ba      	ldr	r2, [r7, #8]
 8006e60:	430a      	orrs	r2, r1
 8006e62:	629a      	str	r2, [r3, #40]	; 0x28
 8006e64:	e028      	b.n	8006eb8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e6c:	0c1b      	lsrs	r3, r3, #16
 8006e6e:	68ba      	ldr	r2, [r7, #8]
 8006e70:	4413      	add	r3, r2
 8006e72:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006e74:	2300      	movs	r3, #0
 8006e76:	73fb      	strb	r3, [r7, #15]
 8006e78:	e00d      	b.n	8006e96 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681a      	ldr	r2, [r3, #0]
 8006e7e:	7bfb      	ldrb	r3, [r7, #15]
 8006e80:	3340      	adds	r3, #64	; 0x40
 8006e82:	009b      	lsls	r3, r3, #2
 8006e84:	4413      	add	r3, r2
 8006e86:	685b      	ldr	r3, [r3, #4]
 8006e88:	0c1b      	lsrs	r3, r3, #16
 8006e8a:	68ba      	ldr	r2, [r7, #8]
 8006e8c:	4413      	add	r3, r2
 8006e8e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006e90:	7bfb      	ldrb	r3, [r7, #15]
 8006e92:	3301      	adds	r3, #1
 8006e94:	73fb      	strb	r3, [r7, #15]
 8006e96:	7bfa      	ldrb	r2, [r7, #15]
 8006e98:	78fb      	ldrb	r3, [r7, #3]
 8006e9a:	3b01      	subs	r3, #1
 8006e9c:	429a      	cmp	r2, r3
 8006e9e:	d3ec      	bcc.n	8006e7a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006ea0:	883b      	ldrh	r3, [r7, #0]
 8006ea2:	0418      	lsls	r0, r3, #16
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6819      	ldr	r1, [r3, #0]
 8006ea8:	78fb      	ldrb	r3, [r7, #3]
 8006eaa:	3b01      	subs	r3, #1
 8006eac:	68ba      	ldr	r2, [r7, #8]
 8006eae:	4302      	orrs	r2, r0
 8006eb0:	3340      	adds	r3, #64	; 0x40
 8006eb2:	009b      	lsls	r3, r3, #2
 8006eb4:	440b      	add	r3, r1
 8006eb6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006eb8:	2300      	movs	r3, #0
}
 8006eba:	4618      	mov	r0, r3
 8006ebc:	3714      	adds	r7, #20
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec4:	4770      	bx	lr

08006ec6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8006ec6:	b480      	push	{r7}
 8006ec8:	b083      	sub	sp, #12
 8006eca:	af00      	add	r7, sp, #0
 8006ecc:	6078      	str	r0, [r7, #4]
 8006ece:	460b      	mov	r3, r1
 8006ed0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	887a      	ldrh	r2, [r7, #2]
 8006ed8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006eda:	2300      	movs	r3, #0
}
 8006edc:	4618      	mov	r0, r3
 8006ede:	370c      	adds	r7, #12
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee6:	4770      	bx	lr

08006ee8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006ee8:	b480      	push	{r7}
 8006eea:	b083      	sub	sp, #12
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
 8006ef0:	460b      	mov	r3, r1
 8006ef2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006ef4:	bf00      	nop
 8006ef6:	370c      	adds	r7, #12
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efe:	4770      	bx	lr

08006f00 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b086      	sub	sp, #24
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d101      	bne.n	8006f12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006f0e:	2301      	movs	r3, #1
 8006f10:	e267      	b.n	80073e2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f003 0301 	and.w	r3, r3, #1
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d075      	beq.n	800700a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006f1e:	4b88      	ldr	r3, [pc, #544]	; (8007140 <HAL_RCC_OscConfig+0x240>)
 8006f20:	689b      	ldr	r3, [r3, #8]
 8006f22:	f003 030c 	and.w	r3, r3, #12
 8006f26:	2b04      	cmp	r3, #4
 8006f28:	d00c      	beq.n	8006f44 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006f2a:	4b85      	ldr	r3, [pc, #532]	; (8007140 <HAL_RCC_OscConfig+0x240>)
 8006f2c:	689b      	ldr	r3, [r3, #8]
 8006f2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006f32:	2b08      	cmp	r3, #8
 8006f34:	d112      	bne.n	8006f5c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006f36:	4b82      	ldr	r3, [pc, #520]	; (8007140 <HAL_RCC_OscConfig+0x240>)
 8006f38:	685b      	ldr	r3, [r3, #4]
 8006f3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f3e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006f42:	d10b      	bne.n	8006f5c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f44:	4b7e      	ldr	r3, [pc, #504]	; (8007140 <HAL_RCC_OscConfig+0x240>)
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d05b      	beq.n	8007008 <HAL_RCC_OscConfig+0x108>
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	685b      	ldr	r3, [r3, #4]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d157      	bne.n	8007008 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006f58:	2301      	movs	r3, #1
 8006f5a:	e242      	b.n	80073e2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	685b      	ldr	r3, [r3, #4]
 8006f60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f64:	d106      	bne.n	8006f74 <HAL_RCC_OscConfig+0x74>
 8006f66:	4b76      	ldr	r3, [pc, #472]	; (8007140 <HAL_RCC_OscConfig+0x240>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	4a75      	ldr	r2, [pc, #468]	; (8007140 <HAL_RCC_OscConfig+0x240>)
 8006f6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f70:	6013      	str	r3, [r2, #0]
 8006f72:	e01d      	b.n	8006fb0 <HAL_RCC_OscConfig+0xb0>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	685b      	ldr	r3, [r3, #4]
 8006f78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006f7c:	d10c      	bne.n	8006f98 <HAL_RCC_OscConfig+0x98>
 8006f7e:	4b70      	ldr	r3, [pc, #448]	; (8007140 <HAL_RCC_OscConfig+0x240>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	4a6f      	ldr	r2, [pc, #444]	; (8007140 <HAL_RCC_OscConfig+0x240>)
 8006f84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006f88:	6013      	str	r3, [r2, #0]
 8006f8a:	4b6d      	ldr	r3, [pc, #436]	; (8007140 <HAL_RCC_OscConfig+0x240>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	4a6c      	ldr	r2, [pc, #432]	; (8007140 <HAL_RCC_OscConfig+0x240>)
 8006f90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f94:	6013      	str	r3, [r2, #0]
 8006f96:	e00b      	b.n	8006fb0 <HAL_RCC_OscConfig+0xb0>
 8006f98:	4b69      	ldr	r3, [pc, #420]	; (8007140 <HAL_RCC_OscConfig+0x240>)
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	4a68      	ldr	r2, [pc, #416]	; (8007140 <HAL_RCC_OscConfig+0x240>)
 8006f9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006fa2:	6013      	str	r3, [r2, #0]
 8006fa4:	4b66      	ldr	r3, [pc, #408]	; (8007140 <HAL_RCC_OscConfig+0x240>)
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4a65      	ldr	r2, [pc, #404]	; (8007140 <HAL_RCC_OscConfig+0x240>)
 8006faa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006fae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	685b      	ldr	r3, [r3, #4]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d013      	beq.n	8006fe0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006fb8:	f7fc f8a0 	bl	80030fc <HAL_GetTick>
 8006fbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006fbe:	e008      	b.n	8006fd2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006fc0:	f7fc f89c 	bl	80030fc <HAL_GetTick>
 8006fc4:	4602      	mov	r2, r0
 8006fc6:	693b      	ldr	r3, [r7, #16]
 8006fc8:	1ad3      	subs	r3, r2, r3
 8006fca:	2b64      	cmp	r3, #100	; 0x64
 8006fcc:	d901      	bls.n	8006fd2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006fce:	2303      	movs	r3, #3
 8006fd0:	e207      	b.n	80073e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006fd2:	4b5b      	ldr	r3, [pc, #364]	; (8007140 <HAL_RCC_OscConfig+0x240>)
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d0f0      	beq.n	8006fc0 <HAL_RCC_OscConfig+0xc0>
 8006fde:	e014      	b.n	800700a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006fe0:	f7fc f88c 	bl	80030fc <HAL_GetTick>
 8006fe4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006fe6:	e008      	b.n	8006ffa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006fe8:	f7fc f888 	bl	80030fc <HAL_GetTick>
 8006fec:	4602      	mov	r2, r0
 8006fee:	693b      	ldr	r3, [r7, #16]
 8006ff0:	1ad3      	subs	r3, r2, r3
 8006ff2:	2b64      	cmp	r3, #100	; 0x64
 8006ff4:	d901      	bls.n	8006ffa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006ff6:	2303      	movs	r3, #3
 8006ff8:	e1f3      	b.n	80073e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006ffa:	4b51      	ldr	r3, [pc, #324]	; (8007140 <HAL_RCC_OscConfig+0x240>)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007002:	2b00      	cmp	r3, #0
 8007004:	d1f0      	bne.n	8006fe8 <HAL_RCC_OscConfig+0xe8>
 8007006:	e000      	b.n	800700a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007008:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f003 0302 	and.w	r3, r3, #2
 8007012:	2b00      	cmp	r3, #0
 8007014:	d063      	beq.n	80070de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007016:	4b4a      	ldr	r3, [pc, #296]	; (8007140 <HAL_RCC_OscConfig+0x240>)
 8007018:	689b      	ldr	r3, [r3, #8]
 800701a:	f003 030c 	and.w	r3, r3, #12
 800701e:	2b00      	cmp	r3, #0
 8007020:	d00b      	beq.n	800703a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007022:	4b47      	ldr	r3, [pc, #284]	; (8007140 <HAL_RCC_OscConfig+0x240>)
 8007024:	689b      	ldr	r3, [r3, #8]
 8007026:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800702a:	2b08      	cmp	r3, #8
 800702c:	d11c      	bne.n	8007068 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800702e:	4b44      	ldr	r3, [pc, #272]	; (8007140 <HAL_RCC_OscConfig+0x240>)
 8007030:	685b      	ldr	r3, [r3, #4]
 8007032:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007036:	2b00      	cmp	r3, #0
 8007038:	d116      	bne.n	8007068 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800703a:	4b41      	ldr	r3, [pc, #260]	; (8007140 <HAL_RCC_OscConfig+0x240>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f003 0302 	and.w	r3, r3, #2
 8007042:	2b00      	cmp	r3, #0
 8007044:	d005      	beq.n	8007052 <HAL_RCC_OscConfig+0x152>
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	68db      	ldr	r3, [r3, #12]
 800704a:	2b01      	cmp	r3, #1
 800704c:	d001      	beq.n	8007052 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800704e:	2301      	movs	r3, #1
 8007050:	e1c7      	b.n	80073e2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007052:	4b3b      	ldr	r3, [pc, #236]	; (8007140 <HAL_RCC_OscConfig+0x240>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	691b      	ldr	r3, [r3, #16]
 800705e:	00db      	lsls	r3, r3, #3
 8007060:	4937      	ldr	r1, [pc, #220]	; (8007140 <HAL_RCC_OscConfig+0x240>)
 8007062:	4313      	orrs	r3, r2
 8007064:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007066:	e03a      	b.n	80070de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	68db      	ldr	r3, [r3, #12]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d020      	beq.n	80070b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007070:	4b34      	ldr	r3, [pc, #208]	; (8007144 <HAL_RCC_OscConfig+0x244>)
 8007072:	2201      	movs	r2, #1
 8007074:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007076:	f7fc f841 	bl	80030fc <HAL_GetTick>
 800707a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800707c:	e008      	b.n	8007090 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800707e:	f7fc f83d 	bl	80030fc <HAL_GetTick>
 8007082:	4602      	mov	r2, r0
 8007084:	693b      	ldr	r3, [r7, #16]
 8007086:	1ad3      	subs	r3, r2, r3
 8007088:	2b02      	cmp	r3, #2
 800708a:	d901      	bls.n	8007090 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800708c:	2303      	movs	r3, #3
 800708e:	e1a8      	b.n	80073e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007090:	4b2b      	ldr	r3, [pc, #172]	; (8007140 <HAL_RCC_OscConfig+0x240>)
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f003 0302 	and.w	r3, r3, #2
 8007098:	2b00      	cmp	r3, #0
 800709a:	d0f0      	beq.n	800707e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800709c:	4b28      	ldr	r3, [pc, #160]	; (8007140 <HAL_RCC_OscConfig+0x240>)
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	691b      	ldr	r3, [r3, #16]
 80070a8:	00db      	lsls	r3, r3, #3
 80070aa:	4925      	ldr	r1, [pc, #148]	; (8007140 <HAL_RCC_OscConfig+0x240>)
 80070ac:	4313      	orrs	r3, r2
 80070ae:	600b      	str	r3, [r1, #0]
 80070b0:	e015      	b.n	80070de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80070b2:	4b24      	ldr	r3, [pc, #144]	; (8007144 <HAL_RCC_OscConfig+0x244>)
 80070b4:	2200      	movs	r2, #0
 80070b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070b8:	f7fc f820 	bl	80030fc <HAL_GetTick>
 80070bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80070be:	e008      	b.n	80070d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80070c0:	f7fc f81c 	bl	80030fc <HAL_GetTick>
 80070c4:	4602      	mov	r2, r0
 80070c6:	693b      	ldr	r3, [r7, #16]
 80070c8:	1ad3      	subs	r3, r2, r3
 80070ca:	2b02      	cmp	r3, #2
 80070cc:	d901      	bls.n	80070d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80070ce:	2303      	movs	r3, #3
 80070d0:	e187      	b.n	80073e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80070d2:	4b1b      	ldr	r3, [pc, #108]	; (8007140 <HAL_RCC_OscConfig+0x240>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f003 0302 	and.w	r3, r3, #2
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d1f0      	bne.n	80070c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f003 0308 	and.w	r3, r3, #8
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d036      	beq.n	8007158 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	695b      	ldr	r3, [r3, #20]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d016      	beq.n	8007120 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80070f2:	4b15      	ldr	r3, [pc, #84]	; (8007148 <HAL_RCC_OscConfig+0x248>)
 80070f4:	2201      	movs	r2, #1
 80070f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070f8:	f7fc f800 	bl	80030fc <HAL_GetTick>
 80070fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80070fe:	e008      	b.n	8007112 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007100:	f7fb fffc 	bl	80030fc <HAL_GetTick>
 8007104:	4602      	mov	r2, r0
 8007106:	693b      	ldr	r3, [r7, #16]
 8007108:	1ad3      	subs	r3, r2, r3
 800710a:	2b02      	cmp	r3, #2
 800710c:	d901      	bls.n	8007112 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800710e:	2303      	movs	r3, #3
 8007110:	e167      	b.n	80073e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007112:	4b0b      	ldr	r3, [pc, #44]	; (8007140 <HAL_RCC_OscConfig+0x240>)
 8007114:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007116:	f003 0302 	and.w	r3, r3, #2
 800711a:	2b00      	cmp	r3, #0
 800711c:	d0f0      	beq.n	8007100 <HAL_RCC_OscConfig+0x200>
 800711e:	e01b      	b.n	8007158 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007120:	4b09      	ldr	r3, [pc, #36]	; (8007148 <HAL_RCC_OscConfig+0x248>)
 8007122:	2200      	movs	r2, #0
 8007124:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007126:	f7fb ffe9 	bl	80030fc <HAL_GetTick>
 800712a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800712c:	e00e      	b.n	800714c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800712e:	f7fb ffe5 	bl	80030fc <HAL_GetTick>
 8007132:	4602      	mov	r2, r0
 8007134:	693b      	ldr	r3, [r7, #16]
 8007136:	1ad3      	subs	r3, r2, r3
 8007138:	2b02      	cmp	r3, #2
 800713a:	d907      	bls.n	800714c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800713c:	2303      	movs	r3, #3
 800713e:	e150      	b.n	80073e2 <HAL_RCC_OscConfig+0x4e2>
 8007140:	40023800 	.word	0x40023800
 8007144:	42470000 	.word	0x42470000
 8007148:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800714c:	4b88      	ldr	r3, [pc, #544]	; (8007370 <HAL_RCC_OscConfig+0x470>)
 800714e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007150:	f003 0302 	and.w	r3, r3, #2
 8007154:	2b00      	cmp	r3, #0
 8007156:	d1ea      	bne.n	800712e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f003 0304 	and.w	r3, r3, #4
 8007160:	2b00      	cmp	r3, #0
 8007162:	f000 8097 	beq.w	8007294 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007166:	2300      	movs	r3, #0
 8007168:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800716a:	4b81      	ldr	r3, [pc, #516]	; (8007370 <HAL_RCC_OscConfig+0x470>)
 800716c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800716e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007172:	2b00      	cmp	r3, #0
 8007174:	d10f      	bne.n	8007196 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007176:	2300      	movs	r3, #0
 8007178:	60bb      	str	r3, [r7, #8]
 800717a:	4b7d      	ldr	r3, [pc, #500]	; (8007370 <HAL_RCC_OscConfig+0x470>)
 800717c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800717e:	4a7c      	ldr	r2, [pc, #496]	; (8007370 <HAL_RCC_OscConfig+0x470>)
 8007180:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007184:	6413      	str	r3, [r2, #64]	; 0x40
 8007186:	4b7a      	ldr	r3, [pc, #488]	; (8007370 <HAL_RCC_OscConfig+0x470>)
 8007188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800718a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800718e:	60bb      	str	r3, [r7, #8]
 8007190:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007192:	2301      	movs	r3, #1
 8007194:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007196:	4b77      	ldr	r3, [pc, #476]	; (8007374 <HAL_RCC_OscConfig+0x474>)
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d118      	bne.n	80071d4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80071a2:	4b74      	ldr	r3, [pc, #464]	; (8007374 <HAL_RCC_OscConfig+0x474>)
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	4a73      	ldr	r2, [pc, #460]	; (8007374 <HAL_RCC_OscConfig+0x474>)
 80071a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80071ae:	f7fb ffa5 	bl	80030fc <HAL_GetTick>
 80071b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80071b4:	e008      	b.n	80071c8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80071b6:	f7fb ffa1 	bl	80030fc <HAL_GetTick>
 80071ba:	4602      	mov	r2, r0
 80071bc:	693b      	ldr	r3, [r7, #16]
 80071be:	1ad3      	subs	r3, r2, r3
 80071c0:	2b02      	cmp	r3, #2
 80071c2:	d901      	bls.n	80071c8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80071c4:	2303      	movs	r3, #3
 80071c6:	e10c      	b.n	80073e2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80071c8:	4b6a      	ldr	r3, [pc, #424]	; (8007374 <HAL_RCC_OscConfig+0x474>)
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d0f0      	beq.n	80071b6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	689b      	ldr	r3, [r3, #8]
 80071d8:	2b01      	cmp	r3, #1
 80071da:	d106      	bne.n	80071ea <HAL_RCC_OscConfig+0x2ea>
 80071dc:	4b64      	ldr	r3, [pc, #400]	; (8007370 <HAL_RCC_OscConfig+0x470>)
 80071de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071e0:	4a63      	ldr	r2, [pc, #396]	; (8007370 <HAL_RCC_OscConfig+0x470>)
 80071e2:	f043 0301 	orr.w	r3, r3, #1
 80071e6:	6713      	str	r3, [r2, #112]	; 0x70
 80071e8:	e01c      	b.n	8007224 <HAL_RCC_OscConfig+0x324>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	689b      	ldr	r3, [r3, #8]
 80071ee:	2b05      	cmp	r3, #5
 80071f0:	d10c      	bne.n	800720c <HAL_RCC_OscConfig+0x30c>
 80071f2:	4b5f      	ldr	r3, [pc, #380]	; (8007370 <HAL_RCC_OscConfig+0x470>)
 80071f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071f6:	4a5e      	ldr	r2, [pc, #376]	; (8007370 <HAL_RCC_OscConfig+0x470>)
 80071f8:	f043 0304 	orr.w	r3, r3, #4
 80071fc:	6713      	str	r3, [r2, #112]	; 0x70
 80071fe:	4b5c      	ldr	r3, [pc, #368]	; (8007370 <HAL_RCC_OscConfig+0x470>)
 8007200:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007202:	4a5b      	ldr	r2, [pc, #364]	; (8007370 <HAL_RCC_OscConfig+0x470>)
 8007204:	f043 0301 	orr.w	r3, r3, #1
 8007208:	6713      	str	r3, [r2, #112]	; 0x70
 800720a:	e00b      	b.n	8007224 <HAL_RCC_OscConfig+0x324>
 800720c:	4b58      	ldr	r3, [pc, #352]	; (8007370 <HAL_RCC_OscConfig+0x470>)
 800720e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007210:	4a57      	ldr	r2, [pc, #348]	; (8007370 <HAL_RCC_OscConfig+0x470>)
 8007212:	f023 0301 	bic.w	r3, r3, #1
 8007216:	6713      	str	r3, [r2, #112]	; 0x70
 8007218:	4b55      	ldr	r3, [pc, #340]	; (8007370 <HAL_RCC_OscConfig+0x470>)
 800721a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800721c:	4a54      	ldr	r2, [pc, #336]	; (8007370 <HAL_RCC_OscConfig+0x470>)
 800721e:	f023 0304 	bic.w	r3, r3, #4
 8007222:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	689b      	ldr	r3, [r3, #8]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d015      	beq.n	8007258 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800722c:	f7fb ff66 	bl	80030fc <HAL_GetTick>
 8007230:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007232:	e00a      	b.n	800724a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007234:	f7fb ff62 	bl	80030fc <HAL_GetTick>
 8007238:	4602      	mov	r2, r0
 800723a:	693b      	ldr	r3, [r7, #16]
 800723c:	1ad3      	subs	r3, r2, r3
 800723e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007242:	4293      	cmp	r3, r2
 8007244:	d901      	bls.n	800724a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007246:	2303      	movs	r3, #3
 8007248:	e0cb      	b.n	80073e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800724a:	4b49      	ldr	r3, [pc, #292]	; (8007370 <HAL_RCC_OscConfig+0x470>)
 800724c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800724e:	f003 0302 	and.w	r3, r3, #2
 8007252:	2b00      	cmp	r3, #0
 8007254:	d0ee      	beq.n	8007234 <HAL_RCC_OscConfig+0x334>
 8007256:	e014      	b.n	8007282 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007258:	f7fb ff50 	bl	80030fc <HAL_GetTick>
 800725c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800725e:	e00a      	b.n	8007276 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007260:	f7fb ff4c 	bl	80030fc <HAL_GetTick>
 8007264:	4602      	mov	r2, r0
 8007266:	693b      	ldr	r3, [r7, #16]
 8007268:	1ad3      	subs	r3, r2, r3
 800726a:	f241 3288 	movw	r2, #5000	; 0x1388
 800726e:	4293      	cmp	r3, r2
 8007270:	d901      	bls.n	8007276 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007272:	2303      	movs	r3, #3
 8007274:	e0b5      	b.n	80073e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007276:	4b3e      	ldr	r3, [pc, #248]	; (8007370 <HAL_RCC_OscConfig+0x470>)
 8007278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800727a:	f003 0302 	and.w	r3, r3, #2
 800727e:	2b00      	cmp	r3, #0
 8007280:	d1ee      	bne.n	8007260 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007282:	7dfb      	ldrb	r3, [r7, #23]
 8007284:	2b01      	cmp	r3, #1
 8007286:	d105      	bne.n	8007294 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007288:	4b39      	ldr	r3, [pc, #228]	; (8007370 <HAL_RCC_OscConfig+0x470>)
 800728a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800728c:	4a38      	ldr	r2, [pc, #224]	; (8007370 <HAL_RCC_OscConfig+0x470>)
 800728e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007292:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	699b      	ldr	r3, [r3, #24]
 8007298:	2b00      	cmp	r3, #0
 800729a:	f000 80a1 	beq.w	80073e0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800729e:	4b34      	ldr	r3, [pc, #208]	; (8007370 <HAL_RCC_OscConfig+0x470>)
 80072a0:	689b      	ldr	r3, [r3, #8]
 80072a2:	f003 030c 	and.w	r3, r3, #12
 80072a6:	2b08      	cmp	r3, #8
 80072a8:	d05c      	beq.n	8007364 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	699b      	ldr	r3, [r3, #24]
 80072ae:	2b02      	cmp	r3, #2
 80072b0:	d141      	bne.n	8007336 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80072b2:	4b31      	ldr	r3, [pc, #196]	; (8007378 <HAL_RCC_OscConfig+0x478>)
 80072b4:	2200      	movs	r2, #0
 80072b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80072b8:	f7fb ff20 	bl	80030fc <HAL_GetTick>
 80072bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80072be:	e008      	b.n	80072d2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80072c0:	f7fb ff1c 	bl	80030fc <HAL_GetTick>
 80072c4:	4602      	mov	r2, r0
 80072c6:	693b      	ldr	r3, [r7, #16]
 80072c8:	1ad3      	subs	r3, r2, r3
 80072ca:	2b02      	cmp	r3, #2
 80072cc:	d901      	bls.n	80072d2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80072ce:	2303      	movs	r3, #3
 80072d0:	e087      	b.n	80073e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80072d2:	4b27      	ldr	r3, [pc, #156]	; (8007370 <HAL_RCC_OscConfig+0x470>)
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d1f0      	bne.n	80072c0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	69da      	ldr	r2, [r3, #28]
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6a1b      	ldr	r3, [r3, #32]
 80072e6:	431a      	orrs	r2, r3
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ec:	019b      	lsls	r3, r3, #6
 80072ee:	431a      	orrs	r2, r3
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072f4:	085b      	lsrs	r3, r3, #1
 80072f6:	3b01      	subs	r3, #1
 80072f8:	041b      	lsls	r3, r3, #16
 80072fa:	431a      	orrs	r2, r3
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007300:	061b      	lsls	r3, r3, #24
 8007302:	491b      	ldr	r1, [pc, #108]	; (8007370 <HAL_RCC_OscConfig+0x470>)
 8007304:	4313      	orrs	r3, r2
 8007306:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007308:	4b1b      	ldr	r3, [pc, #108]	; (8007378 <HAL_RCC_OscConfig+0x478>)
 800730a:	2201      	movs	r2, #1
 800730c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800730e:	f7fb fef5 	bl	80030fc <HAL_GetTick>
 8007312:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007314:	e008      	b.n	8007328 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007316:	f7fb fef1 	bl	80030fc <HAL_GetTick>
 800731a:	4602      	mov	r2, r0
 800731c:	693b      	ldr	r3, [r7, #16]
 800731e:	1ad3      	subs	r3, r2, r3
 8007320:	2b02      	cmp	r3, #2
 8007322:	d901      	bls.n	8007328 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007324:	2303      	movs	r3, #3
 8007326:	e05c      	b.n	80073e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007328:	4b11      	ldr	r3, [pc, #68]	; (8007370 <HAL_RCC_OscConfig+0x470>)
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007330:	2b00      	cmp	r3, #0
 8007332:	d0f0      	beq.n	8007316 <HAL_RCC_OscConfig+0x416>
 8007334:	e054      	b.n	80073e0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007336:	4b10      	ldr	r3, [pc, #64]	; (8007378 <HAL_RCC_OscConfig+0x478>)
 8007338:	2200      	movs	r2, #0
 800733a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800733c:	f7fb fede 	bl	80030fc <HAL_GetTick>
 8007340:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007342:	e008      	b.n	8007356 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007344:	f7fb feda 	bl	80030fc <HAL_GetTick>
 8007348:	4602      	mov	r2, r0
 800734a:	693b      	ldr	r3, [r7, #16]
 800734c:	1ad3      	subs	r3, r2, r3
 800734e:	2b02      	cmp	r3, #2
 8007350:	d901      	bls.n	8007356 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007352:	2303      	movs	r3, #3
 8007354:	e045      	b.n	80073e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007356:	4b06      	ldr	r3, [pc, #24]	; (8007370 <HAL_RCC_OscConfig+0x470>)
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800735e:	2b00      	cmp	r3, #0
 8007360:	d1f0      	bne.n	8007344 <HAL_RCC_OscConfig+0x444>
 8007362:	e03d      	b.n	80073e0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	699b      	ldr	r3, [r3, #24]
 8007368:	2b01      	cmp	r3, #1
 800736a:	d107      	bne.n	800737c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800736c:	2301      	movs	r3, #1
 800736e:	e038      	b.n	80073e2 <HAL_RCC_OscConfig+0x4e2>
 8007370:	40023800 	.word	0x40023800
 8007374:	40007000 	.word	0x40007000
 8007378:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800737c:	4b1b      	ldr	r3, [pc, #108]	; (80073ec <HAL_RCC_OscConfig+0x4ec>)
 800737e:	685b      	ldr	r3, [r3, #4]
 8007380:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	699b      	ldr	r3, [r3, #24]
 8007386:	2b01      	cmp	r3, #1
 8007388:	d028      	beq.n	80073dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007394:	429a      	cmp	r2, r3
 8007396:	d121      	bne.n	80073dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80073a2:	429a      	cmp	r2, r3
 80073a4:	d11a      	bne.n	80073dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80073a6:	68fa      	ldr	r2, [r7, #12]
 80073a8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80073ac:	4013      	ands	r3, r2
 80073ae:	687a      	ldr	r2, [r7, #4]
 80073b0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80073b2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80073b4:	4293      	cmp	r3, r2
 80073b6:	d111      	bne.n	80073dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073c2:	085b      	lsrs	r3, r3, #1
 80073c4:	3b01      	subs	r3, #1
 80073c6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80073c8:	429a      	cmp	r2, r3
 80073ca:	d107      	bne.n	80073dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073d6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80073d8:	429a      	cmp	r2, r3
 80073da:	d001      	beq.n	80073e0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80073dc:	2301      	movs	r3, #1
 80073de:	e000      	b.n	80073e2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80073e0:	2300      	movs	r3, #0
}
 80073e2:	4618      	mov	r0, r3
 80073e4:	3718      	adds	r7, #24
 80073e6:	46bd      	mov	sp, r7
 80073e8:	bd80      	pop	{r7, pc}
 80073ea:	bf00      	nop
 80073ec:	40023800 	.word	0x40023800

080073f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b084      	sub	sp, #16
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
 80073f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d101      	bne.n	8007404 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007400:	2301      	movs	r3, #1
 8007402:	e0cc      	b.n	800759e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007404:	4b68      	ldr	r3, [pc, #416]	; (80075a8 <HAL_RCC_ClockConfig+0x1b8>)
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f003 0307 	and.w	r3, r3, #7
 800740c:	683a      	ldr	r2, [r7, #0]
 800740e:	429a      	cmp	r2, r3
 8007410:	d90c      	bls.n	800742c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007412:	4b65      	ldr	r3, [pc, #404]	; (80075a8 <HAL_RCC_ClockConfig+0x1b8>)
 8007414:	683a      	ldr	r2, [r7, #0]
 8007416:	b2d2      	uxtb	r2, r2
 8007418:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800741a:	4b63      	ldr	r3, [pc, #396]	; (80075a8 <HAL_RCC_ClockConfig+0x1b8>)
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f003 0307 	and.w	r3, r3, #7
 8007422:	683a      	ldr	r2, [r7, #0]
 8007424:	429a      	cmp	r2, r3
 8007426:	d001      	beq.n	800742c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007428:	2301      	movs	r3, #1
 800742a:	e0b8      	b.n	800759e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f003 0302 	and.w	r3, r3, #2
 8007434:	2b00      	cmp	r3, #0
 8007436:	d020      	beq.n	800747a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f003 0304 	and.w	r3, r3, #4
 8007440:	2b00      	cmp	r3, #0
 8007442:	d005      	beq.n	8007450 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007444:	4b59      	ldr	r3, [pc, #356]	; (80075ac <HAL_RCC_ClockConfig+0x1bc>)
 8007446:	689b      	ldr	r3, [r3, #8]
 8007448:	4a58      	ldr	r2, [pc, #352]	; (80075ac <HAL_RCC_ClockConfig+0x1bc>)
 800744a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800744e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f003 0308 	and.w	r3, r3, #8
 8007458:	2b00      	cmp	r3, #0
 800745a:	d005      	beq.n	8007468 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800745c:	4b53      	ldr	r3, [pc, #332]	; (80075ac <HAL_RCC_ClockConfig+0x1bc>)
 800745e:	689b      	ldr	r3, [r3, #8]
 8007460:	4a52      	ldr	r2, [pc, #328]	; (80075ac <HAL_RCC_ClockConfig+0x1bc>)
 8007462:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007466:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007468:	4b50      	ldr	r3, [pc, #320]	; (80075ac <HAL_RCC_ClockConfig+0x1bc>)
 800746a:	689b      	ldr	r3, [r3, #8]
 800746c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	689b      	ldr	r3, [r3, #8]
 8007474:	494d      	ldr	r1, [pc, #308]	; (80075ac <HAL_RCC_ClockConfig+0x1bc>)
 8007476:	4313      	orrs	r3, r2
 8007478:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f003 0301 	and.w	r3, r3, #1
 8007482:	2b00      	cmp	r3, #0
 8007484:	d044      	beq.n	8007510 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	685b      	ldr	r3, [r3, #4]
 800748a:	2b01      	cmp	r3, #1
 800748c:	d107      	bne.n	800749e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800748e:	4b47      	ldr	r3, [pc, #284]	; (80075ac <HAL_RCC_ClockConfig+0x1bc>)
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007496:	2b00      	cmp	r3, #0
 8007498:	d119      	bne.n	80074ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800749a:	2301      	movs	r3, #1
 800749c:	e07f      	b.n	800759e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	685b      	ldr	r3, [r3, #4]
 80074a2:	2b02      	cmp	r3, #2
 80074a4:	d003      	beq.n	80074ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80074aa:	2b03      	cmp	r3, #3
 80074ac:	d107      	bne.n	80074be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80074ae:	4b3f      	ldr	r3, [pc, #252]	; (80075ac <HAL_RCC_ClockConfig+0x1bc>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d109      	bne.n	80074ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80074ba:	2301      	movs	r3, #1
 80074bc:	e06f      	b.n	800759e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80074be:	4b3b      	ldr	r3, [pc, #236]	; (80075ac <HAL_RCC_ClockConfig+0x1bc>)
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f003 0302 	and.w	r3, r3, #2
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d101      	bne.n	80074ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80074ca:	2301      	movs	r3, #1
 80074cc:	e067      	b.n	800759e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80074ce:	4b37      	ldr	r3, [pc, #220]	; (80075ac <HAL_RCC_ClockConfig+0x1bc>)
 80074d0:	689b      	ldr	r3, [r3, #8]
 80074d2:	f023 0203 	bic.w	r2, r3, #3
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	685b      	ldr	r3, [r3, #4]
 80074da:	4934      	ldr	r1, [pc, #208]	; (80075ac <HAL_RCC_ClockConfig+0x1bc>)
 80074dc:	4313      	orrs	r3, r2
 80074de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80074e0:	f7fb fe0c 	bl	80030fc <HAL_GetTick>
 80074e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80074e6:	e00a      	b.n	80074fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80074e8:	f7fb fe08 	bl	80030fc <HAL_GetTick>
 80074ec:	4602      	mov	r2, r0
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	1ad3      	subs	r3, r2, r3
 80074f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d901      	bls.n	80074fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80074fa:	2303      	movs	r3, #3
 80074fc:	e04f      	b.n	800759e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80074fe:	4b2b      	ldr	r3, [pc, #172]	; (80075ac <HAL_RCC_ClockConfig+0x1bc>)
 8007500:	689b      	ldr	r3, [r3, #8]
 8007502:	f003 020c 	and.w	r2, r3, #12
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	685b      	ldr	r3, [r3, #4]
 800750a:	009b      	lsls	r3, r3, #2
 800750c:	429a      	cmp	r2, r3
 800750e:	d1eb      	bne.n	80074e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007510:	4b25      	ldr	r3, [pc, #148]	; (80075a8 <HAL_RCC_ClockConfig+0x1b8>)
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f003 0307 	and.w	r3, r3, #7
 8007518:	683a      	ldr	r2, [r7, #0]
 800751a:	429a      	cmp	r2, r3
 800751c:	d20c      	bcs.n	8007538 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800751e:	4b22      	ldr	r3, [pc, #136]	; (80075a8 <HAL_RCC_ClockConfig+0x1b8>)
 8007520:	683a      	ldr	r2, [r7, #0]
 8007522:	b2d2      	uxtb	r2, r2
 8007524:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007526:	4b20      	ldr	r3, [pc, #128]	; (80075a8 <HAL_RCC_ClockConfig+0x1b8>)
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f003 0307 	and.w	r3, r3, #7
 800752e:	683a      	ldr	r2, [r7, #0]
 8007530:	429a      	cmp	r2, r3
 8007532:	d001      	beq.n	8007538 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007534:	2301      	movs	r3, #1
 8007536:	e032      	b.n	800759e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f003 0304 	and.w	r3, r3, #4
 8007540:	2b00      	cmp	r3, #0
 8007542:	d008      	beq.n	8007556 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007544:	4b19      	ldr	r3, [pc, #100]	; (80075ac <HAL_RCC_ClockConfig+0x1bc>)
 8007546:	689b      	ldr	r3, [r3, #8]
 8007548:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	68db      	ldr	r3, [r3, #12]
 8007550:	4916      	ldr	r1, [pc, #88]	; (80075ac <HAL_RCC_ClockConfig+0x1bc>)
 8007552:	4313      	orrs	r3, r2
 8007554:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f003 0308 	and.w	r3, r3, #8
 800755e:	2b00      	cmp	r3, #0
 8007560:	d009      	beq.n	8007576 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007562:	4b12      	ldr	r3, [pc, #72]	; (80075ac <HAL_RCC_ClockConfig+0x1bc>)
 8007564:	689b      	ldr	r3, [r3, #8]
 8007566:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	691b      	ldr	r3, [r3, #16]
 800756e:	00db      	lsls	r3, r3, #3
 8007570:	490e      	ldr	r1, [pc, #56]	; (80075ac <HAL_RCC_ClockConfig+0x1bc>)
 8007572:	4313      	orrs	r3, r2
 8007574:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007576:	f000 f821 	bl	80075bc <HAL_RCC_GetSysClockFreq>
 800757a:	4602      	mov	r2, r0
 800757c:	4b0b      	ldr	r3, [pc, #44]	; (80075ac <HAL_RCC_ClockConfig+0x1bc>)
 800757e:	689b      	ldr	r3, [r3, #8]
 8007580:	091b      	lsrs	r3, r3, #4
 8007582:	f003 030f 	and.w	r3, r3, #15
 8007586:	490a      	ldr	r1, [pc, #40]	; (80075b0 <HAL_RCC_ClockConfig+0x1c0>)
 8007588:	5ccb      	ldrb	r3, [r1, r3]
 800758a:	fa22 f303 	lsr.w	r3, r2, r3
 800758e:	4a09      	ldr	r2, [pc, #36]	; (80075b4 <HAL_RCC_ClockConfig+0x1c4>)
 8007590:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007592:	4b09      	ldr	r3, [pc, #36]	; (80075b8 <HAL_RCC_ClockConfig+0x1c8>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	4618      	mov	r0, r3
 8007598:	f7fb fd6c 	bl	8003074 <HAL_InitTick>

  return HAL_OK;
 800759c:	2300      	movs	r3, #0
}
 800759e:	4618      	mov	r0, r3
 80075a0:	3710      	adds	r7, #16
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bd80      	pop	{r7, pc}
 80075a6:	bf00      	nop
 80075a8:	40023c00 	.word	0x40023c00
 80075ac:	40023800 	.word	0x40023800
 80075b0:	0800e9b4 	.word	0x0800e9b4
 80075b4:	20000028 	.word	0x20000028
 80075b8:	20000048 	.word	0x20000048

080075bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80075bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80075c0:	b090      	sub	sp, #64	; 0x40
 80075c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80075c4:	2300      	movs	r3, #0
 80075c6:	637b      	str	r3, [r7, #52]	; 0x34
 80075c8:	2300      	movs	r3, #0
 80075ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80075cc:	2300      	movs	r3, #0
 80075ce:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80075d0:	2300      	movs	r3, #0
 80075d2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80075d4:	4b59      	ldr	r3, [pc, #356]	; (800773c <HAL_RCC_GetSysClockFreq+0x180>)
 80075d6:	689b      	ldr	r3, [r3, #8]
 80075d8:	f003 030c 	and.w	r3, r3, #12
 80075dc:	2b08      	cmp	r3, #8
 80075de:	d00d      	beq.n	80075fc <HAL_RCC_GetSysClockFreq+0x40>
 80075e0:	2b08      	cmp	r3, #8
 80075e2:	f200 80a1 	bhi.w	8007728 <HAL_RCC_GetSysClockFreq+0x16c>
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d002      	beq.n	80075f0 <HAL_RCC_GetSysClockFreq+0x34>
 80075ea:	2b04      	cmp	r3, #4
 80075ec:	d003      	beq.n	80075f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80075ee:	e09b      	b.n	8007728 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80075f0:	4b53      	ldr	r3, [pc, #332]	; (8007740 <HAL_RCC_GetSysClockFreq+0x184>)
 80075f2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80075f4:	e09b      	b.n	800772e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80075f6:	4b53      	ldr	r3, [pc, #332]	; (8007744 <HAL_RCC_GetSysClockFreq+0x188>)
 80075f8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80075fa:	e098      	b.n	800772e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80075fc:	4b4f      	ldr	r3, [pc, #316]	; (800773c <HAL_RCC_GetSysClockFreq+0x180>)
 80075fe:	685b      	ldr	r3, [r3, #4]
 8007600:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007604:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007606:	4b4d      	ldr	r3, [pc, #308]	; (800773c <HAL_RCC_GetSysClockFreq+0x180>)
 8007608:	685b      	ldr	r3, [r3, #4]
 800760a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800760e:	2b00      	cmp	r3, #0
 8007610:	d028      	beq.n	8007664 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007612:	4b4a      	ldr	r3, [pc, #296]	; (800773c <HAL_RCC_GetSysClockFreq+0x180>)
 8007614:	685b      	ldr	r3, [r3, #4]
 8007616:	099b      	lsrs	r3, r3, #6
 8007618:	2200      	movs	r2, #0
 800761a:	623b      	str	r3, [r7, #32]
 800761c:	627a      	str	r2, [r7, #36]	; 0x24
 800761e:	6a3b      	ldr	r3, [r7, #32]
 8007620:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007624:	2100      	movs	r1, #0
 8007626:	4b47      	ldr	r3, [pc, #284]	; (8007744 <HAL_RCC_GetSysClockFreq+0x188>)
 8007628:	fb03 f201 	mul.w	r2, r3, r1
 800762c:	2300      	movs	r3, #0
 800762e:	fb00 f303 	mul.w	r3, r0, r3
 8007632:	4413      	add	r3, r2
 8007634:	4a43      	ldr	r2, [pc, #268]	; (8007744 <HAL_RCC_GetSysClockFreq+0x188>)
 8007636:	fba0 1202 	umull	r1, r2, r0, r2
 800763a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800763c:	460a      	mov	r2, r1
 800763e:	62ba      	str	r2, [r7, #40]	; 0x28
 8007640:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007642:	4413      	add	r3, r2
 8007644:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007646:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007648:	2200      	movs	r2, #0
 800764a:	61bb      	str	r3, [r7, #24]
 800764c:	61fa      	str	r2, [r7, #28]
 800764e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007652:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007656:	f7f8 fe13 	bl	8000280 <__aeabi_uldivmod>
 800765a:	4602      	mov	r2, r0
 800765c:	460b      	mov	r3, r1
 800765e:	4613      	mov	r3, r2
 8007660:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007662:	e053      	b.n	800770c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007664:	4b35      	ldr	r3, [pc, #212]	; (800773c <HAL_RCC_GetSysClockFreq+0x180>)
 8007666:	685b      	ldr	r3, [r3, #4]
 8007668:	099b      	lsrs	r3, r3, #6
 800766a:	2200      	movs	r2, #0
 800766c:	613b      	str	r3, [r7, #16]
 800766e:	617a      	str	r2, [r7, #20]
 8007670:	693b      	ldr	r3, [r7, #16]
 8007672:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8007676:	f04f 0b00 	mov.w	fp, #0
 800767a:	4652      	mov	r2, sl
 800767c:	465b      	mov	r3, fp
 800767e:	f04f 0000 	mov.w	r0, #0
 8007682:	f04f 0100 	mov.w	r1, #0
 8007686:	0159      	lsls	r1, r3, #5
 8007688:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800768c:	0150      	lsls	r0, r2, #5
 800768e:	4602      	mov	r2, r0
 8007690:	460b      	mov	r3, r1
 8007692:	ebb2 080a 	subs.w	r8, r2, sl
 8007696:	eb63 090b 	sbc.w	r9, r3, fp
 800769a:	f04f 0200 	mov.w	r2, #0
 800769e:	f04f 0300 	mov.w	r3, #0
 80076a2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80076a6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80076aa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80076ae:	ebb2 0408 	subs.w	r4, r2, r8
 80076b2:	eb63 0509 	sbc.w	r5, r3, r9
 80076b6:	f04f 0200 	mov.w	r2, #0
 80076ba:	f04f 0300 	mov.w	r3, #0
 80076be:	00eb      	lsls	r3, r5, #3
 80076c0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80076c4:	00e2      	lsls	r2, r4, #3
 80076c6:	4614      	mov	r4, r2
 80076c8:	461d      	mov	r5, r3
 80076ca:	eb14 030a 	adds.w	r3, r4, sl
 80076ce:	603b      	str	r3, [r7, #0]
 80076d0:	eb45 030b 	adc.w	r3, r5, fp
 80076d4:	607b      	str	r3, [r7, #4]
 80076d6:	f04f 0200 	mov.w	r2, #0
 80076da:	f04f 0300 	mov.w	r3, #0
 80076de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80076e2:	4629      	mov	r1, r5
 80076e4:	028b      	lsls	r3, r1, #10
 80076e6:	4621      	mov	r1, r4
 80076e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80076ec:	4621      	mov	r1, r4
 80076ee:	028a      	lsls	r2, r1, #10
 80076f0:	4610      	mov	r0, r2
 80076f2:	4619      	mov	r1, r3
 80076f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076f6:	2200      	movs	r2, #0
 80076f8:	60bb      	str	r3, [r7, #8]
 80076fa:	60fa      	str	r2, [r7, #12]
 80076fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007700:	f7f8 fdbe 	bl	8000280 <__aeabi_uldivmod>
 8007704:	4602      	mov	r2, r0
 8007706:	460b      	mov	r3, r1
 8007708:	4613      	mov	r3, r2
 800770a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800770c:	4b0b      	ldr	r3, [pc, #44]	; (800773c <HAL_RCC_GetSysClockFreq+0x180>)
 800770e:	685b      	ldr	r3, [r3, #4]
 8007710:	0c1b      	lsrs	r3, r3, #16
 8007712:	f003 0303 	and.w	r3, r3, #3
 8007716:	3301      	adds	r3, #1
 8007718:	005b      	lsls	r3, r3, #1
 800771a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800771c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800771e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007720:	fbb2 f3f3 	udiv	r3, r2, r3
 8007724:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007726:	e002      	b.n	800772e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007728:	4b05      	ldr	r3, [pc, #20]	; (8007740 <HAL_RCC_GetSysClockFreq+0x184>)
 800772a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800772c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800772e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8007730:	4618      	mov	r0, r3
 8007732:	3740      	adds	r7, #64	; 0x40
 8007734:	46bd      	mov	sp, r7
 8007736:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800773a:	bf00      	nop
 800773c:	40023800 	.word	0x40023800
 8007740:	00f42400 	.word	0x00f42400
 8007744:	017d7840 	.word	0x017d7840

08007748 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007748:	b480      	push	{r7}
 800774a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800774c:	4b03      	ldr	r3, [pc, #12]	; (800775c <HAL_RCC_GetHCLKFreq+0x14>)
 800774e:	681b      	ldr	r3, [r3, #0]
}
 8007750:	4618      	mov	r0, r3
 8007752:	46bd      	mov	sp, r7
 8007754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007758:	4770      	bx	lr
 800775a:	bf00      	nop
 800775c:	20000028 	.word	0x20000028

08007760 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007764:	f7ff fff0 	bl	8007748 <HAL_RCC_GetHCLKFreq>
 8007768:	4602      	mov	r2, r0
 800776a:	4b05      	ldr	r3, [pc, #20]	; (8007780 <HAL_RCC_GetPCLK1Freq+0x20>)
 800776c:	689b      	ldr	r3, [r3, #8]
 800776e:	0a9b      	lsrs	r3, r3, #10
 8007770:	f003 0307 	and.w	r3, r3, #7
 8007774:	4903      	ldr	r1, [pc, #12]	; (8007784 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007776:	5ccb      	ldrb	r3, [r1, r3]
 8007778:	fa22 f303 	lsr.w	r3, r2, r3
}
 800777c:	4618      	mov	r0, r3
 800777e:	bd80      	pop	{r7, pc}
 8007780:	40023800 	.word	0x40023800
 8007784:	0800e9c4 	.word	0x0800e9c4

08007788 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b082      	sub	sp, #8
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d101      	bne.n	800779a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007796:	2301      	movs	r3, #1
 8007798:	e07b      	b.n	8007892 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d108      	bne.n	80077b4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	685b      	ldr	r3, [r3, #4]
 80077a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80077aa:	d009      	beq.n	80077c0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2200      	movs	r2, #0
 80077b0:	61da      	str	r2, [r3, #28]
 80077b2:	e005      	b.n	80077c0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2200      	movs	r2, #0
 80077b8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2200      	movs	r2, #0
 80077be:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2200      	movs	r2, #0
 80077c4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80077cc:	b2db      	uxtb	r3, r3
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d106      	bne.n	80077e0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2200      	movs	r2, #0
 80077d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80077da:	6878      	ldr	r0, [r7, #4]
 80077dc:	f7fa fcb4 	bl	8002148 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2202      	movs	r2, #2
 80077e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	681a      	ldr	r2, [r3, #0]
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80077f6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	685b      	ldr	r3, [r3, #4]
 80077fc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	689b      	ldr	r3, [r3, #8]
 8007804:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007808:	431a      	orrs	r2, r3
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	68db      	ldr	r3, [r3, #12]
 800780e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007812:	431a      	orrs	r2, r3
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	691b      	ldr	r3, [r3, #16]
 8007818:	f003 0302 	and.w	r3, r3, #2
 800781c:	431a      	orrs	r2, r3
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	695b      	ldr	r3, [r3, #20]
 8007822:	f003 0301 	and.w	r3, r3, #1
 8007826:	431a      	orrs	r2, r3
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	699b      	ldr	r3, [r3, #24]
 800782c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007830:	431a      	orrs	r2, r3
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	69db      	ldr	r3, [r3, #28]
 8007836:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800783a:	431a      	orrs	r2, r3
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	6a1b      	ldr	r3, [r3, #32]
 8007840:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007844:	ea42 0103 	orr.w	r1, r2, r3
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800784c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	430a      	orrs	r2, r1
 8007856:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	699b      	ldr	r3, [r3, #24]
 800785c:	0c1b      	lsrs	r3, r3, #16
 800785e:	f003 0104 	and.w	r1, r3, #4
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007866:	f003 0210 	and.w	r2, r3, #16
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	430a      	orrs	r2, r1
 8007870:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	69da      	ldr	r2, [r3, #28]
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007880:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	2200      	movs	r2, #0
 8007886:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2201      	movs	r2, #1
 800788c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007890:	2300      	movs	r3, #0
}
 8007892:	4618      	mov	r0, r3
 8007894:	3708      	adds	r7, #8
 8007896:	46bd      	mov	sp, r7
 8007898:	bd80      	pop	{r7, pc}

0800789a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800789a:	b580      	push	{r7, lr}
 800789c:	b088      	sub	sp, #32
 800789e:	af00      	add	r7, sp, #0
 80078a0:	60f8      	str	r0, [r7, #12]
 80078a2:	60b9      	str	r1, [r7, #8]
 80078a4:	603b      	str	r3, [r7, #0]
 80078a6:	4613      	mov	r3, r2
 80078a8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80078aa:	2300      	movs	r3, #0
 80078ac:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80078b4:	2b01      	cmp	r3, #1
 80078b6:	d101      	bne.n	80078bc <HAL_SPI_Transmit+0x22>
 80078b8:	2302      	movs	r3, #2
 80078ba:	e126      	b.n	8007b0a <HAL_SPI_Transmit+0x270>
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	2201      	movs	r2, #1
 80078c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80078c4:	f7fb fc1a 	bl	80030fc <HAL_GetTick>
 80078c8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80078ca:	88fb      	ldrh	r3, [r7, #6]
 80078cc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80078d4:	b2db      	uxtb	r3, r3
 80078d6:	2b01      	cmp	r3, #1
 80078d8:	d002      	beq.n	80078e0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80078da:	2302      	movs	r3, #2
 80078dc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80078de:	e10b      	b.n	8007af8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80078e0:	68bb      	ldr	r3, [r7, #8]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d002      	beq.n	80078ec <HAL_SPI_Transmit+0x52>
 80078e6:	88fb      	ldrh	r3, [r7, #6]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d102      	bne.n	80078f2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80078ec:	2301      	movs	r3, #1
 80078ee:	77fb      	strb	r3, [r7, #31]
    goto error;
 80078f0:	e102      	b.n	8007af8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	2203      	movs	r2, #3
 80078f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	2200      	movs	r2, #0
 80078fe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	68ba      	ldr	r2, [r7, #8]
 8007904:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	88fa      	ldrh	r2, [r7, #6]
 800790a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	88fa      	ldrh	r2, [r7, #6]
 8007910:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	2200      	movs	r2, #0
 8007916:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	2200      	movs	r2, #0
 800791c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	2200      	movs	r2, #0
 8007922:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	2200      	movs	r2, #0
 8007928:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	2200      	movs	r2, #0
 800792e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	689b      	ldr	r3, [r3, #8]
 8007934:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007938:	d10f      	bne.n	800795a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	681a      	ldr	r2, [r3, #0]
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007948:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	681a      	ldr	r2, [r3, #0]
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007958:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007964:	2b40      	cmp	r3, #64	; 0x40
 8007966:	d007      	beq.n	8007978 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	681a      	ldr	r2, [r3, #0]
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007976:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	68db      	ldr	r3, [r3, #12]
 800797c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007980:	d14b      	bne.n	8007a1a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	685b      	ldr	r3, [r3, #4]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d002      	beq.n	8007990 <HAL_SPI_Transmit+0xf6>
 800798a:	8afb      	ldrh	r3, [r7, #22]
 800798c:	2b01      	cmp	r3, #1
 800798e:	d13e      	bne.n	8007a0e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007994:	881a      	ldrh	r2, [r3, #0]
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079a0:	1c9a      	adds	r2, r3, #2
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80079aa:	b29b      	uxth	r3, r3
 80079ac:	3b01      	subs	r3, #1
 80079ae:	b29a      	uxth	r2, r3
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80079b4:	e02b      	b.n	8007a0e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	689b      	ldr	r3, [r3, #8]
 80079bc:	f003 0302 	and.w	r3, r3, #2
 80079c0:	2b02      	cmp	r3, #2
 80079c2:	d112      	bne.n	80079ea <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079c8:	881a      	ldrh	r2, [r3, #0]
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079d4:	1c9a      	adds	r2, r3, #2
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80079de:	b29b      	uxth	r3, r3
 80079e0:	3b01      	subs	r3, #1
 80079e2:	b29a      	uxth	r2, r3
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	86da      	strh	r2, [r3, #54]	; 0x36
 80079e8:	e011      	b.n	8007a0e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80079ea:	f7fb fb87 	bl	80030fc <HAL_GetTick>
 80079ee:	4602      	mov	r2, r0
 80079f0:	69bb      	ldr	r3, [r7, #24]
 80079f2:	1ad3      	subs	r3, r2, r3
 80079f4:	683a      	ldr	r2, [r7, #0]
 80079f6:	429a      	cmp	r2, r3
 80079f8:	d803      	bhi.n	8007a02 <HAL_SPI_Transmit+0x168>
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a00:	d102      	bne.n	8007a08 <HAL_SPI_Transmit+0x16e>
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d102      	bne.n	8007a0e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8007a08:	2303      	movs	r3, #3
 8007a0a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007a0c:	e074      	b.n	8007af8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a12:	b29b      	uxth	r3, r3
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d1ce      	bne.n	80079b6 <HAL_SPI_Transmit+0x11c>
 8007a18:	e04c      	b.n	8007ab4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	685b      	ldr	r3, [r3, #4]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d002      	beq.n	8007a28 <HAL_SPI_Transmit+0x18e>
 8007a22:	8afb      	ldrh	r3, [r7, #22]
 8007a24:	2b01      	cmp	r3, #1
 8007a26:	d140      	bne.n	8007aaa <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	330c      	adds	r3, #12
 8007a32:	7812      	ldrb	r2, [r2, #0]
 8007a34:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a3a:	1c5a      	adds	r2, r3, #1
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a44:	b29b      	uxth	r3, r3
 8007a46:	3b01      	subs	r3, #1
 8007a48:	b29a      	uxth	r2, r3
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007a4e:	e02c      	b.n	8007aaa <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	689b      	ldr	r3, [r3, #8]
 8007a56:	f003 0302 	and.w	r3, r3, #2
 8007a5a:	2b02      	cmp	r3, #2
 8007a5c:	d113      	bne.n	8007a86 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	330c      	adds	r3, #12
 8007a68:	7812      	ldrb	r2, [r2, #0]
 8007a6a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a70:	1c5a      	adds	r2, r3, #1
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a7a:	b29b      	uxth	r3, r3
 8007a7c:	3b01      	subs	r3, #1
 8007a7e:	b29a      	uxth	r2, r3
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	86da      	strh	r2, [r3, #54]	; 0x36
 8007a84:	e011      	b.n	8007aaa <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007a86:	f7fb fb39 	bl	80030fc <HAL_GetTick>
 8007a8a:	4602      	mov	r2, r0
 8007a8c:	69bb      	ldr	r3, [r7, #24]
 8007a8e:	1ad3      	subs	r3, r2, r3
 8007a90:	683a      	ldr	r2, [r7, #0]
 8007a92:	429a      	cmp	r2, r3
 8007a94:	d803      	bhi.n	8007a9e <HAL_SPI_Transmit+0x204>
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a9c:	d102      	bne.n	8007aa4 <HAL_SPI_Transmit+0x20a>
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d102      	bne.n	8007aaa <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8007aa4:	2303      	movs	r3, #3
 8007aa6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007aa8:	e026      	b.n	8007af8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007aae:	b29b      	uxth	r3, r3
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d1cd      	bne.n	8007a50 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007ab4:	69ba      	ldr	r2, [r7, #24]
 8007ab6:	6839      	ldr	r1, [r7, #0]
 8007ab8:	68f8      	ldr	r0, [r7, #12]
 8007aba:	f000 fbcb 	bl	8008254 <SPI_EndRxTxTransaction>
 8007abe:	4603      	mov	r3, r0
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d002      	beq.n	8007aca <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	2220      	movs	r2, #32
 8007ac8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	689b      	ldr	r3, [r3, #8]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d10a      	bne.n	8007ae8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	613b      	str	r3, [r7, #16]
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	68db      	ldr	r3, [r3, #12]
 8007adc:	613b      	str	r3, [r7, #16]
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	689b      	ldr	r3, [r3, #8]
 8007ae4:	613b      	str	r3, [r7, #16]
 8007ae6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d002      	beq.n	8007af6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8007af0:	2301      	movs	r3, #1
 8007af2:	77fb      	strb	r3, [r7, #31]
 8007af4:	e000      	b.n	8007af8 <HAL_SPI_Transmit+0x25e>
  }

error:
 8007af6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	2201      	movs	r2, #1
 8007afc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	2200      	movs	r2, #0
 8007b04:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007b08:	7ffb      	ldrb	r3, [r7, #31]
}
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	3720      	adds	r7, #32
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bd80      	pop	{r7, pc}

08007b12 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007b12:	b580      	push	{r7, lr}
 8007b14:	b088      	sub	sp, #32
 8007b16:	af02      	add	r7, sp, #8
 8007b18:	60f8      	str	r0, [r7, #12]
 8007b1a:	60b9      	str	r1, [r7, #8]
 8007b1c:	603b      	str	r3, [r7, #0]
 8007b1e:	4613      	mov	r3, r2
 8007b20:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007b22:	2300      	movs	r3, #0
 8007b24:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	685b      	ldr	r3, [r3, #4]
 8007b2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007b2e:	d112      	bne.n	8007b56 <HAL_SPI_Receive+0x44>
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	689b      	ldr	r3, [r3, #8]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d10e      	bne.n	8007b56 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	2204      	movs	r2, #4
 8007b3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007b40:	88fa      	ldrh	r2, [r7, #6]
 8007b42:	683b      	ldr	r3, [r7, #0]
 8007b44:	9300      	str	r3, [sp, #0]
 8007b46:	4613      	mov	r3, r2
 8007b48:	68ba      	ldr	r2, [r7, #8]
 8007b4a:	68b9      	ldr	r1, [r7, #8]
 8007b4c:	68f8      	ldr	r0, [r7, #12]
 8007b4e:	f000 f8f1 	bl	8007d34 <HAL_SPI_TransmitReceive>
 8007b52:	4603      	mov	r3, r0
 8007b54:	e0ea      	b.n	8007d2c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007b5c:	2b01      	cmp	r3, #1
 8007b5e:	d101      	bne.n	8007b64 <HAL_SPI_Receive+0x52>
 8007b60:	2302      	movs	r3, #2
 8007b62:	e0e3      	b.n	8007d2c <HAL_SPI_Receive+0x21a>
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	2201      	movs	r2, #1
 8007b68:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007b6c:	f7fb fac6 	bl	80030fc <HAL_GetTick>
 8007b70:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007b78:	b2db      	uxtb	r3, r3
 8007b7a:	2b01      	cmp	r3, #1
 8007b7c:	d002      	beq.n	8007b84 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8007b7e:	2302      	movs	r3, #2
 8007b80:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007b82:	e0ca      	b.n	8007d1a <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8007b84:	68bb      	ldr	r3, [r7, #8]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d002      	beq.n	8007b90 <HAL_SPI_Receive+0x7e>
 8007b8a:	88fb      	ldrh	r3, [r7, #6]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d102      	bne.n	8007b96 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8007b90:	2301      	movs	r3, #1
 8007b92:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007b94:	e0c1      	b.n	8007d1a <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	2204      	movs	r2, #4
 8007b9a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	68ba      	ldr	r2, [r7, #8]
 8007ba8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	88fa      	ldrh	r2, [r7, #6]
 8007bae:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	88fa      	ldrh	r2, [r7, #6]
 8007bb4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	2200      	movs	r2, #0
 8007bba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	2200      	movs	r2, #0
 8007bcc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	689b      	ldr	r3, [r3, #8]
 8007bd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007bdc:	d10f      	bne.n	8007bfe <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	681a      	ldr	r2, [r3, #0]
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007bec:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	681a      	ldr	r2, [r3, #0]
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007bfc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c08:	2b40      	cmp	r3, #64	; 0x40
 8007c0a:	d007      	beq.n	8007c1c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	681a      	ldr	r2, [r3, #0]
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007c1a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	68db      	ldr	r3, [r3, #12]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d162      	bne.n	8007cea <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007c24:	e02e      	b.n	8007c84 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	689b      	ldr	r3, [r3, #8]
 8007c2c:	f003 0301 	and.w	r3, r3, #1
 8007c30:	2b01      	cmp	r3, #1
 8007c32:	d115      	bne.n	8007c60 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f103 020c 	add.w	r2, r3, #12
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c40:	7812      	ldrb	r2, [r2, #0]
 8007c42:	b2d2      	uxtb	r2, r2
 8007c44:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c4a:	1c5a      	adds	r2, r3, #1
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c54:	b29b      	uxth	r3, r3
 8007c56:	3b01      	subs	r3, #1
 8007c58:	b29a      	uxth	r2, r3
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007c5e:	e011      	b.n	8007c84 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007c60:	f7fb fa4c 	bl	80030fc <HAL_GetTick>
 8007c64:	4602      	mov	r2, r0
 8007c66:	693b      	ldr	r3, [r7, #16]
 8007c68:	1ad3      	subs	r3, r2, r3
 8007c6a:	683a      	ldr	r2, [r7, #0]
 8007c6c:	429a      	cmp	r2, r3
 8007c6e:	d803      	bhi.n	8007c78 <HAL_SPI_Receive+0x166>
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c76:	d102      	bne.n	8007c7e <HAL_SPI_Receive+0x16c>
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d102      	bne.n	8007c84 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8007c7e:	2303      	movs	r3, #3
 8007c80:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007c82:	e04a      	b.n	8007d1a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c88:	b29b      	uxth	r3, r3
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d1cb      	bne.n	8007c26 <HAL_SPI_Receive+0x114>
 8007c8e:	e031      	b.n	8007cf4 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	689b      	ldr	r3, [r3, #8]
 8007c96:	f003 0301 	and.w	r3, r3, #1
 8007c9a:	2b01      	cmp	r3, #1
 8007c9c:	d113      	bne.n	8007cc6 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	68da      	ldr	r2, [r3, #12]
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ca8:	b292      	uxth	r2, r2
 8007caa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cb0:	1c9a      	adds	r2, r3, #2
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007cba:	b29b      	uxth	r3, r3
 8007cbc:	3b01      	subs	r3, #1
 8007cbe:	b29a      	uxth	r2, r3
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007cc4:	e011      	b.n	8007cea <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007cc6:	f7fb fa19 	bl	80030fc <HAL_GetTick>
 8007cca:	4602      	mov	r2, r0
 8007ccc:	693b      	ldr	r3, [r7, #16]
 8007cce:	1ad3      	subs	r3, r2, r3
 8007cd0:	683a      	ldr	r2, [r7, #0]
 8007cd2:	429a      	cmp	r2, r3
 8007cd4:	d803      	bhi.n	8007cde <HAL_SPI_Receive+0x1cc>
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cdc:	d102      	bne.n	8007ce4 <HAL_SPI_Receive+0x1d2>
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d102      	bne.n	8007cea <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8007ce4:	2303      	movs	r3, #3
 8007ce6:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007ce8:	e017      	b.n	8007d1a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007cee:	b29b      	uxth	r3, r3
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d1cd      	bne.n	8007c90 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007cf4:	693a      	ldr	r2, [r7, #16]
 8007cf6:	6839      	ldr	r1, [r7, #0]
 8007cf8:	68f8      	ldr	r0, [r7, #12]
 8007cfa:	f000 fa45 	bl	8008188 <SPI_EndRxTransaction>
 8007cfe:	4603      	mov	r3, r0
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d002      	beq.n	8007d0a <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	2220      	movs	r2, #32
 8007d08:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d002      	beq.n	8007d18 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8007d12:	2301      	movs	r3, #1
 8007d14:	75fb      	strb	r3, [r7, #23]
 8007d16:	e000      	b.n	8007d1a <HAL_SPI_Receive+0x208>
  }

error :
 8007d18:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	2201      	movs	r2, #1
 8007d1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	2200      	movs	r2, #0
 8007d26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007d2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	3718      	adds	r7, #24
 8007d30:	46bd      	mov	sp, r7
 8007d32:	bd80      	pop	{r7, pc}

08007d34 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b08c      	sub	sp, #48	; 0x30
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	60f8      	str	r0, [r7, #12]
 8007d3c:	60b9      	str	r1, [r7, #8]
 8007d3e:	607a      	str	r2, [r7, #4]
 8007d40:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007d42:	2301      	movs	r3, #1
 8007d44:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007d46:	2300      	movs	r3, #0
 8007d48:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007d52:	2b01      	cmp	r3, #1
 8007d54:	d101      	bne.n	8007d5a <HAL_SPI_TransmitReceive+0x26>
 8007d56:	2302      	movs	r3, #2
 8007d58:	e18a      	b.n	8008070 <HAL_SPI_TransmitReceive+0x33c>
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	2201      	movs	r2, #1
 8007d5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007d62:	f7fb f9cb 	bl	80030fc <HAL_GetTick>
 8007d66:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007d6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	685b      	ldr	r3, [r3, #4]
 8007d76:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007d78:	887b      	ldrh	r3, [r7, #2]
 8007d7a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007d7c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007d80:	2b01      	cmp	r3, #1
 8007d82:	d00f      	beq.n	8007da4 <HAL_SPI_TransmitReceive+0x70>
 8007d84:	69fb      	ldr	r3, [r7, #28]
 8007d86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007d8a:	d107      	bne.n	8007d9c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	689b      	ldr	r3, [r3, #8]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d103      	bne.n	8007d9c <HAL_SPI_TransmitReceive+0x68>
 8007d94:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007d98:	2b04      	cmp	r3, #4
 8007d9a:	d003      	beq.n	8007da4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007d9c:	2302      	movs	r3, #2
 8007d9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007da2:	e15b      	b.n	800805c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007da4:	68bb      	ldr	r3, [r7, #8]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d005      	beq.n	8007db6 <HAL_SPI_TransmitReceive+0x82>
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d002      	beq.n	8007db6 <HAL_SPI_TransmitReceive+0x82>
 8007db0:	887b      	ldrh	r3, [r7, #2]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d103      	bne.n	8007dbe <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007db6:	2301      	movs	r3, #1
 8007db8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007dbc:	e14e      	b.n	800805c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007dc4:	b2db      	uxtb	r3, r3
 8007dc6:	2b04      	cmp	r3, #4
 8007dc8:	d003      	beq.n	8007dd2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	2205      	movs	r2, #5
 8007dce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	687a      	ldr	r2, [r7, #4]
 8007ddc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	887a      	ldrh	r2, [r7, #2]
 8007de2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	887a      	ldrh	r2, [r7, #2]
 8007de8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	68ba      	ldr	r2, [r7, #8]
 8007dee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	887a      	ldrh	r2, [r7, #2]
 8007df4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	887a      	ldrh	r2, [r7, #2]
 8007dfa:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	2200      	movs	r2, #0
 8007e00:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	2200      	movs	r2, #0
 8007e06:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e12:	2b40      	cmp	r3, #64	; 0x40
 8007e14:	d007      	beq.n	8007e26 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	681a      	ldr	r2, [r3, #0]
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007e24:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	68db      	ldr	r3, [r3, #12]
 8007e2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e2e:	d178      	bne.n	8007f22 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	685b      	ldr	r3, [r3, #4]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d002      	beq.n	8007e3e <HAL_SPI_TransmitReceive+0x10a>
 8007e38:	8b7b      	ldrh	r3, [r7, #26]
 8007e3a:	2b01      	cmp	r3, #1
 8007e3c:	d166      	bne.n	8007f0c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e42:	881a      	ldrh	r2, [r3, #0]
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e4e:	1c9a      	adds	r2, r3, #2
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007e58:	b29b      	uxth	r3, r3
 8007e5a:	3b01      	subs	r3, #1
 8007e5c:	b29a      	uxth	r2, r3
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007e62:	e053      	b.n	8007f0c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	689b      	ldr	r3, [r3, #8]
 8007e6a:	f003 0302 	and.w	r3, r3, #2
 8007e6e:	2b02      	cmp	r3, #2
 8007e70:	d11b      	bne.n	8007eaa <HAL_SPI_TransmitReceive+0x176>
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007e76:	b29b      	uxth	r3, r3
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d016      	beq.n	8007eaa <HAL_SPI_TransmitReceive+0x176>
 8007e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e7e:	2b01      	cmp	r3, #1
 8007e80:	d113      	bne.n	8007eaa <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e86:	881a      	ldrh	r2, [r3, #0]
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e92:	1c9a      	adds	r2, r3, #2
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007e9c:	b29b      	uxth	r3, r3
 8007e9e:	3b01      	subs	r3, #1
 8007ea0:	b29a      	uxth	r2, r3
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	689b      	ldr	r3, [r3, #8]
 8007eb0:	f003 0301 	and.w	r3, r3, #1
 8007eb4:	2b01      	cmp	r3, #1
 8007eb6:	d119      	bne.n	8007eec <HAL_SPI_TransmitReceive+0x1b8>
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ebc:	b29b      	uxth	r3, r3
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d014      	beq.n	8007eec <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	68da      	ldr	r2, [r3, #12]
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ecc:	b292      	uxth	r2, r2
 8007ece:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ed4:	1c9a      	adds	r2, r3, #2
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ede:	b29b      	uxth	r3, r3
 8007ee0:	3b01      	subs	r3, #1
 8007ee2:	b29a      	uxth	r2, r3
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007ee8:	2301      	movs	r3, #1
 8007eea:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007eec:	f7fb f906 	bl	80030fc <HAL_GetTick>
 8007ef0:	4602      	mov	r2, r0
 8007ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ef4:	1ad3      	subs	r3, r2, r3
 8007ef6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007ef8:	429a      	cmp	r2, r3
 8007efa:	d807      	bhi.n	8007f0c <HAL_SPI_TransmitReceive+0x1d8>
 8007efc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007efe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f02:	d003      	beq.n	8007f0c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007f04:	2303      	movs	r3, #3
 8007f06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007f0a:	e0a7      	b.n	800805c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007f10:	b29b      	uxth	r3, r3
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d1a6      	bne.n	8007e64 <HAL_SPI_TransmitReceive+0x130>
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f1a:	b29b      	uxth	r3, r3
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d1a1      	bne.n	8007e64 <HAL_SPI_TransmitReceive+0x130>
 8007f20:	e07c      	b.n	800801c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	685b      	ldr	r3, [r3, #4]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d002      	beq.n	8007f30 <HAL_SPI_TransmitReceive+0x1fc>
 8007f2a:	8b7b      	ldrh	r3, [r7, #26]
 8007f2c:	2b01      	cmp	r3, #1
 8007f2e:	d16b      	bne.n	8008008 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	330c      	adds	r3, #12
 8007f3a:	7812      	ldrb	r2, [r2, #0]
 8007f3c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f42:	1c5a      	adds	r2, r3, #1
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007f4c:	b29b      	uxth	r3, r3
 8007f4e:	3b01      	subs	r3, #1
 8007f50:	b29a      	uxth	r2, r3
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007f56:	e057      	b.n	8008008 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	689b      	ldr	r3, [r3, #8]
 8007f5e:	f003 0302 	and.w	r3, r3, #2
 8007f62:	2b02      	cmp	r3, #2
 8007f64:	d11c      	bne.n	8007fa0 <HAL_SPI_TransmitReceive+0x26c>
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007f6a:	b29b      	uxth	r3, r3
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d017      	beq.n	8007fa0 <HAL_SPI_TransmitReceive+0x26c>
 8007f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f72:	2b01      	cmp	r3, #1
 8007f74:	d114      	bne.n	8007fa0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	330c      	adds	r3, #12
 8007f80:	7812      	ldrb	r2, [r2, #0]
 8007f82:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f88:	1c5a      	adds	r2, r3, #1
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007f92:	b29b      	uxth	r3, r3
 8007f94:	3b01      	subs	r3, #1
 8007f96:	b29a      	uxth	r2, r3
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	689b      	ldr	r3, [r3, #8]
 8007fa6:	f003 0301 	and.w	r3, r3, #1
 8007faa:	2b01      	cmp	r3, #1
 8007fac:	d119      	bne.n	8007fe2 <HAL_SPI_TransmitReceive+0x2ae>
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007fb2:	b29b      	uxth	r3, r3
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d014      	beq.n	8007fe2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	68da      	ldr	r2, [r3, #12]
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fc2:	b2d2      	uxtb	r2, r2
 8007fc4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fca:	1c5a      	adds	r2, r3, #1
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007fd4:	b29b      	uxth	r3, r3
 8007fd6:	3b01      	subs	r3, #1
 8007fd8:	b29a      	uxth	r2, r3
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007fde:	2301      	movs	r3, #1
 8007fe0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007fe2:	f7fb f88b 	bl	80030fc <HAL_GetTick>
 8007fe6:	4602      	mov	r2, r0
 8007fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fea:	1ad3      	subs	r3, r2, r3
 8007fec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007fee:	429a      	cmp	r2, r3
 8007ff0:	d803      	bhi.n	8007ffa <HAL_SPI_TransmitReceive+0x2c6>
 8007ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ff8:	d102      	bne.n	8008000 <HAL_SPI_TransmitReceive+0x2cc>
 8007ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d103      	bne.n	8008008 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8008000:	2303      	movs	r3, #3
 8008002:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008006:	e029      	b.n	800805c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800800c:	b29b      	uxth	r3, r3
 800800e:	2b00      	cmp	r3, #0
 8008010:	d1a2      	bne.n	8007f58 <HAL_SPI_TransmitReceive+0x224>
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008016:	b29b      	uxth	r3, r3
 8008018:	2b00      	cmp	r3, #0
 800801a:	d19d      	bne.n	8007f58 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800801c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800801e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008020:	68f8      	ldr	r0, [r7, #12]
 8008022:	f000 f917 	bl	8008254 <SPI_EndRxTxTransaction>
 8008026:	4603      	mov	r3, r0
 8008028:	2b00      	cmp	r3, #0
 800802a:	d006      	beq.n	800803a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800802c:	2301      	movs	r3, #1
 800802e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	2220      	movs	r2, #32
 8008036:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8008038:	e010      	b.n	800805c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	689b      	ldr	r3, [r3, #8]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d10b      	bne.n	800805a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008042:	2300      	movs	r3, #0
 8008044:	617b      	str	r3, [r7, #20]
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	68db      	ldr	r3, [r3, #12]
 800804c:	617b      	str	r3, [r7, #20]
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	689b      	ldr	r3, [r3, #8]
 8008054:	617b      	str	r3, [r7, #20]
 8008056:	697b      	ldr	r3, [r7, #20]
 8008058:	e000      	b.n	800805c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800805a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	2201      	movs	r2, #1
 8008060:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	2200      	movs	r2, #0
 8008068:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800806c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8008070:	4618      	mov	r0, r3
 8008072:	3730      	adds	r7, #48	; 0x30
 8008074:	46bd      	mov	sp, r7
 8008076:	bd80      	pop	{r7, pc}

08008078 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b088      	sub	sp, #32
 800807c:	af00      	add	r7, sp, #0
 800807e:	60f8      	str	r0, [r7, #12]
 8008080:	60b9      	str	r1, [r7, #8]
 8008082:	603b      	str	r3, [r7, #0]
 8008084:	4613      	mov	r3, r2
 8008086:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008088:	f7fb f838 	bl	80030fc <HAL_GetTick>
 800808c:	4602      	mov	r2, r0
 800808e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008090:	1a9b      	subs	r3, r3, r2
 8008092:	683a      	ldr	r2, [r7, #0]
 8008094:	4413      	add	r3, r2
 8008096:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008098:	f7fb f830 	bl	80030fc <HAL_GetTick>
 800809c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800809e:	4b39      	ldr	r3, [pc, #228]	; (8008184 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	015b      	lsls	r3, r3, #5
 80080a4:	0d1b      	lsrs	r3, r3, #20
 80080a6:	69fa      	ldr	r2, [r7, #28]
 80080a8:	fb02 f303 	mul.w	r3, r2, r3
 80080ac:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80080ae:	e054      	b.n	800815a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080b6:	d050      	beq.n	800815a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80080b8:	f7fb f820 	bl	80030fc <HAL_GetTick>
 80080bc:	4602      	mov	r2, r0
 80080be:	69bb      	ldr	r3, [r7, #24]
 80080c0:	1ad3      	subs	r3, r2, r3
 80080c2:	69fa      	ldr	r2, [r7, #28]
 80080c4:	429a      	cmp	r2, r3
 80080c6:	d902      	bls.n	80080ce <SPI_WaitFlagStateUntilTimeout+0x56>
 80080c8:	69fb      	ldr	r3, [r7, #28]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d13d      	bne.n	800814a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	685a      	ldr	r2, [r3, #4]
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80080dc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	685b      	ldr	r3, [r3, #4]
 80080e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80080e6:	d111      	bne.n	800810c <SPI_WaitFlagStateUntilTimeout+0x94>
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	689b      	ldr	r3, [r3, #8]
 80080ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80080f0:	d004      	beq.n	80080fc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	689b      	ldr	r3, [r3, #8]
 80080f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80080fa:	d107      	bne.n	800810c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	681a      	ldr	r2, [r3, #0]
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800810a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008110:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008114:	d10f      	bne.n	8008136 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	681a      	ldr	r2, [r3, #0]
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008124:	601a      	str	r2, [r3, #0]
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	681a      	ldr	r2, [r3, #0]
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008134:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	2201      	movs	r2, #1
 800813a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	2200      	movs	r2, #0
 8008142:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8008146:	2303      	movs	r3, #3
 8008148:	e017      	b.n	800817a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800814a:	697b      	ldr	r3, [r7, #20]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d101      	bne.n	8008154 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008150:	2300      	movs	r3, #0
 8008152:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008154:	697b      	ldr	r3, [r7, #20]
 8008156:	3b01      	subs	r3, #1
 8008158:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	689a      	ldr	r2, [r3, #8]
 8008160:	68bb      	ldr	r3, [r7, #8]
 8008162:	4013      	ands	r3, r2
 8008164:	68ba      	ldr	r2, [r7, #8]
 8008166:	429a      	cmp	r2, r3
 8008168:	bf0c      	ite	eq
 800816a:	2301      	moveq	r3, #1
 800816c:	2300      	movne	r3, #0
 800816e:	b2db      	uxtb	r3, r3
 8008170:	461a      	mov	r2, r3
 8008172:	79fb      	ldrb	r3, [r7, #7]
 8008174:	429a      	cmp	r2, r3
 8008176:	d19b      	bne.n	80080b0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008178:	2300      	movs	r3, #0
}
 800817a:	4618      	mov	r0, r3
 800817c:	3720      	adds	r7, #32
 800817e:	46bd      	mov	sp, r7
 8008180:	bd80      	pop	{r7, pc}
 8008182:	bf00      	nop
 8008184:	20000028 	.word	0x20000028

08008188 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b086      	sub	sp, #24
 800818c:	af02      	add	r7, sp, #8
 800818e:	60f8      	str	r0, [r7, #12]
 8008190:	60b9      	str	r1, [r7, #8]
 8008192:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	685b      	ldr	r3, [r3, #4]
 8008198:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800819c:	d111      	bne.n	80081c2 <SPI_EndRxTransaction+0x3a>
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	689b      	ldr	r3, [r3, #8]
 80081a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80081a6:	d004      	beq.n	80081b2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	689b      	ldr	r3, [r3, #8]
 80081ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80081b0:	d107      	bne.n	80081c2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	681a      	ldr	r2, [r3, #0]
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80081c0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	685b      	ldr	r3, [r3, #4]
 80081c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80081ca:	d12a      	bne.n	8008222 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	689b      	ldr	r3, [r3, #8]
 80081d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80081d4:	d012      	beq.n	80081fc <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	9300      	str	r3, [sp, #0]
 80081da:	68bb      	ldr	r3, [r7, #8]
 80081dc:	2200      	movs	r2, #0
 80081de:	2180      	movs	r1, #128	; 0x80
 80081e0:	68f8      	ldr	r0, [r7, #12]
 80081e2:	f7ff ff49 	bl	8008078 <SPI_WaitFlagStateUntilTimeout>
 80081e6:	4603      	mov	r3, r0
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d02d      	beq.n	8008248 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081f0:	f043 0220 	orr.w	r2, r3, #32
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80081f8:	2303      	movs	r3, #3
 80081fa:	e026      	b.n	800824a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	9300      	str	r3, [sp, #0]
 8008200:	68bb      	ldr	r3, [r7, #8]
 8008202:	2200      	movs	r2, #0
 8008204:	2101      	movs	r1, #1
 8008206:	68f8      	ldr	r0, [r7, #12]
 8008208:	f7ff ff36 	bl	8008078 <SPI_WaitFlagStateUntilTimeout>
 800820c:	4603      	mov	r3, r0
 800820e:	2b00      	cmp	r3, #0
 8008210:	d01a      	beq.n	8008248 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008216:	f043 0220 	orr.w	r2, r3, #32
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800821e:	2303      	movs	r3, #3
 8008220:	e013      	b.n	800824a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	9300      	str	r3, [sp, #0]
 8008226:	68bb      	ldr	r3, [r7, #8]
 8008228:	2200      	movs	r2, #0
 800822a:	2101      	movs	r1, #1
 800822c:	68f8      	ldr	r0, [r7, #12]
 800822e:	f7ff ff23 	bl	8008078 <SPI_WaitFlagStateUntilTimeout>
 8008232:	4603      	mov	r3, r0
 8008234:	2b00      	cmp	r3, #0
 8008236:	d007      	beq.n	8008248 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800823c:	f043 0220 	orr.w	r2, r3, #32
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008244:	2303      	movs	r3, #3
 8008246:	e000      	b.n	800824a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8008248:	2300      	movs	r3, #0
}
 800824a:	4618      	mov	r0, r3
 800824c:	3710      	adds	r7, #16
 800824e:	46bd      	mov	sp, r7
 8008250:	bd80      	pop	{r7, pc}
	...

08008254 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008254:	b580      	push	{r7, lr}
 8008256:	b088      	sub	sp, #32
 8008258:	af02      	add	r7, sp, #8
 800825a:	60f8      	str	r0, [r7, #12]
 800825c:	60b9      	str	r1, [r7, #8]
 800825e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008260:	4b1b      	ldr	r3, [pc, #108]	; (80082d0 <SPI_EndRxTxTransaction+0x7c>)
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	4a1b      	ldr	r2, [pc, #108]	; (80082d4 <SPI_EndRxTxTransaction+0x80>)
 8008266:	fba2 2303 	umull	r2, r3, r2, r3
 800826a:	0d5b      	lsrs	r3, r3, #21
 800826c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008270:	fb02 f303 	mul.w	r3, r2, r3
 8008274:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	685b      	ldr	r3, [r3, #4]
 800827a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800827e:	d112      	bne.n	80082a6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	9300      	str	r3, [sp, #0]
 8008284:	68bb      	ldr	r3, [r7, #8]
 8008286:	2200      	movs	r2, #0
 8008288:	2180      	movs	r1, #128	; 0x80
 800828a:	68f8      	ldr	r0, [r7, #12]
 800828c:	f7ff fef4 	bl	8008078 <SPI_WaitFlagStateUntilTimeout>
 8008290:	4603      	mov	r3, r0
 8008292:	2b00      	cmp	r3, #0
 8008294:	d016      	beq.n	80082c4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800829a:	f043 0220 	orr.w	r2, r3, #32
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80082a2:	2303      	movs	r3, #3
 80082a4:	e00f      	b.n	80082c6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80082a6:	697b      	ldr	r3, [r7, #20]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d00a      	beq.n	80082c2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80082ac:	697b      	ldr	r3, [r7, #20]
 80082ae:	3b01      	subs	r3, #1
 80082b0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	689b      	ldr	r3, [r3, #8]
 80082b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082bc:	2b80      	cmp	r3, #128	; 0x80
 80082be:	d0f2      	beq.n	80082a6 <SPI_EndRxTxTransaction+0x52>
 80082c0:	e000      	b.n	80082c4 <SPI_EndRxTxTransaction+0x70>
        break;
 80082c2:	bf00      	nop
  }

  return HAL_OK;
 80082c4:	2300      	movs	r3, #0
}
 80082c6:	4618      	mov	r0, r3
 80082c8:	3718      	adds	r7, #24
 80082ca:	46bd      	mov	sp, r7
 80082cc:	bd80      	pop	{r7, pc}
 80082ce:	bf00      	nop
 80082d0:	20000028 	.word	0x20000028
 80082d4:	165e9f81 	.word	0x165e9f81

080082d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b082      	sub	sp, #8
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d101      	bne.n	80082ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80082e6:	2301      	movs	r3, #1
 80082e8:	e041      	b.n	800836e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082f0:	b2db      	uxtb	r3, r3
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d106      	bne.n	8008304 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2200      	movs	r2, #0
 80082fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80082fe:	6878      	ldr	r0, [r7, #4]
 8008300:	f7fa f8f4 	bl	80024ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2202      	movs	r2, #2
 8008308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681a      	ldr	r2, [r3, #0]
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	3304      	adds	r3, #4
 8008314:	4619      	mov	r1, r3
 8008316:	4610      	mov	r0, r2
 8008318:	f000 fd74 	bl	8008e04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2201      	movs	r2, #1
 8008320:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2201      	movs	r2, #1
 8008328:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2201      	movs	r2, #1
 8008330:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2201      	movs	r2, #1
 8008338:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2201      	movs	r2, #1
 8008340:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2201      	movs	r2, #1
 8008348:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2201      	movs	r2, #1
 8008350:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2201      	movs	r2, #1
 8008358:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2201      	movs	r2, #1
 8008360:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2201      	movs	r2, #1
 8008368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800836c:	2300      	movs	r3, #0
}
 800836e:	4618      	mov	r0, r3
 8008370:	3708      	adds	r7, #8
 8008372:	46bd      	mov	sp, r7
 8008374:	bd80      	pop	{r7, pc}

08008376 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008376:	b580      	push	{r7, lr}
 8008378:	b082      	sub	sp, #8
 800837a:	af00      	add	r7, sp, #0
 800837c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d101      	bne.n	8008388 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008384:	2301      	movs	r3, #1
 8008386:	e041      	b.n	800840c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800838e:	b2db      	uxtb	r3, r3
 8008390:	2b00      	cmp	r3, #0
 8008392:	d106      	bne.n	80083a2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2200      	movs	r2, #0
 8008398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800839c:	6878      	ldr	r0, [r7, #4]
 800839e:	f000 f839 	bl	8008414 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	2202      	movs	r2, #2
 80083a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681a      	ldr	r2, [r3, #0]
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	3304      	adds	r3, #4
 80083b2:	4619      	mov	r1, r3
 80083b4:	4610      	mov	r0, r2
 80083b6:	f000 fd25 	bl	8008e04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	2201      	movs	r2, #1
 80083be:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	2201      	movs	r2, #1
 80083c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	2201      	movs	r2, #1
 80083ce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	2201      	movs	r2, #1
 80083d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	2201      	movs	r2, #1
 80083de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	2201      	movs	r2, #1
 80083e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	2201      	movs	r2, #1
 80083ee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	2201      	movs	r2, #1
 80083f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	2201      	movs	r2, #1
 80083fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	2201      	movs	r2, #1
 8008406:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800840a:	2300      	movs	r3, #0
}
 800840c:	4618      	mov	r0, r3
 800840e:	3708      	adds	r7, #8
 8008410:	46bd      	mov	sp, r7
 8008412:	bd80      	pop	{r7, pc}

08008414 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008414:	b480      	push	{r7}
 8008416:	b083      	sub	sp, #12
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800841c:	bf00      	nop
 800841e:	370c      	adds	r7, #12
 8008420:	46bd      	mov	sp, r7
 8008422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008426:	4770      	bx	lr

08008428 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8008428:	b580      	push	{r7, lr}
 800842a:	b086      	sub	sp, #24
 800842c:	af00      	add	r7, sp, #0
 800842e:	60f8      	str	r0, [r7, #12]
 8008430:	60b9      	str	r1, [r7, #8]
 8008432:	607a      	str	r2, [r7, #4]
 8008434:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8008436:	2300      	movs	r3, #0
 8008438:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800843a:	68bb      	ldr	r3, [r7, #8]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d109      	bne.n	8008454 <HAL_TIM_PWM_Start_DMA+0x2c>
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008446:	b2db      	uxtb	r3, r3
 8008448:	2b02      	cmp	r3, #2
 800844a:	bf0c      	ite	eq
 800844c:	2301      	moveq	r3, #1
 800844e:	2300      	movne	r3, #0
 8008450:	b2db      	uxtb	r3, r3
 8008452:	e022      	b.n	800849a <HAL_TIM_PWM_Start_DMA+0x72>
 8008454:	68bb      	ldr	r3, [r7, #8]
 8008456:	2b04      	cmp	r3, #4
 8008458:	d109      	bne.n	800846e <HAL_TIM_PWM_Start_DMA+0x46>
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008460:	b2db      	uxtb	r3, r3
 8008462:	2b02      	cmp	r3, #2
 8008464:	bf0c      	ite	eq
 8008466:	2301      	moveq	r3, #1
 8008468:	2300      	movne	r3, #0
 800846a:	b2db      	uxtb	r3, r3
 800846c:	e015      	b.n	800849a <HAL_TIM_PWM_Start_DMA+0x72>
 800846e:	68bb      	ldr	r3, [r7, #8]
 8008470:	2b08      	cmp	r3, #8
 8008472:	d109      	bne.n	8008488 <HAL_TIM_PWM_Start_DMA+0x60>
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800847a:	b2db      	uxtb	r3, r3
 800847c:	2b02      	cmp	r3, #2
 800847e:	bf0c      	ite	eq
 8008480:	2301      	moveq	r3, #1
 8008482:	2300      	movne	r3, #0
 8008484:	b2db      	uxtb	r3, r3
 8008486:	e008      	b.n	800849a <HAL_TIM_PWM_Start_DMA+0x72>
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800848e:	b2db      	uxtb	r3, r3
 8008490:	2b02      	cmp	r3, #2
 8008492:	bf0c      	ite	eq
 8008494:	2301      	moveq	r3, #1
 8008496:	2300      	movne	r3, #0
 8008498:	b2db      	uxtb	r3, r3
 800849a:	2b00      	cmp	r3, #0
 800849c:	d001      	beq.n	80084a2 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 800849e:	2302      	movs	r3, #2
 80084a0:	e15d      	b.n	800875e <HAL_TIM_PWM_Start_DMA+0x336>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80084a2:	68bb      	ldr	r3, [r7, #8]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d109      	bne.n	80084bc <HAL_TIM_PWM_Start_DMA+0x94>
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80084ae:	b2db      	uxtb	r3, r3
 80084b0:	2b01      	cmp	r3, #1
 80084b2:	bf0c      	ite	eq
 80084b4:	2301      	moveq	r3, #1
 80084b6:	2300      	movne	r3, #0
 80084b8:	b2db      	uxtb	r3, r3
 80084ba:	e022      	b.n	8008502 <HAL_TIM_PWM_Start_DMA+0xda>
 80084bc:	68bb      	ldr	r3, [r7, #8]
 80084be:	2b04      	cmp	r3, #4
 80084c0:	d109      	bne.n	80084d6 <HAL_TIM_PWM_Start_DMA+0xae>
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80084c8:	b2db      	uxtb	r3, r3
 80084ca:	2b01      	cmp	r3, #1
 80084cc:	bf0c      	ite	eq
 80084ce:	2301      	moveq	r3, #1
 80084d0:	2300      	movne	r3, #0
 80084d2:	b2db      	uxtb	r3, r3
 80084d4:	e015      	b.n	8008502 <HAL_TIM_PWM_Start_DMA+0xda>
 80084d6:	68bb      	ldr	r3, [r7, #8]
 80084d8:	2b08      	cmp	r3, #8
 80084da:	d109      	bne.n	80084f0 <HAL_TIM_PWM_Start_DMA+0xc8>
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80084e2:	b2db      	uxtb	r3, r3
 80084e4:	2b01      	cmp	r3, #1
 80084e6:	bf0c      	ite	eq
 80084e8:	2301      	moveq	r3, #1
 80084ea:	2300      	movne	r3, #0
 80084ec:	b2db      	uxtb	r3, r3
 80084ee:	e008      	b.n	8008502 <HAL_TIM_PWM_Start_DMA+0xda>
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80084f6:	b2db      	uxtb	r3, r3
 80084f8:	2b01      	cmp	r3, #1
 80084fa:	bf0c      	ite	eq
 80084fc:	2301      	moveq	r3, #1
 80084fe:	2300      	movne	r3, #0
 8008500:	b2db      	uxtb	r3, r3
 8008502:	2b00      	cmp	r3, #0
 8008504:	d024      	beq.n	8008550 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d104      	bne.n	8008516 <HAL_TIM_PWM_Start_DMA+0xee>
 800850c:	887b      	ldrh	r3, [r7, #2]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d001      	beq.n	8008516 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8008512:	2301      	movs	r3, #1
 8008514:	e123      	b.n	800875e <HAL_TIM_PWM_Start_DMA+0x336>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008516:	68bb      	ldr	r3, [r7, #8]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d104      	bne.n	8008526 <HAL_TIM_PWM_Start_DMA+0xfe>
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	2202      	movs	r2, #2
 8008520:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008524:	e016      	b.n	8008554 <HAL_TIM_PWM_Start_DMA+0x12c>
 8008526:	68bb      	ldr	r3, [r7, #8]
 8008528:	2b04      	cmp	r3, #4
 800852a:	d104      	bne.n	8008536 <HAL_TIM_PWM_Start_DMA+0x10e>
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	2202      	movs	r2, #2
 8008530:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008534:	e00e      	b.n	8008554 <HAL_TIM_PWM_Start_DMA+0x12c>
 8008536:	68bb      	ldr	r3, [r7, #8]
 8008538:	2b08      	cmp	r3, #8
 800853a:	d104      	bne.n	8008546 <HAL_TIM_PWM_Start_DMA+0x11e>
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	2202      	movs	r2, #2
 8008540:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008544:	e006      	b.n	8008554 <HAL_TIM_PWM_Start_DMA+0x12c>
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	2202      	movs	r2, #2
 800854a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800854e:	e001      	b.n	8008554 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8008550:	2301      	movs	r3, #1
 8008552:	e104      	b.n	800875e <HAL_TIM_PWM_Start_DMA+0x336>
  }

  switch (Channel)
 8008554:	68bb      	ldr	r3, [r7, #8]
 8008556:	2b0c      	cmp	r3, #12
 8008558:	f200 80ae 	bhi.w	80086b8 <HAL_TIM_PWM_Start_DMA+0x290>
 800855c:	a201      	add	r2, pc, #4	; (adr r2, 8008564 <HAL_TIM_PWM_Start_DMA+0x13c>)
 800855e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008562:	bf00      	nop
 8008564:	08008599 	.word	0x08008599
 8008568:	080086b9 	.word	0x080086b9
 800856c:	080086b9 	.word	0x080086b9
 8008570:	080086b9 	.word	0x080086b9
 8008574:	080085e1 	.word	0x080085e1
 8008578:	080086b9 	.word	0x080086b9
 800857c:	080086b9 	.word	0x080086b9
 8008580:	080086b9 	.word	0x080086b9
 8008584:	08008629 	.word	0x08008629
 8008588:	080086b9 	.word	0x080086b9
 800858c:	080086b9 	.word	0x080086b9
 8008590:	080086b9 	.word	0x080086b9
 8008594:	08008671 	.word	0x08008671
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800859c:	4a72      	ldr	r2, [pc, #456]	; (8008768 <HAL_TIM_PWM_Start_DMA+0x340>)
 800859e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085a4:	4a71      	ldr	r2, [pc, #452]	; (800876c <HAL_TIM_PWM_Start_DMA+0x344>)
 80085a6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085ac:	4a70      	ldr	r2, [pc, #448]	; (8008770 <HAL_TIM_PWM_Start_DMA+0x348>)
 80085ae:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80085b4:	6879      	ldr	r1, [r7, #4]
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	3334      	adds	r3, #52	; 0x34
 80085bc:	461a      	mov	r2, r3
 80085be:	887b      	ldrh	r3, [r7, #2]
 80085c0:	f7fb fc46 	bl	8003e50 <HAL_DMA_Start_IT>
 80085c4:	4603      	mov	r3, r0
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d001      	beq.n	80085ce <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80085ca:	2301      	movs	r3, #1
 80085cc:	e0c7      	b.n	800875e <HAL_TIM_PWM_Start_DMA+0x336>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	68da      	ldr	r2, [r3, #12]
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80085dc:	60da      	str	r2, [r3, #12]
      break;
 80085de:	e06e      	b.n	80086be <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085e4:	4a60      	ldr	r2, [pc, #384]	; (8008768 <HAL_TIM_PWM_Start_DMA+0x340>)
 80085e6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085ec:	4a5f      	ldr	r2, [pc, #380]	; (800876c <HAL_TIM_PWM_Start_DMA+0x344>)
 80085ee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085f4:	4a5e      	ldr	r2, [pc, #376]	; (8008770 <HAL_TIM_PWM_Start_DMA+0x348>)
 80085f6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80085fc:	6879      	ldr	r1, [r7, #4]
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	3338      	adds	r3, #56	; 0x38
 8008604:	461a      	mov	r2, r3
 8008606:	887b      	ldrh	r3, [r7, #2]
 8008608:	f7fb fc22 	bl	8003e50 <HAL_DMA_Start_IT>
 800860c:	4603      	mov	r3, r0
 800860e:	2b00      	cmp	r3, #0
 8008610:	d001      	beq.n	8008616 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008612:	2301      	movs	r3, #1
 8008614:	e0a3      	b.n	800875e <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	68da      	ldr	r2, [r3, #12]
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008624:	60da      	str	r2, [r3, #12]
      break;
 8008626:	e04a      	b.n	80086be <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800862c:	4a4e      	ldr	r2, [pc, #312]	; (8008768 <HAL_TIM_PWM_Start_DMA+0x340>)
 800862e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008634:	4a4d      	ldr	r2, [pc, #308]	; (800876c <HAL_TIM_PWM_Start_DMA+0x344>)
 8008636:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800863c:	4a4c      	ldr	r2, [pc, #304]	; (8008770 <HAL_TIM_PWM_Start_DMA+0x348>)
 800863e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8008644:	6879      	ldr	r1, [r7, #4]
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	333c      	adds	r3, #60	; 0x3c
 800864c:	461a      	mov	r2, r3
 800864e:	887b      	ldrh	r3, [r7, #2]
 8008650:	f7fb fbfe 	bl	8003e50 <HAL_DMA_Start_IT>
 8008654:	4603      	mov	r3, r0
 8008656:	2b00      	cmp	r3, #0
 8008658:	d001      	beq.n	800865e <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800865a:	2301      	movs	r3, #1
 800865c:	e07f      	b.n	800875e <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	68da      	ldr	r2, [r3, #12]
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800866c:	60da      	str	r2, [r3, #12]
      break;
 800866e:	e026      	b.n	80086be <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008674:	4a3c      	ldr	r2, [pc, #240]	; (8008768 <HAL_TIM_PWM_Start_DMA+0x340>)
 8008676:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800867c:	4a3b      	ldr	r2, [pc, #236]	; (800876c <HAL_TIM_PWM_Start_DMA+0x344>)
 800867e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008684:	4a3a      	ldr	r2, [pc, #232]	; (8008770 <HAL_TIM_PWM_Start_DMA+0x348>)
 8008686:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800868c:	6879      	ldr	r1, [r7, #4]
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	3340      	adds	r3, #64	; 0x40
 8008694:	461a      	mov	r2, r3
 8008696:	887b      	ldrh	r3, [r7, #2]
 8008698:	f7fb fbda 	bl	8003e50 <HAL_DMA_Start_IT>
 800869c:	4603      	mov	r3, r0
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d001      	beq.n	80086a6 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80086a2:	2301      	movs	r3, #1
 80086a4:	e05b      	b.n	800875e <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	68da      	ldr	r2, [r3, #12]
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80086b4:	60da      	str	r2, [r3, #12]
      break;
 80086b6:	e002      	b.n	80086be <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 80086b8:	2301      	movs	r3, #1
 80086ba:	75fb      	strb	r3, [r7, #23]
      break;
 80086bc:	bf00      	nop
  }

  if (status == HAL_OK)
 80086be:	7dfb      	ldrb	r3, [r7, #23]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d14b      	bne.n	800875c <HAL_TIM_PWM_Start_DMA+0x334>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	2201      	movs	r2, #1
 80086ca:	68b9      	ldr	r1, [r7, #8]
 80086cc:	4618      	mov	r0, r3
 80086ce:	f000 fe3f 	bl	8009350 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	4a27      	ldr	r2, [pc, #156]	; (8008774 <HAL_TIM_PWM_Start_DMA+0x34c>)
 80086d8:	4293      	cmp	r3, r2
 80086da:	d107      	bne.n	80086ec <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80086ea:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	4a20      	ldr	r2, [pc, #128]	; (8008774 <HAL_TIM_PWM_Start_DMA+0x34c>)
 80086f2:	4293      	cmp	r3, r2
 80086f4:	d018      	beq.n	8008728 <HAL_TIM_PWM_Start_DMA+0x300>
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086fe:	d013      	beq.n	8008728 <HAL_TIM_PWM_Start_DMA+0x300>
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	4a1c      	ldr	r2, [pc, #112]	; (8008778 <HAL_TIM_PWM_Start_DMA+0x350>)
 8008706:	4293      	cmp	r3, r2
 8008708:	d00e      	beq.n	8008728 <HAL_TIM_PWM_Start_DMA+0x300>
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	4a1b      	ldr	r2, [pc, #108]	; (800877c <HAL_TIM_PWM_Start_DMA+0x354>)
 8008710:	4293      	cmp	r3, r2
 8008712:	d009      	beq.n	8008728 <HAL_TIM_PWM_Start_DMA+0x300>
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	4a19      	ldr	r2, [pc, #100]	; (8008780 <HAL_TIM_PWM_Start_DMA+0x358>)
 800871a:	4293      	cmp	r3, r2
 800871c:	d004      	beq.n	8008728 <HAL_TIM_PWM_Start_DMA+0x300>
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	4a18      	ldr	r2, [pc, #96]	; (8008784 <HAL_TIM_PWM_Start_DMA+0x35c>)
 8008724:	4293      	cmp	r3, r2
 8008726:	d111      	bne.n	800874c <HAL_TIM_PWM_Start_DMA+0x324>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	689b      	ldr	r3, [r3, #8]
 800872e:	f003 0307 	and.w	r3, r3, #7
 8008732:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008734:	693b      	ldr	r3, [r7, #16]
 8008736:	2b06      	cmp	r3, #6
 8008738:	d010      	beq.n	800875c <HAL_TIM_PWM_Start_DMA+0x334>
      {
        __HAL_TIM_ENABLE(htim);
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	681a      	ldr	r2, [r3, #0]
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	f042 0201 	orr.w	r2, r2, #1
 8008748:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800874a:	e007      	b.n	800875c <HAL_TIM_PWM_Start_DMA+0x334>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	681a      	ldr	r2, [r3, #0]
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	f042 0201 	orr.w	r2, r2, #1
 800875a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800875c:	7dfb      	ldrb	r3, [r7, #23]
}
 800875e:	4618      	mov	r0, r3
 8008760:	3718      	adds	r7, #24
 8008762:	46bd      	mov	sp, r7
 8008764:	bd80      	pop	{r7, pc}
 8008766:	bf00      	nop
 8008768:	08008cf5 	.word	0x08008cf5
 800876c:	08008d9d 	.word	0x08008d9d
 8008770:	08008c63 	.word	0x08008c63
 8008774:	40010000 	.word	0x40010000
 8008778:	40000400 	.word	0x40000400
 800877c:	40000800 	.word	0x40000800
 8008780:	40000c00 	.word	0x40000c00
 8008784:	40014000 	.word	0x40014000

08008788 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008788:	b580      	push	{r7, lr}
 800878a:	b084      	sub	sp, #16
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
 8008790:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008792:	2300      	movs	r3, #0
 8008794:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	2b0c      	cmp	r3, #12
 800879a:	d855      	bhi.n	8008848 <HAL_TIM_PWM_Stop_DMA+0xc0>
 800879c:	a201      	add	r2, pc, #4	; (adr r2, 80087a4 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 800879e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087a2:	bf00      	nop
 80087a4:	080087d9 	.word	0x080087d9
 80087a8:	08008849 	.word	0x08008849
 80087ac:	08008849 	.word	0x08008849
 80087b0:	08008849 	.word	0x08008849
 80087b4:	080087f5 	.word	0x080087f5
 80087b8:	08008849 	.word	0x08008849
 80087bc:	08008849 	.word	0x08008849
 80087c0:	08008849 	.word	0x08008849
 80087c4:	08008811 	.word	0x08008811
 80087c8:	08008849 	.word	0x08008849
 80087cc:	08008849 	.word	0x08008849
 80087d0:	08008849 	.word	0x08008849
 80087d4:	0800882d 	.word	0x0800882d
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	68da      	ldr	r2, [r3, #12]
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80087e6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087ec:	4618      	mov	r0, r3
 80087ee:	f7fb fbf7 	bl	8003fe0 <HAL_DMA_Abort_IT>
      break;
 80087f2:	e02c      	b.n	800884e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	68da      	ldr	r2, [r3, #12]
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008802:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008808:	4618      	mov	r0, r3
 800880a:	f7fb fbe9 	bl	8003fe0 <HAL_DMA_Abort_IT>
      break;
 800880e:	e01e      	b.n	800884e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	68da      	ldr	r2, [r3, #12]
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800881e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008824:	4618      	mov	r0, r3
 8008826:	f7fb fbdb 	bl	8003fe0 <HAL_DMA_Abort_IT>
      break;
 800882a:	e010      	b.n	800884e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	68da      	ldr	r2, [r3, #12]
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800883a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008840:	4618      	mov	r0, r3
 8008842:	f7fb fbcd 	bl	8003fe0 <HAL_DMA_Abort_IT>
      break;
 8008846:	e002      	b.n	800884e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8008848:	2301      	movs	r3, #1
 800884a:	73fb      	strb	r3, [r7, #15]
      break;
 800884c:	bf00      	nop
  }

  if (status == HAL_OK)
 800884e:	7bfb      	ldrb	r3, [r7, #15]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d157      	bne.n	8008904 <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	2200      	movs	r2, #0
 800885a:	6839      	ldr	r1, [r7, #0]
 800885c:	4618      	mov	r0, r3
 800885e:	f000 fd77 	bl	8009350 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	4a2a      	ldr	r2, [pc, #168]	; (8008910 <HAL_TIM_PWM_Stop_DMA+0x188>)
 8008868:	4293      	cmp	r3, r2
 800886a:	d117      	bne.n	800889c <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	6a1a      	ldr	r2, [r3, #32]
 8008872:	f241 1311 	movw	r3, #4369	; 0x1111
 8008876:	4013      	ands	r3, r2
 8008878:	2b00      	cmp	r3, #0
 800887a:	d10f      	bne.n	800889c <HAL_TIM_PWM_Stop_DMA+0x114>
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	6a1a      	ldr	r2, [r3, #32]
 8008882:	f240 4344 	movw	r3, #1092	; 0x444
 8008886:	4013      	ands	r3, r2
 8008888:	2b00      	cmp	r3, #0
 800888a:	d107      	bne.n	800889c <HAL_TIM_PWM_Stop_DMA+0x114>
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800889a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	6a1a      	ldr	r2, [r3, #32]
 80088a2:	f241 1311 	movw	r3, #4369	; 0x1111
 80088a6:	4013      	ands	r3, r2
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d10f      	bne.n	80088cc <HAL_TIM_PWM_Stop_DMA+0x144>
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	6a1a      	ldr	r2, [r3, #32]
 80088b2:	f240 4344 	movw	r3, #1092	; 0x444
 80088b6:	4013      	ands	r3, r2
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d107      	bne.n	80088cc <HAL_TIM_PWM_Stop_DMA+0x144>
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	681a      	ldr	r2, [r3, #0]
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	f022 0201 	bic.w	r2, r2, #1
 80088ca:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d104      	bne.n	80088dc <HAL_TIM_PWM_Stop_DMA+0x154>
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	2201      	movs	r2, #1
 80088d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80088da:	e013      	b.n	8008904 <HAL_TIM_PWM_Stop_DMA+0x17c>
 80088dc:	683b      	ldr	r3, [r7, #0]
 80088de:	2b04      	cmp	r3, #4
 80088e0:	d104      	bne.n	80088ec <HAL_TIM_PWM_Stop_DMA+0x164>
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	2201      	movs	r2, #1
 80088e6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80088ea:	e00b      	b.n	8008904 <HAL_TIM_PWM_Stop_DMA+0x17c>
 80088ec:	683b      	ldr	r3, [r7, #0]
 80088ee:	2b08      	cmp	r3, #8
 80088f0:	d104      	bne.n	80088fc <HAL_TIM_PWM_Stop_DMA+0x174>
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	2201      	movs	r2, #1
 80088f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80088fa:	e003      	b.n	8008904 <HAL_TIM_PWM_Stop_DMA+0x17c>
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2201      	movs	r2, #1
 8008900:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8008904:	7bfb      	ldrb	r3, [r7, #15]
}
 8008906:	4618      	mov	r0, r3
 8008908:	3710      	adds	r7, #16
 800890a:	46bd      	mov	sp, r7
 800890c:	bd80      	pop	{r7, pc}
 800890e:	bf00      	nop
 8008910:	40010000 	.word	0x40010000

08008914 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008914:	b580      	push	{r7, lr}
 8008916:	b086      	sub	sp, #24
 8008918:	af00      	add	r7, sp, #0
 800891a:	60f8      	str	r0, [r7, #12]
 800891c:	60b9      	str	r1, [r7, #8]
 800891e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008920:	2300      	movs	r3, #0
 8008922:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800892a:	2b01      	cmp	r3, #1
 800892c:	d101      	bne.n	8008932 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800892e:	2302      	movs	r3, #2
 8008930:	e0ae      	b.n	8008a90 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	2201      	movs	r2, #1
 8008936:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	2b0c      	cmp	r3, #12
 800893e:	f200 809f 	bhi.w	8008a80 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008942:	a201      	add	r2, pc, #4	; (adr r2, 8008948 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008948:	0800897d 	.word	0x0800897d
 800894c:	08008a81 	.word	0x08008a81
 8008950:	08008a81 	.word	0x08008a81
 8008954:	08008a81 	.word	0x08008a81
 8008958:	080089bd 	.word	0x080089bd
 800895c:	08008a81 	.word	0x08008a81
 8008960:	08008a81 	.word	0x08008a81
 8008964:	08008a81 	.word	0x08008a81
 8008968:	080089ff 	.word	0x080089ff
 800896c:	08008a81 	.word	0x08008a81
 8008970:	08008a81 	.word	0x08008a81
 8008974:	08008a81 	.word	0x08008a81
 8008978:	08008a3f 	.word	0x08008a3f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	68b9      	ldr	r1, [r7, #8]
 8008982:	4618      	mov	r0, r3
 8008984:	f000 fabe 	bl	8008f04 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	699a      	ldr	r2, [r3, #24]
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	f042 0208 	orr.w	r2, r2, #8
 8008996:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	699a      	ldr	r2, [r3, #24]
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	f022 0204 	bic.w	r2, r2, #4
 80089a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	6999      	ldr	r1, [r3, #24]
 80089ae:	68bb      	ldr	r3, [r7, #8]
 80089b0:	691a      	ldr	r2, [r3, #16]
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	430a      	orrs	r2, r1
 80089b8:	619a      	str	r2, [r3, #24]
      break;
 80089ba:	e064      	b.n	8008a86 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	68b9      	ldr	r1, [r7, #8]
 80089c2:	4618      	mov	r0, r3
 80089c4:	f000 fb04 	bl	8008fd0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	699a      	ldr	r2, [r3, #24]
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80089d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	699a      	ldr	r2, [r3, #24]
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80089e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	6999      	ldr	r1, [r3, #24]
 80089ee:	68bb      	ldr	r3, [r7, #8]
 80089f0:	691b      	ldr	r3, [r3, #16]
 80089f2:	021a      	lsls	r2, r3, #8
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	430a      	orrs	r2, r1
 80089fa:	619a      	str	r2, [r3, #24]
      break;
 80089fc:	e043      	b.n	8008a86 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	68b9      	ldr	r1, [r7, #8]
 8008a04:	4618      	mov	r0, r3
 8008a06:	f000 fb4f 	bl	80090a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	69da      	ldr	r2, [r3, #28]
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	f042 0208 	orr.w	r2, r2, #8
 8008a18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	69da      	ldr	r2, [r3, #28]
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	f022 0204 	bic.w	r2, r2, #4
 8008a28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	69d9      	ldr	r1, [r3, #28]
 8008a30:	68bb      	ldr	r3, [r7, #8]
 8008a32:	691a      	ldr	r2, [r3, #16]
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	430a      	orrs	r2, r1
 8008a3a:	61da      	str	r2, [r3, #28]
      break;
 8008a3c:	e023      	b.n	8008a86 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	68b9      	ldr	r1, [r7, #8]
 8008a44:	4618      	mov	r0, r3
 8008a46:	f000 fb99 	bl	800917c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	69da      	ldr	r2, [r3, #28]
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008a58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	69da      	ldr	r2, [r3, #28]
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008a68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	69d9      	ldr	r1, [r3, #28]
 8008a70:	68bb      	ldr	r3, [r7, #8]
 8008a72:	691b      	ldr	r3, [r3, #16]
 8008a74:	021a      	lsls	r2, r3, #8
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	430a      	orrs	r2, r1
 8008a7c:	61da      	str	r2, [r3, #28]
      break;
 8008a7e:	e002      	b.n	8008a86 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008a80:	2301      	movs	r3, #1
 8008a82:	75fb      	strb	r3, [r7, #23]
      break;
 8008a84:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	2200      	movs	r2, #0
 8008a8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008a8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a90:	4618      	mov	r0, r3
 8008a92:	3718      	adds	r7, #24
 8008a94:	46bd      	mov	sp, r7
 8008a96:	bd80      	pop	{r7, pc}

08008a98 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b084      	sub	sp, #16
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
 8008aa0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008aac:	2b01      	cmp	r3, #1
 8008aae:	d101      	bne.n	8008ab4 <HAL_TIM_ConfigClockSource+0x1c>
 8008ab0:	2302      	movs	r3, #2
 8008ab2:	e0b4      	b.n	8008c1e <HAL_TIM_ConfigClockSource+0x186>
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	2201      	movs	r2, #1
 8008ab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2202      	movs	r2, #2
 8008ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	689b      	ldr	r3, [r3, #8]
 8008aca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008acc:	68bb      	ldr	r3, [r7, #8]
 8008ace:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008ad2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008ad4:	68bb      	ldr	r3, [r7, #8]
 8008ad6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008ada:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	68ba      	ldr	r2, [r7, #8]
 8008ae2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008ae4:	683b      	ldr	r3, [r7, #0]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008aec:	d03e      	beq.n	8008b6c <HAL_TIM_ConfigClockSource+0xd4>
 8008aee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008af2:	f200 8087 	bhi.w	8008c04 <HAL_TIM_ConfigClockSource+0x16c>
 8008af6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008afa:	f000 8086 	beq.w	8008c0a <HAL_TIM_ConfigClockSource+0x172>
 8008afe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b02:	d87f      	bhi.n	8008c04 <HAL_TIM_ConfigClockSource+0x16c>
 8008b04:	2b70      	cmp	r3, #112	; 0x70
 8008b06:	d01a      	beq.n	8008b3e <HAL_TIM_ConfigClockSource+0xa6>
 8008b08:	2b70      	cmp	r3, #112	; 0x70
 8008b0a:	d87b      	bhi.n	8008c04 <HAL_TIM_ConfigClockSource+0x16c>
 8008b0c:	2b60      	cmp	r3, #96	; 0x60
 8008b0e:	d050      	beq.n	8008bb2 <HAL_TIM_ConfigClockSource+0x11a>
 8008b10:	2b60      	cmp	r3, #96	; 0x60
 8008b12:	d877      	bhi.n	8008c04 <HAL_TIM_ConfigClockSource+0x16c>
 8008b14:	2b50      	cmp	r3, #80	; 0x50
 8008b16:	d03c      	beq.n	8008b92 <HAL_TIM_ConfigClockSource+0xfa>
 8008b18:	2b50      	cmp	r3, #80	; 0x50
 8008b1a:	d873      	bhi.n	8008c04 <HAL_TIM_ConfigClockSource+0x16c>
 8008b1c:	2b40      	cmp	r3, #64	; 0x40
 8008b1e:	d058      	beq.n	8008bd2 <HAL_TIM_ConfigClockSource+0x13a>
 8008b20:	2b40      	cmp	r3, #64	; 0x40
 8008b22:	d86f      	bhi.n	8008c04 <HAL_TIM_ConfigClockSource+0x16c>
 8008b24:	2b30      	cmp	r3, #48	; 0x30
 8008b26:	d064      	beq.n	8008bf2 <HAL_TIM_ConfigClockSource+0x15a>
 8008b28:	2b30      	cmp	r3, #48	; 0x30
 8008b2a:	d86b      	bhi.n	8008c04 <HAL_TIM_ConfigClockSource+0x16c>
 8008b2c:	2b20      	cmp	r3, #32
 8008b2e:	d060      	beq.n	8008bf2 <HAL_TIM_ConfigClockSource+0x15a>
 8008b30:	2b20      	cmp	r3, #32
 8008b32:	d867      	bhi.n	8008c04 <HAL_TIM_ConfigClockSource+0x16c>
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d05c      	beq.n	8008bf2 <HAL_TIM_ConfigClockSource+0x15a>
 8008b38:	2b10      	cmp	r3, #16
 8008b3a:	d05a      	beq.n	8008bf2 <HAL_TIM_ConfigClockSource+0x15a>
 8008b3c:	e062      	b.n	8008c04 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	6818      	ldr	r0, [r3, #0]
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	6899      	ldr	r1, [r3, #8]
 8008b46:	683b      	ldr	r3, [r7, #0]
 8008b48:	685a      	ldr	r2, [r3, #4]
 8008b4a:	683b      	ldr	r3, [r7, #0]
 8008b4c:	68db      	ldr	r3, [r3, #12]
 8008b4e:	f000 fbdf 	bl	8009310 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	689b      	ldr	r3, [r3, #8]
 8008b58:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008b5a:	68bb      	ldr	r3, [r7, #8]
 8008b5c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008b60:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	68ba      	ldr	r2, [r7, #8]
 8008b68:	609a      	str	r2, [r3, #8]
      break;
 8008b6a:	e04f      	b.n	8008c0c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	6818      	ldr	r0, [r3, #0]
 8008b70:	683b      	ldr	r3, [r7, #0]
 8008b72:	6899      	ldr	r1, [r3, #8]
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	685a      	ldr	r2, [r3, #4]
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	68db      	ldr	r3, [r3, #12]
 8008b7c:	f000 fbc8 	bl	8009310 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	689a      	ldr	r2, [r3, #8]
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008b8e:	609a      	str	r2, [r3, #8]
      break;
 8008b90:	e03c      	b.n	8008c0c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	6818      	ldr	r0, [r3, #0]
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	6859      	ldr	r1, [r3, #4]
 8008b9a:	683b      	ldr	r3, [r7, #0]
 8008b9c:	68db      	ldr	r3, [r3, #12]
 8008b9e:	461a      	mov	r2, r3
 8008ba0:	f000 fb3c 	bl	800921c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	2150      	movs	r1, #80	; 0x50
 8008baa:	4618      	mov	r0, r3
 8008bac:	f000 fb95 	bl	80092da <TIM_ITRx_SetConfig>
      break;
 8008bb0:	e02c      	b.n	8008c0c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	6818      	ldr	r0, [r3, #0]
 8008bb6:	683b      	ldr	r3, [r7, #0]
 8008bb8:	6859      	ldr	r1, [r3, #4]
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	68db      	ldr	r3, [r3, #12]
 8008bbe:	461a      	mov	r2, r3
 8008bc0:	f000 fb5b 	bl	800927a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	2160      	movs	r1, #96	; 0x60
 8008bca:	4618      	mov	r0, r3
 8008bcc:	f000 fb85 	bl	80092da <TIM_ITRx_SetConfig>
      break;
 8008bd0:	e01c      	b.n	8008c0c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	6818      	ldr	r0, [r3, #0]
 8008bd6:	683b      	ldr	r3, [r7, #0]
 8008bd8:	6859      	ldr	r1, [r3, #4]
 8008bda:	683b      	ldr	r3, [r7, #0]
 8008bdc:	68db      	ldr	r3, [r3, #12]
 8008bde:	461a      	mov	r2, r3
 8008be0:	f000 fb1c 	bl	800921c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	2140      	movs	r1, #64	; 0x40
 8008bea:	4618      	mov	r0, r3
 8008bec:	f000 fb75 	bl	80092da <TIM_ITRx_SetConfig>
      break;
 8008bf0:	e00c      	b.n	8008c0c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681a      	ldr	r2, [r3, #0]
 8008bf6:	683b      	ldr	r3, [r7, #0]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	4619      	mov	r1, r3
 8008bfc:	4610      	mov	r0, r2
 8008bfe:	f000 fb6c 	bl	80092da <TIM_ITRx_SetConfig>
      break;
 8008c02:	e003      	b.n	8008c0c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008c04:	2301      	movs	r3, #1
 8008c06:	73fb      	strb	r3, [r7, #15]
      break;
 8008c08:	e000      	b.n	8008c0c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008c0a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2201      	movs	r2, #1
 8008c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	2200      	movs	r2, #0
 8008c18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008c1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c1e:	4618      	mov	r0, r3
 8008c20:	3710      	adds	r7, #16
 8008c22:	46bd      	mov	sp, r7
 8008c24:	bd80      	pop	{r7, pc}

08008c26 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008c26:	b480      	push	{r7}
 8008c28:	b083      	sub	sp, #12
 8008c2a:	af00      	add	r7, sp, #0
 8008c2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008c2e:	bf00      	nop
 8008c30:	370c      	adds	r7, #12
 8008c32:	46bd      	mov	sp, r7
 8008c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c38:	4770      	bx	lr

08008c3a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008c3a:	b480      	push	{r7}
 8008c3c:	b083      	sub	sp, #12
 8008c3e:	af00      	add	r7, sp, #0
 8008c40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8008c42:	bf00      	nop
 8008c44:	370c      	adds	r7, #12
 8008c46:	46bd      	mov	sp, r7
 8008c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4c:	4770      	bx	lr

08008c4e <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8008c4e:	b480      	push	{r7}
 8008c50:	b083      	sub	sp, #12
 8008c52:	af00      	add	r7, sp, #0
 8008c54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8008c56:	bf00      	nop
 8008c58:	370c      	adds	r7, #12
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c60:	4770      	bx	lr

08008c62 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8008c62:	b580      	push	{r7, lr}
 8008c64:	b084      	sub	sp, #16
 8008c66:	af00      	add	r7, sp, #0
 8008c68:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c6e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c74:	687a      	ldr	r2, [r7, #4]
 8008c76:	429a      	cmp	r2, r3
 8008c78:	d107      	bne.n	8008c8a <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	2201      	movs	r2, #1
 8008c7e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	2201      	movs	r2, #1
 8008c84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008c88:	e02a      	b.n	8008ce0 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c8e:	687a      	ldr	r2, [r7, #4]
 8008c90:	429a      	cmp	r2, r3
 8008c92:	d107      	bne.n	8008ca4 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	2202      	movs	r2, #2
 8008c98:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	2201      	movs	r2, #1
 8008c9e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008ca2:	e01d      	b.n	8008ce0 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ca8:	687a      	ldr	r2, [r7, #4]
 8008caa:	429a      	cmp	r2, r3
 8008cac:	d107      	bne.n	8008cbe <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	2204      	movs	r2, #4
 8008cb2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	2201      	movs	r2, #1
 8008cb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008cbc:	e010      	b.n	8008ce0 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cc2:	687a      	ldr	r2, [r7, #4]
 8008cc4:	429a      	cmp	r2, r3
 8008cc6:	d107      	bne.n	8008cd8 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	2208      	movs	r2, #8
 8008ccc:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	2201      	movs	r2, #1
 8008cd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008cd6:	e003      	b.n	8008ce0 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	2201      	movs	r2, #1
 8008cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8008ce0:	68f8      	ldr	r0, [r7, #12]
 8008ce2:	f7ff ffb4 	bl	8008c4e <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	2200      	movs	r2, #0
 8008cea:	771a      	strb	r2, [r3, #28]
}
 8008cec:	bf00      	nop
 8008cee:	3710      	adds	r7, #16
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	bd80      	pop	{r7, pc}

08008cf4 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b084      	sub	sp, #16
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d00:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d06:	687a      	ldr	r2, [r7, #4]
 8008d08:	429a      	cmp	r2, r3
 8008d0a:	d10b      	bne.n	8008d24 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	2201      	movs	r2, #1
 8008d10:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	69db      	ldr	r3, [r3, #28]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d136      	bne.n	8008d88 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	2201      	movs	r2, #1
 8008d1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008d22:	e031      	b.n	8008d88 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d28:	687a      	ldr	r2, [r7, #4]
 8008d2a:	429a      	cmp	r2, r3
 8008d2c:	d10b      	bne.n	8008d46 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	2202      	movs	r2, #2
 8008d32:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	69db      	ldr	r3, [r3, #28]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d125      	bne.n	8008d88 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	2201      	movs	r2, #1
 8008d40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008d44:	e020      	b.n	8008d88 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d4a:	687a      	ldr	r2, [r7, #4]
 8008d4c:	429a      	cmp	r2, r3
 8008d4e:	d10b      	bne.n	8008d68 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	2204      	movs	r2, #4
 8008d54:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	69db      	ldr	r3, [r3, #28]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d114      	bne.n	8008d88 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	2201      	movs	r2, #1
 8008d62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008d66:	e00f      	b.n	8008d88 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d6c:	687a      	ldr	r2, [r7, #4]
 8008d6e:	429a      	cmp	r2, r3
 8008d70:	d10a      	bne.n	8008d88 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	2208      	movs	r2, #8
 8008d76:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	69db      	ldr	r3, [r3, #28]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d103      	bne.n	8008d88 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	2201      	movs	r2, #1
 8008d84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d88:	68f8      	ldr	r0, [r7, #12]
 8008d8a:	f7ff ff4c 	bl	8008c26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	2200      	movs	r2, #0
 8008d92:	771a      	strb	r2, [r3, #28]
}
 8008d94:	bf00      	nop
 8008d96:	3710      	adds	r7, #16
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	bd80      	pop	{r7, pc}

08008d9c <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b084      	sub	sp, #16
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008da8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dae:	687a      	ldr	r2, [r7, #4]
 8008db0:	429a      	cmp	r2, r3
 8008db2:	d103      	bne.n	8008dbc <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	2201      	movs	r2, #1
 8008db8:	771a      	strb	r2, [r3, #28]
 8008dba:	e019      	b.n	8008df0 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dc0:	687a      	ldr	r2, [r7, #4]
 8008dc2:	429a      	cmp	r2, r3
 8008dc4:	d103      	bne.n	8008dce <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	2202      	movs	r2, #2
 8008dca:	771a      	strb	r2, [r3, #28]
 8008dcc:	e010      	b.n	8008df0 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dd2:	687a      	ldr	r2, [r7, #4]
 8008dd4:	429a      	cmp	r2, r3
 8008dd6:	d103      	bne.n	8008de0 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	2204      	movs	r2, #4
 8008ddc:	771a      	strb	r2, [r3, #28]
 8008dde:	e007      	b.n	8008df0 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008de4:	687a      	ldr	r2, [r7, #4]
 8008de6:	429a      	cmp	r2, r3
 8008de8:	d102      	bne.n	8008df0 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	2208      	movs	r2, #8
 8008dee:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8008df0:	68f8      	ldr	r0, [r7, #12]
 8008df2:	f7ff ff22 	bl	8008c3a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	2200      	movs	r2, #0
 8008dfa:	771a      	strb	r2, [r3, #28]
}
 8008dfc:	bf00      	nop
 8008dfe:	3710      	adds	r7, #16
 8008e00:	46bd      	mov	sp, r7
 8008e02:	bd80      	pop	{r7, pc}

08008e04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008e04:	b480      	push	{r7}
 8008e06:	b085      	sub	sp, #20
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
 8008e0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	4a34      	ldr	r2, [pc, #208]	; (8008ee8 <TIM_Base_SetConfig+0xe4>)
 8008e18:	4293      	cmp	r3, r2
 8008e1a:	d00f      	beq.n	8008e3c <TIM_Base_SetConfig+0x38>
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e22:	d00b      	beq.n	8008e3c <TIM_Base_SetConfig+0x38>
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	4a31      	ldr	r2, [pc, #196]	; (8008eec <TIM_Base_SetConfig+0xe8>)
 8008e28:	4293      	cmp	r3, r2
 8008e2a:	d007      	beq.n	8008e3c <TIM_Base_SetConfig+0x38>
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	4a30      	ldr	r2, [pc, #192]	; (8008ef0 <TIM_Base_SetConfig+0xec>)
 8008e30:	4293      	cmp	r3, r2
 8008e32:	d003      	beq.n	8008e3c <TIM_Base_SetConfig+0x38>
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	4a2f      	ldr	r2, [pc, #188]	; (8008ef4 <TIM_Base_SetConfig+0xf0>)
 8008e38:	4293      	cmp	r3, r2
 8008e3a:	d108      	bne.n	8008e4e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008e44:	683b      	ldr	r3, [r7, #0]
 8008e46:	685b      	ldr	r3, [r3, #4]
 8008e48:	68fa      	ldr	r2, [r7, #12]
 8008e4a:	4313      	orrs	r3, r2
 8008e4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	4a25      	ldr	r2, [pc, #148]	; (8008ee8 <TIM_Base_SetConfig+0xe4>)
 8008e52:	4293      	cmp	r3, r2
 8008e54:	d01b      	beq.n	8008e8e <TIM_Base_SetConfig+0x8a>
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e5c:	d017      	beq.n	8008e8e <TIM_Base_SetConfig+0x8a>
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	4a22      	ldr	r2, [pc, #136]	; (8008eec <TIM_Base_SetConfig+0xe8>)
 8008e62:	4293      	cmp	r3, r2
 8008e64:	d013      	beq.n	8008e8e <TIM_Base_SetConfig+0x8a>
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	4a21      	ldr	r2, [pc, #132]	; (8008ef0 <TIM_Base_SetConfig+0xec>)
 8008e6a:	4293      	cmp	r3, r2
 8008e6c:	d00f      	beq.n	8008e8e <TIM_Base_SetConfig+0x8a>
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	4a20      	ldr	r2, [pc, #128]	; (8008ef4 <TIM_Base_SetConfig+0xf0>)
 8008e72:	4293      	cmp	r3, r2
 8008e74:	d00b      	beq.n	8008e8e <TIM_Base_SetConfig+0x8a>
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	4a1f      	ldr	r2, [pc, #124]	; (8008ef8 <TIM_Base_SetConfig+0xf4>)
 8008e7a:	4293      	cmp	r3, r2
 8008e7c:	d007      	beq.n	8008e8e <TIM_Base_SetConfig+0x8a>
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	4a1e      	ldr	r2, [pc, #120]	; (8008efc <TIM_Base_SetConfig+0xf8>)
 8008e82:	4293      	cmp	r3, r2
 8008e84:	d003      	beq.n	8008e8e <TIM_Base_SetConfig+0x8a>
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	4a1d      	ldr	r2, [pc, #116]	; (8008f00 <TIM_Base_SetConfig+0xfc>)
 8008e8a:	4293      	cmp	r3, r2
 8008e8c:	d108      	bne.n	8008ea0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008e94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008e96:	683b      	ldr	r3, [r7, #0]
 8008e98:	68db      	ldr	r3, [r3, #12]
 8008e9a:	68fa      	ldr	r2, [r7, #12]
 8008e9c:	4313      	orrs	r3, r2
 8008e9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008ea6:	683b      	ldr	r3, [r7, #0]
 8008ea8:	695b      	ldr	r3, [r3, #20]
 8008eaa:	4313      	orrs	r3, r2
 8008eac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	68fa      	ldr	r2, [r7, #12]
 8008eb2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008eb4:	683b      	ldr	r3, [r7, #0]
 8008eb6:	689a      	ldr	r2, [r3, #8]
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008ebc:	683b      	ldr	r3, [r7, #0]
 8008ebe:	681a      	ldr	r2, [r3, #0]
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	4a08      	ldr	r2, [pc, #32]	; (8008ee8 <TIM_Base_SetConfig+0xe4>)
 8008ec8:	4293      	cmp	r3, r2
 8008eca:	d103      	bne.n	8008ed4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008ecc:	683b      	ldr	r3, [r7, #0]
 8008ece:	691a      	ldr	r2, [r3, #16]
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	2201      	movs	r2, #1
 8008ed8:	615a      	str	r2, [r3, #20]
}
 8008eda:	bf00      	nop
 8008edc:	3714      	adds	r7, #20
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee4:	4770      	bx	lr
 8008ee6:	bf00      	nop
 8008ee8:	40010000 	.word	0x40010000
 8008eec:	40000400 	.word	0x40000400
 8008ef0:	40000800 	.word	0x40000800
 8008ef4:	40000c00 	.word	0x40000c00
 8008ef8:	40014000 	.word	0x40014000
 8008efc:	40014400 	.word	0x40014400
 8008f00:	40014800 	.word	0x40014800

08008f04 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008f04:	b480      	push	{r7}
 8008f06:	b087      	sub	sp, #28
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
 8008f0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	6a1b      	ldr	r3, [r3, #32]
 8008f12:	f023 0201 	bic.w	r2, r3, #1
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	6a1b      	ldr	r3, [r3, #32]
 8008f1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	685b      	ldr	r3, [r3, #4]
 8008f24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	699b      	ldr	r3, [r3, #24]
 8008f2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	f023 0303 	bic.w	r3, r3, #3
 8008f3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008f3c:	683b      	ldr	r3, [r7, #0]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	68fa      	ldr	r2, [r7, #12]
 8008f42:	4313      	orrs	r3, r2
 8008f44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008f46:	697b      	ldr	r3, [r7, #20]
 8008f48:	f023 0302 	bic.w	r3, r3, #2
 8008f4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008f4e:	683b      	ldr	r3, [r7, #0]
 8008f50:	689b      	ldr	r3, [r3, #8]
 8008f52:	697a      	ldr	r2, [r7, #20]
 8008f54:	4313      	orrs	r3, r2
 8008f56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	4a1c      	ldr	r2, [pc, #112]	; (8008fcc <TIM_OC1_SetConfig+0xc8>)
 8008f5c:	4293      	cmp	r3, r2
 8008f5e:	d10c      	bne.n	8008f7a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008f60:	697b      	ldr	r3, [r7, #20]
 8008f62:	f023 0308 	bic.w	r3, r3, #8
 8008f66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008f68:	683b      	ldr	r3, [r7, #0]
 8008f6a:	68db      	ldr	r3, [r3, #12]
 8008f6c:	697a      	ldr	r2, [r7, #20]
 8008f6e:	4313      	orrs	r3, r2
 8008f70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008f72:	697b      	ldr	r3, [r7, #20]
 8008f74:	f023 0304 	bic.w	r3, r3, #4
 8008f78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	4a13      	ldr	r2, [pc, #76]	; (8008fcc <TIM_OC1_SetConfig+0xc8>)
 8008f7e:	4293      	cmp	r3, r2
 8008f80:	d111      	bne.n	8008fa6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008f82:	693b      	ldr	r3, [r7, #16]
 8008f84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008f88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008f8a:	693b      	ldr	r3, [r7, #16]
 8008f8c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008f90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008f92:	683b      	ldr	r3, [r7, #0]
 8008f94:	695b      	ldr	r3, [r3, #20]
 8008f96:	693a      	ldr	r2, [r7, #16]
 8008f98:	4313      	orrs	r3, r2
 8008f9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008f9c:	683b      	ldr	r3, [r7, #0]
 8008f9e:	699b      	ldr	r3, [r3, #24]
 8008fa0:	693a      	ldr	r2, [r7, #16]
 8008fa2:	4313      	orrs	r3, r2
 8008fa4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	693a      	ldr	r2, [r7, #16]
 8008faa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	68fa      	ldr	r2, [r7, #12]
 8008fb0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008fb2:	683b      	ldr	r3, [r7, #0]
 8008fb4:	685a      	ldr	r2, [r3, #4]
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	697a      	ldr	r2, [r7, #20]
 8008fbe:	621a      	str	r2, [r3, #32]
}
 8008fc0:	bf00      	nop
 8008fc2:	371c      	adds	r7, #28
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fca:	4770      	bx	lr
 8008fcc:	40010000 	.word	0x40010000

08008fd0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008fd0:	b480      	push	{r7}
 8008fd2:	b087      	sub	sp, #28
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
 8008fd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	6a1b      	ldr	r3, [r3, #32]
 8008fde:	f023 0210 	bic.w	r2, r3, #16
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	6a1b      	ldr	r3, [r3, #32]
 8008fea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	685b      	ldr	r3, [r3, #4]
 8008ff0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	699b      	ldr	r3, [r3, #24]
 8008ff6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ffe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009006:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009008:	683b      	ldr	r3, [r7, #0]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	021b      	lsls	r3, r3, #8
 800900e:	68fa      	ldr	r2, [r7, #12]
 8009010:	4313      	orrs	r3, r2
 8009012:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009014:	697b      	ldr	r3, [r7, #20]
 8009016:	f023 0320 	bic.w	r3, r3, #32
 800901a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800901c:	683b      	ldr	r3, [r7, #0]
 800901e:	689b      	ldr	r3, [r3, #8]
 8009020:	011b      	lsls	r3, r3, #4
 8009022:	697a      	ldr	r2, [r7, #20]
 8009024:	4313      	orrs	r3, r2
 8009026:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	4a1e      	ldr	r2, [pc, #120]	; (80090a4 <TIM_OC2_SetConfig+0xd4>)
 800902c:	4293      	cmp	r3, r2
 800902e:	d10d      	bne.n	800904c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009030:	697b      	ldr	r3, [r7, #20]
 8009032:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009036:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009038:	683b      	ldr	r3, [r7, #0]
 800903a:	68db      	ldr	r3, [r3, #12]
 800903c:	011b      	lsls	r3, r3, #4
 800903e:	697a      	ldr	r2, [r7, #20]
 8009040:	4313      	orrs	r3, r2
 8009042:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009044:	697b      	ldr	r3, [r7, #20]
 8009046:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800904a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	4a15      	ldr	r2, [pc, #84]	; (80090a4 <TIM_OC2_SetConfig+0xd4>)
 8009050:	4293      	cmp	r3, r2
 8009052:	d113      	bne.n	800907c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009054:	693b      	ldr	r3, [r7, #16]
 8009056:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800905a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800905c:	693b      	ldr	r3, [r7, #16]
 800905e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009062:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009064:	683b      	ldr	r3, [r7, #0]
 8009066:	695b      	ldr	r3, [r3, #20]
 8009068:	009b      	lsls	r3, r3, #2
 800906a:	693a      	ldr	r2, [r7, #16]
 800906c:	4313      	orrs	r3, r2
 800906e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009070:	683b      	ldr	r3, [r7, #0]
 8009072:	699b      	ldr	r3, [r3, #24]
 8009074:	009b      	lsls	r3, r3, #2
 8009076:	693a      	ldr	r2, [r7, #16]
 8009078:	4313      	orrs	r3, r2
 800907a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	693a      	ldr	r2, [r7, #16]
 8009080:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	68fa      	ldr	r2, [r7, #12]
 8009086:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009088:	683b      	ldr	r3, [r7, #0]
 800908a:	685a      	ldr	r2, [r3, #4]
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	697a      	ldr	r2, [r7, #20]
 8009094:	621a      	str	r2, [r3, #32]
}
 8009096:	bf00      	nop
 8009098:	371c      	adds	r7, #28
 800909a:	46bd      	mov	sp, r7
 800909c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a0:	4770      	bx	lr
 80090a2:	bf00      	nop
 80090a4:	40010000 	.word	0x40010000

080090a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80090a8:	b480      	push	{r7}
 80090aa:	b087      	sub	sp, #28
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
 80090b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	6a1b      	ldr	r3, [r3, #32]
 80090b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	6a1b      	ldr	r3, [r3, #32]
 80090c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	685b      	ldr	r3, [r3, #4]
 80090c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	69db      	ldr	r3, [r3, #28]
 80090ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	f023 0303 	bic.w	r3, r3, #3
 80090de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	68fa      	ldr	r2, [r7, #12]
 80090e6:	4313      	orrs	r3, r2
 80090e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80090ea:	697b      	ldr	r3, [r7, #20]
 80090ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80090f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80090f2:	683b      	ldr	r3, [r7, #0]
 80090f4:	689b      	ldr	r3, [r3, #8]
 80090f6:	021b      	lsls	r3, r3, #8
 80090f8:	697a      	ldr	r2, [r7, #20]
 80090fa:	4313      	orrs	r3, r2
 80090fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	4a1d      	ldr	r2, [pc, #116]	; (8009178 <TIM_OC3_SetConfig+0xd0>)
 8009102:	4293      	cmp	r3, r2
 8009104:	d10d      	bne.n	8009122 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009106:	697b      	ldr	r3, [r7, #20]
 8009108:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800910c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800910e:	683b      	ldr	r3, [r7, #0]
 8009110:	68db      	ldr	r3, [r3, #12]
 8009112:	021b      	lsls	r3, r3, #8
 8009114:	697a      	ldr	r2, [r7, #20]
 8009116:	4313      	orrs	r3, r2
 8009118:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800911a:	697b      	ldr	r3, [r7, #20]
 800911c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009120:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	4a14      	ldr	r2, [pc, #80]	; (8009178 <TIM_OC3_SetConfig+0xd0>)
 8009126:	4293      	cmp	r3, r2
 8009128:	d113      	bne.n	8009152 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800912a:	693b      	ldr	r3, [r7, #16]
 800912c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009130:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009132:	693b      	ldr	r3, [r7, #16]
 8009134:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009138:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800913a:	683b      	ldr	r3, [r7, #0]
 800913c:	695b      	ldr	r3, [r3, #20]
 800913e:	011b      	lsls	r3, r3, #4
 8009140:	693a      	ldr	r2, [r7, #16]
 8009142:	4313      	orrs	r3, r2
 8009144:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009146:	683b      	ldr	r3, [r7, #0]
 8009148:	699b      	ldr	r3, [r3, #24]
 800914a:	011b      	lsls	r3, r3, #4
 800914c:	693a      	ldr	r2, [r7, #16]
 800914e:	4313      	orrs	r3, r2
 8009150:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	693a      	ldr	r2, [r7, #16]
 8009156:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	68fa      	ldr	r2, [r7, #12]
 800915c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800915e:	683b      	ldr	r3, [r7, #0]
 8009160:	685a      	ldr	r2, [r3, #4]
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	697a      	ldr	r2, [r7, #20]
 800916a:	621a      	str	r2, [r3, #32]
}
 800916c:	bf00      	nop
 800916e:	371c      	adds	r7, #28
 8009170:	46bd      	mov	sp, r7
 8009172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009176:	4770      	bx	lr
 8009178:	40010000 	.word	0x40010000

0800917c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800917c:	b480      	push	{r7}
 800917e:	b087      	sub	sp, #28
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
 8009184:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	6a1b      	ldr	r3, [r3, #32]
 800918a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	6a1b      	ldr	r3, [r3, #32]
 8009196:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	685b      	ldr	r3, [r3, #4]
 800919c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	69db      	ldr	r3, [r3, #28]
 80091a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80091aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80091b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80091b4:	683b      	ldr	r3, [r7, #0]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	021b      	lsls	r3, r3, #8
 80091ba:	68fa      	ldr	r2, [r7, #12]
 80091bc:	4313      	orrs	r3, r2
 80091be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80091c0:	693b      	ldr	r3, [r7, #16]
 80091c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80091c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80091c8:	683b      	ldr	r3, [r7, #0]
 80091ca:	689b      	ldr	r3, [r3, #8]
 80091cc:	031b      	lsls	r3, r3, #12
 80091ce:	693a      	ldr	r2, [r7, #16]
 80091d0:	4313      	orrs	r3, r2
 80091d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	4a10      	ldr	r2, [pc, #64]	; (8009218 <TIM_OC4_SetConfig+0x9c>)
 80091d8:	4293      	cmp	r3, r2
 80091da:	d109      	bne.n	80091f0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80091dc:	697b      	ldr	r3, [r7, #20]
 80091de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80091e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80091e4:	683b      	ldr	r3, [r7, #0]
 80091e6:	695b      	ldr	r3, [r3, #20]
 80091e8:	019b      	lsls	r3, r3, #6
 80091ea:	697a      	ldr	r2, [r7, #20]
 80091ec:	4313      	orrs	r3, r2
 80091ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	697a      	ldr	r2, [r7, #20]
 80091f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	68fa      	ldr	r2, [r7, #12]
 80091fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80091fc:	683b      	ldr	r3, [r7, #0]
 80091fe:	685a      	ldr	r2, [r3, #4]
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	693a      	ldr	r2, [r7, #16]
 8009208:	621a      	str	r2, [r3, #32]
}
 800920a:	bf00      	nop
 800920c:	371c      	adds	r7, #28
 800920e:	46bd      	mov	sp, r7
 8009210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009214:	4770      	bx	lr
 8009216:	bf00      	nop
 8009218:	40010000 	.word	0x40010000

0800921c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800921c:	b480      	push	{r7}
 800921e:	b087      	sub	sp, #28
 8009220:	af00      	add	r7, sp, #0
 8009222:	60f8      	str	r0, [r7, #12]
 8009224:	60b9      	str	r1, [r7, #8]
 8009226:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	6a1b      	ldr	r3, [r3, #32]
 800922c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	6a1b      	ldr	r3, [r3, #32]
 8009232:	f023 0201 	bic.w	r2, r3, #1
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	699b      	ldr	r3, [r3, #24]
 800923e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009240:	693b      	ldr	r3, [r7, #16]
 8009242:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009246:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	011b      	lsls	r3, r3, #4
 800924c:	693a      	ldr	r2, [r7, #16]
 800924e:	4313      	orrs	r3, r2
 8009250:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009252:	697b      	ldr	r3, [r7, #20]
 8009254:	f023 030a 	bic.w	r3, r3, #10
 8009258:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800925a:	697a      	ldr	r2, [r7, #20]
 800925c:	68bb      	ldr	r3, [r7, #8]
 800925e:	4313      	orrs	r3, r2
 8009260:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	693a      	ldr	r2, [r7, #16]
 8009266:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	697a      	ldr	r2, [r7, #20]
 800926c:	621a      	str	r2, [r3, #32]
}
 800926e:	bf00      	nop
 8009270:	371c      	adds	r7, #28
 8009272:	46bd      	mov	sp, r7
 8009274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009278:	4770      	bx	lr

0800927a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800927a:	b480      	push	{r7}
 800927c:	b087      	sub	sp, #28
 800927e:	af00      	add	r7, sp, #0
 8009280:	60f8      	str	r0, [r7, #12]
 8009282:	60b9      	str	r1, [r7, #8]
 8009284:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	6a1b      	ldr	r3, [r3, #32]
 800928a:	f023 0210 	bic.w	r2, r3, #16
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	699b      	ldr	r3, [r3, #24]
 8009296:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	6a1b      	ldr	r3, [r3, #32]
 800929c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800929e:	697b      	ldr	r3, [r7, #20]
 80092a0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80092a4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	031b      	lsls	r3, r3, #12
 80092aa:	697a      	ldr	r2, [r7, #20]
 80092ac:	4313      	orrs	r3, r2
 80092ae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80092b0:	693b      	ldr	r3, [r7, #16]
 80092b2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80092b6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80092b8:	68bb      	ldr	r3, [r7, #8]
 80092ba:	011b      	lsls	r3, r3, #4
 80092bc:	693a      	ldr	r2, [r7, #16]
 80092be:	4313      	orrs	r3, r2
 80092c0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	697a      	ldr	r2, [r7, #20]
 80092c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	693a      	ldr	r2, [r7, #16]
 80092cc:	621a      	str	r2, [r3, #32]
}
 80092ce:	bf00      	nop
 80092d0:	371c      	adds	r7, #28
 80092d2:	46bd      	mov	sp, r7
 80092d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d8:	4770      	bx	lr

080092da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80092da:	b480      	push	{r7}
 80092dc:	b085      	sub	sp, #20
 80092de:	af00      	add	r7, sp, #0
 80092e0:	6078      	str	r0, [r7, #4]
 80092e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	689b      	ldr	r3, [r3, #8]
 80092e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80092f2:	683a      	ldr	r2, [r7, #0]
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	4313      	orrs	r3, r2
 80092f8:	f043 0307 	orr.w	r3, r3, #7
 80092fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	68fa      	ldr	r2, [r7, #12]
 8009302:	609a      	str	r2, [r3, #8]
}
 8009304:	bf00      	nop
 8009306:	3714      	adds	r7, #20
 8009308:	46bd      	mov	sp, r7
 800930a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930e:	4770      	bx	lr

08009310 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009310:	b480      	push	{r7}
 8009312:	b087      	sub	sp, #28
 8009314:	af00      	add	r7, sp, #0
 8009316:	60f8      	str	r0, [r7, #12]
 8009318:	60b9      	str	r1, [r7, #8]
 800931a:	607a      	str	r2, [r7, #4]
 800931c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	689b      	ldr	r3, [r3, #8]
 8009322:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009324:	697b      	ldr	r3, [r7, #20]
 8009326:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800932a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800932c:	683b      	ldr	r3, [r7, #0]
 800932e:	021a      	lsls	r2, r3, #8
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	431a      	orrs	r2, r3
 8009334:	68bb      	ldr	r3, [r7, #8]
 8009336:	4313      	orrs	r3, r2
 8009338:	697a      	ldr	r2, [r7, #20]
 800933a:	4313      	orrs	r3, r2
 800933c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	697a      	ldr	r2, [r7, #20]
 8009342:	609a      	str	r2, [r3, #8]
}
 8009344:	bf00      	nop
 8009346:	371c      	adds	r7, #28
 8009348:	46bd      	mov	sp, r7
 800934a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934e:	4770      	bx	lr

08009350 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009350:	b480      	push	{r7}
 8009352:	b087      	sub	sp, #28
 8009354:	af00      	add	r7, sp, #0
 8009356:	60f8      	str	r0, [r7, #12]
 8009358:	60b9      	str	r1, [r7, #8]
 800935a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800935c:	68bb      	ldr	r3, [r7, #8]
 800935e:	f003 031f 	and.w	r3, r3, #31
 8009362:	2201      	movs	r2, #1
 8009364:	fa02 f303 	lsl.w	r3, r2, r3
 8009368:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	6a1a      	ldr	r2, [r3, #32]
 800936e:	697b      	ldr	r3, [r7, #20]
 8009370:	43db      	mvns	r3, r3
 8009372:	401a      	ands	r2, r3
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	6a1a      	ldr	r2, [r3, #32]
 800937c:	68bb      	ldr	r3, [r7, #8]
 800937e:	f003 031f 	and.w	r3, r3, #31
 8009382:	6879      	ldr	r1, [r7, #4]
 8009384:	fa01 f303 	lsl.w	r3, r1, r3
 8009388:	431a      	orrs	r2, r3
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	621a      	str	r2, [r3, #32]
}
 800938e:	bf00      	nop
 8009390:	371c      	adds	r7, #28
 8009392:	46bd      	mov	sp, r7
 8009394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009398:	4770      	bx	lr
	...

0800939c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800939c:	b480      	push	{r7}
 800939e:	b085      	sub	sp, #20
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
 80093a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80093ac:	2b01      	cmp	r3, #1
 80093ae:	d101      	bne.n	80093b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80093b0:	2302      	movs	r3, #2
 80093b2:	e050      	b.n	8009456 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	2201      	movs	r2, #1
 80093b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	2202      	movs	r2, #2
 80093c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	685b      	ldr	r3, [r3, #4]
 80093ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	689b      	ldr	r3, [r3, #8]
 80093d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80093da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80093dc:	683b      	ldr	r3, [r7, #0]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	68fa      	ldr	r2, [r7, #12]
 80093e2:	4313      	orrs	r3, r2
 80093e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	68fa      	ldr	r2, [r7, #12]
 80093ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	4a1c      	ldr	r2, [pc, #112]	; (8009464 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80093f4:	4293      	cmp	r3, r2
 80093f6:	d018      	beq.n	800942a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009400:	d013      	beq.n	800942a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	4a18      	ldr	r2, [pc, #96]	; (8009468 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8009408:	4293      	cmp	r3, r2
 800940a:	d00e      	beq.n	800942a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	4a16      	ldr	r2, [pc, #88]	; (800946c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8009412:	4293      	cmp	r3, r2
 8009414:	d009      	beq.n	800942a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	4a15      	ldr	r2, [pc, #84]	; (8009470 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800941c:	4293      	cmp	r3, r2
 800941e:	d004      	beq.n	800942a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	4a13      	ldr	r2, [pc, #76]	; (8009474 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8009426:	4293      	cmp	r3, r2
 8009428:	d10c      	bne.n	8009444 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800942a:	68bb      	ldr	r3, [r7, #8]
 800942c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009430:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009432:	683b      	ldr	r3, [r7, #0]
 8009434:	685b      	ldr	r3, [r3, #4]
 8009436:	68ba      	ldr	r2, [r7, #8]
 8009438:	4313      	orrs	r3, r2
 800943a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	68ba      	ldr	r2, [r7, #8]
 8009442:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	2201      	movs	r2, #1
 8009448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	2200      	movs	r2, #0
 8009450:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009454:	2300      	movs	r3, #0
}
 8009456:	4618      	mov	r0, r3
 8009458:	3714      	adds	r7, #20
 800945a:	46bd      	mov	sp, r7
 800945c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009460:	4770      	bx	lr
 8009462:	bf00      	nop
 8009464:	40010000 	.word	0x40010000
 8009468:	40000400 	.word	0x40000400
 800946c:	40000800 	.word	0x40000800
 8009470:	40000c00 	.word	0x40000c00
 8009474:	40014000 	.word	0x40014000

08009478 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009478:	b580      	push	{r7, lr}
 800947a:	b08a      	sub	sp, #40	; 0x28
 800947c:	af02      	add	r7, sp, #8
 800947e:	60f8      	str	r0, [r7, #12]
 8009480:	60b9      	str	r1, [r7, #8]
 8009482:	603b      	str	r3, [r7, #0]
 8009484:	4613      	mov	r3, r2
 8009486:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009488:	2300      	movs	r3, #0
 800948a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009492:	b2db      	uxtb	r3, r3
 8009494:	2b20      	cmp	r3, #32
 8009496:	d17c      	bne.n	8009592 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009498:	68bb      	ldr	r3, [r7, #8]
 800949a:	2b00      	cmp	r3, #0
 800949c:	d002      	beq.n	80094a4 <HAL_UART_Transmit+0x2c>
 800949e:	88fb      	ldrh	r3, [r7, #6]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d101      	bne.n	80094a8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80094a4:	2301      	movs	r3, #1
 80094a6:	e075      	b.n	8009594 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80094ae:	2b01      	cmp	r3, #1
 80094b0:	d101      	bne.n	80094b6 <HAL_UART_Transmit+0x3e>
 80094b2:	2302      	movs	r3, #2
 80094b4:	e06e      	b.n	8009594 <HAL_UART_Transmit+0x11c>
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	2201      	movs	r2, #1
 80094ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	2200      	movs	r2, #0
 80094c2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	2221      	movs	r2, #33	; 0x21
 80094c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80094cc:	f7f9 fe16 	bl	80030fc <HAL_GetTick>
 80094d0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	88fa      	ldrh	r2, [r7, #6]
 80094d6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	88fa      	ldrh	r2, [r7, #6]
 80094dc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	689b      	ldr	r3, [r3, #8]
 80094e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80094e6:	d108      	bne.n	80094fa <HAL_UART_Transmit+0x82>
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	691b      	ldr	r3, [r3, #16]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d104      	bne.n	80094fa <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80094f0:	2300      	movs	r3, #0
 80094f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80094f4:	68bb      	ldr	r3, [r7, #8]
 80094f6:	61bb      	str	r3, [r7, #24]
 80094f8:	e003      	b.n	8009502 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80094fa:	68bb      	ldr	r3, [r7, #8]
 80094fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80094fe:	2300      	movs	r3, #0
 8009500:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	2200      	movs	r2, #0
 8009506:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800950a:	e02a      	b.n	8009562 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800950c:	683b      	ldr	r3, [r7, #0]
 800950e:	9300      	str	r3, [sp, #0]
 8009510:	697b      	ldr	r3, [r7, #20]
 8009512:	2200      	movs	r2, #0
 8009514:	2180      	movs	r1, #128	; 0x80
 8009516:	68f8      	ldr	r0, [r7, #12]
 8009518:	f000 f840 	bl	800959c <UART_WaitOnFlagUntilTimeout>
 800951c:	4603      	mov	r3, r0
 800951e:	2b00      	cmp	r3, #0
 8009520:	d001      	beq.n	8009526 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8009522:	2303      	movs	r3, #3
 8009524:	e036      	b.n	8009594 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8009526:	69fb      	ldr	r3, [r7, #28]
 8009528:	2b00      	cmp	r3, #0
 800952a:	d10b      	bne.n	8009544 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800952c:	69bb      	ldr	r3, [r7, #24]
 800952e:	881b      	ldrh	r3, [r3, #0]
 8009530:	461a      	mov	r2, r3
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800953a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800953c:	69bb      	ldr	r3, [r7, #24]
 800953e:	3302      	adds	r3, #2
 8009540:	61bb      	str	r3, [r7, #24]
 8009542:	e007      	b.n	8009554 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009544:	69fb      	ldr	r3, [r7, #28]
 8009546:	781a      	ldrb	r2, [r3, #0]
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800954e:	69fb      	ldr	r3, [r7, #28]
 8009550:	3301      	adds	r3, #1
 8009552:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009558:	b29b      	uxth	r3, r3
 800955a:	3b01      	subs	r3, #1
 800955c:	b29a      	uxth	r2, r3
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009566:	b29b      	uxth	r3, r3
 8009568:	2b00      	cmp	r3, #0
 800956a:	d1cf      	bne.n	800950c <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800956c:	683b      	ldr	r3, [r7, #0]
 800956e:	9300      	str	r3, [sp, #0]
 8009570:	697b      	ldr	r3, [r7, #20]
 8009572:	2200      	movs	r2, #0
 8009574:	2140      	movs	r1, #64	; 0x40
 8009576:	68f8      	ldr	r0, [r7, #12]
 8009578:	f000 f810 	bl	800959c <UART_WaitOnFlagUntilTimeout>
 800957c:	4603      	mov	r3, r0
 800957e:	2b00      	cmp	r3, #0
 8009580:	d001      	beq.n	8009586 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8009582:	2303      	movs	r3, #3
 8009584:	e006      	b.n	8009594 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	2220      	movs	r2, #32
 800958a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800958e:	2300      	movs	r3, #0
 8009590:	e000      	b.n	8009594 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8009592:	2302      	movs	r3, #2
  }
}
 8009594:	4618      	mov	r0, r3
 8009596:	3720      	adds	r7, #32
 8009598:	46bd      	mov	sp, r7
 800959a:	bd80      	pop	{r7, pc}

0800959c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800959c:	b580      	push	{r7, lr}
 800959e:	b090      	sub	sp, #64	; 0x40
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	60f8      	str	r0, [r7, #12]
 80095a4:	60b9      	str	r1, [r7, #8]
 80095a6:	603b      	str	r3, [r7, #0]
 80095a8:	4613      	mov	r3, r2
 80095aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80095ac:	e050      	b.n	8009650 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80095ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80095b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095b4:	d04c      	beq.n	8009650 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80095b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d007      	beq.n	80095cc <UART_WaitOnFlagUntilTimeout+0x30>
 80095bc:	f7f9 fd9e 	bl	80030fc <HAL_GetTick>
 80095c0:	4602      	mov	r2, r0
 80095c2:	683b      	ldr	r3, [r7, #0]
 80095c4:	1ad3      	subs	r3, r2, r3
 80095c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80095c8:	429a      	cmp	r2, r3
 80095ca:	d241      	bcs.n	8009650 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	330c      	adds	r3, #12
 80095d2:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095d6:	e853 3f00 	ldrex	r3, [r3]
 80095da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80095dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095de:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80095e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	330c      	adds	r3, #12
 80095ea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80095ec:	637a      	str	r2, [r7, #52]	; 0x34
 80095ee:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095f0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80095f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80095f4:	e841 2300 	strex	r3, r2, [r1]
 80095f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80095fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d1e5      	bne.n	80095cc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	3314      	adds	r3, #20
 8009606:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009608:	697b      	ldr	r3, [r7, #20]
 800960a:	e853 3f00 	ldrex	r3, [r3]
 800960e:	613b      	str	r3, [r7, #16]
   return(result);
 8009610:	693b      	ldr	r3, [r7, #16]
 8009612:	f023 0301 	bic.w	r3, r3, #1
 8009616:	63bb      	str	r3, [r7, #56]	; 0x38
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	3314      	adds	r3, #20
 800961e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009620:	623a      	str	r2, [r7, #32]
 8009622:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009624:	69f9      	ldr	r1, [r7, #28]
 8009626:	6a3a      	ldr	r2, [r7, #32]
 8009628:	e841 2300 	strex	r3, r2, [r1]
 800962c:	61bb      	str	r3, [r7, #24]
   return(result);
 800962e:	69bb      	ldr	r3, [r7, #24]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d1e5      	bne.n	8009600 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	2220      	movs	r2, #32
 8009638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	2220      	movs	r2, #32
 8009640:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	2200      	movs	r2, #0
 8009648:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800964c:	2303      	movs	r3, #3
 800964e:	e00f      	b.n	8009670 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	681a      	ldr	r2, [r3, #0]
 8009656:	68bb      	ldr	r3, [r7, #8]
 8009658:	4013      	ands	r3, r2
 800965a:	68ba      	ldr	r2, [r7, #8]
 800965c:	429a      	cmp	r2, r3
 800965e:	bf0c      	ite	eq
 8009660:	2301      	moveq	r3, #1
 8009662:	2300      	movne	r3, #0
 8009664:	b2db      	uxtb	r3, r3
 8009666:	461a      	mov	r2, r3
 8009668:	79fb      	ldrb	r3, [r7, #7]
 800966a:	429a      	cmp	r2, r3
 800966c:	d09f      	beq.n	80095ae <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800966e:	2300      	movs	r3, #0
}
 8009670:	4618      	mov	r0, r3
 8009672:	3740      	adds	r7, #64	; 0x40
 8009674:	46bd      	mov	sp, r7
 8009676:	bd80      	pop	{r7, pc}

08009678 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009678:	b084      	sub	sp, #16
 800967a:	b580      	push	{r7, lr}
 800967c:	b084      	sub	sp, #16
 800967e:	af00      	add	r7, sp, #0
 8009680:	6078      	str	r0, [r7, #4]
 8009682:	f107 001c 	add.w	r0, r7, #28
 8009686:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800968a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800968c:	2b01      	cmp	r3, #1
 800968e:	d122      	bne.n	80096d6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009694:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	68db      	ldr	r3, [r3, #12]
 80096a0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80096a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80096a8:	687a      	ldr	r2, [r7, #4]
 80096aa:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	68db      	ldr	r3, [r3, #12]
 80096b0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80096b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80096ba:	2b01      	cmp	r3, #1
 80096bc:	d105      	bne.n	80096ca <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	68db      	ldr	r3, [r3, #12]
 80096c2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80096ca:	6878      	ldr	r0, [r7, #4]
 80096cc:	f001 fbee 	bl	800aeac <USB_CoreReset>
 80096d0:	4603      	mov	r3, r0
 80096d2:	73fb      	strb	r3, [r7, #15]
 80096d4:	e01a      	b.n	800970c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	68db      	ldr	r3, [r3, #12]
 80096da:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80096e2:	6878      	ldr	r0, [r7, #4]
 80096e4:	f001 fbe2 	bl	800aeac <USB_CoreReset>
 80096e8:	4603      	mov	r3, r0
 80096ea:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80096ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d106      	bne.n	8009700 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096f6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	639a      	str	r2, [r3, #56]	; 0x38
 80096fe:	e005      	b.n	800970c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009704:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800970c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800970e:	2b01      	cmp	r3, #1
 8009710:	d10b      	bne.n	800972a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	689b      	ldr	r3, [r3, #8]
 8009716:	f043 0206 	orr.w	r2, r3, #6
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	689b      	ldr	r3, [r3, #8]
 8009722:	f043 0220 	orr.w	r2, r3, #32
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800972a:	7bfb      	ldrb	r3, [r7, #15]
}
 800972c:	4618      	mov	r0, r3
 800972e:	3710      	adds	r7, #16
 8009730:	46bd      	mov	sp, r7
 8009732:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009736:	b004      	add	sp, #16
 8009738:	4770      	bx	lr
	...

0800973c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800973c:	b480      	push	{r7}
 800973e:	b087      	sub	sp, #28
 8009740:	af00      	add	r7, sp, #0
 8009742:	60f8      	str	r0, [r7, #12]
 8009744:	60b9      	str	r1, [r7, #8]
 8009746:	4613      	mov	r3, r2
 8009748:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800974a:	79fb      	ldrb	r3, [r7, #7]
 800974c:	2b02      	cmp	r3, #2
 800974e:	d165      	bne.n	800981c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009750:	68bb      	ldr	r3, [r7, #8]
 8009752:	4a41      	ldr	r2, [pc, #260]	; (8009858 <USB_SetTurnaroundTime+0x11c>)
 8009754:	4293      	cmp	r3, r2
 8009756:	d906      	bls.n	8009766 <USB_SetTurnaroundTime+0x2a>
 8009758:	68bb      	ldr	r3, [r7, #8]
 800975a:	4a40      	ldr	r2, [pc, #256]	; (800985c <USB_SetTurnaroundTime+0x120>)
 800975c:	4293      	cmp	r3, r2
 800975e:	d202      	bcs.n	8009766 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8009760:	230f      	movs	r3, #15
 8009762:	617b      	str	r3, [r7, #20]
 8009764:	e062      	b.n	800982c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8009766:	68bb      	ldr	r3, [r7, #8]
 8009768:	4a3c      	ldr	r2, [pc, #240]	; (800985c <USB_SetTurnaroundTime+0x120>)
 800976a:	4293      	cmp	r3, r2
 800976c:	d306      	bcc.n	800977c <USB_SetTurnaroundTime+0x40>
 800976e:	68bb      	ldr	r3, [r7, #8]
 8009770:	4a3b      	ldr	r2, [pc, #236]	; (8009860 <USB_SetTurnaroundTime+0x124>)
 8009772:	4293      	cmp	r3, r2
 8009774:	d202      	bcs.n	800977c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8009776:	230e      	movs	r3, #14
 8009778:	617b      	str	r3, [r7, #20]
 800977a:	e057      	b.n	800982c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800977c:	68bb      	ldr	r3, [r7, #8]
 800977e:	4a38      	ldr	r2, [pc, #224]	; (8009860 <USB_SetTurnaroundTime+0x124>)
 8009780:	4293      	cmp	r3, r2
 8009782:	d306      	bcc.n	8009792 <USB_SetTurnaroundTime+0x56>
 8009784:	68bb      	ldr	r3, [r7, #8]
 8009786:	4a37      	ldr	r2, [pc, #220]	; (8009864 <USB_SetTurnaroundTime+0x128>)
 8009788:	4293      	cmp	r3, r2
 800978a:	d202      	bcs.n	8009792 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800978c:	230d      	movs	r3, #13
 800978e:	617b      	str	r3, [r7, #20]
 8009790:	e04c      	b.n	800982c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8009792:	68bb      	ldr	r3, [r7, #8]
 8009794:	4a33      	ldr	r2, [pc, #204]	; (8009864 <USB_SetTurnaroundTime+0x128>)
 8009796:	4293      	cmp	r3, r2
 8009798:	d306      	bcc.n	80097a8 <USB_SetTurnaroundTime+0x6c>
 800979a:	68bb      	ldr	r3, [r7, #8]
 800979c:	4a32      	ldr	r2, [pc, #200]	; (8009868 <USB_SetTurnaroundTime+0x12c>)
 800979e:	4293      	cmp	r3, r2
 80097a0:	d802      	bhi.n	80097a8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80097a2:	230c      	movs	r3, #12
 80097a4:	617b      	str	r3, [r7, #20]
 80097a6:	e041      	b.n	800982c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80097a8:	68bb      	ldr	r3, [r7, #8]
 80097aa:	4a2f      	ldr	r2, [pc, #188]	; (8009868 <USB_SetTurnaroundTime+0x12c>)
 80097ac:	4293      	cmp	r3, r2
 80097ae:	d906      	bls.n	80097be <USB_SetTurnaroundTime+0x82>
 80097b0:	68bb      	ldr	r3, [r7, #8]
 80097b2:	4a2e      	ldr	r2, [pc, #184]	; (800986c <USB_SetTurnaroundTime+0x130>)
 80097b4:	4293      	cmp	r3, r2
 80097b6:	d802      	bhi.n	80097be <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80097b8:	230b      	movs	r3, #11
 80097ba:	617b      	str	r3, [r7, #20]
 80097bc:	e036      	b.n	800982c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80097be:	68bb      	ldr	r3, [r7, #8]
 80097c0:	4a2a      	ldr	r2, [pc, #168]	; (800986c <USB_SetTurnaroundTime+0x130>)
 80097c2:	4293      	cmp	r3, r2
 80097c4:	d906      	bls.n	80097d4 <USB_SetTurnaroundTime+0x98>
 80097c6:	68bb      	ldr	r3, [r7, #8]
 80097c8:	4a29      	ldr	r2, [pc, #164]	; (8009870 <USB_SetTurnaroundTime+0x134>)
 80097ca:	4293      	cmp	r3, r2
 80097cc:	d802      	bhi.n	80097d4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80097ce:	230a      	movs	r3, #10
 80097d0:	617b      	str	r3, [r7, #20]
 80097d2:	e02b      	b.n	800982c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80097d4:	68bb      	ldr	r3, [r7, #8]
 80097d6:	4a26      	ldr	r2, [pc, #152]	; (8009870 <USB_SetTurnaroundTime+0x134>)
 80097d8:	4293      	cmp	r3, r2
 80097da:	d906      	bls.n	80097ea <USB_SetTurnaroundTime+0xae>
 80097dc:	68bb      	ldr	r3, [r7, #8]
 80097de:	4a25      	ldr	r2, [pc, #148]	; (8009874 <USB_SetTurnaroundTime+0x138>)
 80097e0:	4293      	cmp	r3, r2
 80097e2:	d202      	bcs.n	80097ea <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80097e4:	2309      	movs	r3, #9
 80097e6:	617b      	str	r3, [r7, #20]
 80097e8:	e020      	b.n	800982c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80097ea:	68bb      	ldr	r3, [r7, #8]
 80097ec:	4a21      	ldr	r2, [pc, #132]	; (8009874 <USB_SetTurnaroundTime+0x138>)
 80097ee:	4293      	cmp	r3, r2
 80097f0:	d306      	bcc.n	8009800 <USB_SetTurnaroundTime+0xc4>
 80097f2:	68bb      	ldr	r3, [r7, #8]
 80097f4:	4a20      	ldr	r2, [pc, #128]	; (8009878 <USB_SetTurnaroundTime+0x13c>)
 80097f6:	4293      	cmp	r3, r2
 80097f8:	d802      	bhi.n	8009800 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80097fa:	2308      	movs	r3, #8
 80097fc:	617b      	str	r3, [r7, #20]
 80097fe:	e015      	b.n	800982c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009800:	68bb      	ldr	r3, [r7, #8]
 8009802:	4a1d      	ldr	r2, [pc, #116]	; (8009878 <USB_SetTurnaroundTime+0x13c>)
 8009804:	4293      	cmp	r3, r2
 8009806:	d906      	bls.n	8009816 <USB_SetTurnaroundTime+0xda>
 8009808:	68bb      	ldr	r3, [r7, #8]
 800980a:	4a1c      	ldr	r2, [pc, #112]	; (800987c <USB_SetTurnaroundTime+0x140>)
 800980c:	4293      	cmp	r3, r2
 800980e:	d202      	bcs.n	8009816 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8009810:	2307      	movs	r3, #7
 8009812:	617b      	str	r3, [r7, #20]
 8009814:	e00a      	b.n	800982c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8009816:	2306      	movs	r3, #6
 8009818:	617b      	str	r3, [r7, #20]
 800981a:	e007      	b.n	800982c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800981c:	79fb      	ldrb	r3, [r7, #7]
 800981e:	2b00      	cmp	r3, #0
 8009820:	d102      	bne.n	8009828 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8009822:	2309      	movs	r3, #9
 8009824:	617b      	str	r3, [r7, #20]
 8009826:	e001      	b.n	800982c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009828:	2309      	movs	r3, #9
 800982a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	68db      	ldr	r3, [r3, #12]
 8009830:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	68da      	ldr	r2, [r3, #12]
 800983c:	697b      	ldr	r3, [r7, #20]
 800983e:	029b      	lsls	r3, r3, #10
 8009840:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8009844:	431a      	orrs	r2, r3
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800984a:	2300      	movs	r3, #0
}
 800984c:	4618      	mov	r0, r3
 800984e:	371c      	adds	r7, #28
 8009850:	46bd      	mov	sp, r7
 8009852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009856:	4770      	bx	lr
 8009858:	00d8acbf 	.word	0x00d8acbf
 800985c:	00e4e1c0 	.word	0x00e4e1c0
 8009860:	00f42400 	.word	0x00f42400
 8009864:	01067380 	.word	0x01067380
 8009868:	011a499f 	.word	0x011a499f
 800986c:	01312cff 	.word	0x01312cff
 8009870:	014ca43f 	.word	0x014ca43f
 8009874:	016e3600 	.word	0x016e3600
 8009878:	01a6ab1f 	.word	0x01a6ab1f
 800987c:	01e84800 	.word	0x01e84800

08009880 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009880:	b480      	push	{r7}
 8009882:	b083      	sub	sp, #12
 8009884:	af00      	add	r7, sp, #0
 8009886:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	689b      	ldr	r3, [r3, #8]
 800988c:	f043 0201 	orr.w	r2, r3, #1
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009894:	2300      	movs	r3, #0
}
 8009896:	4618      	mov	r0, r3
 8009898:	370c      	adds	r7, #12
 800989a:	46bd      	mov	sp, r7
 800989c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a0:	4770      	bx	lr

080098a2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80098a2:	b480      	push	{r7}
 80098a4:	b083      	sub	sp, #12
 80098a6:	af00      	add	r7, sp, #0
 80098a8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	689b      	ldr	r3, [r3, #8]
 80098ae:	f023 0201 	bic.w	r2, r3, #1
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80098b6:	2300      	movs	r3, #0
}
 80098b8:	4618      	mov	r0, r3
 80098ba:	370c      	adds	r7, #12
 80098bc:	46bd      	mov	sp, r7
 80098be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c2:	4770      	bx	lr

080098c4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80098c4:	b580      	push	{r7, lr}
 80098c6:	b084      	sub	sp, #16
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	6078      	str	r0, [r7, #4]
 80098cc:	460b      	mov	r3, r1
 80098ce:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80098d0:	2300      	movs	r3, #0
 80098d2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	68db      	ldr	r3, [r3, #12]
 80098d8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80098e0:	78fb      	ldrb	r3, [r7, #3]
 80098e2:	2b01      	cmp	r3, #1
 80098e4:	d115      	bne.n	8009912 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	68db      	ldr	r3, [r3, #12]
 80098ea:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80098f2:	2001      	movs	r0, #1
 80098f4:	f7f9 fc0e 	bl	8003114 <HAL_Delay>
      ms++;
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	3301      	adds	r3, #1
 80098fc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80098fe:	6878      	ldr	r0, [r7, #4]
 8009900:	f001 fa45 	bl	800ad8e <USB_GetMode>
 8009904:	4603      	mov	r3, r0
 8009906:	2b01      	cmp	r3, #1
 8009908:	d01e      	beq.n	8009948 <USB_SetCurrentMode+0x84>
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	2b31      	cmp	r3, #49	; 0x31
 800990e:	d9f0      	bls.n	80098f2 <USB_SetCurrentMode+0x2e>
 8009910:	e01a      	b.n	8009948 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009912:	78fb      	ldrb	r3, [r7, #3]
 8009914:	2b00      	cmp	r3, #0
 8009916:	d115      	bne.n	8009944 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	68db      	ldr	r3, [r3, #12]
 800991c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009924:	2001      	movs	r0, #1
 8009926:	f7f9 fbf5 	bl	8003114 <HAL_Delay>
      ms++;
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	3301      	adds	r3, #1
 800992e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8009930:	6878      	ldr	r0, [r7, #4]
 8009932:	f001 fa2c 	bl	800ad8e <USB_GetMode>
 8009936:	4603      	mov	r3, r0
 8009938:	2b00      	cmp	r3, #0
 800993a:	d005      	beq.n	8009948 <USB_SetCurrentMode+0x84>
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	2b31      	cmp	r3, #49	; 0x31
 8009940:	d9f0      	bls.n	8009924 <USB_SetCurrentMode+0x60>
 8009942:	e001      	b.n	8009948 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009944:	2301      	movs	r3, #1
 8009946:	e005      	b.n	8009954 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	2b32      	cmp	r3, #50	; 0x32
 800994c:	d101      	bne.n	8009952 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800994e:	2301      	movs	r3, #1
 8009950:	e000      	b.n	8009954 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009952:	2300      	movs	r3, #0
}
 8009954:	4618      	mov	r0, r3
 8009956:	3710      	adds	r7, #16
 8009958:	46bd      	mov	sp, r7
 800995a:	bd80      	pop	{r7, pc}

0800995c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800995c:	b084      	sub	sp, #16
 800995e:	b580      	push	{r7, lr}
 8009960:	b086      	sub	sp, #24
 8009962:	af00      	add	r7, sp, #0
 8009964:	6078      	str	r0, [r7, #4]
 8009966:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800996a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800996e:	2300      	movs	r3, #0
 8009970:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009976:	2300      	movs	r3, #0
 8009978:	613b      	str	r3, [r7, #16]
 800997a:	e009      	b.n	8009990 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800997c:	687a      	ldr	r2, [r7, #4]
 800997e:	693b      	ldr	r3, [r7, #16]
 8009980:	3340      	adds	r3, #64	; 0x40
 8009982:	009b      	lsls	r3, r3, #2
 8009984:	4413      	add	r3, r2
 8009986:	2200      	movs	r2, #0
 8009988:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800998a:	693b      	ldr	r3, [r7, #16]
 800998c:	3301      	adds	r3, #1
 800998e:	613b      	str	r3, [r7, #16]
 8009990:	693b      	ldr	r3, [r7, #16]
 8009992:	2b0e      	cmp	r3, #14
 8009994:	d9f2      	bls.n	800997c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009996:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009998:	2b00      	cmp	r3, #0
 800999a:	d11c      	bne.n	80099d6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099a2:	685b      	ldr	r3, [r3, #4]
 80099a4:	68fa      	ldr	r2, [r7, #12]
 80099a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80099aa:	f043 0302 	orr.w	r3, r3, #2
 80099ae:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099b4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099c0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099cc:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	639a      	str	r2, [r3, #56]	; 0x38
 80099d4:	e00b      	b.n	80099ee <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099da:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099e6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80099f4:	461a      	mov	r2, r3
 80099f6:	2300      	movs	r3, #0
 80099f8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a00:	4619      	mov	r1, r3
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a08:	461a      	mov	r2, r3
 8009a0a:	680b      	ldr	r3, [r1, #0]
 8009a0c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a10:	2b01      	cmp	r3, #1
 8009a12:	d10c      	bne.n	8009a2e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d104      	bne.n	8009a24 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009a1a:	2100      	movs	r1, #0
 8009a1c:	6878      	ldr	r0, [r7, #4]
 8009a1e:	f000 f965 	bl	8009cec <USB_SetDevSpeed>
 8009a22:	e008      	b.n	8009a36 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009a24:	2101      	movs	r1, #1
 8009a26:	6878      	ldr	r0, [r7, #4]
 8009a28:	f000 f960 	bl	8009cec <USB_SetDevSpeed>
 8009a2c:	e003      	b.n	8009a36 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009a2e:	2103      	movs	r1, #3
 8009a30:	6878      	ldr	r0, [r7, #4]
 8009a32:	f000 f95b 	bl	8009cec <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009a36:	2110      	movs	r1, #16
 8009a38:	6878      	ldr	r0, [r7, #4]
 8009a3a:	f000 f8f3 	bl	8009c24 <USB_FlushTxFifo>
 8009a3e:	4603      	mov	r3, r0
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d001      	beq.n	8009a48 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8009a44:	2301      	movs	r3, #1
 8009a46:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009a48:	6878      	ldr	r0, [r7, #4]
 8009a4a:	f000 f91f 	bl	8009c8c <USB_FlushRxFifo>
 8009a4e:	4603      	mov	r3, r0
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d001      	beq.n	8009a58 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8009a54:	2301      	movs	r3, #1
 8009a56:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a5e:	461a      	mov	r2, r3
 8009a60:	2300      	movs	r3, #0
 8009a62:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a6a:	461a      	mov	r2, r3
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a76:	461a      	mov	r2, r3
 8009a78:	2300      	movs	r3, #0
 8009a7a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	613b      	str	r3, [r7, #16]
 8009a80:	e043      	b.n	8009b0a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009a82:	693b      	ldr	r3, [r7, #16]
 8009a84:	015a      	lsls	r2, r3, #5
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	4413      	add	r3, r2
 8009a8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009a94:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009a98:	d118      	bne.n	8009acc <USB_DevInit+0x170>
    {
      if (i == 0U)
 8009a9a:	693b      	ldr	r3, [r7, #16]
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d10a      	bne.n	8009ab6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009aa0:	693b      	ldr	r3, [r7, #16]
 8009aa2:	015a      	lsls	r2, r3, #5
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	4413      	add	r3, r2
 8009aa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009aac:	461a      	mov	r2, r3
 8009aae:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009ab2:	6013      	str	r3, [r2, #0]
 8009ab4:	e013      	b.n	8009ade <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009ab6:	693b      	ldr	r3, [r7, #16]
 8009ab8:	015a      	lsls	r2, r3, #5
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	4413      	add	r3, r2
 8009abe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ac2:	461a      	mov	r2, r3
 8009ac4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009ac8:	6013      	str	r3, [r2, #0]
 8009aca:	e008      	b.n	8009ade <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009acc:	693b      	ldr	r3, [r7, #16]
 8009ace:	015a      	lsls	r2, r3, #5
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	4413      	add	r3, r2
 8009ad4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ad8:	461a      	mov	r2, r3
 8009ada:	2300      	movs	r3, #0
 8009adc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009ade:	693b      	ldr	r3, [r7, #16]
 8009ae0:	015a      	lsls	r2, r3, #5
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	4413      	add	r3, r2
 8009ae6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009aea:	461a      	mov	r2, r3
 8009aec:	2300      	movs	r3, #0
 8009aee:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009af0:	693b      	ldr	r3, [r7, #16]
 8009af2:	015a      	lsls	r2, r3, #5
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	4413      	add	r3, r2
 8009af8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009afc:	461a      	mov	r2, r3
 8009afe:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009b02:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009b04:	693b      	ldr	r3, [r7, #16]
 8009b06:	3301      	adds	r3, #1
 8009b08:	613b      	str	r3, [r7, #16]
 8009b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b0c:	693a      	ldr	r2, [r7, #16]
 8009b0e:	429a      	cmp	r2, r3
 8009b10:	d3b7      	bcc.n	8009a82 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009b12:	2300      	movs	r3, #0
 8009b14:	613b      	str	r3, [r7, #16]
 8009b16:	e043      	b.n	8009ba0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009b18:	693b      	ldr	r3, [r7, #16]
 8009b1a:	015a      	lsls	r2, r3, #5
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	4413      	add	r3, r2
 8009b20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009b2a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009b2e:	d118      	bne.n	8009b62 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8009b30:	693b      	ldr	r3, [r7, #16]
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d10a      	bne.n	8009b4c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009b36:	693b      	ldr	r3, [r7, #16]
 8009b38:	015a      	lsls	r2, r3, #5
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	4413      	add	r3, r2
 8009b3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b42:	461a      	mov	r2, r3
 8009b44:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009b48:	6013      	str	r3, [r2, #0]
 8009b4a:	e013      	b.n	8009b74 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009b4c:	693b      	ldr	r3, [r7, #16]
 8009b4e:	015a      	lsls	r2, r3, #5
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	4413      	add	r3, r2
 8009b54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b58:	461a      	mov	r2, r3
 8009b5a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009b5e:	6013      	str	r3, [r2, #0]
 8009b60:	e008      	b.n	8009b74 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009b62:	693b      	ldr	r3, [r7, #16]
 8009b64:	015a      	lsls	r2, r3, #5
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	4413      	add	r3, r2
 8009b6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b6e:	461a      	mov	r2, r3
 8009b70:	2300      	movs	r3, #0
 8009b72:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009b74:	693b      	ldr	r3, [r7, #16]
 8009b76:	015a      	lsls	r2, r3, #5
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	4413      	add	r3, r2
 8009b7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b80:	461a      	mov	r2, r3
 8009b82:	2300      	movs	r3, #0
 8009b84:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009b86:	693b      	ldr	r3, [r7, #16]
 8009b88:	015a      	lsls	r2, r3, #5
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	4413      	add	r3, r2
 8009b8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b92:	461a      	mov	r2, r3
 8009b94:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009b98:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009b9a:	693b      	ldr	r3, [r7, #16]
 8009b9c:	3301      	adds	r3, #1
 8009b9e:	613b      	str	r3, [r7, #16]
 8009ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ba2:	693a      	ldr	r2, [r7, #16]
 8009ba4:	429a      	cmp	r2, r3
 8009ba6:	d3b7      	bcc.n	8009b18 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009bae:	691b      	ldr	r3, [r3, #16]
 8009bb0:	68fa      	ldr	r2, [r7, #12]
 8009bb2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009bb6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009bba:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	2200      	movs	r2, #0
 8009bc0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009bc8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d105      	bne.n	8009bdc <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	699b      	ldr	r3, [r3, #24]
 8009bd4:	f043 0210 	orr.w	r2, r3, #16
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	699a      	ldr	r2, [r3, #24]
 8009be0:	4b0f      	ldr	r3, [pc, #60]	; (8009c20 <USB_DevInit+0x2c4>)
 8009be2:	4313      	orrs	r3, r2
 8009be4:	687a      	ldr	r2, [r7, #4]
 8009be6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009be8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d005      	beq.n	8009bfa <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	699b      	ldr	r3, [r3, #24]
 8009bf2:	f043 0208 	orr.w	r2, r3, #8
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009bfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009bfc:	2b01      	cmp	r3, #1
 8009bfe:	d107      	bne.n	8009c10 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	699b      	ldr	r3, [r3, #24]
 8009c04:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009c08:	f043 0304 	orr.w	r3, r3, #4
 8009c0c:	687a      	ldr	r2, [r7, #4]
 8009c0e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009c10:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c12:	4618      	mov	r0, r3
 8009c14:	3718      	adds	r7, #24
 8009c16:	46bd      	mov	sp, r7
 8009c18:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009c1c:	b004      	add	sp, #16
 8009c1e:	4770      	bx	lr
 8009c20:	803c3800 	.word	0x803c3800

08009c24 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009c24:	b480      	push	{r7}
 8009c26:	b085      	sub	sp, #20
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	6078      	str	r0, [r7, #4]
 8009c2c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009c2e:	2300      	movs	r3, #0
 8009c30:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	3301      	adds	r3, #1
 8009c36:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	4a13      	ldr	r2, [pc, #76]	; (8009c88 <USB_FlushTxFifo+0x64>)
 8009c3c:	4293      	cmp	r3, r2
 8009c3e:	d901      	bls.n	8009c44 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009c40:	2303      	movs	r3, #3
 8009c42:	e01b      	b.n	8009c7c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	691b      	ldr	r3, [r3, #16]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	daf2      	bge.n	8009c32 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009c50:	683b      	ldr	r3, [r7, #0]
 8009c52:	019b      	lsls	r3, r3, #6
 8009c54:	f043 0220 	orr.w	r2, r3, #32
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	3301      	adds	r3, #1
 8009c60:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	4a08      	ldr	r2, [pc, #32]	; (8009c88 <USB_FlushTxFifo+0x64>)
 8009c66:	4293      	cmp	r3, r2
 8009c68:	d901      	bls.n	8009c6e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009c6a:	2303      	movs	r3, #3
 8009c6c:	e006      	b.n	8009c7c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	691b      	ldr	r3, [r3, #16]
 8009c72:	f003 0320 	and.w	r3, r3, #32
 8009c76:	2b20      	cmp	r3, #32
 8009c78:	d0f0      	beq.n	8009c5c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009c7a:	2300      	movs	r3, #0
}
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	3714      	adds	r7, #20
 8009c80:	46bd      	mov	sp, r7
 8009c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c86:	4770      	bx	lr
 8009c88:	00030d40 	.word	0x00030d40

08009c8c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009c8c:	b480      	push	{r7}
 8009c8e:	b085      	sub	sp, #20
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009c94:	2300      	movs	r3, #0
 8009c96:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	3301      	adds	r3, #1
 8009c9c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	4a11      	ldr	r2, [pc, #68]	; (8009ce8 <USB_FlushRxFifo+0x5c>)
 8009ca2:	4293      	cmp	r3, r2
 8009ca4:	d901      	bls.n	8009caa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009ca6:	2303      	movs	r3, #3
 8009ca8:	e018      	b.n	8009cdc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	691b      	ldr	r3, [r3, #16]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	daf2      	bge.n	8009c98 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	2210      	movs	r2, #16
 8009cba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	3301      	adds	r3, #1
 8009cc0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	4a08      	ldr	r2, [pc, #32]	; (8009ce8 <USB_FlushRxFifo+0x5c>)
 8009cc6:	4293      	cmp	r3, r2
 8009cc8:	d901      	bls.n	8009cce <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009cca:	2303      	movs	r3, #3
 8009ccc:	e006      	b.n	8009cdc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	691b      	ldr	r3, [r3, #16]
 8009cd2:	f003 0310 	and.w	r3, r3, #16
 8009cd6:	2b10      	cmp	r3, #16
 8009cd8:	d0f0      	beq.n	8009cbc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009cda:	2300      	movs	r3, #0
}
 8009cdc:	4618      	mov	r0, r3
 8009cde:	3714      	adds	r7, #20
 8009ce0:	46bd      	mov	sp, r7
 8009ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce6:	4770      	bx	lr
 8009ce8:	00030d40 	.word	0x00030d40

08009cec <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009cec:	b480      	push	{r7}
 8009cee:	b085      	sub	sp, #20
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
 8009cf4:	460b      	mov	r3, r1
 8009cf6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d02:	681a      	ldr	r2, [r3, #0]
 8009d04:	78fb      	ldrb	r3, [r7, #3]
 8009d06:	68f9      	ldr	r1, [r7, #12]
 8009d08:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009d0c:	4313      	orrs	r3, r2
 8009d0e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009d10:	2300      	movs	r3, #0
}
 8009d12:	4618      	mov	r0, r3
 8009d14:	3714      	adds	r7, #20
 8009d16:	46bd      	mov	sp, r7
 8009d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d1c:	4770      	bx	lr

08009d1e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8009d1e:	b480      	push	{r7}
 8009d20:	b087      	sub	sp, #28
 8009d22:	af00      	add	r7, sp, #0
 8009d24:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009d2a:	693b      	ldr	r3, [r7, #16]
 8009d2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d30:	689b      	ldr	r3, [r3, #8]
 8009d32:	f003 0306 	and.w	r3, r3, #6
 8009d36:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d102      	bne.n	8009d44 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8009d3e:	2300      	movs	r3, #0
 8009d40:	75fb      	strb	r3, [r7, #23]
 8009d42:	e00a      	b.n	8009d5a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	2b02      	cmp	r3, #2
 8009d48:	d002      	beq.n	8009d50 <USB_GetDevSpeed+0x32>
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	2b06      	cmp	r3, #6
 8009d4e:	d102      	bne.n	8009d56 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009d50:	2302      	movs	r3, #2
 8009d52:	75fb      	strb	r3, [r7, #23]
 8009d54:	e001      	b.n	8009d5a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8009d56:	230f      	movs	r3, #15
 8009d58:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8009d5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	371c      	adds	r7, #28
 8009d60:	46bd      	mov	sp, r7
 8009d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d66:	4770      	bx	lr

08009d68 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009d68:	b480      	push	{r7}
 8009d6a:	b085      	sub	sp, #20
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	6078      	str	r0, [r7, #4]
 8009d70:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009d76:	683b      	ldr	r3, [r7, #0]
 8009d78:	781b      	ldrb	r3, [r3, #0]
 8009d7a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009d7c:	683b      	ldr	r3, [r7, #0]
 8009d7e:	785b      	ldrb	r3, [r3, #1]
 8009d80:	2b01      	cmp	r3, #1
 8009d82:	d13a      	bne.n	8009dfa <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d8a:	69da      	ldr	r2, [r3, #28]
 8009d8c:	683b      	ldr	r3, [r7, #0]
 8009d8e:	781b      	ldrb	r3, [r3, #0]
 8009d90:	f003 030f 	and.w	r3, r3, #15
 8009d94:	2101      	movs	r1, #1
 8009d96:	fa01 f303 	lsl.w	r3, r1, r3
 8009d9a:	b29b      	uxth	r3, r3
 8009d9c:	68f9      	ldr	r1, [r7, #12]
 8009d9e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009da2:	4313      	orrs	r3, r2
 8009da4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009da6:	68bb      	ldr	r3, [r7, #8]
 8009da8:	015a      	lsls	r2, r3, #5
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	4413      	add	r3, r2
 8009dae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d155      	bne.n	8009e68 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009dbc:	68bb      	ldr	r3, [r7, #8]
 8009dbe:	015a      	lsls	r2, r3, #5
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	4413      	add	r3, r2
 8009dc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009dc8:	681a      	ldr	r2, [r3, #0]
 8009dca:	683b      	ldr	r3, [r7, #0]
 8009dcc:	68db      	ldr	r3, [r3, #12]
 8009dce:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009dd2:	683b      	ldr	r3, [r7, #0]
 8009dd4:	791b      	ldrb	r3, [r3, #4]
 8009dd6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009dd8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009dda:	68bb      	ldr	r3, [r7, #8]
 8009ddc:	059b      	lsls	r3, r3, #22
 8009dde:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009de0:	4313      	orrs	r3, r2
 8009de2:	68ba      	ldr	r2, [r7, #8]
 8009de4:	0151      	lsls	r1, r2, #5
 8009de6:	68fa      	ldr	r2, [r7, #12]
 8009de8:	440a      	add	r2, r1
 8009dea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009dee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009df2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009df6:	6013      	str	r3, [r2, #0]
 8009df8:	e036      	b.n	8009e68 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e00:	69da      	ldr	r2, [r3, #28]
 8009e02:	683b      	ldr	r3, [r7, #0]
 8009e04:	781b      	ldrb	r3, [r3, #0]
 8009e06:	f003 030f 	and.w	r3, r3, #15
 8009e0a:	2101      	movs	r1, #1
 8009e0c:	fa01 f303 	lsl.w	r3, r1, r3
 8009e10:	041b      	lsls	r3, r3, #16
 8009e12:	68f9      	ldr	r1, [r7, #12]
 8009e14:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009e18:	4313      	orrs	r3, r2
 8009e1a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009e1c:	68bb      	ldr	r3, [r7, #8]
 8009e1e:	015a      	lsls	r2, r3, #5
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	4413      	add	r3, r2
 8009e24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d11a      	bne.n	8009e68 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009e32:	68bb      	ldr	r3, [r7, #8]
 8009e34:	015a      	lsls	r2, r3, #5
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	4413      	add	r3, r2
 8009e3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e3e:	681a      	ldr	r2, [r3, #0]
 8009e40:	683b      	ldr	r3, [r7, #0]
 8009e42:	68db      	ldr	r3, [r3, #12]
 8009e44:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009e48:	683b      	ldr	r3, [r7, #0]
 8009e4a:	791b      	ldrb	r3, [r3, #4]
 8009e4c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009e4e:	430b      	orrs	r3, r1
 8009e50:	4313      	orrs	r3, r2
 8009e52:	68ba      	ldr	r2, [r7, #8]
 8009e54:	0151      	lsls	r1, r2, #5
 8009e56:	68fa      	ldr	r2, [r7, #12]
 8009e58:	440a      	add	r2, r1
 8009e5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009e5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009e62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e66:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009e68:	2300      	movs	r3, #0
}
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	3714      	adds	r7, #20
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e74:	4770      	bx	lr
	...

08009e78 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009e78:	b480      	push	{r7}
 8009e7a:	b085      	sub	sp, #20
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
 8009e80:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009e86:	683b      	ldr	r3, [r7, #0]
 8009e88:	781b      	ldrb	r3, [r3, #0]
 8009e8a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009e8c:	683b      	ldr	r3, [r7, #0]
 8009e8e:	785b      	ldrb	r3, [r3, #1]
 8009e90:	2b01      	cmp	r3, #1
 8009e92:	d161      	bne.n	8009f58 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009e94:	68bb      	ldr	r3, [r7, #8]
 8009e96:	015a      	lsls	r2, r3, #5
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	4413      	add	r3, r2
 8009e9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009ea6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009eaa:	d11f      	bne.n	8009eec <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009eac:	68bb      	ldr	r3, [r7, #8]
 8009eae:	015a      	lsls	r2, r3, #5
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	4413      	add	r3, r2
 8009eb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	68ba      	ldr	r2, [r7, #8]
 8009ebc:	0151      	lsls	r1, r2, #5
 8009ebe:	68fa      	ldr	r2, [r7, #12]
 8009ec0:	440a      	add	r2, r1
 8009ec2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009ec6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009eca:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009ecc:	68bb      	ldr	r3, [r7, #8]
 8009ece:	015a      	lsls	r2, r3, #5
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	4413      	add	r3, r2
 8009ed4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	68ba      	ldr	r2, [r7, #8]
 8009edc:	0151      	lsls	r1, r2, #5
 8009ede:	68fa      	ldr	r2, [r7, #12]
 8009ee0:	440a      	add	r2, r1
 8009ee2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009ee6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009eea:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ef2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009ef4:	683b      	ldr	r3, [r7, #0]
 8009ef6:	781b      	ldrb	r3, [r3, #0]
 8009ef8:	f003 030f 	and.w	r3, r3, #15
 8009efc:	2101      	movs	r1, #1
 8009efe:	fa01 f303 	lsl.w	r3, r1, r3
 8009f02:	b29b      	uxth	r3, r3
 8009f04:	43db      	mvns	r3, r3
 8009f06:	68f9      	ldr	r1, [r7, #12]
 8009f08:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009f0c:	4013      	ands	r3, r2
 8009f0e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f16:	69da      	ldr	r2, [r3, #28]
 8009f18:	683b      	ldr	r3, [r7, #0]
 8009f1a:	781b      	ldrb	r3, [r3, #0]
 8009f1c:	f003 030f 	and.w	r3, r3, #15
 8009f20:	2101      	movs	r1, #1
 8009f22:	fa01 f303 	lsl.w	r3, r1, r3
 8009f26:	b29b      	uxth	r3, r3
 8009f28:	43db      	mvns	r3, r3
 8009f2a:	68f9      	ldr	r1, [r7, #12]
 8009f2c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009f30:	4013      	ands	r3, r2
 8009f32:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009f34:	68bb      	ldr	r3, [r7, #8]
 8009f36:	015a      	lsls	r2, r3, #5
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	4413      	add	r3, r2
 8009f3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f40:	681a      	ldr	r2, [r3, #0]
 8009f42:	68bb      	ldr	r3, [r7, #8]
 8009f44:	0159      	lsls	r1, r3, #5
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	440b      	add	r3, r1
 8009f4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f4e:	4619      	mov	r1, r3
 8009f50:	4b35      	ldr	r3, [pc, #212]	; (800a028 <USB_DeactivateEndpoint+0x1b0>)
 8009f52:	4013      	ands	r3, r2
 8009f54:	600b      	str	r3, [r1, #0]
 8009f56:	e060      	b.n	800a01a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009f58:	68bb      	ldr	r3, [r7, #8]
 8009f5a:	015a      	lsls	r2, r3, #5
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	4413      	add	r3, r2
 8009f60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009f6a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009f6e:	d11f      	bne.n	8009fb0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009f70:	68bb      	ldr	r3, [r7, #8]
 8009f72:	015a      	lsls	r2, r3, #5
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	4413      	add	r3, r2
 8009f78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	68ba      	ldr	r2, [r7, #8]
 8009f80:	0151      	lsls	r1, r2, #5
 8009f82:	68fa      	ldr	r2, [r7, #12]
 8009f84:	440a      	add	r2, r1
 8009f86:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f8a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009f8e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009f90:	68bb      	ldr	r3, [r7, #8]
 8009f92:	015a      	lsls	r2, r3, #5
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	4413      	add	r3, r2
 8009f98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	68ba      	ldr	r2, [r7, #8]
 8009fa0:	0151      	lsls	r1, r2, #5
 8009fa2:	68fa      	ldr	r2, [r7, #12]
 8009fa4:	440a      	add	r2, r1
 8009fa6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009faa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009fae:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009fb6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009fb8:	683b      	ldr	r3, [r7, #0]
 8009fba:	781b      	ldrb	r3, [r3, #0]
 8009fbc:	f003 030f 	and.w	r3, r3, #15
 8009fc0:	2101      	movs	r1, #1
 8009fc2:	fa01 f303 	lsl.w	r3, r1, r3
 8009fc6:	041b      	lsls	r3, r3, #16
 8009fc8:	43db      	mvns	r3, r3
 8009fca:	68f9      	ldr	r1, [r7, #12]
 8009fcc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009fd0:	4013      	ands	r3, r2
 8009fd2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009fda:	69da      	ldr	r2, [r3, #28]
 8009fdc:	683b      	ldr	r3, [r7, #0]
 8009fde:	781b      	ldrb	r3, [r3, #0]
 8009fe0:	f003 030f 	and.w	r3, r3, #15
 8009fe4:	2101      	movs	r1, #1
 8009fe6:	fa01 f303 	lsl.w	r3, r1, r3
 8009fea:	041b      	lsls	r3, r3, #16
 8009fec:	43db      	mvns	r3, r3
 8009fee:	68f9      	ldr	r1, [r7, #12]
 8009ff0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009ff4:	4013      	ands	r3, r2
 8009ff6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009ff8:	68bb      	ldr	r3, [r7, #8]
 8009ffa:	015a      	lsls	r2, r3, #5
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	4413      	add	r3, r2
 800a000:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a004:	681a      	ldr	r2, [r3, #0]
 800a006:	68bb      	ldr	r3, [r7, #8]
 800a008:	0159      	lsls	r1, r3, #5
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	440b      	add	r3, r1
 800a00e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a012:	4619      	mov	r1, r3
 800a014:	4b05      	ldr	r3, [pc, #20]	; (800a02c <USB_DeactivateEndpoint+0x1b4>)
 800a016:	4013      	ands	r3, r2
 800a018:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800a01a:	2300      	movs	r3, #0
}
 800a01c:	4618      	mov	r0, r3
 800a01e:	3714      	adds	r7, #20
 800a020:	46bd      	mov	sp, r7
 800a022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a026:	4770      	bx	lr
 800a028:	ec337800 	.word	0xec337800
 800a02c:	eff37800 	.word	0xeff37800

0800a030 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a030:	b580      	push	{r7, lr}
 800a032:	b08a      	sub	sp, #40	; 0x28
 800a034:	af02      	add	r7, sp, #8
 800a036:	60f8      	str	r0, [r7, #12]
 800a038:	60b9      	str	r1, [r7, #8]
 800a03a:	4613      	mov	r3, r2
 800a03c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800a042:	68bb      	ldr	r3, [r7, #8]
 800a044:	781b      	ldrb	r3, [r3, #0]
 800a046:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a048:	68bb      	ldr	r3, [r7, #8]
 800a04a:	785b      	ldrb	r3, [r3, #1]
 800a04c:	2b01      	cmp	r3, #1
 800a04e:	f040 815c 	bne.w	800a30a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a052:	68bb      	ldr	r3, [r7, #8]
 800a054:	699b      	ldr	r3, [r3, #24]
 800a056:	2b00      	cmp	r3, #0
 800a058:	d132      	bne.n	800a0c0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a05a:	69bb      	ldr	r3, [r7, #24]
 800a05c:	015a      	lsls	r2, r3, #5
 800a05e:	69fb      	ldr	r3, [r7, #28]
 800a060:	4413      	add	r3, r2
 800a062:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a066:	691b      	ldr	r3, [r3, #16]
 800a068:	69ba      	ldr	r2, [r7, #24]
 800a06a:	0151      	lsls	r1, r2, #5
 800a06c:	69fa      	ldr	r2, [r7, #28]
 800a06e:	440a      	add	r2, r1
 800a070:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a074:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a078:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a07c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a07e:	69bb      	ldr	r3, [r7, #24]
 800a080:	015a      	lsls	r2, r3, #5
 800a082:	69fb      	ldr	r3, [r7, #28]
 800a084:	4413      	add	r3, r2
 800a086:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a08a:	691b      	ldr	r3, [r3, #16]
 800a08c:	69ba      	ldr	r2, [r7, #24]
 800a08e:	0151      	lsls	r1, r2, #5
 800a090:	69fa      	ldr	r2, [r7, #28]
 800a092:	440a      	add	r2, r1
 800a094:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a098:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a09c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a09e:	69bb      	ldr	r3, [r7, #24]
 800a0a0:	015a      	lsls	r2, r3, #5
 800a0a2:	69fb      	ldr	r3, [r7, #28]
 800a0a4:	4413      	add	r3, r2
 800a0a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0aa:	691b      	ldr	r3, [r3, #16]
 800a0ac:	69ba      	ldr	r2, [r7, #24]
 800a0ae:	0151      	lsls	r1, r2, #5
 800a0b0:	69fa      	ldr	r2, [r7, #28]
 800a0b2:	440a      	add	r2, r1
 800a0b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a0b8:	0cdb      	lsrs	r3, r3, #19
 800a0ba:	04db      	lsls	r3, r3, #19
 800a0bc:	6113      	str	r3, [r2, #16]
 800a0be:	e074      	b.n	800a1aa <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a0c0:	69bb      	ldr	r3, [r7, #24]
 800a0c2:	015a      	lsls	r2, r3, #5
 800a0c4:	69fb      	ldr	r3, [r7, #28]
 800a0c6:	4413      	add	r3, r2
 800a0c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0cc:	691b      	ldr	r3, [r3, #16]
 800a0ce:	69ba      	ldr	r2, [r7, #24]
 800a0d0:	0151      	lsls	r1, r2, #5
 800a0d2:	69fa      	ldr	r2, [r7, #28]
 800a0d4:	440a      	add	r2, r1
 800a0d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a0da:	0cdb      	lsrs	r3, r3, #19
 800a0dc:	04db      	lsls	r3, r3, #19
 800a0de:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a0e0:	69bb      	ldr	r3, [r7, #24]
 800a0e2:	015a      	lsls	r2, r3, #5
 800a0e4:	69fb      	ldr	r3, [r7, #28]
 800a0e6:	4413      	add	r3, r2
 800a0e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0ec:	691b      	ldr	r3, [r3, #16]
 800a0ee:	69ba      	ldr	r2, [r7, #24]
 800a0f0:	0151      	lsls	r1, r2, #5
 800a0f2:	69fa      	ldr	r2, [r7, #28]
 800a0f4:	440a      	add	r2, r1
 800a0f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a0fa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a0fe:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a102:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800a104:	69bb      	ldr	r3, [r7, #24]
 800a106:	015a      	lsls	r2, r3, #5
 800a108:	69fb      	ldr	r3, [r7, #28]
 800a10a:	4413      	add	r3, r2
 800a10c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a110:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800a112:	68bb      	ldr	r3, [r7, #8]
 800a114:	6999      	ldr	r1, [r3, #24]
 800a116:	68bb      	ldr	r3, [r7, #8]
 800a118:	68db      	ldr	r3, [r3, #12]
 800a11a:	440b      	add	r3, r1
 800a11c:	1e59      	subs	r1, r3, #1
 800a11e:	68bb      	ldr	r3, [r7, #8]
 800a120:	68db      	ldr	r3, [r3, #12]
 800a122:	fbb1 f3f3 	udiv	r3, r1, r3
 800a126:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800a128:	4b9d      	ldr	r3, [pc, #628]	; (800a3a0 <USB_EPStartXfer+0x370>)
 800a12a:	400b      	ands	r3, r1
 800a12c:	69b9      	ldr	r1, [r7, #24]
 800a12e:	0148      	lsls	r0, r1, #5
 800a130:	69f9      	ldr	r1, [r7, #28]
 800a132:	4401      	add	r1, r0
 800a134:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a138:	4313      	orrs	r3, r2
 800a13a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a13c:	69bb      	ldr	r3, [r7, #24]
 800a13e:	015a      	lsls	r2, r3, #5
 800a140:	69fb      	ldr	r3, [r7, #28]
 800a142:	4413      	add	r3, r2
 800a144:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a148:	691a      	ldr	r2, [r3, #16]
 800a14a:	68bb      	ldr	r3, [r7, #8]
 800a14c:	699b      	ldr	r3, [r3, #24]
 800a14e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a152:	69b9      	ldr	r1, [r7, #24]
 800a154:	0148      	lsls	r0, r1, #5
 800a156:	69f9      	ldr	r1, [r7, #28]
 800a158:	4401      	add	r1, r0
 800a15a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a15e:	4313      	orrs	r3, r2
 800a160:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800a162:	68bb      	ldr	r3, [r7, #8]
 800a164:	791b      	ldrb	r3, [r3, #4]
 800a166:	2b01      	cmp	r3, #1
 800a168:	d11f      	bne.n	800a1aa <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800a16a:	69bb      	ldr	r3, [r7, #24]
 800a16c:	015a      	lsls	r2, r3, #5
 800a16e:	69fb      	ldr	r3, [r7, #28]
 800a170:	4413      	add	r3, r2
 800a172:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a176:	691b      	ldr	r3, [r3, #16]
 800a178:	69ba      	ldr	r2, [r7, #24]
 800a17a:	0151      	lsls	r1, r2, #5
 800a17c:	69fa      	ldr	r2, [r7, #28]
 800a17e:	440a      	add	r2, r1
 800a180:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a184:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800a188:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800a18a:	69bb      	ldr	r3, [r7, #24]
 800a18c:	015a      	lsls	r2, r3, #5
 800a18e:	69fb      	ldr	r3, [r7, #28]
 800a190:	4413      	add	r3, r2
 800a192:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a196:	691b      	ldr	r3, [r3, #16]
 800a198:	69ba      	ldr	r2, [r7, #24]
 800a19a:	0151      	lsls	r1, r2, #5
 800a19c:	69fa      	ldr	r2, [r7, #28]
 800a19e:	440a      	add	r2, r1
 800a1a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a1a4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a1a8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800a1aa:	79fb      	ldrb	r3, [r7, #7]
 800a1ac:	2b01      	cmp	r3, #1
 800a1ae:	d14b      	bne.n	800a248 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a1b0:	68bb      	ldr	r3, [r7, #8]
 800a1b2:	695b      	ldr	r3, [r3, #20]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d009      	beq.n	800a1cc <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a1b8:	69bb      	ldr	r3, [r7, #24]
 800a1ba:	015a      	lsls	r2, r3, #5
 800a1bc:	69fb      	ldr	r3, [r7, #28]
 800a1be:	4413      	add	r3, r2
 800a1c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1c4:	461a      	mov	r2, r3
 800a1c6:	68bb      	ldr	r3, [r7, #8]
 800a1c8:	695b      	ldr	r3, [r3, #20]
 800a1ca:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800a1cc:	68bb      	ldr	r3, [r7, #8]
 800a1ce:	791b      	ldrb	r3, [r3, #4]
 800a1d0:	2b01      	cmp	r3, #1
 800a1d2:	d128      	bne.n	800a226 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a1d4:	69fb      	ldr	r3, [r7, #28]
 800a1d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a1da:	689b      	ldr	r3, [r3, #8]
 800a1dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d110      	bne.n	800a206 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a1e4:	69bb      	ldr	r3, [r7, #24]
 800a1e6:	015a      	lsls	r2, r3, #5
 800a1e8:	69fb      	ldr	r3, [r7, #28]
 800a1ea:	4413      	add	r3, r2
 800a1ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	69ba      	ldr	r2, [r7, #24]
 800a1f4:	0151      	lsls	r1, r2, #5
 800a1f6:	69fa      	ldr	r2, [r7, #28]
 800a1f8:	440a      	add	r2, r1
 800a1fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a1fe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a202:	6013      	str	r3, [r2, #0]
 800a204:	e00f      	b.n	800a226 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a206:	69bb      	ldr	r3, [r7, #24]
 800a208:	015a      	lsls	r2, r3, #5
 800a20a:	69fb      	ldr	r3, [r7, #28]
 800a20c:	4413      	add	r3, r2
 800a20e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	69ba      	ldr	r2, [r7, #24]
 800a216:	0151      	lsls	r1, r2, #5
 800a218:	69fa      	ldr	r2, [r7, #28]
 800a21a:	440a      	add	r2, r1
 800a21c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a220:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a224:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a226:	69bb      	ldr	r3, [r7, #24]
 800a228:	015a      	lsls	r2, r3, #5
 800a22a:	69fb      	ldr	r3, [r7, #28]
 800a22c:	4413      	add	r3, r2
 800a22e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	69ba      	ldr	r2, [r7, #24]
 800a236:	0151      	lsls	r1, r2, #5
 800a238:	69fa      	ldr	r2, [r7, #28]
 800a23a:	440a      	add	r2, r1
 800a23c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a240:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a244:	6013      	str	r3, [r2, #0]
 800a246:	e133      	b.n	800a4b0 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a248:	69bb      	ldr	r3, [r7, #24]
 800a24a:	015a      	lsls	r2, r3, #5
 800a24c:	69fb      	ldr	r3, [r7, #28]
 800a24e:	4413      	add	r3, r2
 800a250:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	69ba      	ldr	r2, [r7, #24]
 800a258:	0151      	lsls	r1, r2, #5
 800a25a:	69fa      	ldr	r2, [r7, #28]
 800a25c:	440a      	add	r2, r1
 800a25e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a262:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a266:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a268:	68bb      	ldr	r3, [r7, #8]
 800a26a:	791b      	ldrb	r3, [r3, #4]
 800a26c:	2b01      	cmp	r3, #1
 800a26e:	d015      	beq.n	800a29c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800a270:	68bb      	ldr	r3, [r7, #8]
 800a272:	699b      	ldr	r3, [r3, #24]
 800a274:	2b00      	cmp	r3, #0
 800a276:	f000 811b 	beq.w	800a4b0 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a27a:	69fb      	ldr	r3, [r7, #28]
 800a27c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a280:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a282:	68bb      	ldr	r3, [r7, #8]
 800a284:	781b      	ldrb	r3, [r3, #0]
 800a286:	f003 030f 	and.w	r3, r3, #15
 800a28a:	2101      	movs	r1, #1
 800a28c:	fa01 f303 	lsl.w	r3, r1, r3
 800a290:	69f9      	ldr	r1, [r7, #28]
 800a292:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a296:	4313      	orrs	r3, r2
 800a298:	634b      	str	r3, [r1, #52]	; 0x34
 800a29a:	e109      	b.n	800a4b0 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a29c:	69fb      	ldr	r3, [r7, #28]
 800a29e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a2a2:	689b      	ldr	r3, [r3, #8]
 800a2a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d110      	bne.n	800a2ce <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a2ac:	69bb      	ldr	r3, [r7, #24]
 800a2ae:	015a      	lsls	r2, r3, #5
 800a2b0:	69fb      	ldr	r3, [r7, #28]
 800a2b2:	4413      	add	r3, r2
 800a2b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	69ba      	ldr	r2, [r7, #24]
 800a2bc:	0151      	lsls	r1, r2, #5
 800a2be:	69fa      	ldr	r2, [r7, #28]
 800a2c0:	440a      	add	r2, r1
 800a2c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a2c6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a2ca:	6013      	str	r3, [r2, #0]
 800a2cc:	e00f      	b.n	800a2ee <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a2ce:	69bb      	ldr	r3, [r7, #24]
 800a2d0:	015a      	lsls	r2, r3, #5
 800a2d2:	69fb      	ldr	r3, [r7, #28]
 800a2d4:	4413      	add	r3, r2
 800a2d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	69ba      	ldr	r2, [r7, #24]
 800a2de:	0151      	lsls	r1, r2, #5
 800a2e0:	69fa      	ldr	r2, [r7, #28]
 800a2e2:	440a      	add	r2, r1
 800a2e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a2e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a2ec:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800a2ee:	68bb      	ldr	r3, [r7, #8]
 800a2f0:	6919      	ldr	r1, [r3, #16]
 800a2f2:	68bb      	ldr	r3, [r7, #8]
 800a2f4:	781a      	ldrb	r2, [r3, #0]
 800a2f6:	68bb      	ldr	r3, [r7, #8]
 800a2f8:	699b      	ldr	r3, [r3, #24]
 800a2fa:	b298      	uxth	r0, r3
 800a2fc:	79fb      	ldrb	r3, [r7, #7]
 800a2fe:	9300      	str	r3, [sp, #0]
 800a300:	4603      	mov	r3, r0
 800a302:	68f8      	ldr	r0, [r7, #12]
 800a304:	f000 fade 	bl	800a8c4 <USB_WritePacket>
 800a308:	e0d2      	b.n	800a4b0 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a30a:	69bb      	ldr	r3, [r7, #24]
 800a30c:	015a      	lsls	r2, r3, #5
 800a30e:	69fb      	ldr	r3, [r7, #28]
 800a310:	4413      	add	r3, r2
 800a312:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a316:	691b      	ldr	r3, [r3, #16]
 800a318:	69ba      	ldr	r2, [r7, #24]
 800a31a:	0151      	lsls	r1, r2, #5
 800a31c:	69fa      	ldr	r2, [r7, #28]
 800a31e:	440a      	add	r2, r1
 800a320:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a324:	0cdb      	lsrs	r3, r3, #19
 800a326:	04db      	lsls	r3, r3, #19
 800a328:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a32a:	69bb      	ldr	r3, [r7, #24]
 800a32c:	015a      	lsls	r2, r3, #5
 800a32e:	69fb      	ldr	r3, [r7, #28]
 800a330:	4413      	add	r3, r2
 800a332:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a336:	691b      	ldr	r3, [r3, #16]
 800a338:	69ba      	ldr	r2, [r7, #24]
 800a33a:	0151      	lsls	r1, r2, #5
 800a33c:	69fa      	ldr	r2, [r7, #28]
 800a33e:	440a      	add	r2, r1
 800a340:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a344:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a348:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a34c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800a34e:	68bb      	ldr	r3, [r7, #8]
 800a350:	699b      	ldr	r3, [r3, #24]
 800a352:	2b00      	cmp	r3, #0
 800a354:	d126      	bne.n	800a3a4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a356:	69bb      	ldr	r3, [r7, #24]
 800a358:	015a      	lsls	r2, r3, #5
 800a35a:	69fb      	ldr	r3, [r7, #28]
 800a35c:	4413      	add	r3, r2
 800a35e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a362:	691a      	ldr	r2, [r3, #16]
 800a364:	68bb      	ldr	r3, [r7, #8]
 800a366:	68db      	ldr	r3, [r3, #12]
 800a368:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a36c:	69b9      	ldr	r1, [r7, #24]
 800a36e:	0148      	lsls	r0, r1, #5
 800a370:	69f9      	ldr	r1, [r7, #28]
 800a372:	4401      	add	r1, r0
 800a374:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a378:	4313      	orrs	r3, r2
 800a37a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a37c:	69bb      	ldr	r3, [r7, #24]
 800a37e:	015a      	lsls	r2, r3, #5
 800a380:	69fb      	ldr	r3, [r7, #28]
 800a382:	4413      	add	r3, r2
 800a384:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a388:	691b      	ldr	r3, [r3, #16]
 800a38a:	69ba      	ldr	r2, [r7, #24]
 800a38c:	0151      	lsls	r1, r2, #5
 800a38e:	69fa      	ldr	r2, [r7, #28]
 800a390:	440a      	add	r2, r1
 800a392:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a396:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a39a:	6113      	str	r3, [r2, #16]
 800a39c:	e03a      	b.n	800a414 <USB_EPStartXfer+0x3e4>
 800a39e:	bf00      	nop
 800a3a0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a3a4:	68bb      	ldr	r3, [r7, #8]
 800a3a6:	699a      	ldr	r2, [r3, #24]
 800a3a8:	68bb      	ldr	r3, [r7, #8]
 800a3aa:	68db      	ldr	r3, [r3, #12]
 800a3ac:	4413      	add	r3, r2
 800a3ae:	1e5a      	subs	r2, r3, #1
 800a3b0:	68bb      	ldr	r3, [r7, #8]
 800a3b2:	68db      	ldr	r3, [r3, #12]
 800a3b4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a3b8:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800a3ba:	68bb      	ldr	r3, [r7, #8]
 800a3bc:	68db      	ldr	r3, [r3, #12]
 800a3be:	8afa      	ldrh	r2, [r7, #22]
 800a3c0:	fb03 f202 	mul.w	r2, r3, r2
 800a3c4:	68bb      	ldr	r3, [r7, #8]
 800a3c6:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a3c8:	69bb      	ldr	r3, [r7, #24]
 800a3ca:	015a      	lsls	r2, r3, #5
 800a3cc:	69fb      	ldr	r3, [r7, #28]
 800a3ce:	4413      	add	r3, r2
 800a3d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3d4:	691a      	ldr	r2, [r3, #16]
 800a3d6:	8afb      	ldrh	r3, [r7, #22]
 800a3d8:	04d9      	lsls	r1, r3, #19
 800a3da:	4b38      	ldr	r3, [pc, #224]	; (800a4bc <USB_EPStartXfer+0x48c>)
 800a3dc:	400b      	ands	r3, r1
 800a3de:	69b9      	ldr	r1, [r7, #24]
 800a3e0:	0148      	lsls	r0, r1, #5
 800a3e2:	69f9      	ldr	r1, [r7, #28]
 800a3e4:	4401      	add	r1, r0
 800a3e6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a3ea:	4313      	orrs	r3, r2
 800a3ec:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800a3ee:	69bb      	ldr	r3, [r7, #24]
 800a3f0:	015a      	lsls	r2, r3, #5
 800a3f2:	69fb      	ldr	r3, [r7, #28]
 800a3f4:	4413      	add	r3, r2
 800a3f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3fa:	691a      	ldr	r2, [r3, #16]
 800a3fc:	68bb      	ldr	r3, [r7, #8]
 800a3fe:	69db      	ldr	r3, [r3, #28]
 800a400:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a404:	69b9      	ldr	r1, [r7, #24]
 800a406:	0148      	lsls	r0, r1, #5
 800a408:	69f9      	ldr	r1, [r7, #28]
 800a40a:	4401      	add	r1, r0
 800a40c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a410:	4313      	orrs	r3, r2
 800a412:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a414:	79fb      	ldrb	r3, [r7, #7]
 800a416:	2b01      	cmp	r3, #1
 800a418:	d10d      	bne.n	800a436 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a41a:	68bb      	ldr	r3, [r7, #8]
 800a41c:	691b      	ldr	r3, [r3, #16]
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d009      	beq.n	800a436 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a422:	68bb      	ldr	r3, [r7, #8]
 800a424:	6919      	ldr	r1, [r3, #16]
 800a426:	69bb      	ldr	r3, [r7, #24]
 800a428:	015a      	lsls	r2, r3, #5
 800a42a:	69fb      	ldr	r3, [r7, #28]
 800a42c:	4413      	add	r3, r2
 800a42e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a432:	460a      	mov	r2, r1
 800a434:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800a436:	68bb      	ldr	r3, [r7, #8]
 800a438:	791b      	ldrb	r3, [r3, #4]
 800a43a:	2b01      	cmp	r3, #1
 800a43c:	d128      	bne.n	800a490 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a43e:	69fb      	ldr	r3, [r7, #28]
 800a440:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a444:	689b      	ldr	r3, [r3, #8]
 800a446:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d110      	bne.n	800a470 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a44e:	69bb      	ldr	r3, [r7, #24]
 800a450:	015a      	lsls	r2, r3, #5
 800a452:	69fb      	ldr	r3, [r7, #28]
 800a454:	4413      	add	r3, r2
 800a456:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	69ba      	ldr	r2, [r7, #24]
 800a45e:	0151      	lsls	r1, r2, #5
 800a460:	69fa      	ldr	r2, [r7, #28]
 800a462:	440a      	add	r2, r1
 800a464:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a468:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a46c:	6013      	str	r3, [r2, #0]
 800a46e:	e00f      	b.n	800a490 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a470:	69bb      	ldr	r3, [r7, #24]
 800a472:	015a      	lsls	r2, r3, #5
 800a474:	69fb      	ldr	r3, [r7, #28]
 800a476:	4413      	add	r3, r2
 800a478:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	69ba      	ldr	r2, [r7, #24]
 800a480:	0151      	lsls	r1, r2, #5
 800a482:	69fa      	ldr	r2, [r7, #28]
 800a484:	440a      	add	r2, r1
 800a486:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a48a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a48e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a490:	69bb      	ldr	r3, [r7, #24]
 800a492:	015a      	lsls	r2, r3, #5
 800a494:	69fb      	ldr	r3, [r7, #28]
 800a496:	4413      	add	r3, r2
 800a498:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	69ba      	ldr	r2, [r7, #24]
 800a4a0:	0151      	lsls	r1, r2, #5
 800a4a2:	69fa      	ldr	r2, [r7, #28]
 800a4a4:	440a      	add	r2, r1
 800a4a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a4aa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a4ae:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a4b0:	2300      	movs	r3, #0
}
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	3720      	adds	r7, #32
 800a4b6:	46bd      	mov	sp, r7
 800a4b8:	bd80      	pop	{r7, pc}
 800a4ba:	bf00      	nop
 800a4bc:	1ff80000 	.word	0x1ff80000

0800a4c0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a4c0:	b480      	push	{r7}
 800a4c2:	b087      	sub	sp, #28
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	60f8      	str	r0, [r7, #12]
 800a4c8:	60b9      	str	r1, [r7, #8]
 800a4ca:	4613      	mov	r3, r2
 800a4cc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800a4d2:	68bb      	ldr	r3, [r7, #8]
 800a4d4:	781b      	ldrb	r3, [r3, #0]
 800a4d6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a4d8:	68bb      	ldr	r3, [r7, #8]
 800a4da:	785b      	ldrb	r3, [r3, #1]
 800a4dc:	2b01      	cmp	r3, #1
 800a4de:	f040 80ce 	bne.w	800a67e <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a4e2:	68bb      	ldr	r3, [r7, #8]
 800a4e4:	699b      	ldr	r3, [r3, #24]
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d132      	bne.n	800a550 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a4ea:	693b      	ldr	r3, [r7, #16]
 800a4ec:	015a      	lsls	r2, r3, #5
 800a4ee:	697b      	ldr	r3, [r7, #20]
 800a4f0:	4413      	add	r3, r2
 800a4f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4f6:	691b      	ldr	r3, [r3, #16]
 800a4f8:	693a      	ldr	r2, [r7, #16]
 800a4fa:	0151      	lsls	r1, r2, #5
 800a4fc:	697a      	ldr	r2, [r7, #20]
 800a4fe:	440a      	add	r2, r1
 800a500:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a504:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a508:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a50c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a50e:	693b      	ldr	r3, [r7, #16]
 800a510:	015a      	lsls	r2, r3, #5
 800a512:	697b      	ldr	r3, [r7, #20]
 800a514:	4413      	add	r3, r2
 800a516:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a51a:	691b      	ldr	r3, [r3, #16]
 800a51c:	693a      	ldr	r2, [r7, #16]
 800a51e:	0151      	lsls	r1, r2, #5
 800a520:	697a      	ldr	r2, [r7, #20]
 800a522:	440a      	add	r2, r1
 800a524:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a528:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a52c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a52e:	693b      	ldr	r3, [r7, #16]
 800a530:	015a      	lsls	r2, r3, #5
 800a532:	697b      	ldr	r3, [r7, #20]
 800a534:	4413      	add	r3, r2
 800a536:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a53a:	691b      	ldr	r3, [r3, #16]
 800a53c:	693a      	ldr	r2, [r7, #16]
 800a53e:	0151      	lsls	r1, r2, #5
 800a540:	697a      	ldr	r2, [r7, #20]
 800a542:	440a      	add	r2, r1
 800a544:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a548:	0cdb      	lsrs	r3, r3, #19
 800a54a:	04db      	lsls	r3, r3, #19
 800a54c:	6113      	str	r3, [r2, #16]
 800a54e:	e04e      	b.n	800a5ee <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a550:	693b      	ldr	r3, [r7, #16]
 800a552:	015a      	lsls	r2, r3, #5
 800a554:	697b      	ldr	r3, [r7, #20]
 800a556:	4413      	add	r3, r2
 800a558:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a55c:	691b      	ldr	r3, [r3, #16]
 800a55e:	693a      	ldr	r2, [r7, #16]
 800a560:	0151      	lsls	r1, r2, #5
 800a562:	697a      	ldr	r2, [r7, #20]
 800a564:	440a      	add	r2, r1
 800a566:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a56a:	0cdb      	lsrs	r3, r3, #19
 800a56c:	04db      	lsls	r3, r3, #19
 800a56e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a570:	693b      	ldr	r3, [r7, #16]
 800a572:	015a      	lsls	r2, r3, #5
 800a574:	697b      	ldr	r3, [r7, #20]
 800a576:	4413      	add	r3, r2
 800a578:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a57c:	691b      	ldr	r3, [r3, #16]
 800a57e:	693a      	ldr	r2, [r7, #16]
 800a580:	0151      	lsls	r1, r2, #5
 800a582:	697a      	ldr	r2, [r7, #20]
 800a584:	440a      	add	r2, r1
 800a586:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a58a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a58e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a592:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800a594:	68bb      	ldr	r3, [r7, #8]
 800a596:	699a      	ldr	r2, [r3, #24]
 800a598:	68bb      	ldr	r3, [r7, #8]
 800a59a:	68db      	ldr	r3, [r3, #12]
 800a59c:	429a      	cmp	r2, r3
 800a59e:	d903      	bls.n	800a5a8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800a5a0:	68bb      	ldr	r3, [r7, #8]
 800a5a2:	68da      	ldr	r2, [r3, #12]
 800a5a4:	68bb      	ldr	r3, [r7, #8]
 800a5a6:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a5a8:	693b      	ldr	r3, [r7, #16]
 800a5aa:	015a      	lsls	r2, r3, #5
 800a5ac:	697b      	ldr	r3, [r7, #20]
 800a5ae:	4413      	add	r3, r2
 800a5b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5b4:	691b      	ldr	r3, [r3, #16]
 800a5b6:	693a      	ldr	r2, [r7, #16]
 800a5b8:	0151      	lsls	r1, r2, #5
 800a5ba:	697a      	ldr	r2, [r7, #20]
 800a5bc:	440a      	add	r2, r1
 800a5be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a5c2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a5c6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a5c8:	693b      	ldr	r3, [r7, #16]
 800a5ca:	015a      	lsls	r2, r3, #5
 800a5cc:	697b      	ldr	r3, [r7, #20]
 800a5ce:	4413      	add	r3, r2
 800a5d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5d4:	691a      	ldr	r2, [r3, #16]
 800a5d6:	68bb      	ldr	r3, [r7, #8]
 800a5d8:	699b      	ldr	r3, [r3, #24]
 800a5da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a5de:	6939      	ldr	r1, [r7, #16]
 800a5e0:	0148      	lsls	r0, r1, #5
 800a5e2:	6979      	ldr	r1, [r7, #20]
 800a5e4:	4401      	add	r1, r0
 800a5e6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a5ea:	4313      	orrs	r3, r2
 800a5ec:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a5ee:	79fb      	ldrb	r3, [r7, #7]
 800a5f0:	2b01      	cmp	r3, #1
 800a5f2:	d11e      	bne.n	800a632 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a5f4:	68bb      	ldr	r3, [r7, #8]
 800a5f6:	695b      	ldr	r3, [r3, #20]
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d009      	beq.n	800a610 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a5fc:	693b      	ldr	r3, [r7, #16]
 800a5fe:	015a      	lsls	r2, r3, #5
 800a600:	697b      	ldr	r3, [r7, #20]
 800a602:	4413      	add	r3, r2
 800a604:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a608:	461a      	mov	r2, r3
 800a60a:	68bb      	ldr	r3, [r7, #8]
 800a60c:	695b      	ldr	r3, [r3, #20]
 800a60e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a610:	693b      	ldr	r3, [r7, #16]
 800a612:	015a      	lsls	r2, r3, #5
 800a614:	697b      	ldr	r3, [r7, #20]
 800a616:	4413      	add	r3, r2
 800a618:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	693a      	ldr	r2, [r7, #16]
 800a620:	0151      	lsls	r1, r2, #5
 800a622:	697a      	ldr	r2, [r7, #20]
 800a624:	440a      	add	r2, r1
 800a626:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a62a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a62e:	6013      	str	r3, [r2, #0]
 800a630:	e097      	b.n	800a762 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a632:	693b      	ldr	r3, [r7, #16]
 800a634:	015a      	lsls	r2, r3, #5
 800a636:	697b      	ldr	r3, [r7, #20]
 800a638:	4413      	add	r3, r2
 800a63a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	693a      	ldr	r2, [r7, #16]
 800a642:	0151      	lsls	r1, r2, #5
 800a644:	697a      	ldr	r2, [r7, #20]
 800a646:	440a      	add	r2, r1
 800a648:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a64c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a650:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800a652:	68bb      	ldr	r3, [r7, #8]
 800a654:	699b      	ldr	r3, [r3, #24]
 800a656:	2b00      	cmp	r3, #0
 800a658:	f000 8083 	beq.w	800a762 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a65c:	697b      	ldr	r3, [r7, #20]
 800a65e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a662:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a664:	68bb      	ldr	r3, [r7, #8]
 800a666:	781b      	ldrb	r3, [r3, #0]
 800a668:	f003 030f 	and.w	r3, r3, #15
 800a66c:	2101      	movs	r1, #1
 800a66e:	fa01 f303 	lsl.w	r3, r1, r3
 800a672:	6979      	ldr	r1, [r7, #20]
 800a674:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a678:	4313      	orrs	r3, r2
 800a67a:	634b      	str	r3, [r1, #52]	; 0x34
 800a67c:	e071      	b.n	800a762 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a67e:	693b      	ldr	r3, [r7, #16]
 800a680:	015a      	lsls	r2, r3, #5
 800a682:	697b      	ldr	r3, [r7, #20]
 800a684:	4413      	add	r3, r2
 800a686:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a68a:	691b      	ldr	r3, [r3, #16]
 800a68c:	693a      	ldr	r2, [r7, #16]
 800a68e:	0151      	lsls	r1, r2, #5
 800a690:	697a      	ldr	r2, [r7, #20]
 800a692:	440a      	add	r2, r1
 800a694:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a698:	0cdb      	lsrs	r3, r3, #19
 800a69a:	04db      	lsls	r3, r3, #19
 800a69c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a69e:	693b      	ldr	r3, [r7, #16]
 800a6a0:	015a      	lsls	r2, r3, #5
 800a6a2:	697b      	ldr	r3, [r7, #20]
 800a6a4:	4413      	add	r3, r2
 800a6a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a6aa:	691b      	ldr	r3, [r3, #16]
 800a6ac:	693a      	ldr	r2, [r7, #16]
 800a6ae:	0151      	lsls	r1, r2, #5
 800a6b0:	697a      	ldr	r2, [r7, #20]
 800a6b2:	440a      	add	r2, r1
 800a6b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a6b8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a6bc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a6c0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800a6c2:	68bb      	ldr	r3, [r7, #8]
 800a6c4:	699b      	ldr	r3, [r3, #24]
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d003      	beq.n	800a6d2 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800a6ca:	68bb      	ldr	r3, [r7, #8]
 800a6cc:	68da      	ldr	r2, [r3, #12]
 800a6ce:	68bb      	ldr	r3, [r7, #8]
 800a6d0:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800a6d2:	68bb      	ldr	r3, [r7, #8]
 800a6d4:	68da      	ldr	r2, [r3, #12]
 800a6d6:	68bb      	ldr	r3, [r7, #8]
 800a6d8:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a6da:	693b      	ldr	r3, [r7, #16]
 800a6dc:	015a      	lsls	r2, r3, #5
 800a6de:	697b      	ldr	r3, [r7, #20]
 800a6e0:	4413      	add	r3, r2
 800a6e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a6e6:	691b      	ldr	r3, [r3, #16]
 800a6e8:	693a      	ldr	r2, [r7, #16]
 800a6ea:	0151      	lsls	r1, r2, #5
 800a6ec:	697a      	ldr	r2, [r7, #20]
 800a6ee:	440a      	add	r2, r1
 800a6f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a6f4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a6f8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800a6fa:	693b      	ldr	r3, [r7, #16]
 800a6fc:	015a      	lsls	r2, r3, #5
 800a6fe:	697b      	ldr	r3, [r7, #20]
 800a700:	4413      	add	r3, r2
 800a702:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a706:	691a      	ldr	r2, [r3, #16]
 800a708:	68bb      	ldr	r3, [r7, #8]
 800a70a:	69db      	ldr	r3, [r3, #28]
 800a70c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a710:	6939      	ldr	r1, [r7, #16]
 800a712:	0148      	lsls	r0, r1, #5
 800a714:	6979      	ldr	r1, [r7, #20]
 800a716:	4401      	add	r1, r0
 800a718:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a71c:	4313      	orrs	r3, r2
 800a71e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800a720:	79fb      	ldrb	r3, [r7, #7]
 800a722:	2b01      	cmp	r3, #1
 800a724:	d10d      	bne.n	800a742 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a726:	68bb      	ldr	r3, [r7, #8]
 800a728:	691b      	ldr	r3, [r3, #16]
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d009      	beq.n	800a742 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a72e:	68bb      	ldr	r3, [r7, #8]
 800a730:	6919      	ldr	r1, [r3, #16]
 800a732:	693b      	ldr	r3, [r7, #16]
 800a734:	015a      	lsls	r2, r3, #5
 800a736:	697b      	ldr	r3, [r7, #20]
 800a738:	4413      	add	r3, r2
 800a73a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a73e:	460a      	mov	r2, r1
 800a740:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a742:	693b      	ldr	r3, [r7, #16]
 800a744:	015a      	lsls	r2, r3, #5
 800a746:	697b      	ldr	r3, [r7, #20]
 800a748:	4413      	add	r3, r2
 800a74a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	693a      	ldr	r2, [r7, #16]
 800a752:	0151      	lsls	r1, r2, #5
 800a754:	697a      	ldr	r2, [r7, #20]
 800a756:	440a      	add	r2, r1
 800a758:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a75c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a760:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a762:	2300      	movs	r3, #0
}
 800a764:	4618      	mov	r0, r3
 800a766:	371c      	adds	r7, #28
 800a768:	46bd      	mov	sp, r7
 800a76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a76e:	4770      	bx	lr

0800a770 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a770:	b480      	push	{r7}
 800a772:	b087      	sub	sp, #28
 800a774:	af00      	add	r7, sp, #0
 800a776:	6078      	str	r0, [r7, #4]
 800a778:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a77a:	2300      	movs	r3, #0
 800a77c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800a77e:	2300      	movs	r3, #0
 800a780:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a786:	683b      	ldr	r3, [r7, #0]
 800a788:	785b      	ldrb	r3, [r3, #1]
 800a78a:	2b01      	cmp	r3, #1
 800a78c:	d14a      	bne.n	800a824 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a78e:	683b      	ldr	r3, [r7, #0]
 800a790:	781b      	ldrb	r3, [r3, #0]
 800a792:	015a      	lsls	r2, r3, #5
 800a794:	693b      	ldr	r3, [r7, #16]
 800a796:	4413      	add	r3, r2
 800a798:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a7a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a7a6:	f040 8086 	bne.w	800a8b6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800a7aa:	683b      	ldr	r3, [r7, #0]
 800a7ac:	781b      	ldrb	r3, [r3, #0]
 800a7ae:	015a      	lsls	r2, r3, #5
 800a7b0:	693b      	ldr	r3, [r7, #16]
 800a7b2:	4413      	add	r3, r2
 800a7b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	683a      	ldr	r2, [r7, #0]
 800a7bc:	7812      	ldrb	r2, [r2, #0]
 800a7be:	0151      	lsls	r1, r2, #5
 800a7c0:	693a      	ldr	r2, [r7, #16]
 800a7c2:	440a      	add	r2, r1
 800a7c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a7c8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a7cc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800a7ce:	683b      	ldr	r3, [r7, #0]
 800a7d0:	781b      	ldrb	r3, [r3, #0]
 800a7d2:	015a      	lsls	r2, r3, #5
 800a7d4:	693b      	ldr	r3, [r7, #16]
 800a7d6:	4413      	add	r3, r2
 800a7d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	683a      	ldr	r2, [r7, #0]
 800a7e0:	7812      	ldrb	r2, [r2, #0]
 800a7e2:	0151      	lsls	r1, r2, #5
 800a7e4:	693a      	ldr	r2, [r7, #16]
 800a7e6:	440a      	add	r2, r1
 800a7e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a7ec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a7f0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	3301      	adds	r3, #1
 800a7f6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	f242 7210 	movw	r2, #10000	; 0x2710
 800a7fe:	4293      	cmp	r3, r2
 800a800:	d902      	bls.n	800a808 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800a802:	2301      	movs	r3, #1
 800a804:	75fb      	strb	r3, [r7, #23]
          break;
 800a806:	e056      	b.n	800a8b6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800a808:	683b      	ldr	r3, [r7, #0]
 800a80a:	781b      	ldrb	r3, [r3, #0]
 800a80c:	015a      	lsls	r2, r3, #5
 800a80e:	693b      	ldr	r3, [r7, #16]
 800a810:	4413      	add	r3, r2
 800a812:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a81c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a820:	d0e7      	beq.n	800a7f2 <USB_EPStopXfer+0x82>
 800a822:	e048      	b.n	800a8b6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a824:	683b      	ldr	r3, [r7, #0]
 800a826:	781b      	ldrb	r3, [r3, #0]
 800a828:	015a      	lsls	r2, r3, #5
 800a82a:	693b      	ldr	r3, [r7, #16]
 800a82c:	4413      	add	r3, r2
 800a82e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a838:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a83c:	d13b      	bne.n	800a8b6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800a83e:	683b      	ldr	r3, [r7, #0]
 800a840:	781b      	ldrb	r3, [r3, #0]
 800a842:	015a      	lsls	r2, r3, #5
 800a844:	693b      	ldr	r3, [r7, #16]
 800a846:	4413      	add	r3, r2
 800a848:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	683a      	ldr	r2, [r7, #0]
 800a850:	7812      	ldrb	r2, [r2, #0]
 800a852:	0151      	lsls	r1, r2, #5
 800a854:	693a      	ldr	r2, [r7, #16]
 800a856:	440a      	add	r2, r1
 800a858:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a85c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a860:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800a862:	683b      	ldr	r3, [r7, #0]
 800a864:	781b      	ldrb	r3, [r3, #0]
 800a866:	015a      	lsls	r2, r3, #5
 800a868:	693b      	ldr	r3, [r7, #16]
 800a86a:	4413      	add	r3, r2
 800a86c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	683a      	ldr	r2, [r7, #0]
 800a874:	7812      	ldrb	r2, [r2, #0]
 800a876:	0151      	lsls	r1, r2, #5
 800a878:	693a      	ldr	r2, [r7, #16]
 800a87a:	440a      	add	r2, r1
 800a87c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a880:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a884:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	3301      	adds	r3, #1
 800a88a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	f242 7210 	movw	r2, #10000	; 0x2710
 800a892:	4293      	cmp	r3, r2
 800a894:	d902      	bls.n	800a89c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800a896:	2301      	movs	r3, #1
 800a898:	75fb      	strb	r3, [r7, #23]
          break;
 800a89a:	e00c      	b.n	800a8b6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800a89c:	683b      	ldr	r3, [r7, #0]
 800a89e:	781b      	ldrb	r3, [r3, #0]
 800a8a0:	015a      	lsls	r2, r3, #5
 800a8a2:	693b      	ldr	r3, [r7, #16]
 800a8a4:	4413      	add	r3, r2
 800a8a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a8b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a8b4:	d0e7      	beq.n	800a886 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800a8b6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a8b8:	4618      	mov	r0, r3
 800a8ba:	371c      	adds	r7, #28
 800a8bc:	46bd      	mov	sp, r7
 800a8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c2:	4770      	bx	lr

0800a8c4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a8c4:	b480      	push	{r7}
 800a8c6:	b089      	sub	sp, #36	; 0x24
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	60f8      	str	r0, [r7, #12]
 800a8cc:	60b9      	str	r1, [r7, #8]
 800a8ce:	4611      	mov	r1, r2
 800a8d0:	461a      	mov	r2, r3
 800a8d2:	460b      	mov	r3, r1
 800a8d4:	71fb      	strb	r3, [r7, #7]
 800a8d6:	4613      	mov	r3, r2
 800a8d8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a8de:	68bb      	ldr	r3, [r7, #8]
 800a8e0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a8e2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d123      	bne.n	800a932 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a8ea:	88bb      	ldrh	r3, [r7, #4]
 800a8ec:	3303      	adds	r3, #3
 800a8ee:	089b      	lsrs	r3, r3, #2
 800a8f0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a8f2:	2300      	movs	r3, #0
 800a8f4:	61bb      	str	r3, [r7, #24]
 800a8f6:	e018      	b.n	800a92a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a8f8:	79fb      	ldrb	r3, [r7, #7]
 800a8fa:	031a      	lsls	r2, r3, #12
 800a8fc:	697b      	ldr	r3, [r7, #20]
 800a8fe:	4413      	add	r3, r2
 800a900:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a904:	461a      	mov	r2, r3
 800a906:	69fb      	ldr	r3, [r7, #28]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a90c:	69fb      	ldr	r3, [r7, #28]
 800a90e:	3301      	adds	r3, #1
 800a910:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a912:	69fb      	ldr	r3, [r7, #28]
 800a914:	3301      	adds	r3, #1
 800a916:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a918:	69fb      	ldr	r3, [r7, #28]
 800a91a:	3301      	adds	r3, #1
 800a91c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a91e:	69fb      	ldr	r3, [r7, #28]
 800a920:	3301      	adds	r3, #1
 800a922:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a924:	69bb      	ldr	r3, [r7, #24]
 800a926:	3301      	adds	r3, #1
 800a928:	61bb      	str	r3, [r7, #24]
 800a92a:	69ba      	ldr	r2, [r7, #24]
 800a92c:	693b      	ldr	r3, [r7, #16]
 800a92e:	429a      	cmp	r2, r3
 800a930:	d3e2      	bcc.n	800a8f8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a932:	2300      	movs	r3, #0
}
 800a934:	4618      	mov	r0, r3
 800a936:	3724      	adds	r7, #36	; 0x24
 800a938:	46bd      	mov	sp, r7
 800a93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a93e:	4770      	bx	lr

0800a940 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a940:	b480      	push	{r7}
 800a942:	b08b      	sub	sp, #44	; 0x2c
 800a944:	af00      	add	r7, sp, #0
 800a946:	60f8      	str	r0, [r7, #12]
 800a948:	60b9      	str	r1, [r7, #8]
 800a94a:	4613      	mov	r3, r2
 800a94c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a952:	68bb      	ldr	r3, [r7, #8]
 800a954:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a956:	88fb      	ldrh	r3, [r7, #6]
 800a958:	089b      	lsrs	r3, r3, #2
 800a95a:	b29b      	uxth	r3, r3
 800a95c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a95e:	88fb      	ldrh	r3, [r7, #6]
 800a960:	f003 0303 	and.w	r3, r3, #3
 800a964:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a966:	2300      	movs	r3, #0
 800a968:	623b      	str	r3, [r7, #32]
 800a96a:	e014      	b.n	800a996 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a96c:	69bb      	ldr	r3, [r7, #24]
 800a96e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a972:	681a      	ldr	r2, [r3, #0]
 800a974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a976:	601a      	str	r2, [r3, #0]
    pDest++;
 800a978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a97a:	3301      	adds	r3, #1
 800a97c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a97e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a980:	3301      	adds	r3, #1
 800a982:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a986:	3301      	adds	r3, #1
 800a988:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a98a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a98c:	3301      	adds	r3, #1
 800a98e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800a990:	6a3b      	ldr	r3, [r7, #32]
 800a992:	3301      	adds	r3, #1
 800a994:	623b      	str	r3, [r7, #32]
 800a996:	6a3a      	ldr	r2, [r7, #32]
 800a998:	697b      	ldr	r3, [r7, #20]
 800a99a:	429a      	cmp	r2, r3
 800a99c:	d3e6      	bcc.n	800a96c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a99e:	8bfb      	ldrh	r3, [r7, #30]
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d01e      	beq.n	800a9e2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a9a4:	2300      	movs	r3, #0
 800a9a6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a9a8:	69bb      	ldr	r3, [r7, #24]
 800a9aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a9ae:	461a      	mov	r2, r3
 800a9b0:	f107 0310 	add.w	r3, r7, #16
 800a9b4:	6812      	ldr	r2, [r2, #0]
 800a9b6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a9b8:	693a      	ldr	r2, [r7, #16]
 800a9ba:	6a3b      	ldr	r3, [r7, #32]
 800a9bc:	b2db      	uxtb	r3, r3
 800a9be:	00db      	lsls	r3, r3, #3
 800a9c0:	fa22 f303 	lsr.w	r3, r2, r3
 800a9c4:	b2da      	uxtb	r2, r3
 800a9c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9c8:	701a      	strb	r2, [r3, #0]
      i++;
 800a9ca:	6a3b      	ldr	r3, [r7, #32]
 800a9cc:	3301      	adds	r3, #1
 800a9ce:	623b      	str	r3, [r7, #32]
      pDest++;
 800a9d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9d2:	3301      	adds	r3, #1
 800a9d4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800a9d6:	8bfb      	ldrh	r3, [r7, #30]
 800a9d8:	3b01      	subs	r3, #1
 800a9da:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a9dc:	8bfb      	ldrh	r3, [r7, #30]
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d1ea      	bne.n	800a9b8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a9e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a9e4:	4618      	mov	r0, r3
 800a9e6:	372c      	adds	r7, #44	; 0x2c
 800a9e8:	46bd      	mov	sp, r7
 800a9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ee:	4770      	bx	lr

0800a9f0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a9f0:	b480      	push	{r7}
 800a9f2:	b085      	sub	sp, #20
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	6078      	str	r0, [r7, #4]
 800a9f8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a9fe:	683b      	ldr	r3, [r7, #0]
 800aa00:	781b      	ldrb	r3, [r3, #0]
 800aa02:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800aa04:	683b      	ldr	r3, [r7, #0]
 800aa06:	785b      	ldrb	r3, [r3, #1]
 800aa08:	2b01      	cmp	r3, #1
 800aa0a:	d12c      	bne.n	800aa66 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800aa0c:	68bb      	ldr	r3, [r7, #8]
 800aa0e:	015a      	lsls	r2, r3, #5
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	4413      	add	r3, r2
 800aa14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	db12      	blt.n	800aa44 <USB_EPSetStall+0x54>
 800aa1e:	68bb      	ldr	r3, [r7, #8]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d00f      	beq.n	800aa44 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800aa24:	68bb      	ldr	r3, [r7, #8]
 800aa26:	015a      	lsls	r2, r3, #5
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	4413      	add	r3, r2
 800aa2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	68ba      	ldr	r2, [r7, #8]
 800aa34:	0151      	lsls	r1, r2, #5
 800aa36:	68fa      	ldr	r2, [r7, #12]
 800aa38:	440a      	add	r2, r1
 800aa3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aa3e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800aa42:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800aa44:	68bb      	ldr	r3, [r7, #8]
 800aa46:	015a      	lsls	r2, r3, #5
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	4413      	add	r3, r2
 800aa4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	68ba      	ldr	r2, [r7, #8]
 800aa54:	0151      	lsls	r1, r2, #5
 800aa56:	68fa      	ldr	r2, [r7, #12]
 800aa58:	440a      	add	r2, r1
 800aa5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aa5e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800aa62:	6013      	str	r3, [r2, #0]
 800aa64:	e02b      	b.n	800aabe <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800aa66:	68bb      	ldr	r3, [r7, #8]
 800aa68:	015a      	lsls	r2, r3, #5
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	4413      	add	r3, r2
 800aa6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	db12      	blt.n	800aa9e <USB_EPSetStall+0xae>
 800aa78:	68bb      	ldr	r3, [r7, #8]
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d00f      	beq.n	800aa9e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800aa7e:	68bb      	ldr	r3, [r7, #8]
 800aa80:	015a      	lsls	r2, r3, #5
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	4413      	add	r3, r2
 800aa86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	68ba      	ldr	r2, [r7, #8]
 800aa8e:	0151      	lsls	r1, r2, #5
 800aa90:	68fa      	ldr	r2, [r7, #12]
 800aa92:	440a      	add	r2, r1
 800aa94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aa98:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800aa9c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800aa9e:	68bb      	ldr	r3, [r7, #8]
 800aaa0:	015a      	lsls	r2, r3, #5
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	4413      	add	r3, r2
 800aaa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	68ba      	ldr	r2, [r7, #8]
 800aaae:	0151      	lsls	r1, r2, #5
 800aab0:	68fa      	ldr	r2, [r7, #12]
 800aab2:	440a      	add	r2, r1
 800aab4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aab8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800aabc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800aabe:	2300      	movs	r3, #0
}
 800aac0:	4618      	mov	r0, r3
 800aac2:	3714      	adds	r7, #20
 800aac4:	46bd      	mov	sp, r7
 800aac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaca:	4770      	bx	lr

0800aacc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800aacc:	b480      	push	{r7}
 800aace:	b085      	sub	sp, #20
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	6078      	str	r0, [r7, #4]
 800aad4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800aada:	683b      	ldr	r3, [r7, #0]
 800aadc:	781b      	ldrb	r3, [r3, #0]
 800aade:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800aae0:	683b      	ldr	r3, [r7, #0]
 800aae2:	785b      	ldrb	r3, [r3, #1]
 800aae4:	2b01      	cmp	r3, #1
 800aae6:	d128      	bne.n	800ab3a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800aae8:	68bb      	ldr	r3, [r7, #8]
 800aaea:	015a      	lsls	r2, r3, #5
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	4413      	add	r3, r2
 800aaf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	68ba      	ldr	r2, [r7, #8]
 800aaf8:	0151      	lsls	r1, r2, #5
 800aafa:	68fa      	ldr	r2, [r7, #12]
 800aafc:	440a      	add	r2, r1
 800aafe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ab02:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ab06:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ab08:	683b      	ldr	r3, [r7, #0]
 800ab0a:	791b      	ldrb	r3, [r3, #4]
 800ab0c:	2b03      	cmp	r3, #3
 800ab0e:	d003      	beq.n	800ab18 <USB_EPClearStall+0x4c>
 800ab10:	683b      	ldr	r3, [r7, #0]
 800ab12:	791b      	ldrb	r3, [r3, #4]
 800ab14:	2b02      	cmp	r3, #2
 800ab16:	d138      	bne.n	800ab8a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ab18:	68bb      	ldr	r3, [r7, #8]
 800ab1a:	015a      	lsls	r2, r3, #5
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	4413      	add	r3, r2
 800ab20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	68ba      	ldr	r2, [r7, #8]
 800ab28:	0151      	lsls	r1, r2, #5
 800ab2a:	68fa      	ldr	r2, [r7, #12]
 800ab2c:	440a      	add	r2, r1
 800ab2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ab32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ab36:	6013      	str	r3, [r2, #0]
 800ab38:	e027      	b.n	800ab8a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800ab3a:	68bb      	ldr	r3, [r7, #8]
 800ab3c:	015a      	lsls	r2, r3, #5
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	4413      	add	r3, r2
 800ab42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	68ba      	ldr	r2, [r7, #8]
 800ab4a:	0151      	lsls	r1, r2, #5
 800ab4c:	68fa      	ldr	r2, [r7, #12]
 800ab4e:	440a      	add	r2, r1
 800ab50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ab54:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ab58:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ab5a:	683b      	ldr	r3, [r7, #0]
 800ab5c:	791b      	ldrb	r3, [r3, #4]
 800ab5e:	2b03      	cmp	r3, #3
 800ab60:	d003      	beq.n	800ab6a <USB_EPClearStall+0x9e>
 800ab62:	683b      	ldr	r3, [r7, #0]
 800ab64:	791b      	ldrb	r3, [r3, #4]
 800ab66:	2b02      	cmp	r3, #2
 800ab68:	d10f      	bne.n	800ab8a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ab6a:	68bb      	ldr	r3, [r7, #8]
 800ab6c:	015a      	lsls	r2, r3, #5
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	4413      	add	r3, r2
 800ab72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	68ba      	ldr	r2, [r7, #8]
 800ab7a:	0151      	lsls	r1, r2, #5
 800ab7c:	68fa      	ldr	r2, [r7, #12]
 800ab7e:	440a      	add	r2, r1
 800ab80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ab84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ab88:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800ab8a:	2300      	movs	r3, #0
}
 800ab8c:	4618      	mov	r0, r3
 800ab8e:	3714      	adds	r7, #20
 800ab90:	46bd      	mov	sp, r7
 800ab92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab96:	4770      	bx	lr

0800ab98 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800ab98:	b480      	push	{r7}
 800ab9a:	b085      	sub	sp, #20
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	6078      	str	r0, [r7, #4]
 800aba0:	460b      	mov	r3, r1
 800aba2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	68fa      	ldr	r2, [r7, #12]
 800abb2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800abb6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800abba:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800abc2:	681a      	ldr	r2, [r3, #0]
 800abc4:	78fb      	ldrb	r3, [r7, #3]
 800abc6:	011b      	lsls	r3, r3, #4
 800abc8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800abcc:	68f9      	ldr	r1, [r7, #12]
 800abce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800abd2:	4313      	orrs	r3, r2
 800abd4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800abd6:	2300      	movs	r3, #0
}
 800abd8:	4618      	mov	r0, r3
 800abda:	3714      	adds	r7, #20
 800abdc:	46bd      	mov	sp, r7
 800abde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe2:	4770      	bx	lr

0800abe4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800abe4:	b480      	push	{r7}
 800abe6:	b085      	sub	sp, #20
 800abe8:	af00      	add	r7, sp, #0
 800abea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	68fa      	ldr	r2, [r7, #12]
 800abfa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800abfe:	f023 0303 	bic.w	r3, r3, #3
 800ac02:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac0a:	685b      	ldr	r3, [r3, #4]
 800ac0c:	68fa      	ldr	r2, [r7, #12]
 800ac0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ac12:	f023 0302 	bic.w	r3, r3, #2
 800ac16:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ac18:	2300      	movs	r3, #0
}
 800ac1a:	4618      	mov	r0, r3
 800ac1c:	3714      	adds	r7, #20
 800ac1e:	46bd      	mov	sp, r7
 800ac20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac24:	4770      	bx	lr

0800ac26 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800ac26:	b480      	push	{r7}
 800ac28:	b085      	sub	sp, #20
 800ac2a:	af00      	add	r7, sp, #0
 800ac2c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	68fa      	ldr	r2, [r7, #12]
 800ac3c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ac40:	f023 0303 	bic.w	r3, r3, #3
 800ac44:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac4c:	685b      	ldr	r3, [r3, #4]
 800ac4e:	68fa      	ldr	r2, [r7, #12]
 800ac50:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ac54:	f043 0302 	orr.w	r3, r3, #2
 800ac58:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ac5a:	2300      	movs	r3, #0
}
 800ac5c:	4618      	mov	r0, r3
 800ac5e:	3714      	adds	r7, #20
 800ac60:	46bd      	mov	sp, r7
 800ac62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac66:	4770      	bx	lr

0800ac68 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800ac68:	b480      	push	{r7}
 800ac6a:	b085      	sub	sp, #20
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	695b      	ldr	r3, [r3, #20]
 800ac74:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	699b      	ldr	r3, [r3, #24]
 800ac7a:	68fa      	ldr	r2, [r7, #12]
 800ac7c:	4013      	ands	r3, r2
 800ac7e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800ac80:	68fb      	ldr	r3, [r7, #12]
}
 800ac82:	4618      	mov	r0, r3
 800ac84:	3714      	adds	r7, #20
 800ac86:	46bd      	mov	sp, r7
 800ac88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac8c:	4770      	bx	lr

0800ac8e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ac8e:	b480      	push	{r7}
 800ac90:	b085      	sub	sp, #20
 800ac92:	af00      	add	r7, sp, #0
 800ac94:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aca0:	699b      	ldr	r3, [r3, #24]
 800aca2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800acaa:	69db      	ldr	r3, [r3, #28]
 800acac:	68ba      	ldr	r2, [r7, #8]
 800acae:	4013      	ands	r3, r2
 800acb0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800acb2:	68bb      	ldr	r3, [r7, #8]
 800acb4:	0c1b      	lsrs	r3, r3, #16
}
 800acb6:	4618      	mov	r0, r3
 800acb8:	3714      	adds	r7, #20
 800acba:	46bd      	mov	sp, r7
 800acbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc0:	4770      	bx	lr

0800acc2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800acc2:	b480      	push	{r7}
 800acc4:	b085      	sub	sp, #20
 800acc6:	af00      	add	r7, sp, #0
 800acc8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800acd4:	699b      	ldr	r3, [r3, #24]
 800acd6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800acde:	69db      	ldr	r3, [r3, #28]
 800ace0:	68ba      	ldr	r2, [r7, #8]
 800ace2:	4013      	ands	r3, r2
 800ace4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800ace6:	68bb      	ldr	r3, [r7, #8]
 800ace8:	b29b      	uxth	r3, r3
}
 800acea:	4618      	mov	r0, r3
 800acec:	3714      	adds	r7, #20
 800acee:	46bd      	mov	sp, r7
 800acf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf4:	4770      	bx	lr

0800acf6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800acf6:	b480      	push	{r7}
 800acf8:	b085      	sub	sp, #20
 800acfa:	af00      	add	r7, sp, #0
 800acfc:	6078      	str	r0, [r7, #4]
 800acfe:	460b      	mov	r3, r1
 800ad00:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800ad06:	78fb      	ldrb	r3, [r7, #3]
 800ad08:	015a      	lsls	r2, r3, #5
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	4413      	add	r3, r2
 800ad0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad12:	689b      	ldr	r3, [r3, #8]
 800ad14:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad1c:	695b      	ldr	r3, [r3, #20]
 800ad1e:	68ba      	ldr	r2, [r7, #8]
 800ad20:	4013      	ands	r3, r2
 800ad22:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ad24:	68bb      	ldr	r3, [r7, #8]
}
 800ad26:	4618      	mov	r0, r3
 800ad28:	3714      	adds	r7, #20
 800ad2a:	46bd      	mov	sp, r7
 800ad2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad30:	4770      	bx	lr

0800ad32 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ad32:	b480      	push	{r7}
 800ad34:	b087      	sub	sp, #28
 800ad36:	af00      	add	r7, sp, #0
 800ad38:	6078      	str	r0, [r7, #4]
 800ad3a:	460b      	mov	r3, r1
 800ad3c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800ad42:	697b      	ldr	r3, [r7, #20]
 800ad44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad48:	691b      	ldr	r3, [r3, #16]
 800ad4a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800ad4c:	697b      	ldr	r3, [r7, #20]
 800ad4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad54:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800ad56:	78fb      	ldrb	r3, [r7, #3]
 800ad58:	f003 030f 	and.w	r3, r3, #15
 800ad5c:	68fa      	ldr	r2, [r7, #12]
 800ad5e:	fa22 f303 	lsr.w	r3, r2, r3
 800ad62:	01db      	lsls	r3, r3, #7
 800ad64:	b2db      	uxtb	r3, r3
 800ad66:	693a      	ldr	r2, [r7, #16]
 800ad68:	4313      	orrs	r3, r2
 800ad6a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800ad6c:	78fb      	ldrb	r3, [r7, #3]
 800ad6e:	015a      	lsls	r2, r3, #5
 800ad70:	697b      	ldr	r3, [r7, #20]
 800ad72:	4413      	add	r3, r2
 800ad74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad78:	689b      	ldr	r3, [r3, #8]
 800ad7a:	693a      	ldr	r2, [r7, #16]
 800ad7c:	4013      	ands	r3, r2
 800ad7e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ad80:	68bb      	ldr	r3, [r7, #8]
}
 800ad82:	4618      	mov	r0, r3
 800ad84:	371c      	adds	r7, #28
 800ad86:	46bd      	mov	sp, r7
 800ad88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad8c:	4770      	bx	lr

0800ad8e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800ad8e:	b480      	push	{r7}
 800ad90:	b083      	sub	sp, #12
 800ad92:	af00      	add	r7, sp, #0
 800ad94:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	695b      	ldr	r3, [r3, #20]
 800ad9a:	f003 0301 	and.w	r3, r3, #1
}
 800ad9e:	4618      	mov	r0, r3
 800ada0:	370c      	adds	r7, #12
 800ada2:	46bd      	mov	sp, r7
 800ada4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada8:	4770      	bx	lr

0800adaa <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800adaa:	b480      	push	{r7}
 800adac:	b085      	sub	sp, #20
 800adae:	af00      	add	r7, sp, #0
 800adb0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	68fa      	ldr	r2, [r7, #12]
 800adc0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800adc4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800adc8:	f023 0307 	bic.w	r3, r3, #7
 800adcc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800add4:	685b      	ldr	r3, [r3, #4]
 800add6:	68fa      	ldr	r2, [r7, #12]
 800add8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800addc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ade0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ade2:	2300      	movs	r3, #0
}
 800ade4:	4618      	mov	r0, r3
 800ade6:	3714      	adds	r7, #20
 800ade8:	46bd      	mov	sp, r7
 800adea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adee:	4770      	bx	lr

0800adf0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800adf0:	b480      	push	{r7}
 800adf2:	b087      	sub	sp, #28
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	60f8      	str	r0, [r7, #12]
 800adf8:	460b      	mov	r3, r1
 800adfa:	607a      	str	r2, [r7, #4]
 800adfc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	333c      	adds	r3, #60	; 0x3c
 800ae06:	3304      	adds	r3, #4
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800ae0c:	693b      	ldr	r3, [r7, #16]
 800ae0e:	4a26      	ldr	r2, [pc, #152]	; (800aea8 <USB_EP0_OutStart+0xb8>)
 800ae10:	4293      	cmp	r3, r2
 800ae12:	d90a      	bls.n	800ae2a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ae14:	697b      	ldr	r3, [r7, #20]
 800ae16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ae20:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ae24:	d101      	bne.n	800ae2a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800ae26:	2300      	movs	r3, #0
 800ae28:	e037      	b.n	800ae9a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800ae2a:	697b      	ldr	r3, [r7, #20]
 800ae2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae30:	461a      	mov	r2, r3
 800ae32:	2300      	movs	r3, #0
 800ae34:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ae36:	697b      	ldr	r3, [r7, #20]
 800ae38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae3c:	691b      	ldr	r3, [r3, #16]
 800ae3e:	697a      	ldr	r2, [r7, #20]
 800ae40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ae44:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ae48:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800ae4a:	697b      	ldr	r3, [r7, #20]
 800ae4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae50:	691b      	ldr	r3, [r3, #16]
 800ae52:	697a      	ldr	r2, [r7, #20]
 800ae54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ae58:	f043 0318 	orr.w	r3, r3, #24
 800ae5c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800ae5e:	697b      	ldr	r3, [r7, #20]
 800ae60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae64:	691b      	ldr	r3, [r3, #16]
 800ae66:	697a      	ldr	r2, [r7, #20]
 800ae68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ae6c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800ae70:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800ae72:	7afb      	ldrb	r3, [r7, #11]
 800ae74:	2b01      	cmp	r3, #1
 800ae76:	d10f      	bne.n	800ae98 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800ae78:	697b      	ldr	r3, [r7, #20]
 800ae7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae7e:	461a      	mov	r2, r3
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800ae84:	697b      	ldr	r3, [r7, #20]
 800ae86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	697a      	ldr	r2, [r7, #20]
 800ae8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ae92:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800ae96:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ae98:	2300      	movs	r3, #0
}
 800ae9a:	4618      	mov	r0, r3
 800ae9c:	371c      	adds	r7, #28
 800ae9e:	46bd      	mov	sp, r7
 800aea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea4:	4770      	bx	lr
 800aea6:	bf00      	nop
 800aea8:	4f54300a 	.word	0x4f54300a

0800aeac <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800aeac:	b480      	push	{r7}
 800aeae:	b085      	sub	sp, #20
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800aeb4:	2300      	movs	r3, #0
 800aeb6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	3301      	adds	r3, #1
 800aebc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	4a13      	ldr	r2, [pc, #76]	; (800af10 <USB_CoreReset+0x64>)
 800aec2:	4293      	cmp	r3, r2
 800aec4:	d901      	bls.n	800aeca <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800aec6:	2303      	movs	r3, #3
 800aec8:	e01b      	b.n	800af02 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	691b      	ldr	r3, [r3, #16]
 800aece:	2b00      	cmp	r3, #0
 800aed0:	daf2      	bge.n	800aeb8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800aed2:	2300      	movs	r3, #0
 800aed4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	691b      	ldr	r3, [r3, #16]
 800aeda:	f043 0201 	orr.w	r2, r3, #1
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	3301      	adds	r3, #1
 800aee6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	4a09      	ldr	r2, [pc, #36]	; (800af10 <USB_CoreReset+0x64>)
 800aeec:	4293      	cmp	r3, r2
 800aeee:	d901      	bls.n	800aef4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800aef0:	2303      	movs	r3, #3
 800aef2:	e006      	b.n	800af02 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	691b      	ldr	r3, [r3, #16]
 800aef8:	f003 0301 	and.w	r3, r3, #1
 800aefc:	2b01      	cmp	r3, #1
 800aefe:	d0f0      	beq.n	800aee2 <USB_CoreReset+0x36>

  return HAL_OK;
 800af00:	2300      	movs	r3, #0
}
 800af02:	4618      	mov	r0, r3
 800af04:	3714      	adds	r7, #20
 800af06:	46bd      	mov	sp, r7
 800af08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af0c:	4770      	bx	lr
 800af0e:	bf00      	nop
 800af10:	00030d40 	.word	0x00030d40

0800af14 <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800af14:	b580      	push	{r7, lr}
 800af16:	b084      	sub	sp, #16
 800af18:	af00      	add	r7, sp, #0
 800af1a:	6078      	str	r0, [r7, #4]
 800af1c:	460b      	mov	r3, r1
 800af1e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 800af20:	2018      	movs	r0, #24
 800af22:	f002 fa99 	bl	800d458 <USBD_static_malloc>
 800af26:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d109      	bne.n	800af42 <USBD_CUSTOM_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	32b0      	adds	r2, #176	; 0xb0
 800af38:	2100      	movs	r1, #0
 800af3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800af3e:	2302      	movs	r3, #2
 800af40:	e08a      	b.n	800b058 <USBD_CUSTOM_HID_Init+0x144>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	32b0      	adds	r2, #176	; 0xb0
 800af4c:	68f9      	ldr	r1, [r7, #12]
 800af4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	32b0      	adds	r2, #176	; 0xb0
 800af5c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	7c1b      	ldrb	r3, [r3, #16]
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d11b      	bne.n	800afa6 <USBD_CUSTOM_HID_Init+0x92>
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 800af6e:	4b3c      	ldr	r3, [pc, #240]	; (800b060 <USBD_CUSTOM_HID_Init+0x14c>)
 800af70:	781b      	ldrb	r3, [r3, #0]
 800af72:	f003 020f 	and.w	r2, r3, #15
 800af76:	6879      	ldr	r1, [r7, #4]
 800af78:	4613      	mov	r3, r2
 800af7a:	009b      	lsls	r3, r3, #2
 800af7c:	4413      	add	r3, r2
 800af7e:	009b      	lsls	r3, r3, #2
 800af80:	440b      	add	r3, r1
 800af82:	3326      	adds	r3, #38	; 0x26
 800af84:	2205      	movs	r2, #5
 800af86:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 800af88:	4b36      	ldr	r3, [pc, #216]	; (800b064 <USBD_CUSTOM_HID_Init+0x150>)
 800af8a:	781b      	ldrb	r3, [r3, #0]
 800af8c:	f003 020f 	and.w	r2, r3, #15
 800af90:	6879      	ldr	r1, [r7, #4]
 800af92:	4613      	mov	r3, r2
 800af94:	009b      	lsls	r3, r3, #2
 800af96:	4413      	add	r3, r2
 800af98:	009b      	lsls	r3, r3, #2
 800af9a:	440b      	add	r3, r1
 800af9c:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 800afa0:	2205      	movs	r2, #5
 800afa2:	801a      	strh	r2, [r3, #0]
 800afa4:	e01a      	b.n	800afdc <USBD_CUSTOM_HID_Init+0xc8>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 800afa6:	4b2e      	ldr	r3, [pc, #184]	; (800b060 <USBD_CUSTOM_HID_Init+0x14c>)
 800afa8:	781b      	ldrb	r3, [r3, #0]
 800afaa:	f003 020f 	and.w	r2, r3, #15
 800afae:	6879      	ldr	r1, [r7, #4]
 800afb0:	4613      	mov	r3, r2
 800afb2:	009b      	lsls	r3, r3, #2
 800afb4:	4413      	add	r3, r2
 800afb6:	009b      	lsls	r3, r3, #2
 800afb8:	440b      	add	r3, r1
 800afba:	3326      	adds	r3, #38	; 0x26
 800afbc:	2205      	movs	r2, #5
 800afbe:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 800afc0:	4b28      	ldr	r3, [pc, #160]	; (800b064 <USBD_CUSTOM_HID_Init+0x150>)
 800afc2:	781b      	ldrb	r3, [r3, #0]
 800afc4:	f003 020f 	and.w	r2, r3, #15
 800afc8:	6879      	ldr	r1, [r7, #4]
 800afca:	4613      	mov	r3, r2
 800afcc:	009b      	lsls	r3, r3, #2
 800afce:	4413      	add	r3, r2
 800afd0:	009b      	lsls	r3, r3, #2
 800afd2:	440b      	add	r3, r1
 800afd4:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 800afd8:	2205      	movs	r2, #5
 800afda:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDInEpAdd, USBD_EP_TYPE_INTR,
 800afdc:	4b20      	ldr	r3, [pc, #128]	; (800b060 <USBD_CUSTOM_HID_Init+0x14c>)
 800afde:	7819      	ldrb	r1, [r3, #0]
 800afe0:	2302      	movs	r3, #2
 800afe2:	2203      	movs	r2, #3
 800afe4:	6878      	ldr	r0, [r7, #4]
 800afe6:	f002 f926 	bl	800d236 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 1U;
 800afea:	4b1d      	ldr	r3, [pc, #116]	; (800b060 <USBD_CUSTOM_HID_Init+0x14c>)
 800afec:	781b      	ldrb	r3, [r3, #0]
 800afee:	f003 020f 	and.w	r2, r3, #15
 800aff2:	6879      	ldr	r1, [r7, #4]
 800aff4:	4613      	mov	r3, r2
 800aff6:	009b      	lsls	r3, r3, #2
 800aff8:	4413      	add	r3, r2
 800affa:	009b      	lsls	r3, r3, #2
 800affc:	440b      	add	r3, r1
 800affe:	3324      	adds	r3, #36	; 0x24
 800b000:	2201      	movs	r2, #1
 800b002:	801a      	strh	r2, [r3, #0]

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDOutEpAdd, USBD_EP_TYPE_INTR,
 800b004:	4b17      	ldr	r3, [pc, #92]	; (800b064 <USBD_CUSTOM_HID_Init+0x150>)
 800b006:	7819      	ldrb	r1, [r3, #0]
 800b008:	2302      	movs	r3, #2
 800b00a:	2203      	movs	r2, #3
 800b00c:	6878      	ldr	r0, [r7, #4]
 800b00e:	f002 f912 	bl	800d236 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 1U;
 800b012:	4b14      	ldr	r3, [pc, #80]	; (800b064 <USBD_CUSTOM_HID_Init+0x150>)
 800b014:	781b      	ldrb	r3, [r3, #0]
 800b016:	f003 020f 	and.w	r2, r3, #15
 800b01a:	6879      	ldr	r1, [r7, #4]
 800b01c:	4613      	mov	r3, r2
 800b01e:	009b      	lsls	r3, r3, #2
 800b020:	4413      	add	r3, r2
 800b022:	009b      	lsls	r3, r3, #2
 800b024:	440b      	add	r3, r1
 800b026:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b02a:	2201      	movs	r2, #1
 800b02c:	801a      	strh	r2, [r3, #0]

  hhid->state = CUSTOM_HID_IDLE;
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	2200      	movs	r2, #0
 800b032:	751a      	strb	r2, [r3, #20]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b03a:	687a      	ldr	r2, [r7, #4]
 800b03c:	33b0      	adds	r3, #176	; 0xb0
 800b03e:	009b      	lsls	r3, r3, #2
 800b040:	4413      	add	r3, r2
 800b042:	685b      	ldr	r3, [r3, #4]
 800b044:	685b      	ldr	r3, [r3, #4]
 800b046:	4798      	blx	r3

  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 800b048:	4b06      	ldr	r3, [pc, #24]	; (800b064 <USBD_CUSTOM_HID_Init+0x150>)
 800b04a:	7819      	ldrb	r1, [r3, #0]
 800b04c:	68fa      	ldr	r2, [r7, #12]
 800b04e:	2302      	movs	r3, #2
 800b050:	6878      	ldr	r0, [r7, #4]
 800b052:	f002 f9df 	bl	800d414 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 800b056:	2300      	movs	r3, #0
}
 800b058:	4618      	mov	r0, r3
 800b05a:	3710      	adds	r7, #16
 800b05c:	46bd      	mov	sp, r7
 800b05e:	bd80      	pop	{r7, pc}
 800b060:	200000ca 	.word	0x200000ca
 800b064:	200000cb 	.word	0x200000cb

0800b068 <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b068:	b580      	push	{r7, lr}
 800b06a:	b082      	sub	sp, #8
 800b06c:	af00      	add	r7, sp, #0
 800b06e:	6078      	str	r0, [r7, #4]
 800b070:	460b      	mov	r3, r1
 800b072:	70fb      	strb	r3, [r7, #3]
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDInEpAdd);
 800b074:	4b37      	ldr	r3, [pc, #220]	; (800b154 <USBD_CUSTOM_HID_DeInit+0xec>)
 800b076:	781b      	ldrb	r3, [r3, #0]
 800b078:	4619      	mov	r1, r3
 800b07a:	6878      	ldr	r0, [r7, #4]
 800b07c:	f002 f901 	bl	800d282 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 0U;
 800b080:	4b34      	ldr	r3, [pc, #208]	; (800b154 <USBD_CUSTOM_HID_DeInit+0xec>)
 800b082:	781b      	ldrb	r3, [r3, #0]
 800b084:	f003 020f 	and.w	r2, r3, #15
 800b088:	6879      	ldr	r1, [r7, #4]
 800b08a:	4613      	mov	r3, r2
 800b08c:	009b      	lsls	r3, r3, #2
 800b08e:	4413      	add	r3, r2
 800b090:	009b      	lsls	r3, r3, #2
 800b092:	440b      	add	r3, r1
 800b094:	3324      	adds	r3, #36	; 0x24
 800b096:	2200      	movs	r2, #0
 800b098:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = 0U;
 800b09a:	4b2e      	ldr	r3, [pc, #184]	; (800b154 <USBD_CUSTOM_HID_DeInit+0xec>)
 800b09c:	781b      	ldrb	r3, [r3, #0]
 800b09e:	f003 020f 	and.w	r2, r3, #15
 800b0a2:	6879      	ldr	r1, [r7, #4]
 800b0a4:	4613      	mov	r3, r2
 800b0a6:	009b      	lsls	r3, r3, #2
 800b0a8:	4413      	add	r3, r2
 800b0aa:	009b      	lsls	r3, r3, #2
 800b0ac:	440b      	add	r3, r1
 800b0ae:	3326      	adds	r3, #38	; 0x26
 800b0b0:	2200      	movs	r2, #0
 800b0b2:	801a      	strh	r2, [r3, #0]

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDOutEpAdd);
 800b0b4:	4b28      	ldr	r3, [pc, #160]	; (800b158 <USBD_CUSTOM_HID_DeInit+0xf0>)
 800b0b6:	781b      	ldrb	r3, [r3, #0]
 800b0b8:	4619      	mov	r1, r3
 800b0ba:	6878      	ldr	r0, [r7, #4]
 800b0bc:	f002 f8e1 	bl	800d282 <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 0U;
 800b0c0:	4b25      	ldr	r3, [pc, #148]	; (800b158 <USBD_CUSTOM_HID_DeInit+0xf0>)
 800b0c2:	781b      	ldrb	r3, [r3, #0]
 800b0c4:	f003 020f 	and.w	r2, r3, #15
 800b0c8:	6879      	ldr	r1, [r7, #4]
 800b0ca:	4613      	mov	r3, r2
 800b0cc:	009b      	lsls	r3, r3, #2
 800b0ce:	4413      	add	r3, r2
 800b0d0:	009b      	lsls	r3, r3, #2
 800b0d2:	440b      	add	r3, r1
 800b0d4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b0d8:	2200      	movs	r2, #0
 800b0da:	801a      	strh	r2, [r3, #0]
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = 0U;
 800b0dc:	4b1e      	ldr	r3, [pc, #120]	; (800b158 <USBD_CUSTOM_HID_DeInit+0xf0>)
 800b0de:	781b      	ldrb	r3, [r3, #0]
 800b0e0:	f003 020f 	and.w	r2, r3, #15
 800b0e4:	6879      	ldr	r1, [r7, #4]
 800b0e6:	4613      	mov	r3, r2
 800b0e8:	009b      	lsls	r3, r3, #2
 800b0ea:	4413      	add	r3, r2
 800b0ec:	009b      	lsls	r3, r3, #2
 800b0ee:	440b      	add	r3, r1
 800b0f0:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 800b0f4:	2200      	movs	r2, #0
 800b0f6:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	32b0      	adds	r2, #176	; 0xb0
 800b102:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b106:	2b00      	cmp	r3, #0
 800b108:	d01f      	beq.n	800b14a <USBD_CUSTOM_HID_DeInit+0xe2>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b110:	687a      	ldr	r2, [r7, #4]
 800b112:	33b0      	adds	r3, #176	; 0xb0
 800b114:	009b      	lsls	r3, r3, #2
 800b116:	4413      	add	r3, r2
 800b118:	685b      	ldr	r3, [r3, #4]
 800b11a:	689b      	ldr	r3, [r3, #8]
 800b11c:	4798      	blx	r3
    USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	32b0      	adds	r2, #176	; 0xb0
 800b128:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b12c:	4618      	mov	r0, r3
 800b12e:	f002 f9a1 	bl	800d474 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	32b0      	adds	r2, #176	; 0xb0
 800b13c:	2100      	movs	r1, #0
 800b13e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	2200      	movs	r2, #0
 800b146:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800b14a:	2300      	movs	r3, #0
}
 800b14c:	4618      	mov	r0, r3
 800b14e:	3708      	adds	r7, #8
 800b150:	46bd      	mov	sp, r7
 800b152:	bd80      	pop	{r7, pc}
 800b154:	200000ca 	.word	0x200000ca
 800b158:	200000cb 	.word	0x200000cb

0800b15c <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 800b15c:	b580      	push	{r7, lr}
 800b15e:	b088      	sub	sp, #32
 800b160:	af00      	add	r7, sp, #0
 800b162:	6078      	str	r0, [r7, #4]
 800b164:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	32b0      	adds	r2, #176	; 0xb0
 800b170:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b174:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 800b176:	2300      	movs	r3, #0
 800b178:	83fb      	strh	r3, [r7, #30]
  uint8_t  *pbuf = NULL;
 800b17a:	2300      	movs	r3, #0
 800b17c:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 800b17e:	2300      	movs	r3, #0
 800b180:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 800b182:	2300      	movs	r3, #0
 800b184:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
 800b186:	693b      	ldr	r3, [r7, #16]
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d101      	bne.n	800b190 <USBD_CUSTOM_HID_Setup+0x34>
  {
    return (uint8_t)USBD_FAIL;
 800b18c:	2303      	movs	r3, #3
 800b18e:	e0f8      	b.n	800b382 <USBD_CUSTOM_HID_Setup+0x226>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b190:	683b      	ldr	r3, [r7, #0]
 800b192:	781b      	ldrb	r3, [r3, #0]
 800b194:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d056      	beq.n	800b24a <USBD_CUSTOM_HID_Setup+0xee>
 800b19c:	2b20      	cmp	r3, #32
 800b19e:	f040 80e8 	bne.w	800b372 <USBD_CUSTOM_HID_Setup+0x216>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 800b1a2:	683b      	ldr	r3, [r7, #0]
 800b1a4:	785b      	ldrb	r3, [r3, #1]
 800b1a6:	3b02      	subs	r3, #2
 800b1a8:	2b09      	cmp	r3, #9
 800b1aa:	d846      	bhi.n	800b23a <USBD_CUSTOM_HID_Setup+0xde>
 800b1ac:	a201      	add	r2, pc, #4	; (adr r2, 800b1b4 <USBD_CUSTOM_HID_Setup+0x58>)
 800b1ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1b2:	bf00      	nop
 800b1b4:	0800b20d 	.word	0x0800b20d
 800b1b8:	0800b1eb 	.word	0x0800b1eb
 800b1bc:	0800b23b 	.word	0x0800b23b
 800b1c0:	0800b23b 	.word	0x0800b23b
 800b1c4:	0800b23b 	.word	0x0800b23b
 800b1c8:	0800b23b 	.word	0x0800b23b
 800b1cc:	0800b23b 	.word	0x0800b23b
 800b1d0:	0800b21d 	.word	0x0800b21d
 800b1d4:	0800b1fb 	.word	0x0800b1fb
 800b1d8:	0800b1dd 	.word	0x0800b1dd
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 800b1dc:	683b      	ldr	r3, [r7, #0]
 800b1de:	885b      	ldrh	r3, [r3, #2]
 800b1e0:	b2db      	uxtb	r3, r3
 800b1e2:	461a      	mov	r2, r3
 800b1e4:	693b      	ldr	r3, [r7, #16]
 800b1e6:	605a      	str	r2, [r3, #4]
          break;
 800b1e8:	e02e      	b.n	800b248 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 800b1ea:	693b      	ldr	r3, [r7, #16]
 800b1ec:	3304      	adds	r3, #4
 800b1ee:	2201      	movs	r2, #1
 800b1f0:	4619      	mov	r1, r3
 800b1f2:	6878      	ldr	r0, [r7, #4]
 800b1f4:	f001 fc94 	bl	800cb20 <USBD_CtlSendData>
          break;
 800b1f8:	e026      	b.n	800b248 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800b1fa:	683b      	ldr	r3, [r7, #0]
 800b1fc:	885b      	ldrh	r3, [r3, #2]
 800b1fe:	0a1b      	lsrs	r3, r3, #8
 800b200:	b29b      	uxth	r3, r3
 800b202:	b2db      	uxtb	r3, r3
 800b204:	461a      	mov	r2, r3
 800b206:	693b      	ldr	r3, [r7, #16]
 800b208:	609a      	str	r2, [r3, #8]
          break;
 800b20a:	e01d      	b.n	800b248 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 800b20c:	693b      	ldr	r3, [r7, #16]
 800b20e:	3308      	adds	r3, #8
 800b210:	2201      	movs	r2, #1
 800b212:	4619      	mov	r1, r3
 800b214:	6878      	ldr	r0, [r7, #4]
 800b216:	f001 fc83 	bl	800cb20 <USBD_CtlSendData>
          break;
 800b21a:	e015      	b.n	800b248 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_SET_REPORT:
          hhid->IsReportAvailable = 1U;
 800b21c:	693b      	ldr	r3, [r7, #16]
 800b21e:	2201      	movs	r2, #1
 800b220:	611a      	str	r2, [r3, #16]
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 800b222:	6939      	ldr	r1, [r7, #16]
                                  MIN(req->wLength, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE));
 800b224:	683b      	ldr	r3, [r7, #0]
 800b226:	88db      	ldrh	r3, [r3, #6]
 800b228:	2b02      	cmp	r3, #2
 800b22a:	bf28      	it	cs
 800b22c:	2302      	movcs	r3, #2
 800b22e:	b29b      	uxth	r3, r3
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 800b230:	461a      	mov	r2, r3
 800b232:	6878      	ldr	r0, [r7, #4]
 800b234:	f001 fca0 	bl	800cb78 <USBD_CtlPrepareRx>
          break;
 800b238:	e006      	b.n	800b248 <USBD_CUSTOM_HID_Setup+0xec>

        default:
          USBD_CtlError(pdev, req);
 800b23a:	6839      	ldr	r1, [r7, #0]
 800b23c:	6878      	ldr	r0, [r7, #4]
 800b23e:	f001 fbfe 	bl	800ca3e <USBD_CtlError>
          ret = USBD_FAIL;
 800b242:	2303      	movs	r3, #3
 800b244:	75fb      	strb	r3, [r7, #23]
          break;
 800b246:	bf00      	nop
      }
      break;
 800b248:	e09a      	b.n	800b380 <USBD_CUSTOM_HID_Setup+0x224>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b24a:	683b      	ldr	r3, [r7, #0]
 800b24c:	785b      	ldrb	r3, [r3, #1]
 800b24e:	2b0b      	cmp	r3, #11
 800b250:	f200 8086 	bhi.w	800b360 <USBD_CUSTOM_HID_Setup+0x204>
 800b254:	a201      	add	r2, pc, #4	; (adr r2, 800b25c <USBD_CUSTOM_HID_Setup+0x100>)
 800b256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b25a:	bf00      	nop
 800b25c:	0800b28d 	.word	0x0800b28d
 800b260:	0800b36f 	.word	0x0800b36f
 800b264:	0800b361 	.word	0x0800b361
 800b268:	0800b361 	.word	0x0800b361
 800b26c:	0800b361 	.word	0x0800b361
 800b270:	0800b361 	.word	0x0800b361
 800b274:	0800b2b7 	.word	0x0800b2b7
 800b278:	0800b361 	.word	0x0800b361
 800b27c:	0800b361 	.word	0x0800b361
 800b280:	0800b361 	.word	0x0800b361
 800b284:	0800b30f 	.word	0x0800b30f
 800b288:	0800b339 	.word	0x0800b339
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b292:	b2db      	uxtb	r3, r3
 800b294:	2b03      	cmp	r3, #3
 800b296:	d107      	bne.n	800b2a8 <USBD_CUSTOM_HID_Setup+0x14c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b298:	f107 030e 	add.w	r3, r7, #14
 800b29c:	2202      	movs	r2, #2
 800b29e:	4619      	mov	r1, r3
 800b2a0:	6878      	ldr	r0, [r7, #4]
 800b2a2:	f001 fc3d 	bl	800cb20 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b2a6:	e063      	b.n	800b370 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 800b2a8:	6839      	ldr	r1, [r7, #0]
 800b2aa:	6878      	ldr	r0, [r7, #4]
 800b2ac:	f001 fbc7 	bl	800ca3e <USBD_CtlError>
            ret = USBD_FAIL;
 800b2b0:	2303      	movs	r3, #3
 800b2b2:	75fb      	strb	r3, [r7, #23]
          break;
 800b2b4:	e05c      	b.n	800b370 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 800b2b6:	683b      	ldr	r3, [r7, #0]
 800b2b8:	885b      	ldrh	r3, [r3, #2]
 800b2ba:	0a1b      	lsrs	r3, r3, #8
 800b2bc:	b29b      	uxth	r3, r3
 800b2be:	2b22      	cmp	r3, #34	; 0x22
 800b2c0:	d110      	bne.n	800b2e4 <USBD_CUSTOM_HID_Setup+0x188>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 800b2c2:	683b      	ldr	r3, [r7, #0]
 800b2c4:	88db      	ldrh	r3, [r3, #6]
 800b2c6:	2b02      	cmp	r3, #2
 800b2c8:	bf28      	it	cs
 800b2ca:	2302      	movcs	r3, #2
 800b2cc:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->pReport;
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b2d4:	687a      	ldr	r2, [r7, #4]
 800b2d6:	33b0      	adds	r3, #176	; 0xb0
 800b2d8:	009b      	lsls	r3, r3, #2
 800b2da:	4413      	add	r3, r2
 800b2dc:	685b      	ldr	r3, [r3, #4]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	61bb      	str	r3, [r7, #24]
 800b2e2:	e00d      	b.n	800b300 <USBD_CUSTOM_HID_Setup+0x1a4>
          }
          else
          {
            if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 800b2e4:	683b      	ldr	r3, [r7, #0]
 800b2e6:	885b      	ldrh	r3, [r3, #2]
 800b2e8:	0a1b      	lsrs	r3, r3, #8
 800b2ea:	b29b      	uxth	r3, r3
 800b2ec:	2b21      	cmp	r3, #33	; 0x21
 800b2ee:	d107      	bne.n	800b300 <USBD_CUSTOM_HID_Setup+0x1a4>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 800b2f0:	4b26      	ldr	r3, [pc, #152]	; (800b38c <USBD_CUSTOM_HID_Setup+0x230>)
 800b2f2:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 800b2f4:	683b      	ldr	r3, [r7, #0]
 800b2f6:	88db      	ldrh	r3, [r3, #6]
 800b2f8:	2b09      	cmp	r3, #9
 800b2fa:	bf28      	it	cs
 800b2fc:	2309      	movcs	r3, #9
 800b2fe:	83fb      	strh	r3, [r7, #30]
            }
          }

          (void)USBD_CtlSendData(pdev, pbuf, len);
 800b300:	8bfb      	ldrh	r3, [r7, #30]
 800b302:	461a      	mov	r2, r3
 800b304:	69b9      	ldr	r1, [r7, #24]
 800b306:	6878      	ldr	r0, [r7, #4]
 800b308:	f001 fc0a 	bl	800cb20 <USBD_CtlSendData>
          break;
 800b30c:	e030      	b.n	800b370 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b314:	b2db      	uxtb	r3, r3
 800b316:	2b03      	cmp	r3, #3
 800b318:	d107      	bne.n	800b32a <USBD_CUSTOM_HID_Setup+0x1ce>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 800b31a:	693b      	ldr	r3, [r7, #16]
 800b31c:	330c      	adds	r3, #12
 800b31e:	2201      	movs	r2, #1
 800b320:	4619      	mov	r1, r3
 800b322:	6878      	ldr	r0, [r7, #4]
 800b324:	f001 fbfc 	bl	800cb20 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b328:	e022      	b.n	800b370 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 800b32a:	6839      	ldr	r1, [r7, #0]
 800b32c:	6878      	ldr	r0, [r7, #4]
 800b32e:	f001 fb86 	bl	800ca3e <USBD_CtlError>
            ret = USBD_FAIL;
 800b332:	2303      	movs	r3, #3
 800b334:	75fb      	strb	r3, [r7, #23]
          break;
 800b336:	e01b      	b.n	800b370 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b33e:	b2db      	uxtb	r3, r3
 800b340:	2b03      	cmp	r3, #3
 800b342:	d106      	bne.n	800b352 <USBD_CUSTOM_HID_Setup+0x1f6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 800b344:	683b      	ldr	r3, [r7, #0]
 800b346:	885b      	ldrh	r3, [r3, #2]
 800b348:	b2db      	uxtb	r3, r3
 800b34a:	461a      	mov	r2, r3
 800b34c:	693b      	ldr	r3, [r7, #16]
 800b34e:	60da      	str	r2, [r3, #12]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b350:	e00e      	b.n	800b370 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 800b352:	6839      	ldr	r1, [r7, #0]
 800b354:	6878      	ldr	r0, [r7, #4]
 800b356:	f001 fb72 	bl	800ca3e <USBD_CtlError>
            ret = USBD_FAIL;
 800b35a:	2303      	movs	r3, #3
 800b35c:	75fb      	strb	r3, [r7, #23]
          break;
 800b35e:	e007      	b.n	800b370 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800b360:	6839      	ldr	r1, [r7, #0]
 800b362:	6878      	ldr	r0, [r7, #4]
 800b364:	f001 fb6b 	bl	800ca3e <USBD_CtlError>
          ret = USBD_FAIL;
 800b368:	2303      	movs	r3, #3
 800b36a:	75fb      	strb	r3, [r7, #23]
          break;
 800b36c:	e000      	b.n	800b370 <USBD_CUSTOM_HID_Setup+0x214>
          break;
 800b36e:	bf00      	nop
      }
      break;
 800b370:	e006      	b.n	800b380 <USBD_CUSTOM_HID_Setup+0x224>

    default:
      USBD_CtlError(pdev, req);
 800b372:	6839      	ldr	r1, [r7, #0]
 800b374:	6878      	ldr	r0, [r7, #4]
 800b376:	f001 fb62 	bl	800ca3e <USBD_CtlError>
      ret = USBD_FAIL;
 800b37a:	2303      	movs	r3, #3
 800b37c:	75fb      	strb	r3, [r7, #23]
      break;
 800b37e:	bf00      	nop
  }
  return (uint8_t)ret;
 800b380:	7dfb      	ldrb	r3, [r7, #23]
}
 800b382:	4618      	mov	r0, r3
 800b384:	3720      	adds	r7, #32
 800b386:	46bd      	mov	sp, r7
 800b388:	bd80      	pop	{r7, pc}
 800b38a:	bf00      	nop
 800b38c:	200000b4 	.word	0x200000b4

0800b390 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 800b390:	b580      	push	{r7, lr}
 800b392:	b084      	sub	sp, #16
 800b394:	af00      	add	r7, sp, #0
 800b396:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 800b398:	2181      	movs	r1, #129	; 0x81
 800b39a:	4815      	ldr	r0, [pc, #84]	; (800b3f0 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 800b39c:	f000 fd17 	bl	800bdce <USBD_GetEpDesc>
 800b3a0:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 800b3a2:	2101      	movs	r1, #1
 800b3a4:	4812      	ldr	r0, [pc, #72]	; (800b3f0 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 800b3a6:	f000 fd12 	bl	800bdce <USBD_GetEpDesc>
 800b3aa:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d009      	beq.n	800b3c6 <USBD_CUSTOM_HID_GetFSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	2200      	movs	r2, #0
 800b3b6:	f042 0202 	orr.w	r2, r2, #2
 800b3ba:	711a      	strb	r2, [r3, #4]
 800b3bc:	2200      	movs	r2, #0
 800b3be:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	2205      	movs	r2, #5
 800b3c4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b3c6:	68bb      	ldr	r3, [r7, #8]
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d009      	beq.n	800b3e0 <USBD_CUSTOM_HID_GetFSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 800b3cc:	68bb      	ldr	r3, [r7, #8]
 800b3ce:	2200      	movs	r2, #0
 800b3d0:	f042 0202 	orr.w	r2, r2, #2
 800b3d4:	711a      	strb	r2, [r3, #4]
 800b3d6:	2200      	movs	r2, #0
 800b3d8:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 800b3da:	68bb      	ldr	r3, [r7, #8]
 800b3dc:	2205      	movs	r2, #5
 800b3de:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	2229      	movs	r2, #41	; 0x29
 800b3e4:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 800b3e6:	4b02      	ldr	r3, [pc, #8]	; (800b3f0 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
}
 800b3e8:	4618      	mov	r0, r3
 800b3ea:	3710      	adds	r7, #16
 800b3ec:	46bd      	mov	sp, r7
 800b3ee:	bd80      	pop	{r7, pc}
 800b3f0:	20000088 	.word	0x20000088

0800b3f4 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 800b3f4:	b580      	push	{r7, lr}
 800b3f6:	b084      	sub	sp, #16
 800b3f8:	af00      	add	r7, sp, #0
 800b3fa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 800b3fc:	2181      	movs	r1, #129	; 0x81
 800b3fe:	4815      	ldr	r0, [pc, #84]	; (800b454 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 800b400:	f000 fce5 	bl	800bdce <USBD_GetEpDesc>
 800b404:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 800b406:	2101      	movs	r1, #1
 800b408:	4812      	ldr	r0, [pc, #72]	; (800b454 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 800b40a:	f000 fce0 	bl	800bdce <USBD_GetEpDesc>
 800b40e:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	2b00      	cmp	r3, #0
 800b414:	d009      	beq.n	800b42a <USBD_CUSTOM_HID_GetHSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	2200      	movs	r2, #0
 800b41a:	f042 0202 	orr.w	r2, r2, #2
 800b41e:	711a      	strb	r2, [r3, #4]
 800b420:	2200      	movs	r2, #0
 800b422:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	2205      	movs	r2, #5
 800b428:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b42a:	68bb      	ldr	r3, [r7, #8]
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d009      	beq.n	800b444 <USBD_CUSTOM_HID_GetHSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 800b430:	68bb      	ldr	r3, [r7, #8]
 800b432:	2200      	movs	r2, #0
 800b434:	f042 0202 	orr.w	r2, r2, #2
 800b438:	711a      	strb	r2, [r3, #4]
 800b43a:	2200      	movs	r2, #0
 800b43c:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 800b43e:	68bb      	ldr	r3, [r7, #8]
 800b440:	2205      	movs	r2, #5
 800b442:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	2229      	movs	r2, #41	; 0x29
 800b448:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 800b44a:	4b02      	ldr	r3, [pc, #8]	; (800b454 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
}
 800b44c:	4618      	mov	r0, r3
 800b44e:	3710      	adds	r7, #16
 800b450:	46bd      	mov	sp, r7
 800b452:	bd80      	pop	{r7, pc}
 800b454:	20000088 	.word	0x20000088

0800b458 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b458:	b580      	push	{r7, lr}
 800b45a:	b084      	sub	sp, #16
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 800b460:	2181      	movs	r1, #129	; 0x81
 800b462:	4815      	ldr	r0, [pc, #84]	; (800b4b8 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 800b464:	f000 fcb3 	bl	800bdce <USBD_GetEpDesc>
 800b468:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 800b46a:	2101      	movs	r1, #1
 800b46c:	4812      	ldr	r0, [pc, #72]	; (800b4b8 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 800b46e:	f000 fcae 	bl	800bdce <USBD_GetEpDesc>
 800b472:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	2b00      	cmp	r3, #0
 800b478:	d009      	beq.n	800b48e <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	2200      	movs	r2, #0
 800b47e:	f042 0202 	orr.w	r2, r2, #2
 800b482:	711a      	strb	r2, [r3, #4]
 800b484:	2200      	movs	r2, #0
 800b486:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	2205      	movs	r2, #5
 800b48c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b48e:	68bb      	ldr	r3, [r7, #8]
 800b490:	2b00      	cmp	r3, #0
 800b492:	d009      	beq.n	800b4a8 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 800b494:	68bb      	ldr	r3, [r7, #8]
 800b496:	2200      	movs	r2, #0
 800b498:	f042 0202 	orr.w	r2, r2, #2
 800b49c:	711a      	strb	r2, [r3, #4]
 800b49e:	2200      	movs	r2, #0
 800b4a0:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 800b4a2:	68bb      	ldr	r3, [r7, #8]
 800b4a4:	2205      	movs	r2, #5
 800b4a6:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	2229      	movs	r2, #41	; 0x29
 800b4ac:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 800b4ae:	4b02      	ldr	r3, [pc, #8]	; (800b4b8 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
}
 800b4b0:	4618      	mov	r0, r3
 800b4b2:	3710      	adds	r7, #16
 800b4b4:	46bd      	mov	sp, r7
 800b4b6:	bd80      	pop	{r7, pc}
 800b4b8:	20000088 	.word	0x20000088

0800b4bc <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b4bc:	b480      	push	{r7}
 800b4be:	b083      	sub	sp, #12
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	6078      	str	r0, [r7, #4]
 800b4c4:	460b      	mov	r3, r1
 800b4c6:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = CUSTOM_HID_IDLE;
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	32b0      	adds	r2, #176	; 0xb0
 800b4d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4d6:	2200      	movs	r2, #0
 800b4d8:	751a      	strb	r2, [r3, #20]

  return (uint8_t)USBD_OK;
 800b4da:	2300      	movs	r3, #0
}
 800b4dc:	4618      	mov	r0, r3
 800b4de:	370c      	adds	r7, #12
 800b4e0:	46bd      	mov	sp, r7
 800b4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e6:	4770      	bx	lr

0800b4e8 <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b4e8:	b580      	push	{r7, lr}
 800b4ea:	b084      	sub	sp, #16
 800b4ec:	af00      	add	r7, sp, #0
 800b4ee:	6078      	str	r0, [r7, #4]
 800b4f0:	460b      	mov	r3, r1
 800b4f2:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	32b0      	adds	r2, #176	; 0xb0
 800b4fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b502:	2b00      	cmp	r3, #0
 800b504:	d101      	bne.n	800b50a <USBD_CUSTOM_HID_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b506:	2303      	movs	r3, #3
 800b508:	e017      	b.n	800b53a <USBD_CUSTOM_HID_DataOut+0x52>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	32b0      	adds	r2, #176	; 0xb0
 800b514:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b518:	60fb      	str	r3, [r7, #12]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b520:	687a      	ldr	r2, [r7, #4]
 800b522:	33b0      	adds	r3, #176	; 0xb0
 800b524:	009b      	lsls	r3, r3, #2
 800b526:	4413      	add	r3, r2
 800b528:	685b      	ldr	r3, [r3, #4]
 800b52a:	68db      	ldr	r3, [r3, #12]
 800b52c:	68fa      	ldr	r2, [r7, #12]
 800b52e:	7810      	ldrb	r0, [r2, #0]
 800b530:	68fa      	ldr	r2, [r7, #12]
 800b532:	7852      	ldrb	r2, [r2, #1]
 800b534:	4611      	mov	r1, r2
 800b536:	4798      	blx	r3
                                                                           hhid->Report_buf[1]);

  return (uint8_t)USBD_OK;
 800b538:	2300      	movs	r3, #0
}
 800b53a:	4618      	mov	r0, r3
 800b53c:	3710      	adds	r7, #16
 800b53e:	46bd      	mov	sp, r7
 800b540:	bd80      	pop	{r7, pc}
	...

0800b544 <USBD_CUSTOM_HID_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b544:	b580      	push	{r7, lr}
 800b546:	b084      	sub	sp, #16
 800b548:	af00      	add	r7, sp, #0
 800b54a:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	32b0      	adds	r2, #176	; 0xb0
 800b556:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d101      	bne.n	800b562 <USBD_CUSTOM_HID_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800b55e:	2303      	movs	r3, #3
 800b560:	e00f      	b.n	800b582 <USBD_CUSTOM_HID_ReceivePacket+0x3e>
#ifdef USE_USBD_COMPOSITE
  /* Get OUT Endpoint address allocated for this class instance */
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	32b0      	adds	r2, #176	; 0xb0
 800b56c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b570:	60fb      	str	r3, [r7, #12]

  /* Resume USB Out process */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 800b572:	4b06      	ldr	r3, [pc, #24]	; (800b58c <USBD_CUSTOM_HID_ReceivePacket+0x48>)
 800b574:	7819      	ldrb	r1, [r3, #0]
 800b576:	68fa      	ldr	r2, [r7, #12]
 800b578:	2302      	movs	r3, #2
 800b57a:	6878      	ldr	r0, [r7, #4]
 800b57c:	f001 ff4a 	bl	800d414 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 800b580:	2300      	movs	r3, #0
}
 800b582:	4618      	mov	r0, r3
 800b584:	3710      	adds	r7, #16
 800b586:	46bd      	mov	sp, r7
 800b588:	bd80      	pop	{r7, pc}
 800b58a:	bf00      	nop
 800b58c:	200000cb 	.word	0x200000cb

0800b590 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b590:	b580      	push	{r7, lr}
 800b592:	b084      	sub	sp, #16
 800b594:	af00      	add	r7, sp, #0
 800b596:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	32b0      	adds	r2, #176	; 0xb0
 800b5a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5a6:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d101      	bne.n	800b5b2 <USBD_CUSTOM_HID_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b5ae:	2303      	movs	r3, #3
 800b5b0:	e016      	b.n	800b5e0 <USBD_CUSTOM_HID_EP0_RxReady+0x50>
  }

  if (hhid->IsReportAvailable == 1U)
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	691b      	ldr	r3, [r3, #16]
 800b5b6:	2b01      	cmp	r3, #1
 800b5b8:	d111      	bne.n	800b5de <USBD_CUSTOM_HID_EP0_RxReady+0x4e>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b5c0:	687a      	ldr	r2, [r7, #4]
 800b5c2:	33b0      	adds	r3, #176	; 0xb0
 800b5c4:	009b      	lsls	r3, r3, #2
 800b5c6:	4413      	add	r3, r2
 800b5c8:	685b      	ldr	r3, [r3, #4]
 800b5ca:	68db      	ldr	r3, [r3, #12]
 800b5cc:	68fa      	ldr	r2, [r7, #12]
 800b5ce:	7810      	ldrb	r0, [r2, #0]
 800b5d0:	68fa      	ldr	r2, [r7, #12]
 800b5d2:	7852      	ldrb	r2, [r2, #1]
 800b5d4:	4611      	mov	r1, r2
 800b5d6:	4798      	blx	r3
                                                                             hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	2200      	movs	r2, #0
 800b5dc:	611a      	str	r2, [r3, #16]
  }

  return (uint8_t)USBD_OK;
 800b5de:	2300      	movs	r3, #0
}
 800b5e0:	4618      	mov	r0, r3
 800b5e2:	3710      	adds	r7, #16
 800b5e4:	46bd      	mov	sp, r7
 800b5e6:	bd80      	pop	{r7, pc}

0800b5e8 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 800b5e8:	b480      	push	{r7}
 800b5ea:	b083      	sub	sp, #12
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	220a      	movs	r2, #10
 800b5f4:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 800b5f6:	4b03      	ldr	r3, [pc, #12]	; (800b604 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 800b5f8:	4618      	mov	r0, r3
 800b5fa:	370c      	adds	r7, #12
 800b5fc:	46bd      	mov	sp, r7
 800b5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b602:	4770      	bx	lr
 800b604:	200000c0 	.word	0x200000c0

0800b608 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 800b608:	b480      	push	{r7}
 800b60a:	b083      	sub	sp, #12
 800b60c:	af00      	add	r7, sp, #0
 800b60e:	6078      	str	r0, [r7, #4]
 800b610:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b612:	683b      	ldr	r3, [r7, #0]
 800b614:	2b00      	cmp	r3, #0
 800b616:	d101      	bne.n	800b61c <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b618:	2303      	movs	r3, #3
 800b61a:	e009      	b.n	800b630 <USBD_CUSTOM_HID_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b622:	687a      	ldr	r2, [r7, #4]
 800b624:	33b0      	adds	r3, #176	; 0xb0
 800b626:	009b      	lsls	r3, r3, #2
 800b628:	4413      	add	r3, r2
 800b62a:	683a      	ldr	r2, [r7, #0]
 800b62c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800b62e:	2300      	movs	r3, #0
}
 800b630:	4618      	mov	r0, r3
 800b632:	370c      	adds	r7, #12
 800b634:	46bd      	mov	sp, r7
 800b636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b63a:	4770      	bx	lr

0800b63c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b63c:	b580      	push	{r7, lr}
 800b63e:	b086      	sub	sp, #24
 800b640:	af00      	add	r7, sp, #0
 800b642:	60f8      	str	r0, [r7, #12]
 800b644:	60b9      	str	r1, [r7, #8]
 800b646:	4613      	mov	r3, r2
 800b648:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d101      	bne.n	800b654 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b650:	2303      	movs	r3, #3
 800b652:	e01f      	b.n	800b694 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	2200      	movs	r2, #0
 800b658:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	2200      	movs	r2, #0
 800b660:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	2200      	movs	r2, #0
 800b668:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b66c:	68bb      	ldr	r3, [r7, #8]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d003      	beq.n	800b67a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	68ba      	ldr	r2, [r7, #8]
 800b676:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	2201      	movs	r2, #1
 800b67e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	79fa      	ldrb	r2, [r7, #7]
 800b686:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b688:	68f8      	ldr	r0, [r7, #12]
 800b68a:	f001 fd6d 	bl	800d168 <USBD_LL_Init>
 800b68e:	4603      	mov	r3, r0
 800b690:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b692:	7dfb      	ldrb	r3, [r7, #23]
}
 800b694:	4618      	mov	r0, r3
 800b696:	3718      	adds	r7, #24
 800b698:	46bd      	mov	sp, r7
 800b69a:	bd80      	pop	{r7, pc}

0800b69c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b69c:	b580      	push	{r7, lr}
 800b69e:	b084      	sub	sp, #16
 800b6a0:	af00      	add	r7, sp, #0
 800b6a2:	6078      	str	r0, [r7, #4]
 800b6a4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b6a6:	2300      	movs	r3, #0
 800b6a8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b6aa:	683b      	ldr	r3, [r7, #0]
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d101      	bne.n	800b6b4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b6b0:	2303      	movs	r3, #3
 800b6b2:	e025      	b.n	800b700 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	683a      	ldr	r2, [r7, #0]
 800b6b8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	32ae      	adds	r2, #174	; 0xae
 800b6c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d00f      	beq.n	800b6f0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	32ae      	adds	r2, #174	; 0xae
 800b6da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6e0:	f107 020e 	add.w	r2, r7, #14
 800b6e4:	4610      	mov	r0, r2
 800b6e6:	4798      	blx	r3
 800b6e8:	4602      	mov	r2, r0
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800b6f6:	1c5a      	adds	r2, r3, #1
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800b6fe:	2300      	movs	r3, #0
}
 800b700:	4618      	mov	r0, r3
 800b702:	3710      	adds	r7, #16
 800b704:	46bd      	mov	sp, r7
 800b706:	bd80      	pop	{r7, pc}

0800b708 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b708:	b580      	push	{r7, lr}
 800b70a:	b082      	sub	sp, #8
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b710:	6878      	ldr	r0, [r7, #4]
 800b712:	f001 fd75 	bl	800d200 <USBD_LL_Start>
 800b716:	4603      	mov	r3, r0
}
 800b718:	4618      	mov	r0, r3
 800b71a:	3708      	adds	r7, #8
 800b71c:	46bd      	mov	sp, r7
 800b71e:	bd80      	pop	{r7, pc}

0800b720 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800b720:	b480      	push	{r7}
 800b722:	b083      	sub	sp, #12
 800b724:	af00      	add	r7, sp, #0
 800b726:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b728:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800b72a:	4618      	mov	r0, r3
 800b72c:	370c      	adds	r7, #12
 800b72e:	46bd      	mov	sp, r7
 800b730:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b734:	4770      	bx	lr

0800b736 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b736:	b580      	push	{r7, lr}
 800b738:	b084      	sub	sp, #16
 800b73a:	af00      	add	r7, sp, #0
 800b73c:	6078      	str	r0, [r7, #4]
 800b73e:	460b      	mov	r3, r1
 800b740:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b742:	2300      	movs	r3, #0
 800b744:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d009      	beq.n	800b764 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	78fa      	ldrb	r2, [r7, #3]
 800b75a:	4611      	mov	r1, r2
 800b75c:	6878      	ldr	r0, [r7, #4]
 800b75e:	4798      	blx	r3
 800b760:	4603      	mov	r3, r0
 800b762:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b764:	7bfb      	ldrb	r3, [r7, #15]
}
 800b766:	4618      	mov	r0, r3
 800b768:	3710      	adds	r7, #16
 800b76a:	46bd      	mov	sp, r7
 800b76c:	bd80      	pop	{r7, pc}

0800b76e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b76e:	b580      	push	{r7, lr}
 800b770:	b084      	sub	sp, #16
 800b772:	af00      	add	r7, sp, #0
 800b774:	6078      	str	r0, [r7, #4]
 800b776:	460b      	mov	r3, r1
 800b778:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b77a:	2300      	movs	r3, #0
 800b77c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b784:	685b      	ldr	r3, [r3, #4]
 800b786:	78fa      	ldrb	r2, [r7, #3]
 800b788:	4611      	mov	r1, r2
 800b78a:	6878      	ldr	r0, [r7, #4]
 800b78c:	4798      	blx	r3
 800b78e:	4603      	mov	r3, r0
 800b790:	2b00      	cmp	r3, #0
 800b792:	d001      	beq.n	800b798 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800b794:	2303      	movs	r3, #3
 800b796:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b798:	7bfb      	ldrb	r3, [r7, #15]
}
 800b79a:	4618      	mov	r0, r3
 800b79c:	3710      	adds	r7, #16
 800b79e:	46bd      	mov	sp, r7
 800b7a0:	bd80      	pop	{r7, pc}

0800b7a2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b7a2:	b580      	push	{r7, lr}
 800b7a4:	b084      	sub	sp, #16
 800b7a6:	af00      	add	r7, sp, #0
 800b7a8:	6078      	str	r0, [r7, #4]
 800b7aa:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b7b2:	6839      	ldr	r1, [r7, #0]
 800b7b4:	4618      	mov	r0, r3
 800b7b6:	f001 f908 	bl	800c9ca <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	2201      	movs	r2, #1
 800b7be:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800b7c8:	461a      	mov	r2, r3
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b7d6:	f003 031f 	and.w	r3, r3, #31
 800b7da:	2b02      	cmp	r3, #2
 800b7dc:	d01a      	beq.n	800b814 <USBD_LL_SetupStage+0x72>
 800b7de:	2b02      	cmp	r3, #2
 800b7e0:	d822      	bhi.n	800b828 <USBD_LL_SetupStage+0x86>
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d002      	beq.n	800b7ec <USBD_LL_SetupStage+0x4a>
 800b7e6:	2b01      	cmp	r3, #1
 800b7e8:	d00a      	beq.n	800b800 <USBD_LL_SetupStage+0x5e>
 800b7ea:	e01d      	b.n	800b828 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b7f2:	4619      	mov	r1, r3
 800b7f4:	6878      	ldr	r0, [r7, #4]
 800b7f6:	f000 fb5f 	bl	800beb8 <USBD_StdDevReq>
 800b7fa:	4603      	mov	r3, r0
 800b7fc:	73fb      	strb	r3, [r7, #15]
      break;
 800b7fe:	e020      	b.n	800b842 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b806:	4619      	mov	r1, r3
 800b808:	6878      	ldr	r0, [r7, #4]
 800b80a:	f000 fbc7 	bl	800bf9c <USBD_StdItfReq>
 800b80e:	4603      	mov	r3, r0
 800b810:	73fb      	strb	r3, [r7, #15]
      break;
 800b812:	e016      	b.n	800b842 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b81a:	4619      	mov	r1, r3
 800b81c:	6878      	ldr	r0, [r7, #4]
 800b81e:	f000 fc29 	bl	800c074 <USBD_StdEPReq>
 800b822:	4603      	mov	r3, r0
 800b824:	73fb      	strb	r3, [r7, #15]
      break;
 800b826:	e00c      	b.n	800b842 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b82e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b832:	b2db      	uxtb	r3, r3
 800b834:	4619      	mov	r1, r3
 800b836:	6878      	ldr	r0, [r7, #4]
 800b838:	f001 fd42 	bl	800d2c0 <USBD_LL_StallEP>
 800b83c:	4603      	mov	r3, r0
 800b83e:	73fb      	strb	r3, [r7, #15]
      break;
 800b840:	bf00      	nop
  }

  return ret;
 800b842:	7bfb      	ldrb	r3, [r7, #15]
}
 800b844:	4618      	mov	r0, r3
 800b846:	3710      	adds	r7, #16
 800b848:	46bd      	mov	sp, r7
 800b84a:	bd80      	pop	{r7, pc}

0800b84c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b84c:	b580      	push	{r7, lr}
 800b84e:	b086      	sub	sp, #24
 800b850:	af00      	add	r7, sp, #0
 800b852:	60f8      	str	r0, [r7, #12]
 800b854:	460b      	mov	r3, r1
 800b856:	607a      	str	r2, [r7, #4]
 800b858:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800b85a:	2300      	movs	r3, #0
 800b85c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800b85e:	7afb      	ldrb	r3, [r7, #11]
 800b860:	2b00      	cmp	r3, #0
 800b862:	d16e      	bne.n	800b942 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b86a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b872:	2b03      	cmp	r3, #3
 800b874:	f040 8098 	bne.w	800b9a8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800b878:	693b      	ldr	r3, [r7, #16]
 800b87a:	689a      	ldr	r2, [r3, #8]
 800b87c:	693b      	ldr	r3, [r7, #16]
 800b87e:	68db      	ldr	r3, [r3, #12]
 800b880:	429a      	cmp	r2, r3
 800b882:	d913      	bls.n	800b8ac <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800b884:	693b      	ldr	r3, [r7, #16]
 800b886:	689a      	ldr	r2, [r3, #8]
 800b888:	693b      	ldr	r3, [r7, #16]
 800b88a:	68db      	ldr	r3, [r3, #12]
 800b88c:	1ad2      	subs	r2, r2, r3
 800b88e:	693b      	ldr	r3, [r7, #16]
 800b890:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b892:	693b      	ldr	r3, [r7, #16]
 800b894:	68da      	ldr	r2, [r3, #12]
 800b896:	693b      	ldr	r3, [r7, #16]
 800b898:	689b      	ldr	r3, [r3, #8]
 800b89a:	4293      	cmp	r3, r2
 800b89c:	bf28      	it	cs
 800b89e:	4613      	movcs	r3, r2
 800b8a0:	461a      	mov	r2, r3
 800b8a2:	6879      	ldr	r1, [r7, #4]
 800b8a4:	68f8      	ldr	r0, [r7, #12]
 800b8a6:	f001 f984 	bl	800cbb2 <USBD_CtlContinueRx>
 800b8aa:	e07d      	b.n	800b9a8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b8b2:	f003 031f 	and.w	r3, r3, #31
 800b8b6:	2b02      	cmp	r3, #2
 800b8b8:	d014      	beq.n	800b8e4 <USBD_LL_DataOutStage+0x98>
 800b8ba:	2b02      	cmp	r3, #2
 800b8bc:	d81d      	bhi.n	800b8fa <USBD_LL_DataOutStage+0xae>
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d002      	beq.n	800b8c8 <USBD_LL_DataOutStage+0x7c>
 800b8c2:	2b01      	cmp	r3, #1
 800b8c4:	d003      	beq.n	800b8ce <USBD_LL_DataOutStage+0x82>
 800b8c6:	e018      	b.n	800b8fa <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800b8c8:	2300      	movs	r3, #0
 800b8ca:	75bb      	strb	r3, [r7, #22]
            break;
 800b8cc:	e018      	b.n	800b900 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b8d4:	b2db      	uxtb	r3, r3
 800b8d6:	4619      	mov	r1, r3
 800b8d8:	68f8      	ldr	r0, [r7, #12]
 800b8da:	f000 fa5e 	bl	800bd9a <USBD_CoreFindIF>
 800b8de:	4603      	mov	r3, r0
 800b8e0:	75bb      	strb	r3, [r7, #22]
            break;
 800b8e2:	e00d      	b.n	800b900 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b8ea:	b2db      	uxtb	r3, r3
 800b8ec:	4619      	mov	r1, r3
 800b8ee:	68f8      	ldr	r0, [r7, #12]
 800b8f0:	f000 fa60 	bl	800bdb4 <USBD_CoreFindEP>
 800b8f4:	4603      	mov	r3, r0
 800b8f6:	75bb      	strb	r3, [r7, #22]
            break;
 800b8f8:	e002      	b.n	800b900 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800b8fa:	2300      	movs	r3, #0
 800b8fc:	75bb      	strb	r3, [r7, #22]
            break;
 800b8fe:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800b900:	7dbb      	ldrb	r3, [r7, #22]
 800b902:	2b00      	cmp	r3, #0
 800b904:	d119      	bne.n	800b93a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b90c:	b2db      	uxtb	r3, r3
 800b90e:	2b03      	cmp	r3, #3
 800b910:	d113      	bne.n	800b93a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800b912:	7dba      	ldrb	r2, [r7, #22]
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	32ae      	adds	r2, #174	; 0xae
 800b918:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b91c:	691b      	ldr	r3, [r3, #16]
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d00b      	beq.n	800b93a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800b922:	7dba      	ldrb	r2, [r7, #22]
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800b92a:	7dba      	ldrb	r2, [r7, #22]
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	32ae      	adds	r2, #174	; 0xae
 800b930:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b934:	691b      	ldr	r3, [r3, #16]
 800b936:	68f8      	ldr	r0, [r7, #12]
 800b938:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b93a:	68f8      	ldr	r0, [r7, #12]
 800b93c:	f001 f94a 	bl	800cbd4 <USBD_CtlSendStatus>
 800b940:	e032      	b.n	800b9a8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800b942:	7afb      	ldrb	r3, [r7, #11]
 800b944:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b948:	b2db      	uxtb	r3, r3
 800b94a:	4619      	mov	r1, r3
 800b94c:	68f8      	ldr	r0, [r7, #12]
 800b94e:	f000 fa31 	bl	800bdb4 <USBD_CoreFindEP>
 800b952:	4603      	mov	r3, r0
 800b954:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b956:	7dbb      	ldrb	r3, [r7, #22]
 800b958:	2bff      	cmp	r3, #255	; 0xff
 800b95a:	d025      	beq.n	800b9a8 <USBD_LL_DataOutStage+0x15c>
 800b95c:	7dbb      	ldrb	r3, [r7, #22]
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d122      	bne.n	800b9a8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b968:	b2db      	uxtb	r3, r3
 800b96a:	2b03      	cmp	r3, #3
 800b96c:	d117      	bne.n	800b99e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800b96e:	7dba      	ldrb	r2, [r7, #22]
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	32ae      	adds	r2, #174	; 0xae
 800b974:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b978:	699b      	ldr	r3, [r3, #24]
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d00f      	beq.n	800b99e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800b97e:	7dba      	ldrb	r2, [r7, #22]
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800b986:	7dba      	ldrb	r2, [r7, #22]
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	32ae      	adds	r2, #174	; 0xae
 800b98c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b990:	699b      	ldr	r3, [r3, #24]
 800b992:	7afa      	ldrb	r2, [r7, #11]
 800b994:	4611      	mov	r1, r2
 800b996:	68f8      	ldr	r0, [r7, #12]
 800b998:	4798      	blx	r3
 800b99a:	4603      	mov	r3, r0
 800b99c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800b99e:	7dfb      	ldrb	r3, [r7, #23]
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d001      	beq.n	800b9a8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800b9a4:	7dfb      	ldrb	r3, [r7, #23]
 800b9a6:	e000      	b.n	800b9aa <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800b9a8:	2300      	movs	r3, #0
}
 800b9aa:	4618      	mov	r0, r3
 800b9ac:	3718      	adds	r7, #24
 800b9ae:	46bd      	mov	sp, r7
 800b9b0:	bd80      	pop	{r7, pc}

0800b9b2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b9b2:	b580      	push	{r7, lr}
 800b9b4:	b086      	sub	sp, #24
 800b9b6:	af00      	add	r7, sp, #0
 800b9b8:	60f8      	str	r0, [r7, #12]
 800b9ba:	460b      	mov	r3, r1
 800b9bc:	607a      	str	r2, [r7, #4]
 800b9be:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800b9c0:	7afb      	ldrb	r3, [r7, #11]
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d16f      	bne.n	800baa6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	3314      	adds	r3, #20
 800b9ca:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b9d2:	2b02      	cmp	r3, #2
 800b9d4:	d15a      	bne.n	800ba8c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800b9d6:	693b      	ldr	r3, [r7, #16]
 800b9d8:	689a      	ldr	r2, [r3, #8]
 800b9da:	693b      	ldr	r3, [r7, #16]
 800b9dc:	68db      	ldr	r3, [r3, #12]
 800b9de:	429a      	cmp	r2, r3
 800b9e0:	d914      	bls.n	800ba0c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b9e2:	693b      	ldr	r3, [r7, #16]
 800b9e4:	689a      	ldr	r2, [r3, #8]
 800b9e6:	693b      	ldr	r3, [r7, #16]
 800b9e8:	68db      	ldr	r3, [r3, #12]
 800b9ea:	1ad2      	subs	r2, r2, r3
 800b9ec:	693b      	ldr	r3, [r7, #16]
 800b9ee:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b9f0:	693b      	ldr	r3, [r7, #16]
 800b9f2:	689b      	ldr	r3, [r3, #8]
 800b9f4:	461a      	mov	r2, r3
 800b9f6:	6879      	ldr	r1, [r7, #4]
 800b9f8:	68f8      	ldr	r0, [r7, #12]
 800b9fa:	f001 f8ac 	bl	800cb56 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b9fe:	2300      	movs	r3, #0
 800ba00:	2200      	movs	r2, #0
 800ba02:	2100      	movs	r1, #0
 800ba04:	68f8      	ldr	r0, [r7, #12]
 800ba06:	f001 fd05 	bl	800d414 <USBD_LL_PrepareReceive>
 800ba0a:	e03f      	b.n	800ba8c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800ba0c:	693b      	ldr	r3, [r7, #16]
 800ba0e:	68da      	ldr	r2, [r3, #12]
 800ba10:	693b      	ldr	r3, [r7, #16]
 800ba12:	689b      	ldr	r3, [r3, #8]
 800ba14:	429a      	cmp	r2, r3
 800ba16:	d11c      	bne.n	800ba52 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800ba18:	693b      	ldr	r3, [r7, #16]
 800ba1a:	685a      	ldr	r2, [r3, #4]
 800ba1c:	693b      	ldr	r3, [r7, #16]
 800ba1e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800ba20:	429a      	cmp	r2, r3
 800ba22:	d316      	bcc.n	800ba52 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800ba24:	693b      	ldr	r3, [r7, #16]
 800ba26:	685a      	ldr	r2, [r3, #4]
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800ba2e:	429a      	cmp	r2, r3
 800ba30:	d20f      	bcs.n	800ba52 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800ba32:	2200      	movs	r2, #0
 800ba34:	2100      	movs	r1, #0
 800ba36:	68f8      	ldr	r0, [r7, #12]
 800ba38:	f001 f88d 	bl	800cb56 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	2200      	movs	r2, #0
 800ba40:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ba44:	2300      	movs	r3, #0
 800ba46:	2200      	movs	r2, #0
 800ba48:	2100      	movs	r1, #0
 800ba4a:	68f8      	ldr	r0, [r7, #12]
 800ba4c:	f001 fce2 	bl	800d414 <USBD_LL_PrepareReceive>
 800ba50:	e01c      	b.n	800ba8c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba58:	b2db      	uxtb	r3, r3
 800ba5a:	2b03      	cmp	r3, #3
 800ba5c:	d10f      	bne.n	800ba7e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba64:	68db      	ldr	r3, [r3, #12]
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d009      	beq.n	800ba7e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	2200      	movs	r2, #0
 800ba6e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba78:	68db      	ldr	r3, [r3, #12]
 800ba7a:	68f8      	ldr	r0, [r7, #12]
 800ba7c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ba7e:	2180      	movs	r1, #128	; 0x80
 800ba80:	68f8      	ldr	r0, [r7, #12]
 800ba82:	f001 fc1d 	bl	800d2c0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800ba86:	68f8      	ldr	r0, [r7, #12]
 800ba88:	f001 f8b7 	bl	800cbfa <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d03a      	beq.n	800bb0c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800ba96:	68f8      	ldr	r0, [r7, #12]
 800ba98:	f7ff fe42 	bl	800b720 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	2200      	movs	r2, #0
 800baa0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800baa4:	e032      	b.n	800bb0c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800baa6:	7afb      	ldrb	r3, [r7, #11]
 800baa8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800baac:	b2db      	uxtb	r3, r3
 800baae:	4619      	mov	r1, r3
 800bab0:	68f8      	ldr	r0, [r7, #12]
 800bab2:	f000 f97f 	bl	800bdb4 <USBD_CoreFindEP>
 800bab6:	4603      	mov	r3, r0
 800bab8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800baba:	7dfb      	ldrb	r3, [r7, #23]
 800babc:	2bff      	cmp	r3, #255	; 0xff
 800babe:	d025      	beq.n	800bb0c <USBD_LL_DataInStage+0x15a>
 800bac0:	7dfb      	ldrb	r3, [r7, #23]
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d122      	bne.n	800bb0c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bacc:	b2db      	uxtb	r3, r3
 800bace:	2b03      	cmp	r3, #3
 800bad0:	d11c      	bne.n	800bb0c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800bad2:	7dfa      	ldrb	r2, [r7, #23]
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	32ae      	adds	r2, #174	; 0xae
 800bad8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800badc:	695b      	ldr	r3, [r3, #20]
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d014      	beq.n	800bb0c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800bae2:	7dfa      	ldrb	r2, [r7, #23]
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800baea:	7dfa      	ldrb	r2, [r7, #23]
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	32ae      	adds	r2, #174	; 0xae
 800baf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800baf4:	695b      	ldr	r3, [r3, #20]
 800baf6:	7afa      	ldrb	r2, [r7, #11]
 800baf8:	4611      	mov	r1, r2
 800bafa:	68f8      	ldr	r0, [r7, #12]
 800bafc:	4798      	blx	r3
 800bafe:	4603      	mov	r3, r0
 800bb00:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800bb02:	7dbb      	ldrb	r3, [r7, #22]
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d001      	beq.n	800bb0c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800bb08:	7dbb      	ldrb	r3, [r7, #22]
 800bb0a:	e000      	b.n	800bb0e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800bb0c:	2300      	movs	r3, #0
}
 800bb0e:	4618      	mov	r0, r3
 800bb10:	3718      	adds	r7, #24
 800bb12:	46bd      	mov	sp, r7
 800bb14:	bd80      	pop	{r7, pc}

0800bb16 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800bb16:	b580      	push	{r7, lr}
 800bb18:	b084      	sub	sp, #16
 800bb1a:	af00      	add	r7, sp, #0
 800bb1c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800bb1e:	2300      	movs	r3, #0
 800bb20:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	2201      	movs	r2, #1
 800bb26:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	2200      	movs	r2, #0
 800bb2e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	2200      	movs	r2, #0
 800bb36:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	2200      	movs	r2, #0
 800bb3c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	2200      	movs	r2, #0
 800bb44:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d014      	beq.n	800bb7c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb58:	685b      	ldr	r3, [r3, #4]
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d00e      	beq.n	800bb7c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb64:	685b      	ldr	r3, [r3, #4]
 800bb66:	687a      	ldr	r2, [r7, #4]
 800bb68:	6852      	ldr	r2, [r2, #4]
 800bb6a:	b2d2      	uxtb	r2, r2
 800bb6c:	4611      	mov	r1, r2
 800bb6e:	6878      	ldr	r0, [r7, #4]
 800bb70:	4798      	blx	r3
 800bb72:	4603      	mov	r3, r0
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d001      	beq.n	800bb7c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800bb78:	2303      	movs	r3, #3
 800bb7a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bb7c:	2340      	movs	r3, #64	; 0x40
 800bb7e:	2200      	movs	r2, #0
 800bb80:	2100      	movs	r1, #0
 800bb82:	6878      	ldr	r0, [r7, #4]
 800bb84:	f001 fb57 	bl	800d236 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	2201      	movs	r2, #1
 800bb8c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	2240      	movs	r2, #64	; 0x40
 800bb94:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bb98:	2340      	movs	r3, #64	; 0x40
 800bb9a:	2200      	movs	r2, #0
 800bb9c:	2180      	movs	r1, #128	; 0x80
 800bb9e:	6878      	ldr	r0, [r7, #4]
 800bba0:	f001 fb49 	bl	800d236 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	2201      	movs	r2, #1
 800bba8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	2240      	movs	r2, #64	; 0x40
 800bbae:	621a      	str	r2, [r3, #32]

  return ret;
 800bbb0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	3710      	adds	r7, #16
 800bbb6:	46bd      	mov	sp, r7
 800bbb8:	bd80      	pop	{r7, pc}

0800bbba <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800bbba:	b480      	push	{r7}
 800bbbc:	b083      	sub	sp, #12
 800bbbe:	af00      	add	r7, sp, #0
 800bbc0:	6078      	str	r0, [r7, #4]
 800bbc2:	460b      	mov	r3, r1
 800bbc4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	78fa      	ldrb	r2, [r7, #3]
 800bbca:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800bbcc:	2300      	movs	r3, #0
}
 800bbce:	4618      	mov	r0, r3
 800bbd0:	370c      	adds	r7, #12
 800bbd2:	46bd      	mov	sp, r7
 800bbd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd8:	4770      	bx	lr

0800bbda <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800bbda:	b480      	push	{r7}
 800bbdc:	b083      	sub	sp, #12
 800bbde:	af00      	add	r7, sp, #0
 800bbe0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bbe8:	b2da      	uxtb	r2, r3
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	2204      	movs	r2, #4
 800bbf4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800bbf8:	2300      	movs	r3, #0
}
 800bbfa:	4618      	mov	r0, r3
 800bbfc:	370c      	adds	r7, #12
 800bbfe:	46bd      	mov	sp, r7
 800bc00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc04:	4770      	bx	lr

0800bc06 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800bc06:	b480      	push	{r7}
 800bc08:	b083      	sub	sp, #12
 800bc0a:	af00      	add	r7, sp, #0
 800bc0c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc14:	b2db      	uxtb	r3, r3
 800bc16:	2b04      	cmp	r3, #4
 800bc18:	d106      	bne.n	800bc28 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800bc20:	b2da      	uxtb	r2, r3
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800bc28:	2300      	movs	r3, #0
}
 800bc2a:	4618      	mov	r0, r3
 800bc2c:	370c      	adds	r7, #12
 800bc2e:	46bd      	mov	sp, r7
 800bc30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc34:	4770      	bx	lr

0800bc36 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800bc36:	b580      	push	{r7, lr}
 800bc38:	b082      	sub	sp, #8
 800bc3a:	af00      	add	r7, sp, #0
 800bc3c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc44:	b2db      	uxtb	r3, r3
 800bc46:	2b03      	cmp	r3, #3
 800bc48:	d110      	bne.n	800bc6c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d00b      	beq.n	800bc6c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc5a:	69db      	ldr	r3, [r3, #28]
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d005      	beq.n	800bc6c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc66:	69db      	ldr	r3, [r3, #28]
 800bc68:	6878      	ldr	r0, [r7, #4]
 800bc6a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800bc6c:	2300      	movs	r3, #0
}
 800bc6e:	4618      	mov	r0, r3
 800bc70:	3708      	adds	r7, #8
 800bc72:	46bd      	mov	sp, r7
 800bc74:	bd80      	pop	{r7, pc}

0800bc76 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800bc76:	b580      	push	{r7, lr}
 800bc78:	b082      	sub	sp, #8
 800bc7a:	af00      	add	r7, sp, #0
 800bc7c:	6078      	str	r0, [r7, #4]
 800bc7e:	460b      	mov	r3, r1
 800bc80:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	32ae      	adds	r2, #174	; 0xae
 800bc8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d101      	bne.n	800bc98 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800bc94:	2303      	movs	r3, #3
 800bc96:	e01c      	b.n	800bcd2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc9e:	b2db      	uxtb	r3, r3
 800bca0:	2b03      	cmp	r3, #3
 800bca2:	d115      	bne.n	800bcd0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	32ae      	adds	r2, #174	; 0xae
 800bcae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bcb2:	6a1b      	ldr	r3, [r3, #32]
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d00b      	beq.n	800bcd0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	32ae      	adds	r2, #174	; 0xae
 800bcc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bcc6:	6a1b      	ldr	r3, [r3, #32]
 800bcc8:	78fa      	ldrb	r2, [r7, #3]
 800bcca:	4611      	mov	r1, r2
 800bccc:	6878      	ldr	r0, [r7, #4]
 800bcce:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bcd0:	2300      	movs	r3, #0
}
 800bcd2:	4618      	mov	r0, r3
 800bcd4:	3708      	adds	r7, #8
 800bcd6:	46bd      	mov	sp, r7
 800bcd8:	bd80      	pop	{r7, pc}

0800bcda <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800bcda:	b580      	push	{r7, lr}
 800bcdc:	b082      	sub	sp, #8
 800bcde:	af00      	add	r7, sp, #0
 800bce0:	6078      	str	r0, [r7, #4]
 800bce2:	460b      	mov	r3, r1
 800bce4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	32ae      	adds	r2, #174	; 0xae
 800bcf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d101      	bne.n	800bcfc <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800bcf8:	2303      	movs	r3, #3
 800bcfa:	e01c      	b.n	800bd36 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bd02:	b2db      	uxtb	r3, r3
 800bd04:	2b03      	cmp	r3, #3
 800bd06:	d115      	bne.n	800bd34 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	32ae      	adds	r2, #174	; 0xae
 800bd12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d00b      	beq.n	800bd34 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	32ae      	adds	r2, #174	; 0xae
 800bd26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd2c:	78fa      	ldrb	r2, [r7, #3]
 800bd2e:	4611      	mov	r1, r2
 800bd30:	6878      	ldr	r0, [r7, #4]
 800bd32:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bd34:	2300      	movs	r3, #0
}
 800bd36:	4618      	mov	r0, r3
 800bd38:	3708      	adds	r7, #8
 800bd3a:	46bd      	mov	sp, r7
 800bd3c:	bd80      	pop	{r7, pc}

0800bd3e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800bd3e:	b480      	push	{r7}
 800bd40:	b083      	sub	sp, #12
 800bd42:	af00      	add	r7, sp, #0
 800bd44:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bd46:	2300      	movs	r3, #0
}
 800bd48:	4618      	mov	r0, r3
 800bd4a:	370c      	adds	r7, #12
 800bd4c:	46bd      	mov	sp, r7
 800bd4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd52:	4770      	bx	lr

0800bd54 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800bd54:	b580      	push	{r7, lr}
 800bd56:	b084      	sub	sp, #16
 800bd58:	af00      	add	r7, sp, #0
 800bd5a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800bd5c:	2300      	movs	r3, #0
 800bd5e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	2201      	movs	r2, #1
 800bd64:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d00e      	beq.n	800bd90 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd78:	685b      	ldr	r3, [r3, #4]
 800bd7a:	687a      	ldr	r2, [r7, #4]
 800bd7c:	6852      	ldr	r2, [r2, #4]
 800bd7e:	b2d2      	uxtb	r2, r2
 800bd80:	4611      	mov	r1, r2
 800bd82:	6878      	ldr	r0, [r7, #4]
 800bd84:	4798      	blx	r3
 800bd86:	4603      	mov	r3, r0
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d001      	beq.n	800bd90 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800bd8c:	2303      	movs	r3, #3
 800bd8e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800bd90:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd92:	4618      	mov	r0, r3
 800bd94:	3710      	adds	r7, #16
 800bd96:	46bd      	mov	sp, r7
 800bd98:	bd80      	pop	{r7, pc}

0800bd9a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800bd9a:	b480      	push	{r7}
 800bd9c:	b083      	sub	sp, #12
 800bd9e:	af00      	add	r7, sp, #0
 800bda0:	6078      	str	r0, [r7, #4]
 800bda2:	460b      	mov	r3, r1
 800bda4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800bda6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800bda8:	4618      	mov	r0, r3
 800bdaa:	370c      	adds	r7, #12
 800bdac:	46bd      	mov	sp, r7
 800bdae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb2:	4770      	bx	lr

0800bdb4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800bdb4:	b480      	push	{r7}
 800bdb6:	b083      	sub	sp, #12
 800bdb8:	af00      	add	r7, sp, #0
 800bdba:	6078      	str	r0, [r7, #4]
 800bdbc:	460b      	mov	r3, r1
 800bdbe:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800bdc0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800bdc2:	4618      	mov	r0, r3
 800bdc4:	370c      	adds	r7, #12
 800bdc6:	46bd      	mov	sp, r7
 800bdc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdcc:	4770      	bx	lr

0800bdce <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800bdce:	b580      	push	{r7, lr}
 800bdd0:	b086      	sub	sp, #24
 800bdd2:	af00      	add	r7, sp, #0
 800bdd4:	6078      	str	r0, [r7, #4]
 800bdd6:	460b      	mov	r3, r1
 800bdd8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800bde2:	2300      	movs	r3, #0
 800bde4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	885b      	ldrh	r3, [r3, #2]
 800bdea:	b29a      	uxth	r2, r3
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	781b      	ldrb	r3, [r3, #0]
 800bdf0:	b29b      	uxth	r3, r3
 800bdf2:	429a      	cmp	r2, r3
 800bdf4:	d920      	bls.n	800be38 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	781b      	ldrb	r3, [r3, #0]
 800bdfa:	b29b      	uxth	r3, r3
 800bdfc:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800bdfe:	e013      	b.n	800be28 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800be00:	f107 030a 	add.w	r3, r7, #10
 800be04:	4619      	mov	r1, r3
 800be06:	6978      	ldr	r0, [r7, #20]
 800be08:	f000 f81b 	bl	800be42 <USBD_GetNextDesc>
 800be0c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800be0e:	697b      	ldr	r3, [r7, #20]
 800be10:	785b      	ldrb	r3, [r3, #1]
 800be12:	2b05      	cmp	r3, #5
 800be14:	d108      	bne.n	800be28 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800be16:	697b      	ldr	r3, [r7, #20]
 800be18:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800be1a:	693b      	ldr	r3, [r7, #16]
 800be1c:	789b      	ldrb	r3, [r3, #2]
 800be1e:	78fa      	ldrb	r2, [r7, #3]
 800be20:	429a      	cmp	r2, r3
 800be22:	d008      	beq.n	800be36 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800be24:	2300      	movs	r3, #0
 800be26:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	885b      	ldrh	r3, [r3, #2]
 800be2c:	b29a      	uxth	r2, r3
 800be2e:	897b      	ldrh	r3, [r7, #10]
 800be30:	429a      	cmp	r2, r3
 800be32:	d8e5      	bhi.n	800be00 <USBD_GetEpDesc+0x32>
 800be34:	e000      	b.n	800be38 <USBD_GetEpDesc+0x6a>
          break;
 800be36:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800be38:	693b      	ldr	r3, [r7, #16]
}
 800be3a:	4618      	mov	r0, r3
 800be3c:	3718      	adds	r7, #24
 800be3e:	46bd      	mov	sp, r7
 800be40:	bd80      	pop	{r7, pc}

0800be42 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800be42:	b480      	push	{r7}
 800be44:	b085      	sub	sp, #20
 800be46:	af00      	add	r7, sp, #0
 800be48:	6078      	str	r0, [r7, #4]
 800be4a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800be50:	683b      	ldr	r3, [r7, #0]
 800be52:	881a      	ldrh	r2, [r3, #0]
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	781b      	ldrb	r3, [r3, #0]
 800be58:	b29b      	uxth	r3, r3
 800be5a:	4413      	add	r3, r2
 800be5c:	b29a      	uxth	r2, r3
 800be5e:	683b      	ldr	r3, [r7, #0]
 800be60:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	781b      	ldrb	r3, [r3, #0]
 800be66:	461a      	mov	r2, r3
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	4413      	add	r3, r2
 800be6c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800be6e:	68fb      	ldr	r3, [r7, #12]
}
 800be70:	4618      	mov	r0, r3
 800be72:	3714      	adds	r7, #20
 800be74:	46bd      	mov	sp, r7
 800be76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be7a:	4770      	bx	lr

0800be7c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800be7c:	b480      	push	{r7}
 800be7e:	b087      	sub	sp, #28
 800be80:	af00      	add	r7, sp, #0
 800be82:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800be88:	697b      	ldr	r3, [r7, #20]
 800be8a:	781b      	ldrb	r3, [r3, #0]
 800be8c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800be8e:	697b      	ldr	r3, [r7, #20]
 800be90:	3301      	adds	r3, #1
 800be92:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800be94:	697b      	ldr	r3, [r7, #20]
 800be96:	781b      	ldrb	r3, [r3, #0]
 800be98:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800be9a:	8a3b      	ldrh	r3, [r7, #16]
 800be9c:	021b      	lsls	r3, r3, #8
 800be9e:	b21a      	sxth	r2, r3
 800bea0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800bea4:	4313      	orrs	r3, r2
 800bea6:	b21b      	sxth	r3, r3
 800bea8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800beaa:	89fb      	ldrh	r3, [r7, #14]
}
 800beac:	4618      	mov	r0, r3
 800beae:	371c      	adds	r7, #28
 800beb0:	46bd      	mov	sp, r7
 800beb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb6:	4770      	bx	lr

0800beb8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800beb8:	b580      	push	{r7, lr}
 800beba:	b084      	sub	sp, #16
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	6078      	str	r0, [r7, #4]
 800bec0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bec2:	2300      	movs	r3, #0
 800bec4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bec6:	683b      	ldr	r3, [r7, #0]
 800bec8:	781b      	ldrb	r3, [r3, #0]
 800beca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bece:	2b40      	cmp	r3, #64	; 0x40
 800bed0:	d005      	beq.n	800bede <USBD_StdDevReq+0x26>
 800bed2:	2b40      	cmp	r3, #64	; 0x40
 800bed4:	d857      	bhi.n	800bf86 <USBD_StdDevReq+0xce>
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d00f      	beq.n	800befa <USBD_StdDevReq+0x42>
 800beda:	2b20      	cmp	r3, #32
 800bedc:	d153      	bne.n	800bf86 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	32ae      	adds	r2, #174	; 0xae
 800bee8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800beec:	689b      	ldr	r3, [r3, #8]
 800beee:	6839      	ldr	r1, [r7, #0]
 800bef0:	6878      	ldr	r0, [r7, #4]
 800bef2:	4798      	blx	r3
 800bef4:	4603      	mov	r3, r0
 800bef6:	73fb      	strb	r3, [r7, #15]
      break;
 800bef8:	e04a      	b.n	800bf90 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800befa:	683b      	ldr	r3, [r7, #0]
 800befc:	785b      	ldrb	r3, [r3, #1]
 800befe:	2b09      	cmp	r3, #9
 800bf00:	d83b      	bhi.n	800bf7a <USBD_StdDevReq+0xc2>
 800bf02:	a201      	add	r2, pc, #4	; (adr r2, 800bf08 <USBD_StdDevReq+0x50>)
 800bf04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf08:	0800bf5d 	.word	0x0800bf5d
 800bf0c:	0800bf71 	.word	0x0800bf71
 800bf10:	0800bf7b 	.word	0x0800bf7b
 800bf14:	0800bf67 	.word	0x0800bf67
 800bf18:	0800bf7b 	.word	0x0800bf7b
 800bf1c:	0800bf3b 	.word	0x0800bf3b
 800bf20:	0800bf31 	.word	0x0800bf31
 800bf24:	0800bf7b 	.word	0x0800bf7b
 800bf28:	0800bf53 	.word	0x0800bf53
 800bf2c:	0800bf45 	.word	0x0800bf45
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800bf30:	6839      	ldr	r1, [r7, #0]
 800bf32:	6878      	ldr	r0, [r7, #4]
 800bf34:	f000 fa3c 	bl	800c3b0 <USBD_GetDescriptor>
          break;
 800bf38:	e024      	b.n	800bf84 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800bf3a:	6839      	ldr	r1, [r7, #0]
 800bf3c:	6878      	ldr	r0, [r7, #4]
 800bf3e:	f000 fba1 	bl	800c684 <USBD_SetAddress>
          break;
 800bf42:	e01f      	b.n	800bf84 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800bf44:	6839      	ldr	r1, [r7, #0]
 800bf46:	6878      	ldr	r0, [r7, #4]
 800bf48:	f000 fbe0 	bl	800c70c <USBD_SetConfig>
 800bf4c:	4603      	mov	r3, r0
 800bf4e:	73fb      	strb	r3, [r7, #15]
          break;
 800bf50:	e018      	b.n	800bf84 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800bf52:	6839      	ldr	r1, [r7, #0]
 800bf54:	6878      	ldr	r0, [r7, #4]
 800bf56:	f000 fc83 	bl	800c860 <USBD_GetConfig>
          break;
 800bf5a:	e013      	b.n	800bf84 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800bf5c:	6839      	ldr	r1, [r7, #0]
 800bf5e:	6878      	ldr	r0, [r7, #4]
 800bf60:	f000 fcb4 	bl	800c8cc <USBD_GetStatus>
          break;
 800bf64:	e00e      	b.n	800bf84 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800bf66:	6839      	ldr	r1, [r7, #0]
 800bf68:	6878      	ldr	r0, [r7, #4]
 800bf6a:	f000 fce3 	bl	800c934 <USBD_SetFeature>
          break;
 800bf6e:	e009      	b.n	800bf84 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800bf70:	6839      	ldr	r1, [r7, #0]
 800bf72:	6878      	ldr	r0, [r7, #4]
 800bf74:	f000 fd07 	bl	800c986 <USBD_ClrFeature>
          break;
 800bf78:	e004      	b.n	800bf84 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800bf7a:	6839      	ldr	r1, [r7, #0]
 800bf7c:	6878      	ldr	r0, [r7, #4]
 800bf7e:	f000 fd5e 	bl	800ca3e <USBD_CtlError>
          break;
 800bf82:	bf00      	nop
      }
      break;
 800bf84:	e004      	b.n	800bf90 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800bf86:	6839      	ldr	r1, [r7, #0]
 800bf88:	6878      	ldr	r0, [r7, #4]
 800bf8a:	f000 fd58 	bl	800ca3e <USBD_CtlError>
      break;
 800bf8e:	bf00      	nop
  }

  return ret;
 800bf90:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf92:	4618      	mov	r0, r3
 800bf94:	3710      	adds	r7, #16
 800bf96:	46bd      	mov	sp, r7
 800bf98:	bd80      	pop	{r7, pc}
 800bf9a:	bf00      	nop

0800bf9c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bf9c:	b580      	push	{r7, lr}
 800bf9e:	b084      	sub	sp, #16
 800bfa0:	af00      	add	r7, sp, #0
 800bfa2:	6078      	str	r0, [r7, #4]
 800bfa4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bfa6:	2300      	movs	r3, #0
 800bfa8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bfaa:	683b      	ldr	r3, [r7, #0]
 800bfac:	781b      	ldrb	r3, [r3, #0]
 800bfae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bfb2:	2b40      	cmp	r3, #64	; 0x40
 800bfb4:	d005      	beq.n	800bfc2 <USBD_StdItfReq+0x26>
 800bfb6:	2b40      	cmp	r3, #64	; 0x40
 800bfb8:	d852      	bhi.n	800c060 <USBD_StdItfReq+0xc4>
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d001      	beq.n	800bfc2 <USBD_StdItfReq+0x26>
 800bfbe:	2b20      	cmp	r3, #32
 800bfc0:	d14e      	bne.n	800c060 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bfc8:	b2db      	uxtb	r3, r3
 800bfca:	3b01      	subs	r3, #1
 800bfcc:	2b02      	cmp	r3, #2
 800bfce:	d840      	bhi.n	800c052 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800bfd0:	683b      	ldr	r3, [r7, #0]
 800bfd2:	889b      	ldrh	r3, [r3, #4]
 800bfd4:	b2db      	uxtb	r3, r3
 800bfd6:	2b01      	cmp	r3, #1
 800bfd8:	d836      	bhi.n	800c048 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800bfda:	683b      	ldr	r3, [r7, #0]
 800bfdc:	889b      	ldrh	r3, [r3, #4]
 800bfde:	b2db      	uxtb	r3, r3
 800bfe0:	4619      	mov	r1, r3
 800bfe2:	6878      	ldr	r0, [r7, #4]
 800bfe4:	f7ff fed9 	bl	800bd9a <USBD_CoreFindIF>
 800bfe8:	4603      	mov	r3, r0
 800bfea:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bfec:	7bbb      	ldrb	r3, [r7, #14]
 800bfee:	2bff      	cmp	r3, #255	; 0xff
 800bff0:	d01d      	beq.n	800c02e <USBD_StdItfReq+0x92>
 800bff2:	7bbb      	ldrb	r3, [r7, #14]
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d11a      	bne.n	800c02e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800bff8:	7bba      	ldrb	r2, [r7, #14]
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	32ae      	adds	r2, #174	; 0xae
 800bffe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c002:	689b      	ldr	r3, [r3, #8]
 800c004:	2b00      	cmp	r3, #0
 800c006:	d00f      	beq.n	800c028 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800c008:	7bba      	ldrb	r2, [r7, #14]
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c010:	7bba      	ldrb	r2, [r7, #14]
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	32ae      	adds	r2, #174	; 0xae
 800c016:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c01a:	689b      	ldr	r3, [r3, #8]
 800c01c:	6839      	ldr	r1, [r7, #0]
 800c01e:	6878      	ldr	r0, [r7, #4]
 800c020:	4798      	blx	r3
 800c022:	4603      	mov	r3, r0
 800c024:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c026:	e004      	b.n	800c032 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800c028:	2303      	movs	r3, #3
 800c02a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c02c:	e001      	b.n	800c032 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800c02e:	2303      	movs	r3, #3
 800c030:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c032:	683b      	ldr	r3, [r7, #0]
 800c034:	88db      	ldrh	r3, [r3, #6]
 800c036:	2b00      	cmp	r3, #0
 800c038:	d110      	bne.n	800c05c <USBD_StdItfReq+0xc0>
 800c03a:	7bfb      	ldrb	r3, [r7, #15]
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d10d      	bne.n	800c05c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800c040:	6878      	ldr	r0, [r7, #4]
 800c042:	f000 fdc7 	bl	800cbd4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c046:	e009      	b.n	800c05c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800c048:	6839      	ldr	r1, [r7, #0]
 800c04a:	6878      	ldr	r0, [r7, #4]
 800c04c:	f000 fcf7 	bl	800ca3e <USBD_CtlError>
          break;
 800c050:	e004      	b.n	800c05c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800c052:	6839      	ldr	r1, [r7, #0]
 800c054:	6878      	ldr	r0, [r7, #4]
 800c056:	f000 fcf2 	bl	800ca3e <USBD_CtlError>
          break;
 800c05a:	e000      	b.n	800c05e <USBD_StdItfReq+0xc2>
          break;
 800c05c:	bf00      	nop
      }
      break;
 800c05e:	e004      	b.n	800c06a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800c060:	6839      	ldr	r1, [r7, #0]
 800c062:	6878      	ldr	r0, [r7, #4]
 800c064:	f000 fceb 	bl	800ca3e <USBD_CtlError>
      break;
 800c068:	bf00      	nop
  }

  return ret;
 800c06a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c06c:	4618      	mov	r0, r3
 800c06e:	3710      	adds	r7, #16
 800c070:	46bd      	mov	sp, r7
 800c072:	bd80      	pop	{r7, pc}

0800c074 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c074:	b580      	push	{r7, lr}
 800c076:	b084      	sub	sp, #16
 800c078:	af00      	add	r7, sp, #0
 800c07a:	6078      	str	r0, [r7, #4]
 800c07c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800c07e:	2300      	movs	r3, #0
 800c080:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800c082:	683b      	ldr	r3, [r7, #0]
 800c084:	889b      	ldrh	r3, [r3, #4]
 800c086:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c088:	683b      	ldr	r3, [r7, #0]
 800c08a:	781b      	ldrb	r3, [r3, #0]
 800c08c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c090:	2b40      	cmp	r3, #64	; 0x40
 800c092:	d007      	beq.n	800c0a4 <USBD_StdEPReq+0x30>
 800c094:	2b40      	cmp	r3, #64	; 0x40
 800c096:	f200 817f 	bhi.w	800c398 <USBD_StdEPReq+0x324>
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d02a      	beq.n	800c0f4 <USBD_StdEPReq+0x80>
 800c09e:	2b20      	cmp	r3, #32
 800c0a0:	f040 817a 	bne.w	800c398 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800c0a4:	7bbb      	ldrb	r3, [r7, #14]
 800c0a6:	4619      	mov	r1, r3
 800c0a8:	6878      	ldr	r0, [r7, #4]
 800c0aa:	f7ff fe83 	bl	800bdb4 <USBD_CoreFindEP>
 800c0ae:	4603      	mov	r3, r0
 800c0b0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c0b2:	7b7b      	ldrb	r3, [r7, #13]
 800c0b4:	2bff      	cmp	r3, #255	; 0xff
 800c0b6:	f000 8174 	beq.w	800c3a2 <USBD_StdEPReq+0x32e>
 800c0ba:	7b7b      	ldrb	r3, [r7, #13]
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	f040 8170 	bne.w	800c3a2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800c0c2:	7b7a      	ldrb	r2, [r7, #13]
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800c0ca:	7b7a      	ldrb	r2, [r7, #13]
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	32ae      	adds	r2, #174	; 0xae
 800c0d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0d4:	689b      	ldr	r3, [r3, #8]
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	f000 8163 	beq.w	800c3a2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800c0dc:	7b7a      	ldrb	r2, [r7, #13]
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	32ae      	adds	r2, #174	; 0xae
 800c0e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0e6:	689b      	ldr	r3, [r3, #8]
 800c0e8:	6839      	ldr	r1, [r7, #0]
 800c0ea:	6878      	ldr	r0, [r7, #4]
 800c0ec:	4798      	blx	r3
 800c0ee:	4603      	mov	r3, r0
 800c0f0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800c0f2:	e156      	b.n	800c3a2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c0f4:	683b      	ldr	r3, [r7, #0]
 800c0f6:	785b      	ldrb	r3, [r3, #1]
 800c0f8:	2b03      	cmp	r3, #3
 800c0fa:	d008      	beq.n	800c10e <USBD_StdEPReq+0x9a>
 800c0fc:	2b03      	cmp	r3, #3
 800c0fe:	f300 8145 	bgt.w	800c38c <USBD_StdEPReq+0x318>
 800c102:	2b00      	cmp	r3, #0
 800c104:	f000 809b 	beq.w	800c23e <USBD_StdEPReq+0x1ca>
 800c108:	2b01      	cmp	r3, #1
 800c10a:	d03c      	beq.n	800c186 <USBD_StdEPReq+0x112>
 800c10c:	e13e      	b.n	800c38c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c114:	b2db      	uxtb	r3, r3
 800c116:	2b02      	cmp	r3, #2
 800c118:	d002      	beq.n	800c120 <USBD_StdEPReq+0xac>
 800c11a:	2b03      	cmp	r3, #3
 800c11c:	d016      	beq.n	800c14c <USBD_StdEPReq+0xd8>
 800c11e:	e02c      	b.n	800c17a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c120:	7bbb      	ldrb	r3, [r7, #14]
 800c122:	2b00      	cmp	r3, #0
 800c124:	d00d      	beq.n	800c142 <USBD_StdEPReq+0xce>
 800c126:	7bbb      	ldrb	r3, [r7, #14]
 800c128:	2b80      	cmp	r3, #128	; 0x80
 800c12a:	d00a      	beq.n	800c142 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c12c:	7bbb      	ldrb	r3, [r7, #14]
 800c12e:	4619      	mov	r1, r3
 800c130:	6878      	ldr	r0, [r7, #4]
 800c132:	f001 f8c5 	bl	800d2c0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c136:	2180      	movs	r1, #128	; 0x80
 800c138:	6878      	ldr	r0, [r7, #4]
 800c13a:	f001 f8c1 	bl	800d2c0 <USBD_LL_StallEP>
 800c13e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c140:	e020      	b.n	800c184 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800c142:	6839      	ldr	r1, [r7, #0]
 800c144:	6878      	ldr	r0, [r7, #4]
 800c146:	f000 fc7a 	bl	800ca3e <USBD_CtlError>
              break;
 800c14a:	e01b      	b.n	800c184 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c14c:	683b      	ldr	r3, [r7, #0]
 800c14e:	885b      	ldrh	r3, [r3, #2]
 800c150:	2b00      	cmp	r3, #0
 800c152:	d10e      	bne.n	800c172 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c154:	7bbb      	ldrb	r3, [r7, #14]
 800c156:	2b00      	cmp	r3, #0
 800c158:	d00b      	beq.n	800c172 <USBD_StdEPReq+0xfe>
 800c15a:	7bbb      	ldrb	r3, [r7, #14]
 800c15c:	2b80      	cmp	r3, #128	; 0x80
 800c15e:	d008      	beq.n	800c172 <USBD_StdEPReq+0xfe>
 800c160:	683b      	ldr	r3, [r7, #0]
 800c162:	88db      	ldrh	r3, [r3, #6]
 800c164:	2b00      	cmp	r3, #0
 800c166:	d104      	bne.n	800c172 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c168:	7bbb      	ldrb	r3, [r7, #14]
 800c16a:	4619      	mov	r1, r3
 800c16c:	6878      	ldr	r0, [r7, #4]
 800c16e:	f001 f8a7 	bl	800d2c0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c172:	6878      	ldr	r0, [r7, #4]
 800c174:	f000 fd2e 	bl	800cbd4 <USBD_CtlSendStatus>

              break;
 800c178:	e004      	b.n	800c184 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800c17a:	6839      	ldr	r1, [r7, #0]
 800c17c:	6878      	ldr	r0, [r7, #4]
 800c17e:	f000 fc5e 	bl	800ca3e <USBD_CtlError>
              break;
 800c182:	bf00      	nop
          }
          break;
 800c184:	e107      	b.n	800c396 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c18c:	b2db      	uxtb	r3, r3
 800c18e:	2b02      	cmp	r3, #2
 800c190:	d002      	beq.n	800c198 <USBD_StdEPReq+0x124>
 800c192:	2b03      	cmp	r3, #3
 800c194:	d016      	beq.n	800c1c4 <USBD_StdEPReq+0x150>
 800c196:	e04b      	b.n	800c230 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c198:	7bbb      	ldrb	r3, [r7, #14]
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d00d      	beq.n	800c1ba <USBD_StdEPReq+0x146>
 800c19e:	7bbb      	ldrb	r3, [r7, #14]
 800c1a0:	2b80      	cmp	r3, #128	; 0x80
 800c1a2:	d00a      	beq.n	800c1ba <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c1a4:	7bbb      	ldrb	r3, [r7, #14]
 800c1a6:	4619      	mov	r1, r3
 800c1a8:	6878      	ldr	r0, [r7, #4]
 800c1aa:	f001 f889 	bl	800d2c0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c1ae:	2180      	movs	r1, #128	; 0x80
 800c1b0:	6878      	ldr	r0, [r7, #4]
 800c1b2:	f001 f885 	bl	800d2c0 <USBD_LL_StallEP>
 800c1b6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c1b8:	e040      	b.n	800c23c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800c1ba:	6839      	ldr	r1, [r7, #0]
 800c1bc:	6878      	ldr	r0, [r7, #4]
 800c1be:	f000 fc3e 	bl	800ca3e <USBD_CtlError>
              break;
 800c1c2:	e03b      	b.n	800c23c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c1c4:	683b      	ldr	r3, [r7, #0]
 800c1c6:	885b      	ldrh	r3, [r3, #2]
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d136      	bne.n	800c23a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c1cc:	7bbb      	ldrb	r3, [r7, #14]
 800c1ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d004      	beq.n	800c1e0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c1d6:	7bbb      	ldrb	r3, [r7, #14]
 800c1d8:	4619      	mov	r1, r3
 800c1da:	6878      	ldr	r0, [r7, #4]
 800c1dc:	f001 f88f 	bl	800d2fe <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c1e0:	6878      	ldr	r0, [r7, #4]
 800c1e2:	f000 fcf7 	bl	800cbd4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800c1e6:	7bbb      	ldrb	r3, [r7, #14]
 800c1e8:	4619      	mov	r1, r3
 800c1ea:	6878      	ldr	r0, [r7, #4]
 800c1ec:	f7ff fde2 	bl	800bdb4 <USBD_CoreFindEP>
 800c1f0:	4603      	mov	r3, r0
 800c1f2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c1f4:	7b7b      	ldrb	r3, [r7, #13]
 800c1f6:	2bff      	cmp	r3, #255	; 0xff
 800c1f8:	d01f      	beq.n	800c23a <USBD_StdEPReq+0x1c6>
 800c1fa:	7b7b      	ldrb	r3, [r7, #13]
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d11c      	bne.n	800c23a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800c200:	7b7a      	ldrb	r2, [r7, #13]
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800c208:	7b7a      	ldrb	r2, [r7, #13]
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	32ae      	adds	r2, #174	; 0xae
 800c20e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c212:	689b      	ldr	r3, [r3, #8]
 800c214:	2b00      	cmp	r3, #0
 800c216:	d010      	beq.n	800c23a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c218:	7b7a      	ldrb	r2, [r7, #13]
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	32ae      	adds	r2, #174	; 0xae
 800c21e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c222:	689b      	ldr	r3, [r3, #8]
 800c224:	6839      	ldr	r1, [r7, #0]
 800c226:	6878      	ldr	r0, [r7, #4]
 800c228:	4798      	blx	r3
 800c22a:	4603      	mov	r3, r0
 800c22c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800c22e:	e004      	b.n	800c23a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800c230:	6839      	ldr	r1, [r7, #0]
 800c232:	6878      	ldr	r0, [r7, #4]
 800c234:	f000 fc03 	bl	800ca3e <USBD_CtlError>
              break;
 800c238:	e000      	b.n	800c23c <USBD_StdEPReq+0x1c8>
              break;
 800c23a:	bf00      	nop
          }
          break;
 800c23c:	e0ab      	b.n	800c396 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c244:	b2db      	uxtb	r3, r3
 800c246:	2b02      	cmp	r3, #2
 800c248:	d002      	beq.n	800c250 <USBD_StdEPReq+0x1dc>
 800c24a:	2b03      	cmp	r3, #3
 800c24c:	d032      	beq.n	800c2b4 <USBD_StdEPReq+0x240>
 800c24e:	e097      	b.n	800c380 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c250:	7bbb      	ldrb	r3, [r7, #14]
 800c252:	2b00      	cmp	r3, #0
 800c254:	d007      	beq.n	800c266 <USBD_StdEPReq+0x1f2>
 800c256:	7bbb      	ldrb	r3, [r7, #14]
 800c258:	2b80      	cmp	r3, #128	; 0x80
 800c25a:	d004      	beq.n	800c266 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800c25c:	6839      	ldr	r1, [r7, #0]
 800c25e:	6878      	ldr	r0, [r7, #4]
 800c260:	f000 fbed 	bl	800ca3e <USBD_CtlError>
                break;
 800c264:	e091      	b.n	800c38a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c266:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	da0b      	bge.n	800c286 <USBD_StdEPReq+0x212>
 800c26e:	7bbb      	ldrb	r3, [r7, #14]
 800c270:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c274:	4613      	mov	r3, r2
 800c276:	009b      	lsls	r3, r3, #2
 800c278:	4413      	add	r3, r2
 800c27a:	009b      	lsls	r3, r3, #2
 800c27c:	3310      	adds	r3, #16
 800c27e:	687a      	ldr	r2, [r7, #4]
 800c280:	4413      	add	r3, r2
 800c282:	3304      	adds	r3, #4
 800c284:	e00b      	b.n	800c29e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c286:	7bbb      	ldrb	r3, [r7, #14]
 800c288:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c28c:	4613      	mov	r3, r2
 800c28e:	009b      	lsls	r3, r3, #2
 800c290:	4413      	add	r3, r2
 800c292:	009b      	lsls	r3, r3, #2
 800c294:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c298:	687a      	ldr	r2, [r7, #4]
 800c29a:	4413      	add	r3, r2
 800c29c:	3304      	adds	r3, #4
 800c29e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c2a0:	68bb      	ldr	r3, [r7, #8]
 800c2a2:	2200      	movs	r2, #0
 800c2a4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c2a6:	68bb      	ldr	r3, [r7, #8]
 800c2a8:	2202      	movs	r2, #2
 800c2aa:	4619      	mov	r1, r3
 800c2ac:	6878      	ldr	r0, [r7, #4]
 800c2ae:	f000 fc37 	bl	800cb20 <USBD_CtlSendData>
              break;
 800c2b2:	e06a      	b.n	800c38a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c2b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	da11      	bge.n	800c2e0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c2bc:	7bbb      	ldrb	r3, [r7, #14]
 800c2be:	f003 020f 	and.w	r2, r3, #15
 800c2c2:	6879      	ldr	r1, [r7, #4]
 800c2c4:	4613      	mov	r3, r2
 800c2c6:	009b      	lsls	r3, r3, #2
 800c2c8:	4413      	add	r3, r2
 800c2ca:	009b      	lsls	r3, r3, #2
 800c2cc:	440b      	add	r3, r1
 800c2ce:	3324      	adds	r3, #36	; 0x24
 800c2d0:	881b      	ldrh	r3, [r3, #0]
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d117      	bne.n	800c306 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c2d6:	6839      	ldr	r1, [r7, #0]
 800c2d8:	6878      	ldr	r0, [r7, #4]
 800c2da:	f000 fbb0 	bl	800ca3e <USBD_CtlError>
                  break;
 800c2de:	e054      	b.n	800c38a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c2e0:	7bbb      	ldrb	r3, [r7, #14]
 800c2e2:	f003 020f 	and.w	r2, r3, #15
 800c2e6:	6879      	ldr	r1, [r7, #4]
 800c2e8:	4613      	mov	r3, r2
 800c2ea:	009b      	lsls	r3, r3, #2
 800c2ec:	4413      	add	r3, r2
 800c2ee:	009b      	lsls	r3, r3, #2
 800c2f0:	440b      	add	r3, r1
 800c2f2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c2f6:	881b      	ldrh	r3, [r3, #0]
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d104      	bne.n	800c306 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c2fc:	6839      	ldr	r1, [r7, #0]
 800c2fe:	6878      	ldr	r0, [r7, #4]
 800c300:	f000 fb9d 	bl	800ca3e <USBD_CtlError>
                  break;
 800c304:	e041      	b.n	800c38a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c306:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	da0b      	bge.n	800c326 <USBD_StdEPReq+0x2b2>
 800c30e:	7bbb      	ldrb	r3, [r7, #14]
 800c310:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c314:	4613      	mov	r3, r2
 800c316:	009b      	lsls	r3, r3, #2
 800c318:	4413      	add	r3, r2
 800c31a:	009b      	lsls	r3, r3, #2
 800c31c:	3310      	adds	r3, #16
 800c31e:	687a      	ldr	r2, [r7, #4]
 800c320:	4413      	add	r3, r2
 800c322:	3304      	adds	r3, #4
 800c324:	e00b      	b.n	800c33e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c326:	7bbb      	ldrb	r3, [r7, #14]
 800c328:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c32c:	4613      	mov	r3, r2
 800c32e:	009b      	lsls	r3, r3, #2
 800c330:	4413      	add	r3, r2
 800c332:	009b      	lsls	r3, r3, #2
 800c334:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c338:	687a      	ldr	r2, [r7, #4]
 800c33a:	4413      	add	r3, r2
 800c33c:	3304      	adds	r3, #4
 800c33e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c340:	7bbb      	ldrb	r3, [r7, #14]
 800c342:	2b00      	cmp	r3, #0
 800c344:	d002      	beq.n	800c34c <USBD_StdEPReq+0x2d8>
 800c346:	7bbb      	ldrb	r3, [r7, #14]
 800c348:	2b80      	cmp	r3, #128	; 0x80
 800c34a:	d103      	bne.n	800c354 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800c34c:	68bb      	ldr	r3, [r7, #8]
 800c34e:	2200      	movs	r2, #0
 800c350:	601a      	str	r2, [r3, #0]
 800c352:	e00e      	b.n	800c372 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c354:	7bbb      	ldrb	r3, [r7, #14]
 800c356:	4619      	mov	r1, r3
 800c358:	6878      	ldr	r0, [r7, #4]
 800c35a:	f000 ffef 	bl	800d33c <USBD_LL_IsStallEP>
 800c35e:	4603      	mov	r3, r0
 800c360:	2b00      	cmp	r3, #0
 800c362:	d003      	beq.n	800c36c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800c364:	68bb      	ldr	r3, [r7, #8]
 800c366:	2201      	movs	r2, #1
 800c368:	601a      	str	r2, [r3, #0]
 800c36a:	e002      	b.n	800c372 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800c36c:	68bb      	ldr	r3, [r7, #8]
 800c36e:	2200      	movs	r2, #0
 800c370:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c372:	68bb      	ldr	r3, [r7, #8]
 800c374:	2202      	movs	r2, #2
 800c376:	4619      	mov	r1, r3
 800c378:	6878      	ldr	r0, [r7, #4]
 800c37a:	f000 fbd1 	bl	800cb20 <USBD_CtlSendData>
              break;
 800c37e:	e004      	b.n	800c38a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800c380:	6839      	ldr	r1, [r7, #0]
 800c382:	6878      	ldr	r0, [r7, #4]
 800c384:	f000 fb5b 	bl	800ca3e <USBD_CtlError>
              break;
 800c388:	bf00      	nop
          }
          break;
 800c38a:	e004      	b.n	800c396 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800c38c:	6839      	ldr	r1, [r7, #0]
 800c38e:	6878      	ldr	r0, [r7, #4]
 800c390:	f000 fb55 	bl	800ca3e <USBD_CtlError>
          break;
 800c394:	bf00      	nop
      }
      break;
 800c396:	e005      	b.n	800c3a4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800c398:	6839      	ldr	r1, [r7, #0]
 800c39a:	6878      	ldr	r0, [r7, #4]
 800c39c:	f000 fb4f 	bl	800ca3e <USBD_CtlError>
      break;
 800c3a0:	e000      	b.n	800c3a4 <USBD_StdEPReq+0x330>
      break;
 800c3a2:	bf00      	nop
  }

  return ret;
 800c3a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3a6:	4618      	mov	r0, r3
 800c3a8:	3710      	adds	r7, #16
 800c3aa:	46bd      	mov	sp, r7
 800c3ac:	bd80      	pop	{r7, pc}
	...

0800c3b0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c3b0:	b580      	push	{r7, lr}
 800c3b2:	b084      	sub	sp, #16
 800c3b4:	af00      	add	r7, sp, #0
 800c3b6:	6078      	str	r0, [r7, #4]
 800c3b8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c3ba:	2300      	movs	r3, #0
 800c3bc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c3be:	2300      	movs	r3, #0
 800c3c0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c3c2:	2300      	movs	r3, #0
 800c3c4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c3c6:	683b      	ldr	r3, [r7, #0]
 800c3c8:	885b      	ldrh	r3, [r3, #2]
 800c3ca:	0a1b      	lsrs	r3, r3, #8
 800c3cc:	b29b      	uxth	r3, r3
 800c3ce:	3b01      	subs	r3, #1
 800c3d0:	2b06      	cmp	r3, #6
 800c3d2:	f200 8128 	bhi.w	800c626 <USBD_GetDescriptor+0x276>
 800c3d6:	a201      	add	r2, pc, #4	; (adr r2, 800c3dc <USBD_GetDescriptor+0x2c>)
 800c3d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3dc:	0800c3f9 	.word	0x0800c3f9
 800c3e0:	0800c411 	.word	0x0800c411
 800c3e4:	0800c451 	.word	0x0800c451
 800c3e8:	0800c627 	.word	0x0800c627
 800c3ec:	0800c627 	.word	0x0800c627
 800c3f0:	0800c5c7 	.word	0x0800c5c7
 800c3f4:	0800c5f3 	.word	0x0800c5f3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	687a      	ldr	r2, [r7, #4]
 800c402:	7c12      	ldrb	r2, [r2, #16]
 800c404:	f107 0108 	add.w	r1, r7, #8
 800c408:	4610      	mov	r0, r2
 800c40a:	4798      	blx	r3
 800c40c:	60f8      	str	r0, [r7, #12]
      break;
 800c40e:	e112      	b.n	800c636 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	7c1b      	ldrb	r3, [r3, #16]
 800c414:	2b00      	cmp	r3, #0
 800c416:	d10d      	bne.n	800c434 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c41e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c420:	f107 0208 	add.w	r2, r7, #8
 800c424:	4610      	mov	r0, r2
 800c426:	4798      	blx	r3
 800c428:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	3301      	adds	r3, #1
 800c42e:	2202      	movs	r2, #2
 800c430:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c432:	e100      	b.n	800c636 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c43a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c43c:	f107 0208 	add.w	r2, r7, #8
 800c440:	4610      	mov	r0, r2
 800c442:	4798      	blx	r3
 800c444:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	3301      	adds	r3, #1
 800c44a:	2202      	movs	r2, #2
 800c44c:	701a      	strb	r2, [r3, #0]
      break;
 800c44e:	e0f2      	b.n	800c636 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c450:	683b      	ldr	r3, [r7, #0]
 800c452:	885b      	ldrh	r3, [r3, #2]
 800c454:	b2db      	uxtb	r3, r3
 800c456:	2b05      	cmp	r3, #5
 800c458:	f200 80ac 	bhi.w	800c5b4 <USBD_GetDescriptor+0x204>
 800c45c:	a201      	add	r2, pc, #4	; (adr r2, 800c464 <USBD_GetDescriptor+0xb4>)
 800c45e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c462:	bf00      	nop
 800c464:	0800c47d 	.word	0x0800c47d
 800c468:	0800c4b1 	.word	0x0800c4b1
 800c46c:	0800c4e5 	.word	0x0800c4e5
 800c470:	0800c519 	.word	0x0800c519
 800c474:	0800c54d 	.word	0x0800c54d
 800c478:	0800c581 	.word	0x0800c581
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c482:	685b      	ldr	r3, [r3, #4]
 800c484:	2b00      	cmp	r3, #0
 800c486:	d00b      	beq.n	800c4a0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c48e:	685b      	ldr	r3, [r3, #4]
 800c490:	687a      	ldr	r2, [r7, #4]
 800c492:	7c12      	ldrb	r2, [r2, #16]
 800c494:	f107 0108 	add.w	r1, r7, #8
 800c498:	4610      	mov	r0, r2
 800c49a:	4798      	blx	r3
 800c49c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c49e:	e091      	b.n	800c5c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c4a0:	6839      	ldr	r1, [r7, #0]
 800c4a2:	6878      	ldr	r0, [r7, #4]
 800c4a4:	f000 facb 	bl	800ca3e <USBD_CtlError>
            err++;
 800c4a8:	7afb      	ldrb	r3, [r7, #11]
 800c4aa:	3301      	adds	r3, #1
 800c4ac:	72fb      	strb	r3, [r7, #11]
          break;
 800c4ae:	e089      	b.n	800c5c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c4b6:	689b      	ldr	r3, [r3, #8]
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d00b      	beq.n	800c4d4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c4c2:	689b      	ldr	r3, [r3, #8]
 800c4c4:	687a      	ldr	r2, [r7, #4]
 800c4c6:	7c12      	ldrb	r2, [r2, #16]
 800c4c8:	f107 0108 	add.w	r1, r7, #8
 800c4cc:	4610      	mov	r0, r2
 800c4ce:	4798      	blx	r3
 800c4d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c4d2:	e077      	b.n	800c5c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c4d4:	6839      	ldr	r1, [r7, #0]
 800c4d6:	6878      	ldr	r0, [r7, #4]
 800c4d8:	f000 fab1 	bl	800ca3e <USBD_CtlError>
            err++;
 800c4dc:	7afb      	ldrb	r3, [r7, #11]
 800c4de:	3301      	adds	r3, #1
 800c4e0:	72fb      	strb	r3, [r7, #11]
          break;
 800c4e2:	e06f      	b.n	800c5c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c4ea:	68db      	ldr	r3, [r3, #12]
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d00b      	beq.n	800c508 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c4f6:	68db      	ldr	r3, [r3, #12]
 800c4f8:	687a      	ldr	r2, [r7, #4]
 800c4fa:	7c12      	ldrb	r2, [r2, #16]
 800c4fc:	f107 0108 	add.w	r1, r7, #8
 800c500:	4610      	mov	r0, r2
 800c502:	4798      	blx	r3
 800c504:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c506:	e05d      	b.n	800c5c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c508:	6839      	ldr	r1, [r7, #0]
 800c50a:	6878      	ldr	r0, [r7, #4]
 800c50c:	f000 fa97 	bl	800ca3e <USBD_CtlError>
            err++;
 800c510:	7afb      	ldrb	r3, [r7, #11]
 800c512:	3301      	adds	r3, #1
 800c514:	72fb      	strb	r3, [r7, #11]
          break;
 800c516:	e055      	b.n	800c5c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c51e:	691b      	ldr	r3, [r3, #16]
 800c520:	2b00      	cmp	r3, #0
 800c522:	d00b      	beq.n	800c53c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c52a:	691b      	ldr	r3, [r3, #16]
 800c52c:	687a      	ldr	r2, [r7, #4]
 800c52e:	7c12      	ldrb	r2, [r2, #16]
 800c530:	f107 0108 	add.w	r1, r7, #8
 800c534:	4610      	mov	r0, r2
 800c536:	4798      	blx	r3
 800c538:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c53a:	e043      	b.n	800c5c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c53c:	6839      	ldr	r1, [r7, #0]
 800c53e:	6878      	ldr	r0, [r7, #4]
 800c540:	f000 fa7d 	bl	800ca3e <USBD_CtlError>
            err++;
 800c544:	7afb      	ldrb	r3, [r7, #11]
 800c546:	3301      	adds	r3, #1
 800c548:	72fb      	strb	r3, [r7, #11]
          break;
 800c54a:	e03b      	b.n	800c5c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c552:	695b      	ldr	r3, [r3, #20]
 800c554:	2b00      	cmp	r3, #0
 800c556:	d00b      	beq.n	800c570 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c55e:	695b      	ldr	r3, [r3, #20]
 800c560:	687a      	ldr	r2, [r7, #4]
 800c562:	7c12      	ldrb	r2, [r2, #16]
 800c564:	f107 0108 	add.w	r1, r7, #8
 800c568:	4610      	mov	r0, r2
 800c56a:	4798      	blx	r3
 800c56c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c56e:	e029      	b.n	800c5c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c570:	6839      	ldr	r1, [r7, #0]
 800c572:	6878      	ldr	r0, [r7, #4]
 800c574:	f000 fa63 	bl	800ca3e <USBD_CtlError>
            err++;
 800c578:	7afb      	ldrb	r3, [r7, #11]
 800c57a:	3301      	adds	r3, #1
 800c57c:	72fb      	strb	r3, [r7, #11]
          break;
 800c57e:	e021      	b.n	800c5c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c586:	699b      	ldr	r3, [r3, #24]
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d00b      	beq.n	800c5a4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c592:	699b      	ldr	r3, [r3, #24]
 800c594:	687a      	ldr	r2, [r7, #4]
 800c596:	7c12      	ldrb	r2, [r2, #16]
 800c598:	f107 0108 	add.w	r1, r7, #8
 800c59c:	4610      	mov	r0, r2
 800c59e:	4798      	blx	r3
 800c5a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c5a2:	e00f      	b.n	800c5c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c5a4:	6839      	ldr	r1, [r7, #0]
 800c5a6:	6878      	ldr	r0, [r7, #4]
 800c5a8:	f000 fa49 	bl	800ca3e <USBD_CtlError>
            err++;
 800c5ac:	7afb      	ldrb	r3, [r7, #11]
 800c5ae:	3301      	adds	r3, #1
 800c5b0:	72fb      	strb	r3, [r7, #11]
          break;
 800c5b2:	e007      	b.n	800c5c4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c5b4:	6839      	ldr	r1, [r7, #0]
 800c5b6:	6878      	ldr	r0, [r7, #4]
 800c5b8:	f000 fa41 	bl	800ca3e <USBD_CtlError>
          err++;
 800c5bc:	7afb      	ldrb	r3, [r7, #11]
 800c5be:	3301      	adds	r3, #1
 800c5c0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800c5c2:	bf00      	nop
      }
      break;
 800c5c4:	e037      	b.n	800c636 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	7c1b      	ldrb	r3, [r3, #16]
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d109      	bne.n	800c5e2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c5d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c5d6:	f107 0208 	add.w	r2, r7, #8
 800c5da:	4610      	mov	r0, r2
 800c5dc:	4798      	blx	r3
 800c5de:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c5e0:	e029      	b.n	800c636 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c5e2:	6839      	ldr	r1, [r7, #0]
 800c5e4:	6878      	ldr	r0, [r7, #4]
 800c5e6:	f000 fa2a 	bl	800ca3e <USBD_CtlError>
        err++;
 800c5ea:	7afb      	ldrb	r3, [r7, #11]
 800c5ec:	3301      	adds	r3, #1
 800c5ee:	72fb      	strb	r3, [r7, #11]
      break;
 800c5f0:	e021      	b.n	800c636 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	7c1b      	ldrb	r3, [r3, #16]
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d10d      	bne.n	800c616 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c602:	f107 0208 	add.w	r2, r7, #8
 800c606:	4610      	mov	r0, r2
 800c608:	4798      	blx	r3
 800c60a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	3301      	adds	r3, #1
 800c610:	2207      	movs	r2, #7
 800c612:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c614:	e00f      	b.n	800c636 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c616:	6839      	ldr	r1, [r7, #0]
 800c618:	6878      	ldr	r0, [r7, #4]
 800c61a:	f000 fa10 	bl	800ca3e <USBD_CtlError>
        err++;
 800c61e:	7afb      	ldrb	r3, [r7, #11]
 800c620:	3301      	adds	r3, #1
 800c622:	72fb      	strb	r3, [r7, #11]
      break;
 800c624:	e007      	b.n	800c636 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800c626:	6839      	ldr	r1, [r7, #0]
 800c628:	6878      	ldr	r0, [r7, #4]
 800c62a:	f000 fa08 	bl	800ca3e <USBD_CtlError>
      err++;
 800c62e:	7afb      	ldrb	r3, [r7, #11]
 800c630:	3301      	adds	r3, #1
 800c632:	72fb      	strb	r3, [r7, #11]
      break;
 800c634:	bf00      	nop
  }

  if (err != 0U)
 800c636:	7afb      	ldrb	r3, [r7, #11]
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d11e      	bne.n	800c67a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800c63c:	683b      	ldr	r3, [r7, #0]
 800c63e:	88db      	ldrh	r3, [r3, #6]
 800c640:	2b00      	cmp	r3, #0
 800c642:	d016      	beq.n	800c672 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800c644:	893b      	ldrh	r3, [r7, #8]
 800c646:	2b00      	cmp	r3, #0
 800c648:	d00e      	beq.n	800c668 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800c64a:	683b      	ldr	r3, [r7, #0]
 800c64c:	88da      	ldrh	r2, [r3, #6]
 800c64e:	893b      	ldrh	r3, [r7, #8]
 800c650:	4293      	cmp	r3, r2
 800c652:	bf28      	it	cs
 800c654:	4613      	movcs	r3, r2
 800c656:	b29b      	uxth	r3, r3
 800c658:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c65a:	893b      	ldrh	r3, [r7, #8]
 800c65c:	461a      	mov	r2, r3
 800c65e:	68f9      	ldr	r1, [r7, #12]
 800c660:	6878      	ldr	r0, [r7, #4]
 800c662:	f000 fa5d 	bl	800cb20 <USBD_CtlSendData>
 800c666:	e009      	b.n	800c67c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c668:	6839      	ldr	r1, [r7, #0]
 800c66a:	6878      	ldr	r0, [r7, #4]
 800c66c:	f000 f9e7 	bl	800ca3e <USBD_CtlError>
 800c670:	e004      	b.n	800c67c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c672:	6878      	ldr	r0, [r7, #4]
 800c674:	f000 faae 	bl	800cbd4 <USBD_CtlSendStatus>
 800c678:	e000      	b.n	800c67c <USBD_GetDescriptor+0x2cc>
    return;
 800c67a:	bf00      	nop
  }
}
 800c67c:	3710      	adds	r7, #16
 800c67e:	46bd      	mov	sp, r7
 800c680:	bd80      	pop	{r7, pc}
 800c682:	bf00      	nop

0800c684 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c684:	b580      	push	{r7, lr}
 800c686:	b084      	sub	sp, #16
 800c688:	af00      	add	r7, sp, #0
 800c68a:	6078      	str	r0, [r7, #4]
 800c68c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c68e:	683b      	ldr	r3, [r7, #0]
 800c690:	889b      	ldrh	r3, [r3, #4]
 800c692:	2b00      	cmp	r3, #0
 800c694:	d131      	bne.n	800c6fa <USBD_SetAddress+0x76>
 800c696:	683b      	ldr	r3, [r7, #0]
 800c698:	88db      	ldrh	r3, [r3, #6]
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d12d      	bne.n	800c6fa <USBD_SetAddress+0x76>
 800c69e:	683b      	ldr	r3, [r7, #0]
 800c6a0:	885b      	ldrh	r3, [r3, #2]
 800c6a2:	2b7f      	cmp	r3, #127	; 0x7f
 800c6a4:	d829      	bhi.n	800c6fa <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c6a6:	683b      	ldr	r3, [r7, #0]
 800c6a8:	885b      	ldrh	r3, [r3, #2]
 800c6aa:	b2db      	uxtb	r3, r3
 800c6ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c6b0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c6b8:	b2db      	uxtb	r3, r3
 800c6ba:	2b03      	cmp	r3, #3
 800c6bc:	d104      	bne.n	800c6c8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c6be:	6839      	ldr	r1, [r7, #0]
 800c6c0:	6878      	ldr	r0, [r7, #4]
 800c6c2:	f000 f9bc 	bl	800ca3e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c6c6:	e01d      	b.n	800c704 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	7bfa      	ldrb	r2, [r7, #15]
 800c6cc:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c6d0:	7bfb      	ldrb	r3, [r7, #15]
 800c6d2:	4619      	mov	r1, r3
 800c6d4:	6878      	ldr	r0, [r7, #4]
 800c6d6:	f000 fe5d 	bl	800d394 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c6da:	6878      	ldr	r0, [r7, #4]
 800c6dc:	f000 fa7a 	bl	800cbd4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c6e0:	7bfb      	ldrb	r3, [r7, #15]
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d004      	beq.n	800c6f0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	2202      	movs	r2, #2
 800c6ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c6ee:	e009      	b.n	800c704 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	2201      	movs	r2, #1
 800c6f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c6f8:	e004      	b.n	800c704 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c6fa:	6839      	ldr	r1, [r7, #0]
 800c6fc:	6878      	ldr	r0, [r7, #4]
 800c6fe:	f000 f99e 	bl	800ca3e <USBD_CtlError>
  }
}
 800c702:	bf00      	nop
 800c704:	bf00      	nop
 800c706:	3710      	adds	r7, #16
 800c708:	46bd      	mov	sp, r7
 800c70a:	bd80      	pop	{r7, pc}

0800c70c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c70c:	b580      	push	{r7, lr}
 800c70e:	b084      	sub	sp, #16
 800c710:	af00      	add	r7, sp, #0
 800c712:	6078      	str	r0, [r7, #4]
 800c714:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c716:	2300      	movs	r3, #0
 800c718:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c71a:	683b      	ldr	r3, [r7, #0]
 800c71c:	885b      	ldrh	r3, [r3, #2]
 800c71e:	b2da      	uxtb	r2, r3
 800c720:	4b4e      	ldr	r3, [pc, #312]	; (800c85c <USBD_SetConfig+0x150>)
 800c722:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c724:	4b4d      	ldr	r3, [pc, #308]	; (800c85c <USBD_SetConfig+0x150>)
 800c726:	781b      	ldrb	r3, [r3, #0]
 800c728:	2b01      	cmp	r3, #1
 800c72a:	d905      	bls.n	800c738 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c72c:	6839      	ldr	r1, [r7, #0]
 800c72e:	6878      	ldr	r0, [r7, #4]
 800c730:	f000 f985 	bl	800ca3e <USBD_CtlError>
    return USBD_FAIL;
 800c734:	2303      	movs	r3, #3
 800c736:	e08c      	b.n	800c852 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c73e:	b2db      	uxtb	r3, r3
 800c740:	2b02      	cmp	r3, #2
 800c742:	d002      	beq.n	800c74a <USBD_SetConfig+0x3e>
 800c744:	2b03      	cmp	r3, #3
 800c746:	d029      	beq.n	800c79c <USBD_SetConfig+0x90>
 800c748:	e075      	b.n	800c836 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c74a:	4b44      	ldr	r3, [pc, #272]	; (800c85c <USBD_SetConfig+0x150>)
 800c74c:	781b      	ldrb	r3, [r3, #0]
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d020      	beq.n	800c794 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800c752:	4b42      	ldr	r3, [pc, #264]	; (800c85c <USBD_SetConfig+0x150>)
 800c754:	781b      	ldrb	r3, [r3, #0]
 800c756:	461a      	mov	r2, r3
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c75c:	4b3f      	ldr	r3, [pc, #252]	; (800c85c <USBD_SetConfig+0x150>)
 800c75e:	781b      	ldrb	r3, [r3, #0]
 800c760:	4619      	mov	r1, r3
 800c762:	6878      	ldr	r0, [r7, #4]
 800c764:	f7fe ffe7 	bl	800b736 <USBD_SetClassConfig>
 800c768:	4603      	mov	r3, r0
 800c76a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c76c:	7bfb      	ldrb	r3, [r7, #15]
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d008      	beq.n	800c784 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800c772:	6839      	ldr	r1, [r7, #0]
 800c774:	6878      	ldr	r0, [r7, #4]
 800c776:	f000 f962 	bl	800ca3e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	2202      	movs	r2, #2
 800c77e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c782:	e065      	b.n	800c850 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c784:	6878      	ldr	r0, [r7, #4]
 800c786:	f000 fa25 	bl	800cbd4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	2203      	movs	r2, #3
 800c78e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c792:	e05d      	b.n	800c850 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c794:	6878      	ldr	r0, [r7, #4]
 800c796:	f000 fa1d 	bl	800cbd4 <USBD_CtlSendStatus>
      break;
 800c79a:	e059      	b.n	800c850 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c79c:	4b2f      	ldr	r3, [pc, #188]	; (800c85c <USBD_SetConfig+0x150>)
 800c79e:	781b      	ldrb	r3, [r3, #0]
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d112      	bne.n	800c7ca <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	2202      	movs	r2, #2
 800c7a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800c7ac:	4b2b      	ldr	r3, [pc, #172]	; (800c85c <USBD_SetConfig+0x150>)
 800c7ae:	781b      	ldrb	r3, [r3, #0]
 800c7b0:	461a      	mov	r2, r3
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c7b6:	4b29      	ldr	r3, [pc, #164]	; (800c85c <USBD_SetConfig+0x150>)
 800c7b8:	781b      	ldrb	r3, [r3, #0]
 800c7ba:	4619      	mov	r1, r3
 800c7bc:	6878      	ldr	r0, [r7, #4]
 800c7be:	f7fe ffd6 	bl	800b76e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c7c2:	6878      	ldr	r0, [r7, #4]
 800c7c4:	f000 fa06 	bl	800cbd4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c7c8:	e042      	b.n	800c850 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800c7ca:	4b24      	ldr	r3, [pc, #144]	; (800c85c <USBD_SetConfig+0x150>)
 800c7cc:	781b      	ldrb	r3, [r3, #0]
 800c7ce:	461a      	mov	r2, r3
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	685b      	ldr	r3, [r3, #4]
 800c7d4:	429a      	cmp	r2, r3
 800c7d6:	d02a      	beq.n	800c82e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	685b      	ldr	r3, [r3, #4]
 800c7dc:	b2db      	uxtb	r3, r3
 800c7de:	4619      	mov	r1, r3
 800c7e0:	6878      	ldr	r0, [r7, #4]
 800c7e2:	f7fe ffc4 	bl	800b76e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c7e6:	4b1d      	ldr	r3, [pc, #116]	; (800c85c <USBD_SetConfig+0x150>)
 800c7e8:	781b      	ldrb	r3, [r3, #0]
 800c7ea:	461a      	mov	r2, r3
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c7f0:	4b1a      	ldr	r3, [pc, #104]	; (800c85c <USBD_SetConfig+0x150>)
 800c7f2:	781b      	ldrb	r3, [r3, #0]
 800c7f4:	4619      	mov	r1, r3
 800c7f6:	6878      	ldr	r0, [r7, #4]
 800c7f8:	f7fe ff9d 	bl	800b736 <USBD_SetClassConfig>
 800c7fc:	4603      	mov	r3, r0
 800c7fe:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c800:	7bfb      	ldrb	r3, [r7, #15]
 800c802:	2b00      	cmp	r3, #0
 800c804:	d00f      	beq.n	800c826 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800c806:	6839      	ldr	r1, [r7, #0]
 800c808:	6878      	ldr	r0, [r7, #4]
 800c80a:	f000 f918 	bl	800ca3e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	685b      	ldr	r3, [r3, #4]
 800c812:	b2db      	uxtb	r3, r3
 800c814:	4619      	mov	r1, r3
 800c816:	6878      	ldr	r0, [r7, #4]
 800c818:	f7fe ffa9 	bl	800b76e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	2202      	movs	r2, #2
 800c820:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c824:	e014      	b.n	800c850 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c826:	6878      	ldr	r0, [r7, #4]
 800c828:	f000 f9d4 	bl	800cbd4 <USBD_CtlSendStatus>
      break;
 800c82c:	e010      	b.n	800c850 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c82e:	6878      	ldr	r0, [r7, #4]
 800c830:	f000 f9d0 	bl	800cbd4 <USBD_CtlSendStatus>
      break;
 800c834:	e00c      	b.n	800c850 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800c836:	6839      	ldr	r1, [r7, #0]
 800c838:	6878      	ldr	r0, [r7, #4]
 800c83a:	f000 f900 	bl	800ca3e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c83e:	4b07      	ldr	r3, [pc, #28]	; (800c85c <USBD_SetConfig+0x150>)
 800c840:	781b      	ldrb	r3, [r3, #0]
 800c842:	4619      	mov	r1, r3
 800c844:	6878      	ldr	r0, [r7, #4]
 800c846:	f7fe ff92 	bl	800b76e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c84a:	2303      	movs	r3, #3
 800c84c:	73fb      	strb	r3, [r7, #15]
      break;
 800c84e:	bf00      	nop
  }

  return ret;
 800c850:	7bfb      	ldrb	r3, [r7, #15]
}
 800c852:	4618      	mov	r0, r3
 800c854:	3710      	adds	r7, #16
 800c856:	46bd      	mov	sp, r7
 800c858:	bd80      	pop	{r7, pc}
 800c85a:	bf00      	nop
 800c85c:	20001058 	.word	0x20001058

0800c860 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c860:	b580      	push	{r7, lr}
 800c862:	b082      	sub	sp, #8
 800c864:	af00      	add	r7, sp, #0
 800c866:	6078      	str	r0, [r7, #4]
 800c868:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c86a:	683b      	ldr	r3, [r7, #0]
 800c86c:	88db      	ldrh	r3, [r3, #6]
 800c86e:	2b01      	cmp	r3, #1
 800c870:	d004      	beq.n	800c87c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c872:	6839      	ldr	r1, [r7, #0]
 800c874:	6878      	ldr	r0, [r7, #4]
 800c876:	f000 f8e2 	bl	800ca3e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c87a:	e023      	b.n	800c8c4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c882:	b2db      	uxtb	r3, r3
 800c884:	2b02      	cmp	r3, #2
 800c886:	dc02      	bgt.n	800c88e <USBD_GetConfig+0x2e>
 800c888:	2b00      	cmp	r3, #0
 800c88a:	dc03      	bgt.n	800c894 <USBD_GetConfig+0x34>
 800c88c:	e015      	b.n	800c8ba <USBD_GetConfig+0x5a>
 800c88e:	2b03      	cmp	r3, #3
 800c890:	d00b      	beq.n	800c8aa <USBD_GetConfig+0x4a>
 800c892:	e012      	b.n	800c8ba <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	2200      	movs	r2, #0
 800c898:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	3308      	adds	r3, #8
 800c89e:	2201      	movs	r2, #1
 800c8a0:	4619      	mov	r1, r3
 800c8a2:	6878      	ldr	r0, [r7, #4]
 800c8a4:	f000 f93c 	bl	800cb20 <USBD_CtlSendData>
        break;
 800c8a8:	e00c      	b.n	800c8c4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	3304      	adds	r3, #4
 800c8ae:	2201      	movs	r2, #1
 800c8b0:	4619      	mov	r1, r3
 800c8b2:	6878      	ldr	r0, [r7, #4]
 800c8b4:	f000 f934 	bl	800cb20 <USBD_CtlSendData>
        break;
 800c8b8:	e004      	b.n	800c8c4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c8ba:	6839      	ldr	r1, [r7, #0]
 800c8bc:	6878      	ldr	r0, [r7, #4]
 800c8be:	f000 f8be 	bl	800ca3e <USBD_CtlError>
        break;
 800c8c2:	bf00      	nop
}
 800c8c4:	bf00      	nop
 800c8c6:	3708      	adds	r7, #8
 800c8c8:	46bd      	mov	sp, r7
 800c8ca:	bd80      	pop	{r7, pc}

0800c8cc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c8cc:	b580      	push	{r7, lr}
 800c8ce:	b082      	sub	sp, #8
 800c8d0:	af00      	add	r7, sp, #0
 800c8d2:	6078      	str	r0, [r7, #4]
 800c8d4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c8dc:	b2db      	uxtb	r3, r3
 800c8de:	3b01      	subs	r3, #1
 800c8e0:	2b02      	cmp	r3, #2
 800c8e2:	d81e      	bhi.n	800c922 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c8e4:	683b      	ldr	r3, [r7, #0]
 800c8e6:	88db      	ldrh	r3, [r3, #6]
 800c8e8:	2b02      	cmp	r3, #2
 800c8ea:	d004      	beq.n	800c8f6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c8ec:	6839      	ldr	r1, [r7, #0]
 800c8ee:	6878      	ldr	r0, [r7, #4]
 800c8f0:	f000 f8a5 	bl	800ca3e <USBD_CtlError>
        break;
 800c8f4:	e01a      	b.n	800c92c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	2201      	movs	r2, #1
 800c8fa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c902:	2b00      	cmp	r3, #0
 800c904:	d005      	beq.n	800c912 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	68db      	ldr	r3, [r3, #12]
 800c90a:	f043 0202 	orr.w	r2, r3, #2
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	330c      	adds	r3, #12
 800c916:	2202      	movs	r2, #2
 800c918:	4619      	mov	r1, r3
 800c91a:	6878      	ldr	r0, [r7, #4]
 800c91c:	f000 f900 	bl	800cb20 <USBD_CtlSendData>
      break;
 800c920:	e004      	b.n	800c92c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c922:	6839      	ldr	r1, [r7, #0]
 800c924:	6878      	ldr	r0, [r7, #4]
 800c926:	f000 f88a 	bl	800ca3e <USBD_CtlError>
      break;
 800c92a:	bf00      	nop
  }
}
 800c92c:	bf00      	nop
 800c92e:	3708      	adds	r7, #8
 800c930:	46bd      	mov	sp, r7
 800c932:	bd80      	pop	{r7, pc}

0800c934 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c934:	b580      	push	{r7, lr}
 800c936:	b082      	sub	sp, #8
 800c938:	af00      	add	r7, sp, #0
 800c93a:	6078      	str	r0, [r7, #4]
 800c93c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c93e:	683b      	ldr	r3, [r7, #0]
 800c940:	885b      	ldrh	r3, [r3, #2]
 800c942:	2b01      	cmp	r3, #1
 800c944:	d107      	bne.n	800c956 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	2201      	movs	r2, #1
 800c94a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c94e:	6878      	ldr	r0, [r7, #4]
 800c950:	f000 f940 	bl	800cbd4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800c954:	e013      	b.n	800c97e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800c956:	683b      	ldr	r3, [r7, #0]
 800c958:	885b      	ldrh	r3, [r3, #2]
 800c95a:	2b02      	cmp	r3, #2
 800c95c:	d10b      	bne.n	800c976 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800c95e:	683b      	ldr	r3, [r7, #0]
 800c960:	889b      	ldrh	r3, [r3, #4]
 800c962:	0a1b      	lsrs	r3, r3, #8
 800c964:	b29b      	uxth	r3, r3
 800c966:	b2da      	uxtb	r2, r3
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800c96e:	6878      	ldr	r0, [r7, #4]
 800c970:	f000 f930 	bl	800cbd4 <USBD_CtlSendStatus>
}
 800c974:	e003      	b.n	800c97e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800c976:	6839      	ldr	r1, [r7, #0]
 800c978:	6878      	ldr	r0, [r7, #4]
 800c97a:	f000 f860 	bl	800ca3e <USBD_CtlError>
}
 800c97e:	bf00      	nop
 800c980:	3708      	adds	r7, #8
 800c982:	46bd      	mov	sp, r7
 800c984:	bd80      	pop	{r7, pc}

0800c986 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c986:	b580      	push	{r7, lr}
 800c988:	b082      	sub	sp, #8
 800c98a:	af00      	add	r7, sp, #0
 800c98c:	6078      	str	r0, [r7, #4]
 800c98e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c996:	b2db      	uxtb	r3, r3
 800c998:	3b01      	subs	r3, #1
 800c99a:	2b02      	cmp	r3, #2
 800c99c:	d80b      	bhi.n	800c9b6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c99e:	683b      	ldr	r3, [r7, #0]
 800c9a0:	885b      	ldrh	r3, [r3, #2]
 800c9a2:	2b01      	cmp	r3, #1
 800c9a4:	d10c      	bne.n	800c9c0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	2200      	movs	r2, #0
 800c9aa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c9ae:	6878      	ldr	r0, [r7, #4]
 800c9b0:	f000 f910 	bl	800cbd4 <USBD_CtlSendStatus>
      }
      break;
 800c9b4:	e004      	b.n	800c9c0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c9b6:	6839      	ldr	r1, [r7, #0]
 800c9b8:	6878      	ldr	r0, [r7, #4]
 800c9ba:	f000 f840 	bl	800ca3e <USBD_CtlError>
      break;
 800c9be:	e000      	b.n	800c9c2 <USBD_ClrFeature+0x3c>
      break;
 800c9c0:	bf00      	nop
  }
}
 800c9c2:	bf00      	nop
 800c9c4:	3708      	adds	r7, #8
 800c9c6:	46bd      	mov	sp, r7
 800c9c8:	bd80      	pop	{r7, pc}

0800c9ca <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c9ca:	b580      	push	{r7, lr}
 800c9cc:	b084      	sub	sp, #16
 800c9ce:	af00      	add	r7, sp, #0
 800c9d0:	6078      	str	r0, [r7, #4]
 800c9d2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c9d4:	683b      	ldr	r3, [r7, #0]
 800c9d6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	781a      	ldrb	r2, [r3, #0]
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	3301      	adds	r3, #1
 800c9e4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	781a      	ldrb	r2, [r3, #0]
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	3301      	adds	r3, #1
 800c9f2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c9f4:	68f8      	ldr	r0, [r7, #12]
 800c9f6:	f7ff fa41 	bl	800be7c <SWAPBYTE>
 800c9fa:	4603      	mov	r3, r0
 800c9fc:	461a      	mov	r2, r3
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	3301      	adds	r3, #1
 800ca06:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	3301      	adds	r3, #1
 800ca0c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800ca0e:	68f8      	ldr	r0, [r7, #12]
 800ca10:	f7ff fa34 	bl	800be7c <SWAPBYTE>
 800ca14:	4603      	mov	r3, r0
 800ca16:	461a      	mov	r2, r3
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	3301      	adds	r3, #1
 800ca20:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	3301      	adds	r3, #1
 800ca26:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800ca28:	68f8      	ldr	r0, [r7, #12]
 800ca2a:	f7ff fa27 	bl	800be7c <SWAPBYTE>
 800ca2e:	4603      	mov	r3, r0
 800ca30:	461a      	mov	r2, r3
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	80da      	strh	r2, [r3, #6]
}
 800ca36:	bf00      	nop
 800ca38:	3710      	adds	r7, #16
 800ca3a:	46bd      	mov	sp, r7
 800ca3c:	bd80      	pop	{r7, pc}

0800ca3e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ca3e:	b580      	push	{r7, lr}
 800ca40:	b082      	sub	sp, #8
 800ca42:	af00      	add	r7, sp, #0
 800ca44:	6078      	str	r0, [r7, #4]
 800ca46:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ca48:	2180      	movs	r1, #128	; 0x80
 800ca4a:	6878      	ldr	r0, [r7, #4]
 800ca4c:	f000 fc38 	bl	800d2c0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ca50:	2100      	movs	r1, #0
 800ca52:	6878      	ldr	r0, [r7, #4]
 800ca54:	f000 fc34 	bl	800d2c0 <USBD_LL_StallEP>
}
 800ca58:	bf00      	nop
 800ca5a:	3708      	adds	r7, #8
 800ca5c:	46bd      	mov	sp, r7
 800ca5e:	bd80      	pop	{r7, pc}

0800ca60 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ca60:	b580      	push	{r7, lr}
 800ca62:	b086      	sub	sp, #24
 800ca64:	af00      	add	r7, sp, #0
 800ca66:	60f8      	str	r0, [r7, #12]
 800ca68:	60b9      	str	r1, [r7, #8]
 800ca6a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ca6c:	2300      	movs	r3, #0
 800ca6e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d036      	beq.n	800cae4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800ca7a:	6938      	ldr	r0, [r7, #16]
 800ca7c:	f000 f836 	bl	800caec <USBD_GetLen>
 800ca80:	4603      	mov	r3, r0
 800ca82:	3301      	adds	r3, #1
 800ca84:	b29b      	uxth	r3, r3
 800ca86:	005b      	lsls	r3, r3, #1
 800ca88:	b29a      	uxth	r2, r3
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800ca8e:	7dfb      	ldrb	r3, [r7, #23]
 800ca90:	68ba      	ldr	r2, [r7, #8]
 800ca92:	4413      	add	r3, r2
 800ca94:	687a      	ldr	r2, [r7, #4]
 800ca96:	7812      	ldrb	r2, [r2, #0]
 800ca98:	701a      	strb	r2, [r3, #0]
  idx++;
 800ca9a:	7dfb      	ldrb	r3, [r7, #23]
 800ca9c:	3301      	adds	r3, #1
 800ca9e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800caa0:	7dfb      	ldrb	r3, [r7, #23]
 800caa2:	68ba      	ldr	r2, [r7, #8]
 800caa4:	4413      	add	r3, r2
 800caa6:	2203      	movs	r2, #3
 800caa8:	701a      	strb	r2, [r3, #0]
  idx++;
 800caaa:	7dfb      	ldrb	r3, [r7, #23]
 800caac:	3301      	adds	r3, #1
 800caae:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800cab0:	e013      	b.n	800cada <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800cab2:	7dfb      	ldrb	r3, [r7, #23]
 800cab4:	68ba      	ldr	r2, [r7, #8]
 800cab6:	4413      	add	r3, r2
 800cab8:	693a      	ldr	r2, [r7, #16]
 800caba:	7812      	ldrb	r2, [r2, #0]
 800cabc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800cabe:	693b      	ldr	r3, [r7, #16]
 800cac0:	3301      	adds	r3, #1
 800cac2:	613b      	str	r3, [r7, #16]
    idx++;
 800cac4:	7dfb      	ldrb	r3, [r7, #23]
 800cac6:	3301      	adds	r3, #1
 800cac8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800caca:	7dfb      	ldrb	r3, [r7, #23]
 800cacc:	68ba      	ldr	r2, [r7, #8]
 800cace:	4413      	add	r3, r2
 800cad0:	2200      	movs	r2, #0
 800cad2:	701a      	strb	r2, [r3, #0]
    idx++;
 800cad4:	7dfb      	ldrb	r3, [r7, #23]
 800cad6:	3301      	adds	r3, #1
 800cad8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800cada:	693b      	ldr	r3, [r7, #16]
 800cadc:	781b      	ldrb	r3, [r3, #0]
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d1e7      	bne.n	800cab2 <USBD_GetString+0x52>
 800cae2:	e000      	b.n	800cae6 <USBD_GetString+0x86>
    return;
 800cae4:	bf00      	nop
  }
}
 800cae6:	3718      	adds	r7, #24
 800cae8:	46bd      	mov	sp, r7
 800caea:	bd80      	pop	{r7, pc}

0800caec <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800caec:	b480      	push	{r7}
 800caee:	b085      	sub	sp, #20
 800caf0:	af00      	add	r7, sp, #0
 800caf2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800caf4:	2300      	movs	r3, #0
 800caf6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800cafc:	e005      	b.n	800cb0a <USBD_GetLen+0x1e>
  {
    len++;
 800cafe:	7bfb      	ldrb	r3, [r7, #15]
 800cb00:	3301      	adds	r3, #1
 800cb02:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800cb04:	68bb      	ldr	r3, [r7, #8]
 800cb06:	3301      	adds	r3, #1
 800cb08:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800cb0a:	68bb      	ldr	r3, [r7, #8]
 800cb0c:	781b      	ldrb	r3, [r3, #0]
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d1f5      	bne.n	800cafe <USBD_GetLen+0x12>
  }

  return len;
 800cb12:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb14:	4618      	mov	r0, r3
 800cb16:	3714      	adds	r7, #20
 800cb18:	46bd      	mov	sp, r7
 800cb1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb1e:	4770      	bx	lr

0800cb20 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800cb20:	b580      	push	{r7, lr}
 800cb22:	b084      	sub	sp, #16
 800cb24:	af00      	add	r7, sp, #0
 800cb26:	60f8      	str	r0, [r7, #12]
 800cb28:	60b9      	str	r1, [r7, #8]
 800cb2a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	2202      	movs	r2, #2
 800cb30:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	687a      	ldr	r2, [r7, #4]
 800cb38:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	687a      	ldr	r2, [r7, #4]
 800cb3e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	68ba      	ldr	r2, [r7, #8]
 800cb44:	2100      	movs	r1, #0
 800cb46:	68f8      	ldr	r0, [r7, #12]
 800cb48:	f000 fc43 	bl	800d3d2 <USBD_LL_Transmit>

  return USBD_OK;
 800cb4c:	2300      	movs	r3, #0
}
 800cb4e:	4618      	mov	r0, r3
 800cb50:	3710      	adds	r7, #16
 800cb52:	46bd      	mov	sp, r7
 800cb54:	bd80      	pop	{r7, pc}

0800cb56 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800cb56:	b580      	push	{r7, lr}
 800cb58:	b084      	sub	sp, #16
 800cb5a:	af00      	add	r7, sp, #0
 800cb5c:	60f8      	str	r0, [r7, #12]
 800cb5e:	60b9      	str	r1, [r7, #8]
 800cb60:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	68ba      	ldr	r2, [r7, #8]
 800cb66:	2100      	movs	r1, #0
 800cb68:	68f8      	ldr	r0, [r7, #12]
 800cb6a:	f000 fc32 	bl	800d3d2 <USBD_LL_Transmit>

  return USBD_OK;
 800cb6e:	2300      	movs	r3, #0
}
 800cb70:	4618      	mov	r0, r3
 800cb72:	3710      	adds	r7, #16
 800cb74:	46bd      	mov	sp, r7
 800cb76:	bd80      	pop	{r7, pc}

0800cb78 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800cb78:	b580      	push	{r7, lr}
 800cb7a:	b084      	sub	sp, #16
 800cb7c:	af00      	add	r7, sp, #0
 800cb7e:	60f8      	str	r0, [r7, #12]
 800cb80:	60b9      	str	r1, [r7, #8]
 800cb82:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	2203      	movs	r2, #3
 800cb88:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	687a      	ldr	r2, [r7, #4]
 800cb90:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800cb94:	68fb      	ldr	r3, [r7, #12]
 800cb96:	687a      	ldr	r2, [r7, #4]
 800cb98:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	68ba      	ldr	r2, [r7, #8]
 800cba0:	2100      	movs	r1, #0
 800cba2:	68f8      	ldr	r0, [r7, #12]
 800cba4:	f000 fc36 	bl	800d414 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cba8:	2300      	movs	r3, #0
}
 800cbaa:	4618      	mov	r0, r3
 800cbac:	3710      	adds	r7, #16
 800cbae:	46bd      	mov	sp, r7
 800cbb0:	bd80      	pop	{r7, pc}

0800cbb2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800cbb2:	b580      	push	{r7, lr}
 800cbb4:	b084      	sub	sp, #16
 800cbb6:	af00      	add	r7, sp, #0
 800cbb8:	60f8      	str	r0, [r7, #12]
 800cbba:	60b9      	str	r1, [r7, #8]
 800cbbc:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	68ba      	ldr	r2, [r7, #8]
 800cbc2:	2100      	movs	r1, #0
 800cbc4:	68f8      	ldr	r0, [r7, #12]
 800cbc6:	f000 fc25 	bl	800d414 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cbca:	2300      	movs	r3, #0
}
 800cbcc:	4618      	mov	r0, r3
 800cbce:	3710      	adds	r7, #16
 800cbd0:	46bd      	mov	sp, r7
 800cbd2:	bd80      	pop	{r7, pc}

0800cbd4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800cbd4:	b580      	push	{r7, lr}
 800cbd6:	b082      	sub	sp, #8
 800cbd8:	af00      	add	r7, sp, #0
 800cbda:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	2204      	movs	r2, #4
 800cbe0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800cbe4:	2300      	movs	r3, #0
 800cbe6:	2200      	movs	r2, #0
 800cbe8:	2100      	movs	r1, #0
 800cbea:	6878      	ldr	r0, [r7, #4]
 800cbec:	f000 fbf1 	bl	800d3d2 <USBD_LL_Transmit>

  return USBD_OK;
 800cbf0:	2300      	movs	r3, #0
}
 800cbf2:	4618      	mov	r0, r3
 800cbf4:	3708      	adds	r7, #8
 800cbf6:	46bd      	mov	sp, r7
 800cbf8:	bd80      	pop	{r7, pc}

0800cbfa <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800cbfa:	b580      	push	{r7, lr}
 800cbfc:	b082      	sub	sp, #8
 800cbfe:	af00      	add	r7, sp, #0
 800cc00:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	2205      	movs	r2, #5
 800cc06:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cc0a:	2300      	movs	r3, #0
 800cc0c:	2200      	movs	r2, #0
 800cc0e:	2100      	movs	r1, #0
 800cc10:	6878      	ldr	r0, [r7, #4]
 800cc12:	f000 fbff 	bl	800d414 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cc16:	2300      	movs	r3, #0
}
 800cc18:	4618      	mov	r0, r3
 800cc1a:	3708      	adds	r7, #8
 800cc1c:	46bd      	mov	sp, r7
 800cc1e:	bd80      	pop	{r7, pc}

0800cc20 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800cc20:	b580      	push	{r7, lr}
 800cc22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800cc24:	2200      	movs	r2, #0
 800cc26:	4912      	ldr	r1, [pc, #72]	; (800cc70 <MX_USB_DEVICE_Init+0x50>)
 800cc28:	4812      	ldr	r0, [pc, #72]	; (800cc74 <MX_USB_DEVICE_Init+0x54>)
 800cc2a:	f7fe fd07 	bl	800b63c <USBD_Init>
 800cc2e:	4603      	mov	r3, r0
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d001      	beq.n	800cc38 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800cc34:	f7f5 fa82 	bl	800213c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 800cc38:	490f      	ldr	r1, [pc, #60]	; (800cc78 <MX_USB_DEVICE_Init+0x58>)
 800cc3a:	480e      	ldr	r0, [pc, #56]	; (800cc74 <MX_USB_DEVICE_Init+0x54>)
 800cc3c:	f7fe fd2e 	bl	800b69c <USBD_RegisterClass>
 800cc40:	4603      	mov	r3, r0
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d001      	beq.n	800cc4a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800cc46:	f7f5 fa79 	bl	800213c <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 800cc4a:	490c      	ldr	r1, [pc, #48]	; (800cc7c <MX_USB_DEVICE_Init+0x5c>)
 800cc4c:	4809      	ldr	r0, [pc, #36]	; (800cc74 <MX_USB_DEVICE_Init+0x54>)
 800cc4e:	f7fe fcdb 	bl	800b608 <USBD_CUSTOM_HID_RegisterInterface>
 800cc52:	4603      	mov	r3, r0
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d001      	beq.n	800cc5c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800cc58:	f7f5 fa70 	bl	800213c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800cc5c:	4805      	ldr	r0, [pc, #20]	; (800cc74 <MX_USB_DEVICE_Init+0x54>)
 800cc5e:	f7fe fd53 	bl	800b708 <USBD_Start>
 800cc62:	4603      	mov	r3, r0
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d001      	beq.n	800cc6c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800cc68:	f7f5 fa68 	bl	800213c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800cc6c:	bf00      	nop
 800cc6e:	bd80      	pop	{r7, pc}
 800cc70:	200000e0 	.word	0x200000e0
 800cc74:	2000105c 	.word	0x2000105c
 800cc78:	20000050 	.word	0x20000050
 800cc7c:	200000d0 	.word	0x200000d0

0800cc80 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 800cc80:	b480      	push	{r7}
 800cc82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800cc84:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800cc86:	4618      	mov	r0, r3
 800cc88:	46bd      	mov	sp, r7
 800cc8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc8e:	4770      	bx	lr

0800cc90 <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 800cc90:	b480      	push	{r7}
 800cc92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 800cc94:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800cc96:	4618      	mov	r0, r3
 800cc98:	46bd      	mov	sp, r7
 800cc9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc9e:	4770      	bx	lr

0800cca0 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 800cca0:	b580      	push	{r7, lr}
 800cca2:	b082      	sub	sp, #8
 800cca4:	af00      	add	r7, sp, #0
 800cca6:	4603      	mov	r3, r0
 800cca8:	460a      	mov	r2, r1
 800ccaa:	71fb      	strb	r3, [r7, #7]
 800ccac:	4613      	mov	r3, r2
 800ccae:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  UNUSED(event_idx);
  UNUSED(state);

  /* Start next USB packet transfer once data processing is completed */
  if (USBD_CUSTOM_HID_ReceivePacket(&hUsbDeviceFS) != (uint8_t)USBD_OK)
 800ccb0:	4806      	ldr	r0, [pc, #24]	; (800cccc <CUSTOM_HID_OutEvent_FS+0x2c>)
 800ccb2:	f7fe fc47 	bl	800b544 <USBD_CUSTOM_HID_ReceivePacket>
 800ccb6:	4603      	mov	r3, r0
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d002      	beq.n	800ccc2 <CUSTOM_HID_OutEvent_FS+0x22>
  {
    return -1;
 800ccbc:	f04f 33ff 	mov.w	r3, #4294967295
 800ccc0:	e000      	b.n	800ccc4 <CUSTOM_HID_OutEvent_FS+0x24>
  }

  return (USBD_OK);
 800ccc2:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800ccc4:	4618      	mov	r0, r3
 800ccc6:	3708      	adds	r7, #8
 800ccc8:	46bd      	mov	sp, r7
 800ccca:	bd80      	pop	{r7, pc}
 800cccc:	2000105c 	.word	0x2000105c

0800ccd0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ccd0:	b480      	push	{r7}
 800ccd2:	b083      	sub	sp, #12
 800ccd4:	af00      	add	r7, sp, #0
 800ccd6:	4603      	mov	r3, r0
 800ccd8:	6039      	str	r1, [r7, #0]
 800ccda:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800ccdc:	683b      	ldr	r3, [r7, #0]
 800ccde:	2212      	movs	r2, #18
 800cce0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800cce2:	4b03      	ldr	r3, [pc, #12]	; (800ccf0 <USBD_FS_DeviceDescriptor+0x20>)
}
 800cce4:	4618      	mov	r0, r3
 800cce6:	370c      	adds	r7, #12
 800cce8:	46bd      	mov	sp, r7
 800ccea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccee:	4770      	bx	lr
 800ccf0:	200000fc 	.word	0x200000fc

0800ccf4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ccf4:	b480      	push	{r7}
 800ccf6:	b083      	sub	sp, #12
 800ccf8:	af00      	add	r7, sp, #0
 800ccfa:	4603      	mov	r3, r0
 800ccfc:	6039      	str	r1, [r7, #0]
 800ccfe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800cd00:	683b      	ldr	r3, [r7, #0]
 800cd02:	2204      	movs	r2, #4
 800cd04:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800cd06:	4b03      	ldr	r3, [pc, #12]	; (800cd14 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800cd08:	4618      	mov	r0, r3
 800cd0a:	370c      	adds	r7, #12
 800cd0c:	46bd      	mov	sp, r7
 800cd0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd12:	4770      	bx	lr
 800cd14:	20000110 	.word	0x20000110

0800cd18 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cd18:	b580      	push	{r7, lr}
 800cd1a:	b082      	sub	sp, #8
 800cd1c:	af00      	add	r7, sp, #0
 800cd1e:	4603      	mov	r3, r0
 800cd20:	6039      	str	r1, [r7, #0]
 800cd22:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cd24:	79fb      	ldrb	r3, [r7, #7]
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d105      	bne.n	800cd36 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cd2a:	683a      	ldr	r2, [r7, #0]
 800cd2c:	4907      	ldr	r1, [pc, #28]	; (800cd4c <USBD_FS_ProductStrDescriptor+0x34>)
 800cd2e:	4808      	ldr	r0, [pc, #32]	; (800cd50 <USBD_FS_ProductStrDescriptor+0x38>)
 800cd30:	f7ff fe96 	bl	800ca60 <USBD_GetString>
 800cd34:	e004      	b.n	800cd40 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cd36:	683a      	ldr	r2, [r7, #0]
 800cd38:	4904      	ldr	r1, [pc, #16]	; (800cd4c <USBD_FS_ProductStrDescriptor+0x34>)
 800cd3a:	4805      	ldr	r0, [pc, #20]	; (800cd50 <USBD_FS_ProductStrDescriptor+0x38>)
 800cd3c:	f7ff fe90 	bl	800ca60 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cd40:	4b02      	ldr	r3, [pc, #8]	; (800cd4c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800cd42:	4618      	mov	r0, r3
 800cd44:	3708      	adds	r7, #8
 800cd46:	46bd      	mov	sp, r7
 800cd48:	bd80      	pop	{r7, pc}
 800cd4a:	bf00      	nop
 800cd4c:	20001338 	.word	0x20001338
 800cd50:	0800e8f8 	.word	0x0800e8f8

0800cd54 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cd54:	b580      	push	{r7, lr}
 800cd56:	b082      	sub	sp, #8
 800cd58:	af00      	add	r7, sp, #0
 800cd5a:	4603      	mov	r3, r0
 800cd5c:	6039      	str	r1, [r7, #0]
 800cd5e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800cd60:	683a      	ldr	r2, [r7, #0]
 800cd62:	4904      	ldr	r1, [pc, #16]	; (800cd74 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800cd64:	4804      	ldr	r0, [pc, #16]	; (800cd78 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800cd66:	f7ff fe7b 	bl	800ca60 <USBD_GetString>
  return USBD_StrDesc;
 800cd6a:	4b02      	ldr	r3, [pc, #8]	; (800cd74 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800cd6c:	4618      	mov	r0, r3
 800cd6e:	3708      	adds	r7, #8
 800cd70:	46bd      	mov	sp, r7
 800cd72:	bd80      	pop	{r7, pc}
 800cd74:	20001338 	.word	0x20001338
 800cd78:	0800e918 	.word	0x0800e918

0800cd7c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cd7c:	b580      	push	{r7, lr}
 800cd7e:	b082      	sub	sp, #8
 800cd80:	af00      	add	r7, sp, #0
 800cd82:	4603      	mov	r3, r0
 800cd84:	6039      	str	r1, [r7, #0]
 800cd86:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800cd88:	683b      	ldr	r3, [r7, #0]
 800cd8a:	221a      	movs	r2, #26
 800cd8c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800cd8e:	f000 f843 	bl	800ce18 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800cd92:	4b02      	ldr	r3, [pc, #8]	; (800cd9c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800cd94:	4618      	mov	r0, r3
 800cd96:	3708      	adds	r7, #8
 800cd98:	46bd      	mov	sp, r7
 800cd9a:	bd80      	pop	{r7, pc}
 800cd9c:	20000114 	.word	0x20000114

0800cda0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cda0:	b580      	push	{r7, lr}
 800cda2:	b082      	sub	sp, #8
 800cda4:	af00      	add	r7, sp, #0
 800cda6:	4603      	mov	r3, r0
 800cda8:	6039      	str	r1, [r7, #0]
 800cdaa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800cdac:	79fb      	ldrb	r3, [r7, #7]
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d105      	bne.n	800cdbe <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cdb2:	683a      	ldr	r2, [r7, #0]
 800cdb4:	4907      	ldr	r1, [pc, #28]	; (800cdd4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800cdb6:	4808      	ldr	r0, [pc, #32]	; (800cdd8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800cdb8:	f7ff fe52 	bl	800ca60 <USBD_GetString>
 800cdbc:	e004      	b.n	800cdc8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cdbe:	683a      	ldr	r2, [r7, #0]
 800cdc0:	4904      	ldr	r1, [pc, #16]	; (800cdd4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800cdc2:	4805      	ldr	r0, [pc, #20]	; (800cdd8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800cdc4:	f7ff fe4c 	bl	800ca60 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cdc8:	4b02      	ldr	r3, [pc, #8]	; (800cdd4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800cdca:	4618      	mov	r0, r3
 800cdcc:	3708      	adds	r7, #8
 800cdce:	46bd      	mov	sp, r7
 800cdd0:	bd80      	pop	{r7, pc}
 800cdd2:	bf00      	nop
 800cdd4:	20001338 	.word	0x20001338
 800cdd8:	0800e92c 	.word	0x0800e92c

0800cddc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cddc:	b580      	push	{r7, lr}
 800cdde:	b082      	sub	sp, #8
 800cde0:	af00      	add	r7, sp, #0
 800cde2:	4603      	mov	r3, r0
 800cde4:	6039      	str	r1, [r7, #0]
 800cde6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cde8:	79fb      	ldrb	r3, [r7, #7]
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d105      	bne.n	800cdfa <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cdee:	683a      	ldr	r2, [r7, #0]
 800cdf0:	4907      	ldr	r1, [pc, #28]	; (800ce10 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cdf2:	4808      	ldr	r0, [pc, #32]	; (800ce14 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cdf4:	f7ff fe34 	bl	800ca60 <USBD_GetString>
 800cdf8:	e004      	b.n	800ce04 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cdfa:	683a      	ldr	r2, [r7, #0]
 800cdfc:	4904      	ldr	r1, [pc, #16]	; (800ce10 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cdfe:	4805      	ldr	r0, [pc, #20]	; (800ce14 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ce00:	f7ff fe2e 	bl	800ca60 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ce04:	4b02      	ldr	r3, [pc, #8]	; (800ce10 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800ce06:	4618      	mov	r0, r3
 800ce08:	3708      	adds	r7, #8
 800ce0a:	46bd      	mov	sp, r7
 800ce0c:	bd80      	pop	{r7, pc}
 800ce0e:	bf00      	nop
 800ce10:	20001338 	.word	0x20001338
 800ce14:	0800e940 	.word	0x0800e940

0800ce18 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ce18:	b580      	push	{r7, lr}
 800ce1a:	b084      	sub	sp, #16
 800ce1c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ce1e:	4b0f      	ldr	r3, [pc, #60]	; (800ce5c <Get_SerialNum+0x44>)
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ce24:	4b0e      	ldr	r3, [pc, #56]	; (800ce60 <Get_SerialNum+0x48>)
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ce2a:	4b0e      	ldr	r3, [pc, #56]	; (800ce64 <Get_SerialNum+0x4c>)
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ce30:	68fa      	ldr	r2, [r7, #12]
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	4413      	add	r3, r2
 800ce36:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d009      	beq.n	800ce52 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ce3e:	2208      	movs	r2, #8
 800ce40:	4909      	ldr	r1, [pc, #36]	; (800ce68 <Get_SerialNum+0x50>)
 800ce42:	68f8      	ldr	r0, [r7, #12]
 800ce44:	f000 f814 	bl	800ce70 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ce48:	2204      	movs	r2, #4
 800ce4a:	4908      	ldr	r1, [pc, #32]	; (800ce6c <Get_SerialNum+0x54>)
 800ce4c:	68b8      	ldr	r0, [r7, #8]
 800ce4e:	f000 f80f 	bl	800ce70 <IntToUnicode>
  }
}
 800ce52:	bf00      	nop
 800ce54:	3710      	adds	r7, #16
 800ce56:	46bd      	mov	sp, r7
 800ce58:	bd80      	pop	{r7, pc}
 800ce5a:	bf00      	nop
 800ce5c:	1fff7a10 	.word	0x1fff7a10
 800ce60:	1fff7a14 	.word	0x1fff7a14
 800ce64:	1fff7a18 	.word	0x1fff7a18
 800ce68:	20000116 	.word	0x20000116
 800ce6c:	20000126 	.word	0x20000126

0800ce70 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ce70:	b480      	push	{r7}
 800ce72:	b087      	sub	sp, #28
 800ce74:	af00      	add	r7, sp, #0
 800ce76:	60f8      	str	r0, [r7, #12]
 800ce78:	60b9      	str	r1, [r7, #8]
 800ce7a:	4613      	mov	r3, r2
 800ce7c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ce7e:	2300      	movs	r3, #0
 800ce80:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ce82:	2300      	movs	r3, #0
 800ce84:	75fb      	strb	r3, [r7, #23]
 800ce86:	e027      	b.n	800ced8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	0f1b      	lsrs	r3, r3, #28
 800ce8c:	2b09      	cmp	r3, #9
 800ce8e:	d80b      	bhi.n	800cea8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	0f1b      	lsrs	r3, r3, #28
 800ce94:	b2da      	uxtb	r2, r3
 800ce96:	7dfb      	ldrb	r3, [r7, #23]
 800ce98:	005b      	lsls	r3, r3, #1
 800ce9a:	4619      	mov	r1, r3
 800ce9c:	68bb      	ldr	r3, [r7, #8]
 800ce9e:	440b      	add	r3, r1
 800cea0:	3230      	adds	r2, #48	; 0x30
 800cea2:	b2d2      	uxtb	r2, r2
 800cea4:	701a      	strb	r2, [r3, #0]
 800cea6:	e00a      	b.n	800cebe <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	0f1b      	lsrs	r3, r3, #28
 800ceac:	b2da      	uxtb	r2, r3
 800ceae:	7dfb      	ldrb	r3, [r7, #23]
 800ceb0:	005b      	lsls	r3, r3, #1
 800ceb2:	4619      	mov	r1, r3
 800ceb4:	68bb      	ldr	r3, [r7, #8]
 800ceb6:	440b      	add	r3, r1
 800ceb8:	3237      	adds	r2, #55	; 0x37
 800ceba:	b2d2      	uxtb	r2, r2
 800cebc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	011b      	lsls	r3, r3, #4
 800cec2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800cec4:	7dfb      	ldrb	r3, [r7, #23]
 800cec6:	005b      	lsls	r3, r3, #1
 800cec8:	3301      	adds	r3, #1
 800ceca:	68ba      	ldr	r2, [r7, #8]
 800cecc:	4413      	add	r3, r2
 800cece:	2200      	movs	r2, #0
 800ced0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ced2:	7dfb      	ldrb	r3, [r7, #23]
 800ced4:	3301      	adds	r3, #1
 800ced6:	75fb      	strb	r3, [r7, #23]
 800ced8:	7dfa      	ldrb	r2, [r7, #23]
 800ceda:	79fb      	ldrb	r3, [r7, #7]
 800cedc:	429a      	cmp	r2, r3
 800cede:	d3d3      	bcc.n	800ce88 <IntToUnicode+0x18>
  }
}
 800cee0:	bf00      	nop
 800cee2:	bf00      	nop
 800cee4:	371c      	adds	r7, #28
 800cee6:	46bd      	mov	sp, r7
 800cee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceec:	4770      	bx	lr
	...

0800cef0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800cef0:	b580      	push	{r7, lr}
 800cef2:	b08a      	sub	sp, #40	; 0x28
 800cef4:	af00      	add	r7, sp, #0
 800cef6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cef8:	f107 0314 	add.w	r3, r7, #20
 800cefc:	2200      	movs	r2, #0
 800cefe:	601a      	str	r2, [r3, #0]
 800cf00:	605a      	str	r2, [r3, #4]
 800cf02:	609a      	str	r2, [r3, #8]
 800cf04:	60da      	str	r2, [r3, #12]
 800cf06:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cf10:	d13a      	bne.n	800cf88 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cf12:	2300      	movs	r3, #0
 800cf14:	613b      	str	r3, [r7, #16]
 800cf16:	4b1e      	ldr	r3, [pc, #120]	; (800cf90 <HAL_PCD_MspInit+0xa0>)
 800cf18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf1a:	4a1d      	ldr	r2, [pc, #116]	; (800cf90 <HAL_PCD_MspInit+0xa0>)
 800cf1c:	f043 0301 	orr.w	r3, r3, #1
 800cf20:	6313      	str	r3, [r2, #48]	; 0x30
 800cf22:	4b1b      	ldr	r3, [pc, #108]	; (800cf90 <HAL_PCD_MspInit+0xa0>)
 800cf24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf26:	f003 0301 	and.w	r3, r3, #1
 800cf2a:	613b      	str	r3, [r7, #16]
 800cf2c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800cf2e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800cf32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cf34:	2302      	movs	r3, #2
 800cf36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cf38:	2300      	movs	r3, #0
 800cf3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cf3c:	2303      	movs	r3, #3
 800cf3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800cf40:	230a      	movs	r3, #10
 800cf42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cf44:	f107 0314 	add.w	r3, r7, #20
 800cf48:	4619      	mov	r1, r3
 800cf4a:	4812      	ldr	r0, [pc, #72]	; (800cf94 <HAL_PCD_MspInit+0xa4>)
 800cf4c:	f7f7 fae0 	bl	8004510 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800cf50:	4b0f      	ldr	r3, [pc, #60]	; (800cf90 <HAL_PCD_MspInit+0xa0>)
 800cf52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf54:	4a0e      	ldr	r2, [pc, #56]	; (800cf90 <HAL_PCD_MspInit+0xa0>)
 800cf56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cf5a:	6353      	str	r3, [r2, #52]	; 0x34
 800cf5c:	2300      	movs	r3, #0
 800cf5e:	60fb      	str	r3, [r7, #12]
 800cf60:	4b0b      	ldr	r3, [pc, #44]	; (800cf90 <HAL_PCD_MspInit+0xa0>)
 800cf62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cf64:	4a0a      	ldr	r2, [pc, #40]	; (800cf90 <HAL_PCD_MspInit+0xa0>)
 800cf66:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800cf6a:	6453      	str	r3, [r2, #68]	; 0x44
 800cf6c:	4b08      	ldr	r3, [pc, #32]	; (800cf90 <HAL_PCD_MspInit+0xa0>)
 800cf6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cf70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cf74:	60fb      	str	r3, [r7, #12]
 800cf76:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 2, 0);
 800cf78:	2200      	movs	r2, #0
 800cf7a:	2102      	movs	r1, #2
 800cf7c:	2043      	movs	r0, #67	; 0x43
 800cf7e:	f7f6 fe66 	bl	8003c4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800cf82:	2043      	movs	r0, #67	; 0x43
 800cf84:	f7f6 fe7f 	bl	8003c86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800cf88:	bf00      	nop
 800cf8a:	3728      	adds	r7, #40	; 0x28
 800cf8c:	46bd      	mov	sp, r7
 800cf8e:	bd80      	pop	{r7, pc}
 800cf90:	40023800 	.word	0x40023800
 800cf94:	40020000 	.word	0x40020000

0800cf98 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf98:	b580      	push	{r7, lr}
 800cf9a:	b082      	sub	sp, #8
 800cf9c:	af00      	add	r7, sp, #0
 800cf9e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800cfac:	4619      	mov	r1, r3
 800cfae:	4610      	mov	r0, r2
 800cfb0:	f7fe fbf7 	bl	800b7a2 <USBD_LL_SetupStage>
}
 800cfb4:	bf00      	nop
 800cfb6:	3708      	adds	r7, #8
 800cfb8:	46bd      	mov	sp, r7
 800cfba:	bd80      	pop	{r7, pc}

0800cfbc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cfbc:	b580      	push	{r7, lr}
 800cfbe:	b082      	sub	sp, #8
 800cfc0:	af00      	add	r7, sp, #0
 800cfc2:	6078      	str	r0, [r7, #4]
 800cfc4:	460b      	mov	r3, r1
 800cfc6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800cfce:	78fa      	ldrb	r2, [r7, #3]
 800cfd0:	6879      	ldr	r1, [r7, #4]
 800cfd2:	4613      	mov	r3, r2
 800cfd4:	00db      	lsls	r3, r3, #3
 800cfd6:	4413      	add	r3, r2
 800cfd8:	009b      	lsls	r3, r3, #2
 800cfda:	440b      	add	r3, r1
 800cfdc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800cfe0:	681a      	ldr	r2, [r3, #0]
 800cfe2:	78fb      	ldrb	r3, [r7, #3]
 800cfe4:	4619      	mov	r1, r3
 800cfe6:	f7fe fc31 	bl	800b84c <USBD_LL_DataOutStage>
}
 800cfea:	bf00      	nop
 800cfec:	3708      	adds	r7, #8
 800cfee:	46bd      	mov	sp, r7
 800cff0:	bd80      	pop	{r7, pc}

0800cff2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cff2:	b580      	push	{r7, lr}
 800cff4:	b082      	sub	sp, #8
 800cff6:	af00      	add	r7, sp, #0
 800cff8:	6078      	str	r0, [r7, #4]
 800cffa:	460b      	mov	r3, r1
 800cffc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800d004:	78fa      	ldrb	r2, [r7, #3]
 800d006:	6879      	ldr	r1, [r7, #4]
 800d008:	4613      	mov	r3, r2
 800d00a:	00db      	lsls	r3, r3, #3
 800d00c:	4413      	add	r3, r2
 800d00e:	009b      	lsls	r3, r3, #2
 800d010:	440b      	add	r3, r1
 800d012:	334c      	adds	r3, #76	; 0x4c
 800d014:	681a      	ldr	r2, [r3, #0]
 800d016:	78fb      	ldrb	r3, [r7, #3]
 800d018:	4619      	mov	r1, r3
 800d01a:	f7fe fcca 	bl	800b9b2 <USBD_LL_DataInStage>
}
 800d01e:	bf00      	nop
 800d020:	3708      	adds	r7, #8
 800d022:	46bd      	mov	sp, r7
 800d024:	bd80      	pop	{r7, pc}

0800d026 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d026:	b580      	push	{r7, lr}
 800d028:	b082      	sub	sp, #8
 800d02a:	af00      	add	r7, sp, #0
 800d02c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d034:	4618      	mov	r0, r3
 800d036:	f7fe fdfe 	bl	800bc36 <USBD_LL_SOF>
}
 800d03a:	bf00      	nop
 800d03c:	3708      	adds	r7, #8
 800d03e:	46bd      	mov	sp, r7
 800d040:	bd80      	pop	{r7, pc}

0800d042 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d042:	b580      	push	{r7, lr}
 800d044:	b084      	sub	sp, #16
 800d046:	af00      	add	r7, sp, #0
 800d048:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d04a:	2301      	movs	r3, #1
 800d04c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	68db      	ldr	r3, [r3, #12]
 800d052:	2b02      	cmp	r3, #2
 800d054:	d001      	beq.n	800d05a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800d056:	f7f5 f871 	bl	800213c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d060:	7bfa      	ldrb	r2, [r7, #15]
 800d062:	4611      	mov	r1, r2
 800d064:	4618      	mov	r0, r3
 800d066:	f7fe fda8 	bl	800bbba <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d070:	4618      	mov	r0, r3
 800d072:	f7fe fd50 	bl	800bb16 <USBD_LL_Reset>
}
 800d076:	bf00      	nop
 800d078:	3710      	adds	r7, #16
 800d07a:	46bd      	mov	sp, r7
 800d07c:	bd80      	pop	{r7, pc}
	...

0800d080 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d080:	b580      	push	{r7, lr}
 800d082:	b082      	sub	sp, #8
 800d084:	af00      	add	r7, sp, #0
 800d086:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d08e:	4618      	mov	r0, r3
 800d090:	f7fe fda3 	bl	800bbda <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	687a      	ldr	r2, [r7, #4]
 800d0a0:	6812      	ldr	r2, [r2, #0]
 800d0a2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d0a6:	f043 0301 	orr.w	r3, r3, #1
 800d0aa:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	6a1b      	ldr	r3, [r3, #32]
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d005      	beq.n	800d0c0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d0b4:	4b04      	ldr	r3, [pc, #16]	; (800d0c8 <HAL_PCD_SuspendCallback+0x48>)
 800d0b6:	691b      	ldr	r3, [r3, #16]
 800d0b8:	4a03      	ldr	r2, [pc, #12]	; (800d0c8 <HAL_PCD_SuspendCallback+0x48>)
 800d0ba:	f043 0306 	orr.w	r3, r3, #6
 800d0be:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d0c0:	bf00      	nop
 800d0c2:	3708      	adds	r7, #8
 800d0c4:	46bd      	mov	sp, r7
 800d0c6:	bd80      	pop	{r7, pc}
 800d0c8:	e000ed00 	.word	0xe000ed00

0800d0cc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d0cc:	b580      	push	{r7, lr}
 800d0ce:	b082      	sub	sp, #8
 800d0d0:	af00      	add	r7, sp, #0
 800d0d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d0da:	4618      	mov	r0, r3
 800d0dc:	f7fe fd93 	bl	800bc06 <USBD_LL_Resume>
}
 800d0e0:	bf00      	nop
 800d0e2:	3708      	adds	r7, #8
 800d0e4:	46bd      	mov	sp, r7
 800d0e6:	bd80      	pop	{r7, pc}

0800d0e8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d0e8:	b580      	push	{r7, lr}
 800d0ea:	b082      	sub	sp, #8
 800d0ec:	af00      	add	r7, sp, #0
 800d0ee:	6078      	str	r0, [r7, #4]
 800d0f0:	460b      	mov	r3, r1
 800d0f2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d0fa:	78fa      	ldrb	r2, [r7, #3]
 800d0fc:	4611      	mov	r1, r2
 800d0fe:	4618      	mov	r0, r3
 800d100:	f7fe fdeb 	bl	800bcda <USBD_LL_IsoOUTIncomplete>
}
 800d104:	bf00      	nop
 800d106:	3708      	adds	r7, #8
 800d108:	46bd      	mov	sp, r7
 800d10a:	bd80      	pop	{r7, pc}

0800d10c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d10c:	b580      	push	{r7, lr}
 800d10e:	b082      	sub	sp, #8
 800d110:	af00      	add	r7, sp, #0
 800d112:	6078      	str	r0, [r7, #4]
 800d114:	460b      	mov	r3, r1
 800d116:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d11e:	78fa      	ldrb	r2, [r7, #3]
 800d120:	4611      	mov	r1, r2
 800d122:	4618      	mov	r0, r3
 800d124:	f7fe fda7 	bl	800bc76 <USBD_LL_IsoINIncomplete>
}
 800d128:	bf00      	nop
 800d12a:	3708      	adds	r7, #8
 800d12c:	46bd      	mov	sp, r7
 800d12e:	bd80      	pop	{r7, pc}

0800d130 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d130:	b580      	push	{r7, lr}
 800d132:	b082      	sub	sp, #8
 800d134:	af00      	add	r7, sp, #0
 800d136:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d13e:	4618      	mov	r0, r3
 800d140:	f7fe fdfd 	bl	800bd3e <USBD_LL_DevConnected>
}
 800d144:	bf00      	nop
 800d146:	3708      	adds	r7, #8
 800d148:	46bd      	mov	sp, r7
 800d14a:	bd80      	pop	{r7, pc}

0800d14c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d14c:	b580      	push	{r7, lr}
 800d14e:	b082      	sub	sp, #8
 800d150:	af00      	add	r7, sp, #0
 800d152:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d15a:	4618      	mov	r0, r3
 800d15c:	f7fe fdfa 	bl	800bd54 <USBD_LL_DevDisconnected>
}
 800d160:	bf00      	nop
 800d162:	3708      	adds	r7, #8
 800d164:	46bd      	mov	sp, r7
 800d166:	bd80      	pop	{r7, pc}

0800d168 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d168:	b580      	push	{r7, lr}
 800d16a:	b082      	sub	sp, #8
 800d16c:	af00      	add	r7, sp, #0
 800d16e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	781b      	ldrb	r3, [r3, #0]
 800d174:	2b00      	cmp	r3, #0
 800d176:	d13c      	bne.n	800d1f2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800d178:	4a20      	ldr	r2, [pc, #128]	; (800d1fc <USBD_LL_Init+0x94>)
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	4a1e      	ldr	r2, [pc, #120]	; (800d1fc <USBD_LL_Init+0x94>)
 800d184:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d188:	4b1c      	ldr	r3, [pc, #112]	; (800d1fc <USBD_LL_Init+0x94>)
 800d18a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800d18e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800d190:	4b1a      	ldr	r3, [pc, #104]	; (800d1fc <USBD_LL_Init+0x94>)
 800d192:	2204      	movs	r2, #4
 800d194:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800d196:	4b19      	ldr	r3, [pc, #100]	; (800d1fc <USBD_LL_Init+0x94>)
 800d198:	2202      	movs	r2, #2
 800d19a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d19c:	4b17      	ldr	r3, [pc, #92]	; (800d1fc <USBD_LL_Init+0x94>)
 800d19e:	2200      	movs	r2, #0
 800d1a0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d1a2:	4b16      	ldr	r3, [pc, #88]	; (800d1fc <USBD_LL_Init+0x94>)
 800d1a4:	2202      	movs	r2, #2
 800d1a6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d1a8:	4b14      	ldr	r3, [pc, #80]	; (800d1fc <USBD_LL_Init+0x94>)
 800d1aa:	2200      	movs	r2, #0
 800d1ac:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800d1ae:	4b13      	ldr	r3, [pc, #76]	; (800d1fc <USBD_LL_Init+0x94>)
 800d1b0:	2200      	movs	r2, #0
 800d1b2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800d1b4:	4b11      	ldr	r3, [pc, #68]	; (800d1fc <USBD_LL_Init+0x94>)
 800d1b6:	2200      	movs	r2, #0
 800d1b8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800d1ba:	4b10      	ldr	r3, [pc, #64]	; (800d1fc <USBD_LL_Init+0x94>)
 800d1bc:	2200      	movs	r2, #0
 800d1be:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800d1c0:	4b0e      	ldr	r3, [pc, #56]	; (800d1fc <USBD_LL_Init+0x94>)
 800d1c2:	2200      	movs	r2, #0
 800d1c4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800d1c6:	480d      	ldr	r0, [pc, #52]	; (800d1fc <USBD_LL_Init+0x94>)
 800d1c8:	f7f8 fc35 	bl	8005a36 <HAL_PCD_Init>
 800d1cc:	4603      	mov	r3, r0
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d001      	beq.n	800d1d6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800d1d2:	f7f4 ffb3 	bl	800213c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800d1d6:	2180      	movs	r1, #128	; 0x80
 800d1d8:	4808      	ldr	r0, [pc, #32]	; (800d1fc <USBD_LL_Init+0x94>)
 800d1da:	f7f9 fe74 	bl	8006ec6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800d1de:	2240      	movs	r2, #64	; 0x40
 800d1e0:	2100      	movs	r1, #0
 800d1e2:	4806      	ldr	r0, [pc, #24]	; (800d1fc <USBD_LL_Init+0x94>)
 800d1e4:	f7f9 fe28 	bl	8006e38 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800d1e8:	2280      	movs	r2, #128	; 0x80
 800d1ea:	2101      	movs	r1, #1
 800d1ec:	4803      	ldr	r0, [pc, #12]	; (800d1fc <USBD_LL_Init+0x94>)
 800d1ee:	f7f9 fe23 	bl	8006e38 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800d1f2:	2300      	movs	r3, #0
}
 800d1f4:	4618      	mov	r0, r3
 800d1f6:	3708      	adds	r7, #8
 800d1f8:	46bd      	mov	sp, r7
 800d1fa:	bd80      	pop	{r7, pc}
 800d1fc:	20001538 	.word	0x20001538

0800d200 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d200:	b580      	push	{r7, lr}
 800d202:	b084      	sub	sp, #16
 800d204:	af00      	add	r7, sp, #0
 800d206:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d208:	2300      	movs	r3, #0
 800d20a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d20c:	2300      	movs	r3, #0
 800d20e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d216:	4618      	mov	r0, r3
 800d218:	f7f8 fd2a 	bl	8005c70 <HAL_PCD_Start>
 800d21c:	4603      	mov	r3, r0
 800d21e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d220:	7bfb      	ldrb	r3, [r7, #15]
 800d222:	4618      	mov	r0, r3
 800d224:	f000 f930 	bl	800d488 <USBD_Get_USB_Status>
 800d228:	4603      	mov	r3, r0
 800d22a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d22c:	7bbb      	ldrb	r3, [r7, #14]
}
 800d22e:	4618      	mov	r0, r3
 800d230:	3710      	adds	r7, #16
 800d232:	46bd      	mov	sp, r7
 800d234:	bd80      	pop	{r7, pc}

0800d236 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d236:	b580      	push	{r7, lr}
 800d238:	b084      	sub	sp, #16
 800d23a:	af00      	add	r7, sp, #0
 800d23c:	6078      	str	r0, [r7, #4]
 800d23e:	4608      	mov	r0, r1
 800d240:	4611      	mov	r1, r2
 800d242:	461a      	mov	r2, r3
 800d244:	4603      	mov	r3, r0
 800d246:	70fb      	strb	r3, [r7, #3]
 800d248:	460b      	mov	r3, r1
 800d24a:	70bb      	strb	r3, [r7, #2]
 800d24c:	4613      	mov	r3, r2
 800d24e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d250:	2300      	movs	r3, #0
 800d252:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d254:	2300      	movs	r3, #0
 800d256:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800d25e:	78bb      	ldrb	r3, [r7, #2]
 800d260:	883a      	ldrh	r2, [r7, #0]
 800d262:	78f9      	ldrb	r1, [r7, #3]
 800d264:	f7f9 f9fb 	bl	800665e <HAL_PCD_EP_Open>
 800d268:	4603      	mov	r3, r0
 800d26a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d26c:	7bfb      	ldrb	r3, [r7, #15]
 800d26e:	4618      	mov	r0, r3
 800d270:	f000 f90a 	bl	800d488 <USBD_Get_USB_Status>
 800d274:	4603      	mov	r3, r0
 800d276:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d278:	7bbb      	ldrb	r3, [r7, #14]
}
 800d27a:	4618      	mov	r0, r3
 800d27c:	3710      	adds	r7, #16
 800d27e:	46bd      	mov	sp, r7
 800d280:	bd80      	pop	{r7, pc}

0800d282 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d282:	b580      	push	{r7, lr}
 800d284:	b084      	sub	sp, #16
 800d286:	af00      	add	r7, sp, #0
 800d288:	6078      	str	r0, [r7, #4]
 800d28a:	460b      	mov	r3, r1
 800d28c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d28e:	2300      	movs	r3, #0
 800d290:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d292:	2300      	movs	r3, #0
 800d294:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d29c:	78fa      	ldrb	r2, [r7, #3]
 800d29e:	4611      	mov	r1, r2
 800d2a0:	4618      	mov	r0, r3
 800d2a2:	f7f9 fa44 	bl	800672e <HAL_PCD_EP_Close>
 800d2a6:	4603      	mov	r3, r0
 800d2a8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d2aa:	7bfb      	ldrb	r3, [r7, #15]
 800d2ac:	4618      	mov	r0, r3
 800d2ae:	f000 f8eb 	bl	800d488 <USBD_Get_USB_Status>
 800d2b2:	4603      	mov	r3, r0
 800d2b4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d2b6:	7bbb      	ldrb	r3, [r7, #14]
}
 800d2b8:	4618      	mov	r0, r3
 800d2ba:	3710      	adds	r7, #16
 800d2bc:	46bd      	mov	sp, r7
 800d2be:	bd80      	pop	{r7, pc}

0800d2c0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d2c0:	b580      	push	{r7, lr}
 800d2c2:	b084      	sub	sp, #16
 800d2c4:	af00      	add	r7, sp, #0
 800d2c6:	6078      	str	r0, [r7, #4]
 800d2c8:	460b      	mov	r3, r1
 800d2ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d2cc:	2300      	movs	r3, #0
 800d2ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d2d0:	2300      	movs	r3, #0
 800d2d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d2da:	78fa      	ldrb	r2, [r7, #3]
 800d2dc:	4611      	mov	r1, r2
 800d2de:	4618      	mov	r0, r3
 800d2e0:	f7f9 fb04 	bl	80068ec <HAL_PCD_EP_SetStall>
 800d2e4:	4603      	mov	r3, r0
 800d2e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d2e8:	7bfb      	ldrb	r3, [r7, #15]
 800d2ea:	4618      	mov	r0, r3
 800d2ec:	f000 f8cc 	bl	800d488 <USBD_Get_USB_Status>
 800d2f0:	4603      	mov	r3, r0
 800d2f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d2f4:	7bbb      	ldrb	r3, [r7, #14]
}
 800d2f6:	4618      	mov	r0, r3
 800d2f8:	3710      	adds	r7, #16
 800d2fa:	46bd      	mov	sp, r7
 800d2fc:	bd80      	pop	{r7, pc}

0800d2fe <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d2fe:	b580      	push	{r7, lr}
 800d300:	b084      	sub	sp, #16
 800d302:	af00      	add	r7, sp, #0
 800d304:	6078      	str	r0, [r7, #4]
 800d306:	460b      	mov	r3, r1
 800d308:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d30a:	2300      	movs	r3, #0
 800d30c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d30e:	2300      	movs	r3, #0
 800d310:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d318:	78fa      	ldrb	r2, [r7, #3]
 800d31a:	4611      	mov	r1, r2
 800d31c:	4618      	mov	r0, r3
 800d31e:	f7f9 fb49 	bl	80069b4 <HAL_PCD_EP_ClrStall>
 800d322:	4603      	mov	r3, r0
 800d324:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d326:	7bfb      	ldrb	r3, [r7, #15]
 800d328:	4618      	mov	r0, r3
 800d32a:	f000 f8ad 	bl	800d488 <USBD_Get_USB_Status>
 800d32e:	4603      	mov	r3, r0
 800d330:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d332:	7bbb      	ldrb	r3, [r7, #14]
}
 800d334:	4618      	mov	r0, r3
 800d336:	3710      	adds	r7, #16
 800d338:	46bd      	mov	sp, r7
 800d33a:	bd80      	pop	{r7, pc}

0800d33c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d33c:	b480      	push	{r7}
 800d33e:	b085      	sub	sp, #20
 800d340:	af00      	add	r7, sp, #0
 800d342:	6078      	str	r0, [r7, #4]
 800d344:	460b      	mov	r3, r1
 800d346:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d34e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d350:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d354:	2b00      	cmp	r3, #0
 800d356:	da0b      	bge.n	800d370 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d358:	78fb      	ldrb	r3, [r7, #3]
 800d35a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d35e:	68f9      	ldr	r1, [r7, #12]
 800d360:	4613      	mov	r3, r2
 800d362:	00db      	lsls	r3, r3, #3
 800d364:	4413      	add	r3, r2
 800d366:	009b      	lsls	r3, r3, #2
 800d368:	440b      	add	r3, r1
 800d36a:	333e      	adds	r3, #62	; 0x3e
 800d36c:	781b      	ldrb	r3, [r3, #0]
 800d36e:	e00b      	b.n	800d388 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d370:	78fb      	ldrb	r3, [r7, #3]
 800d372:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d376:	68f9      	ldr	r1, [r7, #12]
 800d378:	4613      	mov	r3, r2
 800d37a:	00db      	lsls	r3, r3, #3
 800d37c:	4413      	add	r3, r2
 800d37e:	009b      	lsls	r3, r3, #2
 800d380:	440b      	add	r3, r1
 800d382:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800d386:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d388:	4618      	mov	r0, r3
 800d38a:	3714      	adds	r7, #20
 800d38c:	46bd      	mov	sp, r7
 800d38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d392:	4770      	bx	lr

0800d394 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d394:	b580      	push	{r7, lr}
 800d396:	b084      	sub	sp, #16
 800d398:	af00      	add	r7, sp, #0
 800d39a:	6078      	str	r0, [r7, #4]
 800d39c:	460b      	mov	r3, r1
 800d39e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d3a0:	2300      	movs	r3, #0
 800d3a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d3a4:	2300      	movs	r3, #0
 800d3a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d3ae:	78fa      	ldrb	r2, [r7, #3]
 800d3b0:	4611      	mov	r1, r2
 800d3b2:	4618      	mov	r0, r3
 800d3b4:	f7f9 f92e 	bl	8006614 <HAL_PCD_SetAddress>
 800d3b8:	4603      	mov	r3, r0
 800d3ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d3bc:	7bfb      	ldrb	r3, [r7, #15]
 800d3be:	4618      	mov	r0, r3
 800d3c0:	f000 f862 	bl	800d488 <USBD_Get_USB_Status>
 800d3c4:	4603      	mov	r3, r0
 800d3c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d3c8:	7bbb      	ldrb	r3, [r7, #14]
}
 800d3ca:	4618      	mov	r0, r3
 800d3cc:	3710      	adds	r7, #16
 800d3ce:	46bd      	mov	sp, r7
 800d3d0:	bd80      	pop	{r7, pc}

0800d3d2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d3d2:	b580      	push	{r7, lr}
 800d3d4:	b086      	sub	sp, #24
 800d3d6:	af00      	add	r7, sp, #0
 800d3d8:	60f8      	str	r0, [r7, #12]
 800d3da:	607a      	str	r2, [r7, #4]
 800d3dc:	603b      	str	r3, [r7, #0]
 800d3de:	460b      	mov	r3, r1
 800d3e0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d3e2:	2300      	movs	r3, #0
 800d3e4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d3e6:	2300      	movs	r3, #0
 800d3e8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800d3f0:	7af9      	ldrb	r1, [r7, #11]
 800d3f2:	683b      	ldr	r3, [r7, #0]
 800d3f4:	687a      	ldr	r2, [r7, #4]
 800d3f6:	f7f9 fa2f 	bl	8006858 <HAL_PCD_EP_Transmit>
 800d3fa:	4603      	mov	r3, r0
 800d3fc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d3fe:	7dfb      	ldrb	r3, [r7, #23]
 800d400:	4618      	mov	r0, r3
 800d402:	f000 f841 	bl	800d488 <USBD_Get_USB_Status>
 800d406:	4603      	mov	r3, r0
 800d408:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d40a:	7dbb      	ldrb	r3, [r7, #22]
}
 800d40c:	4618      	mov	r0, r3
 800d40e:	3718      	adds	r7, #24
 800d410:	46bd      	mov	sp, r7
 800d412:	bd80      	pop	{r7, pc}

0800d414 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d414:	b580      	push	{r7, lr}
 800d416:	b086      	sub	sp, #24
 800d418:	af00      	add	r7, sp, #0
 800d41a:	60f8      	str	r0, [r7, #12]
 800d41c:	607a      	str	r2, [r7, #4]
 800d41e:	603b      	str	r3, [r7, #0]
 800d420:	460b      	mov	r3, r1
 800d422:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d424:	2300      	movs	r3, #0
 800d426:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d428:	2300      	movs	r3, #0
 800d42a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d42c:	68fb      	ldr	r3, [r7, #12]
 800d42e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800d432:	7af9      	ldrb	r1, [r7, #11]
 800d434:	683b      	ldr	r3, [r7, #0]
 800d436:	687a      	ldr	r2, [r7, #4]
 800d438:	f7f9 f9c3 	bl	80067c2 <HAL_PCD_EP_Receive>
 800d43c:	4603      	mov	r3, r0
 800d43e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d440:	7dfb      	ldrb	r3, [r7, #23]
 800d442:	4618      	mov	r0, r3
 800d444:	f000 f820 	bl	800d488 <USBD_Get_USB_Status>
 800d448:	4603      	mov	r3, r0
 800d44a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d44c:	7dbb      	ldrb	r3, [r7, #22]
}
 800d44e:	4618      	mov	r0, r3
 800d450:	3718      	adds	r7, #24
 800d452:	46bd      	mov	sp, r7
 800d454:	bd80      	pop	{r7, pc}
	...

0800d458 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d458:	b480      	push	{r7}
 800d45a:	b083      	sub	sp, #12
 800d45c:	af00      	add	r7, sp, #0
 800d45e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 800d460:	4b03      	ldr	r3, [pc, #12]	; (800d470 <USBD_static_malloc+0x18>)
}
 800d462:	4618      	mov	r0, r3
 800d464:	370c      	adds	r7, #12
 800d466:	46bd      	mov	sp, r7
 800d468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d46c:	4770      	bx	lr
 800d46e:	bf00      	nop
 800d470:	20001a44 	.word	0x20001a44

0800d474 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d474:	b480      	push	{r7}
 800d476:	b083      	sub	sp, #12
 800d478:	af00      	add	r7, sp, #0
 800d47a:	6078      	str	r0, [r7, #4]

}
 800d47c:	bf00      	nop
 800d47e:	370c      	adds	r7, #12
 800d480:	46bd      	mov	sp, r7
 800d482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d486:	4770      	bx	lr

0800d488 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d488:	b480      	push	{r7}
 800d48a:	b085      	sub	sp, #20
 800d48c:	af00      	add	r7, sp, #0
 800d48e:	4603      	mov	r3, r0
 800d490:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d492:	2300      	movs	r3, #0
 800d494:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d496:	79fb      	ldrb	r3, [r7, #7]
 800d498:	2b03      	cmp	r3, #3
 800d49a:	d817      	bhi.n	800d4cc <USBD_Get_USB_Status+0x44>
 800d49c:	a201      	add	r2, pc, #4	; (adr r2, 800d4a4 <USBD_Get_USB_Status+0x1c>)
 800d49e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4a2:	bf00      	nop
 800d4a4:	0800d4b5 	.word	0x0800d4b5
 800d4a8:	0800d4bb 	.word	0x0800d4bb
 800d4ac:	0800d4c1 	.word	0x0800d4c1
 800d4b0:	0800d4c7 	.word	0x0800d4c7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d4b4:	2300      	movs	r3, #0
 800d4b6:	73fb      	strb	r3, [r7, #15]
    break;
 800d4b8:	e00b      	b.n	800d4d2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d4ba:	2303      	movs	r3, #3
 800d4bc:	73fb      	strb	r3, [r7, #15]
    break;
 800d4be:	e008      	b.n	800d4d2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d4c0:	2301      	movs	r3, #1
 800d4c2:	73fb      	strb	r3, [r7, #15]
    break;
 800d4c4:	e005      	b.n	800d4d2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d4c6:	2303      	movs	r3, #3
 800d4c8:	73fb      	strb	r3, [r7, #15]
    break;
 800d4ca:	e002      	b.n	800d4d2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d4cc:	2303      	movs	r3, #3
 800d4ce:	73fb      	strb	r3, [r7, #15]
    break;
 800d4d0:	bf00      	nop
  }
  return usb_status;
 800d4d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d4d4:	4618      	mov	r0, r3
 800d4d6:	3714      	adds	r7, #20
 800d4d8:	46bd      	mov	sp, r7
 800d4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4de:	4770      	bx	lr

0800d4e0 <__errno>:
 800d4e0:	4b01      	ldr	r3, [pc, #4]	; (800d4e8 <__errno+0x8>)
 800d4e2:	6818      	ldr	r0, [r3, #0]
 800d4e4:	4770      	bx	lr
 800d4e6:	bf00      	nop
 800d4e8:	20000130 	.word	0x20000130

0800d4ec <__libc_init_array>:
 800d4ec:	b570      	push	{r4, r5, r6, lr}
 800d4ee:	4d0d      	ldr	r5, [pc, #52]	; (800d524 <__libc_init_array+0x38>)
 800d4f0:	4c0d      	ldr	r4, [pc, #52]	; (800d528 <__libc_init_array+0x3c>)
 800d4f2:	1b64      	subs	r4, r4, r5
 800d4f4:	10a4      	asrs	r4, r4, #2
 800d4f6:	2600      	movs	r6, #0
 800d4f8:	42a6      	cmp	r6, r4
 800d4fa:	d109      	bne.n	800d510 <__libc_init_array+0x24>
 800d4fc:	4d0b      	ldr	r5, [pc, #44]	; (800d52c <__libc_init_array+0x40>)
 800d4fe:	4c0c      	ldr	r4, [pc, #48]	; (800d530 <__libc_init_array+0x44>)
 800d500:	f001 f816 	bl	800e530 <_init>
 800d504:	1b64      	subs	r4, r4, r5
 800d506:	10a4      	asrs	r4, r4, #2
 800d508:	2600      	movs	r6, #0
 800d50a:	42a6      	cmp	r6, r4
 800d50c:	d105      	bne.n	800d51a <__libc_init_array+0x2e>
 800d50e:	bd70      	pop	{r4, r5, r6, pc}
 800d510:	f855 3b04 	ldr.w	r3, [r5], #4
 800d514:	4798      	blx	r3
 800d516:	3601      	adds	r6, #1
 800d518:	e7ee      	b.n	800d4f8 <__libc_init_array+0xc>
 800d51a:	f855 3b04 	ldr.w	r3, [r5], #4
 800d51e:	4798      	blx	r3
 800d520:	3601      	adds	r6, #1
 800d522:	e7f2      	b.n	800d50a <__libc_init_array+0x1e>
 800d524:	08030740 	.word	0x08030740
 800d528:	08030740 	.word	0x08030740
 800d52c:	08030740 	.word	0x08030740
 800d530:	08030744 	.word	0x08030744

0800d534 <memset>:
 800d534:	4402      	add	r2, r0
 800d536:	4603      	mov	r3, r0
 800d538:	4293      	cmp	r3, r2
 800d53a:	d100      	bne.n	800d53e <memset+0xa>
 800d53c:	4770      	bx	lr
 800d53e:	f803 1b01 	strb.w	r1, [r3], #1
 800d542:	e7f9      	b.n	800d538 <memset+0x4>

0800d544 <__sfputc_r>:
 800d544:	6893      	ldr	r3, [r2, #8]
 800d546:	3b01      	subs	r3, #1
 800d548:	2b00      	cmp	r3, #0
 800d54a:	b410      	push	{r4}
 800d54c:	6093      	str	r3, [r2, #8]
 800d54e:	da08      	bge.n	800d562 <__sfputc_r+0x1e>
 800d550:	6994      	ldr	r4, [r2, #24]
 800d552:	42a3      	cmp	r3, r4
 800d554:	db01      	blt.n	800d55a <__sfputc_r+0x16>
 800d556:	290a      	cmp	r1, #10
 800d558:	d103      	bne.n	800d562 <__sfputc_r+0x1e>
 800d55a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d55e:	f000 bb17 	b.w	800db90 <__swbuf_r>
 800d562:	6813      	ldr	r3, [r2, #0]
 800d564:	1c58      	adds	r0, r3, #1
 800d566:	6010      	str	r0, [r2, #0]
 800d568:	7019      	strb	r1, [r3, #0]
 800d56a:	4608      	mov	r0, r1
 800d56c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d570:	4770      	bx	lr

0800d572 <__sfputs_r>:
 800d572:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d574:	4606      	mov	r6, r0
 800d576:	460f      	mov	r7, r1
 800d578:	4614      	mov	r4, r2
 800d57a:	18d5      	adds	r5, r2, r3
 800d57c:	42ac      	cmp	r4, r5
 800d57e:	d101      	bne.n	800d584 <__sfputs_r+0x12>
 800d580:	2000      	movs	r0, #0
 800d582:	e007      	b.n	800d594 <__sfputs_r+0x22>
 800d584:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d588:	463a      	mov	r2, r7
 800d58a:	4630      	mov	r0, r6
 800d58c:	f7ff ffda 	bl	800d544 <__sfputc_r>
 800d590:	1c43      	adds	r3, r0, #1
 800d592:	d1f3      	bne.n	800d57c <__sfputs_r+0xa>
 800d594:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d598 <_vfiprintf_r>:
 800d598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d59c:	460d      	mov	r5, r1
 800d59e:	b09d      	sub	sp, #116	; 0x74
 800d5a0:	4614      	mov	r4, r2
 800d5a2:	4698      	mov	r8, r3
 800d5a4:	4606      	mov	r6, r0
 800d5a6:	b118      	cbz	r0, 800d5b0 <_vfiprintf_r+0x18>
 800d5a8:	6983      	ldr	r3, [r0, #24]
 800d5aa:	b90b      	cbnz	r3, 800d5b0 <_vfiprintf_r+0x18>
 800d5ac:	f000 fcca 	bl	800df44 <__sinit>
 800d5b0:	4b89      	ldr	r3, [pc, #548]	; (800d7d8 <_vfiprintf_r+0x240>)
 800d5b2:	429d      	cmp	r5, r3
 800d5b4:	d11b      	bne.n	800d5ee <_vfiprintf_r+0x56>
 800d5b6:	6875      	ldr	r5, [r6, #4]
 800d5b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d5ba:	07d9      	lsls	r1, r3, #31
 800d5bc:	d405      	bmi.n	800d5ca <_vfiprintf_r+0x32>
 800d5be:	89ab      	ldrh	r3, [r5, #12]
 800d5c0:	059a      	lsls	r2, r3, #22
 800d5c2:	d402      	bmi.n	800d5ca <_vfiprintf_r+0x32>
 800d5c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d5c6:	f000 fd5b 	bl	800e080 <__retarget_lock_acquire_recursive>
 800d5ca:	89ab      	ldrh	r3, [r5, #12]
 800d5cc:	071b      	lsls	r3, r3, #28
 800d5ce:	d501      	bpl.n	800d5d4 <_vfiprintf_r+0x3c>
 800d5d0:	692b      	ldr	r3, [r5, #16]
 800d5d2:	b9eb      	cbnz	r3, 800d610 <_vfiprintf_r+0x78>
 800d5d4:	4629      	mov	r1, r5
 800d5d6:	4630      	mov	r0, r6
 800d5d8:	f000 fb2c 	bl	800dc34 <__swsetup_r>
 800d5dc:	b1c0      	cbz	r0, 800d610 <_vfiprintf_r+0x78>
 800d5de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d5e0:	07dc      	lsls	r4, r3, #31
 800d5e2:	d50e      	bpl.n	800d602 <_vfiprintf_r+0x6a>
 800d5e4:	f04f 30ff 	mov.w	r0, #4294967295
 800d5e8:	b01d      	add	sp, #116	; 0x74
 800d5ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5ee:	4b7b      	ldr	r3, [pc, #492]	; (800d7dc <_vfiprintf_r+0x244>)
 800d5f0:	429d      	cmp	r5, r3
 800d5f2:	d101      	bne.n	800d5f8 <_vfiprintf_r+0x60>
 800d5f4:	68b5      	ldr	r5, [r6, #8]
 800d5f6:	e7df      	b.n	800d5b8 <_vfiprintf_r+0x20>
 800d5f8:	4b79      	ldr	r3, [pc, #484]	; (800d7e0 <_vfiprintf_r+0x248>)
 800d5fa:	429d      	cmp	r5, r3
 800d5fc:	bf08      	it	eq
 800d5fe:	68f5      	ldreq	r5, [r6, #12]
 800d600:	e7da      	b.n	800d5b8 <_vfiprintf_r+0x20>
 800d602:	89ab      	ldrh	r3, [r5, #12]
 800d604:	0598      	lsls	r0, r3, #22
 800d606:	d4ed      	bmi.n	800d5e4 <_vfiprintf_r+0x4c>
 800d608:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d60a:	f000 fd3a 	bl	800e082 <__retarget_lock_release_recursive>
 800d60e:	e7e9      	b.n	800d5e4 <_vfiprintf_r+0x4c>
 800d610:	2300      	movs	r3, #0
 800d612:	9309      	str	r3, [sp, #36]	; 0x24
 800d614:	2320      	movs	r3, #32
 800d616:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d61a:	f8cd 800c 	str.w	r8, [sp, #12]
 800d61e:	2330      	movs	r3, #48	; 0x30
 800d620:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d7e4 <_vfiprintf_r+0x24c>
 800d624:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d628:	f04f 0901 	mov.w	r9, #1
 800d62c:	4623      	mov	r3, r4
 800d62e:	469a      	mov	sl, r3
 800d630:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d634:	b10a      	cbz	r2, 800d63a <_vfiprintf_r+0xa2>
 800d636:	2a25      	cmp	r2, #37	; 0x25
 800d638:	d1f9      	bne.n	800d62e <_vfiprintf_r+0x96>
 800d63a:	ebba 0b04 	subs.w	fp, sl, r4
 800d63e:	d00b      	beq.n	800d658 <_vfiprintf_r+0xc0>
 800d640:	465b      	mov	r3, fp
 800d642:	4622      	mov	r2, r4
 800d644:	4629      	mov	r1, r5
 800d646:	4630      	mov	r0, r6
 800d648:	f7ff ff93 	bl	800d572 <__sfputs_r>
 800d64c:	3001      	adds	r0, #1
 800d64e:	f000 80aa 	beq.w	800d7a6 <_vfiprintf_r+0x20e>
 800d652:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d654:	445a      	add	r2, fp
 800d656:	9209      	str	r2, [sp, #36]	; 0x24
 800d658:	f89a 3000 	ldrb.w	r3, [sl]
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	f000 80a2 	beq.w	800d7a6 <_vfiprintf_r+0x20e>
 800d662:	2300      	movs	r3, #0
 800d664:	f04f 32ff 	mov.w	r2, #4294967295
 800d668:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d66c:	f10a 0a01 	add.w	sl, sl, #1
 800d670:	9304      	str	r3, [sp, #16]
 800d672:	9307      	str	r3, [sp, #28]
 800d674:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d678:	931a      	str	r3, [sp, #104]	; 0x68
 800d67a:	4654      	mov	r4, sl
 800d67c:	2205      	movs	r2, #5
 800d67e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d682:	4858      	ldr	r0, [pc, #352]	; (800d7e4 <_vfiprintf_r+0x24c>)
 800d684:	f7f2 fdac 	bl	80001e0 <memchr>
 800d688:	9a04      	ldr	r2, [sp, #16]
 800d68a:	b9d8      	cbnz	r0, 800d6c4 <_vfiprintf_r+0x12c>
 800d68c:	06d1      	lsls	r1, r2, #27
 800d68e:	bf44      	itt	mi
 800d690:	2320      	movmi	r3, #32
 800d692:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d696:	0713      	lsls	r3, r2, #28
 800d698:	bf44      	itt	mi
 800d69a:	232b      	movmi	r3, #43	; 0x2b
 800d69c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d6a0:	f89a 3000 	ldrb.w	r3, [sl]
 800d6a4:	2b2a      	cmp	r3, #42	; 0x2a
 800d6a6:	d015      	beq.n	800d6d4 <_vfiprintf_r+0x13c>
 800d6a8:	9a07      	ldr	r2, [sp, #28]
 800d6aa:	4654      	mov	r4, sl
 800d6ac:	2000      	movs	r0, #0
 800d6ae:	f04f 0c0a 	mov.w	ip, #10
 800d6b2:	4621      	mov	r1, r4
 800d6b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d6b8:	3b30      	subs	r3, #48	; 0x30
 800d6ba:	2b09      	cmp	r3, #9
 800d6bc:	d94e      	bls.n	800d75c <_vfiprintf_r+0x1c4>
 800d6be:	b1b0      	cbz	r0, 800d6ee <_vfiprintf_r+0x156>
 800d6c0:	9207      	str	r2, [sp, #28]
 800d6c2:	e014      	b.n	800d6ee <_vfiprintf_r+0x156>
 800d6c4:	eba0 0308 	sub.w	r3, r0, r8
 800d6c8:	fa09 f303 	lsl.w	r3, r9, r3
 800d6cc:	4313      	orrs	r3, r2
 800d6ce:	9304      	str	r3, [sp, #16]
 800d6d0:	46a2      	mov	sl, r4
 800d6d2:	e7d2      	b.n	800d67a <_vfiprintf_r+0xe2>
 800d6d4:	9b03      	ldr	r3, [sp, #12]
 800d6d6:	1d19      	adds	r1, r3, #4
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	9103      	str	r1, [sp, #12]
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	bfbb      	ittet	lt
 800d6e0:	425b      	neglt	r3, r3
 800d6e2:	f042 0202 	orrlt.w	r2, r2, #2
 800d6e6:	9307      	strge	r3, [sp, #28]
 800d6e8:	9307      	strlt	r3, [sp, #28]
 800d6ea:	bfb8      	it	lt
 800d6ec:	9204      	strlt	r2, [sp, #16]
 800d6ee:	7823      	ldrb	r3, [r4, #0]
 800d6f0:	2b2e      	cmp	r3, #46	; 0x2e
 800d6f2:	d10c      	bne.n	800d70e <_vfiprintf_r+0x176>
 800d6f4:	7863      	ldrb	r3, [r4, #1]
 800d6f6:	2b2a      	cmp	r3, #42	; 0x2a
 800d6f8:	d135      	bne.n	800d766 <_vfiprintf_r+0x1ce>
 800d6fa:	9b03      	ldr	r3, [sp, #12]
 800d6fc:	1d1a      	adds	r2, r3, #4
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	9203      	str	r2, [sp, #12]
 800d702:	2b00      	cmp	r3, #0
 800d704:	bfb8      	it	lt
 800d706:	f04f 33ff 	movlt.w	r3, #4294967295
 800d70a:	3402      	adds	r4, #2
 800d70c:	9305      	str	r3, [sp, #20]
 800d70e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d7f4 <_vfiprintf_r+0x25c>
 800d712:	7821      	ldrb	r1, [r4, #0]
 800d714:	2203      	movs	r2, #3
 800d716:	4650      	mov	r0, sl
 800d718:	f7f2 fd62 	bl	80001e0 <memchr>
 800d71c:	b140      	cbz	r0, 800d730 <_vfiprintf_r+0x198>
 800d71e:	2340      	movs	r3, #64	; 0x40
 800d720:	eba0 000a 	sub.w	r0, r0, sl
 800d724:	fa03 f000 	lsl.w	r0, r3, r0
 800d728:	9b04      	ldr	r3, [sp, #16]
 800d72a:	4303      	orrs	r3, r0
 800d72c:	3401      	adds	r4, #1
 800d72e:	9304      	str	r3, [sp, #16]
 800d730:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d734:	482c      	ldr	r0, [pc, #176]	; (800d7e8 <_vfiprintf_r+0x250>)
 800d736:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d73a:	2206      	movs	r2, #6
 800d73c:	f7f2 fd50 	bl	80001e0 <memchr>
 800d740:	2800      	cmp	r0, #0
 800d742:	d03f      	beq.n	800d7c4 <_vfiprintf_r+0x22c>
 800d744:	4b29      	ldr	r3, [pc, #164]	; (800d7ec <_vfiprintf_r+0x254>)
 800d746:	bb1b      	cbnz	r3, 800d790 <_vfiprintf_r+0x1f8>
 800d748:	9b03      	ldr	r3, [sp, #12]
 800d74a:	3307      	adds	r3, #7
 800d74c:	f023 0307 	bic.w	r3, r3, #7
 800d750:	3308      	adds	r3, #8
 800d752:	9303      	str	r3, [sp, #12]
 800d754:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d756:	443b      	add	r3, r7
 800d758:	9309      	str	r3, [sp, #36]	; 0x24
 800d75a:	e767      	b.n	800d62c <_vfiprintf_r+0x94>
 800d75c:	fb0c 3202 	mla	r2, ip, r2, r3
 800d760:	460c      	mov	r4, r1
 800d762:	2001      	movs	r0, #1
 800d764:	e7a5      	b.n	800d6b2 <_vfiprintf_r+0x11a>
 800d766:	2300      	movs	r3, #0
 800d768:	3401      	adds	r4, #1
 800d76a:	9305      	str	r3, [sp, #20]
 800d76c:	4619      	mov	r1, r3
 800d76e:	f04f 0c0a 	mov.w	ip, #10
 800d772:	4620      	mov	r0, r4
 800d774:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d778:	3a30      	subs	r2, #48	; 0x30
 800d77a:	2a09      	cmp	r2, #9
 800d77c:	d903      	bls.n	800d786 <_vfiprintf_r+0x1ee>
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d0c5      	beq.n	800d70e <_vfiprintf_r+0x176>
 800d782:	9105      	str	r1, [sp, #20]
 800d784:	e7c3      	b.n	800d70e <_vfiprintf_r+0x176>
 800d786:	fb0c 2101 	mla	r1, ip, r1, r2
 800d78a:	4604      	mov	r4, r0
 800d78c:	2301      	movs	r3, #1
 800d78e:	e7f0      	b.n	800d772 <_vfiprintf_r+0x1da>
 800d790:	ab03      	add	r3, sp, #12
 800d792:	9300      	str	r3, [sp, #0]
 800d794:	462a      	mov	r2, r5
 800d796:	4b16      	ldr	r3, [pc, #88]	; (800d7f0 <_vfiprintf_r+0x258>)
 800d798:	a904      	add	r1, sp, #16
 800d79a:	4630      	mov	r0, r6
 800d79c:	f3af 8000 	nop.w
 800d7a0:	4607      	mov	r7, r0
 800d7a2:	1c78      	adds	r0, r7, #1
 800d7a4:	d1d6      	bne.n	800d754 <_vfiprintf_r+0x1bc>
 800d7a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d7a8:	07d9      	lsls	r1, r3, #31
 800d7aa:	d405      	bmi.n	800d7b8 <_vfiprintf_r+0x220>
 800d7ac:	89ab      	ldrh	r3, [r5, #12]
 800d7ae:	059a      	lsls	r2, r3, #22
 800d7b0:	d402      	bmi.n	800d7b8 <_vfiprintf_r+0x220>
 800d7b2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d7b4:	f000 fc65 	bl	800e082 <__retarget_lock_release_recursive>
 800d7b8:	89ab      	ldrh	r3, [r5, #12]
 800d7ba:	065b      	lsls	r3, r3, #25
 800d7bc:	f53f af12 	bmi.w	800d5e4 <_vfiprintf_r+0x4c>
 800d7c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d7c2:	e711      	b.n	800d5e8 <_vfiprintf_r+0x50>
 800d7c4:	ab03      	add	r3, sp, #12
 800d7c6:	9300      	str	r3, [sp, #0]
 800d7c8:	462a      	mov	r2, r5
 800d7ca:	4b09      	ldr	r3, [pc, #36]	; (800d7f0 <_vfiprintf_r+0x258>)
 800d7cc:	a904      	add	r1, sp, #16
 800d7ce:	4630      	mov	r0, r6
 800d7d0:	f000 f88a 	bl	800d8e8 <_printf_i>
 800d7d4:	e7e4      	b.n	800d7a0 <_vfiprintf_r+0x208>
 800d7d6:	bf00      	nop
 800d7d8:	080306f8 	.word	0x080306f8
 800d7dc:	08030718 	.word	0x08030718
 800d7e0:	080306d8 	.word	0x080306d8
 800d7e4:	080306a4 	.word	0x080306a4
 800d7e8:	080306ae 	.word	0x080306ae
 800d7ec:	00000000 	.word	0x00000000
 800d7f0:	0800d573 	.word	0x0800d573
 800d7f4:	080306aa 	.word	0x080306aa

0800d7f8 <vfiprintf>:
 800d7f8:	4613      	mov	r3, r2
 800d7fa:	460a      	mov	r2, r1
 800d7fc:	4601      	mov	r1, r0
 800d7fe:	4802      	ldr	r0, [pc, #8]	; (800d808 <vfiprintf+0x10>)
 800d800:	6800      	ldr	r0, [r0, #0]
 800d802:	f7ff bec9 	b.w	800d598 <_vfiprintf_r>
 800d806:	bf00      	nop
 800d808:	20000130 	.word	0x20000130

0800d80c <_printf_common>:
 800d80c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d810:	4616      	mov	r6, r2
 800d812:	4699      	mov	r9, r3
 800d814:	688a      	ldr	r2, [r1, #8]
 800d816:	690b      	ldr	r3, [r1, #16]
 800d818:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d81c:	4293      	cmp	r3, r2
 800d81e:	bfb8      	it	lt
 800d820:	4613      	movlt	r3, r2
 800d822:	6033      	str	r3, [r6, #0]
 800d824:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d828:	4607      	mov	r7, r0
 800d82a:	460c      	mov	r4, r1
 800d82c:	b10a      	cbz	r2, 800d832 <_printf_common+0x26>
 800d82e:	3301      	adds	r3, #1
 800d830:	6033      	str	r3, [r6, #0]
 800d832:	6823      	ldr	r3, [r4, #0]
 800d834:	0699      	lsls	r1, r3, #26
 800d836:	bf42      	ittt	mi
 800d838:	6833      	ldrmi	r3, [r6, #0]
 800d83a:	3302      	addmi	r3, #2
 800d83c:	6033      	strmi	r3, [r6, #0]
 800d83e:	6825      	ldr	r5, [r4, #0]
 800d840:	f015 0506 	ands.w	r5, r5, #6
 800d844:	d106      	bne.n	800d854 <_printf_common+0x48>
 800d846:	f104 0a19 	add.w	sl, r4, #25
 800d84a:	68e3      	ldr	r3, [r4, #12]
 800d84c:	6832      	ldr	r2, [r6, #0]
 800d84e:	1a9b      	subs	r3, r3, r2
 800d850:	42ab      	cmp	r3, r5
 800d852:	dc26      	bgt.n	800d8a2 <_printf_common+0x96>
 800d854:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d858:	1e13      	subs	r3, r2, #0
 800d85a:	6822      	ldr	r2, [r4, #0]
 800d85c:	bf18      	it	ne
 800d85e:	2301      	movne	r3, #1
 800d860:	0692      	lsls	r2, r2, #26
 800d862:	d42b      	bmi.n	800d8bc <_printf_common+0xb0>
 800d864:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d868:	4649      	mov	r1, r9
 800d86a:	4638      	mov	r0, r7
 800d86c:	47c0      	blx	r8
 800d86e:	3001      	adds	r0, #1
 800d870:	d01e      	beq.n	800d8b0 <_printf_common+0xa4>
 800d872:	6823      	ldr	r3, [r4, #0]
 800d874:	68e5      	ldr	r5, [r4, #12]
 800d876:	6832      	ldr	r2, [r6, #0]
 800d878:	f003 0306 	and.w	r3, r3, #6
 800d87c:	2b04      	cmp	r3, #4
 800d87e:	bf08      	it	eq
 800d880:	1aad      	subeq	r5, r5, r2
 800d882:	68a3      	ldr	r3, [r4, #8]
 800d884:	6922      	ldr	r2, [r4, #16]
 800d886:	bf0c      	ite	eq
 800d888:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d88c:	2500      	movne	r5, #0
 800d88e:	4293      	cmp	r3, r2
 800d890:	bfc4      	itt	gt
 800d892:	1a9b      	subgt	r3, r3, r2
 800d894:	18ed      	addgt	r5, r5, r3
 800d896:	2600      	movs	r6, #0
 800d898:	341a      	adds	r4, #26
 800d89a:	42b5      	cmp	r5, r6
 800d89c:	d11a      	bne.n	800d8d4 <_printf_common+0xc8>
 800d89e:	2000      	movs	r0, #0
 800d8a0:	e008      	b.n	800d8b4 <_printf_common+0xa8>
 800d8a2:	2301      	movs	r3, #1
 800d8a4:	4652      	mov	r2, sl
 800d8a6:	4649      	mov	r1, r9
 800d8a8:	4638      	mov	r0, r7
 800d8aa:	47c0      	blx	r8
 800d8ac:	3001      	adds	r0, #1
 800d8ae:	d103      	bne.n	800d8b8 <_printf_common+0xac>
 800d8b0:	f04f 30ff 	mov.w	r0, #4294967295
 800d8b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d8b8:	3501      	adds	r5, #1
 800d8ba:	e7c6      	b.n	800d84a <_printf_common+0x3e>
 800d8bc:	18e1      	adds	r1, r4, r3
 800d8be:	1c5a      	adds	r2, r3, #1
 800d8c0:	2030      	movs	r0, #48	; 0x30
 800d8c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d8c6:	4422      	add	r2, r4
 800d8c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d8cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d8d0:	3302      	adds	r3, #2
 800d8d2:	e7c7      	b.n	800d864 <_printf_common+0x58>
 800d8d4:	2301      	movs	r3, #1
 800d8d6:	4622      	mov	r2, r4
 800d8d8:	4649      	mov	r1, r9
 800d8da:	4638      	mov	r0, r7
 800d8dc:	47c0      	blx	r8
 800d8de:	3001      	adds	r0, #1
 800d8e0:	d0e6      	beq.n	800d8b0 <_printf_common+0xa4>
 800d8e2:	3601      	adds	r6, #1
 800d8e4:	e7d9      	b.n	800d89a <_printf_common+0x8e>
	...

0800d8e8 <_printf_i>:
 800d8e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d8ec:	7e0f      	ldrb	r7, [r1, #24]
 800d8ee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d8f0:	2f78      	cmp	r7, #120	; 0x78
 800d8f2:	4691      	mov	r9, r2
 800d8f4:	4680      	mov	r8, r0
 800d8f6:	460c      	mov	r4, r1
 800d8f8:	469a      	mov	sl, r3
 800d8fa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d8fe:	d807      	bhi.n	800d910 <_printf_i+0x28>
 800d900:	2f62      	cmp	r7, #98	; 0x62
 800d902:	d80a      	bhi.n	800d91a <_printf_i+0x32>
 800d904:	2f00      	cmp	r7, #0
 800d906:	f000 80d8 	beq.w	800daba <_printf_i+0x1d2>
 800d90a:	2f58      	cmp	r7, #88	; 0x58
 800d90c:	f000 80a3 	beq.w	800da56 <_printf_i+0x16e>
 800d910:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d914:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d918:	e03a      	b.n	800d990 <_printf_i+0xa8>
 800d91a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d91e:	2b15      	cmp	r3, #21
 800d920:	d8f6      	bhi.n	800d910 <_printf_i+0x28>
 800d922:	a101      	add	r1, pc, #4	; (adr r1, 800d928 <_printf_i+0x40>)
 800d924:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d928:	0800d981 	.word	0x0800d981
 800d92c:	0800d995 	.word	0x0800d995
 800d930:	0800d911 	.word	0x0800d911
 800d934:	0800d911 	.word	0x0800d911
 800d938:	0800d911 	.word	0x0800d911
 800d93c:	0800d911 	.word	0x0800d911
 800d940:	0800d995 	.word	0x0800d995
 800d944:	0800d911 	.word	0x0800d911
 800d948:	0800d911 	.word	0x0800d911
 800d94c:	0800d911 	.word	0x0800d911
 800d950:	0800d911 	.word	0x0800d911
 800d954:	0800daa1 	.word	0x0800daa1
 800d958:	0800d9c5 	.word	0x0800d9c5
 800d95c:	0800da83 	.word	0x0800da83
 800d960:	0800d911 	.word	0x0800d911
 800d964:	0800d911 	.word	0x0800d911
 800d968:	0800dac3 	.word	0x0800dac3
 800d96c:	0800d911 	.word	0x0800d911
 800d970:	0800d9c5 	.word	0x0800d9c5
 800d974:	0800d911 	.word	0x0800d911
 800d978:	0800d911 	.word	0x0800d911
 800d97c:	0800da8b 	.word	0x0800da8b
 800d980:	682b      	ldr	r3, [r5, #0]
 800d982:	1d1a      	adds	r2, r3, #4
 800d984:	681b      	ldr	r3, [r3, #0]
 800d986:	602a      	str	r2, [r5, #0]
 800d988:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d98c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d990:	2301      	movs	r3, #1
 800d992:	e0a3      	b.n	800dadc <_printf_i+0x1f4>
 800d994:	6820      	ldr	r0, [r4, #0]
 800d996:	6829      	ldr	r1, [r5, #0]
 800d998:	0606      	lsls	r6, r0, #24
 800d99a:	f101 0304 	add.w	r3, r1, #4
 800d99e:	d50a      	bpl.n	800d9b6 <_printf_i+0xce>
 800d9a0:	680e      	ldr	r6, [r1, #0]
 800d9a2:	602b      	str	r3, [r5, #0]
 800d9a4:	2e00      	cmp	r6, #0
 800d9a6:	da03      	bge.n	800d9b0 <_printf_i+0xc8>
 800d9a8:	232d      	movs	r3, #45	; 0x2d
 800d9aa:	4276      	negs	r6, r6
 800d9ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d9b0:	485e      	ldr	r0, [pc, #376]	; (800db2c <_printf_i+0x244>)
 800d9b2:	230a      	movs	r3, #10
 800d9b4:	e019      	b.n	800d9ea <_printf_i+0x102>
 800d9b6:	680e      	ldr	r6, [r1, #0]
 800d9b8:	602b      	str	r3, [r5, #0]
 800d9ba:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d9be:	bf18      	it	ne
 800d9c0:	b236      	sxthne	r6, r6
 800d9c2:	e7ef      	b.n	800d9a4 <_printf_i+0xbc>
 800d9c4:	682b      	ldr	r3, [r5, #0]
 800d9c6:	6820      	ldr	r0, [r4, #0]
 800d9c8:	1d19      	adds	r1, r3, #4
 800d9ca:	6029      	str	r1, [r5, #0]
 800d9cc:	0601      	lsls	r1, r0, #24
 800d9ce:	d501      	bpl.n	800d9d4 <_printf_i+0xec>
 800d9d0:	681e      	ldr	r6, [r3, #0]
 800d9d2:	e002      	b.n	800d9da <_printf_i+0xf2>
 800d9d4:	0646      	lsls	r6, r0, #25
 800d9d6:	d5fb      	bpl.n	800d9d0 <_printf_i+0xe8>
 800d9d8:	881e      	ldrh	r6, [r3, #0]
 800d9da:	4854      	ldr	r0, [pc, #336]	; (800db2c <_printf_i+0x244>)
 800d9dc:	2f6f      	cmp	r7, #111	; 0x6f
 800d9de:	bf0c      	ite	eq
 800d9e0:	2308      	moveq	r3, #8
 800d9e2:	230a      	movne	r3, #10
 800d9e4:	2100      	movs	r1, #0
 800d9e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d9ea:	6865      	ldr	r5, [r4, #4]
 800d9ec:	60a5      	str	r5, [r4, #8]
 800d9ee:	2d00      	cmp	r5, #0
 800d9f0:	bfa2      	ittt	ge
 800d9f2:	6821      	ldrge	r1, [r4, #0]
 800d9f4:	f021 0104 	bicge.w	r1, r1, #4
 800d9f8:	6021      	strge	r1, [r4, #0]
 800d9fa:	b90e      	cbnz	r6, 800da00 <_printf_i+0x118>
 800d9fc:	2d00      	cmp	r5, #0
 800d9fe:	d04d      	beq.n	800da9c <_printf_i+0x1b4>
 800da00:	4615      	mov	r5, r2
 800da02:	fbb6 f1f3 	udiv	r1, r6, r3
 800da06:	fb03 6711 	mls	r7, r3, r1, r6
 800da0a:	5dc7      	ldrb	r7, [r0, r7]
 800da0c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800da10:	4637      	mov	r7, r6
 800da12:	42bb      	cmp	r3, r7
 800da14:	460e      	mov	r6, r1
 800da16:	d9f4      	bls.n	800da02 <_printf_i+0x11a>
 800da18:	2b08      	cmp	r3, #8
 800da1a:	d10b      	bne.n	800da34 <_printf_i+0x14c>
 800da1c:	6823      	ldr	r3, [r4, #0]
 800da1e:	07de      	lsls	r6, r3, #31
 800da20:	d508      	bpl.n	800da34 <_printf_i+0x14c>
 800da22:	6923      	ldr	r3, [r4, #16]
 800da24:	6861      	ldr	r1, [r4, #4]
 800da26:	4299      	cmp	r1, r3
 800da28:	bfde      	ittt	le
 800da2a:	2330      	movle	r3, #48	; 0x30
 800da2c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800da30:	f105 35ff 	addle.w	r5, r5, #4294967295
 800da34:	1b52      	subs	r2, r2, r5
 800da36:	6122      	str	r2, [r4, #16]
 800da38:	f8cd a000 	str.w	sl, [sp]
 800da3c:	464b      	mov	r3, r9
 800da3e:	aa03      	add	r2, sp, #12
 800da40:	4621      	mov	r1, r4
 800da42:	4640      	mov	r0, r8
 800da44:	f7ff fee2 	bl	800d80c <_printf_common>
 800da48:	3001      	adds	r0, #1
 800da4a:	d14c      	bne.n	800dae6 <_printf_i+0x1fe>
 800da4c:	f04f 30ff 	mov.w	r0, #4294967295
 800da50:	b004      	add	sp, #16
 800da52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da56:	4835      	ldr	r0, [pc, #212]	; (800db2c <_printf_i+0x244>)
 800da58:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800da5c:	6829      	ldr	r1, [r5, #0]
 800da5e:	6823      	ldr	r3, [r4, #0]
 800da60:	f851 6b04 	ldr.w	r6, [r1], #4
 800da64:	6029      	str	r1, [r5, #0]
 800da66:	061d      	lsls	r5, r3, #24
 800da68:	d514      	bpl.n	800da94 <_printf_i+0x1ac>
 800da6a:	07df      	lsls	r7, r3, #31
 800da6c:	bf44      	itt	mi
 800da6e:	f043 0320 	orrmi.w	r3, r3, #32
 800da72:	6023      	strmi	r3, [r4, #0]
 800da74:	b91e      	cbnz	r6, 800da7e <_printf_i+0x196>
 800da76:	6823      	ldr	r3, [r4, #0]
 800da78:	f023 0320 	bic.w	r3, r3, #32
 800da7c:	6023      	str	r3, [r4, #0]
 800da7e:	2310      	movs	r3, #16
 800da80:	e7b0      	b.n	800d9e4 <_printf_i+0xfc>
 800da82:	6823      	ldr	r3, [r4, #0]
 800da84:	f043 0320 	orr.w	r3, r3, #32
 800da88:	6023      	str	r3, [r4, #0]
 800da8a:	2378      	movs	r3, #120	; 0x78
 800da8c:	4828      	ldr	r0, [pc, #160]	; (800db30 <_printf_i+0x248>)
 800da8e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800da92:	e7e3      	b.n	800da5c <_printf_i+0x174>
 800da94:	0659      	lsls	r1, r3, #25
 800da96:	bf48      	it	mi
 800da98:	b2b6      	uxthmi	r6, r6
 800da9a:	e7e6      	b.n	800da6a <_printf_i+0x182>
 800da9c:	4615      	mov	r5, r2
 800da9e:	e7bb      	b.n	800da18 <_printf_i+0x130>
 800daa0:	682b      	ldr	r3, [r5, #0]
 800daa2:	6826      	ldr	r6, [r4, #0]
 800daa4:	6961      	ldr	r1, [r4, #20]
 800daa6:	1d18      	adds	r0, r3, #4
 800daa8:	6028      	str	r0, [r5, #0]
 800daaa:	0635      	lsls	r5, r6, #24
 800daac:	681b      	ldr	r3, [r3, #0]
 800daae:	d501      	bpl.n	800dab4 <_printf_i+0x1cc>
 800dab0:	6019      	str	r1, [r3, #0]
 800dab2:	e002      	b.n	800daba <_printf_i+0x1d2>
 800dab4:	0670      	lsls	r0, r6, #25
 800dab6:	d5fb      	bpl.n	800dab0 <_printf_i+0x1c8>
 800dab8:	8019      	strh	r1, [r3, #0]
 800daba:	2300      	movs	r3, #0
 800dabc:	6123      	str	r3, [r4, #16]
 800dabe:	4615      	mov	r5, r2
 800dac0:	e7ba      	b.n	800da38 <_printf_i+0x150>
 800dac2:	682b      	ldr	r3, [r5, #0]
 800dac4:	1d1a      	adds	r2, r3, #4
 800dac6:	602a      	str	r2, [r5, #0]
 800dac8:	681d      	ldr	r5, [r3, #0]
 800daca:	6862      	ldr	r2, [r4, #4]
 800dacc:	2100      	movs	r1, #0
 800dace:	4628      	mov	r0, r5
 800dad0:	f7f2 fb86 	bl	80001e0 <memchr>
 800dad4:	b108      	cbz	r0, 800dada <_printf_i+0x1f2>
 800dad6:	1b40      	subs	r0, r0, r5
 800dad8:	6060      	str	r0, [r4, #4]
 800dada:	6863      	ldr	r3, [r4, #4]
 800dadc:	6123      	str	r3, [r4, #16]
 800dade:	2300      	movs	r3, #0
 800dae0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dae4:	e7a8      	b.n	800da38 <_printf_i+0x150>
 800dae6:	6923      	ldr	r3, [r4, #16]
 800dae8:	462a      	mov	r2, r5
 800daea:	4649      	mov	r1, r9
 800daec:	4640      	mov	r0, r8
 800daee:	47d0      	blx	sl
 800daf0:	3001      	adds	r0, #1
 800daf2:	d0ab      	beq.n	800da4c <_printf_i+0x164>
 800daf4:	6823      	ldr	r3, [r4, #0]
 800daf6:	079b      	lsls	r3, r3, #30
 800daf8:	d413      	bmi.n	800db22 <_printf_i+0x23a>
 800dafa:	68e0      	ldr	r0, [r4, #12]
 800dafc:	9b03      	ldr	r3, [sp, #12]
 800dafe:	4298      	cmp	r0, r3
 800db00:	bfb8      	it	lt
 800db02:	4618      	movlt	r0, r3
 800db04:	e7a4      	b.n	800da50 <_printf_i+0x168>
 800db06:	2301      	movs	r3, #1
 800db08:	4632      	mov	r2, r6
 800db0a:	4649      	mov	r1, r9
 800db0c:	4640      	mov	r0, r8
 800db0e:	47d0      	blx	sl
 800db10:	3001      	adds	r0, #1
 800db12:	d09b      	beq.n	800da4c <_printf_i+0x164>
 800db14:	3501      	adds	r5, #1
 800db16:	68e3      	ldr	r3, [r4, #12]
 800db18:	9903      	ldr	r1, [sp, #12]
 800db1a:	1a5b      	subs	r3, r3, r1
 800db1c:	42ab      	cmp	r3, r5
 800db1e:	dcf2      	bgt.n	800db06 <_printf_i+0x21e>
 800db20:	e7eb      	b.n	800dafa <_printf_i+0x212>
 800db22:	2500      	movs	r5, #0
 800db24:	f104 0619 	add.w	r6, r4, #25
 800db28:	e7f5      	b.n	800db16 <_printf_i+0x22e>
 800db2a:	bf00      	nop
 800db2c:	080306b5 	.word	0x080306b5
 800db30:	080306c6 	.word	0x080306c6

0800db34 <iprintf>:
 800db34:	b40f      	push	{r0, r1, r2, r3}
 800db36:	4b0a      	ldr	r3, [pc, #40]	; (800db60 <iprintf+0x2c>)
 800db38:	b513      	push	{r0, r1, r4, lr}
 800db3a:	681c      	ldr	r4, [r3, #0]
 800db3c:	b124      	cbz	r4, 800db48 <iprintf+0x14>
 800db3e:	69a3      	ldr	r3, [r4, #24]
 800db40:	b913      	cbnz	r3, 800db48 <iprintf+0x14>
 800db42:	4620      	mov	r0, r4
 800db44:	f000 f9fe 	bl	800df44 <__sinit>
 800db48:	ab05      	add	r3, sp, #20
 800db4a:	9a04      	ldr	r2, [sp, #16]
 800db4c:	68a1      	ldr	r1, [r4, #8]
 800db4e:	9301      	str	r3, [sp, #4]
 800db50:	4620      	mov	r0, r4
 800db52:	f7ff fd21 	bl	800d598 <_vfiprintf_r>
 800db56:	b002      	add	sp, #8
 800db58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800db5c:	b004      	add	sp, #16
 800db5e:	4770      	bx	lr
 800db60:	20000130 	.word	0x20000130

0800db64 <putchar>:
 800db64:	4b09      	ldr	r3, [pc, #36]	; (800db8c <putchar+0x28>)
 800db66:	b513      	push	{r0, r1, r4, lr}
 800db68:	681c      	ldr	r4, [r3, #0]
 800db6a:	4601      	mov	r1, r0
 800db6c:	b134      	cbz	r4, 800db7c <putchar+0x18>
 800db6e:	69a3      	ldr	r3, [r4, #24]
 800db70:	b923      	cbnz	r3, 800db7c <putchar+0x18>
 800db72:	9001      	str	r0, [sp, #4]
 800db74:	4620      	mov	r0, r4
 800db76:	f000 f9e5 	bl	800df44 <__sinit>
 800db7a:	9901      	ldr	r1, [sp, #4]
 800db7c:	68a2      	ldr	r2, [r4, #8]
 800db7e:	4620      	mov	r0, r4
 800db80:	b002      	add	sp, #8
 800db82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800db86:	f000 bbc3 	b.w	800e310 <_putc_r>
 800db8a:	bf00      	nop
 800db8c:	20000130 	.word	0x20000130

0800db90 <__swbuf_r>:
 800db90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db92:	460e      	mov	r6, r1
 800db94:	4614      	mov	r4, r2
 800db96:	4605      	mov	r5, r0
 800db98:	b118      	cbz	r0, 800dba2 <__swbuf_r+0x12>
 800db9a:	6983      	ldr	r3, [r0, #24]
 800db9c:	b90b      	cbnz	r3, 800dba2 <__swbuf_r+0x12>
 800db9e:	f000 f9d1 	bl	800df44 <__sinit>
 800dba2:	4b21      	ldr	r3, [pc, #132]	; (800dc28 <__swbuf_r+0x98>)
 800dba4:	429c      	cmp	r4, r3
 800dba6:	d12b      	bne.n	800dc00 <__swbuf_r+0x70>
 800dba8:	686c      	ldr	r4, [r5, #4]
 800dbaa:	69a3      	ldr	r3, [r4, #24]
 800dbac:	60a3      	str	r3, [r4, #8]
 800dbae:	89a3      	ldrh	r3, [r4, #12]
 800dbb0:	071a      	lsls	r2, r3, #28
 800dbb2:	d52f      	bpl.n	800dc14 <__swbuf_r+0x84>
 800dbb4:	6923      	ldr	r3, [r4, #16]
 800dbb6:	b36b      	cbz	r3, 800dc14 <__swbuf_r+0x84>
 800dbb8:	6923      	ldr	r3, [r4, #16]
 800dbba:	6820      	ldr	r0, [r4, #0]
 800dbbc:	1ac0      	subs	r0, r0, r3
 800dbbe:	6963      	ldr	r3, [r4, #20]
 800dbc0:	b2f6      	uxtb	r6, r6
 800dbc2:	4283      	cmp	r3, r0
 800dbc4:	4637      	mov	r7, r6
 800dbc6:	dc04      	bgt.n	800dbd2 <__swbuf_r+0x42>
 800dbc8:	4621      	mov	r1, r4
 800dbca:	4628      	mov	r0, r5
 800dbcc:	f000 f926 	bl	800de1c <_fflush_r>
 800dbd0:	bb30      	cbnz	r0, 800dc20 <__swbuf_r+0x90>
 800dbd2:	68a3      	ldr	r3, [r4, #8]
 800dbd4:	3b01      	subs	r3, #1
 800dbd6:	60a3      	str	r3, [r4, #8]
 800dbd8:	6823      	ldr	r3, [r4, #0]
 800dbda:	1c5a      	adds	r2, r3, #1
 800dbdc:	6022      	str	r2, [r4, #0]
 800dbde:	701e      	strb	r6, [r3, #0]
 800dbe0:	6963      	ldr	r3, [r4, #20]
 800dbe2:	3001      	adds	r0, #1
 800dbe4:	4283      	cmp	r3, r0
 800dbe6:	d004      	beq.n	800dbf2 <__swbuf_r+0x62>
 800dbe8:	89a3      	ldrh	r3, [r4, #12]
 800dbea:	07db      	lsls	r3, r3, #31
 800dbec:	d506      	bpl.n	800dbfc <__swbuf_r+0x6c>
 800dbee:	2e0a      	cmp	r6, #10
 800dbf0:	d104      	bne.n	800dbfc <__swbuf_r+0x6c>
 800dbf2:	4621      	mov	r1, r4
 800dbf4:	4628      	mov	r0, r5
 800dbf6:	f000 f911 	bl	800de1c <_fflush_r>
 800dbfa:	b988      	cbnz	r0, 800dc20 <__swbuf_r+0x90>
 800dbfc:	4638      	mov	r0, r7
 800dbfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dc00:	4b0a      	ldr	r3, [pc, #40]	; (800dc2c <__swbuf_r+0x9c>)
 800dc02:	429c      	cmp	r4, r3
 800dc04:	d101      	bne.n	800dc0a <__swbuf_r+0x7a>
 800dc06:	68ac      	ldr	r4, [r5, #8]
 800dc08:	e7cf      	b.n	800dbaa <__swbuf_r+0x1a>
 800dc0a:	4b09      	ldr	r3, [pc, #36]	; (800dc30 <__swbuf_r+0xa0>)
 800dc0c:	429c      	cmp	r4, r3
 800dc0e:	bf08      	it	eq
 800dc10:	68ec      	ldreq	r4, [r5, #12]
 800dc12:	e7ca      	b.n	800dbaa <__swbuf_r+0x1a>
 800dc14:	4621      	mov	r1, r4
 800dc16:	4628      	mov	r0, r5
 800dc18:	f000 f80c 	bl	800dc34 <__swsetup_r>
 800dc1c:	2800      	cmp	r0, #0
 800dc1e:	d0cb      	beq.n	800dbb8 <__swbuf_r+0x28>
 800dc20:	f04f 37ff 	mov.w	r7, #4294967295
 800dc24:	e7ea      	b.n	800dbfc <__swbuf_r+0x6c>
 800dc26:	bf00      	nop
 800dc28:	080306f8 	.word	0x080306f8
 800dc2c:	08030718 	.word	0x08030718
 800dc30:	080306d8 	.word	0x080306d8

0800dc34 <__swsetup_r>:
 800dc34:	4b32      	ldr	r3, [pc, #200]	; (800dd00 <__swsetup_r+0xcc>)
 800dc36:	b570      	push	{r4, r5, r6, lr}
 800dc38:	681d      	ldr	r5, [r3, #0]
 800dc3a:	4606      	mov	r6, r0
 800dc3c:	460c      	mov	r4, r1
 800dc3e:	b125      	cbz	r5, 800dc4a <__swsetup_r+0x16>
 800dc40:	69ab      	ldr	r3, [r5, #24]
 800dc42:	b913      	cbnz	r3, 800dc4a <__swsetup_r+0x16>
 800dc44:	4628      	mov	r0, r5
 800dc46:	f000 f97d 	bl	800df44 <__sinit>
 800dc4a:	4b2e      	ldr	r3, [pc, #184]	; (800dd04 <__swsetup_r+0xd0>)
 800dc4c:	429c      	cmp	r4, r3
 800dc4e:	d10f      	bne.n	800dc70 <__swsetup_r+0x3c>
 800dc50:	686c      	ldr	r4, [r5, #4]
 800dc52:	89a3      	ldrh	r3, [r4, #12]
 800dc54:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dc58:	0719      	lsls	r1, r3, #28
 800dc5a:	d42c      	bmi.n	800dcb6 <__swsetup_r+0x82>
 800dc5c:	06dd      	lsls	r5, r3, #27
 800dc5e:	d411      	bmi.n	800dc84 <__swsetup_r+0x50>
 800dc60:	2309      	movs	r3, #9
 800dc62:	6033      	str	r3, [r6, #0]
 800dc64:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800dc68:	81a3      	strh	r3, [r4, #12]
 800dc6a:	f04f 30ff 	mov.w	r0, #4294967295
 800dc6e:	e03e      	b.n	800dcee <__swsetup_r+0xba>
 800dc70:	4b25      	ldr	r3, [pc, #148]	; (800dd08 <__swsetup_r+0xd4>)
 800dc72:	429c      	cmp	r4, r3
 800dc74:	d101      	bne.n	800dc7a <__swsetup_r+0x46>
 800dc76:	68ac      	ldr	r4, [r5, #8]
 800dc78:	e7eb      	b.n	800dc52 <__swsetup_r+0x1e>
 800dc7a:	4b24      	ldr	r3, [pc, #144]	; (800dd0c <__swsetup_r+0xd8>)
 800dc7c:	429c      	cmp	r4, r3
 800dc7e:	bf08      	it	eq
 800dc80:	68ec      	ldreq	r4, [r5, #12]
 800dc82:	e7e6      	b.n	800dc52 <__swsetup_r+0x1e>
 800dc84:	0758      	lsls	r0, r3, #29
 800dc86:	d512      	bpl.n	800dcae <__swsetup_r+0x7a>
 800dc88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dc8a:	b141      	cbz	r1, 800dc9e <__swsetup_r+0x6a>
 800dc8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dc90:	4299      	cmp	r1, r3
 800dc92:	d002      	beq.n	800dc9a <__swsetup_r+0x66>
 800dc94:	4630      	mov	r0, r6
 800dc96:	f000 fa5b 	bl	800e150 <_free_r>
 800dc9a:	2300      	movs	r3, #0
 800dc9c:	6363      	str	r3, [r4, #52]	; 0x34
 800dc9e:	89a3      	ldrh	r3, [r4, #12]
 800dca0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800dca4:	81a3      	strh	r3, [r4, #12]
 800dca6:	2300      	movs	r3, #0
 800dca8:	6063      	str	r3, [r4, #4]
 800dcaa:	6923      	ldr	r3, [r4, #16]
 800dcac:	6023      	str	r3, [r4, #0]
 800dcae:	89a3      	ldrh	r3, [r4, #12]
 800dcb0:	f043 0308 	orr.w	r3, r3, #8
 800dcb4:	81a3      	strh	r3, [r4, #12]
 800dcb6:	6923      	ldr	r3, [r4, #16]
 800dcb8:	b94b      	cbnz	r3, 800dcce <__swsetup_r+0x9a>
 800dcba:	89a3      	ldrh	r3, [r4, #12]
 800dcbc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800dcc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dcc4:	d003      	beq.n	800dcce <__swsetup_r+0x9a>
 800dcc6:	4621      	mov	r1, r4
 800dcc8:	4630      	mov	r0, r6
 800dcca:	f000 fa01 	bl	800e0d0 <__smakebuf_r>
 800dcce:	89a0      	ldrh	r0, [r4, #12]
 800dcd0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dcd4:	f010 0301 	ands.w	r3, r0, #1
 800dcd8:	d00a      	beq.n	800dcf0 <__swsetup_r+0xbc>
 800dcda:	2300      	movs	r3, #0
 800dcdc:	60a3      	str	r3, [r4, #8]
 800dcde:	6963      	ldr	r3, [r4, #20]
 800dce0:	425b      	negs	r3, r3
 800dce2:	61a3      	str	r3, [r4, #24]
 800dce4:	6923      	ldr	r3, [r4, #16]
 800dce6:	b943      	cbnz	r3, 800dcfa <__swsetup_r+0xc6>
 800dce8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800dcec:	d1ba      	bne.n	800dc64 <__swsetup_r+0x30>
 800dcee:	bd70      	pop	{r4, r5, r6, pc}
 800dcf0:	0781      	lsls	r1, r0, #30
 800dcf2:	bf58      	it	pl
 800dcf4:	6963      	ldrpl	r3, [r4, #20]
 800dcf6:	60a3      	str	r3, [r4, #8]
 800dcf8:	e7f4      	b.n	800dce4 <__swsetup_r+0xb0>
 800dcfa:	2000      	movs	r0, #0
 800dcfc:	e7f7      	b.n	800dcee <__swsetup_r+0xba>
 800dcfe:	bf00      	nop
 800dd00:	20000130 	.word	0x20000130
 800dd04:	080306f8 	.word	0x080306f8
 800dd08:	08030718 	.word	0x08030718
 800dd0c:	080306d8 	.word	0x080306d8

0800dd10 <__sflush_r>:
 800dd10:	898a      	ldrh	r2, [r1, #12]
 800dd12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd16:	4605      	mov	r5, r0
 800dd18:	0710      	lsls	r0, r2, #28
 800dd1a:	460c      	mov	r4, r1
 800dd1c:	d458      	bmi.n	800ddd0 <__sflush_r+0xc0>
 800dd1e:	684b      	ldr	r3, [r1, #4]
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	dc05      	bgt.n	800dd30 <__sflush_r+0x20>
 800dd24:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	dc02      	bgt.n	800dd30 <__sflush_r+0x20>
 800dd2a:	2000      	movs	r0, #0
 800dd2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd30:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dd32:	2e00      	cmp	r6, #0
 800dd34:	d0f9      	beq.n	800dd2a <__sflush_r+0x1a>
 800dd36:	2300      	movs	r3, #0
 800dd38:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800dd3c:	682f      	ldr	r7, [r5, #0]
 800dd3e:	602b      	str	r3, [r5, #0]
 800dd40:	d032      	beq.n	800dda8 <__sflush_r+0x98>
 800dd42:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800dd44:	89a3      	ldrh	r3, [r4, #12]
 800dd46:	075a      	lsls	r2, r3, #29
 800dd48:	d505      	bpl.n	800dd56 <__sflush_r+0x46>
 800dd4a:	6863      	ldr	r3, [r4, #4]
 800dd4c:	1ac0      	subs	r0, r0, r3
 800dd4e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800dd50:	b10b      	cbz	r3, 800dd56 <__sflush_r+0x46>
 800dd52:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800dd54:	1ac0      	subs	r0, r0, r3
 800dd56:	2300      	movs	r3, #0
 800dd58:	4602      	mov	r2, r0
 800dd5a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dd5c:	6a21      	ldr	r1, [r4, #32]
 800dd5e:	4628      	mov	r0, r5
 800dd60:	47b0      	blx	r6
 800dd62:	1c43      	adds	r3, r0, #1
 800dd64:	89a3      	ldrh	r3, [r4, #12]
 800dd66:	d106      	bne.n	800dd76 <__sflush_r+0x66>
 800dd68:	6829      	ldr	r1, [r5, #0]
 800dd6a:	291d      	cmp	r1, #29
 800dd6c:	d82c      	bhi.n	800ddc8 <__sflush_r+0xb8>
 800dd6e:	4a2a      	ldr	r2, [pc, #168]	; (800de18 <__sflush_r+0x108>)
 800dd70:	40ca      	lsrs	r2, r1
 800dd72:	07d6      	lsls	r6, r2, #31
 800dd74:	d528      	bpl.n	800ddc8 <__sflush_r+0xb8>
 800dd76:	2200      	movs	r2, #0
 800dd78:	6062      	str	r2, [r4, #4]
 800dd7a:	04d9      	lsls	r1, r3, #19
 800dd7c:	6922      	ldr	r2, [r4, #16]
 800dd7e:	6022      	str	r2, [r4, #0]
 800dd80:	d504      	bpl.n	800dd8c <__sflush_r+0x7c>
 800dd82:	1c42      	adds	r2, r0, #1
 800dd84:	d101      	bne.n	800dd8a <__sflush_r+0x7a>
 800dd86:	682b      	ldr	r3, [r5, #0]
 800dd88:	b903      	cbnz	r3, 800dd8c <__sflush_r+0x7c>
 800dd8a:	6560      	str	r0, [r4, #84]	; 0x54
 800dd8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dd8e:	602f      	str	r7, [r5, #0]
 800dd90:	2900      	cmp	r1, #0
 800dd92:	d0ca      	beq.n	800dd2a <__sflush_r+0x1a>
 800dd94:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dd98:	4299      	cmp	r1, r3
 800dd9a:	d002      	beq.n	800dda2 <__sflush_r+0x92>
 800dd9c:	4628      	mov	r0, r5
 800dd9e:	f000 f9d7 	bl	800e150 <_free_r>
 800dda2:	2000      	movs	r0, #0
 800dda4:	6360      	str	r0, [r4, #52]	; 0x34
 800dda6:	e7c1      	b.n	800dd2c <__sflush_r+0x1c>
 800dda8:	6a21      	ldr	r1, [r4, #32]
 800ddaa:	2301      	movs	r3, #1
 800ddac:	4628      	mov	r0, r5
 800ddae:	47b0      	blx	r6
 800ddb0:	1c41      	adds	r1, r0, #1
 800ddb2:	d1c7      	bne.n	800dd44 <__sflush_r+0x34>
 800ddb4:	682b      	ldr	r3, [r5, #0]
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d0c4      	beq.n	800dd44 <__sflush_r+0x34>
 800ddba:	2b1d      	cmp	r3, #29
 800ddbc:	d001      	beq.n	800ddc2 <__sflush_r+0xb2>
 800ddbe:	2b16      	cmp	r3, #22
 800ddc0:	d101      	bne.n	800ddc6 <__sflush_r+0xb6>
 800ddc2:	602f      	str	r7, [r5, #0]
 800ddc4:	e7b1      	b.n	800dd2a <__sflush_r+0x1a>
 800ddc6:	89a3      	ldrh	r3, [r4, #12]
 800ddc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ddcc:	81a3      	strh	r3, [r4, #12]
 800ddce:	e7ad      	b.n	800dd2c <__sflush_r+0x1c>
 800ddd0:	690f      	ldr	r7, [r1, #16]
 800ddd2:	2f00      	cmp	r7, #0
 800ddd4:	d0a9      	beq.n	800dd2a <__sflush_r+0x1a>
 800ddd6:	0793      	lsls	r3, r2, #30
 800ddd8:	680e      	ldr	r6, [r1, #0]
 800ddda:	bf08      	it	eq
 800dddc:	694b      	ldreq	r3, [r1, #20]
 800ddde:	600f      	str	r7, [r1, #0]
 800dde0:	bf18      	it	ne
 800dde2:	2300      	movne	r3, #0
 800dde4:	eba6 0807 	sub.w	r8, r6, r7
 800dde8:	608b      	str	r3, [r1, #8]
 800ddea:	f1b8 0f00 	cmp.w	r8, #0
 800ddee:	dd9c      	ble.n	800dd2a <__sflush_r+0x1a>
 800ddf0:	6a21      	ldr	r1, [r4, #32]
 800ddf2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ddf4:	4643      	mov	r3, r8
 800ddf6:	463a      	mov	r2, r7
 800ddf8:	4628      	mov	r0, r5
 800ddfa:	47b0      	blx	r6
 800ddfc:	2800      	cmp	r0, #0
 800ddfe:	dc06      	bgt.n	800de0e <__sflush_r+0xfe>
 800de00:	89a3      	ldrh	r3, [r4, #12]
 800de02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800de06:	81a3      	strh	r3, [r4, #12]
 800de08:	f04f 30ff 	mov.w	r0, #4294967295
 800de0c:	e78e      	b.n	800dd2c <__sflush_r+0x1c>
 800de0e:	4407      	add	r7, r0
 800de10:	eba8 0800 	sub.w	r8, r8, r0
 800de14:	e7e9      	b.n	800ddea <__sflush_r+0xda>
 800de16:	bf00      	nop
 800de18:	20400001 	.word	0x20400001

0800de1c <_fflush_r>:
 800de1c:	b538      	push	{r3, r4, r5, lr}
 800de1e:	690b      	ldr	r3, [r1, #16]
 800de20:	4605      	mov	r5, r0
 800de22:	460c      	mov	r4, r1
 800de24:	b913      	cbnz	r3, 800de2c <_fflush_r+0x10>
 800de26:	2500      	movs	r5, #0
 800de28:	4628      	mov	r0, r5
 800de2a:	bd38      	pop	{r3, r4, r5, pc}
 800de2c:	b118      	cbz	r0, 800de36 <_fflush_r+0x1a>
 800de2e:	6983      	ldr	r3, [r0, #24]
 800de30:	b90b      	cbnz	r3, 800de36 <_fflush_r+0x1a>
 800de32:	f000 f887 	bl	800df44 <__sinit>
 800de36:	4b14      	ldr	r3, [pc, #80]	; (800de88 <_fflush_r+0x6c>)
 800de38:	429c      	cmp	r4, r3
 800de3a:	d11b      	bne.n	800de74 <_fflush_r+0x58>
 800de3c:	686c      	ldr	r4, [r5, #4]
 800de3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800de42:	2b00      	cmp	r3, #0
 800de44:	d0ef      	beq.n	800de26 <_fflush_r+0xa>
 800de46:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800de48:	07d0      	lsls	r0, r2, #31
 800de4a:	d404      	bmi.n	800de56 <_fflush_r+0x3a>
 800de4c:	0599      	lsls	r1, r3, #22
 800de4e:	d402      	bmi.n	800de56 <_fflush_r+0x3a>
 800de50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800de52:	f000 f915 	bl	800e080 <__retarget_lock_acquire_recursive>
 800de56:	4628      	mov	r0, r5
 800de58:	4621      	mov	r1, r4
 800de5a:	f7ff ff59 	bl	800dd10 <__sflush_r>
 800de5e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800de60:	07da      	lsls	r2, r3, #31
 800de62:	4605      	mov	r5, r0
 800de64:	d4e0      	bmi.n	800de28 <_fflush_r+0xc>
 800de66:	89a3      	ldrh	r3, [r4, #12]
 800de68:	059b      	lsls	r3, r3, #22
 800de6a:	d4dd      	bmi.n	800de28 <_fflush_r+0xc>
 800de6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800de6e:	f000 f908 	bl	800e082 <__retarget_lock_release_recursive>
 800de72:	e7d9      	b.n	800de28 <_fflush_r+0xc>
 800de74:	4b05      	ldr	r3, [pc, #20]	; (800de8c <_fflush_r+0x70>)
 800de76:	429c      	cmp	r4, r3
 800de78:	d101      	bne.n	800de7e <_fflush_r+0x62>
 800de7a:	68ac      	ldr	r4, [r5, #8]
 800de7c:	e7df      	b.n	800de3e <_fflush_r+0x22>
 800de7e:	4b04      	ldr	r3, [pc, #16]	; (800de90 <_fflush_r+0x74>)
 800de80:	429c      	cmp	r4, r3
 800de82:	bf08      	it	eq
 800de84:	68ec      	ldreq	r4, [r5, #12]
 800de86:	e7da      	b.n	800de3e <_fflush_r+0x22>
 800de88:	080306f8 	.word	0x080306f8
 800de8c:	08030718 	.word	0x08030718
 800de90:	080306d8 	.word	0x080306d8

0800de94 <std>:
 800de94:	2300      	movs	r3, #0
 800de96:	b510      	push	{r4, lr}
 800de98:	4604      	mov	r4, r0
 800de9a:	e9c0 3300 	strd	r3, r3, [r0]
 800de9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800dea2:	6083      	str	r3, [r0, #8]
 800dea4:	8181      	strh	r1, [r0, #12]
 800dea6:	6643      	str	r3, [r0, #100]	; 0x64
 800dea8:	81c2      	strh	r2, [r0, #14]
 800deaa:	6183      	str	r3, [r0, #24]
 800deac:	4619      	mov	r1, r3
 800deae:	2208      	movs	r2, #8
 800deb0:	305c      	adds	r0, #92	; 0x5c
 800deb2:	f7ff fb3f 	bl	800d534 <memset>
 800deb6:	4b05      	ldr	r3, [pc, #20]	; (800decc <std+0x38>)
 800deb8:	6263      	str	r3, [r4, #36]	; 0x24
 800deba:	4b05      	ldr	r3, [pc, #20]	; (800ded0 <std+0x3c>)
 800debc:	62a3      	str	r3, [r4, #40]	; 0x28
 800debe:	4b05      	ldr	r3, [pc, #20]	; (800ded4 <std+0x40>)
 800dec0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800dec2:	4b05      	ldr	r3, [pc, #20]	; (800ded8 <std+0x44>)
 800dec4:	6224      	str	r4, [r4, #32]
 800dec6:	6323      	str	r3, [r4, #48]	; 0x30
 800dec8:	bd10      	pop	{r4, pc}
 800deca:	bf00      	nop
 800decc:	0800e3c1 	.word	0x0800e3c1
 800ded0:	0800e3e3 	.word	0x0800e3e3
 800ded4:	0800e41b 	.word	0x0800e41b
 800ded8:	0800e43f 	.word	0x0800e43f

0800dedc <_cleanup_r>:
 800dedc:	4901      	ldr	r1, [pc, #4]	; (800dee4 <_cleanup_r+0x8>)
 800dede:	f000 b8af 	b.w	800e040 <_fwalk_reent>
 800dee2:	bf00      	nop
 800dee4:	0800de1d 	.word	0x0800de1d

0800dee8 <__sfmoreglue>:
 800dee8:	b570      	push	{r4, r5, r6, lr}
 800deea:	2268      	movs	r2, #104	; 0x68
 800deec:	1e4d      	subs	r5, r1, #1
 800deee:	4355      	muls	r5, r2
 800def0:	460e      	mov	r6, r1
 800def2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800def6:	f000 f997 	bl	800e228 <_malloc_r>
 800defa:	4604      	mov	r4, r0
 800defc:	b140      	cbz	r0, 800df10 <__sfmoreglue+0x28>
 800defe:	2100      	movs	r1, #0
 800df00:	e9c0 1600 	strd	r1, r6, [r0]
 800df04:	300c      	adds	r0, #12
 800df06:	60a0      	str	r0, [r4, #8]
 800df08:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800df0c:	f7ff fb12 	bl	800d534 <memset>
 800df10:	4620      	mov	r0, r4
 800df12:	bd70      	pop	{r4, r5, r6, pc}

0800df14 <__sfp_lock_acquire>:
 800df14:	4801      	ldr	r0, [pc, #4]	; (800df1c <__sfp_lock_acquire+0x8>)
 800df16:	f000 b8b3 	b.w	800e080 <__retarget_lock_acquire_recursive>
 800df1a:	bf00      	nop
 800df1c:	20001a61 	.word	0x20001a61

0800df20 <__sfp_lock_release>:
 800df20:	4801      	ldr	r0, [pc, #4]	; (800df28 <__sfp_lock_release+0x8>)
 800df22:	f000 b8ae 	b.w	800e082 <__retarget_lock_release_recursive>
 800df26:	bf00      	nop
 800df28:	20001a61 	.word	0x20001a61

0800df2c <__sinit_lock_acquire>:
 800df2c:	4801      	ldr	r0, [pc, #4]	; (800df34 <__sinit_lock_acquire+0x8>)
 800df2e:	f000 b8a7 	b.w	800e080 <__retarget_lock_acquire_recursive>
 800df32:	bf00      	nop
 800df34:	20001a62 	.word	0x20001a62

0800df38 <__sinit_lock_release>:
 800df38:	4801      	ldr	r0, [pc, #4]	; (800df40 <__sinit_lock_release+0x8>)
 800df3a:	f000 b8a2 	b.w	800e082 <__retarget_lock_release_recursive>
 800df3e:	bf00      	nop
 800df40:	20001a62 	.word	0x20001a62

0800df44 <__sinit>:
 800df44:	b510      	push	{r4, lr}
 800df46:	4604      	mov	r4, r0
 800df48:	f7ff fff0 	bl	800df2c <__sinit_lock_acquire>
 800df4c:	69a3      	ldr	r3, [r4, #24]
 800df4e:	b11b      	cbz	r3, 800df58 <__sinit+0x14>
 800df50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800df54:	f7ff bff0 	b.w	800df38 <__sinit_lock_release>
 800df58:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800df5c:	6523      	str	r3, [r4, #80]	; 0x50
 800df5e:	4b13      	ldr	r3, [pc, #76]	; (800dfac <__sinit+0x68>)
 800df60:	4a13      	ldr	r2, [pc, #76]	; (800dfb0 <__sinit+0x6c>)
 800df62:	681b      	ldr	r3, [r3, #0]
 800df64:	62a2      	str	r2, [r4, #40]	; 0x28
 800df66:	42a3      	cmp	r3, r4
 800df68:	bf04      	itt	eq
 800df6a:	2301      	moveq	r3, #1
 800df6c:	61a3      	streq	r3, [r4, #24]
 800df6e:	4620      	mov	r0, r4
 800df70:	f000 f820 	bl	800dfb4 <__sfp>
 800df74:	6060      	str	r0, [r4, #4]
 800df76:	4620      	mov	r0, r4
 800df78:	f000 f81c 	bl	800dfb4 <__sfp>
 800df7c:	60a0      	str	r0, [r4, #8]
 800df7e:	4620      	mov	r0, r4
 800df80:	f000 f818 	bl	800dfb4 <__sfp>
 800df84:	2200      	movs	r2, #0
 800df86:	60e0      	str	r0, [r4, #12]
 800df88:	2104      	movs	r1, #4
 800df8a:	6860      	ldr	r0, [r4, #4]
 800df8c:	f7ff ff82 	bl	800de94 <std>
 800df90:	68a0      	ldr	r0, [r4, #8]
 800df92:	2201      	movs	r2, #1
 800df94:	2109      	movs	r1, #9
 800df96:	f7ff ff7d 	bl	800de94 <std>
 800df9a:	68e0      	ldr	r0, [r4, #12]
 800df9c:	2202      	movs	r2, #2
 800df9e:	2112      	movs	r1, #18
 800dfa0:	f7ff ff78 	bl	800de94 <std>
 800dfa4:	2301      	movs	r3, #1
 800dfa6:	61a3      	str	r3, [r4, #24]
 800dfa8:	e7d2      	b.n	800df50 <__sinit+0xc>
 800dfaa:	bf00      	nop
 800dfac:	080306a0 	.word	0x080306a0
 800dfb0:	0800dedd 	.word	0x0800dedd

0800dfb4 <__sfp>:
 800dfb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dfb6:	4607      	mov	r7, r0
 800dfb8:	f7ff ffac 	bl	800df14 <__sfp_lock_acquire>
 800dfbc:	4b1e      	ldr	r3, [pc, #120]	; (800e038 <__sfp+0x84>)
 800dfbe:	681e      	ldr	r6, [r3, #0]
 800dfc0:	69b3      	ldr	r3, [r6, #24]
 800dfc2:	b913      	cbnz	r3, 800dfca <__sfp+0x16>
 800dfc4:	4630      	mov	r0, r6
 800dfc6:	f7ff ffbd 	bl	800df44 <__sinit>
 800dfca:	3648      	adds	r6, #72	; 0x48
 800dfcc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800dfd0:	3b01      	subs	r3, #1
 800dfd2:	d503      	bpl.n	800dfdc <__sfp+0x28>
 800dfd4:	6833      	ldr	r3, [r6, #0]
 800dfd6:	b30b      	cbz	r3, 800e01c <__sfp+0x68>
 800dfd8:	6836      	ldr	r6, [r6, #0]
 800dfda:	e7f7      	b.n	800dfcc <__sfp+0x18>
 800dfdc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800dfe0:	b9d5      	cbnz	r5, 800e018 <__sfp+0x64>
 800dfe2:	4b16      	ldr	r3, [pc, #88]	; (800e03c <__sfp+0x88>)
 800dfe4:	60e3      	str	r3, [r4, #12]
 800dfe6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800dfea:	6665      	str	r5, [r4, #100]	; 0x64
 800dfec:	f000 f847 	bl	800e07e <__retarget_lock_init_recursive>
 800dff0:	f7ff ff96 	bl	800df20 <__sfp_lock_release>
 800dff4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800dff8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800dffc:	6025      	str	r5, [r4, #0]
 800dffe:	61a5      	str	r5, [r4, #24]
 800e000:	2208      	movs	r2, #8
 800e002:	4629      	mov	r1, r5
 800e004:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e008:	f7ff fa94 	bl	800d534 <memset>
 800e00c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e010:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e014:	4620      	mov	r0, r4
 800e016:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e018:	3468      	adds	r4, #104	; 0x68
 800e01a:	e7d9      	b.n	800dfd0 <__sfp+0x1c>
 800e01c:	2104      	movs	r1, #4
 800e01e:	4638      	mov	r0, r7
 800e020:	f7ff ff62 	bl	800dee8 <__sfmoreglue>
 800e024:	4604      	mov	r4, r0
 800e026:	6030      	str	r0, [r6, #0]
 800e028:	2800      	cmp	r0, #0
 800e02a:	d1d5      	bne.n	800dfd8 <__sfp+0x24>
 800e02c:	f7ff ff78 	bl	800df20 <__sfp_lock_release>
 800e030:	230c      	movs	r3, #12
 800e032:	603b      	str	r3, [r7, #0]
 800e034:	e7ee      	b.n	800e014 <__sfp+0x60>
 800e036:	bf00      	nop
 800e038:	080306a0 	.word	0x080306a0
 800e03c:	ffff0001 	.word	0xffff0001

0800e040 <_fwalk_reent>:
 800e040:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e044:	4606      	mov	r6, r0
 800e046:	4688      	mov	r8, r1
 800e048:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e04c:	2700      	movs	r7, #0
 800e04e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e052:	f1b9 0901 	subs.w	r9, r9, #1
 800e056:	d505      	bpl.n	800e064 <_fwalk_reent+0x24>
 800e058:	6824      	ldr	r4, [r4, #0]
 800e05a:	2c00      	cmp	r4, #0
 800e05c:	d1f7      	bne.n	800e04e <_fwalk_reent+0xe>
 800e05e:	4638      	mov	r0, r7
 800e060:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e064:	89ab      	ldrh	r3, [r5, #12]
 800e066:	2b01      	cmp	r3, #1
 800e068:	d907      	bls.n	800e07a <_fwalk_reent+0x3a>
 800e06a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e06e:	3301      	adds	r3, #1
 800e070:	d003      	beq.n	800e07a <_fwalk_reent+0x3a>
 800e072:	4629      	mov	r1, r5
 800e074:	4630      	mov	r0, r6
 800e076:	47c0      	blx	r8
 800e078:	4307      	orrs	r7, r0
 800e07a:	3568      	adds	r5, #104	; 0x68
 800e07c:	e7e9      	b.n	800e052 <_fwalk_reent+0x12>

0800e07e <__retarget_lock_init_recursive>:
 800e07e:	4770      	bx	lr

0800e080 <__retarget_lock_acquire_recursive>:
 800e080:	4770      	bx	lr

0800e082 <__retarget_lock_release_recursive>:
 800e082:	4770      	bx	lr

0800e084 <__swhatbuf_r>:
 800e084:	b570      	push	{r4, r5, r6, lr}
 800e086:	460e      	mov	r6, r1
 800e088:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e08c:	2900      	cmp	r1, #0
 800e08e:	b096      	sub	sp, #88	; 0x58
 800e090:	4614      	mov	r4, r2
 800e092:	461d      	mov	r5, r3
 800e094:	da08      	bge.n	800e0a8 <__swhatbuf_r+0x24>
 800e096:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800e09a:	2200      	movs	r2, #0
 800e09c:	602a      	str	r2, [r5, #0]
 800e09e:	061a      	lsls	r2, r3, #24
 800e0a0:	d410      	bmi.n	800e0c4 <__swhatbuf_r+0x40>
 800e0a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e0a6:	e00e      	b.n	800e0c6 <__swhatbuf_r+0x42>
 800e0a8:	466a      	mov	r2, sp
 800e0aa:	f000 f9ef 	bl	800e48c <_fstat_r>
 800e0ae:	2800      	cmp	r0, #0
 800e0b0:	dbf1      	blt.n	800e096 <__swhatbuf_r+0x12>
 800e0b2:	9a01      	ldr	r2, [sp, #4]
 800e0b4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e0b8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e0bc:	425a      	negs	r2, r3
 800e0be:	415a      	adcs	r2, r3
 800e0c0:	602a      	str	r2, [r5, #0]
 800e0c2:	e7ee      	b.n	800e0a2 <__swhatbuf_r+0x1e>
 800e0c4:	2340      	movs	r3, #64	; 0x40
 800e0c6:	2000      	movs	r0, #0
 800e0c8:	6023      	str	r3, [r4, #0]
 800e0ca:	b016      	add	sp, #88	; 0x58
 800e0cc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e0d0 <__smakebuf_r>:
 800e0d0:	898b      	ldrh	r3, [r1, #12]
 800e0d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e0d4:	079d      	lsls	r5, r3, #30
 800e0d6:	4606      	mov	r6, r0
 800e0d8:	460c      	mov	r4, r1
 800e0da:	d507      	bpl.n	800e0ec <__smakebuf_r+0x1c>
 800e0dc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e0e0:	6023      	str	r3, [r4, #0]
 800e0e2:	6123      	str	r3, [r4, #16]
 800e0e4:	2301      	movs	r3, #1
 800e0e6:	6163      	str	r3, [r4, #20]
 800e0e8:	b002      	add	sp, #8
 800e0ea:	bd70      	pop	{r4, r5, r6, pc}
 800e0ec:	ab01      	add	r3, sp, #4
 800e0ee:	466a      	mov	r2, sp
 800e0f0:	f7ff ffc8 	bl	800e084 <__swhatbuf_r>
 800e0f4:	9900      	ldr	r1, [sp, #0]
 800e0f6:	4605      	mov	r5, r0
 800e0f8:	4630      	mov	r0, r6
 800e0fa:	f000 f895 	bl	800e228 <_malloc_r>
 800e0fe:	b948      	cbnz	r0, 800e114 <__smakebuf_r+0x44>
 800e100:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e104:	059a      	lsls	r2, r3, #22
 800e106:	d4ef      	bmi.n	800e0e8 <__smakebuf_r+0x18>
 800e108:	f023 0303 	bic.w	r3, r3, #3
 800e10c:	f043 0302 	orr.w	r3, r3, #2
 800e110:	81a3      	strh	r3, [r4, #12]
 800e112:	e7e3      	b.n	800e0dc <__smakebuf_r+0xc>
 800e114:	4b0d      	ldr	r3, [pc, #52]	; (800e14c <__smakebuf_r+0x7c>)
 800e116:	62b3      	str	r3, [r6, #40]	; 0x28
 800e118:	89a3      	ldrh	r3, [r4, #12]
 800e11a:	6020      	str	r0, [r4, #0]
 800e11c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e120:	81a3      	strh	r3, [r4, #12]
 800e122:	9b00      	ldr	r3, [sp, #0]
 800e124:	6163      	str	r3, [r4, #20]
 800e126:	9b01      	ldr	r3, [sp, #4]
 800e128:	6120      	str	r0, [r4, #16]
 800e12a:	b15b      	cbz	r3, 800e144 <__smakebuf_r+0x74>
 800e12c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e130:	4630      	mov	r0, r6
 800e132:	f000 f9bd 	bl	800e4b0 <_isatty_r>
 800e136:	b128      	cbz	r0, 800e144 <__smakebuf_r+0x74>
 800e138:	89a3      	ldrh	r3, [r4, #12]
 800e13a:	f023 0303 	bic.w	r3, r3, #3
 800e13e:	f043 0301 	orr.w	r3, r3, #1
 800e142:	81a3      	strh	r3, [r4, #12]
 800e144:	89a0      	ldrh	r0, [r4, #12]
 800e146:	4305      	orrs	r5, r0
 800e148:	81a5      	strh	r5, [r4, #12]
 800e14a:	e7cd      	b.n	800e0e8 <__smakebuf_r+0x18>
 800e14c:	0800dedd 	.word	0x0800dedd

0800e150 <_free_r>:
 800e150:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e152:	2900      	cmp	r1, #0
 800e154:	d044      	beq.n	800e1e0 <_free_r+0x90>
 800e156:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e15a:	9001      	str	r0, [sp, #4]
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	f1a1 0404 	sub.w	r4, r1, #4
 800e162:	bfb8      	it	lt
 800e164:	18e4      	addlt	r4, r4, r3
 800e166:	f000 f9c5 	bl	800e4f4 <__malloc_lock>
 800e16a:	4a1e      	ldr	r2, [pc, #120]	; (800e1e4 <_free_r+0x94>)
 800e16c:	9801      	ldr	r0, [sp, #4]
 800e16e:	6813      	ldr	r3, [r2, #0]
 800e170:	b933      	cbnz	r3, 800e180 <_free_r+0x30>
 800e172:	6063      	str	r3, [r4, #4]
 800e174:	6014      	str	r4, [r2, #0]
 800e176:	b003      	add	sp, #12
 800e178:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e17c:	f000 b9c0 	b.w	800e500 <__malloc_unlock>
 800e180:	42a3      	cmp	r3, r4
 800e182:	d908      	bls.n	800e196 <_free_r+0x46>
 800e184:	6825      	ldr	r5, [r4, #0]
 800e186:	1961      	adds	r1, r4, r5
 800e188:	428b      	cmp	r3, r1
 800e18a:	bf01      	itttt	eq
 800e18c:	6819      	ldreq	r1, [r3, #0]
 800e18e:	685b      	ldreq	r3, [r3, #4]
 800e190:	1949      	addeq	r1, r1, r5
 800e192:	6021      	streq	r1, [r4, #0]
 800e194:	e7ed      	b.n	800e172 <_free_r+0x22>
 800e196:	461a      	mov	r2, r3
 800e198:	685b      	ldr	r3, [r3, #4]
 800e19a:	b10b      	cbz	r3, 800e1a0 <_free_r+0x50>
 800e19c:	42a3      	cmp	r3, r4
 800e19e:	d9fa      	bls.n	800e196 <_free_r+0x46>
 800e1a0:	6811      	ldr	r1, [r2, #0]
 800e1a2:	1855      	adds	r5, r2, r1
 800e1a4:	42a5      	cmp	r5, r4
 800e1a6:	d10b      	bne.n	800e1c0 <_free_r+0x70>
 800e1a8:	6824      	ldr	r4, [r4, #0]
 800e1aa:	4421      	add	r1, r4
 800e1ac:	1854      	adds	r4, r2, r1
 800e1ae:	42a3      	cmp	r3, r4
 800e1b0:	6011      	str	r1, [r2, #0]
 800e1b2:	d1e0      	bne.n	800e176 <_free_r+0x26>
 800e1b4:	681c      	ldr	r4, [r3, #0]
 800e1b6:	685b      	ldr	r3, [r3, #4]
 800e1b8:	6053      	str	r3, [r2, #4]
 800e1ba:	4421      	add	r1, r4
 800e1bc:	6011      	str	r1, [r2, #0]
 800e1be:	e7da      	b.n	800e176 <_free_r+0x26>
 800e1c0:	d902      	bls.n	800e1c8 <_free_r+0x78>
 800e1c2:	230c      	movs	r3, #12
 800e1c4:	6003      	str	r3, [r0, #0]
 800e1c6:	e7d6      	b.n	800e176 <_free_r+0x26>
 800e1c8:	6825      	ldr	r5, [r4, #0]
 800e1ca:	1961      	adds	r1, r4, r5
 800e1cc:	428b      	cmp	r3, r1
 800e1ce:	bf04      	itt	eq
 800e1d0:	6819      	ldreq	r1, [r3, #0]
 800e1d2:	685b      	ldreq	r3, [r3, #4]
 800e1d4:	6063      	str	r3, [r4, #4]
 800e1d6:	bf04      	itt	eq
 800e1d8:	1949      	addeq	r1, r1, r5
 800e1da:	6021      	streq	r1, [r4, #0]
 800e1dc:	6054      	str	r4, [r2, #4]
 800e1de:	e7ca      	b.n	800e176 <_free_r+0x26>
 800e1e0:	b003      	add	sp, #12
 800e1e2:	bd30      	pop	{r4, r5, pc}
 800e1e4:	20001a64 	.word	0x20001a64

0800e1e8 <sbrk_aligned>:
 800e1e8:	b570      	push	{r4, r5, r6, lr}
 800e1ea:	4e0e      	ldr	r6, [pc, #56]	; (800e224 <sbrk_aligned+0x3c>)
 800e1ec:	460c      	mov	r4, r1
 800e1ee:	6831      	ldr	r1, [r6, #0]
 800e1f0:	4605      	mov	r5, r0
 800e1f2:	b911      	cbnz	r1, 800e1fa <sbrk_aligned+0x12>
 800e1f4:	f000 f8d4 	bl	800e3a0 <_sbrk_r>
 800e1f8:	6030      	str	r0, [r6, #0]
 800e1fa:	4621      	mov	r1, r4
 800e1fc:	4628      	mov	r0, r5
 800e1fe:	f000 f8cf 	bl	800e3a0 <_sbrk_r>
 800e202:	1c43      	adds	r3, r0, #1
 800e204:	d00a      	beq.n	800e21c <sbrk_aligned+0x34>
 800e206:	1cc4      	adds	r4, r0, #3
 800e208:	f024 0403 	bic.w	r4, r4, #3
 800e20c:	42a0      	cmp	r0, r4
 800e20e:	d007      	beq.n	800e220 <sbrk_aligned+0x38>
 800e210:	1a21      	subs	r1, r4, r0
 800e212:	4628      	mov	r0, r5
 800e214:	f000 f8c4 	bl	800e3a0 <_sbrk_r>
 800e218:	3001      	adds	r0, #1
 800e21a:	d101      	bne.n	800e220 <sbrk_aligned+0x38>
 800e21c:	f04f 34ff 	mov.w	r4, #4294967295
 800e220:	4620      	mov	r0, r4
 800e222:	bd70      	pop	{r4, r5, r6, pc}
 800e224:	20001a68 	.word	0x20001a68

0800e228 <_malloc_r>:
 800e228:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e22c:	1ccd      	adds	r5, r1, #3
 800e22e:	f025 0503 	bic.w	r5, r5, #3
 800e232:	3508      	adds	r5, #8
 800e234:	2d0c      	cmp	r5, #12
 800e236:	bf38      	it	cc
 800e238:	250c      	movcc	r5, #12
 800e23a:	2d00      	cmp	r5, #0
 800e23c:	4607      	mov	r7, r0
 800e23e:	db01      	blt.n	800e244 <_malloc_r+0x1c>
 800e240:	42a9      	cmp	r1, r5
 800e242:	d905      	bls.n	800e250 <_malloc_r+0x28>
 800e244:	230c      	movs	r3, #12
 800e246:	603b      	str	r3, [r7, #0]
 800e248:	2600      	movs	r6, #0
 800e24a:	4630      	mov	r0, r6
 800e24c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e250:	4e2e      	ldr	r6, [pc, #184]	; (800e30c <_malloc_r+0xe4>)
 800e252:	f000 f94f 	bl	800e4f4 <__malloc_lock>
 800e256:	6833      	ldr	r3, [r6, #0]
 800e258:	461c      	mov	r4, r3
 800e25a:	bb34      	cbnz	r4, 800e2aa <_malloc_r+0x82>
 800e25c:	4629      	mov	r1, r5
 800e25e:	4638      	mov	r0, r7
 800e260:	f7ff ffc2 	bl	800e1e8 <sbrk_aligned>
 800e264:	1c43      	adds	r3, r0, #1
 800e266:	4604      	mov	r4, r0
 800e268:	d14d      	bne.n	800e306 <_malloc_r+0xde>
 800e26a:	6834      	ldr	r4, [r6, #0]
 800e26c:	4626      	mov	r6, r4
 800e26e:	2e00      	cmp	r6, #0
 800e270:	d140      	bne.n	800e2f4 <_malloc_r+0xcc>
 800e272:	6823      	ldr	r3, [r4, #0]
 800e274:	4631      	mov	r1, r6
 800e276:	4638      	mov	r0, r7
 800e278:	eb04 0803 	add.w	r8, r4, r3
 800e27c:	f000 f890 	bl	800e3a0 <_sbrk_r>
 800e280:	4580      	cmp	r8, r0
 800e282:	d13a      	bne.n	800e2fa <_malloc_r+0xd2>
 800e284:	6821      	ldr	r1, [r4, #0]
 800e286:	3503      	adds	r5, #3
 800e288:	1a6d      	subs	r5, r5, r1
 800e28a:	f025 0503 	bic.w	r5, r5, #3
 800e28e:	3508      	adds	r5, #8
 800e290:	2d0c      	cmp	r5, #12
 800e292:	bf38      	it	cc
 800e294:	250c      	movcc	r5, #12
 800e296:	4629      	mov	r1, r5
 800e298:	4638      	mov	r0, r7
 800e29a:	f7ff ffa5 	bl	800e1e8 <sbrk_aligned>
 800e29e:	3001      	adds	r0, #1
 800e2a0:	d02b      	beq.n	800e2fa <_malloc_r+0xd2>
 800e2a2:	6823      	ldr	r3, [r4, #0]
 800e2a4:	442b      	add	r3, r5
 800e2a6:	6023      	str	r3, [r4, #0]
 800e2a8:	e00e      	b.n	800e2c8 <_malloc_r+0xa0>
 800e2aa:	6822      	ldr	r2, [r4, #0]
 800e2ac:	1b52      	subs	r2, r2, r5
 800e2ae:	d41e      	bmi.n	800e2ee <_malloc_r+0xc6>
 800e2b0:	2a0b      	cmp	r2, #11
 800e2b2:	d916      	bls.n	800e2e2 <_malloc_r+0xba>
 800e2b4:	1961      	adds	r1, r4, r5
 800e2b6:	42a3      	cmp	r3, r4
 800e2b8:	6025      	str	r5, [r4, #0]
 800e2ba:	bf18      	it	ne
 800e2bc:	6059      	strne	r1, [r3, #4]
 800e2be:	6863      	ldr	r3, [r4, #4]
 800e2c0:	bf08      	it	eq
 800e2c2:	6031      	streq	r1, [r6, #0]
 800e2c4:	5162      	str	r2, [r4, r5]
 800e2c6:	604b      	str	r3, [r1, #4]
 800e2c8:	4638      	mov	r0, r7
 800e2ca:	f104 060b 	add.w	r6, r4, #11
 800e2ce:	f000 f917 	bl	800e500 <__malloc_unlock>
 800e2d2:	f026 0607 	bic.w	r6, r6, #7
 800e2d6:	1d23      	adds	r3, r4, #4
 800e2d8:	1af2      	subs	r2, r6, r3
 800e2da:	d0b6      	beq.n	800e24a <_malloc_r+0x22>
 800e2dc:	1b9b      	subs	r3, r3, r6
 800e2de:	50a3      	str	r3, [r4, r2]
 800e2e0:	e7b3      	b.n	800e24a <_malloc_r+0x22>
 800e2e2:	6862      	ldr	r2, [r4, #4]
 800e2e4:	42a3      	cmp	r3, r4
 800e2e6:	bf0c      	ite	eq
 800e2e8:	6032      	streq	r2, [r6, #0]
 800e2ea:	605a      	strne	r2, [r3, #4]
 800e2ec:	e7ec      	b.n	800e2c8 <_malloc_r+0xa0>
 800e2ee:	4623      	mov	r3, r4
 800e2f0:	6864      	ldr	r4, [r4, #4]
 800e2f2:	e7b2      	b.n	800e25a <_malloc_r+0x32>
 800e2f4:	4634      	mov	r4, r6
 800e2f6:	6876      	ldr	r6, [r6, #4]
 800e2f8:	e7b9      	b.n	800e26e <_malloc_r+0x46>
 800e2fa:	230c      	movs	r3, #12
 800e2fc:	603b      	str	r3, [r7, #0]
 800e2fe:	4638      	mov	r0, r7
 800e300:	f000 f8fe 	bl	800e500 <__malloc_unlock>
 800e304:	e7a1      	b.n	800e24a <_malloc_r+0x22>
 800e306:	6025      	str	r5, [r4, #0]
 800e308:	e7de      	b.n	800e2c8 <_malloc_r+0xa0>
 800e30a:	bf00      	nop
 800e30c:	20001a64 	.word	0x20001a64

0800e310 <_putc_r>:
 800e310:	b570      	push	{r4, r5, r6, lr}
 800e312:	460d      	mov	r5, r1
 800e314:	4614      	mov	r4, r2
 800e316:	4606      	mov	r6, r0
 800e318:	b118      	cbz	r0, 800e322 <_putc_r+0x12>
 800e31a:	6983      	ldr	r3, [r0, #24]
 800e31c:	b90b      	cbnz	r3, 800e322 <_putc_r+0x12>
 800e31e:	f7ff fe11 	bl	800df44 <__sinit>
 800e322:	4b1c      	ldr	r3, [pc, #112]	; (800e394 <_putc_r+0x84>)
 800e324:	429c      	cmp	r4, r3
 800e326:	d124      	bne.n	800e372 <_putc_r+0x62>
 800e328:	6874      	ldr	r4, [r6, #4]
 800e32a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e32c:	07d8      	lsls	r0, r3, #31
 800e32e:	d405      	bmi.n	800e33c <_putc_r+0x2c>
 800e330:	89a3      	ldrh	r3, [r4, #12]
 800e332:	0599      	lsls	r1, r3, #22
 800e334:	d402      	bmi.n	800e33c <_putc_r+0x2c>
 800e336:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e338:	f7ff fea2 	bl	800e080 <__retarget_lock_acquire_recursive>
 800e33c:	68a3      	ldr	r3, [r4, #8]
 800e33e:	3b01      	subs	r3, #1
 800e340:	2b00      	cmp	r3, #0
 800e342:	60a3      	str	r3, [r4, #8]
 800e344:	da05      	bge.n	800e352 <_putc_r+0x42>
 800e346:	69a2      	ldr	r2, [r4, #24]
 800e348:	4293      	cmp	r3, r2
 800e34a:	db1c      	blt.n	800e386 <_putc_r+0x76>
 800e34c:	b2eb      	uxtb	r3, r5
 800e34e:	2b0a      	cmp	r3, #10
 800e350:	d019      	beq.n	800e386 <_putc_r+0x76>
 800e352:	6823      	ldr	r3, [r4, #0]
 800e354:	1c5a      	adds	r2, r3, #1
 800e356:	6022      	str	r2, [r4, #0]
 800e358:	701d      	strb	r5, [r3, #0]
 800e35a:	b2ed      	uxtb	r5, r5
 800e35c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e35e:	07da      	lsls	r2, r3, #31
 800e360:	d405      	bmi.n	800e36e <_putc_r+0x5e>
 800e362:	89a3      	ldrh	r3, [r4, #12]
 800e364:	059b      	lsls	r3, r3, #22
 800e366:	d402      	bmi.n	800e36e <_putc_r+0x5e>
 800e368:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e36a:	f7ff fe8a 	bl	800e082 <__retarget_lock_release_recursive>
 800e36e:	4628      	mov	r0, r5
 800e370:	bd70      	pop	{r4, r5, r6, pc}
 800e372:	4b09      	ldr	r3, [pc, #36]	; (800e398 <_putc_r+0x88>)
 800e374:	429c      	cmp	r4, r3
 800e376:	d101      	bne.n	800e37c <_putc_r+0x6c>
 800e378:	68b4      	ldr	r4, [r6, #8]
 800e37a:	e7d6      	b.n	800e32a <_putc_r+0x1a>
 800e37c:	4b07      	ldr	r3, [pc, #28]	; (800e39c <_putc_r+0x8c>)
 800e37e:	429c      	cmp	r4, r3
 800e380:	bf08      	it	eq
 800e382:	68f4      	ldreq	r4, [r6, #12]
 800e384:	e7d1      	b.n	800e32a <_putc_r+0x1a>
 800e386:	4629      	mov	r1, r5
 800e388:	4622      	mov	r2, r4
 800e38a:	4630      	mov	r0, r6
 800e38c:	f7ff fc00 	bl	800db90 <__swbuf_r>
 800e390:	4605      	mov	r5, r0
 800e392:	e7e3      	b.n	800e35c <_putc_r+0x4c>
 800e394:	080306f8 	.word	0x080306f8
 800e398:	08030718 	.word	0x08030718
 800e39c:	080306d8 	.word	0x080306d8

0800e3a0 <_sbrk_r>:
 800e3a0:	b538      	push	{r3, r4, r5, lr}
 800e3a2:	4d06      	ldr	r5, [pc, #24]	; (800e3bc <_sbrk_r+0x1c>)
 800e3a4:	2300      	movs	r3, #0
 800e3a6:	4604      	mov	r4, r0
 800e3a8:	4608      	mov	r0, r1
 800e3aa:	602b      	str	r3, [r5, #0]
 800e3ac:	f7f4 f856 	bl	800245c <_sbrk>
 800e3b0:	1c43      	adds	r3, r0, #1
 800e3b2:	d102      	bne.n	800e3ba <_sbrk_r+0x1a>
 800e3b4:	682b      	ldr	r3, [r5, #0]
 800e3b6:	b103      	cbz	r3, 800e3ba <_sbrk_r+0x1a>
 800e3b8:	6023      	str	r3, [r4, #0]
 800e3ba:	bd38      	pop	{r3, r4, r5, pc}
 800e3bc:	20001a6c 	.word	0x20001a6c

0800e3c0 <__sread>:
 800e3c0:	b510      	push	{r4, lr}
 800e3c2:	460c      	mov	r4, r1
 800e3c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e3c8:	f000 f8a0 	bl	800e50c <_read_r>
 800e3cc:	2800      	cmp	r0, #0
 800e3ce:	bfab      	itete	ge
 800e3d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e3d2:	89a3      	ldrhlt	r3, [r4, #12]
 800e3d4:	181b      	addge	r3, r3, r0
 800e3d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e3da:	bfac      	ite	ge
 800e3dc:	6563      	strge	r3, [r4, #84]	; 0x54
 800e3de:	81a3      	strhlt	r3, [r4, #12]
 800e3e0:	bd10      	pop	{r4, pc}

0800e3e2 <__swrite>:
 800e3e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e3e6:	461f      	mov	r7, r3
 800e3e8:	898b      	ldrh	r3, [r1, #12]
 800e3ea:	05db      	lsls	r3, r3, #23
 800e3ec:	4605      	mov	r5, r0
 800e3ee:	460c      	mov	r4, r1
 800e3f0:	4616      	mov	r6, r2
 800e3f2:	d505      	bpl.n	800e400 <__swrite+0x1e>
 800e3f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e3f8:	2302      	movs	r3, #2
 800e3fa:	2200      	movs	r2, #0
 800e3fc:	f000 f868 	bl	800e4d0 <_lseek_r>
 800e400:	89a3      	ldrh	r3, [r4, #12]
 800e402:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e406:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e40a:	81a3      	strh	r3, [r4, #12]
 800e40c:	4632      	mov	r2, r6
 800e40e:	463b      	mov	r3, r7
 800e410:	4628      	mov	r0, r5
 800e412:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e416:	f000 b817 	b.w	800e448 <_write_r>

0800e41a <__sseek>:
 800e41a:	b510      	push	{r4, lr}
 800e41c:	460c      	mov	r4, r1
 800e41e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e422:	f000 f855 	bl	800e4d0 <_lseek_r>
 800e426:	1c43      	adds	r3, r0, #1
 800e428:	89a3      	ldrh	r3, [r4, #12]
 800e42a:	bf15      	itete	ne
 800e42c:	6560      	strne	r0, [r4, #84]	; 0x54
 800e42e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e432:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e436:	81a3      	strheq	r3, [r4, #12]
 800e438:	bf18      	it	ne
 800e43a:	81a3      	strhne	r3, [r4, #12]
 800e43c:	bd10      	pop	{r4, pc}

0800e43e <__sclose>:
 800e43e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e442:	f000 b813 	b.w	800e46c <_close_r>
	...

0800e448 <_write_r>:
 800e448:	b538      	push	{r3, r4, r5, lr}
 800e44a:	4d07      	ldr	r5, [pc, #28]	; (800e468 <_write_r+0x20>)
 800e44c:	4604      	mov	r4, r0
 800e44e:	4608      	mov	r0, r1
 800e450:	4611      	mov	r1, r2
 800e452:	2200      	movs	r2, #0
 800e454:	602a      	str	r2, [r5, #0]
 800e456:	461a      	mov	r2, r3
 800e458:	f7f3 ffaf 	bl	80023ba <_write>
 800e45c:	1c43      	adds	r3, r0, #1
 800e45e:	d102      	bne.n	800e466 <_write_r+0x1e>
 800e460:	682b      	ldr	r3, [r5, #0]
 800e462:	b103      	cbz	r3, 800e466 <_write_r+0x1e>
 800e464:	6023      	str	r3, [r4, #0]
 800e466:	bd38      	pop	{r3, r4, r5, pc}
 800e468:	20001a6c 	.word	0x20001a6c

0800e46c <_close_r>:
 800e46c:	b538      	push	{r3, r4, r5, lr}
 800e46e:	4d06      	ldr	r5, [pc, #24]	; (800e488 <_close_r+0x1c>)
 800e470:	2300      	movs	r3, #0
 800e472:	4604      	mov	r4, r0
 800e474:	4608      	mov	r0, r1
 800e476:	602b      	str	r3, [r5, #0]
 800e478:	f7f3 ffbb 	bl	80023f2 <_close>
 800e47c:	1c43      	adds	r3, r0, #1
 800e47e:	d102      	bne.n	800e486 <_close_r+0x1a>
 800e480:	682b      	ldr	r3, [r5, #0]
 800e482:	b103      	cbz	r3, 800e486 <_close_r+0x1a>
 800e484:	6023      	str	r3, [r4, #0]
 800e486:	bd38      	pop	{r3, r4, r5, pc}
 800e488:	20001a6c 	.word	0x20001a6c

0800e48c <_fstat_r>:
 800e48c:	b538      	push	{r3, r4, r5, lr}
 800e48e:	4d07      	ldr	r5, [pc, #28]	; (800e4ac <_fstat_r+0x20>)
 800e490:	2300      	movs	r3, #0
 800e492:	4604      	mov	r4, r0
 800e494:	4608      	mov	r0, r1
 800e496:	4611      	mov	r1, r2
 800e498:	602b      	str	r3, [r5, #0]
 800e49a:	f7f3 ffb6 	bl	800240a <_fstat>
 800e49e:	1c43      	adds	r3, r0, #1
 800e4a0:	d102      	bne.n	800e4a8 <_fstat_r+0x1c>
 800e4a2:	682b      	ldr	r3, [r5, #0]
 800e4a4:	b103      	cbz	r3, 800e4a8 <_fstat_r+0x1c>
 800e4a6:	6023      	str	r3, [r4, #0]
 800e4a8:	bd38      	pop	{r3, r4, r5, pc}
 800e4aa:	bf00      	nop
 800e4ac:	20001a6c 	.word	0x20001a6c

0800e4b0 <_isatty_r>:
 800e4b0:	b538      	push	{r3, r4, r5, lr}
 800e4b2:	4d06      	ldr	r5, [pc, #24]	; (800e4cc <_isatty_r+0x1c>)
 800e4b4:	2300      	movs	r3, #0
 800e4b6:	4604      	mov	r4, r0
 800e4b8:	4608      	mov	r0, r1
 800e4ba:	602b      	str	r3, [r5, #0]
 800e4bc:	f7f3 ffb5 	bl	800242a <_isatty>
 800e4c0:	1c43      	adds	r3, r0, #1
 800e4c2:	d102      	bne.n	800e4ca <_isatty_r+0x1a>
 800e4c4:	682b      	ldr	r3, [r5, #0]
 800e4c6:	b103      	cbz	r3, 800e4ca <_isatty_r+0x1a>
 800e4c8:	6023      	str	r3, [r4, #0]
 800e4ca:	bd38      	pop	{r3, r4, r5, pc}
 800e4cc:	20001a6c 	.word	0x20001a6c

0800e4d0 <_lseek_r>:
 800e4d0:	b538      	push	{r3, r4, r5, lr}
 800e4d2:	4d07      	ldr	r5, [pc, #28]	; (800e4f0 <_lseek_r+0x20>)
 800e4d4:	4604      	mov	r4, r0
 800e4d6:	4608      	mov	r0, r1
 800e4d8:	4611      	mov	r1, r2
 800e4da:	2200      	movs	r2, #0
 800e4dc:	602a      	str	r2, [r5, #0]
 800e4de:	461a      	mov	r2, r3
 800e4e0:	f7f3 ffae 	bl	8002440 <_lseek>
 800e4e4:	1c43      	adds	r3, r0, #1
 800e4e6:	d102      	bne.n	800e4ee <_lseek_r+0x1e>
 800e4e8:	682b      	ldr	r3, [r5, #0]
 800e4ea:	b103      	cbz	r3, 800e4ee <_lseek_r+0x1e>
 800e4ec:	6023      	str	r3, [r4, #0]
 800e4ee:	bd38      	pop	{r3, r4, r5, pc}
 800e4f0:	20001a6c 	.word	0x20001a6c

0800e4f4 <__malloc_lock>:
 800e4f4:	4801      	ldr	r0, [pc, #4]	; (800e4fc <__malloc_lock+0x8>)
 800e4f6:	f7ff bdc3 	b.w	800e080 <__retarget_lock_acquire_recursive>
 800e4fa:	bf00      	nop
 800e4fc:	20001a60 	.word	0x20001a60

0800e500 <__malloc_unlock>:
 800e500:	4801      	ldr	r0, [pc, #4]	; (800e508 <__malloc_unlock+0x8>)
 800e502:	f7ff bdbe 	b.w	800e082 <__retarget_lock_release_recursive>
 800e506:	bf00      	nop
 800e508:	20001a60 	.word	0x20001a60

0800e50c <_read_r>:
 800e50c:	b538      	push	{r3, r4, r5, lr}
 800e50e:	4d07      	ldr	r5, [pc, #28]	; (800e52c <_read_r+0x20>)
 800e510:	4604      	mov	r4, r0
 800e512:	4608      	mov	r0, r1
 800e514:	4611      	mov	r1, r2
 800e516:	2200      	movs	r2, #0
 800e518:	602a      	str	r2, [r5, #0]
 800e51a:	461a      	mov	r2, r3
 800e51c:	f7f3 ff30 	bl	8002380 <_read>
 800e520:	1c43      	adds	r3, r0, #1
 800e522:	d102      	bne.n	800e52a <_read_r+0x1e>
 800e524:	682b      	ldr	r3, [r5, #0]
 800e526:	b103      	cbz	r3, 800e52a <_read_r+0x1e>
 800e528:	6023      	str	r3, [r4, #0]
 800e52a:	bd38      	pop	{r3, r4, r5, pc}
 800e52c:	20001a6c 	.word	0x20001a6c

0800e530 <_init>:
 800e530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e532:	bf00      	nop
 800e534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e536:	bc08      	pop	{r3}
 800e538:	469e      	mov	lr, r3
 800e53a:	4770      	bx	lr

0800e53c <_fini>:
 800e53c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e53e:	bf00      	nop
 800e540:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e542:	bc08      	pop	{r3}
 800e544:	469e      	mov	lr, r3
 800e546:	4770      	bx	lr
