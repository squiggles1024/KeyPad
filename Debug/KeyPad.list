
KeyPad.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e344  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000221f0  0800e4e4  0800e4e4  0001e4e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080306d4  080306d4  00050194  2**0
                  CONTENTS
  4 .ARM          00000008  080306d4  080306d4  000406d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080306dc  080306dc  00050194  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080306dc  080306dc  000406dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080306e0  080306e0  000406e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000194  20000000  080306e4  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000018dc  20000194  08030878  00050194  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001a70  08030878  00051a70  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00050194  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026dad  00000000  00000000  000501c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006198  00000000  00000000  00076f71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ef8  00000000  00000000  0007d110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001c00  00000000  00000000  0007f008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f27b  00000000  00000000  00080c08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002a71f  00000000  00000000  0009fe83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a612b  00000000  00000000  000ca5a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001706cd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008594  00000000  00000000  00170720  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000194 	.word	0x20000194
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800e4cc 	.word	0x0800e4cc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000198 	.word	0x20000198
 80001dc:	0800e4cc 	.word	0x0800e4cc

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <FT6206_Init>:
const FT6206_Reg_t RELEASE_CODE_ID = 0xAF;
const FT6206_Reg_t STATE = 0xBC;

static uint8_t touch_screen_buffer[4];

void FT6206_Init(FT6206_Handle_t *Dev, FT6206_IO_Drv_t IO_Drv){
 8000584:	b084      	sub	sp, #16
 8000586:	b5b0      	push	{r4, r5, r7, lr}
 8000588:	b082      	sub	sp, #8
 800058a:	af00      	add	r7, sp, #0
 800058c:	6078      	str	r0, [r7, #4]
 800058e:	f107 001c 	add.w	r0, r7, #28
 8000592:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	Dev->P1_XPos = 0;
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	2200      	movs	r2, #0
 800059a:	801a      	strh	r2, [r3, #0]
	Dev->P1_YPos = 0;
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	2200      	movs	r2, #0
 80005a0:	805a      	strh	r2, [r3, #2]
	Dev->P1_EventFlag = 0;
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	2200      	movs	r2, #0
 80005a6:	711a      	strb	r2, [r3, #4]
	Dev->IO_Driver = IO_Drv;
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	f103 0408 	add.w	r4, r3, #8
 80005ae:	f107 051c 	add.w	r5, r7, #28
 80005b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005b6:	682b      	ldr	r3, [r5, #0]
 80005b8:	6023      	str	r3, [r4, #0]
	Dev->IO_Driver.init();
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	689b      	ldr	r3, [r3, #8]
 80005be:	4798      	blx	r3
	Dev->IO_Driver.read(P1_XH, touch_screen_buffer, 4);
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	695b      	ldr	r3, [r3, #20]
 80005c4:	2003      	movs	r0, #3
 80005c6:	2204      	movs	r2, #4
 80005c8:	4904      	ldr	r1, [pc, #16]	; (80005dc <FT6206_Init+0x58>)
 80005ca:	4798      	blx	r3
	//FT6206_ReadScreen(Dev);
}
 80005cc:	bf00      	nop
 80005ce:	3708      	adds	r7, #8
 80005d0:	46bd      	mov	sp, r7
 80005d2:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80005d6:	b004      	add	sp, #16
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop
 80005dc:	200001b0 	.word	0x200001b0

080005e0 <FT6206_DeInit>:

void FT6206_DeInit(FT6206_Handle_t *Dev){
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
	Dev->IO_Driver.deinit();
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	68db      	ldr	r3, [r3, #12]
 80005ec:	4798      	blx	r3
	Dev->IO_Driver.init = '\0';
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	2200      	movs	r2, #0
 80005f2:	609a      	str	r2, [r3, #8]
	Dev->IO_Driver.deinit = '\0';
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	2200      	movs	r2, #0
 80005f8:	60da      	str	r2, [r3, #12]
	Dev->IO_Driver.read = '\0';
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	2200      	movs	r2, #0
 80005fe:	615a      	str	r2, [r3, #20]
	Dev->IO_Driver.write = '\0';
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	2200      	movs	r2, #0
 8000604:	611a      	str	r2, [r3, #16]
	Dev->IO_Driver.ioctl = '\0';
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	2200      	movs	r2, #0
 800060a:	619a      	str	r2, [r3, #24]
}
 800060c:	bf00      	nop
 800060e:	3708      	adds	r7, #8
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}

08000614 <FT6206_ReadScreen>:

void FT6206_ReadScreen(FT6206_Handle_t *Dev){
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
	//uint8_t buffer[4];
	Dev->P1_YPos = 240 - ((touch_screen_buffer[0] << 8 | touch_screen_buffer[1]) & 0x0FFF);
 800061c:	4b18      	ldr	r3, [pc, #96]	; (8000680 <FT6206_ReadScreen+0x6c>)
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	021b      	lsls	r3, r3, #8
 8000622:	b21a      	sxth	r2, r3
 8000624:	4b16      	ldr	r3, [pc, #88]	; (8000680 <FT6206_ReadScreen+0x6c>)
 8000626:	785b      	ldrb	r3, [r3, #1]
 8000628:	b21b      	sxth	r3, r3
 800062a:	4313      	orrs	r3, r2
 800062c:	b21b      	sxth	r3, r3
 800062e:	b29b      	uxth	r3, r3
 8000630:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000634:	b29b      	uxth	r3, r3
 8000636:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 800063a:	b29a      	uxth	r2, r3
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	805a      	strh	r2, [r3, #2]
	Dev->P1_EventFlag = touch_screen_buffer[0] >> 6;
 8000640:	4b0f      	ldr	r3, [pc, #60]	; (8000680 <FT6206_ReadScreen+0x6c>)
 8000642:	781b      	ldrb	r3, [r3, #0]
 8000644:	099b      	lsrs	r3, r3, #6
 8000646:	b2da      	uxtb	r2, r3
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	711a      	strb	r2, [r3, #4]
	Dev->P1_XPos = (touch_screen_buffer[2] << 8 | touch_screen_buffer[3]) & 0x0FFF;
 800064c:	4b0c      	ldr	r3, [pc, #48]	; (8000680 <FT6206_ReadScreen+0x6c>)
 800064e:	789b      	ldrb	r3, [r3, #2]
 8000650:	021b      	lsls	r3, r3, #8
 8000652:	b21a      	sxth	r2, r3
 8000654:	4b0a      	ldr	r3, [pc, #40]	; (8000680 <FT6206_ReadScreen+0x6c>)
 8000656:	78db      	ldrb	r3, [r3, #3]
 8000658:	b21b      	sxth	r3, r3
 800065a:	4313      	orrs	r3, r2
 800065c:	b21b      	sxth	r3, r3
 800065e:	b29b      	uxth	r3, r3
 8000660:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000664:	b29a      	uxth	r2, r3
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	801a      	strh	r2, [r3, #0]
	Dev->IO_Driver.read(P1_XH, touch_screen_buffer, 4);
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	695b      	ldr	r3, [r3, #20]
 800066e:	2003      	movs	r0, #3
 8000670:	2204      	movs	r2, #4
 8000672:	4903      	ldr	r1, [pc, #12]	; (8000680 <FT6206_ReadScreen+0x6c>)
 8000674:	4798      	blx	r3
}
 8000676:	bf00      	nop
 8000678:	3708      	adds	r7, #8
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	200001b0 	.word	0x200001b0

08000684 <FT6206_IO_Init>:
#include "gpio.h"
#include "dma.h"

static const uint8_t DevAddr = 0x70;

static void FT6206_IO_Init(void){
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
	I2C2_DMA_Init();
 8000688:	f001 fb68 	bl	8001d5c <I2C2_DMA_Init>
	I2C_GPIO_Init();
 800068c:	f001 fb86 	bl	8001d9c <I2C_GPIO_Init>
	I2C2_Init();
 8000690:	f001 fd3c 	bl	800210c <I2C2_Init>
}
 8000694:	bf00      	nop
 8000696:	bd80      	pop	{r7, pc}

08000698 <FT6206_IO_DeInit>:

static void FT6206_IO_DeInit(void){
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
	HAL_NVIC_DisableIRQ(DMA1_Stream2_IRQn);
 800069c:	200d      	movs	r0, #13
 800069e:	f003 face 	bl	8003c3e <HAL_NVIC_DisableIRQ>
	HAL_NVIC_ClearPendingIRQ(DMA1_Stream2_IRQn);
 80006a2:	200d      	movs	r0, #13
 80006a4:	f003 fae5 	bl	8003c72 <HAL_NVIC_ClearPendingIRQ>
}
 80006a8:	bf00      	nop
 80006aa:	bd80      	pop	{r7, pc}

080006ac <FT6206_IO_Write>:

static FT6206_Status_t FT6206_IO_Write(uint8_t Reg, uint8_t* pdata, uint8_t length){
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b086      	sub	sp, #24
 80006b0:	af04      	add	r7, sp, #16
 80006b2:	4603      	mov	r3, r0
 80006b4:	6039      	str	r1, [r7, #0]
 80006b6:	71fb      	strb	r3, [r7, #7]
 80006b8:	4613      	mov	r3, r2
 80006ba:	71bb      	strb	r3, [r7, #6]
	if(HAL_I2C_Mem_Write(&hi2c2, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pdata, length, 100) != HAL_OK){
 80006bc:	2370      	movs	r3, #112	; 0x70
 80006be:	b299      	uxth	r1, r3
 80006c0:	79fb      	ldrb	r3, [r7, #7]
 80006c2:	b29a      	uxth	r2, r3
 80006c4:	79bb      	ldrb	r3, [r7, #6]
 80006c6:	b29b      	uxth	r3, r3
 80006c8:	2064      	movs	r0, #100	; 0x64
 80006ca:	9002      	str	r0, [sp, #8]
 80006cc:	9301      	str	r3, [sp, #4]
 80006ce:	683b      	ldr	r3, [r7, #0]
 80006d0:	9300      	str	r3, [sp, #0]
 80006d2:	2301      	movs	r3, #1
 80006d4:	4806      	ldr	r0, [pc, #24]	; (80006f0 <FT6206_IO_Write+0x44>)
 80006d6:	f004 faaf 	bl	8004c38 <HAL_I2C_Mem_Write>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <FT6206_IO_Write+0x38>
		return FT6206_Err;
 80006e0:	2301      	movs	r3, #1
 80006e2:	e000      	b.n	80006e6 <FT6206_IO_Write+0x3a>
	}
	return FT6206_Ok;
 80006e4:	2300      	movs	r3, #0
}
 80006e6:	4618      	mov	r0, r3
 80006e8:	3708      	adds	r7, #8
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	20000474 	.word	0x20000474

080006f4 <FT6206_IO_Read>:

static FT6206_Status_t FT6206_IO_Read(uint8_t Reg, uint8_t* pdata, uint8_t length){
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b084      	sub	sp, #16
 80006f8:	af02      	add	r7, sp, #8
 80006fa:	4603      	mov	r3, r0
 80006fc:	6039      	str	r1, [r7, #0]
 80006fe:	71fb      	strb	r3, [r7, #7]
 8000700:	4613      	mov	r3, r2
 8000702:	71bb      	strb	r3, [r7, #6]
	if(HAL_I2C_Mem_Read_DMA(&hi2c2, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pdata, length) != HAL_OK){
 8000704:	2370      	movs	r3, #112	; 0x70
 8000706:	b299      	uxth	r1, r3
 8000708:	79fb      	ldrb	r3, [r7, #7]
 800070a:	b29a      	uxth	r2, r3
 800070c:	79bb      	ldrb	r3, [r7, #6]
 800070e:	b29b      	uxth	r3, r3
 8000710:	9301      	str	r3, [sp, #4]
 8000712:	683b      	ldr	r3, [r7, #0]
 8000714:	9300      	str	r3, [sp, #0]
 8000716:	2301      	movs	r3, #1
 8000718:	4806      	ldr	r0, [pc, #24]	; (8000734 <FT6206_IO_Read+0x40>)
 800071a:	f004 fb87 	bl	8004e2c <HAL_I2C_Mem_Read_DMA>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <FT6206_IO_Read+0x34>
		return FT6206_Err;
 8000724:	2301      	movs	r3, #1
 8000726:	e000      	b.n	800072a <FT6206_IO_Read+0x36>
	}
	return FT6206_Ok;
 8000728:	2300      	movs	r3, #0
}
 800072a:	4618      	mov	r0, r3
 800072c:	3708      	adds	r7, #8
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	20000474 	.word	0x20000474

08000738 <FT6206_IO_ioctl>:

static uint8_t FT6206_IO_ioctl(FT6206_IO_Cmd_t Command){
 8000738:	b480      	push	{r7}
 800073a:	b083      	sub	sp, #12
 800073c:	af00      	add	r7, sp, #0
 800073e:	4603      	mov	r3, r0
 8000740:	71fb      	strb	r3, [r7, #7]
	return FT6206_Ok;
 8000742:	2300      	movs	r3, #0
}
 8000744:	4618      	mov	r0, r3
 8000746:	370c      	adds	r7, #12
 8000748:	46bd      	mov	sp, r7
 800074a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074e:	4770      	bx	lr

08000750 <ILI9341_Init>:
 *@brief: Initializes the LCD Hardware and prepares it to receive image data
 * See https://cdn-shop.adafruit.com/datasheets/ILI9341.pdf for details regarding commands and data
 * Credit to ST Micro ILI9341.c Driver for initilization sequence
 ******************************************************************/

void ILI9341_Init(ILI9341_Init_Struct_t Settings, ILI9341_Handle_t *Dev, ILI9341_IO_Drv_t IO_Driver){
 8000750:	b5b0      	push	{r4, r5, r7, lr}
 8000752:	b08a      	sub	sp, #40	; 0x28
 8000754:	af00      	add	r7, sp, #0
 8000756:	1d3c      	adds	r4, r7, #4
 8000758:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800075c:	603b      	str	r3, [r7, #0]
	Dev->Orientation = Settings.Orientation;
 800075e:	793a      	ldrb	r2, [r7, #4]
 8000760:	683b      	ldr	r3, [r7, #0]
 8000762:	701a      	strb	r2, [r3, #0]
	Dev->ScreenHeight = Settings.ScreenHeight;
 8000764:	68fa      	ldr	r2, [r7, #12]
 8000766:	683b      	ldr	r3, [r7, #0]
 8000768:	609a      	str	r2, [r3, #8]
	Dev->ScreenWidth = Settings.ScreenWidth;
 800076a:	68ba      	ldr	r2, [r7, #8]
 800076c:	683b      	ldr	r3, [r7, #0]
 800076e:	605a      	str	r2, [r3, #4]
	Dev->Cursor.X = 0;
 8000770:	683b      	ldr	r3, [r7, #0]
 8000772:	2200      	movs	r2, #0
 8000774:	819a      	strh	r2, [r3, #12]
	Dev->Cursor.Y = 0;
 8000776:	683b      	ldr	r3, [r7, #0]
 8000778:	2200      	movs	r2, #0
 800077a:	81da      	strh	r2, [r3, #14]
	Dev->IO_Drv = IO_Driver;
 800077c:	683b      	ldr	r3, [r7, #0]
 800077e:	f103 0410 	add.w	r4, r3, #16
 8000782:	f107 0538 	add.w	r5, r7, #56	; 0x38
 8000786:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000788:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800078a:	682b      	ldr	r3, [r5, #0]
 800078c:	6023      	str	r3, [r4, #0]

	Dev->IO_Drv.init();
 800078e:	683b      	ldr	r3, [r7, #0]
 8000790:	691b      	ldr	r3, [r3, #16]
 8000792:	4798      	blx	r3
	uint8_t buffer[20];


	Dev->IO_Drv.write(ILI9341_SWRESET, buffer, 0);
 8000794:	683b      	ldr	r3, [r7, #0]
 8000796:	699b      	ldr	r3, [r3, #24]
 8000798:	f107 0114 	add.w	r1, r7, #20
 800079c:	2200      	movs	r2, #0
 800079e:	2001      	movs	r0, #1
 80007a0:	4798      	blx	r3
	Dev->IO_Drv.ioctl(ILI9341_Delay1000);
 80007a2:	683b      	ldr	r3, [r7, #0]
 80007a4:	6a1b      	ldr	r3, [r3, #32]
 80007a6:	2001      	movs	r0, #1
 80007a8:	4798      	blx	r3
    

	//Power Control A - Page 195
    buffer[0] = 0x39;
 80007aa:	2339      	movs	r3, #57	; 0x39
 80007ac:	753b      	strb	r3, [r7, #20]
    buffer[1] = 0x2C;
 80007ae:	232c      	movs	r3, #44	; 0x2c
 80007b0:	757b      	strb	r3, [r7, #21]
    buffer[2] = 0x00;
 80007b2:	2300      	movs	r3, #0
 80007b4:	75bb      	strb	r3, [r7, #22]
    buffer[3] = 0x34;
 80007b6:	2334      	movs	r3, #52	; 0x34
 80007b8:	75fb      	strb	r3, [r7, #23]
    buffer[4] = 0x02;
 80007ba:	2302      	movs	r3, #2
 80007bc:	763b      	strb	r3, [r7, #24]
	Dev->IO_Drv.write(ILI9341_PWRCONTROLA, buffer, 5);
 80007be:	683b      	ldr	r3, [r7, #0]
 80007c0:	699b      	ldr	r3, [r3, #24]
 80007c2:	f107 0114 	add.w	r1, r7, #20
 80007c6:	2205      	movs	r2, #5
 80007c8:	20cb      	movs	r0, #203	; 0xcb
 80007ca:	4798      	blx	r3


	//Power Control B - Page 196
    buffer[0] = 0x00;
 80007cc:	2300      	movs	r3, #0
 80007ce:	753b      	strb	r3, [r7, #20]
    buffer[1] = 0xC1;
 80007d0:	23c1      	movs	r3, #193	; 0xc1
 80007d2:	757b      	strb	r3, [r7, #21]
    buffer[2] = 0x30;
 80007d4:	2330      	movs	r3, #48	; 0x30
 80007d6:	75bb      	strb	r3, [r7, #22]
    Dev->IO_Drv.write(ILI9341_PWRCONTROLB, buffer, 3);
 80007d8:	683b      	ldr	r3, [r7, #0]
 80007da:	699b      	ldr	r3, [r3, #24]
 80007dc:	f107 0114 	add.w	r1, r7, #20
 80007e0:	2203      	movs	r2, #3
 80007e2:	20cf      	movs	r0, #207	; 0xcf
 80007e4:	4798      	blx	r3

    //Driver Timing Control A - Page 197
    buffer[0] = 0x85;
 80007e6:	2385      	movs	r3, #133	; 0x85
 80007e8:	753b      	strb	r3, [r7, #20]
    buffer[1] = 0x00;
 80007ea:	2300      	movs	r3, #0
 80007ec:	757b      	strb	r3, [r7, #21]
    buffer[2] = 0x78;
 80007ee:	2378      	movs	r3, #120	; 0x78
 80007f0:	75bb      	strb	r3, [r7, #22]
    Dev->IO_Drv.write(ILI9341_TIMINGCONTROLA, buffer, 3);
 80007f2:	683b      	ldr	r3, [r7, #0]
 80007f4:	699b      	ldr	r3, [r3, #24]
 80007f6:	f107 0114 	add.w	r1, r7, #20
 80007fa:	2203      	movs	r2, #3
 80007fc:	20e8      	movs	r0, #232	; 0xe8
 80007fe:	4798      	blx	r3

    //Driver Timing Control B - Page 199
    buffer[0] = 0x00;
 8000800:	2300      	movs	r3, #0
 8000802:	753b      	strb	r3, [r7, #20]
    buffer[1] = 0x00;
 8000804:	2300      	movs	r3, #0
 8000806:	757b      	strb	r3, [r7, #21]
    Dev->IO_Drv.write(ILI9341_TIMINGCONTROLB, buffer, 2);
 8000808:	683b      	ldr	r3, [r7, #0]
 800080a:	699b      	ldr	r3, [r3, #24]
 800080c:	f107 0114 	add.w	r1, r7, #20
 8000810:	2202      	movs	r2, #2
 8000812:	20ea      	movs	r0, #234	; 0xea
 8000814:	4798      	blx	r3

    //Power on Sequence Control - Page 200
    buffer[0] = 0x64;
 8000816:	2364      	movs	r3, #100	; 0x64
 8000818:	753b      	strb	r3, [r7, #20]
    buffer[1] = 0x03;
 800081a:	2303      	movs	r3, #3
 800081c:	757b      	strb	r3, [r7, #21]
    buffer[2] = 0x12;
 800081e:	2312      	movs	r3, #18
 8000820:	75bb      	strb	r3, [r7, #22]
    buffer[3] = 0x81;
 8000822:	2381      	movs	r3, #129	; 0x81
 8000824:	75fb      	strb	r3, [r7, #23]
    Dev->IO_Drv.write(ILI9341_Pwr_on_sequence_control, buffer, 4);
 8000826:	683b      	ldr	r3, [r7, #0]
 8000828:	699b      	ldr	r3, [r3, #24]
 800082a:	f107 0114 	add.w	r1, r7, #20
 800082e:	2204      	movs	r2, #4
 8000830:	20ed      	movs	r0, #237	; 0xed
 8000832:	4798      	blx	r3

    //Pump Ratio Control - Page 202
    buffer[0] = 0x20;
 8000834:	2320      	movs	r3, #32
 8000836:	753b      	strb	r3, [r7, #20]
    Dev->IO_Drv.write(ILI9341_Pump_ratio_control, buffer, 1);
 8000838:	683b      	ldr	r3, [r7, #0]
 800083a:	699b      	ldr	r3, [r3, #24]
 800083c:	f107 0114 	add.w	r1, r7, #20
 8000840:	2201      	movs	r2, #1
 8000842:	20f7      	movs	r0, #247	; 0xf7
 8000844:	4798      	blx	r3

    //Power Control 1 - Page 178
    buffer[0] = 0x10;
 8000846:	2310      	movs	r3, #16
 8000848:	753b      	strb	r3, [r7, #20]
    Dev->IO_Drv.write(ILI9341_PWCTRL_1, buffer, 1);
 800084a:	683b      	ldr	r3, [r7, #0]
 800084c:	699b      	ldr	r3, [r3, #24]
 800084e:	f107 0114 	add.w	r1, r7, #20
 8000852:	2201      	movs	r2, #1
 8000854:	20c0      	movs	r0, #192	; 0xc0
 8000856:	4798      	blx	r3

    //Power Control 2 - Page 179
    buffer[0] = 0x10;
 8000858:	2310      	movs	r3, #16
 800085a:	753b      	strb	r3, [r7, #20]
    Dev->IO_Drv.write(ILI9341_PWCTRL_2, buffer, 1);
 800085c:	683b      	ldr	r3, [r7, #0]
 800085e:	699b      	ldr	r3, [r3, #24]
 8000860:	f107 0114 	add.w	r1, r7, #20
 8000864:	2201      	movs	r2, #1
 8000866:	20c1      	movs	r0, #193	; 0xc1
 8000868:	4798      	blx	r3

    //VCOM Control 1 - Page 180
    buffer[0] = 0x45;
 800086a:	2345      	movs	r3, #69	; 0x45
 800086c:	753b      	strb	r3, [r7, #20]
    buffer[1] = 0x15;
 800086e:	2315      	movs	r3, #21
 8000870:	757b      	strb	r3, [r7, #21]
    Dev->IO_Drv.write(ILI9341_VMCTRL1, buffer, 2);
 8000872:	683b      	ldr	r3, [r7, #0]
 8000874:	699b      	ldr	r3, [r3, #24]
 8000876:	f107 0114 	add.w	r1, r7, #20
 800087a:	2202      	movs	r2, #2
 800087c:	20c5      	movs	r0, #197	; 0xc5
 800087e:	4798      	blx	r3

    //VCOM Control 2 - Page 182
    buffer[0] = 0x90;
 8000880:	2390      	movs	r3, #144	; 0x90
 8000882:	753b      	strb	r3, [r7, #20]
    Dev->IO_Drv.write(ILI9341_VMCTRL2, buffer, 1);
 8000884:	683b      	ldr	r3, [r7, #0]
 8000886:	699b      	ldr	r3, [r3, #24]
 8000888:	f107 0114 	add.w	r1, r7, #20
 800088c:	2201      	movs	r2, #1
 800088e:	20c7      	movs	r0, #199	; 0xc7
 8000890:	4798      	blx	r3

    //Memory Access Control - Page 127
    buffer[0] = 0x30;
 8000892:	2330      	movs	r3, #48	; 0x30
 8000894:	753b      	strb	r3, [r7, #20]
    Dev->IO_Drv.write(ILI9341_MADCTL, buffer, 1);
 8000896:	683b      	ldr	r3, [r7, #0]
 8000898:	699b      	ldr	r3, [r3, #24]
 800089a:	f107 0114 	add.w	r1, r7, #20
 800089e:	2201      	movs	r2, #1
 80008a0:	2036      	movs	r0, #54	; 0x36
 80008a2:	4798      	blx	r3

    //Pixel Format Set - Page 134
    buffer[0] = 0x66;
 80008a4:	2366      	movs	r3, #102	; 0x66
 80008a6:	753b      	strb	r3, [r7, #20]
    Dev->IO_Drv.write(ILI9341_PIXSET, buffer, 1);
 80008a8:	683b      	ldr	r3, [r7, #0]
 80008aa:	699b      	ldr	r3, [r3, #24]
 80008ac:	f107 0114 	add.w	r1, r7, #20
 80008b0:	2201      	movs	r2, #1
 80008b2:	203a      	movs	r0, #58	; 0x3a
 80008b4:	4798      	blx	r3

    //Frame Rate Control (In Normal Mode/Full Colors) - Page 155
    buffer[0] = 0x00;
 80008b6:	2300      	movs	r3, #0
 80008b8:	753b      	strb	r3, [r7, #20]
    buffer[1] = 0x18;
 80008ba:	2318      	movs	r3, #24
 80008bc:	757b      	strb	r3, [r7, #21]
    Dev->IO_Drv.write(ILI9341_FRMCTR1, buffer, 2);
 80008be:	683b      	ldr	r3, [r7, #0]
 80008c0:	699b      	ldr	r3, [r3, #24]
 80008c2:	f107 0114 	add.w	r1, r7, #20
 80008c6:	2202      	movs	r2, #2
 80008c8:	20b1      	movs	r0, #177	; 0xb1
 80008ca:	4798      	blx	r3

    // Display Function Control - Page 164
    buffer[0] = 0x08;
 80008cc:	2308      	movs	r3, #8
 80008ce:	753b      	strb	r3, [r7, #20]
    buffer[1] = 0x82;
 80008d0:	2382      	movs	r3, #130	; 0x82
 80008d2:	757b      	strb	r3, [r7, #21]
    buffer[2] = 0x27;
 80008d4:	2327      	movs	r3, #39	; 0x27
 80008d6:	75bb      	strb	r3, [r7, #22]
    Dev->IO_Drv.write(ILI9341_DISCTRL, buffer, 3);
 80008d8:	683b      	ldr	r3, [r7, #0]
 80008da:	699b      	ldr	r3, [r3, #24]
 80008dc:	f107 0114 	add.w	r1, r7, #20
 80008e0:	2203      	movs	r2, #3
 80008e2:	20b6      	movs	r0, #182	; 0xb6
 80008e4:	4798      	blx	r3

    //Enable 3G - Page 201
    buffer[0] = 0x00;
 80008e6:	2300      	movs	r3, #0
 80008e8:	753b      	strb	r3, [r7, #20]
    Dev->IO_Drv.write(ILI9341_Enable_3G, buffer, 1);
 80008ea:	683b      	ldr	r3, [r7, #0]
 80008ec:	699b      	ldr	r3, [r3, #24]
 80008ee:	f107 0114 	add.w	r1, r7, #20
 80008f2:	2201      	movs	r2, #1
 80008f4:	20f2      	movs	r0, #242	; 0xf2
 80008f6:	4798      	blx	r3

    //Gamma Set - Page 107
    buffer[0] = 0x01;
 80008f8:	2301      	movs	r3, #1
 80008fa:	753b      	strb	r3, [r7, #20]
    Dev->IO_Drv.write(ILI9341_GAMSET, buffer, 1);
 80008fc:	683b      	ldr	r3, [r7, #0]
 80008fe:	699b      	ldr	r3, [r3, #24]
 8000900:	f107 0114 	add.w	r1, r7, #20
 8000904:	2201      	movs	r2, #1
 8000906:	2026      	movs	r0, #38	; 0x26
 8000908:	4798      	blx	r3

    //Positive Gamma Correction - Page 188
    buffer[0] = 0x0F;
 800090a:	230f      	movs	r3, #15
 800090c:	753b      	strb	r3, [r7, #20]
    buffer[1] = 0x29;
 800090e:	2329      	movs	r3, #41	; 0x29
 8000910:	757b      	strb	r3, [r7, #21]
    buffer[2] = 0x24;
 8000912:	2324      	movs	r3, #36	; 0x24
 8000914:	75bb      	strb	r3, [r7, #22]
    buffer[3] = 0x0C;
 8000916:	230c      	movs	r3, #12
 8000918:	75fb      	strb	r3, [r7, #23]
    buffer[4] = 0x0E;
 800091a:	230e      	movs	r3, #14
 800091c:	763b      	strb	r3, [r7, #24]
    buffer[5] = 0x09;
 800091e:	2309      	movs	r3, #9
 8000920:	767b      	strb	r3, [r7, #25]
    buffer[6] = 0x4E;
 8000922:	234e      	movs	r3, #78	; 0x4e
 8000924:	76bb      	strb	r3, [r7, #26]
    buffer[7] = 0x78;
 8000926:	2378      	movs	r3, #120	; 0x78
 8000928:	76fb      	strb	r3, [r7, #27]
    buffer[8] = 0x3C;
 800092a:	233c      	movs	r3, #60	; 0x3c
 800092c:	773b      	strb	r3, [r7, #28]
    buffer[9] = 0x09;
 800092e:	2309      	movs	r3, #9
 8000930:	777b      	strb	r3, [r7, #29]
    buffer[10] = 0x13;
 8000932:	2313      	movs	r3, #19
 8000934:	77bb      	strb	r3, [r7, #30]
    buffer[11] = 0x05;
 8000936:	2305      	movs	r3, #5
 8000938:	77fb      	strb	r3, [r7, #31]
    buffer[12] = 0x17;
 800093a:	2317      	movs	r3, #23
 800093c:	f887 3020 	strb.w	r3, [r7, #32]
    buffer[13] = 0x11;
 8000940:	2311      	movs	r3, #17
 8000942:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    buffer[14] = 0x00;
 8000946:	2300      	movs	r3, #0
 8000948:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    Dev->IO_Drv.write(ILI9341_PGAMCTRL, buffer, 15);
 800094c:	683b      	ldr	r3, [r7, #0]
 800094e:	699b      	ldr	r3, [r3, #24]
 8000950:	f107 0114 	add.w	r1, r7, #20
 8000954:	220f      	movs	r2, #15
 8000956:	20e0      	movs	r0, #224	; 0xe0
 8000958:	4798      	blx	r3

    //Negative Gamma Correction - Page 189
    buffer[0] = 0x00;
 800095a:	2300      	movs	r3, #0
 800095c:	753b      	strb	r3, [r7, #20]
    buffer[1] = 0x16;
 800095e:	2316      	movs	r3, #22
 8000960:	757b      	strb	r3, [r7, #21]
    buffer[2] = 0x1B;
 8000962:	231b      	movs	r3, #27
 8000964:	75bb      	strb	r3, [r7, #22]
    buffer[3] = 0x04;
 8000966:	2304      	movs	r3, #4
 8000968:	75fb      	strb	r3, [r7, #23]
    buffer[4] = 0x11;
 800096a:	2311      	movs	r3, #17
 800096c:	763b      	strb	r3, [r7, #24]
    buffer[5] = 0x07;
 800096e:	2307      	movs	r3, #7
 8000970:	767b      	strb	r3, [r7, #25]
    buffer[6] = 0x31;
 8000972:	2331      	movs	r3, #49	; 0x31
 8000974:	76bb      	strb	r3, [r7, #26]
    buffer[7] = 0x33;
 8000976:	2333      	movs	r3, #51	; 0x33
 8000978:	76fb      	strb	r3, [r7, #27]
    buffer[8] = 0x42;
 800097a:	2342      	movs	r3, #66	; 0x42
 800097c:	773b      	strb	r3, [r7, #28]
    buffer[9] = 0x05;
 800097e:	2305      	movs	r3, #5
 8000980:	777b      	strb	r3, [r7, #29]
    buffer[10] = 0x0C;
 8000982:	230c      	movs	r3, #12
 8000984:	77bb      	strb	r3, [r7, #30]
    buffer[11] = 0x0A;
 8000986:	230a      	movs	r3, #10
 8000988:	77fb      	strb	r3, [r7, #31]
    buffer[12] = 0x28;
 800098a:	2328      	movs	r3, #40	; 0x28
 800098c:	f887 3020 	strb.w	r3, [r7, #32]
    buffer[13] = 0x2F;
 8000990:	232f      	movs	r3, #47	; 0x2f
 8000992:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    buffer[14] = 0x0F;
 8000996:	230f      	movs	r3, #15
 8000998:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    Dev->IO_Drv.write(ILI9341_NGAMCTRL, buffer, 15);
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	699b      	ldr	r3, [r3, #24]
 80009a0:	f107 0114 	add.w	r1, r7, #20
 80009a4:	220f      	movs	r2, #15
 80009a6:	20e1      	movs	r0, #225	; 0xe1
 80009a8:	4798      	blx	r3

    //Sleep Out - Page 101
    Dev->IO_Drv.write(ILI9341_SLPOUT, buffer, 0);
 80009aa:	683b      	ldr	r3, [r7, #0]
 80009ac:	699b      	ldr	r3, [r3, #24]
 80009ae:	f107 0114 	add.w	r1, r7, #20
 80009b2:	2200      	movs	r2, #0
 80009b4:	2011      	movs	r0, #17
 80009b6:	4798      	blx	r3
    Dev->IO_Drv.ioctl(ILI9341_Delay150);
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	6a1b      	ldr	r3, [r3, #32]
 80009bc:	2000      	movs	r0, #0
 80009be:	4798      	blx	r3


    //Display ON - Page 109
    Dev->IO_Drv.write(ILI9341_DISPON, buffer, 0);
 80009c0:	683b      	ldr	r3, [r7, #0]
 80009c2:	699b      	ldr	r3, [r3, #24]
 80009c4:	f107 0114 	add.w	r1, r7, #20
 80009c8:	2200      	movs	r2, #0
 80009ca:	2029      	movs	r0, #41	; 0x29
 80009cc:	4798      	blx	r3

    Dev->IO_Drv.write(ILI9341_MADCTL, &Settings.Orientation,1);
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	699b      	ldr	r3, [r3, #24]
 80009d2:	1d39      	adds	r1, r7, #4
 80009d4:	2201      	movs	r2, #1
 80009d6:	2036      	movs	r0, #54	; 0x36
 80009d8:	4798      	blx	r3
}
 80009da:	bf00      	nop
 80009dc:	3728      	adds	r7, #40	; 0x28
 80009de:	46bd      	mov	sp, r7
 80009e0:	bdb0      	pop	{r4, r5, r7, pc}

080009e2 <ILI9341_FillSceen>:
void ILI9341_DrawPixel(ILI9341_Handle_t *Dev, ILI9341_Color_t Color, ILI9341_Coordinate_t Position){
    ILI9341_SetCoordinates(Dev,Position,Position);
    Dev->IO_Drv.write(ILI9341_RAMWR,(uint8_t*)&Color,3);
}

void ILI9341_FillSceen(ILI9341_Handle_t *Dev, ILI9341_Color_t Color){
 80009e2:	b580      	push	{r7, lr}
 80009e4:	b084      	sub	sp, #16
 80009e6:	af00      	add	r7, sp, #0
 80009e8:	6078      	str	r0, [r7, #4]
 80009ea:	6039      	str	r1, [r7, #0]
    ILI9341_Coordinate_t CoordinateStart = {.X = 0, .Y = 0};
 80009ec:	2300      	movs	r3, #0
 80009ee:	81bb      	strh	r3, [r7, #12]
 80009f0:	2300      	movs	r3, #0
 80009f2:	81fb      	strh	r3, [r7, #14]
    ILI9341_Coordinate_t CoordinateEnd = {.X = Dev->ScreenWidth-1, .Y = Dev->ScreenHeight-1};
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	685b      	ldr	r3, [r3, #4]
 80009f8:	b29b      	uxth	r3, r3
 80009fa:	3b01      	subs	r3, #1
 80009fc:	b29b      	uxth	r3, r3
 80009fe:	b21b      	sxth	r3, r3
 8000a00:	813b      	strh	r3, [r7, #8]
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	689b      	ldr	r3, [r3, #8]
 8000a06:	b29b      	uxth	r3, r3
 8000a08:	3b01      	subs	r3, #1
 8000a0a:	b29b      	uxth	r3, r3
 8000a0c:	b21b      	sxth	r3, r3
 8000a0e:	817b      	strh	r3, [r7, #10]
    ILI9341_SetCoordinates(Dev, CoordinateStart, CoordinateEnd);
 8000a10:	68ba      	ldr	r2, [r7, #8]
 8000a12:	68f9      	ldr	r1, [r7, #12]
 8000a14:	6878      	ldr	r0, [r7, #4]
 8000a16:	f000 f811 	bl	8000a3c <ILI9341_SetCoordinates>
    Dev->IO_Drv.write(ILI9341_RAMWR,(uint8_t*)&Color, 0);
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	699b      	ldr	r3, [r3, #24]
 8000a1e:	4639      	mov	r1, r7
 8000a20:	2200      	movs	r2, #0
 8000a22:	202c      	movs	r0, #44	; 0x2c
 8000a24:	4798      	blx	r3
    Dev->IO_Drv.write(ILI9341_NOCOMMAND, (uint8_t*)&Color, TOTAL_SCREEN_BYTES);
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	699b      	ldr	r3, [r3, #24]
 8000a2a:	4639      	mov	r1, r7
 8000a2c:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8000a30:	20ff      	movs	r0, #255	; 0xff
 8000a32:	4798      	blx	r3
}
 8000a34:	bf00      	nop
 8000a36:	3710      	adds	r7, #16
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}

08000a3c <ILI9341_SetCoordinates>:
    uint32_t TotalBytes = width*height*3;
    Dev->IO_Drv.write(ILI9341_RAMWR,(uint8_t*)&Color,0);
    Dev->IO_Drv.write(ILI9341_NOCOMMAND, (uint8_t*)&Color, TotalBytes);
}

static void ILI9341_SetCoordinates(ILI9341_Handle_t *Dev, ILI9341_Coordinate_t StartCorner, ILI9341_Coordinate_t EndCorner){
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b086      	sub	sp, #24
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	60f8      	str	r0, [r7, #12]
 8000a44:	60b9      	str	r1, [r7, #8]
 8000a46:	607a      	str	r2, [r7, #4]
    ILI9341_DrawBounds_t Coordinate = {.S_MSB = StartCorner.X >> 8, .S_LSB = StartCorner.X, .E_MSB = EndCorner.X >> 8, .E_LSB = EndCorner.X};
 8000a48:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000a4c:	121b      	asrs	r3, r3, #8
 8000a4e:	b21b      	sxth	r3, r3
 8000a50:	b2db      	uxtb	r3, r3
 8000a52:	753b      	strb	r3, [r7, #20]
 8000a54:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000a58:	b2db      	uxtb	r3, r3
 8000a5a:	757b      	strb	r3, [r7, #21]
 8000a5c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000a60:	121b      	asrs	r3, r3, #8
 8000a62:	b21b      	sxth	r3, r3
 8000a64:	b2db      	uxtb	r3, r3
 8000a66:	75bb      	strb	r3, [r7, #22]
 8000a68:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000a6c:	b2db      	uxtb	r3, r3
 8000a6e:	75fb      	strb	r3, [r7, #23]
    Dev->IO_Drv.write(ILI9341_CASET,(uint8_t*)&Coordinate,4);
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	699b      	ldr	r3, [r3, #24]
 8000a74:	f107 0114 	add.w	r1, r7, #20
 8000a78:	2204      	movs	r2, #4
 8000a7a:	202a      	movs	r0, #42	; 0x2a
 8000a7c:	4798      	blx	r3
    Coordinate.S_MSB = StartCorner.Y >> 8;
 8000a7e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000a82:	121b      	asrs	r3, r3, #8
 8000a84:	b21b      	sxth	r3, r3
 8000a86:	b2db      	uxtb	r3, r3
 8000a88:	753b      	strb	r3, [r7, #20]
    Coordinate.S_LSB = StartCorner.Y;
 8000a8a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000a8e:	b2db      	uxtb	r3, r3
 8000a90:	757b      	strb	r3, [r7, #21]
    Coordinate.E_MSB = EndCorner.Y >> 8;
 8000a92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a96:	121b      	asrs	r3, r3, #8
 8000a98:	b21b      	sxth	r3, r3
 8000a9a:	b2db      	uxtb	r3, r3
 8000a9c:	75bb      	strb	r3, [r7, #22]
    Coordinate.E_LSB = EndCorner.Y;
 8000a9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000aa2:	b2db      	uxtb	r3, r3
 8000aa4:	75fb      	strb	r3, [r7, #23]
    Dev->IO_Drv.write(ILI9341_PASET,(uint8_t*)&Coordinate,4);
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	699b      	ldr	r3, [r3, #24]
 8000aaa:	f107 0114 	add.w	r1, r7, #20
 8000aae:	2204      	movs	r2, #4
 8000ab0:	202b      	movs	r0, #43	; 0x2b
 8000ab2:	4798      	blx	r3
}
 8000ab4:	bf00      	nop
 8000ab6:	3718      	adds	r7, #24
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}

08000abc <ILI9341_DisplayImage>:
        return DimensionsInvalid;
    }
    return DimensionsValid;
}

void ILI9341_DisplayImage(ILI9341_Handle_t *Dev, const ILI9341_Image_t Image){
 8000abc:	b084      	sub	sp, #16
 8000abe:	b580      	push	{r7, lr}
 8000ac0:	b084      	sub	sp, #16
 8000ac2:	af00      	add	r7, sp, #0
 8000ac4:	6078      	str	r0, [r7, #4]
 8000ac6:	f107 001c 	add.w	r0, r7, #28
 8000aca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    ILI9341_Coordinate_t CoordinateStart = {.X = Dev->Cursor.X, .Y = Dev->Cursor.Y};
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8000ad4:	81bb      	strh	r3, [r7, #12]
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000adc:	81fb      	strh	r3, [r7, #14]
    ILI9341_Coordinate_t CoordinateEnd = {.X = CoordinateStart.X + Image.Width - 1, .Y = CoordinateStart.Y + Image.Height - 1};
 8000ade:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000ae2:	b29a      	uxth	r2, r3
 8000ae4:	69fb      	ldr	r3, [r7, #28]
 8000ae6:	b29b      	uxth	r3, r3
 8000ae8:	4413      	add	r3, r2
 8000aea:	b29b      	uxth	r3, r3
 8000aec:	3b01      	subs	r3, #1
 8000aee:	b29b      	uxth	r3, r3
 8000af0:	b21b      	sxth	r3, r3
 8000af2:	813b      	strh	r3, [r7, #8]
 8000af4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000af8:	b29a      	uxth	r2, r3
 8000afa:	6a3b      	ldr	r3, [r7, #32]
 8000afc:	b29b      	uxth	r3, r3
 8000afe:	4413      	add	r3, r2
 8000b00:	b29b      	uxth	r3, r3
 8000b02:	3b01      	subs	r3, #1
 8000b04:	b29b      	uxth	r3, r3
 8000b06:	b21b      	sxth	r3, r3
 8000b08:	817b      	strh	r3, [r7, #10]
    ILI9341_SetCoordinates(Dev,CoordinateStart,CoordinateEnd);
 8000b0a:	68ba      	ldr	r2, [r7, #8]
 8000b0c:	68f9      	ldr	r1, [r7, #12]
 8000b0e:	6878      	ldr	r0, [r7, #4]
 8000b10:	f7ff ff94 	bl	8000a3c <ILI9341_SetCoordinates>
    //Dev->IO_Drv.write(ILI9341_RAMWR,(uint8_t*)&dummy,0);
    Dev->IO_Drv.write(ILI9341_RAMWR, (uint8_t*)Image.ImageData, Image.ImageLength);
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	699b      	ldr	r3, [r3, #24]
 8000b18:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000b1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b1c:	202c      	movs	r0, #44	; 0x2c
 8000b1e:	4798      	blx	r3
}
 8000b20:	bf00      	nop
 8000b22:	3710      	adds	r7, #16
 8000b24:	46bd      	mov	sp, r7
 8000b26:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000b2a:	b004      	add	sp, #16
 8000b2c:	4770      	bx	lr

08000b2e <ILI9341_IO_Init>:
#include "gpio.h"

static void ILI9341_CSState(uint8_t state);
static void ILI9341_DCRSState(uint8_t state);

static void ILI9341_IO_Init(void){
 8000b2e:	b580      	push	{r7, lr}
 8000b30:	af00      	add	r7, sp, #0
  ILI9341_GPIO_Init();
 8000b32:	f001 f981 	bl	8001e38 <ILI9341_GPIO_Init>
  ILI9341_SPI_Init();
 8000b36:	f001 ff8b 	bl	8002a50 <ILI9341_SPI_Init>
}
 8000b3a:	bf00      	nop
 8000b3c:	bd80      	pop	{r7, pc}

08000b3e <ILI9341_IO_DeInit>:

static void ILI9341_IO_DeInit(void){
 8000b3e:	b580      	push	{r7, lr}
 8000b40:	af00      	add	r7, sp, #0
	ILI9341_GPIO_DeInit();
 8000b42:	f001 f9bb 	bl	8001ebc <ILI9341_GPIO_DeInit>
}
 8000b46:	bf00      	nop
 8000b48:	bd80      	pop	{r7, pc}

08000b4a <ILI9341_IO_ioctl>:

static ILI9341_Status_t ILI9341_IO_ioctl(ILI9341_Cmd_t Command){
 8000b4a:	b580      	push	{r7, lr}
 8000b4c:	b082      	sub	sp, #8
 8000b4e:	af00      	add	r7, sp, #0
 8000b50:	4603      	mov	r3, r0
 8000b52:	71fb      	strb	r3, [r7, #7]
    switch(Command){
 8000b54:	79fb      	ldrb	r3, [r7, #7]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d002      	beq.n	8000b60 <ILI9341_IO_ioctl+0x16>
 8000b5a:	2b01      	cmp	r3, #1
 8000b5c:	d005      	beq.n	8000b6a <ILI9341_IO_ioctl+0x20>
 8000b5e:	e00a      	b.n	8000b76 <ILI9341_IO_ioctl+0x2c>
    case(ILI9341_Delay150):
    		HAL_Delay(150);
 8000b60:	2096      	movs	r0, #150	; 0x96
 8000b62:	f002 faa5 	bl	80030b0 <HAL_Delay>
            return ILI9341_Ok;
 8000b66:	2300      	movs	r3, #0
 8000b68:	e006      	b.n	8000b78 <ILI9341_IO_ioctl+0x2e>
    case(ILI9341_Delay1000):
    		HAL_Delay(1000);
 8000b6a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b6e:	f002 fa9f 	bl	80030b0 <HAL_Delay>
            return ILI9341_Ok;
 8000b72:	2300      	movs	r3, #0
 8000b74:	e000      	b.n	8000b78 <ILI9341_IO_ioctl+0x2e>
    default:
    	return ILI9341_Ok;
 8000b76:	2300      	movs	r3, #0
    }
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	3708      	adds	r7, #8
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}

08000b80 <ILI9341_IO_WriteReg>:

static ILI9341_Status_t ILI9341_IO_WriteReg(uint8_t reg, uint8_t* pdata, uint32_t length){
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b086      	sub	sp, #24
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	4603      	mov	r3, r0
 8000b88:	60b9      	str	r1, [r7, #8]
 8000b8a:	607a      	str	r2, [r7, #4]
 8000b8c:	73fb      	strb	r3, [r7, #15]
	ILI9341_CSState(GPIO_PIN_RESET);
 8000b8e:	2000      	movs	r0, #0
 8000b90:	f000 f8ae 	bl	8000cf0 <ILI9341_CSState>
	if(reg != 0xFF){
 8000b94:	7bfb      	ldrb	r3, [r7, #15]
 8000b96:	2bff      	cmp	r3, #255	; 0xff
 8000b98:	d00f      	beq.n	8000bba <ILI9341_IO_WriteReg+0x3a>
		ILI9341_DCRSState(GPIO_PIN_RESET);
 8000b9a:	2000      	movs	r0, #0
 8000b9c:	f000 f8c2 	bl	8000d24 <ILI9341_DCRSState>
		if(HAL_SPI_Transmit(&hspi1, &reg, 1, 1000) != HAL_OK){
 8000ba0:	f107 010f 	add.w	r1, r7, #15
 8000ba4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ba8:	2201      	movs	r2, #1
 8000baa:	4834      	ldr	r0, [pc, #208]	; (8000c7c <ILI9341_IO_WriteReg+0xfc>)
 8000bac:	f006 fe43 	bl	8007836 <HAL_SPI_Transmit>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <ILI9341_IO_WriteReg+0x3a>
			return ILI9341_Err;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	e05c      	b.n	8000c74 <ILI9341_IO_WriteReg+0xf4>
		}
	}

	ILI9341_DCRSState(GPIO_PIN_SET);
 8000bba:	2001      	movs	r0, #1
 8000bbc:	f000 f8b2 	bl	8000d24 <ILI9341_DCRSState>
	if(length != 0 && reg != 0xFF){
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d00f      	beq.n	8000be6 <ILI9341_IO_WriteReg+0x66>
 8000bc6:	7bfb      	ldrb	r3, [r7, #15]
 8000bc8:	2bff      	cmp	r3, #255	; 0xff
 8000bca:	d00c      	beq.n	8000be6 <ILI9341_IO_WriteReg+0x66>
		if(HAL_SPI_Transmit(&hspi1, pdata, length, 1000) != HAL_OK){
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	b29a      	uxth	r2, r3
 8000bd0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bd4:	68b9      	ldr	r1, [r7, #8]
 8000bd6:	4829      	ldr	r0, [pc, #164]	; (8000c7c <ILI9341_IO_WriteReg+0xfc>)
 8000bd8:	f006 fe2d 	bl	8007836 <HAL_SPI_Transmit>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d047      	beq.n	8000c72 <ILI9341_IO_WriteReg+0xf2>
			return ILI9341_Err;
 8000be2:	2301      	movs	r3, #1
 8000be4:	e046      	b.n	8000c74 <ILI9341_IO_WriteReg+0xf4>
		}
	}else if(length != 0 && reg == 0xFF){
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d03f      	beq.n	8000c6c <ILI9341_IO_WriteReg+0xec>
 8000bec:	7bfb      	ldrb	r3, [r7, #15]
 8000bee:	2bff      	cmp	r3, #255	; 0xff
 8000bf0:	d13c      	bne.n	8000c6c <ILI9341_IO_WriteReg+0xec>
        for(uint32_t i = 0; i < length; i = i + 3){
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	617b      	str	r3, [r7, #20]
 8000bf6:	e034      	b.n	8000c62 <ILI9341_IO_WriteReg+0xe2>
    		if(HAL_SPI_Transmit(&hspi1, pdata, 1, 1000) != HAL_OK){
 8000bf8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	68b9      	ldr	r1, [r7, #8]
 8000c00:	481e      	ldr	r0, [pc, #120]	; (8000c7c <ILI9341_IO_WriteReg+0xfc>)
 8000c02:	f006 fe18 	bl	8007836 <HAL_SPI_Transmit>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <ILI9341_IO_WriteReg+0x90>
    			return ILI9341_Err;
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	e031      	b.n	8000c74 <ILI9341_IO_WriteReg+0xf4>
    		}

    		if(HAL_SPI_Transmit(&hspi1, pdata + 1, 1, 1000) != HAL_OK){
 8000c10:	68bb      	ldr	r3, [r7, #8]
 8000c12:	1c59      	adds	r1, r3, #1
 8000c14:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c18:	2201      	movs	r2, #1
 8000c1a:	4818      	ldr	r0, [pc, #96]	; (8000c7c <ILI9341_IO_WriteReg+0xfc>)
 8000c1c:	f006 fe0b 	bl	8007836 <HAL_SPI_Transmit>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <ILI9341_IO_WriteReg+0xaa>
    			return ILI9341_Err;
 8000c26:	2301      	movs	r3, #1
 8000c28:	e024      	b.n	8000c74 <ILI9341_IO_WriteReg+0xf4>
    		}

    		if(HAL_SPI_Transmit(&hspi1, pdata + 2, 1, 1000) != HAL_OK){
 8000c2a:	68bb      	ldr	r3, [r7, #8]
 8000c2c:	1c99      	adds	r1, r3, #2
 8000c2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c32:	2201      	movs	r2, #1
 8000c34:	4811      	ldr	r0, [pc, #68]	; (8000c7c <ILI9341_IO_WriteReg+0xfc>)
 8000c36:	f006 fdfe 	bl	8007836 <HAL_SPI_Transmit>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <ILI9341_IO_WriteReg+0xc4>
    			return ILI9341_Err;
 8000c40:	2301      	movs	r3, #1
 8000c42:	e017      	b.n	8000c74 <ILI9341_IO_WriteReg+0xf4>
    		}
    		if(i == length - 10000){
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	f5a3 531c 	sub.w	r3, r3, #9984	; 0x2700
 8000c4a:	3b10      	subs	r3, #16
 8000c4c:	697a      	ldr	r2, [r7, #20]
 8000c4e:	429a      	cmp	r2, r3
 8000c50:	d104      	bne.n	8000c5c <ILI9341_IO_WriteReg+0xdc>
    			uint8_t j =0;
 8000c52:	2300      	movs	r3, #0
 8000c54:	74fb      	strb	r3, [r7, #19]
    			j++;
 8000c56:	7cfb      	ldrb	r3, [r7, #19]
 8000c58:	3301      	adds	r3, #1
 8000c5a:	74fb      	strb	r3, [r7, #19]
        for(uint32_t i = 0; i < length; i = i + 3){
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	3303      	adds	r3, #3
 8000c60:	617b      	str	r3, [r7, #20]
 8000c62:	697a      	ldr	r2, [r7, #20]
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	429a      	cmp	r2, r3
 8000c68:	d3c6      	bcc.n	8000bf8 <ILI9341_IO_WriteReg+0x78>
 8000c6a:	e002      	b.n	8000c72 <ILI9341_IO_WriteReg+0xf2>
    		}
        }
	}else {
		ILI9341_CSState(GPIO_PIN_SET);
 8000c6c:	2001      	movs	r0, #1
 8000c6e:	f000 f83f 	bl	8000cf0 <ILI9341_CSState>
	}
	return ILI9341_Ok;
 8000c72:	2300      	movs	r3, #0
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	3718      	adds	r7, #24
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	20000f0c 	.word	0x20000f0c

08000c80 <ILI9341_IO_ReadReg>:

static ILI9341_Status_t ILI9341_IO_ReadReg(uint8_t reg, uint8_t* pdata, uint32_t length){
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b084      	sub	sp, #16
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	4603      	mov	r3, r0
 8000c88:	60b9      	str	r1, [r7, #8]
 8000c8a:	607a      	str	r2, [r7, #4]
 8000c8c:	73fb      	strb	r3, [r7, #15]
	ILI9341_CSState(GPIO_PIN_RESET);
 8000c8e:	2000      	movs	r0, #0
 8000c90:	f000 f82e 	bl	8000cf0 <ILI9341_CSState>
	ILI9341_DCRSState(GPIO_PIN_RESET);
 8000c94:	2000      	movs	r0, #0
 8000c96:	f000 f845 	bl	8000d24 <ILI9341_DCRSState>
	if(HAL_SPI_Transmit(&hspi1, &reg, 1, 1000) != HAL_OK){
 8000c9a:	f107 010f 	add.w	r1, r7, #15
 8000c9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	4811      	ldr	r0, [pc, #68]	; (8000cec <ILI9341_IO_ReadReg+0x6c>)
 8000ca6:	f006 fdc6 	bl	8007836 <HAL_SPI_Transmit>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d001      	beq.n	8000cb4 <ILI9341_IO_ReadReg+0x34>
        return ILI9341_Err;
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	e016      	b.n	8000ce2 <ILI9341_IO_ReadReg+0x62>
	}
	ILI9341_DCRSState(GPIO_PIN_SET);
 8000cb4:	2001      	movs	r0, #1
 8000cb6:	f000 f835 	bl	8000d24 <ILI9341_DCRSState>

	if(length != 0){
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d00c      	beq.n	8000cda <ILI9341_IO_ReadReg+0x5a>
		if(HAL_SPI_Receive(&hspi1, pdata, length, 1000) != HAL_OK){
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	b29a      	uxth	r2, r3
 8000cc4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cc8:	68b9      	ldr	r1, [r7, #8]
 8000cca:	4808      	ldr	r0, [pc, #32]	; (8000cec <ILI9341_IO_ReadReg+0x6c>)
 8000ccc:	f006 feef 	bl	8007aae <HAL_SPI_Receive>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <ILI9341_IO_ReadReg+0x5a>
			return ILI9341_Err;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	e003      	b.n	8000ce2 <ILI9341_IO_ReadReg+0x62>
		}
	}
	ILI9341_CSState(GPIO_PIN_SET);
 8000cda:	2001      	movs	r0, #1
 8000cdc:	f000 f808 	bl	8000cf0 <ILI9341_CSState>
	return ILI9341_Ok;
 8000ce0:	2300      	movs	r3, #0
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	3710      	adds	r7, #16
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	20000f0c 	.word	0x20000f0c

08000cf0 <ILI9341_CSState>:

static void ILI9341_CSState(uint8_t state){
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	71fb      	strb	r3, [r7, #7]
  if(state){
 8000cfa:	79fb      	ldrb	r3, [r7, #7]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d005      	beq.n	8000d0c <ILI9341_CSState+0x1c>
    HAL_GPIO_WritePin(SPI1_CSN_GPIO_Port, SPI1_CSN_Pin, GPIO_PIN_SET);
 8000d00:	2201      	movs	r2, #1
 8000d02:	2101      	movs	r1, #1
 8000d04:	4806      	ldr	r0, [pc, #24]	; (8000d20 <ILI9341_CSState+0x30>)
 8000d06:	f003 fe39 	bl	800497c <HAL_GPIO_WritePin>
  } else {
    HAL_GPIO_WritePin(SPI1_CSN_GPIO_Port, SPI1_CSN_Pin, GPIO_PIN_RESET);
  }
}
 8000d0a:	e004      	b.n	8000d16 <ILI9341_CSState+0x26>
    HAL_GPIO_WritePin(SPI1_CSN_GPIO_Port, SPI1_CSN_Pin, GPIO_PIN_RESET);
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	2101      	movs	r1, #1
 8000d10:	4803      	ldr	r0, [pc, #12]	; (8000d20 <ILI9341_CSState+0x30>)
 8000d12:	f003 fe33 	bl	800497c <HAL_GPIO_WritePin>
}
 8000d16:	bf00      	nop
 8000d18:	3708      	adds	r7, #8
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	40020400 	.word	0x40020400

08000d24 <ILI9341_DCRSState>:

static void ILI9341_DCRSState(uint8_t state){
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	71fb      	strb	r3, [r7, #7]
  if(state){
 8000d2e:	79fb      	ldrb	r3, [r7, #7]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d005      	beq.n	8000d40 <ILI9341_DCRSState+0x1c>
    HAL_GPIO_WritePin(DCRS_GPIO_Port, DCRS_Pin, GPIO_PIN_SET);
 8000d34:	2201      	movs	r2, #1
 8000d36:	2102      	movs	r1, #2
 8000d38:	4806      	ldr	r0, [pc, #24]	; (8000d54 <ILI9341_DCRSState+0x30>)
 8000d3a:	f003 fe1f 	bl	800497c <HAL_GPIO_WritePin>
  } else {
    HAL_GPIO_WritePin(DCRS_GPIO_Port, DCRS_Pin, GPIO_PIN_RESET);
  }
}
 8000d3e:	e004      	b.n	8000d4a <ILI9341_DCRSState+0x26>
    HAL_GPIO_WritePin(DCRS_GPIO_Port, DCRS_Pin, GPIO_PIN_RESET);
 8000d40:	2200      	movs	r2, #0
 8000d42:	2102      	movs	r1, #2
 8000d44:	4803      	ldr	r0, [pc, #12]	; (8000d54 <ILI9341_DCRSState+0x30>)
 8000d46:	f003 fe19 	bl	800497c <HAL_GPIO_WritePin>
}
 8000d4a:	bf00      	nop
 8000d4c:	3708      	adds	r7, #8
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	40020400 	.word	0x40020400

08000d58 <MCP23017_Init>:
 *@Params: Init Struct with desired settings, Device handle to initialize, a low level IO Driver struct
 *@Return: None
 *@Precondition: Init Struct should have desired settings
 *@Postcondition: Device struct will be intialized and ready to use
 **************************************//**************************************/
void MCP23017_Init(MCP23017_Init_Struct_t Settings, MCP23017_Handle_t *Dev, MCP23017_IO_Drv_t IO_Driver){
 8000d58:	b590      	push	{r4, r7, lr}
 8000d5a:	b085      	sub	sp, #20
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	463c      	mov	r4, r7
 8000d60:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	Dev->IO_Driver.Init = IO_Driver.Init;
 8000d64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d66:	6a3b      	ldr	r3, [r7, #32]
 8000d68:	605a      	str	r2, [r3, #4]
	Dev->IO_Driver.DeInit = IO_Driver.DeInit;
 8000d6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000d6c:	6a3b      	ldr	r3, [r7, #32]
 8000d6e:	609a      	str	r2, [r3, #8]
	Dev->IO_Driver.ReadReg = IO_Driver.ReadReg;
 8000d70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000d72:	6a3b      	ldr	r3, [r7, #32]
 8000d74:	611a      	str	r2, [r3, #16]
	Dev->IO_Driver.WriteReg = IO_Driver.WriteReg;
 8000d76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000d78:	6a3b      	ldr	r3, [r7, #32]
 8000d7a:	60da      	str	r2, [r3, #12]
	Dev->IO_Driver.ioctl = IO_Driver.ioctl;
 8000d7c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000d7e:	6a3b      	ldr	r3, [r7, #32]
 8000d80:	615a      	str	r2, [r3, #20]
	Dev->IO_Driver.Init();
 8000d82:	6a3b      	ldr	r3, [r7, #32]
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	4798      	blx	r3

	if(Dev->IO_Driver.WriteReg(MCP23017_IOCON, (uint8_t*)&Settings.Config,1) != MCP23017_Ok){
 8000d88:	6a3b      	ldr	r3, [r7, #32]
 8000d8a:	68db      	ldr	r3, [r3, #12]
 8000d8c:	200a      	movs	r0, #10
 8000d8e:	463a      	mov	r2, r7
 8000d90:	f102 010c 	add.w	r1, r2, #12
 8000d94:	2201      	movs	r2, #1
 8000d96:	4798      	blx	r3
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d003      	beq.n	8000da6 <MCP23017_Init+0x4e>
		_log(log_mcp23017, "Initialization: IOCON Write Failed");
 8000d9e:	492e      	ldr	r1, [pc, #184]	; (8000e58 <MCP23017_Init+0x100>)
 8000da0:	2005      	movs	r0, #5
 8000da2:	f001 f9f7 	bl	8002194 <_log>
	}

	if(Dev->IO_Driver.WriteReg(MCP23017_IODIRA, (uint8_t*)&Settings.Mode,2) != MCP23017_Ok){
 8000da6:	6a3b      	ldr	r3, [r7, #32]
 8000da8:	68db      	ldr	r3, [r3, #12]
 8000daa:	2000      	movs	r0, #0
 8000dac:	4639      	mov	r1, r7
 8000dae:	2202      	movs	r2, #2
 8000db0:	4798      	blx	r3
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d003      	beq.n	8000dc0 <MCP23017_Init+0x68>
		_log(log_mcp23017, "Initialization: IODIR Write Failed");
 8000db8:	4928      	ldr	r1, [pc, #160]	; (8000e5c <MCP23017_Init+0x104>)
 8000dba:	2005      	movs	r0, #5
 8000dbc:	f001 f9ea 	bl	8002194 <_log>
	}

	if(Dev->IO_Driver.WriteReg(MCP23017_IPOLA, (uint8_t*)&Settings.Polarity,2) != MCP23017_Ok){
 8000dc0:	6a3b      	ldr	r3, [r7, #32]
 8000dc2:	68db      	ldr	r3, [r3, #12]
 8000dc4:	2002      	movs	r0, #2
 8000dc6:	463a      	mov	r2, r7
 8000dc8:	1c91      	adds	r1, r2, #2
 8000dca:	2202      	movs	r2, #2
 8000dcc:	4798      	blx	r3
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d003      	beq.n	8000ddc <MCP23017_Init+0x84>
		_log(log_mcp23017, "Initialization: IPOL Write Failed");
 8000dd4:	4922      	ldr	r1, [pc, #136]	; (8000e60 <MCP23017_Init+0x108>)
 8000dd6:	2005      	movs	r0, #5
 8000dd8:	f001 f9dc 	bl	8002194 <_log>
	}

	if(Dev->IO_Driver.WriteReg(MCP23017_GPINTENA, (uint8_t*)&Settings.IntEnable,2) != MCP23017_Ok){
 8000ddc:	6a3b      	ldr	r3, [r7, #32]
 8000dde:	68db      	ldr	r3, [r3, #12]
 8000de0:	2004      	movs	r0, #4
 8000de2:	463a      	mov	r2, r7
 8000de4:	1d11      	adds	r1, r2, #4
 8000de6:	2202      	movs	r2, #2
 8000de8:	4798      	blx	r3
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d003      	beq.n	8000df8 <MCP23017_Init+0xa0>
		_log(log_mcp23017, "Initialization: INTENA Write Failed");
 8000df0:	491c      	ldr	r1, [pc, #112]	; (8000e64 <MCP23017_Init+0x10c>)
 8000df2:	2005      	movs	r0, #5
 8000df4:	f001 f9ce 	bl	8002194 <_log>
	}

	if(Dev->IO_Driver.WriteReg(MCP23017_DEFVALA, (uint8_t*)&Settings.DefaultValue,2) != MCP23017_Ok){
 8000df8:	6a3b      	ldr	r3, [r7, #32]
 8000dfa:	68db      	ldr	r3, [r3, #12]
 8000dfc:	2006      	movs	r0, #6
 8000dfe:	463a      	mov	r2, r7
 8000e00:	1d91      	adds	r1, r2, #6
 8000e02:	2202      	movs	r2, #2
 8000e04:	4798      	blx	r3
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d003      	beq.n	8000e14 <MCP23017_Init+0xbc>
		_log(log_mcp23017, "Initialization: DEFVAL Write Failed");
 8000e0c:	4916      	ldr	r1, [pc, #88]	; (8000e68 <MCP23017_Init+0x110>)
 8000e0e:	2005      	movs	r0, #5
 8000e10:	f001 f9c0 	bl	8002194 <_log>
	}

	if(Dev->IO_Driver.WriteReg(MCP23017_INTCONA, (uint8_t*)&Settings.IRQControl,2) != MCP23017_Ok){
 8000e14:	6a3b      	ldr	r3, [r7, #32]
 8000e16:	68db      	ldr	r3, [r3, #12]
 8000e18:	2008      	movs	r0, #8
 8000e1a:	463a      	mov	r2, r7
 8000e1c:	f102 0108 	add.w	r1, r2, #8
 8000e20:	2202      	movs	r2, #2
 8000e22:	4798      	blx	r3
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d003      	beq.n	8000e32 <MCP23017_Init+0xda>
		_log(log_mcp23017, "Initialization: INTCON Write Failed");
 8000e2a:	4910      	ldr	r1, [pc, #64]	; (8000e6c <MCP23017_Init+0x114>)
 8000e2c:	2005      	movs	r0, #5
 8000e2e:	f001 f9b1 	bl	8002194 <_log>
	}

	if(Dev->IO_Driver.WriteReg(MCP23017_GPPUA, (uint8_t*)&Settings.PullUp,2) != MCP23017_Ok){
 8000e32:	6a3b      	ldr	r3, [r7, #32]
 8000e34:	68db      	ldr	r3, [r3, #12]
 8000e36:	200c      	movs	r0, #12
 8000e38:	463a      	mov	r2, r7
 8000e3a:	f102 010a 	add.w	r1, r2, #10
 8000e3e:	2202      	movs	r2, #2
 8000e40:	4798      	blx	r3
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d003      	beq.n	8000e50 <MCP23017_Init+0xf8>
		_log(log_mcp23017, "Initialization: GPPU Write Failed");
 8000e48:	4909      	ldr	r1, [pc, #36]	; (8000e70 <MCP23017_Init+0x118>)
 8000e4a:	2005      	movs	r0, #5
 8000e4c:	f001 f9a2 	bl	8002194 <_log>
	}

}
 8000e50:	bf00      	nop
 8000e52:	3714      	adds	r7, #20
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd90      	pop	{r4, r7, pc}
 8000e58:	0800e4e4 	.word	0x0800e4e4
 8000e5c:	0800e508 	.word	0x0800e508
 8000e60:	0800e52c 	.word	0x0800e52c
 8000e64:	0800e550 	.word	0x0800e550
 8000e68:	0800e574 	.word	0x0800e574
 8000e6c:	0800e598 	.word	0x0800e598
 8000e70:	0800e5bc 	.word	0x0800e5bc

08000e74 <MCP23017_DeInit>:
 *@Params: MCP23017 Device handle to deinitialize
 *@Return: None
 *@Precondition: Device handle should be initialized
 *@Postcondition: Device handle will be deinitialized and device registers set to default settings
 **************************************//**************************************/
void MCP23017_DeInit(MCP23017_Handle_t *Dev){
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
	MCP23017_Reset(Dev);
 8000e7c:	6878      	ldr	r0, [r7, #4]
 8000e7e:	f000 f813 	bl	8000ea8 <MCP23017_Reset>
	Dev->IO_Driver.Init = '\0';
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	2200      	movs	r2, #0
 8000e86:	605a      	str	r2, [r3, #4]
	Dev->IO_Driver.DeInit = '\0';
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	609a      	str	r2, [r3, #8]
	Dev->IO_Driver.ReadReg = '\0';
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	2200      	movs	r2, #0
 8000e92:	611a      	str	r2, [r3, #16]
	Dev->IO_Driver.WriteReg = '\0';
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	2200      	movs	r2, #0
 8000e98:	60da      	str	r2, [r3, #12]
	Dev->IO_Driver.ioctl = '\0';
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	615a      	str	r2, [r3, #20]
}
 8000ea0:	bf00      	nop
 8000ea2:	3708      	adds	r7, #8
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}

08000ea8 <MCP23017_Reset>:
 *@Params: MCP23017 Device Handle to reset
 *@Return: None
 *@Precondition: Device handle should be initialized
 *@Postcondition: Device registers will be set to default settings
 **************************************//**************************************/
void MCP23017_Reset(MCP23017_Handle_t *Dev){
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b084      	sub	sp, #16
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
	uint16_t Settings = 0;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	81fb      	strh	r3, [r7, #14]
	Dev->IO_Driver.DeInit(); //Turn off DMA IRQ and clear pending IRQ
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	689b      	ldr	r3, [r3, #8]
 8000eb8:	4798      	blx	r3
	if(Dev->IO_Driver.WriteReg(MCP23017_IOCON, (uint8_t*)&Settings,1) != MCP23017_Ok){
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	68db      	ldr	r3, [r3, #12]
 8000ebe:	200a      	movs	r0, #10
 8000ec0:	f107 010e 	add.w	r1, r7, #14
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	4798      	blx	r3
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d003      	beq.n	8000ed6 <MCP23017_Reset+0x2e>
		_log(log_mcp23017, "DeInitialization: IOCON Write Failed");
 8000ece:	4930      	ldr	r1, [pc, #192]	; (8000f90 <MCP23017_Reset+0xe8>)
 8000ed0:	2005      	movs	r0, #5
 8000ed2:	f001 f95f 	bl	8002194 <_log>
	}

	Settings = 0xFFFF;
 8000ed6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000eda:	81fb      	strh	r3, [r7, #14]
	if(Dev->IO_Driver.WriteReg(MCP23017_IODIRA, (uint8_t*)&Settings,2) != MCP23017_Ok){
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	68db      	ldr	r3, [r3, #12]
 8000ee0:	2000      	movs	r0, #0
 8000ee2:	f107 010e 	add.w	r1, r7, #14
 8000ee6:	2202      	movs	r2, #2
 8000ee8:	4798      	blx	r3
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d003      	beq.n	8000ef8 <MCP23017_Reset+0x50>
		_log(log_mcp23017, "DeInitialization: IODIR Write Failed");
 8000ef0:	4928      	ldr	r1, [pc, #160]	; (8000f94 <MCP23017_Reset+0xec>)
 8000ef2:	2005      	movs	r0, #5
 8000ef4:	f001 f94e 	bl	8002194 <_log>
	}

	Settings = 0x0000;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	81fb      	strh	r3, [r7, #14]
	if(Dev->IO_Driver.WriteReg(MCP23017_IPOLA, (uint8_t*)&Settings,2) != MCP23017_Ok){
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	68db      	ldr	r3, [r3, #12]
 8000f00:	2002      	movs	r0, #2
 8000f02:	f107 010e 	add.w	r1, r7, #14
 8000f06:	2202      	movs	r2, #2
 8000f08:	4798      	blx	r3
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d003      	beq.n	8000f18 <MCP23017_Reset+0x70>
		_log(log_mcp23017, "DeInitialization: IPOL Write Failed");
 8000f10:	4921      	ldr	r1, [pc, #132]	; (8000f98 <MCP23017_Reset+0xf0>)
 8000f12:	2005      	movs	r0, #5
 8000f14:	f001 f93e 	bl	8002194 <_log>
	}

	if(Dev->IO_Driver.WriteReg(MCP23017_GPINTENA, (uint8_t*)&Settings,2) != MCP23017_Ok){
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	68db      	ldr	r3, [r3, #12]
 8000f1c:	2004      	movs	r0, #4
 8000f1e:	f107 010e 	add.w	r1, r7, #14
 8000f22:	2202      	movs	r2, #2
 8000f24:	4798      	blx	r3
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d003      	beq.n	8000f34 <MCP23017_Reset+0x8c>
		_log(log_mcp23017, "DeInitialization: INTENA Write Failed");
 8000f2c:	491b      	ldr	r1, [pc, #108]	; (8000f9c <MCP23017_Reset+0xf4>)
 8000f2e:	2005      	movs	r0, #5
 8000f30:	f001 f930 	bl	8002194 <_log>
	}

	if(Dev->IO_Driver.WriteReg(MCP23017_DEFVALA, (uint8_t*)&Settings,2) != MCP23017_Ok){
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	68db      	ldr	r3, [r3, #12]
 8000f38:	2006      	movs	r0, #6
 8000f3a:	f107 010e 	add.w	r1, r7, #14
 8000f3e:	2202      	movs	r2, #2
 8000f40:	4798      	blx	r3
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d003      	beq.n	8000f50 <MCP23017_Reset+0xa8>
		_log(log_mcp23017, "DeInitialization: DEFVAL Write Failed");
 8000f48:	4915      	ldr	r1, [pc, #84]	; (8000fa0 <MCP23017_Reset+0xf8>)
 8000f4a:	2005      	movs	r0, #5
 8000f4c:	f001 f922 	bl	8002194 <_log>
	}

	if(Dev->IO_Driver.WriteReg(MCP23017_INTCONA, (uint8_t*)&Settings,2) != MCP23017_Ok){
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	68db      	ldr	r3, [r3, #12]
 8000f54:	2008      	movs	r0, #8
 8000f56:	f107 010e 	add.w	r1, r7, #14
 8000f5a:	2202      	movs	r2, #2
 8000f5c:	4798      	blx	r3
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d003      	beq.n	8000f6c <MCP23017_Reset+0xc4>
		_log(log_mcp23017, "DeInitialization: INTCON Write Failed");
 8000f64:	490f      	ldr	r1, [pc, #60]	; (8000fa4 <MCP23017_Reset+0xfc>)
 8000f66:	2005      	movs	r0, #5
 8000f68:	f001 f914 	bl	8002194 <_log>
	}

	if(Dev->IO_Driver.WriteReg(MCP23017_GPPUA, (uint8_t*)&Settings,2) != MCP23017_Ok){
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	68db      	ldr	r3, [r3, #12]
 8000f70:	200c      	movs	r0, #12
 8000f72:	f107 010e 	add.w	r1, r7, #14
 8000f76:	2202      	movs	r2, #2
 8000f78:	4798      	blx	r3
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d003      	beq.n	8000f88 <MCP23017_Reset+0xe0>
		_log(log_mcp23017, "DeInitialization: GPPU Write Failed");
 8000f80:	4909      	ldr	r1, [pc, #36]	; (8000fa8 <MCP23017_Reset+0x100>)
 8000f82:	2005      	movs	r0, #5
 8000f84:	f001 f906 	bl	8002194 <_log>
	}
}
 8000f88:	bf00      	nop
 8000f8a:	3710      	adds	r7, #16
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	0800e5e0 	.word	0x0800e5e0
 8000f94:	0800e608 	.word	0x0800e608
 8000f98:	0800e630 	.word	0x0800e630
 8000f9c:	0800e654 	.word	0x0800e654
 8000fa0:	0800e67c 	.word	0x0800e67c
 8000fa4:	0800e6a4 	.word	0x0800e6a4
 8000fa8:	0800e6cc 	.word	0x0800e6cc

08000fac <MCP23017_ReadPins>:
 *@Params: MCP23017 Device Handle
 *@Return: Err if read fails, Ok otherwise
 *@Precondition: Device handle must be initialized
 *@Postcondition: Device Handle PinStates will contain new states of pins
 **************************************//**************************************/
MCP23017_Status_t MCP23017_ReadPins(MCP23017_Handle_t *Dev){
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
	if(Dev->IO_Driver.ReadReg(MCP23017_GPIOA, (uint8_t*)&Dev->PinStates, 2) != MCP23017_Ok){
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	691b      	ldr	r3, [r3, #16]
 8000fb8:	2012      	movs	r0, #18
 8000fba:	6879      	ldr	r1, [r7, #4]
 8000fbc:	2202      	movs	r2, #2
 8000fbe:	4798      	blx	r3
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d005      	beq.n	8000fd2 <MCP23017_ReadPins+0x26>
		_log(log_mcp23017, "Read Pins Failed");
 8000fc6:	4905      	ldr	r1, [pc, #20]	; (8000fdc <MCP23017_ReadPins+0x30>)
 8000fc8:	2005      	movs	r0, #5
 8000fca:	f001 f8e3 	bl	8002194 <_log>
		return MCP23017_Err;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	e000      	b.n	8000fd4 <MCP23017_ReadPins+0x28>
	}
	return MCP23017_Ok;
 8000fd2:	2300      	movs	r3, #0
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	3708      	adds	r7, #8
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	0800e73c 	.word	0x0800e73c

08000fe0 <MCP23017_IO_Init>:
 *@Params: None
 *@Return: None
 *@Precondition: None
 *@Postcondition: GPIO B Clk will be enabled and I2C1 Peripheral will be initialized
 **************************************//**************************************/
static void MCP23017_IO_Init(){
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
	I2C1_DMA_Init();
 8000fe4:	f000 fe62 	bl	8001cac <I2C1_DMA_Init>
	I2C_GPIO_Init();
 8000fe8:	f000 fed8 	bl	8001d9c <I2C_GPIO_Init>
	I2C1_Init();
 8000fec:	f001 f860 	bl	80020b0 <I2C1_Init>
}
 8000ff0:	bf00      	nop
 8000ff2:	bd80      	pop	{r7, pc}

08000ff4 <MCP23017_IO_DeInit>:
 *@Params: None
 *@Return: None
 *@Precondition: None
 *@Postcondition: None
 **************************************//**************************************/
static void MCP23017_IO_DeInit(){
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
	HAL_NVIC_DisableIRQ(DMA1_Stream0_IRQn);
 8000ff8:	200b      	movs	r0, #11
 8000ffa:	f002 fe20 	bl	8003c3e <HAL_NVIC_DisableIRQ>
	HAL_NVIC_ClearPendingIRQ(DMA1_Stream0_IRQn);
 8000ffe:	200b      	movs	r0, #11
 8001000:	f002 fe37 	bl	8003c72 <HAL_NVIC_ClearPendingIRQ>
}
 8001004:	bf00      	nop
 8001006:	bd80      	pop	{r7, pc}

08001008 <MCP23017_IO_WriteReg>:
 *@Params: MCP23017 Device Address, Register to write to, data to write, data length in bytes
 *@Return: Error if the write fails, otherwise Ok
 *@Precondition: I2C Bus should be initialized
 *@Postcondition: Device register will be written to
 **************************************//**************************************/
static MCP23017_Status_t MCP23017_IO_WriteReg(uint8_t DevAddr, uint8_t RegAddr, uint8_t *Data, uint8_t Length){
 8001008:	b580      	push	{r7, lr}
 800100a:	b086      	sub	sp, #24
 800100c:	af04      	add	r7, sp, #16
 800100e:	603a      	str	r2, [r7, #0]
 8001010:	461a      	mov	r2, r3
 8001012:	4603      	mov	r3, r0
 8001014:	71fb      	strb	r3, [r7, #7]
 8001016:	460b      	mov	r3, r1
 8001018:	71bb      	strb	r3, [r7, #6]
 800101a:	4613      	mov	r3, r2
 800101c:	717b      	strb	r3, [r7, #5]
	if(HAL_I2C_Mem_Write(&hi2c1, DevAddr, RegAddr, I2C_MEMADD_SIZE_8BIT, Data, Length, 50) != HAL_OK){
 800101e:	79fb      	ldrb	r3, [r7, #7]
 8001020:	b299      	uxth	r1, r3
 8001022:	79bb      	ldrb	r3, [r7, #6]
 8001024:	b29a      	uxth	r2, r3
 8001026:	797b      	ldrb	r3, [r7, #5]
 8001028:	b29b      	uxth	r3, r3
 800102a:	2032      	movs	r0, #50	; 0x32
 800102c:	9002      	str	r0, [sp, #8]
 800102e:	9301      	str	r3, [sp, #4]
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	9300      	str	r3, [sp, #0]
 8001034:	2301      	movs	r3, #1
 8001036:	4809      	ldr	r0, [pc, #36]	; (800105c <MCP23017_IO_WriteReg+0x54>)
 8001038:	f003 fdfe 	bl	8004c38 <HAL_I2C_Mem_Write>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d007      	beq.n	8001052 <MCP23017_IO_WriteReg+0x4a>
		_log(log_i2c,"Write to MCP23017 Reg address %x failed.", RegAddr);
 8001042:	79bb      	ldrb	r3, [r7, #6]
 8001044:	461a      	mov	r2, r3
 8001046:	4906      	ldr	r1, [pc, #24]	; (8001060 <MCP23017_IO_WriteReg+0x58>)
 8001048:	2000      	movs	r0, #0
 800104a:	f001 f8a3 	bl	8002194 <_log>
		return MCP23017_Err;
 800104e:	2301      	movs	r3, #1
 8001050:	e000      	b.n	8001054 <MCP23017_IO_WriteReg+0x4c>
	}
	return MCP23017_Ok;
 8001052:	2300      	movs	r3, #0
}
 8001054:	4618      	mov	r0, r3
 8001056:	3708      	adds	r7, #8
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	20000420 	.word	0x20000420
 8001060:	0800e750 	.word	0x0800e750

08001064 <MCP23017_IO_ReadReg>:
 *@Params: MCP23017 Device Address, Register to read to, data buffer to read into, data length in bytes,
 *@Return: Error if the read fails, otherwise Ok
 *@Precondition: I2C Bus must be initialized
 *@Postcondition: Data buffer will have the read data
 **************************************//**************************************/
static MCP23017_Status_t MCP23017_IO_ReadReg(uint8_t DevAddr, uint8_t RegAddr, uint8_t *Data, uint8_t Length){
 8001064:	b580      	push	{r7, lr}
 8001066:	b084      	sub	sp, #16
 8001068:	af02      	add	r7, sp, #8
 800106a:	603a      	str	r2, [r7, #0]
 800106c:	461a      	mov	r2, r3
 800106e:	4603      	mov	r3, r0
 8001070:	71fb      	strb	r3, [r7, #7]
 8001072:	460b      	mov	r3, r1
 8001074:	71bb      	strb	r3, [r7, #6]
 8001076:	4613      	mov	r3, r2
 8001078:	717b      	strb	r3, [r7, #5]
	//HAL_I2C_Mem_Read_DMA(hi2c, DevAddress, MemAddress, MemAddSize, pData, Size)
	//if(HAL_I2C_Mem_Read(&hi2c1, DevAddr, RegAddr, I2C_MEMADD_SIZE_8BIT, Data, Length, 50) != HAL_OK){
	if(HAL_I2C_Mem_Read_DMA(&hi2c1, DevAddr, RegAddr, I2C_MEMADD_SIZE_8BIT, Data, Length) != HAL_OK){
 800107a:	79fb      	ldrb	r3, [r7, #7]
 800107c:	b299      	uxth	r1, r3
 800107e:	79bb      	ldrb	r3, [r7, #6]
 8001080:	b29a      	uxth	r2, r3
 8001082:	797b      	ldrb	r3, [r7, #5]
 8001084:	b29b      	uxth	r3, r3
 8001086:	9301      	str	r3, [sp, #4]
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	9300      	str	r3, [sp, #0]
 800108c:	2301      	movs	r3, #1
 800108e:	4809      	ldr	r0, [pc, #36]	; (80010b4 <MCP23017_IO_ReadReg+0x50>)
 8001090:	f003 fecc 	bl	8004e2c <HAL_I2C_Mem_Read_DMA>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d007      	beq.n	80010aa <MCP23017_IO_ReadReg+0x46>
		_log(log_i2c,"Read from MCP23017 Reg address %x failed.", RegAddr);
 800109a:	79bb      	ldrb	r3, [r7, #6]
 800109c:	461a      	mov	r2, r3
 800109e:	4906      	ldr	r1, [pc, #24]	; (80010b8 <MCP23017_IO_ReadReg+0x54>)
 80010a0:	2000      	movs	r0, #0
 80010a2:	f001 f877 	bl	8002194 <_log>
		return MCP23017_Err;
 80010a6:	2301      	movs	r3, #1
 80010a8:	e000      	b.n	80010ac <MCP23017_IO_ReadReg+0x48>
	}
	return MCP23017_Ok;
 80010aa:	2300      	movs	r3, #0
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3708      	adds	r7, #8
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	20000420 	.word	0x20000420
 80010b8:	0800e77c 	.word	0x0800e77c

080010bc <MCP23017_IO_ioctl>:
 *@Params: Command
 *@Return: None
 *@Precondition: None
 *@Postcondition: None
 **************************************//**************************************/
static uint8_t MCP23017_IO_ioctl(MCP23017_IO_Cmd_t command){
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	4603      	mov	r3, r0
 80010c4:	71fb      	strb	r3, [r7, #7]
	return MCP23017_Ok;
 80010c6:	2300      	movs	r3, #0
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	370c      	adds	r7, #12
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr

080010d4 <MCP23017_IO1_WriteReg>:
 *@Params: Register to write to, data to write, length of data in bytes
 *@Return: Err if write fails, Ok otherwise
 *@Precondition: I2C Bus must be initialized
 *@Postcondition: Device (w/ Address1) register will be modified
 **************************************//**************************************/
static MCP23017_Status_t MCP23017_IO1_WriteReg(uint8_t RegAddr, uint8_t *Data, uint8_t Length){
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	4603      	mov	r3, r0
 80010dc:	6039      	str	r1, [r7, #0]
 80010de:	71fb      	strb	r3, [r7, #7]
 80010e0:	4613      	mov	r3, r2
 80010e2:	71bb      	strb	r3, [r7, #6]
	static const uint8_t address = MCP23017_Address1;
    return MCP23017_IO_WriteReg(address, RegAddr, Data, Length);
 80010e4:	4b05      	ldr	r3, [pc, #20]	; (80010fc <MCP23017_IO1_WriteReg+0x28>)
 80010e6:	7818      	ldrb	r0, [r3, #0]
 80010e8:	79bb      	ldrb	r3, [r7, #6]
 80010ea:	79f9      	ldrb	r1, [r7, #7]
 80010ec:	683a      	ldr	r2, [r7, #0]
 80010ee:	f7ff ff8b 	bl	8001008 <MCP23017_IO_WriteReg>
 80010f2:	4603      	mov	r3, r0
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	3708      	adds	r7, #8
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	0800e948 	.word	0x0800e948

08001100 <MCP23017_IO1_ReadReg>:
 *@Params: Register to read from, data buffer to read into, length of data in bytes
 *@Return: Err if read fails, Ok otherwise
 *@Precondition: I2C Bus must be initialized
 *@Postcondition: Data buffer will contain data from device (w/ Address1) register
 **************************************//**************************************/
static MCP23017_Status_t MCP23017_IO1_ReadReg(uint8_t RegAddr, uint8_t *Data, uint8_t Length){
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	4603      	mov	r3, r0
 8001108:	6039      	str	r1, [r7, #0]
 800110a:	71fb      	strb	r3, [r7, #7]
 800110c:	4613      	mov	r3, r2
 800110e:	71bb      	strb	r3, [r7, #6]
	static const uint8_t address = MCP23017_Address1;
	return MCP23017_IO_ReadReg(address, RegAddr, Data, Length);
 8001110:	4b05      	ldr	r3, [pc, #20]	; (8001128 <MCP23017_IO1_ReadReg+0x28>)
 8001112:	7818      	ldrb	r0, [r3, #0]
 8001114:	79bb      	ldrb	r3, [r7, #6]
 8001116:	79f9      	ldrb	r1, [r7, #7]
 8001118:	683a      	ldr	r2, [r7, #0]
 800111a:	f7ff ffa3 	bl	8001064 <MCP23017_IO_ReadReg>
 800111e:	4603      	mov	r3, r0
}
 8001120:	4618      	mov	r0, r3
 8001122:	3708      	adds	r7, #8
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	0800e949 	.word	0x0800e949

0800112c <MCP23017_IO2_WriteReg>:
 *@Params: Register to write to, data to write, length of data in bytes
 *@Return: Err if write fails, Ok otherwise
 *@Precondition: I2C Bus must be initialized
 *@Postcondition: Device (w/ Address2) register will be modified
 **************************************//**************************************/
static MCP23017_Status_t MCP23017_IO2_WriteReg(uint8_t RegAddr, uint8_t *Data, uint8_t Length){
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	4603      	mov	r3, r0
 8001134:	6039      	str	r1, [r7, #0]
 8001136:	71fb      	strb	r3, [r7, #7]
 8001138:	4613      	mov	r3, r2
 800113a:	71bb      	strb	r3, [r7, #6]
	static const uint8_t address = MCP23017_Address2;
    return MCP23017_IO_WriteReg(address, RegAddr, Data, Length);
 800113c:	4b05      	ldr	r3, [pc, #20]	; (8001154 <MCP23017_IO2_WriteReg+0x28>)
 800113e:	7818      	ldrb	r0, [r3, #0]
 8001140:	79bb      	ldrb	r3, [r7, #6]
 8001142:	79f9      	ldrb	r1, [r7, #7]
 8001144:	683a      	ldr	r2, [r7, #0]
 8001146:	f7ff ff5f 	bl	8001008 <MCP23017_IO_WriteReg>
 800114a:	4603      	mov	r3, r0
}
 800114c:	4618      	mov	r0, r3
 800114e:	3708      	adds	r7, #8
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	0800e94a 	.word	0x0800e94a

08001158 <MCP23017_IO2_ReadReg>:
 *@Params: Register to read from, data buffer to read into, length of data in bytes
 *@Return: Err if read fails, Ok otherwise
 *@Precondition: I2C Bus must be initialized
 *@Postcondition: Data buffer will contain data from device (w/ Address2) register
 **************************************//**************************************/
static MCP23017_Status_t MCP23017_IO2_ReadReg(uint8_t RegAddr, uint8_t *Data, uint8_t Length){
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	4603      	mov	r3, r0
 8001160:	6039      	str	r1, [r7, #0]
 8001162:	71fb      	strb	r3, [r7, #7]
 8001164:	4613      	mov	r3, r2
 8001166:	71bb      	strb	r3, [r7, #6]
	static const uint8_t address = MCP23017_Address2;
	return MCP23017_IO_ReadReg(address, RegAddr, Data, Length);
 8001168:	4b05      	ldr	r3, [pc, #20]	; (8001180 <MCP23017_IO2_ReadReg+0x28>)
 800116a:	7818      	ldrb	r0, [r3, #0]
 800116c:	79bb      	ldrb	r3, [r7, #6]
 800116e:	79f9      	ldrb	r1, [r7, #7]
 8001170:	683a      	ldr	r2, [r7, #0]
 8001172:	f7ff ff77 	bl	8001064 <MCP23017_IO_ReadReg>
 8001176:	4603      	mov	r3, r0
}
 8001178:	4618      	mov	r0, r3
 800117a:	3708      	adds	r7, #8
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	0800e94b 	.word	0x0800e94b

08001184 <MCP23017_IO3_WriteReg>:
 *@Params: Register to write to, data to write, length of data in bytes
 *@Return: Err if write fails, Ok otherwise
 *@Precondition: I2C Bus must be initialized
 *@Postcondition: Device (w/ Address3) register will be modified
 **************************************//**************************************/
static MCP23017_Status_t MCP23017_IO3_WriteReg(uint8_t RegAddr, uint8_t *Data, uint8_t Length){
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	4603      	mov	r3, r0
 800118c:	6039      	str	r1, [r7, #0]
 800118e:	71fb      	strb	r3, [r7, #7]
 8001190:	4613      	mov	r3, r2
 8001192:	71bb      	strb	r3, [r7, #6]
	static const uint8_t address = MCP23017_Address3;
    return MCP23017_IO_WriteReg(address, RegAddr, Data, Length);
 8001194:	4b05      	ldr	r3, [pc, #20]	; (80011ac <MCP23017_IO3_WriteReg+0x28>)
 8001196:	7818      	ldrb	r0, [r3, #0]
 8001198:	79bb      	ldrb	r3, [r7, #6]
 800119a:	79f9      	ldrb	r1, [r7, #7]
 800119c:	683a      	ldr	r2, [r7, #0]
 800119e:	f7ff ff33 	bl	8001008 <MCP23017_IO_WriteReg>
 80011a2:	4603      	mov	r3, r0
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	3708      	adds	r7, #8
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	0800e94c 	.word	0x0800e94c

080011b0 <MCP23017_IO3_ReadReg>:
 *@Params: Register to read from, data buffer to read into, length of data in bytes
 *@Return: Err if read fails, Ok otherwise
 *@Precondition: I2C Bus must be initialized
 *@Postcondition: Data buffer will contain data from device (w/ Address3) register
 **************************************//**************************************/
static MCP23017_Status_t MCP23017_IO3_ReadReg(uint8_t RegAddr, uint8_t *Data, uint8_t Length){
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	4603      	mov	r3, r0
 80011b8:	6039      	str	r1, [r7, #0]
 80011ba:	71fb      	strb	r3, [r7, #7]
 80011bc:	4613      	mov	r3, r2
 80011be:	71bb      	strb	r3, [r7, #6]
	static const uint8_t address = MCP23017_Address3;
	return MCP23017_IO_ReadReg(address, RegAddr, Data, Length);
 80011c0:	4b05      	ldr	r3, [pc, #20]	; (80011d8 <MCP23017_IO3_ReadReg+0x28>)
 80011c2:	7818      	ldrb	r0, [r3, #0]
 80011c4:	79bb      	ldrb	r3, [r7, #6]
 80011c6:	79f9      	ldrb	r1, [r7, #7]
 80011c8:	683a      	ldr	r2, [r7, #0]
 80011ca:	f7ff ff4b 	bl	8001064 <MCP23017_IO_ReadReg>
 80011ce:	4603      	mov	r3, r0
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	3708      	adds	r7, #8
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	0800e94d 	.word	0x0800e94d

080011dc <MCP23017_IO4_WriteReg>:
 *@Params: Register to write to, data to write, length of data in bytes
 *@Return: Err if write fails, Ok otherwise
 *@Precondition: I2C Bus must be initialized
 *@Postcondition: Device (w/ Address4) register will be modified
 **************************************//**************************************/
static MCP23017_Status_t MCP23017_IO4_WriteReg(uint8_t RegAddr, uint8_t *Data, uint8_t Length){
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	4603      	mov	r3, r0
 80011e4:	6039      	str	r1, [r7, #0]
 80011e6:	71fb      	strb	r3, [r7, #7]
 80011e8:	4613      	mov	r3, r2
 80011ea:	71bb      	strb	r3, [r7, #6]
	static const uint8_t address = MCP23017_Address4;
    return MCP23017_IO_WriteReg(address, RegAddr, Data, Length);
 80011ec:	4b05      	ldr	r3, [pc, #20]	; (8001204 <MCP23017_IO4_WriteReg+0x28>)
 80011ee:	7818      	ldrb	r0, [r3, #0]
 80011f0:	79bb      	ldrb	r3, [r7, #6]
 80011f2:	79f9      	ldrb	r1, [r7, #7]
 80011f4:	683a      	ldr	r2, [r7, #0]
 80011f6:	f7ff ff07 	bl	8001008 <MCP23017_IO_WriteReg>
 80011fa:	4603      	mov	r3, r0
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	3708      	adds	r7, #8
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	0800e94e 	.word	0x0800e94e

08001208 <MCP23017_IO4_ReadReg>:
 *@Params: Register to read from, data buffer to read into, length of data in bytes
 *@Return: Err if read fails, Ok otherwise
 *@Precondition: I2C Bus must be initialized
 *@Postcondition: Data buffer will contain data from device (w/ Address4) register
 **************************************//**************************************/
static MCP23017_Status_t MCP23017_IO4_ReadReg(uint8_t RegAddr, uint8_t *Data, uint8_t Length){
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	4603      	mov	r3, r0
 8001210:	6039      	str	r1, [r7, #0]
 8001212:	71fb      	strb	r3, [r7, #7]
 8001214:	4613      	mov	r3, r2
 8001216:	71bb      	strb	r3, [r7, #6]
	static const uint8_t address = MCP23017_Address4;
	return MCP23017_IO_ReadReg(address, RegAddr, Data, Length);
 8001218:	4b05      	ldr	r3, [pc, #20]	; (8001230 <MCP23017_IO4_ReadReg+0x28>)
 800121a:	7818      	ldrb	r0, [r3, #0]
 800121c:	79bb      	ldrb	r3, [r7, #6]
 800121e:	79f9      	ldrb	r1, [r7, #7]
 8001220:	683a      	ldr	r2, [r7, #0]
 8001222:	f7ff ff1f 	bl	8001064 <MCP23017_IO_ReadReg>
 8001226:	4603      	mov	r3, r0
}
 8001228:	4618      	mov	r0, r3
 800122a:	3708      	adds	r7, #8
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	0800e94f 	.word	0x0800e94f

08001234 <ButtonInit>:
 *@Params: Init struct with settings, Handle to initialized, low level IO driver
 *@Return: None
 *@Precondition: None
 *@Postcondition: Button handle will be initialized and ready to use
 **************************************//**************************************/
void ButtonInit(Button_Init_Struct_t Settings, Button_Handle_t *Button, Button_IO_Drv_t IO){
 8001234:	b082      	sub	sp, #8
 8001236:	b590      	push	{r4, r7, lr}
 8001238:	b085      	sub	sp, #20
 800123a:	af00      	add	r7, sp, #0
 800123c:	f107 0408 	add.w	r4, r7, #8
 8001240:	e884 0003 	stmia.w	r4, {r0, r1}
 8001244:	607a      	str	r2, [r7, #4]
 8001246:	627b      	str	r3, [r7, #36]	; 0x24
	Button->IO_Driver.init   = IO.init;
 8001248:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	609a      	str	r2, [r3, #8]
	Button->IO_Driver.deinit = IO.deinit;
 800124e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	60da      	str	r2, [r3, #12]
	Button->IO_Driver.read   = IO.read;
 8001254:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	611a      	str	r2, [r3, #16]
	Button->IO_Driver.write  = IO.write;
 800125a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	615a      	str	r2, [r3, #20]
	Button->IO_Driver.ioctl  = IO.ioctl;
 8001260:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	619a      	str	r2, [r3, #24]
	Button->IO_Driver.init();
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	689b      	ldr	r3, [r3, #8]
 800126a:	4798      	blx	r3

	Button->ButtonIDNumber = Settings.ButtonIDNumber;
 800126c:	7a3a      	ldrb	r2, [r7, #8]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	701a      	strb	r2, [r3, #0]
	Button->KeyFunction = Settings.KeyFunction;
 8001272:	7a7a      	ldrb	r2, [r7, #9]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	705a      	strb	r2, [r3, #1]
	Button->ModKeyFunction = Settings.ModKeyFunction;
 8001278:	7aba      	ldrb	r2, [r7, #10]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	709a      	strb	r2, [r3, #2]
	Button->MouseFunction = Settings.MouseFunction;
 800127e:	7afa      	ldrb	r2, [r7, #11]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	70da      	strb	r2, [r3, #3]
	Button->State = ButtonUnpressed;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2200      	movs	r2, #0
 8001288:	715a      	strb	r2, [r3, #5]
}
 800128a:	bf00      	nop
 800128c:	3714      	adds	r7, #20
 800128e:	46bd      	mov	sp, r7
 8001290:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001294:	b002      	add	sp, #8
 8001296:	4770      	bx	lr

08001298 <ButtonRead>:
 *@Params: Button handle to read
 *@Return: ButtonChanged if the button changed states, otherwise ButtonUnchanged
 *@Precondition: ButtonHandle should be initialized/
 *@Postcondition: ButtonState in the ButtonHandle will be updated.
 **************************************//**************************************/
ButtonStatus_t ButtonRead(Button_Handle_t *Button){
 8001298:	b580      	push	{r7, lr}
 800129a:	b084      	sub	sp, #16
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
    ButtonState_t Previous_State = Button->State;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	795b      	ldrb	r3, [r3, #5]
 80012a4:	73fb      	strb	r3, [r7, #15]
    Button->State = Button->IO_Driver.read(Button->ButtonIDNumber);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	691b      	ldr	r3, [r3, #16]
 80012aa:	687a      	ldr	r2, [r7, #4]
 80012ac:	7812      	ldrb	r2, [r2, #0]
 80012ae:	4610      	mov	r0, r2
 80012b0:	4798      	blx	r3
 80012b2:	4603      	mov	r3, r0
 80012b4:	461a      	mov	r2, r3
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	715a      	strb	r2, [r3, #5]
    if(Previous_State != Button->State){
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	795b      	ldrb	r3, [r3, #5]
 80012be:	7bfa      	ldrb	r2, [r7, #15]
 80012c0:	429a      	cmp	r2, r3
 80012c2:	d001      	beq.n	80012c8 <ButtonRead+0x30>
    	return ButtonChanged;
 80012c4:	2300      	movs	r3, #0
 80012c6:	e000      	b.n	80012ca <ButtonRead+0x32>
    } else {
    	return ButtonUnchanged;
 80012c8:	2301      	movs	r3, #1
    }
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3710      	adds	r7, #16
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
	...

080012d4 <Button_IO_init>:
 *@Params: None
 *@Return: None
 *@Precondition: None
 *@Postcondition: GPIO, I2C, DMA Peripherals and clocks will be enabled and ready to use
 **************************************//**************************************/
static void Button_IO_init(void){
 80012d4:	b5b0      	push	{r4, r5, r7, lr}
 80012d6:	b08a      	sub	sp, #40	; 0x28
 80012d8:	af06      	add	r7, sp, #24
	const MCP23017_Init_Struct_t InitSettings = {
 80012da:	4b2b      	ldr	r3, [pc, #172]	; (8001388 <Button_IO_init+0xb4>)
 80012dc:	881b      	ldrh	r3, [r3, #0]
 80012de:	803b      	strh	r3, [r7, #0]
 80012e0:	4b29      	ldr	r3, [pc, #164]	; (8001388 <Button_IO_init+0xb4>)
 80012e2:	881b      	ldrh	r3, [r3, #0]
 80012e4:	807b      	strh	r3, [r7, #2]
 80012e6:	4b29      	ldr	r3, [pc, #164]	; (800138c <Button_IO_init+0xb8>)
 80012e8:	881b      	ldrh	r3, [r3, #0]
 80012ea:	80bb      	strh	r3, [r7, #4]
 80012ec:	4b27      	ldr	r3, [pc, #156]	; (800138c <Button_IO_init+0xb8>)
 80012ee:	881b      	ldrh	r3, [r3, #0]
 80012f0:	80fb      	strh	r3, [r7, #6]
 80012f2:	4b26      	ldr	r3, [pc, #152]	; (800138c <Button_IO_init+0xb8>)
 80012f4:	881b      	ldrh	r3, [r3, #0]
 80012f6:	813b      	strh	r3, [r7, #8]
 80012f8:	4b23      	ldr	r3, [pc, #140]	; (8001388 <Button_IO_init+0xb4>)
 80012fa:	881b      	ldrh	r3, [r3, #0]
 80012fc:	817b      	strh	r3, [r7, #10]
 80012fe:	2300      	movs	r3, #0
 8001300:	733b      	strb	r3, [r7, #12]
			.Mode = MCP23017_AllPins,
			.PullUp = MCP23017_AllPins,
			.Polarity = MCP23017_AllPins
	};

	if(initialize_status == ButtonIO_Uninitialized){
 8001302:	4b23      	ldr	r3, [pc, #140]	; (8001390 <Button_IO_init+0xbc>)
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d139      	bne.n	800137e <Button_IO_init+0xaa>
	    MCP23017_Init(InitSettings, &Expander[0], MCP23017_IO1_Drv);
 800130a:	4b22      	ldr	r3, [pc, #136]	; (8001394 <Button_IO_init+0xc0>)
 800130c:	ac01      	add	r4, sp, #4
 800130e:	461d      	mov	r5, r3
 8001310:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001312:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001314:	682b      	ldr	r3, [r5, #0]
 8001316:	6023      	str	r3, [r4, #0]
 8001318:	4b1f      	ldr	r3, [pc, #124]	; (8001398 <Button_IO_init+0xc4>)
 800131a:	9300      	str	r3, [sp, #0]
 800131c:	463b      	mov	r3, r7
 800131e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001320:	f7ff fd1a 	bl	8000d58 <MCP23017_Init>
	    MCP23017_Init(InitSettings, &Expander[1], MCP23017_IO2_Drv);
 8001324:	4b1d      	ldr	r3, [pc, #116]	; (800139c <Button_IO_init+0xc8>)
 8001326:	ac01      	add	r4, sp, #4
 8001328:	461d      	mov	r5, r3
 800132a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800132c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800132e:	682b      	ldr	r3, [r5, #0]
 8001330:	6023      	str	r3, [r4, #0]
 8001332:	4b1b      	ldr	r3, [pc, #108]	; (80013a0 <Button_IO_init+0xcc>)
 8001334:	9300      	str	r3, [sp, #0]
 8001336:	463b      	mov	r3, r7
 8001338:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800133a:	f7ff fd0d 	bl	8000d58 <MCP23017_Init>
	    MCP23017_Init(InitSettings, &Expander[2], MCP23017_IO3_Drv);
 800133e:	4b19      	ldr	r3, [pc, #100]	; (80013a4 <Button_IO_init+0xd0>)
 8001340:	ac01      	add	r4, sp, #4
 8001342:	461d      	mov	r5, r3
 8001344:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001346:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001348:	682b      	ldr	r3, [r5, #0]
 800134a:	6023      	str	r3, [r4, #0]
 800134c:	4b16      	ldr	r3, [pc, #88]	; (80013a8 <Button_IO_init+0xd4>)
 800134e:	9300      	str	r3, [sp, #0]
 8001350:	463b      	mov	r3, r7
 8001352:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001354:	f7ff fd00 	bl	8000d58 <MCP23017_Init>
	    MCP23017_Init(InitSettings, &Expander[3], MCP23017_IO4_Drv);
 8001358:	4b14      	ldr	r3, [pc, #80]	; (80013ac <Button_IO_init+0xd8>)
 800135a:	ac01      	add	r4, sp, #4
 800135c:	461d      	mov	r5, r3
 800135e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001360:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001362:	682b      	ldr	r3, [r5, #0]
 8001364:	6023      	str	r3, [r4, #0]
 8001366:	4b12      	ldr	r3, [pc, #72]	; (80013b0 <Button_IO_init+0xdc>)
 8001368:	9300      	str	r3, [sp, #0]
 800136a:	463b      	mov	r3, r7
 800136c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800136e:	f7ff fcf3 	bl	8000d58 <MCP23017_Init>
	    MCP23017_ReadPins(&Expander[0]); //Start the Button-Read-DMA Engine
 8001372:	4809      	ldr	r0, [pc, #36]	; (8001398 <Button_IO_init+0xc4>)
 8001374:	f7ff fe1a 	bl	8000fac <MCP23017_ReadPins>
	    initialize_status = ButtonIO_Initialized;
 8001378:	4b05      	ldr	r3, [pc, #20]	; (8001390 <Button_IO_init+0xbc>)
 800137a:	2201      	movs	r2, #1
 800137c:	701a      	strb	r2, [r3, #0]
	}
}
 800137e:	bf00      	nop
 8001380:	3710      	adds	r7, #16
 8001382:	46bd      	mov	sp, r7
 8001384:	bdb0      	pop	{r4, r5, r7, pc}
 8001386:	bf00      	nop
 8001388:	0800e8f2 	.word	0x0800e8f2
 800138c:	0800e8f4 	.word	0x0800e8f4
 8001390:	200001b4 	.word	0x200001b4
 8001394:	0800e8f8 	.word	0x0800e8f8
 8001398:	200001b8 	.word	0x200001b8
 800139c:	0800e90c 	.word	0x0800e90c
 80013a0:	200001d0 	.word	0x200001d0
 80013a4:	0800e920 	.word	0x0800e920
 80013a8:	200001e8 	.word	0x200001e8
 80013ac:	0800e934 	.word	0x0800e934
 80013b0:	20000200 	.word	0x20000200

080013b4 <Button_IO_deinit>:

static void Button_IO_deinit(void){
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0

	if(initialize_status == ButtonIO_Initialized){
 80013b8:	4b0a      	ldr	r3, [pc, #40]	; (80013e4 <Button_IO_deinit+0x30>)
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	2b01      	cmp	r3, #1
 80013be:	d10e      	bne.n	80013de <Button_IO_deinit+0x2a>
	    MCP23017_DeInit(&Expander[0]);
 80013c0:	4809      	ldr	r0, [pc, #36]	; (80013e8 <Button_IO_deinit+0x34>)
 80013c2:	f7ff fd57 	bl	8000e74 <MCP23017_DeInit>
	    MCP23017_DeInit(&Expander[1]);
 80013c6:	4809      	ldr	r0, [pc, #36]	; (80013ec <Button_IO_deinit+0x38>)
 80013c8:	f7ff fd54 	bl	8000e74 <MCP23017_DeInit>
	    MCP23017_DeInit(&Expander[2]);
 80013cc:	4808      	ldr	r0, [pc, #32]	; (80013f0 <Button_IO_deinit+0x3c>)
 80013ce:	f7ff fd51 	bl	8000e74 <MCP23017_DeInit>
	    MCP23017_DeInit(&Expander[3]);
 80013d2:	4808      	ldr	r0, [pc, #32]	; (80013f4 <Button_IO_deinit+0x40>)
 80013d4:	f7ff fd4e 	bl	8000e74 <MCP23017_DeInit>
	    initialize_status = ButtonIO_Uninitialized;
 80013d8:	4b02      	ldr	r3, [pc, #8]	; (80013e4 <Button_IO_deinit+0x30>)
 80013da:	2200      	movs	r2, #0
 80013dc:	701a      	strb	r2, [r3, #0]
	}
}
 80013de:	bf00      	nop
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	200001b4 	.word	0x200001b4
 80013e8:	200001b8 	.word	0x200001b8
 80013ec:	200001d0 	.word	0x200001d0
 80013f0:	200001e8 	.word	0x200001e8
 80013f4:	20000200 	.word	0x20000200

080013f8 <Button_IO_Read>:
 *@Params: Number of the button to read
 *@Return: ButtonUnpressed if the button is not pressed, ButtonPressed if it is pressed.
 *@Precondition: Button IO should be initialized
 *@Postcondition: None
 **************************************//**************************************/
static ButtonState_t Button_IO_Read(uint8_t ButtonNumber){
 80013f8:	b480      	push	{r7}
 80013fa:	b085      	sub	sp, #20
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	4603      	mov	r3, r0
 8001400:	71fb      	strb	r3, [r7, #7]
	uint8_t ExpanderNumber = ButtonNumber / PINS_PER_EXPANDER;
 8001402:	79fb      	ldrb	r3, [r7, #7]
 8001404:	091b      	lsrs	r3, r3, #4
 8001406:	73fb      	strb	r3, [r7, #15]
	if(ExpanderNumber >= NUMBER_OF_IO_EXPANDERS){
 8001408:	7bfb      	ldrb	r3, [r7, #15]
 800140a:	2b03      	cmp	r3, #3
 800140c:	d901      	bls.n	8001412 <Button_IO_Read+0x1a>
		return ButtonUnpressed;
 800140e:	2300      	movs	r3, #0
 8001410:	e018      	b.n	8001444 <Button_IO_Read+0x4c>
	}

    uint16_t ButtonStates = Expander[ExpanderNumber].PinStates;
 8001412:	7bfa      	ldrb	r2, [r7, #15]
 8001414:	490e      	ldr	r1, [pc, #56]	; (8001450 <Button_IO_Read+0x58>)
 8001416:	4613      	mov	r3, r2
 8001418:	005b      	lsls	r3, r3, #1
 800141a:	4413      	add	r3, r2
 800141c:	00db      	lsls	r3, r3, #3
 800141e:	440b      	add	r3, r1
 8001420:	881b      	ldrh	r3, [r3, #0]
 8001422:	81bb      	strh	r3, [r7, #12]
    uint16_t ButtonPosition = ButtonNumber % PINS_PER_EXPANDER;
 8001424:	79fb      	ldrb	r3, [r7, #7]
 8001426:	b29b      	uxth	r3, r3
 8001428:	f003 030f 	and.w	r3, r3, #15
 800142c:	817b      	strh	r3, [r7, #10]
    if((ButtonStates & (1 << ButtonPosition)) != 0){
 800142e:	89ba      	ldrh	r2, [r7, #12]
 8001430:	897b      	ldrh	r3, [r7, #10]
 8001432:	fa42 f303 	asr.w	r3, r2, r3
 8001436:	f003 0301 	and.w	r3, r3, #1
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <Button_IO_Read+0x4a>
    	return ButtonPressed;
 800143e:	2301      	movs	r3, #1
 8001440:	e000      	b.n	8001444 <Button_IO_Read+0x4c>
    } else {
    	return ButtonUnpressed;
 8001442:	2300      	movs	r3, #0
    }
}
 8001444:	4618      	mov	r0, r3
 8001446:	3714      	adds	r7, #20
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr
 8001450:	200001b8 	.word	0x200001b8

08001454 <ButtonIRQCallback>:
 *@Params: I2C Handle used to communicate with MCP23017 IC
 *@Return: None
 *@Precondition: Button IO should be initialized.
 *@Postcondition: MCP23017 Pin states will be updated.
 **************************************//**************************************/
void ButtonIRQCallback(){
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
//void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c){
	static uint8_t counter = 1;
	MCP23017_ReadPins(&Expander[counter % NUMBER_OF_IO_EXPANDERS]);
 8001458:	4b0a      	ldr	r3, [pc, #40]	; (8001484 <ButtonIRQCallback+0x30>)
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	f003 0203 	and.w	r2, r3, #3
 8001460:	4613      	mov	r3, r2
 8001462:	005b      	lsls	r3, r3, #1
 8001464:	4413      	add	r3, r2
 8001466:	00db      	lsls	r3, r3, #3
 8001468:	4a07      	ldr	r2, [pc, #28]	; (8001488 <ButtonIRQCallback+0x34>)
 800146a:	4413      	add	r3, r2
 800146c:	4618      	mov	r0, r3
 800146e:	f7ff fd9d 	bl	8000fac <MCP23017_ReadPins>
	counter++;
 8001472:	4b04      	ldr	r3, [pc, #16]	; (8001484 <ButtonIRQCallback+0x30>)
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	3301      	adds	r3, #1
 8001478:	b2da      	uxtb	r2, r3
 800147a:	4b02      	ldr	r3, [pc, #8]	; (8001484 <ButtonIRQCallback+0x30>)
 800147c:	701a      	strb	r2, [r3, #0]

}
 800147e:	bf00      	nop
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	20000028 	.word	0x20000028
 8001488:	200001b8 	.word	0x200001b8

0800148c <JoystickInit>:
 *@Params: Init struct with desired user settings, Joystick handle to initialize, Low level IO Driver
 *@Return: None
 *@Precondition: None
 *@Postcondition: Joystick handle and low level hardware will be initialized and ready to use.
 **************************************//**************************************/
void JoystickInit(Joystick_Init_Struct_t Settings, Joystick_Handle_t *Joystick, Joystick_IO_Drv_t IO){
 800148c:	b084      	sub	sp, #16
 800148e:	b580      	push	{r7, lr}
 8001490:	af00      	add	r7, sp, #0
 8001492:	f107 0c08 	add.w	ip, r7, #8
 8001496:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	Joystick->IO_Driver.init = IO.init;
 800149a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800149c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800149e:	62da      	str	r2, [r3, #44]	; 0x2c
	Joystick->IO_Driver.deinit = IO.deinit;
 80014a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80014a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014a4:	631a      	str	r2, [r3, #48]	; 0x30
	Joystick->IO_Driver.read = IO.read;
 80014a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80014a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014aa:	635a      	str	r2, [r3, #52]	; 0x34
	Joystick->IO_Driver.write = IO.write;
 80014ac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80014ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014b0:	639a      	str	r2, [r3, #56]	; 0x38
	Joystick->IO_Driver.ioctl = IO.ioctl;
 80014b2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80014b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014b6:	63da      	str	r2, [r3, #60]	; 0x3c
	Joystick->IO_Driver.init();
 80014b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014bc:	4798      	blx	r3

	Joystick->DeadZone          = Settings.DeadZone;
 80014be:	893a      	ldrh	r2, [r7, #8]
 80014c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014c2:	80da      	strh	r2, [r3, #6]
	Joystick->UpFunction        = Settings.UpFunction;
 80014c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014c6:	3311      	adds	r3, #17
 80014c8:	f107 0213 	add.w	r2, r7, #19
 80014cc:	6812      	ldr	r2, [r2, #0]
 80014ce:	601a      	str	r2, [r3, #0]
	Joystick->LeftFunction      = Settings.LeftFunction;
 80014d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014d2:	3319      	adds	r3, #25
 80014d4:	f107 021b 	add.w	r2, r7, #27
 80014d8:	6812      	ldr	r2, [r2, #0]
 80014da:	601a      	str	r2, [r3, #0]
	Joystick->RightFunction     = Settings.RightFunction;
 80014dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014de:	3309      	adds	r3, #9
 80014e0:	f107 020b 	add.w	r2, r7, #11
 80014e4:	6812      	ldr	r2, [r2, #0]
 80014e6:	601a      	str	r2, [r3, #0]
	Joystick->UpRightFunction   = Settings.UpRightFunction;
 80014e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014ea:	330d      	adds	r3, #13
 80014ec:	f107 020f 	add.w	r2, r7, #15
 80014f0:	6812      	ldr	r2, [r2, #0]
 80014f2:	601a      	str	r2, [r3, #0]
	Joystick->UpLeftFunction    = Settings.UpLeftFunction;
 80014f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014f6:	3315      	adds	r3, #21
 80014f8:	f107 0217 	add.w	r2, r7, #23
 80014fc:	6812      	ldr	r2, [r2, #0]
 80014fe:	601a      	str	r2, [r3, #0]
	Joystick->DownFunction      = Settings.DownFunction;
 8001500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001502:	3321      	adds	r3, #33	; 0x21
 8001504:	f107 0223 	add.w	r2, r7, #35	; 0x23
 8001508:	6812      	ldr	r2, [r2, #0]
 800150a:	601a      	str	r2, [r3, #0]
	Joystick->DownLeftFunction  = Settings.DownLeftFunction;
 800150c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800150e:	331d      	adds	r3, #29
 8001510:	f107 021f 	add.w	r2, r7, #31
 8001514:	6812      	ldr	r2, [r2, #0]
 8001516:	601a      	str	r2, [r3, #0]
	Joystick->DownRightFunction = Settings.DownRightFunction;
 8001518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800151a:	3325      	adds	r3, #37	; 0x25
 800151c:	f107 0227 	add.w	r2, r7, #39	; 0x27
 8001520:	6812      	ldr	r2, [r2, #0]
 8001522:	601a      	str	r2, [r3, #0]
	Joystick->Mode = Settings.Mode;
 8001524:	7aba      	ldrb	r2, [r7, #10]
 8001526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001528:	721a      	strb	r2, [r3, #8]
	Joystick->Position = JoystickNeutral;
 800152a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800152c:	2200      	movs	r2, #0
 800152e:	711a      	strb	r2, [r3, #4]
	Joystick->X_PosRaw = 0;
 8001530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001532:	2200      	movs	r2, #0
 8001534:	801a      	strh	r2, [r3, #0]
	Joystick->Y_PosRaw = 0;
 8001536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001538:	2200      	movs	r2, #0
 800153a:	805a      	strh	r2, [r3, #2]
}
 800153c:	bf00      	nop
 800153e:	46bd      	mov	sp, r7
 8001540:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001544:	b004      	add	sp, #16
 8001546:	4770      	bx	lr

08001548 <JoystickRead>:
 *@Params: Joystick Handle
 *@Return: JoystickChanged if previous position != new position. Uses XPosRaw/YPosRaw in analog mode
 *@Precondition: JoystickHandle must be initialized
 *@Postcondition: Joystick XPosRaw/YPosRaw/State will be updated.
 **************************************//**************************************/
JoystickStatus_t JoystickRead(Joystick_Handle_t *Joystick){
 8001548:	b580      	push	{r7, lr}
 800154a:	b084      	sub	sp, #16
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
	JoystickState_t PreviousState = Joystick->Position;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	791b      	ldrb	r3, [r3, #4]
 8001554:	73fb      	strb	r3, [r7, #15]
	int16_t PreviousX = Joystick->X_PosRaw;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	881b      	ldrh	r3, [r3, #0]
 800155a:	81bb      	strh	r3, [r7, #12]
	int16_t PreviousY = Joystick->Y_PosRaw;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	885b      	ldrh	r3, [r3, #2]
 8001560:	817b      	strh	r3, [r7, #10]
	Joystick->Position = Joystick->IO_Driver.read(Joystick->DeadZone, &Joystick->X_PosRaw, &Joystick->Y_PosRaw);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001566:	687a      	ldr	r2, [r7, #4]
 8001568:	88d0      	ldrh	r0, [r2, #6]
 800156a:	6879      	ldr	r1, [r7, #4]
 800156c:	687a      	ldr	r2, [r7, #4]
 800156e:	3202      	adds	r2, #2
 8001570:	4798      	blx	r3
 8001572:	4603      	mov	r3, r0
 8001574:	461a      	mov	r2, r3
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	711a      	strb	r2, [r3, #4]

	if(Joystick->Mode == Joystick4Way || Joystick->Mode == Joystick8Way){
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	7a1b      	ldrb	r3, [r3, #8]
 800157e:	2b01      	cmp	r3, #1
 8001580:	d003      	beq.n	800158a <JoystickRead+0x42>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	7a1b      	ldrb	r3, [r3, #8]
 8001586:	2b02      	cmp	r3, #2
 8001588:	d108      	bne.n	800159c <JoystickRead+0x54>
	    if(Joystick->Position != PreviousState){
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	791b      	ldrb	r3, [r3, #4]
 800158e:	7bfa      	ldrb	r2, [r7, #15]
 8001590:	429a      	cmp	r2, r3
 8001592:	d001      	beq.n	8001598 <JoystickRead+0x50>
		    return JoystickChanged;
 8001594:	2300      	movs	r3, #0
 8001596:	e012      	b.n	80015be <JoystickRead+0x76>
	    } else {
		    return JoystickUnchanged;
 8001598:	2301      	movs	r3, #1
 800159a:	e010      	b.n	80015be <JoystickRead+0x76>
	    }
	}

	if(Joystick->X_PosRaw != PreviousX || Joystick->Y_PosRaw != PreviousY){
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015a2:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80015a6:	429a      	cmp	r2, r3
 80015a8:	d106      	bne.n	80015b8 <JoystickRead+0x70>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80015b0:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80015b4:	429a      	cmp	r2, r3
 80015b6:	d001      	beq.n	80015bc <JoystickRead+0x74>
		return JoystickChanged;
 80015b8:	2300      	movs	r3, #0
 80015ba:	e000      	b.n	80015be <JoystickRead+0x76>
	} else {
		return JoystickUnchanged;
 80015bc:	2301      	movs	r3, #1
	}
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3710      	adds	r7, #16
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
	...

080015c8 <JoystickIOInit>:
 *@Params: None
 *@Return: None
 *@Precondition: None
 *@Postcondition: Low level hardware will be initialized. (DMA, ADC, GPIO)
 **************************************//**************************************/
static void JoystickIOInit(){
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
	ADC_GPIO_Init();
 80015cc:	f000 fc00 	bl	8001dd0 <ADC_GPIO_Init>
	ADC_DMA_Init();
 80015d0:	f000 fb8c 	bl	8001cec <ADC_DMA_Init>
	ADC1_Init();
 80015d4:	f000 fb0a 	bl	8001bec <ADC1_Init>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buffer, 2);
 80015d8:	2202      	movs	r2, #2
 80015da:	4903      	ldr	r1, [pc, #12]	; (80015e8 <JoystickIOInit+0x20>)
 80015dc:	4803      	ldr	r0, [pc, #12]	; (80015ec <JoystickIOInit+0x24>)
 80015de:	f001 fdcf 	bl	8003180 <HAL_ADC_Start_DMA>
}
 80015e2:	bf00      	nop
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	2000002c 	.word	0x2000002c
 80015ec:	20000378 	.word	0x20000378

080015f0 <JoystickIODeInit>:
 *@Params: None
 *@Return: None
 *@Precondition: None
 *@Postcondition: DMA transfers from Joystick will be stopped.
 **************************************//**************************************/
static void JoystickIODeInit(void){
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
   HAL_ADC_Stop_DMA(&hadc1);
 80015f4:	4805      	ldr	r0, [pc, #20]	; (800160c <JoystickIODeInit+0x1c>)
 80015f6:	f001 feb3 	bl	8003360 <HAL_ADC_Stop_DMA>
   HAL_NVIC_DisableIRQ(DMA2_Stream0_IRQn);
 80015fa:	2038      	movs	r0, #56	; 0x38
 80015fc:	f002 fb1f 	bl	8003c3e <HAL_NVIC_DisableIRQ>
   HAL_NVIC_ClearPendingIRQ(DMA2_Stream0_IRQn);
 8001600:	2038      	movs	r0, #56	; 0x38
 8001602:	f002 fb36 	bl	8003c72 <HAL_NVIC_ClearPendingIRQ>
}
 8001606:	bf00      	nop
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	20000378 	.word	0x20000378

08001610 <JoystickIORead>:
 *@Params: Joystick Deadzone, X Position buffer, Y Position buffer
 *@Return: Position of the joystick
 *@Precondition: Joystick IO should be initialized
 *@Postcondition: X_Pos and Y_Pos will contain raw joystick value.
 **************************************//**************************************/
static JoystickState_t JoystickIORead(uint16_t Deadzone, int16_t *X_Pos, int16_t *Y_Pos){
 8001610:	b480      	push	{r7}
 8001612:	b087      	sub	sp, #28
 8001614:	af00      	add	r7, sp, #0
 8001616:	4603      	mov	r3, r0
 8001618:	60b9      	str	r1, [r7, #8]
 800161a:	607a      	str	r2, [r7, #4]
 800161c:	81fb      	strh	r3, [r7, #14]
	//Handle Deadzone values that are too large.
    if(Deadzone > INT16_MAX - 1){
 800161e:	89fb      	ldrh	r3, [r7, #14]
 8001620:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8001624:	4293      	cmp	r3, r2
 8001626:	d902      	bls.n	800162e <JoystickIORead+0x1e>
    	Deadzone = INT16_MAX - 1;
 8001628:	f647 73fe 	movw	r3, #32766	; 0x7ffe
 800162c:	81fb      	strh	r3, [r7, #14]
    }

    //Calculate X Position
	int16_t temp = adc_buffer[ADC_X_INDEX] - 2048;
 800162e:	2301      	movs	r3, #1
 8001630:	461a      	mov	r2, r3
 8001632:	4b66      	ldr	r3, [pc, #408]	; (80017cc <JoystickIORead+0x1bc>)
 8001634:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001638:	b21b      	sxth	r3, r3
 800163a:	b29b      	uxth	r3, r3
 800163c:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8001640:	b29b      	uxth	r3, r3
 8001642:	82fb      	strh	r3, [r7, #22]
	if(temp > ADC_UPPER_LIMIT){
 8001644:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001648:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800164c:	4293      	cmp	r3, r2
 800164e:	dd03      	ble.n	8001658 <JoystickIORead+0x48>
		temp = ADC_UPPER_LIMIT;
 8001650:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001654:	82fb      	strh	r3, [r7, #22]
 8001656:	e007      	b.n	8001668 <JoystickIORead+0x58>
	} else if (temp < ADC_LOWER_LIMIT){
 8001658:	4a5d      	ldr	r2, [pc, #372]	; (80017d0 <JoystickIORead+0x1c0>)
 800165a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800165e:	4293      	cmp	r3, r2
 8001660:	da02      	bge.n	8001668 <JoystickIORead+0x58>
		temp = ADC_LOWER_LIMIT;
 8001662:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001666:	82fb      	strh	r3, [r7, #22]
	}
	temp = temp * 16; //convert to 16 bit number
 8001668:	8afb      	ldrh	r3, [r7, #22]
 800166a:	011b      	lsls	r3, r3, #4
 800166c:	b29b      	uxth	r3, r3
 800166e:	82fb      	strh	r3, [r7, #22]
	if(temp > Deadzone || temp < -(int16_t)Deadzone){
 8001670:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001674:	89fb      	ldrh	r3, [r7, #14]
 8001676:	429a      	cmp	r2, r3
 8001678:	dc06      	bgt.n	8001688 <JoystickIORead+0x78>
 800167a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800167e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001682:	425b      	negs	r3, r3
 8001684:	429a      	cmp	r2, r3
 8001686:	da03      	bge.n	8001690 <JoystickIORead+0x80>
	    *X_Pos = temp;
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	8afa      	ldrh	r2, [r7, #22]
 800168c:	801a      	strh	r2, [r3, #0]
 800168e:	e002      	b.n	8001696 <JoystickIORead+0x86>
	} else {
        *X_Pos = 0;
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	2200      	movs	r2, #0
 8001694:	801a      	strh	r2, [r3, #0]
	}

	//Calculate Y Position
	temp = adc_buffer[ADC_Y_INDEX] - 2048;
 8001696:	2300      	movs	r3, #0
 8001698:	461a      	mov	r2, r3
 800169a:	4b4c      	ldr	r3, [pc, #304]	; (80017cc <JoystickIORead+0x1bc>)
 800169c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80016a0:	b21b      	sxth	r3, r3
 80016a2:	b29b      	uxth	r3, r3
 80016a4:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80016a8:	b29b      	uxth	r3, r3
 80016aa:	82fb      	strh	r3, [r7, #22]
	if(temp > ADC_UPPER_LIMIT){
 80016ac:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80016b0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80016b4:	4293      	cmp	r3, r2
 80016b6:	dd03      	ble.n	80016c0 <JoystickIORead+0xb0>
		temp = ADC_UPPER_LIMIT;
 80016b8:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80016bc:	82fb      	strh	r3, [r7, #22]
 80016be:	e007      	b.n	80016d0 <JoystickIORead+0xc0>
	} else if (temp < ADC_LOWER_LIMIT){
 80016c0:	4a43      	ldr	r2, [pc, #268]	; (80017d0 <JoystickIORead+0x1c0>)
 80016c2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80016c6:	4293      	cmp	r3, r2
 80016c8:	da02      	bge.n	80016d0 <JoystickIORead+0xc0>
		temp = ADC_LOWER_LIMIT;
 80016ca:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80016ce:	82fb      	strh	r3, [r7, #22]
	}
	temp = temp * 16; //convert to 16 bit number
 80016d0:	8afb      	ldrh	r3, [r7, #22]
 80016d2:	011b      	lsls	r3, r3, #4
 80016d4:	b29b      	uxth	r3, r3
 80016d6:	82fb      	strh	r3, [r7, #22]
	if(temp > Deadzone || temp < -(int16_t)Deadzone){
 80016d8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80016dc:	89fb      	ldrh	r3, [r7, #14]
 80016de:	429a      	cmp	r2, r3
 80016e0:	dc06      	bgt.n	80016f0 <JoystickIORead+0xe0>
 80016e2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80016e6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80016ea:	425b      	negs	r3, r3
 80016ec:	429a      	cmp	r2, r3
 80016ee:	da03      	bge.n	80016f8 <JoystickIORead+0xe8>
	    *Y_Pos = temp;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	8afa      	ldrh	r2, [r7, #22]
 80016f4:	801a      	strh	r2, [r3, #0]
 80016f6:	e002      	b.n	80016fe <JoystickIORead+0xee>
	} else {
        *Y_Pos = 0;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2200      	movs	r2, #0
 80016fc:	801a      	strh	r2, [r3, #0]
	}

	if(*X_Pos == 0 && *Y_Pos == 0){
 80016fe:	68bb      	ldr	r3, [r7, #8]
 8001700:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d106      	bne.n	8001716 <JoystickIORead+0x106>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d101      	bne.n	8001716 <JoystickIORead+0x106>
		return JoystickNeutral;
 8001712:	2300      	movs	r3, #0
 8001714:	e054      	b.n	80017c0 <JoystickIORead+0x1b0>
	} else if(*X_Pos > 0 && *Y_Pos == 0){
 8001716:	68bb      	ldr	r3, [r7, #8]
 8001718:	f9b3 3000 	ldrsh.w	r3, [r3]
 800171c:	2b00      	cmp	r3, #0
 800171e:	dd06      	ble.n	800172e <JoystickIORead+0x11e>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d101      	bne.n	800172e <JoystickIORead+0x11e>
		return Joystick_Right;
 800172a:	2301      	movs	r3, #1
 800172c:	e048      	b.n	80017c0 <JoystickIORead+0x1b0>

	} else if(*X_Pos > 0 && *Y_Pos > 0){
 800172e:	68bb      	ldr	r3, [r7, #8]
 8001730:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001734:	2b00      	cmp	r3, #0
 8001736:	dd06      	ble.n	8001746 <JoystickIORead+0x136>
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800173e:	2b00      	cmp	r3, #0
 8001740:	dd01      	ble.n	8001746 <JoystickIORead+0x136>
		return Joystick_UpRight;
 8001742:	2302      	movs	r3, #2
 8001744:	e03c      	b.n	80017c0 <JoystickIORead+0x1b0>

	} else if(*X_Pos == 0 && *Y_Pos > 0){
 8001746:	68bb      	ldr	r3, [r7, #8]
 8001748:	f9b3 3000 	ldrsh.w	r3, [r3]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d106      	bne.n	800175e <JoystickIORead+0x14e>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001756:	2b00      	cmp	r3, #0
 8001758:	dd01      	ble.n	800175e <JoystickIORead+0x14e>
		return Joystick_Up;
 800175a:	2303      	movs	r3, #3
 800175c:	e030      	b.n	80017c0 <JoystickIORead+0x1b0>

	} else if(*X_Pos < 0 && *Y_Pos > 0){
 800175e:	68bb      	ldr	r3, [r7, #8]
 8001760:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001764:	2b00      	cmp	r3, #0
 8001766:	da06      	bge.n	8001776 <JoystickIORead+0x166>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800176e:	2b00      	cmp	r3, #0
 8001770:	dd01      	ble.n	8001776 <JoystickIORead+0x166>
		return Joystick_UpLeft;
 8001772:	2304      	movs	r3, #4
 8001774:	e024      	b.n	80017c0 <JoystickIORead+0x1b0>

	} else if(*X_Pos < 0 && *Y_Pos == 0){
 8001776:	68bb      	ldr	r3, [r7, #8]
 8001778:	f9b3 3000 	ldrsh.w	r3, [r3]
 800177c:	2b00      	cmp	r3, #0
 800177e:	da06      	bge.n	800178e <JoystickIORead+0x17e>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d101      	bne.n	800178e <JoystickIORead+0x17e>
		return Joystick_Left;
 800178a:	2305      	movs	r3, #5
 800178c:	e018      	b.n	80017c0 <JoystickIORead+0x1b0>

	} else if(*X_Pos < 0 && *Y_Pos < 0){
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001794:	2b00      	cmp	r3, #0
 8001796:	da06      	bge.n	80017a6 <JoystickIORead+0x196>
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	da01      	bge.n	80017a6 <JoystickIORead+0x196>
		return Joystick_DownLeft;
 80017a2:	2306      	movs	r3, #6
 80017a4:	e00c      	b.n	80017c0 <JoystickIORead+0x1b0>

	} else if(*X_Pos == 0 && *Y_Pos < 0){
 80017a6:	68bb      	ldr	r3, [r7, #8]
 80017a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d106      	bne.n	80017be <JoystickIORead+0x1ae>
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	da01      	bge.n	80017be <JoystickIORead+0x1ae>
		return Joystick_Down;
 80017ba:	2307      	movs	r3, #7
 80017bc:	e000      	b.n	80017c0 <JoystickIORead+0x1b0>
	}
	else{
		return Joystick_DownRight;
 80017be:	2308      	movs	r3, #8
	}

}
 80017c0:	4618      	mov	r0, r3
 80017c2:	371c      	adds	r7, #28
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr
 80017cc:	2000002c 	.word	0x2000002c
 80017d0:	fffff800 	.word	0xfffff800

080017d4 <SerialLEDInit>:
 *  Created on: May 22, 2022
 *      Author: evanl
 */
#include "SerialLED.h"

void SerialLEDInit(SerialLED_InitStruct_t Settings, SerialLED_Handle_t *LED, SerialLED_IO_Drv_t IO){
 80017d4:	b082      	sub	sp, #8
 80017d6:	b5b0      	push	{r4, r5, r7, lr}
 80017d8:	b084      	sub	sp, #16
 80017da:	af00      	add	r7, sp, #0
 80017dc:	f107 0408 	add.w	r4, r7, #8
 80017e0:	e884 0003 	stmia.w	r4, {r0, r1}
 80017e4:	607a      	str	r2, [r7, #4]
 80017e6:	627b      	str	r3, [r7, #36]	; 0x24
    LED->IO_Driver = IO;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	f103 0408 	add.w	r4, r3, #8
 80017ee:	f107 0524 	add.w	r5, r7, #36	; 0x24
 80017f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017f6:	682b      	ldr	r3, [r5, #0]
 80017f8:	6023      	str	r3, [r4, #0]
    LED->Address = Settings.address;
 80017fa:	893a      	ldrh	r2, [r7, #8]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	801a      	strh	r2, [r3, #0]
    LED->red = Settings.red;
 8001800:	7afa      	ldrb	r2, [r7, #11]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	70da      	strb	r2, [r3, #3]
    LED->green = Settings.green;
 8001806:	7aba      	ldrb	r2, [r7, #10]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	709a      	strb	r2, [r3, #2]
    LED->blue = Settings.blue;
 800180c:	7b3a      	ldrb	r2, [r7, #12]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	711a      	strb	r2, [r3, #4]
    LED->IO_Driver.init();
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	4798      	blx	r3
    LED->IO_Driver.write(LED->Address, LED->red, LED->green, LED->blue);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	695c      	ldr	r4, [r3, #20]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	8818      	ldrh	r0, [r3, #0]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	78d9      	ldrb	r1, [r3, #3]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	789a      	ldrb	r2, [r3, #2]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	791b      	ldrb	r3, [r3, #4]
 800182c:	47a0      	blx	r4
}
 800182e:	bf00      	nop
 8001830:	3710      	adds	r7, #16
 8001832:	46bd      	mov	sp, r7
 8001834:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001838:	b002      	add	sp, #8
 800183a:	4770      	bx	lr

0800183c <SerialLED_IO_Init>:
//static const uint8_t TIM_PERIOD = 119;     //1.25uS with 96MHz clock
static const uint8_t ZERO_DUTY_CYCLE = 29; //.3uS
static const uint8_t ONE_DUTY_CYCLE = 58;  //.6uS
static const uint8_t RESET_DUTY_CYCLE = 0;

static void SerialLED_IO_Init(void){
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
	//ensure reset signal is 0
	for(uint32_t i = NUMBER_OF_LEDS * BITS_PER_LED; i < LED_DMA_BUFFER_LENGTH; i++){
 8001842:	2360      	movs	r3, #96	; 0x60
 8001844:	607b      	str	r3, [r7, #4]
 8001846:	e008      	b.n	800185a <SerialLED_IO_Init+0x1e>
		LED_DMA_BUFFER[i] = RESET_DUTY_CYCLE;
 8001848:	2300      	movs	r3, #0
 800184a:	b299      	uxth	r1, r3
 800184c:	4a0d      	ldr	r2, [pc, #52]	; (8001884 <SerialLED_IO_Init+0x48>)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(uint32_t i = NUMBER_OF_LEDS * BITS_PER_LED; i < LED_DMA_BUFFER_LENGTH; i++){
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	3301      	adds	r3, #1
 8001858:	607b      	str	r3, [r7, #4]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2b9f      	cmp	r3, #159	; 0x9f
 800185e:	d9f3      	bls.n	8001848 <SerialLED_IO_Init+0xc>
	}
	TIM3_GPIO_Init();
 8001860:	f000 fad0 	bl	8001e04 <TIM3_GPIO_Init>
	TIM_DMA_Init();
 8001864:	f000 fa5e 	bl	8001d24 <TIM_DMA_Init>
    if(initialize_status == LED_uninitialized){
 8001868:	4b07      	ldr	r3, [pc, #28]	; (8001888 <SerialLED_IO_Init+0x4c>)
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d104      	bne.n	800187a <SerialLED_IO_Init+0x3e>
    	TIM3_Init();
 8001870:	f001 fb0c 	bl	8002e8c <TIM3_Init>
	    initialize_status = LED_initialized;
 8001874:	4b04      	ldr	r3, [pc, #16]	; (8001888 <SerialLED_IO_Init+0x4c>)
 8001876:	2201      	movs	r2, #1
 8001878:	701a      	strb	r2, [r3, #0]
    }

}
 800187a:	bf00      	nop
 800187c:	3708      	adds	r7, #8
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	20000218 	.word	0x20000218
 8001888:	20000358 	.word	0x20000358

0800188c <SerialLED_IO_DeInit>:

static void SerialLED_IO_DeInit(void){
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop_DMA(&htim3, TIM_CHANNEL_1);
 8001890:	2100      	movs	r1, #0
 8001892:	4802      	ldr	r0, [pc, #8]	; (800189c <SerialLED_IO_DeInit+0x10>)
 8001894:	f006 ff46 	bl	8008724 <HAL_TIM_PWM_Stop_DMA>
}
 8001898:	bf00      	nop
 800189a:	bd80      	pop	{r7, pc}
 800189c:	20000f68 	.word	0x20000f68

080018a0 <SerialLED_IO_Write>:

static void SerialLED_IO_Write(uint16_t Address, uint8_t red, uint8_t green, uint8_t blue){
 80018a0:	b590      	push	{r4, r7, lr}
 80018a2:	b085      	sub	sp, #20
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	4604      	mov	r4, r0
 80018a8:	4608      	mov	r0, r1
 80018aa:	4611      	mov	r1, r2
 80018ac:	461a      	mov	r2, r3
 80018ae:	4623      	mov	r3, r4
 80018b0:	80fb      	strh	r3, [r7, #6]
 80018b2:	4603      	mov	r3, r0
 80018b4:	717b      	strb	r3, [r7, #5]
 80018b6:	460b      	mov	r3, r1
 80018b8:	713b      	strb	r3, [r7, #4]
 80018ba:	4613      	mov	r3, r2
 80018bc:	70fb      	strb	r3, [r7, #3]
	//HAL_TIM_PWM_Stop_DMA(&htim3, TIM_CHANNEL_1);
    for(uint16_t i = 0; i < 8; i++){
 80018be:	2300      	movs	r3, #0
 80018c0:	81fb      	strh	r3, [r7, #14]
 80018c2:	e052      	b.n	800196a <SerialLED_IO_Write+0xca>
    	LED_DMA_BUFFER[(Address * BITS_PER_LED) + 0  + i] = green & (1 << (7 - i)) ? ONE_DUTY_CYCLE : ZERO_DUTY_CYCLE;
 80018c4:	793a      	ldrb	r2, [r7, #4]
 80018c6:	89fb      	ldrh	r3, [r7, #14]
 80018c8:	f1c3 0307 	rsb	r3, r3, #7
 80018cc:	fa42 f303 	asr.w	r3, r2, r3
 80018d0:	f003 0301 	and.w	r3, r3, #1
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d002      	beq.n	80018de <SerialLED_IO_Write+0x3e>
 80018d8:	233a      	movs	r3, #58	; 0x3a
 80018da:	b29a      	uxth	r2, r3
 80018dc:	e001      	b.n	80018e2 <SerialLED_IO_Write+0x42>
 80018de:	231d      	movs	r3, #29
 80018e0:	b29a      	uxth	r2, r3
 80018e2:	88f9      	ldrh	r1, [r7, #6]
 80018e4:	460b      	mov	r3, r1
 80018e6:	005b      	lsls	r3, r3, #1
 80018e8:	440b      	add	r3, r1
 80018ea:	00db      	lsls	r3, r3, #3
 80018ec:	4619      	mov	r1, r3
 80018ee:	89fb      	ldrh	r3, [r7, #14]
 80018f0:	440b      	add	r3, r1
 80018f2:	4924      	ldr	r1, [pc, #144]	; (8001984 <SerialLED_IO_Write+0xe4>)
 80018f4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    	LED_DMA_BUFFER[(Address * BITS_PER_LED) + 8  + i] = red   & (1 << (7 - i)) ? ONE_DUTY_CYCLE : ZERO_DUTY_CYCLE;
 80018f8:	797a      	ldrb	r2, [r7, #5]
 80018fa:	89fb      	ldrh	r3, [r7, #14]
 80018fc:	f1c3 0307 	rsb	r3, r3, #7
 8001900:	fa42 f303 	asr.w	r3, r2, r3
 8001904:	f003 0301 	and.w	r3, r3, #1
 8001908:	2b00      	cmp	r3, #0
 800190a:	d002      	beq.n	8001912 <SerialLED_IO_Write+0x72>
 800190c:	233a      	movs	r3, #58	; 0x3a
 800190e:	b29a      	uxth	r2, r3
 8001910:	e001      	b.n	8001916 <SerialLED_IO_Write+0x76>
 8001912:	231d      	movs	r3, #29
 8001914:	b29a      	uxth	r2, r3
 8001916:	88f9      	ldrh	r1, [r7, #6]
 8001918:	460b      	mov	r3, r1
 800191a:	005b      	lsls	r3, r3, #1
 800191c:	440b      	add	r3, r1
 800191e:	00db      	lsls	r3, r3, #3
 8001920:	4619      	mov	r1, r3
 8001922:	89fb      	ldrh	r3, [r7, #14]
 8001924:	440b      	add	r3, r1
 8001926:	3308      	adds	r3, #8
 8001928:	4916      	ldr	r1, [pc, #88]	; (8001984 <SerialLED_IO_Write+0xe4>)
 800192a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    	LED_DMA_BUFFER[(Address * BITS_PER_LED) + 16 + i] = blue  & (1 << (7 - i)) ? ONE_DUTY_CYCLE : ZERO_DUTY_CYCLE;
 800192e:	78fa      	ldrb	r2, [r7, #3]
 8001930:	89fb      	ldrh	r3, [r7, #14]
 8001932:	f1c3 0307 	rsb	r3, r3, #7
 8001936:	fa42 f303 	asr.w	r3, r2, r3
 800193a:	f003 0301 	and.w	r3, r3, #1
 800193e:	2b00      	cmp	r3, #0
 8001940:	d002      	beq.n	8001948 <SerialLED_IO_Write+0xa8>
 8001942:	233a      	movs	r3, #58	; 0x3a
 8001944:	b29a      	uxth	r2, r3
 8001946:	e001      	b.n	800194c <SerialLED_IO_Write+0xac>
 8001948:	231d      	movs	r3, #29
 800194a:	b29a      	uxth	r2, r3
 800194c:	88f9      	ldrh	r1, [r7, #6]
 800194e:	460b      	mov	r3, r1
 8001950:	005b      	lsls	r3, r3, #1
 8001952:	440b      	add	r3, r1
 8001954:	00db      	lsls	r3, r3, #3
 8001956:	4619      	mov	r1, r3
 8001958:	89fb      	ldrh	r3, [r7, #14]
 800195a:	440b      	add	r3, r1
 800195c:	3310      	adds	r3, #16
 800195e:	4909      	ldr	r1, [pc, #36]	; (8001984 <SerialLED_IO_Write+0xe4>)
 8001960:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    for(uint16_t i = 0; i < 8; i++){
 8001964:	89fb      	ldrh	r3, [r7, #14]
 8001966:	3301      	adds	r3, #1
 8001968:	81fb      	strh	r3, [r7, #14]
 800196a:	89fb      	ldrh	r3, [r7, #14]
 800196c:	2b07      	cmp	r3, #7
 800196e:	d9a9      	bls.n	80018c4 <SerialLED_IO_Write+0x24>
    }
    HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, (uint32_t*)LED_DMA_BUFFER, LED_DMA_BUFFER_LENGTH);
 8001970:	23a0      	movs	r3, #160	; 0xa0
 8001972:	4a04      	ldr	r2, [pc, #16]	; (8001984 <SerialLED_IO_Write+0xe4>)
 8001974:	2100      	movs	r1, #0
 8001976:	4804      	ldr	r0, [pc, #16]	; (8001988 <SerialLED_IO_Write+0xe8>)
 8001978:	f006 fd24 	bl	80083c4 <HAL_TIM_PWM_Start_DMA>
}
 800197c:	bf00      	nop
 800197e:	3714      	adds	r7, #20
 8001980:	46bd      	mov	sp, r7
 8001982:	bd90      	pop	{r4, r7, pc}
 8001984:	20000218 	.word	0x20000218
 8001988:	20000f68 	.word	0x20000f68

0800198c <TouchButtonInit>:
 *  Created on: May 26, 2022
 *      Author: evanl
 */
#include "TouchButton.h"

void TouchButtonInit(TouchButton_Init_Struct_t Settings, TouchButton_Handle_t *Dev, TouchButton_IO_Drv_t IO_Driver){
 800198c:	b5b0      	push	{r4, r5, r7, lr}
 800198e:	b084      	sub	sp, #16
 8001990:	af00      	add	r7, sp, #0
 8001992:	1d3c      	adds	r4, r7, #4
 8001994:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001998:	603b      	str	r3, [r7, #0]
    Dev->IO_Driver = IO_Driver;
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	f103 0410 	add.w	r4, r3, #16
 80019a0:	f107 0520 	add.w	r5, r7, #32
 80019a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019a8:	682b      	ldr	r3, [r5, #0]
 80019aa:	6023      	str	r3, [r4, #0]
    Dev->KeyFunction = Settings.KeyFunction;
 80019ac:	7b3a      	ldrb	r2, [r7, #12]
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	721a      	strb	r2, [r3, #8]
    Dev->ModKeyFunction = Settings.ModKeyFunction;
 80019b2:	7b7a      	ldrb	r2, [r7, #13]
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	725a      	strb	r2, [r3, #9]
    Dev->MouseFunction = Settings.MouseFunction;
 80019b8:	7bba      	ldrb	r2, [r7, #14]
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	729a      	strb	r2, [r3, #10]
    Dev->WheelFunction = Settings.WheelFunction;
 80019be:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	72da      	strb	r2, [r3, #11]
    Dev->TopLeftBound = Settings.TopLeftBound;
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	687a      	ldr	r2, [r7, #4]
 80019ca:	601a      	str	r2, [r3, #0]
    Dev->BottomRightBound = Settings.BottomRightBound;
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	68ba      	ldr	r2, [r7, #8]
 80019d0:	605a      	str	r2, [r3, #4]
    Dev->State = TouchButtonUnpressed;
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	2201      	movs	r2, #1
 80019d6:	731a      	strb	r2, [r3, #12]
    Dev->IO_Driver.init();
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	691b      	ldr	r3, [r3, #16]
 80019dc:	4798      	blx	r3
}
 80019de:	bf00      	nop
 80019e0:	3710      	adds	r7, #16
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bdb0      	pop	{r4, r5, r7, pc}

080019e6 <TouchButtonRead>:
    Dev->ModKeyFunction = ModKey;
    Dev->MouseFunction = MouseFunction;
    Dev->WheelFunction = WheelFunction;
}

TouchButton_Status_t TouchButtonRead(TouchButton_Handle_t *Dev){
 80019e6:	b580      	push	{r7, lr}
 80019e8:	b084      	sub	sp, #16
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	6078      	str	r0, [r7, #4]
	TouchButtonState_t Previous_State = Dev->State;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	7b1b      	ldrb	r3, [r3, #12]
 80019f2:	73fb      	strb	r3, [r7, #15]
    Dev->State = Dev->IO_Driver.read(Dev->TopLeftBound, Dev->BottomRightBound);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	699b      	ldr	r3, [r3, #24]
 80019f8:	6879      	ldr	r1, [r7, #4]
 80019fa:	687a      	ldr	r2, [r7, #4]
 80019fc:	6849      	ldr	r1, [r1, #4]
 80019fe:	6810      	ldr	r0, [r2, #0]
 8001a00:	4798      	blx	r3
 8001a02:	4603      	mov	r3, r0
 8001a04:	461a      	mov	r2, r3
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	731a      	strb	r2, [r3, #12]
    if(Previous_State != Dev->State){
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	7b1b      	ldrb	r3, [r3, #12]
 8001a0e:	7bfa      	ldrb	r2, [r7, #15]
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d001      	beq.n	8001a18 <TouchButtonRead+0x32>
    	return TouchButtonChanged;
 8001a14:	2300      	movs	r3, #0
 8001a16:	e000      	b.n	8001a1a <TouchButtonRead+0x34>
    } else {
    	return TouchButtonUnchanged;
 8001a18:	2301      	movs	r3, #1
    }
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3710      	adds	r7, #16
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
	...

08001a24 <TouchButton_IO_Init>:
	TouchButton_Initialized
}TouchButton_Init_Status_t;

static TouchButton_Init_Status_t TouchButton_Init = TouchButton_Uninitialized;

static void TouchButton_IO_Init(void){;
 8001a24:	b590      	push	{r4, r7, lr}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af02      	add	r7, sp, #8
	if(TouchButton_Init == TouchButton_Uninitialized){
 8001a2a:	4b0b      	ldr	r3, [pc, #44]	; (8001a58 <TouchButton_IO_Init+0x34>)
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d10e      	bne.n	8001a50 <TouchButton_IO_Init+0x2c>
		FT6206_Init(&TouchScreen, FT6202_Drv);
 8001a32:	4b0a      	ldr	r3, [pc, #40]	; (8001a5c <TouchButton_IO_Init+0x38>)
 8001a34:	466c      	mov	r4, sp
 8001a36:	f103 020c 	add.w	r2, r3, #12
 8001a3a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a3e:	e884 0003 	stmia.w	r4, {r0, r1}
 8001a42:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a44:	4806      	ldr	r0, [pc, #24]	; (8001a60 <TouchButton_IO_Init+0x3c>)
 8001a46:	f7fe fd9d 	bl	8000584 <FT6206_Init>
		TouchButton_Init = TouchButton_Initialized;
 8001a4a:	4b03      	ldr	r3, [pc, #12]	; (8001a58 <TouchButton_IO_Init+0x34>)
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	701a      	strb	r2, [r3, #0]
	}
}
 8001a50:	bf00      	nop
 8001a52:	3704      	adds	r7, #4
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd90      	pop	{r4, r7, pc}
 8001a58:	20000359 	.word	0x20000359
 8001a5c:	20000000 	.word	0x20000000
 8001a60:	2000035c 	.word	0x2000035c

08001a64 <TouchButton_IO_DeInit>:

static void TouchButton_IO_DeInit(void){
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
	if(TouchButton_Init == TouchButton_Initialized){
 8001a68:	4b05      	ldr	r3, [pc, #20]	; (8001a80 <TouchButton_IO_DeInit+0x1c>)
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	d105      	bne.n	8001a7c <TouchButton_IO_DeInit+0x18>
		FT6206_DeInit(&TouchScreen);
 8001a70:	4804      	ldr	r0, [pc, #16]	; (8001a84 <TouchButton_IO_DeInit+0x20>)
 8001a72:	f7fe fdb5 	bl	80005e0 <FT6206_DeInit>
		TouchButton_Init = TouchButton_Uninitialized;
 8001a76:	4b02      	ldr	r3, [pc, #8]	; (8001a80 <TouchButton_IO_DeInit+0x1c>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	701a      	strb	r2, [r3, #0]
	}
}
 8001a7c:	bf00      	nop
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	20000359 	.word	0x20000359
 8001a84:	2000035c 	.word	0x2000035c

08001a88 <TouchButton_IO_Read>:

static TouchButtonState_t TouchButton_IO_Read(TouchButtonCoordinate_t TopLeftBound, TouchButtonCoordinate_t BottomRightBound){
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	6039      	str	r1, [r7, #0]
	if(TouchScreen.P1_XPos >= TopLeftBound.X_Position && TouchScreen.P1_XPos <= BottomRightBound.X_Position && TouchScreen.P1_YPos >= TopLeftBound.Y_Position && TouchScreen.P1_YPos <= BottomRightBound.Y_Position){
 8001a92:	4b14      	ldr	r3, [pc, #80]	; (8001ae4 <TouchButton_IO_Read+0x5c>)
 8001a94:	881b      	ldrh	r3, [r3, #0]
 8001a96:	b29a      	uxth	r2, r3
 8001a98:	88bb      	ldrh	r3, [r7, #4]
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	d31a      	bcc.n	8001ad4 <TouchButton_IO_Read+0x4c>
 8001a9e:	4b11      	ldr	r3, [pc, #68]	; (8001ae4 <TouchButton_IO_Read+0x5c>)
 8001aa0:	881b      	ldrh	r3, [r3, #0]
 8001aa2:	b29a      	uxth	r2, r3
 8001aa4:	883b      	ldrh	r3, [r7, #0]
 8001aa6:	429a      	cmp	r2, r3
 8001aa8:	d814      	bhi.n	8001ad4 <TouchButton_IO_Read+0x4c>
 8001aaa:	4b0e      	ldr	r3, [pc, #56]	; (8001ae4 <TouchButton_IO_Read+0x5c>)
 8001aac:	885b      	ldrh	r3, [r3, #2]
 8001aae:	b29a      	uxth	r2, r3
 8001ab0:	88fb      	ldrh	r3, [r7, #6]
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	d30e      	bcc.n	8001ad4 <TouchButton_IO_Read+0x4c>
 8001ab6:	4b0b      	ldr	r3, [pc, #44]	; (8001ae4 <TouchButton_IO_Read+0x5c>)
 8001ab8:	885b      	ldrh	r3, [r3, #2]
 8001aba:	b29a      	uxth	r2, r3
 8001abc:	887b      	ldrh	r3, [r7, #2]
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	d808      	bhi.n	8001ad4 <TouchButton_IO_Read+0x4c>
		if(TouchScreen.P1_EventFlag == Contact){
 8001ac2:	4b08      	ldr	r3, [pc, #32]	; (8001ae4 <TouchButton_IO_Read+0x5c>)
 8001ac4:	791b      	ldrb	r3, [r3, #4]
 8001ac6:	b2db      	uxtb	r3, r3
 8001ac8:	2b02      	cmp	r3, #2
 8001aca:	d101      	bne.n	8001ad0 <TouchButton_IO_Read+0x48>
	        return TouchButtonPressed;
 8001acc:	2300      	movs	r3, #0
 8001ace:	e002      	b.n	8001ad6 <TouchButton_IO_Read+0x4e>
		} else {
			return TouchButtonUnpressed;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e000      	b.n	8001ad6 <TouchButton_IO_Read+0x4e>
		}
	} else {
		return TouchButtonUnpressed;
 8001ad4:	2301      	movs	r3, #1
	}
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	370c      	adds	r7, #12
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr
 8001ae2:	bf00      	nop
 8001ae4:	2000035c 	.word	0x2000035c

08001ae8 <TouchScreenIRQCallback>:
		.read = TouchButton_IO_Read,
		.write = '\0',
		.ioctl = '\0'
};

void TouchScreenIRQCallback(){
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0
	FT6206_ReadScreen(&TouchScreen);
 8001aec:	4802      	ldr	r0, [pc, #8]	; (8001af8 <TouchScreenIRQCallback+0x10>)
 8001aee:	f7fe fd91 	bl	8000614 <FT6206_ReadScreen>
}
 8001af2:	bf00      	nop
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	2000035c 	.word	0x2000035c

08001afc <HAL_ADC_MspInit>:
  /* USER CODE END ADC1_Init 2 */

}

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b08a      	sub	sp, #40	; 0x28
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b04:	f107 0314 	add.w	r3, r7, #20
 8001b08:	2200      	movs	r2, #0
 8001b0a:	601a      	str	r2, [r3, #0]
 8001b0c:	605a      	str	r2, [r3, #4]
 8001b0e:	609a      	str	r2, [r3, #8]
 8001b10:	60da      	str	r2, [r3, #12]
 8001b12:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a2f      	ldr	r2, [pc, #188]	; (8001bd8 <HAL_ADC_MspInit+0xdc>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d157      	bne.n	8001bce <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001b1e:	2300      	movs	r3, #0
 8001b20:	613b      	str	r3, [r7, #16]
 8001b22:	4b2e      	ldr	r3, [pc, #184]	; (8001bdc <HAL_ADC_MspInit+0xe0>)
 8001b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b26:	4a2d      	ldr	r2, [pc, #180]	; (8001bdc <HAL_ADC_MspInit+0xe0>)
 8001b28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b2c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b2e:	4b2b      	ldr	r3, [pc, #172]	; (8001bdc <HAL_ADC_MspInit+0xe0>)
 8001b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b36:	613b      	str	r3, [r7, #16]
 8001b38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	60fb      	str	r3, [r7, #12]
 8001b3e:	4b27      	ldr	r3, [pc, #156]	; (8001bdc <HAL_ADC_MspInit+0xe0>)
 8001b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b42:	4a26      	ldr	r2, [pc, #152]	; (8001bdc <HAL_ADC_MspInit+0xe0>)
 8001b44:	f043 0301 	orr.w	r3, r3, #1
 8001b48:	6313      	str	r3, [r2, #48]	; 0x30
 8001b4a:	4b24      	ldr	r3, [pc, #144]	; (8001bdc <HAL_ADC_MspInit+0xe0>)
 8001b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4e:	f003 0301 	and.w	r3, r3, #1
 8001b52:	60fb      	str	r3, [r7, #12]
 8001b54:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = ADC_VX_Pin|ADC_VY_Pin;
 8001b56:	2318      	movs	r3, #24
 8001b58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b62:	f107 0314 	add.w	r3, r7, #20
 8001b66:	4619      	mov	r1, r3
 8001b68:	481d      	ldr	r0, [pc, #116]	; (8001be0 <HAL_ADC_MspInit+0xe4>)
 8001b6a:	f002 fc9f 	bl	80044ac <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001b6e:	4b1d      	ldr	r3, [pc, #116]	; (8001be4 <HAL_ADC_MspInit+0xe8>)
 8001b70:	4a1d      	ldr	r2, [pc, #116]	; (8001be8 <HAL_ADC_MspInit+0xec>)
 8001b72:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001b74:	4b1b      	ldr	r3, [pc, #108]	; (8001be4 <HAL_ADC_MspInit+0xe8>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b7a:	4b1a      	ldr	r3, [pc, #104]	; (8001be4 <HAL_ADC_MspInit+0xe8>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b80:	4b18      	ldr	r3, [pc, #96]	; (8001be4 <HAL_ADC_MspInit+0xe8>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001b86:	4b17      	ldr	r3, [pc, #92]	; (8001be4 <HAL_ADC_MspInit+0xe8>)
 8001b88:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b8c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001b8e:	4b15      	ldr	r3, [pc, #84]	; (8001be4 <HAL_ADC_MspInit+0xe8>)
 8001b90:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001b94:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001b96:	4b13      	ldr	r3, [pc, #76]	; (8001be4 <HAL_ADC_MspInit+0xe8>)
 8001b98:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b9c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001b9e:	4b11      	ldr	r3, [pc, #68]	; (8001be4 <HAL_ADC_MspInit+0xe8>)
 8001ba0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ba4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001ba6:	4b0f      	ldr	r3, [pc, #60]	; (8001be4 <HAL_ADC_MspInit+0xe8>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001bac:	4b0d      	ldr	r3, [pc, #52]	; (8001be4 <HAL_ADC_MspInit+0xe8>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001bb2:	480c      	ldr	r0, [pc, #48]	; (8001be4 <HAL_ADC_MspInit+0xe8>)
 8001bb4:	f002 f86c 	bl	8003c90 <HAL_DMA_Init>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d001      	beq.n	8001bc2 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001bbe:	f000 fef9 	bl	80029b4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	4a07      	ldr	r2, [pc, #28]	; (8001be4 <HAL_ADC_MspInit+0xe8>)
 8001bc6:	639a      	str	r2, [r3, #56]	; 0x38
 8001bc8:	4a06      	ldr	r2, [pc, #24]	; (8001be4 <HAL_ADC_MspInit+0xe8>)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001bce:	bf00      	nop
 8001bd0:	3728      	adds	r7, #40	; 0x28
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	40012000 	.word	0x40012000
 8001bdc:	40023800 	.word	0x40023800
 8001be0:	40020000 	.word	0x40020000
 8001be4:	200003c0 	.word	0x200003c0
 8001be8:	40026410 	.word	0x40026410

08001bec <ADC1_Init>:
  /* USER CODE END ADC1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void ADC1_Init(void){
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b084      	sub	sp, #16
 8001bf0:	af00      	add	r7, sp, #0
	  ADC_ChannelConfTypeDef sConfig = {0};
 8001bf2:	463b      	mov	r3, r7
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	601a      	str	r2, [r3, #0]
 8001bf8:	605a      	str	r2, [r3, #4]
 8001bfa:	609a      	str	r2, [r3, #8]
 8001bfc:	60da      	str	r2, [r3, #12]


	  hadc1.Instance = ADC1;
 8001bfe:	4b28      	ldr	r3, [pc, #160]	; (8001ca0 <ADC1_Init+0xb4>)
 8001c00:	4a28      	ldr	r2, [pc, #160]	; (8001ca4 <ADC1_Init+0xb8>)
 8001c02:	601a      	str	r2, [r3, #0]
	  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001c04:	4b26      	ldr	r3, [pc, #152]	; (8001ca0 <ADC1_Init+0xb4>)
 8001c06:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001c0a:	605a      	str	r2, [r3, #4]
	  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001c0c:	4b24      	ldr	r3, [pc, #144]	; (8001ca0 <ADC1_Init+0xb4>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	609a      	str	r2, [r3, #8]
	  hadc1.Init.ScanConvMode = ENABLE;
 8001c12:	4b23      	ldr	r3, [pc, #140]	; (8001ca0 <ADC1_Init+0xb4>)
 8001c14:	2201      	movs	r2, #1
 8001c16:	611a      	str	r2, [r3, #16]
	  hadc1.Init.ContinuousConvMode = ENABLE;
 8001c18:	4b21      	ldr	r3, [pc, #132]	; (8001ca0 <ADC1_Init+0xb4>)
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	761a      	strb	r2, [r3, #24]
	  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001c1e:	4b20      	ldr	r3, [pc, #128]	; (8001ca0 <ADC1_Init+0xb4>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	f883 2020 	strb.w	r2, [r3, #32]
	  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001c26:	4b1e      	ldr	r3, [pc, #120]	; (8001ca0 <ADC1_Init+0xb4>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	62da      	str	r2, [r3, #44]	; 0x2c
	  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001c2c:	4b1c      	ldr	r3, [pc, #112]	; (8001ca0 <ADC1_Init+0xb4>)
 8001c2e:	4a1e      	ldr	r2, [pc, #120]	; (8001ca8 <ADC1_Init+0xbc>)
 8001c30:	629a      	str	r2, [r3, #40]	; 0x28
	  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001c32:	4b1b      	ldr	r3, [pc, #108]	; (8001ca0 <ADC1_Init+0xb4>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	60da      	str	r2, [r3, #12]
	  hadc1.Init.NbrOfConversion = 2;
 8001c38:	4b19      	ldr	r3, [pc, #100]	; (8001ca0 <ADC1_Init+0xb4>)
 8001c3a:	2202      	movs	r2, #2
 8001c3c:	61da      	str	r2, [r3, #28]
	  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001c3e:	4b18      	ldr	r3, [pc, #96]	; (8001ca0 <ADC1_Init+0xb4>)
 8001c40:	2201      	movs	r2, #1
 8001c42:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001c46:	4b16      	ldr	r3, [pc, #88]	; (8001ca0 <ADC1_Init+0xb4>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	615a      	str	r2, [r3, #20]
	  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001c4c:	4814      	ldr	r0, [pc, #80]	; (8001ca0 <ADC1_Init+0xb4>)
 8001c4e:	f001 fa53 	bl	80030f8 <HAL_ADC_Init>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d001      	beq.n	8001c5c <ADC1_Init+0x70>
	  {
	    Error_Handler();
 8001c58:	f000 feac 	bl	80029b4 <Error_Handler>
	  }

	  sConfig.Channel = ADC_CHANNEL_3;
 8001c5c:	2303      	movs	r3, #3
 8001c5e:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = 1;
 8001c60:	2301      	movs	r3, #1
 8001c62:	607b      	str	r3, [r7, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001c64:	2307      	movs	r3, #7
 8001c66:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c68:	463b      	mov	r3, r7
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	480c      	ldr	r0, [pc, #48]	; (8001ca0 <ADC1_Init+0xb4>)
 8001c6e:	f001 fbef 	bl	8003450 <HAL_ADC_ConfigChannel>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d001      	beq.n	8001c7c <ADC1_Init+0x90>
	  {
	    Error_Handler();
 8001c78:	f000 fe9c 	bl	80029b4 <Error_Handler>
	  }

	  sConfig.Channel = ADC_CHANNEL_4;
 8001c7c:	2304      	movs	r3, #4
 8001c7e:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = 2;
 8001c80:	2302      	movs	r3, #2
 8001c82:	607b      	str	r3, [r7, #4]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c84:	463b      	mov	r3, r7
 8001c86:	4619      	mov	r1, r3
 8001c88:	4805      	ldr	r0, [pc, #20]	; (8001ca0 <ADC1_Init+0xb4>)
 8001c8a:	f001 fbe1 	bl	8003450 <HAL_ADC_ConfigChannel>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d001      	beq.n	8001c98 <ADC1_Init+0xac>
	  {
	    Error_Handler();
 8001c94:	f000 fe8e 	bl	80029b4 <Error_Handler>
	  }

}
 8001c98:	bf00      	nop
 8001c9a:	3710      	adds	r7, #16
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	20000378 	.word	0x20000378
 8001ca4:	40012000 	.word	0x40012000
 8001ca8:	0f000001 	.word	0x0f000001

08001cac <I2C1_DMA_Init>:
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);

}

/* USER CODE BEGIN 2 */
void I2C1_DMA_Init(void){
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
	__HAL_RCC_DMA1_CLK_ENABLE();
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	607b      	str	r3, [r7, #4]
 8001cb6:	4b0c      	ldr	r3, [pc, #48]	; (8001ce8 <I2C1_DMA_Init+0x3c>)
 8001cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cba:	4a0b      	ldr	r2, [pc, #44]	; (8001ce8 <I2C1_DMA_Init+0x3c>)
 8001cbc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001cc0:	6313      	str	r3, [r2, #48]	; 0x30
 8001cc2:	4b09      	ldr	r3, [pc, #36]	; (8001ce8 <I2C1_DMA_Init+0x3c>)
 8001cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cca:	607b      	str	r3, [r7, #4]
 8001ccc:	687b      	ldr	r3, [r7, #4]
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001cce:	2200      	movs	r2, #0
 8001cd0:	2100      	movs	r1, #0
 8001cd2:	200b      	movs	r0, #11
 8001cd4:	f001 ff89 	bl	8003bea <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001cd8:	200b      	movs	r0, #11
 8001cda:	f001 ffa2 	bl	8003c22 <HAL_NVIC_EnableIRQ>
}
 8001cde:	bf00      	nop
 8001ce0:	3708      	adds	r7, #8
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	40023800 	.word	0x40023800

08001cec <ADC_DMA_Init>:
void ADC_DMA_Init(void){
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
	__HAL_RCC_DMA2_CLK_ENABLE();
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	607b      	str	r3, [r7, #4]
 8001cf6:	4b0a      	ldr	r3, [pc, #40]	; (8001d20 <ADC_DMA_Init+0x34>)
 8001cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfa:	4a09      	ldr	r2, [pc, #36]	; (8001d20 <ADC_DMA_Init+0x34>)
 8001cfc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d00:	6313      	str	r3, [r2, #48]	; 0x30
 8001d02:	4b07      	ldr	r3, [pc, #28]	; (8001d20 <ADC_DMA_Init+0x34>)
 8001d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d0a:	607b      	str	r3, [r7, #4]
 8001d0c:	687b      	ldr	r3, [r7, #4]
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001d0e:	2200      	movs	r2, #0
 8001d10:	2100      	movs	r1, #0
 8001d12:	2038      	movs	r0, #56	; 0x38
 8001d14:	f001 ff69 	bl	8003bea <HAL_NVIC_SetPriority>
	//HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
}
 8001d18:	bf00      	nop
 8001d1a:	3708      	adds	r7, #8
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	40023800 	.word	0x40023800

08001d24 <TIM_DMA_Init>:

void TIM_DMA_Init(void){
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
	__HAL_RCC_DMA1_CLK_ENABLE();
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	607b      	str	r3, [r7, #4]
 8001d2e:	4b0a      	ldr	r3, [pc, #40]	; (8001d58 <TIM_DMA_Init+0x34>)
 8001d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d32:	4a09      	ldr	r2, [pc, #36]	; (8001d58 <TIM_DMA_Init+0x34>)
 8001d34:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d38:	6313      	str	r3, [r2, #48]	; 0x30
 8001d3a:	4b07      	ldr	r3, [pc, #28]	; (8001d58 <TIM_DMA_Init+0x34>)
 8001d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d42:	607b      	str	r3, [r7, #4]
 8001d44:	687b      	ldr	r3, [r7, #4]
	HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8001d46:	2200      	movs	r2, #0
 8001d48:	2100      	movs	r1, #0
 8001d4a:	200f      	movs	r0, #15
 8001d4c:	f001 ff4d 	bl	8003bea <HAL_NVIC_SetPriority>
	//HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
}
 8001d50:	bf00      	nop
 8001d52:	3708      	adds	r7, #8
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	40023800 	.word	0x40023800

08001d5c <I2C2_DMA_Init>:

void I2C2_DMA_Init(void){
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
	__HAL_RCC_DMA1_CLK_ENABLE();
 8001d62:	2300      	movs	r3, #0
 8001d64:	607b      	str	r3, [r7, #4]
 8001d66:	4b0c      	ldr	r3, [pc, #48]	; (8001d98 <I2C2_DMA_Init+0x3c>)
 8001d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6a:	4a0b      	ldr	r2, [pc, #44]	; (8001d98 <I2C2_DMA_Init+0x3c>)
 8001d6c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d70:	6313      	str	r3, [r2, #48]	; 0x30
 8001d72:	4b09      	ldr	r3, [pc, #36]	; (8001d98 <I2C2_DMA_Init+0x3c>)
 8001d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d7a:	607b      	str	r3, [r7, #4]
 8001d7c:	687b      	ldr	r3, [r7, #4]
	  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8001d7e:	2200      	movs	r2, #0
 8001d80:	2100      	movs	r1, #0
 8001d82:	200d      	movs	r0, #13
 8001d84:	f001 ff31 	bl	8003bea <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001d88:	200d      	movs	r0, #13
 8001d8a:	f001 ff4a 	bl	8003c22 <HAL_NVIC_EnableIRQ>
}
 8001d8e:	bf00      	nop
 8001d90:	3708      	adds	r7, #8
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	40023800 	.word	0x40023800

08001d9c <I2C_GPIO_Init>:

}

/* USER CODE BEGIN 2 */
void I2C_GPIO_Init(void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001da2:	2300      	movs	r3, #0
 8001da4:	607b      	str	r3, [r7, #4]
 8001da6:	4b09      	ldr	r3, [pc, #36]	; (8001dcc <I2C_GPIO_Init+0x30>)
 8001da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001daa:	4a08      	ldr	r2, [pc, #32]	; (8001dcc <I2C_GPIO_Init+0x30>)
 8001dac:	f043 0302 	orr.w	r3, r3, #2
 8001db0:	6313      	str	r3, [r2, #48]	; 0x30
 8001db2:	4b06      	ldr	r3, [pc, #24]	; (8001dcc <I2C_GPIO_Init+0x30>)
 8001db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db6:	f003 0302 	and.w	r3, r3, #2
 8001dba:	607b      	str	r3, [r7, #4]
 8001dbc:	687b      	ldr	r3, [r7, #4]

}
 8001dbe:	bf00      	nop
 8001dc0:	370c      	adds	r7, #12
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr
 8001dca:	bf00      	nop
 8001dcc:	40023800 	.word	0x40023800

08001dd0 <ADC_GPIO_Init>:

void ADC_GPIO_Init(void){
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	607b      	str	r3, [r7, #4]
 8001dda:	4b09      	ldr	r3, [pc, #36]	; (8001e00 <ADC_GPIO_Init+0x30>)
 8001ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dde:	4a08      	ldr	r2, [pc, #32]	; (8001e00 <ADC_GPIO_Init+0x30>)
 8001de0:	f043 0302 	orr.w	r3, r3, #2
 8001de4:	6313      	str	r3, [r2, #48]	; 0x30
 8001de6:	4b06      	ldr	r3, [pc, #24]	; (8001e00 <ADC_GPIO_Init+0x30>)
 8001de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dea:	f003 0302 	and.w	r3, r3, #2
 8001dee:	607b      	str	r3, [r7, #4]
 8001df0:	687b      	ldr	r3, [r7, #4]

}
 8001df2:	bf00      	nop
 8001df4:	370c      	adds	r7, #12
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop
 8001e00:	40023800 	.word	0x40023800

08001e04 <TIM3_GPIO_Init>:

void TIM3_GPIO_Init(void){
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	607b      	str	r3, [r7, #4]
 8001e0e:	4b09      	ldr	r3, [pc, #36]	; (8001e34 <TIM3_GPIO_Init+0x30>)
 8001e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e12:	4a08      	ldr	r2, [pc, #32]	; (8001e34 <TIM3_GPIO_Init+0x30>)
 8001e14:	f043 0302 	orr.w	r3, r3, #2
 8001e18:	6313      	str	r3, [r2, #48]	; 0x30
 8001e1a:	4b06      	ldr	r3, [pc, #24]	; (8001e34 <TIM3_GPIO_Init+0x30>)
 8001e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1e:	f003 0302 	and.w	r3, r3, #2
 8001e22:	607b      	str	r3, [r7, #4]
 8001e24:	687b      	ldr	r3, [r7, #4]
}
 8001e26:	bf00      	nop
 8001e28:	370c      	adds	r7, #12
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	40023800 	.word	0x40023800

08001e38 <ILI9341_GPIO_Init>:

void ILI9341_GPIO_Init(void){
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b088      	sub	sp, #32
 8001e3c:	af00      	add	r7, sp, #0
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e3e:	2300      	movs	r3, #0
 8001e40:	60bb      	str	r3, [r7, #8]
 8001e42:	4b1c      	ldr	r3, [pc, #112]	; (8001eb4 <ILI9341_GPIO_Init+0x7c>)
 8001e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e46:	4a1b      	ldr	r2, [pc, #108]	; (8001eb4 <ILI9341_GPIO_Init+0x7c>)
 8001e48:	f043 0301 	orr.w	r3, r3, #1
 8001e4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e4e:	4b19      	ldr	r3, [pc, #100]	; (8001eb4 <ILI9341_GPIO_Init+0x7c>)
 8001e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e52:	f003 0301 	and.w	r3, r3, #1
 8001e56:	60bb      	str	r3, [r7, #8]
 8001e58:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	607b      	str	r3, [r7, #4]
 8001e5e:	4b15      	ldr	r3, [pc, #84]	; (8001eb4 <ILI9341_GPIO_Init+0x7c>)
 8001e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e62:	4a14      	ldr	r2, [pc, #80]	; (8001eb4 <ILI9341_GPIO_Init+0x7c>)
 8001e64:	f043 0302 	orr.w	r3, r3, #2
 8001e68:	6313      	str	r3, [r2, #48]	; 0x30
 8001e6a:	4b12      	ldr	r3, [pc, #72]	; (8001eb4 <ILI9341_GPIO_Init+0x7c>)
 8001e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6e:	f003 0302 	and.w	r3, r3, #2
 8001e72:	607b      	str	r3, [r7, #4]
 8001e74:	687b      	ldr	r3, [r7, #4]
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e76:	f107 030c 	add.w	r3, r7, #12
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	601a      	str	r2, [r3, #0]
 8001e7e:	605a      	str	r2, [r3, #4]
 8001e80:	609a      	str	r2, [r3, #8]
 8001e82:	60da      	str	r2, [r3, #12]
 8001e84:	611a      	str	r2, [r3, #16]
	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(GPIOB, SPI1_CSN_Pin|DCRS_Pin, GPIO_PIN_SET);
 8001e86:	2201      	movs	r2, #1
 8001e88:	2103      	movs	r1, #3
 8001e8a:	480b      	ldr	r0, [pc, #44]	; (8001eb8 <ILI9341_GPIO_Init+0x80>)
 8001e8c:	f002 fd76 	bl	800497c <HAL_GPIO_WritePin>

	  /*Configure GPIO pins : PBPin PBPin */
	  GPIO_InitStruct.Pin = SPI1_CSN_Pin|DCRS_Pin;
 8001e90:	2303      	movs	r3, #3
 8001e92:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e94:	2301      	movs	r3, #1
 8001e96:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e9c:	2303      	movs	r3, #3
 8001e9e:	61bb      	str	r3, [r7, #24]
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ea0:	f107 030c 	add.w	r3, r7, #12
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	4804      	ldr	r0, [pc, #16]	; (8001eb8 <ILI9341_GPIO_Init+0x80>)
 8001ea8:	f002 fb00 	bl	80044ac <HAL_GPIO_Init>

}
 8001eac:	bf00      	nop
 8001eae:	3720      	adds	r7, #32
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	40023800 	.word	0x40023800
 8001eb8:	40020400 	.word	0x40020400

08001ebc <ILI9341_GPIO_DeInit>:

void ILI9341_GPIO_DeInit(void){
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	af00      	add	r7, sp, #0
	HAL_GPIO_DeInit(GPIOB, SPI1_CSN_Pin|DCRS_Pin);
 8001ec0:	2103      	movs	r1, #3
 8001ec2:	4802      	ldr	r0, [pc, #8]	; (8001ecc <ILI9341_GPIO_DeInit+0x10>)
 8001ec4:	f002 fc76 	bl	80047b4 <HAL_GPIO_DeInit>
}
 8001ec8:	bf00      	nop
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	40020400 	.word	0x40020400

08001ed0 <HAL_I2C_MspInit>:
  /* USER CODE END I2C2_Init 2 */

}

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b08c      	sub	sp, #48	; 0x30
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ed8:	f107 031c 	add.w	r3, r7, #28
 8001edc:	2200      	movs	r2, #0
 8001ede:	601a      	str	r2, [r3, #0]
 8001ee0:	605a      	str	r2, [r3, #4]
 8001ee2:	609a      	str	r2, [r3, #8]
 8001ee4:	60da      	str	r2, [r3, #12]
 8001ee6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a68      	ldr	r2, [pc, #416]	; (8002090 <HAL_I2C_MspInit+0x1c0>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d15a      	bne.n	8001fa8 <HAL_I2C_MspInit+0xd8>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	61bb      	str	r3, [r7, #24]
 8001ef6:	4b67      	ldr	r3, [pc, #412]	; (8002094 <HAL_I2C_MspInit+0x1c4>)
 8001ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efa:	4a66      	ldr	r2, [pc, #408]	; (8002094 <HAL_I2C_MspInit+0x1c4>)
 8001efc:	f043 0302 	orr.w	r3, r3, #2
 8001f00:	6313      	str	r3, [r2, #48]	; 0x30
 8001f02:	4b64      	ldr	r3, [pc, #400]	; (8002094 <HAL_I2C_MspInit+0x1c4>)
 8001f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f06:	f003 0302 	and.w	r3, r3, #2
 8001f0a:	61bb      	str	r3, [r7, #24]
 8001f0c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001f0e:	23c0      	movs	r3, #192	; 0xc0
 8001f10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f12:	2312      	movs	r3, #18
 8001f14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f16:	2301      	movs	r3, #1
 8001f18:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001f1e:	2304      	movs	r3, #4
 8001f20:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f22:	f107 031c 	add.w	r3, r7, #28
 8001f26:	4619      	mov	r1, r3
 8001f28:	485b      	ldr	r0, [pc, #364]	; (8002098 <HAL_I2C_MspInit+0x1c8>)
 8001f2a:	f002 fabf 	bl	80044ac <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f2e:	2300      	movs	r3, #0
 8001f30:	617b      	str	r3, [r7, #20]
 8001f32:	4b58      	ldr	r3, [pc, #352]	; (8002094 <HAL_I2C_MspInit+0x1c4>)
 8001f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f36:	4a57      	ldr	r2, [pc, #348]	; (8002094 <HAL_I2C_MspInit+0x1c4>)
 8001f38:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f3c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f3e:	4b55      	ldr	r3, [pc, #340]	; (8002094 <HAL_I2C_MspInit+0x1c4>)
 8001f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f42:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f46:	617b      	str	r3, [r7, #20]
 8001f48:	697b      	ldr	r3, [r7, #20]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8001f4a:	4b54      	ldr	r3, [pc, #336]	; (800209c <HAL_I2C_MspInit+0x1cc>)
 8001f4c:	4a54      	ldr	r2, [pc, #336]	; (80020a0 <HAL_I2C_MspInit+0x1d0>)
 8001f4e:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8001f50:	4b52      	ldr	r3, [pc, #328]	; (800209c <HAL_I2C_MspInit+0x1cc>)
 8001f52:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f56:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f58:	4b50      	ldr	r3, [pc, #320]	; (800209c <HAL_I2C_MspInit+0x1cc>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f5e:	4b4f      	ldr	r3, [pc, #316]	; (800209c <HAL_I2C_MspInit+0x1cc>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001f64:	4b4d      	ldr	r3, [pc, #308]	; (800209c <HAL_I2C_MspInit+0x1cc>)
 8001f66:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f6a:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f6c:	4b4b      	ldr	r3, [pc, #300]	; (800209c <HAL_I2C_MspInit+0x1cc>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f72:	4b4a      	ldr	r3, [pc, #296]	; (800209c <HAL_I2C_MspInit+0x1cc>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001f78:	4b48      	ldr	r3, [pc, #288]	; (800209c <HAL_I2C_MspInit+0x1cc>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001f7e:	4b47      	ldr	r3, [pc, #284]	; (800209c <HAL_I2C_MspInit+0x1cc>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f84:	4b45      	ldr	r3, [pc, #276]	; (800209c <HAL_I2C_MspInit+0x1cc>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001f8a:	4844      	ldr	r0, [pc, #272]	; (800209c <HAL_I2C_MspInit+0x1cc>)
 8001f8c:	f001 fe80 	bl	8003c90 <HAL_DMA_Init>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d001      	beq.n	8001f9a <HAL_I2C_MspInit+0xca>
    {
      Error_Handler();
 8001f96:	f000 fd0d 	bl	80029b4 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	4a3f      	ldr	r2, [pc, #252]	; (800209c <HAL_I2C_MspInit+0x1cc>)
 8001f9e:	639a      	str	r2, [r3, #56]	; 0x38
 8001fa0:	4a3e      	ldr	r2, [pc, #248]	; (800209c <HAL_I2C_MspInit+0x1cc>)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001fa6:	e06f      	b.n	8002088 <HAL_I2C_MspInit+0x1b8>
  else if(i2cHandle->Instance==I2C2)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a3d      	ldr	r2, [pc, #244]	; (80020a4 <HAL_I2C_MspInit+0x1d4>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d16a      	bne.n	8002088 <HAL_I2C_MspInit+0x1b8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	613b      	str	r3, [r7, #16]
 8001fb6:	4b37      	ldr	r3, [pc, #220]	; (8002094 <HAL_I2C_MspInit+0x1c4>)
 8001fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fba:	4a36      	ldr	r2, [pc, #216]	; (8002094 <HAL_I2C_MspInit+0x1c4>)
 8001fbc:	f043 0302 	orr.w	r3, r3, #2
 8001fc0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fc2:	4b34      	ldr	r3, [pc, #208]	; (8002094 <HAL_I2C_MspInit+0x1c4>)
 8001fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc6:	f003 0302 	and.w	r3, r3, #2
 8001fca:	613b      	str	r3, [r7, #16]
 8001fcc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001fce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001fd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fd4:	2312      	movs	r3, #18
 8001fd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fdc:	2303      	movs	r3, #3
 8001fde:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001fe0:	2304      	movs	r3, #4
 8001fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fe4:	f107 031c 	add.w	r3, r7, #28
 8001fe8:	4619      	mov	r1, r3
 8001fea:	482b      	ldr	r0, [pc, #172]	; (8002098 <HAL_I2C_MspInit+0x1c8>)
 8001fec:	f002 fa5e 	bl	80044ac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001ff0:	2308      	movs	r3, #8
 8001ff2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ff4:	2312      	movs	r3, #18
 8001ff6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8002000:	2309      	movs	r3, #9
 8002002:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002004:	f107 031c 	add.w	r3, r7, #28
 8002008:	4619      	mov	r1, r3
 800200a:	4823      	ldr	r0, [pc, #140]	; (8002098 <HAL_I2C_MspInit+0x1c8>)
 800200c:	f002 fa4e 	bl	80044ac <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002010:	2300      	movs	r3, #0
 8002012:	60fb      	str	r3, [r7, #12]
 8002014:	4b1f      	ldr	r3, [pc, #124]	; (8002094 <HAL_I2C_MspInit+0x1c4>)
 8002016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002018:	4a1e      	ldr	r2, [pc, #120]	; (8002094 <HAL_I2C_MspInit+0x1c4>)
 800201a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800201e:	6413      	str	r3, [r2, #64]	; 0x40
 8002020:	4b1c      	ldr	r3, [pc, #112]	; (8002094 <HAL_I2C_MspInit+0x1c4>)
 8002022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002024:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002028:	60fb      	str	r3, [r7, #12]
 800202a:	68fb      	ldr	r3, [r7, #12]
    hdma_i2c2_rx.Instance = DMA1_Stream2;
 800202c:	4b1e      	ldr	r3, [pc, #120]	; (80020a8 <HAL_I2C_MspInit+0x1d8>)
 800202e:	4a1f      	ldr	r2, [pc, #124]	; (80020ac <HAL_I2C_MspInit+0x1dc>)
 8002030:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Channel = DMA_CHANNEL_7;
 8002032:	4b1d      	ldr	r3, [pc, #116]	; (80020a8 <HAL_I2C_MspInit+0x1d8>)
 8002034:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8002038:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800203a:	4b1b      	ldr	r3, [pc, #108]	; (80020a8 <HAL_I2C_MspInit+0x1d8>)
 800203c:	2200      	movs	r2, #0
 800203e:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002040:	4b19      	ldr	r3, [pc, #100]	; (80020a8 <HAL_I2C_MspInit+0x1d8>)
 8002042:	2200      	movs	r2, #0
 8002044:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002046:	4b18      	ldr	r3, [pc, #96]	; (80020a8 <HAL_I2C_MspInit+0x1d8>)
 8002048:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800204c:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800204e:	4b16      	ldr	r3, [pc, #88]	; (80020a8 <HAL_I2C_MspInit+0x1d8>)
 8002050:	2200      	movs	r2, #0
 8002052:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002054:	4b14      	ldr	r3, [pc, #80]	; (80020a8 <HAL_I2C_MspInit+0x1d8>)
 8002056:	2200      	movs	r2, #0
 8002058:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 800205a:	4b13      	ldr	r3, [pc, #76]	; (80020a8 <HAL_I2C_MspInit+0x1d8>)
 800205c:	2200      	movs	r2, #0
 800205e:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002060:	4b11      	ldr	r3, [pc, #68]	; (80020a8 <HAL_I2C_MspInit+0x1d8>)
 8002062:	2200      	movs	r2, #0
 8002064:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002066:	4b10      	ldr	r3, [pc, #64]	; (80020a8 <HAL_I2C_MspInit+0x1d8>)
 8002068:	2200      	movs	r2, #0
 800206a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 800206c:	480e      	ldr	r0, [pc, #56]	; (80020a8 <HAL_I2C_MspInit+0x1d8>)
 800206e:	f001 fe0f 	bl	8003c90 <HAL_DMA_Init>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d001      	beq.n	800207c <HAL_I2C_MspInit+0x1ac>
      Error_Handler();
 8002078:	f000 fc9c 	bl	80029b4 <Error_Handler>
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c2_rx);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	4a0a      	ldr	r2, [pc, #40]	; (80020a8 <HAL_I2C_MspInit+0x1d8>)
 8002080:	639a      	str	r2, [r3, #56]	; 0x38
 8002082:	4a09      	ldr	r2, [pc, #36]	; (80020a8 <HAL_I2C_MspInit+0x1d8>)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002088:	bf00      	nop
 800208a:	3730      	adds	r7, #48	; 0x30
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}
 8002090:	40005400 	.word	0x40005400
 8002094:	40023800 	.word	0x40023800
 8002098:	40020400 	.word	0x40020400
 800209c:	200004c8 	.word	0x200004c8
 80020a0:	40026010 	.word	0x40026010
 80020a4:	40005800 	.word	0x40005800
 80020a8:	20000528 	.word	0x20000528
 80020ac:	40026040 	.word	0x40026040

080020b0 <I2C1_Init>:
  /* USER CODE END I2C2_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void I2C1_Init(void){
 80020b0:	b580      	push	{r7, lr}
 80020b2:	af00      	add	r7, sp, #0

	  hi2c1.Instance = I2C1;
 80020b4:	4b12      	ldr	r3, [pc, #72]	; (8002100 <I2C1_Init+0x50>)
 80020b6:	4a13      	ldr	r2, [pc, #76]	; (8002104 <I2C1_Init+0x54>)
 80020b8:	601a      	str	r2, [r3, #0]
	  hi2c1.Init.ClockSpeed = 400000;
 80020ba:	4b11      	ldr	r3, [pc, #68]	; (8002100 <I2C1_Init+0x50>)
 80020bc:	4a12      	ldr	r2, [pc, #72]	; (8002108 <I2C1_Init+0x58>)
 80020be:	605a      	str	r2, [r3, #4]
	  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80020c0:	4b0f      	ldr	r3, [pc, #60]	; (8002100 <I2C1_Init+0x50>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	609a      	str	r2, [r3, #8]
	  hi2c1.Init.OwnAddress1 = 0;
 80020c6:	4b0e      	ldr	r3, [pc, #56]	; (8002100 <I2C1_Init+0x50>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	60da      	str	r2, [r3, #12]
	  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80020cc:	4b0c      	ldr	r3, [pc, #48]	; (8002100 <I2C1_Init+0x50>)
 80020ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80020d2:	611a      	str	r2, [r3, #16]
	  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80020d4:	4b0a      	ldr	r3, [pc, #40]	; (8002100 <I2C1_Init+0x50>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	615a      	str	r2, [r3, #20]
	  hi2c1.Init.OwnAddress2 = 0;
 80020da:	4b09      	ldr	r3, [pc, #36]	; (8002100 <I2C1_Init+0x50>)
 80020dc:	2200      	movs	r2, #0
 80020de:	619a      	str	r2, [r3, #24]
	  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80020e0:	4b07      	ldr	r3, [pc, #28]	; (8002100 <I2C1_Init+0x50>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	61da      	str	r2, [r3, #28]
	  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80020e6:	4b06      	ldr	r3, [pc, #24]	; (8002100 <I2C1_Init+0x50>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	621a      	str	r2, [r3, #32]
	  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80020ec:	4804      	ldr	r0, [pc, #16]	; (8002100 <I2C1_Init+0x50>)
 80020ee:	f002 fc5f 	bl	80049b0 <HAL_I2C_Init>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d001      	beq.n	80020fc <I2C1_Init+0x4c>
	  {
	    Error_Handler();
 80020f8:	f000 fc5c 	bl	80029b4 <Error_Handler>
	  }

}
 80020fc:	bf00      	nop
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	20000420 	.word	0x20000420
 8002104:	40005400 	.word	0x40005400
 8002108:	00061a80 	.word	0x00061a80

0800210c <I2C2_Init>:

void I2C2_Init(void){
 800210c:	b580      	push	{r7, lr}
 800210e:	af00      	add	r7, sp, #0
	  hi2c2.Instance = I2C2;
 8002110:	4b12      	ldr	r3, [pc, #72]	; (800215c <I2C2_Init+0x50>)
 8002112:	4a13      	ldr	r2, [pc, #76]	; (8002160 <I2C2_Init+0x54>)
 8002114:	601a      	str	r2, [r3, #0]
	  hi2c2.Init.ClockSpeed = 100000;
 8002116:	4b11      	ldr	r3, [pc, #68]	; (800215c <I2C2_Init+0x50>)
 8002118:	4a12      	ldr	r2, [pc, #72]	; (8002164 <I2C2_Init+0x58>)
 800211a:	605a      	str	r2, [r3, #4]
	  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800211c:	4b0f      	ldr	r3, [pc, #60]	; (800215c <I2C2_Init+0x50>)
 800211e:	2200      	movs	r2, #0
 8002120:	609a      	str	r2, [r3, #8]
	  hi2c2.Init.OwnAddress1 = 0;
 8002122:	4b0e      	ldr	r3, [pc, #56]	; (800215c <I2C2_Init+0x50>)
 8002124:	2200      	movs	r2, #0
 8002126:	60da      	str	r2, [r3, #12]
	  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002128:	4b0c      	ldr	r3, [pc, #48]	; (800215c <I2C2_Init+0x50>)
 800212a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800212e:	611a      	str	r2, [r3, #16]
	  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002130:	4b0a      	ldr	r3, [pc, #40]	; (800215c <I2C2_Init+0x50>)
 8002132:	2200      	movs	r2, #0
 8002134:	615a      	str	r2, [r3, #20]
	  hi2c2.Init.OwnAddress2 = 0;
 8002136:	4b09      	ldr	r3, [pc, #36]	; (800215c <I2C2_Init+0x50>)
 8002138:	2200      	movs	r2, #0
 800213a:	619a      	str	r2, [r3, #24]
	  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800213c:	4b07      	ldr	r3, [pc, #28]	; (800215c <I2C2_Init+0x50>)
 800213e:	2200      	movs	r2, #0
 8002140:	61da      	str	r2, [r3, #28]
	  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002142:	4b06      	ldr	r3, [pc, #24]	; (800215c <I2C2_Init+0x50>)
 8002144:	2200      	movs	r2, #0
 8002146:	621a      	str	r2, [r3, #32]
	  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002148:	4804      	ldr	r0, [pc, #16]	; (800215c <I2C2_Init+0x50>)
 800214a:	f002 fc31 	bl	80049b0 <HAL_I2C_Init>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d001      	beq.n	8002158 <I2C2_Init+0x4c>
	  {
	    Error_Handler();
 8002154:	f000 fc2e 	bl	80029b4 <Error_Handler>
	  }
}
 8002158:	bf00      	nop
 800215a:	bd80      	pop	{r7, pc}
 800215c:	20000474 	.word	0x20000474
 8002160:	40005800 	.word	0x40005800
 8002164:	000186a0 	.word	0x000186a0

08002168 <__io_putchar>:
#include "stm32f4xx_hal.h"
#include "usart.h"
#include <stdio.h>
#include <stdarg.h>

int __io_putchar(int ch){
 8002168:	b580      	push	{r7, lr}
 800216a:	b084      	sub	sp, #16
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
	uint8_t pchar = ch;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	b2db      	uxtb	r3, r3
 8002174:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart1, &pchar, 1, HAL_MAX_DELAY);
 8002176:	f107 010f 	add.w	r1, r7, #15
 800217a:	f04f 33ff 	mov.w	r3, #4294967295
 800217e:	2201      	movs	r2, #1
 8002180:	4803      	ldr	r0, [pc, #12]	; (8002190 <__io_putchar+0x28>)
 8002182:	f007 f947 	bl	8009414 <HAL_UART_Transmit>
	return ch;
 8002186:	687b      	ldr	r3, [r7, #4]
}
 8002188:	4618      	mov	r0, r3
 800218a:	3710      	adds	r7, #16
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}
 8002190:	20001010 	.word	0x20001010

08002194 <_log>:

void _log(Log_Subsystem_t subsystem, const char* msg, ...){
 8002194:	b40e      	push	{r1, r2, r3}
 8002196:	b580      	push	{r7, lr}
 8002198:	b085      	sub	sp, #20
 800219a:	af00      	add	r7, sp, #0
 800219c:	4603      	mov	r3, r0
 800219e:	71fb      	strb	r3, [r7, #7]
    va_list args;
	va_start(args, msg);
 80021a0:	f107 0320 	add.w	r3, r7, #32
 80021a4:	60fb      	str	r3, [r7, #12]
	switch(subsystem){
 80021a6:	79fb      	ldrb	r3, [r7, #7]
 80021a8:	2b05      	cmp	r3, #5
 80021aa:	d827      	bhi.n	80021fc <_log+0x68>
 80021ac:	a201      	add	r2, pc, #4	; (adr r2, 80021b4 <_log+0x20>)
 80021ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021b2:	bf00      	nop
 80021b4:	080021cd 	.word	0x080021cd
 80021b8:	080021d5 	.word	0x080021d5
 80021bc:	080021dd 	.word	0x080021dd
 80021c0:	080021e5 	.word	0x080021e5
 80021c4:	080021ed 	.word	0x080021ed
 80021c8:	080021f5 	.word	0x080021f5
		case(log_i2c):
			printf("Debug Subsystem I2C: ");
 80021cc:	4816      	ldr	r0, [pc, #88]	; (8002228 <_log+0x94>)
 80021ce:	f00b fc7f 	bl	800dad0 <iprintf>
				break;
 80021d2:	e016      	b.n	8002202 <_log+0x6e>
		case(log_lps22hh):
			printf("Debug Subsystem LPS22HH: ");
 80021d4:	4815      	ldr	r0, [pc, #84]	; (800222c <_log+0x98>)
 80021d6:	f00b fc7b 	bl	800dad0 <iprintf>
				break;
 80021da:	e012      	b.n	8002202 <_log+0x6e>
		case(log_iis2mdc):
			printf("Debug Subsystem IIS2MDC: ");
 80021dc:	4814      	ldr	r0, [pc, #80]	; (8002230 <_log+0x9c>)
 80021de:	f00b fc77 	bl	800dad0 <iprintf>
				break;
 80021e2:	e00e      	b.n	8002202 <_log+0x6e>
		case(log_hts221):
			printf("Debug Subsystem HTS221: ");
 80021e4:	4813      	ldr	r0, [pc, #76]	; (8002234 <_log+0xa0>)
 80021e6:	f00b fc73 	bl	800dad0 <iprintf>
				break;
 80021ea:	e00a      	b.n	8002202 <_log+0x6e>
		case(log_ism330dhcx):
			printf("Debug Subsystem ISM330DHCX: ");
 80021ec:	4812      	ldr	r0, [pc, #72]	; (8002238 <_log+0xa4>)
 80021ee:	f00b fc6f 	bl	800dad0 <iprintf>
				break;
 80021f2:	e006      	b.n	8002202 <_log+0x6e>
		case(log_mcp23017):
			printf("Debug Subsystem MCP23017: ");
 80021f4:	4811      	ldr	r0, [pc, #68]	; (800223c <_log+0xa8>)
 80021f6:	f00b fc6b 	bl	800dad0 <iprintf>
		        break;
 80021fa:	e002      	b.n	8002202 <_log+0x6e>
		default:
			printf("Unknown Debug Subsystem: ");
 80021fc:	4810      	ldr	r0, [pc, #64]	; (8002240 <_log+0xac>)
 80021fe:	f00b fc67 	bl	800dad0 <iprintf>
	}
	vfprintf(stdout, msg, args);
 8002202:	4b10      	ldr	r3, [pc, #64]	; (8002244 <_log+0xb0>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	68fa      	ldr	r2, [r7, #12]
 800220a:	69f9      	ldr	r1, [r7, #28]
 800220c:	4618      	mov	r0, r3
 800220e:	f00b fac1 	bl	800d794 <vfiprintf>
	printf("\n");
 8002212:	200a      	movs	r0, #10
 8002214:	f00b fc74 	bl	800db00 <putchar>
	va_end(args);
}
 8002218:	bf00      	nop
 800221a:	3714      	adds	r7, #20
 800221c:	46bd      	mov	sp, r7
 800221e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002222:	b003      	add	sp, #12
 8002224:	4770      	bx	lr
 8002226:	bf00      	nop
 8002228:	0800e7a8 	.word	0x0800e7a8
 800222c:	0800e7c0 	.word	0x0800e7c0
 8002230:	0800e7dc 	.word	0x0800e7dc
 8002234:	0800e7f8 	.word	0x0800e7f8
 8002238:	0800e814 	.word	0x0800e814
 800223c:	0800e834 	.word	0x0800e834
 8002240:	0800e850 	.word	0x0800e850
 8002244:	20000130 	.word	0x20000130

08002248 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b082      	sub	sp, #8
 800224c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800224e:	f000 febd 	bl	8002fcc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002252:	f000 f83d 	bl	80022d0 <SystemClock_Config>
  /* Initialize all configured peripherals */

  /* USER CODE BEGIN 2 */
  //MX_GPIO_Init();
  //MX_USART1_UART_Init();
  MX_USB_DEVICE_Init();
 8002256:	f00a fcb1 	bl	800cbbc <MX_USB_DEVICE_Init>
  InitButtons();
 800225a:	f000 f8a1 	bl	80023a0 <InitButtons>
  InitJoystick();
 800225e:	f000 f8cd 	bl	80023fc <InitJoystick>
  InitLEDs();
 8002262:	f000 f8f5 	bl	8002450 <InitLEDs>
  InitScreen();
 8002266:	f000 f927 	bl	80024b8 <InitScreen>
  InitTouchButtons();
 800226a:	f000 fab3 	bl	80027d4 <InitTouchButtons>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 for(uint8_t i = 0; i < 64; i++){
 800226e:	2300      	movs	r3, #0
 8002270:	71fb      	strb	r3, [r7, #7]
 8002272:	e00c      	b.n	800228e <main+0x46>
		 ButtonRead(&Buttons[i]);
 8002274:	79fa      	ldrb	r2, [r7, #7]
 8002276:	4613      	mov	r3, r2
 8002278:	00db      	lsls	r3, r3, #3
 800227a:	1a9b      	subs	r3, r3, r2
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	4a11      	ldr	r2, [pc, #68]	; (80022c4 <main+0x7c>)
 8002280:	4413      	add	r3, r2
 8002282:	4618      	mov	r0, r3
 8002284:	f7ff f808 	bl	8001298 <ButtonRead>
	 for(uint8_t i = 0; i < 64; i++){
 8002288:	79fb      	ldrb	r3, [r7, #7]
 800228a:	3301      	adds	r3, #1
 800228c:	71fb      	strb	r3, [r7, #7]
 800228e:	79fb      	ldrb	r3, [r7, #7]
 8002290:	2b3f      	cmp	r3, #63	; 0x3f
 8002292:	d9ef      	bls.n	8002274 <main+0x2c>
	 }
	 for(uint8_t i = 0; i < 12; i++){
 8002294:	2300      	movs	r3, #0
 8002296:	71bb      	strb	r3, [r7, #6]
 8002298:	e00c      	b.n	80022b4 <main+0x6c>
		 TouchButtonRead(&TouchButton[i]);
 800229a:	79ba      	ldrb	r2, [r7, #6]
 800229c:	4613      	mov	r3, r2
 800229e:	00db      	lsls	r3, r3, #3
 80022a0:	4413      	add	r3, r2
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	4a08      	ldr	r2, [pc, #32]	; (80022c8 <main+0x80>)
 80022a6:	4413      	add	r3, r2
 80022a8:	4618      	mov	r0, r3
 80022aa:	f7ff fb9c 	bl	80019e6 <TouchButtonRead>
	 for(uint8_t i = 0; i < 12; i++){
 80022ae:	79bb      	ldrb	r3, [r7, #6]
 80022b0:	3301      	adds	r3, #1
 80022b2:	71bb      	strb	r3, [r7, #6]
 80022b4:	79bb      	ldrb	r3, [r7, #6]
 80022b6:	2b0b      	cmp	r3, #11
 80022b8:	d9ef      	bls.n	800229a <main+0x52>
	 }
	JoystickRead(&Joystick);
 80022ba:	4804      	ldr	r0, [pc, #16]	; (80022cc <main+0x84>)
 80022bc:	f7ff f944 	bl	8001548 <JoystickRead>
	 for(uint8_t i = 0; i < 64; i++){
 80022c0:	e7d5      	b.n	800226e <main+0x26>
 80022c2:	bf00      	nop
 80022c4:	20000588 	.word	0x20000588
 80022c8:	20000d5c 	.word	0x20000d5c
 80022cc:	20000c88 	.word	0x20000c88

080022d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b094      	sub	sp, #80	; 0x50
 80022d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80022d6:	f107 0320 	add.w	r3, r7, #32
 80022da:	2230      	movs	r2, #48	; 0x30
 80022dc:	2100      	movs	r1, #0
 80022de:	4618      	mov	r0, r3
 80022e0:	f00b f8f6 	bl	800d4d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022e4:	f107 030c 	add.w	r3, r7, #12
 80022e8:	2200      	movs	r2, #0
 80022ea:	601a      	str	r2, [r3, #0]
 80022ec:	605a      	str	r2, [r3, #4]
 80022ee:	609a      	str	r2, [r3, #8]
 80022f0:	60da      	str	r2, [r3, #12]
 80022f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80022f4:	2300      	movs	r3, #0
 80022f6:	60bb      	str	r3, [r7, #8]
 80022f8:	4b27      	ldr	r3, [pc, #156]	; (8002398 <SystemClock_Config+0xc8>)
 80022fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fc:	4a26      	ldr	r2, [pc, #152]	; (8002398 <SystemClock_Config+0xc8>)
 80022fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002302:	6413      	str	r3, [r2, #64]	; 0x40
 8002304:	4b24      	ldr	r3, [pc, #144]	; (8002398 <SystemClock_Config+0xc8>)
 8002306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002308:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800230c:	60bb      	str	r3, [r7, #8]
 800230e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002310:	2300      	movs	r3, #0
 8002312:	607b      	str	r3, [r7, #4]
 8002314:	4b21      	ldr	r3, [pc, #132]	; (800239c <SystemClock_Config+0xcc>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a20      	ldr	r2, [pc, #128]	; (800239c <SystemClock_Config+0xcc>)
 800231a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800231e:	6013      	str	r3, [r2, #0]
 8002320:	4b1e      	ldr	r3, [pc, #120]	; (800239c <SystemClock_Config+0xcc>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002328:	607b      	str	r3, [r7, #4]
 800232a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800232c:	2301      	movs	r3, #1
 800232e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002330:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002334:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002336:	2302      	movs	r3, #2
 8002338:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800233a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800233e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8002340:	2319      	movs	r3, #25
 8002342:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8002344:	23c0      	movs	r3, #192	; 0xc0
 8002346:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002348:	2302      	movs	r3, #2
 800234a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800234c:	2304      	movs	r3, #4
 800234e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002350:	f107 0320 	add.w	r3, r7, #32
 8002354:	4618      	mov	r0, r3
 8002356:	f004 fda1 	bl	8006e9c <HAL_RCC_OscConfig>
 800235a:	4603      	mov	r3, r0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d001      	beq.n	8002364 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002360:	f000 fb28 	bl	80029b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002364:	230f      	movs	r3, #15
 8002366:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002368:	2302      	movs	r3, #2
 800236a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800236c:	2300      	movs	r3, #0
 800236e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002370:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002374:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002376:	2300      	movs	r3, #0
 8002378:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800237a:	f107 030c 	add.w	r3, r7, #12
 800237e:	2103      	movs	r1, #3
 8002380:	4618      	mov	r0, r3
 8002382:	f005 f803 	bl	800738c <HAL_RCC_ClockConfig>
 8002386:	4603      	mov	r3, r0
 8002388:	2b00      	cmp	r3, #0
 800238a:	d001      	beq.n	8002390 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800238c:	f000 fb12 	bl	80029b4 <Error_Handler>
  }
}
 8002390:	bf00      	nop
 8002392:	3750      	adds	r7, #80	; 0x50
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}
 8002398:	40023800 	.word	0x40023800
 800239c:	40007000 	.word	0x40007000

080023a0 <InitButtons>:

/* USER CODE BEGIN 4 */
void InitButtons(){
 80023a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023a2:	b087      	sub	sp, #28
 80023a4:	af04      	add	r7, sp, #16
	Button_Init_Struct_t Settings = {
 80023a6:	463b      	mov	r3, r7
 80023a8:	2200      	movs	r2, #0
 80023aa:	601a      	str	r2, [r3, #0]
 80023ac:	711a      	strb	r2, [r3, #4]
			.KeyFunction = 0,
			.ModKeyFunction = 0,
			.MouseFunction = 0,
			.WheelFunction = 0,
	};
	for(uint8_t i = 0; i < NUMBER_OF_IO_EXPANDERS*PINS_PER_EXPANDER; i++){
 80023ae:	2300      	movs	r3, #0
 80023b0:	71fb      	strb	r3, [r7, #7]
 80023b2:	e017      	b.n	80023e4 <InitButtons+0x44>
		Settings.ButtonIDNumber = i;
 80023b4:	79fb      	ldrb	r3, [r7, #7]
 80023b6:	703b      	strb	r3, [r7, #0]
        ButtonInit(Settings, &Buttons[i], ButtonIO_Driver);
 80023b8:	79fa      	ldrb	r2, [r7, #7]
 80023ba:	4613      	mov	r3, r2
 80023bc:	00db      	lsls	r3, r3, #3
 80023be:	1a9b      	subs	r3, r3, r2
 80023c0:	009b      	lsls	r3, r3, #2
 80023c2:	4a0c      	ldr	r2, [pc, #48]	; (80023f4 <InitButtons+0x54>)
 80023c4:	189e      	adds	r6, r3, r2
 80023c6:	4d0c      	ldr	r5, [pc, #48]	; (80023f8 <InitButtons+0x58>)
 80023c8:	466c      	mov	r4, sp
 80023ca:	1d2b      	adds	r3, r5, #4
 80023cc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80023ce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80023d2:	682b      	ldr	r3, [r5, #0]
 80023d4:	4632      	mov	r2, r6
 80023d6:	4639      	mov	r1, r7
 80023d8:	c903      	ldmia	r1, {r0, r1}
 80023da:	f7fe ff2b 	bl	8001234 <ButtonInit>
	for(uint8_t i = 0; i < NUMBER_OF_IO_EXPANDERS*PINS_PER_EXPANDER; i++){
 80023de:	79fb      	ldrb	r3, [r7, #7]
 80023e0:	3301      	adds	r3, #1
 80023e2:	71fb      	strb	r3, [r7, #7]
 80023e4:	79fb      	ldrb	r3, [r7, #7]
 80023e6:	2b3f      	cmp	r3, #63	; 0x3f
 80023e8:	d9e4      	bls.n	80023b4 <InitButtons+0x14>
	}
}
 80023ea:	bf00      	nop
 80023ec:	bf00      	nop
 80023ee:	370c      	adds	r7, #12
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023f4:	20000588 	.word	0x20000588
 80023f8:	0800e950 	.word	0x0800e950

080023fc <InitJoystick>:

void InitJoystick(){
 80023fc:	b5b0      	push	{r4, r5, r7, lr}
 80023fe:	b096      	sub	sp, #88	; 0x58
 8002400:	af0c      	add	r7, sp, #48	; 0x30
    Joystick_Init_Struct_t Settings = {
 8002402:	1d3b      	adds	r3, r7, #4
 8002404:	2224      	movs	r2, #36	; 0x24
 8002406:	2100      	movs	r1, #0
 8002408:	4618      	mov	r0, r3
 800240a:	f00b f861 	bl	800d4d0 <memset>
 800240e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002412:	80bb      	strh	r3, [r7, #4]
 8002414:	2301      	movs	r3, #1
 8002416:	71bb      	strb	r3, [r7, #6]
    		.DeadZone = 2000,
			.Mode = Joystick4Way
    };
    JoystickInit(Settings, &Joystick, JoystickIO_Driver);
 8002418:	4b0b      	ldr	r3, [pc, #44]	; (8002448 <InitJoystick+0x4c>)
 800241a:	ac06      	add	r4, sp, #24
 800241c:	461d      	mov	r5, r3
 800241e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002420:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002422:	682b      	ldr	r3, [r5, #0]
 8002424:	6023      	str	r3, [r4, #0]
 8002426:	4b09      	ldr	r3, [pc, #36]	; (800244c <InitJoystick+0x50>)
 8002428:	9305      	str	r3, [sp, #20]
 800242a:	466d      	mov	r5, sp
 800242c:	f107 0414 	add.w	r4, r7, #20
 8002430:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002432:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002434:	6823      	ldr	r3, [r4, #0]
 8002436:	602b      	str	r3, [r5, #0]
 8002438:	1d3b      	adds	r3, r7, #4
 800243a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800243c:	f7ff f826 	bl	800148c <JoystickInit>
}
 8002440:	bf00      	nop
 8002442:	3728      	adds	r7, #40	; 0x28
 8002444:	46bd      	mov	sp, r7
 8002446:	bdb0      	pop	{r4, r5, r7, pc}
 8002448:	0800e964 	.word	0x0800e964
 800244c:	20000c88 	.word	0x20000c88

08002450 <InitLEDs>:

void InitLEDs(){
 8002450:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002452:	b087      	sub	sp, #28
 8002454:	af04      	add	r7, sp, #16
	SerialLED_InitStruct_t LED_Settings = {
 8002456:	463b      	mov	r3, r7
 8002458:	2200      	movs	r2, #0
 800245a:	601a      	str	r2, [r3, #0]
 800245c:	809a      	strh	r2, [r3, #4]
 800245e:	23ff      	movs	r3, #255	; 0xff
 8002460:	70bb      	strb	r3, [r7, #2]
 8002462:	23ff      	movs	r3, #255	; 0xff
 8002464:	713b      	strb	r3, [r7, #4]
			.green = 0xFF,
			.red = 0x00,
			.blue = 0xFF
	};
	for(uint8_t i = 0; i < NUMBER_OF_LEDS; i++){
 8002466:	2300      	movs	r3, #0
 8002468:	71fb      	strb	r3, [r7, #7]
 800246a:	e018      	b.n	800249e <InitLEDs+0x4e>
		LED_Settings.address = i;
 800246c:	79fb      	ldrb	r3, [r7, #7]
 800246e:	b29b      	uxth	r3, r3
 8002470:	803b      	strh	r3, [r7, #0]
		SerialLEDInit(LED_Settings,&LED[i],LED_Drv);
 8002472:	79fa      	ldrb	r2, [r7, #7]
 8002474:	4613      	mov	r3, r2
 8002476:	00db      	lsls	r3, r3, #3
 8002478:	1a9b      	subs	r3, r3, r2
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	4a0c      	ldr	r2, [pc, #48]	; (80024b0 <InitLEDs+0x60>)
 800247e:	189e      	adds	r6, r3, r2
 8002480:	4d0c      	ldr	r5, [pc, #48]	; (80024b4 <InitLEDs+0x64>)
 8002482:	466c      	mov	r4, sp
 8002484:	1d2b      	adds	r3, r5, #4
 8002486:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002488:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800248c:	682b      	ldr	r3, [r5, #0]
 800248e:	4632      	mov	r2, r6
 8002490:	4639      	mov	r1, r7
 8002492:	c903      	ldmia	r1, {r0, r1}
 8002494:	f7ff f99e 	bl	80017d4 <SerialLEDInit>
	for(uint8_t i = 0; i < NUMBER_OF_LEDS; i++){
 8002498:	79fb      	ldrb	r3, [r7, #7]
 800249a:	3301      	adds	r3, #1
 800249c:	71fb      	strb	r3, [r7, #7]
 800249e:	79fb      	ldrb	r3, [r7, #7]
 80024a0:	2b03      	cmp	r3, #3
 80024a2:	d9e3      	bls.n	800246c <InitLEDs+0x1c>
	}
}
 80024a4:	bf00      	nop
 80024a6:	bf00      	nop
 80024a8:	370c      	adds	r7, #12
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024ae:	bf00      	nop
 80024b0:	20000cc8 	.word	0x20000cc8
 80024b4:	20000030 	.word	0x20000030

080024b8 <InitScreen>:

void InitScreen(){
 80024b8:	b5b0      	push	{r4, r5, r7, lr}
 80024ba:	b08e      	sub	sp, #56	; 0x38
 80024bc:	af06      	add	r7, sp, #24
	ILI9341_Init_Struct_t Settings = {
 80024be:	4a9c      	ldr	r2, [pc, #624]	; (8002730 <InitScreen+0x278>)
 80024c0:	f107 0314 	add.w	r3, r7, #20
 80024c4:	ca07      	ldmia	r2, {r0, r1, r2}
 80024c6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			.Orientation = XYExchangeXYMirror,
			.ScreenHeight = 240,
			.ScreenWidth = 320
	};
	ILI9341_Init(Settings, &LCD, ILI931_IO);
 80024ca:	4b9a      	ldr	r3, [pc, #616]	; (8002734 <InitScreen+0x27c>)
 80024cc:	466c      	mov	r4, sp
 80024ce:	461d      	mov	r5, r3
 80024d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024d4:	682b      	ldr	r3, [r5, #0]
 80024d6:	6023      	str	r3, [r4, #0]
 80024d8:	4b97      	ldr	r3, [pc, #604]	; (8002738 <InitScreen+0x280>)
 80024da:	f107 0214 	add.w	r2, r7, #20
 80024de:	ca07      	ldmia	r2, {r0, r1, r2}
 80024e0:	f7fe f936 	bl	8000750 <ILI9341_Init>
    ILI9341_Color_t Color = {
 80024e4:	2300      	movs	r3, #0
 80024e6:	743b      	strb	r3, [r7, #16]
 80024e8:	2300      	movs	r3, #0
 80024ea:	747b      	strb	r3, [r7, #17]
 80024ec:	2300      	movs	r3, #0
 80024ee:	74bb      	strb	r3, [r7, #18]
    		.red = 0,
    		.green = 0,
			.blue = 0
    };
    ILI9341_FillSceen(&LCD, Color);
 80024f0:	6939      	ldr	r1, [r7, #16]
 80024f2:	4891      	ldr	r0, [pc, #580]	; (8002738 <InitScreen+0x280>)
 80024f4:	f7fe fa75 	bl	80009e2 <ILI9341_FillSceen>
    ILI9341_Image_t Image = {
 80024f8:	4b90      	ldr	r3, [pc, #576]	; (800273c <InitScreen+0x284>)
 80024fa:	463c      	mov	r4, r7
 80024fc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80024fe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    		.Height = 62,
			.Width = 62,
			.ImageLength = 62*62*3,
			.ImageData = char_image
    };
    LCD.Cursor.X = 40 - Image.Width / 2;
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	085b      	lsrs	r3, r3, #1
 8002506:	b29b      	uxth	r3, r3
 8002508:	f1c3 0328 	rsb	r3, r3, #40	; 0x28
 800250c:	b29b      	uxth	r3, r3
 800250e:	b21a      	sxth	r2, r3
 8002510:	4b89      	ldr	r3, [pc, #548]	; (8002738 <InitScreen+0x280>)
 8002512:	819a      	strh	r2, [r3, #12]
    LCD.Cursor.Y = 40 - Image.Height / 2;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	085b      	lsrs	r3, r3, #1
 8002518:	b29b      	uxth	r3, r3
 800251a:	f1c3 0328 	rsb	r3, r3, #40	; 0x28
 800251e:	b29b      	uxth	r3, r3
 8002520:	b21a      	sxth	r2, r3
 8002522:	4b85      	ldr	r3, [pc, #532]	; (8002738 <InitScreen+0x280>)
 8002524:	81da      	strh	r2, [r3, #14]
    ILI9341_DisplayImage(&LCD, Image);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	9300      	str	r3, [sp, #0]
 800252a:	463b      	mov	r3, r7
 800252c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800252e:	4882      	ldr	r0, [pc, #520]	; (8002738 <InitScreen+0x280>)
 8002530:	f7fe fac4 	bl	8000abc <ILI9341_DisplayImage>

    Image.ImageData = bag_image;
 8002534:	4b82      	ldr	r3, [pc, #520]	; (8002740 <InitScreen+0x288>)
 8002536:	60fb      	str	r3, [r7, #12]
    LCD.Cursor.X = 120 - Image.Width / 2;
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	085b      	lsrs	r3, r3, #1
 800253c:	b29b      	uxth	r3, r3
 800253e:	f1c3 0378 	rsb	r3, r3, #120	; 0x78
 8002542:	b29b      	uxth	r3, r3
 8002544:	b21a      	sxth	r2, r3
 8002546:	4b7c      	ldr	r3, [pc, #496]	; (8002738 <InitScreen+0x280>)
 8002548:	819a      	strh	r2, [r3, #12]
    LCD.Cursor.Y = 40 - Image.Height / 2;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	085b      	lsrs	r3, r3, #1
 800254e:	b29b      	uxth	r3, r3
 8002550:	f1c3 0328 	rsb	r3, r3, #40	; 0x28
 8002554:	b29b      	uxth	r3, r3
 8002556:	b21a      	sxth	r2, r3
 8002558:	4b77      	ldr	r3, [pc, #476]	; (8002738 <InitScreen+0x280>)
 800255a:	81da      	strh	r2, [r3, #14]
    ILI9341_DisplayImage(&LCD, Image);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	9300      	str	r3, [sp, #0]
 8002560:	463b      	mov	r3, r7
 8002562:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002564:	4874      	ldr	r0, [pc, #464]	; (8002738 <InitScreen+0x280>)
 8002566:	f7fe faa9 	bl	8000abc <ILI9341_DisplayImage>

    Image.ImageData = mounts_image;
 800256a:	4b76      	ldr	r3, [pc, #472]	; (8002744 <InitScreen+0x28c>)
 800256c:	60fb      	str	r3, [r7, #12]
    LCD.Cursor.X = 200 - Image.Width / 2;
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	085b      	lsrs	r3, r3, #1
 8002572:	b29b      	uxth	r3, r3
 8002574:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
 8002578:	b29b      	uxth	r3, r3
 800257a:	b21a      	sxth	r2, r3
 800257c:	4b6e      	ldr	r3, [pc, #440]	; (8002738 <InitScreen+0x280>)
 800257e:	819a      	strh	r2, [r3, #12]
    LCD.Cursor.Y = 40 - Image.Height / 2;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	085b      	lsrs	r3, r3, #1
 8002584:	b29b      	uxth	r3, r3
 8002586:	f1c3 0328 	rsb	r3, r3, #40	; 0x28
 800258a:	b29b      	uxth	r3, r3
 800258c:	b21a      	sxth	r2, r3
 800258e:	4b6a      	ldr	r3, [pc, #424]	; (8002738 <InitScreen+0x280>)
 8002590:	81da      	strh	r2, [r3, #14]
    ILI9341_DisplayImage(&LCD, Image);
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	9300      	str	r3, [sp, #0]
 8002596:	463b      	mov	r3, r7
 8002598:	cb0e      	ldmia	r3, {r1, r2, r3}
 800259a:	4867      	ldr	r0, [pc, #412]	; (8002738 <InitScreen+0x280>)
 800259c:	f7fe fa8e 	bl	8000abc <ILI9341_DisplayImage>

    Image.ImageData = LFD_image;
 80025a0:	4b69      	ldr	r3, [pc, #420]	; (8002748 <InitScreen+0x290>)
 80025a2:	60fb      	str	r3, [r7, #12]
    LCD.Cursor.X = 280 - Image.Width / 2;
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	085b      	lsrs	r3, r3, #1
 80025a8:	b29b      	uxth	r3, r3
 80025aa:	f5c3 738c 	rsb	r3, r3, #280	; 0x118
 80025ae:	b29b      	uxth	r3, r3
 80025b0:	b21a      	sxth	r2, r3
 80025b2:	4b61      	ldr	r3, [pc, #388]	; (8002738 <InitScreen+0x280>)
 80025b4:	819a      	strh	r2, [r3, #12]
    LCD.Cursor.Y = 40 - Image.Height / 2;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	085b      	lsrs	r3, r3, #1
 80025ba:	b29b      	uxth	r3, r3
 80025bc:	f1c3 0328 	rsb	r3, r3, #40	; 0x28
 80025c0:	b29b      	uxth	r3, r3
 80025c2:	b21a      	sxth	r2, r3
 80025c4:	4b5c      	ldr	r3, [pc, #368]	; (8002738 <InitScreen+0x280>)
 80025c6:	81da      	strh	r2, [r3, #14]
    ILI9341_DisplayImage(&LCD, Image);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	9300      	str	r3, [sp, #0]
 80025cc:	463b      	mov	r3, r7
 80025ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80025d0:	4859      	ldr	r0, [pc, #356]	; (8002738 <InitScreen+0x280>)
 80025d2:	f7fe fa73 	bl	8000abc <ILI9341_DisplayImage>

    Image.ImageData = spells_image;
 80025d6:	4b5d      	ldr	r3, [pc, #372]	; (800274c <InitScreen+0x294>)
 80025d8:	60fb      	str	r3, [r7, #12]
    LCD.Cursor.X = 40 - Image.Width / 2;
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	085b      	lsrs	r3, r3, #1
 80025de:	b29b      	uxth	r3, r3
 80025e0:	f1c3 0328 	rsb	r3, r3, #40	; 0x28
 80025e4:	b29b      	uxth	r3, r3
 80025e6:	b21a      	sxth	r2, r3
 80025e8:	4b53      	ldr	r3, [pc, #332]	; (8002738 <InitScreen+0x280>)
 80025ea:	819a      	strh	r2, [r3, #12]
    LCD.Cursor.Y = 120 - Image.Height / 2;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	085b      	lsrs	r3, r3, #1
 80025f0:	b29b      	uxth	r3, r3
 80025f2:	f1c3 0378 	rsb	r3, r3, #120	; 0x78
 80025f6:	b29b      	uxth	r3, r3
 80025f8:	b21a      	sxth	r2, r3
 80025fa:	4b4f      	ldr	r3, [pc, #316]	; (8002738 <InitScreen+0x280>)
 80025fc:	81da      	strh	r2, [r3, #14]
    ILI9341_DisplayImage(&LCD, Image);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	9300      	str	r3, [sp, #0]
 8002602:	463b      	mov	r3, r7
 8002604:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002606:	484c      	ldr	r0, [pc, #304]	; (8002738 <InitScreen+0x280>)
 8002608:	f7fe fa58 	bl	8000abc <ILI9341_DisplayImage>

    Image.ImageData = talents_image;
 800260c:	4b50      	ldr	r3, [pc, #320]	; (8002750 <InitScreen+0x298>)
 800260e:	60fb      	str	r3, [r7, #12]
    LCD.Cursor.X = 120 - Image.Width / 2;
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	085b      	lsrs	r3, r3, #1
 8002614:	b29b      	uxth	r3, r3
 8002616:	f1c3 0378 	rsb	r3, r3, #120	; 0x78
 800261a:	b29b      	uxth	r3, r3
 800261c:	b21a      	sxth	r2, r3
 800261e:	4b46      	ldr	r3, [pc, #280]	; (8002738 <InitScreen+0x280>)
 8002620:	819a      	strh	r2, [r3, #12]
    LCD.Cursor.Y = 120 - Image.Height / 2;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	085b      	lsrs	r3, r3, #1
 8002626:	b29b      	uxth	r3, r3
 8002628:	f1c3 0378 	rsb	r3, r3, #120	; 0x78
 800262c:	b29b      	uxth	r3, r3
 800262e:	b21a      	sxth	r2, r3
 8002630:	4b41      	ldr	r3, [pc, #260]	; (8002738 <InitScreen+0x280>)
 8002632:	81da      	strh	r2, [r3, #14]
    ILI9341_DisplayImage(&LCD, Image);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	9300      	str	r3, [sp, #0]
 8002638:	463b      	mov	r3, r7
 800263a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800263c:	483e      	ldr	r0, [pc, #248]	; (8002738 <InitScreen+0x280>)
 800263e:	f7fe fa3d 	bl	8000abc <ILI9341_DisplayImage>

    Image.ImageData = social_image;
 8002642:	4b44      	ldr	r3, [pc, #272]	; (8002754 <InitScreen+0x29c>)
 8002644:	60fb      	str	r3, [r7, #12]
    LCD.Cursor.X = 200 - Image.Width / 2;
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	085b      	lsrs	r3, r3, #1
 800264a:	b29b      	uxth	r3, r3
 800264c:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
 8002650:	b29b      	uxth	r3, r3
 8002652:	b21a      	sxth	r2, r3
 8002654:	4b38      	ldr	r3, [pc, #224]	; (8002738 <InitScreen+0x280>)
 8002656:	819a      	strh	r2, [r3, #12]
    LCD.Cursor.Y = 120 - Image.Height / 2;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	085b      	lsrs	r3, r3, #1
 800265c:	b29b      	uxth	r3, r3
 800265e:	f1c3 0378 	rsb	r3, r3, #120	; 0x78
 8002662:	b29b      	uxth	r3, r3
 8002664:	b21a      	sxth	r2, r3
 8002666:	4b34      	ldr	r3, [pc, #208]	; (8002738 <InitScreen+0x280>)
 8002668:	81da      	strh	r2, [r3, #14]
    ILI9341_DisplayImage(&LCD, Image);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	9300      	str	r3, [sp, #0]
 800266e:	463b      	mov	r3, r7
 8002670:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002672:	4831      	ldr	r0, [pc, #196]	; (8002738 <InitScreen+0x280>)
 8002674:	f7fe fa22 	bl	8000abc <ILI9341_DisplayImage>

    Image.ImageData = guild_image;
 8002678:	4b37      	ldr	r3, [pc, #220]	; (8002758 <InitScreen+0x2a0>)
 800267a:	60fb      	str	r3, [r7, #12]
    LCD.Cursor.X = 280 - Image.Width / 2;
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	085b      	lsrs	r3, r3, #1
 8002680:	b29b      	uxth	r3, r3
 8002682:	f5c3 738c 	rsb	r3, r3, #280	; 0x118
 8002686:	b29b      	uxth	r3, r3
 8002688:	b21a      	sxth	r2, r3
 800268a:	4b2b      	ldr	r3, [pc, #172]	; (8002738 <InitScreen+0x280>)
 800268c:	819a      	strh	r2, [r3, #12]
    LCD.Cursor.Y = 120 - Image.Height / 2;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	085b      	lsrs	r3, r3, #1
 8002692:	b29b      	uxth	r3, r3
 8002694:	f1c3 0378 	rsb	r3, r3, #120	; 0x78
 8002698:	b29b      	uxth	r3, r3
 800269a:	b21a      	sxth	r2, r3
 800269c:	4b26      	ldr	r3, [pc, #152]	; (8002738 <InitScreen+0x280>)
 800269e:	81da      	strh	r2, [r3, #14]
    ILI9341_DisplayImage(&LCD, Image);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	9300      	str	r3, [sp, #0]
 80026a4:	463b      	mov	r3, r7
 80026a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026a8:	4823      	ldr	r0, [pc, #140]	; (8002738 <InitScreen+0x280>)
 80026aa:	f7fe fa07 	bl	8000abc <ILI9341_DisplayImage>

    Image.ImageData = map_image;
 80026ae:	4b2b      	ldr	r3, [pc, #172]	; (800275c <InitScreen+0x2a4>)
 80026b0:	60fb      	str	r3, [r7, #12]
    LCD.Cursor.X = 40 - Image.Width / 2;
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	085b      	lsrs	r3, r3, #1
 80026b6:	b29b      	uxth	r3, r3
 80026b8:	f1c3 0328 	rsb	r3, r3, #40	; 0x28
 80026bc:	b29b      	uxth	r3, r3
 80026be:	b21a      	sxth	r2, r3
 80026c0:	4b1d      	ldr	r3, [pc, #116]	; (8002738 <InitScreen+0x280>)
 80026c2:	819a      	strh	r2, [r3, #12]
    LCD.Cursor.Y = 200 - Image.Height / 2;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	085b      	lsrs	r3, r3, #1
 80026c8:	b29b      	uxth	r3, r3
 80026ca:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
 80026ce:	b29b      	uxth	r3, r3
 80026d0:	b21a      	sxth	r2, r3
 80026d2:	4b19      	ldr	r3, [pc, #100]	; (8002738 <InitScreen+0x280>)
 80026d4:	81da      	strh	r2, [r3, #14]
    ILI9341_DisplayImage(&LCD, Image);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	9300      	str	r3, [sp, #0]
 80026da:	463b      	mov	r3, r7
 80026dc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026de:	4816      	ldr	r0, [pc, #88]	; (8002738 <InitScreen+0x280>)
 80026e0:	f7fe f9ec 	bl	8000abc <ILI9341_DisplayImage>

    Image.ImageData = achievements_image;
 80026e4:	4b1e      	ldr	r3, [pc, #120]	; (8002760 <InitScreen+0x2a8>)
 80026e6:	60fb      	str	r3, [r7, #12]
    LCD.Cursor.X = 120 - Image.Width / 2;
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	085b      	lsrs	r3, r3, #1
 80026ec:	b29b      	uxth	r3, r3
 80026ee:	f1c3 0378 	rsb	r3, r3, #120	; 0x78
 80026f2:	b29b      	uxth	r3, r3
 80026f4:	b21a      	sxth	r2, r3
 80026f6:	4b10      	ldr	r3, [pc, #64]	; (8002738 <InitScreen+0x280>)
 80026f8:	819a      	strh	r2, [r3, #12]
    LCD.Cursor.Y = 200 - Image.Height / 2;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	085b      	lsrs	r3, r3, #1
 80026fe:	b29b      	uxth	r3, r3
 8002700:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
 8002704:	b29b      	uxth	r3, r3
 8002706:	b21a      	sxth	r2, r3
 8002708:	4b0b      	ldr	r3, [pc, #44]	; (8002738 <InitScreen+0x280>)
 800270a:	81da      	strh	r2, [r3, #14]
    ILI9341_DisplayImage(&LCD, Image);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	9300      	str	r3, [sp, #0]
 8002710:	463b      	mov	r3, r7
 8002712:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002714:	4808      	ldr	r0, [pc, #32]	; (8002738 <InitScreen+0x280>)
 8002716:	f7fe f9d1 	bl	8000abc <ILI9341_DisplayImage>

    Image.ImageData = adventureguide_image;
 800271a:	4b12      	ldr	r3, [pc, #72]	; (8002764 <InitScreen+0x2ac>)
 800271c:	60fb      	str	r3, [r7, #12]
    LCD.Cursor.X = 200 - Image.Width / 2;
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	085b      	lsrs	r3, r3, #1
 8002722:	b29b      	uxth	r3, r3
 8002724:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
 8002728:	b29b      	uxth	r3, r3
 800272a:	b21a      	sxth	r2, r3
 800272c:	e01c      	b.n	8002768 <InitScreen+0x2b0>
 800272e:	bf00      	nop
 8002730:	0800e86c 	.word	0x0800e86c
 8002734:	20000014 	.word	0x20000014
 8002738:	20000d38 	.word	0x20000d38
 800273c:	0800e878 	.word	0x0800e878
 8002740:	080116b0 	.word	0x080116b0
 8002744:	080143bc 	.word	0x080143bc
 8002748:	080170c8 	.word	0x080170c8
 800274c:	08019dd4 	.word	0x08019dd4
 8002750:	0801cae0 	.word	0x0801cae0
 8002754:	0801f7ec 	.word	0x0801f7ec
 8002758:	080224f8 	.word	0x080224f8
 800275c:	08025204 	.word	0x08025204
 8002760:	08027f10 	.word	0x08027f10
 8002764:	0802ac1c 	.word	0x0802ac1c
 8002768:	4b18      	ldr	r3, [pc, #96]	; (80027cc <InitScreen+0x314>)
 800276a:	819a      	strh	r2, [r3, #12]
    LCD.Cursor.Y = 200 - Image.Height / 2;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	085b      	lsrs	r3, r3, #1
 8002770:	b29b      	uxth	r3, r3
 8002772:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
 8002776:	b29b      	uxth	r3, r3
 8002778:	b21a      	sxth	r2, r3
 800277a:	4b14      	ldr	r3, [pc, #80]	; (80027cc <InitScreen+0x314>)
 800277c:	81da      	strh	r2, [r3, #14]
    ILI9341_DisplayImage(&LCD, Image);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	9300      	str	r3, [sp, #0]
 8002782:	463b      	mov	r3, r7
 8002784:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002786:	4811      	ldr	r0, [pc, #68]	; (80027cc <InitScreen+0x314>)
 8002788:	f7fe f998 	bl	8000abc <ILI9341_DisplayImage>

    Image.ImageData = menu_image;
 800278c:	4b10      	ldr	r3, [pc, #64]	; (80027d0 <InitScreen+0x318>)
 800278e:	60fb      	str	r3, [r7, #12]
    LCD.Cursor.X = 280 - Image.Width / 2;
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	085b      	lsrs	r3, r3, #1
 8002794:	b29b      	uxth	r3, r3
 8002796:	f5c3 738c 	rsb	r3, r3, #280	; 0x118
 800279a:	b29b      	uxth	r3, r3
 800279c:	b21a      	sxth	r2, r3
 800279e:	4b0b      	ldr	r3, [pc, #44]	; (80027cc <InitScreen+0x314>)
 80027a0:	819a      	strh	r2, [r3, #12]
    LCD.Cursor.Y = 200 - Image.Height / 2;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	085b      	lsrs	r3, r3, #1
 80027a6:	b29b      	uxth	r3, r3
 80027a8:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
 80027ac:	b29b      	uxth	r3, r3
 80027ae:	b21a      	sxth	r2, r3
 80027b0:	4b06      	ldr	r3, [pc, #24]	; (80027cc <InitScreen+0x314>)
 80027b2:	81da      	strh	r2, [r3, #14]
    ILI9341_DisplayImage(&LCD, Image);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	9300      	str	r3, [sp, #0]
 80027b8:	463b      	mov	r3, r7
 80027ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80027bc:	4803      	ldr	r0, [pc, #12]	; (80027cc <InitScreen+0x314>)
 80027be:	f7fe f97d 	bl	8000abc <ILI9341_DisplayImage>
}
 80027c2:	bf00      	nop
 80027c4:	3720      	adds	r7, #32
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bdb0      	pop	{r4, r5, r7, pc}
 80027ca:	bf00      	nop
 80027cc:	20000d38 	.word	0x20000d38
 80027d0:	0802d928 	.word	0x0802d928

080027d4 <InitTouchButtons>:

//void InitTouch(){
    //FT6206_Init(&TouchScreen, FT6202_Drv);
//}
void InitTouchButtons(){
 80027d4:	b5b0      	push	{r4, r5, r7, lr}
 80027d6:	b08a      	sub	sp, #40	; 0x28
 80027d8:	af06      	add	r7, sp, #24
	TouchButton_Init_Struct_t Settings = {
 80027da:	4a68      	ldr	r2, [pc, #416]	; (800297c <InitTouchButtons+0x1a8>)
 80027dc:	1d3b      	adds	r3, r7, #4
 80027de:	ca07      	ldmia	r2, {r0, r1, r2}
 80027e0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			.KeyFunction = 0,
			.ModKeyFunction = 0,
			.WheelFunction = 0,
			.MouseFunction = 0
	};
	TouchButtonInit(Settings, &TouchButton[0], TouchButton_IO_Driver);
 80027e4:	4b66      	ldr	r3, [pc, #408]	; (8002980 <InitTouchButtons+0x1ac>)
 80027e6:	466c      	mov	r4, sp
 80027e8:	461d      	mov	r5, r3
 80027ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027ee:	682b      	ldr	r3, [r5, #0]
 80027f0:	6023      	str	r3, [r4, #0]
 80027f2:	4b64      	ldr	r3, [pc, #400]	; (8002984 <InitTouchButtons+0x1b0>)
 80027f4:	1d3a      	adds	r2, r7, #4
 80027f6:	ca07      	ldmia	r2, {r0, r1, r2}
 80027f8:	f7ff f8c8 	bl	800198c <TouchButtonInit>

	Settings.TopLeftBound.X_Position = 120 - 31;
 80027fc:	2359      	movs	r3, #89	; 0x59
 80027fe:	80bb      	strh	r3, [r7, #4]
	Settings.BottomRightBound.X_Position = 120 + 31;
 8002800:	2397      	movs	r3, #151	; 0x97
 8002802:	813b      	strh	r3, [r7, #8]
	TouchButtonInit(Settings, &TouchButton[1], TouchButton_IO_Driver);
 8002804:	4b5e      	ldr	r3, [pc, #376]	; (8002980 <InitTouchButtons+0x1ac>)
 8002806:	466c      	mov	r4, sp
 8002808:	461d      	mov	r5, r3
 800280a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800280c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800280e:	682b      	ldr	r3, [r5, #0]
 8002810:	6023      	str	r3, [r4, #0]
 8002812:	4b5d      	ldr	r3, [pc, #372]	; (8002988 <InitTouchButtons+0x1b4>)
 8002814:	1d3a      	adds	r2, r7, #4
 8002816:	ca07      	ldmia	r2, {r0, r1, r2}
 8002818:	f7ff f8b8 	bl	800198c <TouchButtonInit>

	Settings.TopLeftBound.X_Position = 200 - 31;
 800281c:	23a9      	movs	r3, #169	; 0xa9
 800281e:	80bb      	strh	r3, [r7, #4]
	Settings.BottomRightBound.X_Position = 200 + 31;
 8002820:	23e7      	movs	r3, #231	; 0xe7
 8002822:	813b      	strh	r3, [r7, #8]
	TouchButtonInit(Settings, &TouchButton[2], TouchButton_IO_Driver);
 8002824:	4b56      	ldr	r3, [pc, #344]	; (8002980 <InitTouchButtons+0x1ac>)
 8002826:	466c      	mov	r4, sp
 8002828:	461d      	mov	r5, r3
 800282a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800282c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800282e:	682b      	ldr	r3, [r5, #0]
 8002830:	6023      	str	r3, [r4, #0]
 8002832:	4b56      	ldr	r3, [pc, #344]	; (800298c <InitTouchButtons+0x1b8>)
 8002834:	1d3a      	adds	r2, r7, #4
 8002836:	ca07      	ldmia	r2, {r0, r1, r2}
 8002838:	f7ff f8a8 	bl	800198c <TouchButtonInit>

	Settings.TopLeftBound.X_Position = 280 - 31;
 800283c:	23f9      	movs	r3, #249	; 0xf9
 800283e:	80bb      	strh	r3, [r7, #4]
	Settings.BottomRightBound.X_Position = 280 + 31;
 8002840:	f240 1337 	movw	r3, #311	; 0x137
 8002844:	813b      	strh	r3, [r7, #8]
	TouchButtonInit(Settings, &TouchButton[3], TouchButton_IO_Driver);
 8002846:	4b4e      	ldr	r3, [pc, #312]	; (8002980 <InitTouchButtons+0x1ac>)
 8002848:	466c      	mov	r4, sp
 800284a:	461d      	mov	r5, r3
 800284c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800284e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002850:	682b      	ldr	r3, [r5, #0]
 8002852:	6023      	str	r3, [r4, #0]
 8002854:	4b4e      	ldr	r3, [pc, #312]	; (8002990 <InitTouchButtons+0x1bc>)
 8002856:	1d3a      	adds	r2, r7, #4
 8002858:	ca07      	ldmia	r2, {r0, r1, r2}
 800285a:	f7ff f897 	bl	800198c <TouchButtonInit>

	Settings.TopLeftBound.X_Position = 40 - 31;
 800285e:	2309      	movs	r3, #9
 8002860:	80bb      	strh	r3, [r7, #4]
	Settings.BottomRightBound.X_Position = 40 + 31;
 8002862:	2347      	movs	r3, #71	; 0x47
 8002864:	813b      	strh	r3, [r7, #8]
	Settings.TopLeftBound.Y_Position = 120 - 31;
 8002866:	2359      	movs	r3, #89	; 0x59
 8002868:	80fb      	strh	r3, [r7, #6]
	Settings.BottomRightBound.Y_Position = 120 + 31;
 800286a:	2397      	movs	r3, #151	; 0x97
 800286c:	817b      	strh	r3, [r7, #10]
	TouchButtonInit(Settings, &TouchButton[4], TouchButton_IO_Driver);
 800286e:	4b44      	ldr	r3, [pc, #272]	; (8002980 <InitTouchButtons+0x1ac>)
 8002870:	466c      	mov	r4, sp
 8002872:	461d      	mov	r5, r3
 8002874:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002876:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002878:	682b      	ldr	r3, [r5, #0]
 800287a:	6023      	str	r3, [r4, #0]
 800287c:	4b45      	ldr	r3, [pc, #276]	; (8002994 <InitTouchButtons+0x1c0>)
 800287e:	1d3a      	adds	r2, r7, #4
 8002880:	ca07      	ldmia	r2, {r0, r1, r2}
 8002882:	f7ff f883 	bl	800198c <TouchButtonInit>

	Settings.TopLeftBound.X_Position = 120 - 31;
 8002886:	2359      	movs	r3, #89	; 0x59
 8002888:	80bb      	strh	r3, [r7, #4]
	Settings.BottomRightBound.X_Position = 120 + 31;
 800288a:	2397      	movs	r3, #151	; 0x97
 800288c:	813b      	strh	r3, [r7, #8]
	TouchButtonInit(Settings, &TouchButton[5], TouchButton_IO_Driver);
 800288e:	4b3c      	ldr	r3, [pc, #240]	; (8002980 <InitTouchButtons+0x1ac>)
 8002890:	466c      	mov	r4, sp
 8002892:	461d      	mov	r5, r3
 8002894:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002896:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002898:	682b      	ldr	r3, [r5, #0]
 800289a:	6023      	str	r3, [r4, #0]
 800289c:	4b3e      	ldr	r3, [pc, #248]	; (8002998 <InitTouchButtons+0x1c4>)
 800289e:	1d3a      	adds	r2, r7, #4
 80028a0:	ca07      	ldmia	r2, {r0, r1, r2}
 80028a2:	f7ff f873 	bl	800198c <TouchButtonInit>

	Settings.TopLeftBound.X_Position = 200 - 31;
 80028a6:	23a9      	movs	r3, #169	; 0xa9
 80028a8:	80bb      	strh	r3, [r7, #4]
	Settings.BottomRightBound.X_Position = 200 + 31;
 80028aa:	23e7      	movs	r3, #231	; 0xe7
 80028ac:	813b      	strh	r3, [r7, #8]
	TouchButtonInit(Settings, &TouchButton[6], TouchButton_IO_Driver);
 80028ae:	4b34      	ldr	r3, [pc, #208]	; (8002980 <InitTouchButtons+0x1ac>)
 80028b0:	466c      	mov	r4, sp
 80028b2:	461d      	mov	r5, r3
 80028b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028b8:	682b      	ldr	r3, [r5, #0]
 80028ba:	6023      	str	r3, [r4, #0]
 80028bc:	4b37      	ldr	r3, [pc, #220]	; (800299c <InitTouchButtons+0x1c8>)
 80028be:	1d3a      	adds	r2, r7, #4
 80028c0:	ca07      	ldmia	r2, {r0, r1, r2}
 80028c2:	f7ff f863 	bl	800198c <TouchButtonInit>

	Settings.TopLeftBound.X_Position = 280 - 31;
 80028c6:	23f9      	movs	r3, #249	; 0xf9
 80028c8:	80bb      	strh	r3, [r7, #4]
	Settings.BottomRightBound.X_Position = 280 + 31;
 80028ca:	f240 1337 	movw	r3, #311	; 0x137
 80028ce:	813b      	strh	r3, [r7, #8]
	TouchButtonInit(Settings, &TouchButton[7], TouchButton_IO_Driver);
 80028d0:	4b2b      	ldr	r3, [pc, #172]	; (8002980 <InitTouchButtons+0x1ac>)
 80028d2:	466c      	mov	r4, sp
 80028d4:	461d      	mov	r5, r3
 80028d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028da:	682b      	ldr	r3, [r5, #0]
 80028dc:	6023      	str	r3, [r4, #0]
 80028de:	4b30      	ldr	r3, [pc, #192]	; (80029a0 <InitTouchButtons+0x1cc>)
 80028e0:	1d3a      	adds	r2, r7, #4
 80028e2:	ca07      	ldmia	r2, {r0, r1, r2}
 80028e4:	f7ff f852 	bl	800198c <TouchButtonInit>

	Settings.TopLeftBound.X_Position = 40 - 31;
 80028e8:	2309      	movs	r3, #9
 80028ea:	80bb      	strh	r3, [r7, #4]
	Settings.BottomRightBound.X_Position = 40 + 31;
 80028ec:	2347      	movs	r3, #71	; 0x47
 80028ee:	813b      	strh	r3, [r7, #8]
	Settings.TopLeftBound.Y_Position = 180 - 31;
 80028f0:	2395      	movs	r3, #149	; 0x95
 80028f2:	80fb      	strh	r3, [r7, #6]
	Settings.BottomRightBound.Y_Position = 180 + 31;
 80028f4:	23d3      	movs	r3, #211	; 0xd3
 80028f6:	817b      	strh	r3, [r7, #10]
	TouchButtonInit(Settings, &TouchButton[8], TouchButton_IO_Driver);
 80028f8:	4b21      	ldr	r3, [pc, #132]	; (8002980 <InitTouchButtons+0x1ac>)
 80028fa:	466c      	mov	r4, sp
 80028fc:	461d      	mov	r5, r3
 80028fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002900:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002902:	682b      	ldr	r3, [r5, #0]
 8002904:	6023      	str	r3, [r4, #0]
 8002906:	4b27      	ldr	r3, [pc, #156]	; (80029a4 <InitTouchButtons+0x1d0>)
 8002908:	1d3a      	adds	r2, r7, #4
 800290a:	ca07      	ldmia	r2, {r0, r1, r2}
 800290c:	f7ff f83e 	bl	800198c <TouchButtonInit>

	Settings.TopLeftBound.X_Position = 120 - 31;
 8002910:	2359      	movs	r3, #89	; 0x59
 8002912:	80bb      	strh	r3, [r7, #4]
	Settings.BottomRightBound.X_Position = 120 + 31;
 8002914:	2397      	movs	r3, #151	; 0x97
 8002916:	813b      	strh	r3, [r7, #8]
	TouchButtonInit(Settings, &TouchButton[9], TouchButton_IO_Driver);
 8002918:	4b19      	ldr	r3, [pc, #100]	; (8002980 <InitTouchButtons+0x1ac>)
 800291a:	466c      	mov	r4, sp
 800291c:	461d      	mov	r5, r3
 800291e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002920:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002922:	682b      	ldr	r3, [r5, #0]
 8002924:	6023      	str	r3, [r4, #0]
 8002926:	4b20      	ldr	r3, [pc, #128]	; (80029a8 <InitTouchButtons+0x1d4>)
 8002928:	1d3a      	adds	r2, r7, #4
 800292a:	ca07      	ldmia	r2, {r0, r1, r2}
 800292c:	f7ff f82e 	bl	800198c <TouchButtonInit>

	Settings.TopLeftBound.X_Position = 200 - 31;
 8002930:	23a9      	movs	r3, #169	; 0xa9
 8002932:	80bb      	strh	r3, [r7, #4]
	Settings.BottomRightBound.X_Position = 200 + 31;
 8002934:	23e7      	movs	r3, #231	; 0xe7
 8002936:	813b      	strh	r3, [r7, #8]
	TouchButtonInit(Settings, &TouchButton[10], TouchButton_IO_Driver);
 8002938:	4b11      	ldr	r3, [pc, #68]	; (8002980 <InitTouchButtons+0x1ac>)
 800293a:	466c      	mov	r4, sp
 800293c:	461d      	mov	r5, r3
 800293e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002940:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002942:	682b      	ldr	r3, [r5, #0]
 8002944:	6023      	str	r3, [r4, #0]
 8002946:	4b19      	ldr	r3, [pc, #100]	; (80029ac <InitTouchButtons+0x1d8>)
 8002948:	1d3a      	adds	r2, r7, #4
 800294a:	ca07      	ldmia	r2, {r0, r1, r2}
 800294c:	f7ff f81e 	bl	800198c <TouchButtonInit>

	Settings.TopLeftBound.X_Position = 280 - 31;
 8002950:	23f9      	movs	r3, #249	; 0xf9
 8002952:	80bb      	strh	r3, [r7, #4]
	Settings.BottomRightBound.X_Position = 280 + 31;
 8002954:	f240 1337 	movw	r3, #311	; 0x137
 8002958:	813b      	strh	r3, [r7, #8]
	TouchButtonInit(Settings, &TouchButton[11], TouchButton_IO_Driver);
 800295a:	4b09      	ldr	r3, [pc, #36]	; (8002980 <InitTouchButtons+0x1ac>)
 800295c:	466c      	mov	r4, sp
 800295e:	461d      	mov	r5, r3
 8002960:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002962:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002964:	682b      	ldr	r3, [r5, #0]
 8002966:	6023      	str	r3, [r4, #0]
 8002968:	4b11      	ldr	r3, [pc, #68]	; (80029b0 <InitTouchButtons+0x1dc>)
 800296a:	1d3a      	adds	r2, r7, #4
 800296c:	ca07      	ldmia	r2, {r0, r1, r2}
 800296e:	f7ff f80d 	bl	800198c <TouchButtonInit>
}
 8002972:	bf00      	nop
 8002974:	3710      	adds	r7, #16
 8002976:	46bd      	mov	sp, r7
 8002978:	bdb0      	pop	{r4, r5, r7, pc}
 800297a:	bf00      	nop
 800297c:	0800e888 	.word	0x0800e888
 8002980:	0800e978 	.word	0x0800e978
 8002984:	20000d5c 	.word	0x20000d5c
 8002988:	20000d80 	.word	0x20000d80
 800298c:	20000da4 	.word	0x20000da4
 8002990:	20000dc8 	.word	0x20000dc8
 8002994:	20000dec 	.word	0x20000dec
 8002998:	20000e10 	.word	0x20000e10
 800299c:	20000e34 	.word	0x20000e34
 80029a0:	20000e58 	.word	0x20000e58
 80029a4:	20000e7c 	.word	0x20000e7c
 80029a8:	20000ea0 	.word	0x20000ea0
 80029ac:	20000ec4 	.word	0x20000ec4
 80029b0:	20000ee8 	.word	0x20000ee8

080029b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80029b4:	b480      	push	{r7}
 80029b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80029b8:	b672      	cpsid	i
}
 80029ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80029bc:	e7fe      	b.n	80029bc <Error_Handler+0x8>
	...

080029c0 <HAL_SPI_MspInit>:
  /* USER CODE END SPI1_Init 2 */

}

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b08a      	sub	sp, #40	; 0x28
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029c8:	f107 0314 	add.w	r3, r7, #20
 80029cc:	2200      	movs	r2, #0
 80029ce:	601a      	str	r2, [r3, #0]
 80029d0:	605a      	str	r2, [r3, #4]
 80029d2:	609a      	str	r2, [r3, #8]
 80029d4:	60da      	str	r2, [r3, #12]
 80029d6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a19      	ldr	r2, [pc, #100]	; (8002a44 <HAL_SPI_MspInit+0x84>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d12b      	bne.n	8002a3a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80029e2:	2300      	movs	r3, #0
 80029e4:	613b      	str	r3, [r7, #16]
 80029e6:	4b18      	ldr	r3, [pc, #96]	; (8002a48 <HAL_SPI_MspInit+0x88>)
 80029e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ea:	4a17      	ldr	r2, [pc, #92]	; (8002a48 <HAL_SPI_MspInit+0x88>)
 80029ec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80029f0:	6453      	str	r3, [r2, #68]	; 0x44
 80029f2:	4b15      	ldr	r3, [pc, #84]	; (8002a48 <HAL_SPI_MspInit+0x88>)
 80029f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029fa:	613b      	str	r3, [r7, #16]
 80029fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029fe:	2300      	movs	r3, #0
 8002a00:	60fb      	str	r3, [r7, #12]
 8002a02:	4b11      	ldr	r3, [pc, #68]	; (8002a48 <HAL_SPI_MspInit+0x88>)
 8002a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a06:	4a10      	ldr	r2, [pc, #64]	; (8002a48 <HAL_SPI_MspInit+0x88>)
 8002a08:	f043 0301 	orr.w	r3, r3, #1
 8002a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a0e:	4b0e      	ldr	r3, [pc, #56]	; (8002a48 <HAL_SPI_MspInit+0x88>)
 8002a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a12:	f003 0301 	and.w	r3, r3, #1
 8002a16:	60fb      	str	r3, [r7, #12]
 8002a18:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002a1a:	23e0      	movs	r3, #224	; 0xe0
 8002a1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a1e:	2302      	movs	r3, #2
 8002a20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a22:	2300      	movs	r3, #0
 8002a24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a26:	2303      	movs	r3, #3
 8002a28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002a2a:	2305      	movs	r3, #5
 8002a2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a2e:	f107 0314 	add.w	r3, r7, #20
 8002a32:	4619      	mov	r1, r3
 8002a34:	4805      	ldr	r0, [pc, #20]	; (8002a4c <HAL_SPI_MspInit+0x8c>)
 8002a36:	f001 fd39 	bl	80044ac <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002a3a:	bf00      	nop
 8002a3c:	3728      	adds	r7, #40	; 0x28
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	bf00      	nop
 8002a44:	40013000 	.word	0x40013000
 8002a48:	40023800 	.word	0x40023800
 8002a4c:	40020000 	.word	0x40020000

08002a50 <ILI9341_SPI_Init>:
  /* USER CODE END SPI1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void ILI9341_SPI_Init(void){
 8002a50:	b580      	push	{r7, lr}
 8002a52:	af00      	add	r7, sp, #0
	  hspi1.Instance = SPI1;
 8002a54:	4b17      	ldr	r3, [pc, #92]	; (8002ab4 <ILI9341_SPI_Init+0x64>)
 8002a56:	4a18      	ldr	r2, [pc, #96]	; (8002ab8 <ILI9341_SPI_Init+0x68>)
 8002a58:	601a      	str	r2, [r3, #0]
	  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002a5a:	4b16      	ldr	r3, [pc, #88]	; (8002ab4 <ILI9341_SPI_Init+0x64>)
 8002a5c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002a60:	605a      	str	r2, [r3, #4]
	  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002a62:	4b14      	ldr	r3, [pc, #80]	; (8002ab4 <ILI9341_SPI_Init+0x64>)
 8002a64:	2200      	movs	r2, #0
 8002a66:	609a      	str	r2, [r3, #8]
	  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002a68:	4b12      	ldr	r3, [pc, #72]	; (8002ab4 <ILI9341_SPI_Init+0x64>)
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	60da      	str	r2, [r3, #12]
	  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a6e:	4b11      	ldr	r3, [pc, #68]	; (8002ab4 <ILI9341_SPI_Init+0x64>)
 8002a70:	2200      	movs	r2, #0
 8002a72:	611a      	str	r2, [r3, #16]
	  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002a74:	4b0f      	ldr	r3, [pc, #60]	; (8002ab4 <ILI9341_SPI_Init+0x64>)
 8002a76:	2200      	movs	r2, #0
 8002a78:	615a      	str	r2, [r3, #20]
	  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002a7a:	4b0e      	ldr	r3, [pc, #56]	; (8002ab4 <ILI9341_SPI_Init+0x64>)
 8002a7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a80:	619a      	str	r2, [r3, #24]
	  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002a82:	4b0c      	ldr	r3, [pc, #48]	; (8002ab4 <ILI9341_SPI_Init+0x64>)
 8002a84:	2218      	movs	r2, #24
 8002a86:	61da      	str	r2, [r3, #28]
	  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002a88:	4b0a      	ldr	r3, [pc, #40]	; (8002ab4 <ILI9341_SPI_Init+0x64>)
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	621a      	str	r2, [r3, #32]
	  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002a8e:	4b09      	ldr	r3, [pc, #36]	; (8002ab4 <ILI9341_SPI_Init+0x64>)
 8002a90:	2200      	movs	r2, #0
 8002a92:	625a      	str	r2, [r3, #36]	; 0x24
	  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a94:	4b07      	ldr	r3, [pc, #28]	; (8002ab4 <ILI9341_SPI_Init+0x64>)
 8002a96:	2200      	movs	r2, #0
 8002a98:	629a      	str	r2, [r3, #40]	; 0x28
	  hspi1.Init.CRCPolynomial = 10;
 8002a9a:	4b06      	ldr	r3, [pc, #24]	; (8002ab4 <ILI9341_SPI_Init+0x64>)
 8002a9c:	220a      	movs	r2, #10
 8002a9e:	62da      	str	r2, [r3, #44]	; 0x2c
	  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002aa0:	4804      	ldr	r0, [pc, #16]	; (8002ab4 <ILI9341_SPI_Init+0x64>)
 8002aa2:	f004 fe3f 	bl	8007724 <HAL_SPI_Init>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d001      	beq.n	8002ab0 <ILI9341_SPI_Init+0x60>
	  {
	    Error_Handler();
 8002aac:	f7ff ff82 	bl	80029b4 <Error_Handler>
	  }
}
 8002ab0:	bf00      	nop
 8002ab2:	bd80      	pop	{r7, pc}
 8002ab4:	20000f0c 	.word	0x20000f0c
 8002ab8:	40013000 	.word	0x40013000

08002abc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b083      	sub	sp, #12
 8002ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	607b      	str	r3, [r7, #4]
 8002ac6:	4b10      	ldr	r3, [pc, #64]	; (8002b08 <HAL_MspInit+0x4c>)
 8002ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aca:	4a0f      	ldr	r2, [pc, #60]	; (8002b08 <HAL_MspInit+0x4c>)
 8002acc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ad0:	6453      	str	r3, [r2, #68]	; 0x44
 8002ad2:	4b0d      	ldr	r3, [pc, #52]	; (8002b08 <HAL_MspInit+0x4c>)
 8002ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ad6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ada:	607b      	str	r3, [r7, #4]
 8002adc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ade:	2300      	movs	r3, #0
 8002ae0:	603b      	str	r3, [r7, #0]
 8002ae2:	4b09      	ldr	r3, [pc, #36]	; (8002b08 <HAL_MspInit+0x4c>)
 8002ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae6:	4a08      	ldr	r2, [pc, #32]	; (8002b08 <HAL_MspInit+0x4c>)
 8002ae8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002aec:	6413      	str	r3, [r2, #64]	; 0x40
 8002aee:	4b06      	ldr	r3, [pc, #24]	; (8002b08 <HAL_MspInit+0x4c>)
 8002af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002af6:	603b      	str	r3, [r7, #0]
 8002af8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002afa:	bf00      	nop
 8002afc:	370c      	adds	r7, #12
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr
 8002b06:	bf00      	nop
 8002b08:	40023800 	.word	0x40023800

08002b0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b10:	e7fe      	b.n	8002b10 <NMI_Handler+0x4>

08002b12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b12:	b480      	push	{r7}
 8002b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b16:	e7fe      	b.n	8002b16 <HardFault_Handler+0x4>

08002b18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b1c:	e7fe      	b.n	8002b1c <MemManage_Handler+0x4>

08002b1e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b1e:	b480      	push	{r7}
 8002b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b22:	e7fe      	b.n	8002b22 <BusFault_Handler+0x4>

08002b24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b24:	b480      	push	{r7}
 8002b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b28:	e7fe      	b.n	8002b28 <UsageFault_Handler+0x4>

08002b2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b2a:	b480      	push	{r7}
 8002b2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b2e:	bf00      	nop
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr

08002b38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b3c:	bf00      	nop
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr

08002b46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b46:	b480      	push	{r7}
 8002b48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b4a:	bf00      	nop
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr

08002b54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b58:	f000 fa8a 	bl	8003070 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b5c:	bf00      	nop
 8002b5e:	bd80      	pop	{r7, pc}

08002b60 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8002b64:	4802      	ldr	r0, [pc, #8]	; (8002b70 <DMA1_Stream0_IRQHandler+0x10>)
 8002b66:	f001 fa2b 	bl	8003fc0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002b6a:	bf00      	nop
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	200004c8 	.word	0x200004c8

08002b74 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 8002b78:	4802      	ldr	r0, [pc, #8]	; (8002b84 <DMA1_Stream2_IRQHandler+0x10>)
 8002b7a:	f001 fa21 	bl	8003fc0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8002b7e:	bf00      	nop
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	20000528 	.word	0x20000528

08002b88 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 8002b8c:	4802      	ldr	r0, [pc, #8]	; (8002b98 <DMA1_Stream4_IRQHandler+0x10>)
 8002b8e:	f001 fa17 	bl	8003fc0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8002b92:	bf00      	nop
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	20000fb0 	.word	0x20000fb0

08002b9c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002ba0:	4802      	ldr	r0, [pc, #8]	; (8002bac <DMA2_Stream0_IRQHandler+0x10>)
 8002ba2:	f001 fa0d 	bl	8003fc0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002ba6:	bf00      	nop
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	200003c0 	.word	0x200003c0

08002bb0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002bb4:	4802      	ldr	r0, [pc, #8]	; (8002bc0 <OTG_FS_IRQHandler+0x10>)
 8002bb6:	f003 f85c 	bl	8005c72 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002bba:	bf00      	nop
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	20001538 	.word	0x20001538

08002bc4 <HAL_I2C_MemRxCpltCallback>:

/* USER CODE BEGIN 1 */
void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c){
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b082      	sub	sp, #8
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
	if(hi2c == &hi2c1){
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	4a08      	ldr	r2, [pc, #32]	; (8002bf0 <HAL_I2C_MemRxCpltCallback+0x2c>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d102      	bne.n	8002bda <HAL_I2C_MemRxCpltCallback+0x16>
	    ButtonIRQCallback();
 8002bd4:	f7fe fc3e 	bl	8001454 <ButtonIRQCallback>
	} else if (hi2c == &hi2c2){
        TouchScreenIRQCallback();
	}
}
 8002bd8:	e005      	b.n	8002be6 <HAL_I2C_MemRxCpltCallback+0x22>
	} else if (hi2c == &hi2c2){
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	4a05      	ldr	r2, [pc, #20]	; (8002bf4 <HAL_I2C_MemRxCpltCallback+0x30>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d101      	bne.n	8002be6 <HAL_I2C_MemRxCpltCallback+0x22>
        TouchScreenIRQCallback();
 8002be2:	f7fe ff81 	bl	8001ae8 <TouchScreenIRQCallback>
}
 8002be6:	bf00      	nop
 8002be8:	3708      	adds	r7, #8
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	20000420 	.word	0x20000420
 8002bf4:	20000474 	.word	0x20000474

08002bf8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b086      	sub	sp, #24
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	60f8      	str	r0, [r7, #12]
 8002c00:	60b9      	str	r1, [r7, #8]
 8002c02:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c04:	2300      	movs	r3, #0
 8002c06:	617b      	str	r3, [r7, #20]
 8002c08:	e00a      	b.n	8002c20 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002c0a:	f3af 8000 	nop.w
 8002c0e:	4601      	mov	r1, r0
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	1c5a      	adds	r2, r3, #1
 8002c14:	60ba      	str	r2, [r7, #8]
 8002c16:	b2ca      	uxtb	r2, r1
 8002c18:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	3301      	adds	r3, #1
 8002c1e:	617b      	str	r3, [r7, #20]
 8002c20:	697a      	ldr	r2, [r7, #20]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	429a      	cmp	r2, r3
 8002c26:	dbf0      	blt.n	8002c0a <_read+0x12>
	}

return len;
 8002c28:	687b      	ldr	r3, [r7, #4]
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3718      	adds	r7, #24
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}

08002c32 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002c32:	b580      	push	{r7, lr}
 8002c34:	b086      	sub	sp, #24
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	60f8      	str	r0, [r7, #12]
 8002c3a:	60b9      	str	r1, [r7, #8]
 8002c3c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c3e:	2300      	movs	r3, #0
 8002c40:	617b      	str	r3, [r7, #20]
 8002c42:	e009      	b.n	8002c58 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	1c5a      	adds	r2, r3, #1
 8002c48:	60ba      	str	r2, [r7, #8]
 8002c4a:	781b      	ldrb	r3, [r3, #0]
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f7ff fa8b 	bl	8002168 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	3301      	adds	r3, #1
 8002c56:	617b      	str	r3, [r7, #20]
 8002c58:	697a      	ldr	r2, [r7, #20]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	dbf1      	blt.n	8002c44 <_write+0x12>
	}
	return len;
 8002c60:	687b      	ldr	r3, [r7, #4]
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3718      	adds	r7, #24
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}

08002c6a <_close>:

int _close(int file)
{
 8002c6a:	b480      	push	{r7}
 8002c6c:	b083      	sub	sp, #12
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	6078      	str	r0, [r7, #4]
	return -1;
 8002c72:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	370c      	adds	r7, #12
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr

08002c82 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002c82:	b480      	push	{r7}
 8002c84:	b083      	sub	sp, #12
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	6078      	str	r0, [r7, #4]
 8002c8a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002c92:	605a      	str	r2, [r3, #4]
	return 0;
 8002c94:	2300      	movs	r3, #0
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	370c      	adds	r7, #12
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr

08002ca2 <_isatty>:

int _isatty(int file)
{
 8002ca2:	b480      	push	{r7}
 8002ca4:	b083      	sub	sp, #12
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	6078      	str	r0, [r7, #4]
	return 1;
 8002caa:	2301      	movs	r3, #1
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	370c      	adds	r7, #12
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb6:	4770      	bx	lr

08002cb8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b085      	sub	sp, #20
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	60f8      	str	r0, [r7, #12]
 8002cc0:	60b9      	str	r1, [r7, #8]
 8002cc2:	607a      	str	r2, [r7, #4]
	return 0;
 8002cc4:	2300      	movs	r3, #0
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3714      	adds	r7, #20
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr
	...

08002cd4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b086      	sub	sp, #24
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002cdc:	4a14      	ldr	r2, [pc, #80]	; (8002d30 <_sbrk+0x5c>)
 8002cde:	4b15      	ldr	r3, [pc, #84]	; (8002d34 <_sbrk+0x60>)
 8002ce0:	1ad3      	subs	r3, r2, r3
 8002ce2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ce8:	4b13      	ldr	r3, [pc, #76]	; (8002d38 <_sbrk+0x64>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d102      	bne.n	8002cf6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002cf0:	4b11      	ldr	r3, [pc, #68]	; (8002d38 <_sbrk+0x64>)
 8002cf2:	4a12      	ldr	r2, [pc, #72]	; (8002d3c <_sbrk+0x68>)
 8002cf4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002cf6:	4b10      	ldr	r3, [pc, #64]	; (8002d38 <_sbrk+0x64>)
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4413      	add	r3, r2
 8002cfe:	693a      	ldr	r2, [r7, #16]
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d207      	bcs.n	8002d14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d04:	f00a fbba 	bl	800d47c <__errno>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	220c      	movs	r2, #12
 8002d0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d0e:	f04f 33ff 	mov.w	r3, #4294967295
 8002d12:	e009      	b.n	8002d28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d14:	4b08      	ldr	r3, [pc, #32]	; (8002d38 <_sbrk+0x64>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d1a:	4b07      	ldr	r3, [pc, #28]	; (8002d38 <_sbrk+0x64>)
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	4413      	add	r3, r2
 8002d22:	4a05      	ldr	r2, [pc, #20]	; (8002d38 <_sbrk+0x64>)
 8002d24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d26:	68fb      	ldr	r3, [r7, #12]
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3718      	adds	r7, #24
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}
 8002d30:	20020000 	.word	0x20020000
 8002d34:	00000400 	.word	0x00000400
 8002d38:	20000f64 	.word	0x20000f64
 8002d3c:	20001a70 	.word	0x20001a70

08002d40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d40:	b480      	push	{r7}
 8002d42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d44:	4b06      	ldr	r3, [pc, #24]	; (8002d60 <SystemInit+0x20>)
 8002d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d4a:	4a05      	ldr	r2, [pc, #20]	; (8002d60 <SystemInit+0x20>)
 8002d4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d54:	bf00      	nop
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr
 8002d5e:	bf00      	nop
 8002d60:	e000ed00 	.word	0xe000ed00

08002d64 <HAL_TIM_Base_MspInit>:
  HAL_TIM_MspPostInit(&htim3);

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b084      	sub	sp, #16
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a25      	ldr	r2, [pc, #148]	; (8002e08 <HAL_TIM_Base_MspInit+0xa4>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d144      	bne.n	8002e00 <HAL_TIM_Base_MspInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002d76:	2300      	movs	r3, #0
 8002d78:	60fb      	str	r3, [r7, #12]
 8002d7a:	4b24      	ldr	r3, [pc, #144]	; (8002e0c <HAL_TIM_Base_MspInit+0xa8>)
 8002d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7e:	4a23      	ldr	r2, [pc, #140]	; (8002e0c <HAL_TIM_Base_MspInit+0xa8>)
 8002d80:	f043 0302 	orr.w	r3, r3, #2
 8002d84:	6413      	str	r3, [r2, #64]	; 0x40
 8002d86:	4b21      	ldr	r3, [pc, #132]	; (8002e0c <HAL_TIM_Base_MspInit+0xa8>)
 8002d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8a:	f003 0302 	and.w	r3, r3, #2
 8002d8e:	60fb      	str	r3, [r7, #12]
 8002d90:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH1_TRIG Init */
    hdma_tim3_ch1_trig.Instance = DMA1_Stream4;
 8002d92:	4b1f      	ldr	r3, [pc, #124]	; (8002e10 <HAL_TIM_Base_MspInit+0xac>)
 8002d94:	4a1f      	ldr	r2, [pc, #124]	; (8002e14 <HAL_TIM_Base_MspInit+0xb0>)
 8002d96:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Channel = DMA_CHANNEL_5;
 8002d98:	4b1d      	ldr	r3, [pc, #116]	; (8002e10 <HAL_TIM_Base_MspInit+0xac>)
 8002d9a:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8002d9e:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002da0:	4b1b      	ldr	r3, [pc, #108]	; (8002e10 <HAL_TIM_Base_MspInit+0xac>)
 8002da2:	2240      	movs	r2, #64	; 0x40
 8002da4:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 8002da6:	4b1a      	ldr	r3, [pc, #104]	; (8002e10 <HAL_TIM_Base_MspInit+0xac>)
 8002da8:	2200      	movs	r2, #0
 8002daa:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 8002dac:	4b18      	ldr	r3, [pc, #96]	; (8002e10 <HAL_TIM_Base_MspInit+0xac>)
 8002dae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002db2:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002db4:	4b16      	ldr	r3, [pc, #88]	; (8002e10 <HAL_TIM_Base_MspInit+0xac>)
 8002db6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002dba:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002dbc:	4b14      	ldr	r3, [pc, #80]	; (8002e10 <HAL_TIM_Base_MspInit+0xac>)
 8002dbe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002dc2:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Mode = DMA_CIRCULAR;
 8002dc4:	4b12      	ldr	r3, [pc, #72]	; (8002e10 <HAL_TIM_Base_MspInit+0xac>)
 8002dc6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002dca:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_LOW;
 8002dcc:	4b10      	ldr	r3, [pc, #64]	; (8002e10 <HAL_TIM_Base_MspInit+0xac>)
 8002dce:	2200      	movs	r2, #0
 8002dd0:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1_trig.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002dd2:	4b0f      	ldr	r3, [pc, #60]	; (8002e10 <HAL_TIM_Base_MspInit+0xac>)
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 8002dd8:	480d      	ldr	r0, [pc, #52]	; (8002e10 <HAL_TIM_Base_MspInit+0xac>)
 8002dda:	f000 ff59 	bl	8003c90 <HAL_DMA_Init>
 8002dde:	4603      	mov	r3, r0
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d001      	beq.n	8002de8 <HAL_TIM_Base_MspInit+0x84>
    {
      Error_Handler();
 8002de4:	f7ff fde6 	bl	80029b4 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	4a09      	ldr	r2, [pc, #36]	; (8002e10 <HAL_TIM_Base_MspInit+0xac>)
 8002dec:	625a      	str	r2, [r3, #36]	; 0x24
 8002dee:	4a08      	ldr	r2, [pc, #32]	; (8002e10 <HAL_TIM_Base_MspInit+0xac>)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	4a06      	ldr	r2, [pc, #24]	; (8002e10 <HAL_TIM_Base_MspInit+0xac>)
 8002df8:	639a      	str	r2, [r3, #56]	; 0x38
 8002dfa:	4a05      	ldr	r2, [pc, #20]	; (8002e10 <HAL_TIM_Base_MspInit+0xac>)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002e00:	bf00      	nop
 8002e02:	3710      	adds	r7, #16
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	40000400 	.word	0x40000400
 8002e0c:	40023800 	.word	0x40023800
 8002e10:	20000fb0 	.word	0x20000fb0
 8002e14:	40026070 	.word	0x40026070

08002e18 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b088      	sub	sp, #32
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e20:	f107 030c 	add.w	r3, r7, #12
 8002e24:	2200      	movs	r2, #0
 8002e26:	601a      	str	r2, [r3, #0]
 8002e28:	605a      	str	r2, [r3, #4]
 8002e2a:	609a      	str	r2, [r3, #8]
 8002e2c:	60da      	str	r2, [r3, #12]
 8002e2e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a12      	ldr	r2, [pc, #72]	; (8002e80 <HAL_TIM_MspPostInit+0x68>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d11d      	bne.n	8002e76 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	60bb      	str	r3, [r7, #8]
 8002e3e:	4b11      	ldr	r3, [pc, #68]	; (8002e84 <HAL_TIM_MspPostInit+0x6c>)
 8002e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e42:	4a10      	ldr	r2, [pc, #64]	; (8002e84 <HAL_TIM_MspPostInit+0x6c>)
 8002e44:	f043 0302 	orr.w	r3, r3, #2
 8002e48:	6313      	str	r3, [r2, #48]	; 0x30
 8002e4a:	4b0e      	ldr	r3, [pc, #56]	; (8002e84 <HAL_TIM_MspPostInit+0x6c>)
 8002e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e4e:	f003 0302 	and.w	r3, r3, #2
 8002e52:	60bb      	str	r3, [r7, #8]
 8002e54:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002e56:	2310      	movs	r3, #16
 8002e58:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e5a:	2302      	movs	r3, #2
 8002e5c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e62:	2300      	movs	r3, #0
 8002e64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002e66:	2302      	movs	r3, #2
 8002e68:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e6a:	f107 030c 	add.w	r3, r7, #12
 8002e6e:	4619      	mov	r1, r3
 8002e70:	4805      	ldr	r0, [pc, #20]	; (8002e88 <HAL_TIM_MspPostInit+0x70>)
 8002e72:	f001 fb1b 	bl	80044ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002e76:	bf00      	nop
 8002e78:	3720      	adds	r7, #32
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	40000400 	.word	0x40000400
 8002e84:	40023800 	.word	0x40023800
 8002e88:	40020400 	.word	0x40020400

08002e8c <TIM3_Init>:
  /* USER CODE END TIM3_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void TIM3_Init(void){
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b08e      	sub	sp, #56	; 0x38
 8002e90:	af00      	add	r7, sp, #0

	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e92:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002e96:	2200      	movs	r2, #0
 8002e98:	601a      	str	r2, [r3, #0]
 8002e9a:	605a      	str	r2, [r3, #4]
 8002e9c:	609a      	str	r2, [r3, #8]
 8002e9e:	60da      	str	r2, [r3, #12]
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ea0:	f107 0320 	add.w	r3, r7, #32
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	601a      	str	r2, [r3, #0]
 8002ea8:	605a      	str	r2, [r3, #4]
	  TIM_OC_InitTypeDef sConfigOC = {0};
 8002eaa:	1d3b      	adds	r3, r7, #4
 8002eac:	2200      	movs	r2, #0
 8002eae:	601a      	str	r2, [r3, #0]
 8002eb0:	605a      	str	r2, [r3, #4]
 8002eb2:	609a      	str	r2, [r3, #8]
 8002eb4:	60da      	str	r2, [r3, #12]
 8002eb6:	611a      	str	r2, [r3, #16]
 8002eb8:	615a      	str	r2, [r3, #20]
 8002eba:	619a      	str	r2, [r3, #24]


	  htim3.Instance = TIM3;
 8002ebc:	4b2c      	ldr	r3, [pc, #176]	; (8002f70 <TIM3_Init+0xe4>)
 8002ebe:	4a2d      	ldr	r2, [pc, #180]	; (8002f74 <TIM3_Init+0xe8>)
 8002ec0:	601a      	str	r2, [r3, #0]
	  htim3.Init.Prescaler = 0;
 8002ec2:	4b2b      	ldr	r3, [pc, #172]	; (8002f70 <TIM3_Init+0xe4>)
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	605a      	str	r2, [r3, #4]
	  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ec8:	4b29      	ldr	r3, [pc, #164]	; (8002f70 <TIM3_Init+0xe4>)
 8002eca:	2200      	movs	r2, #0
 8002ecc:	609a      	str	r2, [r3, #8]
	  htim3.Init.Period = 120 - 1;
 8002ece:	4b28      	ldr	r3, [pc, #160]	; (8002f70 <TIM3_Init+0xe4>)
 8002ed0:	2277      	movs	r2, #119	; 0x77
 8002ed2:	60da      	str	r2, [r3, #12]
	  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ed4:	4b26      	ldr	r3, [pc, #152]	; (8002f70 <TIM3_Init+0xe4>)
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	611a      	str	r2, [r3, #16]
	  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002eda:	4b25      	ldr	r3, [pc, #148]	; (8002f70 <TIM3_Init+0xe4>)
 8002edc:	2200      	movs	r2, #0
 8002ede:	619a      	str	r2, [r3, #24]
	  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002ee0:	4823      	ldr	r0, [pc, #140]	; (8002f70 <TIM3_Init+0xe4>)
 8002ee2:	f005 f9c7 	bl	8008274 <HAL_TIM_Base_Init>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d001      	beq.n	8002ef0 <TIM3_Init+0x64>
	  {
	    Error_Handler();
 8002eec:	f7ff fd62 	bl	80029b4 <Error_Handler>
	  }
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ef0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ef4:	62bb      	str	r3, [r7, #40]	; 0x28
	  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002ef6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002efa:	4619      	mov	r1, r3
 8002efc:	481c      	ldr	r0, [pc, #112]	; (8002f70 <TIM3_Init+0xe4>)
 8002efe:	f005 fd99 	bl	8008a34 <HAL_TIM_ConfigClockSource>
 8002f02:	4603      	mov	r3, r0
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d001      	beq.n	8002f0c <TIM3_Init+0x80>
	  {
	    Error_Handler();
 8002f08:	f7ff fd54 	bl	80029b4 <Error_Handler>
	  }
	  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002f0c:	4818      	ldr	r0, [pc, #96]	; (8002f70 <TIM3_Init+0xe4>)
 8002f0e:	f005 fa00 	bl	8008312 <HAL_TIM_PWM_Init>
 8002f12:	4603      	mov	r3, r0
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d001      	beq.n	8002f1c <TIM3_Init+0x90>
	  {
	    Error_Handler();
 8002f18:	f7ff fd4c 	bl	80029b4 <Error_Handler>
	  }
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	623b      	str	r3, [r7, #32]
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f20:	2300      	movs	r3, #0
 8002f22:	627b      	str	r3, [r7, #36]	; 0x24
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002f24:	f107 0320 	add.w	r3, r7, #32
 8002f28:	4619      	mov	r1, r3
 8002f2a:	4811      	ldr	r0, [pc, #68]	; (8002f70 <TIM3_Init+0xe4>)
 8002f2c:	f006 fa04 	bl	8009338 <HAL_TIMEx_MasterConfigSynchronization>
 8002f30:	4603      	mov	r3, r0
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d001      	beq.n	8002f3a <TIM3_Init+0xae>
	  {
	    Error_Handler();
 8002f36:	f7ff fd3d 	bl	80029b4 <Error_Handler>
	  }
	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002f3a:	2360      	movs	r3, #96	; 0x60
 8002f3c:	607b      	str	r3, [r7, #4]
	  sConfigOC.Pulse = 0;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	60bb      	str	r3, [r7, #8]
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002f42:	2300      	movs	r3, #0
 8002f44:	60fb      	str	r3, [r7, #12]
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002f46:	2300      	movs	r3, #0
 8002f48:	617b      	str	r3, [r7, #20]
	  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002f4a:	1d3b      	adds	r3, r7, #4
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	4619      	mov	r1, r3
 8002f50:	4807      	ldr	r0, [pc, #28]	; (8002f70 <TIM3_Init+0xe4>)
 8002f52:	f005 fcad 	bl	80088b0 <HAL_TIM_PWM_ConfigChannel>
 8002f56:	4603      	mov	r3, r0
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d001      	beq.n	8002f60 <TIM3_Init+0xd4>
	  {
	    Error_Handler();
 8002f5c:	f7ff fd2a 	bl	80029b4 <Error_Handler>
	  }

	  HAL_TIM_MspPostInit(&htim3);
 8002f60:	4803      	ldr	r0, [pc, #12]	; (8002f70 <TIM3_Init+0xe4>)
 8002f62:	f7ff ff59 	bl	8002e18 <HAL_TIM_MspPostInit>
}
 8002f66:	bf00      	nop
 8002f68:	3738      	adds	r7, #56	; 0x38
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}
 8002f6e:	bf00      	nop
 8002f70:	20000f68 	.word	0x20000f68
 8002f74:	40000400 	.word	0x40000400

08002f78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002f78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002fb0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002f7c:	480d      	ldr	r0, [pc, #52]	; (8002fb4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002f7e:	490e      	ldr	r1, [pc, #56]	; (8002fb8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002f80:	4a0e      	ldr	r2, [pc, #56]	; (8002fbc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002f82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f84:	e002      	b.n	8002f8c <LoopCopyDataInit>

08002f86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f8a:	3304      	adds	r3, #4

08002f8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f90:	d3f9      	bcc.n	8002f86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f92:	4a0b      	ldr	r2, [pc, #44]	; (8002fc0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002f94:	4c0b      	ldr	r4, [pc, #44]	; (8002fc4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002f96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f98:	e001      	b.n	8002f9e <LoopFillZerobss>

08002f9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f9c:	3204      	adds	r2, #4

08002f9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002fa0:	d3fb      	bcc.n	8002f9a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002fa2:	f7ff fecd 	bl	8002d40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002fa6:	f00a fa6f 	bl	800d488 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002faa:	f7ff f94d 	bl	8002248 <main>
  bx  lr    
 8002fae:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002fb0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002fb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002fb8:	20000194 	.word	0x20000194
  ldr r2, =_sidata
 8002fbc:	080306e4 	.word	0x080306e4
  ldr r2, =_sbss
 8002fc0:	20000194 	.word	0x20000194
  ldr r4, =_ebss
 8002fc4:	20001a70 	.word	0x20001a70

08002fc8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002fc8:	e7fe      	b.n	8002fc8 <ADC_IRQHandler>
	...

08002fcc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002fd0:	4b0e      	ldr	r3, [pc, #56]	; (800300c <HAL_Init+0x40>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a0d      	ldr	r2, [pc, #52]	; (800300c <HAL_Init+0x40>)
 8002fd6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002fda:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002fdc:	4b0b      	ldr	r3, [pc, #44]	; (800300c <HAL_Init+0x40>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a0a      	ldr	r2, [pc, #40]	; (800300c <HAL_Init+0x40>)
 8002fe2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002fe6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002fe8:	4b08      	ldr	r3, [pc, #32]	; (800300c <HAL_Init+0x40>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a07      	ldr	r2, [pc, #28]	; (800300c <HAL_Init+0x40>)
 8002fee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ff2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ff4:	2003      	movs	r0, #3
 8002ff6:	f000 fded 	bl	8003bd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ffa:	200f      	movs	r0, #15
 8002ffc:	f000 f808 	bl	8003010 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003000:	f7ff fd5c 	bl	8002abc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003004:	2300      	movs	r3, #0
}
 8003006:	4618      	mov	r0, r3
 8003008:	bd80      	pop	{r7, pc}
 800300a:	bf00      	nop
 800300c:	40023c00 	.word	0x40023c00

08003010 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b082      	sub	sp, #8
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003018:	4b12      	ldr	r3, [pc, #72]	; (8003064 <HAL_InitTick+0x54>)
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	4b12      	ldr	r3, [pc, #72]	; (8003068 <HAL_InitTick+0x58>)
 800301e:	781b      	ldrb	r3, [r3, #0]
 8003020:	4619      	mov	r1, r3
 8003022:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003026:	fbb3 f3f1 	udiv	r3, r3, r1
 800302a:	fbb2 f3f3 	udiv	r3, r2, r3
 800302e:	4618      	mov	r0, r3
 8003030:	f000 fe13 	bl	8003c5a <HAL_SYSTICK_Config>
 8003034:	4603      	mov	r3, r0
 8003036:	2b00      	cmp	r3, #0
 8003038:	d001      	beq.n	800303e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e00e      	b.n	800305c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2b0f      	cmp	r3, #15
 8003042:	d80a      	bhi.n	800305a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003044:	2200      	movs	r2, #0
 8003046:	6879      	ldr	r1, [r7, #4]
 8003048:	f04f 30ff 	mov.w	r0, #4294967295
 800304c:	f000 fdcd 	bl	8003bea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003050:	4a06      	ldr	r2, [pc, #24]	; (800306c <HAL_InitTick+0x5c>)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003056:	2300      	movs	r3, #0
 8003058:	e000      	b.n	800305c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
}
 800305c:	4618      	mov	r0, r3
 800305e:	3708      	adds	r7, #8
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}
 8003064:	20000044 	.word	0x20000044
 8003068:	2000004c 	.word	0x2000004c
 800306c:	20000048 	.word	0x20000048

08003070 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003070:	b480      	push	{r7}
 8003072:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003074:	4b06      	ldr	r3, [pc, #24]	; (8003090 <HAL_IncTick+0x20>)
 8003076:	781b      	ldrb	r3, [r3, #0]
 8003078:	461a      	mov	r2, r3
 800307a:	4b06      	ldr	r3, [pc, #24]	; (8003094 <HAL_IncTick+0x24>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4413      	add	r3, r2
 8003080:	4a04      	ldr	r2, [pc, #16]	; (8003094 <HAL_IncTick+0x24>)
 8003082:	6013      	str	r3, [r2, #0]
}
 8003084:	bf00      	nop
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr
 800308e:	bf00      	nop
 8003090:	2000004c 	.word	0x2000004c
 8003094:	20001054 	.word	0x20001054

08003098 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003098:	b480      	push	{r7}
 800309a:	af00      	add	r7, sp, #0
  return uwTick;
 800309c:	4b03      	ldr	r3, [pc, #12]	; (80030ac <HAL_GetTick+0x14>)
 800309e:	681b      	ldr	r3, [r3, #0]
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	46bd      	mov	sp, r7
 80030a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a8:	4770      	bx	lr
 80030aa:	bf00      	nop
 80030ac:	20001054 	.word	0x20001054

080030b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b084      	sub	sp, #16
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80030b8:	f7ff ffee 	bl	8003098 <HAL_GetTick>
 80030bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030c8:	d005      	beq.n	80030d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80030ca:	4b0a      	ldr	r3, [pc, #40]	; (80030f4 <HAL_Delay+0x44>)
 80030cc:	781b      	ldrb	r3, [r3, #0]
 80030ce:	461a      	mov	r2, r3
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	4413      	add	r3, r2
 80030d4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80030d6:	bf00      	nop
 80030d8:	f7ff ffde 	bl	8003098 <HAL_GetTick>
 80030dc:	4602      	mov	r2, r0
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	68fa      	ldr	r2, [r7, #12]
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d8f7      	bhi.n	80030d8 <HAL_Delay+0x28>
  {
  }
}
 80030e8:	bf00      	nop
 80030ea:	bf00      	nop
 80030ec:	3710      	adds	r7, #16
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}
 80030f2:	bf00      	nop
 80030f4:	2000004c 	.word	0x2000004c

080030f8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b084      	sub	sp, #16
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003100:	2300      	movs	r3, #0
 8003102:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d101      	bne.n	800310e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e033      	b.n	8003176 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003112:	2b00      	cmp	r3, #0
 8003114:	d109      	bne.n	800312a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	f7fe fcf0 	bl	8001afc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2200      	movs	r2, #0
 8003120:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2200      	movs	r2, #0
 8003126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312e:	f003 0310 	and.w	r3, r3, #16
 8003132:	2b00      	cmp	r3, #0
 8003134:	d118      	bne.n	8003168 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800313e:	f023 0302 	bic.w	r3, r3, #2
 8003142:	f043 0202 	orr.w	r2, r3, #2
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f000 fab2 	bl	80036b4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2200      	movs	r2, #0
 8003154:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315a:	f023 0303 	bic.w	r3, r3, #3
 800315e:	f043 0201 	orr.w	r2, r3, #1
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	641a      	str	r2, [r3, #64]	; 0x40
 8003166:	e001      	b.n	800316c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2200      	movs	r2, #0
 8003170:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003174:	7bfb      	ldrb	r3, [r7, #15]
}
 8003176:	4618      	mov	r0, r3
 8003178:	3710      	adds	r7, #16
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
	...

08003180 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b086      	sub	sp, #24
 8003184:	af00      	add	r7, sp, #0
 8003186:	60f8      	str	r0, [r7, #12]
 8003188:	60b9      	str	r1, [r7, #8]
 800318a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800318c:	2300      	movs	r3, #0
 800318e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003196:	2b01      	cmp	r3, #1
 8003198:	d101      	bne.n	800319e <HAL_ADC_Start_DMA+0x1e>
 800319a:	2302      	movs	r3, #2
 800319c:	e0ce      	b.n	800333c <HAL_ADC_Start_DMA+0x1bc>
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2201      	movs	r2, #1
 80031a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	f003 0301 	and.w	r3, r3, #1
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d018      	beq.n	80031e6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	689a      	ldr	r2, [r3, #8]
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f042 0201 	orr.w	r2, r2, #1
 80031c2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80031c4:	4b5f      	ldr	r3, [pc, #380]	; (8003344 <HAL_ADC_Start_DMA+0x1c4>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a5f      	ldr	r2, [pc, #380]	; (8003348 <HAL_ADC_Start_DMA+0x1c8>)
 80031ca:	fba2 2303 	umull	r2, r3, r2, r3
 80031ce:	0c9a      	lsrs	r2, r3, #18
 80031d0:	4613      	mov	r3, r2
 80031d2:	005b      	lsls	r3, r3, #1
 80031d4:	4413      	add	r3, r2
 80031d6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80031d8:	e002      	b.n	80031e0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	3b01      	subs	r3, #1
 80031de:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d1f9      	bne.n	80031da <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031f4:	d107      	bne.n	8003206 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	689a      	ldr	r2, [r3, #8]
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003204:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	f003 0301 	and.w	r3, r3, #1
 8003210:	2b01      	cmp	r3, #1
 8003212:	f040 8086 	bne.w	8003322 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800321e:	f023 0301 	bic.w	r3, r3, #1
 8003222:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003234:	2b00      	cmp	r3, #0
 8003236:	d007      	beq.n	8003248 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003240:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003250:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003254:	d106      	bne.n	8003264 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800325a:	f023 0206 	bic.w	r2, r3, #6
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	645a      	str	r2, [r3, #68]	; 0x44
 8003262:	e002      	b.n	800326a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2200      	movs	r2, #0
 8003268:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2200      	movs	r2, #0
 800326e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003272:	4b36      	ldr	r3, [pc, #216]	; (800334c <HAL_ADC_Start_DMA+0x1cc>)
 8003274:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800327a:	4a35      	ldr	r2, [pc, #212]	; (8003350 <HAL_ADC_Start_DMA+0x1d0>)
 800327c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003282:	4a34      	ldr	r2, [pc, #208]	; (8003354 <HAL_ADC_Start_DMA+0x1d4>)
 8003284:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800328a:	4a33      	ldr	r2, [pc, #204]	; (8003358 <HAL_ADC_Start_DMA+0x1d8>)
 800328c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003296:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	685a      	ldr	r2, [r3, #4]
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80032a6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	689a      	ldr	r2, [r3, #8]
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032b6:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	334c      	adds	r3, #76	; 0x4c
 80032c2:	4619      	mov	r1, r3
 80032c4:	68ba      	ldr	r2, [r7, #8]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	f000 fd90 	bl	8003dec <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	f003 031f 	and.w	r3, r3, #31
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d10f      	bne.n	80032f8 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d129      	bne.n	800333a <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	689a      	ldr	r2, [r3, #8]
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80032f4:	609a      	str	r2, [r3, #8]
 80032f6:	e020      	b.n	800333a <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a17      	ldr	r2, [pc, #92]	; (800335c <HAL_ADC_Start_DMA+0x1dc>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d11b      	bne.n	800333a <HAL_ADC_Start_DMA+0x1ba>
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800330c:	2b00      	cmp	r3, #0
 800330e:	d114      	bne.n	800333a <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	689a      	ldr	r2, [r3, #8]
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800331e:	609a      	str	r2, [r3, #8]
 8003320:	e00b      	b.n	800333a <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003326:	f043 0210 	orr.w	r2, r3, #16
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003332:	f043 0201 	orr.w	r2, r3, #1
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800333a:	2300      	movs	r3, #0
}
 800333c:	4618      	mov	r0, r3
 800333e:	3718      	adds	r7, #24
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}
 8003344:	20000044 	.word	0x20000044
 8003348:	431bde83 	.word	0x431bde83
 800334c:	40012300 	.word	0x40012300
 8003350:	080038ad 	.word	0x080038ad
 8003354:	08003967 	.word	0x08003967
 8003358:	08003983 	.word	0x08003983
 800335c:	40012000 	.word	0x40012000

08003360 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b084      	sub	sp, #16
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003368:	2300      	movs	r3, #0
 800336a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003372:	2b01      	cmp	r3, #1
 8003374:	d101      	bne.n	800337a <HAL_ADC_Stop_DMA+0x1a>
 8003376:	2302      	movs	r3, #2
 8003378:	e048      	b.n	800340c <HAL_ADC_Stop_DMA+0xac>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2201      	movs	r2, #1
 800337e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	689a      	ldr	r2, [r3, #8]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f022 0201 	bic.w	r2, r2, #1
 8003390:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	f003 0301 	and.w	r3, r3, #1
 800339c:	2b00      	cmp	r3, #0
 800339e:	d130      	bne.n	8003402 <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	689a      	ldr	r2, [r3, #8]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80033ae:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	2b02      	cmp	r3, #2
 80033bc:	d10f      	bne.n	80033de <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033c2:	4618      	mov	r0, r3
 80033c4:	f000 fd6a 	bl	8003e9c <HAL_DMA_Abort>
 80033c8:	4603      	mov	r3, r0
 80033ca:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 80033cc:	7bfb      	ldrb	r3, [r7, #15]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d005      	beq.n	80033de <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	685a      	ldr	r2, [r3, #4]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 80033ec:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80033f6:	f023 0301 	bic.w	r3, r3, #1
 80033fa:	f043 0201 	orr.w	r2, r3, #1
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2200      	movs	r2, #0
 8003406:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800340a:	7bfb      	ldrb	r3, [r7, #15]
}
 800340c:	4618      	mov	r0, r3
 800340e:	3710      	adds	r7, #16
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}

08003414 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003414:	b480      	push	{r7}
 8003416:	b083      	sub	sp, #12
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800341c:	bf00      	nop
 800341e:	370c      	adds	r7, #12
 8003420:	46bd      	mov	sp, r7
 8003422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003426:	4770      	bx	lr

08003428 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003428:	b480      	push	{r7}
 800342a:	b083      	sub	sp, #12
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003430:	bf00      	nop
 8003432:	370c      	adds	r7, #12
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr

0800343c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800343c:	b480      	push	{r7}
 800343e:	b083      	sub	sp, #12
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003444:	bf00      	nop
 8003446:	370c      	adds	r7, #12
 8003448:	46bd      	mov	sp, r7
 800344a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344e:	4770      	bx	lr

08003450 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003450:	b480      	push	{r7}
 8003452:	b085      	sub	sp, #20
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
 8003458:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800345a:	2300      	movs	r3, #0
 800345c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003464:	2b01      	cmp	r3, #1
 8003466:	d101      	bne.n	800346c <HAL_ADC_ConfigChannel+0x1c>
 8003468:	2302      	movs	r3, #2
 800346a:	e113      	b.n	8003694 <HAL_ADC_ConfigChannel+0x244>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2201      	movs	r2, #1
 8003470:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	2b09      	cmp	r3, #9
 800347a:	d925      	bls.n	80034c8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	68d9      	ldr	r1, [r3, #12]
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	b29b      	uxth	r3, r3
 8003488:	461a      	mov	r2, r3
 800348a:	4613      	mov	r3, r2
 800348c:	005b      	lsls	r3, r3, #1
 800348e:	4413      	add	r3, r2
 8003490:	3b1e      	subs	r3, #30
 8003492:	2207      	movs	r2, #7
 8003494:	fa02 f303 	lsl.w	r3, r2, r3
 8003498:	43da      	mvns	r2, r3
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	400a      	ands	r2, r1
 80034a0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	68d9      	ldr	r1, [r3, #12]
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	689a      	ldr	r2, [r3, #8]
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	b29b      	uxth	r3, r3
 80034b2:	4618      	mov	r0, r3
 80034b4:	4603      	mov	r3, r0
 80034b6:	005b      	lsls	r3, r3, #1
 80034b8:	4403      	add	r3, r0
 80034ba:	3b1e      	subs	r3, #30
 80034bc:	409a      	lsls	r2, r3
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	430a      	orrs	r2, r1
 80034c4:	60da      	str	r2, [r3, #12]
 80034c6:	e022      	b.n	800350e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	6919      	ldr	r1, [r3, #16]
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	b29b      	uxth	r3, r3
 80034d4:	461a      	mov	r2, r3
 80034d6:	4613      	mov	r3, r2
 80034d8:	005b      	lsls	r3, r3, #1
 80034da:	4413      	add	r3, r2
 80034dc:	2207      	movs	r2, #7
 80034de:	fa02 f303 	lsl.w	r3, r2, r3
 80034e2:	43da      	mvns	r2, r3
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	400a      	ands	r2, r1
 80034ea:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	6919      	ldr	r1, [r3, #16]
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	689a      	ldr	r2, [r3, #8]
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	b29b      	uxth	r3, r3
 80034fc:	4618      	mov	r0, r3
 80034fe:	4603      	mov	r3, r0
 8003500:	005b      	lsls	r3, r3, #1
 8003502:	4403      	add	r3, r0
 8003504:	409a      	lsls	r2, r3
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	430a      	orrs	r2, r1
 800350c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	2b06      	cmp	r3, #6
 8003514:	d824      	bhi.n	8003560 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	685a      	ldr	r2, [r3, #4]
 8003520:	4613      	mov	r3, r2
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	4413      	add	r3, r2
 8003526:	3b05      	subs	r3, #5
 8003528:	221f      	movs	r2, #31
 800352a:	fa02 f303 	lsl.w	r3, r2, r3
 800352e:	43da      	mvns	r2, r3
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	400a      	ands	r2, r1
 8003536:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	b29b      	uxth	r3, r3
 8003544:	4618      	mov	r0, r3
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	685a      	ldr	r2, [r3, #4]
 800354a:	4613      	mov	r3, r2
 800354c:	009b      	lsls	r3, r3, #2
 800354e:	4413      	add	r3, r2
 8003550:	3b05      	subs	r3, #5
 8003552:	fa00 f203 	lsl.w	r2, r0, r3
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	430a      	orrs	r2, r1
 800355c:	635a      	str	r2, [r3, #52]	; 0x34
 800355e:	e04c      	b.n	80035fa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	2b0c      	cmp	r3, #12
 8003566:	d824      	bhi.n	80035b2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	685a      	ldr	r2, [r3, #4]
 8003572:	4613      	mov	r3, r2
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	4413      	add	r3, r2
 8003578:	3b23      	subs	r3, #35	; 0x23
 800357a:	221f      	movs	r2, #31
 800357c:	fa02 f303 	lsl.w	r3, r2, r3
 8003580:	43da      	mvns	r2, r3
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	400a      	ands	r2, r1
 8003588:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	b29b      	uxth	r3, r3
 8003596:	4618      	mov	r0, r3
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	685a      	ldr	r2, [r3, #4]
 800359c:	4613      	mov	r3, r2
 800359e:	009b      	lsls	r3, r3, #2
 80035a0:	4413      	add	r3, r2
 80035a2:	3b23      	subs	r3, #35	; 0x23
 80035a4:	fa00 f203 	lsl.w	r2, r0, r3
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	430a      	orrs	r2, r1
 80035ae:	631a      	str	r2, [r3, #48]	; 0x30
 80035b0:	e023      	b.n	80035fa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	685a      	ldr	r2, [r3, #4]
 80035bc:	4613      	mov	r3, r2
 80035be:	009b      	lsls	r3, r3, #2
 80035c0:	4413      	add	r3, r2
 80035c2:	3b41      	subs	r3, #65	; 0x41
 80035c4:	221f      	movs	r2, #31
 80035c6:	fa02 f303 	lsl.w	r3, r2, r3
 80035ca:	43da      	mvns	r2, r3
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	400a      	ands	r2, r1
 80035d2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	b29b      	uxth	r3, r3
 80035e0:	4618      	mov	r0, r3
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	685a      	ldr	r2, [r3, #4]
 80035e6:	4613      	mov	r3, r2
 80035e8:	009b      	lsls	r3, r3, #2
 80035ea:	4413      	add	r3, r2
 80035ec:	3b41      	subs	r3, #65	; 0x41
 80035ee:	fa00 f203 	lsl.w	r2, r0, r3
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	430a      	orrs	r2, r1
 80035f8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80035fa:	4b29      	ldr	r3, [pc, #164]	; (80036a0 <HAL_ADC_ConfigChannel+0x250>)
 80035fc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a28      	ldr	r2, [pc, #160]	; (80036a4 <HAL_ADC_ConfigChannel+0x254>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d10f      	bne.n	8003628 <HAL_ADC_ConfigChannel+0x1d8>
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	2b12      	cmp	r3, #18
 800360e:	d10b      	bne.n	8003628 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a1d      	ldr	r2, [pc, #116]	; (80036a4 <HAL_ADC_ConfigChannel+0x254>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d12b      	bne.n	800368a <HAL_ADC_ConfigChannel+0x23a>
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a1c      	ldr	r2, [pc, #112]	; (80036a8 <HAL_ADC_ConfigChannel+0x258>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d003      	beq.n	8003644 <HAL_ADC_ConfigChannel+0x1f4>
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	2b11      	cmp	r3, #17
 8003642:	d122      	bne.n	800368a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a11      	ldr	r2, [pc, #68]	; (80036a8 <HAL_ADC_ConfigChannel+0x258>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d111      	bne.n	800368a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003666:	4b11      	ldr	r3, [pc, #68]	; (80036ac <HAL_ADC_ConfigChannel+0x25c>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a11      	ldr	r2, [pc, #68]	; (80036b0 <HAL_ADC_ConfigChannel+0x260>)
 800366c:	fba2 2303 	umull	r2, r3, r2, r3
 8003670:	0c9a      	lsrs	r2, r3, #18
 8003672:	4613      	mov	r3, r2
 8003674:	009b      	lsls	r3, r3, #2
 8003676:	4413      	add	r3, r2
 8003678:	005b      	lsls	r3, r3, #1
 800367a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800367c:	e002      	b.n	8003684 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	3b01      	subs	r3, #1
 8003682:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d1f9      	bne.n	800367e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2200      	movs	r2, #0
 800368e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003692:	2300      	movs	r3, #0
}
 8003694:	4618      	mov	r0, r3
 8003696:	3714      	adds	r7, #20
 8003698:	46bd      	mov	sp, r7
 800369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369e:	4770      	bx	lr
 80036a0:	40012300 	.word	0x40012300
 80036a4:	40012000 	.word	0x40012000
 80036a8:	10000012 	.word	0x10000012
 80036ac:	20000044 	.word	0x20000044
 80036b0:	431bde83 	.word	0x431bde83

080036b4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b085      	sub	sp, #20
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80036bc:	4b79      	ldr	r3, [pc, #484]	; (80038a4 <ADC_Init+0x1f0>)
 80036be:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	685a      	ldr	r2, [r3, #4]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	431a      	orrs	r2, r3
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	685a      	ldr	r2, [r3, #4]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80036e8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	6859      	ldr	r1, [r3, #4]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	691b      	ldr	r3, [r3, #16]
 80036f4:	021a      	lsls	r2, r3, #8
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	430a      	orrs	r2, r1
 80036fc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	685a      	ldr	r2, [r3, #4]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800370c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	6859      	ldr	r1, [r3, #4]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	689a      	ldr	r2, [r3, #8]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	430a      	orrs	r2, r1
 800371e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	689a      	ldr	r2, [r3, #8]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800372e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	6899      	ldr	r1, [r3, #8]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	68da      	ldr	r2, [r3, #12]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	430a      	orrs	r2, r1
 8003740:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003746:	4a58      	ldr	r2, [pc, #352]	; (80038a8 <ADC_Init+0x1f4>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d022      	beq.n	8003792 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	689a      	ldr	r2, [r3, #8]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800375a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	6899      	ldr	r1, [r3, #8]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	430a      	orrs	r2, r1
 800376c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	689a      	ldr	r2, [r3, #8]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800377c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	6899      	ldr	r1, [r3, #8]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	430a      	orrs	r2, r1
 800378e:	609a      	str	r2, [r3, #8]
 8003790:	e00f      	b.n	80037b2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	689a      	ldr	r2, [r3, #8]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80037a0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	689a      	ldr	r2, [r3, #8]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80037b0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	689a      	ldr	r2, [r3, #8]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f022 0202 	bic.w	r2, r2, #2
 80037c0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	6899      	ldr	r1, [r3, #8]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	7e1b      	ldrb	r3, [r3, #24]
 80037cc:	005a      	lsls	r2, r3, #1
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	430a      	orrs	r2, r1
 80037d4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d01b      	beq.n	8003818 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	685a      	ldr	r2, [r3, #4]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037ee:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	685a      	ldr	r2, [r3, #4]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80037fe:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	6859      	ldr	r1, [r3, #4]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800380a:	3b01      	subs	r3, #1
 800380c:	035a      	lsls	r2, r3, #13
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	430a      	orrs	r2, r1
 8003814:	605a      	str	r2, [r3, #4]
 8003816:	e007      	b.n	8003828 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	685a      	ldr	r2, [r3, #4]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003826:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003836:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	69db      	ldr	r3, [r3, #28]
 8003842:	3b01      	subs	r3, #1
 8003844:	051a      	lsls	r2, r3, #20
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	430a      	orrs	r2, r1
 800384c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	689a      	ldr	r2, [r3, #8]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800385c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	6899      	ldr	r1, [r3, #8]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800386a:	025a      	lsls	r2, r3, #9
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	430a      	orrs	r2, r1
 8003872:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	689a      	ldr	r2, [r3, #8]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003882:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	6899      	ldr	r1, [r3, #8]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	695b      	ldr	r3, [r3, #20]
 800388e:	029a      	lsls	r2, r3, #10
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	430a      	orrs	r2, r1
 8003896:	609a      	str	r2, [r3, #8]
}
 8003898:	bf00      	nop
 800389a:	3714      	adds	r7, #20
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr
 80038a4:	40012300 	.word	0x40012300
 80038a8:	0f000001 	.word	0x0f000001

080038ac <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b084      	sub	sp, #16
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038b8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038be:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d13c      	bne.n	8003940 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ca:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d12b      	bne.n	8003938 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d127      	bne.n	8003938 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ee:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d006      	beq.n	8003904 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003900:	2b00      	cmp	r3, #0
 8003902:	d119      	bne.n	8003938 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	685a      	ldr	r2, [r3, #4]
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f022 0220 	bic.w	r2, r2, #32
 8003912:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003918:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003924:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003928:	2b00      	cmp	r3, #0
 800392a:	d105      	bne.n	8003938 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003930:	f043 0201 	orr.w	r2, r3, #1
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003938:	68f8      	ldr	r0, [r7, #12]
 800393a:	f7ff fd6b 	bl	8003414 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800393e:	e00e      	b.n	800395e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003944:	f003 0310 	and.w	r3, r3, #16
 8003948:	2b00      	cmp	r3, #0
 800394a:	d003      	beq.n	8003954 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800394c:	68f8      	ldr	r0, [r7, #12]
 800394e:	f7ff fd75 	bl	800343c <HAL_ADC_ErrorCallback>
}
 8003952:	e004      	b.n	800395e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	4798      	blx	r3
}
 800395e:	bf00      	nop
 8003960:	3710      	adds	r7, #16
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}

08003966 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003966:	b580      	push	{r7, lr}
 8003968:	b084      	sub	sp, #16
 800396a:	af00      	add	r7, sp, #0
 800396c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003972:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003974:	68f8      	ldr	r0, [r7, #12]
 8003976:	f7ff fd57 	bl	8003428 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800397a:	bf00      	nop
 800397c:	3710      	adds	r7, #16
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}

08003982 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003982:	b580      	push	{r7, lr}
 8003984:	b084      	sub	sp, #16
 8003986:	af00      	add	r7, sp, #0
 8003988:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800398e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2240      	movs	r2, #64	; 0x40
 8003994:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800399a:	f043 0204 	orr.w	r2, r3, #4
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80039a2:	68f8      	ldr	r0, [r7, #12]
 80039a4:	f7ff fd4a 	bl	800343c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80039a8:	bf00      	nop
 80039aa:	3710      	adds	r7, #16
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}

080039b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b085      	sub	sp, #20
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	f003 0307 	and.w	r3, r3, #7
 80039be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80039c0:	4b0c      	ldr	r3, [pc, #48]	; (80039f4 <__NVIC_SetPriorityGrouping+0x44>)
 80039c2:	68db      	ldr	r3, [r3, #12]
 80039c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80039c6:	68ba      	ldr	r2, [r7, #8]
 80039c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80039cc:	4013      	ands	r3, r2
 80039ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80039d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80039dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80039e2:	4a04      	ldr	r2, [pc, #16]	; (80039f4 <__NVIC_SetPriorityGrouping+0x44>)
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	60d3      	str	r3, [r2, #12]
}
 80039e8:	bf00      	nop
 80039ea:	3714      	adds	r7, #20
 80039ec:	46bd      	mov	sp, r7
 80039ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f2:	4770      	bx	lr
 80039f4:	e000ed00 	.word	0xe000ed00

080039f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80039f8:	b480      	push	{r7}
 80039fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80039fc:	4b04      	ldr	r3, [pc, #16]	; (8003a10 <__NVIC_GetPriorityGrouping+0x18>)
 80039fe:	68db      	ldr	r3, [r3, #12]
 8003a00:	0a1b      	lsrs	r3, r3, #8
 8003a02:	f003 0307 	and.w	r3, r3, #7
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0e:	4770      	bx	lr
 8003a10:	e000ed00 	.word	0xe000ed00

08003a14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b083      	sub	sp, #12
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	db0b      	blt.n	8003a3e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a26:	79fb      	ldrb	r3, [r7, #7]
 8003a28:	f003 021f 	and.w	r2, r3, #31
 8003a2c:	4907      	ldr	r1, [pc, #28]	; (8003a4c <__NVIC_EnableIRQ+0x38>)
 8003a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a32:	095b      	lsrs	r3, r3, #5
 8003a34:	2001      	movs	r0, #1
 8003a36:	fa00 f202 	lsl.w	r2, r0, r2
 8003a3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003a3e:	bf00      	nop
 8003a40:	370c      	adds	r7, #12
 8003a42:	46bd      	mov	sp, r7
 8003a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a48:	4770      	bx	lr
 8003a4a:	bf00      	nop
 8003a4c:	e000e100 	.word	0xe000e100

08003a50 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b083      	sub	sp, #12
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	4603      	mov	r3, r0
 8003a58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	db12      	blt.n	8003a88 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a62:	79fb      	ldrb	r3, [r7, #7]
 8003a64:	f003 021f 	and.w	r2, r3, #31
 8003a68:	490a      	ldr	r1, [pc, #40]	; (8003a94 <__NVIC_DisableIRQ+0x44>)
 8003a6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a6e:	095b      	lsrs	r3, r3, #5
 8003a70:	2001      	movs	r0, #1
 8003a72:	fa00 f202 	lsl.w	r2, r0, r2
 8003a76:	3320      	adds	r3, #32
 8003a78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003a7c:	f3bf 8f4f 	dsb	sy
}
 8003a80:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003a82:	f3bf 8f6f 	isb	sy
}
 8003a86:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003a88:	bf00      	nop
 8003a8a:	370c      	adds	r7, #12
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a92:	4770      	bx	lr
 8003a94:	e000e100 	.word	0xe000e100

08003a98 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b083      	sub	sp, #12
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	db0c      	blt.n	8003ac4 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003aaa:	79fb      	ldrb	r3, [r7, #7]
 8003aac:	f003 021f 	and.w	r2, r3, #31
 8003ab0:	4907      	ldr	r1, [pc, #28]	; (8003ad0 <__NVIC_ClearPendingIRQ+0x38>)
 8003ab2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ab6:	095b      	lsrs	r3, r3, #5
 8003ab8:	2001      	movs	r0, #1
 8003aba:	fa00 f202 	lsl.w	r2, r0, r2
 8003abe:	3360      	adds	r3, #96	; 0x60
 8003ac0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003ac4:	bf00      	nop
 8003ac6:	370c      	adds	r7, #12
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ace:	4770      	bx	lr
 8003ad0:	e000e100 	.word	0xe000e100

08003ad4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b083      	sub	sp, #12
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	4603      	mov	r3, r0
 8003adc:	6039      	str	r1, [r7, #0]
 8003ade:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ae0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	db0a      	blt.n	8003afe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	b2da      	uxtb	r2, r3
 8003aec:	490c      	ldr	r1, [pc, #48]	; (8003b20 <__NVIC_SetPriority+0x4c>)
 8003aee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003af2:	0112      	lsls	r2, r2, #4
 8003af4:	b2d2      	uxtb	r2, r2
 8003af6:	440b      	add	r3, r1
 8003af8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003afc:	e00a      	b.n	8003b14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	b2da      	uxtb	r2, r3
 8003b02:	4908      	ldr	r1, [pc, #32]	; (8003b24 <__NVIC_SetPriority+0x50>)
 8003b04:	79fb      	ldrb	r3, [r7, #7]
 8003b06:	f003 030f 	and.w	r3, r3, #15
 8003b0a:	3b04      	subs	r3, #4
 8003b0c:	0112      	lsls	r2, r2, #4
 8003b0e:	b2d2      	uxtb	r2, r2
 8003b10:	440b      	add	r3, r1
 8003b12:	761a      	strb	r2, [r3, #24]
}
 8003b14:	bf00      	nop
 8003b16:	370c      	adds	r7, #12
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr
 8003b20:	e000e100 	.word	0xe000e100
 8003b24:	e000ed00 	.word	0xe000ed00

08003b28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b089      	sub	sp, #36	; 0x24
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	60f8      	str	r0, [r7, #12]
 8003b30:	60b9      	str	r1, [r7, #8]
 8003b32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	f003 0307 	and.w	r3, r3, #7
 8003b3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b3c:	69fb      	ldr	r3, [r7, #28]
 8003b3e:	f1c3 0307 	rsb	r3, r3, #7
 8003b42:	2b04      	cmp	r3, #4
 8003b44:	bf28      	it	cs
 8003b46:	2304      	movcs	r3, #4
 8003b48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b4a:	69fb      	ldr	r3, [r7, #28]
 8003b4c:	3304      	adds	r3, #4
 8003b4e:	2b06      	cmp	r3, #6
 8003b50:	d902      	bls.n	8003b58 <NVIC_EncodePriority+0x30>
 8003b52:	69fb      	ldr	r3, [r7, #28]
 8003b54:	3b03      	subs	r3, #3
 8003b56:	e000      	b.n	8003b5a <NVIC_EncodePriority+0x32>
 8003b58:	2300      	movs	r3, #0
 8003b5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b5c:	f04f 32ff 	mov.w	r2, #4294967295
 8003b60:	69bb      	ldr	r3, [r7, #24]
 8003b62:	fa02 f303 	lsl.w	r3, r2, r3
 8003b66:	43da      	mvns	r2, r3
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	401a      	ands	r2, r3
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b70:	f04f 31ff 	mov.w	r1, #4294967295
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	fa01 f303 	lsl.w	r3, r1, r3
 8003b7a:	43d9      	mvns	r1, r3
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b80:	4313      	orrs	r3, r2
         );
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3724      	adds	r7, #36	; 0x24
 8003b86:	46bd      	mov	sp, r7
 8003b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8c:	4770      	bx	lr
	...

08003b90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b082      	sub	sp, #8
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	3b01      	subs	r3, #1
 8003b9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ba0:	d301      	bcc.n	8003ba6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e00f      	b.n	8003bc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ba6:	4a0a      	ldr	r2, [pc, #40]	; (8003bd0 <SysTick_Config+0x40>)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	3b01      	subs	r3, #1
 8003bac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003bae:	210f      	movs	r1, #15
 8003bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8003bb4:	f7ff ff8e 	bl	8003ad4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003bb8:	4b05      	ldr	r3, [pc, #20]	; (8003bd0 <SysTick_Config+0x40>)
 8003bba:	2200      	movs	r2, #0
 8003bbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003bbe:	4b04      	ldr	r3, [pc, #16]	; (8003bd0 <SysTick_Config+0x40>)
 8003bc0:	2207      	movs	r2, #7
 8003bc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003bc4:	2300      	movs	r3, #0
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3708      	adds	r7, #8
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}
 8003bce:	bf00      	nop
 8003bd0:	e000e010 	.word	0xe000e010

08003bd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b082      	sub	sp, #8
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003bdc:	6878      	ldr	r0, [r7, #4]
 8003bde:	f7ff fee7 	bl	80039b0 <__NVIC_SetPriorityGrouping>
}
 8003be2:	bf00      	nop
 8003be4:	3708      	adds	r7, #8
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}

08003bea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003bea:	b580      	push	{r7, lr}
 8003bec:	b086      	sub	sp, #24
 8003bee:	af00      	add	r7, sp, #0
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	60b9      	str	r1, [r7, #8]
 8003bf4:	607a      	str	r2, [r7, #4]
 8003bf6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003bfc:	f7ff fefc 	bl	80039f8 <__NVIC_GetPriorityGrouping>
 8003c00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c02:	687a      	ldr	r2, [r7, #4]
 8003c04:	68b9      	ldr	r1, [r7, #8]
 8003c06:	6978      	ldr	r0, [r7, #20]
 8003c08:	f7ff ff8e 	bl	8003b28 <NVIC_EncodePriority>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c12:	4611      	mov	r1, r2
 8003c14:	4618      	mov	r0, r3
 8003c16:	f7ff ff5d 	bl	8003ad4 <__NVIC_SetPriority>
}
 8003c1a:	bf00      	nop
 8003c1c:	3718      	adds	r7, #24
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}

08003c22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c22:	b580      	push	{r7, lr}
 8003c24:	b082      	sub	sp, #8
 8003c26:	af00      	add	r7, sp, #0
 8003c28:	4603      	mov	r3, r0
 8003c2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c30:	4618      	mov	r0, r3
 8003c32:	f7ff feef 	bl	8003a14 <__NVIC_EnableIRQ>
}
 8003c36:	bf00      	nop
 8003c38:	3708      	adds	r7, #8
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}

08003c3e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003c3e:	b580      	push	{r7, lr}
 8003c40:	b082      	sub	sp, #8
 8003c42:	af00      	add	r7, sp, #0
 8003c44:	4603      	mov	r3, r0
 8003c46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003c48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f7ff feff 	bl	8003a50 <__NVIC_DisableIRQ>
}
 8003c52:	bf00      	nop
 8003c54:	3708      	adds	r7, #8
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}

08003c5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003c5a:	b580      	push	{r7, lr}
 8003c5c:	b082      	sub	sp, #8
 8003c5e:	af00      	add	r7, sp, #0
 8003c60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f7ff ff94 	bl	8003b90 <SysTick_Config>
 8003c68:	4603      	mov	r3, r0
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3708      	adds	r7, #8
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}

08003c72 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003c72:	b580      	push	{r7, lr}
 8003c74:	b082      	sub	sp, #8
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	4603      	mov	r3, r0
 8003c7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8003c7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c80:	4618      	mov	r0, r3
 8003c82:	f7ff ff09 	bl	8003a98 <__NVIC_ClearPendingIRQ>
}
 8003c86:	bf00      	nop
 8003c88:	3708      	adds	r7, #8
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}
	...

08003c90 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b086      	sub	sp, #24
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003c9c:	f7ff f9fc 	bl	8003098 <HAL_GetTick>
 8003ca0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d101      	bne.n	8003cac <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e099      	b.n	8003de0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2202      	movs	r2, #2
 8003cb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f022 0201 	bic.w	r2, r2, #1
 8003cca:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ccc:	e00f      	b.n	8003cee <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003cce:	f7ff f9e3 	bl	8003098 <HAL_GetTick>
 8003cd2:	4602      	mov	r2, r0
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	1ad3      	subs	r3, r2, r3
 8003cd8:	2b05      	cmp	r3, #5
 8003cda:	d908      	bls.n	8003cee <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2220      	movs	r2, #32
 8003ce0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2203      	movs	r2, #3
 8003ce6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003cea:	2303      	movs	r3, #3
 8003cec:	e078      	b.n	8003de0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 0301 	and.w	r3, r3, #1
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d1e8      	bne.n	8003cce <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003d04:	697a      	ldr	r2, [r7, #20]
 8003d06:	4b38      	ldr	r3, [pc, #224]	; (8003de8 <HAL_DMA_Init+0x158>)
 8003d08:	4013      	ands	r3, r2
 8003d0a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	685a      	ldr	r2, [r3, #4]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d1a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	691b      	ldr	r3, [r3, #16]
 8003d20:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d26:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	699b      	ldr	r3, [r3, #24]
 8003d2c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d32:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6a1b      	ldr	r3, [r3, #32]
 8003d38:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d3a:	697a      	ldr	r2, [r7, #20]
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d44:	2b04      	cmp	r3, #4
 8003d46:	d107      	bne.n	8003d58 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d50:	4313      	orrs	r3, r2
 8003d52:	697a      	ldr	r2, [r7, #20]
 8003d54:	4313      	orrs	r3, r2
 8003d56:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	697a      	ldr	r2, [r7, #20]
 8003d5e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	695b      	ldr	r3, [r3, #20]
 8003d66:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	f023 0307 	bic.w	r3, r3, #7
 8003d6e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d74:	697a      	ldr	r2, [r7, #20]
 8003d76:	4313      	orrs	r3, r2
 8003d78:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d7e:	2b04      	cmp	r3, #4
 8003d80:	d117      	bne.n	8003db2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d86:	697a      	ldr	r2, [r7, #20]
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d00e      	beq.n	8003db2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003d94:	6878      	ldr	r0, [r7, #4]
 8003d96:	f000 fb0d 	bl	80043b4 <DMA_CheckFifoParam>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d008      	beq.n	8003db2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2240      	movs	r2, #64	; 0x40
 8003da4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2201      	movs	r2, #1
 8003daa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003dae:	2301      	movs	r3, #1
 8003db0:	e016      	b.n	8003de0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	697a      	ldr	r2, [r7, #20]
 8003db8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	f000 fac4 	bl	8004348 <DMA_CalcBaseAndBitshift>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dc8:	223f      	movs	r2, #63	; 0x3f
 8003dca:	409a      	lsls	r2, r3
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2201      	movs	r2, #1
 8003dda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003dde:	2300      	movs	r3, #0
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	3718      	adds	r7, #24
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}
 8003de8:	f010803f 	.word	0xf010803f

08003dec <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b086      	sub	sp, #24
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	60f8      	str	r0, [r7, #12]
 8003df4:	60b9      	str	r1, [r7, #8]
 8003df6:	607a      	str	r2, [r7, #4]
 8003df8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e02:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003e0a:	2b01      	cmp	r3, #1
 8003e0c:	d101      	bne.n	8003e12 <HAL_DMA_Start_IT+0x26>
 8003e0e:	2302      	movs	r3, #2
 8003e10:	e040      	b.n	8003e94 <HAL_DMA_Start_IT+0xa8>
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2201      	movs	r2, #1
 8003e16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e20:	b2db      	uxtb	r3, r3
 8003e22:	2b01      	cmp	r3, #1
 8003e24:	d12f      	bne.n	8003e86 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2202      	movs	r2, #2
 8003e2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2200      	movs	r2, #0
 8003e32:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	687a      	ldr	r2, [r7, #4]
 8003e38:	68b9      	ldr	r1, [r7, #8]
 8003e3a:	68f8      	ldr	r0, [r7, #12]
 8003e3c:	f000 fa56 	bl	80042ec <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e44:	223f      	movs	r2, #63	; 0x3f
 8003e46:	409a      	lsls	r2, r3
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f042 0216 	orr.w	r2, r2, #22
 8003e5a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d007      	beq.n	8003e74 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f042 0208 	orr.w	r2, r2, #8
 8003e72:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f042 0201 	orr.w	r2, r2, #1
 8003e82:	601a      	str	r2, [r3, #0]
 8003e84:	e005      	b.n	8003e92 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003e8e:	2302      	movs	r3, #2
 8003e90:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003e92:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	3718      	adds	r7, #24
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}

08003e9c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b084      	sub	sp, #16
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ea8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003eaa:	f7ff f8f5 	bl	8003098 <HAL_GetTick>
 8003eae:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	2b02      	cmp	r3, #2
 8003eba:	d008      	beq.n	8003ece <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2280      	movs	r2, #128	; 0x80
 8003ec0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e052      	b.n	8003f74 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f022 0216 	bic.w	r2, r2, #22
 8003edc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	695a      	ldr	r2, [r3, #20]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003eec:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d103      	bne.n	8003efe <HAL_DMA_Abort+0x62>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d007      	beq.n	8003f0e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	681a      	ldr	r2, [r3, #0]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f022 0208 	bic.w	r2, r2, #8
 8003f0c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f022 0201 	bic.w	r2, r2, #1
 8003f1c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f1e:	e013      	b.n	8003f48 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003f20:	f7ff f8ba 	bl	8003098 <HAL_GetTick>
 8003f24:	4602      	mov	r2, r0
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	1ad3      	subs	r3, r2, r3
 8003f2a:	2b05      	cmp	r3, #5
 8003f2c:	d90c      	bls.n	8003f48 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2220      	movs	r2, #32
 8003f32:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2203      	movs	r2, #3
 8003f38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003f44:	2303      	movs	r3, #3
 8003f46:	e015      	b.n	8003f74 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f003 0301 	and.w	r3, r3, #1
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d1e4      	bne.n	8003f20 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f5a:	223f      	movs	r2, #63	; 0x3f
 8003f5c:	409a      	lsls	r2, r3
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2201      	movs	r2, #1
 8003f66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003f72:	2300      	movs	r3, #0
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	3710      	adds	r7, #16
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}

08003f7c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b083      	sub	sp, #12
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f8a:	b2db      	uxtb	r3, r3
 8003f8c:	2b02      	cmp	r3, #2
 8003f8e:	d004      	beq.n	8003f9a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2280      	movs	r2, #128	; 0x80
 8003f94:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	e00c      	b.n	8003fb4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2205      	movs	r2, #5
 8003f9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f022 0201 	bic.w	r2, r2, #1
 8003fb0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003fb2:	2300      	movs	r3, #0
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	370c      	adds	r7, #12
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbe:	4770      	bx	lr

08003fc0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b086      	sub	sp, #24
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003fcc:	4b8e      	ldr	r3, [pc, #568]	; (8004208 <HAL_DMA_IRQHandler+0x248>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a8e      	ldr	r2, [pc, #568]	; (800420c <HAL_DMA_IRQHandler+0x24c>)
 8003fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8003fd6:	0a9b      	lsrs	r3, r3, #10
 8003fd8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fde:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fea:	2208      	movs	r2, #8
 8003fec:	409a      	lsls	r2, r3
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	4013      	ands	r3, r2
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d01a      	beq.n	800402c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f003 0304 	and.w	r3, r3, #4
 8004000:	2b00      	cmp	r3, #0
 8004002:	d013      	beq.n	800402c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f022 0204 	bic.w	r2, r2, #4
 8004012:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004018:	2208      	movs	r2, #8
 800401a:	409a      	lsls	r2, r3
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004024:	f043 0201 	orr.w	r2, r3, #1
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004030:	2201      	movs	r2, #1
 8004032:	409a      	lsls	r2, r3
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	4013      	ands	r3, r2
 8004038:	2b00      	cmp	r3, #0
 800403a:	d012      	beq.n	8004062 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	695b      	ldr	r3, [r3, #20]
 8004042:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004046:	2b00      	cmp	r3, #0
 8004048:	d00b      	beq.n	8004062 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800404e:	2201      	movs	r2, #1
 8004050:	409a      	lsls	r2, r3
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800405a:	f043 0202 	orr.w	r2, r3, #2
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004066:	2204      	movs	r2, #4
 8004068:	409a      	lsls	r2, r3
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	4013      	ands	r3, r2
 800406e:	2b00      	cmp	r3, #0
 8004070:	d012      	beq.n	8004098 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f003 0302 	and.w	r3, r3, #2
 800407c:	2b00      	cmp	r3, #0
 800407e:	d00b      	beq.n	8004098 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004084:	2204      	movs	r2, #4
 8004086:	409a      	lsls	r2, r3
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004090:	f043 0204 	orr.w	r2, r3, #4
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800409c:	2210      	movs	r2, #16
 800409e:	409a      	lsls	r2, r3
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	4013      	ands	r3, r2
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d043      	beq.n	8004130 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f003 0308 	and.w	r3, r3, #8
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d03c      	beq.n	8004130 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040ba:	2210      	movs	r2, #16
 80040bc:	409a      	lsls	r2, r3
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d018      	beq.n	8004102 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d108      	bne.n	80040f0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d024      	beq.n	8004130 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	4798      	blx	r3
 80040ee:	e01f      	b.n	8004130 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d01b      	beq.n	8004130 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040fc:	6878      	ldr	r0, [r7, #4]
 80040fe:	4798      	blx	r3
 8004100:	e016      	b.n	8004130 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800410c:	2b00      	cmp	r3, #0
 800410e:	d107      	bne.n	8004120 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f022 0208 	bic.w	r2, r2, #8
 800411e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004124:	2b00      	cmp	r3, #0
 8004126:	d003      	beq.n	8004130 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800412c:	6878      	ldr	r0, [r7, #4]
 800412e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004134:	2220      	movs	r2, #32
 8004136:	409a      	lsls	r2, r3
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	4013      	ands	r3, r2
 800413c:	2b00      	cmp	r3, #0
 800413e:	f000 808f 	beq.w	8004260 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f003 0310 	and.w	r3, r3, #16
 800414c:	2b00      	cmp	r3, #0
 800414e:	f000 8087 	beq.w	8004260 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004156:	2220      	movs	r2, #32
 8004158:	409a      	lsls	r2, r3
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004164:	b2db      	uxtb	r3, r3
 8004166:	2b05      	cmp	r3, #5
 8004168:	d136      	bne.n	80041d8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f022 0216 	bic.w	r2, r2, #22
 8004178:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	695a      	ldr	r2, [r3, #20]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004188:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800418e:	2b00      	cmp	r3, #0
 8004190:	d103      	bne.n	800419a <HAL_DMA_IRQHandler+0x1da>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004196:	2b00      	cmp	r3, #0
 8004198:	d007      	beq.n	80041aa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f022 0208 	bic.w	r2, r2, #8
 80041a8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041ae:	223f      	movs	r2, #63	; 0x3f
 80041b0:	409a      	lsls	r2, r3
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2201      	movs	r2, #1
 80041ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2200      	movs	r2, #0
 80041c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d07e      	beq.n	80042cc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041d2:	6878      	ldr	r0, [r7, #4]
 80041d4:	4798      	blx	r3
        }
        return;
 80041d6:	e079      	b.n	80042cc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d01d      	beq.n	8004222 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d10d      	bne.n	8004210 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d031      	beq.n	8004260 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004200:	6878      	ldr	r0, [r7, #4]
 8004202:	4798      	blx	r3
 8004204:	e02c      	b.n	8004260 <HAL_DMA_IRQHandler+0x2a0>
 8004206:	bf00      	nop
 8004208:	20000044 	.word	0x20000044
 800420c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004214:	2b00      	cmp	r3, #0
 8004216:	d023      	beq.n	8004260 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800421c:	6878      	ldr	r0, [r7, #4]
 800421e:	4798      	blx	r3
 8004220:	e01e      	b.n	8004260 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800422c:	2b00      	cmp	r3, #0
 800422e:	d10f      	bne.n	8004250 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f022 0210 	bic.w	r2, r2, #16
 800423e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2201      	movs	r2, #1
 8004244:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2200      	movs	r2, #0
 800424c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004254:	2b00      	cmp	r3, #0
 8004256:	d003      	beq.n	8004260 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800425c:	6878      	ldr	r0, [r7, #4]
 800425e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004264:	2b00      	cmp	r3, #0
 8004266:	d032      	beq.n	80042ce <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800426c:	f003 0301 	and.w	r3, r3, #1
 8004270:	2b00      	cmp	r3, #0
 8004272:	d022      	beq.n	80042ba <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2205      	movs	r2, #5
 8004278:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	681a      	ldr	r2, [r3, #0]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f022 0201 	bic.w	r2, r2, #1
 800428a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	3301      	adds	r3, #1
 8004290:	60bb      	str	r3, [r7, #8]
 8004292:	697a      	ldr	r2, [r7, #20]
 8004294:	429a      	cmp	r2, r3
 8004296:	d307      	bcc.n	80042a8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f003 0301 	and.w	r3, r3, #1
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d1f2      	bne.n	800428c <HAL_DMA_IRQHandler+0x2cc>
 80042a6:	e000      	b.n	80042aa <HAL_DMA_IRQHandler+0x2ea>
          break;
 80042a8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2201      	movs	r2, #1
 80042ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2200      	movs	r2, #0
 80042b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d005      	beq.n	80042ce <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	4798      	blx	r3
 80042ca:	e000      	b.n	80042ce <HAL_DMA_IRQHandler+0x30e>
        return;
 80042cc:	bf00      	nop
    }
  }
}
 80042ce:	3718      	adds	r7, #24
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}

080042d4 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b083      	sub	sp, #12
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	370c      	adds	r7, #12
 80042e4:	46bd      	mov	sp, r7
 80042e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ea:	4770      	bx	lr

080042ec <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b085      	sub	sp, #20
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	60f8      	str	r0, [r7, #12]
 80042f4:	60b9      	str	r1, [r7, #8]
 80042f6:	607a      	str	r2, [r7, #4]
 80042f8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	681a      	ldr	r2, [r3, #0]
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004308:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	683a      	ldr	r2, [r7, #0]
 8004310:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	2b40      	cmp	r3, #64	; 0x40
 8004318:	d108      	bne.n	800432c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	687a      	ldr	r2, [r7, #4]
 8004320:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	68ba      	ldr	r2, [r7, #8]
 8004328:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800432a:	e007      	b.n	800433c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	68ba      	ldr	r2, [r7, #8]
 8004332:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	687a      	ldr	r2, [r7, #4]
 800433a:	60da      	str	r2, [r3, #12]
}
 800433c:	bf00      	nop
 800433e:	3714      	adds	r7, #20
 8004340:	46bd      	mov	sp, r7
 8004342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004346:	4770      	bx	lr

08004348 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004348:	b480      	push	{r7}
 800434a:	b085      	sub	sp, #20
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	b2db      	uxtb	r3, r3
 8004356:	3b10      	subs	r3, #16
 8004358:	4a14      	ldr	r2, [pc, #80]	; (80043ac <DMA_CalcBaseAndBitshift+0x64>)
 800435a:	fba2 2303 	umull	r2, r3, r2, r3
 800435e:	091b      	lsrs	r3, r3, #4
 8004360:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004362:	4a13      	ldr	r2, [pc, #76]	; (80043b0 <DMA_CalcBaseAndBitshift+0x68>)
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	4413      	add	r3, r2
 8004368:	781b      	ldrb	r3, [r3, #0]
 800436a:	461a      	mov	r2, r3
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	2b03      	cmp	r3, #3
 8004374:	d909      	bls.n	800438a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800437e:	f023 0303 	bic.w	r3, r3, #3
 8004382:	1d1a      	adds	r2, r3, #4
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	659a      	str	r2, [r3, #88]	; 0x58
 8004388:	e007      	b.n	800439a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004392:	f023 0303 	bic.w	r3, r3, #3
 8004396:	687a      	ldr	r2, [r7, #4]
 8004398:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800439e:	4618      	mov	r0, r3
 80043a0:	3714      	adds	r7, #20
 80043a2:	46bd      	mov	sp, r7
 80043a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a8:	4770      	bx	lr
 80043aa:	bf00      	nop
 80043ac:	aaaaaaab 	.word	0xaaaaaaab
 80043b0:	08030634 	.word	0x08030634

080043b4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b085      	sub	sp, #20
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043bc:	2300      	movs	r3, #0
 80043be:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043c4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	699b      	ldr	r3, [r3, #24]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d11f      	bne.n	800440e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	2b03      	cmp	r3, #3
 80043d2:	d856      	bhi.n	8004482 <DMA_CheckFifoParam+0xce>
 80043d4:	a201      	add	r2, pc, #4	; (adr r2, 80043dc <DMA_CheckFifoParam+0x28>)
 80043d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043da:	bf00      	nop
 80043dc:	080043ed 	.word	0x080043ed
 80043e0:	080043ff 	.word	0x080043ff
 80043e4:	080043ed 	.word	0x080043ed
 80043e8:	08004483 	.word	0x08004483
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d046      	beq.n	8004486 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80043f8:	2301      	movs	r3, #1
 80043fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043fc:	e043      	b.n	8004486 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004402:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004406:	d140      	bne.n	800448a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004408:	2301      	movs	r3, #1
 800440a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800440c:	e03d      	b.n	800448a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	699b      	ldr	r3, [r3, #24]
 8004412:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004416:	d121      	bne.n	800445c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	2b03      	cmp	r3, #3
 800441c:	d837      	bhi.n	800448e <DMA_CheckFifoParam+0xda>
 800441e:	a201      	add	r2, pc, #4	; (adr r2, 8004424 <DMA_CheckFifoParam+0x70>)
 8004420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004424:	08004435 	.word	0x08004435
 8004428:	0800443b 	.word	0x0800443b
 800442c:	08004435 	.word	0x08004435
 8004430:	0800444d 	.word	0x0800444d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004434:	2301      	movs	r3, #1
 8004436:	73fb      	strb	r3, [r7, #15]
      break;
 8004438:	e030      	b.n	800449c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800443e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004442:	2b00      	cmp	r3, #0
 8004444:	d025      	beq.n	8004492 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004446:	2301      	movs	r3, #1
 8004448:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800444a:	e022      	b.n	8004492 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004450:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004454:	d11f      	bne.n	8004496 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800445a:	e01c      	b.n	8004496 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	2b02      	cmp	r3, #2
 8004460:	d903      	bls.n	800446a <DMA_CheckFifoParam+0xb6>
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	2b03      	cmp	r3, #3
 8004466:	d003      	beq.n	8004470 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004468:	e018      	b.n	800449c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	73fb      	strb	r3, [r7, #15]
      break;
 800446e:	e015      	b.n	800449c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004474:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004478:	2b00      	cmp	r3, #0
 800447a:	d00e      	beq.n	800449a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800447c:	2301      	movs	r3, #1
 800447e:	73fb      	strb	r3, [r7, #15]
      break;
 8004480:	e00b      	b.n	800449a <DMA_CheckFifoParam+0xe6>
      break;
 8004482:	bf00      	nop
 8004484:	e00a      	b.n	800449c <DMA_CheckFifoParam+0xe8>
      break;
 8004486:	bf00      	nop
 8004488:	e008      	b.n	800449c <DMA_CheckFifoParam+0xe8>
      break;
 800448a:	bf00      	nop
 800448c:	e006      	b.n	800449c <DMA_CheckFifoParam+0xe8>
      break;
 800448e:	bf00      	nop
 8004490:	e004      	b.n	800449c <DMA_CheckFifoParam+0xe8>
      break;
 8004492:	bf00      	nop
 8004494:	e002      	b.n	800449c <DMA_CheckFifoParam+0xe8>
      break;   
 8004496:	bf00      	nop
 8004498:	e000      	b.n	800449c <DMA_CheckFifoParam+0xe8>
      break;
 800449a:	bf00      	nop
    }
  } 
  
  return status; 
 800449c:	7bfb      	ldrb	r3, [r7, #15]
}
 800449e:	4618      	mov	r0, r3
 80044a0:	3714      	adds	r7, #20
 80044a2:	46bd      	mov	sp, r7
 80044a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a8:	4770      	bx	lr
 80044aa:	bf00      	nop

080044ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b089      	sub	sp, #36	; 0x24
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
 80044b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80044b6:	2300      	movs	r3, #0
 80044b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80044ba:	2300      	movs	r3, #0
 80044bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80044be:	2300      	movs	r3, #0
 80044c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80044c2:	2300      	movs	r3, #0
 80044c4:	61fb      	str	r3, [r7, #28]
 80044c6:	e159      	b.n	800477c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80044c8:	2201      	movs	r2, #1
 80044ca:	69fb      	ldr	r3, [r7, #28]
 80044cc:	fa02 f303 	lsl.w	r3, r2, r3
 80044d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	697a      	ldr	r2, [r7, #20]
 80044d8:	4013      	ands	r3, r2
 80044da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80044dc:	693a      	ldr	r2, [r7, #16]
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	429a      	cmp	r2, r3
 80044e2:	f040 8148 	bne.w	8004776 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	f003 0303 	and.w	r3, r3, #3
 80044ee:	2b01      	cmp	r3, #1
 80044f0:	d005      	beq.n	80044fe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80044fa:	2b02      	cmp	r3, #2
 80044fc:	d130      	bne.n	8004560 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004504:	69fb      	ldr	r3, [r7, #28]
 8004506:	005b      	lsls	r3, r3, #1
 8004508:	2203      	movs	r2, #3
 800450a:	fa02 f303 	lsl.w	r3, r2, r3
 800450e:	43db      	mvns	r3, r3
 8004510:	69ba      	ldr	r2, [r7, #24]
 8004512:	4013      	ands	r3, r2
 8004514:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	68da      	ldr	r2, [r3, #12]
 800451a:	69fb      	ldr	r3, [r7, #28]
 800451c:	005b      	lsls	r3, r3, #1
 800451e:	fa02 f303 	lsl.w	r3, r2, r3
 8004522:	69ba      	ldr	r2, [r7, #24]
 8004524:	4313      	orrs	r3, r2
 8004526:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	69ba      	ldr	r2, [r7, #24]
 800452c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004534:	2201      	movs	r2, #1
 8004536:	69fb      	ldr	r3, [r7, #28]
 8004538:	fa02 f303 	lsl.w	r3, r2, r3
 800453c:	43db      	mvns	r3, r3
 800453e:	69ba      	ldr	r2, [r7, #24]
 8004540:	4013      	ands	r3, r2
 8004542:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	091b      	lsrs	r3, r3, #4
 800454a:	f003 0201 	and.w	r2, r3, #1
 800454e:	69fb      	ldr	r3, [r7, #28]
 8004550:	fa02 f303 	lsl.w	r3, r2, r3
 8004554:	69ba      	ldr	r2, [r7, #24]
 8004556:	4313      	orrs	r3, r2
 8004558:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	69ba      	ldr	r2, [r7, #24]
 800455e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	f003 0303 	and.w	r3, r3, #3
 8004568:	2b03      	cmp	r3, #3
 800456a:	d017      	beq.n	800459c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	68db      	ldr	r3, [r3, #12]
 8004570:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004572:	69fb      	ldr	r3, [r7, #28]
 8004574:	005b      	lsls	r3, r3, #1
 8004576:	2203      	movs	r2, #3
 8004578:	fa02 f303 	lsl.w	r3, r2, r3
 800457c:	43db      	mvns	r3, r3
 800457e:	69ba      	ldr	r2, [r7, #24]
 8004580:	4013      	ands	r3, r2
 8004582:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	689a      	ldr	r2, [r3, #8]
 8004588:	69fb      	ldr	r3, [r7, #28]
 800458a:	005b      	lsls	r3, r3, #1
 800458c:	fa02 f303 	lsl.w	r3, r2, r3
 8004590:	69ba      	ldr	r2, [r7, #24]
 8004592:	4313      	orrs	r3, r2
 8004594:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	69ba      	ldr	r2, [r7, #24]
 800459a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	f003 0303 	and.w	r3, r3, #3
 80045a4:	2b02      	cmp	r3, #2
 80045a6:	d123      	bne.n	80045f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80045a8:	69fb      	ldr	r3, [r7, #28]
 80045aa:	08da      	lsrs	r2, r3, #3
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	3208      	adds	r2, #8
 80045b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80045b6:	69fb      	ldr	r3, [r7, #28]
 80045b8:	f003 0307 	and.w	r3, r3, #7
 80045bc:	009b      	lsls	r3, r3, #2
 80045be:	220f      	movs	r2, #15
 80045c0:	fa02 f303 	lsl.w	r3, r2, r3
 80045c4:	43db      	mvns	r3, r3
 80045c6:	69ba      	ldr	r2, [r7, #24]
 80045c8:	4013      	ands	r3, r2
 80045ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	691a      	ldr	r2, [r3, #16]
 80045d0:	69fb      	ldr	r3, [r7, #28]
 80045d2:	f003 0307 	and.w	r3, r3, #7
 80045d6:	009b      	lsls	r3, r3, #2
 80045d8:	fa02 f303 	lsl.w	r3, r2, r3
 80045dc:	69ba      	ldr	r2, [r7, #24]
 80045de:	4313      	orrs	r3, r2
 80045e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80045e2:	69fb      	ldr	r3, [r7, #28]
 80045e4:	08da      	lsrs	r2, r3, #3
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	3208      	adds	r2, #8
 80045ea:	69b9      	ldr	r1, [r7, #24]
 80045ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80045f6:	69fb      	ldr	r3, [r7, #28]
 80045f8:	005b      	lsls	r3, r3, #1
 80045fa:	2203      	movs	r2, #3
 80045fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004600:	43db      	mvns	r3, r3
 8004602:	69ba      	ldr	r2, [r7, #24]
 8004604:	4013      	ands	r3, r2
 8004606:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	f003 0203 	and.w	r2, r3, #3
 8004610:	69fb      	ldr	r3, [r7, #28]
 8004612:	005b      	lsls	r3, r3, #1
 8004614:	fa02 f303 	lsl.w	r3, r2, r3
 8004618:	69ba      	ldr	r2, [r7, #24]
 800461a:	4313      	orrs	r3, r2
 800461c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	69ba      	ldr	r2, [r7, #24]
 8004622:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800462c:	2b00      	cmp	r3, #0
 800462e:	f000 80a2 	beq.w	8004776 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004632:	2300      	movs	r3, #0
 8004634:	60fb      	str	r3, [r7, #12]
 8004636:	4b57      	ldr	r3, [pc, #348]	; (8004794 <HAL_GPIO_Init+0x2e8>)
 8004638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800463a:	4a56      	ldr	r2, [pc, #344]	; (8004794 <HAL_GPIO_Init+0x2e8>)
 800463c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004640:	6453      	str	r3, [r2, #68]	; 0x44
 8004642:	4b54      	ldr	r3, [pc, #336]	; (8004794 <HAL_GPIO_Init+0x2e8>)
 8004644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004646:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800464a:	60fb      	str	r3, [r7, #12]
 800464c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800464e:	4a52      	ldr	r2, [pc, #328]	; (8004798 <HAL_GPIO_Init+0x2ec>)
 8004650:	69fb      	ldr	r3, [r7, #28]
 8004652:	089b      	lsrs	r3, r3, #2
 8004654:	3302      	adds	r3, #2
 8004656:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800465a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800465c:	69fb      	ldr	r3, [r7, #28]
 800465e:	f003 0303 	and.w	r3, r3, #3
 8004662:	009b      	lsls	r3, r3, #2
 8004664:	220f      	movs	r2, #15
 8004666:	fa02 f303 	lsl.w	r3, r2, r3
 800466a:	43db      	mvns	r3, r3
 800466c:	69ba      	ldr	r2, [r7, #24]
 800466e:	4013      	ands	r3, r2
 8004670:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	4a49      	ldr	r2, [pc, #292]	; (800479c <HAL_GPIO_Init+0x2f0>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d019      	beq.n	80046ae <HAL_GPIO_Init+0x202>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	4a48      	ldr	r2, [pc, #288]	; (80047a0 <HAL_GPIO_Init+0x2f4>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d013      	beq.n	80046aa <HAL_GPIO_Init+0x1fe>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	4a47      	ldr	r2, [pc, #284]	; (80047a4 <HAL_GPIO_Init+0x2f8>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d00d      	beq.n	80046a6 <HAL_GPIO_Init+0x1fa>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	4a46      	ldr	r2, [pc, #280]	; (80047a8 <HAL_GPIO_Init+0x2fc>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d007      	beq.n	80046a2 <HAL_GPIO_Init+0x1f6>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	4a45      	ldr	r2, [pc, #276]	; (80047ac <HAL_GPIO_Init+0x300>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d101      	bne.n	800469e <HAL_GPIO_Init+0x1f2>
 800469a:	2304      	movs	r3, #4
 800469c:	e008      	b.n	80046b0 <HAL_GPIO_Init+0x204>
 800469e:	2307      	movs	r3, #7
 80046a0:	e006      	b.n	80046b0 <HAL_GPIO_Init+0x204>
 80046a2:	2303      	movs	r3, #3
 80046a4:	e004      	b.n	80046b0 <HAL_GPIO_Init+0x204>
 80046a6:	2302      	movs	r3, #2
 80046a8:	e002      	b.n	80046b0 <HAL_GPIO_Init+0x204>
 80046aa:	2301      	movs	r3, #1
 80046ac:	e000      	b.n	80046b0 <HAL_GPIO_Init+0x204>
 80046ae:	2300      	movs	r3, #0
 80046b0:	69fa      	ldr	r2, [r7, #28]
 80046b2:	f002 0203 	and.w	r2, r2, #3
 80046b6:	0092      	lsls	r2, r2, #2
 80046b8:	4093      	lsls	r3, r2
 80046ba:	69ba      	ldr	r2, [r7, #24]
 80046bc:	4313      	orrs	r3, r2
 80046be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80046c0:	4935      	ldr	r1, [pc, #212]	; (8004798 <HAL_GPIO_Init+0x2ec>)
 80046c2:	69fb      	ldr	r3, [r7, #28]
 80046c4:	089b      	lsrs	r3, r3, #2
 80046c6:	3302      	adds	r3, #2
 80046c8:	69ba      	ldr	r2, [r7, #24]
 80046ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80046ce:	4b38      	ldr	r3, [pc, #224]	; (80047b0 <HAL_GPIO_Init+0x304>)
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	43db      	mvns	r3, r3
 80046d8:	69ba      	ldr	r2, [r7, #24]
 80046da:	4013      	ands	r3, r2
 80046dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d003      	beq.n	80046f2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80046ea:	69ba      	ldr	r2, [r7, #24]
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	4313      	orrs	r3, r2
 80046f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80046f2:	4a2f      	ldr	r2, [pc, #188]	; (80047b0 <HAL_GPIO_Init+0x304>)
 80046f4:	69bb      	ldr	r3, [r7, #24]
 80046f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80046f8:	4b2d      	ldr	r3, [pc, #180]	; (80047b0 <HAL_GPIO_Init+0x304>)
 80046fa:	68db      	ldr	r3, [r3, #12]
 80046fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	43db      	mvns	r3, r3
 8004702:	69ba      	ldr	r2, [r7, #24]
 8004704:	4013      	ands	r3, r2
 8004706:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004710:	2b00      	cmp	r3, #0
 8004712:	d003      	beq.n	800471c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004714:	69ba      	ldr	r2, [r7, #24]
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	4313      	orrs	r3, r2
 800471a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800471c:	4a24      	ldr	r2, [pc, #144]	; (80047b0 <HAL_GPIO_Init+0x304>)
 800471e:	69bb      	ldr	r3, [r7, #24]
 8004720:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004722:	4b23      	ldr	r3, [pc, #140]	; (80047b0 <HAL_GPIO_Init+0x304>)
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	43db      	mvns	r3, r3
 800472c:	69ba      	ldr	r2, [r7, #24]
 800472e:	4013      	ands	r3, r2
 8004730:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800473a:	2b00      	cmp	r3, #0
 800473c:	d003      	beq.n	8004746 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800473e:	69ba      	ldr	r2, [r7, #24]
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	4313      	orrs	r3, r2
 8004744:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004746:	4a1a      	ldr	r2, [pc, #104]	; (80047b0 <HAL_GPIO_Init+0x304>)
 8004748:	69bb      	ldr	r3, [r7, #24]
 800474a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800474c:	4b18      	ldr	r3, [pc, #96]	; (80047b0 <HAL_GPIO_Init+0x304>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	43db      	mvns	r3, r3
 8004756:	69ba      	ldr	r2, [r7, #24]
 8004758:	4013      	ands	r3, r2
 800475a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004764:	2b00      	cmp	r3, #0
 8004766:	d003      	beq.n	8004770 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004768:	69ba      	ldr	r2, [r7, #24]
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	4313      	orrs	r3, r2
 800476e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004770:	4a0f      	ldr	r2, [pc, #60]	; (80047b0 <HAL_GPIO_Init+0x304>)
 8004772:	69bb      	ldr	r3, [r7, #24]
 8004774:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004776:	69fb      	ldr	r3, [r7, #28]
 8004778:	3301      	adds	r3, #1
 800477a:	61fb      	str	r3, [r7, #28]
 800477c:	69fb      	ldr	r3, [r7, #28]
 800477e:	2b0f      	cmp	r3, #15
 8004780:	f67f aea2 	bls.w	80044c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004784:	bf00      	nop
 8004786:	bf00      	nop
 8004788:	3724      	adds	r7, #36	; 0x24
 800478a:	46bd      	mov	sp, r7
 800478c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004790:	4770      	bx	lr
 8004792:	bf00      	nop
 8004794:	40023800 	.word	0x40023800
 8004798:	40013800 	.word	0x40013800
 800479c:	40020000 	.word	0x40020000
 80047a0:	40020400 	.word	0x40020400
 80047a4:	40020800 	.word	0x40020800
 80047a8:	40020c00 	.word	0x40020c00
 80047ac:	40021000 	.word	0x40021000
 80047b0:	40013c00 	.word	0x40013c00

080047b4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b087      	sub	sp, #28
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
 80047bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80047be:	2300      	movs	r3, #0
 80047c0:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80047c2:	2300      	movs	r3, #0
 80047c4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80047c6:	2300      	movs	r3, #0
 80047c8:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80047ca:	2300      	movs	r3, #0
 80047cc:	617b      	str	r3, [r7, #20]
 80047ce:	e0bb      	b.n	8004948 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80047d0:	2201      	movs	r2, #1
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	fa02 f303 	lsl.w	r3, r2, r3
 80047d8:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80047da:	683a      	ldr	r2, [r7, #0]
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	4013      	ands	r3, r2
 80047e0:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80047e2:	68fa      	ldr	r2, [r7, #12]
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	429a      	cmp	r2, r3
 80047e8:	f040 80ab 	bne.w	8004942 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80047ec:	4a5c      	ldr	r2, [pc, #368]	; (8004960 <HAL_GPIO_DeInit+0x1ac>)
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	089b      	lsrs	r3, r3, #2
 80047f2:	3302      	adds	r3, #2
 80047f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047f8:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	f003 0303 	and.w	r3, r3, #3
 8004800:	009b      	lsls	r3, r3, #2
 8004802:	220f      	movs	r2, #15
 8004804:	fa02 f303 	lsl.w	r3, r2, r3
 8004808:	68ba      	ldr	r2, [r7, #8]
 800480a:	4013      	ands	r3, r2
 800480c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	4a54      	ldr	r2, [pc, #336]	; (8004964 <HAL_GPIO_DeInit+0x1b0>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d019      	beq.n	800484a <HAL_GPIO_DeInit+0x96>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	4a53      	ldr	r2, [pc, #332]	; (8004968 <HAL_GPIO_DeInit+0x1b4>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d013      	beq.n	8004846 <HAL_GPIO_DeInit+0x92>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	4a52      	ldr	r2, [pc, #328]	; (800496c <HAL_GPIO_DeInit+0x1b8>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d00d      	beq.n	8004842 <HAL_GPIO_DeInit+0x8e>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	4a51      	ldr	r2, [pc, #324]	; (8004970 <HAL_GPIO_DeInit+0x1bc>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d007      	beq.n	800483e <HAL_GPIO_DeInit+0x8a>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	4a50      	ldr	r2, [pc, #320]	; (8004974 <HAL_GPIO_DeInit+0x1c0>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d101      	bne.n	800483a <HAL_GPIO_DeInit+0x86>
 8004836:	2304      	movs	r3, #4
 8004838:	e008      	b.n	800484c <HAL_GPIO_DeInit+0x98>
 800483a:	2307      	movs	r3, #7
 800483c:	e006      	b.n	800484c <HAL_GPIO_DeInit+0x98>
 800483e:	2303      	movs	r3, #3
 8004840:	e004      	b.n	800484c <HAL_GPIO_DeInit+0x98>
 8004842:	2302      	movs	r3, #2
 8004844:	e002      	b.n	800484c <HAL_GPIO_DeInit+0x98>
 8004846:	2301      	movs	r3, #1
 8004848:	e000      	b.n	800484c <HAL_GPIO_DeInit+0x98>
 800484a:	2300      	movs	r3, #0
 800484c:	697a      	ldr	r2, [r7, #20]
 800484e:	f002 0203 	and.w	r2, r2, #3
 8004852:	0092      	lsls	r2, r2, #2
 8004854:	4093      	lsls	r3, r2
 8004856:	68ba      	ldr	r2, [r7, #8]
 8004858:	429a      	cmp	r2, r3
 800485a:	d132      	bne.n	80048c2 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800485c:	4b46      	ldr	r3, [pc, #280]	; (8004978 <HAL_GPIO_DeInit+0x1c4>)
 800485e:	681a      	ldr	r2, [r3, #0]
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	43db      	mvns	r3, r3
 8004864:	4944      	ldr	r1, [pc, #272]	; (8004978 <HAL_GPIO_DeInit+0x1c4>)
 8004866:	4013      	ands	r3, r2
 8004868:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800486a:	4b43      	ldr	r3, [pc, #268]	; (8004978 <HAL_GPIO_DeInit+0x1c4>)
 800486c:	685a      	ldr	r2, [r3, #4]
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	43db      	mvns	r3, r3
 8004872:	4941      	ldr	r1, [pc, #260]	; (8004978 <HAL_GPIO_DeInit+0x1c4>)
 8004874:	4013      	ands	r3, r2
 8004876:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004878:	4b3f      	ldr	r3, [pc, #252]	; (8004978 <HAL_GPIO_DeInit+0x1c4>)
 800487a:	68da      	ldr	r2, [r3, #12]
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	43db      	mvns	r3, r3
 8004880:	493d      	ldr	r1, [pc, #244]	; (8004978 <HAL_GPIO_DeInit+0x1c4>)
 8004882:	4013      	ands	r3, r2
 8004884:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8004886:	4b3c      	ldr	r3, [pc, #240]	; (8004978 <HAL_GPIO_DeInit+0x1c4>)
 8004888:	689a      	ldr	r2, [r3, #8]
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	43db      	mvns	r3, r3
 800488e:	493a      	ldr	r1, [pc, #232]	; (8004978 <HAL_GPIO_DeInit+0x1c4>)
 8004890:	4013      	ands	r3, r2
 8004892:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	f003 0303 	and.w	r3, r3, #3
 800489a:	009b      	lsls	r3, r3, #2
 800489c:	220f      	movs	r2, #15
 800489e:	fa02 f303 	lsl.w	r3, r2, r3
 80048a2:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80048a4:	4a2e      	ldr	r2, [pc, #184]	; (8004960 <HAL_GPIO_DeInit+0x1ac>)
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	089b      	lsrs	r3, r3, #2
 80048aa:	3302      	adds	r3, #2
 80048ac:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	43da      	mvns	r2, r3
 80048b4:	482a      	ldr	r0, [pc, #168]	; (8004960 <HAL_GPIO_DeInit+0x1ac>)
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	089b      	lsrs	r3, r3, #2
 80048ba:	400a      	ands	r2, r1
 80048bc:	3302      	adds	r3, #2
 80048be:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681a      	ldr	r2, [r3, #0]
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	005b      	lsls	r3, r3, #1
 80048ca:	2103      	movs	r1, #3
 80048cc:	fa01 f303 	lsl.w	r3, r1, r3
 80048d0:	43db      	mvns	r3, r3
 80048d2:	401a      	ands	r2, r3
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	08da      	lsrs	r2, r3, #3
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	3208      	adds	r2, #8
 80048e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	f003 0307 	and.w	r3, r3, #7
 80048ea:	009b      	lsls	r3, r3, #2
 80048ec:	220f      	movs	r2, #15
 80048ee:	fa02 f303 	lsl.w	r3, r2, r3
 80048f2:	43db      	mvns	r3, r3
 80048f4:	697a      	ldr	r2, [r7, #20]
 80048f6:	08d2      	lsrs	r2, r2, #3
 80048f8:	4019      	ands	r1, r3
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	3208      	adds	r2, #8
 80048fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	68da      	ldr	r2, [r3, #12]
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	005b      	lsls	r3, r3, #1
 800490a:	2103      	movs	r1, #3
 800490c:	fa01 f303 	lsl.w	r3, r1, r3
 8004910:	43db      	mvns	r3, r3
 8004912:	401a      	ands	r2, r3
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	685a      	ldr	r2, [r3, #4]
 800491c:	2101      	movs	r1, #1
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	fa01 f303 	lsl.w	r3, r1, r3
 8004924:	43db      	mvns	r3, r3
 8004926:	401a      	ands	r2, r3
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	689a      	ldr	r2, [r3, #8]
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	005b      	lsls	r3, r3, #1
 8004934:	2103      	movs	r1, #3
 8004936:	fa01 f303 	lsl.w	r3, r1, r3
 800493a:	43db      	mvns	r3, r3
 800493c:	401a      	ands	r2, r3
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	3301      	adds	r3, #1
 8004946:	617b      	str	r3, [r7, #20]
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	2b0f      	cmp	r3, #15
 800494c:	f67f af40 	bls.w	80047d0 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8004950:	bf00      	nop
 8004952:	bf00      	nop
 8004954:	371c      	adds	r7, #28
 8004956:	46bd      	mov	sp, r7
 8004958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495c:	4770      	bx	lr
 800495e:	bf00      	nop
 8004960:	40013800 	.word	0x40013800
 8004964:	40020000 	.word	0x40020000
 8004968:	40020400 	.word	0x40020400
 800496c:	40020800 	.word	0x40020800
 8004970:	40020c00 	.word	0x40020c00
 8004974:	40021000 	.word	0x40021000
 8004978:	40013c00 	.word	0x40013c00

0800497c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800497c:	b480      	push	{r7}
 800497e:	b083      	sub	sp, #12
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
 8004984:	460b      	mov	r3, r1
 8004986:	807b      	strh	r3, [r7, #2]
 8004988:	4613      	mov	r3, r2
 800498a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800498c:	787b      	ldrb	r3, [r7, #1]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d003      	beq.n	800499a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004992:	887a      	ldrh	r2, [r7, #2]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004998:	e003      	b.n	80049a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800499a:	887b      	ldrh	r3, [r7, #2]
 800499c:	041a      	lsls	r2, r3, #16
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	619a      	str	r2, [r3, #24]
}
 80049a2:	bf00      	nop
 80049a4:	370c      	adds	r7, #12
 80049a6:	46bd      	mov	sp, r7
 80049a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ac:	4770      	bx	lr
	...

080049b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b084      	sub	sp, #16
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d101      	bne.n	80049c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	e12b      	b.n	8004c1a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049c8:	b2db      	uxtb	r3, r3
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d106      	bne.n	80049dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2200      	movs	r2, #0
 80049d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	f7fd fa7a 	bl	8001ed0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2224      	movs	r2, #36	; 0x24
 80049e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	681a      	ldr	r2, [r3, #0]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f022 0201 	bic.w	r2, r2, #1
 80049f2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a02:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	681a      	ldr	r2, [r3, #0]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004a12:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004a14:	f002 fe72 	bl	80076fc <HAL_RCC_GetPCLK1Freq>
 8004a18:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	4a81      	ldr	r2, [pc, #516]	; (8004c24 <HAL_I2C_Init+0x274>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d807      	bhi.n	8004a34 <HAL_I2C_Init+0x84>
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	4a80      	ldr	r2, [pc, #512]	; (8004c28 <HAL_I2C_Init+0x278>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	bf94      	ite	ls
 8004a2c:	2301      	movls	r3, #1
 8004a2e:	2300      	movhi	r3, #0
 8004a30:	b2db      	uxtb	r3, r3
 8004a32:	e006      	b.n	8004a42 <HAL_I2C_Init+0x92>
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	4a7d      	ldr	r2, [pc, #500]	; (8004c2c <HAL_I2C_Init+0x27c>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	bf94      	ite	ls
 8004a3c:	2301      	movls	r3, #1
 8004a3e:	2300      	movhi	r3, #0
 8004a40:	b2db      	uxtb	r3, r3
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d001      	beq.n	8004a4a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	e0e7      	b.n	8004c1a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	4a78      	ldr	r2, [pc, #480]	; (8004c30 <HAL_I2C_Init+0x280>)
 8004a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a52:	0c9b      	lsrs	r3, r3, #18
 8004a54:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	68ba      	ldr	r2, [r7, #8]
 8004a66:	430a      	orrs	r2, r1
 8004a68:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	6a1b      	ldr	r3, [r3, #32]
 8004a70:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	4a6a      	ldr	r2, [pc, #424]	; (8004c24 <HAL_I2C_Init+0x274>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d802      	bhi.n	8004a84 <HAL_I2C_Init+0xd4>
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	3301      	adds	r3, #1
 8004a82:	e009      	b.n	8004a98 <HAL_I2C_Init+0xe8>
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004a8a:	fb02 f303 	mul.w	r3, r2, r3
 8004a8e:	4a69      	ldr	r2, [pc, #420]	; (8004c34 <HAL_I2C_Init+0x284>)
 8004a90:	fba2 2303 	umull	r2, r3, r2, r3
 8004a94:	099b      	lsrs	r3, r3, #6
 8004a96:	3301      	adds	r3, #1
 8004a98:	687a      	ldr	r2, [r7, #4]
 8004a9a:	6812      	ldr	r2, [r2, #0]
 8004a9c:	430b      	orrs	r3, r1
 8004a9e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	69db      	ldr	r3, [r3, #28]
 8004aa6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004aaa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	495c      	ldr	r1, [pc, #368]	; (8004c24 <HAL_I2C_Init+0x274>)
 8004ab4:	428b      	cmp	r3, r1
 8004ab6:	d819      	bhi.n	8004aec <HAL_I2C_Init+0x13c>
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	1e59      	subs	r1, r3, #1
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	005b      	lsls	r3, r3, #1
 8004ac2:	fbb1 f3f3 	udiv	r3, r1, r3
 8004ac6:	1c59      	adds	r1, r3, #1
 8004ac8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004acc:	400b      	ands	r3, r1
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d00a      	beq.n	8004ae8 <HAL_I2C_Init+0x138>
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	1e59      	subs	r1, r3, #1
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	005b      	lsls	r3, r3, #1
 8004adc:	fbb1 f3f3 	udiv	r3, r1, r3
 8004ae0:	3301      	adds	r3, #1
 8004ae2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ae6:	e051      	b.n	8004b8c <HAL_I2C_Init+0x1dc>
 8004ae8:	2304      	movs	r3, #4
 8004aea:	e04f      	b.n	8004b8c <HAL_I2C_Init+0x1dc>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d111      	bne.n	8004b18 <HAL_I2C_Init+0x168>
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	1e58      	subs	r0, r3, #1
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6859      	ldr	r1, [r3, #4]
 8004afc:	460b      	mov	r3, r1
 8004afe:	005b      	lsls	r3, r3, #1
 8004b00:	440b      	add	r3, r1
 8004b02:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b06:	3301      	adds	r3, #1
 8004b08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	bf0c      	ite	eq
 8004b10:	2301      	moveq	r3, #1
 8004b12:	2300      	movne	r3, #0
 8004b14:	b2db      	uxtb	r3, r3
 8004b16:	e012      	b.n	8004b3e <HAL_I2C_Init+0x18e>
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	1e58      	subs	r0, r3, #1
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6859      	ldr	r1, [r3, #4]
 8004b20:	460b      	mov	r3, r1
 8004b22:	009b      	lsls	r3, r3, #2
 8004b24:	440b      	add	r3, r1
 8004b26:	0099      	lsls	r1, r3, #2
 8004b28:	440b      	add	r3, r1
 8004b2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b2e:	3301      	adds	r3, #1
 8004b30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	bf0c      	ite	eq
 8004b38:	2301      	moveq	r3, #1
 8004b3a:	2300      	movne	r3, #0
 8004b3c:	b2db      	uxtb	r3, r3
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d001      	beq.n	8004b46 <HAL_I2C_Init+0x196>
 8004b42:	2301      	movs	r3, #1
 8004b44:	e022      	b.n	8004b8c <HAL_I2C_Init+0x1dc>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d10e      	bne.n	8004b6c <HAL_I2C_Init+0x1bc>
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	1e58      	subs	r0, r3, #1
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6859      	ldr	r1, [r3, #4]
 8004b56:	460b      	mov	r3, r1
 8004b58:	005b      	lsls	r3, r3, #1
 8004b5a:	440b      	add	r3, r1
 8004b5c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b60:	3301      	adds	r3, #1
 8004b62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b6a:	e00f      	b.n	8004b8c <HAL_I2C_Init+0x1dc>
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	1e58      	subs	r0, r3, #1
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6859      	ldr	r1, [r3, #4]
 8004b74:	460b      	mov	r3, r1
 8004b76:	009b      	lsls	r3, r3, #2
 8004b78:	440b      	add	r3, r1
 8004b7a:	0099      	lsls	r1, r3, #2
 8004b7c:	440b      	add	r3, r1
 8004b7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b82:	3301      	adds	r3, #1
 8004b84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b88:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004b8c:	6879      	ldr	r1, [r7, #4]
 8004b8e:	6809      	ldr	r1, [r1, #0]
 8004b90:	4313      	orrs	r3, r2
 8004b92:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	69da      	ldr	r2, [r3, #28]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6a1b      	ldr	r3, [r3, #32]
 8004ba6:	431a      	orrs	r2, r3
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	430a      	orrs	r2, r1
 8004bae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004bba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004bbe:	687a      	ldr	r2, [r7, #4]
 8004bc0:	6911      	ldr	r1, [r2, #16]
 8004bc2:	687a      	ldr	r2, [r7, #4]
 8004bc4:	68d2      	ldr	r2, [r2, #12]
 8004bc6:	4311      	orrs	r1, r2
 8004bc8:	687a      	ldr	r2, [r7, #4]
 8004bca:	6812      	ldr	r2, [r2, #0]
 8004bcc:	430b      	orrs	r3, r1
 8004bce:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	68db      	ldr	r3, [r3, #12]
 8004bd6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	695a      	ldr	r2, [r3, #20]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	699b      	ldr	r3, [r3, #24]
 8004be2:	431a      	orrs	r2, r3
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	430a      	orrs	r2, r1
 8004bea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	681a      	ldr	r2, [r3, #0]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f042 0201 	orr.w	r2, r2, #1
 8004bfa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2220      	movs	r2, #32
 8004c06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2200      	movs	r2, #0
 8004c14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004c18:	2300      	movs	r3, #0
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	3710      	adds	r7, #16
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd80      	pop	{r7, pc}
 8004c22:	bf00      	nop
 8004c24:	000186a0 	.word	0x000186a0
 8004c28:	001e847f 	.word	0x001e847f
 8004c2c:	003d08ff 	.word	0x003d08ff
 8004c30:	431bde83 	.word	0x431bde83
 8004c34:	10624dd3 	.word	0x10624dd3

08004c38 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b088      	sub	sp, #32
 8004c3c:	af02      	add	r7, sp, #8
 8004c3e:	60f8      	str	r0, [r7, #12]
 8004c40:	4608      	mov	r0, r1
 8004c42:	4611      	mov	r1, r2
 8004c44:	461a      	mov	r2, r3
 8004c46:	4603      	mov	r3, r0
 8004c48:	817b      	strh	r3, [r7, #10]
 8004c4a:	460b      	mov	r3, r1
 8004c4c:	813b      	strh	r3, [r7, #8]
 8004c4e:	4613      	mov	r3, r2
 8004c50:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004c52:	f7fe fa21 	bl	8003098 <HAL_GetTick>
 8004c56:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c5e:	b2db      	uxtb	r3, r3
 8004c60:	2b20      	cmp	r3, #32
 8004c62:	f040 80d9 	bne.w	8004e18 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	9300      	str	r3, [sp, #0]
 8004c6a:	2319      	movs	r3, #25
 8004c6c:	2201      	movs	r2, #1
 8004c6e:	496d      	ldr	r1, [pc, #436]	; (8004e24 <HAL_I2C_Mem_Write+0x1ec>)
 8004c70:	68f8      	ldr	r0, [r7, #12]
 8004c72:	f000 fd27 	bl	80056c4 <I2C_WaitOnFlagUntilTimeout>
 8004c76:	4603      	mov	r3, r0
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d001      	beq.n	8004c80 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004c7c:	2302      	movs	r3, #2
 8004c7e:	e0cc      	b.n	8004e1a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c86:	2b01      	cmp	r3, #1
 8004c88:	d101      	bne.n	8004c8e <HAL_I2C_Mem_Write+0x56>
 8004c8a:	2302      	movs	r3, #2
 8004c8c:	e0c5      	b.n	8004e1a <HAL_I2C_Mem_Write+0x1e2>
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2201      	movs	r2, #1
 8004c92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f003 0301 	and.w	r3, r3, #1
 8004ca0:	2b01      	cmp	r3, #1
 8004ca2:	d007      	beq.n	8004cb4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f042 0201 	orr.w	r2, r2, #1
 8004cb2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	681a      	ldr	r2, [r3, #0]
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004cc2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2221      	movs	r2, #33	; 0x21
 8004cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2240      	movs	r2, #64	; 0x40
 8004cd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	6a3a      	ldr	r2, [r7, #32]
 8004cde:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004ce4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cea:	b29a      	uxth	r2, r3
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	4a4d      	ldr	r2, [pc, #308]	; (8004e28 <HAL_I2C_Mem_Write+0x1f0>)
 8004cf4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004cf6:	88f8      	ldrh	r0, [r7, #6]
 8004cf8:	893a      	ldrh	r2, [r7, #8]
 8004cfa:	8979      	ldrh	r1, [r7, #10]
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	9301      	str	r3, [sp, #4]
 8004d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d02:	9300      	str	r3, [sp, #0]
 8004d04:	4603      	mov	r3, r0
 8004d06:	68f8      	ldr	r0, [r7, #12]
 8004d08:	f000 fa4c 	bl	80051a4 <I2C_RequestMemoryWrite>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d052      	beq.n	8004db8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004d12:	2301      	movs	r3, #1
 8004d14:	e081      	b.n	8004e1a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d16:	697a      	ldr	r2, [r7, #20]
 8004d18:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d1a:	68f8      	ldr	r0, [r7, #12]
 8004d1c:	f000 fda8 	bl	8005870 <I2C_WaitOnTXEFlagUntilTimeout>
 8004d20:	4603      	mov	r3, r0
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d00d      	beq.n	8004d42 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d2a:	2b04      	cmp	r3, #4
 8004d2c:	d107      	bne.n	8004d3e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	681a      	ldr	r2, [r3, #0]
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d3c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	e06b      	b.n	8004e1a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d46:	781a      	ldrb	r2, [r3, #0]
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d52:	1c5a      	adds	r2, r3, #1
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d5c:	3b01      	subs	r3, #1
 8004d5e:	b29a      	uxth	r2, r3
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d68:	b29b      	uxth	r3, r3
 8004d6a:	3b01      	subs	r3, #1
 8004d6c:	b29a      	uxth	r2, r3
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	695b      	ldr	r3, [r3, #20]
 8004d78:	f003 0304 	and.w	r3, r3, #4
 8004d7c:	2b04      	cmp	r3, #4
 8004d7e:	d11b      	bne.n	8004db8 <HAL_I2C_Mem_Write+0x180>
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d017      	beq.n	8004db8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d8c:	781a      	ldrb	r2, [r3, #0]
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d98:	1c5a      	adds	r2, r3, #1
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004da2:	3b01      	subs	r3, #1
 8004da4:	b29a      	uxth	r2, r3
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dae:	b29b      	uxth	r3, r3
 8004db0:	3b01      	subs	r3, #1
 8004db2:	b29a      	uxth	r2, r3
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d1aa      	bne.n	8004d16 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004dc0:	697a      	ldr	r2, [r7, #20]
 8004dc2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004dc4:	68f8      	ldr	r0, [r7, #12]
 8004dc6:	f000 fd94 	bl	80058f2 <I2C_WaitOnBTFFlagUntilTimeout>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d00d      	beq.n	8004dec <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd4:	2b04      	cmp	r3, #4
 8004dd6:	d107      	bne.n	8004de8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	681a      	ldr	r2, [r3, #0]
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004de6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004de8:	2301      	movs	r3, #1
 8004dea:	e016      	b.n	8004e1a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	681a      	ldr	r2, [r3, #0]
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004dfa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	2220      	movs	r2, #32
 8004e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	2200      	movs	r2, #0
 8004e08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004e14:	2300      	movs	r3, #0
 8004e16:	e000      	b.n	8004e1a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004e18:	2302      	movs	r3, #2
  }
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3718      	adds	r7, #24
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}
 8004e22:	bf00      	nop
 8004e24:	00100002 	.word	0x00100002
 8004e28:	ffff0000 	.word	0xffff0000

08004e2c <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b08c      	sub	sp, #48	; 0x30
 8004e30:	af02      	add	r7, sp, #8
 8004e32:	60f8      	str	r0, [r7, #12]
 8004e34:	4608      	mov	r0, r1
 8004e36:	4611      	mov	r1, r2
 8004e38:	461a      	mov	r2, r3
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	817b      	strh	r3, [r7, #10]
 8004e3e:	460b      	mov	r3, r1
 8004e40:	813b      	strh	r3, [r7, #8]
 8004e42:	4613      	mov	r3, r2
 8004e44:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004e46:	f7fe f927 	bl	8003098 <HAL_GetTick>
 8004e4a:	6278      	str	r0, [r7, #36]	; 0x24
  __IO uint32_t count = 0U;
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e56:	b2db      	uxtb	r3, r3
 8004e58:	2b20      	cmp	r3, #32
 8004e5a:	f040 8176 	bne.w	800514a <HAL_I2C_Mem_Read_DMA+0x31e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8004e5e:	4b95      	ldr	r3, [pc, #596]	; (80050b4 <HAL_I2C_Mem_Read_DMA+0x288>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	08db      	lsrs	r3, r3, #3
 8004e64:	4a94      	ldr	r2, [pc, #592]	; (80050b8 <HAL_I2C_Mem_Read_DMA+0x28c>)
 8004e66:	fba2 2303 	umull	r2, r3, r2, r3
 8004e6a:	0a1a      	lsrs	r2, r3, #8
 8004e6c:	4613      	mov	r3, r2
 8004e6e:	009b      	lsls	r3, r3, #2
 8004e70:	4413      	add	r3, r2
 8004e72:	009a      	lsls	r2, r3, #2
 8004e74:	4413      	add	r3, r2
 8004e76:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 8004e78:	69fb      	ldr	r3, [r7, #28]
 8004e7a:	3b01      	subs	r3, #1
 8004e7c:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 8004e7e:	69fb      	ldr	r3, [r7, #28]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d116      	bne.n	8004eb2 <HAL_I2C_Mem_Read_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	2200      	movs	r2, #0
 8004e88:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2220      	movs	r2, #32
 8004e8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	2200      	movs	r2, #0
 8004e96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e9e:	f043 0220 	orr.w	r2, r3, #32
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	e14c      	b.n	800514c <HAL_I2C_Mem_Read_DMA+0x320>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	699b      	ldr	r3, [r3, #24]
 8004eb8:	f003 0302 	and.w	r3, r3, #2
 8004ebc:	2b02      	cmp	r3, #2
 8004ebe:	d0db      	beq.n	8004e78 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ec6:	2b01      	cmp	r3, #1
 8004ec8:	d101      	bne.n	8004ece <HAL_I2C_Mem_Read_DMA+0xa2>
 8004eca:	2302      	movs	r3, #2
 8004ecc:	e13e      	b.n	800514c <HAL_I2C_Mem_Read_DMA+0x320>
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	2201      	movs	r2, #1
 8004ed2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f003 0301 	and.w	r3, r3, #1
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	d007      	beq.n	8004ef4 <HAL_I2C_Mem_Read_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	681a      	ldr	r2, [r3, #0]
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f042 0201 	orr.w	r2, r2, #1
 8004ef2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f02:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	2222      	movs	r2, #34	; 0x22
 8004f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	2240      	movs	r2, #64	; 0x40
 8004f10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	2200      	movs	r2, #0
 8004f18:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f1e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004f24:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f2a:	b29a      	uxth	r2, r3
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	4a62      	ldr	r2, [pc, #392]	; (80050bc <HAL_I2C_Mem_Read_DMA+0x290>)
 8004f34:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8004f36:	897a      	ldrh	r2, [r7, #10]
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 8004f3c:	893a      	ldrh	r2, [r7, #8]
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 8004f42:	88fa      	ldrh	r2, [r7, #6]
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	651a      	str	r2, [r3, #80]	; 0x50

    if (hi2c->XferSize > 0U)
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	f000 80cc 	beq.w	80050f0 <HAL_I2C_Mem_Read_DMA+0x2c4>
    {
      if (hi2c->hdmarx != NULL)
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d02d      	beq.n	8004fbc <HAL_I2C_Mem_Read_DMA+0x190>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f64:	4a56      	ldr	r2, [pc, #344]	; (80050c0 <HAL_I2C_Mem_Read_DMA+0x294>)
 8004f66:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f6c:	4a55      	ldr	r2, [pc, #340]	; (80050c4 <HAL_I2C_Mem_Read_DMA+0x298>)
 8004f6e:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f74:	2200      	movs	r2, #0
 8004f76:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f84:	2200      	movs	r2, #0
 8004f86:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	3310      	adds	r3, #16
 8004f9a:	4619      	mov	r1, r3
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa0:	461a      	mov	r2, r3
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fa6:	f7fe ff21 	bl	8003dec <HAL_DMA_Start_IT>
 8004faa:	4603      	mov	r3, r0
 8004fac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8004fb0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	f040 8087 	bne.w	80050c8 <HAL_I2C_Mem_Read_DMA+0x29c>
 8004fba:	e013      	b.n	8004fe4 <HAL_I2C_Mem_Read_DMA+0x1b8>
        hi2c->State     = HAL_I2C_STATE_READY;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	2220      	movs	r2, #32
 8004fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fd0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	e0b3      	b.n	800514c <HAL_I2C_Mem_Read_DMA+0x320>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8004fe4:	88f8      	ldrh	r0, [r7, #6]
 8004fe6:	893a      	ldrh	r2, [r7, #8]
 8004fe8:	8979      	ldrh	r1, [r7, #10]
 8004fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fec:	9301      	str	r3, [sp, #4]
 8004fee:	2323      	movs	r3, #35	; 0x23
 8004ff0:	9300      	str	r3, [sp, #0]
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	68f8      	ldr	r0, [r7, #12]
 8004ff6:	f000 f96b 	bl	80052d0 <I2C_RequestMemoryRead>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d023      	beq.n	8005048 <HAL_I2C_Mem_Read_DMA+0x21c>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005004:	4618      	mov	r0, r3
 8005006:	f7fe ffb9 	bl	8003f7c <HAL_DMA_Abort_IT>
 800500a:	4603      	mov	r3, r0
 800500c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005014:	2200      	movs	r2, #0
 8005016:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	681a      	ldr	r2, [r3, #0]
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005026:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2200      	movs	r2, #0
 800502c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount = 0U;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	2200      	movs	r2, #0
 8005032:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	681a      	ldr	r2, [r3, #0]
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f022 0201 	bic.w	r2, r2, #1
 8005042:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8005044:	2301      	movs	r3, #1
 8005046:	e081      	b.n	800514c <HAL_I2C_Mem_Read_DMA+0x320>
        }

        if (hi2c->XferSize == 1U)
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800504c:	2b01      	cmp	r3, #1
 800504e:	d108      	bne.n	8005062 <HAL_I2C_Mem_Read_DMA+0x236>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	681a      	ldr	r2, [r3, #0]
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800505e:	601a      	str	r2, [r3, #0]
 8005060:	e007      	b.n	8005072 <HAL_I2C_Mem_Read_DMA+0x246>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	685a      	ldr	r2, [r3, #4]
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005070:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005072:	2300      	movs	r3, #0
 8005074:	61bb      	str	r3, [r7, #24]
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	695b      	ldr	r3, [r3, #20]
 800507c:	61bb      	str	r3, [r7, #24]
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	699b      	ldr	r3, [r3, #24]
 8005084:	61bb      	str	r3, [r7, #24]
 8005086:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2200      	movs	r2, #0
 800508c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	685a      	ldr	r2, [r3, #4]
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800509e:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	685a      	ldr	r2, [r3, #4]
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050ae:	605a      	str	r2, [r3, #4]
 80050b0:	e049      	b.n	8005146 <HAL_I2C_Mem_Read_DMA+0x31a>
 80050b2:	bf00      	nop
 80050b4:	20000044 	.word	0x20000044
 80050b8:	14f8b589 	.word	0x14f8b589
 80050bc:	ffff0000 	.word	0xffff0000
 80050c0:	080054a1 	.word	0x080054a1
 80050c4:	0800564b 	.word	0x0800564b
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	2220      	movs	r2, #32
 80050cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	2200      	movs	r2, #0
 80050d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050dc:	f043 0210 	orr.w	r2, r3, #16
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	2200      	movs	r2, #0
 80050e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80050ec:	2301      	movs	r3, #1
 80050ee:	e02d      	b.n	800514c <HAL_I2C_Mem_Read_DMA+0x320>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 80050f0:	88f8      	ldrh	r0, [r7, #6]
 80050f2:	893a      	ldrh	r2, [r7, #8]
 80050f4:	8979      	ldrh	r1, [r7, #10]
 80050f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f8:	9301      	str	r3, [sp, #4]
 80050fa:	2323      	movs	r3, #35	; 0x23
 80050fc:	9300      	str	r3, [sp, #0]
 80050fe:	4603      	mov	r3, r0
 8005100:	68f8      	ldr	r0, [r7, #12]
 8005102:	f000 f8e5 	bl	80052d0 <I2C_RequestMemoryRead>
 8005106:	4603      	mov	r3, r0
 8005108:	2b00      	cmp	r3, #0
 800510a:	d001      	beq.n	8005110 <HAL_I2C_Mem_Read_DMA+0x2e4>
      {
        return HAL_ERROR;
 800510c:	2301      	movs	r3, #1
 800510e:	e01d      	b.n	800514c <HAL_I2C_Mem_Read_DMA+0x320>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005110:	2300      	movs	r3, #0
 8005112:	617b      	str	r3, [r7, #20]
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	695b      	ldr	r3, [r3, #20]
 800511a:	617b      	str	r3, [r7, #20]
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	699b      	ldr	r3, [r3, #24]
 8005122:	617b      	str	r3, [r7, #20]
 8005124:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	681a      	ldr	r2, [r3, #0]
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005134:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	2220      	movs	r2, #32
 800513a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	2200      	movs	r2, #0
 8005142:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }

    return HAL_OK;
 8005146:	2300      	movs	r3, #0
 8005148:	e000      	b.n	800514c <HAL_I2C_Mem_Read_DMA+0x320>
  }
  else
  {
    return HAL_BUSY;
 800514a:	2302      	movs	r3, #2
  }
}
 800514c:	4618      	mov	r0, r3
 800514e:	3728      	adds	r7, #40	; 0x28
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}

08005154 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005154:	b480      	push	{r7}
 8005156:	b083      	sub	sp, #12
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800515c:	bf00      	nop
 800515e:	370c      	adds	r7, #12
 8005160:	46bd      	mov	sp, r7
 8005162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005166:	4770      	bx	lr

08005168 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005168:	b480      	push	{r7}
 800516a:	b083      	sub	sp, #12
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005170:	bf00      	nop
 8005172:	370c      	adds	r7, #12
 8005174:	46bd      	mov	sp, r7
 8005176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517a:	4770      	bx	lr

0800517c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800517c:	b480      	push	{r7}
 800517e:	b083      	sub	sp, #12
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005184:	bf00      	nop
 8005186:	370c      	adds	r7, #12
 8005188:	46bd      	mov	sp, r7
 800518a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518e:	4770      	bx	lr

08005190 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005190:	b480      	push	{r7}
 8005192:	b083      	sub	sp, #12
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005198:	bf00      	nop
 800519a:	370c      	adds	r7, #12
 800519c:	46bd      	mov	sp, r7
 800519e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a2:	4770      	bx	lr

080051a4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b088      	sub	sp, #32
 80051a8:	af02      	add	r7, sp, #8
 80051aa:	60f8      	str	r0, [r7, #12]
 80051ac:	4608      	mov	r0, r1
 80051ae:	4611      	mov	r1, r2
 80051b0:	461a      	mov	r2, r3
 80051b2:	4603      	mov	r3, r0
 80051b4:	817b      	strh	r3, [r7, #10]
 80051b6:	460b      	mov	r3, r1
 80051b8:	813b      	strh	r3, [r7, #8]
 80051ba:	4613      	mov	r3, r2
 80051bc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	681a      	ldr	r2, [r3, #0]
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051cc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80051ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d0:	9300      	str	r3, [sp, #0]
 80051d2:	6a3b      	ldr	r3, [r7, #32]
 80051d4:	2200      	movs	r2, #0
 80051d6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80051da:	68f8      	ldr	r0, [r7, #12]
 80051dc:	f000 fa72 	bl	80056c4 <I2C_WaitOnFlagUntilTimeout>
 80051e0:	4603      	mov	r3, r0
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d00d      	beq.n	8005202 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051f4:	d103      	bne.n	80051fe <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80051fc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80051fe:	2303      	movs	r3, #3
 8005200:	e05f      	b.n	80052c2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005202:	897b      	ldrh	r3, [r7, #10]
 8005204:	b2db      	uxtb	r3, r3
 8005206:	461a      	mov	r2, r3
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005210:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005214:	6a3a      	ldr	r2, [r7, #32]
 8005216:	492d      	ldr	r1, [pc, #180]	; (80052cc <I2C_RequestMemoryWrite+0x128>)
 8005218:	68f8      	ldr	r0, [r7, #12]
 800521a:	f000 faaa 	bl	8005772 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800521e:	4603      	mov	r3, r0
 8005220:	2b00      	cmp	r3, #0
 8005222:	d001      	beq.n	8005228 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005224:	2301      	movs	r3, #1
 8005226:	e04c      	b.n	80052c2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005228:	2300      	movs	r3, #0
 800522a:	617b      	str	r3, [r7, #20]
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	695b      	ldr	r3, [r3, #20]
 8005232:	617b      	str	r3, [r7, #20]
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	699b      	ldr	r3, [r3, #24]
 800523a:	617b      	str	r3, [r7, #20]
 800523c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800523e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005240:	6a39      	ldr	r1, [r7, #32]
 8005242:	68f8      	ldr	r0, [r7, #12]
 8005244:	f000 fb14 	bl	8005870 <I2C_WaitOnTXEFlagUntilTimeout>
 8005248:	4603      	mov	r3, r0
 800524a:	2b00      	cmp	r3, #0
 800524c:	d00d      	beq.n	800526a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005252:	2b04      	cmp	r3, #4
 8005254:	d107      	bne.n	8005266 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	681a      	ldr	r2, [r3, #0]
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005264:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005266:	2301      	movs	r3, #1
 8005268:	e02b      	b.n	80052c2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800526a:	88fb      	ldrh	r3, [r7, #6]
 800526c:	2b01      	cmp	r3, #1
 800526e:	d105      	bne.n	800527c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005270:	893b      	ldrh	r3, [r7, #8]
 8005272:	b2da      	uxtb	r2, r3
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	611a      	str	r2, [r3, #16]
 800527a:	e021      	b.n	80052c0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800527c:	893b      	ldrh	r3, [r7, #8]
 800527e:	0a1b      	lsrs	r3, r3, #8
 8005280:	b29b      	uxth	r3, r3
 8005282:	b2da      	uxtb	r2, r3
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800528a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800528c:	6a39      	ldr	r1, [r7, #32]
 800528e:	68f8      	ldr	r0, [r7, #12]
 8005290:	f000 faee 	bl	8005870 <I2C_WaitOnTXEFlagUntilTimeout>
 8005294:	4603      	mov	r3, r0
 8005296:	2b00      	cmp	r3, #0
 8005298:	d00d      	beq.n	80052b6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800529e:	2b04      	cmp	r3, #4
 80052a0:	d107      	bne.n	80052b2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	681a      	ldr	r2, [r3, #0]
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052b0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80052b2:	2301      	movs	r3, #1
 80052b4:	e005      	b.n	80052c2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80052b6:	893b      	ldrh	r3, [r7, #8]
 80052b8:	b2da      	uxtb	r2, r3
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80052c0:	2300      	movs	r3, #0
}
 80052c2:	4618      	mov	r0, r3
 80052c4:	3718      	adds	r7, #24
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}
 80052ca:	bf00      	nop
 80052cc:	00010002 	.word	0x00010002

080052d0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b088      	sub	sp, #32
 80052d4:	af02      	add	r7, sp, #8
 80052d6:	60f8      	str	r0, [r7, #12]
 80052d8:	4608      	mov	r0, r1
 80052da:	4611      	mov	r1, r2
 80052dc:	461a      	mov	r2, r3
 80052de:	4603      	mov	r3, r0
 80052e0:	817b      	strh	r3, [r7, #10]
 80052e2:	460b      	mov	r3, r1
 80052e4:	813b      	strh	r3, [r7, #8]
 80052e6:	4613      	mov	r3, r2
 80052e8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	681a      	ldr	r2, [r3, #0]
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80052f8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	681a      	ldr	r2, [r3, #0]
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005308:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800530a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800530c:	9300      	str	r3, [sp, #0]
 800530e:	6a3b      	ldr	r3, [r7, #32]
 8005310:	2200      	movs	r2, #0
 8005312:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005316:	68f8      	ldr	r0, [r7, #12]
 8005318:	f000 f9d4 	bl	80056c4 <I2C_WaitOnFlagUntilTimeout>
 800531c:	4603      	mov	r3, r0
 800531e:	2b00      	cmp	r3, #0
 8005320:	d00d      	beq.n	800533e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800532c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005330:	d103      	bne.n	800533a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005338:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800533a:	2303      	movs	r3, #3
 800533c:	e0aa      	b.n	8005494 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800533e:	897b      	ldrh	r3, [r7, #10]
 8005340:	b2db      	uxtb	r3, r3
 8005342:	461a      	mov	r2, r3
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800534c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800534e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005350:	6a3a      	ldr	r2, [r7, #32]
 8005352:	4952      	ldr	r1, [pc, #328]	; (800549c <I2C_RequestMemoryRead+0x1cc>)
 8005354:	68f8      	ldr	r0, [r7, #12]
 8005356:	f000 fa0c 	bl	8005772 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800535a:	4603      	mov	r3, r0
 800535c:	2b00      	cmp	r3, #0
 800535e:	d001      	beq.n	8005364 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005360:	2301      	movs	r3, #1
 8005362:	e097      	b.n	8005494 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005364:	2300      	movs	r3, #0
 8005366:	617b      	str	r3, [r7, #20]
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	695b      	ldr	r3, [r3, #20]
 800536e:	617b      	str	r3, [r7, #20]
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	699b      	ldr	r3, [r3, #24]
 8005376:	617b      	str	r3, [r7, #20]
 8005378:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800537a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800537c:	6a39      	ldr	r1, [r7, #32]
 800537e:	68f8      	ldr	r0, [r7, #12]
 8005380:	f000 fa76 	bl	8005870 <I2C_WaitOnTXEFlagUntilTimeout>
 8005384:	4603      	mov	r3, r0
 8005386:	2b00      	cmp	r3, #0
 8005388:	d00d      	beq.n	80053a6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800538e:	2b04      	cmp	r3, #4
 8005390:	d107      	bne.n	80053a2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	681a      	ldr	r2, [r3, #0]
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053a0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80053a2:	2301      	movs	r3, #1
 80053a4:	e076      	b.n	8005494 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80053a6:	88fb      	ldrh	r3, [r7, #6]
 80053a8:	2b01      	cmp	r3, #1
 80053aa:	d105      	bne.n	80053b8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80053ac:	893b      	ldrh	r3, [r7, #8]
 80053ae:	b2da      	uxtb	r2, r3
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	611a      	str	r2, [r3, #16]
 80053b6:	e021      	b.n	80053fc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80053b8:	893b      	ldrh	r3, [r7, #8]
 80053ba:	0a1b      	lsrs	r3, r3, #8
 80053bc:	b29b      	uxth	r3, r3
 80053be:	b2da      	uxtb	r2, r3
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80053c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053c8:	6a39      	ldr	r1, [r7, #32]
 80053ca:	68f8      	ldr	r0, [r7, #12]
 80053cc:	f000 fa50 	bl	8005870 <I2C_WaitOnTXEFlagUntilTimeout>
 80053d0:	4603      	mov	r3, r0
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d00d      	beq.n	80053f2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053da:	2b04      	cmp	r3, #4
 80053dc:	d107      	bne.n	80053ee <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	681a      	ldr	r2, [r3, #0]
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053ec:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80053ee:	2301      	movs	r3, #1
 80053f0:	e050      	b.n	8005494 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80053f2:	893b      	ldrh	r3, [r7, #8]
 80053f4:	b2da      	uxtb	r2, r3
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80053fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053fe:	6a39      	ldr	r1, [r7, #32]
 8005400:	68f8      	ldr	r0, [r7, #12]
 8005402:	f000 fa35 	bl	8005870 <I2C_WaitOnTXEFlagUntilTimeout>
 8005406:	4603      	mov	r3, r0
 8005408:	2b00      	cmp	r3, #0
 800540a:	d00d      	beq.n	8005428 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005410:	2b04      	cmp	r3, #4
 8005412:	d107      	bne.n	8005424 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	681a      	ldr	r2, [r3, #0]
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005422:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005424:	2301      	movs	r3, #1
 8005426:	e035      	b.n	8005494 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	681a      	ldr	r2, [r3, #0]
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005436:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800543a:	9300      	str	r3, [sp, #0]
 800543c:	6a3b      	ldr	r3, [r7, #32]
 800543e:	2200      	movs	r2, #0
 8005440:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005444:	68f8      	ldr	r0, [r7, #12]
 8005446:	f000 f93d 	bl	80056c4 <I2C_WaitOnFlagUntilTimeout>
 800544a:	4603      	mov	r3, r0
 800544c:	2b00      	cmp	r3, #0
 800544e:	d00d      	beq.n	800546c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800545a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800545e:	d103      	bne.n	8005468 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005466:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005468:	2303      	movs	r3, #3
 800546a:	e013      	b.n	8005494 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800546c:	897b      	ldrh	r3, [r7, #10]
 800546e:	b2db      	uxtb	r3, r3
 8005470:	f043 0301 	orr.w	r3, r3, #1
 8005474:	b2da      	uxtb	r2, r3
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800547c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800547e:	6a3a      	ldr	r2, [r7, #32]
 8005480:	4906      	ldr	r1, [pc, #24]	; (800549c <I2C_RequestMemoryRead+0x1cc>)
 8005482:	68f8      	ldr	r0, [r7, #12]
 8005484:	f000 f975 	bl	8005772 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005488:	4603      	mov	r3, r0
 800548a:	2b00      	cmp	r3, #0
 800548c:	d001      	beq.n	8005492 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800548e:	2301      	movs	r3, #1
 8005490:	e000      	b.n	8005494 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005492:	2300      	movs	r3, #0
}
 8005494:	4618      	mov	r0, r3
 8005496:	3718      	adds	r7, #24
 8005498:	46bd      	mov	sp, r7
 800549a:	bd80      	pop	{r7, pc}
 800549c:	00010002 	.word	0x00010002

080054a0 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b086      	sub	sp, #24
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054ac:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054b4:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80054bc:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054c2:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	685a      	ldr	r2, [r3, #4]
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80054d2:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d003      	beq.n	80054e4 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054e0:	2200      	movs	r2, #0
 80054e2:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d003      	beq.n	80054f4 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054f0:	2200      	movs	r2, #0
 80054f2:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 80054f4:	7cfb      	ldrb	r3, [r7, #19]
 80054f6:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80054fa:	2b21      	cmp	r3, #33	; 0x21
 80054fc:	d007      	beq.n	800550e <I2C_DMAXferCplt+0x6e>
 80054fe:	7cfb      	ldrb	r3, [r7, #19]
 8005500:	f003 0322 	and.w	r3, r3, #34	; 0x22
 8005504:	2b22      	cmp	r3, #34	; 0x22
 8005506:	d131      	bne.n	800556c <I2C_DMAXferCplt+0xcc>
 8005508:	7cbb      	ldrb	r3, [r7, #18]
 800550a:	2b20      	cmp	r3, #32
 800550c:	d12e      	bne.n	800556c <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	685a      	ldr	r2, [r3, #4]
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800551c:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 800551e:	697b      	ldr	r3, [r7, #20]
 8005520:	2200      	movs	r2, #0
 8005522:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8005524:	7cfb      	ldrb	r3, [r7, #19]
 8005526:	2b29      	cmp	r3, #41	; 0x29
 8005528:	d10a      	bne.n	8005540 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800552a:	697b      	ldr	r3, [r7, #20]
 800552c:	2221      	movs	r2, #33	; 0x21
 800552e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	2228      	movs	r2, #40	; 0x28
 8005534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005538:	6978      	ldr	r0, [r7, #20]
 800553a:	f7ff fe15 	bl	8005168 <HAL_I2C_SlaveTxCpltCallback>
 800553e:	e00c      	b.n	800555a <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005540:	7cfb      	ldrb	r3, [r7, #19]
 8005542:	2b2a      	cmp	r3, #42	; 0x2a
 8005544:	d109      	bne.n	800555a <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	2222      	movs	r2, #34	; 0x22
 800554a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	2228      	movs	r2, #40	; 0x28
 8005550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005554:	6978      	ldr	r0, [r7, #20]
 8005556:	f7ff fe11 	bl	800517c <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	685a      	ldr	r2, [r3, #4]
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8005568:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800556a:	e06a      	b.n	8005642 <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005572:	b2db      	uxtb	r3, r3
 8005574:	2b00      	cmp	r3, #0
 8005576:	d064      	beq.n	8005642 <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800557c:	b29b      	uxth	r3, r3
 800557e:	2b01      	cmp	r3, #1
 8005580:	d107      	bne.n	8005592 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	681a      	ldr	r2, [r3, #0]
 8005588:	697b      	ldr	r3, [r7, #20]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005590:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	685a      	ldr	r2, [r3, #4]
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80055a0:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80055a8:	d009      	beq.n	80055be <I2C_DMAXferCplt+0x11e>
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	2b08      	cmp	r3, #8
 80055ae:	d006      	beq.n	80055be <I2C_DMAXferCplt+0x11e>
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80055b6:	d002      	beq.n	80055be <I2C_DMAXferCplt+0x11e>
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	2b20      	cmp	r3, #32
 80055bc:	d107      	bne.n	80055ce <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055be:	697b      	ldr	r3, [r7, #20]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	681a      	ldr	r2, [r3, #0]
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055cc:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	685a      	ldr	r2, [r3, #4]
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80055dc:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80055de:	697b      	ldr	r3, [r7, #20]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	685a      	ldr	r2, [r3, #4]
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80055ec:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	2200      	movs	r2, #0
 80055f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80055f4:	697b      	ldr	r3, [r7, #20]
 80055f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d003      	beq.n	8005604 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 80055fc:	6978      	ldr	r0, [r7, #20]
 80055fe:	f7ff fdc7 	bl	8005190 <HAL_I2C_ErrorCallback>
}
 8005602:	e01e      	b.n	8005642 <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 8005604:	697b      	ldr	r3, [r7, #20]
 8005606:	2220      	movs	r2, #32
 8005608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005612:	b2db      	uxtb	r3, r3
 8005614:	2b40      	cmp	r3, #64	; 0x40
 8005616:	d10a      	bne.n	800562e <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	2200      	movs	r2, #0
 800561c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	2200      	movs	r2, #0
 8005624:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8005626:	6978      	ldr	r0, [r7, #20]
 8005628:	f7fd facc 	bl	8002bc4 <HAL_I2C_MemRxCpltCallback>
}
 800562c:	e009      	b.n	8005642 <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	2200      	movs	r2, #0
 8005632:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	2212      	movs	r2, #18
 800563a:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 800563c:	6978      	ldr	r0, [r7, #20]
 800563e:	f7ff fd89 	bl	8005154 <HAL_I2C_MasterRxCpltCallback>
}
 8005642:	bf00      	nop
 8005644:	3718      	adds	r7, #24
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}

0800564a <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800564a:	b580      	push	{r7, lr}
 800564c:	b084      	sub	sp, #16
 800564e:	af00      	add	r7, sp, #0
 8005650:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005656:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800565c:	2b00      	cmp	r3, #0
 800565e:	d003      	beq.n	8005668 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005664:	2200      	movs	r2, #0
 8005666:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800566c:	2b00      	cmp	r3, #0
 800566e:	d003      	beq.n	8005678 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005674:	2200      	movs	r2, #0
 8005676:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8005678:	6878      	ldr	r0, [r7, #4]
 800567a:	f7fe fe2b 	bl	80042d4 <HAL_DMA_GetError>
 800567e:	4603      	mov	r3, r0
 8005680:	2b02      	cmp	r3, #2
 8005682:	d01b      	beq.n	80056bc <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	681a      	ldr	r2, [r3, #0]
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005692:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	2200      	movs	r2, #0
 8005698:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	2220      	movs	r2, #32
 800569e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	2200      	movs	r2, #0
 80056a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ae:	f043 0210 	orr.w	r2, r3, #16
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80056b6:	68f8      	ldr	r0, [r7, #12]
 80056b8:	f7ff fd6a 	bl	8005190 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80056bc:	bf00      	nop
 80056be:	3710      	adds	r7, #16
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bd80      	pop	{r7, pc}

080056c4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b084      	sub	sp, #16
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	60f8      	str	r0, [r7, #12]
 80056cc:	60b9      	str	r1, [r7, #8]
 80056ce:	603b      	str	r3, [r7, #0]
 80056d0:	4613      	mov	r3, r2
 80056d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80056d4:	e025      	b.n	8005722 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056dc:	d021      	beq.n	8005722 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056de:	f7fd fcdb 	bl	8003098 <HAL_GetTick>
 80056e2:	4602      	mov	r2, r0
 80056e4:	69bb      	ldr	r3, [r7, #24]
 80056e6:	1ad3      	subs	r3, r2, r3
 80056e8:	683a      	ldr	r2, [r7, #0]
 80056ea:	429a      	cmp	r2, r3
 80056ec:	d302      	bcc.n	80056f4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d116      	bne.n	8005722 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	2200      	movs	r2, #0
 80056f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	2220      	movs	r2, #32
 80056fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	2200      	movs	r2, #0
 8005706:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800570e:	f043 0220 	orr.w	r2, r3, #32
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	2200      	movs	r2, #0
 800571a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800571e:	2301      	movs	r3, #1
 8005720:	e023      	b.n	800576a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	0c1b      	lsrs	r3, r3, #16
 8005726:	b2db      	uxtb	r3, r3
 8005728:	2b01      	cmp	r3, #1
 800572a:	d10d      	bne.n	8005748 <I2C_WaitOnFlagUntilTimeout+0x84>
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	695b      	ldr	r3, [r3, #20]
 8005732:	43da      	mvns	r2, r3
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	4013      	ands	r3, r2
 8005738:	b29b      	uxth	r3, r3
 800573a:	2b00      	cmp	r3, #0
 800573c:	bf0c      	ite	eq
 800573e:	2301      	moveq	r3, #1
 8005740:	2300      	movne	r3, #0
 8005742:	b2db      	uxtb	r3, r3
 8005744:	461a      	mov	r2, r3
 8005746:	e00c      	b.n	8005762 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	699b      	ldr	r3, [r3, #24]
 800574e:	43da      	mvns	r2, r3
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	4013      	ands	r3, r2
 8005754:	b29b      	uxth	r3, r3
 8005756:	2b00      	cmp	r3, #0
 8005758:	bf0c      	ite	eq
 800575a:	2301      	moveq	r3, #1
 800575c:	2300      	movne	r3, #0
 800575e:	b2db      	uxtb	r3, r3
 8005760:	461a      	mov	r2, r3
 8005762:	79fb      	ldrb	r3, [r7, #7]
 8005764:	429a      	cmp	r2, r3
 8005766:	d0b6      	beq.n	80056d6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005768:	2300      	movs	r3, #0
}
 800576a:	4618      	mov	r0, r3
 800576c:	3710      	adds	r7, #16
 800576e:	46bd      	mov	sp, r7
 8005770:	bd80      	pop	{r7, pc}

08005772 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005772:	b580      	push	{r7, lr}
 8005774:	b084      	sub	sp, #16
 8005776:	af00      	add	r7, sp, #0
 8005778:	60f8      	str	r0, [r7, #12]
 800577a:	60b9      	str	r1, [r7, #8]
 800577c:	607a      	str	r2, [r7, #4]
 800577e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005780:	e051      	b.n	8005826 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	695b      	ldr	r3, [r3, #20]
 8005788:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800578c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005790:	d123      	bne.n	80057da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	681a      	ldr	r2, [r3, #0]
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057a0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80057aa:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2200      	movs	r2, #0
 80057b0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	2220      	movs	r2, #32
 80057b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	2200      	movs	r2, #0
 80057be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057c6:	f043 0204 	orr.w	r2, r3, #4
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	2200      	movs	r2, #0
 80057d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80057d6:	2301      	movs	r3, #1
 80057d8:	e046      	b.n	8005868 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057e0:	d021      	beq.n	8005826 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057e2:	f7fd fc59 	bl	8003098 <HAL_GetTick>
 80057e6:	4602      	mov	r2, r0
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	1ad3      	subs	r3, r2, r3
 80057ec:	687a      	ldr	r2, [r7, #4]
 80057ee:	429a      	cmp	r2, r3
 80057f0:	d302      	bcc.n	80057f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d116      	bne.n	8005826 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	2200      	movs	r2, #0
 80057fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2220      	movs	r2, #32
 8005802:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	2200      	movs	r2, #0
 800580a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005812:	f043 0220 	orr.w	r2, r3, #32
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	2200      	movs	r2, #0
 800581e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005822:	2301      	movs	r3, #1
 8005824:	e020      	b.n	8005868 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	0c1b      	lsrs	r3, r3, #16
 800582a:	b2db      	uxtb	r3, r3
 800582c:	2b01      	cmp	r3, #1
 800582e:	d10c      	bne.n	800584a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	695b      	ldr	r3, [r3, #20]
 8005836:	43da      	mvns	r2, r3
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	4013      	ands	r3, r2
 800583c:	b29b      	uxth	r3, r3
 800583e:	2b00      	cmp	r3, #0
 8005840:	bf14      	ite	ne
 8005842:	2301      	movne	r3, #1
 8005844:	2300      	moveq	r3, #0
 8005846:	b2db      	uxtb	r3, r3
 8005848:	e00b      	b.n	8005862 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	699b      	ldr	r3, [r3, #24]
 8005850:	43da      	mvns	r2, r3
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	4013      	ands	r3, r2
 8005856:	b29b      	uxth	r3, r3
 8005858:	2b00      	cmp	r3, #0
 800585a:	bf14      	ite	ne
 800585c:	2301      	movne	r3, #1
 800585e:	2300      	moveq	r3, #0
 8005860:	b2db      	uxtb	r3, r3
 8005862:	2b00      	cmp	r3, #0
 8005864:	d18d      	bne.n	8005782 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005866:	2300      	movs	r3, #0
}
 8005868:	4618      	mov	r0, r3
 800586a:	3710      	adds	r7, #16
 800586c:	46bd      	mov	sp, r7
 800586e:	bd80      	pop	{r7, pc}

08005870 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b084      	sub	sp, #16
 8005874:	af00      	add	r7, sp, #0
 8005876:	60f8      	str	r0, [r7, #12]
 8005878:	60b9      	str	r1, [r7, #8]
 800587a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800587c:	e02d      	b.n	80058da <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800587e:	68f8      	ldr	r0, [r7, #12]
 8005880:	f000 f878 	bl	8005974 <I2C_IsAcknowledgeFailed>
 8005884:	4603      	mov	r3, r0
 8005886:	2b00      	cmp	r3, #0
 8005888:	d001      	beq.n	800588e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800588a:	2301      	movs	r3, #1
 800588c:	e02d      	b.n	80058ea <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005894:	d021      	beq.n	80058da <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005896:	f7fd fbff 	bl	8003098 <HAL_GetTick>
 800589a:	4602      	mov	r2, r0
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	1ad3      	subs	r3, r2, r3
 80058a0:	68ba      	ldr	r2, [r7, #8]
 80058a2:	429a      	cmp	r2, r3
 80058a4:	d302      	bcc.n	80058ac <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d116      	bne.n	80058da <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	2200      	movs	r2, #0
 80058b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	2220      	movs	r2, #32
 80058b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	2200      	movs	r2, #0
 80058be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058c6:	f043 0220 	orr.w	r2, r3, #32
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	2200      	movs	r2, #0
 80058d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80058d6:	2301      	movs	r3, #1
 80058d8:	e007      	b.n	80058ea <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	695b      	ldr	r3, [r3, #20]
 80058e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058e4:	2b80      	cmp	r3, #128	; 0x80
 80058e6:	d1ca      	bne.n	800587e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80058e8:	2300      	movs	r3, #0
}
 80058ea:	4618      	mov	r0, r3
 80058ec:	3710      	adds	r7, #16
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bd80      	pop	{r7, pc}

080058f2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80058f2:	b580      	push	{r7, lr}
 80058f4:	b084      	sub	sp, #16
 80058f6:	af00      	add	r7, sp, #0
 80058f8:	60f8      	str	r0, [r7, #12]
 80058fa:	60b9      	str	r1, [r7, #8]
 80058fc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80058fe:	e02d      	b.n	800595c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005900:	68f8      	ldr	r0, [r7, #12]
 8005902:	f000 f837 	bl	8005974 <I2C_IsAcknowledgeFailed>
 8005906:	4603      	mov	r3, r0
 8005908:	2b00      	cmp	r3, #0
 800590a:	d001      	beq.n	8005910 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800590c:	2301      	movs	r3, #1
 800590e:	e02d      	b.n	800596c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005916:	d021      	beq.n	800595c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005918:	f7fd fbbe 	bl	8003098 <HAL_GetTick>
 800591c:	4602      	mov	r2, r0
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	1ad3      	subs	r3, r2, r3
 8005922:	68ba      	ldr	r2, [r7, #8]
 8005924:	429a      	cmp	r2, r3
 8005926:	d302      	bcc.n	800592e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d116      	bne.n	800595c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	2200      	movs	r2, #0
 8005932:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	2220      	movs	r2, #32
 8005938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	2200      	movs	r2, #0
 8005940:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005948:	f043 0220 	orr.w	r2, r3, #32
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	2200      	movs	r2, #0
 8005954:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005958:	2301      	movs	r3, #1
 800595a:	e007      	b.n	800596c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	695b      	ldr	r3, [r3, #20]
 8005962:	f003 0304 	and.w	r3, r3, #4
 8005966:	2b04      	cmp	r3, #4
 8005968:	d1ca      	bne.n	8005900 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800596a:	2300      	movs	r3, #0
}
 800596c:	4618      	mov	r0, r3
 800596e:	3710      	adds	r7, #16
 8005970:	46bd      	mov	sp, r7
 8005972:	bd80      	pop	{r7, pc}

08005974 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005974:	b480      	push	{r7}
 8005976:	b083      	sub	sp, #12
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	695b      	ldr	r3, [r3, #20]
 8005982:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005986:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800598a:	d11b      	bne.n	80059c4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005994:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2200      	movs	r2, #0
 800599a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2220      	movs	r2, #32
 80059a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2200      	movs	r2, #0
 80059a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059b0:	f043 0204 	orr.w	r2, r3, #4
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2200      	movs	r2, #0
 80059bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80059c0:	2301      	movs	r3, #1
 80059c2:	e000      	b.n	80059c6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80059c4:	2300      	movs	r3, #0
}
 80059c6:	4618      	mov	r0, r3
 80059c8:	370c      	adds	r7, #12
 80059ca:	46bd      	mov	sp, r7
 80059cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d0:	4770      	bx	lr

080059d2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80059d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80059d4:	b08f      	sub	sp, #60	; 0x3c
 80059d6:	af0a      	add	r7, sp, #40	; 0x28
 80059d8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d101      	bne.n	80059e4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80059e0:	2301      	movs	r3, #1
 80059e2:	e10f      	b.n	8005c04 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80059f0:	b2db      	uxtb	r3, r3
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d106      	bne.n	8005a04 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2200      	movs	r2, #0
 80059fa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f007 fa44 	bl	800ce8c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2203      	movs	r2, #3
 8005a08:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d102      	bne.n	8005a1e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4618      	mov	r0, r3
 8005a24:	f003 ff0b 	bl	800983e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	603b      	str	r3, [r7, #0]
 8005a2e:	687e      	ldr	r6, [r7, #4]
 8005a30:	466d      	mov	r5, sp
 8005a32:	f106 0410 	add.w	r4, r6, #16
 8005a36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005a38:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005a3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005a3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005a3e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005a42:	e885 0003 	stmia.w	r5, {r0, r1}
 8005a46:	1d33      	adds	r3, r6, #4
 8005a48:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005a4a:	6838      	ldr	r0, [r7, #0]
 8005a4c:	f003 fde2 	bl	8009614 <USB_CoreInit>
 8005a50:	4603      	mov	r3, r0
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d005      	beq.n	8005a62 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2202      	movs	r2, #2
 8005a5a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005a5e:	2301      	movs	r3, #1
 8005a60:	e0d0      	b.n	8005c04 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	2100      	movs	r1, #0
 8005a68:	4618      	mov	r0, r3
 8005a6a:	f003 fef9 	bl	8009860 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005a6e:	2300      	movs	r3, #0
 8005a70:	73fb      	strb	r3, [r7, #15]
 8005a72:	e04a      	b.n	8005b0a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005a74:	7bfa      	ldrb	r2, [r7, #15]
 8005a76:	6879      	ldr	r1, [r7, #4]
 8005a78:	4613      	mov	r3, r2
 8005a7a:	00db      	lsls	r3, r3, #3
 8005a7c:	4413      	add	r3, r2
 8005a7e:	009b      	lsls	r3, r3, #2
 8005a80:	440b      	add	r3, r1
 8005a82:	333d      	adds	r3, #61	; 0x3d
 8005a84:	2201      	movs	r2, #1
 8005a86:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005a88:	7bfa      	ldrb	r2, [r7, #15]
 8005a8a:	6879      	ldr	r1, [r7, #4]
 8005a8c:	4613      	mov	r3, r2
 8005a8e:	00db      	lsls	r3, r3, #3
 8005a90:	4413      	add	r3, r2
 8005a92:	009b      	lsls	r3, r3, #2
 8005a94:	440b      	add	r3, r1
 8005a96:	333c      	adds	r3, #60	; 0x3c
 8005a98:	7bfa      	ldrb	r2, [r7, #15]
 8005a9a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005a9c:	7bfa      	ldrb	r2, [r7, #15]
 8005a9e:	7bfb      	ldrb	r3, [r7, #15]
 8005aa0:	b298      	uxth	r0, r3
 8005aa2:	6879      	ldr	r1, [r7, #4]
 8005aa4:	4613      	mov	r3, r2
 8005aa6:	00db      	lsls	r3, r3, #3
 8005aa8:	4413      	add	r3, r2
 8005aaa:	009b      	lsls	r3, r3, #2
 8005aac:	440b      	add	r3, r1
 8005aae:	3344      	adds	r3, #68	; 0x44
 8005ab0:	4602      	mov	r2, r0
 8005ab2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005ab4:	7bfa      	ldrb	r2, [r7, #15]
 8005ab6:	6879      	ldr	r1, [r7, #4]
 8005ab8:	4613      	mov	r3, r2
 8005aba:	00db      	lsls	r3, r3, #3
 8005abc:	4413      	add	r3, r2
 8005abe:	009b      	lsls	r3, r3, #2
 8005ac0:	440b      	add	r3, r1
 8005ac2:	3340      	adds	r3, #64	; 0x40
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005ac8:	7bfa      	ldrb	r2, [r7, #15]
 8005aca:	6879      	ldr	r1, [r7, #4]
 8005acc:	4613      	mov	r3, r2
 8005ace:	00db      	lsls	r3, r3, #3
 8005ad0:	4413      	add	r3, r2
 8005ad2:	009b      	lsls	r3, r3, #2
 8005ad4:	440b      	add	r3, r1
 8005ad6:	3348      	adds	r3, #72	; 0x48
 8005ad8:	2200      	movs	r2, #0
 8005ada:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005adc:	7bfa      	ldrb	r2, [r7, #15]
 8005ade:	6879      	ldr	r1, [r7, #4]
 8005ae0:	4613      	mov	r3, r2
 8005ae2:	00db      	lsls	r3, r3, #3
 8005ae4:	4413      	add	r3, r2
 8005ae6:	009b      	lsls	r3, r3, #2
 8005ae8:	440b      	add	r3, r1
 8005aea:	334c      	adds	r3, #76	; 0x4c
 8005aec:	2200      	movs	r2, #0
 8005aee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005af0:	7bfa      	ldrb	r2, [r7, #15]
 8005af2:	6879      	ldr	r1, [r7, #4]
 8005af4:	4613      	mov	r3, r2
 8005af6:	00db      	lsls	r3, r3, #3
 8005af8:	4413      	add	r3, r2
 8005afa:	009b      	lsls	r3, r3, #2
 8005afc:	440b      	add	r3, r1
 8005afe:	3354      	adds	r3, #84	; 0x54
 8005b00:	2200      	movs	r2, #0
 8005b02:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005b04:	7bfb      	ldrb	r3, [r7, #15]
 8005b06:	3301      	adds	r3, #1
 8005b08:	73fb      	strb	r3, [r7, #15]
 8005b0a:	7bfa      	ldrb	r2, [r7, #15]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	429a      	cmp	r2, r3
 8005b12:	d3af      	bcc.n	8005a74 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005b14:	2300      	movs	r3, #0
 8005b16:	73fb      	strb	r3, [r7, #15]
 8005b18:	e044      	b.n	8005ba4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005b1a:	7bfa      	ldrb	r2, [r7, #15]
 8005b1c:	6879      	ldr	r1, [r7, #4]
 8005b1e:	4613      	mov	r3, r2
 8005b20:	00db      	lsls	r3, r3, #3
 8005b22:	4413      	add	r3, r2
 8005b24:	009b      	lsls	r3, r3, #2
 8005b26:	440b      	add	r3, r1
 8005b28:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005b30:	7bfa      	ldrb	r2, [r7, #15]
 8005b32:	6879      	ldr	r1, [r7, #4]
 8005b34:	4613      	mov	r3, r2
 8005b36:	00db      	lsls	r3, r3, #3
 8005b38:	4413      	add	r3, r2
 8005b3a:	009b      	lsls	r3, r3, #2
 8005b3c:	440b      	add	r3, r1
 8005b3e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8005b42:	7bfa      	ldrb	r2, [r7, #15]
 8005b44:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005b46:	7bfa      	ldrb	r2, [r7, #15]
 8005b48:	6879      	ldr	r1, [r7, #4]
 8005b4a:	4613      	mov	r3, r2
 8005b4c:	00db      	lsls	r3, r3, #3
 8005b4e:	4413      	add	r3, r2
 8005b50:	009b      	lsls	r3, r3, #2
 8005b52:	440b      	add	r3, r1
 8005b54:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005b58:	2200      	movs	r2, #0
 8005b5a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005b5c:	7bfa      	ldrb	r2, [r7, #15]
 8005b5e:	6879      	ldr	r1, [r7, #4]
 8005b60:	4613      	mov	r3, r2
 8005b62:	00db      	lsls	r3, r3, #3
 8005b64:	4413      	add	r3, r2
 8005b66:	009b      	lsls	r3, r3, #2
 8005b68:	440b      	add	r3, r1
 8005b6a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8005b6e:	2200      	movs	r2, #0
 8005b70:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005b72:	7bfa      	ldrb	r2, [r7, #15]
 8005b74:	6879      	ldr	r1, [r7, #4]
 8005b76:	4613      	mov	r3, r2
 8005b78:	00db      	lsls	r3, r3, #3
 8005b7a:	4413      	add	r3, r2
 8005b7c:	009b      	lsls	r3, r3, #2
 8005b7e:	440b      	add	r3, r1
 8005b80:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8005b84:	2200      	movs	r2, #0
 8005b86:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005b88:	7bfa      	ldrb	r2, [r7, #15]
 8005b8a:	6879      	ldr	r1, [r7, #4]
 8005b8c:	4613      	mov	r3, r2
 8005b8e:	00db      	lsls	r3, r3, #3
 8005b90:	4413      	add	r3, r2
 8005b92:	009b      	lsls	r3, r3, #2
 8005b94:	440b      	add	r3, r1
 8005b96:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005b9e:	7bfb      	ldrb	r3, [r7, #15]
 8005ba0:	3301      	adds	r3, #1
 8005ba2:	73fb      	strb	r3, [r7, #15]
 8005ba4:	7bfa      	ldrb	r2, [r7, #15]
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	685b      	ldr	r3, [r3, #4]
 8005baa:	429a      	cmp	r2, r3
 8005bac:	d3b5      	bcc.n	8005b1a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	603b      	str	r3, [r7, #0]
 8005bb4:	687e      	ldr	r6, [r7, #4]
 8005bb6:	466d      	mov	r5, sp
 8005bb8:	f106 0410 	add.w	r4, r6, #16
 8005bbc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005bbe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005bc0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005bc2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005bc4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005bc8:	e885 0003 	stmia.w	r5, {r0, r1}
 8005bcc:	1d33      	adds	r3, r6, #4
 8005bce:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005bd0:	6838      	ldr	r0, [r7, #0]
 8005bd2:	f003 fe91 	bl	80098f8 <USB_DevInit>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d005      	beq.n	8005be8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2202      	movs	r2, #2
 8005be0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005be4:	2301      	movs	r3, #1
 8005be6:	e00d      	b.n	8005c04 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2200      	movs	r2, #0
 8005bec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2201      	movs	r2, #1
 8005bf4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	f004 ffe0 	bl	800abc2 <USB_DevDisconnect>

  return HAL_OK;
 8005c02:	2300      	movs	r3, #0
}
 8005c04:	4618      	mov	r0, r3
 8005c06:	3714      	adds	r7, #20
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005c0c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b084      	sub	sp, #16
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005c20:	2b01      	cmp	r3, #1
 8005c22:	d101      	bne.n	8005c28 <HAL_PCD_Start+0x1c>
 8005c24:	2302      	movs	r3, #2
 8005c26:	e020      	b.n	8005c6a <HAL_PCD_Start+0x5e>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c34:	2b01      	cmp	r3, #1
 8005c36:	d109      	bne.n	8005c4c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005c3c:	2b01      	cmp	r3, #1
 8005c3e:	d005      	beq.n	8005c4c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c44:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4618      	mov	r0, r3
 8005c52:	f003 fde3 	bl	800981c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	f004 ff90 	bl	800ab80 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2200      	movs	r2, #0
 8005c64:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005c68:	2300      	movs	r3, #0
}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	3710      	adds	r7, #16
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bd80      	pop	{r7, pc}

08005c72 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005c72:	b590      	push	{r4, r7, lr}
 8005c74:	b08d      	sub	sp, #52	; 0x34
 8005c76:	af00      	add	r7, sp, #0
 8005c78:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c80:	6a3b      	ldr	r3, [r7, #32]
 8005c82:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4618      	mov	r0, r3
 8005c8a:	f005 f84e 	bl	800ad2a <USB_GetMode>
 8005c8e:	4603      	mov	r3, r0
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	f040 848a 	bne.w	80065aa <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	f004 ffb2 	bl	800ac04 <USB_ReadInterrupts>
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	f000 8480 	beq.w	80065a8 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8005ca8:	69fb      	ldr	r3, [r7, #28]
 8005caa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cae:	689b      	ldr	r3, [r3, #8]
 8005cb0:	0a1b      	lsrs	r3, r3, #8
 8005cb2:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	f004 ff9f 	bl	800ac04 <USB_ReadInterrupts>
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	f003 0302 	and.w	r3, r3, #2
 8005ccc:	2b02      	cmp	r3, #2
 8005cce:	d107      	bne.n	8005ce0 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	695a      	ldr	r2, [r3, #20]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f002 0202 	and.w	r2, r2, #2
 8005cde:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	f004 ff8d 	bl	800ac04 <USB_ReadInterrupts>
 8005cea:	4603      	mov	r3, r0
 8005cec:	f003 0310 	and.w	r3, r3, #16
 8005cf0:	2b10      	cmp	r3, #16
 8005cf2:	d161      	bne.n	8005db8 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	699a      	ldr	r2, [r3, #24]
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f022 0210 	bic.w	r2, r2, #16
 8005d02:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8005d04:	6a3b      	ldr	r3, [r7, #32]
 8005d06:	6a1b      	ldr	r3, [r3, #32]
 8005d08:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8005d0a:	69bb      	ldr	r3, [r7, #24]
 8005d0c:	f003 020f 	and.w	r2, r3, #15
 8005d10:	4613      	mov	r3, r2
 8005d12:	00db      	lsls	r3, r3, #3
 8005d14:	4413      	add	r3, r2
 8005d16:	009b      	lsls	r3, r3, #2
 8005d18:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005d1c:	687a      	ldr	r2, [r7, #4]
 8005d1e:	4413      	add	r3, r2
 8005d20:	3304      	adds	r3, #4
 8005d22:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005d24:	69bb      	ldr	r3, [r7, #24]
 8005d26:	0c5b      	lsrs	r3, r3, #17
 8005d28:	f003 030f 	and.w	r3, r3, #15
 8005d2c:	2b02      	cmp	r3, #2
 8005d2e:	d124      	bne.n	8005d7a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005d30:	69ba      	ldr	r2, [r7, #24]
 8005d32:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8005d36:	4013      	ands	r3, r2
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d035      	beq.n	8005da8 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005d40:	69bb      	ldr	r3, [r7, #24]
 8005d42:	091b      	lsrs	r3, r3, #4
 8005d44:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005d46:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005d4a:	b29b      	uxth	r3, r3
 8005d4c:	461a      	mov	r2, r3
 8005d4e:	6a38      	ldr	r0, [r7, #32]
 8005d50:	f004 fdc4 	bl	800a8dc <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005d54:	697b      	ldr	r3, [r7, #20]
 8005d56:	691a      	ldr	r2, [r3, #16]
 8005d58:	69bb      	ldr	r3, [r7, #24]
 8005d5a:	091b      	lsrs	r3, r3, #4
 8005d5c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005d60:	441a      	add	r2, r3
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005d66:	697b      	ldr	r3, [r7, #20]
 8005d68:	6a1a      	ldr	r2, [r3, #32]
 8005d6a:	69bb      	ldr	r3, [r7, #24]
 8005d6c:	091b      	lsrs	r3, r3, #4
 8005d6e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005d72:	441a      	add	r2, r3
 8005d74:	697b      	ldr	r3, [r7, #20]
 8005d76:	621a      	str	r2, [r3, #32]
 8005d78:	e016      	b.n	8005da8 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8005d7a:	69bb      	ldr	r3, [r7, #24]
 8005d7c:	0c5b      	lsrs	r3, r3, #17
 8005d7e:	f003 030f 	and.w	r3, r3, #15
 8005d82:	2b06      	cmp	r3, #6
 8005d84:	d110      	bne.n	8005da8 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005d8c:	2208      	movs	r2, #8
 8005d8e:	4619      	mov	r1, r3
 8005d90:	6a38      	ldr	r0, [r7, #32]
 8005d92:	f004 fda3 	bl	800a8dc <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	6a1a      	ldr	r2, [r3, #32]
 8005d9a:	69bb      	ldr	r3, [r7, #24]
 8005d9c:	091b      	lsrs	r3, r3, #4
 8005d9e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005da2:	441a      	add	r2, r3
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	699a      	ldr	r2, [r3, #24]
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f042 0210 	orr.w	r2, r2, #16
 8005db6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	f004 ff21 	bl	800ac04 <USB_ReadInterrupts>
 8005dc2:	4603      	mov	r3, r0
 8005dc4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005dc8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005dcc:	f040 80a7 	bne.w	8005f1e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4618      	mov	r0, r3
 8005dda:	f004 ff26 	bl	800ac2a <USB_ReadDevAllOutEpInterrupt>
 8005dde:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8005de0:	e099      	b.n	8005f16 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005de4:	f003 0301 	and.w	r3, r3, #1
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	f000 808e 	beq.w	8005f0a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005df4:	b2d2      	uxtb	r2, r2
 8005df6:	4611      	mov	r1, r2
 8005df8:	4618      	mov	r0, r3
 8005dfa:	f004 ff4a 	bl	800ac92 <USB_ReadDevOutEPInterrupt>
 8005dfe:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005e00:	693b      	ldr	r3, [r7, #16]
 8005e02:	f003 0301 	and.w	r3, r3, #1
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d00c      	beq.n	8005e24 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e0c:	015a      	lsls	r2, r3, #5
 8005e0e:	69fb      	ldr	r3, [r7, #28]
 8005e10:	4413      	add	r3, r2
 8005e12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e16:	461a      	mov	r2, r3
 8005e18:	2301      	movs	r3, #1
 8005e1a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005e1c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	f000 feaa 	bl	8006b78 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005e24:	693b      	ldr	r3, [r7, #16]
 8005e26:	f003 0308 	and.w	r3, r3, #8
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d00c      	beq.n	8005e48 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e30:	015a      	lsls	r2, r3, #5
 8005e32:	69fb      	ldr	r3, [r7, #28]
 8005e34:	4413      	add	r3, r2
 8005e36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e3a:	461a      	mov	r2, r3
 8005e3c:	2308      	movs	r3, #8
 8005e3e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005e40:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f000 ff80 	bl	8006d48 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	f003 0310 	and.w	r3, r3, #16
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d008      	beq.n	8005e64 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e54:	015a      	lsls	r2, r3, #5
 8005e56:	69fb      	ldr	r3, [r7, #28]
 8005e58:	4413      	add	r3, r2
 8005e5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e5e:	461a      	mov	r2, r3
 8005e60:	2310      	movs	r3, #16
 8005e62:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	f003 0302 	and.w	r3, r3, #2
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d030      	beq.n	8005ed0 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8005e6e:	6a3b      	ldr	r3, [r7, #32]
 8005e70:	695b      	ldr	r3, [r3, #20]
 8005e72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e76:	2b80      	cmp	r3, #128	; 0x80
 8005e78:	d109      	bne.n	8005e8e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8005e7a:	69fb      	ldr	r3, [r7, #28]
 8005e7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e80:	685b      	ldr	r3, [r3, #4]
 8005e82:	69fa      	ldr	r2, [r7, #28]
 8005e84:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e88:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005e8c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8005e8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e90:	4613      	mov	r3, r2
 8005e92:	00db      	lsls	r3, r3, #3
 8005e94:	4413      	add	r3, r2
 8005e96:	009b      	lsls	r3, r3, #2
 8005e98:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005e9c:	687a      	ldr	r2, [r7, #4]
 8005e9e:	4413      	add	r3, r2
 8005ea0:	3304      	adds	r3, #4
 8005ea2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005ea4:	697b      	ldr	r3, [r7, #20]
 8005ea6:	78db      	ldrb	r3, [r3, #3]
 8005ea8:	2b01      	cmp	r3, #1
 8005eaa:	d108      	bne.n	8005ebe <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb4:	b2db      	uxtb	r3, r3
 8005eb6:	4619      	mov	r1, r3
 8005eb8:	6878      	ldr	r0, [r7, #4]
 8005eba:	f007 f8e3 	bl	800d084 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8005ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec0:	015a      	lsls	r2, r3, #5
 8005ec2:	69fb      	ldr	r3, [r7, #28]
 8005ec4:	4413      	add	r3, r2
 8005ec6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eca:	461a      	mov	r2, r3
 8005ecc:	2302      	movs	r3, #2
 8005ece:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005ed0:	693b      	ldr	r3, [r7, #16]
 8005ed2:	f003 0320 	and.w	r3, r3, #32
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d008      	beq.n	8005eec <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005edc:	015a      	lsls	r2, r3, #5
 8005ede:	69fb      	ldr	r3, [r7, #28]
 8005ee0:	4413      	add	r3, r2
 8005ee2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ee6:	461a      	mov	r2, r3
 8005ee8:	2320      	movs	r3, #32
 8005eea:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005eec:	693b      	ldr	r3, [r7, #16]
 8005eee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d009      	beq.n	8005f0a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef8:	015a      	lsls	r2, r3, #5
 8005efa:	69fb      	ldr	r3, [r7, #28]
 8005efc:	4413      	add	r3, r2
 8005efe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f02:	461a      	mov	r2, r3
 8005f04:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005f08:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f0c:	3301      	adds	r3, #1
 8005f0e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f12:	085b      	lsrs	r3, r3, #1
 8005f14:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	f47f af62 	bne.w	8005de2 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4618      	mov	r0, r3
 8005f24:	f004 fe6e 	bl	800ac04 <USB_ReadInterrupts>
 8005f28:	4603      	mov	r3, r0
 8005f2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005f2e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005f32:	f040 80db 	bne.w	80060ec <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	f004 fe8f 	bl	800ac5e <USB_ReadDevAllInEpInterrupt>
 8005f40:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8005f42:	2300      	movs	r3, #0
 8005f44:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8005f46:	e0cd      	b.n	80060e4 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f4a:	f003 0301 	and.w	r3, r3, #1
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	f000 80c2 	beq.w	80060d8 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f5a:	b2d2      	uxtb	r2, r2
 8005f5c:	4611      	mov	r1, r2
 8005f5e:	4618      	mov	r0, r3
 8005f60:	f004 feb5 	bl	800acce <USB_ReadDevInEPInterrupt>
 8005f64:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	f003 0301 	and.w	r3, r3, #1
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d057      	beq.n	8006020 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f72:	f003 030f 	and.w	r3, r3, #15
 8005f76:	2201      	movs	r2, #1
 8005f78:	fa02 f303 	lsl.w	r3, r2, r3
 8005f7c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005f7e:	69fb      	ldr	r3, [r7, #28]
 8005f80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	43db      	mvns	r3, r3
 8005f8a:	69f9      	ldr	r1, [r7, #28]
 8005f8c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f90:	4013      	ands	r3, r2
 8005f92:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f96:	015a      	lsls	r2, r3, #5
 8005f98:	69fb      	ldr	r3, [r7, #28]
 8005f9a:	4413      	add	r3, r2
 8005f9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fa0:	461a      	mov	r2, r3
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	691b      	ldr	r3, [r3, #16]
 8005faa:	2b01      	cmp	r3, #1
 8005fac:	d132      	bne.n	8006014 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005fae:	6879      	ldr	r1, [r7, #4]
 8005fb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fb2:	4613      	mov	r3, r2
 8005fb4:	00db      	lsls	r3, r3, #3
 8005fb6:	4413      	add	r3, r2
 8005fb8:	009b      	lsls	r3, r3, #2
 8005fba:	440b      	add	r3, r1
 8005fbc:	334c      	adds	r3, #76	; 0x4c
 8005fbe:	6819      	ldr	r1, [r3, #0]
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fc4:	4613      	mov	r3, r2
 8005fc6:	00db      	lsls	r3, r3, #3
 8005fc8:	4413      	add	r3, r2
 8005fca:	009b      	lsls	r3, r3, #2
 8005fcc:	4403      	add	r3, r0
 8005fce:	3348      	adds	r3, #72	; 0x48
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4419      	add	r1, r3
 8005fd4:	6878      	ldr	r0, [r7, #4]
 8005fd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fd8:	4613      	mov	r3, r2
 8005fda:	00db      	lsls	r3, r3, #3
 8005fdc:	4413      	add	r3, r2
 8005fde:	009b      	lsls	r3, r3, #2
 8005fe0:	4403      	add	r3, r0
 8005fe2:	334c      	adds	r3, #76	; 0x4c
 8005fe4:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d113      	bne.n	8006014 <HAL_PCD_IRQHandler+0x3a2>
 8005fec:	6879      	ldr	r1, [r7, #4]
 8005fee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ff0:	4613      	mov	r3, r2
 8005ff2:	00db      	lsls	r3, r3, #3
 8005ff4:	4413      	add	r3, r2
 8005ff6:	009b      	lsls	r3, r3, #2
 8005ff8:	440b      	add	r3, r1
 8005ffa:	3354      	adds	r3, #84	; 0x54
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d108      	bne.n	8006014 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6818      	ldr	r0, [r3, #0]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800600c:	461a      	mov	r2, r3
 800600e:	2101      	movs	r1, #1
 8006010:	f004 febc 	bl	800ad8c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8006014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006016:	b2db      	uxtb	r3, r3
 8006018:	4619      	mov	r1, r3
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	f006 ffb7 	bl	800cf8e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8006020:	693b      	ldr	r3, [r7, #16]
 8006022:	f003 0308 	and.w	r3, r3, #8
 8006026:	2b00      	cmp	r3, #0
 8006028:	d008      	beq.n	800603c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800602a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800602c:	015a      	lsls	r2, r3, #5
 800602e:	69fb      	ldr	r3, [r7, #28]
 8006030:	4413      	add	r3, r2
 8006032:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006036:	461a      	mov	r2, r3
 8006038:	2308      	movs	r3, #8
 800603a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800603c:	693b      	ldr	r3, [r7, #16]
 800603e:	f003 0310 	and.w	r3, r3, #16
 8006042:	2b00      	cmp	r3, #0
 8006044:	d008      	beq.n	8006058 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8006046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006048:	015a      	lsls	r2, r3, #5
 800604a:	69fb      	ldr	r3, [r7, #28]
 800604c:	4413      	add	r3, r2
 800604e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006052:	461a      	mov	r2, r3
 8006054:	2310      	movs	r3, #16
 8006056:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8006058:	693b      	ldr	r3, [r7, #16]
 800605a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800605e:	2b00      	cmp	r3, #0
 8006060:	d008      	beq.n	8006074 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8006062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006064:	015a      	lsls	r2, r3, #5
 8006066:	69fb      	ldr	r3, [r7, #28]
 8006068:	4413      	add	r3, r2
 800606a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800606e:	461a      	mov	r2, r3
 8006070:	2340      	movs	r3, #64	; 0x40
 8006072:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8006074:	693b      	ldr	r3, [r7, #16]
 8006076:	f003 0302 	and.w	r3, r3, #2
 800607a:	2b00      	cmp	r3, #0
 800607c:	d023      	beq.n	80060c6 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800607e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006080:	6a38      	ldr	r0, [r7, #32]
 8006082:	f003 fd9d 	bl	8009bc0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8006086:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006088:	4613      	mov	r3, r2
 800608a:	00db      	lsls	r3, r3, #3
 800608c:	4413      	add	r3, r2
 800608e:	009b      	lsls	r3, r3, #2
 8006090:	3338      	adds	r3, #56	; 0x38
 8006092:	687a      	ldr	r2, [r7, #4]
 8006094:	4413      	add	r3, r2
 8006096:	3304      	adds	r3, #4
 8006098:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800609a:	697b      	ldr	r3, [r7, #20]
 800609c:	78db      	ldrb	r3, [r3, #3]
 800609e:	2b01      	cmp	r3, #1
 80060a0:	d108      	bne.n	80060b4 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80060a2:	697b      	ldr	r3, [r7, #20]
 80060a4:	2200      	movs	r2, #0
 80060a6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80060a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060aa:	b2db      	uxtb	r3, r3
 80060ac:	4619      	mov	r1, r3
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	f006 fffa 	bl	800d0a8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80060b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b6:	015a      	lsls	r2, r3, #5
 80060b8:	69fb      	ldr	r3, [r7, #28]
 80060ba:	4413      	add	r3, r2
 80060bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060c0:	461a      	mov	r2, r3
 80060c2:	2302      	movs	r3, #2
 80060c4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80060c6:	693b      	ldr	r3, [r7, #16]
 80060c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d003      	beq.n	80060d8 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80060d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f000 fcc3 	bl	8006a5e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80060d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060da:	3301      	adds	r3, #1
 80060dc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80060de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060e0:	085b      	lsrs	r3, r3, #1
 80060e2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80060e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	f47f af2e 	bne.w	8005f48 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4618      	mov	r0, r3
 80060f2:	f004 fd87 	bl	800ac04 <USB_ReadInterrupts>
 80060f6:	4603      	mov	r3, r0
 80060f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80060fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006100:	d122      	bne.n	8006148 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006102:	69fb      	ldr	r3, [r7, #28]
 8006104:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006108:	685b      	ldr	r3, [r3, #4]
 800610a:	69fa      	ldr	r2, [r7, #28]
 800610c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006110:	f023 0301 	bic.w	r3, r3, #1
 8006114:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800611c:	2b01      	cmp	r3, #1
 800611e:	d108      	bne.n	8006132 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2200      	movs	r2, #0
 8006124:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8006128:	2100      	movs	r1, #0
 800612a:	6878      	ldr	r0, [r7, #4]
 800612c:	f000 feaa 	bl	8006e84 <HAL_PCDEx_LPM_Callback>
 8006130:	e002      	b.n	8006138 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	f006 ff98 	bl	800d068 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	695a      	ldr	r2, [r3, #20]
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8006146:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4618      	mov	r0, r3
 800614e:	f004 fd59 	bl	800ac04 <USB_ReadInterrupts>
 8006152:	4603      	mov	r3, r0
 8006154:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006158:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800615c:	d112      	bne.n	8006184 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800615e:	69fb      	ldr	r3, [r7, #28]
 8006160:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006164:	689b      	ldr	r3, [r3, #8]
 8006166:	f003 0301 	and.w	r3, r3, #1
 800616a:	2b01      	cmp	r3, #1
 800616c:	d102      	bne.n	8006174 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	f006 ff54 	bl	800d01c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	695a      	ldr	r2, [r3, #20]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8006182:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4618      	mov	r0, r3
 800618a:	f004 fd3b 	bl	800ac04 <USB_ReadInterrupts>
 800618e:	4603      	mov	r3, r0
 8006190:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006194:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006198:	f040 80b7 	bne.w	800630a <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800619c:	69fb      	ldr	r3, [r7, #28]
 800619e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061a2:	685b      	ldr	r3, [r3, #4]
 80061a4:	69fa      	ldr	r2, [r7, #28]
 80061a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80061aa:	f023 0301 	bic.w	r3, r3, #1
 80061ae:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	2110      	movs	r1, #16
 80061b6:	4618      	mov	r0, r3
 80061b8:	f003 fd02 	bl	8009bc0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80061bc:	2300      	movs	r3, #0
 80061be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80061c0:	e046      	b.n	8006250 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80061c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061c4:	015a      	lsls	r2, r3, #5
 80061c6:	69fb      	ldr	r3, [r7, #28]
 80061c8:	4413      	add	r3, r2
 80061ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061ce:	461a      	mov	r2, r3
 80061d0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80061d4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80061d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061d8:	015a      	lsls	r2, r3, #5
 80061da:	69fb      	ldr	r3, [r7, #28]
 80061dc:	4413      	add	r3, r2
 80061de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80061e6:	0151      	lsls	r1, r2, #5
 80061e8:	69fa      	ldr	r2, [r7, #28]
 80061ea:	440a      	add	r2, r1
 80061ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061f0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80061f4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80061f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061f8:	015a      	lsls	r2, r3, #5
 80061fa:	69fb      	ldr	r3, [r7, #28]
 80061fc:	4413      	add	r3, r2
 80061fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006202:	461a      	mov	r2, r3
 8006204:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006208:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800620a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800620c:	015a      	lsls	r2, r3, #5
 800620e:	69fb      	ldr	r3, [r7, #28]
 8006210:	4413      	add	r3, r2
 8006212:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800621a:	0151      	lsls	r1, r2, #5
 800621c:	69fa      	ldr	r2, [r7, #28]
 800621e:	440a      	add	r2, r1
 8006220:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006224:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006228:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800622a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800622c:	015a      	lsls	r2, r3, #5
 800622e:	69fb      	ldr	r3, [r7, #28]
 8006230:	4413      	add	r3, r2
 8006232:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800623a:	0151      	lsls	r1, r2, #5
 800623c:	69fa      	ldr	r2, [r7, #28]
 800623e:	440a      	add	r2, r1
 8006240:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006244:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006248:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800624a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800624c:	3301      	adds	r3, #1
 800624e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006256:	429a      	cmp	r2, r3
 8006258:	d3b3      	bcc.n	80061c2 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800625a:	69fb      	ldr	r3, [r7, #28]
 800625c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006260:	69db      	ldr	r3, [r3, #28]
 8006262:	69fa      	ldr	r2, [r7, #28]
 8006264:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006268:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800626c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006272:	2b00      	cmp	r3, #0
 8006274:	d016      	beq.n	80062a4 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8006276:	69fb      	ldr	r3, [r7, #28]
 8006278:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800627c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006280:	69fa      	ldr	r2, [r7, #28]
 8006282:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006286:	f043 030b 	orr.w	r3, r3, #11
 800628a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800628e:	69fb      	ldr	r3, [r7, #28]
 8006290:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006296:	69fa      	ldr	r2, [r7, #28]
 8006298:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800629c:	f043 030b 	orr.w	r3, r3, #11
 80062a0:	6453      	str	r3, [r2, #68]	; 0x44
 80062a2:	e015      	b.n	80062d0 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80062a4:	69fb      	ldr	r3, [r7, #28]
 80062a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062aa:	695b      	ldr	r3, [r3, #20]
 80062ac:	69fa      	ldr	r2, [r7, #28]
 80062ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80062b2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80062b6:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80062ba:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80062bc:	69fb      	ldr	r3, [r7, #28]
 80062be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062c2:	691b      	ldr	r3, [r3, #16]
 80062c4:	69fa      	ldr	r2, [r7, #28]
 80062c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80062ca:	f043 030b 	orr.w	r3, r3, #11
 80062ce:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80062d0:	69fb      	ldr	r3, [r7, #28]
 80062d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	69fa      	ldr	r2, [r7, #28]
 80062da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80062de:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80062e2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6818      	ldr	r0, [r3, #0]
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	691b      	ldr	r3, [r3, #16]
 80062ec:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80062f4:	461a      	mov	r2, r3
 80062f6:	f004 fd49 	bl	800ad8c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	695a      	ldr	r2, [r3, #20]
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8006308:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4618      	mov	r0, r3
 8006310:	f004 fc78 	bl	800ac04 <USB_ReadInterrupts>
 8006314:	4603      	mov	r3, r0
 8006316:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800631a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800631e:	d124      	bne.n	800636a <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4618      	mov	r0, r3
 8006326:	f004 fd0e 	bl	800ad46 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4618      	mov	r0, r3
 8006330:	f003 fcc3 	bl	8009cba <USB_GetDevSpeed>
 8006334:	4603      	mov	r3, r0
 8006336:	461a      	mov	r2, r3
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681c      	ldr	r4, [r3, #0]
 8006340:	f001 f9d0 	bl	80076e4 <HAL_RCC_GetHCLKFreq>
 8006344:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800634a:	b2db      	uxtb	r3, r3
 800634c:	461a      	mov	r2, r3
 800634e:	4620      	mov	r0, r4
 8006350:	f003 f9c2 	bl	80096d8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8006354:	6878      	ldr	r0, [r7, #4]
 8006356:	f006 fe42 	bl	800cfde <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	695a      	ldr	r2, [r3, #20]
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8006368:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4618      	mov	r0, r3
 8006370:	f004 fc48 	bl	800ac04 <USB_ReadInterrupts>
 8006374:	4603      	mov	r3, r0
 8006376:	f003 0308 	and.w	r3, r3, #8
 800637a:	2b08      	cmp	r3, #8
 800637c:	d10a      	bne.n	8006394 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800637e:	6878      	ldr	r0, [r7, #4]
 8006380:	f006 fe1f 	bl	800cfc2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	695a      	ldr	r2, [r3, #20]
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f002 0208 	and.w	r2, r2, #8
 8006392:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4618      	mov	r0, r3
 800639a:	f004 fc33 	bl	800ac04 <USB_ReadInterrupts>
 800639e:	4603      	mov	r3, r0
 80063a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063a4:	2b80      	cmp	r3, #128	; 0x80
 80063a6:	d122      	bne.n	80063ee <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80063a8:	6a3b      	ldr	r3, [r7, #32]
 80063aa:	699b      	ldr	r3, [r3, #24]
 80063ac:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80063b0:	6a3b      	ldr	r3, [r7, #32]
 80063b2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80063b4:	2301      	movs	r3, #1
 80063b6:	627b      	str	r3, [r7, #36]	; 0x24
 80063b8:	e014      	b.n	80063e4 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80063ba:	6879      	ldr	r1, [r7, #4]
 80063bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063be:	4613      	mov	r3, r2
 80063c0:	00db      	lsls	r3, r3, #3
 80063c2:	4413      	add	r3, r2
 80063c4:	009b      	lsls	r3, r3, #2
 80063c6:	440b      	add	r3, r1
 80063c8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80063cc:	781b      	ldrb	r3, [r3, #0]
 80063ce:	2b01      	cmp	r3, #1
 80063d0:	d105      	bne.n	80063de <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80063d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063d4:	b2db      	uxtb	r3, r3
 80063d6:	4619      	mov	r1, r3
 80063d8:	6878      	ldr	r0, [r7, #4]
 80063da:	f000 fb0f 	bl	80069fc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80063de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063e0:	3301      	adds	r3, #1
 80063e2:	627b      	str	r3, [r7, #36]	; 0x24
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	685b      	ldr	r3, [r3, #4]
 80063e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063ea:	429a      	cmp	r2, r3
 80063ec:	d3e5      	bcc.n	80063ba <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	4618      	mov	r0, r3
 80063f4:	f004 fc06 	bl	800ac04 <USB_ReadInterrupts>
 80063f8:	4603      	mov	r3, r0
 80063fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80063fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006402:	d13b      	bne.n	800647c <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006404:	2301      	movs	r3, #1
 8006406:	627b      	str	r3, [r7, #36]	; 0x24
 8006408:	e02b      	b.n	8006462 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800640a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800640c:	015a      	lsls	r2, r3, #5
 800640e:	69fb      	ldr	r3, [r7, #28]
 8006410:	4413      	add	r3, r2
 8006412:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800641a:	6879      	ldr	r1, [r7, #4]
 800641c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800641e:	4613      	mov	r3, r2
 8006420:	00db      	lsls	r3, r3, #3
 8006422:	4413      	add	r3, r2
 8006424:	009b      	lsls	r3, r3, #2
 8006426:	440b      	add	r3, r1
 8006428:	3340      	adds	r3, #64	; 0x40
 800642a:	781b      	ldrb	r3, [r3, #0]
 800642c:	2b01      	cmp	r3, #1
 800642e:	d115      	bne.n	800645c <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8006430:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006432:	2b00      	cmp	r3, #0
 8006434:	da12      	bge.n	800645c <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8006436:	6879      	ldr	r1, [r7, #4]
 8006438:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800643a:	4613      	mov	r3, r2
 800643c:	00db      	lsls	r3, r3, #3
 800643e:	4413      	add	r3, r2
 8006440:	009b      	lsls	r3, r3, #2
 8006442:	440b      	add	r3, r1
 8006444:	333f      	adds	r3, #63	; 0x3f
 8006446:	2201      	movs	r2, #1
 8006448:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800644a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800644c:	b2db      	uxtb	r3, r3
 800644e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006452:	b2db      	uxtb	r3, r3
 8006454:	4619      	mov	r1, r3
 8006456:	6878      	ldr	r0, [r7, #4]
 8006458:	f000 fad0 	bl	80069fc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800645c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800645e:	3301      	adds	r3, #1
 8006460:	627b      	str	r3, [r7, #36]	; 0x24
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	685b      	ldr	r3, [r3, #4]
 8006466:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006468:	429a      	cmp	r2, r3
 800646a:	d3ce      	bcc.n	800640a <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	695a      	ldr	r2, [r3, #20]
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800647a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4618      	mov	r0, r3
 8006482:	f004 fbbf 	bl	800ac04 <USB_ReadInterrupts>
 8006486:	4603      	mov	r3, r0
 8006488:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800648c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006490:	d155      	bne.n	800653e <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006492:	2301      	movs	r3, #1
 8006494:	627b      	str	r3, [r7, #36]	; 0x24
 8006496:	e045      	b.n	8006524 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8006498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800649a:	015a      	lsls	r2, r3, #5
 800649c:	69fb      	ldr	r3, [r7, #28]
 800649e:	4413      	add	r3, r2
 80064a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80064a8:	6879      	ldr	r1, [r7, #4]
 80064aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064ac:	4613      	mov	r3, r2
 80064ae:	00db      	lsls	r3, r3, #3
 80064b0:	4413      	add	r3, r2
 80064b2:	009b      	lsls	r3, r3, #2
 80064b4:	440b      	add	r3, r1
 80064b6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80064ba:	781b      	ldrb	r3, [r3, #0]
 80064bc:	2b01      	cmp	r3, #1
 80064be:	d12e      	bne.n	800651e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80064c0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	da2b      	bge.n	800651e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80064c6:	69bb      	ldr	r3, [r7, #24]
 80064c8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80064d2:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80064d6:	429a      	cmp	r2, r3
 80064d8:	d121      	bne.n	800651e <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80064da:	6879      	ldr	r1, [r7, #4]
 80064dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064de:	4613      	mov	r3, r2
 80064e0:	00db      	lsls	r3, r3, #3
 80064e2:	4413      	add	r3, r2
 80064e4:	009b      	lsls	r3, r3, #2
 80064e6:	440b      	add	r3, r1
 80064e8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80064ec:	2201      	movs	r2, #1
 80064ee:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80064f0:	6a3b      	ldr	r3, [r7, #32]
 80064f2:	699b      	ldr	r3, [r3, #24]
 80064f4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80064f8:	6a3b      	ldr	r3, [r7, #32]
 80064fa:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80064fc:	6a3b      	ldr	r3, [r7, #32]
 80064fe:	695b      	ldr	r3, [r3, #20]
 8006500:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006504:	2b00      	cmp	r3, #0
 8006506:	d10a      	bne.n	800651e <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8006508:	69fb      	ldr	r3, [r7, #28]
 800650a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800650e:	685b      	ldr	r3, [r3, #4]
 8006510:	69fa      	ldr	r2, [r7, #28]
 8006512:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006516:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800651a:	6053      	str	r3, [r2, #4]
            break;
 800651c:	e007      	b.n	800652e <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800651e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006520:	3301      	adds	r3, #1
 8006522:	627b      	str	r3, [r7, #36]	; 0x24
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	685b      	ldr	r3, [r3, #4]
 8006528:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800652a:	429a      	cmp	r2, r3
 800652c:	d3b4      	bcc.n	8006498 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	695a      	ldr	r2, [r3, #20]
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800653c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	4618      	mov	r0, r3
 8006544:	f004 fb5e 	bl	800ac04 <USB_ReadInterrupts>
 8006548:	4603      	mov	r3, r0
 800654a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800654e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006552:	d10a      	bne.n	800656a <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8006554:	6878      	ldr	r0, [r7, #4]
 8006556:	f006 fdb9 	bl	800d0cc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	695a      	ldr	r2, [r3, #20]
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8006568:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	4618      	mov	r0, r3
 8006570:	f004 fb48 	bl	800ac04 <USB_ReadInterrupts>
 8006574:	4603      	mov	r3, r0
 8006576:	f003 0304 	and.w	r3, r3, #4
 800657a:	2b04      	cmp	r3, #4
 800657c:	d115      	bne.n	80065aa <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	685b      	ldr	r3, [r3, #4]
 8006584:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8006586:	69bb      	ldr	r3, [r7, #24]
 8006588:	f003 0304 	and.w	r3, r3, #4
 800658c:	2b00      	cmp	r3, #0
 800658e:	d002      	beq.n	8006596 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	f006 fda9 	bl	800d0e8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	6859      	ldr	r1, [r3, #4]
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	69ba      	ldr	r2, [r7, #24]
 80065a2:	430a      	orrs	r2, r1
 80065a4:	605a      	str	r2, [r3, #4]
 80065a6:	e000      	b.n	80065aa <HAL_PCD_IRQHandler+0x938>
      return;
 80065a8:	bf00      	nop
    }
  }
}
 80065aa:	3734      	adds	r7, #52	; 0x34
 80065ac:	46bd      	mov	sp, r7
 80065ae:	bd90      	pop	{r4, r7, pc}

080065b0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b082      	sub	sp, #8
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
 80065b8:	460b      	mov	r3, r1
 80065ba:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80065c2:	2b01      	cmp	r3, #1
 80065c4:	d101      	bne.n	80065ca <HAL_PCD_SetAddress+0x1a>
 80065c6:	2302      	movs	r3, #2
 80065c8:	e013      	b.n	80065f2 <HAL_PCD_SetAddress+0x42>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2201      	movs	r2, #1
 80065ce:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	78fa      	ldrb	r2, [r7, #3]
 80065d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	78fa      	ldrb	r2, [r7, #3]
 80065e0:	4611      	mov	r1, r2
 80065e2:	4618      	mov	r0, r3
 80065e4:	f004 faa6 	bl	800ab34 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2200      	movs	r2, #0
 80065ec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80065f0:	2300      	movs	r3, #0
}
 80065f2:	4618      	mov	r0, r3
 80065f4:	3708      	adds	r7, #8
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd80      	pop	{r7, pc}

080065fa <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80065fa:	b580      	push	{r7, lr}
 80065fc:	b084      	sub	sp, #16
 80065fe:	af00      	add	r7, sp, #0
 8006600:	6078      	str	r0, [r7, #4]
 8006602:	4608      	mov	r0, r1
 8006604:	4611      	mov	r1, r2
 8006606:	461a      	mov	r2, r3
 8006608:	4603      	mov	r3, r0
 800660a:	70fb      	strb	r3, [r7, #3]
 800660c:	460b      	mov	r3, r1
 800660e:	803b      	strh	r3, [r7, #0]
 8006610:	4613      	mov	r3, r2
 8006612:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8006614:	2300      	movs	r3, #0
 8006616:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006618:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800661c:	2b00      	cmp	r3, #0
 800661e:	da0f      	bge.n	8006640 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006620:	78fb      	ldrb	r3, [r7, #3]
 8006622:	f003 020f 	and.w	r2, r3, #15
 8006626:	4613      	mov	r3, r2
 8006628:	00db      	lsls	r3, r3, #3
 800662a:	4413      	add	r3, r2
 800662c:	009b      	lsls	r3, r3, #2
 800662e:	3338      	adds	r3, #56	; 0x38
 8006630:	687a      	ldr	r2, [r7, #4]
 8006632:	4413      	add	r3, r2
 8006634:	3304      	adds	r3, #4
 8006636:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	2201      	movs	r2, #1
 800663c:	705a      	strb	r2, [r3, #1]
 800663e:	e00f      	b.n	8006660 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006640:	78fb      	ldrb	r3, [r7, #3]
 8006642:	f003 020f 	and.w	r2, r3, #15
 8006646:	4613      	mov	r3, r2
 8006648:	00db      	lsls	r3, r3, #3
 800664a:	4413      	add	r3, r2
 800664c:	009b      	lsls	r3, r3, #2
 800664e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006652:	687a      	ldr	r2, [r7, #4]
 8006654:	4413      	add	r3, r2
 8006656:	3304      	adds	r3, #4
 8006658:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	2200      	movs	r2, #0
 800665e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006660:	78fb      	ldrb	r3, [r7, #3]
 8006662:	f003 030f 	and.w	r3, r3, #15
 8006666:	b2da      	uxtb	r2, r3
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800666c:	883a      	ldrh	r2, [r7, #0]
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	78ba      	ldrb	r2, [r7, #2]
 8006676:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	785b      	ldrb	r3, [r3, #1]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d004      	beq.n	800668a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	781b      	ldrb	r3, [r3, #0]
 8006684:	b29a      	uxth	r2, r3
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800668a:	78bb      	ldrb	r3, [r7, #2]
 800668c:	2b02      	cmp	r3, #2
 800668e:	d102      	bne.n	8006696 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	2200      	movs	r2, #0
 8006694:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800669c:	2b01      	cmp	r3, #1
 800669e:	d101      	bne.n	80066a4 <HAL_PCD_EP_Open+0xaa>
 80066a0:	2302      	movs	r3, #2
 80066a2:	e00e      	b.n	80066c2 <HAL_PCD_EP_Open+0xc8>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2201      	movs	r2, #1
 80066a8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	68f9      	ldr	r1, [r7, #12]
 80066b2:	4618      	mov	r0, r3
 80066b4:	f003 fb26 	bl	8009d04 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2200      	movs	r2, #0
 80066bc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80066c0:	7afb      	ldrb	r3, [r7, #11]
}
 80066c2:	4618      	mov	r0, r3
 80066c4:	3710      	adds	r7, #16
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bd80      	pop	{r7, pc}

080066ca <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80066ca:	b580      	push	{r7, lr}
 80066cc:	b084      	sub	sp, #16
 80066ce:	af00      	add	r7, sp, #0
 80066d0:	6078      	str	r0, [r7, #4]
 80066d2:	460b      	mov	r3, r1
 80066d4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80066d6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	da0f      	bge.n	80066fe <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80066de:	78fb      	ldrb	r3, [r7, #3]
 80066e0:	f003 020f 	and.w	r2, r3, #15
 80066e4:	4613      	mov	r3, r2
 80066e6:	00db      	lsls	r3, r3, #3
 80066e8:	4413      	add	r3, r2
 80066ea:	009b      	lsls	r3, r3, #2
 80066ec:	3338      	adds	r3, #56	; 0x38
 80066ee:	687a      	ldr	r2, [r7, #4]
 80066f0:	4413      	add	r3, r2
 80066f2:	3304      	adds	r3, #4
 80066f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	2201      	movs	r2, #1
 80066fa:	705a      	strb	r2, [r3, #1]
 80066fc:	e00f      	b.n	800671e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80066fe:	78fb      	ldrb	r3, [r7, #3]
 8006700:	f003 020f 	and.w	r2, r3, #15
 8006704:	4613      	mov	r3, r2
 8006706:	00db      	lsls	r3, r3, #3
 8006708:	4413      	add	r3, r2
 800670a:	009b      	lsls	r3, r3, #2
 800670c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006710:	687a      	ldr	r2, [r7, #4]
 8006712:	4413      	add	r3, r2
 8006714:	3304      	adds	r3, #4
 8006716:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	2200      	movs	r2, #0
 800671c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800671e:	78fb      	ldrb	r3, [r7, #3]
 8006720:	f003 030f 	and.w	r3, r3, #15
 8006724:	b2da      	uxtb	r2, r3
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006730:	2b01      	cmp	r3, #1
 8006732:	d101      	bne.n	8006738 <HAL_PCD_EP_Close+0x6e>
 8006734:	2302      	movs	r3, #2
 8006736:	e00e      	b.n	8006756 <HAL_PCD_EP_Close+0x8c>
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2201      	movs	r2, #1
 800673c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	68f9      	ldr	r1, [r7, #12]
 8006746:	4618      	mov	r0, r3
 8006748:	f003 fb64 	bl	8009e14 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2200      	movs	r2, #0
 8006750:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8006754:	2300      	movs	r3, #0
}
 8006756:	4618      	mov	r0, r3
 8006758:	3710      	adds	r7, #16
 800675a:	46bd      	mov	sp, r7
 800675c:	bd80      	pop	{r7, pc}

0800675e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800675e:	b580      	push	{r7, lr}
 8006760:	b086      	sub	sp, #24
 8006762:	af00      	add	r7, sp, #0
 8006764:	60f8      	str	r0, [r7, #12]
 8006766:	607a      	str	r2, [r7, #4]
 8006768:	603b      	str	r3, [r7, #0]
 800676a:	460b      	mov	r3, r1
 800676c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800676e:	7afb      	ldrb	r3, [r7, #11]
 8006770:	f003 020f 	and.w	r2, r3, #15
 8006774:	4613      	mov	r3, r2
 8006776:	00db      	lsls	r3, r3, #3
 8006778:	4413      	add	r3, r2
 800677a:	009b      	lsls	r3, r3, #2
 800677c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006780:	68fa      	ldr	r2, [r7, #12]
 8006782:	4413      	add	r3, r2
 8006784:	3304      	adds	r3, #4
 8006786:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006788:	697b      	ldr	r3, [r7, #20]
 800678a:	687a      	ldr	r2, [r7, #4]
 800678c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800678e:	697b      	ldr	r3, [r7, #20]
 8006790:	683a      	ldr	r2, [r7, #0]
 8006792:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8006794:	697b      	ldr	r3, [r7, #20]
 8006796:	2200      	movs	r2, #0
 8006798:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800679a:	697b      	ldr	r3, [r7, #20]
 800679c:	2200      	movs	r2, #0
 800679e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80067a0:	7afb      	ldrb	r3, [r7, #11]
 80067a2:	f003 030f 	and.w	r3, r3, #15
 80067a6:	b2da      	uxtb	r2, r3
 80067a8:	697b      	ldr	r3, [r7, #20]
 80067aa:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	691b      	ldr	r3, [r3, #16]
 80067b0:	2b01      	cmp	r3, #1
 80067b2:	d102      	bne.n	80067ba <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80067b4:	687a      	ldr	r2, [r7, #4]
 80067b6:	697b      	ldr	r3, [r7, #20]
 80067b8:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80067ba:	7afb      	ldrb	r3, [r7, #11]
 80067bc:	f003 030f 	and.w	r3, r3, #15
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d109      	bne.n	80067d8 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	6818      	ldr	r0, [r3, #0]
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	691b      	ldr	r3, [r3, #16]
 80067cc:	b2db      	uxtb	r3, r3
 80067ce:	461a      	mov	r2, r3
 80067d0:	6979      	ldr	r1, [r7, #20]
 80067d2:	f003 fe43 	bl	800a45c <USB_EP0StartXfer>
 80067d6:	e008      	b.n	80067ea <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	6818      	ldr	r0, [r3, #0]
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	691b      	ldr	r3, [r3, #16]
 80067e0:	b2db      	uxtb	r3, r3
 80067e2:	461a      	mov	r2, r3
 80067e4:	6979      	ldr	r1, [r7, #20]
 80067e6:	f003 fbf1 	bl	8009fcc <USB_EPStartXfer>
  }

  return HAL_OK;
 80067ea:	2300      	movs	r3, #0
}
 80067ec:	4618      	mov	r0, r3
 80067ee:	3718      	adds	r7, #24
 80067f0:	46bd      	mov	sp, r7
 80067f2:	bd80      	pop	{r7, pc}

080067f4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b086      	sub	sp, #24
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	60f8      	str	r0, [r7, #12]
 80067fc:	607a      	str	r2, [r7, #4]
 80067fe:	603b      	str	r3, [r7, #0]
 8006800:	460b      	mov	r3, r1
 8006802:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006804:	7afb      	ldrb	r3, [r7, #11]
 8006806:	f003 020f 	and.w	r2, r3, #15
 800680a:	4613      	mov	r3, r2
 800680c:	00db      	lsls	r3, r3, #3
 800680e:	4413      	add	r3, r2
 8006810:	009b      	lsls	r3, r3, #2
 8006812:	3338      	adds	r3, #56	; 0x38
 8006814:	68fa      	ldr	r2, [r7, #12]
 8006816:	4413      	add	r3, r2
 8006818:	3304      	adds	r3, #4
 800681a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800681c:	697b      	ldr	r3, [r7, #20]
 800681e:	687a      	ldr	r2, [r7, #4]
 8006820:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	683a      	ldr	r2, [r7, #0]
 8006826:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8006828:	697b      	ldr	r3, [r7, #20]
 800682a:	2200      	movs	r2, #0
 800682c:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800682e:	697b      	ldr	r3, [r7, #20]
 8006830:	2201      	movs	r2, #1
 8006832:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006834:	7afb      	ldrb	r3, [r7, #11]
 8006836:	f003 030f 	and.w	r3, r3, #15
 800683a:	b2da      	uxtb	r2, r3
 800683c:	697b      	ldr	r3, [r7, #20]
 800683e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	691b      	ldr	r3, [r3, #16]
 8006844:	2b01      	cmp	r3, #1
 8006846:	d102      	bne.n	800684e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006848:	687a      	ldr	r2, [r7, #4]
 800684a:	697b      	ldr	r3, [r7, #20]
 800684c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800684e:	7afb      	ldrb	r3, [r7, #11]
 8006850:	f003 030f 	and.w	r3, r3, #15
 8006854:	2b00      	cmp	r3, #0
 8006856:	d109      	bne.n	800686c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	6818      	ldr	r0, [r3, #0]
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	691b      	ldr	r3, [r3, #16]
 8006860:	b2db      	uxtb	r3, r3
 8006862:	461a      	mov	r2, r3
 8006864:	6979      	ldr	r1, [r7, #20]
 8006866:	f003 fdf9 	bl	800a45c <USB_EP0StartXfer>
 800686a:	e008      	b.n	800687e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	6818      	ldr	r0, [r3, #0]
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	691b      	ldr	r3, [r3, #16]
 8006874:	b2db      	uxtb	r3, r3
 8006876:	461a      	mov	r2, r3
 8006878:	6979      	ldr	r1, [r7, #20]
 800687a:	f003 fba7 	bl	8009fcc <USB_EPStartXfer>
  }

  return HAL_OK;
 800687e:	2300      	movs	r3, #0
}
 8006880:	4618      	mov	r0, r3
 8006882:	3718      	adds	r7, #24
 8006884:	46bd      	mov	sp, r7
 8006886:	bd80      	pop	{r7, pc}

08006888 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b084      	sub	sp, #16
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
 8006890:	460b      	mov	r3, r1
 8006892:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006894:	78fb      	ldrb	r3, [r7, #3]
 8006896:	f003 020f 	and.w	r2, r3, #15
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	685b      	ldr	r3, [r3, #4]
 800689e:	429a      	cmp	r2, r3
 80068a0:	d901      	bls.n	80068a6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80068a2:	2301      	movs	r3, #1
 80068a4:	e050      	b.n	8006948 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80068a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	da0f      	bge.n	80068ce <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80068ae:	78fb      	ldrb	r3, [r7, #3]
 80068b0:	f003 020f 	and.w	r2, r3, #15
 80068b4:	4613      	mov	r3, r2
 80068b6:	00db      	lsls	r3, r3, #3
 80068b8:	4413      	add	r3, r2
 80068ba:	009b      	lsls	r3, r3, #2
 80068bc:	3338      	adds	r3, #56	; 0x38
 80068be:	687a      	ldr	r2, [r7, #4]
 80068c0:	4413      	add	r3, r2
 80068c2:	3304      	adds	r3, #4
 80068c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	2201      	movs	r2, #1
 80068ca:	705a      	strb	r2, [r3, #1]
 80068cc:	e00d      	b.n	80068ea <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80068ce:	78fa      	ldrb	r2, [r7, #3]
 80068d0:	4613      	mov	r3, r2
 80068d2:	00db      	lsls	r3, r3, #3
 80068d4:	4413      	add	r3, r2
 80068d6:	009b      	lsls	r3, r3, #2
 80068d8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80068dc:	687a      	ldr	r2, [r7, #4]
 80068de:	4413      	add	r3, r2
 80068e0:	3304      	adds	r3, #4
 80068e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	2200      	movs	r2, #0
 80068e8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	2201      	movs	r2, #1
 80068ee:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80068f0:	78fb      	ldrb	r3, [r7, #3]
 80068f2:	f003 030f 	and.w	r3, r3, #15
 80068f6:	b2da      	uxtb	r2, r3
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006902:	2b01      	cmp	r3, #1
 8006904:	d101      	bne.n	800690a <HAL_PCD_EP_SetStall+0x82>
 8006906:	2302      	movs	r3, #2
 8006908:	e01e      	b.n	8006948 <HAL_PCD_EP_SetStall+0xc0>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2201      	movs	r2, #1
 800690e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	68f9      	ldr	r1, [r7, #12]
 8006918:	4618      	mov	r0, r3
 800691a:	f004 f837 	bl	800a98c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800691e:	78fb      	ldrb	r3, [r7, #3]
 8006920:	f003 030f 	and.w	r3, r3, #15
 8006924:	2b00      	cmp	r3, #0
 8006926:	d10a      	bne.n	800693e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6818      	ldr	r0, [r3, #0]
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	691b      	ldr	r3, [r3, #16]
 8006930:	b2d9      	uxtb	r1, r3
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006938:	461a      	mov	r2, r3
 800693a:	f004 fa27 	bl	800ad8c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2200      	movs	r2, #0
 8006942:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006946:	2300      	movs	r3, #0
}
 8006948:	4618      	mov	r0, r3
 800694a:	3710      	adds	r7, #16
 800694c:	46bd      	mov	sp, r7
 800694e:	bd80      	pop	{r7, pc}

08006950 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b084      	sub	sp, #16
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
 8006958:	460b      	mov	r3, r1
 800695a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800695c:	78fb      	ldrb	r3, [r7, #3]
 800695e:	f003 020f 	and.w	r2, r3, #15
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	685b      	ldr	r3, [r3, #4]
 8006966:	429a      	cmp	r2, r3
 8006968:	d901      	bls.n	800696e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800696a:	2301      	movs	r3, #1
 800696c:	e042      	b.n	80069f4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800696e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006972:	2b00      	cmp	r3, #0
 8006974:	da0f      	bge.n	8006996 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006976:	78fb      	ldrb	r3, [r7, #3]
 8006978:	f003 020f 	and.w	r2, r3, #15
 800697c:	4613      	mov	r3, r2
 800697e:	00db      	lsls	r3, r3, #3
 8006980:	4413      	add	r3, r2
 8006982:	009b      	lsls	r3, r3, #2
 8006984:	3338      	adds	r3, #56	; 0x38
 8006986:	687a      	ldr	r2, [r7, #4]
 8006988:	4413      	add	r3, r2
 800698a:	3304      	adds	r3, #4
 800698c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	2201      	movs	r2, #1
 8006992:	705a      	strb	r2, [r3, #1]
 8006994:	e00f      	b.n	80069b6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006996:	78fb      	ldrb	r3, [r7, #3]
 8006998:	f003 020f 	and.w	r2, r3, #15
 800699c:	4613      	mov	r3, r2
 800699e:	00db      	lsls	r3, r3, #3
 80069a0:	4413      	add	r3, r2
 80069a2:	009b      	lsls	r3, r3, #2
 80069a4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80069a8:	687a      	ldr	r2, [r7, #4]
 80069aa:	4413      	add	r3, r2
 80069ac:	3304      	adds	r3, #4
 80069ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	2200      	movs	r2, #0
 80069b4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	2200      	movs	r2, #0
 80069ba:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80069bc:	78fb      	ldrb	r3, [r7, #3]
 80069be:	f003 030f 	and.w	r3, r3, #15
 80069c2:	b2da      	uxtb	r2, r3
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80069ce:	2b01      	cmp	r3, #1
 80069d0:	d101      	bne.n	80069d6 <HAL_PCD_EP_ClrStall+0x86>
 80069d2:	2302      	movs	r3, #2
 80069d4:	e00e      	b.n	80069f4 <HAL_PCD_EP_ClrStall+0xa4>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2201      	movs	r2, #1
 80069da:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	68f9      	ldr	r1, [r7, #12]
 80069e4:	4618      	mov	r0, r3
 80069e6:	f004 f83f 	bl	800aa68 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2200      	movs	r2, #0
 80069ee:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80069f2:	2300      	movs	r3, #0
}
 80069f4:	4618      	mov	r0, r3
 80069f6:	3710      	adds	r7, #16
 80069f8:	46bd      	mov	sp, r7
 80069fa:	bd80      	pop	{r7, pc}

080069fc <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b084      	sub	sp, #16
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
 8006a04:	460b      	mov	r3, r1
 8006a06:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8006a08:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	da0c      	bge.n	8006a2a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006a10:	78fb      	ldrb	r3, [r7, #3]
 8006a12:	f003 020f 	and.w	r2, r3, #15
 8006a16:	4613      	mov	r3, r2
 8006a18:	00db      	lsls	r3, r3, #3
 8006a1a:	4413      	add	r3, r2
 8006a1c:	009b      	lsls	r3, r3, #2
 8006a1e:	3338      	adds	r3, #56	; 0x38
 8006a20:	687a      	ldr	r2, [r7, #4]
 8006a22:	4413      	add	r3, r2
 8006a24:	3304      	adds	r3, #4
 8006a26:	60fb      	str	r3, [r7, #12]
 8006a28:	e00c      	b.n	8006a44 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006a2a:	78fb      	ldrb	r3, [r7, #3]
 8006a2c:	f003 020f 	and.w	r2, r3, #15
 8006a30:	4613      	mov	r3, r2
 8006a32:	00db      	lsls	r3, r3, #3
 8006a34:	4413      	add	r3, r2
 8006a36:	009b      	lsls	r3, r3, #2
 8006a38:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006a3c:	687a      	ldr	r2, [r7, #4]
 8006a3e:	4413      	add	r3, r2
 8006a40:	3304      	adds	r3, #4
 8006a42:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	68f9      	ldr	r1, [r7, #12]
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	f003 fe5e 	bl	800a70c <USB_EPStopXfer>
 8006a50:	4603      	mov	r3, r0
 8006a52:	72fb      	strb	r3, [r7, #11]

  return ret;
 8006a54:	7afb      	ldrb	r3, [r7, #11]
}
 8006a56:	4618      	mov	r0, r3
 8006a58:	3710      	adds	r7, #16
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	bd80      	pop	{r7, pc}

08006a5e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006a5e:	b580      	push	{r7, lr}
 8006a60:	b08a      	sub	sp, #40	; 0x28
 8006a62:	af02      	add	r7, sp, #8
 8006a64:	6078      	str	r0, [r7, #4]
 8006a66:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a6e:	697b      	ldr	r3, [r7, #20]
 8006a70:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8006a72:	683a      	ldr	r2, [r7, #0]
 8006a74:	4613      	mov	r3, r2
 8006a76:	00db      	lsls	r3, r3, #3
 8006a78:	4413      	add	r3, r2
 8006a7a:	009b      	lsls	r3, r3, #2
 8006a7c:	3338      	adds	r3, #56	; 0x38
 8006a7e:	687a      	ldr	r2, [r7, #4]
 8006a80:	4413      	add	r3, r2
 8006a82:	3304      	adds	r3, #4
 8006a84:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	6a1a      	ldr	r2, [r3, #32]
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	699b      	ldr	r3, [r3, #24]
 8006a8e:	429a      	cmp	r2, r3
 8006a90:	d901      	bls.n	8006a96 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006a92:	2301      	movs	r3, #1
 8006a94:	e06c      	b.n	8006b70 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	699a      	ldr	r2, [r3, #24]
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	6a1b      	ldr	r3, [r3, #32]
 8006a9e:	1ad3      	subs	r3, r2, r3
 8006aa0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	68db      	ldr	r3, [r3, #12]
 8006aa6:	69fa      	ldr	r2, [r7, #28]
 8006aa8:	429a      	cmp	r2, r3
 8006aaa:	d902      	bls.n	8006ab2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	68db      	ldr	r3, [r3, #12]
 8006ab0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006ab2:	69fb      	ldr	r3, [r7, #28]
 8006ab4:	3303      	adds	r3, #3
 8006ab6:	089b      	lsrs	r3, r3, #2
 8006ab8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006aba:	e02b      	b.n	8006b14 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	699a      	ldr	r2, [r3, #24]
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	6a1b      	ldr	r3, [r3, #32]
 8006ac4:	1ad3      	subs	r3, r2, r3
 8006ac6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	68db      	ldr	r3, [r3, #12]
 8006acc:	69fa      	ldr	r2, [r7, #28]
 8006ace:	429a      	cmp	r2, r3
 8006ad0:	d902      	bls.n	8006ad8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	68db      	ldr	r3, [r3, #12]
 8006ad6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8006ad8:	69fb      	ldr	r3, [r7, #28]
 8006ada:	3303      	adds	r3, #3
 8006adc:	089b      	lsrs	r3, r3, #2
 8006ade:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	6919      	ldr	r1, [r3, #16]
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	b2da      	uxtb	r2, r3
 8006ae8:	69fb      	ldr	r3, [r7, #28]
 8006aea:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006af0:	b2db      	uxtb	r3, r3
 8006af2:	9300      	str	r3, [sp, #0]
 8006af4:	4603      	mov	r3, r0
 8006af6:	6978      	ldr	r0, [r7, #20]
 8006af8:	f003 feb2 	bl	800a860 <USB_WritePacket>

    ep->xfer_buff  += len;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	691a      	ldr	r2, [r3, #16]
 8006b00:	69fb      	ldr	r3, [r7, #28]
 8006b02:	441a      	add	r2, r3
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	6a1a      	ldr	r2, [r3, #32]
 8006b0c:	69fb      	ldr	r3, [r7, #28]
 8006b0e:	441a      	add	r2, r3
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	015a      	lsls	r2, r3, #5
 8006b18:	693b      	ldr	r3, [r7, #16]
 8006b1a:	4413      	add	r3, r2
 8006b1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b20:	699b      	ldr	r3, [r3, #24]
 8006b22:	b29b      	uxth	r3, r3
 8006b24:	69ba      	ldr	r2, [r7, #24]
 8006b26:	429a      	cmp	r2, r3
 8006b28:	d809      	bhi.n	8006b3e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	6a1a      	ldr	r2, [r3, #32]
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006b32:	429a      	cmp	r2, r3
 8006b34:	d203      	bcs.n	8006b3e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	699b      	ldr	r3, [r3, #24]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d1be      	bne.n	8006abc <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	699a      	ldr	r2, [r3, #24]
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	6a1b      	ldr	r3, [r3, #32]
 8006b46:	429a      	cmp	r2, r3
 8006b48:	d811      	bhi.n	8006b6e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	f003 030f 	and.w	r3, r3, #15
 8006b50:	2201      	movs	r2, #1
 8006b52:	fa02 f303 	lsl.w	r3, r2, r3
 8006b56:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006b58:	693b      	ldr	r3, [r7, #16]
 8006b5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	43db      	mvns	r3, r3
 8006b64:	6939      	ldr	r1, [r7, #16]
 8006b66:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006b6a:	4013      	ands	r3, r2
 8006b6c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8006b6e:	2300      	movs	r3, #0
}
 8006b70:	4618      	mov	r0, r3
 8006b72:	3720      	adds	r7, #32
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bd80      	pop	{r7, pc}

08006b78 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b088      	sub	sp, #32
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
 8006b80:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b88:	69fb      	ldr	r3, [r7, #28]
 8006b8a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006b8c:	69fb      	ldr	r3, [r7, #28]
 8006b8e:	333c      	adds	r3, #60	; 0x3c
 8006b90:	3304      	adds	r3, #4
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	015a      	lsls	r2, r3, #5
 8006b9a:	69bb      	ldr	r3, [r7, #24]
 8006b9c:	4413      	add	r3, r2
 8006b9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ba2:	689b      	ldr	r3, [r3, #8]
 8006ba4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	691b      	ldr	r3, [r3, #16]
 8006baa:	2b01      	cmp	r3, #1
 8006bac:	d17b      	bne.n	8006ca6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8006bae:	693b      	ldr	r3, [r7, #16]
 8006bb0:	f003 0308 	and.w	r3, r3, #8
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d015      	beq.n	8006be4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006bb8:	697b      	ldr	r3, [r7, #20]
 8006bba:	4a61      	ldr	r2, [pc, #388]	; (8006d40 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	f240 80b9 	bls.w	8006d34 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006bc2:	693b      	ldr	r3, [r7, #16]
 8006bc4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	f000 80b3 	beq.w	8006d34 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	015a      	lsls	r2, r3, #5
 8006bd2:	69bb      	ldr	r3, [r7, #24]
 8006bd4:	4413      	add	r3, r2
 8006bd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bda:	461a      	mov	r2, r3
 8006bdc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006be0:	6093      	str	r3, [r2, #8]
 8006be2:	e0a7      	b.n	8006d34 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006be4:	693b      	ldr	r3, [r7, #16]
 8006be6:	f003 0320 	and.w	r3, r3, #32
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d009      	beq.n	8006c02 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	015a      	lsls	r2, r3, #5
 8006bf2:	69bb      	ldr	r3, [r7, #24]
 8006bf4:	4413      	add	r3, r2
 8006bf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bfa:	461a      	mov	r2, r3
 8006bfc:	2320      	movs	r3, #32
 8006bfe:	6093      	str	r3, [r2, #8]
 8006c00:	e098      	b.n	8006d34 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8006c02:	693b      	ldr	r3, [r7, #16]
 8006c04:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	f040 8093 	bne.w	8006d34 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006c0e:	697b      	ldr	r3, [r7, #20]
 8006c10:	4a4b      	ldr	r2, [pc, #300]	; (8006d40 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d90f      	bls.n	8006c36 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006c16:	693b      	ldr	r3, [r7, #16]
 8006c18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d00a      	beq.n	8006c36 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	015a      	lsls	r2, r3, #5
 8006c24:	69bb      	ldr	r3, [r7, #24]
 8006c26:	4413      	add	r3, r2
 8006c28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c2c:	461a      	mov	r2, r3
 8006c2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c32:	6093      	str	r3, [r2, #8]
 8006c34:	e07e      	b.n	8006d34 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8006c36:	683a      	ldr	r2, [r7, #0]
 8006c38:	4613      	mov	r3, r2
 8006c3a:	00db      	lsls	r3, r3, #3
 8006c3c:	4413      	add	r3, r2
 8006c3e:	009b      	lsls	r3, r3, #2
 8006c40:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006c44:	687a      	ldr	r2, [r7, #4]
 8006c46:	4413      	add	r3, r2
 8006c48:	3304      	adds	r3, #4
 8006c4a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	69da      	ldr	r2, [r3, #28]
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	0159      	lsls	r1, r3, #5
 8006c54:	69bb      	ldr	r3, [r7, #24]
 8006c56:	440b      	add	r3, r1
 8006c58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c5c:	691b      	ldr	r3, [r3, #16]
 8006c5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c62:	1ad2      	subs	r2, r2, r3
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d114      	bne.n	8006c98 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	699b      	ldr	r3, [r3, #24]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d109      	bne.n	8006c8a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6818      	ldr	r0, [r3, #0]
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006c80:	461a      	mov	r2, r3
 8006c82:	2101      	movs	r1, #1
 8006c84:	f004 f882 	bl	800ad8c <USB_EP0_OutStart>
 8006c88:	e006      	b.n	8006c98 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	691a      	ldr	r2, [r3, #16]
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	6a1b      	ldr	r3, [r3, #32]
 8006c92:	441a      	add	r2, r3
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	b2db      	uxtb	r3, r3
 8006c9c:	4619      	mov	r1, r3
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	f006 f95a 	bl	800cf58 <HAL_PCD_DataOutStageCallback>
 8006ca4:	e046      	b.n	8006d34 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006ca6:	697b      	ldr	r3, [r7, #20]
 8006ca8:	4a26      	ldr	r2, [pc, #152]	; (8006d44 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d124      	bne.n	8006cf8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006cae:	693b      	ldr	r3, [r7, #16]
 8006cb0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d00a      	beq.n	8006cce <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	015a      	lsls	r2, r3, #5
 8006cbc:	69bb      	ldr	r3, [r7, #24]
 8006cbe:	4413      	add	r3, r2
 8006cc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cc4:	461a      	mov	r2, r3
 8006cc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006cca:	6093      	str	r3, [r2, #8]
 8006ccc:	e032      	b.n	8006d34 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006cce:	693b      	ldr	r3, [r7, #16]
 8006cd0:	f003 0320 	and.w	r3, r3, #32
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d008      	beq.n	8006cea <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	015a      	lsls	r2, r3, #5
 8006cdc:	69bb      	ldr	r3, [r7, #24]
 8006cde:	4413      	add	r3, r2
 8006ce0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ce4:	461a      	mov	r2, r3
 8006ce6:	2320      	movs	r3, #32
 8006ce8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	b2db      	uxtb	r3, r3
 8006cee:	4619      	mov	r1, r3
 8006cf0:	6878      	ldr	r0, [r7, #4]
 8006cf2:	f006 f931 	bl	800cf58 <HAL_PCD_DataOutStageCallback>
 8006cf6:	e01d      	b.n	8006d34 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d114      	bne.n	8006d28 <PCD_EP_OutXfrComplete_int+0x1b0>
 8006cfe:	6879      	ldr	r1, [r7, #4]
 8006d00:	683a      	ldr	r2, [r7, #0]
 8006d02:	4613      	mov	r3, r2
 8006d04:	00db      	lsls	r3, r3, #3
 8006d06:	4413      	add	r3, r2
 8006d08:	009b      	lsls	r3, r3, #2
 8006d0a:	440b      	add	r3, r1
 8006d0c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d108      	bne.n	8006d28 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6818      	ldr	r0, [r3, #0]
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006d20:	461a      	mov	r2, r3
 8006d22:	2100      	movs	r1, #0
 8006d24:	f004 f832 	bl	800ad8c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	b2db      	uxtb	r3, r3
 8006d2c:	4619      	mov	r1, r3
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	f006 f912 	bl	800cf58 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006d34:	2300      	movs	r3, #0
}
 8006d36:	4618      	mov	r0, r3
 8006d38:	3720      	adds	r7, #32
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	bd80      	pop	{r7, pc}
 8006d3e:	bf00      	nop
 8006d40:	4f54300a 	.word	0x4f54300a
 8006d44:	4f54310a 	.word	0x4f54310a

08006d48 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b086      	sub	sp, #24
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
 8006d50:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d58:	697b      	ldr	r3, [r7, #20]
 8006d5a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006d5c:	697b      	ldr	r3, [r7, #20]
 8006d5e:	333c      	adds	r3, #60	; 0x3c
 8006d60:	3304      	adds	r3, #4
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	015a      	lsls	r2, r3, #5
 8006d6a:	693b      	ldr	r3, [r7, #16]
 8006d6c:	4413      	add	r3, r2
 8006d6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d72:	689b      	ldr	r3, [r3, #8]
 8006d74:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	4a15      	ldr	r2, [pc, #84]	; (8006dd0 <PCD_EP_OutSetupPacket_int+0x88>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d90e      	bls.n	8006d9c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006d7e:	68bb      	ldr	r3, [r7, #8]
 8006d80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d009      	beq.n	8006d9c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	015a      	lsls	r2, r3, #5
 8006d8c:	693b      	ldr	r3, [r7, #16]
 8006d8e:	4413      	add	r3, r2
 8006d90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d94:	461a      	mov	r2, r3
 8006d96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d9a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006d9c:	6878      	ldr	r0, [r7, #4]
 8006d9e:	f006 f8c9 	bl	800cf34 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	4a0a      	ldr	r2, [pc, #40]	; (8006dd0 <PCD_EP_OutSetupPacket_int+0x88>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d90c      	bls.n	8006dc4 <PCD_EP_OutSetupPacket_int+0x7c>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	691b      	ldr	r3, [r3, #16]
 8006dae:	2b01      	cmp	r3, #1
 8006db0:	d108      	bne.n	8006dc4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6818      	ldr	r0, [r3, #0]
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006dbc:	461a      	mov	r2, r3
 8006dbe:	2101      	movs	r1, #1
 8006dc0:	f003 ffe4 	bl	800ad8c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006dc4:	2300      	movs	r3, #0
}
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	3718      	adds	r7, #24
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bd80      	pop	{r7, pc}
 8006dce:	bf00      	nop
 8006dd0:	4f54300a 	.word	0x4f54300a

08006dd4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	b085      	sub	sp, #20
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
 8006ddc:	460b      	mov	r3, r1
 8006dde:	70fb      	strb	r3, [r7, #3]
 8006de0:	4613      	mov	r3, r2
 8006de2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dea:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006dec:	78fb      	ldrb	r3, [r7, #3]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d107      	bne.n	8006e02 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006df2:	883b      	ldrh	r3, [r7, #0]
 8006df4:	0419      	lsls	r1, r3, #16
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	68ba      	ldr	r2, [r7, #8]
 8006dfc:	430a      	orrs	r2, r1
 8006dfe:	629a      	str	r2, [r3, #40]	; 0x28
 8006e00:	e028      	b.n	8006e54 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e08:	0c1b      	lsrs	r3, r3, #16
 8006e0a:	68ba      	ldr	r2, [r7, #8]
 8006e0c:	4413      	add	r3, r2
 8006e0e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006e10:	2300      	movs	r3, #0
 8006e12:	73fb      	strb	r3, [r7, #15]
 8006e14:	e00d      	b.n	8006e32 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681a      	ldr	r2, [r3, #0]
 8006e1a:	7bfb      	ldrb	r3, [r7, #15]
 8006e1c:	3340      	adds	r3, #64	; 0x40
 8006e1e:	009b      	lsls	r3, r3, #2
 8006e20:	4413      	add	r3, r2
 8006e22:	685b      	ldr	r3, [r3, #4]
 8006e24:	0c1b      	lsrs	r3, r3, #16
 8006e26:	68ba      	ldr	r2, [r7, #8]
 8006e28:	4413      	add	r3, r2
 8006e2a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006e2c:	7bfb      	ldrb	r3, [r7, #15]
 8006e2e:	3301      	adds	r3, #1
 8006e30:	73fb      	strb	r3, [r7, #15]
 8006e32:	7bfa      	ldrb	r2, [r7, #15]
 8006e34:	78fb      	ldrb	r3, [r7, #3]
 8006e36:	3b01      	subs	r3, #1
 8006e38:	429a      	cmp	r2, r3
 8006e3a:	d3ec      	bcc.n	8006e16 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006e3c:	883b      	ldrh	r3, [r7, #0]
 8006e3e:	0418      	lsls	r0, r3, #16
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6819      	ldr	r1, [r3, #0]
 8006e44:	78fb      	ldrb	r3, [r7, #3]
 8006e46:	3b01      	subs	r3, #1
 8006e48:	68ba      	ldr	r2, [r7, #8]
 8006e4a:	4302      	orrs	r2, r0
 8006e4c:	3340      	adds	r3, #64	; 0x40
 8006e4e:	009b      	lsls	r3, r3, #2
 8006e50:	440b      	add	r3, r1
 8006e52:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006e54:	2300      	movs	r3, #0
}
 8006e56:	4618      	mov	r0, r3
 8006e58:	3714      	adds	r7, #20
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e60:	4770      	bx	lr

08006e62 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8006e62:	b480      	push	{r7}
 8006e64:	b083      	sub	sp, #12
 8006e66:	af00      	add	r7, sp, #0
 8006e68:	6078      	str	r0, [r7, #4]
 8006e6a:	460b      	mov	r3, r1
 8006e6c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	887a      	ldrh	r2, [r7, #2]
 8006e74:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006e76:	2300      	movs	r3, #0
}
 8006e78:	4618      	mov	r0, r3
 8006e7a:	370c      	adds	r7, #12
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e82:	4770      	bx	lr

08006e84 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006e84:	b480      	push	{r7}
 8006e86:	b083      	sub	sp, #12
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
 8006e8c:	460b      	mov	r3, r1
 8006e8e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006e90:	bf00      	nop
 8006e92:	370c      	adds	r7, #12
 8006e94:	46bd      	mov	sp, r7
 8006e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9a:	4770      	bx	lr

08006e9c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b086      	sub	sp, #24
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d101      	bne.n	8006eae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006eaa:	2301      	movs	r3, #1
 8006eac:	e267      	b.n	800737e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f003 0301 	and.w	r3, r3, #1
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d075      	beq.n	8006fa6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006eba:	4b88      	ldr	r3, [pc, #544]	; (80070dc <HAL_RCC_OscConfig+0x240>)
 8006ebc:	689b      	ldr	r3, [r3, #8]
 8006ebe:	f003 030c 	and.w	r3, r3, #12
 8006ec2:	2b04      	cmp	r3, #4
 8006ec4:	d00c      	beq.n	8006ee0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006ec6:	4b85      	ldr	r3, [pc, #532]	; (80070dc <HAL_RCC_OscConfig+0x240>)
 8006ec8:	689b      	ldr	r3, [r3, #8]
 8006eca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006ece:	2b08      	cmp	r3, #8
 8006ed0:	d112      	bne.n	8006ef8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006ed2:	4b82      	ldr	r3, [pc, #520]	; (80070dc <HAL_RCC_OscConfig+0x240>)
 8006ed4:	685b      	ldr	r3, [r3, #4]
 8006ed6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006eda:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006ede:	d10b      	bne.n	8006ef8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ee0:	4b7e      	ldr	r3, [pc, #504]	; (80070dc <HAL_RCC_OscConfig+0x240>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d05b      	beq.n	8006fa4 <HAL_RCC_OscConfig+0x108>
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	685b      	ldr	r3, [r3, #4]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d157      	bne.n	8006fa4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	e242      	b.n	800737e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	685b      	ldr	r3, [r3, #4]
 8006efc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f00:	d106      	bne.n	8006f10 <HAL_RCC_OscConfig+0x74>
 8006f02:	4b76      	ldr	r3, [pc, #472]	; (80070dc <HAL_RCC_OscConfig+0x240>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	4a75      	ldr	r2, [pc, #468]	; (80070dc <HAL_RCC_OscConfig+0x240>)
 8006f08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f0c:	6013      	str	r3, [r2, #0]
 8006f0e:	e01d      	b.n	8006f4c <HAL_RCC_OscConfig+0xb0>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	685b      	ldr	r3, [r3, #4]
 8006f14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006f18:	d10c      	bne.n	8006f34 <HAL_RCC_OscConfig+0x98>
 8006f1a:	4b70      	ldr	r3, [pc, #448]	; (80070dc <HAL_RCC_OscConfig+0x240>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	4a6f      	ldr	r2, [pc, #444]	; (80070dc <HAL_RCC_OscConfig+0x240>)
 8006f20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006f24:	6013      	str	r3, [r2, #0]
 8006f26:	4b6d      	ldr	r3, [pc, #436]	; (80070dc <HAL_RCC_OscConfig+0x240>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	4a6c      	ldr	r2, [pc, #432]	; (80070dc <HAL_RCC_OscConfig+0x240>)
 8006f2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f30:	6013      	str	r3, [r2, #0]
 8006f32:	e00b      	b.n	8006f4c <HAL_RCC_OscConfig+0xb0>
 8006f34:	4b69      	ldr	r3, [pc, #420]	; (80070dc <HAL_RCC_OscConfig+0x240>)
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	4a68      	ldr	r2, [pc, #416]	; (80070dc <HAL_RCC_OscConfig+0x240>)
 8006f3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f3e:	6013      	str	r3, [r2, #0]
 8006f40:	4b66      	ldr	r3, [pc, #408]	; (80070dc <HAL_RCC_OscConfig+0x240>)
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4a65      	ldr	r2, [pc, #404]	; (80070dc <HAL_RCC_OscConfig+0x240>)
 8006f46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006f4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	685b      	ldr	r3, [r3, #4]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d013      	beq.n	8006f7c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f54:	f7fc f8a0 	bl	8003098 <HAL_GetTick>
 8006f58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f5a:	e008      	b.n	8006f6e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006f5c:	f7fc f89c 	bl	8003098 <HAL_GetTick>
 8006f60:	4602      	mov	r2, r0
 8006f62:	693b      	ldr	r3, [r7, #16]
 8006f64:	1ad3      	subs	r3, r2, r3
 8006f66:	2b64      	cmp	r3, #100	; 0x64
 8006f68:	d901      	bls.n	8006f6e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006f6a:	2303      	movs	r3, #3
 8006f6c:	e207      	b.n	800737e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f6e:	4b5b      	ldr	r3, [pc, #364]	; (80070dc <HAL_RCC_OscConfig+0x240>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d0f0      	beq.n	8006f5c <HAL_RCC_OscConfig+0xc0>
 8006f7a:	e014      	b.n	8006fa6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f7c:	f7fc f88c 	bl	8003098 <HAL_GetTick>
 8006f80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006f82:	e008      	b.n	8006f96 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006f84:	f7fc f888 	bl	8003098 <HAL_GetTick>
 8006f88:	4602      	mov	r2, r0
 8006f8a:	693b      	ldr	r3, [r7, #16]
 8006f8c:	1ad3      	subs	r3, r2, r3
 8006f8e:	2b64      	cmp	r3, #100	; 0x64
 8006f90:	d901      	bls.n	8006f96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006f92:	2303      	movs	r3, #3
 8006f94:	e1f3      	b.n	800737e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006f96:	4b51      	ldr	r3, [pc, #324]	; (80070dc <HAL_RCC_OscConfig+0x240>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d1f0      	bne.n	8006f84 <HAL_RCC_OscConfig+0xe8>
 8006fa2:	e000      	b.n	8006fa6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006fa4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f003 0302 	and.w	r3, r3, #2
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d063      	beq.n	800707a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006fb2:	4b4a      	ldr	r3, [pc, #296]	; (80070dc <HAL_RCC_OscConfig+0x240>)
 8006fb4:	689b      	ldr	r3, [r3, #8]
 8006fb6:	f003 030c 	and.w	r3, r3, #12
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d00b      	beq.n	8006fd6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006fbe:	4b47      	ldr	r3, [pc, #284]	; (80070dc <HAL_RCC_OscConfig+0x240>)
 8006fc0:	689b      	ldr	r3, [r3, #8]
 8006fc2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006fc6:	2b08      	cmp	r3, #8
 8006fc8:	d11c      	bne.n	8007004 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006fca:	4b44      	ldr	r3, [pc, #272]	; (80070dc <HAL_RCC_OscConfig+0x240>)
 8006fcc:	685b      	ldr	r3, [r3, #4]
 8006fce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d116      	bne.n	8007004 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006fd6:	4b41      	ldr	r3, [pc, #260]	; (80070dc <HAL_RCC_OscConfig+0x240>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f003 0302 	and.w	r3, r3, #2
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d005      	beq.n	8006fee <HAL_RCC_OscConfig+0x152>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	68db      	ldr	r3, [r3, #12]
 8006fe6:	2b01      	cmp	r3, #1
 8006fe8:	d001      	beq.n	8006fee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006fea:	2301      	movs	r3, #1
 8006fec:	e1c7      	b.n	800737e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006fee:	4b3b      	ldr	r3, [pc, #236]	; (80070dc <HAL_RCC_OscConfig+0x240>)
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	691b      	ldr	r3, [r3, #16]
 8006ffa:	00db      	lsls	r3, r3, #3
 8006ffc:	4937      	ldr	r1, [pc, #220]	; (80070dc <HAL_RCC_OscConfig+0x240>)
 8006ffe:	4313      	orrs	r3, r2
 8007000:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007002:	e03a      	b.n	800707a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	68db      	ldr	r3, [r3, #12]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d020      	beq.n	800704e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800700c:	4b34      	ldr	r3, [pc, #208]	; (80070e0 <HAL_RCC_OscConfig+0x244>)
 800700e:	2201      	movs	r2, #1
 8007010:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007012:	f7fc f841 	bl	8003098 <HAL_GetTick>
 8007016:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007018:	e008      	b.n	800702c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800701a:	f7fc f83d 	bl	8003098 <HAL_GetTick>
 800701e:	4602      	mov	r2, r0
 8007020:	693b      	ldr	r3, [r7, #16]
 8007022:	1ad3      	subs	r3, r2, r3
 8007024:	2b02      	cmp	r3, #2
 8007026:	d901      	bls.n	800702c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007028:	2303      	movs	r3, #3
 800702a:	e1a8      	b.n	800737e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800702c:	4b2b      	ldr	r3, [pc, #172]	; (80070dc <HAL_RCC_OscConfig+0x240>)
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f003 0302 	and.w	r3, r3, #2
 8007034:	2b00      	cmp	r3, #0
 8007036:	d0f0      	beq.n	800701a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007038:	4b28      	ldr	r3, [pc, #160]	; (80070dc <HAL_RCC_OscConfig+0x240>)
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	691b      	ldr	r3, [r3, #16]
 8007044:	00db      	lsls	r3, r3, #3
 8007046:	4925      	ldr	r1, [pc, #148]	; (80070dc <HAL_RCC_OscConfig+0x240>)
 8007048:	4313      	orrs	r3, r2
 800704a:	600b      	str	r3, [r1, #0]
 800704c:	e015      	b.n	800707a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800704e:	4b24      	ldr	r3, [pc, #144]	; (80070e0 <HAL_RCC_OscConfig+0x244>)
 8007050:	2200      	movs	r2, #0
 8007052:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007054:	f7fc f820 	bl	8003098 <HAL_GetTick>
 8007058:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800705a:	e008      	b.n	800706e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800705c:	f7fc f81c 	bl	8003098 <HAL_GetTick>
 8007060:	4602      	mov	r2, r0
 8007062:	693b      	ldr	r3, [r7, #16]
 8007064:	1ad3      	subs	r3, r2, r3
 8007066:	2b02      	cmp	r3, #2
 8007068:	d901      	bls.n	800706e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800706a:	2303      	movs	r3, #3
 800706c:	e187      	b.n	800737e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800706e:	4b1b      	ldr	r3, [pc, #108]	; (80070dc <HAL_RCC_OscConfig+0x240>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f003 0302 	and.w	r3, r3, #2
 8007076:	2b00      	cmp	r3, #0
 8007078:	d1f0      	bne.n	800705c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f003 0308 	and.w	r3, r3, #8
 8007082:	2b00      	cmp	r3, #0
 8007084:	d036      	beq.n	80070f4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	695b      	ldr	r3, [r3, #20]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d016      	beq.n	80070bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800708e:	4b15      	ldr	r3, [pc, #84]	; (80070e4 <HAL_RCC_OscConfig+0x248>)
 8007090:	2201      	movs	r2, #1
 8007092:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007094:	f7fc f800 	bl	8003098 <HAL_GetTick>
 8007098:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800709a:	e008      	b.n	80070ae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800709c:	f7fb fffc 	bl	8003098 <HAL_GetTick>
 80070a0:	4602      	mov	r2, r0
 80070a2:	693b      	ldr	r3, [r7, #16]
 80070a4:	1ad3      	subs	r3, r2, r3
 80070a6:	2b02      	cmp	r3, #2
 80070a8:	d901      	bls.n	80070ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80070aa:	2303      	movs	r3, #3
 80070ac:	e167      	b.n	800737e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80070ae:	4b0b      	ldr	r3, [pc, #44]	; (80070dc <HAL_RCC_OscConfig+0x240>)
 80070b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80070b2:	f003 0302 	and.w	r3, r3, #2
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d0f0      	beq.n	800709c <HAL_RCC_OscConfig+0x200>
 80070ba:	e01b      	b.n	80070f4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80070bc:	4b09      	ldr	r3, [pc, #36]	; (80070e4 <HAL_RCC_OscConfig+0x248>)
 80070be:	2200      	movs	r2, #0
 80070c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80070c2:	f7fb ffe9 	bl	8003098 <HAL_GetTick>
 80070c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80070c8:	e00e      	b.n	80070e8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80070ca:	f7fb ffe5 	bl	8003098 <HAL_GetTick>
 80070ce:	4602      	mov	r2, r0
 80070d0:	693b      	ldr	r3, [r7, #16]
 80070d2:	1ad3      	subs	r3, r2, r3
 80070d4:	2b02      	cmp	r3, #2
 80070d6:	d907      	bls.n	80070e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80070d8:	2303      	movs	r3, #3
 80070da:	e150      	b.n	800737e <HAL_RCC_OscConfig+0x4e2>
 80070dc:	40023800 	.word	0x40023800
 80070e0:	42470000 	.word	0x42470000
 80070e4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80070e8:	4b88      	ldr	r3, [pc, #544]	; (800730c <HAL_RCC_OscConfig+0x470>)
 80070ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80070ec:	f003 0302 	and.w	r3, r3, #2
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d1ea      	bne.n	80070ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f003 0304 	and.w	r3, r3, #4
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	f000 8097 	beq.w	8007230 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007102:	2300      	movs	r3, #0
 8007104:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007106:	4b81      	ldr	r3, [pc, #516]	; (800730c <HAL_RCC_OscConfig+0x470>)
 8007108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800710a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800710e:	2b00      	cmp	r3, #0
 8007110:	d10f      	bne.n	8007132 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007112:	2300      	movs	r3, #0
 8007114:	60bb      	str	r3, [r7, #8]
 8007116:	4b7d      	ldr	r3, [pc, #500]	; (800730c <HAL_RCC_OscConfig+0x470>)
 8007118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800711a:	4a7c      	ldr	r2, [pc, #496]	; (800730c <HAL_RCC_OscConfig+0x470>)
 800711c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007120:	6413      	str	r3, [r2, #64]	; 0x40
 8007122:	4b7a      	ldr	r3, [pc, #488]	; (800730c <HAL_RCC_OscConfig+0x470>)
 8007124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007126:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800712a:	60bb      	str	r3, [r7, #8]
 800712c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800712e:	2301      	movs	r3, #1
 8007130:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007132:	4b77      	ldr	r3, [pc, #476]	; (8007310 <HAL_RCC_OscConfig+0x474>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800713a:	2b00      	cmp	r3, #0
 800713c:	d118      	bne.n	8007170 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800713e:	4b74      	ldr	r3, [pc, #464]	; (8007310 <HAL_RCC_OscConfig+0x474>)
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	4a73      	ldr	r2, [pc, #460]	; (8007310 <HAL_RCC_OscConfig+0x474>)
 8007144:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007148:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800714a:	f7fb ffa5 	bl	8003098 <HAL_GetTick>
 800714e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007150:	e008      	b.n	8007164 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007152:	f7fb ffa1 	bl	8003098 <HAL_GetTick>
 8007156:	4602      	mov	r2, r0
 8007158:	693b      	ldr	r3, [r7, #16]
 800715a:	1ad3      	subs	r3, r2, r3
 800715c:	2b02      	cmp	r3, #2
 800715e:	d901      	bls.n	8007164 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007160:	2303      	movs	r3, #3
 8007162:	e10c      	b.n	800737e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007164:	4b6a      	ldr	r3, [pc, #424]	; (8007310 <HAL_RCC_OscConfig+0x474>)
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800716c:	2b00      	cmp	r3, #0
 800716e:	d0f0      	beq.n	8007152 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	689b      	ldr	r3, [r3, #8]
 8007174:	2b01      	cmp	r3, #1
 8007176:	d106      	bne.n	8007186 <HAL_RCC_OscConfig+0x2ea>
 8007178:	4b64      	ldr	r3, [pc, #400]	; (800730c <HAL_RCC_OscConfig+0x470>)
 800717a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800717c:	4a63      	ldr	r2, [pc, #396]	; (800730c <HAL_RCC_OscConfig+0x470>)
 800717e:	f043 0301 	orr.w	r3, r3, #1
 8007182:	6713      	str	r3, [r2, #112]	; 0x70
 8007184:	e01c      	b.n	80071c0 <HAL_RCC_OscConfig+0x324>
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	689b      	ldr	r3, [r3, #8]
 800718a:	2b05      	cmp	r3, #5
 800718c:	d10c      	bne.n	80071a8 <HAL_RCC_OscConfig+0x30c>
 800718e:	4b5f      	ldr	r3, [pc, #380]	; (800730c <HAL_RCC_OscConfig+0x470>)
 8007190:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007192:	4a5e      	ldr	r2, [pc, #376]	; (800730c <HAL_RCC_OscConfig+0x470>)
 8007194:	f043 0304 	orr.w	r3, r3, #4
 8007198:	6713      	str	r3, [r2, #112]	; 0x70
 800719a:	4b5c      	ldr	r3, [pc, #368]	; (800730c <HAL_RCC_OscConfig+0x470>)
 800719c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800719e:	4a5b      	ldr	r2, [pc, #364]	; (800730c <HAL_RCC_OscConfig+0x470>)
 80071a0:	f043 0301 	orr.w	r3, r3, #1
 80071a4:	6713      	str	r3, [r2, #112]	; 0x70
 80071a6:	e00b      	b.n	80071c0 <HAL_RCC_OscConfig+0x324>
 80071a8:	4b58      	ldr	r3, [pc, #352]	; (800730c <HAL_RCC_OscConfig+0x470>)
 80071aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071ac:	4a57      	ldr	r2, [pc, #348]	; (800730c <HAL_RCC_OscConfig+0x470>)
 80071ae:	f023 0301 	bic.w	r3, r3, #1
 80071b2:	6713      	str	r3, [r2, #112]	; 0x70
 80071b4:	4b55      	ldr	r3, [pc, #340]	; (800730c <HAL_RCC_OscConfig+0x470>)
 80071b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071b8:	4a54      	ldr	r2, [pc, #336]	; (800730c <HAL_RCC_OscConfig+0x470>)
 80071ba:	f023 0304 	bic.w	r3, r3, #4
 80071be:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	689b      	ldr	r3, [r3, #8]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d015      	beq.n	80071f4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071c8:	f7fb ff66 	bl	8003098 <HAL_GetTick>
 80071cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80071ce:	e00a      	b.n	80071e6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80071d0:	f7fb ff62 	bl	8003098 <HAL_GetTick>
 80071d4:	4602      	mov	r2, r0
 80071d6:	693b      	ldr	r3, [r7, #16]
 80071d8:	1ad3      	subs	r3, r2, r3
 80071da:	f241 3288 	movw	r2, #5000	; 0x1388
 80071de:	4293      	cmp	r3, r2
 80071e0:	d901      	bls.n	80071e6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80071e2:	2303      	movs	r3, #3
 80071e4:	e0cb      	b.n	800737e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80071e6:	4b49      	ldr	r3, [pc, #292]	; (800730c <HAL_RCC_OscConfig+0x470>)
 80071e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071ea:	f003 0302 	and.w	r3, r3, #2
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d0ee      	beq.n	80071d0 <HAL_RCC_OscConfig+0x334>
 80071f2:	e014      	b.n	800721e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80071f4:	f7fb ff50 	bl	8003098 <HAL_GetTick>
 80071f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80071fa:	e00a      	b.n	8007212 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80071fc:	f7fb ff4c 	bl	8003098 <HAL_GetTick>
 8007200:	4602      	mov	r2, r0
 8007202:	693b      	ldr	r3, [r7, #16]
 8007204:	1ad3      	subs	r3, r2, r3
 8007206:	f241 3288 	movw	r2, #5000	; 0x1388
 800720a:	4293      	cmp	r3, r2
 800720c:	d901      	bls.n	8007212 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800720e:	2303      	movs	r3, #3
 8007210:	e0b5      	b.n	800737e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007212:	4b3e      	ldr	r3, [pc, #248]	; (800730c <HAL_RCC_OscConfig+0x470>)
 8007214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007216:	f003 0302 	and.w	r3, r3, #2
 800721a:	2b00      	cmp	r3, #0
 800721c:	d1ee      	bne.n	80071fc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800721e:	7dfb      	ldrb	r3, [r7, #23]
 8007220:	2b01      	cmp	r3, #1
 8007222:	d105      	bne.n	8007230 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007224:	4b39      	ldr	r3, [pc, #228]	; (800730c <HAL_RCC_OscConfig+0x470>)
 8007226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007228:	4a38      	ldr	r2, [pc, #224]	; (800730c <HAL_RCC_OscConfig+0x470>)
 800722a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800722e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	699b      	ldr	r3, [r3, #24]
 8007234:	2b00      	cmp	r3, #0
 8007236:	f000 80a1 	beq.w	800737c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800723a:	4b34      	ldr	r3, [pc, #208]	; (800730c <HAL_RCC_OscConfig+0x470>)
 800723c:	689b      	ldr	r3, [r3, #8]
 800723e:	f003 030c 	and.w	r3, r3, #12
 8007242:	2b08      	cmp	r3, #8
 8007244:	d05c      	beq.n	8007300 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	699b      	ldr	r3, [r3, #24]
 800724a:	2b02      	cmp	r3, #2
 800724c:	d141      	bne.n	80072d2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800724e:	4b31      	ldr	r3, [pc, #196]	; (8007314 <HAL_RCC_OscConfig+0x478>)
 8007250:	2200      	movs	r2, #0
 8007252:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007254:	f7fb ff20 	bl	8003098 <HAL_GetTick>
 8007258:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800725a:	e008      	b.n	800726e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800725c:	f7fb ff1c 	bl	8003098 <HAL_GetTick>
 8007260:	4602      	mov	r2, r0
 8007262:	693b      	ldr	r3, [r7, #16]
 8007264:	1ad3      	subs	r3, r2, r3
 8007266:	2b02      	cmp	r3, #2
 8007268:	d901      	bls.n	800726e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800726a:	2303      	movs	r3, #3
 800726c:	e087      	b.n	800737e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800726e:	4b27      	ldr	r3, [pc, #156]	; (800730c <HAL_RCC_OscConfig+0x470>)
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007276:	2b00      	cmp	r3, #0
 8007278:	d1f0      	bne.n	800725c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	69da      	ldr	r2, [r3, #28]
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6a1b      	ldr	r3, [r3, #32]
 8007282:	431a      	orrs	r2, r3
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007288:	019b      	lsls	r3, r3, #6
 800728a:	431a      	orrs	r2, r3
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007290:	085b      	lsrs	r3, r3, #1
 8007292:	3b01      	subs	r3, #1
 8007294:	041b      	lsls	r3, r3, #16
 8007296:	431a      	orrs	r2, r3
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800729c:	061b      	lsls	r3, r3, #24
 800729e:	491b      	ldr	r1, [pc, #108]	; (800730c <HAL_RCC_OscConfig+0x470>)
 80072a0:	4313      	orrs	r3, r2
 80072a2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80072a4:	4b1b      	ldr	r3, [pc, #108]	; (8007314 <HAL_RCC_OscConfig+0x478>)
 80072a6:	2201      	movs	r2, #1
 80072a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80072aa:	f7fb fef5 	bl	8003098 <HAL_GetTick>
 80072ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80072b0:	e008      	b.n	80072c4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80072b2:	f7fb fef1 	bl	8003098 <HAL_GetTick>
 80072b6:	4602      	mov	r2, r0
 80072b8:	693b      	ldr	r3, [r7, #16]
 80072ba:	1ad3      	subs	r3, r2, r3
 80072bc:	2b02      	cmp	r3, #2
 80072be:	d901      	bls.n	80072c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80072c0:	2303      	movs	r3, #3
 80072c2:	e05c      	b.n	800737e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80072c4:	4b11      	ldr	r3, [pc, #68]	; (800730c <HAL_RCC_OscConfig+0x470>)
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d0f0      	beq.n	80072b2 <HAL_RCC_OscConfig+0x416>
 80072d0:	e054      	b.n	800737c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80072d2:	4b10      	ldr	r3, [pc, #64]	; (8007314 <HAL_RCC_OscConfig+0x478>)
 80072d4:	2200      	movs	r2, #0
 80072d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80072d8:	f7fb fede 	bl	8003098 <HAL_GetTick>
 80072dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80072de:	e008      	b.n	80072f2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80072e0:	f7fb feda 	bl	8003098 <HAL_GetTick>
 80072e4:	4602      	mov	r2, r0
 80072e6:	693b      	ldr	r3, [r7, #16]
 80072e8:	1ad3      	subs	r3, r2, r3
 80072ea:	2b02      	cmp	r3, #2
 80072ec:	d901      	bls.n	80072f2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80072ee:	2303      	movs	r3, #3
 80072f0:	e045      	b.n	800737e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80072f2:	4b06      	ldr	r3, [pc, #24]	; (800730c <HAL_RCC_OscConfig+0x470>)
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d1f0      	bne.n	80072e0 <HAL_RCC_OscConfig+0x444>
 80072fe:	e03d      	b.n	800737c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	699b      	ldr	r3, [r3, #24]
 8007304:	2b01      	cmp	r3, #1
 8007306:	d107      	bne.n	8007318 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007308:	2301      	movs	r3, #1
 800730a:	e038      	b.n	800737e <HAL_RCC_OscConfig+0x4e2>
 800730c:	40023800 	.word	0x40023800
 8007310:	40007000 	.word	0x40007000
 8007314:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007318:	4b1b      	ldr	r3, [pc, #108]	; (8007388 <HAL_RCC_OscConfig+0x4ec>)
 800731a:	685b      	ldr	r3, [r3, #4]
 800731c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	699b      	ldr	r3, [r3, #24]
 8007322:	2b01      	cmp	r3, #1
 8007324:	d028      	beq.n	8007378 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007330:	429a      	cmp	r2, r3
 8007332:	d121      	bne.n	8007378 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800733e:	429a      	cmp	r2, r3
 8007340:	d11a      	bne.n	8007378 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007342:	68fa      	ldr	r2, [r7, #12]
 8007344:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007348:	4013      	ands	r3, r2
 800734a:	687a      	ldr	r2, [r7, #4]
 800734c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800734e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007350:	4293      	cmp	r3, r2
 8007352:	d111      	bne.n	8007378 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800735e:	085b      	lsrs	r3, r3, #1
 8007360:	3b01      	subs	r3, #1
 8007362:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007364:	429a      	cmp	r2, r3
 8007366:	d107      	bne.n	8007378 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007372:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007374:	429a      	cmp	r2, r3
 8007376:	d001      	beq.n	800737c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007378:	2301      	movs	r3, #1
 800737a:	e000      	b.n	800737e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800737c:	2300      	movs	r3, #0
}
 800737e:	4618      	mov	r0, r3
 8007380:	3718      	adds	r7, #24
 8007382:	46bd      	mov	sp, r7
 8007384:	bd80      	pop	{r7, pc}
 8007386:	bf00      	nop
 8007388:	40023800 	.word	0x40023800

0800738c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b084      	sub	sp, #16
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
 8007394:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d101      	bne.n	80073a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800739c:	2301      	movs	r3, #1
 800739e:	e0cc      	b.n	800753a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80073a0:	4b68      	ldr	r3, [pc, #416]	; (8007544 <HAL_RCC_ClockConfig+0x1b8>)
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f003 0307 	and.w	r3, r3, #7
 80073a8:	683a      	ldr	r2, [r7, #0]
 80073aa:	429a      	cmp	r2, r3
 80073ac:	d90c      	bls.n	80073c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80073ae:	4b65      	ldr	r3, [pc, #404]	; (8007544 <HAL_RCC_ClockConfig+0x1b8>)
 80073b0:	683a      	ldr	r2, [r7, #0]
 80073b2:	b2d2      	uxtb	r2, r2
 80073b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80073b6:	4b63      	ldr	r3, [pc, #396]	; (8007544 <HAL_RCC_ClockConfig+0x1b8>)
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f003 0307 	and.w	r3, r3, #7
 80073be:	683a      	ldr	r2, [r7, #0]
 80073c0:	429a      	cmp	r2, r3
 80073c2:	d001      	beq.n	80073c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80073c4:	2301      	movs	r3, #1
 80073c6:	e0b8      	b.n	800753a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f003 0302 	and.w	r3, r3, #2
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d020      	beq.n	8007416 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f003 0304 	and.w	r3, r3, #4
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d005      	beq.n	80073ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80073e0:	4b59      	ldr	r3, [pc, #356]	; (8007548 <HAL_RCC_ClockConfig+0x1bc>)
 80073e2:	689b      	ldr	r3, [r3, #8]
 80073e4:	4a58      	ldr	r2, [pc, #352]	; (8007548 <HAL_RCC_ClockConfig+0x1bc>)
 80073e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80073ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f003 0308 	and.w	r3, r3, #8
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d005      	beq.n	8007404 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80073f8:	4b53      	ldr	r3, [pc, #332]	; (8007548 <HAL_RCC_ClockConfig+0x1bc>)
 80073fa:	689b      	ldr	r3, [r3, #8]
 80073fc:	4a52      	ldr	r2, [pc, #328]	; (8007548 <HAL_RCC_ClockConfig+0x1bc>)
 80073fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007402:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007404:	4b50      	ldr	r3, [pc, #320]	; (8007548 <HAL_RCC_ClockConfig+0x1bc>)
 8007406:	689b      	ldr	r3, [r3, #8]
 8007408:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	689b      	ldr	r3, [r3, #8]
 8007410:	494d      	ldr	r1, [pc, #308]	; (8007548 <HAL_RCC_ClockConfig+0x1bc>)
 8007412:	4313      	orrs	r3, r2
 8007414:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f003 0301 	and.w	r3, r3, #1
 800741e:	2b00      	cmp	r3, #0
 8007420:	d044      	beq.n	80074ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	685b      	ldr	r3, [r3, #4]
 8007426:	2b01      	cmp	r3, #1
 8007428:	d107      	bne.n	800743a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800742a:	4b47      	ldr	r3, [pc, #284]	; (8007548 <HAL_RCC_ClockConfig+0x1bc>)
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007432:	2b00      	cmp	r3, #0
 8007434:	d119      	bne.n	800746a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007436:	2301      	movs	r3, #1
 8007438:	e07f      	b.n	800753a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	685b      	ldr	r3, [r3, #4]
 800743e:	2b02      	cmp	r3, #2
 8007440:	d003      	beq.n	800744a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007446:	2b03      	cmp	r3, #3
 8007448:	d107      	bne.n	800745a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800744a:	4b3f      	ldr	r3, [pc, #252]	; (8007548 <HAL_RCC_ClockConfig+0x1bc>)
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007452:	2b00      	cmp	r3, #0
 8007454:	d109      	bne.n	800746a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007456:	2301      	movs	r3, #1
 8007458:	e06f      	b.n	800753a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800745a:	4b3b      	ldr	r3, [pc, #236]	; (8007548 <HAL_RCC_ClockConfig+0x1bc>)
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f003 0302 	and.w	r3, r3, #2
 8007462:	2b00      	cmp	r3, #0
 8007464:	d101      	bne.n	800746a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007466:	2301      	movs	r3, #1
 8007468:	e067      	b.n	800753a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800746a:	4b37      	ldr	r3, [pc, #220]	; (8007548 <HAL_RCC_ClockConfig+0x1bc>)
 800746c:	689b      	ldr	r3, [r3, #8]
 800746e:	f023 0203 	bic.w	r2, r3, #3
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	685b      	ldr	r3, [r3, #4]
 8007476:	4934      	ldr	r1, [pc, #208]	; (8007548 <HAL_RCC_ClockConfig+0x1bc>)
 8007478:	4313      	orrs	r3, r2
 800747a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800747c:	f7fb fe0c 	bl	8003098 <HAL_GetTick>
 8007480:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007482:	e00a      	b.n	800749a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007484:	f7fb fe08 	bl	8003098 <HAL_GetTick>
 8007488:	4602      	mov	r2, r0
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	1ad3      	subs	r3, r2, r3
 800748e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007492:	4293      	cmp	r3, r2
 8007494:	d901      	bls.n	800749a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007496:	2303      	movs	r3, #3
 8007498:	e04f      	b.n	800753a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800749a:	4b2b      	ldr	r3, [pc, #172]	; (8007548 <HAL_RCC_ClockConfig+0x1bc>)
 800749c:	689b      	ldr	r3, [r3, #8]
 800749e:	f003 020c 	and.w	r2, r3, #12
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	685b      	ldr	r3, [r3, #4]
 80074a6:	009b      	lsls	r3, r3, #2
 80074a8:	429a      	cmp	r2, r3
 80074aa:	d1eb      	bne.n	8007484 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80074ac:	4b25      	ldr	r3, [pc, #148]	; (8007544 <HAL_RCC_ClockConfig+0x1b8>)
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f003 0307 	and.w	r3, r3, #7
 80074b4:	683a      	ldr	r2, [r7, #0]
 80074b6:	429a      	cmp	r2, r3
 80074b8:	d20c      	bcs.n	80074d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80074ba:	4b22      	ldr	r3, [pc, #136]	; (8007544 <HAL_RCC_ClockConfig+0x1b8>)
 80074bc:	683a      	ldr	r2, [r7, #0]
 80074be:	b2d2      	uxtb	r2, r2
 80074c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80074c2:	4b20      	ldr	r3, [pc, #128]	; (8007544 <HAL_RCC_ClockConfig+0x1b8>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f003 0307 	and.w	r3, r3, #7
 80074ca:	683a      	ldr	r2, [r7, #0]
 80074cc:	429a      	cmp	r2, r3
 80074ce:	d001      	beq.n	80074d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80074d0:	2301      	movs	r3, #1
 80074d2:	e032      	b.n	800753a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f003 0304 	and.w	r3, r3, #4
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d008      	beq.n	80074f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80074e0:	4b19      	ldr	r3, [pc, #100]	; (8007548 <HAL_RCC_ClockConfig+0x1bc>)
 80074e2:	689b      	ldr	r3, [r3, #8]
 80074e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	68db      	ldr	r3, [r3, #12]
 80074ec:	4916      	ldr	r1, [pc, #88]	; (8007548 <HAL_RCC_ClockConfig+0x1bc>)
 80074ee:	4313      	orrs	r3, r2
 80074f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f003 0308 	and.w	r3, r3, #8
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d009      	beq.n	8007512 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80074fe:	4b12      	ldr	r3, [pc, #72]	; (8007548 <HAL_RCC_ClockConfig+0x1bc>)
 8007500:	689b      	ldr	r3, [r3, #8]
 8007502:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	691b      	ldr	r3, [r3, #16]
 800750a:	00db      	lsls	r3, r3, #3
 800750c:	490e      	ldr	r1, [pc, #56]	; (8007548 <HAL_RCC_ClockConfig+0x1bc>)
 800750e:	4313      	orrs	r3, r2
 8007510:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007512:	f000 f821 	bl	8007558 <HAL_RCC_GetSysClockFreq>
 8007516:	4602      	mov	r2, r0
 8007518:	4b0b      	ldr	r3, [pc, #44]	; (8007548 <HAL_RCC_ClockConfig+0x1bc>)
 800751a:	689b      	ldr	r3, [r3, #8]
 800751c:	091b      	lsrs	r3, r3, #4
 800751e:	f003 030f 	and.w	r3, r3, #15
 8007522:	490a      	ldr	r1, [pc, #40]	; (800754c <HAL_RCC_ClockConfig+0x1c0>)
 8007524:	5ccb      	ldrb	r3, [r1, r3]
 8007526:	fa22 f303 	lsr.w	r3, r2, r3
 800752a:	4a09      	ldr	r2, [pc, #36]	; (8007550 <HAL_RCC_ClockConfig+0x1c4>)
 800752c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800752e:	4b09      	ldr	r3, [pc, #36]	; (8007554 <HAL_RCC_ClockConfig+0x1c8>)
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	4618      	mov	r0, r3
 8007534:	f7fb fd6c 	bl	8003010 <HAL_InitTick>

  return HAL_OK;
 8007538:	2300      	movs	r3, #0
}
 800753a:	4618      	mov	r0, r3
 800753c:	3710      	adds	r7, #16
 800753e:	46bd      	mov	sp, r7
 8007540:	bd80      	pop	{r7, pc}
 8007542:	bf00      	nop
 8007544:	40023c00 	.word	0x40023c00
 8007548:	40023800 	.word	0x40023800
 800754c:	0800e98c 	.word	0x0800e98c
 8007550:	20000044 	.word	0x20000044
 8007554:	20000048 	.word	0x20000048

08007558 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007558:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800755c:	b090      	sub	sp, #64	; 0x40
 800755e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007560:	2300      	movs	r3, #0
 8007562:	637b      	str	r3, [r7, #52]	; 0x34
 8007564:	2300      	movs	r3, #0
 8007566:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007568:	2300      	movs	r3, #0
 800756a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800756c:	2300      	movs	r3, #0
 800756e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007570:	4b59      	ldr	r3, [pc, #356]	; (80076d8 <HAL_RCC_GetSysClockFreq+0x180>)
 8007572:	689b      	ldr	r3, [r3, #8]
 8007574:	f003 030c 	and.w	r3, r3, #12
 8007578:	2b08      	cmp	r3, #8
 800757a:	d00d      	beq.n	8007598 <HAL_RCC_GetSysClockFreq+0x40>
 800757c:	2b08      	cmp	r3, #8
 800757e:	f200 80a1 	bhi.w	80076c4 <HAL_RCC_GetSysClockFreq+0x16c>
 8007582:	2b00      	cmp	r3, #0
 8007584:	d002      	beq.n	800758c <HAL_RCC_GetSysClockFreq+0x34>
 8007586:	2b04      	cmp	r3, #4
 8007588:	d003      	beq.n	8007592 <HAL_RCC_GetSysClockFreq+0x3a>
 800758a:	e09b      	b.n	80076c4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800758c:	4b53      	ldr	r3, [pc, #332]	; (80076dc <HAL_RCC_GetSysClockFreq+0x184>)
 800758e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8007590:	e09b      	b.n	80076ca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007592:	4b53      	ldr	r3, [pc, #332]	; (80076e0 <HAL_RCC_GetSysClockFreq+0x188>)
 8007594:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007596:	e098      	b.n	80076ca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007598:	4b4f      	ldr	r3, [pc, #316]	; (80076d8 <HAL_RCC_GetSysClockFreq+0x180>)
 800759a:	685b      	ldr	r3, [r3, #4]
 800759c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80075a0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80075a2:	4b4d      	ldr	r3, [pc, #308]	; (80076d8 <HAL_RCC_GetSysClockFreq+0x180>)
 80075a4:	685b      	ldr	r3, [r3, #4]
 80075a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d028      	beq.n	8007600 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80075ae:	4b4a      	ldr	r3, [pc, #296]	; (80076d8 <HAL_RCC_GetSysClockFreq+0x180>)
 80075b0:	685b      	ldr	r3, [r3, #4]
 80075b2:	099b      	lsrs	r3, r3, #6
 80075b4:	2200      	movs	r2, #0
 80075b6:	623b      	str	r3, [r7, #32]
 80075b8:	627a      	str	r2, [r7, #36]	; 0x24
 80075ba:	6a3b      	ldr	r3, [r7, #32]
 80075bc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80075c0:	2100      	movs	r1, #0
 80075c2:	4b47      	ldr	r3, [pc, #284]	; (80076e0 <HAL_RCC_GetSysClockFreq+0x188>)
 80075c4:	fb03 f201 	mul.w	r2, r3, r1
 80075c8:	2300      	movs	r3, #0
 80075ca:	fb00 f303 	mul.w	r3, r0, r3
 80075ce:	4413      	add	r3, r2
 80075d0:	4a43      	ldr	r2, [pc, #268]	; (80076e0 <HAL_RCC_GetSysClockFreq+0x188>)
 80075d2:	fba0 1202 	umull	r1, r2, r0, r2
 80075d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80075d8:	460a      	mov	r2, r1
 80075da:	62ba      	str	r2, [r7, #40]	; 0x28
 80075dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80075de:	4413      	add	r3, r2
 80075e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80075e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075e4:	2200      	movs	r2, #0
 80075e6:	61bb      	str	r3, [r7, #24]
 80075e8:	61fa      	str	r2, [r7, #28]
 80075ea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80075ee:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80075f2:	f7f8 fe45 	bl	8000280 <__aeabi_uldivmod>
 80075f6:	4602      	mov	r2, r0
 80075f8:	460b      	mov	r3, r1
 80075fa:	4613      	mov	r3, r2
 80075fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80075fe:	e053      	b.n	80076a8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007600:	4b35      	ldr	r3, [pc, #212]	; (80076d8 <HAL_RCC_GetSysClockFreq+0x180>)
 8007602:	685b      	ldr	r3, [r3, #4]
 8007604:	099b      	lsrs	r3, r3, #6
 8007606:	2200      	movs	r2, #0
 8007608:	613b      	str	r3, [r7, #16]
 800760a:	617a      	str	r2, [r7, #20]
 800760c:	693b      	ldr	r3, [r7, #16]
 800760e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8007612:	f04f 0b00 	mov.w	fp, #0
 8007616:	4652      	mov	r2, sl
 8007618:	465b      	mov	r3, fp
 800761a:	f04f 0000 	mov.w	r0, #0
 800761e:	f04f 0100 	mov.w	r1, #0
 8007622:	0159      	lsls	r1, r3, #5
 8007624:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007628:	0150      	lsls	r0, r2, #5
 800762a:	4602      	mov	r2, r0
 800762c:	460b      	mov	r3, r1
 800762e:	ebb2 080a 	subs.w	r8, r2, sl
 8007632:	eb63 090b 	sbc.w	r9, r3, fp
 8007636:	f04f 0200 	mov.w	r2, #0
 800763a:	f04f 0300 	mov.w	r3, #0
 800763e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8007642:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8007646:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800764a:	ebb2 0408 	subs.w	r4, r2, r8
 800764e:	eb63 0509 	sbc.w	r5, r3, r9
 8007652:	f04f 0200 	mov.w	r2, #0
 8007656:	f04f 0300 	mov.w	r3, #0
 800765a:	00eb      	lsls	r3, r5, #3
 800765c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007660:	00e2      	lsls	r2, r4, #3
 8007662:	4614      	mov	r4, r2
 8007664:	461d      	mov	r5, r3
 8007666:	eb14 030a 	adds.w	r3, r4, sl
 800766a:	603b      	str	r3, [r7, #0]
 800766c:	eb45 030b 	adc.w	r3, r5, fp
 8007670:	607b      	str	r3, [r7, #4]
 8007672:	f04f 0200 	mov.w	r2, #0
 8007676:	f04f 0300 	mov.w	r3, #0
 800767a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800767e:	4629      	mov	r1, r5
 8007680:	028b      	lsls	r3, r1, #10
 8007682:	4621      	mov	r1, r4
 8007684:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007688:	4621      	mov	r1, r4
 800768a:	028a      	lsls	r2, r1, #10
 800768c:	4610      	mov	r0, r2
 800768e:	4619      	mov	r1, r3
 8007690:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007692:	2200      	movs	r2, #0
 8007694:	60bb      	str	r3, [r7, #8]
 8007696:	60fa      	str	r2, [r7, #12]
 8007698:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800769c:	f7f8 fdf0 	bl	8000280 <__aeabi_uldivmod>
 80076a0:	4602      	mov	r2, r0
 80076a2:	460b      	mov	r3, r1
 80076a4:	4613      	mov	r3, r2
 80076a6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80076a8:	4b0b      	ldr	r3, [pc, #44]	; (80076d8 <HAL_RCC_GetSysClockFreq+0x180>)
 80076aa:	685b      	ldr	r3, [r3, #4]
 80076ac:	0c1b      	lsrs	r3, r3, #16
 80076ae:	f003 0303 	and.w	r3, r3, #3
 80076b2:	3301      	adds	r3, #1
 80076b4:	005b      	lsls	r3, r3, #1
 80076b6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80076b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80076ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80076c0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80076c2:	e002      	b.n	80076ca <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80076c4:	4b05      	ldr	r3, [pc, #20]	; (80076dc <HAL_RCC_GetSysClockFreq+0x184>)
 80076c6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80076c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80076ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80076cc:	4618      	mov	r0, r3
 80076ce:	3740      	adds	r7, #64	; 0x40
 80076d0:	46bd      	mov	sp, r7
 80076d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80076d6:	bf00      	nop
 80076d8:	40023800 	.word	0x40023800
 80076dc:	00f42400 	.word	0x00f42400
 80076e0:	017d7840 	.word	0x017d7840

080076e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80076e4:	b480      	push	{r7}
 80076e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80076e8:	4b03      	ldr	r3, [pc, #12]	; (80076f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80076ea:	681b      	ldr	r3, [r3, #0]
}
 80076ec:	4618      	mov	r0, r3
 80076ee:	46bd      	mov	sp, r7
 80076f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f4:	4770      	bx	lr
 80076f6:	bf00      	nop
 80076f8:	20000044 	.word	0x20000044

080076fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007700:	f7ff fff0 	bl	80076e4 <HAL_RCC_GetHCLKFreq>
 8007704:	4602      	mov	r2, r0
 8007706:	4b05      	ldr	r3, [pc, #20]	; (800771c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007708:	689b      	ldr	r3, [r3, #8]
 800770a:	0a9b      	lsrs	r3, r3, #10
 800770c:	f003 0307 	and.w	r3, r3, #7
 8007710:	4903      	ldr	r1, [pc, #12]	; (8007720 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007712:	5ccb      	ldrb	r3, [r1, r3]
 8007714:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007718:	4618      	mov	r0, r3
 800771a:	bd80      	pop	{r7, pc}
 800771c:	40023800 	.word	0x40023800
 8007720:	0800e99c 	.word	0x0800e99c

08007724 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b082      	sub	sp, #8
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d101      	bne.n	8007736 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007732:	2301      	movs	r3, #1
 8007734:	e07b      	b.n	800782e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800773a:	2b00      	cmp	r3, #0
 800773c:	d108      	bne.n	8007750 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	685b      	ldr	r3, [r3, #4]
 8007742:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007746:	d009      	beq.n	800775c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2200      	movs	r2, #0
 800774c:	61da      	str	r2, [r3, #28]
 800774e:	e005      	b.n	800775c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2200      	movs	r2, #0
 8007754:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2200      	movs	r2, #0
 800775a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2200      	movs	r2, #0
 8007760:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007768:	b2db      	uxtb	r3, r3
 800776a:	2b00      	cmp	r3, #0
 800776c:	d106      	bne.n	800777c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2200      	movs	r2, #0
 8007772:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	f7fb f922 	bl	80029c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2202      	movs	r2, #2
 8007780:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	681a      	ldr	r2, [r3, #0]
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007792:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	685b      	ldr	r3, [r3, #4]
 8007798:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	689b      	ldr	r3, [r3, #8]
 80077a0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80077a4:	431a      	orrs	r2, r3
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	68db      	ldr	r3, [r3, #12]
 80077aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80077ae:	431a      	orrs	r2, r3
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	691b      	ldr	r3, [r3, #16]
 80077b4:	f003 0302 	and.w	r3, r3, #2
 80077b8:	431a      	orrs	r2, r3
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	695b      	ldr	r3, [r3, #20]
 80077be:	f003 0301 	and.w	r3, r3, #1
 80077c2:	431a      	orrs	r2, r3
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	699b      	ldr	r3, [r3, #24]
 80077c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80077cc:	431a      	orrs	r2, r3
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	69db      	ldr	r3, [r3, #28]
 80077d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80077d6:	431a      	orrs	r2, r3
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	6a1b      	ldr	r3, [r3, #32]
 80077dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077e0:	ea42 0103 	orr.w	r1, r2, r3
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077e8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	430a      	orrs	r2, r1
 80077f2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	699b      	ldr	r3, [r3, #24]
 80077f8:	0c1b      	lsrs	r3, r3, #16
 80077fa:	f003 0104 	and.w	r1, r3, #4
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007802:	f003 0210 	and.w	r2, r3, #16
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	430a      	orrs	r2, r1
 800780c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	69da      	ldr	r2, [r3, #28]
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800781c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2200      	movs	r2, #0
 8007822:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2201      	movs	r2, #1
 8007828:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800782c:	2300      	movs	r3, #0
}
 800782e:	4618      	mov	r0, r3
 8007830:	3708      	adds	r7, #8
 8007832:	46bd      	mov	sp, r7
 8007834:	bd80      	pop	{r7, pc}

08007836 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007836:	b580      	push	{r7, lr}
 8007838:	b088      	sub	sp, #32
 800783a:	af00      	add	r7, sp, #0
 800783c:	60f8      	str	r0, [r7, #12]
 800783e:	60b9      	str	r1, [r7, #8]
 8007840:	603b      	str	r3, [r7, #0]
 8007842:	4613      	mov	r3, r2
 8007844:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007846:	2300      	movs	r3, #0
 8007848:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007850:	2b01      	cmp	r3, #1
 8007852:	d101      	bne.n	8007858 <HAL_SPI_Transmit+0x22>
 8007854:	2302      	movs	r3, #2
 8007856:	e126      	b.n	8007aa6 <HAL_SPI_Transmit+0x270>
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	2201      	movs	r2, #1
 800785c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007860:	f7fb fc1a 	bl	8003098 <HAL_GetTick>
 8007864:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007866:	88fb      	ldrh	r3, [r7, #6]
 8007868:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007870:	b2db      	uxtb	r3, r3
 8007872:	2b01      	cmp	r3, #1
 8007874:	d002      	beq.n	800787c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007876:	2302      	movs	r3, #2
 8007878:	77fb      	strb	r3, [r7, #31]
    goto error;
 800787a:	e10b      	b.n	8007a94 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800787c:	68bb      	ldr	r3, [r7, #8]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d002      	beq.n	8007888 <HAL_SPI_Transmit+0x52>
 8007882:	88fb      	ldrh	r3, [r7, #6]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d102      	bne.n	800788e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007888:	2301      	movs	r3, #1
 800788a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800788c:	e102      	b.n	8007a94 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	2203      	movs	r2, #3
 8007892:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	2200      	movs	r2, #0
 800789a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	68ba      	ldr	r2, [r7, #8]
 80078a0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	88fa      	ldrh	r2, [r7, #6]
 80078a6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	88fa      	ldrh	r2, [r7, #6]
 80078ac:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	2200      	movs	r2, #0
 80078b2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	2200      	movs	r2, #0
 80078b8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	2200      	movs	r2, #0
 80078be:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	2200      	movs	r2, #0
 80078c4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	2200      	movs	r2, #0
 80078ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	689b      	ldr	r3, [r3, #8]
 80078d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80078d4:	d10f      	bne.n	80078f6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	681a      	ldr	r2, [r3, #0]
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80078e4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	681a      	ldr	r2, [r3, #0]
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80078f4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007900:	2b40      	cmp	r3, #64	; 0x40
 8007902:	d007      	beq.n	8007914 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	681a      	ldr	r2, [r3, #0]
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007912:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	68db      	ldr	r3, [r3, #12]
 8007918:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800791c:	d14b      	bne.n	80079b6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	685b      	ldr	r3, [r3, #4]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d002      	beq.n	800792c <HAL_SPI_Transmit+0xf6>
 8007926:	8afb      	ldrh	r3, [r7, #22]
 8007928:	2b01      	cmp	r3, #1
 800792a:	d13e      	bne.n	80079aa <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007930:	881a      	ldrh	r2, [r3, #0]
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800793c:	1c9a      	adds	r2, r3, #2
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007946:	b29b      	uxth	r3, r3
 8007948:	3b01      	subs	r3, #1
 800794a:	b29a      	uxth	r2, r3
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007950:	e02b      	b.n	80079aa <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	689b      	ldr	r3, [r3, #8]
 8007958:	f003 0302 	and.w	r3, r3, #2
 800795c:	2b02      	cmp	r3, #2
 800795e:	d112      	bne.n	8007986 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007964:	881a      	ldrh	r2, [r3, #0]
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007970:	1c9a      	adds	r2, r3, #2
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800797a:	b29b      	uxth	r3, r3
 800797c:	3b01      	subs	r3, #1
 800797e:	b29a      	uxth	r2, r3
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	86da      	strh	r2, [r3, #54]	; 0x36
 8007984:	e011      	b.n	80079aa <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007986:	f7fb fb87 	bl	8003098 <HAL_GetTick>
 800798a:	4602      	mov	r2, r0
 800798c:	69bb      	ldr	r3, [r7, #24]
 800798e:	1ad3      	subs	r3, r2, r3
 8007990:	683a      	ldr	r2, [r7, #0]
 8007992:	429a      	cmp	r2, r3
 8007994:	d803      	bhi.n	800799e <HAL_SPI_Transmit+0x168>
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	f1b3 3fff 	cmp.w	r3, #4294967295
 800799c:	d102      	bne.n	80079a4 <HAL_SPI_Transmit+0x16e>
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d102      	bne.n	80079aa <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80079a4:	2303      	movs	r3, #3
 80079a6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80079a8:	e074      	b.n	8007a94 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80079ae:	b29b      	uxth	r3, r3
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d1ce      	bne.n	8007952 <HAL_SPI_Transmit+0x11c>
 80079b4:	e04c      	b.n	8007a50 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	685b      	ldr	r3, [r3, #4]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d002      	beq.n	80079c4 <HAL_SPI_Transmit+0x18e>
 80079be:	8afb      	ldrh	r3, [r7, #22]
 80079c0:	2b01      	cmp	r3, #1
 80079c2:	d140      	bne.n	8007a46 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	330c      	adds	r3, #12
 80079ce:	7812      	ldrb	r2, [r2, #0]
 80079d0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079d6:	1c5a      	adds	r2, r3, #1
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80079e0:	b29b      	uxth	r3, r3
 80079e2:	3b01      	subs	r3, #1
 80079e4:	b29a      	uxth	r2, r3
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80079ea:	e02c      	b.n	8007a46 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	689b      	ldr	r3, [r3, #8]
 80079f2:	f003 0302 	and.w	r3, r3, #2
 80079f6:	2b02      	cmp	r3, #2
 80079f8:	d113      	bne.n	8007a22 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	330c      	adds	r3, #12
 8007a04:	7812      	ldrb	r2, [r2, #0]
 8007a06:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a0c:	1c5a      	adds	r2, r3, #1
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a16:	b29b      	uxth	r3, r3
 8007a18:	3b01      	subs	r3, #1
 8007a1a:	b29a      	uxth	r2, r3
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	86da      	strh	r2, [r3, #54]	; 0x36
 8007a20:	e011      	b.n	8007a46 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007a22:	f7fb fb39 	bl	8003098 <HAL_GetTick>
 8007a26:	4602      	mov	r2, r0
 8007a28:	69bb      	ldr	r3, [r7, #24]
 8007a2a:	1ad3      	subs	r3, r2, r3
 8007a2c:	683a      	ldr	r2, [r7, #0]
 8007a2e:	429a      	cmp	r2, r3
 8007a30:	d803      	bhi.n	8007a3a <HAL_SPI_Transmit+0x204>
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a38:	d102      	bne.n	8007a40 <HAL_SPI_Transmit+0x20a>
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d102      	bne.n	8007a46 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8007a40:	2303      	movs	r3, #3
 8007a42:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007a44:	e026      	b.n	8007a94 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a4a:	b29b      	uxth	r3, r3
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d1cd      	bne.n	80079ec <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007a50:	69ba      	ldr	r2, [r7, #24]
 8007a52:	6839      	ldr	r1, [r7, #0]
 8007a54:	68f8      	ldr	r0, [r7, #12]
 8007a56:	f000 fbcb 	bl	80081f0 <SPI_EndRxTxTransaction>
 8007a5a:	4603      	mov	r3, r0
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d002      	beq.n	8007a66 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	2220      	movs	r2, #32
 8007a64:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	689b      	ldr	r3, [r3, #8]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d10a      	bne.n	8007a84 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007a6e:	2300      	movs	r3, #0
 8007a70:	613b      	str	r3, [r7, #16]
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	68db      	ldr	r3, [r3, #12]
 8007a78:	613b      	str	r3, [r7, #16]
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	689b      	ldr	r3, [r3, #8]
 8007a80:	613b      	str	r3, [r7, #16]
 8007a82:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d002      	beq.n	8007a92 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8007a8c:	2301      	movs	r3, #1
 8007a8e:	77fb      	strb	r3, [r7, #31]
 8007a90:	e000      	b.n	8007a94 <HAL_SPI_Transmit+0x25e>
  }

error:
 8007a92:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	2201      	movs	r2, #1
 8007a98:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007aa4:	7ffb      	ldrb	r3, [r7, #31]
}
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	3720      	adds	r7, #32
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	bd80      	pop	{r7, pc}

08007aae <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007aae:	b580      	push	{r7, lr}
 8007ab0:	b088      	sub	sp, #32
 8007ab2:	af02      	add	r7, sp, #8
 8007ab4:	60f8      	str	r0, [r7, #12]
 8007ab6:	60b9      	str	r1, [r7, #8]
 8007ab8:	603b      	str	r3, [r7, #0]
 8007aba:	4613      	mov	r3, r2
 8007abc:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007abe:	2300      	movs	r3, #0
 8007ac0:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	685b      	ldr	r3, [r3, #4]
 8007ac6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007aca:	d112      	bne.n	8007af2 <HAL_SPI_Receive+0x44>
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	689b      	ldr	r3, [r3, #8]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d10e      	bne.n	8007af2 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	2204      	movs	r2, #4
 8007ad8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007adc:	88fa      	ldrh	r2, [r7, #6]
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	9300      	str	r3, [sp, #0]
 8007ae2:	4613      	mov	r3, r2
 8007ae4:	68ba      	ldr	r2, [r7, #8]
 8007ae6:	68b9      	ldr	r1, [r7, #8]
 8007ae8:	68f8      	ldr	r0, [r7, #12]
 8007aea:	f000 f8f1 	bl	8007cd0 <HAL_SPI_TransmitReceive>
 8007aee:	4603      	mov	r3, r0
 8007af0:	e0ea      	b.n	8007cc8 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007af8:	2b01      	cmp	r3, #1
 8007afa:	d101      	bne.n	8007b00 <HAL_SPI_Receive+0x52>
 8007afc:	2302      	movs	r3, #2
 8007afe:	e0e3      	b.n	8007cc8 <HAL_SPI_Receive+0x21a>
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	2201      	movs	r2, #1
 8007b04:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007b08:	f7fb fac6 	bl	8003098 <HAL_GetTick>
 8007b0c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007b14:	b2db      	uxtb	r3, r3
 8007b16:	2b01      	cmp	r3, #1
 8007b18:	d002      	beq.n	8007b20 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8007b1a:	2302      	movs	r3, #2
 8007b1c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007b1e:	e0ca      	b.n	8007cb6 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8007b20:	68bb      	ldr	r3, [r7, #8]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d002      	beq.n	8007b2c <HAL_SPI_Receive+0x7e>
 8007b26:	88fb      	ldrh	r3, [r7, #6]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d102      	bne.n	8007b32 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8007b2c:	2301      	movs	r3, #1
 8007b2e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007b30:	e0c1      	b.n	8007cb6 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	2204      	movs	r2, #4
 8007b36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	68ba      	ldr	r2, [r7, #8]
 8007b44:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	88fa      	ldrh	r2, [r7, #6]
 8007b4a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	88fa      	ldrh	r2, [r7, #6]
 8007b50:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	2200      	movs	r2, #0
 8007b56:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	2200      	movs	r2, #0
 8007b62:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	2200      	movs	r2, #0
 8007b68:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	689b      	ldr	r3, [r3, #8]
 8007b74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b78:	d10f      	bne.n	8007b9a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	681a      	ldr	r2, [r3, #0]
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b88:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	681a      	ldr	r2, [r3, #0]
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007b98:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ba4:	2b40      	cmp	r3, #64	; 0x40
 8007ba6:	d007      	beq.n	8007bb8 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	681a      	ldr	r2, [r3, #0]
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007bb6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	68db      	ldr	r3, [r3, #12]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d162      	bne.n	8007c86 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007bc0:	e02e      	b.n	8007c20 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	689b      	ldr	r3, [r3, #8]
 8007bc8:	f003 0301 	and.w	r3, r3, #1
 8007bcc:	2b01      	cmp	r3, #1
 8007bce:	d115      	bne.n	8007bfc <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	f103 020c 	add.w	r2, r3, #12
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bdc:	7812      	ldrb	r2, [r2, #0]
 8007bde:	b2d2      	uxtb	r2, r2
 8007be0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007be6:	1c5a      	adds	r2, r3, #1
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007bf0:	b29b      	uxth	r3, r3
 8007bf2:	3b01      	subs	r3, #1
 8007bf4:	b29a      	uxth	r2, r3
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007bfa:	e011      	b.n	8007c20 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007bfc:	f7fb fa4c 	bl	8003098 <HAL_GetTick>
 8007c00:	4602      	mov	r2, r0
 8007c02:	693b      	ldr	r3, [r7, #16]
 8007c04:	1ad3      	subs	r3, r2, r3
 8007c06:	683a      	ldr	r2, [r7, #0]
 8007c08:	429a      	cmp	r2, r3
 8007c0a:	d803      	bhi.n	8007c14 <HAL_SPI_Receive+0x166>
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c12:	d102      	bne.n	8007c1a <HAL_SPI_Receive+0x16c>
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d102      	bne.n	8007c20 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8007c1a:	2303      	movs	r3, #3
 8007c1c:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007c1e:	e04a      	b.n	8007cb6 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c24:	b29b      	uxth	r3, r3
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d1cb      	bne.n	8007bc2 <HAL_SPI_Receive+0x114>
 8007c2a:	e031      	b.n	8007c90 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	689b      	ldr	r3, [r3, #8]
 8007c32:	f003 0301 	and.w	r3, r3, #1
 8007c36:	2b01      	cmp	r3, #1
 8007c38:	d113      	bne.n	8007c62 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	68da      	ldr	r2, [r3, #12]
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c44:	b292      	uxth	r2, r2
 8007c46:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c4c:	1c9a      	adds	r2, r3, #2
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c56:	b29b      	uxth	r3, r3
 8007c58:	3b01      	subs	r3, #1
 8007c5a:	b29a      	uxth	r2, r3
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007c60:	e011      	b.n	8007c86 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007c62:	f7fb fa19 	bl	8003098 <HAL_GetTick>
 8007c66:	4602      	mov	r2, r0
 8007c68:	693b      	ldr	r3, [r7, #16]
 8007c6a:	1ad3      	subs	r3, r2, r3
 8007c6c:	683a      	ldr	r2, [r7, #0]
 8007c6e:	429a      	cmp	r2, r3
 8007c70:	d803      	bhi.n	8007c7a <HAL_SPI_Receive+0x1cc>
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c78:	d102      	bne.n	8007c80 <HAL_SPI_Receive+0x1d2>
 8007c7a:	683b      	ldr	r3, [r7, #0]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d102      	bne.n	8007c86 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8007c80:	2303      	movs	r3, #3
 8007c82:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007c84:	e017      	b.n	8007cb6 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c8a:	b29b      	uxth	r3, r3
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d1cd      	bne.n	8007c2c <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007c90:	693a      	ldr	r2, [r7, #16]
 8007c92:	6839      	ldr	r1, [r7, #0]
 8007c94:	68f8      	ldr	r0, [r7, #12]
 8007c96:	f000 fa45 	bl	8008124 <SPI_EndRxTransaction>
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d002      	beq.n	8007ca6 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	2220      	movs	r2, #32
 8007ca4:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d002      	beq.n	8007cb4 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8007cae:	2301      	movs	r3, #1
 8007cb0:	75fb      	strb	r3, [r7, #23]
 8007cb2:	e000      	b.n	8007cb6 <HAL_SPI_Receive+0x208>
  }

error :
 8007cb4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	2201      	movs	r2, #1
 8007cba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007cc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cc8:	4618      	mov	r0, r3
 8007cca:	3718      	adds	r7, #24
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	bd80      	pop	{r7, pc}

08007cd0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b08c      	sub	sp, #48	; 0x30
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	60f8      	str	r0, [r7, #12]
 8007cd8:	60b9      	str	r1, [r7, #8]
 8007cda:	607a      	str	r2, [r7, #4]
 8007cdc:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007cde:	2301      	movs	r3, #1
 8007ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007cee:	2b01      	cmp	r3, #1
 8007cf0:	d101      	bne.n	8007cf6 <HAL_SPI_TransmitReceive+0x26>
 8007cf2:	2302      	movs	r3, #2
 8007cf4:	e18a      	b.n	800800c <HAL_SPI_TransmitReceive+0x33c>
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	2201      	movs	r2, #1
 8007cfa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007cfe:	f7fb f9cb 	bl	8003098 <HAL_GetTick>
 8007d02:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007d0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	685b      	ldr	r3, [r3, #4]
 8007d12:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007d14:	887b      	ldrh	r3, [r7, #2]
 8007d16:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007d18:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007d1c:	2b01      	cmp	r3, #1
 8007d1e:	d00f      	beq.n	8007d40 <HAL_SPI_TransmitReceive+0x70>
 8007d20:	69fb      	ldr	r3, [r7, #28]
 8007d22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007d26:	d107      	bne.n	8007d38 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	689b      	ldr	r3, [r3, #8]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d103      	bne.n	8007d38 <HAL_SPI_TransmitReceive+0x68>
 8007d30:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007d34:	2b04      	cmp	r3, #4
 8007d36:	d003      	beq.n	8007d40 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007d38:	2302      	movs	r3, #2
 8007d3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007d3e:	e15b      	b.n	8007ff8 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007d40:	68bb      	ldr	r3, [r7, #8]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d005      	beq.n	8007d52 <HAL_SPI_TransmitReceive+0x82>
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d002      	beq.n	8007d52 <HAL_SPI_TransmitReceive+0x82>
 8007d4c:	887b      	ldrh	r3, [r7, #2]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d103      	bne.n	8007d5a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007d52:	2301      	movs	r3, #1
 8007d54:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007d58:	e14e      	b.n	8007ff8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007d60:	b2db      	uxtb	r3, r3
 8007d62:	2b04      	cmp	r3, #4
 8007d64:	d003      	beq.n	8007d6e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	2205      	movs	r2, #5
 8007d6a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	2200      	movs	r2, #0
 8007d72:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	687a      	ldr	r2, [r7, #4]
 8007d78:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	887a      	ldrh	r2, [r7, #2]
 8007d7e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	887a      	ldrh	r2, [r7, #2]
 8007d84:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	68ba      	ldr	r2, [r7, #8]
 8007d8a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	887a      	ldrh	r2, [r7, #2]
 8007d90:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	887a      	ldrh	r2, [r7, #2]
 8007d96:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	2200      	movs	r2, #0
 8007da2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dae:	2b40      	cmp	r3, #64	; 0x40
 8007db0:	d007      	beq.n	8007dc2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	681a      	ldr	r2, [r3, #0]
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007dc0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	68db      	ldr	r3, [r3, #12]
 8007dc6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007dca:	d178      	bne.n	8007ebe <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	685b      	ldr	r3, [r3, #4]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d002      	beq.n	8007dda <HAL_SPI_TransmitReceive+0x10a>
 8007dd4:	8b7b      	ldrh	r3, [r7, #26]
 8007dd6:	2b01      	cmp	r3, #1
 8007dd8:	d166      	bne.n	8007ea8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dde:	881a      	ldrh	r2, [r3, #0]
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dea:	1c9a      	adds	r2, r3, #2
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007df4:	b29b      	uxth	r3, r3
 8007df6:	3b01      	subs	r3, #1
 8007df8:	b29a      	uxth	r2, r3
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007dfe:	e053      	b.n	8007ea8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	689b      	ldr	r3, [r3, #8]
 8007e06:	f003 0302 	and.w	r3, r3, #2
 8007e0a:	2b02      	cmp	r3, #2
 8007e0c:	d11b      	bne.n	8007e46 <HAL_SPI_TransmitReceive+0x176>
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007e12:	b29b      	uxth	r3, r3
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d016      	beq.n	8007e46 <HAL_SPI_TransmitReceive+0x176>
 8007e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e1a:	2b01      	cmp	r3, #1
 8007e1c:	d113      	bne.n	8007e46 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e22:	881a      	ldrh	r2, [r3, #0]
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e2e:	1c9a      	adds	r2, r3, #2
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007e38:	b29b      	uxth	r3, r3
 8007e3a:	3b01      	subs	r3, #1
 8007e3c:	b29a      	uxth	r2, r3
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007e42:	2300      	movs	r3, #0
 8007e44:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	689b      	ldr	r3, [r3, #8]
 8007e4c:	f003 0301 	and.w	r3, r3, #1
 8007e50:	2b01      	cmp	r3, #1
 8007e52:	d119      	bne.n	8007e88 <HAL_SPI_TransmitReceive+0x1b8>
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e58:	b29b      	uxth	r3, r3
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d014      	beq.n	8007e88 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	68da      	ldr	r2, [r3, #12]
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e68:	b292      	uxth	r2, r2
 8007e6a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e70:	1c9a      	adds	r2, r3, #2
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e7a:	b29b      	uxth	r3, r3
 8007e7c:	3b01      	subs	r3, #1
 8007e7e:	b29a      	uxth	r2, r3
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007e84:	2301      	movs	r3, #1
 8007e86:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007e88:	f7fb f906 	bl	8003098 <HAL_GetTick>
 8007e8c:	4602      	mov	r2, r0
 8007e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e90:	1ad3      	subs	r3, r2, r3
 8007e92:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007e94:	429a      	cmp	r2, r3
 8007e96:	d807      	bhi.n	8007ea8 <HAL_SPI_TransmitReceive+0x1d8>
 8007e98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e9e:	d003      	beq.n	8007ea8 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007ea0:	2303      	movs	r3, #3
 8007ea2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007ea6:	e0a7      	b.n	8007ff8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007eac:	b29b      	uxth	r3, r3
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d1a6      	bne.n	8007e00 <HAL_SPI_TransmitReceive+0x130>
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007eb6:	b29b      	uxth	r3, r3
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d1a1      	bne.n	8007e00 <HAL_SPI_TransmitReceive+0x130>
 8007ebc:	e07c      	b.n	8007fb8 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	685b      	ldr	r3, [r3, #4]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d002      	beq.n	8007ecc <HAL_SPI_TransmitReceive+0x1fc>
 8007ec6:	8b7b      	ldrh	r3, [r7, #26]
 8007ec8:	2b01      	cmp	r3, #1
 8007eca:	d16b      	bne.n	8007fa4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	330c      	adds	r3, #12
 8007ed6:	7812      	ldrb	r2, [r2, #0]
 8007ed8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ede:	1c5a      	adds	r2, r3, #1
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007ee8:	b29b      	uxth	r3, r3
 8007eea:	3b01      	subs	r3, #1
 8007eec:	b29a      	uxth	r2, r3
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007ef2:	e057      	b.n	8007fa4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	689b      	ldr	r3, [r3, #8]
 8007efa:	f003 0302 	and.w	r3, r3, #2
 8007efe:	2b02      	cmp	r3, #2
 8007f00:	d11c      	bne.n	8007f3c <HAL_SPI_TransmitReceive+0x26c>
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007f06:	b29b      	uxth	r3, r3
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d017      	beq.n	8007f3c <HAL_SPI_TransmitReceive+0x26c>
 8007f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f0e:	2b01      	cmp	r3, #1
 8007f10:	d114      	bne.n	8007f3c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	330c      	adds	r3, #12
 8007f1c:	7812      	ldrb	r2, [r2, #0]
 8007f1e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f24:	1c5a      	adds	r2, r3, #1
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007f2e:	b29b      	uxth	r3, r3
 8007f30:	3b01      	subs	r3, #1
 8007f32:	b29a      	uxth	r2, r3
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007f38:	2300      	movs	r3, #0
 8007f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	689b      	ldr	r3, [r3, #8]
 8007f42:	f003 0301 	and.w	r3, r3, #1
 8007f46:	2b01      	cmp	r3, #1
 8007f48:	d119      	bne.n	8007f7e <HAL_SPI_TransmitReceive+0x2ae>
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f4e:	b29b      	uxth	r3, r3
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d014      	beq.n	8007f7e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	68da      	ldr	r2, [r3, #12]
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f5e:	b2d2      	uxtb	r2, r2
 8007f60:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f66:	1c5a      	adds	r2, r3, #1
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f70:	b29b      	uxth	r3, r3
 8007f72:	3b01      	subs	r3, #1
 8007f74:	b29a      	uxth	r2, r3
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007f7a:	2301      	movs	r3, #1
 8007f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007f7e:	f7fb f88b 	bl	8003098 <HAL_GetTick>
 8007f82:	4602      	mov	r2, r0
 8007f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f86:	1ad3      	subs	r3, r2, r3
 8007f88:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007f8a:	429a      	cmp	r2, r3
 8007f8c:	d803      	bhi.n	8007f96 <HAL_SPI_TransmitReceive+0x2c6>
 8007f8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f94:	d102      	bne.n	8007f9c <HAL_SPI_TransmitReceive+0x2cc>
 8007f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d103      	bne.n	8007fa4 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007f9c:	2303      	movs	r3, #3
 8007f9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007fa2:	e029      	b.n	8007ff8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007fa8:	b29b      	uxth	r3, r3
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d1a2      	bne.n	8007ef4 <HAL_SPI_TransmitReceive+0x224>
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007fb2:	b29b      	uxth	r3, r3
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d19d      	bne.n	8007ef4 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007fb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fba:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007fbc:	68f8      	ldr	r0, [r7, #12]
 8007fbe:	f000 f917 	bl	80081f0 <SPI_EndRxTxTransaction>
 8007fc2:	4603      	mov	r3, r0
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d006      	beq.n	8007fd6 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007fc8:	2301      	movs	r3, #1
 8007fca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	2220      	movs	r2, #32
 8007fd2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007fd4:	e010      	b.n	8007ff8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	689b      	ldr	r3, [r3, #8]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d10b      	bne.n	8007ff6 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007fde:	2300      	movs	r3, #0
 8007fe0:	617b      	str	r3, [r7, #20]
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	68db      	ldr	r3, [r3, #12]
 8007fe8:	617b      	str	r3, [r7, #20]
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	689b      	ldr	r3, [r3, #8]
 8007ff0:	617b      	str	r3, [r7, #20]
 8007ff2:	697b      	ldr	r3, [r7, #20]
 8007ff4:	e000      	b.n	8007ff8 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007ff6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	2201      	movs	r2, #1
 8007ffc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	2200      	movs	r2, #0
 8008004:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008008:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800800c:	4618      	mov	r0, r3
 800800e:	3730      	adds	r7, #48	; 0x30
 8008010:	46bd      	mov	sp, r7
 8008012:	bd80      	pop	{r7, pc}

08008014 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008014:	b580      	push	{r7, lr}
 8008016:	b088      	sub	sp, #32
 8008018:	af00      	add	r7, sp, #0
 800801a:	60f8      	str	r0, [r7, #12]
 800801c:	60b9      	str	r1, [r7, #8]
 800801e:	603b      	str	r3, [r7, #0]
 8008020:	4613      	mov	r3, r2
 8008022:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008024:	f7fb f838 	bl	8003098 <HAL_GetTick>
 8008028:	4602      	mov	r2, r0
 800802a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800802c:	1a9b      	subs	r3, r3, r2
 800802e:	683a      	ldr	r2, [r7, #0]
 8008030:	4413      	add	r3, r2
 8008032:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008034:	f7fb f830 	bl	8003098 <HAL_GetTick>
 8008038:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800803a:	4b39      	ldr	r3, [pc, #228]	; (8008120 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	015b      	lsls	r3, r3, #5
 8008040:	0d1b      	lsrs	r3, r3, #20
 8008042:	69fa      	ldr	r2, [r7, #28]
 8008044:	fb02 f303 	mul.w	r3, r2, r3
 8008048:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800804a:	e054      	b.n	80080f6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800804c:	683b      	ldr	r3, [r7, #0]
 800804e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008052:	d050      	beq.n	80080f6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008054:	f7fb f820 	bl	8003098 <HAL_GetTick>
 8008058:	4602      	mov	r2, r0
 800805a:	69bb      	ldr	r3, [r7, #24]
 800805c:	1ad3      	subs	r3, r2, r3
 800805e:	69fa      	ldr	r2, [r7, #28]
 8008060:	429a      	cmp	r2, r3
 8008062:	d902      	bls.n	800806a <SPI_WaitFlagStateUntilTimeout+0x56>
 8008064:	69fb      	ldr	r3, [r7, #28]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d13d      	bne.n	80080e6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	685a      	ldr	r2, [r3, #4]
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008078:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	685b      	ldr	r3, [r3, #4]
 800807e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008082:	d111      	bne.n	80080a8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	689b      	ldr	r3, [r3, #8]
 8008088:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800808c:	d004      	beq.n	8008098 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	689b      	ldr	r3, [r3, #8]
 8008092:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008096:	d107      	bne.n	80080a8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	681a      	ldr	r2, [r3, #0]
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80080a6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80080b0:	d10f      	bne.n	80080d2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	681a      	ldr	r2, [r3, #0]
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80080c0:	601a      	str	r2, [r3, #0]
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	681a      	ldr	r2, [r3, #0]
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80080d0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	2201      	movs	r2, #1
 80080d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	2200      	movs	r2, #0
 80080de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80080e2:	2303      	movs	r3, #3
 80080e4:	e017      	b.n	8008116 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80080e6:	697b      	ldr	r3, [r7, #20]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d101      	bne.n	80080f0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80080ec:	2300      	movs	r3, #0
 80080ee:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80080f0:	697b      	ldr	r3, [r7, #20]
 80080f2:	3b01      	subs	r3, #1
 80080f4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	689a      	ldr	r2, [r3, #8]
 80080fc:	68bb      	ldr	r3, [r7, #8]
 80080fe:	4013      	ands	r3, r2
 8008100:	68ba      	ldr	r2, [r7, #8]
 8008102:	429a      	cmp	r2, r3
 8008104:	bf0c      	ite	eq
 8008106:	2301      	moveq	r3, #1
 8008108:	2300      	movne	r3, #0
 800810a:	b2db      	uxtb	r3, r3
 800810c:	461a      	mov	r2, r3
 800810e:	79fb      	ldrb	r3, [r7, #7]
 8008110:	429a      	cmp	r2, r3
 8008112:	d19b      	bne.n	800804c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008114:	2300      	movs	r3, #0
}
 8008116:	4618      	mov	r0, r3
 8008118:	3720      	adds	r7, #32
 800811a:	46bd      	mov	sp, r7
 800811c:	bd80      	pop	{r7, pc}
 800811e:	bf00      	nop
 8008120:	20000044 	.word	0x20000044

08008124 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008124:	b580      	push	{r7, lr}
 8008126:	b086      	sub	sp, #24
 8008128:	af02      	add	r7, sp, #8
 800812a:	60f8      	str	r0, [r7, #12]
 800812c:	60b9      	str	r1, [r7, #8]
 800812e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	685b      	ldr	r3, [r3, #4]
 8008134:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008138:	d111      	bne.n	800815e <SPI_EndRxTransaction+0x3a>
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	689b      	ldr	r3, [r3, #8]
 800813e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008142:	d004      	beq.n	800814e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	689b      	ldr	r3, [r3, #8]
 8008148:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800814c:	d107      	bne.n	800815e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	681a      	ldr	r2, [r3, #0]
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800815c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	685b      	ldr	r3, [r3, #4]
 8008162:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008166:	d12a      	bne.n	80081be <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	689b      	ldr	r3, [r3, #8]
 800816c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008170:	d012      	beq.n	8008198 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	9300      	str	r3, [sp, #0]
 8008176:	68bb      	ldr	r3, [r7, #8]
 8008178:	2200      	movs	r2, #0
 800817a:	2180      	movs	r1, #128	; 0x80
 800817c:	68f8      	ldr	r0, [r7, #12]
 800817e:	f7ff ff49 	bl	8008014 <SPI_WaitFlagStateUntilTimeout>
 8008182:	4603      	mov	r3, r0
 8008184:	2b00      	cmp	r3, #0
 8008186:	d02d      	beq.n	80081e4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800818c:	f043 0220 	orr.w	r2, r3, #32
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008194:	2303      	movs	r3, #3
 8008196:	e026      	b.n	80081e6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	9300      	str	r3, [sp, #0]
 800819c:	68bb      	ldr	r3, [r7, #8]
 800819e:	2200      	movs	r2, #0
 80081a0:	2101      	movs	r1, #1
 80081a2:	68f8      	ldr	r0, [r7, #12]
 80081a4:	f7ff ff36 	bl	8008014 <SPI_WaitFlagStateUntilTimeout>
 80081a8:	4603      	mov	r3, r0
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d01a      	beq.n	80081e4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081b2:	f043 0220 	orr.w	r2, r3, #32
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80081ba:	2303      	movs	r3, #3
 80081bc:	e013      	b.n	80081e6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	9300      	str	r3, [sp, #0]
 80081c2:	68bb      	ldr	r3, [r7, #8]
 80081c4:	2200      	movs	r2, #0
 80081c6:	2101      	movs	r1, #1
 80081c8:	68f8      	ldr	r0, [r7, #12]
 80081ca:	f7ff ff23 	bl	8008014 <SPI_WaitFlagStateUntilTimeout>
 80081ce:	4603      	mov	r3, r0
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d007      	beq.n	80081e4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081d8:	f043 0220 	orr.w	r2, r3, #32
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80081e0:	2303      	movs	r3, #3
 80081e2:	e000      	b.n	80081e6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80081e4:	2300      	movs	r3, #0
}
 80081e6:	4618      	mov	r0, r3
 80081e8:	3710      	adds	r7, #16
 80081ea:	46bd      	mov	sp, r7
 80081ec:	bd80      	pop	{r7, pc}
	...

080081f0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b088      	sub	sp, #32
 80081f4:	af02      	add	r7, sp, #8
 80081f6:	60f8      	str	r0, [r7, #12]
 80081f8:	60b9      	str	r1, [r7, #8]
 80081fa:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80081fc:	4b1b      	ldr	r3, [pc, #108]	; (800826c <SPI_EndRxTxTransaction+0x7c>)
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	4a1b      	ldr	r2, [pc, #108]	; (8008270 <SPI_EndRxTxTransaction+0x80>)
 8008202:	fba2 2303 	umull	r2, r3, r2, r3
 8008206:	0d5b      	lsrs	r3, r3, #21
 8008208:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800820c:	fb02 f303 	mul.w	r3, r2, r3
 8008210:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	685b      	ldr	r3, [r3, #4]
 8008216:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800821a:	d112      	bne.n	8008242 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	9300      	str	r3, [sp, #0]
 8008220:	68bb      	ldr	r3, [r7, #8]
 8008222:	2200      	movs	r2, #0
 8008224:	2180      	movs	r1, #128	; 0x80
 8008226:	68f8      	ldr	r0, [r7, #12]
 8008228:	f7ff fef4 	bl	8008014 <SPI_WaitFlagStateUntilTimeout>
 800822c:	4603      	mov	r3, r0
 800822e:	2b00      	cmp	r3, #0
 8008230:	d016      	beq.n	8008260 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008236:	f043 0220 	orr.w	r2, r3, #32
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800823e:	2303      	movs	r3, #3
 8008240:	e00f      	b.n	8008262 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008242:	697b      	ldr	r3, [r7, #20]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d00a      	beq.n	800825e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8008248:	697b      	ldr	r3, [r7, #20]
 800824a:	3b01      	subs	r3, #1
 800824c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	689b      	ldr	r3, [r3, #8]
 8008254:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008258:	2b80      	cmp	r3, #128	; 0x80
 800825a:	d0f2      	beq.n	8008242 <SPI_EndRxTxTransaction+0x52>
 800825c:	e000      	b.n	8008260 <SPI_EndRxTxTransaction+0x70>
        break;
 800825e:	bf00      	nop
  }

  return HAL_OK;
 8008260:	2300      	movs	r3, #0
}
 8008262:	4618      	mov	r0, r3
 8008264:	3718      	adds	r7, #24
 8008266:	46bd      	mov	sp, r7
 8008268:	bd80      	pop	{r7, pc}
 800826a:	bf00      	nop
 800826c:	20000044 	.word	0x20000044
 8008270:	165e9f81 	.word	0x165e9f81

08008274 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008274:	b580      	push	{r7, lr}
 8008276:	b082      	sub	sp, #8
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d101      	bne.n	8008286 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008282:	2301      	movs	r3, #1
 8008284:	e041      	b.n	800830a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800828c:	b2db      	uxtb	r3, r3
 800828e:	2b00      	cmp	r3, #0
 8008290:	d106      	bne.n	80082a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	2200      	movs	r2, #0
 8008296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800829a:	6878      	ldr	r0, [r7, #4]
 800829c:	f7fa fd62 	bl	8002d64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2202      	movs	r2, #2
 80082a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681a      	ldr	r2, [r3, #0]
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	3304      	adds	r3, #4
 80082b0:	4619      	mov	r1, r3
 80082b2:	4610      	mov	r0, r2
 80082b4:	f000 fd74 	bl	8008da0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2201      	movs	r2, #1
 80082bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2201      	movs	r2, #1
 80082c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2201      	movs	r2, #1
 80082cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2201      	movs	r2, #1
 80082d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	2201      	movs	r2, #1
 80082dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2201      	movs	r2, #1
 80082e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2201      	movs	r2, #1
 80082ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2201      	movs	r2, #1
 80082f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	2201      	movs	r2, #1
 80082fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	2201      	movs	r2, #1
 8008304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008308:	2300      	movs	r3, #0
}
 800830a:	4618      	mov	r0, r3
 800830c:	3708      	adds	r7, #8
 800830e:	46bd      	mov	sp, r7
 8008310:	bd80      	pop	{r7, pc}

08008312 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008312:	b580      	push	{r7, lr}
 8008314:	b082      	sub	sp, #8
 8008316:	af00      	add	r7, sp, #0
 8008318:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d101      	bne.n	8008324 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008320:	2301      	movs	r3, #1
 8008322:	e041      	b.n	80083a8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800832a:	b2db      	uxtb	r3, r3
 800832c:	2b00      	cmp	r3, #0
 800832e:	d106      	bne.n	800833e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2200      	movs	r2, #0
 8008334:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008338:	6878      	ldr	r0, [r7, #4]
 800833a:	f000 f839 	bl	80083b0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	2202      	movs	r2, #2
 8008342:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681a      	ldr	r2, [r3, #0]
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	3304      	adds	r3, #4
 800834e:	4619      	mov	r1, r3
 8008350:	4610      	mov	r0, r2
 8008352:	f000 fd25 	bl	8008da0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	2201      	movs	r2, #1
 800835a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	2201      	movs	r2, #1
 8008362:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	2201      	movs	r2, #1
 800836a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	2201      	movs	r2, #1
 8008372:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	2201      	movs	r2, #1
 800837a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2201      	movs	r2, #1
 8008382:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	2201      	movs	r2, #1
 800838a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	2201      	movs	r2, #1
 8008392:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	2201      	movs	r2, #1
 800839a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	2201      	movs	r2, #1
 80083a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80083a6:	2300      	movs	r3, #0
}
 80083a8:	4618      	mov	r0, r3
 80083aa:	3708      	adds	r7, #8
 80083ac:	46bd      	mov	sp, r7
 80083ae:	bd80      	pop	{r7, pc}

080083b0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80083b0:	b480      	push	{r7}
 80083b2:	b083      	sub	sp, #12
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80083b8:	bf00      	nop
 80083ba:	370c      	adds	r7, #12
 80083bc:	46bd      	mov	sp, r7
 80083be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c2:	4770      	bx	lr

080083c4 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b086      	sub	sp, #24
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	60f8      	str	r0, [r7, #12]
 80083cc:	60b9      	str	r1, [r7, #8]
 80083ce:	607a      	str	r2, [r7, #4]
 80083d0:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80083d2:	2300      	movs	r3, #0
 80083d4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80083d6:	68bb      	ldr	r3, [r7, #8]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d109      	bne.n	80083f0 <HAL_TIM_PWM_Start_DMA+0x2c>
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80083e2:	b2db      	uxtb	r3, r3
 80083e4:	2b02      	cmp	r3, #2
 80083e6:	bf0c      	ite	eq
 80083e8:	2301      	moveq	r3, #1
 80083ea:	2300      	movne	r3, #0
 80083ec:	b2db      	uxtb	r3, r3
 80083ee:	e022      	b.n	8008436 <HAL_TIM_PWM_Start_DMA+0x72>
 80083f0:	68bb      	ldr	r3, [r7, #8]
 80083f2:	2b04      	cmp	r3, #4
 80083f4:	d109      	bne.n	800840a <HAL_TIM_PWM_Start_DMA+0x46>
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80083fc:	b2db      	uxtb	r3, r3
 80083fe:	2b02      	cmp	r3, #2
 8008400:	bf0c      	ite	eq
 8008402:	2301      	moveq	r3, #1
 8008404:	2300      	movne	r3, #0
 8008406:	b2db      	uxtb	r3, r3
 8008408:	e015      	b.n	8008436 <HAL_TIM_PWM_Start_DMA+0x72>
 800840a:	68bb      	ldr	r3, [r7, #8]
 800840c:	2b08      	cmp	r3, #8
 800840e:	d109      	bne.n	8008424 <HAL_TIM_PWM_Start_DMA+0x60>
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008416:	b2db      	uxtb	r3, r3
 8008418:	2b02      	cmp	r3, #2
 800841a:	bf0c      	ite	eq
 800841c:	2301      	moveq	r3, #1
 800841e:	2300      	movne	r3, #0
 8008420:	b2db      	uxtb	r3, r3
 8008422:	e008      	b.n	8008436 <HAL_TIM_PWM_Start_DMA+0x72>
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800842a:	b2db      	uxtb	r3, r3
 800842c:	2b02      	cmp	r3, #2
 800842e:	bf0c      	ite	eq
 8008430:	2301      	moveq	r3, #1
 8008432:	2300      	movne	r3, #0
 8008434:	b2db      	uxtb	r3, r3
 8008436:	2b00      	cmp	r3, #0
 8008438:	d001      	beq.n	800843e <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 800843a:	2302      	movs	r3, #2
 800843c:	e15d      	b.n	80086fa <HAL_TIM_PWM_Start_DMA+0x336>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800843e:	68bb      	ldr	r3, [r7, #8]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d109      	bne.n	8008458 <HAL_TIM_PWM_Start_DMA+0x94>
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800844a:	b2db      	uxtb	r3, r3
 800844c:	2b01      	cmp	r3, #1
 800844e:	bf0c      	ite	eq
 8008450:	2301      	moveq	r3, #1
 8008452:	2300      	movne	r3, #0
 8008454:	b2db      	uxtb	r3, r3
 8008456:	e022      	b.n	800849e <HAL_TIM_PWM_Start_DMA+0xda>
 8008458:	68bb      	ldr	r3, [r7, #8]
 800845a:	2b04      	cmp	r3, #4
 800845c:	d109      	bne.n	8008472 <HAL_TIM_PWM_Start_DMA+0xae>
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008464:	b2db      	uxtb	r3, r3
 8008466:	2b01      	cmp	r3, #1
 8008468:	bf0c      	ite	eq
 800846a:	2301      	moveq	r3, #1
 800846c:	2300      	movne	r3, #0
 800846e:	b2db      	uxtb	r3, r3
 8008470:	e015      	b.n	800849e <HAL_TIM_PWM_Start_DMA+0xda>
 8008472:	68bb      	ldr	r3, [r7, #8]
 8008474:	2b08      	cmp	r3, #8
 8008476:	d109      	bne.n	800848c <HAL_TIM_PWM_Start_DMA+0xc8>
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800847e:	b2db      	uxtb	r3, r3
 8008480:	2b01      	cmp	r3, #1
 8008482:	bf0c      	ite	eq
 8008484:	2301      	moveq	r3, #1
 8008486:	2300      	movne	r3, #0
 8008488:	b2db      	uxtb	r3, r3
 800848a:	e008      	b.n	800849e <HAL_TIM_PWM_Start_DMA+0xda>
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008492:	b2db      	uxtb	r3, r3
 8008494:	2b01      	cmp	r3, #1
 8008496:	bf0c      	ite	eq
 8008498:	2301      	moveq	r3, #1
 800849a:	2300      	movne	r3, #0
 800849c:	b2db      	uxtb	r3, r3
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d024      	beq.n	80084ec <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d104      	bne.n	80084b2 <HAL_TIM_PWM_Start_DMA+0xee>
 80084a8:	887b      	ldrh	r3, [r7, #2]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d001      	beq.n	80084b2 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 80084ae:	2301      	movs	r3, #1
 80084b0:	e123      	b.n	80086fa <HAL_TIM_PWM_Start_DMA+0x336>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80084b2:	68bb      	ldr	r3, [r7, #8]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d104      	bne.n	80084c2 <HAL_TIM_PWM_Start_DMA+0xfe>
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	2202      	movs	r2, #2
 80084bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80084c0:	e016      	b.n	80084f0 <HAL_TIM_PWM_Start_DMA+0x12c>
 80084c2:	68bb      	ldr	r3, [r7, #8]
 80084c4:	2b04      	cmp	r3, #4
 80084c6:	d104      	bne.n	80084d2 <HAL_TIM_PWM_Start_DMA+0x10e>
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	2202      	movs	r2, #2
 80084cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80084d0:	e00e      	b.n	80084f0 <HAL_TIM_PWM_Start_DMA+0x12c>
 80084d2:	68bb      	ldr	r3, [r7, #8]
 80084d4:	2b08      	cmp	r3, #8
 80084d6:	d104      	bne.n	80084e2 <HAL_TIM_PWM_Start_DMA+0x11e>
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	2202      	movs	r2, #2
 80084dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80084e0:	e006      	b.n	80084f0 <HAL_TIM_PWM_Start_DMA+0x12c>
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	2202      	movs	r2, #2
 80084e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80084ea:	e001      	b.n	80084f0 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 80084ec:	2301      	movs	r3, #1
 80084ee:	e104      	b.n	80086fa <HAL_TIM_PWM_Start_DMA+0x336>
  }

  switch (Channel)
 80084f0:	68bb      	ldr	r3, [r7, #8]
 80084f2:	2b0c      	cmp	r3, #12
 80084f4:	f200 80ae 	bhi.w	8008654 <HAL_TIM_PWM_Start_DMA+0x290>
 80084f8:	a201      	add	r2, pc, #4	; (adr r2, 8008500 <HAL_TIM_PWM_Start_DMA+0x13c>)
 80084fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084fe:	bf00      	nop
 8008500:	08008535 	.word	0x08008535
 8008504:	08008655 	.word	0x08008655
 8008508:	08008655 	.word	0x08008655
 800850c:	08008655 	.word	0x08008655
 8008510:	0800857d 	.word	0x0800857d
 8008514:	08008655 	.word	0x08008655
 8008518:	08008655 	.word	0x08008655
 800851c:	08008655 	.word	0x08008655
 8008520:	080085c5 	.word	0x080085c5
 8008524:	08008655 	.word	0x08008655
 8008528:	08008655 	.word	0x08008655
 800852c:	08008655 	.word	0x08008655
 8008530:	0800860d 	.word	0x0800860d
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008538:	4a72      	ldr	r2, [pc, #456]	; (8008704 <HAL_TIM_PWM_Start_DMA+0x340>)
 800853a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008540:	4a71      	ldr	r2, [pc, #452]	; (8008708 <HAL_TIM_PWM_Start_DMA+0x344>)
 8008542:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008548:	4a70      	ldr	r2, [pc, #448]	; (800870c <HAL_TIM_PWM_Start_DMA+0x348>)
 800854a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8008550:	6879      	ldr	r1, [r7, #4]
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	3334      	adds	r3, #52	; 0x34
 8008558:	461a      	mov	r2, r3
 800855a:	887b      	ldrh	r3, [r7, #2]
 800855c:	f7fb fc46 	bl	8003dec <HAL_DMA_Start_IT>
 8008560:	4603      	mov	r3, r0
 8008562:	2b00      	cmp	r3, #0
 8008564:	d001      	beq.n	800856a <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008566:	2301      	movs	r3, #1
 8008568:	e0c7      	b.n	80086fa <HAL_TIM_PWM_Start_DMA+0x336>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	68da      	ldr	r2, [r3, #12]
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008578:	60da      	str	r2, [r3, #12]
      break;
 800857a:	e06e      	b.n	800865a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008580:	4a60      	ldr	r2, [pc, #384]	; (8008704 <HAL_TIM_PWM_Start_DMA+0x340>)
 8008582:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008588:	4a5f      	ldr	r2, [pc, #380]	; (8008708 <HAL_TIM_PWM_Start_DMA+0x344>)
 800858a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008590:	4a5e      	ldr	r2, [pc, #376]	; (800870c <HAL_TIM_PWM_Start_DMA+0x348>)
 8008592:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8008598:	6879      	ldr	r1, [r7, #4]
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	3338      	adds	r3, #56	; 0x38
 80085a0:	461a      	mov	r2, r3
 80085a2:	887b      	ldrh	r3, [r7, #2]
 80085a4:	f7fb fc22 	bl	8003dec <HAL_DMA_Start_IT>
 80085a8:	4603      	mov	r3, r0
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d001      	beq.n	80085b2 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80085ae:	2301      	movs	r3, #1
 80085b0:	e0a3      	b.n	80086fa <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	68da      	ldr	r2, [r3, #12]
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80085c0:	60da      	str	r2, [r3, #12]
      break;
 80085c2:	e04a      	b.n	800865a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085c8:	4a4e      	ldr	r2, [pc, #312]	; (8008704 <HAL_TIM_PWM_Start_DMA+0x340>)
 80085ca:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085d0:	4a4d      	ldr	r2, [pc, #308]	; (8008708 <HAL_TIM_PWM_Start_DMA+0x344>)
 80085d2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085d8:	4a4c      	ldr	r2, [pc, #304]	; (800870c <HAL_TIM_PWM_Start_DMA+0x348>)
 80085da:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80085e0:	6879      	ldr	r1, [r7, #4]
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	333c      	adds	r3, #60	; 0x3c
 80085e8:	461a      	mov	r2, r3
 80085ea:	887b      	ldrh	r3, [r7, #2]
 80085ec:	f7fb fbfe 	bl	8003dec <HAL_DMA_Start_IT>
 80085f0:	4603      	mov	r3, r0
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d001      	beq.n	80085fa <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80085f6:	2301      	movs	r3, #1
 80085f8:	e07f      	b.n	80086fa <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	68da      	ldr	r2, [r3, #12]
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008608:	60da      	str	r2, [r3, #12]
      break;
 800860a:	e026      	b.n	800865a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008610:	4a3c      	ldr	r2, [pc, #240]	; (8008704 <HAL_TIM_PWM_Start_DMA+0x340>)
 8008612:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008618:	4a3b      	ldr	r2, [pc, #236]	; (8008708 <HAL_TIM_PWM_Start_DMA+0x344>)
 800861a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008620:	4a3a      	ldr	r2, [pc, #232]	; (800870c <HAL_TIM_PWM_Start_DMA+0x348>)
 8008622:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008628:	6879      	ldr	r1, [r7, #4]
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	3340      	adds	r3, #64	; 0x40
 8008630:	461a      	mov	r2, r3
 8008632:	887b      	ldrh	r3, [r7, #2]
 8008634:	f7fb fbda 	bl	8003dec <HAL_DMA_Start_IT>
 8008638:	4603      	mov	r3, r0
 800863a:	2b00      	cmp	r3, #0
 800863c:	d001      	beq.n	8008642 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800863e:	2301      	movs	r3, #1
 8008640:	e05b      	b.n	80086fa <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	68da      	ldr	r2, [r3, #12]
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008650:	60da      	str	r2, [r3, #12]
      break;
 8008652:	e002      	b.n	800865a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8008654:	2301      	movs	r3, #1
 8008656:	75fb      	strb	r3, [r7, #23]
      break;
 8008658:	bf00      	nop
  }

  if (status == HAL_OK)
 800865a:	7dfb      	ldrb	r3, [r7, #23]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d14b      	bne.n	80086f8 <HAL_TIM_PWM_Start_DMA+0x334>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	2201      	movs	r2, #1
 8008666:	68b9      	ldr	r1, [r7, #8]
 8008668:	4618      	mov	r0, r3
 800866a:	f000 fe3f 	bl	80092ec <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	4a27      	ldr	r2, [pc, #156]	; (8008710 <HAL_TIM_PWM_Start_DMA+0x34c>)
 8008674:	4293      	cmp	r3, r2
 8008676:	d107      	bne.n	8008688 <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008686:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	4a20      	ldr	r2, [pc, #128]	; (8008710 <HAL_TIM_PWM_Start_DMA+0x34c>)
 800868e:	4293      	cmp	r3, r2
 8008690:	d018      	beq.n	80086c4 <HAL_TIM_PWM_Start_DMA+0x300>
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800869a:	d013      	beq.n	80086c4 <HAL_TIM_PWM_Start_DMA+0x300>
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	4a1c      	ldr	r2, [pc, #112]	; (8008714 <HAL_TIM_PWM_Start_DMA+0x350>)
 80086a2:	4293      	cmp	r3, r2
 80086a4:	d00e      	beq.n	80086c4 <HAL_TIM_PWM_Start_DMA+0x300>
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	4a1b      	ldr	r2, [pc, #108]	; (8008718 <HAL_TIM_PWM_Start_DMA+0x354>)
 80086ac:	4293      	cmp	r3, r2
 80086ae:	d009      	beq.n	80086c4 <HAL_TIM_PWM_Start_DMA+0x300>
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	4a19      	ldr	r2, [pc, #100]	; (800871c <HAL_TIM_PWM_Start_DMA+0x358>)
 80086b6:	4293      	cmp	r3, r2
 80086b8:	d004      	beq.n	80086c4 <HAL_TIM_PWM_Start_DMA+0x300>
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	4a18      	ldr	r2, [pc, #96]	; (8008720 <HAL_TIM_PWM_Start_DMA+0x35c>)
 80086c0:	4293      	cmp	r3, r2
 80086c2:	d111      	bne.n	80086e8 <HAL_TIM_PWM_Start_DMA+0x324>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	689b      	ldr	r3, [r3, #8]
 80086ca:	f003 0307 	and.w	r3, r3, #7
 80086ce:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086d0:	693b      	ldr	r3, [r7, #16]
 80086d2:	2b06      	cmp	r3, #6
 80086d4:	d010      	beq.n	80086f8 <HAL_TIM_PWM_Start_DMA+0x334>
      {
        __HAL_TIM_ENABLE(htim);
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	681a      	ldr	r2, [r3, #0]
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	f042 0201 	orr.w	r2, r2, #1
 80086e4:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086e6:	e007      	b.n	80086f8 <HAL_TIM_PWM_Start_DMA+0x334>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	681a      	ldr	r2, [r3, #0]
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	f042 0201 	orr.w	r2, r2, #1
 80086f6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80086f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80086fa:	4618      	mov	r0, r3
 80086fc:	3718      	adds	r7, #24
 80086fe:	46bd      	mov	sp, r7
 8008700:	bd80      	pop	{r7, pc}
 8008702:	bf00      	nop
 8008704:	08008c91 	.word	0x08008c91
 8008708:	08008d39 	.word	0x08008d39
 800870c:	08008bff 	.word	0x08008bff
 8008710:	40010000 	.word	0x40010000
 8008714:	40000400 	.word	0x40000400
 8008718:	40000800 	.word	0x40000800
 800871c:	40000c00 	.word	0x40000c00
 8008720:	40014000 	.word	0x40014000

08008724 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b084      	sub	sp, #16
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
 800872c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800872e:	2300      	movs	r3, #0
 8008730:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	2b0c      	cmp	r3, #12
 8008736:	d855      	bhi.n	80087e4 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8008738:	a201      	add	r2, pc, #4	; (adr r2, 8008740 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 800873a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800873e:	bf00      	nop
 8008740:	08008775 	.word	0x08008775
 8008744:	080087e5 	.word	0x080087e5
 8008748:	080087e5 	.word	0x080087e5
 800874c:	080087e5 	.word	0x080087e5
 8008750:	08008791 	.word	0x08008791
 8008754:	080087e5 	.word	0x080087e5
 8008758:	080087e5 	.word	0x080087e5
 800875c:	080087e5 	.word	0x080087e5
 8008760:	080087ad 	.word	0x080087ad
 8008764:	080087e5 	.word	0x080087e5
 8008768:	080087e5 	.word	0x080087e5
 800876c:	080087e5 	.word	0x080087e5
 8008770:	080087c9 	.word	0x080087c9
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	68da      	ldr	r2, [r3, #12]
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008782:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008788:	4618      	mov	r0, r3
 800878a:	f7fb fbf7 	bl	8003f7c <HAL_DMA_Abort_IT>
      break;
 800878e:	e02c      	b.n	80087ea <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	68da      	ldr	r2, [r3, #12]
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800879e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087a4:	4618      	mov	r0, r3
 80087a6:	f7fb fbe9 	bl	8003f7c <HAL_DMA_Abort_IT>
      break;
 80087aa:	e01e      	b.n	80087ea <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	68da      	ldr	r2, [r3, #12]
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80087ba:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087c0:	4618      	mov	r0, r3
 80087c2:	f7fb fbdb 	bl	8003f7c <HAL_DMA_Abort_IT>
      break;
 80087c6:	e010      	b.n	80087ea <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	68da      	ldr	r2, [r3, #12]
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80087d6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087dc:	4618      	mov	r0, r3
 80087de:	f7fb fbcd 	bl	8003f7c <HAL_DMA_Abort_IT>
      break;
 80087e2:	e002      	b.n	80087ea <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 80087e4:	2301      	movs	r3, #1
 80087e6:	73fb      	strb	r3, [r7, #15]
      break;
 80087e8:	bf00      	nop
  }

  if (status == HAL_OK)
 80087ea:	7bfb      	ldrb	r3, [r7, #15]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d157      	bne.n	80088a0 <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	2200      	movs	r2, #0
 80087f6:	6839      	ldr	r1, [r7, #0]
 80087f8:	4618      	mov	r0, r3
 80087fa:	f000 fd77 	bl	80092ec <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	4a2a      	ldr	r2, [pc, #168]	; (80088ac <HAL_TIM_PWM_Stop_DMA+0x188>)
 8008804:	4293      	cmp	r3, r2
 8008806:	d117      	bne.n	8008838 <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	6a1a      	ldr	r2, [r3, #32]
 800880e:	f241 1311 	movw	r3, #4369	; 0x1111
 8008812:	4013      	ands	r3, r2
 8008814:	2b00      	cmp	r3, #0
 8008816:	d10f      	bne.n	8008838 <HAL_TIM_PWM_Stop_DMA+0x114>
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	6a1a      	ldr	r2, [r3, #32]
 800881e:	f240 4344 	movw	r3, #1092	; 0x444
 8008822:	4013      	ands	r3, r2
 8008824:	2b00      	cmp	r3, #0
 8008826:	d107      	bne.n	8008838 <HAL_TIM_PWM_Stop_DMA+0x114>
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008836:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	6a1a      	ldr	r2, [r3, #32]
 800883e:	f241 1311 	movw	r3, #4369	; 0x1111
 8008842:	4013      	ands	r3, r2
 8008844:	2b00      	cmp	r3, #0
 8008846:	d10f      	bne.n	8008868 <HAL_TIM_PWM_Stop_DMA+0x144>
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	6a1a      	ldr	r2, [r3, #32]
 800884e:	f240 4344 	movw	r3, #1092	; 0x444
 8008852:	4013      	ands	r3, r2
 8008854:	2b00      	cmp	r3, #0
 8008856:	d107      	bne.n	8008868 <HAL_TIM_PWM_Stop_DMA+0x144>
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	681a      	ldr	r2, [r3, #0]
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	f022 0201 	bic.w	r2, r2, #1
 8008866:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008868:	683b      	ldr	r3, [r7, #0]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d104      	bne.n	8008878 <HAL_TIM_PWM_Stop_DMA+0x154>
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	2201      	movs	r2, #1
 8008872:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008876:	e013      	b.n	80088a0 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	2b04      	cmp	r3, #4
 800887c:	d104      	bne.n	8008888 <HAL_TIM_PWM_Stop_DMA+0x164>
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	2201      	movs	r2, #1
 8008882:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008886:	e00b      	b.n	80088a0 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8008888:	683b      	ldr	r3, [r7, #0]
 800888a:	2b08      	cmp	r3, #8
 800888c:	d104      	bne.n	8008898 <HAL_TIM_PWM_Stop_DMA+0x174>
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	2201      	movs	r2, #1
 8008892:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008896:	e003      	b.n	80088a0 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	2201      	movs	r2, #1
 800889c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 80088a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80088a2:	4618      	mov	r0, r3
 80088a4:	3710      	adds	r7, #16
 80088a6:	46bd      	mov	sp, r7
 80088a8:	bd80      	pop	{r7, pc}
 80088aa:	bf00      	nop
 80088ac:	40010000 	.word	0x40010000

080088b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b086      	sub	sp, #24
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	60f8      	str	r0, [r7, #12]
 80088b8:	60b9      	str	r1, [r7, #8]
 80088ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80088bc:	2300      	movs	r3, #0
 80088be:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80088c6:	2b01      	cmp	r3, #1
 80088c8:	d101      	bne.n	80088ce <HAL_TIM_PWM_ConfigChannel+0x1e>
 80088ca:	2302      	movs	r3, #2
 80088cc:	e0ae      	b.n	8008a2c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	2201      	movs	r2, #1
 80088d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	2b0c      	cmp	r3, #12
 80088da:	f200 809f 	bhi.w	8008a1c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80088de:	a201      	add	r2, pc, #4	; (adr r2, 80088e4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80088e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088e4:	08008919 	.word	0x08008919
 80088e8:	08008a1d 	.word	0x08008a1d
 80088ec:	08008a1d 	.word	0x08008a1d
 80088f0:	08008a1d 	.word	0x08008a1d
 80088f4:	08008959 	.word	0x08008959
 80088f8:	08008a1d 	.word	0x08008a1d
 80088fc:	08008a1d 	.word	0x08008a1d
 8008900:	08008a1d 	.word	0x08008a1d
 8008904:	0800899b 	.word	0x0800899b
 8008908:	08008a1d 	.word	0x08008a1d
 800890c:	08008a1d 	.word	0x08008a1d
 8008910:	08008a1d 	.word	0x08008a1d
 8008914:	080089db 	.word	0x080089db
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	68b9      	ldr	r1, [r7, #8]
 800891e:	4618      	mov	r0, r3
 8008920:	f000 fabe 	bl	8008ea0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	699a      	ldr	r2, [r3, #24]
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	f042 0208 	orr.w	r2, r2, #8
 8008932:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	699a      	ldr	r2, [r3, #24]
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	f022 0204 	bic.w	r2, r2, #4
 8008942:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	6999      	ldr	r1, [r3, #24]
 800894a:	68bb      	ldr	r3, [r7, #8]
 800894c:	691a      	ldr	r2, [r3, #16]
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	430a      	orrs	r2, r1
 8008954:	619a      	str	r2, [r3, #24]
      break;
 8008956:	e064      	b.n	8008a22 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	68b9      	ldr	r1, [r7, #8]
 800895e:	4618      	mov	r0, r3
 8008960:	f000 fb04 	bl	8008f6c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	699a      	ldr	r2, [r3, #24]
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008972:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	699a      	ldr	r2, [r3, #24]
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008982:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	6999      	ldr	r1, [r3, #24]
 800898a:	68bb      	ldr	r3, [r7, #8]
 800898c:	691b      	ldr	r3, [r3, #16]
 800898e:	021a      	lsls	r2, r3, #8
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	430a      	orrs	r2, r1
 8008996:	619a      	str	r2, [r3, #24]
      break;
 8008998:	e043      	b.n	8008a22 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	68b9      	ldr	r1, [r7, #8]
 80089a0:	4618      	mov	r0, r3
 80089a2:	f000 fb4f 	bl	8009044 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	69da      	ldr	r2, [r3, #28]
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	f042 0208 	orr.w	r2, r2, #8
 80089b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	69da      	ldr	r2, [r3, #28]
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	f022 0204 	bic.w	r2, r2, #4
 80089c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	69d9      	ldr	r1, [r3, #28]
 80089cc:	68bb      	ldr	r3, [r7, #8]
 80089ce:	691a      	ldr	r2, [r3, #16]
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	430a      	orrs	r2, r1
 80089d6:	61da      	str	r2, [r3, #28]
      break;
 80089d8:	e023      	b.n	8008a22 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	68b9      	ldr	r1, [r7, #8]
 80089e0:	4618      	mov	r0, r3
 80089e2:	f000 fb99 	bl	8009118 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	69da      	ldr	r2, [r3, #28]
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80089f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	69da      	ldr	r2, [r3, #28]
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008a04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	69d9      	ldr	r1, [r3, #28]
 8008a0c:	68bb      	ldr	r3, [r7, #8]
 8008a0e:	691b      	ldr	r3, [r3, #16]
 8008a10:	021a      	lsls	r2, r3, #8
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	430a      	orrs	r2, r1
 8008a18:	61da      	str	r2, [r3, #28]
      break;
 8008a1a:	e002      	b.n	8008a22 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008a1c:	2301      	movs	r3, #1
 8008a1e:	75fb      	strb	r3, [r7, #23]
      break;
 8008a20:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	2200      	movs	r2, #0
 8008a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008a2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	3718      	adds	r7, #24
 8008a30:	46bd      	mov	sp, r7
 8008a32:	bd80      	pop	{r7, pc}

08008a34 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b084      	sub	sp, #16
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
 8008a3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008a3e:	2300      	movs	r3, #0
 8008a40:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008a48:	2b01      	cmp	r3, #1
 8008a4a:	d101      	bne.n	8008a50 <HAL_TIM_ConfigClockSource+0x1c>
 8008a4c:	2302      	movs	r3, #2
 8008a4e:	e0b4      	b.n	8008bba <HAL_TIM_ConfigClockSource+0x186>
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	2201      	movs	r2, #1
 8008a54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2202      	movs	r2, #2
 8008a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	689b      	ldr	r3, [r3, #8]
 8008a66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008a68:	68bb      	ldr	r3, [r7, #8]
 8008a6a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008a6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008a70:	68bb      	ldr	r3, [r7, #8]
 8008a72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008a76:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	68ba      	ldr	r2, [r7, #8]
 8008a7e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008a80:	683b      	ldr	r3, [r7, #0]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a88:	d03e      	beq.n	8008b08 <HAL_TIM_ConfigClockSource+0xd4>
 8008a8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a8e:	f200 8087 	bhi.w	8008ba0 <HAL_TIM_ConfigClockSource+0x16c>
 8008a92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a96:	f000 8086 	beq.w	8008ba6 <HAL_TIM_ConfigClockSource+0x172>
 8008a9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a9e:	d87f      	bhi.n	8008ba0 <HAL_TIM_ConfigClockSource+0x16c>
 8008aa0:	2b70      	cmp	r3, #112	; 0x70
 8008aa2:	d01a      	beq.n	8008ada <HAL_TIM_ConfigClockSource+0xa6>
 8008aa4:	2b70      	cmp	r3, #112	; 0x70
 8008aa6:	d87b      	bhi.n	8008ba0 <HAL_TIM_ConfigClockSource+0x16c>
 8008aa8:	2b60      	cmp	r3, #96	; 0x60
 8008aaa:	d050      	beq.n	8008b4e <HAL_TIM_ConfigClockSource+0x11a>
 8008aac:	2b60      	cmp	r3, #96	; 0x60
 8008aae:	d877      	bhi.n	8008ba0 <HAL_TIM_ConfigClockSource+0x16c>
 8008ab0:	2b50      	cmp	r3, #80	; 0x50
 8008ab2:	d03c      	beq.n	8008b2e <HAL_TIM_ConfigClockSource+0xfa>
 8008ab4:	2b50      	cmp	r3, #80	; 0x50
 8008ab6:	d873      	bhi.n	8008ba0 <HAL_TIM_ConfigClockSource+0x16c>
 8008ab8:	2b40      	cmp	r3, #64	; 0x40
 8008aba:	d058      	beq.n	8008b6e <HAL_TIM_ConfigClockSource+0x13a>
 8008abc:	2b40      	cmp	r3, #64	; 0x40
 8008abe:	d86f      	bhi.n	8008ba0 <HAL_TIM_ConfigClockSource+0x16c>
 8008ac0:	2b30      	cmp	r3, #48	; 0x30
 8008ac2:	d064      	beq.n	8008b8e <HAL_TIM_ConfigClockSource+0x15a>
 8008ac4:	2b30      	cmp	r3, #48	; 0x30
 8008ac6:	d86b      	bhi.n	8008ba0 <HAL_TIM_ConfigClockSource+0x16c>
 8008ac8:	2b20      	cmp	r3, #32
 8008aca:	d060      	beq.n	8008b8e <HAL_TIM_ConfigClockSource+0x15a>
 8008acc:	2b20      	cmp	r3, #32
 8008ace:	d867      	bhi.n	8008ba0 <HAL_TIM_ConfigClockSource+0x16c>
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d05c      	beq.n	8008b8e <HAL_TIM_ConfigClockSource+0x15a>
 8008ad4:	2b10      	cmp	r3, #16
 8008ad6:	d05a      	beq.n	8008b8e <HAL_TIM_ConfigClockSource+0x15a>
 8008ad8:	e062      	b.n	8008ba0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	6818      	ldr	r0, [r3, #0]
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	6899      	ldr	r1, [r3, #8]
 8008ae2:	683b      	ldr	r3, [r7, #0]
 8008ae4:	685a      	ldr	r2, [r3, #4]
 8008ae6:	683b      	ldr	r3, [r7, #0]
 8008ae8:	68db      	ldr	r3, [r3, #12]
 8008aea:	f000 fbdf 	bl	80092ac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	689b      	ldr	r3, [r3, #8]
 8008af4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008af6:	68bb      	ldr	r3, [r7, #8]
 8008af8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008afc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	68ba      	ldr	r2, [r7, #8]
 8008b04:	609a      	str	r2, [r3, #8]
      break;
 8008b06:	e04f      	b.n	8008ba8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	6818      	ldr	r0, [r3, #0]
 8008b0c:	683b      	ldr	r3, [r7, #0]
 8008b0e:	6899      	ldr	r1, [r3, #8]
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	685a      	ldr	r2, [r3, #4]
 8008b14:	683b      	ldr	r3, [r7, #0]
 8008b16:	68db      	ldr	r3, [r3, #12]
 8008b18:	f000 fbc8 	bl	80092ac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	689a      	ldr	r2, [r3, #8]
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008b2a:	609a      	str	r2, [r3, #8]
      break;
 8008b2c:	e03c      	b.n	8008ba8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	6818      	ldr	r0, [r3, #0]
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	6859      	ldr	r1, [r3, #4]
 8008b36:	683b      	ldr	r3, [r7, #0]
 8008b38:	68db      	ldr	r3, [r3, #12]
 8008b3a:	461a      	mov	r2, r3
 8008b3c:	f000 fb3c 	bl	80091b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	2150      	movs	r1, #80	; 0x50
 8008b46:	4618      	mov	r0, r3
 8008b48:	f000 fb95 	bl	8009276 <TIM_ITRx_SetConfig>
      break;
 8008b4c:	e02c      	b.n	8008ba8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	6818      	ldr	r0, [r3, #0]
 8008b52:	683b      	ldr	r3, [r7, #0]
 8008b54:	6859      	ldr	r1, [r3, #4]
 8008b56:	683b      	ldr	r3, [r7, #0]
 8008b58:	68db      	ldr	r3, [r3, #12]
 8008b5a:	461a      	mov	r2, r3
 8008b5c:	f000 fb5b 	bl	8009216 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	2160      	movs	r1, #96	; 0x60
 8008b66:	4618      	mov	r0, r3
 8008b68:	f000 fb85 	bl	8009276 <TIM_ITRx_SetConfig>
      break;
 8008b6c:	e01c      	b.n	8008ba8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	6818      	ldr	r0, [r3, #0]
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	6859      	ldr	r1, [r3, #4]
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	68db      	ldr	r3, [r3, #12]
 8008b7a:	461a      	mov	r2, r3
 8008b7c:	f000 fb1c 	bl	80091b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	2140      	movs	r1, #64	; 0x40
 8008b86:	4618      	mov	r0, r3
 8008b88:	f000 fb75 	bl	8009276 <TIM_ITRx_SetConfig>
      break;
 8008b8c:	e00c      	b.n	8008ba8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681a      	ldr	r2, [r3, #0]
 8008b92:	683b      	ldr	r3, [r7, #0]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	4619      	mov	r1, r3
 8008b98:	4610      	mov	r0, r2
 8008b9a:	f000 fb6c 	bl	8009276 <TIM_ITRx_SetConfig>
      break;
 8008b9e:	e003      	b.n	8008ba8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008ba0:	2301      	movs	r3, #1
 8008ba2:	73fb      	strb	r3, [r7, #15]
      break;
 8008ba4:	e000      	b.n	8008ba8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008ba6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	2201      	movs	r2, #1
 8008bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008bb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bba:	4618      	mov	r0, r3
 8008bbc:	3710      	adds	r7, #16
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	bd80      	pop	{r7, pc}

08008bc2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008bc2:	b480      	push	{r7}
 8008bc4:	b083      	sub	sp, #12
 8008bc6:	af00      	add	r7, sp, #0
 8008bc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008bca:	bf00      	nop
 8008bcc:	370c      	adds	r7, #12
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd4:	4770      	bx	lr

08008bd6 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008bd6:	b480      	push	{r7}
 8008bd8:	b083      	sub	sp, #12
 8008bda:	af00      	add	r7, sp, #0
 8008bdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8008bde:	bf00      	nop
 8008be0:	370c      	adds	r7, #12
 8008be2:	46bd      	mov	sp, r7
 8008be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be8:	4770      	bx	lr

08008bea <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8008bea:	b480      	push	{r7}
 8008bec:	b083      	sub	sp, #12
 8008bee:	af00      	add	r7, sp, #0
 8008bf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8008bf2:	bf00      	nop
 8008bf4:	370c      	adds	r7, #12
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfc:	4770      	bx	lr

08008bfe <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8008bfe:	b580      	push	{r7, lr}
 8008c00:	b084      	sub	sp, #16
 8008c02:	af00      	add	r7, sp, #0
 8008c04:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c0a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c10:	687a      	ldr	r2, [r7, #4]
 8008c12:	429a      	cmp	r2, r3
 8008c14:	d107      	bne.n	8008c26 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	2201      	movs	r2, #1
 8008c1a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	2201      	movs	r2, #1
 8008c20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008c24:	e02a      	b.n	8008c7c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c2a:	687a      	ldr	r2, [r7, #4]
 8008c2c:	429a      	cmp	r2, r3
 8008c2e:	d107      	bne.n	8008c40 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	2202      	movs	r2, #2
 8008c34:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	2201      	movs	r2, #1
 8008c3a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008c3e:	e01d      	b.n	8008c7c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c44:	687a      	ldr	r2, [r7, #4]
 8008c46:	429a      	cmp	r2, r3
 8008c48:	d107      	bne.n	8008c5a <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	2204      	movs	r2, #4
 8008c4e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	2201      	movs	r2, #1
 8008c54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008c58:	e010      	b.n	8008c7c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c5e:	687a      	ldr	r2, [r7, #4]
 8008c60:	429a      	cmp	r2, r3
 8008c62:	d107      	bne.n	8008c74 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	2208      	movs	r2, #8
 8008c68:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	2201      	movs	r2, #1
 8008c6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008c72:	e003      	b.n	8008c7c <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	2201      	movs	r2, #1
 8008c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8008c7c:	68f8      	ldr	r0, [r7, #12]
 8008c7e:	f7ff ffb4 	bl	8008bea <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	2200      	movs	r2, #0
 8008c86:	771a      	strb	r2, [r3, #28]
}
 8008c88:	bf00      	nop
 8008c8a:	3710      	adds	r7, #16
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	bd80      	pop	{r7, pc}

08008c90 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b084      	sub	sp, #16
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c9c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ca2:	687a      	ldr	r2, [r7, #4]
 8008ca4:	429a      	cmp	r2, r3
 8008ca6:	d10b      	bne.n	8008cc0 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	2201      	movs	r2, #1
 8008cac:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	69db      	ldr	r3, [r3, #28]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d136      	bne.n	8008d24 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	2201      	movs	r2, #1
 8008cba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008cbe:	e031      	b.n	8008d24 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cc4:	687a      	ldr	r2, [r7, #4]
 8008cc6:	429a      	cmp	r2, r3
 8008cc8:	d10b      	bne.n	8008ce2 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	2202      	movs	r2, #2
 8008cce:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	69db      	ldr	r3, [r3, #28]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d125      	bne.n	8008d24 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	2201      	movs	r2, #1
 8008cdc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008ce0:	e020      	b.n	8008d24 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ce6:	687a      	ldr	r2, [r7, #4]
 8008ce8:	429a      	cmp	r2, r3
 8008cea:	d10b      	bne.n	8008d04 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	2204      	movs	r2, #4
 8008cf0:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	69db      	ldr	r3, [r3, #28]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d114      	bne.n	8008d24 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	2201      	movs	r2, #1
 8008cfe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008d02:	e00f      	b.n	8008d24 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d08:	687a      	ldr	r2, [r7, #4]
 8008d0a:	429a      	cmp	r2, r3
 8008d0c:	d10a      	bne.n	8008d24 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	2208      	movs	r2, #8
 8008d12:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	69db      	ldr	r3, [r3, #28]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d103      	bne.n	8008d24 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	2201      	movs	r2, #1
 8008d20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d24:	68f8      	ldr	r0, [r7, #12]
 8008d26:	f7ff ff4c 	bl	8008bc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	771a      	strb	r2, [r3, #28]
}
 8008d30:	bf00      	nop
 8008d32:	3710      	adds	r7, #16
 8008d34:	46bd      	mov	sp, r7
 8008d36:	bd80      	pop	{r7, pc}

08008d38 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b084      	sub	sp, #16
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d44:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d4a:	687a      	ldr	r2, [r7, #4]
 8008d4c:	429a      	cmp	r2, r3
 8008d4e:	d103      	bne.n	8008d58 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	2201      	movs	r2, #1
 8008d54:	771a      	strb	r2, [r3, #28]
 8008d56:	e019      	b.n	8008d8c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d5c:	687a      	ldr	r2, [r7, #4]
 8008d5e:	429a      	cmp	r2, r3
 8008d60:	d103      	bne.n	8008d6a <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	2202      	movs	r2, #2
 8008d66:	771a      	strb	r2, [r3, #28]
 8008d68:	e010      	b.n	8008d8c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d6e:	687a      	ldr	r2, [r7, #4]
 8008d70:	429a      	cmp	r2, r3
 8008d72:	d103      	bne.n	8008d7c <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	2204      	movs	r2, #4
 8008d78:	771a      	strb	r2, [r3, #28]
 8008d7a:	e007      	b.n	8008d8c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d80:	687a      	ldr	r2, [r7, #4]
 8008d82:	429a      	cmp	r2, r3
 8008d84:	d102      	bne.n	8008d8c <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	2208      	movs	r2, #8
 8008d8a:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8008d8c:	68f8      	ldr	r0, [r7, #12]
 8008d8e:	f7ff ff22 	bl	8008bd6 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	2200      	movs	r2, #0
 8008d96:	771a      	strb	r2, [r3, #28]
}
 8008d98:	bf00      	nop
 8008d9a:	3710      	adds	r7, #16
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	bd80      	pop	{r7, pc}

08008da0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008da0:	b480      	push	{r7}
 8008da2:	b085      	sub	sp, #20
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
 8008da8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	4a34      	ldr	r2, [pc, #208]	; (8008e84 <TIM_Base_SetConfig+0xe4>)
 8008db4:	4293      	cmp	r3, r2
 8008db6:	d00f      	beq.n	8008dd8 <TIM_Base_SetConfig+0x38>
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008dbe:	d00b      	beq.n	8008dd8 <TIM_Base_SetConfig+0x38>
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	4a31      	ldr	r2, [pc, #196]	; (8008e88 <TIM_Base_SetConfig+0xe8>)
 8008dc4:	4293      	cmp	r3, r2
 8008dc6:	d007      	beq.n	8008dd8 <TIM_Base_SetConfig+0x38>
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	4a30      	ldr	r2, [pc, #192]	; (8008e8c <TIM_Base_SetConfig+0xec>)
 8008dcc:	4293      	cmp	r3, r2
 8008dce:	d003      	beq.n	8008dd8 <TIM_Base_SetConfig+0x38>
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	4a2f      	ldr	r2, [pc, #188]	; (8008e90 <TIM_Base_SetConfig+0xf0>)
 8008dd4:	4293      	cmp	r3, r2
 8008dd6:	d108      	bne.n	8008dea <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008dde:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008de0:	683b      	ldr	r3, [r7, #0]
 8008de2:	685b      	ldr	r3, [r3, #4]
 8008de4:	68fa      	ldr	r2, [r7, #12]
 8008de6:	4313      	orrs	r3, r2
 8008de8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	4a25      	ldr	r2, [pc, #148]	; (8008e84 <TIM_Base_SetConfig+0xe4>)
 8008dee:	4293      	cmp	r3, r2
 8008df0:	d01b      	beq.n	8008e2a <TIM_Base_SetConfig+0x8a>
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008df8:	d017      	beq.n	8008e2a <TIM_Base_SetConfig+0x8a>
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	4a22      	ldr	r2, [pc, #136]	; (8008e88 <TIM_Base_SetConfig+0xe8>)
 8008dfe:	4293      	cmp	r3, r2
 8008e00:	d013      	beq.n	8008e2a <TIM_Base_SetConfig+0x8a>
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	4a21      	ldr	r2, [pc, #132]	; (8008e8c <TIM_Base_SetConfig+0xec>)
 8008e06:	4293      	cmp	r3, r2
 8008e08:	d00f      	beq.n	8008e2a <TIM_Base_SetConfig+0x8a>
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	4a20      	ldr	r2, [pc, #128]	; (8008e90 <TIM_Base_SetConfig+0xf0>)
 8008e0e:	4293      	cmp	r3, r2
 8008e10:	d00b      	beq.n	8008e2a <TIM_Base_SetConfig+0x8a>
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	4a1f      	ldr	r2, [pc, #124]	; (8008e94 <TIM_Base_SetConfig+0xf4>)
 8008e16:	4293      	cmp	r3, r2
 8008e18:	d007      	beq.n	8008e2a <TIM_Base_SetConfig+0x8a>
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	4a1e      	ldr	r2, [pc, #120]	; (8008e98 <TIM_Base_SetConfig+0xf8>)
 8008e1e:	4293      	cmp	r3, r2
 8008e20:	d003      	beq.n	8008e2a <TIM_Base_SetConfig+0x8a>
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	4a1d      	ldr	r2, [pc, #116]	; (8008e9c <TIM_Base_SetConfig+0xfc>)
 8008e26:	4293      	cmp	r3, r2
 8008e28:	d108      	bne.n	8008e3c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008e30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008e32:	683b      	ldr	r3, [r7, #0]
 8008e34:	68db      	ldr	r3, [r3, #12]
 8008e36:	68fa      	ldr	r2, [r7, #12]
 8008e38:	4313      	orrs	r3, r2
 8008e3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008e42:	683b      	ldr	r3, [r7, #0]
 8008e44:	695b      	ldr	r3, [r3, #20]
 8008e46:	4313      	orrs	r3, r2
 8008e48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	68fa      	ldr	r2, [r7, #12]
 8008e4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008e50:	683b      	ldr	r3, [r7, #0]
 8008e52:	689a      	ldr	r2, [r3, #8]
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	681a      	ldr	r2, [r3, #0]
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	4a08      	ldr	r2, [pc, #32]	; (8008e84 <TIM_Base_SetConfig+0xe4>)
 8008e64:	4293      	cmp	r3, r2
 8008e66:	d103      	bne.n	8008e70 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008e68:	683b      	ldr	r3, [r7, #0]
 8008e6a:	691a      	ldr	r2, [r3, #16]
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	2201      	movs	r2, #1
 8008e74:	615a      	str	r2, [r3, #20]
}
 8008e76:	bf00      	nop
 8008e78:	3714      	adds	r7, #20
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e80:	4770      	bx	lr
 8008e82:	bf00      	nop
 8008e84:	40010000 	.word	0x40010000
 8008e88:	40000400 	.word	0x40000400
 8008e8c:	40000800 	.word	0x40000800
 8008e90:	40000c00 	.word	0x40000c00
 8008e94:	40014000 	.word	0x40014000
 8008e98:	40014400 	.word	0x40014400
 8008e9c:	40014800 	.word	0x40014800

08008ea0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008ea0:	b480      	push	{r7}
 8008ea2:	b087      	sub	sp, #28
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
 8008ea8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	6a1b      	ldr	r3, [r3, #32]
 8008eae:	f023 0201 	bic.w	r2, r3, #1
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	6a1b      	ldr	r3, [r3, #32]
 8008eba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	685b      	ldr	r3, [r3, #4]
 8008ec0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	699b      	ldr	r3, [r3, #24]
 8008ec6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ece:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	f023 0303 	bic.w	r3, r3, #3
 8008ed6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008ed8:	683b      	ldr	r3, [r7, #0]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	68fa      	ldr	r2, [r7, #12]
 8008ede:	4313      	orrs	r3, r2
 8008ee0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008ee2:	697b      	ldr	r3, [r7, #20]
 8008ee4:	f023 0302 	bic.w	r3, r3, #2
 8008ee8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008eea:	683b      	ldr	r3, [r7, #0]
 8008eec:	689b      	ldr	r3, [r3, #8]
 8008eee:	697a      	ldr	r2, [r7, #20]
 8008ef0:	4313      	orrs	r3, r2
 8008ef2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	4a1c      	ldr	r2, [pc, #112]	; (8008f68 <TIM_OC1_SetConfig+0xc8>)
 8008ef8:	4293      	cmp	r3, r2
 8008efa:	d10c      	bne.n	8008f16 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008efc:	697b      	ldr	r3, [r7, #20]
 8008efe:	f023 0308 	bic.w	r3, r3, #8
 8008f02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008f04:	683b      	ldr	r3, [r7, #0]
 8008f06:	68db      	ldr	r3, [r3, #12]
 8008f08:	697a      	ldr	r2, [r7, #20]
 8008f0a:	4313      	orrs	r3, r2
 8008f0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008f0e:	697b      	ldr	r3, [r7, #20]
 8008f10:	f023 0304 	bic.w	r3, r3, #4
 8008f14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	4a13      	ldr	r2, [pc, #76]	; (8008f68 <TIM_OC1_SetConfig+0xc8>)
 8008f1a:	4293      	cmp	r3, r2
 8008f1c:	d111      	bne.n	8008f42 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008f1e:	693b      	ldr	r3, [r7, #16]
 8008f20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008f24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008f26:	693b      	ldr	r3, [r7, #16]
 8008f28:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008f2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008f2e:	683b      	ldr	r3, [r7, #0]
 8008f30:	695b      	ldr	r3, [r3, #20]
 8008f32:	693a      	ldr	r2, [r7, #16]
 8008f34:	4313      	orrs	r3, r2
 8008f36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008f38:	683b      	ldr	r3, [r7, #0]
 8008f3a:	699b      	ldr	r3, [r3, #24]
 8008f3c:	693a      	ldr	r2, [r7, #16]
 8008f3e:	4313      	orrs	r3, r2
 8008f40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	693a      	ldr	r2, [r7, #16]
 8008f46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	68fa      	ldr	r2, [r7, #12]
 8008f4c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008f4e:	683b      	ldr	r3, [r7, #0]
 8008f50:	685a      	ldr	r2, [r3, #4]
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	697a      	ldr	r2, [r7, #20]
 8008f5a:	621a      	str	r2, [r3, #32]
}
 8008f5c:	bf00      	nop
 8008f5e:	371c      	adds	r7, #28
 8008f60:	46bd      	mov	sp, r7
 8008f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f66:	4770      	bx	lr
 8008f68:	40010000 	.word	0x40010000

08008f6c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008f6c:	b480      	push	{r7}
 8008f6e:	b087      	sub	sp, #28
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
 8008f74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	6a1b      	ldr	r3, [r3, #32]
 8008f7a:	f023 0210 	bic.w	r2, r3, #16
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	6a1b      	ldr	r3, [r3, #32]
 8008f86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	685b      	ldr	r3, [r3, #4]
 8008f8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	699b      	ldr	r3, [r3, #24]
 8008f92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008fa2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008fa4:	683b      	ldr	r3, [r7, #0]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	021b      	lsls	r3, r3, #8
 8008faa:	68fa      	ldr	r2, [r7, #12]
 8008fac:	4313      	orrs	r3, r2
 8008fae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008fb0:	697b      	ldr	r3, [r7, #20]
 8008fb2:	f023 0320 	bic.w	r3, r3, #32
 8008fb6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008fb8:	683b      	ldr	r3, [r7, #0]
 8008fba:	689b      	ldr	r3, [r3, #8]
 8008fbc:	011b      	lsls	r3, r3, #4
 8008fbe:	697a      	ldr	r2, [r7, #20]
 8008fc0:	4313      	orrs	r3, r2
 8008fc2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	4a1e      	ldr	r2, [pc, #120]	; (8009040 <TIM_OC2_SetConfig+0xd4>)
 8008fc8:	4293      	cmp	r3, r2
 8008fca:	d10d      	bne.n	8008fe8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008fcc:	697b      	ldr	r3, [r7, #20]
 8008fce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008fd2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008fd4:	683b      	ldr	r3, [r7, #0]
 8008fd6:	68db      	ldr	r3, [r3, #12]
 8008fd8:	011b      	lsls	r3, r3, #4
 8008fda:	697a      	ldr	r2, [r7, #20]
 8008fdc:	4313      	orrs	r3, r2
 8008fde:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008fe0:	697b      	ldr	r3, [r7, #20]
 8008fe2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008fe6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	4a15      	ldr	r2, [pc, #84]	; (8009040 <TIM_OC2_SetConfig+0xd4>)
 8008fec:	4293      	cmp	r3, r2
 8008fee:	d113      	bne.n	8009018 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008ff0:	693b      	ldr	r3, [r7, #16]
 8008ff2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008ff6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008ff8:	693b      	ldr	r3, [r7, #16]
 8008ffa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008ffe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009000:	683b      	ldr	r3, [r7, #0]
 8009002:	695b      	ldr	r3, [r3, #20]
 8009004:	009b      	lsls	r3, r3, #2
 8009006:	693a      	ldr	r2, [r7, #16]
 8009008:	4313      	orrs	r3, r2
 800900a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800900c:	683b      	ldr	r3, [r7, #0]
 800900e:	699b      	ldr	r3, [r3, #24]
 8009010:	009b      	lsls	r3, r3, #2
 8009012:	693a      	ldr	r2, [r7, #16]
 8009014:	4313      	orrs	r3, r2
 8009016:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	693a      	ldr	r2, [r7, #16]
 800901c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	68fa      	ldr	r2, [r7, #12]
 8009022:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009024:	683b      	ldr	r3, [r7, #0]
 8009026:	685a      	ldr	r2, [r3, #4]
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	697a      	ldr	r2, [r7, #20]
 8009030:	621a      	str	r2, [r3, #32]
}
 8009032:	bf00      	nop
 8009034:	371c      	adds	r7, #28
 8009036:	46bd      	mov	sp, r7
 8009038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903c:	4770      	bx	lr
 800903e:	bf00      	nop
 8009040:	40010000 	.word	0x40010000

08009044 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009044:	b480      	push	{r7}
 8009046:	b087      	sub	sp, #28
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
 800904c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	6a1b      	ldr	r3, [r3, #32]
 8009052:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	6a1b      	ldr	r3, [r3, #32]
 800905e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	685b      	ldr	r3, [r3, #4]
 8009064:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	69db      	ldr	r3, [r3, #28]
 800906a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009072:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	f023 0303 	bic.w	r3, r3, #3
 800907a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800907c:	683b      	ldr	r3, [r7, #0]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	68fa      	ldr	r2, [r7, #12]
 8009082:	4313      	orrs	r3, r2
 8009084:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009086:	697b      	ldr	r3, [r7, #20]
 8009088:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800908c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800908e:	683b      	ldr	r3, [r7, #0]
 8009090:	689b      	ldr	r3, [r3, #8]
 8009092:	021b      	lsls	r3, r3, #8
 8009094:	697a      	ldr	r2, [r7, #20]
 8009096:	4313      	orrs	r3, r2
 8009098:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	4a1d      	ldr	r2, [pc, #116]	; (8009114 <TIM_OC3_SetConfig+0xd0>)
 800909e:	4293      	cmp	r3, r2
 80090a0:	d10d      	bne.n	80090be <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80090a2:	697b      	ldr	r3, [r7, #20]
 80090a4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80090a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80090aa:	683b      	ldr	r3, [r7, #0]
 80090ac:	68db      	ldr	r3, [r3, #12]
 80090ae:	021b      	lsls	r3, r3, #8
 80090b0:	697a      	ldr	r2, [r7, #20]
 80090b2:	4313      	orrs	r3, r2
 80090b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80090b6:	697b      	ldr	r3, [r7, #20]
 80090b8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80090bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	4a14      	ldr	r2, [pc, #80]	; (8009114 <TIM_OC3_SetConfig+0xd0>)
 80090c2:	4293      	cmp	r3, r2
 80090c4:	d113      	bne.n	80090ee <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80090c6:	693b      	ldr	r3, [r7, #16]
 80090c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80090cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80090ce:	693b      	ldr	r3, [r7, #16]
 80090d0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80090d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80090d6:	683b      	ldr	r3, [r7, #0]
 80090d8:	695b      	ldr	r3, [r3, #20]
 80090da:	011b      	lsls	r3, r3, #4
 80090dc:	693a      	ldr	r2, [r7, #16]
 80090de:	4313      	orrs	r3, r2
 80090e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80090e2:	683b      	ldr	r3, [r7, #0]
 80090e4:	699b      	ldr	r3, [r3, #24]
 80090e6:	011b      	lsls	r3, r3, #4
 80090e8:	693a      	ldr	r2, [r7, #16]
 80090ea:	4313      	orrs	r3, r2
 80090ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	693a      	ldr	r2, [r7, #16]
 80090f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	68fa      	ldr	r2, [r7, #12]
 80090f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80090fa:	683b      	ldr	r3, [r7, #0]
 80090fc:	685a      	ldr	r2, [r3, #4]
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	697a      	ldr	r2, [r7, #20]
 8009106:	621a      	str	r2, [r3, #32]
}
 8009108:	bf00      	nop
 800910a:	371c      	adds	r7, #28
 800910c:	46bd      	mov	sp, r7
 800910e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009112:	4770      	bx	lr
 8009114:	40010000 	.word	0x40010000

08009118 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009118:	b480      	push	{r7}
 800911a:	b087      	sub	sp, #28
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
 8009120:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	6a1b      	ldr	r3, [r3, #32]
 8009126:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	6a1b      	ldr	r3, [r3, #32]
 8009132:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	685b      	ldr	r3, [r3, #4]
 8009138:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	69db      	ldr	r3, [r3, #28]
 800913e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009146:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800914e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009150:	683b      	ldr	r3, [r7, #0]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	021b      	lsls	r3, r3, #8
 8009156:	68fa      	ldr	r2, [r7, #12]
 8009158:	4313      	orrs	r3, r2
 800915a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800915c:	693b      	ldr	r3, [r7, #16]
 800915e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009162:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009164:	683b      	ldr	r3, [r7, #0]
 8009166:	689b      	ldr	r3, [r3, #8]
 8009168:	031b      	lsls	r3, r3, #12
 800916a:	693a      	ldr	r2, [r7, #16]
 800916c:	4313      	orrs	r3, r2
 800916e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	4a10      	ldr	r2, [pc, #64]	; (80091b4 <TIM_OC4_SetConfig+0x9c>)
 8009174:	4293      	cmp	r3, r2
 8009176:	d109      	bne.n	800918c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009178:	697b      	ldr	r3, [r7, #20]
 800917a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800917e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009180:	683b      	ldr	r3, [r7, #0]
 8009182:	695b      	ldr	r3, [r3, #20]
 8009184:	019b      	lsls	r3, r3, #6
 8009186:	697a      	ldr	r2, [r7, #20]
 8009188:	4313      	orrs	r3, r2
 800918a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	697a      	ldr	r2, [r7, #20]
 8009190:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	68fa      	ldr	r2, [r7, #12]
 8009196:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009198:	683b      	ldr	r3, [r7, #0]
 800919a:	685a      	ldr	r2, [r3, #4]
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	693a      	ldr	r2, [r7, #16]
 80091a4:	621a      	str	r2, [r3, #32]
}
 80091a6:	bf00      	nop
 80091a8:	371c      	adds	r7, #28
 80091aa:	46bd      	mov	sp, r7
 80091ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b0:	4770      	bx	lr
 80091b2:	bf00      	nop
 80091b4:	40010000 	.word	0x40010000

080091b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80091b8:	b480      	push	{r7}
 80091ba:	b087      	sub	sp, #28
 80091bc:	af00      	add	r7, sp, #0
 80091be:	60f8      	str	r0, [r7, #12]
 80091c0:	60b9      	str	r1, [r7, #8]
 80091c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	6a1b      	ldr	r3, [r3, #32]
 80091c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	6a1b      	ldr	r3, [r3, #32]
 80091ce:	f023 0201 	bic.w	r2, r3, #1
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	699b      	ldr	r3, [r3, #24]
 80091da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80091dc:	693b      	ldr	r3, [r7, #16]
 80091de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80091e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	011b      	lsls	r3, r3, #4
 80091e8:	693a      	ldr	r2, [r7, #16]
 80091ea:	4313      	orrs	r3, r2
 80091ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80091ee:	697b      	ldr	r3, [r7, #20]
 80091f0:	f023 030a 	bic.w	r3, r3, #10
 80091f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80091f6:	697a      	ldr	r2, [r7, #20]
 80091f8:	68bb      	ldr	r3, [r7, #8]
 80091fa:	4313      	orrs	r3, r2
 80091fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	693a      	ldr	r2, [r7, #16]
 8009202:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	697a      	ldr	r2, [r7, #20]
 8009208:	621a      	str	r2, [r3, #32]
}
 800920a:	bf00      	nop
 800920c:	371c      	adds	r7, #28
 800920e:	46bd      	mov	sp, r7
 8009210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009214:	4770      	bx	lr

08009216 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009216:	b480      	push	{r7}
 8009218:	b087      	sub	sp, #28
 800921a:	af00      	add	r7, sp, #0
 800921c:	60f8      	str	r0, [r7, #12]
 800921e:	60b9      	str	r1, [r7, #8]
 8009220:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	6a1b      	ldr	r3, [r3, #32]
 8009226:	f023 0210 	bic.w	r2, r3, #16
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	699b      	ldr	r3, [r3, #24]
 8009232:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	6a1b      	ldr	r3, [r3, #32]
 8009238:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800923a:	697b      	ldr	r3, [r7, #20]
 800923c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009240:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	031b      	lsls	r3, r3, #12
 8009246:	697a      	ldr	r2, [r7, #20]
 8009248:	4313      	orrs	r3, r2
 800924a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800924c:	693b      	ldr	r3, [r7, #16]
 800924e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009252:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009254:	68bb      	ldr	r3, [r7, #8]
 8009256:	011b      	lsls	r3, r3, #4
 8009258:	693a      	ldr	r2, [r7, #16]
 800925a:	4313      	orrs	r3, r2
 800925c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	697a      	ldr	r2, [r7, #20]
 8009262:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	693a      	ldr	r2, [r7, #16]
 8009268:	621a      	str	r2, [r3, #32]
}
 800926a:	bf00      	nop
 800926c:	371c      	adds	r7, #28
 800926e:	46bd      	mov	sp, r7
 8009270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009274:	4770      	bx	lr

08009276 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009276:	b480      	push	{r7}
 8009278:	b085      	sub	sp, #20
 800927a:	af00      	add	r7, sp, #0
 800927c:	6078      	str	r0, [r7, #4]
 800927e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	689b      	ldr	r3, [r3, #8]
 8009284:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800928c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800928e:	683a      	ldr	r2, [r7, #0]
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	4313      	orrs	r3, r2
 8009294:	f043 0307 	orr.w	r3, r3, #7
 8009298:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	68fa      	ldr	r2, [r7, #12]
 800929e:	609a      	str	r2, [r3, #8]
}
 80092a0:	bf00      	nop
 80092a2:	3714      	adds	r7, #20
 80092a4:	46bd      	mov	sp, r7
 80092a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092aa:	4770      	bx	lr

080092ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80092ac:	b480      	push	{r7}
 80092ae:	b087      	sub	sp, #28
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	60f8      	str	r0, [r7, #12]
 80092b4:	60b9      	str	r1, [r7, #8]
 80092b6:	607a      	str	r2, [r7, #4]
 80092b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	689b      	ldr	r3, [r3, #8]
 80092be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80092c0:	697b      	ldr	r3, [r7, #20]
 80092c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80092c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80092c8:	683b      	ldr	r3, [r7, #0]
 80092ca:	021a      	lsls	r2, r3, #8
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	431a      	orrs	r2, r3
 80092d0:	68bb      	ldr	r3, [r7, #8]
 80092d2:	4313      	orrs	r3, r2
 80092d4:	697a      	ldr	r2, [r7, #20]
 80092d6:	4313      	orrs	r3, r2
 80092d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	697a      	ldr	r2, [r7, #20]
 80092de:	609a      	str	r2, [r3, #8]
}
 80092e0:	bf00      	nop
 80092e2:	371c      	adds	r7, #28
 80092e4:	46bd      	mov	sp, r7
 80092e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ea:	4770      	bx	lr

080092ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80092ec:	b480      	push	{r7}
 80092ee:	b087      	sub	sp, #28
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	60f8      	str	r0, [r7, #12]
 80092f4:	60b9      	str	r1, [r7, #8]
 80092f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80092f8:	68bb      	ldr	r3, [r7, #8]
 80092fa:	f003 031f 	and.w	r3, r3, #31
 80092fe:	2201      	movs	r2, #1
 8009300:	fa02 f303 	lsl.w	r3, r2, r3
 8009304:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	6a1a      	ldr	r2, [r3, #32]
 800930a:	697b      	ldr	r3, [r7, #20]
 800930c:	43db      	mvns	r3, r3
 800930e:	401a      	ands	r2, r3
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	6a1a      	ldr	r2, [r3, #32]
 8009318:	68bb      	ldr	r3, [r7, #8]
 800931a:	f003 031f 	and.w	r3, r3, #31
 800931e:	6879      	ldr	r1, [r7, #4]
 8009320:	fa01 f303 	lsl.w	r3, r1, r3
 8009324:	431a      	orrs	r2, r3
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	621a      	str	r2, [r3, #32]
}
 800932a:	bf00      	nop
 800932c:	371c      	adds	r7, #28
 800932e:	46bd      	mov	sp, r7
 8009330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009334:	4770      	bx	lr
	...

08009338 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009338:	b480      	push	{r7}
 800933a:	b085      	sub	sp, #20
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
 8009340:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009348:	2b01      	cmp	r3, #1
 800934a:	d101      	bne.n	8009350 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800934c:	2302      	movs	r3, #2
 800934e:	e050      	b.n	80093f2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	2201      	movs	r2, #1
 8009354:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	2202      	movs	r2, #2
 800935c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	685b      	ldr	r3, [r3, #4]
 8009366:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	689b      	ldr	r3, [r3, #8]
 800936e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009376:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009378:	683b      	ldr	r3, [r7, #0]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	68fa      	ldr	r2, [r7, #12]
 800937e:	4313      	orrs	r3, r2
 8009380:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	68fa      	ldr	r2, [r7, #12]
 8009388:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	4a1c      	ldr	r2, [pc, #112]	; (8009400 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8009390:	4293      	cmp	r3, r2
 8009392:	d018      	beq.n	80093c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800939c:	d013      	beq.n	80093c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	4a18      	ldr	r2, [pc, #96]	; (8009404 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80093a4:	4293      	cmp	r3, r2
 80093a6:	d00e      	beq.n	80093c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	4a16      	ldr	r2, [pc, #88]	; (8009408 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80093ae:	4293      	cmp	r3, r2
 80093b0:	d009      	beq.n	80093c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	4a15      	ldr	r2, [pc, #84]	; (800940c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80093b8:	4293      	cmp	r3, r2
 80093ba:	d004      	beq.n	80093c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	4a13      	ldr	r2, [pc, #76]	; (8009410 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80093c2:	4293      	cmp	r3, r2
 80093c4:	d10c      	bne.n	80093e0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80093c6:	68bb      	ldr	r3, [r7, #8]
 80093c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80093cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80093ce:	683b      	ldr	r3, [r7, #0]
 80093d0:	685b      	ldr	r3, [r3, #4]
 80093d2:	68ba      	ldr	r2, [r7, #8]
 80093d4:	4313      	orrs	r3, r2
 80093d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	68ba      	ldr	r2, [r7, #8]
 80093de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	2201      	movs	r2, #1
 80093e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	2200      	movs	r2, #0
 80093ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80093f0:	2300      	movs	r3, #0
}
 80093f2:	4618      	mov	r0, r3
 80093f4:	3714      	adds	r7, #20
 80093f6:	46bd      	mov	sp, r7
 80093f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093fc:	4770      	bx	lr
 80093fe:	bf00      	nop
 8009400:	40010000 	.word	0x40010000
 8009404:	40000400 	.word	0x40000400
 8009408:	40000800 	.word	0x40000800
 800940c:	40000c00 	.word	0x40000c00
 8009410:	40014000 	.word	0x40014000

08009414 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b08a      	sub	sp, #40	; 0x28
 8009418:	af02      	add	r7, sp, #8
 800941a:	60f8      	str	r0, [r7, #12]
 800941c:	60b9      	str	r1, [r7, #8]
 800941e:	603b      	str	r3, [r7, #0]
 8009420:	4613      	mov	r3, r2
 8009422:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009424:	2300      	movs	r3, #0
 8009426:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800942e:	b2db      	uxtb	r3, r3
 8009430:	2b20      	cmp	r3, #32
 8009432:	d17c      	bne.n	800952e <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009434:	68bb      	ldr	r3, [r7, #8]
 8009436:	2b00      	cmp	r3, #0
 8009438:	d002      	beq.n	8009440 <HAL_UART_Transmit+0x2c>
 800943a:	88fb      	ldrh	r3, [r7, #6]
 800943c:	2b00      	cmp	r3, #0
 800943e:	d101      	bne.n	8009444 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009440:	2301      	movs	r3, #1
 8009442:	e075      	b.n	8009530 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800944a:	2b01      	cmp	r3, #1
 800944c:	d101      	bne.n	8009452 <HAL_UART_Transmit+0x3e>
 800944e:	2302      	movs	r3, #2
 8009450:	e06e      	b.n	8009530 <HAL_UART_Transmit+0x11c>
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	2201      	movs	r2, #1
 8009456:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	2200      	movs	r2, #0
 800945e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	2221      	movs	r2, #33	; 0x21
 8009464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009468:	f7f9 fe16 	bl	8003098 <HAL_GetTick>
 800946c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	88fa      	ldrh	r2, [r7, #6]
 8009472:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	88fa      	ldrh	r2, [r7, #6]
 8009478:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	689b      	ldr	r3, [r3, #8]
 800947e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009482:	d108      	bne.n	8009496 <HAL_UART_Transmit+0x82>
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	691b      	ldr	r3, [r3, #16]
 8009488:	2b00      	cmp	r3, #0
 800948a:	d104      	bne.n	8009496 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800948c:	2300      	movs	r3, #0
 800948e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009490:	68bb      	ldr	r3, [r7, #8]
 8009492:	61bb      	str	r3, [r7, #24]
 8009494:	e003      	b.n	800949e <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8009496:	68bb      	ldr	r3, [r7, #8]
 8009498:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800949a:	2300      	movs	r3, #0
 800949c:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	2200      	movs	r2, #0
 80094a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80094a6:	e02a      	b.n	80094fe <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80094a8:	683b      	ldr	r3, [r7, #0]
 80094aa:	9300      	str	r3, [sp, #0]
 80094ac:	697b      	ldr	r3, [r7, #20]
 80094ae:	2200      	movs	r2, #0
 80094b0:	2180      	movs	r1, #128	; 0x80
 80094b2:	68f8      	ldr	r0, [r7, #12]
 80094b4:	f000 f840 	bl	8009538 <UART_WaitOnFlagUntilTimeout>
 80094b8:	4603      	mov	r3, r0
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d001      	beq.n	80094c2 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80094be:	2303      	movs	r3, #3
 80094c0:	e036      	b.n	8009530 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80094c2:	69fb      	ldr	r3, [r7, #28]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d10b      	bne.n	80094e0 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80094c8:	69bb      	ldr	r3, [r7, #24]
 80094ca:	881b      	ldrh	r3, [r3, #0]
 80094cc:	461a      	mov	r2, r3
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80094d6:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80094d8:	69bb      	ldr	r3, [r7, #24]
 80094da:	3302      	adds	r3, #2
 80094dc:	61bb      	str	r3, [r7, #24]
 80094de:	e007      	b.n	80094f0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80094e0:	69fb      	ldr	r3, [r7, #28]
 80094e2:	781a      	ldrb	r2, [r3, #0]
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80094ea:	69fb      	ldr	r3, [r7, #28]
 80094ec:	3301      	adds	r3, #1
 80094ee:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80094f4:	b29b      	uxth	r3, r3
 80094f6:	3b01      	subs	r3, #1
 80094f8:	b29a      	uxth	r2, r3
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009502:	b29b      	uxth	r3, r3
 8009504:	2b00      	cmp	r3, #0
 8009506:	d1cf      	bne.n	80094a8 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009508:	683b      	ldr	r3, [r7, #0]
 800950a:	9300      	str	r3, [sp, #0]
 800950c:	697b      	ldr	r3, [r7, #20]
 800950e:	2200      	movs	r2, #0
 8009510:	2140      	movs	r1, #64	; 0x40
 8009512:	68f8      	ldr	r0, [r7, #12]
 8009514:	f000 f810 	bl	8009538 <UART_WaitOnFlagUntilTimeout>
 8009518:	4603      	mov	r3, r0
 800951a:	2b00      	cmp	r3, #0
 800951c:	d001      	beq.n	8009522 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800951e:	2303      	movs	r3, #3
 8009520:	e006      	b.n	8009530 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	2220      	movs	r2, #32
 8009526:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800952a:	2300      	movs	r3, #0
 800952c:	e000      	b.n	8009530 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800952e:	2302      	movs	r3, #2
  }
}
 8009530:	4618      	mov	r0, r3
 8009532:	3720      	adds	r7, #32
 8009534:	46bd      	mov	sp, r7
 8009536:	bd80      	pop	{r7, pc}

08009538 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009538:	b580      	push	{r7, lr}
 800953a:	b090      	sub	sp, #64	; 0x40
 800953c:	af00      	add	r7, sp, #0
 800953e:	60f8      	str	r0, [r7, #12]
 8009540:	60b9      	str	r1, [r7, #8]
 8009542:	603b      	str	r3, [r7, #0]
 8009544:	4613      	mov	r3, r2
 8009546:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009548:	e050      	b.n	80095ec <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800954a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800954c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009550:	d04c      	beq.n	80095ec <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009552:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009554:	2b00      	cmp	r3, #0
 8009556:	d007      	beq.n	8009568 <UART_WaitOnFlagUntilTimeout+0x30>
 8009558:	f7f9 fd9e 	bl	8003098 <HAL_GetTick>
 800955c:	4602      	mov	r2, r0
 800955e:	683b      	ldr	r3, [r7, #0]
 8009560:	1ad3      	subs	r3, r2, r3
 8009562:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009564:	429a      	cmp	r2, r3
 8009566:	d241      	bcs.n	80095ec <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	330c      	adds	r3, #12
 800956e:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009572:	e853 3f00 	ldrex	r3, [r3]
 8009576:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800957a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800957e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	330c      	adds	r3, #12
 8009586:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009588:	637a      	str	r2, [r7, #52]	; 0x34
 800958a:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800958c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800958e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009590:	e841 2300 	strex	r3, r2, [r1]
 8009594:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009598:	2b00      	cmp	r3, #0
 800959a:	d1e5      	bne.n	8009568 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	3314      	adds	r3, #20
 80095a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095a4:	697b      	ldr	r3, [r7, #20]
 80095a6:	e853 3f00 	ldrex	r3, [r3]
 80095aa:	613b      	str	r3, [r7, #16]
   return(result);
 80095ac:	693b      	ldr	r3, [r7, #16]
 80095ae:	f023 0301 	bic.w	r3, r3, #1
 80095b2:	63bb      	str	r3, [r7, #56]	; 0x38
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	3314      	adds	r3, #20
 80095ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80095bc:	623a      	str	r2, [r7, #32]
 80095be:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095c0:	69f9      	ldr	r1, [r7, #28]
 80095c2:	6a3a      	ldr	r2, [r7, #32]
 80095c4:	e841 2300 	strex	r3, r2, [r1]
 80095c8:	61bb      	str	r3, [r7, #24]
   return(result);
 80095ca:	69bb      	ldr	r3, [r7, #24]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d1e5      	bne.n	800959c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	2220      	movs	r2, #32
 80095d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	2220      	movs	r2, #32
 80095dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	2200      	movs	r2, #0
 80095e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80095e8:	2303      	movs	r3, #3
 80095ea:	e00f      	b.n	800960c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	681a      	ldr	r2, [r3, #0]
 80095f2:	68bb      	ldr	r3, [r7, #8]
 80095f4:	4013      	ands	r3, r2
 80095f6:	68ba      	ldr	r2, [r7, #8]
 80095f8:	429a      	cmp	r2, r3
 80095fa:	bf0c      	ite	eq
 80095fc:	2301      	moveq	r3, #1
 80095fe:	2300      	movne	r3, #0
 8009600:	b2db      	uxtb	r3, r3
 8009602:	461a      	mov	r2, r3
 8009604:	79fb      	ldrb	r3, [r7, #7]
 8009606:	429a      	cmp	r2, r3
 8009608:	d09f      	beq.n	800954a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800960a:	2300      	movs	r3, #0
}
 800960c:	4618      	mov	r0, r3
 800960e:	3740      	adds	r7, #64	; 0x40
 8009610:	46bd      	mov	sp, r7
 8009612:	bd80      	pop	{r7, pc}

08009614 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009614:	b084      	sub	sp, #16
 8009616:	b580      	push	{r7, lr}
 8009618:	b084      	sub	sp, #16
 800961a:	af00      	add	r7, sp, #0
 800961c:	6078      	str	r0, [r7, #4]
 800961e:	f107 001c 	add.w	r0, r7, #28
 8009622:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009628:	2b01      	cmp	r3, #1
 800962a:	d122      	bne.n	8009672 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009630:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	68db      	ldr	r3, [r3, #12]
 800963c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8009640:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009644:	687a      	ldr	r2, [r7, #4]
 8009646:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	68db      	ldr	r3, [r3, #12]
 800964c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009654:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009656:	2b01      	cmp	r3, #1
 8009658:	d105      	bne.n	8009666 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	68db      	ldr	r3, [r3, #12]
 800965e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009666:	6878      	ldr	r0, [r7, #4]
 8009668:	f001 fbee 	bl	800ae48 <USB_CoreReset>
 800966c:	4603      	mov	r3, r0
 800966e:	73fb      	strb	r3, [r7, #15]
 8009670:	e01a      	b.n	80096a8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	68db      	ldr	r3, [r3, #12]
 8009676:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800967e:	6878      	ldr	r0, [r7, #4]
 8009680:	f001 fbe2 	bl	800ae48 <USB_CoreReset>
 8009684:	4603      	mov	r3, r0
 8009686:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009688:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800968a:	2b00      	cmp	r3, #0
 800968c:	d106      	bne.n	800969c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009692:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	639a      	str	r2, [r3, #56]	; 0x38
 800969a:	e005      	b.n	80096a8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096a0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80096a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096aa:	2b01      	cmp	r3, #1
 80096ac:	d10b      	bne.n	80096c6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	689b      	ldr	r3, [r3, #8]
 80096b2:	f043 0206 	orr.w	r2, r3, #6
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	689b      	ldr	r3, [r3, #8]
 80096be:	f043 0220 	orr.w	r2, r3, #32
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80096c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80096c8:	4618      	mov	r0, r3
 80096ca:	3710      	adds	r7, #16
 80096cc:	46bd      	mov	sp, r7
 80096ce:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80096d2:	b004      	add	sp, #16
 80096d4:	4770      	bx	lr
	...

080096d8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80096d8:	b480      	push	{r7}
 80096da:	b087      	sub	sp, #28
 80096dc:	af00      	add	r7, sp, #0
 80096de:	60f8      	str	r0, [r7, #12]
 80096e0:	60b9      	str	r1, [r7, #8]
 80096e2:	4613      	mov	r3, r2
 80096e4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80096e6:	79fb      	ldrb	r3, [r7, #7]
 80096e8:	2b02      	cmp	r3, #2
 80096ea:	d165      	bne.n	80097b8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80096ec:	68bb      	ldr	r3, [r7, #8]
 80096ee:	4a41      	ldr	r2, [pc, #260]	; (80097f4 <USB_SetTurnaroundTime+0x11c>)
 80096f0:	4293      	cmp	r3, r2
 80096f2:	d906      	bls.n	8009702 <USB_SetTurnaroundTime+0x2a>
 80096f4:	68bb      	ldr	r3, [r7, #8]
 80096f6:	4a40      	ldr	r2, [pc, #256]	; (80097f8 <USB_SetTurnaroundTime+0x120>)
 80096f8:	4293      	cmp	r3, r2
 80096fa:	d202      	bcs.n	8009702 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80096fc:	230f      	movs	r3, #15
 80096fe:	617b      	str	r3, [r7, #20]
 8009700:	e062      	b.n	80097c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8009702:	68bb      	ldr	r3, [r7, #8]
 8009704:	4a3c      	ldr	r2, [pc, #240]	; (80097f8 <USB_SetTurnaroundTime+0x120>)
 8009706:	4293      	cmp	r3, r2
 8009708:	d306      	bcc.n	8009718 <USB_SetTurnaroundTime+0x40>
 800970a:	68bb      	ldr	r3, [r7, #8]
 800970c:	4a3b      	ldr	r2, [pc, #236]	; (80097fc <USB_SetTurnaroundTime+0x124>)
 800970e:	4293      	cmp	r3, r2
 8009710:	d202      	bcs.n	8009718 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8009712:	230e      	movs	r3, #14
 8009714:	617b      	str	r3, [r7, #20]
 8009716:	e057      	b.n	80097c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009718:	68bb      	ldr	r3, [r7, #8]
 800971a:	4a38      	ldr	r2, [pc, #224]	; (80097fc <USB_SetTurnaroundTime+0x124>)
 800971c:	4293      	cmp	r3, r2
 800971e:	d306      	bcc.n	800972e <USB_SetTurnaroundTime+0x56>
 8009720:	68bb      	ldr	r3, [r7, #8]
 8009722:	4a37      	ldr	r2, [pc, #220]	; (8009800 <USB_SetTurnaroundTime+0x128>)
 8009724:	4293      	cmp	r3, r2
 8009726:	d202      	bcs.n	800972e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8009728:	230d      	movs	r3, #13
 800972a:	617b      	str	r3, [r7, #20]
 800972c:	e04c      	b.n	80097c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800972e:	68bb      	ldr	r3, [r7, #8]
 8009730:	4a33      	ldr	r2, [pc, #204]	; (8009800 <USB_SetTurnaroundTime+0x128>)
 8009732:	4293      	cmp	r3, r2
 8009734:	d306      	bcc.n	8009744 <USB_SetTurnaroundTime+0x6c>
 8009736:	68bb      	ldr	r3, [r7, #8]
 8009738:	4a32      	ldr	r2, [pc, #200]	; (8009804 <USB_SetTurnaroundTime+0x12c>)
 800973a:	4293      	cmp	r3, r2
 800973c:	d802      	bhi.n	8009744 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800973e:	230c      	movs	r3, #12
 8009740:	617b      	str	r3, [r7, #20]
 8009742:	e041      	b.n	80097c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8009744:	68bb      	ldr	r3, [r7, #8]
 8009746:	4a2f      	ldr	r2, [pc, #188]	; (8009804 <USB_SetTurnaroundTime+0x12c>)
 8009748:	4293      	cmp	r3, r2
 800974a:	d906      	bls.n	800975a <USB_SetTurnaroundTime+0x82>
 800974c:	68bb      	ldr	r3, [r7, #8]
 800974e:	4a2e      	ldr	r2, [pc, #184]	; (8009808 <USB_SetTurnaroundTime+0x130>)
 8009750:	4293      	cmp	r3, r2
 8009752:	d802      	bhi.n	800975a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8009754:	230b      	movs	r3, #11
 8009756:	617b      	str	r3, [r7, #20]
 8009758:	e036      	b.n	80097c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800975a:	68bb      	ldr	r3, [r7, #8]
 800975c:	4a2a      	ldr	r2, [pc, #168]	; (8009808 <USB_SetTurnaroundTime+0x130>)
 800975e:	4293      	cmp	r3, r2
 8009760:	d906      	bls.n	8009770 <USB_SetTurnaroundTime+0x98>
 8009762:	68bb      	ldr	r3, [r7, #8]
 8009764:	4a29      	ldr	r2, [pc, #164]	; (800980c <USB_SetTurnaroundTime+0x134>)
 8009766:	4293      	cmp	r3, r2
 8009768:	d802      	bhi.n	8009770 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800976a:	230a      	movs	r3, #10
 800976c:	617b      	str	r3, [r7, #20]
 800976e:	e02b      	b.n	80097c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8009770:	68bb      	ldr	r3, [r7, #8]
 8009772:	4a26      	ldr	r2, [pc, #152]	; (800980c <USB_SetTurnaroundTime+0x134>)
 8009774:	4293      	cmp	r3, r2
 8009776:	d906      	bls.n	8009786 <USB_SetTurnaroundTime+0xae>
 8009778:	68bb      	ldr	r3, [r7, #8]
 800977a:	4a25      	ldr	r2, [pc, #148]	; (8009810 <USB_SetTurnaroundTime+0x138>)
 800977c:	4293      	cmp	r3, r2
 800977e:	d202      	bcs.n	8009786 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8009780:	2309      	movs	r3, #9
 8009782:	617b      	str	r3, [r7, #20]
 8009784:	e020      	b.n	80097c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8009786:	68bb      	ldr	r3, [r7, #8]
 8009788:	4a21      	ldr	r2, [pc, #132]	; (8009810 <USB_SetTurnaroundTime+0x138>)
 800978a:	4293      	cmp	r3, r2
 800978c:	d306      	bcc.n	800979c <USB_SetTurnaroundTime+0xc4>
 800978e:	68bb      	ldr	r3, [r7, #8]
 8009790:	4a20      	ldr	r2, [pc, #128]	; (8009814 <USB_SetTurnaroundTime+0x13c>)
 8009792:	4293      	cmp	r3, r2
 8009794:	d802      	bhi.n	800979c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8009796:	2308      	movs	r3, #8
 8009798:	617b      	str	r3, [r7, #20]
 800979a:	e015      	b.n	80097c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800979c:	68bb      	ldr	r3, [r7, #8]
 800979e:	4a1d      	ldr	r2, [pc, #116]	; (8009814 <USB_SetTurnaroundTime+0x13c>)
 80097a0:	4293      	cmp	r3, r2
 80097a2:	d906      	bls.n	80097b2 <USB_SetTurnaroundTime+0xda>
 80097a4:	68bb      	ldr	r3, [r7, #8]
 80097a6:	4a1c      	ldr	r2, [pc, #112]	; (8009818 <USB_SetTurnaroundTime+0x140>)
 80097a8:	4293      	cmp	r3, r2
 80097aa:	d202      	bcs.n	80097b2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80097ac:	2307      	movs	r3, #7
 80097ae:	617b      	str	r3, [r7, #20]
 80097b0:	e00a      	b.n	80097c8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80097b2:	2306      	movs	r3, #6
 80097b4:	617b      	str	r3, [r7, #20]
 80097b6:	e007      	b.n	80097c8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80097b8:	79fb      	ldrb	r3, [r7, #7]
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d102      	bne.n	80097c4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80097be:	2309      	movs	r3, #9
 80097c0:	617b      	str	r3, [r7, #20]
 80097c2:	e001      	b.n	80097c8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80097c4:	2309      	movs	r3, #9
 80097c6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	68db      	ldr	r3, [r3, #12]
 80097cc:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	68da      	ldr	r2, [r3, #12]
 80097d8:	697b      	ldr	r3, [r7, #20]
 80097da:	029b      	lsls	r3, r3, #10
 80097dc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80097e0:	431a      	orrs	r2, r3
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80097e6:	2300      	movs	r3, #0
}
 80097e8:	4618      	mov	r0, r3
 80097ea:	371c      	adds	r7, #28
 80097ec:	46bd      	mov	sp, r7
 80097ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f2:	4770      	bx	lr
 80097f4:	00d8acbf 	.word	0x00d8acbf
 80097f8:	00e4e1c0 	.word	0x00e4e1c0
 80097fc:	00f42400 	.word	0x00f42400
 8009800:	01067380 	.word	0x01067380
 8009804:	011a499f 	.word	0x011a499f
 8009808:	01312cff 	.word	0x01312cff
 800980c:	014ca43f 	.word	0x014ca43f
 8009810:	016e3600 	.word	0x016e3600
 8009814:	01a6ab1f 	.word	0x01a6ab1f
 8009818:	01e84800 	.word	0x01e84800

0800981c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800981c:	b480      	push	{r7}
 800981e:	b083      	sub	sp, #12
 8009820:	af00      	add	r7, sp, #0
 8009822:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	689b      	ldr	r3, [r3, #8]
 8009828:	f043 0201 	orr.w	r2, r3, #1
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009830:	2300      	movs	r3, #0
}
 8009832:	4618      	mov	r0, r3
 8009834:	370c      	adds	r7, #12
 8009836:	46bd      	mov	sp, r7
 8009838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983c:	4770      	bx	lr

0800983e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800983e:	b480      	push	{r7}
 8009840:	b083      	sub	sp, #12
 8009842:	af00      	add	r7, sp, #0
 8009844:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	689b      	ldr	r3, [r3, #8]
 800984a:	f023 0201 	bic.w	r2, r3, #1
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009852:	2300      	movs	r3, #0
}
 8009854:	4618      	mov	r0, r3
 8009856:	370c      	adds	r7, #12
 8009858:	46bd      	mov	sp, r7
 800985a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985e:	4770      	bx	lr

08009860 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009860:	b580      	push	{r7, lr}
 8009862:	b084      	sub	sp, #16
 8009864:	af00      	add	r7, sp, #0
 8009866:	6078      	str	r0, [r7, #4]
 8009868:	460b      	mov	r3, r1
 800986a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800986c:	2300      	movs	r3, #0
 800986e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	68db      	ldr	r3, [r3, #12]
 8009874:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800987c:	78fb      	ldrb	r3, [r7, #3]
 800987e:	2b01      	cmp	r3, #1
 8009880:	d115      	bne.n	80098ae <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	68db      	ldr	r3, [r3, #12]
 8009886:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800988e:	2001      	movs	r0, #1
 8009890:	f7f9 fc0e 	bl	80030b0 <HAL_Delay>
      ms++;
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	3301      	adds	r3, #1
 8009898:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800989a:	6878      	ldr	r0, [r7, #4]
 800989c:	f001 fa45 	bl	800ad2a <USB_GetMode>
 80098a0:	4603      	mov	r3, r0
 80098a2:	2b01      	cmp	r3, #1
 80098a4:	d01e      	beq.n	80098e4 <USB_SetCurrentMode+0x84>
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	2b31      	cmp	r3, #49	; 0x31
 80098aa:	d9f0      	bls.n	800988e <USB_SetCurrentMode+0x2e>
 80098ac:	e01a      	b.n	80098e4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80098ae:	78fb      	ldrb	r3, [r7, #3]
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d115      	bne.n	80098e0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	68db      	ldr	r3, [r3, #12]
 80098b8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80098c0:	2001      	movs	r0, #1
 80098c2:	f7f9 fbf5 	bl	80030b0 <HAL_Delay>
      ms++;
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	3301      	adds	r3, #1
 80098ca:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80098cc:	6878      	ldr	r0, [r7, #4]
 80098ce:	f001 fa2c 	bl	800ad2a <USB_GetMode>
 80098d2:	4603      	mov	r3, r0
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d005      	beq.n	80098e4 <USB_SetCurrentMode+0x84>
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	2b31      	cmp	r3, #49	; 0x31
 80098dc:	d9f0      	bls.n	80098c0 <USB_SetCurrentMode+0x60>
 80098de:	e001      	b.n	80098e4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80098e0:	2301      	movs	r3, #1
 80098e2:	e005      	b.n	80098f0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	2b32      	cmp	r3, #50	; 0x32
 80098e8:	d101      	bne.n	80098ee <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80098ea:	2301      	movs	r3, #1
 80098ec:	e000      	b.n	80098f0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80098ee:	2300      	movs	r3, #0
}
 80098f0:	4618      	mov	r0, r3
 80098f2:	3710      	adds	r7, #16
 80098f4:	46bd      	mov	sp, r7
 80098f6:	bd80      	pop	{r7, pc}

080098f8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80098f8:	b084      	sub	sp, #16
 80098fa:	b580      	push	{r7, lr}
 80098fc:	b086      	sub	sp, #24
 80098fe:	af00      	add	r7, sp, #0
 8009900:	6078      	str	r0, [r7, #4]
 8009902:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8009906:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800990a:	2300      	movs	r3, #0
 800990c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009912:	2300      	movs	r3, #0
 8009914:	613b      	str	r3, [r7, #16]
 8009916:	e009      	b.n	800992c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009918:	687a      	ldr	r2, [r7, #4]
 800991a:	693b      	ldr	r3, [r7, #16]
 800991c:	3340      	adds	r3, #64	; 0x40
 800991e:	009b      	lsls	r3, r3, #2
 8009920:	4413      	add	r3, r2
 8009922:	2200      	movs	r2, #0
 8009924:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009926:	693b      	ldr	r3, [r7, #16]
 8009928:	3301      	adds	r3, #1
 800992a:	613b      	str	r3, [r7, #16]
 800992c:	693b      	ldr	r3, [r7, #16]
 800992e:	2b0e      	cmp	r3, #14
 8009930:	d9f2      	bls.n	8009918 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009932:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009934:	2b00      	cmp	r3, #0
 8009936:	d11c      	bne.n	8009972 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800993e:	685b      	ldr	r3, [r3, #4]
 8009940:	68fa      	ldr	r2, [r7, #12]
 8009942:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009946:	f043 0302 	orr.w	r3, r3, #2
 800994a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009950:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800995c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009968:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	639a      	str	r2, [r3, #56]	; 0x38
 8009970:	e00b      	b.n	800998a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009976:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009982:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009990:	461a      	mov	r2, r3
 8009992:	2300      	movs	r3, #0
 8009994:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800999c:	4619      	mov	r1, r3
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099a4:	461a      	mov	r2, r3
 80099a6:	680b      	ldr	r3, [r1, #0]
 80099a8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80099aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099ac:	2b01      	cmp	r3, #1
 80099ae:	d10c      	bne.n	80099ca <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80099b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d104      	bne.n	80099c0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80099b6:	2100      	movs	r1, #0
 80099b8:	6878      	ldr	r0, [r7, #4]
 80099ba:	f000 f965 	bl	8009c88 <USB_SetDevSpeed>
 80099be:	e008      	b.n	80099d2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80099c0:	2101      	movs	r1, #1
 80099c2:	6878      	ldr	r0, [r7, #4]
 80099c4:	f000 f960 	bl	8009c88 <USB_SetDevSpeed>
 80099c8:	e003      	b.n	80099d2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80099ca:	2103      	movs	r1, #3
 80099cc:	6878      	ldr	r0, [r7, #4]
 80099ce:	f000 f95b 	bl	8009c88 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80099d2:	2110      	movs	r1, #16
 80099d4:	6878      	ldr	r0, [r7, #4]
 80099d6:	f000 f8f3 	bl	8009bc0 <USB_FlushTxFifo>
 80099da:	4603      	mov	r3, r0
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d001      	beq.n	80099e4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80099e0:	2301      	movs	r3, #1
 80099e2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80099e4:	6878      	ldr	r0, [r7, #4]
 80099e6:	f000 f91f 	bl	8009c28 <USB_FlushRxFifo>
 80099ea:	4603      	mov	r3, r0
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d001      	beq.n	80099f4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80099f0:	2301      	movs	r3, #1
 80099f2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099fa:	461a      	mov	r2, r3
 80099fc:	2300      	movs	r3, #0
 80099fe:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a06:	461a      	mov	r2, r3
 8009a08:	2300      	movs	r3, #0
 8009a0a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a12:	461a      	mov	r2, r3
 8009a14:	2300      	movs	r3, #0
 8009a16:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009a18:	2300      	movs	r3, #0
 8009a1a:	613b      	str	r3, [r7, #16]
 8009a1c:	e043      	b.n	8009aa6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009a1e:	693b      	ldr	r3, [r7, #16]
 8009a20:	015a      	lsls	r2, r3, #5
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	4413      	add	r3, r2
 8009a26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009a30:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009a34:	d118      	bne.n	8009a68 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8009a36:	693b      	ldr	r3, [r7, #16]
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d10a      	bne.n	8009a52 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009a3c:	693b      	ldr	r3, [r7, #16]
 8009a3e:	015a      	lsls	r2, r3, #5
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	4413      	add	r3, r2
 8009a44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a48:	461a      	mov	r2, r3
 8009a4a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009a4e:	6013      	str	r3, [r2, #0]
 8009a50:	e013      	b.n	8009a7a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009a52:	693b      	ldr	r3, [r7, #16]
 8009a54:	015a      	lsls	r2, r3, #5
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	4413      	add	r3, r2
 8009a5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a5e:	461a      	mov	r2, r3
 8009a60:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009a64:	6013      	str	r3, [r2, #0]
 8009a66:	e008      	b.n	8009a7a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009a68:	693b      	ldr	r3, [r7, #16]
 8009a6a:	015a      	lsls	r2, r3, #5
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	4413      	add	r3, r2
 8009a70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a74:	461a      	mov	r2, r3
 8009a76:	2300      	movs	r3, #0
 8009a78:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009a7a:	693b      	ldr	r3, [r7, #16]
 8009a7c:	015a      	lsls	r2, r3, #5
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	4413      	add	r3, r2
 8009a82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a86:	461a      	mov	r2, r3
 8009a88:	2300      	movs	r3, #0
 8009a8a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009a8c:	693b      	ldr	r3, [r7, #16]
 8009a8e:	015a      	lsls	r2, r3, #5
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	4413      	add	r3, r2
 8009a94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a98:	461a      	mov	r2, r3
 8009a9a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009a9e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009aa0:	693b      	ldr	r3, [r7, #16]
 8009aa2:	3301      	adds	r3, #1
 8009aa4:	613b      	str	r3, [r7, #16]
 8009aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aa8:	693a      	ldr	r2, [r7, #16]
 8009aaa:	429a      	cmp	r2, r3
 8009aac:	d3b7      	bcc.n	8009a1e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009aae:	2300      	movs	r3, #0
 8009ab0:	613b      	str	r3, [r7, #16]
 8009ab2:	e043      	b.n	8009b3c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009ab4:	693b      	ldr	r3, [r7, #16]
 8009ab6:	015a      	lsls	r2, r3, #5
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	4413      	add	r3, r2
 8009abc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009ac6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009aca:	d118      	bne.n	8009afe <USB_DevInit+0x206>
    {
      if (i == 0U)
 8009acc:	693b      	ldr	r3, [r7, #16]
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d10a      	bne.n	8009ae8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009ad2:	693b      	ldr	r3, [r7, #16]
 8009ad4:	015a      	lsls	r2, r3, #5
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	4413      	add	r3, r2
 8009ada:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ade:	461a      	mov	r2, r3
 8009ae0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009ae4:	6013      	str	r3, [r2, #0]
 8009ae6:	e013      	b.n	8009b10 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009ae8:	693b      	ldr	r3, [r7, #16]
 8009aea:	015a      	lsls	r2, r3, #5
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	4413      	add	r3, r2
 8009af0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009af4:	461a      	mov	r2, r3
 8009af6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009afa:	6013      	str	r3, [r2, #0]
 8009afc:	e008      	b.n	8009b10 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009afe:	693b      	ldr	r3, [r7, #16]
 8009b00:	015a      	lsls	r2, r3, #5
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	4413      	add	r3, r2
 8009b06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b0a:	461a      	mov	r2, r3
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009b10:	693b      	ldr	r3, [r7, #16]
 8009b12:	015a      	lsls	r2, r3, #5
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	4413      	add	r3, r2
 8009b18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b1c:	461a      	mov	r2, r3
 8009b1e:	2300      	movs	r3, #0
 8009b20:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009b22:	693b      	ldr	r3, [r7, #16]
 8009b24:	015a      	lsls	r2, r3, #5
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	4413      	add	r3, r2
 8009b2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b2e:	461a      	mov	r2, r3
 8009b30:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009b34:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009b36:	693b      	ldr	r3, [r7, #16]
 8009b38:	3301      	adds	r3, #1
 8009b3a:	613b      	str	r3, [r7, #16]
 8009b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b3e:	693a      	ldr	r2, [r7, #16]
 8009b40:	429a      	cmp	r2, r3
 8009b42:	d3b7      	bcc.n	8009ab4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b4a:	691b      	ldr	r3, [r3, #16]
 8009b4c:	68fa      	ldr	r2, [r7, #12]
 8009b4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009b52:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009b56:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	2200      	movs	r2, #0
 8009b5c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009b64:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d105      	bne.n	8009b78 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	699b      	ldr	r3, [r3, #24]
 8009b70:	f043 0210 	orr.w	r2, r3, #16
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	699a      	ldr	r2, [r3, #24]
 8009b7c:	4b0f      	ldr	r3, [pc, #60]	; (8009bbc <USB_DevInit+0x2c4>)
 8009b7e:	4313      	orrs	r3, r2
 8009b80:	687a      	ldr	r2, [r7, #4]
 8009b82:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009b84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d005      	beq.n	8009b96 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	699b      	ldr	r3, [r3, #24]
 8009b8e:	f043 0208 	orr.w	r2, r3, #8
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009b96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b98:	2b01      	cmp	r3, #1
 8009b9a:	d107      	bne.n	8009bac <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	699b      	ldr	r3, [r3, #24]
 8009ba0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009ba4:	f043 0304 	orr.w	r3, r3, #4
 8009ba8:	687a      	ldr	r2, [r7, #4]
 8009baa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009bac:	7dfb      	ldrb	r3, [r7, #23]
}
 8009bae:	4618      	mov	r0, r3
 8009bb0:	3718      	adds	r7, #24
 8009bb2:	46bd      	mov	sp, r7
 8009bb4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009bb8:	b004      	add	sp, #16
 8009bba:	4770      	bx	lr
 8009bbc:	803c3800 	.word	0x803c3800

08009bc0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009bc0:	b480      	push	{r7}
 8009bc2:	b085      	sub	sp, #20
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	6078      	str	r0, [r7, #4]
 8009bc8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009bca:	2300      	movs	r3, #0
 8009bcc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	3301      	adds	r3, #1
 8009bd2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	4a13      	ldr	r2, [pc, #76]	; (8009c24 <USB_FlushTxFifo+0x64>)
 8009bd8:	4293      	cmp	r3, r2
 8009bda:	d901      	bls.n	8009be0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009bdc:	2303      	movs	r3, #3
 8009bde:	e01b      	b.n	8009c18 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	691b      	ldr	r3, [r3, #16]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	daf2      	bge.n	8009bce <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009be8:	2300      	movs	r3, #0
 8009bea:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009bec:	683b      	ldr	r3, [r7, #0]
 8009bee:	019b      	lsls	r3, r3, #6
 8009bf0:	f043 0220 	orr.w	r2, r3, #32
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	3301      	adds	r3, #1
 8009bfc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	4a08      	ldr	r2, [pc, #32]	; (8009c24 <USB_FlushTxFifo+0x64>)
 8009c02:	4293      	cmp	r3, r2
 8009c04:	d901      	bls.n	8009c0a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009c06:	2303      	movs	r3, #3
 8009c08:	e006      	b.n	8009c18 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	691b      	ldr	r3, [r3, #16]
 8009c0e:	f003 0320 	and.w	r3, r3, #32
 8009c12:	2b20      	cmp	r3, #32
 8009c14:	d0f0      	beq.n	8009bf8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009c16:	2300      	movs	r3, #0
}
 8009c18:	4618      	mov	r0, r3
 8009c1a:	3714      	adds	r7, #20
 8009c1c:	46bd      	mov	sp, r7
 8009c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c22:	4770      	bx	lr
 8009c24:	00030d40 	.word	0x00030d40

08009c28 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009c28:	b480      	push	{r7}
 8009c2a:	b085      	sub	sp, #20
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009c30:	2300      	movs	r3, #0
 8009c32:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	3301      	adds	r3, #1
 8009c38:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	4a11      	ldr	r2, [pc, #68]	; (8009c84 <USB_FlushRxFifo+0x5c>)
 8009c3e:	4293      	cmp	r3, r2
 8009c40:	d901      	bls.n	8009c46 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009c42:	2303      	movs	r3, #3
 8009c44:	e018      	b.n	8009c78 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	691b      	ldr	r3, [r3, #16]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	daf2      	bge.n	8009c34 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009c4e:	2300      	movs	r3, #0
 8009c50:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	2210      	movs	r2, #16
 8009c56:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	3301      	adds	r3, #1
 8009c5c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	4a08      	ldr	r2, [pc, #32]	; (8009c84 <USB_FlushRxFifo+0x5c>)
 8009c62:	4293      	cmp	r3, r2
 8009c64:	d901      	bls.n	8009c6a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009c66:	2303      	movs	r3, #3
 8009c68:	e006      	b.n	8009c78 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	691b      	ldr	r3, [r3, #16]
 8009c6e:	f003 0310 	and.w	r3, r3, #16
 8009c72:	2b10      	cmp	r3, #16
 8009c74:	d0f0      	beq.n	8009c58 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009c76:	2300      	movs	r3, #0
}
 8009c78:	4618      	mov	r0, r3
 8009c7a:	3714      	adds	r7, #20
 8009c7c:	46bd      	mov	sp, r7
 8009c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c82:	4770      	bx	lr
 8009c84:	00030d40 	.word	0x00030d40

08009c88 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009c88:	b480      	push	{r7}
 8009c8a:	b085      	sub	sp, #20
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	6078      	str	r0, [r7, #4]
 8009c90:	460b      	mov	r3, r1
 8009c92:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c9e:	681a      	ldr	r2, [r3, #0]
 8009ca0:	78fb      	ldrb	r3, [r7, #3]
 8009ca2:	68f9      	ldr	r1, [r7, #12]
 8009ca4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009ca8:	4313      	orrs	r3, r2
 8009caa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009cac:	2300      	movs	r3, #0
}
 8009cae:	4618      	mov	r0, r3
 8009cb0:	3714      	adds	r7, #20
 8009cb2:	46bd      	mov	sp, r7
 8009cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb8:	4770      	bx	lr

08009cba <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8009cba:	b480      	push	{r7}
 8009cbc:	b087      	sub	sp, #28
 8009cbe:	af00      	add	r7, sp, #0
 8009cc0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009cc6:	693b      	ldr	r3, [r7, #16]
 8009cc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ccc:	689b      	ldr	r3, [r3, #8]
 8009cce:	f003 0306 	and.w	r3, r3, #6
 8009cd2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d102      	bne.n	8009ce0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8009cda:	2300      	movs	r3, #0
 8009cdc:	75fb      	strb	r3, [r7, #23]
 8009cde:	e00a      	b.n	8009cf6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	2b02      	cmp	r3, #2
 8009ce4:	d002      	beq.n	8009cec <USB_GetDevSpeed+0x32>
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	2b06      	cmp	r3, #6
 8009cea:	d102      	bne.n	8009cf2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009cec:	2302      	movs	r3, #2
 8009cee:	75fb      	strb	r3, [r7, #23]
 8009cf0:	e001      	b.n	8009cf6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8009cf2:	230f      	movs	r3, #15
 8009cf4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8009cf6:	7dfb      	ldrb	r3, [r7, #23]
}
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	371c      	adds	r7, #28
 8009cfc:	46bd      	mov	sp, r7
 8009cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d02:	4770      	bx	lr

08009d04 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009d04:	b480      	push	{r7}
 8009d06:	b085      	sub	sp, #20
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	6078      	str	r0, [r7, #4]
 8009d0c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009d12:	683b      	ldr	r3, [r7, #0]
 8009d14:	781b      	ldrb	r3, [r3, #0]
 8009d16:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009d18:	683b      	ldr	r3, [r7, #0]
 8009d1a:	785b      	ldrb	r3, [r3, #1]
 8009d1c:	2b01      	cmp	r3, #1
 8009d1e:	d13a      	bne.n	8009d96 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d26:	69da      	ldr	r2, [r3, #28]
 8009d28:	683b      	ldr	r3, [r7, #0]
 8009d2a:	781b      	ldrb	r3, [r3, #0]
 8009d2c:	f003 030f 	and.w	r3, r3, #15
 8009d30:	2101      	movs	r1, #1
 8009d32:	fa01 f303 	lsl.w	r3, r1, r3
 8009d36:	b29b      	uxth	r3, r3
 8009d38:	68f9      	ldr	r1, [r7, #12]
 8009d3a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009d3e:	4313      	orrs	r3, r2
 8009d40:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009d42:	68bb      	ldr	r3, [r7, #8]
 8009d44:	015a      	lsls	r2, r3, #5
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	4413      	add	r3, r2
 8009d4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d155      	bne.n	8009e04 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009d58:	68bb      	ldr	r3, [r7, #8]
 8009d5a:	015a      	lsls	r2, r3, #5
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	4413      	add	r3, r2
 8009d60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d64:	681a      	ldr	r2, [r3, #0]
 8009d66:	683b      	ldr	r3, [r7, #0]
 8009d68:	68db      	ldr	r3, [r3, #12]
 8009d6a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009d6e:	683b      	ldr	r3, [r7, #0]
 8009d70:	791b      	ldrb	r3, [r3, #4]
 8009d72:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009d74:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009d76:	68bb      	ldr	r3, [r7, #8]
 8009d78:	059b      	lsls	r3, r3, #22
 8009d7a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009d7c:	4313      	orrs	r3, r2
 8009d7e:	68ba      	ldr	r2, [r7, #8]
 8009d80:	0151      	lsls	r1, r2, #5
 8009d82:	68fa      	ldr	r2, [r7, #12]
 8009d84:	440a      	add	r2, r1
 8009d86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009d8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009d8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009d92:	6013      	str	r3, [r2, #0]
 8009d94:	e036      	b.n	8009e04 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d9c:	69da      	ldr	r2, [r3, #28]
 8009d9e:	683b      	ldr	r3, [r7, #0]
 8009da0:	781b      	ldrb	r3, [r3, #0]
 8009da2:	f003 030f 	and.w	r3, r3, #15
 8009da6:	2101      	movs	r1, #1
 8009da8:	fa01 f303 	lsl.w	r3, r1, r3
 8009dac:	041b      	lsls	r3, r3, #16
 8009dae:	68f9      	ldr	r1, [r7, #12]
 8009db0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009db4:	4313      	orrs	r3, r2
 8009db6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009db8:	68bb      	ldr	r3, [r7, #8]
 8009dba:	015a      	lsls	r2, r3, #5
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	4413      	add	r3, r2
 8009dc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d11a      	bne.n	8009e04 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009dce:	68bb      	ldr	r3, [r7, #8]
 8009dd0:	015a      	lsls	r2, r3, #5
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	4413      	add	r3, r2
 8009dd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009dda:	681a      	ldr	r2, [r3, #0]
 8009ddc:	683b      	ldr	r3, [r7, #0]
 8009dde:	68db      	ldr	r3, [r3, #12]
 8009de0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009de4:	683b      	ldr	r3, [r7, #0]
 8009de6:	791b      	ldrb	r3, [r3, #4]
 8009de8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009dea:	430b      	orrs	r3, r1
 8009dec:	4313      	orrs	r3, r2
 8009dee:	68ba      	ldr	r2, [r7, #8]
 8009df0:	0151      	lsls	r1, r2, #5
 8009df2:	68fa      	ldr	r2, [r7, #12]
 8009df4:	440a      	add	r2, r1
 8009df6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009dfa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009dfe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e02:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009e04:	2300      	movs	r3, #0
}
 8009e06:	4618      	mov	r0, r3
 8009e08:	3714      	adds	r7, #20
 8009e0a:	46bd      	mov	sp, r7
 8009e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e10:	4770      	bx	lr
	...

08009e14 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009e14:	b480      	push	{r7}
 8009e16:	b085      	sub	sp, #20
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	6078      	str	r0, [r7, #4]
 8009e1c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009e22:	683b      	ldr	r3, [r7, #0]
 8009e24:	781b      	ldrb	r3, [r3, #0]
 8009e26:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009e28:	683b      	ldr	r3, [r7, #0]
 8009e2a:	785b      	ldrb	r3, [r3, #1]
 8009e2c:	2b01      	cmp	r3, #1
 8009e2e:	d161      	bne.n	8009ef4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009e30:	68bb      	ldr	r3, [r7, #8]
 8009e32:	015a      	lsls	r2, r3, #5
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	4413      	add	r3, r2
 8009e38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009e42:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009e46:	d11f      	bne.n	8009e88 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009e48:	68bb      	ldr	r3, [r7, #8]
 8009e4a:	015a      	lsls	r2, r3, #5
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	4413      	add	r3, r2
 8009e50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	68ba      	ldr	r2, [r7, #8]
 8009e58:	0151      	lsls	r1, r2, #5
 8009e5a:	68fa      	ldr	r2, [r7, #12]
 8009e5c:	440a      	add	r2, r1
 8009e5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e62:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009e66:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009e68:	68bb      	ldr	r3, [r7, #8]
 8009e6a:	015a      	lsls	r2, r3, #5
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	4413      	add	r3, r2
 8009e70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	68ba      	ldr	r2, [r7, #8]
 8009e78:	0151      	lsls	r1, r2, #5
 8009e7a:	68fa      	ldr	r2, [r7, #12]
 8009e7c:	440a      	add	r2, r1
 8009e7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e82:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009e86:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009e90:	683b      	ldr	r3, [r7, #0]
 8009e92:	781b      	ldrb	r3, [r3, #0]
 8009e94:	f003 030f 	and.w	r3, r3, #15
 8009e98:	2101      	movs	r1, #1
 8009e9a:	fa01 f303 	lsl.w	r3, r1, r3
 8009e9e:	b29b      	uxth	r3, r3
 8009ea0:	43db      	mvns	r3, r3
 8009ea2:	68f9      	ldr	r1, [r7, #12]
 8009ea4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009ea8:	4013      	ands	r3, r2
 8009eaa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009eb2:	69da      	ldr	r2, [r3, #28]
 8009eb4:	683b      	ldr	r3, [r7, #0]
 8009eb6:	781b      	ldrb	r3, [r3, #0]
 8009eb8:	f003 030f 	and.w	r3, r3, #15
 8009ebc:	2101      	movs	r1, #1
 8009ebe:	fa01 f303 	lsl.w	r3, r1, r3
 8009ec2:	b29b      	uxth	r3, r3
 8009ec4:	43db      	mvns	r3, r3
 8009ec6:	68f9      	ldr	r1, [r7, #12]
 8009ec8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009ecc:	4013      	ands	r3, r2
 8009ece:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009ed0:	68bb      	ldr	r3, [r7, #8]
 8009ed2:	015a      	lsls	r2, r3, #5
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	4413      	add	r3, r2
 8009ed8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009edc:	681a      	ldr	r2, [r3, #0]
 8009ede:	68bb      	ldr	r3, [r7, #8]
 8009ee0:	0159      	lsls	r1, r3, #5
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	440b      	add	r3, r1
 8009ee6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009eea:	4619      	mov	r1, r3
 8009eec:	4b35      	ldr	r3, [pc, #212]	; (8009fc4 <USB_DeactivateEndpoint+0x1b0>)
 8009eee:	4013      	ands	r3, r2
 8009ef0:	600b      	str	r3, [r1, #0]
 8009ef2:	e060      	b.n	8009fb6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009ef4:	68bb      	ldr	r3, [r7, #8]
 8009ef6:	015a      	lsls	r2, r3, #5
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	4413      	add	r3, r2
 8009efc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009f06:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009f0a:	d11f      	bne.n	8009f4c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009f0c:	68bb      	ldr	r3, [r7, #8]
 8009f0e:	015a      	lsls	r2, r3, #5
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	4413      	add	r3, r2
 8009f14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	68ba      	ldr	r2, [r7, #8]
 8009f1c:	0151      	lsls	r1, r2, #5
 8009f1e:	68fa      	ldr	r2, [r7, #12]
 8009f20:	440a      	add	r2, r1
 8009f22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f26:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009f2a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009f2c:	68bb      	ldr	r3, [r7, #8]
 8009f2e:	015a      	lsls	r2, r3, #5
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	4413      	add	r3, r2
 8009f34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	68ba      	ldr	r2, [r7, #8]
 8009f3c:	0151      	lsls	r1, r2, #5
 8009f3e:	68fa      	ldr	r2, [r7, #12]
 8009f40:	440a      	add	r2, r1
 8009f42:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f46:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009f4a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009f54:	683b      	ldr	r3, [r7, #0]
 8009f56:	781b      	ldrb	r3, [r3, #0]
 8009f58:	f003 030f 	and.w	r3, r3, #15
 8009f5c:	2101      	movs	r1, #1
 8009f5e:	fa01 f303 	lsl.w	r3, r1, r3
 8009f62:	041b      	lsls	r3, r3, #16
 8009f64:	43db      	mvns	r3, r3
 8009f66:	68f9      	ldr	r1, [r7, #12]
 8009f68:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009f6c:	4013      	ands	r3, r2
 8009f6e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f76:	69da      	ldr	r2, [r3, #28]
 8009f78:	683b      	ldr	r3, [r7, #0]
 8009f7a:	781b      	ldrb	r3, [r3, #0]
 8009f7c:	f003 030f 	and.w	r3, r3, #15
 8009f80:	2101      	movs	r1, #1
 8009f82:	fa01 f303 	lsl.w	r3, r1, r3
 8009f86:	041b      	lsls	r3, r3, #16
 8009f88:	43db      	mvns	r3, r3
 8009f8a:	68f9      	ldr	r1, [r7, #12]
 8009f8c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009f90:	4013      	ands	r3, r2
 8009f92:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009f94:	68bb      	ldr	r3, [r7, #8]
 8009f96:	015a      	lsls	r2, r3, #5
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	4413      	add	r3, r2
 8009f9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fa0:	681a      	ldr	r2, [r3, #0]
 8009fa2:	68bb      	ldr	r3, [r7, #8]
 8009fa4:	0159      	lsls	r1, r3, #5
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	440b      	add	r3, r1
 8009faa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fae:	4619      	mov	r1, r3
 8009fb0:	4b05      	ldr	r3, [pc, #20]	; (8009fc8 <USB_DeactivateEndpoint+0x1b4>)
 8009fb2:	4013      	ands	r3, r2
 8009fb4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8009fb6:	2300      	movs	r3, #0
}
 8009fb8:	4618      	mov	r0, r3
 8009fba:	3714      	adds	r7, #20
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc2:	4770      	bx	lr
 8009fc4:	ec337800 	.word	0xec337800
 8009fc8:	eff37800 	.word	0xeff37800

08009fcc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009fcc:	b580      	push	{r7, lr}
 8009fce:	b08a      	sub	sp, #40	; 0x28
 8009fd0:	af02      	add	r7, sp, #8
 8009fd2:	60f8      	str	r0, [r7, #12]
 8009fd4:	60b9      	str	r1, [r7, #8]
 8009fd6:	4613      	mov	r3, r2
 8009fd8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8009fde:	68bb      	ldr	r3, [r7, #8]
 8009fe0:	781b      	ldrb	r3, [r3, #0]
 8009fe2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009fe4:	68bb      	ldr	r3, [r7, #8]
 8009fe6:	785b      	ldrb	r3, [r3, #1]
 8009fe8:	2b01      	cmp	r3, #1
 8009fea:	f040 815c 	bne.w	800a2a6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009fee:	68bb      	ldr	r3, [r7, #8]
 8009ff0:	699b      	ldr	r3, [r3, #24]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d132      	bne.n	800a05c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009ff6:	69bb      	ldr	r3, [r7, #24]
 8009ff8:	015a      	lsls	r2, r3, #5
 8009ffa:	69fb      	ldr	r3, [r7, #28]
 8009ffc:	4413      	add	r3, r2
 8009ffe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a002:	691b      	ldr	r3, [r3, #16]
 800a004:	69ba      	ldr	r2, [r7, #24]
 800a006:	0151      	lsls	r1, r2, #5
 800a008:	69fa      	ldr	r2, [r7, #28]
 800a00a:	440a      	add	r2, r1
 800a00c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a010:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a014:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a018:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a01a:	69bb      	ldr	r3, [r7, #24]
 800a01c:	015a      	lsls	r2, r3, #5
 800a01e:	69fb      	ldr	r3, [r7, #28]
 800a020:	4413      	add	r3, r2
 800a022:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a026:	691b      	ldr	r3, [r3, #16]
 800a028:	69ba      	ldr	r2, [r7, #24]
 800a02a:	0151      	lsls	r1, r2, #5
 800a02c:	69fa      	ldr	r2, [r7, #28]
 800a02e:	440a      	add	r2, r1
 800a030:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a034:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a038:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a03a:	69bb      	ldr	r3, [r7, #24]
 800a03c:	015a      	lsls	r2, r3, #5
 800a03e:	69fb      	ldr	r3, [r7, #28]
 800a040:	4413      	add	r3, r2
 800a042:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a046:	691b      	ldr	r3, [r3, #16]
 800a048:	69ba      	ldr	r2, [r7, #24]
 800a04a:	0151      	lsls	r1, r2, #5
 800a04c:	69fa      	ldr	r2, [r7, #28]
 800a04e:	440a      	add	r2, r1
 800a050:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a054:	0cdb      	lsrs	r3, r3, #19
 800a056:	04db      	lsls	r3, r3, #19
 800a058:	6113      	str	r3, [r2, #16]
 800a05a:	e074      	b.n	800a146 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a05c:	69bb      	ldr	r3, [r7, #24]
 800a05e:	015a      	lsls	r2, r3, #5
 800a060:	69fb      	ldr	r3, [r7, #28]
 800a062:	4413      	add	r3, r2
 800a064:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a068:	691b      	ldr	r3, [r3, #16]
 800a06a:	69ba      	ldr	r2, [r7, #24]
 800a06c:	0151      	lsls	r1, r2, #5
 800a06e:	69fa      	ldr	r2, [r7, #28]
 800a070:	440a      	add	r2, r1
 800a072:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a076:	0cdb      	lsrs	r3, r3, #19
 800a078:	04db      	lsls	r3, r3, #19
 800a07a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a07c:	69bb      	ldr	r3, [r7, #24]
 800a07e:	015a      	lsls	r2, r3, #5
 800a080:	69fb      	ldr	r3, [r7, #28]
 800a082:	4413      	add	r3, r2
 800a084:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a088:	691b      	ldr	r3, [r3, #16]
 800a08a:	69ba      	ldr	r2, [r7, #24]
 800a08c:	0151      	lsls	r1, r2, #5
 800a08e:	69fa      	ldr	r2, [r7, #28]
 800a090:	440a      	add	r2, r1
 800a092:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a096:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a09a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a09e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800a0a0:	69bb      	ldr	r3, [r7, #24]
 800a0a2:	015a      	lsls	r2, r3, #5
 800a0a4:	69fb      	ldr	r3, [r7, #28]
 800a0a6:	4413      	add	r3, r2
 800a0a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0ac:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800a0ae:	68bb      	ldr	r3, [r7, #8]
 800a0b0:	6999      	ldr	r1, [r3, #24]
 800a0b2:	68bb      	ldr	r3, [r7, #8]
 800a0b4:	68db      	ldr	r3, [r3, #12]
 800a0b6:	440b      	add	r3, r1
 800a0b8:	1e59      	subs	r1, r3, #1
 800a0ba:	68bb      	ldr	r3, [r7, #8]
 800a0bc:	68db      	ldr	r3, [r3, #12]
 800a0be:	fbb1 f3f3 	udiv	r3, r1, r3
 800a0c2:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800a0c4:	4b9d      	ldr	r3, [pc, #628]	; (800a33c <USB_EPStartXfer+0x370>)
 800a0c6:	400b      	ands	r3, r1
 800a0c8:	69b9      	ldr	r1, [r7, #24]
 800a0ca:	0148      	lsls	r0, r1, #5
 800a0cc:	69f9      	ldr	r1, [r7, #28]
 800a0ce:	4401      	add	r1, r0
 800a0d0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a0d4:	4313      	orrs	r3, r2
 800a0d6:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a0d8:	69bb      	ldr	r3, [r7, #24]
 800a0da:	015a      	lsls	r2, r3, #5
 800a0dc:	69fb      	ldr	r3, [r7, #28]
 800a0de:	4413      	add	r3, r2
 800a0e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0e4:	691a      	ldr	r2, [r3, #16]
 800a0e6:	68bb      	ldr	r3, [r7, #8]
 800a0e8:	699b      	ldr	r3, [r3, #24]
 800a0ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a0ee:	69b9      	ldr	r1, [r7, #24]
 800a0f0:	0148      	lsls	r0, r1, #5
 800a0f2:	69f9      	ldr	r1, [r7, #28]
 800a0f4:	4401      	add	r1, r0
 800a0f6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a0fa:	4313      	orrs	r3, r2
 800a0fc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800a0fe:	68bb      	ldr	r3, [r7, #8]
 800a100:	791b      	ldrb	r3, [r3, #4]
 800a102:	2b01      	cmp	r3, #1
 800a104:	d11f      	bne.n	800a146 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800a106:	69bb      	ldr	r3, [r7, #24]
 800a108:	015a      	lsls	r2, r3, #5
 800a10a:	69fb      	ldr	r3, [r7, #28]
 800a10c:	4413      	add	r3, r2
 800a10e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a112:	691b      	ldr	r3, [r3, #16]
 800a114:	69ba      	ldr	r2, [r7, #24]
 800a116:	0151      	lsls	r1, r2, #5
 800a118:	69fa      	ldr	r2, [r7, #28]
 800a11a:	440a      	add	r2, r1
 800a11c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a120:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800a124:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800a126:	69bb      	ldr	r3, [r7, #24]
 800a128:	015a      	lsls	r2, r3, #5
 800a12a:	69fb      	ldr	r3, [r7, #28]
 800a12c:	4413      	add	r3, r2
 800a12e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a132:	691b      	ldr	r3, [r3, #16]
 800a134:	69ba      	ldr	r2, [r7, #24]
 800a136:	0151      	lsls	r1, r2, #5
 800a138:	69fa      	ldr	r2, [r7, #28]
 800a13a:	440a      	add	r2, r1
 800a13c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a140:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a144:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800a146:	79fb      	ldrb	r3, [r7, #7]
 800a148:	2b01      	cmp	r3, #1
 800a14a:	d14b      	bne.n	800a1e4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a14c:	68bb      	ldr	r3, [r7, #8]
 800a14e:	695b      	ldr	r3, [r3, #20]
 800a150:	2b00      	cmp	r3, #0
 800a152:	d009      	beq.n	800a168 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a154:	69bb      	ldr	r3, [r7, #24]
 800a156:	015a      	lsls	r2, r3, #5
 800a158:	69fb      	ldr	r3, [r7, #28]
 800a15a:	4413      	add	r3, r2
 800a15c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a160:	461a      	mov	r2, r3
 800a162:	68bb      	ldr	r3, [r7, #8]
 800a164:	695b      	ldr	r3, [r3, #20]
 800a166:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800a168:	68bb      	ldr	r3, [r7, #8]
 800a16a:	791b      	ldrb	r3, [r3, #4]
 800a16c:	2b01      	cmp	r3, #1
 800a16e:	d128      	bne.n	800a1c2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a170:	69fb      	ldr	r3, [r7, #28]
 800a172:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a176:	689b      	ldr	r3, [r3, #8]
 800a178:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d110      	bne.n	800a1a2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a180:	69bb      	ldr	r3, [r7, #24]
 800a182:	015a      	lsls	r2, r3, #5
 800a184:	69fb      	ldr	r3, [r7, #28]
 800a186:	4413      	add	r3, r2
 800a188:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	69ba      	ldr	r2, [r7, #24]
 800a190:	0151      	lsls	r1, r2, #5
 800a192:	69fa      	ldr	r2, [r7, #28]
 800a194:	440a      	add	r2, r1
 800a196:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a19a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a19e:	6013      	str	r3, [r2, #0]
 800a1a0:	e00f      	b.n	800a1c2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a1a2:	69bb      	ldr	r3, [r7, #24]
 800a1a4:	015a      	lsls	r2, r3, #5
 800a1a6:	69fb      	ldr	r3, [r7, #28]
 800a1a8:	4413      	add	r3, r2
 800a1aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	69ba      	ldr	r2, [r7, #24]
 800a1b2:	0151      	lsls	r1, r2, #5
 800a1b4:	69fa      	ldr	r2, [r7, #28]
 800a1b6:	440a      	add	r2, r1
 800a1b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a1bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a1c0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a1c2:	69bb      	ldr	r3, [r7, #24]
 800a1c4:	015a      	lsls	r2, r3, #5
 800a1c6:	69fb      	ldr	r3, [r7, #28]
 800a1c8:	4413      	add	r3, r2
 800a1ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	69ba      	ldr	r2, [r7, #24]
 800a1d2:	0151      	lsls	r1, r2, #5
 800a1d4:	69fa      	ldr	r2, [r7, #28]
 800a1d6:	440a      	add	r2, r1
 800a1d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a1dc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a1e0:	6013      	str	r3, [r2, #0]
 800a1e2:	e133      	b.n	800a44c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a1e4:	69bb      	ldr	r3, [r7, #24]
 800a1e6:	015a      	lsls	r2, r3, #5
 800a1e8:	69fb      	ldr	r3, [r7, #28]
 800a1ea:	4413      	add	r3, r2
 800a1ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	69ba      	ldr	r2, [r7, #24]
 800a1f4:	0151      	lsls	r1, r2, #5
 800a1f6:	69fa      	ldr	r2, [r7, #28]
 800a1f8:	440a      	add	r2, r1
 800a1fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a1fe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a202:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a204:	68bb      	ldr	r3, [r7, #8]
 800a206:	791b      	ldrb	r3, [r3, #4]
 800a208:	2b01      	cmp	r3, #1
 800a20a:	d015      	beq.n	800a238 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800a20c:	68bb      	ldr	r3, [r7, #8]
 800a20e:	699b      	ldr	r3, [r3, #24]
 800a210:	2b00      	cmp	r3, #0
 800a212:	f000 811b 	beq.w	800a44c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a216:	69fb      	ldr	r3, [r7, #28]
 800a218:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a21c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a21e:	68bb      	ldr	r3, [r7, #8]
 800a220:	781b      	ldrb	r3, [r3, #0]
 800a222:	f003 030f 	and.w	r3, r3, #15
 800a226:	2101      	movs	r1, #1
 800a228:	fa01 f303 	lsl.w	r3, r1, r3
 800a22c:	69f9      	ldr	r1, [r7, #28]
 800a22e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a232:	4313      	orrs	r3, r2
 800a234:	634b      	str	r3, [r1, #52]	; 0x34
 800a236:	e109      	b.n	800a44c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a238:	69fb      	ldr	r3, [r7, #28]
 800a23a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a23e:	689b      	ldr	r3, [r3, #8]
 800a240:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a244:	2b00      	cmp	r3, #0
 800a246:	d110      	bne.n	800a26a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a248:	69bb      	ldr	r3, [r7, #24]
 800a24a:	015a      	lsls	r2, r3, #5
 800a24c:	69fb      	ldr	r3, [r7, #28]
 800a24e:	4413      	add	r3, r2
 800a250:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	69ba      	ldr	r2, [r7, #24]
 800a258:	0151      	lsls	r1, r2, #5
 800a25a:	69fa      	ldr	r2, [r7, #28]
 800a25c:	440a      	add	r2, r1
 800a25e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a262:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a266:	6013      	str	r3, [r2, #0]
 800a268:	e00f      	b.n	800a28a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a26a:	69bb      	ldr	r3, [r7, #24]
 800a26c:	015a      	lsls	r2, r3, #5
 800a26e:	69fb      	ldr	r3, [r7, #28]
 800a270:	4413      	add	r3, r2
 800a272:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	69ba      	ldr	r2, [r7, #24]
 800a27a:	0151      	lsls	r1, r2, #5
 800a27c:	69fa      	ldr	r2, [r7, #28]
 800a27e:	440a      	add	r2, r1
 800a280:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a284:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a288:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800a28a:	68bb      	ldr	r3, [r7, #8]
 800a28c:	6919      	ldr	r1, [r3, #16]
 800a28e:	68bb      	ldr	r3, [r7, #8]
 800a290:	781a      	ldrb	r2, [r3, #0]
 800a292:	68bb      	ldr	r3, [r7, #8]
 800a294:	699b      	ldr	r3, [r3, #24]
 800a296:	b298      	uxth	r0, r3
 800a298:	79fb      	ldrb	r3, [r7, #7]
 800a29a:	9300      	str	r3, [sp, #0]
 800a29c:	4603      	mov	r3, r0
 800a29e:	68f8      	ldr	r0, [r7, #12]
 800a2a0:	f000 fade 	bl	800a860 <USB_WritePacket>
 800a2a4:	e0d2      	b.n	800a44c <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a2a6:	69bb      	ldr	r3, [r7, #24]
 800a2a8:	015a      	lsls	r2, r3, #5
 800a2aa:	69fb      	ldr	r3, [r7, #28]
 800a2ac:	4413      	add	r3, r2
 800a2ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a2b2:	691b      	ldr	r3, [r3, #16]
 800a2b4:	69ba      	ldr	r2, [r7, #24]
 800a2b6:	0151      	lsls	r1, r2, #5
 800a2b8:	69fa      	ldr	r2, [r7, #28]
 800a2ba:	440a      	add	r2, r1
 800a2bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a2c0:	0cdb      	lsrs	r3, r3, #19
 800a2c2:	04db      	lsls	r3, r3, #19
 800a2c4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a2c6:	69bb      	ldr	r3, [r7, #24]
 800a2c8:	015a      	lsls	r2, r3, #5
 800a2ca:	69fb      	ldr	r3, [r7, #28]
 800a2cc:	4413      	add	r3, r2
 800a2ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a2d2:	691b      	ldr	r3, [r3, #16]
 800a2d4:	69ba      	ldr	r2, [r7, #24]
 800a2d6:	0151      	lsls	r1, r2, #5
 800a2d8:	69fa      	ldr	r2, [r7, #28]
 800a2da:	440a      	add	r2, r1
 800a2dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a2e0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a2e4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a2e8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800a2ea:	68bb      	ldr	r3, [r7, #8]
 800a2ec:	699b      	ldr	r3, [r3, #24]
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d126      	bne.n	800a340 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a2f2:	69bb      	ldr	r3, [r7, #24]
 800a2f4:	015a      	lsls	r2, r3, #5
 800a2f6:	69fb      	ldr	r3, [r7, #28]
 800a2f8:	4413      	add	r3, r2
 800a2fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a2fe:	691a      	ldr	r2, [r3, #16]
 800a300:	68bb      	ldr	r3, [r7, #8]
 800a302:	68db      	ldr	r3, [r3, #12]
 800a304:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a308:	69b9      	ldr	r1, [r7, #24]
 800a30a:	0148      	lsls	r0, r1, #5
 800a30c:	69f9      	ldr	r1, [r7, #28]
 800a30e:	4401      	add	r1, r0
 800a310:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a314:	4313      	orrs	r3, r2
 800a316:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a318:	69bb      	ldr	r3, [r7, #24]
 800a31a:	015a      	lsls	r2, r3, #5
 800a31c:	69fb      	ldr	r3, [r7, #28]
 800a31e:	4413      	add	r3, r2
 800a320:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a324:	691b      	ldr	r3, [r3, #16]
 800a326:	69ba      	ldr	r2, [r7, #24]
 800a328:	0151      	lsls	r1, r2, #5
 800a32a:	69fa      	ldr	r2, [r7, #28]
 800a32c:	440a      	add	r2, r1
 800a32e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a332:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a336:	6113      	str	r3, [r2, #16]
 800a338:	e03a      	b.n	800a3b0 <USB_EPStartXfer+0x3e4>
 800a33a:	bf00      	nop
 800a33c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a340:	68bb      	ldr	r3, [r7, #8]
 800a342:	699a      	ldr	r2, [r3, #24]
 800a344:	68bb      	ldr	r3, [r7, #8]
 800a346:	68db      	ldr	r3, [r3, #12]
 800a348:	4413      	add	r3, r2
 800a34a:	1e5a      	subs	r2, r3, #1
 800a34c:	68bb      	ldr	r3, [r7, #8]
 800a34e:	68db      	ldr	r3, [r3, #12]
 800a350:	fbb2 f3f3 	udiv	r3, r2, r3
 800a354:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800a356:	68bb      	ldr	r3, [r7, #8]
 800a358:	68db      	ldr	r3, [r3, #12]
 800a35a:	8afa      	ldrh	r2, [r7, #22]
 800a35c:	fb03 f202 	mul.w	r2, r3, r2
 800a360:	68bb      	ldr	r3, [r7, #8]
 800a362:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a364:	69bb      	ldr	r3, [r7, #24]
 800a366:	015a      	lsls	r2, r3, #5
 800a368:	69fb      	ldr	r3, [r7, #28]
 800a36a:	4413      	add	r3, r2
 800a36c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a370:	691a      	ldr	r2, [r3, #16]
 800a372:	8afb      	ldrh	r3, [r7, #22]
 800a374:	04d9      	lsls	r1, r3, #19
 800a376:	4b38      	ldr	r3, [pc, #224]	; (800a458 <USB_EPStartXfer+0x48c>)
 800a378:	400b      	ands	r3, r1
 800a37a:	69b9      	ldr	r1, [r7, #24]
 800a37c:	0148      	lsls	r0, r1, #5
 800a37e:	69f9      	ldr	r1, [r7, #28]
 800a380:	4401      	add	r1, r0
 800a382:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a386:	4313      	orrs	r3, r2
 800a388:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800a38a:	69bb      	ldr	r3, [r7, #24]
 800a38c:	015a      	lsls	r2, r3, #5
 800a38e:	69fb      	ldr	r3, [r7, #28]
 800a390:	4413      	add	r3, r2
 800a392:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a396:	691a      	ldr	r2, [r3, #16]
 800a398:	68bb      	ldr	r3, [r7, #8]
 800a39a:	69db      	ldr	r3, [r3, #28]
 800a39c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a3a0:	69b9      	ldr	r1, [r7, #24]
 800a3a2:	0148      	lsls	r0, r1, #5
 800a3a4:	69f9      	ldr	r1, [r7, #28]
 800a3a6:	4401      	add	r1, r0
 800a3a8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a3ac:	4313      	orrs	r3, r2
 800a3ae:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a3b0:	79fb      	ldrb	r3, [r7, #7]
 800a3b2:	2b01      	cmp	r3, #1
 800a3b4:	d10d      	bne.n	800a3d2 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a3b6:	68bb      	ldr	r3, [r7, #8]
 800a3b8:	691b      	ldr	r3, [r3, #16]
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d009      	beq.n	800a3d2 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a3be:	68bb      	ldr	r3, [r7, #8]
 800a3c0:	6919      	ldr	r1, [r3, #16]
 800a3c2:	69bb      	ldr	r3, [r7, #24]
 800a3c4:	015a      	lsls	r2, r3, #5
 800a3c6:	69fb      	ldr	r3, [r7, #28]
 800a3c8:	4413      	add	r3, r2
 800a3ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3ce:	460a      	mov	r2, r1
 800a3d0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800a3d2:	68bb      	ldr	r3, [r7, #8]
 800a3d4:	791b      	ldrb	r3, [r3, #4]
 800a3d6:	2b01      	cmp	r3, #1
 800a3d8:	d128      	bne.n	800a42c <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a3da:	69fb      	ldr	r3, [r7, #28]
 800a3dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a3e0:	689b      	ldr	r3, [r3, #8]
 800a3e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d110      	bne.n	800a40c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a3ea:	69bb      	ldr	r3, [r7, #24]
 800a3ec:	015a      	lsls	r2, r3, #5
 800a3ee:	69fb      	ldr	r3, [r7, #28]
 800a3f0:	4413      	add	r3, r2
 800a3f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	69ba      	ldr	r2, [r7, #24]
 800a3fa:	0151      	lsls	r1, r2, #5
 800a3fc:	69fa      	ldr	r2, [r7, #28]
 800a3fe:	440a      	add	r2, r1
 800a400:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a404:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a408:	6013      	str	r3, [r2, #0]
 800a40a:	e00f      	b.n	800a42c <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a40c:	69bb      	ldr	r3, [r7, #24]
 800a40e:	015a      	lsls	r2, r3, #5
 800a410:	69fb      	ldr	r3, [r7, #28]
 800a412:	4413      	add	r3, r2
 800a414:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	69ba      	ldr	r2, [r7, #24]
 800a41c:	0151      	lsls	r1, r2, #5
 800a41e:	69fa      	ldr	r2, [r7, #28]
 800a420:	440a      	add	r2, r1
 800a422:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a426:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a42a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a42c:	69bb      	ldr	r3, [r7, #24]
 800a42e:	015a      	lsls	r2, r3, #5
 800a430:	69fb      	ldr	r3, [r7, #28]
 800a432:	4413      	add	r3, r2
 800a434:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	69ba      	ldr	r2, [r7, #24]
 800a43c:	0151      	lsls	r1, r2, #5
 800a43e:	69fa      	ldr	r2, [r7, #28]
 800a440:	440a      	add	r2, r1
 800a442:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a446:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a44a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a44c:	2300      	movs	r3, #0
}
 800a44e:	4618      	mov	r0, r3
 800a450:	3720      	adds	r7, #32
 800a452:	46bd      	mov	sp, r7
 800a454:	bd80      	pop	{r7, pc}
 800a456:	bf00      	nop
 800a458:	1ff80000 	.word	0x1ff80000

0800a45c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a45c:	b480      	push	{r7}
 800a45e:	b087      	sub	sp, #28
 800a460:	af00      	add	r7, sp, #0
 800a462:	60f8      	str	r0, [r7, #12]
 800a464:	60b9      	str	r1, [r7, #8]
 800a466:	4613      	mov	r3, r2
 800a468:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800a46e:	68bb      	ldr	r3, [r7, #8]
 800a470:	781b      	ldrb	r3, [r3, #0]
 800a472:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a474:	68bb      	ldr	r3, [r7, #8]
 800a476:	785b      	ldrb	r3, [r3, #1]
 800a478:	2b01      	cmp	r3, #1
 800a47a:	f040 80ce 	bne.w	800a61a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a47e:	68bb      	ldr	r3, [r7, #8]
 800a480:	699b      	ldr	r3, [r3, #24]
 800a482:	2b00      	cmp	r3, #0
 800a484:	d132      	bne.n	800a4ec <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a486:	693b      	ldr	r3, [r7, #16]
 800a488:	015a      	lsls	r2, r3, #5
 800a48a:	697b      	ldr	r3, [r7, #20]
 800a48c:	4413      	add	r3, r2
 800a48e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a492:	691b      	ldr	r3, [r3, #16]
 800a494:	693a      	ldr	r2, [r7, #16]
 800a496:	0151      	lsls	r1, r2, #5
 800a498:	697a      	ldr	r2, [r7, #20]
 800a49a:	440a      	add	r2, r1
 800a49c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a4a0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a4a4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a4a8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a4aa:	693b      	ldr	r3, [r7, #16]
 800a4ac:	015a      	lsls	r2, r3, #5
 800a4ae:	697b      	ldr	r3, [r7, #20]
 800a4b0:	4413      	add	r3, r2
 800a4b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4b6:	691b      	ldr	r3, [r3, #16]
 800a4b8:	693a      	ldr	r2, [r7, #16]
 800a4ba:	0151      	lsls	r1, r2, #5
 800a4bc:	697a      	ldr	r2, [r7, #20]
 800a4be:	440a      	add	r2, r1
 800a4c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a4c4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a4c8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a4ca:	693b      	ldr	r3, [r7, #16]
 800a4cc:	015a      	lsls	r2, r3, #5
 800a4ce:	697b      	ldr	r3, [r7, #20]
 800a4d0:	4413      	add	r3, r2
 800a4d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4d6:	691b      	ldr	r3, [r3, #16]
 800a4d8:	693a      	ldr	r2, [r7, #16]
 800a4da:	0151      	lsls	r1, r2, #5
 800a4dc:	697a      	ldr	r2, [r7, #20]
 800a4de:	440a      	add	r2, r1
 800a4e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a4e4:	0cdb      	lsrs	r3, r3, #19
 800a4e6:	04db      	lsls	r3, r3, #19
 800a4e8:	6113      	str	r3, [r2, #16]
 800a4ea:	e04e      	b.n	800a58a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a4ec:	693b      	ldr	r3, [r7, #16]
 800a4ee:	015a      	lsls	r2, r3, #5
 800a4f0:	697b      	ldr	r3, [r7, #20]
 800a4f2:	4413      	add	r3, r2
 800a4f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4f8:	691b      	ldr	r3, [r3, #16]
 800a4fa:	693a      	ldr	r2, [r7, #16]
 800a4fc:	0151      	lsls	r1, r2, #5
 800a4fe:	697a      	ldr	r2, [r7, #20]
 800a500:	440a      	add	r2, r1
 800a502:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a506:	0cdb      	lsrs	r3, r3, #19
 800a508:	04db      	lsls	r3, r3, #19
 800a50a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a50c:	693b      	ldr	r3, [r7, #16]
 800a50e:	015a      	lsls	r2, r3, #5
 800a510:	697b      	ldr	r3, [r7, #20]
 800a512:	4413      	add	r3, r2
 800a514:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a518:	691b      	ldr	r3, [r3, #16]
 800a51a:	693a      	ldr	r2, [r7, #16]
 800a51c:	0151      	lsls	r1, r2, #5
 800a51e:	697a      	ldr	r2, [r7, #20]
 800a520:	440a      	add	r2, r1
 800a522:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a526:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a52a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a52e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800a530:	68bb      	ldr	r3, [r7, #8]
 800a532:	699a      	ldr	r2, [r3, #24]
 800a534:	68bb      	ldr	r3, [r7, #8]
 800a536:	68db      	ldr	r3, [r3, #12]
 800a538:	429a      	cmp	r2, r3
 800a53a:	d903      	bls.n	800a544 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800a53c:	68bb      	ldr	r3, [r7, #8]
 800a53e:	68da      	ldr	r2, [r3, #12]
 800a540:	68bb      	ldr	r3, [r7, #8]
 800a542:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a544:	693b      	ldr	r3, [r7, #16]
 800a546:	015a      	lsls	r2, r3, #5
 800a548:	697b      	ldr	r3, [r7, #20]
 800a54a:	4413      	add	r3, r2
 800a54c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a550:	691b      	ldr	r3, [r3, #16]
 800a552:	693a      	ldr	r2, [r7, #16]
 800a554:	0151      	lsls	r1, r2, #5
 800a556:	697a      	ldr	r2, [r7, #20]
 800a558:	440a      	add	r2, r1
 800a55a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a55e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a562:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a564:	693b      	ldr	r3, [r7, #16]
 800a566:	015a      	lsls	r2, r3, #5
 800a568:	697b      	ldr	r3, [r7, #20]
 800a56a:	4413      	add	r3, r2
 800a56c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a570:	691a      	ldr	r2, [r3, #16]
 800a572:	68bb      	ldr	r3, [r7, #8]
 800a574:	699b      	ldr	r3, [r3, #24]
 800a576:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a57a:	6939      	ldr	r1, [r7, #16]
 800a57c:	0148      	lsls	r0, r1, #5
 800a57e:	6979      	ldr	r1, [r7, #20]
 800a580:	4401      	add	r1, r0
 800a582:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a586:	4313      	orrs	r3, r2
 800a588:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a58a:	79fb      	ldrb	r3, [r7, #7]
 800a58c:	2b01      	cmp	r3, #1
 800a58e:	d11e      	bne.n	800a5ce <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a590:	68bb      	ldr	r3, [r7, #8]
 800a592:	695b      	ldr	r3, [r3, #20]
 800a594:	2b00      	cmp	r3, #0
 800a596:	d009      	beq.n	800a5ac <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a598:	693b      	ldr	r3, [r7, #16]
 800a59a:	015a      	lsls	r2, r3, #5
 800a59c:	697b      	ldr	r3, [r7, #20]
 800a59e:	4413      	add	r3, r2
 800a5a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5a4:	461a      	mov	r2, r3
 800a5a6:	68bb      	ldr	r3, [r7, #8]
 800a5a8:	695b      	ldr	r3, [r3, #20]
 800a5aa:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a5ac:	693b      	ldr	r3, [r7, #16]
 800a5ae:	015a      	lsls	r2, r3, #5
 800a5b0:	697b      	ldr	r3, [r7, #20]
 800a5b2:	4413      	add	r3, r2
 800a5b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	693a      	ldr	r2, [r7, #16]
 800a5bc:	0151      	lsls	r1, r2, #5
 800a5be:	697a      	ldr	r2, [r7, #20]
 800a5c0:	440a      	add	r2, r1
 800a5c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a5c6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a5ca:	6013      	str	r3, [r2, #0]
 800a5cc:	e097      	b.n	800a6fe <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a5ce:	693b      	ldr	r3, [r7, #16]
 800a5d0:	015a      	lsls	r2, r3, #5
 800a5d2:	697b      	ldr	r3, [r7, #20]
 800a5d4:	4413      	add	r3, r2
 800a5d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	693a      	ldr	r2, [r7, #16]
 800a5de:	0151      	lsls	r1, r2, #5
 800a5e0:	697a      	ldr	r2, [r7, #20]
 800a5e2:	440a      	add	r2, r1
 800a5e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a5e8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a5ec:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800a5ee:	68bb      	ldr	r3, [r7, #8]
 800a5f0:	699b      	ldr	r3, [r3, #24]
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	f000 8083 	beq.w	800a6fe <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a5f8:	697b      	ldr	r3, [r7, #20]
 800a5fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a5fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a600:	68bb      	ldr	r3, [r7, #8]
 800a602:	781b      	ldrb	r3, [r3, #0]
 800a604:	f003 030f 	and.w	r3, r3, #15
 800a608:	2101      	movs	r1, #1
 800a60a:	fa01 f303 	lsl.w	r3, r1, r3
 800a60e:	6979      	ldr	r1, [r7, #20]
 800a610:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a614:	4313      	orrs	r3, r2
 800a616:	634b      	str	r3, [r1, #52]	; 0x34
 800a618:	e071      	b.n	800a6fe <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a61a:	693b      	ldr	r3, [r7, #16]
 800a61c:	015a      	lsls	r2, r3, #5
 800a61e:	697b      	ldr	r3, [r7, #20]
 800a620:	4413      	add	r3, r2
 800a622:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a626:	691b      	ldr	r3, [r3, #16]
 800a628:	693a      	ldr	r2, [r7, #16]
 800a62a:	0151      	lsls	r1, r2, #5
 800a62c:	697a      	ldr	r2, [r7, #20]
 800a62e:	440a      	add	r2, r1
 800a630:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a634:	0cdb      	lsrs	r3, r3, #19
 800a636:	04db      	lsls	r3, r3, #19
 800a638:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a63a:	693b      	ldr	r3, [r7, #16]
 800a63c:	015a      	lsls	r2, r3, #5
 800a63e:	697b      	ldr	r3, [r7, #20]
 800a640:	4413      	add	r3, r2
 800a642:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a646:	691b      	ldr	r3, [r3, #16]
 800a648:	693a      	ldr	r2, [r7, #16]
 800a64a:	0151      	lsls	r1, r2, #5
 800a64c:	697a      	ldr	r2, [r7, #20]
 800a64e:	440a      	add	r2, r1
 800a650:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a654:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a658:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a65c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800a65e:	68bb      	ldr	r3, [r7, #8]
 800a660:	699b      	ldr	r3, [r3, #24]
 800a662:	2b00      	cmp	r3, #0
 800a664:	d003      	beq.n	800a66e <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800a666:	68bb      	ldr	r3, [r7, #8]
 800a668:	68da      	ldr	r2, [r3, #12]
 800a66a:	68bb      	ldr	r3, [r7, #8]
 800a66c:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800a66e:	68bb      	ldr	r3, [r7, #8]
 800a670:	68da      	ldr	r2, [r3, #12]
 800a672:	68bb      	ldr	r3, [r7, #8]
 800a674:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a676:	693b      	ldr	r3, [r7, #16]
 800a678:	015a      	lsls	r2, r3, #5
 800a67a:	697b      	ldr	r3, [r7, #20]
 800a67c:	4413      	add	r3, r2
 800a67e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a682:	691b      	ldr	r3, [r3, #16]
 800a684:	693a      	ldr	r2, [r7, #16]
 800a686:	0151      	lsls	r1, r2, #5
 800a688:	697a      	ldr	r2, [r7, #20]
 800a68a:	440a      	add	r2, r1
 800a68c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a690:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a694:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800a696:	693b      	ldr	r3, [r7, #16]
 800a698:	015a      	lsls	r2, r3, #5
 800a69a:	697b      	ldr	r3, [r7, #20]
 800a69c:	4413      	add	r3, r2
 800a69e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a6a2:	691a      	ldr	r2, [r3, #16]
 800a6a4:	68bb      	ldr	r3, [r7, #8]
 800a6a6:	69db      	ldr	r3, [r3, #28]
 800a6a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a6ac:	6939      	ldr	r1, [r7, #16]
 800a6ae:	0148      	lsls	r0, r1, #5
 800a6b0:	6979      	ldr	r1, [r7, #20]
 800a6b2:	4401      	add	r1, r0
 800a6b4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a6b8:	4313      	orrs	r3, r2
 800a6ba:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800a6bc:	79fb      	ldrb	r3, [r7, #7]
 800a6be:	2b01      	cmp	r3, #1
 800a6c0:	d10d      	bne.n	800a6de <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a6c2:	68bb      	ldr	r3, [r7, #8]
 800a6c4:	691b      	ldr	r3, [r3, #16]
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d009      	beq.n	800a6de <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a6ca:	68bb      	ldr	r3, [r7, #8]
 800a6cc:	6919      	ldr	r1, [r3, #16]
 800a6ce:	693b      	ldr	r3, [r7, #16]
 800a6d0:	015a      	lsls	r2, r3, #5
 800a6d2:	697b      	ldr	r3, [r7, #20]
 800a6d4:	4413      	add	r3, r2
 800a6d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a6da:	460a      	mov	r2, r1
 800a6dc:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a6de:	693b      	ldr	r3, [r7, #16]
 800a6e0:	015a      	lsls	r2, r3, #5
 800a6e2:	697b      	ldr	r3, [r7, #20]
 800a6e4:	4413      	add	r3, r2
 800a6e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	693a      	ldr	r2, [r7, #16]
 800a6ee:	0151      	lsls	r1, r2, #5
 800a6f0:	697a      	ldr	r2, [r7, #20]
 800a6f2:	440a      	add	r2, r1
 800a6f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a6f8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a6fc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a6fe:	2300      	movs	r3, #0
}
 800a700:	4618      	mov	r0, r3
 800a702:	371c      	adds	r7, #28
 800a704:	46bd      	mov	sp, r7
 800a706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70a:	4770      	bx	lr

0800a70c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a70c:	b480      	push	{r7}
 800a70e:	b087      	sub	sp, #28
 800a710:	af00      	add	r7, sp, #0
 800a712:	6078      	str	r0, [r7, #4]
 800a714:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a716:	2300      	movs	r3, #0
 800a718:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800a71a:	2300      	movs	r3, #0
 800a71c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a722:	683b      	ldr	r3, [r7, #0]
 800a724:	785b      	ldrb	r3, [r3, #1]
 800a726:	2b01      	cmp	r3, #1
 800a728:	d14a      	bne.n	800a7c0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a72a:	683b      	ldr	r3, [r7, #0]
 800a72c:	781b      	ldrb	r3, [r3, #0]
 800a72e:	015a      	lsls	r2, r3, #5
 800a730:	693b      	ldr	r3, [r7, #16]
 800a732:	4413      	add	r3, r2
 800a734:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a73e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a742:	f040 8086 	bne.w	800a852 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800a746:	683b      	ldr	r3, [r7, #0]
 800a748:	781b      	ldrb	r3, [r3, #0]
 800a74a:	015a      	lsls	r2, r3, #5
 800a74c:	693b      	ldr	r3, [r7, #16]
 800a74e:	4413      	add	r3, r2
 800a750:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	683a      	ldr	r2, [r7, #0]
 800a758:	7812      	ldrb	r2, [r2, #0]
 800a75a:	0151      	lsls	r1, r2, #5
 800a75c:	693a      	ldr	r2, [r7, #16]
 800a75e:	440a      	add	r2, r1
 800a760:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a764:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a768:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800a76a:	683b      	ldr	r3, [r7, #0]
 800a76c:	781b      	ldrb	r3, [r3, #0]
 800a76e:	015a      	lsls	r2, r3, #5
 800a770:	693b      	ldr	r3, [r7, #16]
 800a772:	4413      	add	r3, r2
 800a774:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	683a      	ldr	r2, [r7, #0]
 800a77c:	7812      	ldrb	r2, [r2, #0]
 800a77e:	0151      	lsls	r1, r2, #5
 800a780:	693a      	ldr	r2, [r7, #16]
 800a782:	440a      	add	r2, r1
 800a784:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a788:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a78c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	3301      	adds	r3, #1
 800a792:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	f242 7210 	movw	r2, #10000	; 0x2710
 800a79a:	4293      	cmp	r3, r2
 800a79c:	d902      	bls.n	800a7a4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800a79e:	2301      	movs	r3, #1
 800a7a0:	75fb      	strb	r3, [r7, #23]
          break;
 800a7a2:	e056      	b.n	800a852 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800a7a4:	683b      	ldr	r3, [r7, #0]
 800a7a6:	781b      	ldrb	r3, [r3, #0]
 800a7a8:	015a      	lsls	r2, r3, #5
 800a7aa:	693b      	ldr	r3, [r7, #16]
 800a7ac:	4413      	add	r3, r2
 800a7ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a7b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a7bc:	d0e7      	beq.n	800a78e <USB_EPStopXfer+0x82>
 800a7be:	e048      	b.n	800a852 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a7c0:	683b      	ldr	r3, [r7, #0]
 800a7c2:	781b      	ldrb	r3, [r3, #0]
 800a7c4:	015a      	lsls	r2, r3, #5
 800a7c6:	693b      	ldr	r3, [r7, #16]
 800a7c8:	4413      	add	r3, r2
 800a7ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a7d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a7d8:	d13b      	bne.n	800a852 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800a7da:	683b      	ldr	r3, [r7, #0]
 800a7dc:	781b      	ldrb	r3, [r3, #0]
 800a7de:	015a      	lsls	r2, r3, #5
 800a7e0:	693b      	ldr	r3, [r7, #16]
 800a7e2:	4413      	add	r3, r2
 800a7e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	683a      	ldr	r2, [r7, #0]
 800a7ec:	7812      	ldrb	r2, [r2, #0]
 800a7ee:	0151      	lsls	r1, r2, #5
 800a7f0:	693a      	ldr	r2, [r7, #16]
 800a7f2:	440a      	add	r2, r1
 800a7f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a7f8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a7fc:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800a7fe:	683b      	ldr	r3, [r7, #0]
 800a800:	781b      	ldrb	r3, [r3, #0]
 800a802:	015a      	lsls	r2, r3, #5
 800a804:	693b      	ldr	r3, [r7, #16]
 800a806:	4413      	add	r3, r2
 800a808:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	683a      	ldr	r2, [r7, #0]
 800a810:	7812      	ldrb	r2, [r2, #0]
 800a812:	0151      	lsls	r1, r2, #5
 800a814:	693a      	ldr	r2, [r7, #16]
 800a816:	440a      	add	r2, r1
 800a818:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a81c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a820:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	3301      	adds	r3, #1
 800a826:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	f242 7210 	movw	r2, #10000	; 0x2710
 800a82e:	4293      	cmp	r3, r2
 800a830:	d902      	bls.n	800a838 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800a832:	2301      	movs	r3, #1
 800a834:	75fb      	strb	r3, [r7, #23]
          break;
 800a836:	e00c      	b.n	800a852 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800a838:	683b      	ldr	r3, [r7, #0]
 800a83a:	781b      	ldrb	r3, [r3, #0]
 800a83c:	015a      	lsls	r2, r3, #5
 800a83e:	693b      	ldr	r3, [r7, #16]
 800a840:	4413      	add	r3, r2
 800a842:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a84c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a850:	d0e7      	beq.n	800a822 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800a852:	7dfb      	ldrb	r3, [r7, #23]
}
 800a854:	4618      	mov	r0, r3
 800a856:	371c      	adds	r7, #28
 800a858:	46bd      	mov	sp, r7
 800a85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a85e:	4770      	bx	lr

0800a860 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a860:	b480      	push	{r7}
 800a862:	b089      	sub	sp, #36	; 0x24
 800a864:	af00      	add	r7, sp, #0
 800a866:	60f8      	str	r0, [r7, #12]
 800a868:	60b9      	str	r1, [r7, #8]
 800a86a:	4611      	mov	r1, r2
 800a86c:	461a      	mov	r2, r3
 800a86e:	460b      	mov	r3, r1
 800a870:	71fb      	strb	r3, [r7, #7]
 800a872:	4613      	mov	r3, r2
 800a874:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a87a:	68bb      	ldr	r3, [r7, #8]
 800a87c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a87e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a882:	2b00      	cmp	r3, #0
 800a884:	d123      	bne.n	800a8ce <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a886:	88bb      	ldrh	r3, [r7, #4]
 800a888:	3303      	adds	r3, #3
 800a88a:	089b      	lsrs	r3, r3, #2
 800a88c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a88e:	2300      	movs	r3, #0
 800a890:	61bb      	str	r3, [r7, #24]
 800a892:	e018      	b.n	800a8c6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a894:	79fb      	ldrb	r3, [r7, #7]
 800a896:	031a      	lsls	r2, r3, #12
 800a898:	697b      	ldr	r3, [r7, #20]
 800a89a:	4413      	add	r3, r2
 800a89c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a8a0:	461a      	mov	r2, r3
 800a8a2:	69fb      	ldr	r3, [r7, #28]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a8a8:	69fb      	ldr	r3, [r7, #28]
 800a8aa:	3301      	adds	r3, #1
 800a8ac:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a8ae:	69fb      	ldr	r3, [r7, #28]
 800a8b0:	3301      	adds	r3, #1
 800a8b2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a8b4:	69fb      	ldr	r3, [r7, #28]
 800a8b6:	3301      	adds	r3, #1
 800a8b8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a8ba:	69fb      	ldr	r3, [r7, #28]
 800a8bc:	3301      	adds	r3, #1
 800a8be:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a8c0:	69bb      	ldr	r3, [r7, #24]
 800a8c2:	3301      	adds	r3, #1
 800a8c4:	61bb      	str	r3, [r7, #24]
 800a8c6:	69ba      	ldr	r2, [r7, #24]
 800a8c8:	693b      	ldr	r3, [r7, #16]
 800a8ca:	429a      	cmp	r2, r3
 800a8cc:	d3e2      	bcc.n	800a894 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a8ce:	2300      	movs	r3, #0
}
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	3724      	adds	r7, #36	; 0x24
 800a8d4:	46bd      	mov	sp, r7
 800a8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8da:	4770      	bx	lr

0800a8dc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a8dc:	b480      	push	{r7}
 800a8de:	b08b      	sub	sp, #44	; 0x2c
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	60f8      	str	r0, [r7, #12]
 800a8e4:	60b9      	str	r1, [r7, #8]
 800a8e6:	4613      	mov	r3, r2
 800a8e8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a8ee:	68bb      	ldr	r3, [r7, #8]
 800a8f0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a8f2:	88fb      	ldrh	r3, [r7, #6]
 800a8f4:	089b      	lsrs	r3, r3, #2
 800a8f6:	b29b      	uxth	r3, r3
 800a8f8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a8fa:	88fb      	ldrh	r3, [r7, #6]
 800a8fc:	f003 0303 	and.w	r3, r3, #3
 800a900:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a902:	2300      	movs	r3, #0
 800a904:	623b      	str	r3, [r7, #32]
 800a906:	e014      	b.n	800a932 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a908:	69bb      	ldr	r3, [r7, #24]
 800a90a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a90e:	681a      	ldr	r2, [r3, #0]
 800a910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a912:	601a      	str	r2, [r3, #0]
    pDest++;
 800a914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a916:	3301      	adds	r3, #1
 800a918:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a91a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a91c:	3301      	adds	r3, #1
 800a91e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a922:	3301      	adds	r3, #1
 800a924:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a928:	3301      	adds	r3, #1
 800a92a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800a92c:	6a3b      	ldr	r3, [r7, #32]
 800a92e:	3301      	adds	r3, #1
 800a930:	623b      	str	r3, [r7, #32]
 800a932:	6a3a      	ldr	r2, [r7, #32]
 800a934:	697b      	ldr	r3, [r7, #20]
 800a936:	429a      	cmp	r2, r3
 800a938:	d3e6      	bcc.n	800a908 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a93a:	8bfb      	ldrh	r3, [r7, #30]
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d01e      	beq.n	800a97e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a940:	2300      	movs	r3, #0
 800a942:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a944:	69bb      	ldr	r3, [r7, #24]
 800a946:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a94a:	461a      	mov	r2, r3
 800a94c:	f107 0310 	add.w	r3, r7, #16
 800a950:	6812      	ldr	r2, [r2, #0]
 800a952:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a954:	693a      	ldr	r2, [r7, #16]
 800a956:	6a3b      	ldr	r3, [r7, #32]
 800a958:	b2db      	uxtb	r3, r3
 800a95a:	00db      	lsls	r3, r3, #3
 800a95c:	fa22 f303 	lsr.w	r3, r2, r3
 800a960:	b2da      	uxtb	r2, r3
 800a962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a964:	701a      	strb	r2, [r3, #0]
      i++;
 800a966:	6a3b      	ldr	r3, [r7, #32]
 800a968:	3301      	adds	r3, #1
 800a96a:	623b      	str	r3, [r7, #32]
      pDest++;
 800a96c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a96e:	3301      	adds	r3, #1
 800a970:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800a972:	8bfb      	ldrh	r3, [r7, #30]
 800a974:	3b01      	subs	r3, #1
 800a976:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a978:	8bfb      	ldrh	r3, [r7, #30]
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d1ea      	bne.n	800a954 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a97e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a980:	4618      	mov	r0, r3
 800a982:	372c      	adds	r7, #44	; 0x2c
 800a984:	46bd      	mov	sp, r7
 800a986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98a:	4770      	bx	lr

0800a98c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a98c:	b480      	push	{r7}
 800a98e:	b085      	sub	sp, #20
 800a990:	af00      	add	r7, sp, #0
 800a992:	6078      	str	r0, [r7, #4]
 800a994:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a99a:	683b      	ldr	r3, [r7, #0]
 800a99c:	781b      	ldrb	r3, [r3, #0]
 800a99e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a9a0:	683b      	ldr	r3, [r7, #0]
 800a9a2:	785b      	ldrb	r3, [r3, #1]
 800a9a4:	2b01      	cmp	r3, #1
 800a9a6:	d12c      	bne.n	800aa02 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a9a8:	68bb      	ldr	r3, [r7, #8]
 800a9aa:	015a      	lsls	r2, r3, #5
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	4413      	add	r3, r2
 800a9b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	db12      	blt.n	800a9e0 <USB_EPSetStall+0x54>
 800a9ba:	68bb      	ldr	r3, [r7, #8]
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d00f      	beq.n	800a9e0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a9c0:	68bb      	ldr	r3, [r7, #8]
 800a9c2:	015a      	lsls	r2, r3, #5
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	4413      	add	r3, r2
 800a9c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	68ba      	ldr	r2, [r7, #8]
 800a9d0:	0151      	lsls	r1, r2, #5
 800a9d2:	68fa      	ldr	r2, [r7, #12]
 800a9d4:	440a      	add	r2, r1
 800a9d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a9da:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a9de:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a9e0:	68bb      	ldr	r3, [r7, #8]
 800a9e2:	015a      	lsls	r2, r3, #5
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	4413      	add	r3, r2
 800a9e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	68ba      	ldr	r2, [r7, #8]
 800a9f0:	0151      	lsls	r1, r2, #5
 800a9f2:	68fa      	ldr	r2, [r7, #12]
 800a9f4:	440a      	add	r2, r1
 800a9f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a9fa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a9fe:	6013      	str	r3, [r2, #0]
 800aa00:	e02b      	b.n	800aa5a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800aa02:	68bb      	ldr	r3, [r7, #8]
 800aa04:	015a      	lsls	r2, r3, #5
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	4413      	add	r3, r2
 800aa0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	db12      	blt.n	800aa3a <USB_EPSetStall+0xae>
 800aa14:	68bb      	ldr	r3, [r7, #8]
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d00f      	beq.n	800aa3a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800aa1a:	68bb      	ldr	r3, [r7, #8]
 800aa1c:	015a      	lsls	r2, r3, #5
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	4413      	add	r3, r2
 800aa22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	68ba      	ldr	r2, [r7, #8]
 800aa2a:	0151      	lsls	r1, r2, #5
 800aa2c:	68fa      	ldr	r2, [r7, #12]
 800aa2e:	440a      	add	r2, r1
 800aa30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aa34:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800aa38:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800aa3a:	68bb      	ldr	r3, [r7, #8]
 800aa3c:	015a      	lsls	r2, r3, #5
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	4413      	add	r3, r2
 800aa42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	68ba      	ldr	r2, [r7, #8]
 800aa4a:	0151      	lsls	r1, r2, #5
 800aa4c:	68fa      	ldr	r2, [r7, #12]
 800aa4e:	440a      	add	r2, r1
 800aa50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aa54:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800aa58:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800aa5a:	2300      	movs	r3, #0
}
 800aa5c:	4618      	mov	r0, r3
 800aa5e:	3714      	adds	r7, #20
 800aa60:	46bd      	mov	sp, r7
 800aa62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa66:	4770      	bx	lr

0800aa68 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800aa68:	b480      	push	{r7}
 800aa6a:	b085      	sub	sp, #20
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	6078      	str	r0, [r7, #4]
 800aa70:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800aa76:	683b      	ldr	r3, [r7, #0]
 800aa78:	781b      	ldrb	r3, [r3, #0]
 800aa7a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800aa7c:	683b      	ldr	r3, [r7, #0]
 800aa7e:	785b      	ldrb	r3, [r3, #1]
 800aa80:	2b01      	cmp	r3, #1
 800aa82:	d128      	bne.n	800aad6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800aa84:	68bb      	ldr	r3, [r7, #8]
 800aa86:	015a      	lsls	r2, r3, #5
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	4413      	add	r3, r2
 800aa8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	68ba      	ldr	r2, [r7, #8]
 800aa94:	0151      	lsls	r1, r2, #5
 800aa96:	68fa      	ldr	r2, [r7, #12]
 800aa98:	440a      	add	r2, r1
 800aa9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aa9e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800aaa2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800aaa4:	683b      	ldr	r3, [r7, #0]
 800aaa6:	791b      	ldrb	r3, [r3, #4]
 800aaa8:	2b03      	cmp	r3, #3
 800aaaa:	d003      	beq.n	800aab4 <USB_EPClearStall+0x4c>
 800aaac:	683b      	ldr	r3, [r7, #0]
 800aaae:	791b      	ldrb	r3, [r3, #4]
 800aab0:	2b02      	cmp	r3, #2
 800aab2:	d138      	bne.n	800ab26 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800aab4:	68bb      	ldr	r3, [r7, #8]
 800aab6:	015a      	lsls	r2, r3, #5
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	4413      	add	r3, r2
 800aabc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	68ba      	ldr	r2, [r7, #8]
 800aac4:	0151      	lsls	r1, r2, #5
 800aac6:	68fa      	ldr	r2, [r7, #12]
 800aac8:	440a      	add	r2, r1
 800aaca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aace:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aad2:	6013      	str	r3, [r2, #0]
 800aad4:	e027      	b.n	800ab26 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800aad6:	68bb      	ldr	r3, [r7, #8]
 800aad8:	015a      	lsls	r2, r3, #5
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	4413      	add	r3, r2
 800aade:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	68ba      	ldr	r2, [r7, #8]
 800aae6:	0151      	lsls	r1, r2, #5
 800aae8:	68fa      	ldr	r2, [r7, #12]
 800aaea:	440a      	add	r2, r1
 800aaec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aaf0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800aaf4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800aaf6:	683b      	ldr	r3, [r7, #0]
 800aaf8:	791b      	ldrb	r3, [r3, #4]
 800aafa:	2b03      	cmp	r3, #3
 800aafc:	d003      	beq.n	800ab06 <USB_EPClearStall+0x9e>
 800aafe:	683b      	ldr	r3, [r7, #0]
 800ab00:	791b      	ldrb	r3, [r3, #4]
 800ab02:	2b02      	cmp	r3, #2
 800ab04:	d10f      	bne.n	800ab26 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ab06:	68bb      	ldr	r3, [r7, #8]
 800ab08:	015a      	lsls	r2, r3, #5
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	4413      	add	r3, r2
 800ab0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	68ba      	ldr	r2, [r7, #8]
 800ab16:	0151      	lsls	r1, r2, #5
 800ab18:	68fa      	ldr	r2, [r7, #12]
 800ab1a:	440a      	add	r2, r1
 800ab1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ab20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ab24:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800ab26:	2300      	movs	r3, #0
}
 800ab28:	4618      	mov	r0, r3
 800ab2a:	3714      	adds	r7, #20
 800ab2c:	46bd      	mov	sp, r7
 800ab2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab32:	4770      	bx	lr

0800ab34 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800ab34:	b480      	push	{r7}
 800ab36:	b085      	sub	sp, #20
 800ab38:	af00      	add	r7, sp, #0
 800ab3a:	6078      	str	r0, [r7, #4]
 800ab3c:	460b      	mov	r3, r1
 800ab3e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	68fa      	ldr	r2, [r7, #12]
 800ab4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ab52:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800ab56:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab5e:	681a      	ldr	r2, [r3, #0]
 800ab60:	78fb      	ldrb	r3, [r7, #3]
 800ab62:	011b      	lsls	r3, r3, #4
 800ab64:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800ab68:	68f9      	ldr	r1, [r7, #12]
 800ab6a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ab6e:	4313      	orrs	r3, r2
 800ab70:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800ab72:	2300      	movs	r3, #0
}
 800ab74:	4618      	mov	r0, r3
 800ab76:	3714      	adds	r7, #20
 800ab78:	46bd      	mov	sp, r7
 800ab7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab7e:	4770      	bx	lr

0800ab80 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800ab80:	b480      	push	{r7}
 800ab82:	b085      	sub	sp, #20
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	68fa      	ldr	r2, [r7, #12]
 800ab96:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ab9a:	f023 0303 	bic.w	r3, r3, #3
 800ab9e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aba6:	685b      	ldr	r3, [r3, #4]
 800aba8:	68fa      	ldr	r2, [r7, #12]
 800abaa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800abae:	f023 0302 	bic.w	r3, r3, #2
 800abb2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800abb4:	2300      	movs	r3, #0
}
 800abb6:	4618      	mov	r0, r3
 800abb8:	3714      	adds	r7, #20
 800abba:	46bd      	mov	sp, r7
 800abbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc0:	4770      	bx	lr

0800abc2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800abc2:	b480      	push	{r7}
 800abc4:	b085      	sub	sp, #20
 800abc6:	af00      	add	r7, sp, #0
 800abc8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	68fa      	ldr	r2, [r7, #12]
 800abd8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800abdc:	f023 0303 	bic.w	r3, r3, #3
 800abe0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800abe8:	685b      	ldr	r3, [r3, #4]
 800abea:	68fa      	ldr	r2, [r7, #12]
 800abec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800abf0:	f043 0302 	orr.w	r3, r3, #2
 800abf4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800abf6:	2300      	movs	r3, #0
}
 800abf8:	4618      	mov	r0, r3
 800abfa:	3714      	adds	r7, #20
 800abfc:	46bd      	mov	sp, r7
 800abfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac02:	4770      	bx	lr

0800ac04 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800ac04:	b480      	push	{r7}
 800ac06:	b085      	sub	sp, #20
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	695b      	ldr	r3, [r3, #20]
 800ac10:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	699b      	ldr	r3, [r3, #24]
 800ac16:	68fa      	ldr	r2, [r7, #12]
 800ac18:	4013      	ands	r3, r2
 800ac1a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800ac1c:	68fb      	ldr	r3, [r7, #12]
}
 800ac1e:	4618      	mov	r0, r3
 800ac20:	3714      	adds	r7, #20
 800ac22:	46bd      	mov	sp, r7
 800ac24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac28:	4770      	bx	lr

0800ac2a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ac2a:	b480      	push	{r7}
 800ac2c:	b085      	sub	sp, #20
 800ac2e:	af00      	add	r7, sp, #0
 800ac30:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac3c:	699b      	ldr	r3, [r3, #24]
 800ac3e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac46:	69db      	ldr	r3, [r3, #28]
 800ac48:	68ba      	ldr	r2, [r7, #8]
 800ac4a:	4013      	ands	r3, r2
 800ac4c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800ac4e:	68bb      	ldr	r3, [r7, #8]
 800ac50:	0c1b      	lsrs	r3, r3, #16
}
 800ac52:	4618      	mov	r0, r3
 800ac54:	3714      	adds	r7, #20
 800ac56:	46bd      	mov	sp, r7
 800ac58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac5c:	4770      	bx	lr

0800ac5e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ac5e:	b480      	push	{r7}
 800ac60:	b085      	sub	sp, #20
 800ac62:	af00      	add	r7, sp, #0
 800ac64:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac70:	699b      	ldr	r3, [r3, #24]
 800ac72:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac7a:	69db      	ldr	r3, [r3, #28]
 800ac7c:	68ba      	ldr	r2, [r7, #8]
 800ac7e:	4013      	ands	r3, r2
 800ac80:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800ac82:	68bb      	ldr	r3, [r7, #8]
 800ac84:	b29b      	uxth	r3, r3
}
 800ac86:	4618      	mov	r0, r3
 800ac88:	3714      	adds	r7, #20
 800ac8a:	46bd      	mov	sp, r7
 800ac8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac90:	4770      	bx	lr

0800ac92 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ac92:	b480      	push	{r7}
 800ac94:	b085      	sub	sp, #20
 800ac96:	af00      	add	r7, sp, #0
 800ac98:	6078      	str	r0, [r7, #4]
 800ac9a:	460b      	mov	r3, r1
 800ac9c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800aca2:	78fb      	ldrb	r3, [r7, #3]
 800aca4:	015a      	lsls	r2, r3, #5
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	4413      	add	r3, r2
 800acaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800acae:	689b      	ldr	r3, [r3, #8]
 800acb0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800acb8:	695b      	ldr	r3, [r3, #20]
 800acba:	68ba      	ldr	r2, [r7, #8]
 800acbc:	4013      	ands	r3, r2
 800acbe:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800acc0:	68bb      	ldr	r3, [r7, #8]
}
 800acc2:	4618      	mov	r0, r3
 800acc4:	3714      	adds	r7, #20
 800acc6:	46bd      	mov	sp, r7
 800acc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800accc:	4770      	bx	lr

0800acce <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800acce:	b480      	push	{r7}
 800acd0:	b087      	sub	sp, #28
 800acd2:	af00      	add	r7, sp, #0
 800acd4:	6078      	str	r0, [r7, #4]
 800acd6:	460b      	mov	r3, r1
 800acd8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800acde:	697b      	ldr	r3, [r7, #20]
 800ace0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ace4:	691b      	ldr	r3, [r3, #16]
 800ace6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800ace8:	697b      	ldr	r3, [r7, #20]
 800acea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800acee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800acf0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800acf2:	78fb      	ldrb	r3, [r7, #3]
 800acf4:	f003 030f 	and.w	r3, r3, #15
 800acf8:	68fa      	ldr	r2, [r7, #12]
 800acfa:	fa22 f303 	lsr.w	r3, r2, r3
 800acfe:	01db      	lsls	r3, r3, #7
 800ad00:	b2db      	uxtb	r3, r3
 800ad02:	693a      	ldr	r2, [r7, #16]
 800ad04:	4313      	orrs	r3, r2
 800ad06:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800ad08:	78fb      	ldrb	r3, [r7, #3]
 800ad0a:	015a      	lsls	r2, r3, #5
 800ad0c:	697b      	ldr	r3, [r7, #20]
 800ad0e:	4413      	add	r3, r2
 800ad10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad14:	689b      	ldr	r3, [r3, #8]
 800ad16:	693a      	ldr	r2, [r7, #16]
 800ad18:	4013      	ands	r3, r2
 800ad1a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ad1c:	68bb      	ldr	r3, [r7, #8]
}
 800ad1e:	4618      	mov	r0, r3
 800ad20:	371c      	adds	r7, #28
 800ad22:	46bd      	mov	sp, r7
 800ad24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad28:	4770      	bx	lr

0800ad2a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800ad2a:	b480      	push	{r7}
 800ad2c:	b083      	sub	sp, #12
 800ad2e:	af00      	add	r7, sp, #0
 800ad30:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	695b      	ldr	r3, [r3, #20]
 800ad36:	f003 0301 	and.w	r3, r3, #1
}
 800ad3a:	4618      	mov	r0, r3
 800ad3c:	370c      	adds	r7, #12
 800ad3e:	46bd      	mov	sp, r7
 800ad40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad44:	4770      	bx	lr

0800ad46 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800ad46:	b480      	push	{r7}
 800ad48:	b085      	sub	sp, #20
 800ad4a:	af00      	add	r7, sp, #0
 800ad4c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	68fa      	ldr	r2, [r7, #12]
 800ad5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ad60:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800ad64:	f023 0307 	bic.w	r3, r3, #7
 800ad68:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad70:	685b      	ldr	r3, [r3, #4]
 800ad72:	68fa      	ldr	r2, [r7, #12]
 800ad74:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ad78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ad7c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ad7e:	2300      	movs	r3, #0
}
 800ad80:	4618      	mov	r0, r3
 800ad82:	3714      	adds	r7, #20
 800ad84:	46bd      	mov	sp, r7
 800ad86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad8a:	4770      	bx	lr

0800ad8c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800ad8c:	b480      	push	{r7}
 800ad8e:	b087      	sub	sp, #28
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	60f8      	str	r0, [r7, #12]
 800ad94:	460b      	mov	r3, r1
 800ad96:	607a      	str	r2, [r7, #4]
 800ad98:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	333c      	adds	r3, #60	; 0x3c
 800ada2:	3304      	adds	r3, #4
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800ada8:	693b      	ldr	r3, [r7, #16]
 800adaa:	4a26      	ldr	r2, [pc, #152]	; (800ae44 <USB_EP0_OutStart+0xb8>)
 800adac:	4293      	cmp	r3, r2
 800adae:	d90a      	bls.n	800adc6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800adb0:	697b      	ldr	r3, [r7, #20]
 800adb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800adbc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800adc0:	d101      	bne.n	800adc6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800adc2:	2300      	movs	r3, #0
 800adc4:	e037      	b.n	800ae36 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800adc6:	697b      	ldr	r3, [r7, #20]
 800adc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800adcc:	461a      	mov	r2, r3
 800adce:	2300      	movs	r3, #0
 800add0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800add2:	697b      	ldr	r3, [r7, #20]
 800add4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800add8:	691b      	ldr	r3, [r3, #16]
 800adda:	697a      	ldr	r2, [r7, #20]
 800addc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ade0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ade4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800ade6:	697b      	ldr	r3, [r7, #20]
 800ade8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800adec:	691b      	ldr	r3, [r3, #16]
 800adee:	697a      	ldr	r2, [r7, #20]
 800adf0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800adf4:	f043 0318 	orr.w	r3, r3, #24
 800adf8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800adfa:	697b      	ldr	r3, [r7, #20]
 800adfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae00:	691b      	ldr	r3, [r3, #16]
 800ae02:	697a      	ldr	r2, [r7, #20]
 800ae04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ae08:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800ae0c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800ae0e:	7afb      	ldrb	r3, [r7, #11]
 800ae10:	2b01      	cmp	r3, #1
 800ae12:	d10f      	bne.n	800ae34 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800ae14:	697b      	ldr	r3, [r7, #20]
 800ae16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae1a:	461a      	mov	r2, r3
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800ae20:	697b      	ldr	r3, [r7, #20]
 800ae22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	697a      	ldr	r2, [r7, #20]
 800ae2a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ae2e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800ae32:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ae34:	2300      	movs	r3, #0
}
 800ae36:	4618      	mov	r0, r3
 800ae38:	371c      	adds	r7, #28
 800ae3a:	46bd      	mov	sp, r7
 800ae3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae40:	4770      	bx	lr
 800ae42:	bf00      	nop
 800ae44:	4f54300a 	.word	0x4f54300a

0800ae48 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ae48:	b480      	push	{r7}
 800ae4a:	b085      	sub	sp, #20
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ae50:	2300      	movs	r3, #0
 800ae52:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	3301      	adds	r3, #1
 800ae58:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	4a13      	ldr	r2, [pc, #76]	; (800aeac <USB_CoreReset+0x64>)
 800ae5e:	4293      	cmp	r3, r2
 800ae60:	d901      	bls.n	800ae66 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800ae62:	2303      	movs	r3, #3
 800ae64:	e01b      	b.n	800ae9e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	691b      	ldr	r3, [r3, #16]
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	daf2      	bge.n	800ae54 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800ae6e:	2300      	movs	r3, #0
 800ae70:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	691b      	ldr	r3, [r3, #16]
 800ae76:	f043 0201 	orr.w	r2, r3, #1
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	3301      	adds	r3, #1
 800ae82:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	4a09      	ldr	r2, [pc, #36]	; (800aeac <USB_CoreReset+0x64>)
 800ae88:	4293      	cmp	r3, r2
 800ae8a:	d901      	bls.n	800ae90 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800ae8c:	2303      	movs	r3, #3
 800ae8e:	e006      	b.n	800ae9e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	691b      	ldr	r3, [r3, #16]
 800ae94:	f003 0301 	and.w	r3, r3, #1
 800ae98:	2b01      	cmp	r3, #1
 800ae9a:	d0f0      	beq.n	800ae7e <USB_CoreReset+0x36>

  return HAL_OK;
 800ae9c:	2300      	movs	r3, #0
}
 800ae9e:	4618      	mov	r0, r3
 800aea0:	3714      	adds	r7, #20
 800aea2:	46bd      	mov	sp, r7
 800aea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea8:	4770      	bx	lr
 800aeaa:	bf00      	nop
 800aeac:	00030d40 	.word	0x00030d40

0800aeb0 <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800aeb0:	b580      	push	{r7, lr}
 800aeb2:	b084      	sub	sp, #16
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	6078      	str	r0, [r7, #4]
 800aeb8:	460b      	mov	r3, r1
 800aeba:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 800aebc:	2018      	movs	r0, #24
 800aebe:	f002 fa99 	bl	800d3f4 <USBD_static_malloc>
 800aec2:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d109      	bne.n	800aede <USBD_CUSTOM_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	32b0      	adds	r2, #176	; 0xb0
 800aed4:	2100      	movs	r1, #0
 800aed6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800aeda:	2302      	movs	r3, #2
 800aedc:	e08a      	b.n	800aff4 <USBD_CUSTOM_HID_Init+0x144>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	32b0      	adds	r2, #176	; 0xb0
 800aee8:	68f9      	ldr	r1, [r7, #12]
 800aeea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	32b0      	adds	r2, #176	; 0xb0
 800aef8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	7c1b      	ldrb	r3, [r3, #16]
 800af06:	2b00      	cmp	r3, #0
 800af08:	d11b      	bne.n	800af42 <USBD_CUSTOM_HID_Init+0x92>
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 800af0a:	4b3c      	ldr	r3, [pc, #240]	; (800affc <USBD_CUSTOM_HID_Init+0x14c>)
 800af0c:	781b      	ldrb	r3, [r3, #0]
 800af0e:	f003 020f 	and.w	r2, r3, #15
 800af12:	6879      	ldr	r1, [r7, #4]
 800af14:	4613      	mov	r3, r2
 800af16:	009b      	lsls	r3, r3, #2
 800af18:	4413      	add	r3, r2
 800af1a:	009b      	lsls	r3, r3, #2
 800af1c:	440b      	add	r3, r1
 800af1e:	3326      	adds	r3, #38	; 0x26
 800af20:	2205      	movs	r2, #5
 800af22:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 800af24:	4b36      	ldr	r3, [pc, #216]	; (800b000 <USBD_CUSTOM_HID_Init+0x150>)
 800af26:	781b      	ldrb	r3, [r3, #0]
 800af28:	f003 020f 	and.w	r2, r3, #15
 800af2c:	6879      	ldr	r1, [r7, #4]
 800af2e:	4613      	mov	r3, r2
 800af30:	009b      	lsls	r3, r3, #2
 800af32:	4413      	add	r3, r2
 800af34:	009b      	lsls	r3, r3, #2
 800af36:	440b      	add	r3, r1
 800af38:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 800af3c:	2205      	movs	r2, #5
 800af3e:	801a      	strh	r2, [r3, #0]
 800af40:	e01a      	b.n	800af78 <USBD_CUSTOM_HID_Init+0xc8>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 800af42:	4b2e      	ldr	r3, [pc, #184]	; (800affc <USBD_CUSTOM_HID_Init+0x14c>)
 800af44:	781b      	ldrb	r3, [r3, #0]
 800af46:	f003 020f 	and.w	r2, r3, #15
 800af4a:	6879      	ldr	r1, [r7, #4]
 800af4c:	4613      	mov	r3, r2
 800af4e:	009b      	lsls	r3, r3, #2
 800af50:	4413      	add	r3, r2
 800af52:	009b      	lsls	r3, r3, #2
 800af54:	440b      	add	r3, r1
 800af56:	3326      	adds	r3, #38	; 0x26
 800af58:	2205      	movs	r2, #5
 800af5a:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 800af5c:	4b28      	ldr	r3, [pc, #160]	; (800b000 <USBD_CUSTOM_HID_Init+0x150>)
 800af5e:	781b      	ldrb	r3, [r3, #0]
 800af60:	f003 020f 	and.w	r2, r3, #15
 800af64:	6879      	ldr	r1, [r7, #4]
 800af66:	4613      	mov	r3, r2
 800af68:	009b      	lsls	r3, r3, #2
 800af6a:	4413      	add	r3, r2
 800af6c:	009b      	lsls	r3, r3, #2
 800af6e:	440b      	add	r3, r1
 800af70:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 800af74:	2205      	movs	r2, #5
 800af76:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDInEpAdd, USBD_EP_TYPE_INTR,
 800af78:	4b20      	ldr	r3, [pc, #128]	; (800affc <USBD_CUSTOM_HID_Init+0x14c>)
 800af7a:	7819      	ldrb	r1, [r3, #0]
 800af7c:	2302      	movs	r3, #2
 800af7e:	2203      	movs	r2, #3
 800af80:	6878      	ldr	r0, [r7, #4]
 800af82:	f002 f926 	bl	800d1d2 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 1U;
 800af86:	4b1d      	ldr	r3, [pc, #116]	; (800affc <USBD_CUSTOM_HID_Init+0x14c>)
 800af88:	781b      	ldrb	r3, [r3, #0]
 800af8a:	f003 020f 	and.w	r2, r3, #15
 800af8e:	6879      	ldr	r1, [r7, #4]
 800af90:	4613      	mov	r3, r2
 800af92:	009b      	lsls	r3, r3, #2
 800af94:	4413      	add	r3, r2
 800af96:	009b      	lsls	r3, r3, #2
 800af98:	440b      	add	r3, r1
 800af9a:	3324      	adds	r3, #36	; 0x24
 800af9c:	2201      	movs	r2, #1
 800af9e:	801a      	strh	r2, [r3, #0]

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDOutEpAdd, USBD_EP_TYPE_INTR,
 800afa0:	4b17      	ldr	r3, [pc, #92]	; (800b000 <USBD_CUSTOM_HID_Init+0x150>)
 800afa2:	7819      	ldrb	r1, [r3, #0]
 800afa4:	2302      	movs	r3, #2
 800afa6:	2203      	movs	r2, #3
 800afa8:	6878      	ldr	r0, [r7, #4]
 800afaa:	f002 f912 	bl	800d1d2 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 1U;
 800afae:	4b14      	ldr	r3, [pc, #80]	; (800b000 <USBD_CUSTOM_HID_Init+0x150>)
 800afb0:	781b      	ldrb	r3, [r3, #0]
 800afb2:	f003 020f 	and.w	r2, r3, #15
 800afb6:	6879      	ldr	r1, [r7, #4]
 800afb8:	4613      	mov	r3, r2
 800afba:	009b      	lsls	r3, r3, #2
 800afbc:	4413      	add	r3, r2
 800afbe:	009b      	lsls	r3, r3, #2
 800afc0:	440b      	add	r3, r1
 800afc2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800afc6:	2201      	movs	r2, #1
 800afc8:	801a      	strh	r2, [r3, #0]

  hhid->state = CUSTOM_HID_IDLE;
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	2200      	movs	r2, #0
 800afce:	751a      	strb	r2, [r3, #20]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800afd6:	687a      	ldr	r2, [r7, #4]
 800afd8:	33b0      	adds	r3, #176	; 0xb0
 800afda:	009b      	lsls	r3, r3, #2
 800afdc:	4413      	add	r3, r2
 800afde:	685b      	ldr	r3, [r3, #4]
 800afe0:	685b      	ldr	r3, [r3, #4]
 800afe2:	4798      	blx	r3

  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 800afe4:	4b06      	ldr	r3, [pc, #24]	; (800b000 <USBD_CUSTOM_HID_Init+0x150>)
 800afe6:	7819      	ldrb	r1, [r3, #0]
 800afe8:	68fa      	ldr	r2, [r7, #12]
 800afea:	2302      	movs	r3, #2
 800afec:	6878      	ldr	r0, [r7, #4]
 800afee:	f002 f9df 	bl	800d3b0 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 800aff2:	2300      	movs	r3, #0
}
 800aff4:	4618      	mov	r0, r3
 800aff6:	3710      	adds	r7, #16
 800aff8:	46bd      	mov	sp, r7
 800affa:	bd80      	pop	{r7, pc}
 800affc:	200000ca 	.word	0x200000ca
 800b000:	200000cb 	.word	0x200000cb

0800b004 <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b004:	b580      	push	{r7, lr}
 800b006:	b082      	sub	sp, #8
 800b008:	af00      	add	r7, sp, #0
 800b00a:	6078      	str	r0, [r7, #4]
 800b00c:	460b      	mov	r3, r1
 800b00e:	70fb      	strb	r3, [r7, #3]
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDInEpAdd);
 800b010:	4b37      	ldr	r3, [pc, #220]	; (800b0f0 <USBD_CUSTOM_HID_DeInit+0xec>)
 800b012:	781b      	ldrb	r3, [r3, #0]
 800b014:	4619      	mov	r1, r3
 800b016:	6878      	ldr	r0, [r7, #4]
 800b018:	f002 f901 	bl	800d21e <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 0U;
 800b01c:	4b34      	ldr	r3, [pc, #208]	; (800b0f0 <USBD_CUSTOM_HID_DeInit+0xec>)
 800b01e:	781b      	ldrb	r3, [r3, #0]
 800b020:	f003 020f 	and.w	r2, r3, #15
 800b024:	6879      	ldr	r1, [r7, #4]
 800b026:	4613      	mov	r3, r2
 800b028:	009b      	lsls	r3, r3, #2
 800b02a:	4413      	add	r3, r2
 800b02c:	009b      	lsls	r3, r3, #2
 800b02e:	440b      	add	r3, r1
 800b030:	3324      	adds	r3, #36	; 0x24
 800b032:	2200      	movs	r2, #0
 800b034:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = 0U;
 800b036:	4b2e      	ldr	r3, [pc, #184]	; (800b0f0 <USBD_CUSTOM_HID_DeInit+0xec>)
 800b038:	781b      	ldrb	r3, [r3, #0]
 800b03a:	f003 020f 	and.w	r2, r3, #15
 800b03e:	6879      	ldr	r1, [r7, #4]
 800b040:	4613      	mov	r3, r2
 800b042:	009b      	lsls	r3, r3, #2
 800b044:	4413      	add	r3, r2
 800b046:	009b      	lsls	r3, r3, #2
 800b048:	440b      	add	r3, r1
 800b04a:	3326      	adds	r3, #38	; 0x26
 800b04c:	2200      	movs	r2, #0
 800b04e:	801a      	strh	r2, [r3, #0]

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDOutEpAdd);
 800b050:	4b28      	ldr	r3, [pc, #160]	; (800b0f4 <USBD_CUSTOM_HID_DeInit+0xf0>)
 800b052:	781b      	ldrb	r3, [r3, #0]
 800b054:	4619      	mov	r1, r3
 800b056:	6878      	ldr	r0, [r7, #4]
 800b058:	f002 f8e1 	bl	800d21e <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 0U;
 800b05c:	4b25      	ldr	r3, [pc, #148]	; (800b0f4 <USBD_CUSTOM_HID_DeInit+0xf0>)
 800b05e:	781b      	ldrb	r3, [r3, #0]
 800b060:	f003 020f 	and.w	r2, r3, #15
 800b064:	6879      	ldr	r1, [r7, #4]
 800b066:	4613      	mov	r3, r2
 800b068:	009b      	lsls	r3, r3, #2
 800b06a:	4413      	add	r3, r2
 800b06c:	009b      	lsls	r3, r3, #2
 800b06e:	440b      	add	r3, r1
 800b070:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b074:	2200      	movs	r2, #0
 800b076:	801a      	strh	r2, [r3, #0]
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = 0U;
 800b078:	4b1e      	ldr	r3, [pc, #120]	; (800b0f4 <USBD_CUSTOM_HID_DeInit+0xf0>)
 800b07a:	781b      	ldrb	r3, [r3, #0]
 800b07c:	f003 020f 	and.w	r2, r3, #15
 800b080:	6879      	ldr	r1, [r7, #4]
 800b082:	4613      	mov	r3, r2
 800b084:	009b      	lsls	r3, r3, #2
 800b086:	4413      	add	r3, r2
 800b088:	009b      	lsls	r3, r3, #2
 800b08a:	440b      	add	r3, r1
 800b08c:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 800b090:	2200      	movs	r2, #0
 800b092:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	32b0      	adds	r2, #176	; 0xb0
 800b09e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d01f      	beq.n	800b0e6 <USBD_CUSTOM_HID_DeInit+0xe2>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b0ac:	687a      	ldr	r2, [r7, #4]
 800b0ae:	33b0      	adds	r3, #176	; 0xb0
 800b0b0:	009b      	lsls	r3, r3, #2
 800b0b2:	4413      	add	r3, r2
 800b0b4:	685b      	ldr	r3, [r3, #4]
 800b0b6:	689b      	ldr	r3, [r3, #8]
 800b0b8:	4798      	blx	r3
    USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	32b0      	adds	r2, #176	; 0xb0
 800b0c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	f002 f9a1 	bl	800d410 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	32b0      	adds	r2, #176	; 0xb0
 800b0d8:	2100      	movs	r1, #0
 800b0da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	2200      	movs	r2, #0
 800b0e2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800b0e6:	2300      	movs	r3, #0
}
 800b0e8:	4618      	mov	r0, r3
 800b0ea:	3708      	adds	r7, #8
 800b0ec:	46bd      	mov	sp, r7
 800b0ee:	bd80      	pop	{r7, pc}
 800b0f0:	200000ca 	.word	0x200000ca
 800b0f4:	200000cb 	.word	0x200000cb

0800b0f8 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 800b0f8:	b580      	push	{r7, lr}
 800b0fa:	b088      	sub	sp, #32
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	6078      	str	r0, [r7, #4]
 800b100:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	32b0      	adds	r2, #176	; 0xb0
 800b10c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b110:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 800b112:	2300      	movs	r3, #0
 800b114:	83fb      	strh	r3, [r7, #30]
  uint8_t  *pbuf = NULL;
 800b116:	2300      	movs	r3, #0
 800b118:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 800b11a:	2300      	movs	r3, #0
 800b11c:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 800b11e:	2300      	movs	r3, #0
 800b120:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
 800b122:	693b      	ldr	r3, [r7, #16]
 800b124:	2b00      	cmp	r3, #0
 800b126:	d101      	bne.n	800b12c <USBD_CUSTOM_HID_Setup+0x34>
  {
    return (uint8_t)USBD_FAIL;
 800b128:	2303      	movs	r3, #3
 800b12a:	e0f8      	b.n	800b31e <USBD_CUSTOM_HID_Setup+0x226>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b12c:	683b      	ldr	r3, [r7, #0]
 800b12e:	781b      	ldrb	r3, [r3, #0]
 800b130:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b134:	2b00      	cmp	r3, #0
 800b136:	d056      	beq.n	800b1e6 <USBD_CUSTOM_HID_Setup+0xee>
 800b138:	2b20      	cmp	r3, #32
 800b13a:	f040 80e8 	bne.w	800b30e <USBD_CUSTOM_HID_Setup+0x216>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 800b13e:	683b      	ldr	r3, [r7, #0]
 800b140:	785b      	ldrb	r3, [r3, #1]
 800b142:	3b02      	subs	r3, #2
 800b144:	2b09      	cmp	r3, #9
 800b146:	d846      	bhi.n	800b1d6 <USBD_CUSTOM_HID_Setup+0xde>
 800b148:	a201      	add	r2, pc, #4	; (adr r2, 800b150 <USBD_CUSTOM_HID_Setup+0x58>)
 800b14a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b14e:	bf00      	nop
 800b150:	0800b1a9 	.word	0x0800b1a9
 800b154:	0800b187 	.word	0x0800b187
 800b158:	0800b1d7 	.word	0x0800b1d7
 800b15c:	0800b1d7 	.word	0x0800b1d7
 800b160:	0800b1d7 	.word	0x0800b1d7
 800b164:	0800b1d7 	.word	0x0800b1d7
 800b168:	0800b1d7 	.word	0x0800b1d7
 800b16c:	0800b1b9 	.word	0x0800b1b9
 800b170:	0800b197 	.word	0x0800b197
 800b174:	0800b179 	.word	0x0800b179
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 800b178:	683b      	ldr	r3, [r7, #0]
 800b17a:	885b      	ldrh	r3, [r3, #2]
 800b17c:	b2db      	uxtb	r3, r3
 800b17e:	461a      	mov	r2, r3
 800b180:	693b      	ldr	r3, [r7, #16]
 800b182:	605a      	str	r2, [r3, #4]
          break;
 800b184:	e02e      	b.n	800b1e4 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 800b186:	693b      	ldr	r3, [r7, #16]
 800b188:	3304      	adds	r3, #4
 800b18a:	2201      	movs	r2, #1
 800b18c:	4619      	mov	r1, r3
 800b18e:	6878      	ldr	r0, [r7, #4]
 800b190:	f001 fc94 	bl	800cabc <USBD_CtlSendData>
          break;
 800b194:	e026      	b.n	800b1e4 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800b196:	683b      	ldr	r3, [r7, #0]
 800b198:	885b      	ldrh	r3, [r3, #2]
 800b19a:	0a1b      	lsrs	r3, r3, #8
 800b19c:	b29b      	uxth	r3, r3
 800b19e:	b2db      	uxtb	r3, r3
 800b1a0:	461a      	mov	r2, r3
 800b1a2:	693b      	ldr	r3, [r7, #16]
 800b1a4:	609a      	str	r2, [r3, #8]
          break;
 800b1a6:	e01d      	b.n	800b1e4 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 800b1a8:	693b      	ldr	r3, [r7, #16]
 800b1aa:	3308      	adds	r3, #8
 800b1ac:	2201      	movs	r2, #1
 800b1ae:	4619      	mov	r1, r3
 800b1b0:	6878      	ldr	r0, [r7, #4]
 800b1b2:	f001 fc83 	bl	800cabc <USBD_CtlSendData>
          break;
 800b1b6:	e015      	b.n	800b1e4 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_SET_REPORT:
          hhid->IsReportAvailable = 1U;
 800b1b8:	693b      	ldr	r3, [r7, #16]
 800b1ba:	2201      	movs	r2, #1
 800b1bc:	611a      	str	r2, [r3, #16]
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 800b1be:	6939      	ldr	r1, [r7, #16]
                                  MIN(req->wLength, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE));
 800b1c0:	683b      	ldr	r3, [r7, #0]
 800b1c2:	88db      	ldrh	r3, [r3, #6]
 800b1c4:	2b02      	cmp	r3, #2
 800b1c6:	bf28      	it	cs
 800b1c8:	2302      	movcs	r3, #2
 800b1ca:	b29b      	uxth	r3, r3
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 800b1cc:	461a      	mov	r2, r3
 800b1ce:	6878      	ldr	r0, [r7, #4]
 800b1d0:	f001 fca0 	bl	800cb14 <USBD_CtlPrepareRx>
          break;
 800b1d4:	e006      	b.n	800b1e4 <USBD_CUSTOM_HID_Setup+0xec>

        default:
          USBD_CtlError(pdev, req);
 800b1d6:	6839      	ldr	r1, [r7, #0]
 800b1d8:	6878      	ldr	r0, [r7, #4]
 800b1da:	f001 fbfe 	bl	800c9da <USBD_CtlError>
          ret = USBD_FAIL;
 800b1de:	2303      	movs	r3, #3
 800b1e0:	75fb      	strb	r3, [r7, #23]
          break;
 800b1e2:	bf00      	nop
      }
      break;
 800b1e4:	e09a      	b.n	800b31c <USBD_CUSTOM_HID_Setup+0x224>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b1e6:	683b      	ldr	r3, [r7, #0]
 800b1e8:	785b      	ldrb	r3, [r3, #1]
 800b1ea:	2b0b      	cmp	r3, #11
 800b1ec:	f200 8086 	bhi.w	800b2fc <USBD_CUSTOM_HID_Setup+0x204>
 800b1f0:	a201      	add	r2, pc, #4	; (adr r2, 800b1f8 <USBD_CUSTOM_HID_Setup+0x100>)
 800b1f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1f6:	bf00      	nop
 800b1f8:	0800b229 	.word	0x0800b229
 800b1fc:	0800b30b 	.word	0x0800b30b
 800b200:	0800b2fd 	.word	0x0800b2fd
 800b204:	0800b2fd 	.word	0x0800b2fd
 800b208:	0800b2fd 	.word	0x0800b2fd
 800b20c:	0800b2fd 	.word	0x0800b2fd
 800b210:	0800b253 	.word	0x0800b253
 800b214:	0800b2fd 	.word	0x0800b2fd
 800b218:	0800b2fd 	.word	0x0800b2fd
 800b21c:	0800b2fd 	.word	0x0800b2fd
 800b220:	0800b2ab 	.word	0x0800b2ab
 800b224:	0800b2d5 	.word	0x0800b2d5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b22e:	b2db      	uxtb	r3, r3
 800b230:	2b03      	cmp	r3, #3
 800b232:	d107      	bne.n	800b244 <USBD_CUSTOM_HID_Setup+0x14c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b234:	f107 030e 	add.w	r3, r7, #14
 800b238:	2202      	movs	r2, #2
 800b23a:	4619      	mov	r1, r3
 800b23c:	6878      	ldr	r0, [r7, #4]
 800b23e:	f001 fc3d 	bl	800cabc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b242:	e063      	b.n	800b30c <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 800b244:	6839      	ldr	r1, [r7, #0]
 800b246:	6878      	ldr	r0, [r7, #4]
 800b248:	f001 fbc7 	bl	800c9da <USBD_CtlError>
            ret = USBD_FAIL;
 800b24c:	2303      	movs	r3, #3
 800b24e:	75fb      	strb	r3, [r7, #23]
          break;
 800b250:	e05c      	b.n	800b30c <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 800b252:	683b      	ldr	r3, [r7, #0]
 800b254:	885b      	ldrh	r3, [r3, #2]
 800b256:	0a1b      	lsrs	r3, r3, #8
 800b258:	b29b      	uxth	r3, r3
 800b25a:	2b22      	cmp	r3, #34	; 0x22
 800b25c:	d110      	bne.n	800b280 <USBD_CUSTOM_HID_Setup+0x188>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 800b25e:	683b      	ldr	r3, [r7, #0]
 800b260:	88db      	ldrh	r3, [r3, #6]
 800b262:	2b02      	cmp	r3, #2
 800b264:	bf28      	it	cs
 800b266:	2302      	movcs	r3, #2
 800b268:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->pReport;
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b270:	687a      	ldr	r2, [r7, #4]
 800b272:	33b0      	adds	r3, #176	; 0xb0
 800b274:	009b      	lsls	r3, r3, #2
 800b276:	4413      	add	r3, r2
 800b278:	685b      	ldr	r3, [r3, #4]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	61bb      	str	r3, [r7, #24]
 800b27e:	e00d      	b.n	800b29c <USBD_CUSTOM_HID_Setup+0x1a4>
          }
          else
          {
            if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 800b280:	683b      	ldr	r3, [r7, #0]
 800b282:	885b      	ldrh	r3, [r3, #2]
 800b284:	0a1b      	lsrs	r3, r3, #8
 800b286:	b29b      	uxth	r3, r3
 800b288:	2b21      	cmp	r3, #33	; 0x21
 800b28a:	d107      	bne.n	800b29c <USBD_CUSTOM_HID_Setup+0x1a4>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 800b28c:	4b26      	ldr	r3, [pc, #152]	; (800b328 <USBD_CUSTOM_HID_Setup+0x230>)
 800b28e:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 800b290:	683b      	ldr	r3, [r7, #0]
 800b292:	88db      	ldrh	r3, [r3, #6]
 800b294:	2b09      	cmp	r3, #9
 800b296:	bf28      	it	cs
 800b298:	2309      	movcs	r3, #9
 800b29a:	83fb      	strh	r3, [r7, #30]
            }
          }

          (void)USBD_CtlSendData(pdev, pbuf, len);
 800b29c:	8bfb      	ldrh	r3, [r7, #30]
 800b29e:	461a      	mov	r2, r3
 800b2a0:	69b9      	ldr	r1, [r7, #24]
 800b2a2:	6878      	ldr	r0, [r7, #4]
 800b2a4:	f001 fc0a 	bl	800cabc <USBD_CtlSendData>
          break;
 800b2a8:	e030      	b.n	800b30c <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b2b0:	b2db      	uxtb	r3, r3
 800b2b2:	2b03      	cmp	r3, #3
 800b2b4:	d107      	bne.n	800b2c6 <USBD_CUSTOM_HID_Setup+0x1ce>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 800b2b6:	693b      	ldr	r3, [r7, #16]
 800b2b8:	330c      	adds	r3, #12
 800b2ba:	2201      	movs	r2, #1
 800b2bc:	4619      	mov	r1, r3
 800b2be:	6878      	ldr	r0, [r7, #4]
 800b2c0:	f001 fbfc 	bl	800cabc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b2c4:	e022      	b.n	800b30c <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 800b2c6:	6839      	ldr	r1, [r7, #0]
 800b2c8:	6878      	ldr	r0, [r7, #4]
 800b2ca:	f001 fb86 	bl	800c9da <USBD_CtlError>
            ret = USBD_FAIL;
 800b2ce:	2303      	movs	r3, #3
 800b2d0:	75fb      	strb	r3, [r7, #23]
          break;
 800b2d2:	e01b      	b.n	800b30c <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b2da:	b2db      	uxtb	r3, r3
 800b2dc:	2b03      	cmp	r3, #3
 800b2de:	d106      	bne.n	800b2ee <USBD_CUSTOM_HID_Setup+0x1f6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 800b2e0:	683b      	ldr	r3, [r7, #0]
 800b2e2:	885b      	ldrh	r3, [r3, #2]
 800b2e4:	b2db      	uxtb	r3, r3
 800b2e6:	461a      	mov	r2, r3
 800b2e8:	693b      	ldr	r3, [r7, #16]
 800b2ea:	60da      	str	r2, [r3, #12]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b2ec:	e00e      	b.n	800b30c <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 800b2ee:	6839      	ldr	r1, [r7, #0]
 800b2f0:	6878      	ldr	r0, [r7, #4]
 800b2f2:	f001 fb72 	bl	800c9da <USBD_CtlError>
            ret = USBD_FAIL;
 800b2f6:	2303      	movs	r3, #3
 800b2f8:	75fb      	strb	r3, [r7, #23]
          break;
 800b2fa:	e007      	b.n	800b30c <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800b2fc:	6839      	ldr	r1, [r7, #0]
 800b2fe:	6878      	ldr	r0, [r7, #4]
 800b300:	f001 fb6b 	bl	800c9da <USBD_CtlError>
          ret = USBD_FAIL;
 800b304:	2303      	movs	r3, #3
 800b306:	75fb      	strb	r3, [r7, #23]
          break;
 800b308:	e000      	b.n	800b30c <USBD_CUSTOM_HID_Setup+0x214>
          break;
 800b30a:	bf00      	nop
      }
      break;
 800b30c:	e006      	b.n	800b31c <USBD_CUSTOM_HID_Setup+0x224>

    default:
      USBD_CtlError(pdev, req);
 800b30e:	6839      	ldr	r1, [r7, #0]
 800b310:	6878      	ldr	r0, [r7, #4]
 800b312:	f001 fb62 	bl	800c9da <USBD_CtlError>
      ret = USBD_FAIL;
 800b316:	2303      	movs	r3, #3
 800b318:	75fb      	strb	r3, [r7, #23]
      break;
 800b31a:	bf00      	nop
  }
  return (uint8_t)ret;
 800b31c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b31e:	4618      	mov	r0, r3
 800b320:	3720      	adds	r7, #32
 800b322:	46bd      	mov	sp, r7
 800b324:	bd80      	pop	{r7, pc}
 800b326:	bf00      	nop
 800b328:	200000b4 	.word	0x200000b4

0800b32c <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 800b32c:	b580      	push	{r7, lr}
 800b32e:	b084      	sub	sp, #16
 800b330:	af00      	add	r7, sp, #0
 800b332:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 800b334:	2181      	movs	r1, #129	; 0x81
 800b336:	4815      	ldr	r0, [pc, #84]	; (800b38c <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 800b338:	f000 fd17 	bl	800bd6a <USBD_GetEpDesc>
 800b33c:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 800b33e:	2101      	movs	r1, #1
 800b340:	4812      	ldr	r0, [pc, #72]	; (800b38c <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 800b342:	f000 fd12 	bl	800bd6a <USBD_GetEpDesc>
 800b346:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d009      	beq.n	800b362 <USBD_CUSTOM_HID_GetFSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	2200      	movs	r2, #0
 800b352:	f042 0202 	orr.w	r2, r2, #2
 800b356:	711a      	strb	r2, [r3, #4]
 800b358:	2200      	movs	r2, #0
 800b35a:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	2205      	movs	r2, #5
 800b360:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b362:	68bb      	ldr	r3, [r7, #8]
 800b364:	2b00      	cmp	r3, #0
 800b366:	d009      	beq.n	800b37c <USBD_CUSTOM_HID_GetFSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 800b368:	68bb      	ldr	r3, [r7, #8]
 800b36a:	2200      	movs	r2, #0
 800b36c:	f042 0202 	orr.w	r2, r2, #2
 800b370:	711a      	strb	r2, [r3, #4]
 800b372:	2200      	movs	r2, #0
 800b374:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 800b376:	68bb      	ldr	r3, [r7, #8]
 800b378:	2205      	movs	r2, #5
 800b37a:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	2229      	movs	r2, #41	; 0x29
 800b380:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 800b382:	4b02      	ldr	r3, [pc, #8]	; (800b38c <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
}
 800b384:	4618      	mov	r0, r3
 800b386:	3710      	adds	r7, #16
 800b388:	46bd      	mov	sp, r7
 800b38a:	bd80      	pop	{r7, pc}
 800b38c:	20000088 	.word	0x20000088

0800b390 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 800b390:	b580      	push	{r7, lr}
 800b392:	b084      	sub	sp, #16
 800b394:	af00      	add	r7, sp, #0
 800b396:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 800b398:	2181      	movs	r1, #129	; 0x81
 800b39a:	4815      	ldr	r0, [pc, #84]	; (800b3f0 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 800b39c:	f000 fce5 	bl	800bd6a <USBD_GetEpDesc>
 800b3a0:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 800b3a2:	2101      	movs	r1, #1
 800b3a4:	4812      	ldr	r0, [pc, #72]	; (800b3f0 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 800b3a6:	f000 fce0 	bl	800bd6a <USBD_GetEpDesc>
 800b3aa:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d009      	beq.n	800b3c6 <USBD_CUSTOM_HID_GetHSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	2200      	movs	r2, #0
 800b3b6:	f042 0202 	orr.w	r2, r2, #2
 800b3ba:	711a      	strb	r2, [r3, #4]
 800b3bc:	2200      	movs	r2, #0
 800b3be:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	2205      	movs	r2, #5
 800b3c4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b3c6:	68bb      	ldr	r3, [r7, #8]
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d009      	beq.n	800b3e0 <USBD_CUSTOM_HID_GetHSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 800b3cc:	68bb      	ldr	r3, [r7, #8]
 800b3ce:	2200      	movs	r2, #0
 800b3d0:	f042 0202 	orr.w	r2, r2, #2
 800b3d4:	711a      	strb	r2, [r3, #4]
 800b3d6:	2200      	movs	r2, #0
 800b3d8:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 800b3da:	68bb      	ldr	r3, [r7, #8]
 800b3dc:	2205      	movs	r2, #5
 800b3de:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	2229      	movs	r2, #41	; 0x29
 800b3e4:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 800b3e6:	4b02      	ldr	r3, [pc, #8]	; (800b3f0 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
}
 800b3e8:	4618      	mov	r0, r3
 800b3ea:	3710      	adds	r7, #16
 800b3ec:	46bd      	mov	sp, r7
 800b3ee:	bd80      	pop	{r7, pc}
 800b3f0:	20000088 	.word	0x20000088

0800b3f4 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b3f4:	b580      	push	{r7, lr}
 800b3f6:	b084      	sub	sp, #16
 800b3f8:	af00      	add	r7, sp, #0
 800b3fa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 800b3fc:	2181      	movs	r1, #129	; 0x81
 800b3fe:	4815      	ldr	r0, [pc, #84]	; (800b454 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 800b400:	f000 fcb3 	bl	800bd6a <USBD_GetEpDesc>
 800b404:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 800b406:	2101      	movs	r1, #1
 800b408:	4812      	ldr	r0, [pc, #72]	; (800b454 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 800b40a:	f000 fcae 	bl	800bd6a <USBD_GetEpDesc>
 800b40e:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	2b00      	cmp	r3, #0
 800b414:	d009      	beq.n	800b42a <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	2200      	movs	r2, #0
 800b41a:	f042 0202 	orr.w	r2, r2, #2
 800b41e:	711a      	strb	r2, [r3, #4]
 800b420:	2200      	movs	r2, #0
 800b422:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	2205      	movs	r2, #5
 800b428:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b42a:	68bb      	ldr	r3, [r7, #8]
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d009      	beq.n	800b444 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 800b430:	68bb      	ldr	r3, [r7, #8]
 800b432:	2200      	movs	r2, #0
 800b434:	f042 0202 	orr.w	r2, r2, #2
 800b438:	711a      	strb	r2, [r3, #4]
 800b43a:	2200      	movs	r2, #0
 800b43c:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 800b43e:	68bb      	ldr	r3, [r7, #8]
 800b440:	2205      	movs	r2, #5
 800b442:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	2229      	movs	r2, #41	; 0x29
 800b448:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 800b44a:	4b02      	ldr	r3, [pc, #8]	; (800b454 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
}
 800b44c:	4618      	mov	r0, r3
 800b44e:	3710      	adds	r7, #16
 800b450:	46bd      	mov	sp, r7
 800b452:	bd80      	pop	{r7, pc}
 800b454:	20000088 	.word	0x20000088

0800b458 <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b458:	b480      	push	{r7}
 800b45a:	b083      	sub	sp, #12
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	6078      	str	r0, [r7, #4]
 800b460:	460b      	mov	r3, r1
 800b462:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = CUSTOM_HID_IDLE;
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	32b0      	adds	r2, #176	; 0xb0
 800b46e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b472:	2200      	movs	r2, #0
 800b474:	751a      	strb	r2, [r3, #20]

  return (uint8_t)USBD_OK;
 800b476:	2300      	movs	r3, #0
}
 800b478:	4618      	mov	r0, r3
 800b47a:	370c      	adds	r7, #12
 800b47c:	46bd      	mov	sp, r7
 800b47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b482:	4770      	bx	lr

0800b484 <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b484:	b580      	push	{r7, lr}
 800b486:	b084      	sub	sp, #16
 800b488:	af00      	add	r7, sp, #0
 800b48a:	6078      	str	r0, [r7, #4]
 800b48c:	460b      	mov	r3, r1
 800b48e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	32b0      	adds	r2, #176	; 0xb0
 800b49a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d101      	bne.n	800b4a6 <USBD_CUSTOM_HID_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b4a2:	2303      	movs	r3, #3
 800b4a4:	e017      	b.n	800b4d6 <USBD_CUSTOM_HID_DataOut+0x52>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	32b0      	adds	r2, #176	; 0xb0
 800b4b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4b4:	60fb      	str	r3, [r7, #12]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b4bc:	687a      	ldr	r2, [r7, #4]
 800b4be:	33b0      	adds	r3, #176	; 0xb0
 800b4c0:	009b      	lsls	r3, r3, #2
 800b4c2:	4413      	add	r3, r2
 800b4c4:	685b      	ldr	r3, [r3, #4]
 800b4c6:	68db      	ldr	r3, [r3, #12]
 800b4c8:	68fa      	ldr	r2, [r7, #12]
 800b4ca:	7810      	ldrb	r0, [r2, #0]
 800b4cc:	68fa      	ldr	r2, [r7, #12]
 800b4ce:	7852      	ldrb	r2, [r2, #1]
 800b4d0:	4611      	mov	r1, r2
 800b4d2:	4798      	blx	r3
                                                                           hhid->Report_buf[1]);

  return (uint8_t)USBD_OK;
 800b4d4:	2300      	movs	r3, #0
}
 800b4d6:	4618      	mov	r0, r3
 800b4d8:	3710      	adds	r7, #16
 800b4da:	46bd      	mov	sp, r7
 800b4dc:	bd80      	pop	{r7, pc}
	...

0800b4e0 <USBD_CUSTOM_HID_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b4e0:	b580      	push	{r7, lr}
 800b4e2:	b084      	sub	sp, #16
 800b4e4:	af00      	add	r7, sp, #0
 800b4e6:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	32b0      	adds	r2, #176	; 0xb0
 800b4f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d101      	bne.n	800b4fe <USBD_CUSTOM_HID_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800b4fa:	2303      	movs	r3, #3
 800b4fc:	e00f      	b.n	800b51e <USBD_CUSTOM_HID_ReceivePacket+0x3e>
#ifdef USE_USBD_COMPOSITE
  /* Get OUT Endpoint address allocated for this class instance */
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	32b0      	adds	r2, #176	; 0xb0
 800b508:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b50c:	60fb      	str	r3, [r7, #12]

  /* Resume USB Out process */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 800b50e:	4b06      	ldr	r3, [pc, #24]	; (800b528 <USBD_CUSTOM_HID_ReceivePacket+0x48>)
 800b510:	7819      	ldrb	r1, [r3, #0]
 800b512:	68fa      	ldr	r2, [r7, #12]
 800b514:	2302      	movs	r3, #2
 800b516:	6878      	ldr	r0, [r7, #4]
 800b518:	f001 ff4a 	bl	800d3b0 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 800b51c:	2300      	movs	r3, #0
}
 800b51e:	4618      	mov	r0, r3
 800b520:	3710      	adds	r7, #16
 800b522:	46bd      	mov	sp, r7
 800b524:	bd80      	pop	{r7, pc}
 800b526:	bf00      	nop
 800b528:	200000cb 	.word	0x200000cb

0800b52c <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b52c:	b580      	push	{r7, lr}
 800b52e:	b084      	sub	sp, #16
 800b530:	af00      	add	r7, sp, #0
 800b532:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	32b0      	adds	r2, #176	; 0xb0
 800b53e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b542:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	2b00      	cmp	r3, #0
 800b548:	d101      	bne.n	800b54e <USBD_CUSTOM_HID_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b54a:	2303      	movs	r3, #3
 800b54c:	e016      	b.n	800b57c <USBD_CUSTOM_HID_EP0_RxReady+0x50>
  }

  if (hhid->IsReportAvailable == 1U)
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	691b      	ldr	r3, [r3, #16]
 800b552:	2b01      	cmp	r3, #1
 800b554:	d111      	bne.n	800b57a <USBD_CUSTOM_HID_EP0_RxReady+0x4e>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b55c:	687a      	ldr	r2, [r7, #4]
 800b55e:	33b0      	adds	r3, #176	; 0xb0
 800b560:	009b      	lsls	r3, r3, #2
 800b562:	4413      	add	r3, r2
 800b564:	685b      	ldr	r3, [r3, #4]
 800b566:	68db      	ldr	r3, [r3, #12]
 800b568:	68fa      	ldr	r2, [r7, #12]
 800b56a:	7810      	ldrb	r0, [r2, #0]
 800b56c:	68fa      	ldr	r2, [r7, #12]
 800b56e:	7852      	ldrb	r2, [r2, #1]
 800b570:	4611      	mov	r1, r2
 800b572:	4798      	blx	r3
                                                                             hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	2200      	movs	r2, #0
 800b578:	611a      	str	r2, [r3, #16]
  }

  return (uint8_t)USBD_OK;
 800b57a:	2300      	movs	r3, #0
}
 800b57c:	4618      	mov	r0, r3
 800b57e:	3710      	adds	r7, #16
 800b580:	46bd      	mov	sp, r7
 800b582:	bd80      	pop	{r7, pc}

0800b584 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 800b584:	b480      	push	{r7}
 800b586:	b083      	sub	sp, #12
 800b588:	af00      	add	r7, sp, #0
 800b58a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	220a      	movs	r2, #10
 800b590:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 800b592:	4b03      	ldr	r3, [pc, #12]	; (800b5a0 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 800b594:	4618      	mov	r0, r3
 800b596:	370c      	adds	r7, #12
 800b598:	46bd      	mov	sp, r7
 800b59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b59e:	4770      	bx	lr
 800b5a0:	200000c0 	.word	0x200000c0

0800b5a4 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 800b5a4:	b480      	push	{r7}
 800b5a6:	b083      	sub	sp, #12
 800b5a8:	af00      	add	r7, sp, #0
 800b5aa:	6078      	str	r0, [r7, #4]
 800b5ac:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b5ae:	683b      	ldr	r3, [r7, #0]
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d101      	bne.n	800b5b8 <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b5b4:	2303      	movs	r3, #3
 800b5b6:	e009      	b.n	800b5cc <USBD_CUSTOM_HID_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b5be:	687a      	ldr	r2, [r7, #4]
 800b5c0:	33b0      	adds	r3, #176	; 0xb0
 800b5c2:	009b      	lsls	r3, r3, #2
 800b5c4:	4413      	add	r3, r2
 800b5c6:	683a      	ldr	r2, [r7, #0]
 800b5c8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800b5ca:	2300      	movs	r3, #0
}
 800b5cc:	4618      	mov	r0, r3
 800b5ce:	370c      	adds	r7, #12
 800b5d0:	46bd      	mov	sp, r7
 800b5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d6:	4770      	bx	lr

0800b5d8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b5d8:	b580      	push	{r7, lr}
 800b5da:	b086      	sub	sp, #24
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	60f8      	str	r0, [r7, #12]
 800b5e0:	60b9      	str	r1, [r7, #8]
 800b5e2:	4613      	mov	r3, r2
 800b5e4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d101      	bne.n	800b5f0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b5ec:	2303      	movs	r3, #3
 800b5ee:	e01f      	b.n	800b630 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	2200      	movs	r2, #0
 800b5f4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	2200      	movs	r2, #0
 800b5fc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	2200      	movs	r2, #0
 800b604:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b608:	68bb      	ldr	r3, [r7, #8]
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d003      	beq.n	800b616 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	68ba      	ldr	r2, [r7, #8]
 800b612:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	2201      	movs	r2, #1
 800b61a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	79fa      	ldrb	r2, [r7, #7]
 800b622:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b624:	68f8      	ldr	r0, [r7, #12]
 800b626:	f001 fd6d 	bl	800d104 <USBD_LL_Init>
 800b62a:	4603      	mov	r3, r0
 800b62c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b62e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b630:	4618      	mov	r0, r3
 800b632:	3718      	adds	r7, #24
 800b634:	46bd      	mov	sp, r7
 800b636:	bd80      	pop	{r7, pc}

0800b638 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b638:	b580      	push	{r7, lr}
 800b63a:	b084      	sub	sp, #16
 800b63c:	af00      	add	r7, sp, #0
 800b63e:	6078      	str	r0, [r7, #4]
 800b640:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b642:	2300      	movs	r3, #0
 800b644:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b646:	683b      	ldr	r3, [r7, #0]
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d101      	bne.n	800b650 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b64c:	2303      	movs	r3, #3
 800b64e:	e025      	b.n	800b69c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	683a      	ldr	r2, [r7, #0]
 800b654:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	32ae      	adds	r2, #174	; 0xae
 800b662:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d00f      	beq.n	800b68c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	32ae      	adds	r2, #174	; 0xae
 800b676:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b67a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b67c:	f107 020e 	add.w	r2, r7, #14
 800b680:	4610      	mov	r0, r2
 800b682:	4798      	blx	r3
 800b684:	4602      	mov	r2, r0
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800b692:	1c5a      	adds	r2, r3, #1
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800b69a:	2300      	movs	r3, #0
}
 800b69c:	4618      	mov	r0, r3
 800b69e:	3710      	adds	r7, #16
 800b6a0:	46bd      	mov	sp, r7
 800b6a2:	bd80      	pop	{r7, pc}

0800b6a4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b6a4:	b580      	push	{r7, lr}
 800b6a6:	b082      	sub	sp, #8
 800b6a8:	af00      	add	r7, sp, #0
 800b6aa:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b6ac:	6878      	ldr	r0, [r7, #4]
 800b6ae:	f001 fd75 	bl	800d19c <USBD_LL_Start>
 800b6b2:	4603      	mov	r3, r0
}
 800b6b4:	4618      	mov	r0, r3
 800b6b6:	3708      	adds	r7, #8
 800b6b8:	46bd      	mov	sp, r7
 800b6ba:	bd80      	pop	{r7, pc}

0800b6bc <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800b6bc:	b480      	push	{r7}
 800b6be:	b083      	sub	sp, #12
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b6c4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800b6c6:	4618      	mov	r0, r3
 800b6c8:	370c      	adds	r7, #12
 800b6ca:	46bd      	mov	sp, r7
 800b6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d0:	4770      	bx	lr

0800b6d2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b6d2:	b580      	push	{r7, lr}
 800b6d4:	b084      	sub	sp, #16
 800b6d6:	af00      	add	r7, sp, #0
 800b6d8:	6078      	str	r0, [r7, #4]
 800b6da:	460b      	mov	r3, r1
 800b6dc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b6de:	2300      	movs	r3, #0
 800b6e0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d009      	beq.n	800b700 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	78fa      	ldrb	r2, [r7, #3]
 800b6f6:	4611      	mov	r1, r2
 800b6f8:	6878      	ldr	r0, [r7, #4]
 800b6fa:	4798      	blx	r3
 800b6fc:	4603      	mov	r3, r0
 800b6fe:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b700:	7bfb      	ldrb	r3, [r7, #15]
}
 800b702:	4618      	mov	r0, r3
 800b704:	3710      	adds	r7, #16
 800b706:	46bd      	mov	sp, r7
 800b708:	bd80      	pop	{r7, pc}

0800b70a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b70a:	b580      	push	{r7, lr}
 800b70c:	b084      	sub	sp, #16
 800b70e:	af00      	add	r7, sp, #0
 800b710:	6078      	str	r0, [r7, #4]
 800b712:	460b      	mov	r3, r1
 800b714:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b716:	2300      	movs	r3, #0
 800b718:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b720:	685b      	ldr	r3, [r3, #4]
 800b722:	78fa      	ldrb	r2, [r7, #3]
 800b724:	4611      	mov	r1, r2
 800b726:	6878      	ldr	r0, [r7, #4]
 800b728:	4798      	blx	r3
 800b72a:	4603      	mov	r3, r0
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d001      	beq.n	800b734 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800b730:	2303      	movs	r3, #3
 800b732:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b734:	7bfb      	ldrb	r3, [r7, #15]
}
 800b736:	4618      	mov	r0, r3
 800b738:	3710      	adds	r7, #16
 800b73a:	46bd      	mov	sp, r7
 800b73c:	bd80      	pop	{r7, pc}

0800b73e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b73e:	b580      	push	{r7, lr}
 800b740:	b084      	sub	sp, #16
 800b742:	af00      	add	r7, sp, #0
 800b744:	6078      	str	r0, [r7, #4]
 800b746:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b74e:	6839      	ldr	r1, [r7, #0]
 800b750:	4618      	mov	r0, r3
 800b752:	f001 f908 	bl	800c966 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	2201      	movs	r2, #1
 800b75a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800b764:	461a      	mov	r2, r3
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b772:	f003 031f 	and.w	r3, r3, #31
 800b776:	2b02      	cmp	r3, #2
 800b778:	d01a      	beq.n	800b7b0 <USBD_LL_SetupStage+0x72>
 800b77a:	2b02      	cmp	r3, #2
 800b77c:	d822      	bhi.n	800b7c4 <USBD_LL_SetupStage+0x86>
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d002      	beq.n	800b788 <USBD_LL_SetupStage+0x4a>
 800b782:	2b01      	cmp	r3, #1
 800b784:	d00a      	beq.n	800b79c <USBD_LL_SetupStage+0x5e>
 800b786:	e01d      	b.n	800b7c4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b78e:	4619      	mov	r1, r3
 800b790:	6878      	ldr	r0, [r7, #4]
 800b792:	f000 fb5f 	bl	800be54 <USBD_StdDevReq>
 800b796:	4603      	mov	r3, r0
 800b798:	73fb      	strb	r3, [r7, #15]
      break;
 800b79a:	e020      	b.n	800b7de <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b7a2:	4619      	mov	r1, r3
 800b7a4:	6878      	ldr	r0, [r7, #4]
 800b7a6:	f000 fbc7 	bl	800bf38 <USBD_StdItfReq>
 800b7aa:	4603      	mov	r3, r0
 800b7ac:	73fb      	strb	r3, [r7, #15]
      break;
 800b7ae:	e016      	b.n	800b7de <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b7b6:	4619      	mov	r1, r3
 800b7b8:	6878      	ldr	r0, [r7, #4]
 800b7ba:	f000 fc29 	bl	800c010 <USBD_StdEPReq>
 800b7be:	4603      	mov	r3, r0
 800b7c0:	73fb      	strb	r3, [r7, #15]
      break;
 800b7c2:	e00c      	b.n	800b7de <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b7ca:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b7ce:	b2db      	uxtb	r3, r3
 800b7d0:	4619      	mov	r1, r3
 800b7d2:	6878      	ldr	r0, [r7, #4]
 800b7d4:	f001 fd42 	bl	800d25c <USBD_LL_StallEP>
 800b7d8:	4603      	mov	r3, r0
 800b7da:	73fb      	strb	r3, [r7, #15]
      break;
 800b7dc:	bf00      	nop
  }

  return ret;
 800b7de:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7e0:	4618      	mov	r0, r3
 800b7e2:	3710      	adds	r7, #16
 800b7e4:	46bd      	mov	sp, r7
 800b7e6:	bd80      	pop	{r7, pc}

0800b7e8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b7e8:	b580      	push	{r7, lr}
 800b7ea:	b086      	sub	sp, #24
 800b7ec:	af00      	add	r7, sp, #0
 800b7ee:	60f8      	str	r0, [r7, #12]
 800b7f0:	460b      	mov	r3, r1
 800b7f2:	607a      	str	r2, [r7, #4]
 800b7f4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800b7f6:	2300      	movs	r3, #0
 800b7f8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800b7fa:	7afb      	ldrb	r3, [r7, #11]
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d16e      	bne.n	800b8de <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b806:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b80e:	2b03      	cmp	r3, #3
 800b810:	f040 8098 	bne.w	800b944 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800b814:	693b      	ldr	r3, [r7, #16]
 800b816:	689a      	ldr	r2, [r3, #8]
 800b818:	693b      	ldr	r3, [r7, #16]
 800b81a:	68db      	ldr	r3, [r3, #12]
 800b81c:	429a      	cmp	r2, r3
 800b81e:	d913      	bls.n	800b848 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800b820:	693b      	ldr	r3, [r7, #16]
 800b822:	689a      	ldr	r2, [r3, #8]
 800b824:	693b      	ldr	r3, [r7, #16]
 800b826:	68db      	ldr	r3, [r3, #12]
 800b828:	1ad2      	subs	r2, r2, r3
 800b82a:	693b      	ldr	r3, [r7, #16]
 800b82c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b82e:	693b      	ldr	r3, [r7, #16]
 800b830:	68da      	ldr	r2, [r3, #12]
 800b832:	693b      	ldr	r3, [r7, #16]
 800b834:	689b      	ldr	r3, [r3, #8]
 800b836:	4293      	cmp	r3, r2
 800b838:	bf28      	it	cs
 800b83a:	4613      	movcs	r3, r2
 800b83c:	461a      	mov	r2, r3
 800b83e:	6879      	ldr	r1, [r7, #4]
 800b840:	68f8      	ldr	r0, [r7, #12]
 800b842:	f001 f984 	bl	800cb4e <USBD_CtlContinueRx>
 800b846:	e07d      	b.n	800b944 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b84e:	f003 031f 	and.w	r3, r3, #31
 800b852:	2b02      	cmp	r3, #2
 800b854:	d014      	beq.n	800b880 <USBD_LL_DataOutStage+0x98>
 800b856:	2b02      	cmp	r3, #2
 800b858:	d81d      	bhi.n	800b896 <USBD_LL_DataOutStage+0xae>
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d002      	beq.n	800b864 <USBD_LL_DataOutStage+0x7c>
 800b85e:	2b01      	cmp	r3, #1
 800b860:	d003      	beq.n	800b86a <USBD_LL_DataOutStage+0x82>
 800b862:	e018      	b.n	800b896 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800b864:	2300      	movs	r3, #0
 800b866:	75bb      	strb	r3, [r7, #22]
            break;
 800b868:	e018      	b.n	800b89c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b870:	b2db      	uxtb	r3, r3
 800b872:	4619      	mov	r1, r3
 800b874:	68f8      	ldr	r0, [r7, #12]
 800b876:	f000 fa5e 	bl	800bd36 <USBD_CoreFindIF>
 800b87a:	4603      	mov	r3, r0
 800b87c:	75bb      	strb	r3, [r7, #22]
            break;
 800b87e:	e00d      	b.n	800b89c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b886:	b2db      	uxtb	r3, r3
 800b888:	4619      	mov	r1, r3
 800b88a:	68f8      	ldr	r0, [r7, #12]
 800b88c:	f000 fa60 	bl	800bd50 <USBD_CoreFindEP>
 800b890:	4603      	mov	r3, r0
 800b892:	75bb      	strb	r3, [r7, #22]
            break;
 800b894:	e002      	b.n	800b89c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800b896:	2300      	movs	r3, #0
 800b898:	75bb      	strb	r3, [r7, #22]
            break;
 800b89a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800b89c:	7dbb      	ldrb	r3, [r7, #22]
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d119      	bne.n	800b8d6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b8a8:	b2db      	uxtb	r3, r3
 800b8aa:	2b03      	cmp	r3, #3
 800b8ac:	d113      	bne.n	800b8d6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800b8ae:	7dba      	ldrb	r2, [r7, #22]
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	32ae      	adds	r2, #174	; 0xae
 800b8b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8b8:	691b      	ldr	r3, [r3, #16]
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d00b      	beq.n	800b8d6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800b8be:	7dba      	ldrb	r2, [r7, #22]
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800b8c6:	7dba      	ldrb	r2, [r7, #22]
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	32ae      	adds	r2, #174	; 0xae
 800b8cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8d0:	691b      	ldr	r3, [r3, #16]
 800b8d2:	68f8      	ldr	r0, [r7, #12]
 800b8d4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b8d6:	68f8      	ldr	r0, [r7, #12]
 800b8d8:	f001 f94a 	bl	800cb70 <USBD_CtlSendStatus>
 800b8dc:	e032      	b.n	800b944 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800b8de:	7afb      	ldrb	r3, [r7, #11]
 800b8e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b8e4:	b2db      	uxtb	r3, r3
 800b8e6:	4619      	mov	r1, r3
 800b8e8:	68f8      	ldr	r0, [r7, #12]
 800b8ea:	f000 fa31 	bl	800bd50 <USBD_CoreFindEP>
 800b8ee:	4603      	mov	r3, r0
 800b8f0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b8f2:	7dbb      	ldrb	r3, [r7, #22]
 800b8f4:	2bff      	cmp	r3, #255	; 0xff
 800b8f6:	d025      	beq.n	800b944 <USBD_LL_DataOutStage+0x15c>
 800b8f8:	7dbb      	ldrb	r3, [r7, #22]
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d122      	bne.n	800b944 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b904:	b2db      	uxtb	r3, r3
 800b906:	2b03      	cmp	r3, #3
 800b908:	d117      	bne.n	800b93a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800b90a:	7dba      	ldrb	r2, [r7, #22]
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	32ae      	adds	r2, #174	; 0xae
 800b910:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b914:	699b      	ldr	r3, [r3, #24]
 800b916:	2b00      	cmp	r3, #0
 800b918:	d00f      	beq.n	800b93a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800b91a:	7dba      	ldrb	r2, [r7, #22]
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800b922:	7dba      	ldrb	r2, [r7, #22]
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	32ae      	adds	r2, #174	; 0xae
 800b928:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b92c:	699b      	ldr	r3, [r3, #24]
 800b92e:	7afa      	ldrb	r2, [r7, #11]
 800b930:	4611      	mov	r1, r2
 800b932:	68f8      	ldr	r0, [r7, #12]
 800b934:	4798      	blx	r3
 800b936:	4603      	mov	r3, r0
 800b938:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800b93a:	7dfb      	ldrb	r3, [r7, #23]
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d001      	beq.n	800b944 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800b940:	7dfb      	ldrb	r3, [r7, #23]
 800b942:	e000      	b.n	800b946 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800b944:	2300      	movs	r3, #0
}
 800b946:	4618      	mov	r0, r3
 800b948:	3718      	adds	r7, #24
 800b94a:	46bd      	mov	sp, r7
 800b94c:	bd80      	pop	{r7, pc}

0800b94e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b94e:	b580      	push	{r7, lr}
 800b950:	b086      	sub	sp, #24
 800b952:	af00      	add	r7, sp, #0
 800b954:	60f8      	str	r0, [r7, #12]
 800b956:	460b      	mov	r3, r1
 800b958:	607a      	str	r2, [r7, #4]
 800b95a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800b95c:	7afb      	ldrb	r3, [r7, #11]
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d16f      	bne.n	800ba42 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	3314      	adds	r3, #20
 800b966:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b96e:	2b02      	cmp	r3, #2
 800b970:	d15a      	bne.n	800ba28 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800b972:	693b      	ldr	r3, [r7, #16]
 800b974:	689a      	ldr	r2, [r3, #8]
 800b976:	693b      	ldr	r3, [r7, #16]
 800b978:	68db      	ldr	r3, [r3, #12]
 800b97a:	429a      	cmp	r2, r3
 800b97c:	d914      	bls.n	800b9a8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b97e:	693b      	ldr	r3, [r7, #16]
 800b980:	689a      	ldr	r2, [r3, #8]
 800b982:	693b      	ldr	r3, [r7, #16]
 800b984:	68db      	ldr	r3, [r3, #12]
 800b986:	1ad2      	subs	r2, r2, r3
 800b988:	693b      	ldr	r3, [r7, #16]
 800b98a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b98c:	693b      	ldr	r3, [r7, #16]
 800b98e:	689b      	ldr	r3, [r3, #8]
 800b990:	461a      	mov	r2, r3
 800b992:	6879      	ldr	r1, [r7, #4]
 800b994:	68f8      	ldr	r0, [r7, #12]
 800b996:	f001 f8ac 	bl	800caf2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b99a:	2300      	movs	r3, #0
 800b99c:	2200      	movs	r2, #0
 800b99e:	2100      	movs	r1, #0
 800b9a0:	68f8      	ldr	r0, [r7, #12]
 800b9a2:	f001 fd05 	bl	800d3b0 <USBD_LL_PrepareReceive>
 800b9a6:	e03f      	b.n	800ba28 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b9a8:	693b      	ldr	r3, [r7, #16]
 800b9aa:	68da      	ldr	r2, [r3, #12]
 800b9ac:	693b      	ldr	r3, [r7, #16]
 800b9ae:	689b      	ldr	r3, [r3, #8]
 800b9b0:	429a      	cmp	r2, r3
 800b9b2:	d11c      	bne.n	800b9ee <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b9b4:	693b      	ldr	r3, [r7, #16]
 800b9b6:	685a      	ldr	r2, [r3, #4]
 800b9b8:	693b      	ldr	r3, [r7, #16]
 800b9ba:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b9bc:	429a      	cmp	r2, r3
 800b9be:	d316      	bcc.n	800b9ee <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b9c0:	693b      	ldr	r3, [r7, #16]
 800b9c2:	685a      	ldr	r2, [r3, #4]
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b9ca:	429a      	cmp	r2, r3
 800b9cc:	d20f      	bcs.n	800b9ee <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b9ce:	2200      	movs	r2, #0
 800b9d0:	2100      	movs	r1, #0
 800b9d2:	68f8      	ldr	r0, [r7, #12]
 800b9d4:	f001 f88d 	bl	800caf2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	2200      	movs	r2, #0
 800b9dc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b9e0:	2300      	movs	r3, #0
 800b9e2:	2200      	movs	r2, #0
 800b9e4:	2100      	movs	r1, #0
 800b9e6:	68f8      	ldr	r0, [r7, #12]
 800b9e8:	f001 fce2 	bl	800d3b0 <USBD_LL_PrepareReceive>
 800b9ec:	e01c      	b.n	800ba28 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b9f4:	b2db      	uxtb	r3, r3
 800b9f6:	2b03      	cmp	r3, #3
 800b9f8:	d10f      	bne.n	800ba1a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba00:	68db      	ldr	r3, [r3, #12]
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d009      	beq.n	800ba1a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	2200      	movs	r2, #0
 800ba0a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba14:	68db      	ldr	r3, [r3, #12]
 800ba16:	68f8      	ldr	r0, [r7, #12]
 800ba18:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ba1a:	2180      	movs	r1, #128	; 0x80
 800ba1c:	68f8      	ldr	r0, [r7, #12]
 800ba1e:	f001 fc1d 	bl	800d25c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800ba22:	68f8      	ldr	r0, [r7, #12]
 800ba24:	f001 f8b7 	bl	800cb96 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d03a      	beq.n	800baa8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800ba32:	68f8      	ldr	r0, [r7, #12]
 800ba34:	f7ff fe42 	bl	800b6bc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	2200      	movs	r2, #0
 800ba3c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800ba40:	e032      	b.n	800baa8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800ba42:	7afb      	ldrb	r3, [r7, #11]
 800ba44:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ba48:	b2db      	uxtb	r3, r3
 800ba4a:	4619      	mov	r1, r3
 800ba4c:	68f8      	ldr	r0, [r7, #12]
 800ba4e:	f000 f97f 	bl	800bd50 <USBD_CoreFindEP>
 800ba52:	4603      	mov	r3, r0
 800ba54:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ba56:	7dfb      	ldrb	r3, [r7, #23]
 800ba58:	2bff      	cmp	r3, #255	; 0xff
 800ba5a:	d025      	beq.n	800baa8 <USBD_LL_DataInStage+0x15a>
 800ba5c:	7dfb      	ldrb	r3, [r7, #23]
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d122      	bne.n	800baa8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba68:	b2db      	uxtb	r3, r3
 800ba6a:	2b03      	cmp	r3, #3
 800ba6c:	d11c      	bne.n	800baa8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800ba6e:	7dfa      	ldrb	r2, [r7, #23]
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	32ae      	adds	r2, #174	; 0xae
 800ba74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba78:	695b      	ldr	r3, [r3, #20]
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d014      	beq.n	800baa8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800ba7e:	7dfa      	ldrb	r2, [r7, #23]
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800ba86:	7dfa      	ldrb	r2, [r7, #23]
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	32ae      	adds	r2, #174	; 0xae
 800ba8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba90:	695b      	ldr	r3, [r3, #20]
 800ba92:	7afa      	ldrb	r2, [r7, #11]
 800ba94:	4611      	mov	r1, r2
 800ba96:	68f8      	ldr	r0, [r7, #12]
 800ba98:	4798      	blx	r3
 800ba9a:	4603      	mov	r3, r0
 800ba9c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800ba9e:	7dbb      	ldrb	r3, [r7, #22]
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d001      	beq.n	800baa8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800baa4:	7dbb      	ldrb	r3, [r7, #22]
 800baa6:	e000      	b.n	800baaa <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800baa8:	2300      	movs	r3, #0
}
 800baaa:	4618      	mov	r0, r3
 800baac:	3718      	adds	r7, #24
 800baae:	46bd      	mov	sp, r7
 800bab0:	bd80      	pop	{r7, pc}

0800bab2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800bab2:	b580      	push	{r7, lr}
 800bab4:	b084      	sub	sp, #16
 800bab6:	af00      	add	r7, sp, #0
 800bab8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800baba:	2300      	movs	r3, #0
 800babc:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	2201      	movs	r2, #1
 800bac2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	2200      	movs	r2, #0
 800baca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	2200      	movs	r2, #0
 800bad2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	2200      	movs	r2, #0
 800bad8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	2200      	movs	r2, #0
 800bae0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800baea:	2b00      	cmp	r3, #0
 800baec:	d014      	beq.n	800bb18 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800baf4:	685b      	ldr	r3, [r3, #4]
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d00e      	beq.n	800bb18 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb00:	685b      	ldr	r3, [r3, #4]
 800bb02:	687a      	ldr	r2, [r7, #4]
 800bb04:	6852      	ldr	r2, [r2, #4]
 800bb06:	b2d2      	uxtb	r2, r2
 800bb08:	4611      	mov	r1, r2
 800bb0a:	6878      	ldr	r0, [r7, #4]
 800bb0c:	4798      	blx	r3
 800bb0e:	4603      	mov	r3, r0
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d001      	beq.n	800bb18 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800bb14:	2303      	movs	r3, #3
 800bb16:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bb18:	2340      	movs	r3, #64	; 0x40
 800bb1a:	2200      	movs	r2, #0
 800bb1c:	2100      	movs	r1, #0
 800bb1e:	6878      	ldr	r0, [r7, #4]
 800bb20:	f001 fb57 	bl	800d1d2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	2201      	movs	r2, #1
 800bb28:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	2240      	movs	r2, #64	; 0x40
 800bb30:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bb34:	2340      	movs	r3, #64	; 0x40
 800bb36:	2200      	movs	r2, #0
 800bb38:	2180      	movs	r1, #128	; 0x80
 800bb3a:	6878      	ldr	r0, [r7, #4]
 800bb3c:	f001 fb49 	bl	800d1d2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	2201      	movs	r2, #1
 800bb44:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	2240      	movs	r2, #64	; 0x40
 800bb4a:	621a      	str	r2, [r3, #32]

  return ret;
 800bb4c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb4e:	4618      	mov	r0, r3
 800bb50:	3710      	adds	r7, #16
 800bb52:	46bd      	mov	sp, r7
 800bb54:	bd80      	pop	{r7, pc}

0800bb56 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800bb56:	b480      	push	{r7}
 800bb58:	b083      	sub	sp, #12
 800bb5a:	af00      	add	r7, sp, #0
 800bb5c:	6078      	str	r0, [r7, #4]
 800bb5e:	460b      	mov	r3, r1
 800bb60:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	78fa      	ldrb	r2, [r7, #3]
 800bb66:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800bb68:	2300      	movs	r3, #0
}
 800bb6a:	4618      	mov	r0, r3
 800bb6c:	370c      	adds	r7, #12
 800bb6e:	46bd      	mov	sp, r7
 800bb70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb74:	4770      	bx	lr

0800bb76 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800bb76:	b480      	push	{r7}
 800bb78:	b083      	sub	sp, #12
 800bb7a:	af00      	add	r7, sp, #0
 800bb7c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb84:	b2da      	uxtb	r2, r3
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	2204      	movs	r2, #4
 800bb90:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800bb94:	2300      	movs	r3, #0
}
 800bb96:	4618      	mov	r0, r3
 800bb98:	370c      	adds	r7, #12
 800bb9a:	46bd      	mov	sp, r7
 800bb9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba0:	4770      	bx	lr

0800bba2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800bba2:	b480      	push	{r7}
 800bba4:	b083      	sub	sp, #12
 800bba6:	af00      	add	r7, sp, #0
 800bba8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bbb0:	b2db      	uxtb	r3, r3
 800bbb2:	2b04      	cmp	r3, #4
 800bbb4:	d106      	bne.n	800bbc4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800bbbc:	b2da      	uxtb	r2, r3
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800bbc4:	2300      	movs	r3, #0
}
 800bbc6:	4618      	mov	r0, r3
 800bbc8:	370c      	adds	r7, #12
 800bbca:	46bd      	mov	sp, r7
 800bbcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd0:	4770      	bx	lr

0800bbd2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800bbd2:	b580      	push	{r7, lr}
 800bbd4:	b082      	sub	sp, #8
 800bbd6:	af00      	add	r7, sp, #0
 800bbd8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bbe0:	b2db      	uxtb	r3, r3
 800bbe2:	2b03      	cmp	r3, #3
 800bbe4:	d110      	bne.n	800bc08 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d00b      	beq.n	800bc08 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bbf6:	69db      	ldr	r3, [r3, #28]
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d005      	beq.n	800bc08 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc02:	69db      	ldr	r3, [r3, #28]
 800bc04:	6878      	ldr	r0, [r7, #4]
 800bc06:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800bc08:	2300      	movs	r3, #0
}
 800bc0a:	4618      	mov	r0, r3
 800bc0c:	3708      	adds	r7, #8
 800bc0e:	46bd      	mov	sp, r7
 800bc10:	bd80      	pop	{r7, pc}

0800bc12 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800bc12:	b580      	push	{r7, lr}
 800bc14:	b082      	sub	sp, #8
 800bc16:	af00      	add	r7, sp, #0
 800bc18:	6078      	str	r0, [r7, #4]
 800bc1a:	460b      	mov	r3, r1
 800bc1c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	32ae      	adds	r2, #174	; 0xae
 800bc28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d101      	bne.n	800bc34 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800bc30:	2303      	movs	r3, #3
 800bc32:	e01c      	b.n	800bc6e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc3a:	b2db      	uxtb	r3, r3
 800bc3c:	2b03      	cmp	r3, #3
 800bc3e:	d115      	bne.n	800bc6c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	32ae      	adds	r2, #174	; 0xae
 800bc4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc4e:	6a1b      	ldr	r3, [r3, #32]
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d00b      	beq.n	800bc6c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	32ae      	adds	r2, #174	; 0xae
 800bc5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc62:	6a1b      	ldr	r3, [r3, #32]
 800bc64:	78fa      	ldrb	r2, [r7, #3]
 800bc66:	4611      	mov	r1, r2
 800bc68:	6878      	ldr	r0, [r7, #4]
 800bc6a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bc6c:	2300      	movs	r3, #0
}
 800bc6e:	4618      	mov	r0, r3
 800bc70:	3708      	adds	r7, #8
 800bc72:	46bd      	mov	sp, r7
 800bc74:	bd80      	pop	{r7, pc}

0800bc76 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800bc76:	b580      	push	{r7, lr}
 800bc78:	b082      	sub	sp, #8
 800bc7a:	af00      	add	r7, sp, #0
 800bc7c:	6078      	str	r0, [r7, #4]
 800bc7e:	460b      	mov	r3, r1
 800bc80:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	32ae      	adds	r2, #174	; 0xae
 800bc8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d101      	bne.n	800bc98 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800bc94:	2303      	movs	r3, #3
 800bc96:	e01c      	b.n	800bcd2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc9e:	b2db      	uxtb	r3, r3
 800bca0:	2b03      	cmp	r3, #3
 800bca2:	d115      	bne.n	800bcd0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	32ae      	adds	r2, #174	; 0xae
 800bcae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bcb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d00b      	beq.n	800bcd0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	32ae      	adds	r2, #174	; 0xae
 800bcc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bcc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcc8:	78fa      	ldrb	r2, [r7, #3]
 800bcca:	4611      	mov	r1, r2
 800bccc:	6878      	ldr	r0, [r7, #4]
 800bcce:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bcd0:	2300      	movs	r3, #0
}
 800bcd2:	4618      	mov	r0, r3
 800bcd4:	3708      	adds	r7, #8
 800bcd6:	46bd      	mov	sp, r7
 800bcd8:	bd80      	pop	{r7, pc}

0800bcda <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800bcda:	b480      	push	{r7}
 800bcdc:	b083      	sub	sp, #12
 800bcde:	af00      	add	r7, sp, #0
 800bce0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bce2:	2300      	movs	r3, #0
}
 800bce4:	4618      	mov	r0, r3
 800bce6:	370c      	adds	r7, #12
 800bce8:	46bd      	mov	sp, r7
 800bcea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcee:	4770      	bx	lr

0800bcf0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800bcf0:	b580      	push	{r7, lr}
 800bcf2:	b084      	sub	sp, #16
 800bcf4:	af00      	add	r7, sp, #0
 800bcf6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800bcf8:	2300      	movs	r3, #0
 800bcfa:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	2201      	movs	r2, #1
 800bd00:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d00e      	beq.n	800bd2c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd14:	685b      	ldr	r3, [r3, #4]
 800bd16:	687a      	ldr	r2, [r7, #4]
 800bd18:	6852      	ldr	r2, [r2, #4]
 800bd1a:	b2d2      	uxtb	r2, r2
 800bd1c:	4611      	mov	r1, r2
 800bd1e:	6878      	ldr	r0, [r7, #4]
 800bd20:	4798      	blx	r3
 800bd22:	4603      	mov	r3, r0
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d001      	beq.n	800bd2c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800bd28:	2303      	movs	r3, #3
 800bd2a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800bd2c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd2e:	4618      	mov	r0, r3
 800bd30:	3710      	adds	r7, #16
 800bd32:	46bd      	mov	sp, r7
 800bd34:	bd80      	pop	{r7, pc}

0800bd36 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800bd36:	b480      	push	{r7}
 800bd38:	b083      	sub	sp, #12
 800bd3a:	af00      	add	r7, sp, #0
 800bd3c:	6078      	str	r0, [r7, #4]
 800bd3e:	460b      	mov	r3, r1
 800bd40:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800bd42:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800bd44:	4618      	mov	r0, r3
 800bd46:	370c      	adds	r7, #12
 800bd48:	46bd      	mov	sp, r7
 800bd4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd4e:	4770      	bx	lr

0800bd50 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800bd50:	b480      	push	{r7}
 800bd52:	b083      	sub	sp, #12
 800bd54:	af00      	add	r7, sp, #0
 800bd56:	6078      	str	r0, [r7, #4]
 800bd58:	460b      	mov	r3, r1
 800bd5a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800bd5c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800bd5e:	4618      	mov	r0, r3
 800bd60:	370c      	adds	r7, #12
 800bd62:	46bd      	mov	sp, r7
 800bd64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd68:	4770      	bx	lr

0800bd6a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800bd6a:	b580      	push	{r7, lr}
 800bd6c:	b086      	sub	sp, #24
 800bd6e:	af00      	add	r7, sp, #0
 800bd70:	6078      	str	r0, [r7, #4]
 800bd72:	460b      	mov	r3, r1
 800bd74:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800bd7e:	2300      	movs	r3, #0
 800bd80:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	885b      	ldrh	r3, [r3, #2]
 800bd86:	b29a      	uxth	r2, r3
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	781b      	ldrb	r3, [r3, #0]
 800bd8c:	b29b      	uxth	r3, r3
 800bd8e:	429a      	cmp	r2, r3
 800bd90:	d920      	bls.n	800bdd4 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	781b      	ldrb	r3, [r3, #0]
 800bd96:	b29b      	uxth	r3, r3
 800bd98:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800bd9a:	e013      	b.n	800bdc4 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800bd9c:	f107 030a 	add.w	r3, r7, #10
 800bda0:	4619      	mov	r1, r3
 800bda2:	6978      	ldr	r0, [r7, #20]
 800bda4:	f000 f81b 	bl	800bdde <USBD_GetNextDesc>
 800bda8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800bdaa:	697b      	ldr	r3, [r7, #20]
 800bdac:	785b      	ldrb	r3, [r3, #1]
 800bdae:	2b05      	cmp	r3, #5
 800bdb0:	d108      	bne.n	800bdc4 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800bdb2:	697b      	ldr	r3, [r7, #20]
 800bdb4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800bdb6:	693b      	ldr	r3, [r7, #16]
 800bdb8:	789b      	ldrb	r3, [r3, #2]
 800bdba:	78fa      	ldrb	r2, [r7, #3]
 800bdbc:	429a      	cmp	r2, r3
 800bdbe:	d008      	beq.n	800bdd2 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800bdc0:	2300      	movs	r3, #0
 800bdc2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	885b      	ldrh	r3, [r3, #2]
 800bdc8:	b29a      	uxth	r2, r3
 800bdca:	897b      	ldrh	r3, [r7, #10]
 800bdcc:	429a      	cmp	r2, r3
 800bdce:	d8e5      	bhi.n	800bd9c <USBD_GetEpDesc+0x32>
 800bdd0:	e000      	b.n	800bdd4 <USBD_GetEpDesc+0x6a>
          break;
 800bdd2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800bdd4:	693b      	ldr	r3, [r7, #16]
}
 800bdd6:	4618      	mov	r0, r3
 800bdd8:	3718      	adds	r7, #24
 800bdda:	46bd      	mov	sp, r7
 800bddc:	bd80      	pop	{r7, pc}

0800bdde <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800bdde:	b480      	push	{r7}
 800bde0:	b085      	sub	sp, #20
 800bde2:	af00      	add	r7, sp, #0
 800bde4:	6078      	str	r0, [r7, #4]
 800bde6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800bdec:	683b      	ldr	r3, [r7, #0]
 800bdee:	881a      	ldrh	r2, [r3, #0]
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	781b      	ldrb	r3, [r3, #0]
 800bdf4:	b29b      	uxth	r3, r3
 800bdf6:	4413      	add	r3, r2
 800bdf8:	b29a      	uxth	r2, r3
 800bdfa:	683b      	ldr	r3, [r7, #0]
 800bdfc:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	781b      	ldrb	r3, [r3, #0]
 800be02:	461a      	mov	r2, r3
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	4413      	add	r3, r2
 800be08:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800be0a:	68fb      	ldr	r3, [r7, #12]
}
 800be0c:	4618      	mov	r0, r3
 800be0e:	3714      	adds	r7, #20
 800be10:	46bd      	mov	sp, r7
 800be12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be16:	4770      	bx	lr

0800be18 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800be18:	b480      	push	{r7}
 800be1a:	b087      	sub	sp, #28
 800be1c:	af00      	add	r7, sp, #0
 800be1e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800be24:	697b      	ldr	r3, [r7, #20]
 800be26:	781b      	ldrb	r3, [r3, #0]
 800be28:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800be2a:	697b      	ldr	r3, [r7, #20]
 800be2c:	3301      	adds	r3, #1
 800be2e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800be30:	697b      	ldr	r3, [r7, #20]
 800be32:	781b      	ldrb	r3, [r3, #0]
 800be34:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800be36:	8a3b      	ldrh	r3, [r7, #16]
 800be38:	021b      	lsls	r3, r3, #8
 800be3a:	b21a      	sxth	r2, r3
 800be3c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800be40:	4313      	orrs	r3, r2
 800be42:	b21b      	sxth	r3, r3
 800be44:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800be46:	89fb      	ldrh	r3, [r7, #14]
}
 800be48:	4618      	mov	r0, r3
 800be4a:	371c      	adds	r7, #28
 800be4c:	46bd      	mov	sp, r7
 800be4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be52:	4770      	bx	lr

0800be54 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800be54:	b580      	push	{r7, lr}
 800be56:	b084      	sub	sp, #16
 800be58:	af00      	add	r7, sp, #0
 800be5a:	6078      	str	r0, [r7, #4]
 800be5c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800be5e:	2300      	movs	r3, #0
 800be60:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800be62:	683b      	ldr	r3, [r7, #0]
 800be64:	781b      	ldrb	r3, [r3, #0]
 800be66:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800be6a:	2b40      	cmp	r3, #64	; 0x40
 800be6c:	d005      	beq.n	800be7a <USBD_StdDevReq+0x26>
 800be6e:	2b40      	cmp	r3, #64	; 0x40
 800be70:	d857      	bhi.n	800bf22 <USBD_StdDevReq+0xce>
 800be72:	2b00      	cmp	r3, #0
 800be74:	d00f      	beq.n	800be96 <USBD_StdDevReq+0x42>
 800be76:	2b20      	cmp	r3, #32
 800be78:	d153      	bne.n	800bf22 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	32ae      	adds	r2, #174	; 0xae
 800be84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be88:	689b      	ldr	r3, [r3, #8]
 800be8a:	6839      	ldr	r1, [r7, #0]
 800be8c:	6878      	ldr	r0, [r7, #4]
 800be8e:	4798      	blx	r3
 800be90:	4603      	mov	r3, r0
 800be92:	73fb      	strb	r3, [r7, #15]
      break;
 800be94:	e04a      	b.n	800bf2c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800be96:	683b      	ldr	r3, [r7, #0]
 800be98:	785b      	ldrb	r3, [r3, #1]
 800be9a:	2b09      	cmp	r3, #9
 800be9c:	d83b      	bhi.n	800bf16 <USBD_StdDevReq+0xc2>
 800be9e:	a201      	add	r2, pc, #4	; (adr r2, 800bea4 <USBD_StdDevReq+0x50>)
 800bea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bea4:	0800bef9 	.word	0x0800bef9
 800bea8:	0800bf0d 	.word	0x0800bf0d
 800beac:	0800bf17 	.word	0x0800bf17
 800beb0:	0800bf03 	.word	0x0800bf03
 800beb4:	0800bf17 	.word	0x0800bf17
 800beb8:	0800bed7 	.word	0x0800bed7
 800bebc:	0800becd 	.word	0x0800becd
 800bec0:	0800bf17 	.word	0x0800bf17
 800bec4:	0800beef 	.word	0x0800beef
 800bec8:	0800bee1 	.word	0x0800bee1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800becc:	6839      	ldr	r1, [r7, #0]
 800bece:	6878      	ldr	r0, [r7, #4]
 800bed0:	f000 fa3c 	bl	800c34c <USBD_GetDescriptor>
          break;
 800bed4:	e024      	b.n	800bf20 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800bed6:	6839      	ldr	r1, [r7, #0]
 800bed8:	6878      	ldr	r0, [r7, #4]
 800beda:	f000 fba1 	bl	800c620 <USBD_SetAddress>
          break;
 800bede:	e01f      	b.n	800bf20 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800bee0:	6839      	ldr	r1, [r7, #0]
 800bee2:	6878      	ldr	r0, [r7, #4]
 800bee4:	f000 fbe0 	bl	800c6a8 <USBD_SetConfig>
 800bee8:	4603      	mov	r3, r0
 800beea:	73fb      	strb	r3, [r7, #15]
          break;
 800beec:	e018      	b.n	800bf20 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800beee:	6839      	ldr	r1, [r7, #0]
 800bef0:	6878      	ldr	r0, [r7, #4]
 800bef2:	f000 fc83 	bl	800c7fc <USBD_GetConfig>
          break;
 800bef6:	e013      	b.n	800bf20 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800bef8:	6839      	ldr	r1, [r7, #0]
 800befa:	6878      	ldr	r0, [r7, #4]
 800befc:	f000 fcb4 	bl	800c868 <USBD_GetStatus>
          break;
 800bf00:	e00e      	b.n	800bf20 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800bf02:	6839      	ldr	r1, [r7, #0]
 800bf04:	6878      	ldr	r0, [r7, #4]
 800bf06:	f000 fce3 	bl	800c8d0 <USBD_SetFeature>
          break;
 800bf0a:	e009      	b.n	800bf20 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800bf0c:	6839      	ldr	r1, [r7, #0]
 800bf0e:	6878      	ldr	r0, [r7, #4]
 800bf10:	f000 fd07 	bl	800c922 <USBD_ClrFeature>
          break;
 800bf14:	e004      	b.n	800bf20 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800bf16:	6839      	ldr	r1, [r7, #0]
 800bf18:	6878      	ldr	r0, [r7, #4]
 800bf1a:	f000 fd5e 	bl	800c9da <USBD_CtlError>
          break;
 800bf1e:	bf00      	nop
      }
      break;
 800bf20:	e004      	b.n	800bf2c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800bf22:	6839      	ldr	r1, [r7, #0]
 800bf24:	6878      	ldr	r0, [r7, #4]
 800bf26:	f000 fd58 	bl	800c9da <USBD_CtlError>
      break;
 800bf2a:	bf00      	nop
  }

  return ret;
 800bf2c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf2e:	4618      	mov	r0, r3
 800bf30:	3710      	adds	r7, #16
 800bf32:	46bd      	mov	sp, r7
 800bf34:	bd80      	pop	{r7, pc}
 800bf36:	bf00      	nop

0800bf38 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bf38:	b580      	push	{r7, lr}
 800bf3a:	b084      	sub	sp, #16
 800bf3c:	af00      	add	r7, sp, #0
 800bf3e:	6078      	str	r0, [r7, #4]
 800bf40:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bf42:	2300      	movs	r3, #0
 800bf44:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bf46:	683b      	ldr	r3, [r7, #0]
 800bf48:	781b      	ldrb	r3, [r3, #0]
 800bf4a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bf4e:	2b40      	cmp	r3, #64	; 0x40
 800bf50:	d005      	beq.n	800bf5e <USBD_StdItfReq+0x26>
 800bf52:	2b40      	cmp	r3, #64	; 0x40
 800bf54:	d852      	bhi.n	800bffc <USBD_StdItfReq+0xc4>
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d001      	beq.n	800bf5e <USBD_StdItfReq+0x26>
 800bf5a:	2b20      	cmp	r3, #32
 800bf5c:	d14e      	bne.n	800bffc <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bf64:	b2db      	uxtb	r3, r3
 800bf66:	3b01      	subs	r3, #1
 800bf68:	2b02      	cmp	r3, #2
 800bf6a:	d840      	bhi.n	800bfee <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800bf6c:	683b      	ldr	r3, [r7, #0]
 800bf6e:	889b      	ldrh	r3, [r3, #4]
 800bf70:	b2db      	uxtb	r3, r3
 800bf72:	2b01      	cmp	r3, #1
 800bf74:	d836      	bhi.n	800bfe4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800bf76:	683b      	ldr	r3, [r7, #0]
 800bf78:	889b      	ldrh	r3, [r3, #4]
 800bf7a:	b2db      	uxtb	r3, r3
 800bf7c:	4619      	mov	r1, r3
 800bf7e:	6878      	ldr	r0, [r7, #4]
 800bf80:	f7ff fed9 	bl	800bd36 <USBD_CoreFindIF>
 800bf84:	4603      	mov	r3, r0
 800bf86:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bf88:	7bbb      	ldrb	r3, [r7, #14]
 800bf8a:	2bff      	cmp	r3, #255	; 0xff
 800bf8c:	d01d      	beq.n	800bfca <USBD_StdItfReq+0x92>
 800bf8e:	7bbb      	ldrb	r3, [r7, #14]
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d11a      	bne.n	800bfca <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800bf94:	7bba      	ldrb	r2, [r7, #14]
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	32ae      	adds	r2, #174	; 0xae
 800bf9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf9e:	689b      	ldr	r3, [r3, #8]
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d00f      	beq.n	800bfc4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800bfa4:	7bba      	ldrb	r2, [r7, #14]
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800bfac:	7bba      	ldrb	r2, [r7, #14]
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	32ae      	adds	r2, #174	; 0xae
 800bfb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bfb6:	689b      	ldr	r3, [r3, #8]
 800bfb8:	6839      	ldr	r1, [r7, #0]
 800bfba:	6878      	ldr	r0, [r7, #4]
 800bfbc:	4798      	blx	r3
 800bfbe:	4603      	mov	r3, r0
 800bfc0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800bfc2:	e004      	b.n	800bfce <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800bfc4:	2303      	movs	r3, #3
 800bfc6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800bfc8:	e001      	b.n	800bfce <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800bfca:	2303      	movs	r3, #3
 800bfcc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800bfce:	683b      	ldr	r3, [r7, #0]
 800bfd0:	88db      	ldrh	r3, [r3, #6]
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d110      	bne.n	800bff8 <USBD_StdItfReq+0xc0>
 800bfd6:	7bfb      	ldrb	r3, [r7, #15]
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d10d      	bne.n	800bff8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800bfdc:	6878      	ldr	r0, [r7, #4]
 800bfde:	f000 fdc7 	bl	800cb70 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800bfe2:	e009      	b.n	800bff8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800bfe4:	6839      	ldr	r1, [r7, #0]
 800bfe6:	6878      	ldr	r0, [r7, #4]
 800bfe8:	f000 fcf7 	bl	800c9da <USBD_CtlError>
          break;
 800bfec:	e004      	b.n	800bff8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800bfee:	6839      	ldr	r1, [r7, #0]
 800bff0:	6878      	ldr	r0, [r7, #4]
 800bff2:	f000 fcf2 	bl	800c9da <USBD_CtlError>
          break;
 800bff6:	e000      	b.n	800bffa <USBD_StdItfReq+0xc2>
          break;
 800bff8:	bf00      	nop
      }
      break;
 800bffa:	e004      	b.n	800c006 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800bffc:	6839      	ldr	r1, [r7, #0]
 800bffe:	6878      	ldr	r0, [r7, #4]
 800c000:	f000 fceb 	bl	800c9da <USBD_CtlError>
      break;
 800c004:	bf00      	nop
  }

  return ret;
 800c006:	7bfb      	ldrb	r3, [r7, #15]
}
 800c008:	4618      	mov	r0, r3
 800c00a:	3710      	adds	r7, #16
 800c00c:	46bd      	mov	sp, r7
 800c00e:	bd80      	pop	{r7, pc}

0800c010 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c010:	b580      	push	{r7, lr}
 800c012:	b084      	sub	sp, #16
 800c014:	af00      	add	r7, sp, #0
 800c016:	6078      	str	r0, [r7, #4]
 800c018:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800c01a:	2300      	movs	r3, #0
 800c01c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800c01e:	683b      	ldr	r3, [r7, #0]
 800c020:	889b      	ldrh	r3, [r3, #4]
 800c022:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c024:	683b      	ldr	r3, [r7, #0]
 800c026:	781b      	ldrb	r3, [r3, #0]
 800c028:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c02c:	2b40      	cmp	r3, #64	; 0x40
 800c02e:	d007      	beq.n	800c040 <USBD_StdEPReq+0x30>
 800c030:	2b40      	cmp	r3, #64	; 0x40
 800c032:	f200 817f 	bhi.w	800c334 <USBD_StdEPReq+0x324>
 800c036:	2b00      	cmp	r3, #0
 800c038:	d02a      	beq.n	800c090 <USBD_StdEPReq+0x80>
 800c03a:	2b20      	cmp	r3, #32
 800c03c:	f040 817a 	bne.w	800c334 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800c040:	7bbb      	ldrb	r3, [r7, #14]
 800c042:	4619      	mov	r1, r3
 800c044:	6878      	ldr	r0, [r7, #4]
 800c046:	f7ff fe83 	bl	800bd50 <USBD_CoreFindEP>
 800c04a:	4603      	mov	r3, r0
 800c04c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c04e:	7b7b      	ldrb	r3, [r7, #13]
 800c050:	2bff      	cmp	r3, #255	; 0xff
 800c052:	f000 8174 	beq.w	800c33e <USBD_StdEPReq+0x32e>
 800c056:	7b7b      	ldrb	r3, [r7, #13]
 800c058:	2b00      	cmp	r3, #0
 800c05a:	f040 8170 	bne.w	800c33e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800c05e:	7b7a      	ldrb	r2, [r7, #13]
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800c066:	7b7a      	ldrb	r2, [r7, #13]
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	32ae      	adds	r2, #174	; 0xae
 800c06c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c070:	689b      	ldr	r3, [r3, #8]
 800c072:	2b00      	cmp	r3, #0
 800c074:	f000 8163 	beq.w	800c33e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800c078:	7b7a      	ldrb	r2, [r7, #13]
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	32ae      	adds	r2, #174	; 0xae
 800c07e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c082:	689b      	ldr	r3, [r3, #8]
 800c084:	6839      	ldr	r1, [r7, #0]
 800c086:	6878      	ldr	r0, [r7, #4]
 800c088:	4798      	blx	r3
 800c08a:	4603      	mov	r3, r0
 800c08c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800c08e:	e156      	b.n	800c33e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c090:	683b      	ldr	r3, [r7, #0]
 800c092:	785b      	ldrb	r3, [r3, #1]
 800c094:	2b03      	cmp	r3, #3
 800c096:	d008      	beq.n	800c0aa <USBD_StdEPReq+0x9a>
 800c098:	2b03      	cmp	r3, #3
 800c09a:	f300 8145 	bgt.w	800c328 <USBD_StdEPReq+0x318>
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	f000 809b 	beq.w	800c1da <USBD_StdEPReq+0x1ca>
 800c0a4:	2b01      	cmp	r3, #1
 800c0a6:	d03c      	beq.n	800c122 <USBD_StdEPReq+0x112>
 800c0a8:	e13e      	b.n	800c328 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c0b0:	b2db      	uxtb	r3, r3
 800c0b2:	2b02      	cmp	r3, #2
 800c0b4:	d002      	beq.n	800c0bc <USBD_StdEPReq+0xac>
 800c0b6:	2b03      	cmp	r3, #3
 800c0b8:	d016      	beq.n	800c0e8 <USBD_StdEPReq+0xd8>
 800c0ba:	e02c      	b.n	800c116 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c0bc:	7bbb      	ldrb	r3, [r7, #14]
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d00d      	beq.n	800c0de <USBD_StdEPReq+0xce>
 800c0c2:	7bbb      	ldrb	r3, [r7, #14]
 800c0c4:	2b80      	cmp	r3, #128	; 0x80
 800c0c6:	d00a      	beq.n	800c0de <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c0c8:	7bbb      	ldrb	r3, [r7, #14]
 800c0ca:	4619      	mov	r1, r3
 800c0cc:	6878      	ldr	r0, [r7, #4]
 800c0ce:	f001 f8c5 	bl	800d25c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c0d2:	2180      	movs	r1, #128	; 0x80
 800c0d4:	6878      	ldr	r0, [r7, #4]
 800c0d6:	f001 f8c1 	bl	800d25c <USBD_LL_StallEP>
 800c0da:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c0dc:	e020      	b.n	800c120 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800c0de:	6839      	ldr	r1, [r7, #0]
 800c0e0:	6878      	ldr	r0, [r7, #4]
 800c0e2:	f000 fc7a 	bl	800c9da <USBD_CtlError>
              break;
 800c0e6:	e01b      	b.n	800c120 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c0e8:	683b      	ldr	r3, [r7, #0]
 800c0ea:	885b      	ldrh	r3, [r3, #2]
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d10e      	bne.n	800c10e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c0f0:	7bbb      	ldrb	r3, [r7, #14]
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d00b      	beq.n	800c10e <USBD_StdEPReq+0xfe>
 800c0f6:	7bbb      	ldrb	r3, [r7, #14]
 800c0f8:	2b80      	cmp	r3, #128	; 0x80
 800c0fa:	d008      	beq.n	800c10e <USBD_StdEPReq+0xfe>
 800c0fc:	683b      	ldr	r3, [r7, #0]
 800c0fe:	88db      	ldrh	r3, [r3, #6]
 800c100:	2b00      	cmp	r3, #0
 800c102:	d104      	bne.n	800c10e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c104:	7bbb      	ldrb	r3, [r7, #14]
 800c106:	4619      	mov	r1, r3
 800c108:	6878      	ldr	r0, [r7, #4]
 800c10a:	f001 f8a7 	bl	800d25c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c10e:	6878      	ldr	r0, [r7, #4]
 800c110:	f000 fd2e 	bl	800cb70 <USBD_CtlSendStatus>

              break;
 800c114:	e004      	b.n	800c120 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800c116:	6839      	ldr	r1, [r7, #0]
 800c118:	6878      	ldr	r0, [r7, #4]
 800c11a:	f000 fc5e 	bl	800c9da <USBD_CtlError>
              break;
 800c11e:	bf00      	nop
          }
          break;
 800c120:	e107      	b.n	800c332 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c128:	b2db      	uxtb	r3, r3
 800c12a:	2b02      	cmp	r3, #2
 800c12c:	d002      	beq.n	800c134 <USBD_StdEPReq+0x124>
 800c12e:	2b03      	cmp	r3, #3
 800c130:	d016      	beq.n	800c160 <USBD_StdEPReq+0x150>
 800c132:	e04b      	b.n	800c1cc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c134:	7bbb      	ldrb	r3, [r7, #14]
 800c136:	2b00      	cmp	r3, #0
 800c138:	d00d      	beq.n	800c156 <USBD_StdEPReq+0x146>
 800c13a:	7bbb      	ldrb	r3, [r7, #14]
 800c13c:	2b80      	cmp	r3, #128	; 0x80
 800c13e:	d00a      	beq.n	800c156 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c140:	7bbb      	ldrb	r3, [r7, #14]
 800c142:	4619      	mov	r1, r3
 800c144:	6878      	ldr	r0, [r7, #4]
 800c146:	f001 f889 	bl	800d25c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c14a:	2180      	movs	r1, #128	; 0x80
 800c14c:	6878      	ldr	r0, [r7, #4]
 800c14e:	f001 f885 	bl	800d25c <USBD_LL_StallEP>
 800c152:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c154:	e040      	b.n	800c1d8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800c156:	6839      	ldr	r1, [r7, #0]
 800c158:	6878      	ldr	r0, [r7, #4]
 800c15a:	f000 fc3e 	bl	800c9da <USBD_CtlError>
              break;
 800c15e:	e03b      	b.n	800c1d8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c160:	683b      	ldr	r3, [r7, #0]
 800c162:	885b      	ldrh	r3, [r3, #2]
 800c164:	2b00      	cmp	r3, #0
 800c166:	d136      	bne.n	800c1d6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c168:	7bbb      	ldrb	r3, [r7, #14]
 800c16a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d004      	beq.n	800c17c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c172:	7bbb      	ldrb	r3, [r7, #14]
 800c174:	4619      	mov	r1, r3
 800c176:	6878      	ldr	r0, [r7, #4]
 800c178:	f001 f88f 	bl	800d29a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c17c:	6878      	ldr	r0, [r7, #4]
 800c17e:	f000 fcf7 	bl	800cb70 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800c182:	7bbb      	ldrb	r3, [r7, #14]
 800c184:	4619      	mov	r1, r3
 800c186:	6878      	ldr	r0, [r7, #4]
 800c188:	f7ff fde2 	bl	800bd50 <USBD_CoreFindEP>
 800c18c:	4603      	mov	r3, r0
 800c18e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c190:	7b7b      	ldrb	r3, [r7, #13]
 800c192:	2bff      	cmp	r3, #255	; 0xff
 800c194:	d01f      	beq.n	800c1d6 <USBD_StdEPReq+0x1c6>
 800c196:	7b7b      	ldrb	r3, [r7, #13]
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d11c      	bne.n	800c1d6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800c19c:	7b7a      	ldrb	r2, [r7, #13]
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800c1a4:	7b7a      	ldrb	r2, [r7, #13]
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	32ae      	adds	r2, #174	; 0xae
 800c1aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c1ae:	689b      	ldr	r3, [r3, #8]
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d010      	beq.n	800c1d6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c1b4:	7b7a      	ldrb	r2, [r7, #13]
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	32ae      	adds	r2, #174	; 0xae
 800c1ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c1be:	689b      	ldr	r3, [r3, #8]
 800c1c0:	6839      	ldr	r1, [r7, #0]
 800c1c2:	6878      	ldr	r0, [r7, #4]
 800c1c4:	4798      	blx	r3
 800c1c6:	4603      	mov	r3, r0
 800c1c8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800c1ca:	e004      	b.n	800c1d6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800c1cc:	6839      	ldr	r1, [r7, #0]
 800c1ce:	6878      	ldr	r0, [r7, #4]
 800c1d0:	f000 fc03 	bl	800c9da <USBD_CtlError>
              break;
 800c1d4:	e000      	b.n	800c1d8 <USBD_StdEPReq+0x1c8>
              break;
 800c1d6:	bf00      	nop
          }
          break;
 800c1d8:	e0ab      	b.n	800c332 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c1e0:	b2db      	uxtb	r3, r3
 800c1e2:	2b02      	cmp	r3, #2
 800c1e4:	d002      	beq.n	800c1ec <USBD_StdEPReq+0x1dc>
 800c1e6:	2b03      	cmp	r3, #3
 800c1e8:	d032      	beq.n	800c250 <USBD_StdEPReq+0x240>
 800c1ea:	e097      	b.n	800c31c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c1ec:	7bbb      	ldrb	r3, [r7, #14]
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d007      	beq.n	800c202 <USBD_StdEPReq+0x1f2>
 800c1f2:	7bbb      	ldrb	r3, [r7, #14]
 800c1f4:	2b80      	cmp	r3, #128	; 0x80
 800c1f6:	d004      	beq.n	800c202 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800c1f8:	6839      	ldr	r1, [r7, #0]
 800c1fa:	6878      	ldr	r0, [r7, #4]
 800c1fc:	f000 fbed 	bl	800c9da <USBD_CtlError>
                break;
 800c200:	e091      	b.n	800c326 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c202:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c206:	2b00      	cmp	r3, #0
 800c208:	da0b      	bge.n	800c222 <USBD_StdEPReq+0x212>
 800c20a:	7bbb      	ldrb	r3, [r7, #14]
 800c20c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c210:	4613      	mov	r3, r2
 800c212:	009b      	lsls	r3, r3, #2
 800c214:	4413      	add	r3, r2
 800c216:	009b      	lsls	r3, r3, #2
 800c218:	3310      	adds	r3, #16
 800c21a:	687a      	ldr	r2, [r7, #4]
 800c21c:	4413      	add	r3, r2
 800c21e:	3304      	adds	r3, #4
 800c220:	e00b      	b.n	800c23a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c222:	7bbb      	ldrb	r3, [r7, #14]
 800c224:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c228:	4613      	mov	r3, r2
 800c22a:	009b      	lsls	r3, r3, #2
 800c22c:	4413      	add	r3, r2
 800c22e:	009b      	lsls	r3, r3, #2
 800c230:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c234:	687a      	ldr	r2, [r7, #4]
 800c236:	4413      	add	r3, r2
 800c238:	3304      	adds	r3, #4
 800c23a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c23c:	68bb      	ldr	r3, [r7, #8]
 800c23e:	2200      	movs	r2, #0
 800c240:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c242:	68bb      	ldr	r3, [r7, #8]
 800c244:	2202      	movs	r2, #2
 800c246:	4619      	mov	r1, r3
 800c248:	6878      	ldr	r0, [r7, #4]
 800c24a:	f000 fc37 	bl	800cabc <USBD_CtlSendData>
              break;
 800c24e:	e06a      	b.n	800c326 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c250:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c254:	2b00      	cmp	r3, #0
 800c256:	da11      	bge.n	800c27c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c258:	7bbb      	ldrb	r3, [r7, #14]
 800c25a:	f003 020f 	and.w	r2, r3, #15
 800c25e:	6879      	ldr	r1, [r7, #4]
 800c260:	4613      	mov	r3, r2
 800c262:	009b      	lsls	r3, r3, #2
 800c264:	4413      	add	r3, r2
 800c266:	009b      	lsls	r3, r3, #2
 800c268:	440b      	add	r3, r1
 800c26a:	3324      	adds	r3, #36	; 0x24
 800c26c:	881b      	ldrh	r3, [r3, #0]
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d117      	bne.n	800c2a2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c272:	6839      	ldr	r1, [r7, #0]
 800c274:	6878      	ldr	r0, [r7, #4]
 800c276:	f000 fbb0 	bl	800c9da <USBD_CtlError>
                  break;
 800c27a:	e054      	b.n	800c326 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c27c:	7bbb      	ldrb	r3, [r7, #14]
 800c27e:	f003 020f 	and.w	r2, r3, #15
 800c282:	6879      	ldr	r1, [r7, #4]
 800c284:	4613      	mov	r3, r2
 800c286:	009b      	lsls	r3, r3, #2
 800c288:	4413      	add	r3, r2
 800c28a:	009b      	lsls	r3, r3, #2
 800c28c:	440b      	add	r3, r1
 800c28e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c292:	881b      	ldrh	r3, [r3, #0]
 800c294:	2b00      	cmp	r3, #0
 800c296:	d104      	bne.n	800c2a2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c298:	6839      	ldr	r1, [r7, #0]
 800c29a:	6878      	ldr	r0, [r7, #4]
 800c29c:	f000 fb9d 	bl	800c9da <USBD_CtlError>
                  break;
 800c2a0:	e041      	b.n	800c326 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c2a2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	da0b      	bge.n	800c2c2 <USBD_StdEPReq+0x2b2>
 800c2aa:	7bbb      	ldrb	r3, [r7, #14]
 800c2ac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c2b0:	4613      	mov	r3, r2
 800c2b2:	009b      	lsls	r3, r3, #2
 800c2b4:	4413      	add	r3, r2
 800c2b6:	009b      	lsls	r3, r3, #2
 800c2b8:	3310      	adds	r3, #16
 800c2ba:	687a      	ldr	r2, [r7, #4]
 800c2bc:	4413      	add	r3, r2
 800c2be:	3304      	adds	r3, #4
 800c2c0:	e00b      	b.n	800c2da <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c2c2:	7bbb      	ldrb	r3, [r7, #14]
 800c2c4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c2c8:	4613      	mov	r3, r2
 800c2ca:	009b      	lsls	r3, r3, #2
 800c2cc:	4413      	add	r3, r2
 800c2ce:	009b      	lsls	r3, r3, #2
 800c2d0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c2d4:	687a      	ldr	r2, [r7, #4]
 800c2d6:	4413      	add	r3, r2
 800c2d8:	3304      	adds	r3, #4
 800c2da:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c2dc:	7bbb      	ldrb	r3, [r7, #14]
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d002      	beq.n	800c2e8 <USBD_StdEPReq+0x2d8>
 800c2e2:	7bbb      	ldrb	r3, [r7, #14]
 800c2e4:	2b80      	cmp	r3, #128	; 0x80
 800c2e6:	d103      	bne.n	800c2f0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800c2e8:	68bb      	ldr	r3, [r7, #8]
 800c2ea:	2200      	movs	r2, #0
 800c2ec:	601a      	str	r2, [r3, #0]
 800c2ee:	e00e      	b.n	800c30e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c2f0:	7bbb      	ldrb	r3, [r7, #14]
 800c2f2:	4619      	mov	r1, r3
 800c2f4:	6878      	ldr	r0, [r7, #4]
 800c2f6:	f000 ffef 	bl	800d2d8 <USBD_LL_IsStallEP>
 800c2fa:	4603      	mov	r3, r0
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d003      	beq.n	800c308 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800c300:	68bb      	ldr	r3, [r7, #8]
 800c302:	2201      	movs	r2, #1
 800c304:	601a      	str	r2, [r3, #0]
 800c306:	e002      	b.n	800c30e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800c308:	68bb      	ldr	r3, [r7, #8]
 800c30a:	2200      	movs	r2, #0
 800c30c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c30e:	68bb      	ldr	r3, [r7, #8]
 800c310:	2202      	movs	r2, #2
 800c312:	4619      	mov	r1, r3
 800c314:	6878      	ldr	r0, [r7, #4]
 800c316:	f000 fbd1 	bl	800cabc <USBD_CtlSendData>
              break;
 800c31a:	e004      	b.n	800c326 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800c31c:	6839      	ldr	r1, [r7, #0]
 800c31e:	6878      	ldr	r0, [r7, #4]
 800c320:	f000 fb5b 	bl	800c9da <USBD_CtlError>
              break;
 800c324:	bf00      	nop
          }
          break;
 800c326:	e004      	b.n	800c332 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800c328:	6839      	ldr	r1, [r7, #0]
 800c32a:	6878      	ldr	r0, [r7, #4]
 800c32c:	f000 fb55 	bl	800c9da <USBD_CtlError>
          break;
 800c330:	bf00      	nop
      }
      break;
 800c332:	e005      	b.n	800c340 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800c334:	6839      	ldr	r1, [r7, #0]
 800c336:	6878      	ldr	r0, [r7, #4]
 800c338:	f000 fb4f 	bl	800c9da <USBD_CtlError>
      break;
 800c33c:	e000      	b.n	800c340 <USBD_StdEPReq+0x330>
      break;
 800c33e:	bf00      	nop
  }

  return ret;
 800c340:	7bfb      	ldrb	r3, [r7, #15]
}
 800c342:	4618      	mov	r0, r3
 800c344:	3710      	adds	r7, #16
 800c346:	46bd      	mov	sp, r7
 800c348:	bd80      	pop	{r7, pc}
	...

0800c34c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c34c:	b580      	push	{r7, lr}
 800c34e:	b084      	sub	sp, #16
 800c350:	af00      	add	r7, sp, #0
 800c352:	6078      	str	r0, [r7, #4]
 800c354:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c356:	2300      	movs	r3, #0
 800c358:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c35a:	2300      	movs	r3, #0
 800c35c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c35e:	2300      	movs	r3, #0
 800c360:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c362:	683b      	ldr	r3, [r7, #0]
 800c364:	885b      	ldrh	r3, [r3, #2]
 800c366:	0a1b      	lsrs	r3, r3, #8
 800c368:	b29b      	uxth	r3, r3
 800c36a:	3b01      	subs	r3, #1
 800c36c:	2b06      	cmp	r3, #6
 800c36e:	f200 8128 	bhi.w	800c5c2 <USBD_GetDescriptor+0x276>
 800c372:	a201      	add	r2, pc, #4	; (adr r2, 800c378 <USBD_GetDescriptor+0x2c>)
 800c374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c378:	0800c395 	.word	0x0800c395
 800c37c:	0800c3ad 	.word	0x0800c3ad
 800c380:	0800c3ed 	.word	0x0800c3ed
 800c384:	0800c5c3 	.word	0x0800c5c3
 800c388:	0800c5c3 	.word	0x0800c5c3
 800c38c:	0800c563 	.word	0x0800c563
 800c390:	0800c58f 	.word	0x0800c58f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	687a      	ldr	r2, [r7, #4]
 800c39e:	7c12      	ldrb	r2, [r2, #16]
 800c3a0:	f107 0108 	add.w	r1, r7, #8
 800c3a4:	4610      	mov	r0, r2
 800c3a6:	4798      	blx	r3
 800c3a8:	60f8      	str	r0, [r7, #12]
      break;
 800c3aa:	e112      	b.n	800c5d2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	7c1b      	ldrb	r3, [r3, #16]
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d10d      	bne.n	800c3d0 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c3ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3bc:	f107 0208 	add.w	r2, r7, #8
 800c3c0:	4610      	mov	r0, r2
 800c3c2:	4798      	blx	r3
 800c3c4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	3301      	adds	r3, #1
 800c3ca:	2202      	movs	r2, #2
 800c3cc:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c3ce:	e100      	b.n	800c5d2 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c3d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3d8:	f107 0208 	add.w	r2, r7, #8
 800c3dc:	4610      	mov	r0, r2
 800c3de:	4798      	blx	r3
 800c3e0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	3301      	adds	r3, #1
 800c3e6:	2202      	movs	r2, #2
 800c3e8:	701a      	strb	r2, [r3, #0]
      break;
 800c3ea:	e0f2      	b.n	800c5d2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c3ec:	683b      	ldr	r3, [r7, #0]
 800c3ee:	885b      	ldrh	r3, [r3, #2]
 800c3f0:	b2db      	uxtb	r3, r3
 800c3f2:	2b05      	cmp	r3, #5
 800c3f4:	f200 80ac 	bhi.w	800c550 <USBD_GetDescriptor+0x204>
 800c3f8:	a201      	add	r2, pc, #4	; (adr r2, 800c400 <USBD_GetDescriptor+0xb4>)
 800c3fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3fe:	bf00      	nop
 800c400:	0800c419 	.word	0x0800c419
 800c404:	0800c44d 	.word	0x0800c44d
 800c408:	0800c481 	.word	0x0800c481
 800c40c:	0800c4b5 	.word	0x0800c4b5
 800c410:	0800c4e9 	.word	0x0800c4e9
 800c414:	0800c51d 	.word	0x0800c51d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c41e:	685b      	ldr	r3, [r3, #4]
 800c420:	2b00      	cmp	r3, #0
 800c422:	d00b      	beq.n	800c43c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c42a:	685b      	ldr	r3, [r3, #4]
 800c42c:	687a      	ldr	r2, [r7, #4]
 800c42e:	7c12      	ldrb	r2, [r2, #16]
 800c430:	f107 0108 	add.w	r1, r7, #8
 800c434:	4610      	mov	r0, r2
 800c436:	4798      	blx	r3
 800c438:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c43a:	e091      	b.n	800c560 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c43c:	6839      	ldr	r1, [r7, #0]
 800c43e:	6878      	ldr	r0, [r7, #4]
 800c440:	f000 facb 	bl	800c9da <USBD_CtlError>
            err++;
 800c444:	7afb      	ldrb	r3, [r7, #11]
 800c446:	3301      	adds	r3, #1
 800c448:	72fb      	strb	r3, [r7, #11]
          break;
 800c44a:	e089      	b.n	800c560 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c452:	689b      	ldr	r3, [r3, #8]
 800c454:	2b00      	cmp	r3, #0
 800c456:	d00b      	beq.n	800c470 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c45e:	689b      	ldr	r3, [r3, #8]
 800c460:	687a      	ldr	r2, [r7, #4]
 800c462:	7c12      	ldrb	r2, [r2, #16]
 800c464:	f107 0108 	add.w	r1, r7, #8
 800c468:	4610      	mov	r0, r2
 800c46a:	4798      	blx	r3
 800c46c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c46e:	e077      	b.n	800c560 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c470:	6839      	ldr	r1, [r7, #0]
 800c472:	6878      	ldr	r0, [r7, #4]
 800c474:	f000 fab1 	bl	800c9da <USBD_CtlError>
            err++;
 800c478:	7afb      	ldrb	r3, [r7, #11]
 800c47a:	3301      	adds	r3, #1
 800c47c:	72fb      	strb	r3, [r7, #11]
          break;
 800c47e:	e06f      	b.n	800c560 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c486:	68db      	ldr	r3, [r3, #12]
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d00b      	beq.n	800c4a4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c492:	68db      	ldr	r3, [r3, #12]
 800c494:	687a      	ldr	r2, [r7, #4]
 800c496:	7c12      	ldrb	r2, [r2, #16]
 800c498:	f107 0108 	add.w	r1, r7, #8
 800c49c:	4610      	mov	r0, r2
 800c49e:	4798      	blx	r3
 800c4a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c4a2:	e05d      	b.n	800c560 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c4a4:	6839      	ldr	r1, [r7, #0]
 800c4a6:	6878      	ldr	r0, [r7, #4]
 800c4a8:	f000 fa97 	bl	800c9da <USBD_CtlError>
            err++;
 800c4ac:	7afb      	ldrb	r3, [r7, #11]
 800c4ae:	3301      	adds	r3, #1
 800c4b0:	72fb      	strb	r3, [r7, #11]
          break;
 800c4b2:	e055      	b.n	800c560 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c4ba:	691b      	ldr	r3, [r3, #16]
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d00b      	beq.n	800c4d8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c4c6:	691b      	ldr	r3, [r3, #16]
 800c4c8:	687a      	ldr	r2, [r7, #4]
 800c4ca:	7c12      	ldrb	r2, [r2, #16]
 800c4cc:	f107 0108 	add.w	r1, r7, #8
 800c4d0:	4610      	mov	r0, r2
 800c4d2:	4798      	blx	r3
 800c4d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c4d6:	e043      	b.n	800c560 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c4d8:	6839      	ldr	r1, [r7, #0]
 800c4da:	6878      	ldr	r0, [r7, #4]
 800c4dc:	f000 fa7d 	bl	800c9da <USBD_CtlError>
            err++;
 800c4e0:	7afb      	ldrb	r3, [r7, #11]
 800c4e2:	3301      	adds	r3, #1
 800c4e4:	72fb      	strb	r3, [r7, #11]
          break;
 800c4e6:	e03b      	b.n	800c560 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c4ee:	695b      	ldr	r3, [r3, #20]
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d00b      	beq.n	800c50c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c4fa:	695b      	ldr	r3, [r3, #20]
 800c4fc:	687a      	ldr	r2, [r7, #4]
 800c4fe:	7c12      	ldrb	r2, [r2, #16]
 800c500:	f107 0108 	add.w	r1, r7, #8
 800c504:	4610      	mov	r0, r2
 800c506:	4798      	blx	r3
 800c508:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c50a:	e029      	b.n	800c560 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c50c:	6839      	ldr	r1, [r7, #0]
 800c50e:	6878      	ldr	r0, [r7, #4]
 800c510:	f000 fa63 	bl	800c9da <USBD_CtlError>
            err++;
 800c514:	7afb      	ldrb	r3, [r7, #11]
 800c516:	3301      	adds	r3, #1
 800c518:	72fb      	strb	r3, [r7, #11]
          break;
 800c51a:	e021      	b.n	800c560 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c522:	699b      	ldr	r3, [r3, #24]
 800c524:	2b00      	cmp	r3, #0
 800c526:	d00b      	beq.n	800c540 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c52e:	699b      	ldr	r3, [r3, #24]
 800c530:	687a      	ldr	r2, [r7, #4]
 800c532:	7c12      	ldrb	r2, [r2, #16]
 800c534:	f107 0108 	add.w	r1, r7, #8
 800c538:	4610      	mov	r0, r2
 800c53a:	4798      	blx	r3
 800c53c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c53e:	e00f      	b.n	800c560 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c540:	6839      	ldr	r1, [r7, #0]
 800c542:	6878      	ldr	r0, [r7, #4]
 800c544:	f000 fa49 	bl	800c9da <USBD_CtlError>
            err++;
 800c548:	7afb      	ldrb	r3, [r7, #11]
 800c54a:	3301      	adds	r3, #1
 800c54c:	72fb      	strb	r3, [r7, #11]
          break;
 800c54e:	e007      	b.n	800c560 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c550:	6839      	ldr	r1, [r7, #0]
 800c552:	6878      	ldr	r0, [r7, #4]
 800c554:	f000 fa41 	bl	800c9da <USBD_CtlError>
          err++;
 800c558:	7afb      	ldrb	r3, [r7, #11]
 800c55a:	3301      	adds	r3, #1
 800c55c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800c55e:	bf00      	nop
      }
      break;
 800c560:	e037      	b.n	800c5d2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	7c1b      	ldrb	r3, [r3, #16]
 800c566:	2b00      	cmp	r3, #0
 800c568:	d109      	bne.n	800c57e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c570:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c572:	f107 0208 	add.w	r2, r7, #8
 800c576:	4610      	mov	r0, r2
 800c578:	4798      	blx	r3
 800c57a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c57c:	e029      	b.n	800c5d2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c57e:	6839      	ldr	r1, [r7, #0]
 800c580:	6878      	ldr	r0, [r7, #4]
 800c582:	f000 fa2a 	bl	800c9da <USBD_CtlError>
        err++;
 800c586:	7afb      	ldrb	r3, [r7, #11]
 800c588:	3301      	adds	r3, #1
 800c58a:	72fb      	strb	r3, [r7, #11]
      break;
 800c58c:	e021      	b.n	800c5d2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	7c1b      	ldrb	r3, [r3, #16]
 800c592:	2b00      	cmp	r3, #0
 800c594:	d10d      	bne.n	800c5b2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c59c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c59e:	f107 0208 	add.w	r2, r7, #8
 800c5a2:	4610      	mov	r0, r2
 800c5a4:	4798      	blx	r3
 800c5a6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	3301      	adds	r3, #1
 800c5ac:	2207      	movs	r2, #7
 800c5ae:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c5b0:	e00f      	b.n	800c5d2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c5b2:	6839      	ldr	r1, [r7, #0]
 800c5b4:	6878      	ldr	r0, [r7, #4]
 800c5b6:	f000 fa10 	bl	800c9da <USBD_CtlError>
        err++;
 800c5ba:	7afb      	ldrb	r3, [r7, #11]
 800c5bc:	3301      	adds	r3, #1
 800c5be:	72fb      	strb	r3, [r7, #11]
      break;
 800c5c0:	e007      	b.n	800c5d2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800c5c2:	6839      	ldr	r1, [r7, #0]
 800c5c4:	6878      	ldr	r0, [r7, #4]
 800c5c6:	f000 fa08 	bl	800c9da <USBD_CtlError>
      err++;
 800c5ca:	7afb      	ldrb	r3, [r7, #11]
 800c5cc:	3301      	adds	r3, #1
 800c5ce:	72fb      	strb	r3, [r7, #11]
      break;
 800c5d0:	bf00      	nop
  }

  if (err != 0U)
 800c5d2:	7afb      	ldrb	r3, [r7, #11]
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d11e      	bne.n	800c616 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800c5d8:	683b      	ldr	r3, [r7, #0]
 800c5da:	88db      	ldrh	r3, [r3, #6]
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d016      	beq.n	800c60e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800c5e0:	893b      	ldrh	r3, [r7, #8]
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d00e      	beq.n	800c604 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800c5e6:	683b      	ldr	r3, [r7, #0]
 800c5e8:	88da      	ldrh	r2, [r3, #6]
 800c5ea:	893b      	ldrh	r3, [r7, #8]
 800c5ec:	4293      	cmp	r3, r2
 800c5ee:	bf28      	it	cs
 800c5f0:	4613      	movcs	r3, r2
 800c5f2:	b29b      	uxth	r3, r3
 800c5f4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c5f6:	893b      	ldrh	r3, [r7, #8]
 800c5f8:	461a      	mov	r2, r3
 800c5fa:	68f9      	ldr	r1, [r7, #12]
 800c5fc:	6878      	ldr	r0, [r7, #4]
 800c5fe:	f000 fa5d 	bl	800cabc <USBD_CtlSendData>
 800c602:	e009      	b.n	800c618 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c604:	6839      	ldr	r1, [r7, #0]
 800c606:	6878      	ldr	r0, [r7, #4]
 800c608:	f000 f9e7 	bl	800c9da <USBD_CtlError>
 800c60c:	e004      	b.n	800c618 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c60e:	6878      	ldr	r0, [r7, #4]
 800c610:	f000 faae 	bl	800cb70 <USBD_CtlSendStatus>
 800c614:	e000      	b.n	800c618 <USBD_GetDescriptor+0x2cc>
    return;
 800c616:	bf00      	nop
  }
}
 800c618:	3710      	adds	r7, #16
 800c61a:	46bd      	mov	sp, r7
 800c61c:	bd80      	pop	{r7, pc}
 800c61e:	bf00      	nop

0800c620 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c620:	b580      	push	{r7, lr}
 800c622:	b084      	sub	sp, #16
 800c624:	af00      	add	r7, sp, #0
 800c626:	6078      	str	r0, [r7, #4]
 800c628:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c62a:	683b      	ldr	r3, [r7, #0]
 800c62c:	889b      	ldrh	r3, [r3, #4]
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d131      	bne.n	800c696 <USBD_SetAddress+0x76>
 800c632:	683b      	ldr	r3, [r7, #0]
 800c634:	88db      	ldrh	r3, [r3, #6]
 800c636:	2b00      	cmp	r3, #0
 800c638:	d12d      	bne.n	800c696 <USBD_SetAddress+0x76>
 800c63a:	683b      	ldr	r3, [r7, #0]
 800c63c:	885b      	ldrh	r3, [r3, #2]
 800c63e:	2b7f      	cmp	r3, #127	; 0x7f
 800c640:	d829      	bhi.n	800c696 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c642:	683b      	ldr	r3, [r7, #0]
 800c644:	885b      	ldrh	r3, [r3, #2]
 800c646:	b2db      	uxtb	r3, r3
 800c648:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c64c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c654:	b2db      	uxtb	r3, r3
 800c656:	2b03      	cmp	r3, #3
 800c658:	d104      	bne.n	800c664 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c65a:	6839      	ldr	r1, [r7, #0]
 800c65c:	6878      	ldr	r0, [r7, #4]
 800c65e:	f000 f9bc 	bl	800c9da <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c662:	e01d      	b.n	800c6a0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	7bfa      	ldrb	r2, [r7, #15]
 800c668:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c66c:	7bfb      	ldrb	r3, [r7, #15]
 800c66e:	4619      	mov	r1, r3
 800c670:	6878      	ldr	r0, [r7, #4]
 800c672:	f000 fe5d 	bl	800d330 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c676:	6878      	ldr	r0, [r7, #4]
 800c678:	f000 fa7a 	bl	800cb70 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c67c:	7bfb      	ldrb	r3, [r7, #15]
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d004      	beq.n	800c68c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	2202      	movs	r2, #2
 800c686:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c68a:	e009      	b.n	800c6a0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	2201      	movs	r2, #1
 800c690:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c694:	e004      	b.n	800c6a0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c696:	6839      	ldr	r1, [r7, #0]
 800c698:	6878      	ldr	r0, [r7, #4]
 800c69a:	f000 f99e 	bl	800c9da <USBD_CtlError>
  }
}
 800c69e:	bf00      	nop
 800c6a0:	bf00      	nop
 800c6a2:	3710      	adds	r7, #16
 800c6a4:	46bd      	mov	sp, r7
 800c6a6:	bd80      	pop	{r7, pc}

0800c6a8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c6a8:	b580      	push	{r7, lr}
 800c6aa:	b084      	sub	sp, #16
 800c6ac:	af00      	add	r7, sp, #0
 800c6ae:	6078      	str	r0, [r7, #4]
 800c6b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c6b2:	2300      	movs	r3, #0
 800c6b4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c6b6:	683b      	ldr	r3, [r7, #0]
 800c6b8:	885b      	ldrh	r3, [r3, #2]
 800c6ba:	b2da      	uxtb	r2, r3
 800c6bc:	4b4e      	ldr	r3, [pc, #312]	; (800c7f8 <USBD_SetConfig+0x150>)
 800c6be:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c6c0:	4b4d      	ldr	r3, [pc, #308]	; (800c7f8 <USBD_SetConfig+0x150>)
 800c6c2:	781b      	ldrb	r3, [r3, #0]
 800c6c4:	2b01      	cmp	r3, #1
 800c6c6:	d905      	bls.n	800c6d4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c6c8:	6839      	ldr	r1, [r7, #0]
 800c6ca:	6878      	ldr	r0, [r7, #4]
 800c6cc:	f000 f985 	bl	800c9da <USBD_CtlError>
    return USBD_FAIL;
 800c6d0:	2303      	movs	r3, #3
 800c6d2:	e08c      	b.n	800c7ee <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c6da:	b2db      	uxtb	r3, r3
 800c6dc:	2b02      	cmp	r3, #2
 800c6de:	d002      	beq.n	800c6e6 <USBD_SetConfig+0x3e>
 800c6e0:	2b03      	cmp	r3, #3
 800c6e2:	d029      	beq.n	800c738 <USBD_SetConfig+0x90>
 800c6e4:	e075      	b.n	800c7d2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c6e6:	4b44      	ldr	r3, [pc, #272]	; (800c7f8 <USBD_SetConfig+0x150>)
 800c6e8:	781b      	ldrb	r3, [r3, #0]
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d020      	beq.n	800c730 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800c6ee:	4b42      	ldr	r3, [pc, #264]	; (800c7f8 <USBD_SetConfig+0x150>)
 800c6f0:	781b      	ldrb	r3, [r3, #0]
 800c6f2:	461a      	mov	r2, r3
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c6f8:	4b3f      	ldr	r3, [pc, #252]	; (800c7f8 <USBD_SetConfig+0x150>)
 800c6fa:	781b      	ldrb	r3, [r3, #0]
 800c6fc:	4619      	mov	r1, r3
 800c6fe:	6878      	ldr	r0, [r7, #4]
 800c700:	f7fe ffe7 	bl	800b6d2 <USBD_SetClassConfig>
 800c704:	4603      	mov	r3, r0
 800c706:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c708:	7bfb      	ldrb	r3, [r7, #15]
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d008      	beq.n	800c720 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800c70e:	6839      	ldr	r1, [r7, #0]
 800c710:	6878      	ldr	r0, [r7, #4]
 800c712:	f000 f962 	bl	800c9da <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	2202      	movs	r2, #2
 800c71a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c71e:	e065      	b.n	800c7ec <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c720:	6878      	ldr	r0, [r7, #4]
 800c722:	f000 fa25 	bl	800cb70 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	2203      	movs	r2, #3
 800c72a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c72e:	e05d      	b.n	800c7ec <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c730:	6878      	ldr	r0, [r7, #4]
 800c732:	f000 fa1d 	bl	800cb70 <USBD_CtlSendStatus>
      break;
 800c736:	e059      	b.n	800c7ec <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c738:	4b2f      	ldr	r3, [pc, #188]	; (800c7f8 <USBD_SetConfig+0x150>)
 800c73a:	781b      	ldrb	r3, [r3, #0]
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d112      	bne.n	800c766 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	2202      	movs	r2, #2
 800c744:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800c748:	4b2b      	ldr	r3, [pc, #172]	; (800c7f8 <USBD_SetConfig+0x150>)
 800c74a:	781b      	ldrb	r3, [r3, #0]
 800c74c:	461a      	mov	r2, r3
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c752:	4b29      	ldr	r3, [pc, #164]	; (800c7f8 <USBD_SetConfig+0x150>)
 800c754:	781b      	ldrb	r3, [r3, #0]
 800c756:	4619      	mov	r1, r3
 800c758:	6878      	ldr	r0, [r7, #4]
 800c75a:	f7fe ffd6 	bl	800b70a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c75e:	6878      	ldr	r0, [r7, #4]
 800c760:	f000 fa06 	bl	800cb70 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c764:	e042      	b.n	800c7ec <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800c766:	4b24      	ldr	r3, [pc, #144]	; (800c7f8 <USBD_SetConfig+0x150>)
 800c768:	781b      	ldrb	r3, [r3, #0]
 800c76a:	461a      	mov	r2, r3
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	685b      	ldr	r3, [r3, #4]
 800c770:	429a      	cmp	r2, r3
 800c772:	d02a      	beq.n	800c7ca <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	685b      	ldr	r3, [r3, #4]
 800c778:	b2db      	uxtb	r3, r3
 800c77a:	4619      	mov	r1, r3
 800c77c:	6878      	ldr	r0, [r7, #4]
 800c77e:	f7fe ffc4 	bl	800b70a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c782:	4b1d      	ldr	r3, [pc, #116]	; (800c7f8 <USBD_SetConfig+0x150>)
 800c784:	781b      	ldrb	r3, [r3, #0]
 800c786:	461a      	mov	r2, r3
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c78c:	4b1a      	ldr	r3, [pc, #104]	; (800c7f8 <USBD_SetConfig+0x150>)
 800c78e:	781b      	ldrb	r3, [r3, #0]
 800c790:	4619      	mov	r1, r3
 800c792:	6878      	ldr	r0, [r7, #4]
 800c794:	f7fe ff9d 	bl	800b6d2 <USBD_SetClassConfig>
 800c798:	4603      	mov	r3, r0
 800c79a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c79c:	7bfb      	ldrb	r3, [r7, #15]
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d00f      	beq.n	800c7c2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800c7a2:	6839      	ldr	r1, [r7, #0]
 800c7a4:	6878      	ldr	r0, [r7, #4]
 800c7a6:	f000 f918 	bl	800c9da <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	685b      	ldr	r3, [r3, #4]
 800c7ae:	b2db      	uxtb	r3, r3
 800c7b0:	4619      	mov	r1, r3
 800c7b2:	6878      	ldr	r0, [r7, #4]
 800c7b4:	f7fe ffa9 	bl	800b70a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	2202      	movs	r2, #2
 800c7bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c7c0:	e014      	b.n	800c7ec <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c7c2:	6878      	ldr	r0, [r7, #4]
 800c7c4:	f000 f9d4 	bl	800cb70 <USBD_CtlSendStatus>
      break;
 800c7c8:	e010      	b.n	800c7ec <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c7ca:	6878      	ldr	r0, [r7, #4]
 800c7cc:	f000 f9d0 	bl	800cb70 <USBD_CtlSendStatus>
      break;
 800c7d0:	e00c      	b.n	800c7ec <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800c7d2:	6839      	ldr	r1, [r7, #0]
 800c7d4:	6878      	ldr	r0, [r7, #4]
 800c7d6:	f000 f900 	bl	800c9da <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c7da:	4b07      	ldr	r3, [pc, #28]	; (800c7f8 <USBD_SetConfig+0x150>)
 800c7dc:	781b      	ldrb	r3, [r3, #0]
 800c7de:	4619      	mov	r1, r3
 800c7e0:	6878      	ldr	r0, [r7, #4]
 800c7e2:	f7fe ff92 	bl	800b70a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c7e6:	2303      	movs	r3, #3
 800c7e8:	73fb      	strb	r3, [r7, #15]
      break;
 800c7ea:	bf00      	nop
  }

  return ret;
 800c7ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7ee:	4618      	mov	r0, r3
 800c7f0:	3710      	adds	r7, #16
 800c7f2:	46bd      	mov	sp, r7
 800c7f4:	bd80      	pop	{r7, pc}
 800c7f6:	bf00      	nop
 800c7f8:	20001058 	.word	0x20001058

0800c7fc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c7fc:	b580      	push	{r7, lr}
 800c7fe:	b082      	sub	sp, #8
 800c800:	af00      	add	r7, sp, #0
 800c802:	6078      	str	r0, [r7, #4]
 800c804:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c806:	683b      	ldr	r3, [r7, #0]
 800c808:	88db      	ldrh	r3, [r3, #6]
 800c80a:	2b01      	cmp	r3, #1
 800c80c:	d004      	beq.n	800c818 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c80e:	6839      	ldr	r1, [r7, #0]
 800c810:	6878      	ldr	r0, [r7, #4]
 800c812:	f000 f8e2 	bl	800c9da <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c816:	e023      	b.n	800c860 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c81e:	b2db      	uxtb	r3, r3
 800c820:	2b02      	cmp	r3, #2
 800c822:	dc02      	bgt.n	800c82a <USBD_GetConfig+0x2e>
 800c824:	2b00      	cmp	r3, #0
 800c826:	dc03      	bgt.n	800c830 <USBD_GetConfig+0x34>
 800c828:	e015      	b.n	800c856 <USBD_GetConfig+0x5a>
 800c82a:	2b03      	cmp	r3, #3
 800c82c:	d00b      	beq.n	800c846 <USBD_GetConfig+0x4a>
 800c82e:	e012      	b.n	800c856 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	2200      	movs	r2, #0
 800c834:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	3308      	adds	r3, #8
 800c83a:	2201      	movs	r2, #1
 800c83c:	4619      	mov	r1, r3
 800c83e:	6878      	ldr	r0, [r7, #4]
 800c840:	f000 f93c 	bl	800cabc <USBD_CtlSendData>
        break;
 800c844:	e00c      	b.n	800c860 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	3304      	adds	r3, #4
 800c84a:	2201      	movs	r2, #1
 800c84c:	4619      	mov	r1, r3
 800c84e:	6878      	ldr	r0, [r7, #4]
 800c850:	f000 f934 	bl	800cabc <USBD_CtlSendData>
        break;
 800c854:	e004      	b.n	800c860 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c856:	6839      	ldr	r1, [r7, #0]
 800c858:	6878      	ldr	r0, [r7, #4]
 800c85a:	f000 f8be 	bl	800c9da <USBD_CtlError>
        break;
 800c85e:	bf00      	nop
}
 800c860:	bf00      	nop
 800c862:	3708      	adds	r7, #8
 800c864:	46bd      	mov	sp, r7
 800c866:	bd80      	pop	{r7, pc}

0800c868 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c868:	b580      	push	{r7, lr}
 800c86a:	b082      	sub	sp, #8
 800c86c:	af00      	add	r7, sp, #0
 800c86e:	6078      	str	r0, [r7, #4]
 800c870:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c878:	b2db      	uxtb	r3, r3
 800c87a:	3b01      	subs	r3, #1
 800c87c:	2b02      	cmp	r3, #2
 800c87e:	d81e      	bhi.n	800c8be <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c880:	683b      	ldr	r3, [r7, #0]
 800c882:	88db      	ldrh	r3, [r3, #6]
 800c884:	2b02      	cmp	r3, #2
 800c886:	d004      	beq.n	800c892 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c888:	6839      	ldr	r1, [r7, #0]
 800c88a:	6878      	ldr	r0, [r7, #4]
 800c88c:	f000 f8a5 	bl	800c9da <USBD_CtlError>
        break;
 800c890:	e01a      	b.n	800c8c8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	2201      	movs	r2, #1
 800c896:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d005      	beq.n	800c8ae <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	68db      	ldr	r3, [r3, #12]
 800c8a6:	f043 0202 	orr.w	r2, r3, #2
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	330c      	adds	r3, #12
 800c8b2:	2202      	movs	r2, #2
 800c8b4:	4619      	mov	r1, r3
 800c8b6:	6878      	ldr	r0, [r7, #4]
 800c8b8:	f000 f900 	bl	800cabc <USBD_CtlSendData>
      break;
 800c8bc:	e004      	b.n	800c8c8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c8be:	6839      	ldr	r1, [r7, #0]
 800c8c0:	6878      	ldr	r0, [r7, #4]
 800c8c2:	f000 f88a 	bl	800c9da <USBD_CtlError>
      break;
 800c8c6:	bf00      	nop
  }
}
 800c8c8:	bf00      	nop
 800c8ca:	3708      	adds	r7, #8
 800c8cc:	46bd      	mov	sp, r7
 800c8ce:	bd80      	pop	{r7, pc}

0800c8d0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c8d0:	b580      	push	{r7, lr}
 800c8d2:	b082      	sub	sp, #8
 800c8d4:	af00      	add	r7, sp, #0
 800c8d6:	6078      	str	r0, [r7, #4]
 800c8d8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c8da:	683b      	ldr	r3, [r7, #0]
 800c8dc:	885b      	ldrh	r3, [r3, #2]
 800c8de:	2b01      	cmp	r3, #1
 800c8e0:	d107      	bne.n	800c8f2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	2201      	movs	r2, #1
 800c8e6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c8ea:	6878      	ldr	r0, [r7, #4]
 800c8ec:	f000 f940 	bl	800cb70 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800c8f0:	e013      	b.n	800c91a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800c8f2:	683b      	ldr	r3, [r7, #0]
 800c8f4:	885b      	ldrh	r3, [r3, #2]
 800c8f6:	2b02      	cmp	r3, #2
 800c8f8:	d10b      	bne.n	800c912 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800c8fa:	683b      	ldr	r3, [r7, #0]
 800c8fc:	889b      	ldrh	r3, [r3, #4]
 800c8fe:	0a1b      	lsrs	r3, r3, #8
 800c900:	b29b      	uxth	r3, r3
 800c902:	b2da      	uxtb	r2, r3
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800c90a:	6878      	ldr	r0, [r7, #4]
 800c90c:	f000 f930 	bl	800cb70 <USBD_CtlSendStatus>
}
 800c910:	e003      	b.n	800c91a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800c912:	6839      	ldr	r1, [r7, #0]
 800c914:	6878      	ldr	r0, [r7, #4]
 800c916:	f000 f860 	bl	800c9da <USBD_CtlError>
}
 800c91a:	bf00      	nop
 800c91c:	3708      	adds	r7, #8
 800c91e:	46bd      	mov	sp, r7
 800c920:	bd80      	pop	{r7, pc}

0800c922 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c922:	b580      	push	{r7, lr}
 800c924:	b082      	sub	sp, #8
 800c926:	af00      	add	r7, sp, #0
 800c928:	6078      	str	r0, [r7, #4]
 800c92a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c932:	b2db      	uxtb	r3, r3
 800c934:	3b01      	subs	r3, #1
 800c936:	2b02      	cmp	r3, #2
 800c938:	d80b      	bhi.n	800c952 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c93a:	683b      	ldr	r3, [r7, #0]
 800c93c:	885b      	ldrh	r3, [r3, #2]
 800c93e:	2b01      	cmp	r3, #1
 800c940:	d10c      	bne.n	800c95c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	2200      	movs	r2, #0
 800c946:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c94a:	6878      	ldr	r0, [r7, #4]
 800c94c:	f000 f910 	bl	800cb70 <USBD_CtlSendStatus>
      }
      break;
 800c950:	e004      	b.n	800c95c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c952:	6839      	ldr	r1, [r7, #0]
 800c954:	6878      	ldr	r0, [r7, #4]
 800c956:	f000 f840 	bl	800c9da <USBD_CtlError>
      break;
 800c95a:	e000      	b.n	800c95e <USBD_ClrFeature+0x3c>
      break;
 800c95c:	bf00      	nop
  }
}
 800c95e:	bf00      	nop
 800c960:	3708      	adds	r7, #8
 800c962:	46bd      	mov	sp, r7
 800c964:	bd80      	pop	{r7, pc}

0800c966 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c966:	b580      	push	{r7, lr}
 800c968:	b084      	sub	sp, #16
 800c96a:	af00      	add	r7, sp, #0
 800c96c:	6078      	str	r0, [r7, #4]
 800c96e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c970:	683b      	ldr	r3, [r7, #0]
 800c972:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	781a      	ldrb	r2, [r3, #0]
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	3301      	adds	r3, #1
 800c980:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	781a      	ldrb	r2, [r3, #0]
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	3301      	adds	r3, #1
 800c98e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c990:	68f8      	ldr	r0, [r7, #12]
 800c992:	f7ff fa41 	bl	800be18 <SWAPBYTE>
 800c996:	4603      	mov	r3, r0
 800c998:	461a      	mov	r2, r3
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	3301      	adds	r3, #1
 800c9a2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	3301      	adds	r3, #1
 800c9a8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c9aa:	68f8      	ldr	r0, [r7, #12]
 800c9ac:	f7ff fa34 	bl	800be18 <SWAPBYTE>
 800c9b0:	4603      	mov	r3, r0
 800c9b2:	461a      	mov	r2, r3
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	3301      	adds	r3, #1
 800c9bc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	3301      	adds	r3, #1
 800c9c2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c9c4:	68f8      	ldr	r0, [r7, #12]
 800c9c6:	f7ff fa27 	bl	800be18 <SWAPBYTE>
 800c9ca:	4603      	mov	r3, r0
 800c9cc:	461a      	mov	r2, r3
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	80da      	strh	r2, [r3, #6]
}
 800c9d2:	bf00      	nop
 800c9d4:	3710      	adds	r7, #16
 800c9d6:	46bd      	mov	sp, r7
 800c9d8:	bd80      	pop	{r7, pc}

0800c9da <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c9da:	b580      	push	{r7, lr}
 800c9dc:	b082      	sub	sp, #8
 800c9de:	af00      	add	r7, sp, #0
 800c9e0:	6078      	str	r0, [r7, #4]
 800c9e2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c9e4:	2180      	movs	r1, #128	; 0x80
 800c9e6:	6878      	ldr	r0, [r7, #4]
 800c9e8:	f000 fc38 	bl	800d25c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c9ec:	2100      	movs	r1, #0
 800c9ee:	6878      	ldr	r0, [r7, #4]
 800c9f0:	f000 fc34 	bl	800d25c <USBD_LL_StallEP>
}
 800c9f4:	bf00      	nop
 800c9f6:	3708      	adds	r7, #8
 800c9f8:	46bd      	mov	sp, r7
 800c9fa:	bd80      	pop	{r7, pc}

0800c9fc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c9fc:	b580      	push	{r7, lr}
 800c9fe:	b086      	sub	sp, #24
 800ca00:	af00      	add	r7, sp, #0
 800ca02:	60f8      	str	r0, [r7, #12]
 800ca04:	60b9      	str	r1, [r7, #8]
 800ca06:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ca08:	2300      	movs	r3, #0
 800ca0a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d036      	beq.n	800ca80 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800ca16:	6938      	ldr	r0, [r7, #16]
 800ca18:	f000 f836 	bl	800ca88 <USBD_GetLen>
 800ca1c:	4603      	mov	r3, r0
 800ca1e:	3301      	adds	r3, #1
 800ca20:	b29b      	uxth	r3, r3
 800ca22:	005b      	lsls	r3, r3, #1
 800ca24:	b29a      	uxth	r2, r3
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800ca2a:	7dfb      	ldrb	r3, [r7, #23]
 800ca2c:	68ba      	ldr	r2, [r7, #8]
 800ca2e:	4413      	add	r3, r2
 800ca30:	687a      	ldr	r2, [r7, #4]
 800ca32:	7812      	ldrb	r2, [r2, #0]
 800ca34:	701a      	strb	r2, [r3, #0]
  idx++;
 800ca36:	7dfb      	ldrb	r3, [r7, #23]
 800ca38:	3301      	adds	r3, #1
 800ca3a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ca3c:	7dfb      	ldrb	r3, [r7, #23]
 800ca3e:	68ba      	ldr	r2, [r7, #8]
 800ca40:	4413      	add	r3, r2
 800ca42:	2203      	movs	r2, #3
 800ca44:	701a      	strb	r2, [r3, #0]
  idx++;
 800ca46:	7dfb      	ldrb	r3, [r7, #23]
 800ca48:	3301      	adds	r3, #1
 800ca4a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ca4c:	e013      	b.n	800ca76 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800ca4e:	7dfb      	ldrb	r3, [r7, #23]
 800ca50:	68ba      	ldr	r2, [r7, #8]
 800ca52:	4413      	add	r3, r2
 800ca54:	693a      	ldr	r2, [r7, #16]
 800ca56:	7812      	ldrb	r2, [r2, #0]
 800ca58:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ca5a:	693b      	ldr	r3, [r7, #16]
 800ca5c:	3301      	adds	r3, #1
 800ca5e:	613b      	str	r3, [r7, #16]
    idx++;
 800ca60:	7dfb      	ldrb	r3, [r7, #23]
 800ca62:	3301      	adds	r3, #1
 800ca64:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ca66:	7dfb      	ldrb	r3, [r7, #23]
 800ca68:	68ba      	ldr	r2, [r7, #8]
 800ca6a:	4413      	add	r3, r2
 800ca6c:	2200      	movs	r2, #0
 800ca6e:	701a      	strb	r2, [r3, #0]
    idx++;
 800ca70:	7dfb      	ldrb	r3, [r7, #23]
 800ca72:	3301      	adds	r3, #1
 800ca74:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ca76:	693b      	ldr	r3, [r7, #16]
 800ca78:	781b      	ldrb	r3, [r3, #0]
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d1e7      	bne.n	800ca4e <USBD_GetString+0x52>
 800ca7e:	e000      	b.n	800ca82 <USBD_GetString+0x86>
    return;
 800ca80:	bf00      	nop
  }
}
 800ca82:	3718      	adds	r7, #24
 800ca84:	46bd      	mov	sp, r7
 800ca86:	bd80      	pop	{r7, pc}

0800ca88 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ca88:	b480      	push	{r7}
 800ca8a:	b085      	sub	sp, #20
 800ca8c:	af00      	add	r7, sp, #0
 800ca8e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ca90:	2300      	movs	r3, #0
 800ca92:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ca98:	e005      	b.n	800caa6 <USBD_GetLen+0x1e>
  {
    len++;
 800ca9a:	7bfb      	ldrb	r3, [r7, #15]
 800ca9c:	3301      	adds	r3, #1
 800ca9e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800caa0:	68bb      	ldr	r3, [r7, #8]
 800caa2:	3301      	adds	r3, #1
 800caa4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800caa6:	68bb      	ldr	r3, [r7, #8]
 800caa8:	781b      	ldrb	r3, [r3, #0]
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d1f5      	bne.n	800ca9a <USBD_GetLen+0x12>
  }

  return len;
 800caae:	7bfb      	ldrb	r3, [r7, #15]
}
 800cab0:	4618      	mov	r0, r3
 800cab2:	3714      	adds	r7, #20
 800cab4:	46bd      	mov	sp, r7
 800cab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caba:	4770      	bx	lr

0800cabc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800cabc:	b580      	push	{r7, lr}
 800cabe:	b084      	sub	sp, #16
 800cac0:	af00      	add	r7, sp, #0
 800cac2:	60f8      	str	r0, [r7, #12]
 800cac4:	60b9      	str	r1, [r7, #8]
 800cac6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	2202      	movs	r2, #2
 800cacc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	687a      	ldr	r2, [r7, #4]
 800cad4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	687a      	ldr	r2, [r7, #4]
 800cada:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	68ba      	ldr	r2, [r7, #8]
 800cae0:	2100      	movs	r1, #0
 800cae2:	68f8      	ldr	r0, [r7, #12]
 800cae4:	f000 fc43 	bl	800d36e <USBD_LL_Transmit>

  return USBD_OK;
 800cae8:	2300      	movs	r3, #0
}
 800caea:	4618      	mov	r0, r3
 800caec:	3710      	adds	r7, #16
 800caee:	46bd      	mov	sp, r7
 800caf0:	bd80      	pop	{r7, pc}

0800caf2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800caf2:	b580      	push	{r7, lr}
 800caf4:	b084      	sub	sp, #16
 800caf6:	af00      	add	r7, sp, #0
 800caf8:	60f8      	str	r0, [r7, #12]
 800cafa:	60b9      	str	r1, [r7, #8]
 800cafc:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	68ba      	ldr	r2, [r7, #8]
 800cb02:	2100      	movs	r1, #0
 800cb04:	68f8      	ldr	r0, [r7, #12]
 800cb06:	f000 fc32 	bl	800d36e <USBD_LL_Transmit>

  return USBD_OK;
 800cb0a:	2300      	movs	r3, #0
}
 800cb0c:	4618      	mov	r0, r3
 800cb0e:	3710      	adds	r7, #16
 800cb10:	46bd      	mov	sp, r7
 800cb12:	bd80      	pop	{r7, pc}

0800cb14 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800cb14:	b580      	push	{r7, lr}
 800cb16:	b084      	sub	sp, #16
 800cb18:	af00      	add	r7, sp, #0
 800cb1a:	60f8      	str	r0, [r7, #12]
 800cb1c:	60b9      	str	r1, [r7, #8]
 800cb1e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	2203      	movs	r2, #3
 800cb24:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	687a      	ldr	r2, [r7, #4]
 800cb2c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	687a      	ldr	r2, [r7, #4]
 800cb34:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	68ba      	ldr	r2, [r7, #8]
 800cb3c:	2100      	movs	r1, #0
 800cb3e:	68f8      	ldr	r0, [r7, #12]
 800cb40:	f000 fc36 	bl	800d3b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cb44:	2300      	movs	r3, #0
}
 800cb46:	4618      	mov	r0, r3
 800cb48:	3710      	adds	r7, #16
 800cb4a:	46bd      	mov	sp, r7
 800cb4c:	bd80      	pop	{r7, pc}

0800cb4e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800cb4e:	b580      	push	{r7, lr}
 800cb50:	b084      	sub	sp, #16
 800cb52:	af00      	add	r7, sp, #0
 800cb54:	60f8      	str	r0, [r7, #12]
 800cb56:	60b9      	str	r1, [r7, #8]
 800cb58:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	68ba      	ldr	r2, [r7, #8]
 800cb5e:	2100      	movs	r1, #0
 800cb60:	68f8      	ldr	r0, [r7, #12]
 800cb62:	f000 fc25 	bl	800d3b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cb66:	2300      	movs	r3, #0
}
 800cb68:	4618      	mov	r0, r3
 800cb6a:	3710      	adds	r7, #16
 800cb6c:	46bd      	mov	sp, r7
 800cb6e:	bd80      	pop	{r7, pc}

0800cb70 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800cb70:	b580      	push	{r7, lr}
 800cb72:	b082      	sub	sp, #8
 800cb74:	af00      	add	r7, sp, #0
 800cb76:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	2204      	movs	r2, #4
 800cb7c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800cb80:	2300      	movs	r3, #0
 800cb82:	2200      	movs	r2, #0
 800cb84:	2100      	movs	r1, #0
 800cb86:	6878      	ldr	r0, [r7, #4]
 800cb88:	f000 fbf1 	bl	800d36e <USBD_LL_Transmit>

  return USBD_OK;
 800cb8c:	2300      	movs	r3, #0
}
 800cb8e:	4618      	mov	r0, r3
 800cb90:	3708      	adds	r7, #8
 800cb92:	46bd      	mov	sp, r7
 800cb94:	bd80      	pop	{r7, pc}

0800cb96 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800cb96:	b580      	push	{r7, lr}
 800cb98:	b082      	sub	sp, #8
 800cb9a:	af00      	add	r7, sp, #0
 800cb9c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	2205      	movs	r2, #5
 800cba2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cba6:	2300      	movs	r3, #0
 800cba8:	2200      	movs	r2, #0
 800cbaa:	2100      	movs	r1, #0
 800cbac:	6878      	ldr	r0, [r7, #4]
 800cbae:	f000 fbff 	bl	800d3b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cbb2:	2300      	movs	r3, #0
}
 800cbb4:	4618      	mov	r0, r3
 800cbb6:	3708      	adds	r7, #8
 800cbb8:	46bd      	mov	sp, r7
 800cbba:	bd80      	pop	{r7, pc}

0800cbbc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800cbbc:	b580      	push	{r7, lr}
 800cbbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800cbc0:	2200      	movs	r2, #0
 800cbc2:	4912      	ldr	r1, [pc, #72]	; (800cc0c <MX_USB_DEVICE_Init+0x50>)
 800cbc4:	4812      	ldr	r0, [pc, #72]	; (800cc10 <MX_USB_DEVICE_Init+0x54>)
 800cbc6:	f7fe fd07 	bl	800b5d8 <USBD_Init>
 800cbca:	4603      	mov	r3, r0
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d001      	beq.n	800cbd4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800cbd0:	f7f5 fef0 	bl	80029b4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 800cbd4:	490f      	ldr	r1, [pc, #60]	; (800cc14 <MX_USB_DEVICE_Init+0x58>)
 800cbd6:	480e      	ldr	r0, [pc, #56]	; (800cc10 <MX_USB_DEVICE_Init+0x54>)
 800cbd8:	f7fe fd2e 	bl	800b638 <USBD_RegisterClass>
 800cbdc:	4603      	mov	r3, r0
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d001      	beq.n	800cbe6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800cbe2:	f7f5 fee7 	bl	80029b4 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 800cbe6:	490c      	ldr	r1, [pc, #48]	; (800cc18 <MX_USB_DEVICE_Init+0x5c>)
 800cbe8:	4809      	ldr	r0, [pc, #36]	; (800cc10 <MX_USB_DEVICE_Init+0x54>)
 800cbea:	f7fe fcdb 	bl	800b5a4 <USBD_CUSTOM_HID_RegisterInterface>
 800cbee:	4603      	mov	r3, r0
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d001      	beq.n	800cbf8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800cbf4:	f7f5 fede 	bl	80029b4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800cbf8:	4805      	ldr	r0, [pc, #20]	; (800cc10 <MX_USB_DEVICE_Init+0x54>)
 800cbfa:	f7fe fd53 	bl	800b6a4 <USBD_Start>
 800cbfe:	4603      	mov	r3, r0
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d001      	beq.n	800cc08 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800cc04:	f7f5 fed6 	bl	80029b4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800cc08:	bf00      	nop
 800cc0a:	bd80      	pop	{r7, pc}
 800cc0c:	200000e0 	.word	0x200000e0
 800cc10:	2000105c 	.word	0x2000105c
 800cc14:	20000050 	.word	0x20000050
 800cc18:	200000d0 	.word	0x200000d0

0800cc1c <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 800cc1c:	b480      	push	{r7}
 800cc1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800cc20:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800cc22:	4618      	mov	r0, r3
 800cc24:	46bd      	mov	sp, r7
 800cc26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc2a:	4770      	bx	lr

0800cc2c <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 800cc2c:	b480      	push	{r7}
 800cc2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 800cc30:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800cc32:	4618      	mov	r0, r3
 800cc34:	46bd      	mov	sp, r7
 800cc36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc3a:	4770      	bx	lr

0800cc3c <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 800cc3c:	b580      	push	{r7, lr}
 800cc3e:	b082      	sub	sp, #8
 800cc40:	af00      	add	r7, sp, #0
 800cc42:	4603      	mov	r3, r0
 800cc44:	460a      	mov	r2, r1
 800cc46:	71fb      	strb	r3, [r7, #7]
 800cc48:	4613      	mov	r3, r2
 800cc4a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  UNUSED(event_idx);
  UNUSED(state);

  /* Start next USB packet transfer once data processing is completed */
  if (USBD_CUSTOM_HID_ReceivePacket(&hUsbDeviceFS) != (uint8_t)USBD_OK)
 800cc4c:	4806      	ldr	r0, [pc, #24]	; (800cc68 <CUSTOM_HID_OutEvent_FS+0x2c>)
 800cc4e:	f7fe fc47 	bl	800b4e0 <USBD_CUSTOM_HID_ReceivePacket>
 800cc52:	4603      	mov	r3, r0
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d002      	beq.n	800cc5e <CUSTOM_HID_OutEvent_FS+0x22>
  {
    return -1;
 800cc58:	f04f 33ff 	mov.w	r3, #4294967295
 800cc5c:	e000      	b.n	800cc60 <CUSTOM_HID_OutEvent_FS+0x24>
  }

  return (USBD_OK);
 800cc5e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800cc60:	4618      	mov	r0, r3
 800cc62:	3708      	adds	r7, #8
 800cc64:	46bd      	mov	sp, r7
 800cc66:	bd80      	pop	{r7, pc}
 800cc68:	2000105c 	.word	0x2000105c

0800cc6c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cc6c:	b480      	push	{r7}
 800cc6e:	b083      	sub	sp, #12
 800cc70:	af00      	add	r7, sp, #0
 800cc72:	4603      	mov	r3, r0
 800cc74:	6039      	str	r1, [r7, #0]
 800cc76:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800cc78:	683b      	ldr	r3, [r7, #0]
 800cc7a:	2212      	movs	r2, #18
 800cc7c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800cc7e:	4b03      	ldr	r3, [pc, #12]	; (800cc8c <USBD_FS_DeviceDescriptor+0x20>)
}
 800cc80:	4618      	mov	r0, r3
 800cc82:	370c      	adds	r7, #12
 800cc84:	46bd      	mov	sp, r7
 800cc86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc8a:	4770      	bx	lr
 800cc8c:	200000fc 	.word	0x200000fc

0800cc90 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cc90:	b480      	push	{r7}
 800cc92:	b083      	sub	sp, #12
 800cc94:	af00      	add	r7, sp, #0
 800cc96:	4603      	mov	r3, r0
 800cc98:	6039      	str	r1, [r7, #0]
 800cc9a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800cc9c:	683b      	ldr	r3, [r7, #0]
 800cc9e:	2204      	movs	r2, #4
 800cca0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800cca2:	4b03      	ldr	r3, [pc, #12]	; (800ccb0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800cca4:	4618      	mov	r0, r3
 800cca6:	370c      	adds	r7, #12
 800cca8:	46bd      	mov	sp, r7
 800ccaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccae:	4770      	bx	lr
 800ccb0:	20000110 	.word	0x20000110

0800ccb4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ccb4:	b580      	push	{r7, lr}
 800ccb6:	b082      	sub	sp, #8
 800ccb8:	af00      	add	r7, sp, #0
 800ccba:	4603      	mov	r3, r0
 800ccbc:	6039      	str	r1, [r7, #0]
 800ccbe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ccc0:	79fb      	ldrb	r3, [r7, #7]
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d105      	bne.n	800ccd2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ccc6:	683a      	ldr	r2, [r7, #0]
 800ccc8:	4907      	ldr	r1, [pc, #28]	; (800cce8 <USBD_FS_ProductStrDescriptor+0x34>)
 800ccca:	4808      	ldr	r0, [pc, #32]	; (800ccec <USBD_FS_ProductStrDescriptor+0x38>)
 800cccc:	f7ff fe96 	bl	800c9fc <USBD_GetString>
 800ccd0:	e004      	b.n	800ccdc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ccd2:	683a      	ldr	r2, [r7, #0]
 800ccd4:	4904      	ldr	r1, [pc, #16]	; (800cce8 <USBD_FS_ProductStrDescriptor+0x34>)
 800ccd6:	4805      	ldr	r0, [pc, #20]	; (800ccec <USBD_FS_ProductStrDescriptor+0x38>)
 800ccd8:	f7ff fe90 	bl	800c9fc <USBD_GetString>
  }
  return USBD_StrDesc;
 800ccdc:	4b02      	ldr	r3, [pc, #8]	; (800cce8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800ccde:	4618      	mov	r0, r3
 800cce0:	3708      	adds	r7, #8
 800cce2:	46bd      	mov	sp, r7
 800cce4:	bd80      	pop	{r7, pc}
 800cce6:	bf00      	nop
 800cce8:	20001338 	.word	0x20001338
 800ccec:	0800e894 	.word	0x0800e894

0800ccf0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ccf0:	b580      	push	{r7, lr}
 800ccf2:	b082      	sub	sp, #8
 800ccf4:	af00      	add	r7, sp, #0
 800ccf6:	4603      	mov	r3, r0
 800ccf8:	6039      	str	r1, [r7, #0]
 800ccfa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ccfc:	683a      	ldr	r2, [r7, #0]
 800ccfe:	4904      	ldr	r1, [pc, #16]	; (800cd10 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800cd00:	4804      	ldr	r0, [pc, #16]	; (800cd14 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800cd02:	f7ff fe7b 	bl	800c9fc <USBD_GetString>
  return USBD_StrDesc;
 800cd06:	4b02      	ldr	r3, [pc, #8]	; (800cd10 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800cd08:	4618      	mov	r0, r3
 800cd0a:	3708      	adds	r7, #8
 800cd0c:	46bd      	mov	sp, r7
 800cd0e:	bd80      	pop	{r7, pc}
 800cd10:	20001338 	.word	0x20001338
 800cd14:	0800e8b4 	.word	0x0800e8b4

0800cd18 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cd18:	b580      	push	{r7, lr}
 800cd1a:	b082      	sub	sp, #8
 800cd1c:	af00      	add	r7, sp, #0
 800cd1e:	4603      	mov	r3, r0
 800cd20:	6039      	str	r1, [r7, #0]
 800cd22:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800cd24:	683b      	ldr	r3, [r7, #0]
 800cd26:	221a      	movs	r2, #26
 800cd28:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800cd2a:	f000 f843 	bl	800cdb4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800cd2e:	4b02      	ldr	r3, [pc, #8]	; (800cd38 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800cd30:	4618      	mov	r0, r3
 800cd32:	3708      	adds	r7, #8
 800cd34:	46bd      	mov	sp, r7
 800cd36:	bd80      	pop	{r7, pc}
 800cd38:	20000114 	.word	0x20000114

0800cd3c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cd3c:	b580      	push	{r7, lr}
 800cd3e:	b082      	sub	sp, #8
 800cd40:	af00      	add	r7, sp, #0
 800cd42:	4603      	mov	r3, r0
 800cd44:	6039      	str	r1, [r7, #0]
 800cd46:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800cd48:	79fb      	ldrb	r3, [r7, #7]
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d105      	bne.n	800cd5a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cd4e:	683a      	ldr	r2, [r7, #0]
 800cd50:	4907      	ldr	r1, [pc, #28]	; (800cd70 <USBD_FS_ConfigStrDescriptor+0x34>)
 800cd52:	4808      	ldr	r0, [pc, #32]	; (800cd74 <USBD_FS_ConfigStrDescriptor+0x38>)
 800cd54:	f7ff fe52 	bl	800c9fc <USBD_GetString>
 800cd58:	e004      	b.n	800cd64 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cd5a:	683a      	ldr	r2, [r7, #0]
 800cd5c:	4904      	ldr	r1, [pc, #16]	; (800cd70 <USBD_FS_ConfigStrDescriptor+0x34>)
 800cd5e:	4805      	ldr	r0, [pc, #20]	; (800cd74 <USBD_FS_ConfigStrDescriptor+0x38>)
 800cd60:	f7ff fe4c 	bl	800c9fc <USBD_GetString>
  }
  return USBD_StrDesc;
 800cd64:	4b02      	ldr	r3, [pc, #8]	; (800cd70 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800cd66:	4618      	mov	r0, r3
 800cd68:	3708      	adds	r7, #8
 800cd6a:	46bd      	mov	sp, r7
 800cd6c:	bd80      	pop	{r7, pc}
 800cd6e:	bf00      	nop
 800cd70:	20001338 	.word	0x20001338
 800cd74:	0800e8c8 	.word	0x0800e8c8

0800cd78 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cd78:	b580      	push	{r7, lr}
 800cd7a:	b082      	sub	sp, #8
 800cd7c:	af00      	add	r7, sp, #0
 800cd7e:	4603      	mov	r3, r0
 800cd80:	6039      	str	r1, [r7, #0]
 800cd82:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cd84:	79fb      	ldrb	r3, [r7, #7]
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d105      	bne.n	800cd96 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cd8a:	683a      	ldr	r2, [r7, #0]
 800cd8c:	4907      	ldr	r1, [pc, #28]	; (800cdac <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cd8e:	4808      	ldr	r0, [pc, #32]	; (800cdb0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cd90:	f7ff fe34 	bl	800c9fc <USBD_GetString>
 800cd94:	e004      	b.n	800cda0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cd96:	683a      	ldr	r2, [r7, #0]
 800cd98:	4904      	ldr	r1, [pc, #16]	; (800cdac <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cd9a:	4805      	ldr	r0, [pc, #20]	; (800cdb0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cd9c:	f7ff fe2e 	bl	800c9fc <USBD_GetString>
  }
  return USBD_StrDesc;
 800cda0:	4b02      	ldr	r3, [pc, #8]	; (800cdac <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800cda2:	4618      	mov	r0, r3
 800cda4:	3708      	adds	r7, #8
 800cda6:	46bd      	mov	sp, r7
 800cda8:	bd80      	pop	{r7, pc}
 800cdaa:	bf00      	nop
 800cdac:	20001338 	.word	0x20001338
 800cdb0:	0800e8dc 	.word	0x0800e8dc

0800cdb4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800cdb4:	b580      	push	{r7, lr}
 800cdb6:	b084      	sub	sp, #16
 800cdb8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800cdba:	4b0f      	ldr	r3, [pc, #60]	; (800cdf8 <Get_SerialNum+0x44>)
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800cdc0:	4b0e      	ldr	r3, [pc, #56]	; (800cdfc <Get_SerialNum+0x48>)
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800cdc6:	4b0e      	ldr	r3, [pc, #56]	; (800ce00 <Get_SerialNum+0x4c>)
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800cdcc:	68fa      	ldr	r2, [r7, #12]
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	4413      	add	r3, r2
 800cdd2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d009      	beq.n	800cdee <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800cdda:	2208      	movs	r2, #8
 800cddc:	4909      	ldr	r1, [pc, #36]	; (800ce04 <Get_SerialNum+0x50>)
 800cdde:	68f8      	ldr	r0, [r7, #12]
 800cde0:	f000 f814 	bl	800ce0c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800cde4:	2204      	movs	r2, #4
 800cde6:	4908      	ldr	r1, [pc, #32]	; (800ce08 <Get_SerialNum+0x54>)
 800cde8:	68b8      	ldr	r0, [r7, #8]
 800cdea:	f000 f80f 	bl	800ce0c <IntToUnicode>
  }
}
 800cdee:	bf00      	nop
 800cdf0:	3710      	adds	r7, #16
 800cdf2:	46bd      	mov	sp, r7
 800cdf4:	bd80      	pop	{r7, pc}
 800cdf6:	bf00      	nop
 800cdf8:	1fff7a10 	.word	0x1fff7a10
 800cdfc:	1fff7a14 	.word	0x1fff7a14
 800ce00:	1fff7a18 	.word	0x1fff7a18
 800ce04:	20000116 	.word	0x20000116
 800ce08:	20000126 	.word	0x20000126

0800ce0c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ce0c:	b480      	push	{r7}
 800ce0e:	b087      	sub	sp, #28
 800ce10:	af00      	add	r7, sp, #0
 800ce12:	60f8      	str	r0, [r7, #12]
 800ce14:	60b9      	str	r1, [r7, #8]
 800ce16:	4613      	mov	r3, r2
 800ce18:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ce1a:	2300      	movs	r3, #0
 800ce1c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ce1e:	2300      	movs	r3, #0
 800ce20:	75fb      	strb	r3, [r7, #23]
 800ce22:	e027      	b.n	800ce74 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ce24:	68fb      	ldr	r3, [r7, #12]
 800ce26:	0f1b      	lsrs	r3, r3, #28
 800ce28:	2b09      	cmp	r3, #9
 800ce2a:	d80b      	bhi.n	800ce44 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	0f1b      	lsrs	r3, r3, #28
 800ce30:	b2da      	uxtb	r2, r3
 800ce32:	7dfb      	ldrb	r3, [r7, #23]
 800ce34:	005b      	lsls	r3, r3, #1
 800ce36:	4619      	mov	r1, r3
 800ce38:	68bb      	ldr	r3, [r7, #8]
 800ce3a:	440b      	add	r3, r1
 800ce3c:	3230      	adds	r2, #48	; 0x30
 800ce3e:	b2d2      	uxtb	r2, r2
 800ce40:	701a      	strb	r2, [r3, #0]
 800ce42:	e00a      	b.n	800ce5a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	0f1b      	lsrs	r3, r3, #28
 800ce48:	b2da      	uxtb	r2, r3
 800ce4a:	7dfb      	ldrb	r3, [r7, #23]
 800ce4c:	005b      	lsls	r3, r3, #1
 800ce4e:	4619      	mov	r1, r3
 800ce50:	68bb      	ldr	r3, [r7, #8]
 800ce52:	440b      	add	r3, r1
 800ce54:	3237      	adds	r2, #55	; 0x37
 800ce56:	b2d2      	uxtb	r2, r2
 800ce58:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	011b      	lsls	r3, r3, #4
 800ce5e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ce60:	7dfb      	ldrb	r3, [r7, #23]
 800ce62:	005b      	lsls	r3, r3, #1
 800ce64:	3301      	adds	r3, #1
 800ce66:	68ba      	ldr	r2, [r7, #8]
 800ce68:	4413      	add	r3, r2
 800ce6a:	2200      	movs	r2, #0
 800ce6c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ce6e:	7dfb      	ldrb	r3, [r7, #23]
 800ce70:	3301      	adds	r3, #1
 800ce72:	75fb      	strb	r3, [r7, #23]
 800ce74:	7dfa      	ldrb	r2, [r7, #23]
 800ce76:	79fb      	ldrb	r3, [r7, #7]
 800ce78:	429a      	cmp	r2, r3
 800ce7a:	d3d3      	bcc.n	800ce24 <IntToUnicode+0x18>
  }
}
 800ce7c:	bf00      	nop
 800ce7e:	bf00      	nop
 800ce80:	371c      	adds	r7, #28
 800ce82:	46bd      	mov	sp, r7
 800ce84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce88:	4770      	bx	lr
	...

0800ce8c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ce8c:	b580      	push	{r7, lr}
 800ce8e:	b08a      	sub	sp, #40	; 0x28
 800ce90:	af00      	add	r7, sp, #0
 800ce92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ce94:	f107 0314 	add.w	r3, r7, #20
 800ce98:	2200      	movs	r2, #0
 800ce9a:	601a      	str	r2, [r3, #0]
 800ce9c:	605a      	str	r2, [r3, #4]
 800ce9e:	609a      	str	r2, [r3, #8]
 800cea0:	60da      	str	r2, [r3, #12]
 800cea2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ceac:	d13a      	bne.n	800cf24 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ceae:	2300      	movs	r3, #0
 800ceb0:	613b      	str	r3, [r7, #16]
 800ceb2:	4b1e      	ldr	r3, [pc, #120]	; (800cf2c <HAL_PCD_MspInit+0xa0>)
 800ceb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ceb6:	4a1d      	ldr	r2, [pc, #116]	; (800cf2c <HAL_PCD_MspInit+0xa0>)
 800ceb8:	f043 0301 	orr.w	r3, r3, #1
 800cebc:	6313      	str	r3, [r2, #48]	; 0x30
 800cebe:	4b1b      	ldr	r3, [pc, #108]	; (800cf2c <HAL_PCD_MspInit+0xa0>)
 800cec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cec2:	f003 0301 	and.w	r3, r3, #1
 800cec6:	613b      	str	r3, [r7, #16]
 800cec8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800ceca:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800cece:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ced0:	2302      	movs	r3, #2
 800ced2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ced4:	2300      	movs	r3, #0
 800ced6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ced8:	2303      	movs	r3, #3
 800ceda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800cedc:	230a      	movs	r3, #10
 800cede:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cee0:	f107 0314 	add.w	r3, r7, #20
 800cee4:	4619      	mov	r1, r3
 800cee6:	4812      	ldr	r0, [pc, #72]	; (800cf30 <HAL_PCD_MspInit+0xa4>)
 800cee8:	f7f7 fae0 	bl	80044ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ceec:	4b0f      	ldr	r3, [pc, #60]	; (800cf2c <HAL_PCD_MspInit+0xa0>)
 800ceee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cef0:	4a0e      	ldr	r2, [pc, #56]	; (800cf2c <HAL_PCD_MspInit+0xa0>)
 800cef2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cef6:	6353      	str	r3, [r2, #52]	; 0x34
 800cef8:	2300      	movs	r3, #0
 800cefa:	60fb      	str	r3, [r7, #12]
 800cefc:	4b0b      	ldr	r3, [pc, #44]	; (800cf2c <HAL_PCD_MspInit+0xa0>)
 800cefe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cf00:	4a0a      	ldr	r2, [pc, #40]	; (800cf2c <HAL_PCD_MspInit+0xa0>)
 800cf02:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800cf06:	6453      	str	r3, [r2, #68]	; 0x44
 800cf08:	4b08      	ldr	r3, [pc, #32]	; (800cf2c <HAL_PCD_MspInit+0xa0>)
 800cf0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cf0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cf10:	60fb      	str	r3, [r7, #12]
 800cf12:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800cf14:	2200      	movs	r2, #0
 800cf16:	2100      	movs	r1, #0
 800cf18:	2043      	movs	r0, #67	; 0x43
 800cf1a:	f7f6 fe66 	bl	8003bea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800cf1e:	2043      	movs	r0, #67	; 0x43
 800cf20:	f7f6 fe7f 	bl	8003c22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800cf24:	bf00      	nop
 800cf26:	3728      	adds	r7, #40	; 0x28
 800cf28:	46bd      	mov	sp, r7
 800cf2a:	bd80      	pop	{r7, pc}
 800cf2c:	40023800 	.word	0x40023800
 800cf30:	40020000 	.word	0x40020000

0800cf34 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf34:	b580      	push	{r7, lr}
 800cf36:	b082      	sub	sp, #8
 800cf38:	af00      	add	r7, sp, #0
 800cf3a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800cf48:	4619      	mov	r1, r3
 800cf4a:	4610      	mov	r0, r2
 800cf4c:	f7fe fbf7 	bl	800b73e <USBD_LL_SetupStage>
}
 800cf50:	bf00      	nop
 800cf52:	3708      	adds	r7, #8
 800cf54:	46bd      	mov	sp, r7
 800cf56:	bd80      	pop	{r7, pc}

0800cf58 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf58:	b580      	push	{r7, lr}
 800cf5a:	b082      	sub	sp, #8
 800cf5c:	af00      	add	r7, sp, #0
 800cf5e:	6078      	str	r0, [r7, #4]
 800cf60:	460b      	mov	r3, r1
 800cf62:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800cf6a:	78fa      	ldrb	r2, [r7, #3]
 800cf6c:	6879      	ldr	r1, [r7, #4]
 800cf6e:	4613      	mov	r3, r2
 800cf70:	00db      	lsls	r3, r3, #3
 800cf72:	4413      	add	r3, r2
 800cf74:	009b      	lsls	r3, r3, #2
 800cf76:	440b      	add	r3, r1
 800cf78:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800cf7c:	681a      	ldr	r2, [r3, #0]
 800cf7e:	78fb      	ldrb	r3, [r7, #3]
 800cf80:	4619      	mov	r1, r3
 800cf82:	f7fe fc31 	bl	800b7e8 <USBD_LL_DataOutStage>
}
 800cf86:	bf00      	nop
 800cf88:	3708      	adds	r7, #8
 800cf8a:	46bd      	mov	sp, r7
 800cf8c:	bd80      	pop	{r7, pc}

0800cf8e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf8e:	b580      	push	{r7, lr}
 800cf90:	b082      	sub	sp, #8
 800cf92:	af00      	add	r7, sp, #0
 800cf94:	6078      	str	r0, [r7, #4]
 800cf96:	460b      	mov	r3, r1
 800cf98:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800cfa0:	78fa      	ldrb	r2, [r7, #3]
 800cfa2:	6879      	ldr	r1, [r7, #4]
 800cfa4:	4613      	mov	r3, r2
 800cfa6:	00db      	lsls	r3, r3, #3
 800cfa8:	4413      	add	r3, r2
 800cfaa:	009b      	lsls	r3, r3, #2
 800cfac:	440b      	add	r3, r1
 800cfae:	334c      	adds	r3, #76	; 0x4c
 800cfb0:	681a      	ldr	r2, [r3, #0]
 800cfb2:	78fb      	ldrb	r3, [r7, #3]
 800cfb4:	4619      	mov	r1, r3
 800cfb6:	f7fe fcca 	bl	800b94e <USBD_LL_DataInStage>
}
 800cfba:	bf00      	nop
 800cfbc:	3708      	adds	r7, #8
 800cfbe:	46bd      	mov	sp, r7
 800cfc0:	bd80      	pop	{r7, pc}

0800cfc2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cfc2:	b580      	push	{r7, lr}
 800cfc4:	b082      	sub	sp, #8
 800cfc6:	af00      	add	r7, sp, #0
 800cfc8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800cfd0:	4618      	mov	r0, r3
 800cfd2:	f7fe fdfe 	bl	800bbd2 <USBD_LL_SOF>
}
 800cfd6:	bf00      	nop
 800cfd8:	3708      	adds	r7, #8
 800cfda:	46bd      	mov	sp, r7
 800cfdc:	bd80      	pop	{r7, pc}

0800cfde <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cfde:	b580      	push	{r7, lr}
 800cfe0:	b084      	sub	sp, #16
 800cfe2:	af00      	add	r7, sp, #0
 800cfe4:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800cfe6:	2301      	movs	r3, #1
 800cfe8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	68db      	ldr	r3, [r3, #12]
 800cfee:	2b02      	cmp	r3, #2
 800cff0:	d001      	beq.n	800cff6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800cff2:	f7f5 fcdf 	bl	80029b4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800cffc:	7bfa      	ldrb	r2, [r7, #15]
 800cffe:	4611      	mov	r1, r2
 800d000:	4618      	mov	r0, r3
 800d002:	f7fe fda8 	bl	800bb56 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d00c:	4618      	mov	r0, r3
 800d00e:	f7fe fd50 	bl	800bab2 <USBD_LL_Reset>
}
 800d012:	bf00      	nop
 800d014:	3710      	adds	r7, #16
 800d016:	46bd      	mov	sp, r7
 800d018:	bd80      	pop	{r7, pc}
	...

0800d01c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d01c:	b580      	push	{r7, lr}
 800d01e:	b082      	sub	sp, #8
 800d020:	af00      	add	r7, sp, #0
 800d022:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d02a:	4618      	mov	r0, r3
 800d02c:	f7fe fda3 	bl	800bb76 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	687a      	ldr	r2, [r7, #4]
 800d03c:	6812      	ldr	r2, [r2, #0]
 800d03e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d042:	f043 0301 	orr.w	r3, r3, #1
 800d046:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	6a1b      	ldr	r3, [r3, #32]
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d005      	beq.n	800d05c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d050:	4b04      	ldr	r3, [pc, #16]	; (800d064 <HAL_PCD_SuspendCallback+0x48>)
 800d052:	691b      	ldr	r3, [r3, #16]
 800d054:	4a03      	ldr	r2, [pc, #12]	; (800d064 <HAL_PCD_SuspendCallback+0x48>)
 800d056:	f043 0306 	orr.w	r3, r3, #6
 800d05a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d05c:	bf00      	nop
 800d05e:	3708      	adds	r7, #8
 800d060:	46bd      	mov	sp, r7
 800d062:	bd80      	pop	{r7, pc}
 800d064:	e000ed00 	.word	0xe000ed00

0800d068 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d068:	b580      	push	{r7, lr}
 800d06a:	b082      	sub	sp, #8
 800d06c:	af00      	add	r7, sp, #0
 800d06e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d076:	4618      	mov	r0, r3
 800d078:	f7fe fd93 	bl	800bba2 <USBD_LL_Resume>
}
 800d07c:	bf00      	nop
 800d07e:	3708      	adds	r7, #8
 800d080:	46bd      	mov	sp, r7
 800d082:	bd80      	pop	{r7, pc}

0800d084 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d084:	b580      	push	{r7, lr}
 800d086:	b082      	sub	sp, #8
 800d088:	af00      	add	r7, sp, #0
 800d08a:	6078      	str	r0, [r7, #4]
 800d08c:	460b      	mov	r3, r1
 800d08e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d096:	78fa      	ldrb	r2, [r7, #3]
 800d098:	4611      	mov	r1, r2
 800d09a:	4618      	mov	r0, r3
 800d09c:	f7fe fdeb 	bl	800bc76 <USBD_LL_IsoOUTIncomplete>
}
 800d0a0:	bf00      	nop
 800d0a2:	3708      	adds	r7, #8
 800d0a4:	46bd      	mov	sp, r7
 800d0a6:	bd80      	pop	{r7, pc}

0800d0a8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d0a8:	b580      	push	{r7, lr}
 800d0aa:	b082      	sub	sp, #8
 800d0ac:	af00      	add	r7, sp, #0
 800d0ae:	6078      	str	r0, [r7, #4]
 800d0b0:	460b      	mov	r3, r1
 800d0b2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d0ba:	78fa      	ldrb	r2, [r7, #3]
 800d0bc:	4611      	mov	r1, r2
 800d0be:	4618      	mov	r0, r3
 800d0c0:	f7fe fda7 	bl	800bc12 <USBD_LL_IsoINIncomplete>
}
 800d0c4:	bf00      	nop
 800d0c6:	3708      	adds	r7, #8
 800d0c8:	46bd      	mov	sp, r7
 800d0ca:	bd80      	pop	{r7, pc}

0800d0cc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d0cc:	b580      	push	{r7, lr}
 800d0ce:	b082      	sub	sp, #8
 800d0d0:	af00      	add	r7, sp, #0
 800d0d2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d0da:	4618      	mov	r0, r3
 800d0dc:	f7fe fdfd 	bl	800bcda <USBD_LL_DevConnected>
}
 800d0e0:	bf00      	nop
 800d0e2:	3708      	adds	r7, #8
 800d0e4:	46bd      	mov	sp, r7
 800d0e6:	bd80      	pop	{r7, pc}

0800d0e8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d0e8:	b580      	push	{r7, lr}
 800d0ea:	b082      	sub	sp, #8
 800d0ec:	af00      	add	r7, sp, #0
 800d0ee:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d0f6:	4618      	mov	r0, r3
 800d0f8:	f7fe fdfa 	bl	800bcf0 <USBD_LL_DevDisconnected>
}
 800d0fc:	bf00      	nop
 800d0fe:	3708      	adds	r7, #8
 800d100:	46bd      	mov	sp, r7
 800d102:	bd80      	pop	{r7, pc}

0800d104 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d104:	b580      	push	{r7, lr}
 800d106:	b082      	sub	sp, #8
 800d108:	af00      	add	r7, sp, #0
 800d10a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	781b      	ldrb	r3, [r3, #0]
 800d110:	2b00      	cmp	r3, #0
 800d112:	d13c      	bne.n	800d18e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800d114:	4a20      	ldr	r2, [pc, #128]	; (800d198 <USBD_LL_Init+0x94>)
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	4a1e      	ldr	r2, [pc, #120]	; (800d198 <USBD_LL_Init+0x94>)
 800d120:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d124:	4b1c      	ldr	r3, [pc, #112]	; (800d198 <USBD_LL_Init+0x94>)
 800d126:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800d12a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800d12c:	4b1a      	ldr	r3, [pc, #104]	; (800d198 <USBD_LL_Init+0x94>)
 800d12e:	2204      	movs	r2, #4
 800d130:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800d132:	4b19      	ldr	r3, [pc, #100]	; (800d198 <USBD_LL_Init+0x94>)
 800d134:	2202      	movs	r2, #2
 800d136:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d138:	4b17      	ldr	r3, [pc, #92]	; (800d198 <USBD_LL_Init+0x94>)
 800d13a:	2200      	movs	r2, #0
 800d13c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d13e:	4b16      	ldr	r3, [pc, #88]	; (800d198 <USBD_LL_Init+0x94>)
 800d140:	2202      	movs	r2, #2
 800d142:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d144:	4b14      	ldr	r3, [pc, #80]	; (800d198 <USBD_LL_Init+0x94>)
 800d146:	2200      	movs	r2, #0
 800d148:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800d14a:	4b13      	ldr	r3, [pc, #76]	; (800d198 <USBD_LL_Init+0x94>)
 800d14c:	2200      	movs	r2, #0
 800d14e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800d150:	4b11      	ldr	r3, [pc, #68]	; (800d198 <USBD_LL_Init+0x94>)
 800d152:	2200      	movs	r2, #0
 800d154:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800d156:	4b10      	ldr	r3, [pc, #64]	; (800d198 <USBD_LL_Init+0x94>)
 800d158:	2200      	movs	r2, #0
 800d15a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800d15c:	4b0e      	ldr	r3, [pc, #56]	; (800d198 <USBD_LL_Init+0x94>)
 800d15e:	2200      	movs	r2, #0
 800d160:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800d162:	480d      	ldr	r0, [pc, #52]	; (800d198 <USBD_LL_Init+0x94>)
 800d164:	f7f8 fc35 	bl	80059d2 <HAL_PCD_Init>
 800d168:	4603      	mov	r3, r0
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d001      	beq.n	800d172 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800d16e:	f7f5 fc21 	bl	80029b4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800d172:	2180      	movs	r1, #128	; 0x80
 800d174:	4808      	ldr	r0, [pc, #32]	; (800d198 <USBD_LL_Init+0x94>)
 800d176:	f7f9 fe74 	bl	8006e62 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800d17a:	2240      	movs	r2, #64	; 0x40
 800d17c:	2100      	movs	r1, #0
 800d17e:	4806      	ldr	r0, [pc, #24]	; (800d198 <USBD_LL_Init+0x94>)
 800d180:	f7f9 fe28 	bl	8006dd4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800d184:	2280      	movs	r2, #128	; 0x80
 800d186:	2101      	movs	r1, #1
 800d188:	4803      	ldr	r0, [pc, #12]	; (800d198 <USBD_LL_Init+0x94>)
 800d18a:	f7f9 fe23 	bl	8006dd4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800d18e:	2300      	movs	r3, #0
}
 800d190:	4618      	mov	r0, r3
 800d192:	3708      	adds	r7, #8
 800d194:	46bd      	mov	sp, r7
 800d196:	bd80      	pop	{r7, pc}
 800d198:	20001538 	.word	0x20001538

0800d19c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d19c:	b580      	push	{r7, lr}
 800d19e:	b084      	sub	sp, #16
 800d1a0:	af00      	add	r7, sp, #0
 800d1a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d1a4:	2300      	movs	r3, #0
 800d1a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d1a8:	2300      	movs	r3, #0
 800d1aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d1b2:	4618      	mov	r0, r3
 800d1b4:	f7f8 fd2a 	bl	8005c0c <HAL_PCD_Start>
 800d1b8:	4603      	mov	r3, r0
 800d1ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d1bc:	7bfb      	ldrb	r3, [r7, #15]
 800d1be:	4618      	mov	r0, r3
 800d1c0:	f000 f930 	bl	800d424 <USBD_Get_USB_Status>
 800d1c4:	4603      	mov	r3, r0
 800d1c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d1c8:	7bbb      	ldrb	r3, [r7, #14]
}
 800d1ca:	4618      	mov	r0, r3
 800d1cc:	3710      	adds	r7, #16
 800d1ce:	46bd      	mov	sp, r7
 800d1d0:	bd80      	pop	{r7, pc}

0800d1d2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d1d2:	b580      	push	{r7, lr}
 800d1d4:	b084      	sub	sp, #16
 800d1d6:	af00      	add	r7, sp, #0
 800d1d8:	6078      	str	r0, [r7, #4]
 800d1da:	4608      	mov	r0, r1
 800d1dc:	4611      	mov	r1, r2
 800d1de:	461a      	mov	r2, r3
 800d1e0:	4603      	mov	r3, r0
 800d1e2:	70fb      	strb	r3, [r7, #3]
 800d1e4:	460b      	mov	r3, r1
 800d1e6:	70bb      	strb	r3, [r7, #2]
 800d1e8:	4613      	mov	r3, r2
 800d1ea:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d1ec:	2300      	movs	r3, #0
 800d1ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d1f0:	2300      	movs	r3, #0
 800d1f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800d1fa:	78bb      	ldrb	r3, [r7, #2]
 800d1fc:	883a      	ldrh	r2, [r7, #0]
 800d1fe:	78f9      	ldrb	r1, [r7, #3]
 800d200:	f7f9 f9fb 	bl	80065fa <HAL_PCD_EP_Open>
 800d204:	4603      	mov	r3, r0
 800d206:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d208:	7bfb      	ldrb	r3, [r7, #15]
 800d20a:	4618      	mov	r0, r3
 800d20c:	f000 f90a 	bl	800d424 <USBD_Get_USB_Status>
 800d210:	4603      	mov	r3, r0
 800d212:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d214:	7bbb      	ldrb	r3, [r7, #14]
}
 800d216:	4618      	mov	r0, r3
 800d218:	3710      	adds	r7, #16
 800d21a:	46bd      	mov	sp, r7
 800d21c:	bd80      	pop	{r7, pc}

0800d21e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d21e:	b580      	push	{r7, lr}
 800d220:	b084      	sub	sp, #16
 800d222:	af00      	add	r7, sp, #0
 800d224:	6078      	str	r0, [r7, #4]
 800d226:	460b      	mov	r3, r1
 800d228:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d22a:	2300      	movs	r3, #0
 800d22c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d22e:	2300      	movs	r3, #0
 800d230:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d238:	78fa      	ldrb	r2, [r7, #3]
 800d23a:	4611      	mov	r1, r2
 800d23c:	4618      	mov	r0, r3
 800d23e:	f7f9 fa44 	bl	80066ca <HAL_PCD_EP_Close>
 800d242:	4603      	mov	r3, r0
 800d244:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d246:	7bfb      	ldrb	r3, [r7, #15]
 800d248:	4618      	mov	r0, r3
 800d24a:	f000 f8eb 	bl	800d424 <USBD_Get_USB_Status>
 800d24e:	4603      	mov	r3, r0
 800d250:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d252:	7bbb      	ldrb	r3, [r7, #14]
}
 800d254:	4618      	mov	r0, r3
 800d256:	3710      	adds	r7, #16
 800d258:	46bd      	mov	sp, r7
 800d25a:	bd80      	pop	{r7, pc}

0800d25c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d25c:	b580      	push	{r7, lr}
 800d25e:	b084      	sub	sp, #16
 800d260:	af00      	add	r7, sp, #0
 800d262:	6078      	str	r0, [r7, #4]
 800d264:	460b      	mov	r3, r1
 800d266:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d268:	2300      	movs	r3, #0
 800d26a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d26c:	2300      	movs	r3, #0
 800d26e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d276:	78fa      	ldrb	r2, [r7, #3]
 800d278:	4611      	mov	r1, r2
 800d27a:	4618      	mov	r0, r3
 800d27c:	f7f9 fb04 	bl	8006888 <HAL_PCD_EP_SetStall>
 800d280:	4603      	mov	r3, r0
 800d282:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d284:	7bfb      	ldrb	r3, [r7, #15]
 800d286:	4618      	mov	r0, r3
 800d288:	f000 f8cc 	bl	800d424 <USBD_Get_USB_Status>
 800d28c:	4603      	mov	r3, r0
 800d28e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d290:	7bbb      	ldrb	r3, [r7, #14]
}
 800d292:	4618      	mov	r0, r3
 800d294:	3710      	adds	r7, #16
 800d296:	46bd      	mov	sp, r7
 800d298:	bd80      	pop	{r7, pc}

0800d29a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d29a:	b580      	push	{r7, lr}
 800d29c:	b084      	sub	sp, #16
 800d29e:	af00      	add	r7, sp, #0
 800d2a0:	6078      	str	r0, [r7, #4]
 800d2a2:	460b      	mov	r3, r1
 800d2a4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d2a6:	2300      	movs	r3, #0
 800d2a8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d2aa:	2300      	movs	r3, #0
 800d2ac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d2b4:	78fa      	ldrb	r2, [r7, #3]
 800d2b6:	4611      	mov	r1, r2
 800d2b8:	4618      	mov	r0, r3
 800d2ba:	f7f9 fb49 	bl	8006950 <HAL_PCD_EP_ClrStall>
 800d2be:	4603      	mov	r3, r0
 800d2c0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d2c2:	7bfb      	ldrb	r3, [r7, #15]
 800d2c4:	4618      	mov	r0, r3
 800d2c6:	f000 f8ad 	bl	800d424 <USBD_Get_USB_Status>
 800d2ca:	4603      	mov	r3, r0
 800d2cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d2ce:	7bbb      	ldrb	r3, [r7, #14]
}
 800d2d0:	4618      	mov	r0, r3
 800d2d2:	3710      	adds	r7, #16
 800d2d4:	46bd      	mov	sp, r7
 800d2d6:	bd80      	pop	{r7, pc}

0800d2d8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d2d8:	b480      	push	{r7}
 800d2da:	b085      	sub	sp, #20
 800d2dc:	af00      	add	r7, sp, #0
 800d2de:	6078      	str	r0, [r7, #4]
 800d2e0:	460b      	mov	r3, r1
 800d2e2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d2ea:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d2ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	da0b      	bge.n	800d30c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d2f4:	78fb      	ldrb	r3, [r7, #3]
 800d2f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d2fa:	68f9      	ldr	r1, [r7, #12]
 800d2fc:	4613      	mov	r3, r2
 800d2fe:	00db      	lsls	r3, r3, #3
 800d300:	4413      	add	r3, r2
 800d302:	009b      	lsls	r3, r3, #2
 800d304:	440b      	add	r3, r1
 800d306:	333e      	adds	r3, #62	; 0x3e
 800d308:	781b      	ldrb	r3, [r3, #0]
 800d30a:	e00b      	b.n	800d324 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d30c:	78fb      	ldrb	r3, [r7, #3]
 800d30e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d312:	68f9      	ldr	r1, [r7, #12]
 800d314:	4613      	mov	r3, r2
 800d316:	00db      	lsls	r3, r3, #3
 800d318:	4413      	add	r3, r2
 800d31a:	009b      	lsls	r3, r3, #2
 800d31c:	440b      	add	r3, r1
 800d31e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800d322:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d324:	4618      	mov	r0, r3
 800d326:	3714      	adds	r7, #20
 800d328:	46bd      	mov	sp, r7
 800d32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d32e:	4770      	bx	lr

0800d330 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d330:	b580      	push	{r7, lr}
 800d332:	b084      	sub	sp, #16
 800d334:	af00      	add	r7, sp, #0
 800d336:	6078      	str	r0, [r7, #4]
 800d338:	460b      	mov	r3, r1
 800d33a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d33c:	2300      	movs	r3, #0
 800d33e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d340:	2300      	movs	r3, #0
 800d342:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d34a:	78fa      	ldrb	r2, [r7, #3]
 800d34c:	4611      	mov	r1, r2
 800d34e:	4618      	mov	r0, r3
 800d350:	f7f9 f92e 	bl	80065b0 <HAL_PCD_SetAddress>
 800d354:	4603      	mov	r3, r0
 800d356:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d358:	7bfb      	ldrb	r3, [r7, #15]
 800d35a:	4618      	mov	r0, r3
 800d35c:	f000 f862 	bl	800d424 <USBD_Get_USB_Status>
 800d360:	4603      	mov	r3, r0
 800d362:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d364:	7bbb      	ldrb	r3, [r7, #14]
}
 800d366:	4618      	mov	r0, r3
 800d368:	3710      	adds	r7, #16
 800d36a:	46bd      	mov	sp, r7
 800d36c:	bd80      	pop	{r7, pc}

0800d36e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d36e:	b580      	push	{r7, lr}
 800d370:	b086      	sub	sp, #24
 800d372:	af00      	add	r7, sp, #0
 800d374:	60f8      	str	r0, [r7, #12]
 800d376:	607a      	str	r2, [r7, #4]
 800d378:	603b      	str	r3, [r7, #0]
 800d37a:	460b      	mov	r3, r1
 800d37c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d37e:	2300      	movs	r3, #0
 800d380:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d382:	2300      	movs	r3, #0
 800d384:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d386:	68fb      	ldr	r3, [r7, #12]
 800d388:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800d38c:	7af9      	ldrb	r1, [r7, #11]
 800d38e:	683b      	ldr	r3, [r7, #0]
 800d390:	687a      	ldr	r2, [r7, #4]
 800d392:	f7f9 fa2f 	bl	80067f4 <HAL_PCD_EP_Transmit>
 800d396:	4603      	mov	r3, r0
 800d398:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d39a:	7dfb      	ldrb	r3, [r7, #23]
 800d39c:	4618      	mov	r0, r3
 800d39e:	f000 f841 	bl	800d424 <USBD_Get_USB_Status>
 800d3a2:	4603      	mov	r3, r0
 800d3a4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d3a6:	7dbb      	ldrb	r3, [r7, #22]
}
 800d3a8:	4618      	mov	r0, r3
 800d3aa:	3718      	adds	r7, #24
 800d3ac:	46bd      	mov	sp, r7
 800d3ae:	bd80      	pop	{r7, pc}

0800d3b0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d3b0:	b580      	push	{r7, lr}
 800d3b2:	b086      	sub	sp, #24
 800d3b4:	af00      	add	r7, sp, #0
 800d3b6:	60f8      	str	r0, [r7, #12]
 800d3b8:	607a      	str	r2, [r7, #4]
 800d3ba:	603b      	str	r3, [r7, #0]
 800d3bc:	460b      	mov	r3, r1
 800d3be:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d3c0:	2300      	movs	r3, #0
 800d3c2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d3c4:	2300      	movs	r3, #0
 800d3c6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d3c8:	68fb      	ldr	r3, [r7, #12]
 800d3ca:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800d3ce:	7af9      	ldrb	r1, [r7, #11]
 800d3d0:	683b      	ldr	r3, [r7, #0]
 800d3d2:	687a      	ldr	r2, [r7, #4]
 800d3d4:	f7f9 f9c3 	bl	800675e <HAL_PCD_EP_Receive>
 800d3d8:	4603      	mov	r3, r0
 800d3da:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d3dc:	7dfb      	ldrb	r3, [r7, #23]
 800d3de:	4618      	mov	r0, r3
 800d3e0:	f000 f820 	bl	800d424 <USBD_Get_USB_Status>
 800d3e4:	4603      	mov	r3, r0
 800d3e6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d3e8:	7dbb      	ldrb	r3, [r7, #22]
}
 800d3ea:	4618      	mov	r0, r3
 800d3ec:	3718      	adds	r7, #24
 800d3ee:	46bd      	mov	sp, r7
 800d3f0:	bd80      	pop	{r7, pc}
	...

0800d3f4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d3f4:	b480      	push	{r7}
 800d3f6:	b083      	sub	sp, #12
 800d3f8:	af00      	add	r7, sp, #0
 800d3fa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 800d3fc:	4b03      	ldr	r3, [pc, #12]	; (800d40c <USBD_static_malloc+0x18>)
}
 800d3fe:	4618      	mov	r0, r3
 800d400:	370c      	adds	r7, #12
 800d402:	46bd      	mov	sp, r7
 800d404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d408:	4770      	bx	lr
 800d40a:	bf00      	nop
 800d40c:	20001a44 	.word	0x20001a44

0800d410 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d410:	b480      	push	{r7}
 800d412:	b083      	sub	sp, #12
 800d414:	af00      	add	r7, sp, #0
 800d416:	6078      	str	r0, [r7, #4]

}
 800d418:	bf00      	nop
 800d41a:	370c      	adds	r7, #12
 800d41c:	46bd      	mov	sp, r7
 800d41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d422:	4770      	bx	lr

0800d424 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d424:	b480      	push	{r7}
 800d426:	b085      	sub	sp, #20
 800d428:	af00      	add	r7, sp, #0
 800d42a:	4603      	mov	r3, r0
 800d42c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d42e:	2300      	movs	r3, #0
 800d430:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d432:	79fb      	ldrb	r3, [r7, #7]
 800d434:	2b03      	cmp	r3, #3
 800d436:	d817      	bhi.n	800d468 <USBD_Get_USB_Status+0x44>
 800d438:	a201      	add	r2, pc, #4	; (adr r2, 800d440 <USBD_Get_USB_Status+0x1c>)
 800d43a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d43e:	bf00      	nop
 800d440:	0800d451 	.word	0x0800d451
 800d444:	0800d457 	.word	0x0800d457
 800d448:	0800d45d 	.word	0x0800d45d
 800d44c:	0800d463 	.word	0x0800d463
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d450:	2300      	movs	r3, #0
 800d452:	73fb      	strb	r3, [r7, #15]
    break;
 800d454:	e00b      	b.n	800d46e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d456:	2303      	movs	r3, #3
 800d458:	73fb      	strb	r3, [r7, #15]
    break;
 800d45a:	e008      	b.n	800d46e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d45c:	2301      	movs	r3, #1
 800d45e:	73fb      	strb	r3, [r7, #15]
    break;
 800d460:	e005      	b.n	800d46e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d462:	2303      	movs	r3, #3
 800d464:	73fb      	strb	r3, [r7, #15]
    break;
 800d466:	e002      	b.n	800d46e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d468:	2303      	movs	r3, #3
 800d46a:	73fb      	strb	r3, [r7, #15]
    break;
 800d46c:	bf00      	nop
  }
  return usb_status;
 800d46e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d470:	4618      	mov	r0, r3
 800d472:	3714      	adds	r7, #20
 800d474:	46bd      	mov	sp, r7
 800d476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d47a:	4770      	bx	lr

0800d47c <__errno>:
 800d47c:	4b01      	ldr	r3, [pc, #4]	; (800d484 <__errno+0x8>)
 800d47e:	6818      	ldr	r0, [r3, #0]
 800d480:	4770      	bx	lr
 800d482:	bf00      	nop
 800d484:	20000130 	.word	0x20000130

0800d488 <__libc_init_array>:
 800d488:	b570      	push	{r4, r5, r6, lr}
 800d48a:	4d0d      	ldr	r5, [pc, #52]	; (800d4c0 <__libc_init_array+0x38>)
 800d48c:	4c0d      	ldr	r4, [pc, #52]	; (800d4c4 <__libc_init_array+0x3c>)
 800d48e:	1b64      	subs	r4, r4, r5
 800d490:	10a4      	asrs	r4, r4, #2
 800d492:	2600      	movs	r6, #0
 800d494:	42a6      	cmp	r6, r4
 800d496:	d109      	bne.n	800d4ac <__libc_init_array+0x24>
 800d498:	4d0b      	ldr	r5, [pc, #44]	; (800d4c8 <__libc_init_array+0x40>)
 800d49a:	4c0c      	ldr	r4, [pc, #48]	; (800d4cc <__libc_init_array+0x44>)
 800d49c:	f001 f816 	bl	800e4cc <_init>
 800d4a0:	1b64      	subs	r4, r4, r5
 800d4a2:	10a4      	asrs	r4, r4, #2
 800d4a4:	2600      	movs	r6, #0
 800d4a6:	42a6      	cmp	r6, r4
 800d4a8:	d105      	bne.n	800d4b6 <__libc_init_array+0x2e>
 800d4aa:	bd70      	pop	{r4, r5, r6, pc}
 800d4ac:	f855 3b04 	ldr.w	r3, [r5], #4
 800d4b0:	4798      	blx	r3
 800d4b2:	3601      	adds	r6, #1
 800d4b4:	e7ee      	b.n	800d494 <__libc_init_array+0xc>
 800d4b6:	f855 3b04 	ldr.w	r3, [r5], #4
 800d4ba:	4798      	blx	r3
 800d4bc:	3601      	adds	r6, #1
 800d4be:	e7f2      	b.n	800d4a6 <__libc_init_array+0x1e>
 800d4c0:	080306dc 	.word	0x080306dc
 800d4c4:	080306dc 	.word	0x080306dc
 800d4c8:	080306dc 	.word	0x080306dc
 800d4cc:	080306e0 	.word	0x080306e0

0800d4d0 <memset>:
 800d4d0:	4402      	add	r2, r0
 800d4d2:	4603      	mov	r3, r0
 800d4d4:	4293      	cmp	r3, r2
 800d4d6:	d100      	bne.n	800d4da <memset+0xa>
 800d4d8:	4770      	bx	lr
 800d4da:	f803 1b01 	strb.w	r1, [r3], #1
 800d4de:	e7f9      	b.n	800d4d4 <memset+0x4>

0800d4e0 <__sfputc_r>:
 800d4e0:	6893      	ldr	r3, [r2, #8]
 800d4e2:	3b01      	subs	r3, #1
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	b410      	push	{r4}
 800d4e8:	6093      	str	r3, [r2, #8]
 800d4ea:	da08      	bge.n	800d4fe <__sfputc_r+0x1e>
 800d4ec:	6994      	ldr	r4, [r2, #24]
 800d4ee:	42a3      	cmp	r3, r4
 800d4f0:	db01      	blt.n	800d4f6 <__sfputc_r+0x16>
 800d4f2:	290a      	cmp	r1, #10
 800d4f4:	d103      	bne.n	800d4fe <__sfputc_r+0x1e>
 800d4f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d4fa:	f000 bb17 	b.w	800db2c <__swbuf_r>
 800d4fe:	6813      	ldr	r3, [r2, #0]
 800d500:	1c58      	adds	r0, r3, #1
 800d502:	6010      	str	r0, [r2, #0]
 800d504:	7019      	strb	r1, [r3, #0]
 800d506:	4608      	mov	r0, r1
 800d508:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d50c:	4770      	bx	lr

0800d50e <__sfputs_r>:
 800d50e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d510:	4606      	mov	r6, r0
 800d512:	460f      	mov	r7, r1
 800d514:	4614      	mov	r4, r2
 800d516:	18d5      	adds	r5, r2, r3
 800d518:	42ac      	cmp	r4, r5
 800d51a:	d101      	bne.n	800d520 <__sfputs_r+0x12>
 800d51c:	2000      	movs	r0, #0
 800d51e:	e007      	b.n	800d530 <__sfputs_r+0x22>
 800d520:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d524:	463a      	mov	r2, r7
 800d526:	4630      	mov	r0, r6
 800d528:	f7ff ffda 	bl	800d4e0 <__sfputc_r>
 800d52c:	1c43      	adds	r3, r0, #1
 800d52e:	d1f3      	bne.n	800d518 <__sfputs_r+0xa>
 800d530:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d534 <_vfiprintf_r>:
 800d534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d538:	460d      	mov	r5, r1
 800d53a:	b09d      	sub	sp, #116	; 0x74
 800d53c:	4614      	mov	r4, r2
 800d53e:	4698      	mov	r8, r3
 800d540:	4606      	mov	r6, r0
 800d542:	b118      	cbz	r0, 800d54c <_vfiprintf_r+0x18>
 800d544:	6983      	ldr	r3, [r0, #24]
 800d546:	b90b      	cbnz	r3, 800d54c <_vfiprintf_r+0x18>
 800d548:	f000 fcca 	bl	800dee0 <__sinit>
 800d54c:	4b89      	ldr	r3, [pc, #548]	; (800d774 <_vfiprintf_r+0x240>)
 800d54e:	429d      	cmp	r5, r3
 800d550:	d11b      	bne.n	800d58a <_vfiprintf_r+0x56>
 800d552:	6875      	ldr	r5, [r6, #4]
 800d554:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d556:	07d9      	lsls	r1, r3, #31
 800d558:	d405      	bmi.n	800d566 <_vfiprintf_r+0x32>
 800d55a:	89ab      	ldrh	r3, [r5, #12]
 800d55c:	059a      	lsls	r2, r3, #22
 800d55e:	d402      	bmi.n	800d566 <_vfiprintf_r+0x32>
 800d560:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d562:	f000 fd5b 	bl	800e01c <__retarget_lock_acquire_recursive>
 800d566:	89ab      	ldrh	r3, [r5, #12]
 800d568:	071b      	lsls	r3, r3, #28
 800d56a:	d501      	bpl.n	800d570 <_vfiprintf_r+0x3c>
 800d56c:	692b      	ldr	r3, [r5, #16]
 800d56e:	b9eb      	cbnz	r3, 800d5ac <_vfiprintf_r+0x78>
 800d570:	4629      	mov	r1, r5
 800d572:	4630      	mov	r0, r6
 800d574:	f000 fb2c 	bl	800dbd0 <__swsetup_r>
 800d578:	b1c0      	cbz	r0, 800d5ac <_vfiprintf_r+0x78>
 800d57a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d57c:	07dc      	lsls	r4, r3, #31
 800d57e:	d50e      	bpl.n	800d59e <_vfiprintf_r+0x6a>
 800d580:	f04f 30ff 	mov.w	r0, #4294967295
 800d584:	b01d      	add	sp, #116	; 0x74
 800d586:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d58a:	4b7b      	ldr	r3, [pc, #492]	; (800d778 <_vfiprintf_r+0x244>)
 800d58c:	429d      	cmp	r5, r3
 800d58e:	d101      	bne.n	800d594 <_vfiprintf_r+0x60>
 800d590:	68b5      	ldr	r5, [r6, #8]
 800d592:	e7df      	b.n	800d554 <_vfiprintf_r+0x20>
 800d594:	4b79      	ldr	r3, [pc, #484]	; (800d77c <_vfiprintf_r+0x248>)
 800d596:	429d      	cmp	r5, r3
 800d598:	bf08      	it	eq
 800d59a:	68f5      	ldreq	r5, [r6, #12]
 800d59c:	e7da      	b.n	800d554 <_vfiprintf_r+0x20>
 800d59e:	89ab      	ldrh	r3, [r5, #12]
 800d5a0:	0598      	lsls	r0, r3, #22
 800d5a2:	d4ed      	bmi.n	800d580 <_vfiprintf_r+0x4c>
 800d5a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d5a6:	f000 fd3a 	bl	800e01e <__retarget_lock_release_recursive>
 800d5aa:	e7e9      	b.n	800d580 <_vfiprintf_r+0x4c>
 800d5ac:	2300      	movs	r3, #0
 800d5ae:	9309      	str	r3, [sp, #36]	; 0x24
 800d5b0:	2320      	movs	r3, #32
 800d5b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d5b6:	f8cd 800c 	str.w	r8, [sp, #12]
 800d5ba:	2330      	movs	r3, #48	; 0x30
 800d5bc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d780 <_vfiprintf_r+0x24c>
 800d5c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d5c4:	f04f 0901 	mov.w	r9, #1
 800d5c8:	4623      	mov	r3, r4
 800d5ca:	469a      	mov	sl, r3
 800d5cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d5d0:	b10a      	cbz	r2, 800d5d6 <_vfiprintf_r+0xa2>
 800d5d2:	2a25      	cmp	r2, #37	; 0x25
 800d5d4:	d1f9      	bne.n	800d5ca <_vfiprintf_r+0x96>
 800d5d6:	ebba 0b04 	subs.w	fp, sl, r4
 800d5da:	d00b      	beq.n	800d5f4 <_vfiprintf_r+0xc0>
 800d5dc:	465b      	mov	r3, fp
 800d5de:	4622      	mov	r2, r4
 800d5e0:	4629      	mov	r1, r5
 800d5e2:	4630      	mov	r0, r6
 800d5e4:	f7ff ff93 	bl	800d50e <__sfputs_r>
 800d5e8:	3001      	adds	r0, #1
 800d5ea:	f000 80aa 	beq.w	800d742 <_vfiprintf_r+0x20e>
 800d5ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d5f0:	445a      	add	r2, fp
 800d5f2:	9209      	str	r2, [sp, #36]	; 0x24
 800d5f4:	f89a 3000 	ldrb.w	r3, [sl]
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	f000 80a2 	beq.w	800d742 <_vfiprintf_r+0x20e>
 800d5fe:	2300      	movs	r3, #0
 800d600:	f04f 32ff 	mov.w	r2, #4294967295
 800d604:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d608:	f10a 0a01 	add.w	sl, sl, #1
 800d60c:	9304      	str	r3, [sp, #16]
 800d60e:	9307      	str	r3, [sp, #28]
 800d610:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d614:	931a      	str	r3, [sp, #104]	; 0x68
 800d616:	4654      	mov	r4, sl
 800d618:	2205      	movs	r2, #5
 800d61a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d61e:	4858      	ldr	r0, [pc, #352]	; (800d780 <_vfiprintf_r+0x24c>)
 800d620:	f7f2 fdde 	bl	80001e0 <memchr>
 800d624:	9a04      	ldr	r2, [sp, #16]
 800d626:	b9d8      	cbnz	r0, 800d660 <_vfiprintf_r+0x12c>
 800d628:	06d1      	lsls	r1, r2, #27
 800d62a:	bf44      	itt	mi
 800d62c:	2320      	movmi	r3, #32
 800d62e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d632:	0713      	lsls	r3, r2, #28
 800d634:	bf44      	itt	mi
 800d636:	232b      	movmi	r3, #43	; 0x2b
 800d638:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d63c:	f89a 3000 	ldrb.w	r3, [sl]
 800d640:	2b2a      	cmp	r3, #42	; 0x2a
 800d642:	d015      	beq.n	800d670 <_vfiprintf_r+0x13c>
 800d644:	9a07      	ldr	r2, [sp, #28]
 800d646:	4654      	mov	r4, sl
 800d648:	2000      	movs	r0, #0
 800d64a:	f04f 0c0a 	mov.w	ip, #10
 800d64e:	4621      	mov	r1, r4
 800d650:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d654:	3b30      	subs	r3, #48	; 0x30
 800d656:	2b09      	cmp	r3, #9
 800d658:	d94e      	bls.n	800d6f8 <_vfiprintf_r+0x1c4>
 800d65a:	b1b0      	cbz	r0, 800d68a <_vfiprintf_r+0x156>
 800d65c:	9207      	str	r2, [sp, #28]
 800d65e:	e014      	b.n	800d68a <_vfiprintf_r+0x156>
 800d660:	eba0 0308 	sub.w	r3, r0, r8
 800d664:	fa09 f303 	lsl.w	r3, r9, r3
 800d668:	4313      	orrs	r3, r2
 800d66a:	9304      	str	r3, [sp, #16]
 800d66c:	46a2      	mov	sl, r4
 800d66e:	e7d2      	b.n	800d616 <_vfiprintf_r+0xe2>
 800d670:	9b03      	ldr	r3, [sp, #12]
 800d672:	1d19      	adds	r1, r3, #4
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	9103      	str	r1, [sp, #12]
 800d678:	2b00      	cmp	r3, #0
 800d67a:	bfbb      	ittet	lt
 800d67c:	425b      	neglt	r3, r3
 800d67e:	f042 0202 	orrlt.w	r2, r2, #2
 800d682:	9307      	strge	r3, [sp, #28]
 800d684:	9307      	strlt	r3, [sp, #28]
 800d686:	bfb8      	it	lt
 800d688:	9204      	strlt	r2, [sp, #16]
 800d68a:	7823      	ldrb	r3, [r4, #0]
 800d68c:	2b2e      	cmp	r3, #46	; 0x2e
 800d68e:	d10c      	bne.n	800d6aa <_vfiprintf_r+0x176>
 800d690:	7863      	ldrb	r3, [r4, #1]
 800d692:	2b2a      	cmp	r3, #42	; 0x2a
 800d694:	d135      	bne.n	800d702 <_vfiprintf_r+0x1ce>
 800d696:	9b03      	ldr	r3, [sp, #12]
 800d698:	1d1a      	adds	r2, r3, #4
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	9203      	str	r2, [sp, #12]
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	bfb8      	it	lt
 800d6a2:	f04f 33ff 	movlt.w	r3, #4294967295
 800d6a6:	3402      	adds	r4, #2
 800d6a8:	9305      	str	r3, [sp, #20]
 800d6aa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d790 <_vfiprintf_r+0x25c>
 800d6ae:	7821      	ldrb	r1, [r4, #0]
 800d6b0:	2203      	movs	r2, #3
 800d6b2:	4650      	mov	r0, sl
 800d6b4:	f7f2 fd94 	bl	80001e0 <memchr>
 800d6b8:	b140      	cbz	r0, 800d6cc <_vfiprintf_r+0x198>
 800d6ba:	2340      	movs	r3, #64	; 0x40
 800d6bc:	eba0 000a 	sub.w	r0, r0, sl
 800d6c0:	fa03 f000 	lsl.w	r0, r3, r0
 800d6c4:	9b04      	ldr	r3, [sp, #16]
 800d6c6:	4303      	orrs	r3, r0
 800d6c8:	3401      	adds	r4, #1
 800d6ca:	9304      	str	r3, [sp, #16]
 800d6cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d6d0:	482c      	ldr	r0, [pc, #176]	; (800d784 <_vfiprintf_r+0x250>)
 800d6d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d6d6:	2206      	movs	r2, #6
 800d6d8:	f7f2 fd82 	bl	80001e0 <memchr>
 800d6dc:	2800      	cmp	r0, #0
 800d6de:	d03f      	beq.n	800d760 <_vfiprintf_r+0x22c>
 800d6e0:	4b29      	ldr	r3, [pc, #164]	; (800d788 <_vfiprintf_r+0x254>)
 800d6e2:	bb1b      	cbnz	r3, 800d72c <_vfiprintf_r+0x1f8>
 800d6e4:	9b03      	ldr	r3, [sp, #12]
 800d6e6:	3307      	adds	r3, #7
 800d6e8:	f023 0307 	bic.w	r3, r3, #7
 800d6ec:	3308      	adds	r3, #8
 800d6ee:	9303      	str	r3, [sp, #12]
 800d6f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d6f2:	443b      	add	r3, r7
 800d6f4:	9309      	str	r3, [sp, #36]	; 0x24
 800d6f6:	e767      	b.n	800d5c8 <_vfiprintf_r+0x94>
 800d6f8:	fb0c 3202 	mla	r2, ip, r2, r3
 800d6fc:	460c      	mov	r4, r1
 800d6fe:	2001      	movs	r0, #1
 800d700:	e7a5      	b.n	800d64e <_vfiprintf_r+0x11a>
 800d702:	2300      	movs	r3, #0
 800d704:	3401      	adds	r4, #1
 800d706:	9305      	str	r3, [sp, #20]
 800d708:	4619      	mov	r1, r3
 800d70a:	f04f 0c0a 	mov.w	ip, #10
 800d70e:	4620      	mov	r0, r4
 800d710:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d714:	3a30      	subs	r2, #48	; 0x30
 800d716:	2a09      	cmp	r2, #9
 800d718:	d903      	bls.n	800d722 <_vfiprintf_r+0x1ee>
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d0c5      	beq.n	800d6aa <_vfiprintf_r+0x176>
 800d71e:	9105      	str	r1, [sp, #20]
 800d720:	e7c3      	b.n	800d6aa <_vfiprintf_r+0x176>
 800d722:	fb0c 2101 	mla	r1, ip, r1, r2
 800d726:	4604      	mov	r4, r0
 800d728:	2301      	movs	r3, #1
 800d72a:	e7f0      	b.n	800d70e <_vfiprintf_r+0x1da>
 800d72c:	ab03      	add	r3, sp, #12
 800d72e:	9300      	str	r3, [sp, #0]
 800d730:	462a      	mov	r2, r5
 800d732:	4b16      	ldr	r3, [pc, #88]	; (800d78c <_vfiprintf_r+0x258>)
 800d734:	a904      	add	r1, sp, #16
 800d736:	4630      	mov	r0, r6
 800d738:	f3af 8000 	nop.w
 800d73c:	4607      	mov	r7, r0
 800d73e:	1c78      	adds	r0, r7, #1
 800d740:	d1d6      	bne.n	800d6f0 <_vfiprintf_r+0x1bc>
 800d742:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d744:	07d9      	lsls	r1, r3, #31
 800d746:	d405      	bmi.n	800d754 <_vfiprintf_r+0x220>
 800d748:	89ab      	ldrh	r3, [r5, #12]
 800d74a:	059a      	lsls	r2, r3, #22
 800d74c:	d402      	bmi.n	800d754 <_vfiprintf_r+0x220>
 800d74e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d750:	f000 fc65 	bl	800e01e <__retarget_lock_release_recursive>
 800d754:	89ab      	ldrh	r3, [r5, #12]
 800d756:	065b      	lsls	r3, r3, #25
 800d758:	f53f af12 	bmi.w	800d580 <_vfiprintf_r+0x4c>
 800d75c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d75e:	e711      	b.n	800d584 <_vfiprintf_r+0x50>
 800d760:	ab03      	add	r3, sp, #12
 800d762:	9300      	str	r3, [sp, #0]
 800d764:	462a      	mov	r2, r5
 800d766:	4b09      	ldr	r3, [pc, #36]	; (800d78c <_vfiprintf_r+0x258>)
 800d768:	a904      	add	r1, sp, #16
 800d76a:	4630      	mov	r0, r6
 800d76c:	f000 f88a 	bl	800d884 <_printf_i>
 800d770:	e7e4      	b.n	800d73c <_vfiprintf_r+0x208>
 800d772:	bf00      	nop
 800d774:	08030694 	.word	0x08030694
 800d778:	080306b4 	.word	0x080306b4
 800d77c:	08030674 	.word	0x08030674
 800d780:	08030640 	.word	0x08030640
 800d784:	0803064a 	.word	0x0803064a
 800d788:	00000000 	.word	0x00000000
 800d78c:	0800d50f 	.word	0x0800d50f
 800d790:	08030646 	.word	0x08030646

0800d794 <vfiprintf>:
 800d794:	4613      	mov	r3, r2
 800d796:	460a      	mov	r2, r1
 800d798:	4601      	mov	r1, r0
 800d79a:	4802      	ldr	r0, [pc, #8]	; (800d7a4 <vfiprintf+0x10>)
 800d79c:	6800      	ldr	r0, [r0, #0]
 800d79e:	f7ff bec9 	b.w	800d534 <_vfiprintf_r>
 800d7a2:	bf00      	nop
 800d7a4:	20000130 	.word	0x20000130

0800d7a8 <_printf_common>:
 800d7a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d7ac:	4616      	mov	r6, r2
 800d7ae:	4699      	mov	r9, r3
 800d7b0:	688a      	ldr	r2, [r1, #8]
 800d7b2:	690b      	ldr	r3, [r1, #16]
 800d7b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d7b8:	4293      	cmp	r3, r2
 800d7ba:	bfb8      	it	lt
 800d7bc:	4613      	movlt	r3, r2
 800d7be:	6033      	str	r3, [r6, #0]
 800d7c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d7c4:	4607      	mov	r7, r0
 800d7c6:	460c      	mov	r4, r1
 800d7c8:	b10a      	cbz	r2, 800d7ce <_printf_common+0x26>
 800d7ca:	3301      	adds	r3, #1
 800d7cc:	6033      	str	r3, [r6, #0]
 800d7ce:	6823      	ldr	r3, [r4, #0]
 800d7d0:	0699      	lsls	r1, r3, #26
 800d7d2:	bf42      	ittt	mi
 800d7d4:	6833      	ldrmi	r3, [r6, #0]
 800d7d6:	3302      	addmi	r3, #2
 800d7d8:	6033      	strmi	r3, [r6, #0]
 800d7da:	6825      	ldr	r5, [r4, #0]
 800d7dc:	f015 0506 	ands.w	r5, r5, #6
 800d7e0:	d106      	bne.n	800d7f0 <_printf_common+0x48>
 800d7e2:	f104 0a19 	add.w	sl, r4, #25
 800d7e6:	68e3      	ldr	r3, [r4, #12]
 800d7e8:	6832      	ldr	r2, [r6, #0]
 800d7ea:	1a9b      	subs	r3, r3, r2
 800d7ec:	42ab      	cmp	r3, r5
 800d7ee:	dc26      	bgt.n	800d83e <_printf_common+0x96>
 800d7f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d7f4:	1e13      	subs	r3, r2, #0
 800d7f6:	6822      	ldr	r2, [r4, #0]
 800d7f8:	bf18      	it	ne
 800d7fa:	2301      	movne	r3, #1
 800d7fc:	0692      	lsls	r2, r2, #26
 800d7fe:	d42b      	bmi.n	800d858 <_printf_common+0xb0>
 800d800:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d804:	4649      	mov	r1, r9
 800d806:	4638      	mov	r0, r7
 800d808:	47c0      	blx	r8
 800d80a:	3001      	adds	r0, #1
 800d80c:	d01e      	beq.n	800d84c <_printf_common+0xa4>
 800d80e:	6823      	ldr	r3, [r4, #0]
 800d810:	68e5      	ldr	r5, [r4, #12]
 800d812:	6832      	ldr	r2, [r6, #0]
 800d814:	f003 0306 	and.w	r3, r3, #6
 800d818:	2b04      	cmp	r3, #4
 800d81a:	bf08      	it	eq
 800d81c:	1aad      	subeq	r5, r5, r2
 800d81e:	68a3      	ldr	r3, [r4, #8]
 800d820:	6922      	ldr	r2, [r4, #16]
 800d822:	bf0c      	ite	eq
 800d824:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d828:	2500      	movne	r5, #0
 800d82a:	4293      	cmp	r3, r2
 800d82c:	bfc4      	itt	gt
 800d82e:	1a9b      	subgt	r3, r3, r2
 800d830:	18ed      	addgt	r5, r5, r3
 800d832:	2600      	movs	r6, #0
 800d834:	341a      	adds	r4, #26
 800d836:	42b5      	cmp	r5, r6
 800d838:	d11a      	bne.n	800d870 <_printf_common+0xc8>
 800d83a:	2000      	movs	r0, #0
 800d83c:	e008      	b.n	800d850 <_printf_common+0xa8>
 800d83e:	2301      	movs	r3, #1
 800d840:	4652      	mov	r2, sl
 800d842:	4649      	mov	r1, r9
 800d844:	4638      	mov	r0, r7
 800d846:	47c0      	blx	r8
 800d848:	3001      	adds	r0, #1
 800d84a:	d103      	bne.n	800d854 <_printf_common+0xac>
 800d84c:	f04f 30ff 	mov.w	r0, #4294967295
 800d850:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d854:	3501      	adds	r5, #1
 800d856:	e7c6      	b.n	800d7e6 <_printf_common+0x3e>
 800d858:	18e1      	adds	r1, r4, r3
 800d85a:	1c5a      	adds	r2, r3, #1
 800d85c:	2030      	movs	r0, #48	; 0x30
 800d85e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d862:	4422      	add	r2, r4
 800d864:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d868:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d86c:	3302      	adds	r3, #2
 800d86e:	e7c7      	b.n	800d800 <_printf_common+0x58>
 800d870:	2301      	movs	r3, #1
 800d872:	4622      	mov	r2, r4
 800d874:	4649      	mov	r1, r9
 800d876:	4638      	mov	r0, r7
 800d878:	47c0      	blx	r8
 800d87a:	3001      	adds	r0, #1
 800d87c:	d0e6      	beq.n	800d84c <_printf_common+0xa4>
 800d87e:	3601      	adds	r6, #1
 800d880:	e7d9      	b.n	800d836 <_printf_common+0x8e>
	...

0800d884 <_printf_i>:
 800d884:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d888:	7e0f      	ldrb	r7, [r1, #24]
 800d88a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d88c:	2f78      	cmp	r7, #120	; 0x78
 800d88e:	4691      	mov	r9, r2
 800d890:	4680      	mov	r8, r0
 800d892:	460c      	mov	r4, r1
 800d894:	469a      	mov	sl, r3
 800d896:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d89a:	d807      	bhi.n	800d8ac <_printf_i+0x28>
 800d89c:	2f62      	cmp	r7, #98	; 0x62
 800d89e:	d80a      	bhi.n	800d8b6 <_printf_i+0x32>
 800d8a0:	2f00      	cmp	r7, #0
 800d8a2:	f000 80d8 	beq.w	800da56 <_printf_i+0x1d2>
 800d8a6:	2f58      	cmp	r7, #88	; 0x58
 800d8a8:	f000 80a3 	beq.w	800d9f2 <_printf_i+0x16e>
 800d8ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d8b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d8b4:	e03a      	b.n	800d92c <_printf_i+0xa8>
 800d8b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d8ba:	2b15      	cmp	r3, #21
 800d8bc:	d8f6      	bhi.n	800d8ac <_printf_i+0x28>
 800d8be:	a101      	add	r1, pc, #4	; (adr r1, 800d8c4 <_printf_i+0x40>)
 800d8c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d8c4:	0800d91d 	.word	0x0800d91d
 800d8c8:	0800d931 	.word	0x0800d931
 800d8cc:	0800d8ad 	.word	0x0800d8ad
 800d8d0:	0800d8ad 	.word	0x0800d8ad
 800d8d4:	0800d8ad 	.word	0x0800d8ad
 800d8d8:	0800d8ad 	.word	0x0800d8ad
 800d8dc:	0800d931 	.word	0x0800d931
 800d8e0:	0800d8ad 	.word	0x0800d8ad
 800d8e4:	0800d8ad 	.word	0x0800d8ad
 800d8e8:	0800d8ad 	.word	0x0800d8ad
 800d8ec:	0800d8ad 	.word	0x0800d8ad
 800d8f0:	0800da3d 	.word	0x0800da3d
 800d8f4:	0800d961 	.word	0x0800d961
 800d8f8:	0800da1f 	.word	0x0800da1f
 800d8fc:	0800d8ad 	.word	0x0800d8ad
 800d900:	0800d8ad 	.word	0x0800d8ad
 800d904:	0800da5f 	.word	0x0800da5f
 800d908:	0800d8ad 	.word	0x0800d8ad
 800d90c:	0800d961 	.word	0x0800d961
 800d910:	0800d8ad 	.word	0x0800d8ad
 800d914:	0800d8ad 	.word	0x0800d8ad
 800d918:	0800da27 	.word	0x0800da27
 800d91c:	682b      	ldr	r3, [r5, #0]
 800d91e:	1d1a      	adds	r2, r3, #4
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	602a      	str	r2, [r5, #0]
 800d924:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d928:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d92c:	2301      	movs	r3, #1
 800d92e:	e0a3      	b.n	800da78 <_printf_i+0x1f4>
 800d930:	6820      	ldr	r0, [r4, #0]
 800d932:	6829      	ldr	r1, [r5, #0]
 800d934:	0606      	lsls	r6, r0, #24
 800d936:	f101 0304 	add.w	r3, r1, #4
 800d93a:	d50a      	bpl.n	800d952 <_printf_i+0xce>
 800d93c:	680e      	ldr	r6, [r1, #0]
 800d93e:	602b      	str	r3, [r5, #0]
 800d940:	2e00      	cmp	r6, #0
 800d942:	da03      	bge.n	800d94c <_printf_i+0xc8>
 800d944:	232d      	movs	r3, #45	; 0x2d
 800d946:	4276      	negs	r6, r6
 800d948:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d94c:	485e      	ldr	r0, [pc, #376]	; (800dac8 <_printf_i+0x244>)
 800d94e:	230a      	movs	r3, #10
 800d950:	e019      	b.n	800d986 <_printf_i+0x102>
 800d952:	680e      	ldr	r6, [r1, #0]
 800d954:	602b      	str	r3, [r5, #0]
 800d956:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d95a:	bf18      	it	ne
 800d95c:	b236      	sxthne	r6, r6
 800d95e:	e7ef      	b.n	800d940 <_printf_i+0xbc>
 800d960:	682b      	ldr	r3, [r5, #0]
 800d962:	6820      	ldr	r0, [r4, #0]
 800d964:	1d19      	adds	r1, r3, #4
 800d966:	6029      	str	r1, [r5, #0]
 800d968:	0601      	lsls	r1, r0, #24
 800d96a:	d501      	bpl.n	800d970 <_printf_i+0xec>
 800d96c:	681e      	ldr	r6, [r3, #0]
 800d96e:	e002      	b.n	800d976 <_printf_i+0xf2>
 800d970:	0646      	lsls	r6, r0, #25
 800d972:	d5fb      	bpl.n	800d96c <_printf_i+0xe8>
 800d974:	881e      	ldrh	r6, [r3, #0]
 800d976:	4854      	ldr	r0, [pc, #336]	; (800dac8 <_printf_i+0x244>)
 800d978:	2f6f      	cmp	r7, #111	; 0x6f
 800d97a:	bf0c      	ite	eq
 800d97c:	2308      	moveq	r3, #8
 800d97e:	230a      	movne	r3, #10
 800d980:	2100      	movs	r1, #0
 800d982:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d986:	6865      	ldr	r5, [r4, #4]
 800d988:	60a5      	str	r5, [r4, #8]
 800d98a:	2d00      	cmp	r5, #0
 800d98c:	bfa2      	ittt	ge
 800d98e:	6821      	ldrge	r1, [r4, #0]
 800d990:	f021 0104 	bicge.w	r1, r1, #4
 800d994:	6021      	strge	r1, [r4, #0]
 800d996:	b90e      	cbnz	r6, 800d99c <_printf_i+0x118>
 800d998:	2d00      	cmp	r5, #0
 800d99a:	d04d      	beq.n	800da38 <_printf_i+0x1b4>
 800d99c:	4615      	mov	r5, r2
 800d99e:	fbb6 f1f3 	udiv	r1, r6, r3
 800d9a2:	fb03 6711 	mls	r7, r3, r1, r6
 800d9a6:	5dc7      	ldrb	r7, [r0, r7]
 800d9a8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d9ac:	4637      	mov	r7, r6
 800d9ae:	42bb      	cmp	r3, r7
 800d9b0:	460e      	mov	r6, r1
 800d9b2:	d9f4      	bls.n	800d99e <_printf_i+0x11a>
 800d9b4:	2b08      	cmp	r3, #8
 800d9b6:	d10b      	bne.n	800d9d0 <_printf_i+0x14c>
 800d9b8:	6823      	ldr	r3, [r4, #0]
 800d9ba:	07de      	lsls	r6, r3, #31
 800d9bc:	d508      	bpl.n	800d9d0 <_printf_i+0x14c>
 800d9be:	6923      	ldr	r3, [r4, #16]
 800d9c0:	6861      	ldr	r1, [r4, #4]
 800d9c2:	4299      	cmp	r1, r3
 800d9c4:	bfde      	ittt	le
 800d9c6:	2330      	movle	r3, #48	; 0x30
 800d9c8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d9cc:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d9d0:	1b52      	subs	r2, r2, r5
 800d9d2:	6122      	str	r2, [r4, #16]
 800d9d4:	f8cd a000 	str.w	sl, [sp]
 800d9d8:	464b      	mov	r3, r9
 800d9da:	aa03      	add	r2, sp, #12
 800d9dc:	4621      	mov	r1, r4
 800d9de:	4640      	mov	r0, r8
 800d9e0:	f7ff fee2 	bl	800d7a8 <_printf_common>
 800d9e4:	3001      	adds	r0, #1
 800d9e6:	d14c      	bne.n	800da82 <_printf_i+0x1fe>
 800d9e8:	f04f 30ff 	mov.w	r0, #4294967295
 800d9ec:	b004      	add	sp, #16
 800d9ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d9f2:	4835      	ldr	r0, [pc, #212]	; (800dac8 <_printf_i+0x244>)
 800d9f4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d9f8:	6829      	ldr	r1, [r5, #0]
 800d9fa:	6823      	ldr	r3, [r4, #0]
 800d9fc:	f851 6b04 	ldr.w	r6, [r1], #4
 800da00:	6029      	str	r1, [r5, #0]
 800da02:	061d      	lsls	r5, r3, #24
 800da04:	d514      	bpl.n	800da30 <_printf_i+0x1ac>
 800da06:	07df      	lsls	r7, r3, #31
 800da08:	bf44      	itt	mi
 800da0a:	f043 0320 	orrmi.w	r3, r3, #32
 800da0e:	6023      	strmi	r3, [r4, #0]
 800da10:	b91e      	cbnz	r6, 800da1a <_printf_i+0x196>
 800da12:	6823      	ldr	r3, [r4, #0]
 800da14:	f023 0320 	bic.w	r3, r3, #32
 800da18:	6023      	str	r3, [r4, #0]
 800da1a:	2310      	movs	r3, #16
 800da1c:	e7b0      	b.n	800d980 <_printf_i+0xfc>
 800da1e:	6823      	ldr	r3, [r4, #0]
 800da20:	f043 0320 	orr.w	r3, r3, #32
 800da24:	6023      	str	r3, [r4, #0]
 800da26:	2378      	movs	r3, #120	; 0x78
 800da28:	4828      	ldr	r0, [pc, #160]	; (800dacc <_printf_i+0x248>)
 800da2a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800da2e:	e7e3      	b.n	800d9f8 <_printf_i+0x174>
 800da30:	0659      	lsls	r1, r3, #25
 800da32:	bf48      	it	mi
 800da34:	b2b6      	uxthmi	r6, r6
 800da36:	e7e6      	b.n	800da06 <_printf_i+0x182>
 800da38:	4615      	mov	r5, r2
 800da3a:	e7bb      	b.n	800d9b4 <_printf_i+0x130>
 800da3c:	682b      	ldr	r3, [r5, #0]
 800da3e:	6826      	ldr	r6, [r4, #0]
 800da40:	6961      	ldr	r1, [r4, #20]
 800da42:	1d18      	adds	r0, r3, #4
 800da44:	6028      	str	r0, [r5, #0]
 800da46:	0635      	lsls	r5, r6, #24
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	d501      	bpl.n	800da50 <_printf_i+0x1cc>
 800da4c:	6019      	str	r1, [r3, #0]
 800da4e:	e002      	b.n	800da56 <_printf_i+0x1d2>
 800da50:	0670      	lsls	r0, r6, #25
 800da52:	d5fb      	bpl.n	800da4c <_printf_i+0x1c8>
 800da54:	8019      	strh	r1, [r3, #0]
 800da56:	2300      	movs	r3, #0
 800da58:	6123      	str	r3, [r4, #16]
 800da5a:	4615      	mov	r5, r2
 800da5c:	e7ba      	b.n	800d9d4 <_printf_i+0x150>
 800da5e:	682b      	ldr	r3, [r5, #0]
 800da60:	1d1a      	adds	r2, r3, #4
 800da62:	602a      	str	r2, [r5, #0]
 800da64:	681d      	ldr	r5, [r3, #0]
 800da66:	6862      	ldr	r2, [r4, #4]
 800da68:	2100      	movs	r1, #0
 800da6a:	4628      	mov	r0, r5
 800da6c:	f7f2 fbb8 	bl	80001e0 <memchr>
 800da70:	b108      	cbz	r0, 800da76 <_printf_i+0x1f2>
 800da72:	1b40      	subs	r0, r0, r5
 800da74:	6060      	str	r0, [r4, #4]
 800da76:	6863      	ldr	r3, [r4, #4]
 800da78:	6123      	str	r3, [r4, #16]
 800da7a:	2300      	movs	r3, #0
 800da7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800da80:	e7a8      	b.n	800d9d4 <_printf_i+0x150>
 800da82:	6923      	ldr	r3, [r4, #16]
 800da84:	462a      	mov	r2, r5
 800da86:	4649      	mov	r1, r9
 800da88:	4640      	mov	r0, r8
 800da8a:	47d0      	blx	sl
 800da8c:	3001      	adds	r0, #1
 800da8e:	d0ab      	beq.n	800d9e8 <_printf_i+0x164>
 800da90:	6823      	ldr	r3, [r4, #0]
 800da92:	079b      	lsls	r3, r3, #30
 800da94:	d413      	bmi.n	800dabe <_printf_i+0x23a>
 800da96:	68e0      	ldr	r0, [r4, #12]
 800da98:	9b03      	ldr	r3, [sp, #12]
 800da9a:	4298      	cmp	r0, r3
 800da9c:	bfb8      	it	lt
 800da9e:	4618      	movlt	r0, r3
 800daa0:	e7a4      	b.n	800d9ec <_printf_i+0x168>
 800daa2:	2301      	movs	r3, #1
 800daa4:	4632      	mov	r2, r6
 800daa6:	4649      	mov	r1, r9
 800daa8:	4640      	mov	r0, r8
 800daaa:	47d0      	blx	sl
 800daac:	3001      	adds	r0, #1
 800daae:	d09b      	beq.n	800d9e8 <_printf_i+0x164>
 800dab0:	3501      	adds	r5, #1
 800dab2:	68e3      	ldr	r3, [r4, #12]
 800dab4:	9903      	ldr	r1, [sp, #12]
 800dab6:	1a5b      	subs	r3, r3, r1
 800dab8:	42ab      	cmp	r3, r5
 800daba:	dcf2      	bgt.n	800daa2 <_printf_i+0x21e>
 800dabc:	e7eb      	b.n	800da96 <_printf_i+0x212>
 800dabe:	2500      	movs	r5, #0
 800dac0:	f104 0619 	add.w	r6, r4, #25
 800dac4:	e7f5      	b.n	800dab2 <_printf_i+0x22e>
 800dac6:	bf00      	nop
 800dac8:	08030651 	.word	0x08030651
 800dacc:	08030662 	.word	0x08030662

0800dad0 <iprintf>:
 800dad0:	b40f      	push	{r0, r1, r2, r3}
 800dad2:	4b0a      	ldr	r3, [pc, #40]	; (800dafc <iprintf+0x2c>)
 800dad4:	b513      	push	{r0, r1, r4, lr}
 800dad6:	681c      	ldr	r4, [r3, #0]
 800dad8:	b124      	cbz	r4, 800dae4 <iprintf+0x14>
 800dada:	69a3      	ldr	r3, [r4, #24]
 800dadc:	b913      	cbnz	r3, 800dae4 <iprintf+0x14>
 800dade:	4620      	mov	r0, r4
 800dae0:	f000 f9fe 	bl	800dee0 <__sinit>
 800dae4:	ab05      	add	r3, sp, #20
 800dae6:	9a04      	ldr	r2, [sp, #16]
 800dae8:	68a1      	ldr	r1, [r4, #8]
 800daea:	9301      	str	r3, [sp, #4]
 800daec:	4620      	mov	r0, r4
 800daee:	f7ff fd21 	bl	800d534 <_vfiprintf_r>
 800daf2:	b002      	add	sp, #8
 800daf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800daf8:	b004      	add	sp, #16
 800dafa:	4770      	bx	lr
 800dafc:	20000130 	.word	0x20000130

0800db00 <putchar>:
 800db00:	4b09      	ldr	r3, [pc, #36]	; (800db28 <putchar+0x28>)
 800db02:	b513      	push	{r0, r1, r4, lr}
 800db04:	681c      	ldr	r4, [r3, #0]
 800db06:	4601      	mov	r1, r0
 800db08:	b134      	cbz	r4, 800db18 <putchar+0x18>
 800db0a:	69a3      	ldr	r3, [r4, #24]
 800db0c:	b923      	cbnz	r3, 800db18 <putchar+0x18>
 800db0e:	9001      	str	r0, [sp, #4]
 800db10:	4620      	mov	r0, r4
 800db12:	f000 f9e5 	bl	800dee0 <__sinit>
 800db16:	9901      	ldr	r1, [sp, #4]
 800db18:	68a2      	ldr	r2, [r4, #8]
 800db1a:	4620      	mov	r0, r4
 800db1c:	b002      	add	sp, #8
 800db1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800db22:	f000 bbc3 	b.w	800e2ac <_putc_r>
 800db26:	bf00      	nop
 800db28:	20000130 	.word	0x20000130

0800db2c <__swbuf_r>:
 800db2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db2e:	460e      	mov	r6, r1
 800db30:	4614      	mov	r4, r2
 800db32:	4605      	mov	r5, r0
 800db34:	b118      	cbz	r0, 800db3e <__swbuf_r+0x12>
 800db36:	6983      	ldr	r3, [r0, #24]
 800db38:	b90b      	cbnz	r3, 800db3e <__swbuf_r+0x12>
 800db3a:	f000 f9d1 	bl	800dee0 <__sinit>
 800db3e:	4b21      	ldr	r3, [pc, #132]	; (800dbc4 <__swbuf_r+0x98>)
 800db40:	429c      	cmp	r4, r3
 800db42:	d12b      	bne.n	800db9c <__swbuf_r+0x70>
 800db44:	686c      	ldr	r4, [r5, #4]
 800db46:	69a3      	ldr	r3, [r4, #24]
 800db48:	60a3      	str	r3, [r4, #8]
 800db4a:	89a3      	ldrh	r3, [r4, #12]
 800db4c:	071a      	lsls	r2, r3, #28
 800db4e:	d52f      	bpl.n	800dbb0 <__swbuf_r+0x84>
 800db50:	6923      	ldr	r3, [r4, #16]
 800db52:	b36b      	cbz	r3, 800dbb0 <__swbuf_r+0x84>
 800db54:	6923      	ldr	r3, [r4, #16]
 800db56:	6820      	ldr	r0, [r4, #0]
 800db58:	1ac0      	subs	r0, r0, r3
 800db5a:	6963      	ldr	r3, [r4, #20]
 800db5c:	b2f6      	uxtb	r6, r6
 800db5e:	4283      	cmp	r3, r0
 800db60:	4637      	mov	r7, r6
 800db62:	dc04      	bgt.n	800db6e <__swbuf_r+0x42>
 800db64:	4621      	mov	r1, r4
 800db66:	4628      	mov	r0, r5
 800db68:	f000 f926 	bl	800ddb8 <_fflush_r>
 800db6c:	bb30      	cbnz	r0, 800dbbc <__swbuf_r+0x90>
 800db6e:	68a3      	ldr	r3, [r4, #8]
 800db70:	3b01      	subs	r3, #1
 800db72:	60a3      	str	r3, [r4, #8]
 800db74:	6823      	ldr	r3, [r4, #0]
 800db76:	1c5a      	adds	r2, r3, #1
 800db78:	6022      	str	r2, [r4, #0]
 800db7a:	701e      	strb	r6, [r3, #0]
 800db7c:	6963      	ldr	r3, [r4, #20]
 800db7e:	3001      	adds	r0, #1
 800db80:	4283      	cmp	r3, r0
 800db82:	d004      	beq.n	800db8e <__swbuf_r+0x62>
 800db84:	89a3      	ldrh	r3, [r4, #12]
 800db86:	07db      	lsls	r3, r3, #31
 800db88:	d506      	bpl.n	800db98 <__swbuf_r+0x6c>
 800db8a:	2e0a      	cmp	r6, #10
 800db8c:	d104      	bne.n	800db98 <__swbuf_r+0x6c>
 800db8e:	4621      	mov	r1, r4
 800db90:	4628      	mov	r0, r5
 800db92:	f000 f911 	bl	800ddb8 <_fflush_r>
 800db96:	b988      	cbnz	r0, 800dbbc <__swbuf_r+0x90>
 800db98:	4638      	mov	r0, r7
 800db9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800db9c:	4b0a      	ldr	r3, [pc, #40]	; (800dbc8 <__swbuf_r+0x9c>)
 800db9e:	429c      	cmp	r4, r3
 800dba0:	d101      	bne.n	800dba6 <__swbuf_r+0x7a>
 800dba2:	68ac      	ldr	r4, [r5, #8]
 800dba4:	e7cf      	b.n	800db46 <__swbuf_r+0x1a>
 800dba6:	4b09      	ldr	r3, [pc, #36]	; (800dbcc <__swbuf_r+0xa0>)
 800dba8:	429c      	cmp	r4, r3
 800dbaa:	bf08      	it	eq
 800dbac:	68ec      	ldreq	r4, [r5, #12]
 800dbae:	e7ca      	b.n	800db46 <__swbuf_r+0x1a>
 800dbb0:	4621      	mov	r1, r4
 800dbb2:	4628      	mov	r0, r5
 800dbb4:	f000 f80c 	bl	800dbd0 <__swsetup_r>
 800dbb8:	2800      	cmp	r0, #0
 800dbba:	d0cb      	beq.n	800db54 <__swbuf_r+0x28>
 800dbbc:	f04f 37ff 	mov.w	r7, #4294967295
 800dbc0:	e7ea      	b.n	800db98 <__swbuf_r+0x6c>
 800dbc2:	bf00      	nop
 800dbc4:	08030694 	.word	0x08030694
 800dbc8:	080306b4 	.word	0x080306b4
 800dbcc:	08030674 	.word	0x08030674

0800dbd0 <__swsetup_r>:
 800dbd0:	4b32      	ldr	r3, [pc, #200]	; (800dc9c <__swsetup_r+0xcc>)
 800dbd2:	b570      	push	{r4, r5, r6, lr}
 800dbd4:	681d      	ldr	r5, [r3, #0]
 800dbd6:	4606      	mov	r6, r0
 800dbd8:	460c      	mov	r4, r1
 800dbda:	b125      	cbz	r5, 800dbe6 <__swsetup_r+0x16>
 800dbdc:	69ab      	ldr	r3, [r5, #24]
 800dbde:	b913      	cbnz	r3, 800dbe6 <__swsetup_r+0x16>
 800dbe0:	4628      	mov	r0, r5
 800dbe2:	f000 f97d 	bl	800dee0 <__sinit>
 800dbe6:	4b2e      	ldr	r3, [pc, #184]	; (800dca0 <__swsetup_r+0xd0>)
 800dbe8:	429c      	cmp	r4, r3
 800dbea:	d10f      	bne.n	800dc0c <__swsetup_r+0x3c>
 800dbec:	686c      	ldr	r4, [r5, #4]
 800dbee:	89a3      	ldrh	r3, [r4, #12]
 800dbf0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dbf4:	0719      	lsls	r1, r3, #28
 800dbf6:	d42c      	bmi.n	800dc52 <__swsetup_r+0x82>
 800dbf8:	06dd      	lsls	r5, r3, #27
 800dbfa:	d411      	bmi.n	800dc20 <__swsetup_r+0x50>
 800dbfc:	2309      	movs	r3, #9
 800dbfe:	6033      	str	r3, [r6, #0]
 800dc00:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800dc04:	81a3      	strh	r3, [r4, #12]
 800dc06:	f04f 30ff 	mov.w	r0, #4294967295
 800dc0a:	e03e      	b.n	800dc8a <__swsetup_r+0xba>
 800dc0c:	4b25      	ldr	r3, [pc, #148]	; (800dca4 <__swsetup_r+0xd4>)
 800dc0e:	429c      	cmp	r4, r3
 800dc10:	d101      	bne.n	800dc16 <__swsetup_r+0x46>
 800dc12:	68ac      	ldr	r4, [r5, #8]
 800dc14:	e7eb      	b.n	800dbee <__swsetup_r+0x1e>
 800dc16:	4b24      	ldr	r3, [pc, #144]	; (800dca8 <__swsetup_r+0xd8>)
 800dc18:	429c      	cmp	r4, r3
 800dc1a:	bf08      	it	eq
 800dc1c:	68ec      	ldreq	r4, [r5, #12]
 800dc1e:	e7e6      	b.n	800dbee <__swsetup_r+0x1e>
 800dc20:	0758      	lsls	r0, r3, #29
 800dc22:	d512      	bpl.n	800dc4a <__swsetup_r+0x7a>
 800dc24:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dc26:	b141      	cbz	r1, 800dc3a <__swsetup_r+0x6a>
 800dc28:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dc2c:	4299      	cmp	r1, r3
 800dc2e:	d002      	beq.n	800dc36 <__swsetup_r+0x66>
 800dc30:	4630      	mov	r0, r6
 800dc32:	f000 fa5b 	bl	800e0ec <_free_r>
 800dc36:	2300      	movs	r3, #0
 800dc38:	6363      	str	r3, [r4, #52]	; 0x34
 800dc3a:	89a3      	ldrh	r3, [r4, #12]
 800dc3c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800dc40:	81a3      	strh	r3, [r4, #12]
 800dc42:	2300      	movs	r3, #0
 800dc44:	6063      	str	r3, [r4, #4]
 800dc46:	6923      	ldr	r3, [r4, #16]
 800dc48:	6023      	str	r3, [r4, #0]
 800dc4a:	89a3      	ldrh	r3, [r4, #12]
 800dc4c:	f043 0308 	orr.w	r3, r3, #8
 800dc50:	81a3      	strh	r3, [r4, #12]
 800dc52:	6923      	ldr	r3, [r4, #16]
 800dc54:	b94b      	cbnz	r3, 800dc6a <__swsetup_r+0x9a>
 800dc56:	89a3      	ldrh	r3, [r4, #12]
 800dc58:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800dc5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dc60:	d003      	beq.n	800dc6a <__swsetup_r+0x9a>
 800dc62:	4621      	mov	r1, r4
 800dc64:	4630      	mov	r0, r6
 800dc66:	f000 fa01 	bl	800e06c <__smakebuf_r>
 800dc6a:	89a0      	ldrh	r0, [r4, #12]
 800dc6c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dc70:	f010 0301 	ands.w	r3, r0, #1
 800dc74:	d00a      	beq.n	800dc8c <__swsetup_r+0xbc>
 800dc76:	2300      	movs	r3, #0
 800dc78:	60a3      	str	r3, [r4, #8]
 800dc7a:	6963      	ldr	r3, [r4, #20]
 800dc7c:	425b      	negs	r3, r3
 800dc7e:	61a3      	str	r3, [r4, #24]
 800dc80:	6923      	ldr	r3, [r4, #16]
 800dc82:	b943      	cbnz	r3, 800dc96 <__swsetup_r+0xc6>
 800dc84:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800dc88:	d1ba      	bne.n	800dc00 <__swsetup_r+0x30>
 800dc8a:	bd70      	pop	{r4, r5, r6, pc}
 800dc8c:	0781      	lsls	r1, r0, #30
 800dc8e:	bf58      	it	pl
 800dc90:	6963      	ldrpl	r3, [r4, #20]
 800dc92:	60a3      	str	r3, [r4, #8]
 800dc94:	e7f4      	b.n	800dc80 <__swsetup_r+0xb0>
 800dc96:	2000      	movs	r0, #0
 800dc98:	e7f7      	b.n	800dc8a <__swsetup_r+0xba>
 800dc9a:	bf00      	nop
 800dc9c:	20000130 	.word	0x20000130
 800dca0:	08030694 	.word	0x08030694
 800dca4:	080306b4 	.word	0x080306b4
 800dca8:	08030674 	.word	0x08030674

0800dcac <__sflush_r>:
 800dcac:	898a      	ldrh	r2, [r1, #12]
 800dcae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dcb2:	4605      	mov	r5, r0
 800dcb4:	0710      	lsls	r0, r2, #28
 800dcb6:	460c      	mov	r4, r1
 800dcb8:	d458      	bmi.n	800dd6c <__sflush_r+0xc0>
 800dcba:	684b      	ldr	r3, [r1, #4]
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	dc05      	bgt.n	800dccc <__sflush_r+0x20>
 800dcc0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	dc02      	bgt.n	800dccc <__sflush_r+0x20>
 800dcc6:	2000      	movs	r0, #0
 800dcc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dccc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dcce:	2e00      	cmp	r6, #0
 800dcd0:	d0f9      	beq.n	800dcc6 <__sflush_r+0x1a>
 800dcd2:	2300      	movs	r3, #0
 800dcd4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800dcd8:	682f      	ldr	r7, [r5, #0]
 800dcda:	602b      	str	r3, [r5, #0]
 800dcdc:	d032      	beq.n	800dd44 <__sflush_r+0x98>
 800dcde:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800dce0:	89a3      	ldrh	r3, [r4, #12]
 800dce2:	075a      	lsls	r2, r3, #29
 800dce4:	d505      	bpl.n	800dcf2 <__sflush_r+0x46>
 800dce6:	6863      	ldr	r3, [r4, #4]
 800dce8:	1ac0      	subs	r0, r0, r3
 800dcea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800dcec:	b10b      	cbz	r3, 800dcf2 <__sflush_r+0x46>
 800dcee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800dcf0:	1ac0      	subs	r0, r0, r3
 800dcf2:	2300      	movs	r3, #0
 800dcf4:	4602      	mov	r2, r0
 800dcf6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dcf8:	6a21      	ldr	r1, [r4, #32]
 800dcfa:	4628      	mov	r0, r5
 800dcfc:	47b0      	blx	r6
 800dcfe:	1c43      	adds	r3, r0, #1
 800dd00:	89a3      	ldrh	r3, [r4, #12]
 800dd02:	d106      	bne.n	800dd12 <__sflush_r+0x66>
 800dd04:	6829      	ldr	r1, [r5, #0]
 800dd06:	291d      	cmp	r1, #29
 800dd08:	d82c      	bhi.n	800dd64 <__sflush_r+0xb8>
 800dd0a:	4a2a      	ldr	r2, [pc, #168]	; (800ddb4 <__sflush_r+0x108>)
 800dd0c:	40ca      	lsrs	r2, r1
 800dd0e:	07d6      	lsls	r6, r2, #31
 800dd10:	d528      	bpl.n	800dd64 <__sflush_r+0xb8>
 800dd12:	2200      	movs	r2, #0
 800dd14:	6062      	str	r2, [r4, #4]
 800dd16:	04d9      	lsls	r1, r3, #19
 800dd18:	6922      	ldr	r2, [r4, #16]
 800dd1a:	6022      	str	r2, [r4, #0]
 800dd1c:	d504      	bpl.n	800dd28 <__sflush_r+0x7c>
 800dd1e:	1c42      	adds	r2, r0, #1
 800dd20:	d101      	bne.n	800dd26 <__sflush_r+0x7a>
 800dd22:	682b      	ldr	r3, [r5, #0]
 800dd24:	b903      	cbnz	r3, 800dd28 <__sflush_r+0x7c>
 800dd26:	6560      	str	r0, [r4, #84]	; 0x54
 800dd28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dd2a:	602f      	str	r7, [r5, #0]
 800dd2c:	2900      	cmp	r1, #0
 800dd2e:	d0ca      	beq.n	800dcc6 <__sflush_r+0x1a>
 800dd30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dd34:	4299      	cmp	r1, r3
 800dd36:	d002      	beq.n	800dd3e <__sflush_r+0x92>
 800dd38:	4628      	mov	r0, r5
 800dd3a:	f000 f9d7 	bl	800e0ec <_free_r>
 800dd3e:	2000      	movs	r0, #0
 800dd40:	6360      	str	r0, [r4, #52]	; 0x34
 800dd42:	e7c1      	b.n	800dcc8 <__sflush_r+0x1c>
 800dd44:	6a21      	ldr	r1, [r4, #32]
 800dd46:	2301      	movs	r3, #1
 800dd48:	4628      	mov	r0, r5
 800dd4a:	47b0      	blx	r6
 800dd4c:	1c41      	adds	r1, r0, #1
 800dd4e:	d1c7      	bne.n	800dce0 <__sflush_r+0x34>
 800dd50:	682b      	ldr	r3, [r5, #0]
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	d0c4      	beq.n	800dce0 <__sflush_r+0x34>
 800dd56:	2b1d      	cmp	r3, #29
 800dd58:	d001      	beq.n	800dd5e <__sflush_r+0xb2>
 800dd5a:	2b16      	cmp	r3, #22
 800dd5c:	d101      	bne.n	800dd62 <__sflush_r+0xb6>
 800dd5e:	602f      	str	r7, [r5, #0]
 800dd60:	e7b1      	b.n	800dcc6 <__sflush_r+0x1a>
 800dd62:	89a3      	ldrh	r3, [r4, #12]
 800dd64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dd68:	81a3      	strh	r3, [r4, #12]
 800dd6a:	e7ad      	b.n	800dcc8 <__sflush_r+0x1c>
 800dd6c:	690f      	ldr	r7, [r1, #16]
 800dd6e:	2f00      	cmp	r7, #0
 800dd70:	d0a9      	beq.n	800dcc6 <__sflush_r+0x1a>
 800dd72:	0793      	lsls	r3, r2, #30
 800dd74:	680e      	ldr	r6, [r1, #0]
 800dd76:	bf08      	it	eq
 800dd78:	694b      	ldreq	r3, [r1, #20]
 800dd7a:	600f      	str	r7, [r1, #0]
 800dd7c:	bf18      	it	ne
 800dd7e:	2300      	movne	r3, #0
 800dd80:	eba6 0807 	sub.w	r8, r6, r7
 800dd84:	608b      	str	r3, [r1, #8]
 800dd86:	f1b8 0f00 	cmp.w	r8, #0
 800dd8a:	dd9c      	ble.n	800dcc6 <__sflush_r+0x1a>
 800dd8c:	6a21      	ldr	r1, [r4, #32]
 800dd8e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800dd90:	4643      	mov	r3, r8
 800dd92:	463a      	mov	r2, r7
 800dd94:	4628      	mov	r0, r5
 800dd96:	47b0      	blx	r6
 800dd98:	2800      	cmp	r0, #0
 800dd9a:	dc06      	bgt.n	800ddaa <__sflush_r+0xfe>
 800dd9c:	89a3      	ldrh	r3, [r4, #12]
 800dd9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dda2:	81a3      	strh	r3, [r4, #12]
 800dda4:	f04f 30ff 	mov.w	r0, #4294967295
 800dda8:	e78e      	b.n	800dcc8 <__sflush_r+0x1c>
 800ddaa:	4407      	add	r7, r0
 800ddac:	eba8 0800 	sub.w	r8, r8, r0
 800ddb0:	e7e9      	b.n	800dd86 <__sflush_r+0xda>
 800ddb2:	bf00      	nop
 800ddb4:	20400001 	.word	0x20400001

0800ddb8 <_fflush_r>:
 800ddb8:	b538      	push	{r3, r4, r5, lr}
 800ddba:	690b      	ldr	r3, [r1, #16]
 800ddbc:	4605      	mov	r5, r0
 800ddbe:	460c      	mov	r4, r1
 800ddc0:	b913      	cbnz	r3, 800ddc8 <_fflush_r+0x10>
 800ddc2:	2500      	movs	r5, #0
 800ddc4:	4628      	mov	r0, r5
 800ddc6:	bd38      	pop	{r3, r4, r5, pc}
 800ddc8:	b118      	cbz	r0, 800ddd2 <_fflush_r+0x1a>
 800ddca:	6983      	ldr	r3, [r0, #24]
 800ddcc:	b90b      	cbnz	r3, 800ddd2 <_fflush_r+0x1a>
 800ddce:	f000 f887 	bl	800dee0 <__sinit>
 800ddd2:	4b14      	ldr	r3, [pc, #80]	; (800de24 <_fflush_r+0x6c>)
 800ddd4:	429c      	cmp	r4, r3
 800ddd6:	d11b      	bne.n	800de10 <_fflush_r+0x58>
 800ddd8:	686c      	ldr	r4, [r5, #4]
 800ddda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	d0ef      	beq.n	800ddc2 <_fflush_r+0xa>
 800dde2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800dde4:	07d0      	lsls	r0, r2, #31
 800dde6:	d404      	bmi.n	800ddf2 <_fflush_r+0x3a>
 800dde8:	0599      	lsls	r1, r3, #22
 800ddea:	d402      	bmi.n	800ddf2 <_fflush_r+0x3a>
 800ddec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ddee:	f000 f915 	bl	800e01c <__retarget_lock_acquire_recursive>
 800ddf2:	4628      	mov	r0, r5
 800ddf4:	4621      	mov	r1, r4
 800ddf6:	f7ff ff59 	bl	800dcac <__sflush_r>
 800ddfa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ddfc:	07da      	lsls	r2, r3, #31
 800ddfe:	4605      	mov	r5, r0
 800de00:	d4e0      	bmi.n	800ddc4 <_fflush_r+0xc>
 800de02:	89a3      	ldrh	r3, [r4, #12]
 800de04:	059b      	lsls	r3, r3, #22
 800de06:	d4dd      	bmi.n	800ddc4 <_fflush_r+0xc>
 800de08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800de0a:	f000 f908 	bl	800e01e <__retarget_lock_release_recursive>
 800de0e:	e7d9      	b.n	800ddc4 <_fflush_r+0xc>
 800de10:	4b05      	ldr	r3, [pc, #20]	; (800de28 <_fflush_r+0x70>)
 800de12:	429c      	cmp	r4, r3
 800de14:	d101      	bne.n	800de1a <_fflush_r+0x62>
 800de16:	68ac      	ldr	r4, [r5, #8]
 800de18:	e7df      	b.n	800ddda <_fflush_r+0x22>
 800de1a:	4b04      	ldr	r3, [pc, #16]	; (800de2c <_fflush_r+0x74>)
 800de1c:	429c      	cmp	r4, r3
 800de1e:	bf08      	it	eq
 800de20:	68ec      	ldreq	r4, [r5, #12]
 800de22:	e7da      	b.n	800ddda <_fflush_r+0x22>
 800de24:	08030694 	.word	0x08030694
 800de28:	080306b4 	.word	0x080306b4
 800de2c:	08030674 	.word	0x08030674

0800de30 <std>:
 800de30:	2300      	movs	r3, #0
 800de32:	b510      	push	{r4, lr}
 800de34:	4604      	mov	r4, r0
 800de36:	e9c0 3300 	strd	r3, r3, [r0]
 800de3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800de3e:	6083      	str	r3, [r0, #8]
 800de40:	8181      	strh	r1, [r0, #12]
 800de42:	6643      	str	r3, [r0, #100]	; 0x64
 800de44:	81c2      	strh	r2, [r0, #14]
 800de46:	6183      	str	r3, [r0, #24]
 800de48:	4619      	mov	r1, r3
 800de4a:	2208      	movs	r2, #8
 800de4c:	305c      	adds	r0, #92	; 0x5c
 800de4e:	f7ff fb3f 	bl	800d4d0 <memset>
 800de52:	4b05      	ldr	r3, [pc, #20]	; (800de68 <std+0x38>)
 800de54:	6263      	str	r3, [r4, #36]	; 0x24
 800de56:	4b05      	ldr	r3, [pc, #20]	; (800de6c <std+0x3c>)
 800de58:	62a3      	str	r3, [r4, #40]	; 0x28
 800de5a:	4b05      	ldr	r3, [pc, #20]	; (800de70 <std+0x40>)
 800de5c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800de5e:	4b05      	ldr	r3, [pc, #20]	; (800de74 <std+0x44>)
 800de60:	6224      	str	r4, [r4, #32]
 800de62:	6323      	str	r3, [r4, #48]	; 0x30
 800de64:	bd10      	pop	{r4, pc}
 800de66:	bf00      	nop
 800de68:	0800e35d 	.word	0x0800e35d
 800de6c:	0800e37f 	.word	0x0800e37f
 800de70:	0800e3b7 	.word	0x0800e3b7
 800de74:	0800e3db 	.word	0x0800e3db

0800de78 <_cleanup_r>:
 800de78:	4901      	ldr	r1, [pc, #4]	; (800de80 <_cleanup_r+0x8>)
 800de7a:	f000 b8af 	b.w	800dfdc <_fwalk_reent>
 800de7e:	bf00      	nop
 800de80:	0800ddb9 	.word	0x0800ddb9

0800de84 <__sfmoreglue>:
 800de84:	b570      	push	{r4, r5, r6, lr}
 800de86:	2268      	movs	r2, #104	; 0x68
 800de88:	1e4d      	subs	r5, r1, #1
 800de8a:	4355      	muls	r5, r2
 800de8c:	460e      	mov	r6, r1
 800de8e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800de92:	f000 f997 	bl	800e1c4 <_malloc_r>
 800de96:	4604      	mov	r4, r0
 800de98:	b140      	cbz	r0, 800deac <__sfmoreglue+0x28>
 800de9a:	2100      	movs	r1, #0
 800de9c:	e9c0 1600 	strd	r1, r6, [r0]
 800dea0:	300c      	adds	r0, #12
 800dea2:	60a0      	str	r0, [r4, #8]
 800dea4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800dea8:	f7ff fb12 	bl	800d4d0 <memset>
 800deac:	4620      	mov	r0, r4
 800deae:	bd70      	pop	{r4, r5, r6, pc}

0800deb0 <__sfp_lock_acquire>:
 800deb0:	4801      	ldr	r0, [pc, #4]	; (800deb8 <__sfp_lock_acquire+0x8>)
 800deb2:	f000 b8b3 	b.w	800e01c <__retarget_lock_acquire_recursive>
 800deb6:	bf00      	nop
 800deb8:	20001a61 	.word	0x20001a61

0800debc <__sfp_lock_release>:
 800debc:	4801      	ldr	r0, [pc, #4]	; (800dec4 <__sfp_lock_release+0x8>)
 800debe:	f000 b8ae 	b.w	800e01e <__retarget_lock_release_recursive>
 800dec2:	bf00      	nop
 800dec4:	20001a61 	.word	0x20001a61

0800dec8 <__sinit_lock_acquire>:
 800dec8:	4801      	ldr	r0, [pc, #4]	; (800ded0 <__sinit_lock_acquire+0x8>)
 800deca:	f000 b8a7 	b.w	800e01c <__retarget_lock_acquire_recursive>
 800dece:	bf00      	nop
 800ded0:	20001a62 	.word	0x20001a62

0800ded4 <__sinit_lock_release>:
 800ded4:	4801      	ldr	r0, [pc, #4]	; (800dedc <__sinit_lock_release+0x8>)
 800ded6:	f000 b8a2 	b.w	800e01e <__retarget_lock_release_recursive>
 800deda:	bf00      	nop
 800dedc:	20001a62 	.word	0x20001a62

0800dee0 <__sinit>:
 800dee0:	b510      	push	{r4, lr}
 800dee2:	4604      	mov	r4, r0
 800dee4:	f7ff fff0 	bl	800dec8 <__sinit_lock_acquire>
 800dee8:	69a3      	ldr	r3, [r4, #24]
 800deea:	b11b      	cbz	r3, 800def4 <__sinit+0x14>
 800deec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800def0:	f7ff bff0 	b.w	800ded4 <__sinit_lock_release>
 800def4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800def8:	6523      	str	r3, [r4, #80]	; 0x50
 800defa:	4b13      	ldr	r3, [pc, #76]	; (800df48 <__sinit+0x68>)
 800defc:	4a13      	ldr	r2, [pc, #76]	; (800df4c <__sinit+0x6c>)
 800defe:	681b      	ldr	r3, [r3, #0]
 800df00:	62a2      	str	r2, [r4, #40]	; 0x28
 800df02:	42a3      	cmp	r3, r4
 800df04:	bf04      	itt	eq
 800df06:	2301      	moveq	r3, #1
 800df08:	61a3      	streq	r3, [r4, #24]
 800df0a:	4620      	mov	r0, r4
 800df0c:	f000 f820 	bl	800df50 <__sfp>
 800df10:	6060      	str	r0, [r4, #4]
 800df12:	4620      	mov	r0, r4
 800df14:	f000 f81c 	bl	800df50 <__sfp>
 800df18:	60a0      	str	r0, [r4, #8]
 800df1a:	4620      	mov	r0, r4
 800df1c:	f000 f818 	bl	800df50 <__sfp>
 800df20:	2200      	movs	r2, #0
 800df22:	60e0      	str	r0, [r4, #12]
 800df24:	2104      	movs	r1, #4
 800df26:	6860      	ldr	r0, [r4, #4]
 800df28:	f7ff ff82 	bl	800de30 <std>
 800df2c:	68a0      	ldr	r0, [r4, #8]
 800df2e:	2201      	movs	r2, #1
 800df30:	2109      	movs	r1, #9
 800df32:	f7ff ff7d 	bl	800de30 <std>
 800df36:	68e0      	ldr	r0, [r4, #12]
 800df38:	2202      	movs	r2, #2
 800df3a:	2112      	movs	r1, #18
 800df3c:	f7ff ff78 	bl	800de30 <std>
 800df40:	2301      	movs	r3, #1
 800df42:	61a3      	str	r3, [r4, #24]
 800df44:	e7d2      	b.n	800deec <__sinit+0xc>
 800df46:	bf00      	nop
 800df48:	0803063c 	.word	0x0803063c
 800df4c:	0800de79 	.word	0x0800de79

0800df50 <__sfp>:
 800df50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df52:	4607      	mov	r7, r0
 800df54:	f7ff ffac 	bl	800deb0 <__sfp_lock_acquire>
 800df58:	4b1e      	ldr	r3, [pc, #120]	; (800dfd4 <__sfp+0x84>)
 800df5a:	681e      	ldr	r6, [r3, #0]
 800df5c:	69b3      	ldr	r3, [r6, #24]
 800df5e:	b913      	cbnz	r3, 800df66 <__sfp+0x16>
 800df60:	4630      	mov	r0, r6
 800df62:	f7ff ffbd 	bl	800dee0 <__sinit>
 800df66:	3648      	adds	r6, #72	; 0x48
 800df68:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800df6c:	3b01      	subs	r3, #1
 800df6e:	d503      	bpl.n	800df78 <__sfp+0x28>
 800df70:	6833      	ldr	r3, [r6, #0]
 800df72:	b30b      	cbz	r3, 800dfb8 <__sfp+0x68>
 800df74:	6836      	ldr	r6, [r6, #0]
 800df76:	e7f7      	b.n	800df68 <__sfp+0x18>
 800df78:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800df7c:	b9d5      	cbnz	r5, 800dfb4 <__sfp+0x64>
 800df7e:	4b16      	ldr	r3, [pc, #88]	; (800dfd8 <__sfp+0x88>)
 800df80:	60e3      	str	r3, [r4, #12]
 800df82:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800df86:	6665      	str	r5, [r4, #100]	; 0x64
 800df88:	f000 f847 	bl	800e01a <__retarget_lock_init_recursive>
 800df8c:	f7ff ff96 	bl	800debc <__sfp_lock_release>
 800df90:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800df94:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800df98:	6025      	str	r5, [r4, #0]
 800df9a:	61a5      	str	r5, [r4, #24]
 800df9c:	2208      	movs	r2, #8
 800df9e:	4629      	mov	r1, r5
 800dfa0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800dfa4:	f7ff fa94 	bl	800d4d0 <memset>
 800dfa8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800dfac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800dfb0:	4620      	mov	r0, r4
 800dfb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dfb4:	3468      	adds	r4, #104	; 0x68
 800dfb6:	e7d9      	b.n	800df6c <__sfp+0x1c>
 800dfb8:	2104      	movs	r1, #4
 800dfba:	4638      	mov	r0, r7
 800dfbc:	f7ff ff62 	bl	800de84 <__sfmoreglue>
 800dfc0:	4604      	mov	r4, r0
 800dfc2:	6030      	str	r0, [r6, #0]
 800dfc4:	2800      	cmp	r0, #0
 800dfc6:	d1d5      	bne.n	800df74 <__sfp+0x24>
 800dfc8:	f7ff ff78 	bl	800debc <__sfp_lock_release>
 800dfcc:	230c      	movs	r3, #12
 800dfce:	603b      	str	r3, [r7, #0]
 800dfd0:	e7ee      	b.n	800dfb0 <__sfp+0x60>
 800dfd2:	bf00      	nop
 800dfd4:	0803063c 	.word	0x0803063c
 800dfd8:	ffff0001 	.word	0xffff0001

0800dfdc <_fwalk_reent>:
 800dfdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dfe0:	4606      	mov	r6, r0
 800dfe2:	4688      	mov	r8, r1
 800dfe4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800dfe8:	2700      	movs	r7, #0
 800dfea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800dfee:	f1b9 0901 	subs.w	r9, r9, #1
 800dff2:	d505      	bpl.n	800e000 <_fwalk_reent+0x24>
 800dff4:	6824      	ldr	r4, [r4, #0]
 800dff6:	2c00      	cmp	r4, #0
 800dff8:	d1f7      	bne.n	800dfea <_fwalk_reent+0xe>
 800dffa:	4638      	mov	r0, r7
 800dffc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e000:	89ab      	ldrh	r3, [r5, #12]
 800e002:	2b01      	cmp	r3, #1
 800e004:	d907      	bls.n	800e016 <_fwalk_reent+0x3a>
 800e006:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e00a:	3301      	adds	r3, #1
 800e00c:	d003      	beq.n	800e016 <_fwalk_reent+0x3a>
 800e00e:	4629      	mov	r1, r5
 800e010:	4630      	mov	r0, r6
 800e012:	47c0      	blx	r8
 800e014:	4307      	orrs	r7, r0
 800e016:	3568      	adds	r5, #104	; 0x68
 800e018:	e7e9      	b.n	800dfee <_fwalk_reent+0x12>

0800e01a <__retarget_lock_init_recursive>:
 800e01a:	4770      	bx	lr

0800e01c <__retarget_lock_acquire_recursive>:
 800e01c:	4770      	bx	lr

0800e01e <__retarget_lock_release_recursive>:
 800e01e:	4770      	bx	lr

0800e020 <__swhatbuf_r>:
 800e020:	b570      	push	{r4, r5, r6, lr}
 800e022:	460e      	mov	r6, r1
 800e024:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e028:	2900      	cmp	r1, #0
 800e02a:	b096      	sub	sp, #88	; 0x58
 800e02c:	4614      	mov	r4, r2
 800e02e:	461d      	mov	r5, r3
 800e030:	da08      	bge.n	800e044 <__swhatbuf_r+0x24>
 800e032:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800e036:	2200      	movs	r2, #0
 800e038:	602a      	str	r2, [r5, #0]
 800e03a:	061a      	lsls	r2, r3, #24
 800e03c:	d410      	bmi.n	800e060 <__swhatbuf_r+0x40>
 800e03e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e042:	e00e      	b.n	800e062 <__swhatbuf_r+0x42>
 800e044:	466a      	mov	r2, sp
 800e046:	f000 f9ef 	bl	800e428 <_fstat_r>
 800e04a:	2800      	cmp	r0, #0
 800e04c:	dbf1      	blt.n	800e032 <__swhatbuf_r+0x12>
 800e04e:	9a01      	ldr	r2, [sp, #4]
 800e050:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e054:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e058:	425a      	negs	r2, r3
 800e05a:	415a      	adcs	r2, r3
 800e05c:	602a      	str	r2, [r5, #0]
 800e05e:	e7ee      	b.n	800e03e <__swhatbuf_r+0x1e>
 800e060:	2340      	movs	r3, #64	; 0x40
 800e062:	2000      	movs	r0, #0
 800e064:	6023      	str	r3, [r4, #0]
 800e066:	b016      	add	sp, #88	; 0x58
 800e068:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e06c <__smakebuf_r>:
 800e06c:	898b      	ldrh	r3, [r1, #12]
 800e06e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e070:	079d      	lsls	r5, r3, #30
 800e072:	4606      	mov	r6, r0
 800e074:	460c      	mov	r4, r1
 800e076:	d507      	bpl.n	800e088 <__smakebuf_r+0x1c>
 800e078:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e07c:	6023      	str	r3, [r4, #0]
 800e07e:	6123      	str	r3, [r4, #16]
 800e080:	2301      	movs	r3, #1
 800e082:	6163      	str	r3, [r4, #20]
 800e084:	b002      	add	sp, #8
 800e086:	bd70      	pop	{r4, r5, r6, pc}
 800e088:	ab01      	add	r3, sp, #4
 800e08a:	466a      	mov	r2, sp
 800e08c:	f7ff ffc8 	bl	800e020 <__swhatbuf_r>
 800e090:	9900      	ldr	r1, [sp, #0]
 800e092:	4605      	mov	r5, r0
 800e094:	4630      	mov	r0, r6
 800e096:	f000 f895 	bl	800e1c4 <_malloc_r>
 800e09a:	b948      	cbnz	r0, 800e0b0 <__smakebuf_r+0x44>
 800e09c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e0a0:	059a      	lsls	r2, r3, #22
 800e0a2:	d4ef      	bmi.n	800e084 <__smakebuf_r+0x18>
 800e0a4:	f023 0303 	bic.w	r3, r3, #3
 800e0a8:	f043 0302 	orr.w	r3, r3, #2
 800e0ac:	81a3      	strh	r3, [r4, #12]
 800e0ae:	e7e3      	b.n	800e078 <__smakebuf_r+0xc>
 800e0b0:	4b0d      	ldr	r3, [pc, #52]	; (800e0e8 <__smakebuf_r+0x7c>)
 800e0b2:	62b3      	str	r3, [r6, #40]	; 0x28
 800e0b4:	89a3      	ldrh	r3, [r4, #12]
 800e0b6:	6020      	str	r0, [r4, #0]
 800e0b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e0bc:	81a3      	strh	r3, [r4, #12]
 800e0be:	9b00      	ldr	r3, [sp, #0]
 800e0c0:	6163      	str	r3, [r4, #20]
 800e0c2:	9b01      	ldr	r3, [sp, #4]
 800e0c4:	6120      	str	r0, [r4, #16]
 800e0c6:	b15b      	cbz	r3, 800e0e0 <__smakebuf_r+0x74>
 800e0c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e0cc:	4630      	mov	r0, r6
 800e0ce:	f000 f9bd 	bl	800e44c <_isatty_r>
 800e0d2:	b128      	cbz	r0, 800e0e0 <__smakebuf_r+0x74>
 800e0d4:	89a3      	ldrh	r3, [r4, #12]
 800e0d6:	f023 0303 	bic.w	r3, r3, #3
 800e0da:	f043 0301 	orr.w	r3, r3, #1
 800e0de:	81a3      	strh	r3, [r4, #12]
 800e0e0:	89a0      	ldrh	r0, [r4, #12]
 800e0e2:	4305      	orrs	r5, r0
 800e0e4:	81a5      	strh	r5, [r4, #12]
 800e0e6:	e7cd      	b.n	800e084 <__smakebuf_r+0x18>
 800e0e8:	0800de79 	.word	0x0800de79

0800e0ec <_free_r>:
 800e0ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e0ee:	2900      	cmp	r1, #0
 800e0f0:	d044      	beq.n	800e17c <_free_r+0x90>
 800e0f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e0f6:	9001      	str	r0, [sp, #4]
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	f1a1 0404 	sub.w	r4, r1, #4
 800e0fe:	bfb8      	it	lt
 800e100:	18e4      	addlt	r4, r4, r3
 800e102:	f000 f9c5 	bl	800e490 <__malloc_lock>
 800e106:	4a1e      	ldr	r2, [pc, #120]	; (800e180 <_free_r+0x94>)
 800e108:	9801      	ldr	r0, [sp, #4]
 800e10a:	6813      	ldr	r3, [r2, #0]
 800e10c:	b933      	cbnz	r3, 800e11c <_free_r+0x30>
 800e10e:	6063      	str	r3, [r4, #4]
 800e110:	6014      	str	r4, [r2, #0]
 800e112:	b003      	add	sp, #12
 800e114:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e118:	f000 b9c0 	b.w	800e49c <__malloc_unlock>
 800e11c:	42a3      	cmp	r3, r4
 800e11e:	d908      	bls.n	800e132 <_free_r+0x46>
 800e120:	6825      	ldr	r5, [r4, #0]
 800e122:	1961      	adds	r1, r4, r5
 800e124:	428b      	cmp	r3, r1
 800e126:	bf01      	itttt	eq
 800e128:	6819      	ldreq	r1, [r3, #0]
 800e12a:	685b      	ldreq	r3, [r3, #4]
 800e12c:	1949      	addeq	r1, r1, r5
 800e12e:	6021      	streq	r1, [r4, #0]
 800e130:	e7ed      	b.n	800e10e <_free_r+0x22>
 800e132:	461a      	mov	r2, r3
 800e134:	685b      	ldr	r3, [r3, #4]
 800e136:	b10b      	cbz	r3, 800e13c <_free_r+0x50>
 800e138:	42a3      	cmp	r3, r4
 800e13a:	d9fa      	bls.n	800e132 <_free_r+0x46>
 800e13c:	6811      	ldr	r1, [r2, #0]
 800e13e:	1855      	adds	r5, r2, r1
 800e140:	42a5      	cmp	r5, r4
 800e142:	d10b      	bne.n	800e15c <_free_r+0x70>
 800e144:	6824      	ldr	r4, [r4, #0]
 800e146:	4421      	add	r1, r4
 800e148:	1854      	adds	r4, r2, r1
 800e14a:	42a3      	cmp	r3, r4
 800e14c:	6011      	str	r1, [r2, #0]
 800e14e:	d1e0      	bne.n	800e112 <_free_r+0x26>
 800e150:	681c      	ldr	r4, [r3, #0]
 800e152:	685b      	ldr	r3, [r3, #4]
 800e154:	6053      	str	r3, [r2, #4]
 800e156:	4421      	add	r1, r4
 800e158:	6011      	str	r1, [r2, #0]
 800e15a:	e7da      	b.n	800e112 <_free_r+0x26>
 800e15c:	d902      	bls.n	800e164 <_free_r+0x78>
 800e15e:	230c      	movs	r3, #12
 800e160:	6003      	str	r3, [r0, #0]
 800e162:	e7d6      	b.n	800e112 <_free_r+0x26>
 800e164:	6825      	ldr	r5, [r4, #0]
 800e166:	1961      	adds	r1, r4, r5
 800e168:	428b      	cmp	r3, r1
 800e16a:	bf04      	itt	eq
 800e16c:	6819      	ldreq	r1, [r3, #0]
 800e16e:	685b      	ldreq	r3, [r3, #4]
 800e170:	6063      	str	r3, [r4, #4]
 800e172:	bf04      	itt	eq
 800e174:	1949      	addeq	r1, r1, r5
 800e176:	6021      	streq	r1, [r4, #0]
 800e178:	6054      	str	r4, [r2, #4]
 800e17a:	e7ca      	b.n	800e112 <_free_r+0x26>
 800e17c:	b003      	add	sp, #12
 800e17e:	bd30      	pop	{r4, r5, pc}
 800e180:	20001a64 	.word	0x20001a64

0800e184 <sbrk_aligned>:
 800e184:	b570      	push	{r4, r5, r6, lr}
 800e186:	4e0e      	ldr	r6, [pc, #56]	; (800e1c0 <sbrk_aligned+0x3c>)
 800e188:	460c      	mov	r4, r1
 800e18a:	6831      	ldr	r1, [r6, #0]
 800e18c:	4605      	mov	r5, r0
 800e18e:	b911      	cbnz	r1, 800e196 <sbrk_aligned+0x12>
 800e190:	f000 f8d4 	bl	800e33c <_sbrk_r>
 800e194:	6030      	str	r0, [r6, #0]
 800e196:	4621      	mov	r1, r4
 800e198:	4628      	mov	r0, r5
 800e19a:	f000 f8cf 	bl	800e33c <_sbrk_r>
 800e19e:	1c43      	adds	r3, r0, #1
 800e1a0:	d00a      	beq.n	800e1b8 <sbrk_aligned+0x34>
 800e1a2:	1cc4      	adds	r4, r0, #3
 800e1a4:	f024 0403 	bic.w	r4, r4, #3
 800e1a8:	42a0      	cmp	r0, r4
 800e1aa:	d007      	beq.n	800e1bc <sbrk_aligned+0x38>
 800e1ac:	1a21      	subs	r1, r4, r0
 800e1ae:	4628      	mov	r0, r5
 800e1b0:	f000 f8c4 	bl	800e33c <_sbrk_r>
 800e1b4:	3001      	adds	r0, #1
 800e1b6:	d101      	bne.n	800e1bc <sbrk_aligned+0x38>
 800e1b8:	f04f 34ff 	mov.w	r4, #4294967295
 800e1bc:	4620      	mov	r0, r4
 800e1be:	bd70      	pop	{r4, r5, r6, pc}
 800e1c0:	20001a68 	.word	0x20001a68

0800e1c4 <_malloc_r>:
 800e1c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e1c8:	1ccd      	adds	r5, r1, #3
 800e1ca:	f025 0503 	bic.w	r5, r5, #3
 800e1ce:	3508      	adds	r5, #8
 800e1d0:	2d0c      	cmp	r5, #12
 800e1d2:	bf38      	it	cc
 800e1d4:	250c      	movcc	r5, #12
 800e1d6:	2d00      	cmp	r5, #0
 800e1d8:	4607      	mov	r7, r0
 800e1da:	db01      	blt.n	800e1e0 <_malloc_r+0x1c>
 800e1dc:	42a9      	cmp	r1, r5
 800e1de:	d905      	bls.n	800e1ec <_malloc_r+0x28>
 800e1e0:	230c      	movs	r3, #12
 800e1e2:	603b      	str	r3, [r7, #0]
 800e1e4:	2600      	movs	r6, #0
 800e1e6:	4630      	mov	r0, r6
 800e1e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e1ec:	4e2e      	ldr	r6, [pc, #184]	; (800e2a8 <_malloc_r+0xe4>)
 800e1ee:	f000 f94f 	bl	800e490 <__malloc_lock>
 800e1f2:	6833      	ldr	r3, [r6, #0]
 800e1f4:	461c      	mov	r4, r3
 800e1f6:	bb34      	cbnz	r4, 800e246 <_malloc_r+0x82>
 800e1f8:	4629      	mov	r1, r5
 800e1fa:	4638      	mov	r0, r7
 800e1fc:	f7ff ffc2 	bl	800e184 <sbrk_aligned>
 800e200:	1c43      	adds	r3, r0, #1
 800e202:	4604      	mov	r4, r0
 800e204:	d14d      	bne.n	800e2a2 <_malloc_r+0xde>
 800e206:	6834      	ldr	r4, [r6, #0]
 800e208:	4626      	mov	r6, r4
 800e20a:	2e00      	cmp	r6, #0
 800e20c:	d140      	bne.n	800e290 <_malloc_r+0xcc>
 800e20e:	6823      	ldr	r3, [r4, #0]
 800e210:	4631      	mov	r1, r6
 800e212:	4638      	mov	r0, r7
 800e214:	eb04 0803 	add.w	r8, r4, r3
 800e218:	f000 f890 	bl	800e33c <_sbrk_r>
 800e21c:	4580      	cmp	r8, r0
 800e21e:	d13a      	bne.n	800e296 <_malloc_r+0xd2>
 800e220:	6821      	ldr	r1, [r4, #0]
 800e222:	3503      	adds	r5, #3
 800e224:	1a6d      	subs	r5, r5, r1
 800e226:	f025 0503 	bic.w	r5, r5, #3
 800e22a:	3508      	adds	r5, #8
 800e22c:	2d0c      	cmp	r5, #12
 800e22e:	bf38      	it	cc
 800e230:	250c      	movcc	r5, #12
 800e232:	4629      	mov	r1, r5
 800e234:	4638      	mov	r0, r7
 800e236:	f7ff ffa5 	bl	800e184 <sbrk_aligned>
 800e23a:	3001      	adds	r0, #1
 800e23c:	d02b      	beq.n	800e296 <_malloc_r+0xd2>
 800e23e:	6823      	ldr	r3, [r4, #0]
 800e240:	442b      	add	r3, r5
 800e242:	6023      	str	r3, [r4, #0]
 800e244:	e00e      	b.n	800e264 <_malloc_r+0xa0>
 800e246:	6822      	ldr	r2, [r4, #0]
 800e248:	1b52      	subs	r2, r2, r5
 800e24a:	d41e      	bmi.n	800e28a <_malloc_r+0xc6>
 800e24c:	2a0b      	cmp	r2, #11
 800e24e:	d916      	bls.n	800e27e <_malloc_r+0xba>
 800e250:	1961      	adds	r1, r4, r5
 800e252:	42a3      	cmp	r3, r4
 800e254:	6025      	str	r5, [r4, #0]
 800e256:	bf18      	it	ne
 800e258:	6059      	strne	r1, [r3, #4]
 800e25a:	6863      	ldr	r3, [r4, #4]
 800e25c:	bf08      	it	eq
 800e25e:	6031      	streq	r1, [r6, #0]
 800e260:	5162      	str	r2, [r4, r5]
 800e262:	604b      	str	r3, [r1, #4]
 800e264:	4638      	mov	r0, r7
 800e266:	f104 060b 	add.w	r6, r4, #11
 800e26a:	f000 f917 	bl	800e49c <__malloc_unlock>
 800e26e:	f026 0607 	bic.w	r6, r6, #7
 800e272:	1d23      	adds	r3, r4, #4
 800e274:	1af2      	subs	r2, r6, r3
 800e276:	d0b6      	beq.n	800e1e6 <_malloc_r+0x22>
 800e278:	1b9b      	subs	r3, r3, r6
 800e27a:	50a3      	str	r3, [r4, r2]
 800e27c:	e7b3      	b.n	800e1e6 <_malloc_r+0x22>
 800e27e:	6862      	ldr	r2, [r4, #4]
 800e280:	42a3      	cmp	r3, r4
 800e282:	bf0c      	ite	eq
 800e284:	6032      	streq	r2, [r6, #0]
 800e286:	605a      	strne	r2, [r3, #4]
 800e288:	e7ec      	b.n	800e264 <_malloc_r+0xa0>
 800e28a:	4623      	mov	r3, r4
 800e28c:	6864      	ldr	r4, [r4, #4]
 800e28e:	e7b2      	b.n	800e1f6 <_malloc_r+0x32>
 800e290:	4634      	mov	r4, r6
 800e292:	6876      	ldr	r6, [r6, #4]
 800e294:	e7b9      	b.n	800e20a <_malloc_r+0x46>
 800e296:	230c      	movs	r3, #12
 800e298:	603b      	str	r3, [r7, #0]
 800e29a:	4638      	mov	r0, r7
 800e29c:	f000 f8fe 	bl	800e49c <__malloc_unlock>
 800e2a0:	e7a1      	b.n	800e1e6 <_malloc_r+0x22>
 800e2a2:	6025      	str	r5, [r4, #0]
 800e2a4:	e7de      	b.n	800e264 <_malloc_r+0xa0>
 800e2a6:	bf00      	nop
 800e2a8:	20001a64 	.word	0x20001a64

0800e2ac <_putc_r>:
 800e2ac:	b570      	push	{r4, r5, r6, lr}
 800e2ae:	460d      	mov	r5, r1
 800e2b0:	4614      	mov	r4, r2
 800e2b2:	4606      	mov	r6, r0
 800e2b4:	b118      	cbz	r0, 800e2be <_putc_r+0x12>
 800e2b6:	6983      	ldr	r3, [r0, #24]
 800e2b8:	b90b      	cbnz	r3, 800e2be <_putc_r+0x12>
 800e2ba:	f7ff fe11 	bl	800dee0 <__sinit>
 800e2be:	4b1c      	ldr	r3, [pc, #112]	; (800e330 <_putc_r+0x84>)
 800e2c0:	429c      	cmp	r4, r3
 800e2c2:	d124      	bne.n	800e30e <_putc_r+0x62>
 800e2c4:	6874      	ldr	r4, [r6, #4]
 800e2c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e2c8:	07d8      	lsls	r0, r3, #31
 800e2ca:	d405      	bmi.n	800e2d8 <_putc_r+0x2c>
 800e2cc:	89a3      	ldrh	r3, [r4, #12]
 800e2ce:	0599      	lsls	r1, r3, #22
 800e2d0:	d402      	bmi.n	800e2d8 <_putc_r+0x2c>
 800e2d2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e2d4:	f7ff fea2 	bl	800e01c <__retarget_lock_acquire_recursive>
 800e2d8:	68a3      	ldr	r3, [r4, #8]
 800e2da:	3b01      	subs	r3, #1
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	60a3      	str	r3, [r4, #8]
 800e2e0:	da05      	bge.n	800e2ee <_putc_r+0x42>
 800e2e2:	69a2      	ldr	r2, [r4, #24]
 800e2e4:	4293      	cmp	r3, r2
 800e2e6:	db1c      	blt.n	800e322 <_putc_r+0x76>
 800e2e8:	b2eb      	uxtb	r3, r5
 800e2ea:	2b0a      	cmp	r3, #10
 800e2ec:	d019      	beq.n	800e322 <_putc_r+0x76>
 800e2ee:	6823      	ldr	r3, [r4, #0]
 800e2f0:	1c5a      	adds	r2, r3, #1
 800e2f2:	6022      	str	r2, [r4, #0]
 800e2f4:	701d      	strb	r5, [r3, #0]
 800e2f6:	b2ed      	uxtb	r5, r5
 800e2f8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e2fa:	07da      	lsls	r2, r3, #31
 800e2fc:	d405      	bmi.n	800e30a <_putc_r+0x5e>
 800e2fe:	89a3      	ldrh	r3, [r4, #12]
 800e300:	059b      	lsls	r3, r3, #22
 800e302:	d402      	bmi.n	800e30a <_putc_r+0x5e>
 800e304:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e306:	f7ff fe8a 	bl	800e01e <__retarget_lock_release_recursive>
 800e30a:	4628      	mov	r0, r5
 800e30c:	bd70      	pop	{r4, r5, r6, pc}
 800e30e:	4b09      	ldr	r3, [pc, #36]	; (800e334 <_putc_r+0x88>)
 800e310:	429c      	cmp	r4, r3
 800e312:	d101      	bne.n	800e318 <_putc_r+0x6c>
 800e314:	68b4      	ldr	r4, [r6, #8]
 800e316:	e7d6      	b.n	800e2c6 <_putc_r+0x1a>
 800e318:	4b07      	ldr	r3, [pc, #28]	; (800e338 <_putc_r+0x8c>)
 800e31a:	429c      	cmp	r4, r3
 800e31c:	bf08      	it	eq
 800e31e:	68f4      	ldreq	r4, [r6, #12]
 800e320:	e7d1      	b.n	800e2c6 <_putc_r+0x1a>
 800e322:	4629      	mov	r1, r5
 800e324:	4622      	mov	r2, r4
 800e326:	4630      	mov	r0, r6
 800e328:	f7ff fc00 	bl	800db2c <__swbuf_r>
 800e32c:	4605      	mov	r5, r0
 800e32e:	e7e3      	b.n	800e2f8 <_putc_r+0x4c>
 800e330:	08030694 	.word	0x08030694
 800e334:	080306b4 	.word	0x080306b4
 800e338:	08030674 	.word	0x08030674

0800e33c <_sbrk_r>:
 800e33c:	b538      	push	{r3, r4, r5, lr}
 800e33e:	4d06      	ldr	r5, [pc, #24]	; (800e358 <_sbrk_r+0x1c>)
 800e340:	2300      	movs	r3, #0
 800e342:	4604      	mov	r4, r0
 800e344:	4608      	mov	r0, r1
 800e346:	602b      	str	r3, [r5, #0]
 800e348:	f7f4 fcc4 	bl	8002cd4 <_sbrk>
 800e34c:	1c43      	adds	r3, r0, #1
 800e34e:	d102      	bne.n	800e356 <_sbrk_r+0x1a>
 800e350:	682b      	ldr	r3, [r5, #0]
 800e352:	b103      	cbz	r3, 800e356 <_sbrk_r+0x1a>
 800e354:	6023      	str	r3, [r4, #0]
 800e356:	bd38      	pop	{r3, r4, r5, pc}
 800e358:	20001a6c 	.word	0x20001a6c

0800e35c <__sread>:
 800e35c:	b510      	push	{r4, lr}
 800e35e:	460c      	mov	r4, r1
 800e360:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e364:	f000 f8a0 	bl	800e4a8 <_read_r>
 800e368:	2800      	cmp	r0, #0
 800e36a:	bfab      	itete	ge
 800e36c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e36e:	89a3      	ldrhlt	r3, [r4, #12]
 800e370:	181b      	addge	r3, r3, r0
 800e372:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e376:	bfac      	ite	ge
 800e378:	6563      	strge	r3, [r4, #84]	; 0x54
 800e37a:	81a3      	strhlt	r3, [r4, #12]
 800e37c:	bd10      	pop	{r4, pc}

0800e37e <__swrite>:
 800e37e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e382:	461f      	mov	r7, r3
 800e384:	898b      	ldrh	r3, [r1, #12]
 800e386:	05db      	lsls	r3, r3, #23
 800e388:	4605      	mov	r5, r0
 800e38a:	460c      	mov	r4, r1
 800e38c:	4616      	mov	r6, r2
 800e38e:	d505      	bpl.n	800e39c <__swrite+0x1e>
 800e390:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e394:	2302      	movs	r3, #2
 800e396:	2200      	movs	r2, #0
 800e398:	f000 f868 	bl	800e46c <_lseek_r>
 800e39c:	89a3      	ldrh	r3, [r4, #12]
 800e39e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e3a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e3a6:	81a3      	strh	r3, [r4, #12]
 800e3a8:	4632      	mov	r2, r6
 800e3aa:	463b      	mov	r3, r7
 800e3ac:	4628      	mov	r0, r5
 800e3ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e3b2:	f000 b817 	b.w	800e3e4 <_write_r>

0800e3b6 <__sseek>:
 800e3b6:	b510      	push	{r4, lr}
 800e3b8:	460c      	mov	r4, r1
 800e3ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e3be:	f000 f855 	bl	800e46c <_lseek_r>
 800e3c2:	1c43      	adds	r3, r0, #1
 800e3c4:	89a3      	ldrh	r3, [r4, #12]
 800e3c6:	bf15      	itete	ne
 800e3c8:	6560      	strne	r0, [r4, #84]	; 0x54
 800e3ca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e3ce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e3d2:	81a3      	strheq	r3, [r4, #12]
 800e3d4:	bf18      	it	ne
 800e3d6:	81a3      	strhne	r3, [r4, #12]
 800e3d8:	bd10      	pop	{r4, pc}

0800e3da <__sclose>:
 800e3da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e3de:	f000 b813 	b.w	800e408 <_close_r>
	...

0800e3e4 <_write_r>:
 800e3e4:	b538      	push	{r3, r4, r5, lr}
 800e3e6:	4d07      	ldr	r5, [pc, #28]	; (800e404 <_write_r+0x20>)
 800e3e8:	4604      	mov	r4, r0
 800e3ea:	4608      	mov	r0, r1
 800e3ec:	4611      	mov	r1, r2
 800e3ee:	2200      	movs	r2, #0
 800e3f0:	602a      	str	r2, [r5, #0]
 800e3f2:	461a      	mov	r2, r3
 800e3f4:	f7f4 fc1d 	bl	8002c32 <_write>
 800e3f8:	1c43      	adds	r3, r0, #1
 800e3fa:	d102      	bne.n	800e402 <_write_r+0x1e>
 800e3fc:	682b      	ldr	r3, [r5, #0]
 800e3fe:	b103      	cbz	r3, 800e402 <_write_r+0x1e>
 800e400:	6023      	str	r3, [r4, #0]
 800e402:	bd38      	pop	{r3, r4, r5, pc}
 800e404:	20001a6c 	.word	0x20001a6c

0800e408 <_close_r>:
 800e408:	b538      	push	{r3, r4, r5, lr}
 800e40a:	4d06      	ldr	r5, [pc, #24]	; (800e424 <_close_r+0x1c>)
 800e40c:	2300      	movs	r3, #0
 800e40e:	4604      	mov	r4, r0
 800e410:	4608      	mov	r0, r1
 800e412:	602b      	str	r3, [r5, #0]
 800e414:	f7f4 fc29 	bl	8002c6a <_close>
 800e418:	1c43      	adds	r3, r0, #1
 800e41a:	d102      	bne.n	800e422 <_close_r+0x1a>
 800e41c:	682b      	ldr	r3, [r5, #0]
 800e41e:	b103      	cbz	r3, 800e422 <_close_r+0x1a>
 800e420:	6023      	str	r3, [r4, #0]
 800e422:	bd38      	pop	{r3, r4, r5, pc}
 800e424:	20001a6c 	.word	0x20001a6c

0800e428 <_fstat_r>:
 800e428:	b538      	push	{r3, r4, r5, lr}
 800e42a:	4d07      	ldr	r5, [pc, #28]	; (800e448 <_fstat_r+0x20>)
 800e42c:	2300      	movs	r3, #0
 800e42e:	4604      	mov	r4, r0
 800e430:	4608      	mov	r0, r1
 800e432:	4611      	mov	r1, r2
 800e434:	602b      	str	r3, [r5, #0]
 800e436:	f7f4 fc24 	bl	8002c82 <_fstat>
 800e43a:	1c43      	adds	r3, r0, #1
 800e43c:	d102      	bne.n	800e444 <_fstat_r+0x1c>
 800e43e:	682b      	ldr	r3, [r5, #0]
 800e440:	b103      	cbz	r3, 800e444 <_fstat_r+0x1c>
 800e442:	6023      	str	r3, [r4, #0]
 800e444:	bd38      	pop	{r3, r4, r5, pc}
 800e446:	bf00      	nop
 800e448:	20001a6c 	.word	0x20001a6c

0800e44c <_isatty_r>:
 800e44c:	b538      	push	{r3, r4, r5, lr}
 800e44e:	4d06      	ldr	r5, [pc, #24]	; (800e468 <_isatty_r+0x1c>)
 800e450:	2300      	movs	r3, #0
 800e452:	4604      	mov	r4, r0
 800e454:	4608      	mov	r0, r1
 800e456:	602b      	str	r3, [r5, #0]
 800e458:	f7f4 fc23 	bl	8002ca2 <_isatty>
 800e45c:	1c43      	adds	r3, r0, #1
 800e45e:	d102      	bne.n	800e466 <_isatty_r+0x1a>
 800e460:	682b      	ldr	r3, [r5, #0]
 800e462:	b103      	cbz	r3, 800e466 <_isatty_r+0x1a>
 800e464:	6023      	str	r3, [r4, #0]
 800e466:	bd38      	pop	{r3, r4, r5, pc}
 800e468:	20001a6c 	.word	0x20001a6c

0800e46c <_lseek_r>:
 800e46c:	b538      	push	{r3, r4, r5, lr}
 800e46e:	4d07      	ldr	r5, [pc, #28]	; (800e48c <_lseek_r+0x20>)
 800e470:	4604      	mov	r4, r0
 800e472:	4608      	mov	r0, r1
 800e474:	4611      	mov	r1, r2
 800e476:	2200      	movs	r2, #0
 800e478:	602a      	str	r2, [r5, #0]
 800e47a:	461a      	mov	r2, r3
 800e47c:	f7f4 fc1c 	bl	8002cb8 <_lseek>
 800e480:	1c43      	adds	r3, r0, #1
 800e482:	d102      	bne.n	800e48a <_lseek_r+0x1e>
 800e484:	682b      	ldr	r3, [r5, #0]
 800e486:	b103      	cbz	r3, 800e48a <_lseek_r+0x1e>
 800e488:	6023      	str	r3, [r4, #0]
 800e48a:	bd38      	pop	{r3, r4, r5, pc}
 800e48c:	20001a6c 	.word	0x20001a6c

0800e490 <__malloc_lock>:
 800e490:	4801      	ldr	r0, [pc, #4]	; (800e498 <__malloc_lock+0x8>)
 800e492:	f7ff bdc3 	b.w	800e01c <__retarget_lock_acquire_recursive>
 800e496:	bf00      	nop
 800e498:	20001a60 	.word	0x20001a60

0800e49c <__malloc_unlock>:
 800e49c:	4801      	ldr	r0, [pc, #4]	; (800e4a4 <__malloc_unlock+0x8>)
 800e49e:	f7ff bdbe 	b.w	800e01e <__retarget_lock_release_recursive>
 800e4a2:	bf00      	nop
 800e4a4:	20001a60 	.word	0x20001a60

0800e4a8 <_read_r>:
 800e4a8:	b538      	push	{r3, r4, r5, lr}
 800e4aa:	4d07      	ldr	r5, [pc, #28]	; (800e4c8 <_read_r+0x20>)
 800e4ac:	4604      	mov	r4, r0
 800e4ae:	4608      	mov	r0, r1
 800e4b0:	4611      	mov	r1, r2
 800e4b2:	2200      	movs	r2, #0
 800e4b4:	602a      	str	r2, [r5, #0]
 800e4b6:	461a      	mov	r2, r3
 800e4b8:	f7f4 fb9e 	bl	8002bf8 <_read>
 800e4bc:	1c43      	adds	r3, r0, #1
 800e4be:	d102      	bne.n	800e4c6 <_read_r+0x1e>
 800e4c0:	682b      	ldr	r3, [r5, #0]
 800e4c2:	b103      	cbz	r3, 800e4c6 <_read_r+0x1e>
 800e4c4:	6023      	str	r3, [r4, #0]
 800e4c6:	bd38      	pop	{r3, r4, r5, pc}
 800e4c8:	20001a6c 	.word	0x20001a6c

0800e4cc <_init>:
 800e4cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e4ce:	bf00      	nop
 800e4d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e4d2:	bc08      	pop	{r3}
 800e4d4:	469e      	mov	lr, r3
 800e4d6:	4770      	bx	lr

0800e4d8 <_fini>:
 800e4d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e4da:	bf00      	nop
 800e4dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e4de:	bc08      	pop	{r3}
 800e4e0:	469e      	mov	lr, r3
 800e4e2:	4770      	bx	lr
