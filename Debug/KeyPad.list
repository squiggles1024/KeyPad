
KeyPad.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e2dc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000221cc  0800e47c  0800e47c  0001e47c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08030648  08030648  00050180  2**0
                  CONTENTS
  4 .ARM          00000008  08030648  08030648  00040648  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08030650  08030650  00050180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08030650  08030650  00040650  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08030654  08030654  00040654  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  08030658  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001658  20000180  080307d8  00050180  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200017d8  080307d8  000517d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00050180  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002538a  00000000  00000000  000501b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005bc8  00000000  00000000  0007553a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001dd8  00000000  00000000  0007b108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001b20  00000000  00000000  0007cee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ede4  00000000  00000000  0007ea00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00028e36  00000000  00000000  0009d7e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a5b56  00000000  00000000  000c661a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016c170  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008208  00000000  00000000  0016c1c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000180 	.word	0x20000180
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800e464 	.word	0x0800e464

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000184 	.word	0x20000184
 80001dc:	0800e464 	.word	0x0800e464

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <ILI9341_Init>:
 *@brief: Initializes the LCD Hardware and prepares it to receive image data
 * See https://cdn-shop.adafruit.com/datasheets/ILI9341.pdf for details regarding commands and data
 * Credit to ST Micro ILI9341.c Driver for initilization sequence
 ******************************************************************/

void ILI9341_Init(ILI9341_Init_Struct_t Settings, ILI9341_Handle_t *Dev, ILI9341_IO_Drv_t IO_Driver){
 8000584:	b5b0      	push	{r4, r5, r7, lr}
 8000586:	b08a      	sub	sp, #40	; 0x28
 8000588:	af00      	add	r7, sp, #0
 800058a:	1d3c      	adds	r4, r7, #4
 800058c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000590:	603b      	str	r3, [r7, #0]
	Dev->Orientation = Settings.Orientation;
 8000592:	793a      	ldrb	r2, [r7, #4]
 8000594:	683b      	ldr	r3, [r7, #0]
 8000596:	701a      	strb	r2, [r3, #0]
	Dev->ScreenHeight = Settings.ScreenHeight;
 8000598:	68fa      	ldr	r2, [r7, #12]
 800059a:	683b      	ldr	r3, [r7, #0]
 800059c:	609a      	str	r2, [r3, #8]
	Dev->ScreenWidth = Settings.ScreenWidth;
 800059e:	68ba      	ldr	r2, [r7, #8]
 80005a0:	683b      	ldr	r3, [r7, #0]
 80005a2:	605a      	str	r2, [r3, #4]
	Dev->Cursor.X = 0;
 80005a4:	683b      	ldr	r3, [r7, #0]
 80005a6:	2200      	movs	r2, #0
 80005a8:	819a      	strh	r2, [r3, #12]
	Dev->Cursor.Y = 0;
 80005aa:	683b      	ldr	r3, [r7, #0]
 80005ac:	2200      	movs	r2, #0
 80005ae:	81da      	strh	r2, [r3, #14]
	Dev->IO_Drv = IO_Driver;
 80005b0:	683b      	ldr	r3, [r7, #0]
 80005b2:	f103 0410 	add.w	r4, r3, #16
 80005b6:	f107 0538 	add.w	r5, r7, #56	; 0x38
 80005ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005be:	682b      	ldr	r3, [r5, #0]
 80005c0:	6023      	str	r3, [r4, #0]

	Dev->IO_Drv.init();
 80005c2:	683b      	ldr	r3, [r7, #0]
 80005c4:	691b      	ldr	r3, [r3, #16]
 80005c6:	4798      	blx	r3
	uint8_t buffer[20];


	Dev->IO_Drv.write(ILI9341_SWRESET, buffer, 0);
 80005c8:	683b      	ldr	r3, [r7, #0]
 80005ca:	699b      	ldr	r3, [r3, #24]
 80005cc:	f107 0114 	add.w	r1, r7, #20
 80005d0:	2200      	movs	r2, #0
 80005d2:	2001      	movs	r0, #1
 80005d4:	4798      	blx	r3
	Dev->IO_Drv.ioctl(ILI9341_Delay1000);
 80005d6:	683b      	ldr	r3, [r7, #0]
 80005d8:	6a1b      	ldr	r3, [r3, #32]
 80005da:	2001      	movs	r0, #1
 80005dc:	4798      	blx	r3
    

	//Power Control A - Page 195
    buffer[0] = 0x39;
 80005de:	2339      	movs	r3, #57	; 0x39
 80005e0:	753b      	strb	r3, [r7, #20]
    buffer[1] = 0x2C;
 80005e2:	232c      	movs	r3, #44	; 0x2c
 80005e4:	757b      	strb	r3, [r7, #21]
    buffer[2] = 0x00;
 80005e6:	2300      	movs	r3, #0
 80005e8:	75bb      	strb	r3, [r7, #22]
    buffer[3] = 0x34;
 80005ea:	2334      	movs	r3, #52	; 0x34
 80005ec:	75fb      	strb	r3, [r7, #23]
    buffer[4] = 0x02;
 80005ee:	2302      	movs	r3, #2
 80005f0:	763b      	strb	r3, [r7, #24]
	Dev->IO_Drv.write(ILI9341_PWRCONTROLA, buffer, 5);
 80005f2:	683b      	ldr	r3, [r7, #0]
 80005f4:	699b      	ldr	r3, [r3, #24]
 80005f6:	f107 0114 	add.w	r1, r7, #20
 80005fa:	2205      	movs	r2, #5
 80005fc:	20cb      	movs	r0, #203	; 0xcb
 80005fe:	4798      	blx	r3


	//Power Control B - Page 196
    buffer[0] = 0x00;
 8000600:	2300      	movs	r3, #0
 8000602:	753b      	strb	r3, [r7, #20]
    buffer[1] = 0xC1;
 8000604:	23c1      	movs	r3, #193	; 0xc1
 8000606:	757b      	strb	r3, [r7, #21]
    buffer[2] = 0x30;
 8000608:	2330      	movs	r3, #48	; 0x30
 800060a:	75bb      	strb	r3, [r7, #22]
    Dev->IO_Drv.write(ILI9341_PWRCONTROLB, buffer, 3);
 800060c:	683b      	ldr	r3, [r7, #0]
 800060e:	699b      	ldr	r3, [r3, #24]
 8000610:	f107 0114 	add.w	r1, r7, #20
 8000614:	2203      	movs	r2, #3
 8000616:	20cf      	movs	r0, #207	; 0xcf
 8000618:	4798      	blx	r3

    //Driver Timing Control A - Page 197
    buffer[0] = 0x85;
 800061a:	2385      	movs	r3, #133	; 0x85
 800061c:	753b      	strb	r3, [r7, #20]
    buffer[1] = 0x00;
 800061e:	2300      	movs	r3, #0
 8000620:	757b      	strb	r3, [r7, #21]
    buffer[2] = 0x78;
 8000622:	2378      	movs	r3, #120	; 0x78
 8000624:	75bb      	strb	r3, [r7, #22]
    Dev->IO_Drv.write(ILI9341_TIMINGCONTROLA, buffer, 3);
 8000626:	683b      	ldr	r3, [r7, #0]
 8000628:	699b      	ldr	r3, [r3, #24]
 800062a:	f107 0114 	add.w	r1, r7, #20
 800062e:	2203      	movs	r2, #3
 8000630:	20e8      	movs	r0, #232	; 0xe8
 8000632:	4798      	blx	r3

    //Driver Timing Control B - Page 199
    buffer[0] = 0x00;
 8000634:	2300      	movs	r3, #0
 8000636:	753b      	strb	r3, [r7, #20]
    buffer[1] = 0x00;
 8000638:	2300      	movs	r3, #0
 800063a:	757b      	strb	r3, [r7, #21]
    Dev->IO_Drv.write(ILI9341_TIMINGCONTROLB, buffer, 2);
 800063c:	683b      	ldr	r3, [r7, #0]
 800063e:	699b      	ldr	r3, [r3, #24]
 8000640:	f107 0114 	add.w	r1, r7, #20
 8000644:	2202      	movs	r2, #2
 8000646:	20ea      	movs	r0, #234	; 0xea
 8000648:	4798      	blx	r3

    //Power on Sequence Control - Page 200
    buffer[0] = 0x64;
 800064a:	2364      	movs	r3, #100	; 0x64
 800064c:	753b      	strb	r3, [r7, #20]
    buffer[1] = 0x03;
 800064e:	2303      	movs	r3, #3
 8000650:	757b      	strb	r3, [r7, #21]
    buffer[2] = 0x12;
 8000652:	2312      	movs	r3, #18
 8000654:	75bb      	strb	r3, [r7, #22]
    buffer[3] = 0x81;
 8000656:	2381      	movs	r3, #129	; 0x81
 8000658:	75fb      	strb	r3, [r7, #23]
    Dev->IO_Drv.write(ILI9341_Pwr_on_sequence_control, buffer, 4);
 800065a:	683b      	ldr	r3, [r7, #0]
 800065c:	699b      	ldr	r3, [r3, #24]
 800065e:	f107 0114 	add.w	r1, r7, #20
 8000662:	2204      	movs	r2, #4
 8000664:	20ed      	movs	r0, #237	; 0xed
 8000666:	4798      	blx	r3

    //Pump Ratio Control - Page 202
    buffer[0] = 0x20;
 8000668:	2320      	movs	r3, #32
 800066a:	753b      	strb	r3, [r7, #20]
    Dev->IO_Drv.write(ILI9341_Pump_ratio_control, buffer, 1);
 800066c:	683b      	ldr	r3, [r7, #0]
 800066e:	699b      	ldr	r3, [r3, #24]
 8000670:	f107 0114 	add.w	r1, r7, #20
 8000674:	2201      	movs	r2, #1
 8000676:	20f7      	movs	r0, #247	; 0xf7
 8000678:	4798      	blx	r3

    //Power Control 1 - Page 178
    buffer[0] = 0x10;
 800067a:	2310      	movs	r3, #16
 800067c:	753b      	strb	r3, [r7, #20]
    Dev->IO_Drv.write(ILI9341_PWCTRL_1, buffer, 1);
 800067e:	683b      	ldr	r3, [r7, #0]
 8000680:	699b      	ldr	r3, [r3, #24]
 8000682:	f107 0114 	add.w	r1, r7, #20
 8000686:	2201      	movs	r2, #1
 8000688:	20c0      	movs	r0, #192	; 0xc0
 800068a:	4798      	blx	r3

    //Power Control 2 - Page 179
    buffer[0] = 0x10;
 800068c:	2310      	movs	r3, #16
 800068e:	753b      	strb	r3, [r7, #20]
    Dev->IO_Drv.write(ILI9341_PWCTRL_2, buffer, 1);
 8000690:	683b      	ldr	r3, [r7, #0]
 8000692:	699b      	ldr	r3, [r3, #24]
 8000694:	f107 0114 	add.w	r1, r7, #20
 8000698:	2201      	movs	r2, #1
 800069a:	20c1      	movs	r0, #193	; 0xc1
 800069c:	4798      	blx	r3

    //VCOM Control 1 - Page 180
    buffer[0] = 0x45;
 800069e:	2345      	movs	r3, #69	; 0x45
 80006a0:	753b      	strb	r3, [r7, #20]
    buffer[1] = 0x15;
 80006a2:	2315      	movs	r3, #21
 80006a4:	757b      	strb	r3, [r7, #21]
    Dev->IO_Drv.write(ILI9341_VMCTRL1, buffer, 2);
 80006a6:	683b      	ldr	r3, [r7, #0]
 80006a8:	699b      	ldr	r3, [r3, #24]
 80006aa:	f107 0114 	add.w	r1, r7, #20
 80006ae:	2202      	movs	r2, #2
 80006b0:	20c5      	movs	r0, #197	; 0xc5
 80006b2:	4798      	blx	r3

    //VCOM Control 2 - Page 182
    buffer[0] = 0x90;
 80006b4:	2390      	movs	r3, #144	; 0x90
 80006b6:	753b      	strb	r3, [r7, #20]
    Dev->IO_Drv.write(ILI9341_VMCTRL2, buffer, 1);
 80006b8:	683b      	ldr	r3, [r7, #0]
 80006ba:	699b      	ldr	r3, [r3, #24]
 80006bc:	f107 0114 	add.w	r1, r7, #20
 80006c0:	2201      	movs	r2, #1
 80006c2:	20c7      	movs	r0, #199	; 0xc7
 80006c4:	4798      	blx	r3

    //Memory Access Control - Page 127
    buffer[0] = 0x30;
 80006c6:	2330      	movs	r3, #48	; 0x30
 80006c8:	753b      	strb	r3, [r7, #20]
    Dev->IO_Drv.write(ILI9341_MADCTL, buffer, 1);
 80006ca:	683b      	ldr	r3, [r7, #0]
 80006cc:	699b      	ldr	r3, [r3, #24]
 80006ce:	f107 0114 	add.w	r1, r7, #20
 80006d2:	2201      	movs	r2, #1
 80006d4:	2036      	movs	r0, #54	; 0x36
 80006d6:	4798      	blx	r3

    //Pixel Format Set - Page 134
    buffer[0] = 0x66;
 80006d8:	2366      	movs	r3, #102	; 0x66
 80006da:	753b      	strb	r3, [r7, #20]
    Dev->IO_Drv.write(ILI9341_PIXSET, buffer, 1);
 80006dc:	683b      	ldr	r3, [r7, #0]
 80006de:	699b      	ldr	r3, [r3, #24]
 80006e0:	f107 0114 	add.w	r1, r7, #20
 80006e4:	2201      	movs	r2, #1
 80006e6:	203a      	movs	r0, #58	; 0x3a
 80006e8:	4798      	blx	r3

    //Frame Rate Control (In Normal Mode/Full Colors) - Page 155
    buffer[0] = 0x00;
 80006ea:	2300      	movs	r3, #0
 80006ec:	753b      	strb	r3, [r7, #20]
    buffer[1] = 0x18;
 80006ee:	2318      	movs	r3, #24
 80006f0:	757b      	strb	r3, [r7, #21]
    Dev->IO_Drv.write(ILI9341_FRMCTR1, buffer, 2);
 80006f2:	683b      	ldr	r3, [r7, #0]
 80006f4:	699b      	ldr	r3, [r3, #24]
 80006f6:	f107 0114 	add.w	r1, r7, #20
 80006fa:	2202      	movs	r2, #2
 80006fc:	20b1      	movs	r0, #177	; 0xb1
 80006fe:	4798      	blx	r3

    // Display Function Control - Page 164
    buffer[0] = 0x08;
 8000700:	2308      	movs	r3, #8
 8000702:	753b      	strb	r3, [r7, #20]
    buffer[1] = 0x82;
 8000704:	2382      	movs	r3, #130	; 0x82
 8000706:	757b      	strb	r3, [r7, #21]
    buffer[2] = 0x27;
 8000708:	2327      	movs	r3, #39	; 0x27
 800070a:	75bb      	strb	r3, [r7, #22]
    Dev->IO_Drv.write(ILI9341_DISCTRL, buffer, 3);
 800070c:	683b      	ldr	r3, [r7, #0]
 800070e:	699b      	ldr	r3, [r3, #24]
 8000710:	f107 0114 	add.w	r1, r7, #20
 8000714:	2203      	movs	r2, #3
 8000716:	20b6      	movs	r0, #182	; 0xb6
 8000718:	4798      	blx	r3

    //Enable 3G - Page 201
    buffer[0] = 0x00;
 800071a:	2300      	movs	r3, #0
 800071c:	753b      	strb	r3, [r7, #20]
    Dev->IO_Drv.write(ILI9341_Enable_3G, buffer, 1);
 800071e:	683b      	ldr	r3, [r7, #0]
 8000720:	699b      	ldr	r3, [r3, #24]
 8000722:	f107 0114 	add.w	r1, r7, #20
 8000726:	2201      	movs	r2, #1
 8000728:	20f2      	movs	r0, #242	; 0xf2
 800072a:	4798      	blx	r3

    //Gamma Set - Page 107
    buffer[0] = 0x01;
 800072c:	2301      	movs	r3, #1
 800072e:	753b      	strb	r3, [r7, #20]
    Dev->IO_Drv.write(ILI9341_GAMSET, buffer, 1);
 8000730:	683b      	ldr	r3, [r7, #0]
 8000732:	699b      	ldr	r3, [r3, #24]
 8000734:	f107 0114 	add.w	r1, r7, #20
 8000738:	2201      	movs	r2, #1
 800073a:	2026      	movs	r0, #38	; 0x26
 800073c:	4798      	blx	r3

    //Positive Gamma Correction - Page 188
    buffer[0] = 0x0F;
 800073e:	230f      	movs	r3, #15
 8000740:	753b      	strb	r3, [r7, #20]
    buffer[1] = 0x29;
 8000742:	2329      	movs	r3, #41	; 0x29
 8000744:	757b      	strb	r3, [r7, #21]
    buffer[2] = 0x24;
 8000746:	2324      	movs	r3, #36	; 0x24
 8000748:	75bb      	strb	r3, [r7, #22]
    buffer[3] = 0x0C;
 800074a:	230c      	movs	r3, #12
 800074c:	75fb      	strb	r3, [r7, #23]
    buffer[4] = 0x0E;
 800074e:	230e      	movs	r3, #14
 8000750:	763b      	strb	r3, [r7, #24]
    buffer[5] = 0x09;
 8000752:	2309      	movs	r3, #9
 8000754:	767b      	strb	r3, [r7, #25]
    buffer[6] = 0x4E;
 8000756:	234e      	movs	r3, #78	; 0x4e
 8000758:	76bb      	strb	r3, [r7, #26]
    buffer[7] = 0x78;
 800075a:	2378      	movs	r3, #120	; 0x78
 800075c:	76fb      	strb	r3, [r7, #27]
    buffer[8] = 0x3C;
 800075e:	233c      	movs	r3, #60	; 0x3c
 8000760:	773b      	strb	r3, [r7, #28]
    buffer[9] = 0x09;
 8000762:	2309      	movs	r3, #9
 8000764:	777b      	strb	r3, [r7, #29]
    buffer[10] = 0x13;
 8000766:	2313      	movs	r3, #19
 8000768:	77bb      	strb	r3, [r7, #30]
    buffer[11] = 0x05;
 800076a:	2305      	movs	r3, #5
 800076c:	77fb      	strb	r3, [r7, #31]
    buffer[12] = 0x17;
 800076e:	2317      	movs	r3, #23
 8000770:	f887 3020 	strb.w	r3, [r7, #32]
    buffer[13] = 0x11;
 8000774:	2311      	movs	r3, #17
 8000776:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    buffer[14] = 0x00;
 800077a:	2300      	movs	r3, #0
 800077c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    Dev->IO_Drv.write(ILI9341_PGAMCTRL, buffer, 15);
 8000780:	683b      	ldr	r3, [r7, #0]
 8000782:	699b      	ldr	r3, [r3, #24]
 8000784:	f107 0114 	add.w	r1, r7, #20
 8000788:	220f      	movs	r2, #15
 800078a:	20e0      	movs	r0, #224	; 0xe0
 800078c:	4798      	blx	r3

    //Negative Gamma Correction - Page 189
    buffer[0] = 0x00;
 800078e:	2300      	movs	r3, #0
 8000790:	753b      	strb	r3, [r7, #20]
    buffer[1] = 0x16;
 8000792:	2316      	movs	r3, #22
 8000794:	757b      	strb	r3, [r7, #21]
    buffer[2] = 0x1B;
 8000796:	231b      	movs	r3, #27
 8000798:	75bb      	strb	r3, [r7, #22]
    buffer[3] = 0x04;
 800079a:	2304      	movs	r3, #4
 800079c:	75fb      	strb	r3, [r7, #23]
    buffer[4] = 0x11;
 800079e:	2311      	movs	r3, #17
 80007a0:	763b      	strb	r3, [r7, #24]
    buffer[5] = 0x07;
 80007a2:	2307      	movs	r3, #7
 80007a4:	767b      	strb	r3, [r7, #25]
    buffer[6] = 0x31;
 80007a6:	2331      	movs	r3, #49	; 0x31
 80007a8:	76bb      	strb	r3, [r7, #26]
    buffer[7] = 0x33;
 80007aa:	2333      	movs	r3, #51	; 0x33
 80007ac:	76fb      	strb	r3, [r7, #27]
    buffer[8] = 0x42;
 80007ae:	2342      	movs	r3, #66	; 0x42
 80007b0:	773b      	strb	r3, [r7, #28]
    buffer[9] = 0x05;
 80007b2:	2305      	movs	r3, #5
 80007b4:	777b      	strb	r3, [r7, #29]
    buffer[10] = 0x0C;
 80007b6:	230c      	movs	r3, #12
 80007b8:	77bb      	strb	r3, [r7, #30]
    buffer[11] = 0x0A;
 80007ba:	230a      	movs	r3, #10
 80007bc:	77fb      	strb	r3, [r7, #31]
    buffer[12] = 0x28;
 80007be:	2328      	movs	r3, #40	; 0x28
 80007c0:	f887 3020 	strb.w	r3, [r7, #32]
    buffer[13] = 0x2F;
 80007c4:	232f      	movs	r3, #47	; 0x2f
 80007c6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    buffer[14] = 0x0F;
 80007ca:	230f      	movs	r3, #15
 80007cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    Dev->IO_Drv.write(ILI9341_NGAMCTRL, buffer, 15);
 80007d0:	683b      	ldr	r3, [r7, #0]
 80007d2:	699b      	ldr	r3, [r3, #24]
 80007d4:	f107 0114 	add.w	r1, r7, #20
 80007d8:	220f      	movs	r2, #15
 80007da:	20e1      	movs	r0, #225	; 0xe1
 80007dc:	4798      	blx	r3

    //Sleep Out - Page 101
    Dev->IO_Drv.write(ILI9341_SLPOUT, buffer, 0);
 80007de:	683b      	ldr	r3, [r7, #0]
 80007e0:	699b      	ldr	r3, [r3, #24]
 80007e2:	f107 0114 	add.w	r1, r7, #20
 80007e6:	2200      	movs	r2, #0
 80007e8:	2011      	movs	r0, #17
 80007ea:	4798      	blx	r3
    Dev->IO_Drv.ioctl(ILI9341_Delay150);
 80007ec:	683b      	ldr	r3, [r7, #0]
 80007ee:	6a1b      	ldr	r3, [r3, #32]
 80007f0:	2000      	movs	r0, #0
 80007f2:	4798      	blx	r3


    //Display ON - Page 109
    Dev->IO_Drv.write(ILI9341_DISPON, buffer, 0);
 80007f4:	683b      	ldr	r3, [r7, #0]
 80007f6:	699b      	ldr	r3, [r3, #24]
 80007f8:	f107 0114 	add.w	r1, r7, #20
 80007fc:	2200      	movs	r2, #0
 80007fe:	2029      	movs	r0, #41	; 0x29
 8000800:	4798      	blx	r3

    Dev->IO_Drv.write(ILI9341_MADCTL, &Settings.Orientation,1);
 8000802:	683b      	ldr	r3, [r7, #0]
 8000804:	699b      	ldr	r3, [r3, #24]
 8000806:	1d39      	adds	r1, r7, #4
 8000808:	2201      	movs	r2, #1
 800080a:	2036      	movs	r0, #54	; 0x36
 800080c:	4798      	blx	r3
}
 800080e:	bf00      	nop
 8000810:	3728      	adds	r7, #40	; 0x28
 8000812:	46bd      	mov	sp, r7
 8000814:	bdb0      	pop	{r4, r5, r7, pc}

08000816 <ILI9341_FillSceen>:
void ILI9341_DrawPixel(ILI9341_Handle_t *Dev, ILI9341_Color_t Color, ILI9341_Coordinate_t Position){
    ILI9341_SetCoordinates(Dev,Position,Position);
    Dev->IO_Drv.write(ILI9341_RAMWR,(uint8_t*)&Color,3);
}

void ILI9341_FillSceen(ILI9341_Handle_t *Dev, ILI9341_Color_t Color){
 8000816:	b580      	push	{r7, lr}
 8000818:	b084      	sub	sp, #16
 800081a:	af00      	add	r7, sp, #0
 800081c:	6078      	str	r0, [r7, #4]
 800081e:	6039      	str	r1, [r7, #0]
    ILI9341_Coordinate_t CoordinateStart = {.X = 0, .Y = 0};
 8000820:	2300      	movs	r3, #0
 8000822:	81bb      	strh	r3, [r7, #12]
 8000824:	2300      	movs	r3, #0
 8000826:	81fb      	strh	r3, [r7, #14]
    ILI9341_Coordinate_t CoordinateEnd = {.X = Dev->ScreenWidth-1, .Y = Dev->ScreenHeight-1};
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	685b      	ldr	r3, [r3, #4]
 800082c:	b29b      	uxth	r3, r3
 800082e:	3b01      	subs	r3, #1
 8000830:	b29b      	uxth	r3, r3
 8000832:	b21b      	sxth	r3, r3
 8000834:	813b      	strh	r3, [r7, #8]
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	689b      	ldr	r3, [r3, #8]
 800083a:	b29b      	uxth	r3, r3
 800083c:	3b01      	subs	r3, #1
 800083e:	b29b      	uxth	r3, r3
 8000840:	b21b      	sxth	r3, r3
 8000842:	817b      	strh	r3, [r7, #10]
    ILI9341_SetCoordinates(Dev, CoordinateStart, CoordinateEnd);
 8000844:	68ba      	ldr	r2, [r7, #8]
 8000846:	68f9      	ldr	r1, [r7, #12]
 8000848:	6878      	ldr	r0, [r7, #4]
 800084a:	f000 f811 	bl	8000870 <ILI9341_SetCoordinates>
    Dev->IO_Drv.write(ILI9341_RAMWR,(uint8_t*)&Color, 0);
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	699b      	ldr	r3, [r3, #24]
 8000852:	4639      	mov	r1, r7
 8000854:	2200      	movs	r2, #0
 8000856:	202c      	movs	r0, #44	; 0x2c
 8000858:	4798      	blx	r3
    Dev->IO_Drv.write(ILI9341_NOCOMMAND, (uint8_t*)&Color, TOTAL_SCREEN_BYTES);
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	699b      	ldr	r3, [r3, #24]
 800085e:	4639      	mov	r1, r7
 8000860:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8000864:	20ff      	movs	r0, #255	; 0xff
 8000866:	4798      	blx	r3
}
 8000868:	bf00      	nop
 800086a:	3710      	adds	r7, #16
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}

08000870 <ILI9341_SetCoordinates>:
    uint32_t TotalBytes = width*height*3;
    Dev->IO_Drv.write(ILI9341_RAMWR,(uint8_t*)&Color,0);
    Dev->IO_Drv.write(ILI9341_NOCOMMAND, (uint8_t*)&Color, TotalBytes);
}

static void ILI9341_SetCoordinates(ILI9341_Handle_t *Dev, ILI9341_Coordinate_t StartCorner, ILI9341_Coordinate_t EndCorner){
 8000870:	b580      	push	{r7, lr}
 8000872:	b086      	sub	sp, #24
 8000874:	af00      	add	r7, sp, #0
 8000876:	60f8      	str	r0, [r7, #12]
 8000878:	60b9      	str	r1, [r7, #8]
 800087a:	607a      	str	r2, [r7, #4]
    ILI9341_DrawBounds_t Coordinate = {.S_MSB = StartCorner.X >> 8, .S_LSB = StartCorner.X, .E_MSB = EndCorner.X >> 8, .E_LSB = EndCorner.X};
 800087c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000880:	121b      	asrs	r3, r3, #8
 8000882:	b21b      	sxth	r3, r3
 8000884:	b2db      	uxtb	r3, r3
 8000886:	753b      	strb	r3, [r7, #20]
 8000888:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800088c:	b2db      	uxtb	r3, r3
 800088e:	757b      	strb	r3, [r7, #21]
 8000890:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000894:	121b      	asrs	r3, r3, #8
 8000896:	b21b      	sxth	r3, r3
 8000898:	b2db      	uxtb	r3, r3
 800089a:	75bb      	strb	r3, [r7, #22]
 800089c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80008a0:	b2db      	uxtb	r3, r3
 80008a2:	75fb      	strb	r3, [r7, #23]
    Dev->IO_Drv.write(ILI9341_CASET,(uint8_t*)&Coordinate,4);
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	699b      	ldr	r3, [r3, #24]
 80008a8:	f107 0114 	add.w	r1, r7, #20
 80008ac:	2204      	movs	r2, #4
 80008ae:	202a      	movs	r0, #42	; 0x2a
 80008b0:	4798      	blx	r3
    Coordinate.S_MSB = StartCorner.Y >> 8;
 80008b2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80008b6:	121b      	asrs	r3, r3, #8
 80008b8:	b21b      	sxth	r3, r3
 80008ba:	b2db      	uxtb	r3, r3
 80008bc:	753b      	strb	r3, [r7, #20]
    Coordinate.S_LSB = StartCorner.Y;
 80008be:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80008c2:	b2db      	uxtb	r3, r3
 80008c4:	757b      	strb	r3, [r7, #21]
    Coordinate.E_MSB = EndCorner.Y >> 8;
 80008c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80008ca:	121b      	asrs	r3, r3, #8
 80008cc:	b21b      	sxth	r3, r3
 80008ce:	b2db      	uxtb	r3, r3
 80008d0:	75bb      	strb	r3, [r7, #22]
    Coordinate.E_LSB = EndCorner.Y;
 80008d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80008d6:	b2db      	uxtb	r3, r3
 80008d8:	75fb      	strb	r3, [r7, #23]
    Dev->IO_Drv.write(ILI9341_PASET,(uint8_t*)&Coordinate,4);
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	699b      	ldr	r3, [r3, #24]
 80008de:	f107 0114 	add.w	r1, r7, #20
 80008e2:	2204      	movs	r2, #4
 80008e4:	202b      	movs	r0, #43	; 0x2b
 80008e6:	4798      	blx	r3
}
 80008e8:	bf00      	nop
 80008ea:	3718      	adds	r7, #24
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}

080008f0 <ILI9341_DisplayImage>:
        return DimensionsInvalid;
    }
    return DimensionsValid;
}

void ILI9341_DisplayImage(ILI9341_Handle_t *Dev, ILI9341_Image_t Image){
 80008f0:	b084      	sub	sp, #16
 80008f2:	b580      	push	{r7, lr}
 80008f4:	b084      	sub	sp, #16
 80008f6:	af00      	add	r7, sp, #0
 80008f8:	6078      	str	r0, [r7, #4]
 80008fa:	f107 001c 	add.w	r0, r7, #28
 80008fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    ILI9341_Coordinate_t CoordinateStart = {.X = Dev->Cursor.X, .Y = Dev->Cursor.Y};
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8000908:	81bb      	strh	r3, [r7, #12]
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000910:	81fb      	strh	r3, [r7, #14]
    ILI9341_Coordinate_t CoordinateEnd = {.X = CoordinateStart.X + Image.Width - 1, .Y = CoordinateStart.Y + Image.Height - 1};
 8000912:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000916:	b29a      	uxth	r2, r3
 8000918:	69fb      	ldr	r3, [r7, #28]
 800091a:	b29b      	uxth	r3, r3
 800091c:	4413      	add	r3, r2
 800091e:	b29b      	uxth	r3, r3
 8000920:	3b01      	subs	r3, #1
 8000922:	b29b      	uxth	r3, r3
 8000924:	b21b      	sxth	r3, r3
 8000926:	813b      	strh	r3, [r7, #8]
 8000928:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800092c:	b29a      	uxth	r2, r3
 800092e:	6a3b      	ldr	r3, [r7, #32]
 8000930:	b29b      	uxth	r3, r3
 8000932:	4413      	add	r3, r2
 8000934:	b29b      	uxth	r3, r3
 8000936:	3b01      	subs	r3, #1
 8000938:	b29b      	uxth	r3, r3
 800093a:	b21b      	sxth	r3, r3
 800093c:	817b      	strh	r3, [r7, #10]
    ILI9341_SetCoordinates(Dev,CoordinateStart,CoordinateEnd);
 800093e:	68ba      	ldr	r2, [r7, #8]
 8000940:	68f9      	ldr	r1, [r7, #12]
 8000942:	6878      	ldr	r0, [r7, #4]
 8000944:	f7ff ff94 	bl	8000870 <ILI9341_SetCoordinates>
    uint8_t dummy;
    //Dev->IO_Drv.write(ILI9341_RAMWR,(uint8_t*)&dummy,0);
    Dev->IO_Drv.write(ILI9341_RAMWR, Image.ImageData, Image.ImageLength);
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	699b      	ldr	r3, [r3, #24]
 800094c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800094e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000950:	202c      	movs	r0, #44	; 0x2c
 8000952:	4798      	blx	r3
}
 8000954:	bf00      	nop
 8000956:	3710      	adds	r7, #16
 8000958:	46bd      	mov	sp, r7
 800095a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800095e:	b004      	add	sp, #16
 8000960:	4770      	bx	lr

08000962 <ILI9341_IO_Init>:
#include "gpio.h"

static void ILI9341_CSState(uint8_t state);
static void ILI9341_DCRSState(uint8_t state);

static void ILI9341_IO_Init(void){
 8000962:	b580      	push	{r7, lr}
 8000964:	af00      	add	r7, sp, #0
  ILI9341_GPIO_Init();
 8000966:	f001 f873 	bl	8001a50 <ILI9341_GPIO_Init>
  ILI9341_SPI_Init();
 800096a:	f001 fd19 	bl	80023a0 <ILI9341_SPI_Init>
}
 800096e:	bf00      	nop
 8000970:	bd80      	pop	{r7, pc}

08000972 <ILI9341_IO_DeInit>:

static void ILI9341_IO_DeInit(void){
 8000972:	b580      	push	{r7, lr}
 8000974:	af00      	add	r7, sp, #0
	ILI9341_GPIO_DeInit();
 8000976:	f001 f8ad 	bl	8001ad4 <ILI9341_GPIO_DeInit>
}
 800097a:	bf00      	nop
 800097c:	bd80      	pop	{r7, pc}

0800097e <ILI9341_IO_ioctl>:

static ILI9341_Status_t ILI9341_IO_ioctl(ILI9341_Cmd_t Command){
 800097e:	b580      	push	{r7, lr}
 8000980:	b082      	sub	sp, #8
 8000982:	af00      	add	r7, sp, #0
 8000984:	4603      	mov	r3, r0
 8000986:	71fb      	strb	r3, [r7, #7]
    switch(Command){
 8000988:	79fb      	ldrb	r3, [r7, #7]
 800098a:	2b00      	cmp	r3, #0
 800098c:	d002      	beq.n	8000994 <ILI9341_IO_ioctl+0x16>
 800098e:	2b01      	cmp	r3, #1
 8000990:	d005      	beq.n	800099e <ILI9341_IO_ioctl+0x20>
 8000992:	e00a      	b.n	80009aa <ILI9341_IO_ioctl+0x2c>
    case(ILI9341_Delay150):
    		HAL_Delay(150);
 8000994:	2096      	movs	r0, #150	; 0x96
 8000996:	f002 f881 	bl	8002a9c <HAL_Delay>
            return ILI9341_Ok;
 800099a:	2300      	movs	r3, #0
 800099c:	e006      	b.n	80009ac <ILI9341_IO_ioctl+0x2e>
    case(ILI9341_Delay1000):
    		HAL_Delay(1000);
 800099e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009a2:	f002 f87b 	bl	8002a9c <HAL_Delay>
            return ILI9341_Ok;
 80009a6:	2300      	movs	r3, #0
 80009a8:	e000      	b.n	80009ac <ILI9341_IO_ioctl+0x2e>
    default:
    	return ILI9341_Ok;
 80009aa:	2300      	movs	r3, #0
    }
}
 80009ac:	4618      	mov	r0, r3
 80009ae:	3708      	adds	r7, #8
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}

080009b4 <ILI9341_IO_WriteReg>:

static ILI9341_Status_t ILI9341_IO_WriteReg(uint8_t reg, uint8_t* pdata, uint32_t length){
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b086      	sub	sp, #24
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	4603      	mov	r3, r0
 80009bc:	60b9      	str	r1, [r7, #8]
 80009be:	607a      	str	r2, [r7, #4]
 80009c0:	73fb      	strb	r3, [r7, #15]
	ILI9341_CSState(GPIO_PIN_RESET);
 80009c2:	2000      	movs	r0, #0
 80009c4:	f000 f8a8 	bl	8000b18 <ILI9341_CSState>
	if(reg != 0xFF){
 80009c8:	7bfb      	ldrb	r3, [r7, #15]
 80009ca:	2bff      	cmp	r3, #255	; 0xff
 80009cc:	d00e      	beq.n	80009ec <ILI9341_IO_WriteReg+0x38>
		ILI9341_DCRSState(GPIO_PIN_RESET);
 80009ce:	2000      	movs	r0, #0
 80009d0:	f000 f8bc 	bl	8000b4c <ILI9341_DCRSState>
		if(HAL_SPI_Transmit(&hspi1, &reg, 1, 10) != HAL_OK){
 80009d4:	f107 010f 	add.w	r1, r7, #15
 80009d8:	230a      	movs	r3, #10
 80009da:	2201      	movs	r2, #1
 80009dc:	4832      	ldr	r0, [pc, #200]	; (8000aa8 <ILI9341_IO_WriteReg+0xf4>)
 80009de:	f006 fc34 	bl	800724a <HAL_SPI_Transmit>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <ILI9341_IO_WriteReg+0x38>
			return ILI9341_Err;
 80009e8:	2301      	movs	r3, #1
 80009ea:	e059      	b.n	8000aa0 <ILI9341_IO_WriteReg+0xec>
		}
	}

	ILI9341_DCRSState(GPIO_PIN_SET);
 80009ec:	2001      	movs	r0, #1
 80009ee:	f000 f8ad 	bl	8000b4c <ILI9341_DCRSState>
	if(length != 0 && reg != 0xFF){
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d00f      	beq.n	8000a18 <ILI9341_IO_WriteReg+0x64>
 80009f8:	7bfb      	ldrb	r3, [r7, #15]
 80009fa:	2bff      	cmp	r3, #255	; 0xff
 80009fc:	d00c      	beq.n	8000a18 <ILI9341_IO_WriteReg+0x64>
		if(HAL_SPI_Transmit(&hspi1, pdata, length, 1000) != HAL_OK){
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	b29a      	uxth	r2, r3
 8000a02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a06:	68b9      	ldr	r1, [r7, #8]
 8000a08:	4827      	ldr	r0, [pc, #156]	; (8000aa8 <ILI9341_IO_WriteReg+0xf4>)
 8000a0a:	f006 fc1e 	bl	800724a <HAL_SPI_Transmit>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d044      	beq.n	8000a9e <ILI9341_IO_WriteReg+0xea>
			return ILI9341_Err;
 8000a14:	2301      	movs	r3, #1
 8000a16:	e043      	b.n	8000aa0 <ILI9341_IO_WriteReg+0xec>
		}
	}else if(length != 0 && reg == 0xFF){
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d03c      	beq.n	8000a98 <ILI9341_IO_WriteReg+0xe4>
 8000a1e:	7bfb      	ldrb	r3, [r7, #15]
 8000a20:	2bff      	cmp	r3, #255	; 0xff
 8000a22:	d139      	bne.n	8000a98 <ILI9341_IO_WriteReg+0xe4>
        for(uint32_t i = 0; i < length; i = i + 3){
 8000a24:	2300      	movs	r3, #0
 8000a26:	617b      	str	r3, [r7, #20]
 8000a28:	e031      	b.n	8000a8e <ILI9341_IO_WriteReg+0xda>
    		if(HAL_SPI_Transmit(&hspi1, pdata, 1, 10) != HAL_OK){
 8000a2a:	230a      	movs	r3, #10
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	68b9      	ldr	r1, [r7, #8]
 8000a30:	481d      	ldr	r0, [pc, #116]	; (8000aa8 <ILI9341_IO_WriteReg+0xf4>)
 8000a32:	f006 fc0a 	bl	800724a <HAL_SPI_Transmit>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <ILI9341_IO_WriteReg+0x8c>
    			return ILI9341_Err;
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	e02f      	b.n	8000aa0 <ILI9341_IO_WriteReg+0xec>
    		}

    		if(HAL_SPI_Transmit(&hspi1, pdata + 1, 1, 10) != HAL_OK){
 8000a40:	68bb      	ldr	r3, [r7, #8]
 8000a42:	1c59      	adds	r1, r3, #1
 8000a44:	230a      	movs	r3, #10
 8000a46:	2201      	movs	r2, #1
 8000a48:	4817      	ldr	r0, [pc, #92]	; (8000aa8 <ILI9341_IO_WriteReg+0xf4>)
 8000a4a:	f006 fbfe 	bl	800724a <HAL_SPI_Transmit>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <ILI9341_IO_WriteReg+0xa4>
    			return ILI9341_Err;
 8000a54:	2301      	movs	r3, #1
 8000a56:	e023      	b.n	8000aa0 <ILI9341_IO_WriteReg+0xec>
    		}

    		if(HAL_SPI_Transmit(&hspi1, pdata + 2, 1, 10) != HAL_OK){
 8000a58:	68bb      	ldr	r3, [r7, #8]
 8000a5a:	1c99      	adds	r1, r3, #2
 8000a5c:	230a      	movs	r3, #10
 8000a5e:	2201      	movs	r2, #1
 8000a60:	4811      	ldr	r0, [pc, #68]	; (8000aa8 <ILI9341_IO_WriteReg+0xf4>)
 8000a62:	f006 fbf2 	bl	800724a <HAL_SPI_Transmit>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <ILI9341_IO_WriteReg+0xbc>
    			return ILI9341_Err;
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	e017      	b.n	8000aa0 <ILI9341_IO_WriteReg+0xec>
    		}
    		if(i == length - 10000){
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	f5a3 531c 	sub.w	r3, r3, #9984	; 0x2700
 8000a76:	3b10      	subs	r3, #16
 8000a78:	697a      	ldr	r2, [r7, #20]
 8000a7a:	429a      	cmp	r2, r3
 8000a7c:	d104      	bne.n	8000a88 <ILI9341_IO_WriteReg+0xd4>
    			uint8_t j =0;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	74fb      	strb	r3, [r7, #19]
    			j++;
 8000a82:	7cfb      	ldrb	r3, [r7, #19]
 8000a84:	3301      	adds	r3, #1
 8000a86:	74fb      	strb	r3, [r7, #19]
        for(uint32_t i = 0; i < length; i = i + 3){
 8000a88:	697b      	ldr	r3, [r7, #20]
 8000a8a:	3303      	adds	r3, #3
 8000a8c:	617b      	str	r3, [r7, #20]
 8000a8e:	697a      	ldr	r2, [r7, #20]
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	429a      	cmp	r2, r3
 8000a94:	d3c9      	bcc.n	8000a2a <ILI9341_IO_WriteReg+0x76>
 8000a96:	e002      	b.n	8000a9e <ILI9341_IO_WriteReg+0xea>
    		}
        }
	}else {
		ILI9341_CSState(GPIO_PIN_SET);
 8000a98:	2001      	movs	r0, #1
 8000a9a:	f000 f83d 	bl	8000b18 <ILI9341_CSState>
	}
	return ILI9341_Ok;
 8000a9e:	2300      	movs	r3, #0
}
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	3718      	adds	r7, #24
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	20000c74 	.word	0x20000c74

08000aac <ILI9341_IO_ReadReg>:

static ILI9341_Status_t ILI9341_IO_ReadReg(uint8_t reg, uint8_t* pdata, uint32_t length){
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b084      	sub	sp, #16
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	60b9      	str	r1, [r7, #8]
 8000ab6:	607a      	str	r2, [r7, #4]
 8000ab8:	73fb      	strb	r3, [r7, #15]
	ILI9341_CSState(GPIO_PIN_RESET);
 8000aba:	2000      	movs	r0, #0
 8000abc:	f000 f82c 	bl	8000b18 <ILI9341_CSState>
	ILI9341_DCRSState(GPIO_PIN_RESET);
 8000ac0:	2000      	movs	r0, #0
 8000ac2:	f000 f843 	bl	8000b4c <ILI9341_DCRSState>
	if(HAL_SPI_Transmit(&hspi1, &reg, 1, 10) != HAL_OK){
 8000ac6:	f107 010f 	add.w	r1, r7, #15
 8000aca:	230a      	movs	r3, #10
 8000acc:	2201      	movs	r2, #1
 8000ace:	4811      	ldr	r0, [pc, #68]	; (8000b14 <ILI9341_IO_ReadReg+0x68>)
 8000ad0:	f006 fbbb 	bl	800724a <HAL_SPI_Transmit>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <ILI9341_IO_ReadReg+0x32>
        return ILI9341_Err;
 8000ada:	2301      	movs	r3, #1
 8000adc:	e015      	b.n	8000b0a <ILI9341_IO_ReadReg+0x5e>
	}
	ILI9341_DCRSState(GPIO_PIN_SET);
 8000ade:	2001      	movs	r0, #1
 8000ae0:	f000 f834 	bl	8000b4c <ILI9341_DCRSState>

	if(length != 0){
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d00b      	beq.n	8000b02 <ILI9341_IO_ReadReg+0x56>
		if(HAL_SPI_Receive(&hspi1, pdata, length, 10) != HAL_OK){
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	b29a      	uxth	r2, r3
 8000aee:	230a      	movs	r3, #10
 8000af0:	68b9      	ldr	r1, [r7, #8]
 8000af2:	4808      	ldr	r0, [pc, #32]	; (8000b14 <ILI9341_IO_ReadReg+0x68>)
 8000af4:	f006 fce5 	bl	80074c2 <HAL_SPI_Receive>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <ILI9341_IO_ReadReg+0x56>
			return ILI9341_Err;
 8000afe:	2301      	movs	r3, #1
 8000b00:	e003      	b.n	8000b0a <ILI9341_IO_ReadReg+0x5e>
		}
	}
	ILI9341_CSState(GPIO_PIN_SET);
 8000b02:	2001      	movs	r0, #1
 8000b04:	f000 f808 	bl	8000b18 <ILI9341_CSState>
	return ILI9341_Ok;
 8000b08:	2300      	movs	r3, #0
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	3710      	adds	r7, #16
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	20000c74 	.word	0x20000c74

08000b18 <ILI9341_CSState>:

static void ILI9341_CSState(uint8_t state){
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	4603      	mov	r3, r0
 8000b20:	71fb      	strb	r3, [r7, #7]
  if(state){
 8000b22:	79fb      	ldrb	r3, [r7, #7]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d005      	beq.n	8000b34 <ILI9341_CSState+0x1c>
    HAL_GPIO_WritePin(SPI1_CSN_GPIO_Port, SPI1_CSN_Pin, GPIO_PIN_SET);
 8000b28:	2201      	movs	r2, #1
 8000b2a:	2101      	movs	r1, #1
 8000b2c:	4806      	ldr	r0, [pc, #24]	; (8000b48 <ILI9341_CSState+0x30>)
 8000b2e:	f003 fc1b 	bl	8004368 <HAL_GPIO_WritePin>
  } else {
    HAL_GPIO_WritePin(SPI1_CSN_GPIO_Port, SPI1_CSN_Pin, GPIO_PIN_RESET);
  }
}
 8000b32:	e004      	b.n	8000b3e <ILI9341_CSState+0x26>
    HAL_GPIO_WritePin(SPI1_CSN_GPIO_Port, SPI1_CSN_Pin, GPIO_PIN_RESET);
 8000b34:	2200      	movs	r2, #0
 8000b36:	2101      	movs	r1, #1
 8000b38:	4803      	ldr	r0, [pc, #12]	; (8000b48 <ILI9341_CSState+0x30>)
 8000b3a:	f003 fc15 	bl	8004368 <HAL_GPIO_WritePin>
}
 8000b3e:	bf00      	nop
 8000b40:	3708      	adds	r7, #8
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	40020400 	.word	0x40020400

08000b4c <ILI9341_DCRSState>:

static void ILI9341_DCRSState(uint8_t state){
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	4603      	mov	r3, r0
 8000b54:	71fb      	strb	r3, [r7, #7]
  if(state){
 8000b56:	79fb      	ldrb	r3, [r7, #7]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d005      	beq.n	8000b68 <ILI9341_DCRSState+0x1c>
    HAL_GPIO_WritePin(DCRS_GPIO_Port, DCRS_Pin, GPIO_PIN_SET);
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	2102      	movs	r1, #2
 8000b60:	4806      	ldr	r0, [pc, #24]	; (8000b7c <ILI9341_DCRSState+0x30>)
 8000b62:	f003 fc01 	bl	8004368 <HAL_GPIO_WritePin>
  } else {
    HAL_GPIO_WritePin(DCRS_GPIO_Port, DCRS_Pin, GPIO_PIN_RESET);
  }
}
 8000b66:	e004      	b.n	8000b72 <ILI9341_DCRSState+0x26>
    HAL_GPIO_WritePin(DCRS_GPIO_Port, DCRS_Pin, GPIO_PIN_RESET);
 8000b68:	2200      	movs	r2, #0
 8000b6a:	2102      	movs	r1, #2
 8000b6c:	4803      	ldr	r0, [pc, #12]	; (8000b7c <ILI9341_DCRSState+0x30>)
 8000b6e:	f003 fbfb 	bl	8004368 <HAL_GPIO_WritePin>
}
 8000b72:	bf00      	nop
 8000b74:	3708      	adds	r7, #8
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	40020400 	.word	0x40020400

08000b80 <MCP23017_Init>:
 *@Params: Init Struct with desired settings, Device handle to initialize, a low level IO Driver struct
 *@Return: None
 *@Precondition: Init Struct should have desired settings
 *@Postcondition: Device struct will be intialized and ready to use
 **************************************//**************************************/
void MCP23017_Init(MCP23017_Init_Struct_t Settings, MCP23017_Handle_t *Dev, MCP23017_IO_Drv_t IO_Driver){
 8000b80:	b590      	push	{r4, r7, lr}
 8000b82:	b085      	sub	sp, #20
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	463c      	mov	r4, r7
 8000b88:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	Dev->IO_Driver.Init = IO_Driver.Init;
 8000b8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b8e:	6a3b      	ldr	r3, [r7, #32]
 8000b90:	605a      	str	r2, [r3, #4]
	Dev->IO_Driver.DeInit = IO_Driver.DeInit;
 8000b92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000b94:	6a3b      	ldr	r3, [r7, #32]
 8000b96:	609a      	str	r2, [r3, #8]
	Dev->IO_Driver.ReadReg = IO_Driver.ReadReg;
 8000b98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000b9a:	6a3b      	ldr	r3, [r7, #32]
 8000b9c:	611a      	str	r2, [r3, #16]
	Dev->IO_Driver.WriteReg = IO_Driver.WriteReg;
 8000b9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000ba0:	6a3b      	ldr	r3, [r7, #32]
 8000ba2:	60da      	str	r2, [r3, #12]
	Dev->IO_Driver.ioctl = IO_Driver.ioctl;
 8000ba4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000ba6:	6a3b      	ldr	r3, [r7, #32]
 8000ba8:	615a      	str	r2, [r3, #20]
	Dev->IO_Driver.Init();
 8000baa:	6a3b      	ldr	r3, [r7, #32]
 8000bac:	685b      	ldr	r3, [r3, #4]
 8000bae:	4798      	blx	r3

	if(Dev->IO_Driver.WriteReg(MCP23017_IOCON, (uint8_t*)&Settings.Config,1) != MCP23017_Ok){
 8000bb0:	6a3b      	ldr	r3, [r7, #32]
 8000bb2:	68db      	ldr	r3, [r3, #12]
 8000bb4:	200a      	movs	r0, #10
 8000bb6:	463a      	mov	r2, r7
 8000bb8:	f102 010c 	add.w	r1, r2, #12
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	4798      	blx	r3
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d003      	beq.n	8000bce <MCP23017_Init+0x4e>
		_log(log_mcp23017, "Initialization: IOCON Write Failed");
 8000bc6:	492e      	ldr	r1, [pc, #184]	; (8000c80 <MCP23017_Init+0x100>)
 8000bc8:	2005      	movs	r0, #5
 8000bca:	f001 f84b 	bl	8001c64 <_log>
	}

	if(Dev->IO_Driver.WriteReg(MCP23017_IODIRA, (uint8_t*)&Settings.Mode,2) != MCP23017_Ok){
 8000bce:	6a3b      	ldr	r3, [r7, #32]
 8000bd0:	68db      	ldr	r3, [r3, #12]
 8000bd2:	2000      	movs	r0, #0
 8000bd4:	4639      	mov	r1, r7
 8000bd6:	2202      	movs	r2, #2
 8000bd8:	4798      	blx	r3
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d003      	beq.n	8000be8 <MCP23017_Init+0x68>
		_log(log_mcp23017, "Initialization: IODIR Write Failed");
 8000be0:	4928      	ldr	r1, [pc, #160]	; (8000c84 <MCP23017_Init+0x104>)
 8000be2:	2005      	movs	r0, #5
 8000be4:	f001 f83e 	bl	8001c64 <_log>
	}

	if(Dev->IO_Driver.WriteReg(MCP23017_IPOLA, (uint8_t*)&Settings.Polarity,2) != MCP23017_Ok){
 8000be8:	6a3b      	ldr	r3, [r7, #32]
 8000bea:	68db      	ldr	r3, [r3, #12]
 8000bec:	2002      	movs	r0, #2
 8000bee:	463a      	mov	r2, r7
 8000bf0:	1c91      	adds	r1, r2, #2
 8000bf2:	2202      	movs	r2, #2
 8000bf4:	4798      	blx	r3
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d003      	beq.n	8000c04 <MCP23017_Init+0x84>
		_log(log_mcp23017, "Initialization: IPOL Write Failed");
 8000bfc:	4922      	ldr	r1, [pc, #136]	; (8000c88 <MCP23017_Init+0x108>)
 8000bfe:	2005      	movs	r0, #5
 8000c00:	f001 f830 	bl	8001c64 <_log>
	}

	if(Dev->IO_Driver.WriteReg(MCP23017_GPINTENA, (uint8_t*)&Settings.IntEnable,2) != MCP23017_Ok){
 8000c04:	6a3b      	ldr	r3, [r7, #32]
 8000c06:	68db      	ldr	r3, [r3, #12]
 8000c08:	2004      	movs	r0, #4
 8000c0a:	463a      	mov	r2, r7
 8000c0c:	1d11      	adds	r1, r2, #4
 8000c0e:	2202      	movs	r2, #2
 8000c10:	4798      	blx	r3
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d003      	beq.n	8000c20 <MCP23017_Init+0xa0>
		_log(log_mcp23017, "Initialization: INTENA Write Failed");
 8000c18:	491c      	ldr	r1, [pc, #112]	; (8000c8c <MCP23017_Init+0x10c>)
 8000c1a:	2005      	movs	r0, #5
 8000c1c:	f001 f822 	bl	8001c64 <_log>
	}

	if(Dev->IO_Driver.WriteReg(MCP23017_DEFVALA, (uint8_t*)&Settings.DefaultValue,2) != MCP23017_Ok){
 8000c20:	6a3b      	ldr	r3, [r7, #32]
 8000c22:	68db      	ldr	r3, [r3, #12]
 8000c24:	2006      	movs	r0, #6
 8000c26:	463a      	mov	r2, r7
 8000c28:	1d91      	adds	r1, r2, #6
 8000c2a:	2202      	movs	r2, #2
 8000c2c:	4798      	blx	r3
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d003      	beq.n	8000c3c <MCP23017_Init+0xbc>
		_log(log_mcp23017, "Initialization: DEFVAL Write Failed");
 8000c34:	4916      	ldr	r1, [pc, #88]	; (8000c90 <MCP23017_Init+0x110>)
 8000c36:	2005      	movs	r0, #5
 8000c38:	f001 f814 	bl	8001c64 <_log>
	}

	if(Dev->IO_Driver.WriteReg(MCP23017_INTCONA, (uint8_t*)&Settings.IRQControl,2) != MCP23017_Ok){
 8000c3c:	6a3b      	ldr	r3, [r7, #32]
 8000c3e:	68db      	ldr	r3, [r3, #12]
 8000c40:	2008      	movs	r0, #8
 8000c42:	463a      	mov	r2, r7
 8000c44:	f102 0108 	add.w	r1, r2, #8
 8000c48:	2202      	movs	r2, #2
 8000c4a:	4798      	blx	r3
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d003      	beq.n	8000c5a <MCP23017_Init+0xda>
		_log(log_mcp23017, "Initialization: INTCON Write Failed");
 8000c52:	4910      	ldr	r1, [pc, #64]	; (8000c94 <MCP23017_Init+0x114>)
 8000c54:	2005      	movs	r0, #5
 8000c56:	f001 f805 	bl	8001c64 <_log>
	}

	if(Dev->IO_Driver.WriteReg(MCP23017_GPPUA, (uint8_t*)&Settings.PullUp,2) != MCP23017_Ok){
 8000c5a:	6a3b      	ldr	r3, [r7, #32]
 8000c5c:	68db      	ldr	r3, [r3, #12]
 8000c5e:	200c      	movs	r0, #12
 8000c60:	463a      	mov	r2, r7
 8000c62:	f102 010a 	add.w	r1, r2, #10
 8000c66:	2202      	movs	r2, #2
 8000c68:	4798      	blx	r3
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d003      	beq.n	8000c78 <MCP23017_Init+0xf8>
		_log(log_mcp23017, "Initialization: GPPU Write Failed");
 8000c70:	4909      	ldr	r1, [pc, #36]	; (8000c98 <MCP23017_Init+0x118>)
 8000c72:	2005      	movs	r0, #5
 8000c74:	f000 fff6 	bl	8001c64 <_log>
	}

}
 8000c78:	bf00      	nop
 8000c7a:	3714      	adds	r7, #20
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd90      	pop	{r4, r7, pc}
 8000c80:	0800e47c 	.word	0x0800e47c
 8000c84:	0800e4a0 	.word	0x0800e4a0
 8000c88:	0800e4c4 	.word	0x0800e4c4
 8000c8c:	0800e4e8 	.word	0x0800e4e8
 8000c90:	0800e50c 	.word	0x0800e50c
 8000c94:	0800e530 	.word	0x0800e530
 8000c98:	0800e554 	.word	0x0800e554

08000c9c <MCP23017_DeInit>:
 *@Params: MCP23017 Device handle to deinitialize
 *@Return: None
 *@Precondition: Device handle should be initialized
 *@Postcondition: Device handle will be deinitialized and device registers set to default settings
 **************************************//**************************************/
void MCP23017_DeInit(MCP23017_Handle_t *Dev){
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
	MCP23017_Reset(Dev);
 8000ca4:	6878      	ldr	r0, [r7, #4]
 8000ca6:	f000 f813 	bl	8000cd0 <MCP23017_Reset>
	Dev->IO_Driver.Init = '\0';
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	2200      	movs	r2, #0
 8000cae:	605a      	str	r2, [r3, #4]
	Dev->IO_Driver.DeInit = '\0';
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	609a      	str	r2, [r3, #8]
	Dev->IO_Driver.ReadReg = '\0';
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	2200      	movs	r2, #0
 8000cba:	611a      	str	r2, [r3, #16]
	Dev->IO_Driver.WriteReg = '\0';
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	60da      	str	r2, [r3, #12]
	Dev->IO_Driver.ioctl = '\0';
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	615a      	str	r2, [r3, #20]
}
 8000cc8:	bf00      	nop
 8000cca:	3708      	adds	r7, #8
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}

08000cd0 <MCP23017_Reset>:
 *@Params: MCP23017 Device Handle to reset
 *@Return: None
 *@Precondition: Device handle should be initialized
 *@Postcondition: Device registers will be set to default settings
 **************************************//**************************************/
void MCP23017_Reset(MCP23017_Handle_t *Dev){
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b084      	sub	sp, #16
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
	uint16_t Settings = 0;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	81fb      	strh	r3, [r7, #14]
	Dev->IO_Driver.DeInit(); //Turn off DMA IRQ and clear pending IRQ
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	689b      	ldr	r3, [r3, #8]
 8000ce0:	4798      	blx	r3
	if(Dev->IO_Driver.WriteReg(MCP23017_IOCON, (uint8_t*)&Settings,1) != MCP23017_Ok){
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	68db      	ldr	r3, [r3, #12]
 8000ce6:	200a      	movs	r0, #10
 8000ce8:	f107 010e 	add.w	r1, r7, #14
 8000cec:	2201      	movs	r2, #1
 8000cee:	4798      	blx	r3
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d003      	beq.n	8000cfe <MCP23017_Reset+0x2e>
		_log(log_mcp23017, "DeInitialization: IOCON Write Failed");
 8000cf6:	4930      	ldr	r1, [pc, #192]	; (8000db8 <MCP23017_Reset+0xe8>)
 8000cf8:	2005      	movs	r0, #5
 8000cfa:	f000 ffb3 	bl	8001c64 <_log>
	}

	Settings = 0xFFFF;
 8000cfe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d02:	81fb      	strh	r3, [r7, #14]
	if(Dev->IO_Driver.WriteReg(MCP23017_IODIRA, (uint8_t*)&Settings,2) != MCP23017_Ok){
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	68db      	ldr	r3, [r3, #12]
 8000d08:	2000      	movs	r0, #0
 8000d0a:	f107 010e 	add.w	r1, r7, #14
 8000d0e:	2202      	movs	r2, #2
 8000d10:	4798      	blx	r3
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d003      	beq.n	8000d20 <MCP23017_Reset+0x50>
		_log(log_mcp23017, "DeInitialization: IODIR Write Failed");
 8000d18:	4928      	ldr	r1, [pc, #160]	; (8000dbc <MCP23017_Reset+0xec>)
 8000d1a:	2005      	movs	r0, #5
 8000d1c:	f000 ffa2 	bl	8001c64 <_log>
	}

	Settings = 0x0000;
 8000d20:	2300      	movs	r3, #0
 8000d22:	81fb      	strh	r3, [r7, #14]
	if(Dev->IO_Driver.WriteReg(MCP23017_IPOLA, (uint8_t*)&Settings,2) != MCP23017_Ok){
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	68db      	ldr	r3, [r3, #12]
 8000d28:	2002      	movs	r0, #2
 8000d2a:	f107 010e 	add.w	r1, r7, #14
 8000d2e:	2202      	movs	r2, #2
 8000d30:	4798      	blx	r3
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d003      	beq.n	8000d40 <MCP23017_Reset+0x70>
		_log(log_mcp23017, "DeInitialization: IPOL Write Failed");
 8000d38:	4921      	ldr	r1, [pc, #132]	; (8000dc0 <MCP23017_Reset+0xf0>)
 8000d3a:	2005      	movs	r0, #5
 8000d3c:	f000 ff92 	bl	8001c64 <_log>
	}

	if(Dev->IO_Driver.WriteReg(MCP23017_GPINTENA, (uint8_t*)&Settings,2) != MCP23017_Ok){
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	68db      	ldr	r3, [r3, #12]
 8000d44:	2004      	movs	r0, #4
 8000d46:	f107 010e 	add.w	r1, r7, #14
 8000d4a:	2202      	movs	r2, #2
 8000d4c:	4798      	blx	r3
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d003      	beq.n	8000d5c <MCP23017_Reset+0x8c>
		_log(log_mcp23017, "DeInitialization: INTENA Write Failed");
 8000d54:	491b      	ldr	r1, [pc, #108]	; (8000dc4 <MCP23017_Reset+0xf4>)
 8000d56:	2005      	movs	r0, #5
 8000d58:	f000 ff84 	bl	8001c64 <_log>
	}

	if(Dev->IO_Driver.WriteReg(MCP23017_DEFVALA, (uint8_t*)&Settings,2) != MCP23017_Ok){
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	68db      	ldr	r3, [r3, #12]
 8000d60:	2006      	movs	r0, #6
 8000d62:	f107 010e 	add.w	r1, r7, #14
 8000d66:	2202      	movs	r2, #2
 8000d68:	4798      	blx	r3
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d003      	beq.n	8000d78 <MCP23017_Reset+0xa8>
		_log(log_mcp23017, "DeInitialization: DEFVAL Write Failed");
 8000d70:	4915      	ldr	r1, [pc, #84]	; (8000dc8 <MCP23017_Reset+0xf8>)
 8000d72:	2005      	movs	r0, #5
 8000d74:	f000 ff76 	bl	8001c64 <_log>
	}

	if(Dev->IO_Driver.WriteReg(MCP23017_INTCONA, (uint8_t*)&Settings,2) != MCP23017_Ok){
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	68db      	ldr	r3, [r3, #12]
 8000d7c:	2008      	movs	r0, #8
 8000d7e:	f107 010e 	add.w	r1, r7, #14
 8000d82:	2202      	movs	r2, #2
 8000d84:	4798      	blx	r3
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d003      	beq.n	8000d94 <MCP23017_Reset+0xc4>
		_log(log_mcp23017, "DeInitialization: INTCON Write Failed");
 8000d8c:	490f      	ldr	r1, [pc, #60]	; (8000dcc <MCP23017_Reset+0xfc>)
 8000d8e:	2005      	movs	r0, #5
 8000d90:	f000 ff68 	bl	8001c64 <_log>
	}

	if(Dev->IO_Driver.WriteReg(MCP23017_GPPUA, (uint8_t*)&Settings,2) != MCP23017_Ok){
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	68db      	ldr	r3, [r3, #12]
 8000d98:	200c      	movs	r0, #12
 8000d9a:	f107 010e 	add.w	r1, r7, #14
 8000d9e:	2202      	movs	r2, #2
 8000da0:	4798      	blx	r3
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d003      	beq.n	8000db0 <MCP23017_Reset+0xe0>
		_log(log_mcp23017, "DeInitialization: GPPU Write Failed");
 8000da8:	4909      	ldr	r1, [pc, #36]	; (8000dd0 <MCP23017_Reset+0x100>)
 8000daa:	2005      	movs	r0, #5
 8000dac:	f000 ff5a 	bl	8001c64 <_log>
	}
}
 8000db0:	bf00      	nop
 8000db2:	3710      	adds	r7, #16
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	0800e578 	.word	0x0800e578
 8000dbc:	0800e5a0 	.word	0x0800e5a0
 8000dc0:	0800e5c8 	.word	0x0800e5c8
 8000dc4:	0800e5ec 	.word	0x0800e5ec
 8000dc8:	0800e614 	.word	0x0800e614
 8000dcc:	0800e63c 	.word	0x0800e63c
 8000dd0:	0800e664 	.word	0x0800e664

08000dd4 <MCP23017_ReadPins>:
 *@Params: MCP23017 Device Handle
 *@Return: Err if read fails, Ok otherwise
 *@Precondition: Device handle must be initialized
 *@Postcondition: Device Handle PinStates will contain new states of pins
 **************************************//**************************************/
MCP23017_Status_t MCP23017_ReadPins(MCP23017_Handle_t *Dev){
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
	if(Dev->IO_Driver.ReadReg(MCP23017_GPIOA, (uint8_t*)&Dev->PinStates, 2) != MCP23017_Ok){
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	691b      	ldr	r3, [r3, #16]
 8000de0:	2012      	movs	r0, #18
 8000de2:	6879      	ldr	r1, [r7, #4]
 8000de4:	2202      	movs	r2, #2
 8000de6:	4798      	blx	r3
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d005      	beq.n	8000dfa <MCP23017_ReadPins+0x26>
		_log(log_mcp23017, "Read Pins Failed");
 8000dee:	4905      	ldr	r1, [pc, #20]	; (8000e04 <MCP23017_ReadPins+0x30>)
 8000df0:	2005      	movs	r0, #5
 8000df2:	f000 ff37 	bl	8001c64 <_log>
		return MCP23017_Err;
 8000df6:	2301      	movs	r3, #1
 8000df8:	e000      	b.n	8000dfc <MCP23017_ReadPins+0x28>
	}
	return MCP23017_Ok;
 8000dfa:	2300      	movs	r3, #0
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	3708      	adds	r7, #8
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	0800e6d4 	.word	0x0800e6d4

08000e08 <MCP23017_IO_Init>:
 *@Params: None
 *@Return: None
 *@Precondition: None
 *@Postcondition: GPIO B Clk will be enabled and I2C1 Peripheral will be initialized
 **************************************//**************************************/
static void MCP23017_IO_Init(){
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
	I2C_DMA_Init();
 8000e0c:	f000 fd2a 	bl	8001864 <I2C_DMA_Init>
	I2C_GPIO_Init();
 8000e10:	f000 fdd0 	bl	80019b4 <I2C_GPIO_Init>
	I2C1_Init();
 8000e14:	f000 fee2 	bl	8001bdc <I2C1_Init>
}
 8000e18:	bf00      	nop
 8000e1a:	bd80      	pop	{r7, pc}

08000e1c <MCP23017_IO_DeInit>:
 *@Params: None
 *@Return: None
 *@Precondition: None
 *@Postcondition: None
 **************************************//**************************************/
static void MCP23017_IO_DeInit(){
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
	HAL_NVIC_DisableIRQ(DMA1_Stream0_IRQn);
 8000e20:	200b      	movs	r0, #11
 8000e22:	f002 fc02 	bl	800362a <HAL_NVIC_DisableIRQ>
	HAL_NVIC_ClearPendingIRQ(DMA1_Stream0_IRQn);
 8000e26:	200b      	movs	r0, #11
 8000e28:	f002 fc19 	bl	800365e <HAL_NVIC_ClearPendingIRQ>
}
 8000e2c:	bf00      	nop
 8000e2e:	bd80      	pop	{r7, pc}

08000e30 <MCP23017_IO_WriteReg>:
 *@Params: MCP23017 Device Address, Register to write to, data to write, data length in bytes
 *@Return: Error if the write fails, otherwise Ok
 *@Precondition: I2C Bus should be initialized
 *@Postcondition: Device register will be written to
 **************************************//**************************************/
static MCP23017_Status_t MCP23017_IO_WriteReg(uint8_t DevAddr, uint8_t RegAddr, uint8_t *Data, uint8_t Length){
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b086      	sub	sp, #24
 8000e34:	af04      	add	r7, sp, #16
 8000e36:	603a      	str	r2, [r7, #0]
 8000e38:	461a      	mov	r2, r3
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	71fb      	strb	r3, [r7, #7]
 8000e3e:	460b      	mov	r3, r1
 8000e40:	71bb      	strb	r3, [r7, #6]
 8000e42:	4613      	mov	r3, r2
 8000e44:	717b      	strb	r3, [r7, #5]
	if(HAL_I2C_Mem_Write(&hi2c1, DevAddr, RegAddr, I2C_MEMADD_SIZE_8BIT, Data, Length, 50) != HAL_OK){
 8000e46:	79fb      	ldrb	r3, [r7, #7]
 8000e48:	b299      	uxth	r1, r3
 8000e4a:	79bb      	ldrb	r3, [r7, #6]
 8000e4c:	b29a      	uxth	r2, r3
 8000e4e:	797b      	ldrb	r3, [r7, #5]
 8000e50:	b29b      	uxth	r3, r3
 8000e52:	2032      	movs	r0, #50	; 0x32
 8000e54:	9002      	str	r0, [sp, #8]
 8000e56:	9301      	str	r3, [sp, #4]
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	9300      	str	r3, [sp, #0]
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	4809      	ldr	r0, [pc, #36]	; (8000e84 <MCP23017_IO_WriteReg+0x54>)
 8000e60:	f003 fbe0 	bl	8004624 <HAL_I2C_Mem_Write>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d007      	beq.n	8000e7a <MCP23017_IO_WriteReg+0x4a>
		_log(log_i2c,"Write to MCP23017 Reg address %x failed.", RegAddr);
 8000e6a:	79bb      	ldrb	r3, [r7, #6]
 8000e6c:	461a      	mov	r2, r3
 8000e6e:	4906      	ldr	r1, [pc, #24]	; (8000e88 <MCP23017_IO_WriteReg+0x58>)
 8000e70:	2000      	movs	r0, #0
 8000e72:	f000 fef7 	bl	8001c64 <_log>
		return MCP23017_Err;
 8000e76:	2301      	movs	r3, #1
 8000e78:	e000      	b.n	8000e7c <MCP23017_IO_WriteReg+0x4c>
	}
	return MCP23017_Ok;
 8000e7a:	2300      	movs	r3, #0
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	3708      	adds	r7, #8
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	200003ec 	.word	0x200003ec
 8000e88:	0800e6e8 	.word	0x0800e6e8

08000e8c <MCP23017_IO_ReadReg>:
 *@Params: MCP23017 Device Address, Register to read to, data buffer to read into, data length in bytes,
 *@Return: Error if the read fails, otherwise Ok
 *@Precondition: I2C Bus must be initialized
 *@Postcondition: Data buffer will have the read data
 **************************************//**************************************/
static MCP23017_Status_t MCP23017_IO_ReadReg(uint8_t DevAddr, uint8_t RegAddr, uint8_t *Data, uint8_t Length){
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b084      	sub	sp, #16
 8000e90:	af02      	add	r7, sp, #8
 8000e92:	603a      	str	r2, [r7, #0]
 8000e94:	461a      	mov	r2, r3
 8000e96:	4603      	mov	r3, r0
 8000e98:	71fb      	strb	r3, [r7, #7]
 8000e9a:	460b      	mov	r3, r1
 8000e9c:	71bb      	strb	r3, [r7, #6]
 8000e9e:	4613      	mov	r3, r2
 8000ea0:	717b      	strb	r3, [r7, #5]
	//HAL_I2C_Mem_Read_DMA(hi2c, DevAddress, MemAddress, MemAddSize, pData, Size)
	//if(HAL_I2C_Mem_Read(&hi2c1, DevAddr, RegAddr, I2C_MEMADD_SIZE_8BIT, Data, Length, 50) != HAL_OK){
	if(HAL_I2C_Mem_Read_DMA(&hi2c1, DevAddr, RegAddr, I2C_MEMADD_SIZE_8BIT, Data, Length) != HAL_OK){
 8000ea2:	79fb      	ldrb	r3, [r7, #7]
 8000ea4:	b299      	uxth	r1, r3
 8000ea6:	79bb      	ldrb	r3, [r7, #6]
 8000ea8:	b29a      	uxth	r2, r3
 8000eaa:	797b      	ldrb	r3, [r7, #5]
 8000eac:	b29b      	uxth	r3, r3
 8000eae:	9301      	str	r3, [sp, #4]
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	9300      	str	r3, [sp, #0]
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	4809      	ldr	r0, [pc, #36]	; (8000edc <MCP23017_IO_ReadReg+0x50>)
 8000eb8:	f003 fcae 	bl	8004818 <HAL_I2C_Mem_Read_DMA>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d007      	beq.n	8000ed2 <MCP23017_IO_ReadReg+0x46>
		_log(log_i2c,"Read from MCP23017 Reg address %x failed.", RegAddr);
 8000ec2:	79bb      	ldrb	r3, [r7, #6]
 8000ec4:	461a      	mov	r2, r3
 8000ec6:	4906      	ldr	r1, [pc, #24]	; (8000ee0 <MCP23017_IO_ReadReg+0x54>)
 8000ec8:	2000      	movs	r0, #0
 8000eca:	f000 fecb 	bl	8001c64 <_log>
		return MCP23017_Err;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	e000      	b.n	8000ed4 <MCP23017_IO_ReadReg+0x48>
	}
	return MCP23017_Ok;
 8000ed2:	2300      	movs	r3, #0
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	3708      	adds	r7, #8
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	200003ec 	.word	0x200003ec
 8000ee0:	0800e714 	.word	0x0800e714

08000ee4 <MCP23017_IO_ioctl>:
 *@Params: Command
 *@Return: None
 *@Precondition: None
 *@Postcondition: None
 **************************************//**************************************/
static uint8_t MCP23017_IO_ioctl(MCP23017_IO_Cmd_t command){
 8000ee4:	b480      	push	{r7}
 8000ee6:	b083      	sub	sp, #12
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	4603      	mov	r3, r0
 8000eec:	71fb      	strb	r3, [r7, #7]
	return MCP23017_Ok;
 8000eee:	2300      	movs	r3, #0
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	370c      	adds	r7, #12
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr

08000efc <MCP23017_IO2_WriteReg>:
 *@Params: Register to write to, data to write, length of data in bytes
 *@Return: Err if write fails, Ok otherwise
 *@Precondition: I2C Bus must be initialized
 *@Postcondition: Device (w/ Address2) register will be modified
 **************************************//**************************************/
static MCP23017_Status_t MCP23017_IO2_WriteReg(uint8_t RegAddr, uint8_t *Data, uint8_t Length){
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	4603      	mov	r3, r0
 8000f04:	6039      	str	r1, [r7, #0]
 8000f06:	71fb      	strb	r3, [r7, #7]
 8000f08:	4613      	mov	r3, r2
 8000f0a:	71bb      	strb	r3, [r7, #6]
	static const uint8_t address = MCP23017_Address2;
    return MCP23017_IO_WriteReg(address, RegAddr, Data, Length);
 8000f0c:	4b05      	ldr	r3, [pc, #20]	; (8000f24 <MCP23017_IO2_WriteReg+0x28>)
 8000f0e:	7818      	ldrb	r0, [r3, #0]
 8000f10:	79bb      	ldrb	r3, [r7, #6]
 8000f12:	79f9      	ldrb	r1, [r7, #7]
 8000f14:	683a      	ldr	r2, [r7, #0]
 8000f16:	f7ff ff8b 	bl	8000e30 <MCP23017_IO_WriteReg>
 8000f1a:	4603      	mov	r3, r0
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	3708      	adds	r7, #8
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	0800e8d4 	.word	0x0800e8d4

08000f28 <MCP23017_IO2_ReadReg>:
 *@Params: Register to read from, data buffer to read into, length of data in bytes
 *@Return: Err if read fails, Ok otherwise
 *@Precondition: I2C Bus must be initialized
 *@Postcondition: Data buffer will contain data from device (w/ Address2) register
 **************************************//**************************************/
static MCP23017_Status_t MCP23017_IO2_ReadReg(uint8_t RegAddr, uint8_t *Data, uint8_t Length){
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	4603      	mov	r3, r0
 8000f30:	6039      	str	r1, [r7, #0]
 8000f32:	71fb      	strb	r3, [r7, #7]
 8000f34:	4613      	mov	r3, r2
 8000f36:	71bb      	strb	r3, [r7, #6]
	static const uint8_t address = MCP23017_Address2;
	return MCP23017_IO_ReadReg(address, RegAddr, Data, Length);
 8000f38:	4b05      	ldr	r3, [pc, #20]	; (8000f50 <MCP23017_IO2_ReadReg+0x28>)
 8000f3a:	7818      	ldrb	r0, [r3, #0]
 8000f3c:	79bb      	ldrb	r3, [r7, #6]
 8000f3e:	79f9      	ldrb	r1, [r7, #7]
 8000f40:	683a      	ldr	r2, [r7, #0]
 8000f42:	f7ff ffa3 	bl	8000e8c <MCP23017_IO_ReadReg>
 8000f46:	4603      	mov	r3, r0
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	3708      	adds	r7, #8
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	0800e8d5 	.word	0x0800e8d5

08000f54 <ButtonInit>:
 *@Params: Init struct with settings, Handle to initialized, low level IO driver
 *@Return: None
 *@Precondition: None
 *@Postcondition: Button handle will be initialized and ready to use
 **************************************//**************************************/
void ButtonInit(Button_Init_Struct_t Settings, Button_Handle_t *Button, Button_IO_Drv_t IO){
 8000f54:	b082      	sub	sp, #8
 8000f56:	b590      	push	{r4, r7, lr}
 8000f58:	b085      	sub	sp, #20
 8000f5a:	af00      	add	r7, sp, #0
 8000f5c:	f107 0408 	add.w	r4, r7, #8
 8000f60:	e884 0003 	stmia.w	r4, {r0, r1}
 8000f64:	607a      	str	r2, [r7, #4]
 8000f66:	627b      	str	r3, [r7, #36]	; 0x24
	Button->IO_Driver.init   = IO.init;
 8000f68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	609a      	str	r2, [r3, #8]
	Button->IO_Driver.deinit = IO.deinit;
 8000f6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	60da      	str	r2, [r3, #12]
	Button->IO_Driver.read   = IO.read;
 8000f74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	611a      	str	r2, [r3, #16]
	Button->IO_Driver.write  = IO.write;
 8000f7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	615a      	str	r2, [r3, #20]
	Button->IO_Driver.ioctl  = IO.ioctl;
 8000f80:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	619a      	str	r2, [r3, #24]
	Button->IO_Driver.init();
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	689b      	ldr	r3, [r3, #8]
 8000f8a:	4798      	blx	r3

	Button->ButtonIDNumber = Settings.ButtonIDNumber;
 8000f8c:	7a3a      	ldrb	r2, [r7, #8]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	701a      	strb	r2, [r3, #0]
	Button->KeyFunction = Settings.KeyFunction;
 8000f92:	7a7a      	ldrb	r2, [r7, #9]
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	705a      	strb	r2, [r3, #1]
	Button->ModKeyFunction = Settings.ModKeyFunction;
 8000f98:	7aba      	ldrb	r2, [r7, #10]
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	709a      	strb	r2, [r3, #2]
	Button->MouseFunction = Settings.MouseFunction;
 8000f9e:	7afa      	ldrb	r2, [r7, #11]
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	70da      	strb	r2, [r3, #3]
	Button->State = ButtonUnpressed;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	715a      	strb	r2, [r3, #5]
}
 8000faa:	bf00      	nop
 8000fac:	3714      	adds	r7, #20
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000fb4:	b002      	add	sp, #8
 8000fb6:	4770      	bx	lr

08000fb8 <ButtonRead>:
 *@Params: Button handle to read
 *@Return: ButtonChanged if the button changed states, otherwise ButtonUnchanged
 *@Precondition: ButtonHandle should be initialized/
 *@Postcondition: ButtonState in the ButtonHandle will be updated.
 **************************************//**************************************/
ButtonStatus_t ButtonRead(Button_Handle_t *Button){
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b084      	sub	sp, #16
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
    ButtonState_t Previous_State = Button->State;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	795b      	ldrb	r3, [r3, #5]
 8000fc4:	73fb      	strb	r3, [r7, #15]
    Button->State = Button->IO_Driver.read(Button->ButtonIDNumber);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	691b      	ldr	r3, [r3, #16]
 8000fca:	687a      	ldr	r2, [r7, #4]
 8000fcc:	7812      	ldrb	r2, [r2, #0]
 8000fce:	4610      	mov	r0, r2
 8000fd0:	4798      	blx	r3
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	461a      	mov	r2, r3
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	715a      	strb	r2, [r3, #5]
    if(Previous_State != Button->State){
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	795b      	ldrb	r3, [r3, #5]
 8000fde:	7bfa      	ldrb	r2, [r7, #15]
 8000fe0:	429a      	cmp	r2, r3
 8000fe2:	d001      	beq.n	8000fe8 <ButtonRead+0x30>
    	return ButtonChanged;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	e000      	b.n	8000fea <ButtonRead+0x32>
    } else {
    	return ButtonUnchanged;
 8000fe8:	2301      	movs	r3, #1
    }
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	3710      	adds	r7, #16
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
	...

08000ff4 <Button_IO_init>:
 *@Params: None
 *@Return: None
 *@Precondition: None
 *@Postcondition: GPIO, I2C, DMA Peripherals and clocks will be enabled and ready to use
 **************************************//**************************************/
static void Button_IO_init(void){
 8000ff4:	b5b0      	push	{r4, r5, r7, lr}
 8000ff6:	b08a      	sub	sp, #40	; 0x28
 8000ff8:	af06      	add	r7, sp, #24
	const MCP23017_Init_Struct_t InitSettings = {
 8000ffa:	4b2b      	ldr	r3, [pc, #172]	; (80010a8 <Button_IO_init+0xb4>)
 8000ffc:	881b      	ldrh	r3, [r3, #0]
 8000ffe:	803b      	strh	r3, [r7, #0]
 8001000:	4b29      	ldr	r3, [pc, #164]	; (80010a8 <Button_IO_init+0xb4>)
 8001002:	881b      	ldrh	r3, [r3, #0]
 8001004:	807b      	strh	r3, [r7, #2]
 8001006:	4b29      	ldr	r3, [pc, #164]	; (80010ac <Button_IO_init+0xb8>)
 8001008:	881b      	ldrh	r3, [r3, #0]
 800100a:	80bb      	strh	r3, [r7, #4]
 800100c:	4b27      	ldr	r3, [pc, #156]	; (80010ac <Button_IO_init+0xb8>)
 800100e:	881b      	ldrh	r3, [r3, #0]
 8001010:	80fb      	strh	r3, [r7, #6]
 8001012:	4b26      	ldr	r3, [pc, #152]	; (80010ac <Button_IO_init+0xb8>)
 8001014:	881b      	ldrh	r3, [r3, #0]
 8001016:	813b      	strh	r3, [r7, #8]
 8001018:	4b23      	ldr	r3, [pc, #140]	; (80010a8 <Button_IO_init+0xb4>)
 800101a:	881b      	ldrh	r3, [r3, #0]
 800101c:	817b      	strh	r3, [r7, #10]
 800101e:	2300      	movs	r3, #0
 8001020:	733b      	strb	r3, [r7, #12]
			.Mode = MCP23017_AllPins,
			.PullUp = MCP23017_AllPins,
			.Polarity = MCP23017_AllPins
	};

	if(initialize_status == ButtonIO_Uninitialized){
 8001022:	4b23      	ldr	r3, [pc, #140]	; (80010b0 <Button_IO_init+0xbc>)
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d139      	bne.n	800109e <Button_IO_init+0xaa>
	    MCP23017_Init(InitSettings, &Expander[0], MCP23017_IO1_Drv);
 800102a:	4b22      	ldr	r3, [pc, #136]	; (80010b4 <Button_IO_init+0xc0>)
 800102c:	ac01      	add	r4, sp, #4
 800102e:	461d      	mov	r5, r3
 8001030:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001032:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001034:	682b      	ldr	r3, [r5, #0]
 8001036:	6023      	str	r3, [r4, #0]
 8001038:	4b1f      	ldr	r3, [pc, #124]	; (80010b8 <Button_IO_init+0xc4>)
 800103a:	9300      	str	r3, [sp, #0]
 800103c:	463b      	mov	r3, r7
 800103e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001040:	f7ff fd9e 	bl	8000b80 <MCP23017_Init>
	    MCP23017_Init(InitSettings, &Expander[1], MCP23017_IO2_Drv);
 8001044:	4b1d      	ldr	r3, [pc, #116]	; (80010bc <Button_IO_init+0xc8>)
 8001046:	ac01      	add	r4, sp, #4
 8001048:	461d      	mov	r5, r3
 800104a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800104c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800104e:	682b      	ldr	r3, [r5, #0]
 8001050:	6023      	str	r3, [r4, #0]
 8001052:	4b1b      	ldr	r3, [pc, #108]	; (80010c0 <Button_IO_init+0xcc>)
 8001054:	9300      	str	r3, [sp, #0]
 8001056:	463b      	mov	r3, r7
 8001058:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800105a:	f7ff fd91 	bl	8000b80 <MCP23017_Init>
	    MCP23017_Init(InitSettings, &Expander[2], MCP23017_IO3_Drv);
 800105e:	4b19      	ldr	r3, [pc, #100]	; (80010c4 <Button_IO_init+0xd0>)
 8001060:	ac01      	add	r4, sp, #4
 8001062:	461d      	mov	r5, r3
 8001064:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001066:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001068:	682b      	ldr	r3, [r5, #0]
 800106a:	6023      	str	r3, [r4, #0]
 800106c:	4b16      	ldr	r3, [pc, #88]	; (80010c8 <Button_IO_init+0xd4>)
 800106e:	9300      	str	r3, [sp, #0]
 8001070:	463b      	mov	r3, r7
 8001072:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001074:	f7ff fd84 	bl	8000b80 <MCP23017_Init>
	    MCP23017_Init(InitSettings, &Expander[3], MCP23017_IO4_Drv);
 8001078:	4b14      	ldr	r3, [pc, #80]	; (80010cc <Button_IO_init+0xd8>)
 800107a:	ac01      	add	r4, sp, #4
 800107c:	461d      	mov	r5, r3
 800107e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001080:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001082:	682b      	ldr	r3, [r5, #0]
 8001084:	6023      	str	r3, [r4, #0]
 8001086:	4b12      	ldr	r3, [pc, #72]	; (80010d0 <Button_IO_init+0xdc>)
 8001088:	9300      	str	r3, [sp, #0]
 800108a:	463b      	mov	r3, r7
 800108c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800108e:	f7ff fd77 	bl	8000b80 <MCP23017_Init>
	    MCP23017_ReadPins(&Expander[0]); //Start the Button-Read-DMA Engine
 8001092:	4809      	ldr	r0, [pc, #36]	; (80010b8 <Button_IO_init+0xc4>)
 8001094:	f7ff fe9e 	bl	8000dd4 <MCP23017_ReadPins>
	    initialize_status = ButtonIO_Initialized;
 8001098:	4b05      	ldr	r3, [pc, #20]	; (80010b0 <Button_IO_init+0xbc>)
 800109a:	2201      	movs	r2, #1
 800109c:	701a      	strb	r2, [r3, #0]
	}
}
 800109e:	bf00      	nop
 80010a0:	3710      	adds	r7, #16
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bdb0      	pop	{r4, r5, r7, pc}
 80010a6:	bf00      	nop
 80010a8:	0800e87e 	.word	0x0800e87e
 80010ac:	0800e880 	.word	0x0800e880
 80010b0:	2000019c 	.word	0x2000019c
 80010b4:	0800e884 	.word	0x0800e884
 80010b8:	200001a0 	.word	0x200001a0
 80010bc:	0800e898 	.word	0x0800e898
 80010c0:	200001b8 	.word	0x200001b8
 80010c4:	0800e8ac 	.word	0x0800e8ac
 80010c8:	200001d0 	.word	0x200001d0
 80010cc:	0800e8c0 	.word	0x0800e8c0
 80010d0:	200001e8 	.word	0x200001e8

080010d4 <Button_IO_deinit>:

static void Button_IO_deinit(void){
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0

	if(initialize_status == ButtonIO_Initialized){
 80010d8:	4b0a      	ldr	r3, [pc, #40]	; (8001104 <Button_IO_deinit+0x30>)
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	2b01      	cmp	r3, #1
 80010de:	d10e      	bne.n	80010fe <Button_IO_deinit+0x2a>
	    MCP23017_DeInit(&Expander[0]);
 80010e0:	4809      	ldr	r0, [pc, #36]	; (8001108 <Button_IO_deinit+0x34>)
 80010e2:	f7ff fddb 	bl	8000c9c <MCP23017_DeInit>
	    MCP23017_DeInit(&Expander[1]);
 80010e6:	4809      	ldr	r0, [pc, #36]	; (800110c <Button_IO_deinit+0x38>)
 80010e8:	f7ff fdd8 	bl	8000c9c <MCP23017_DeInit>
	    MCP23017_DeInit(&Expander[2]);
 80010ec:	4808      	ldr	r0, [pc, #32]	; (8001110 <Button_IO_deinit+0x3c>)
 80010ee:	f7ff fdd5 	bl	8000c9c <MCP23017_DeInit>
	    MCP23017_DeInit(&Expander[3]);
 80010f2:	4808      	ldr	r0, [pc, #32]	; (8001114 <Button_IO_deinit+0x40>)
 80010f4:	f7ff fdd2 	bl	8000c9c <MCP23017_DeInit>
	    initialize_status = ButtonIO_Uninitialized;
 80010f8:	4b02      	ldr	r3, [pc, #8]	; (8001104 <Button_IO_deinit+0x30>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	701a      	strb	r2, [r3, #0]
	}
}
 80010fe:	bf00      	nop
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	2000019c 	.word	0x2000019c
 8001108:	200001a0 	.word	0x200001a0
 800110c:	200001b8 	.word	0x200001b8
 8001110:	200001d0 	.word	0x200001d0
 8001114:	200001e8 	.word	0x200001e8

08001118 <Button_IO_Read>:
 *@Params: Number of the button to read
 *@Return: ButtonUnpressed if the button is not pressed, ButtonPressed if it is pressed.
 *@Precondition: Button IO should be initialized
 *@Postcondition: None
 **************************************//**************************************/
static ButtonState_t Button_IO_Read(uint8_t ButtonNumber){
 8001118:	b480      	push	{r7}
 800111a:	b085      	sub	sp, #20
 800111c:	af00      	add	r7, sp, #0
 800111e:	4603      	mov	r3, r0
 8001120:	71fb      	strb	r3, [r7, #7]
	uint8_t ExpanderNumber = ButtonNumber / PINS_PER_EXPANDER;
 8001122:	79fb      	ldrb	r3, [r7, #7]
 8001124:	091b      	lsrs	r3, r3, #4
 8001126:	73fb      	strb	r3, [r7, #15]
	if(ExpanderNumber >= NUMBER_OF_IO_EXPANDERS){
 8001128:	7bfb      	ldrb	r3, [r7, #15]
 800112a:	2b03      	cmp	r3, #3
 800112c:	d901      	bls.n	8001132 <Button_IO_Read+0x1a>
		return ButtonUnpressed;
 800112e:	2300      	movs	r3, #0
 8001130:	e018      	b.n	8001164 <Button_IO_Read+0x4c>
	}

    uint16_t ButtonStates = Expander[ExpanderNumber].PinStates;
 8001132:	7bfa      	ldrb	r2, [r7, #15]
 8001134:	490e      	ldr	r1, [pc, #56]	; (8001170 <Button_IO_Read+0x58>)
 8001136:	4613      	mov	r3, r2
 8001138:	005b      	lsls	r3, r3, #1
 800113a:	4413      	add	r3, r2
 800113c:	00db      	lsls	r3, r3, #3
 800113e:	440b      	add	r3, r1
 8001140:	881b      	ldrh	r3, [r3, #0]
 8001142:	81bb      	strh	r3, [r7, #12]
    uint16_t ButtonPosition = ButtonNumber % PINS_PER_EXPANDER;
 8001144:	79fb      	ldrb	r3, [r7, #7]
 8001146:	b29b      	uxth	r3, r3
 8001148:	f003 030f 	and.w	r3, r3, #15
 800114c:	817b      	strh	r3, [r7, #10]
    if((ButtonStates & (1 << ButtonPosition)) != 0){
 800114e:	89ba      	ldrh	r2, [r7, #12]
 8001150:	897b      	ldrh	r3, [r7, #10]
 8001152:	fa42 f303 	asr.w	r3, r2, r3
 8001156:	f003 0301 	and.w	r3, r3, #1
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <Button_IO_Read+0x4a>
    	return ButtonPressed;
 800115e:	2301      	movs	r3, #1
 8001160:	e000      	b.n	8001164 <Button_IO_Read+0x4c>
    } else {
    	return ButtonUnpressed;
 8001162:	2300      	movs	r3, #0
    }
}
 8001164:	4618      	mov	r0, r3
 8001166:	3714      	adds	r7, #20
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr
 8001170:	200001a0 	.word	0x200001a0

08001174 <HAL_I2C_MemRxCpltCallback>:
 *@Params: I2C Handle used to communicate with MCP23017 IC
 *@Return: None
 *@Precondition: Button IO should be initialized.
 *@Postcondition: MCP23017 Pin states will be updated.
 **************************************//**************************************/
void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c){
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
	static uint8_t counter = 1;
	MCP23017_ReadPins(&Expander[counter % NUMBER_OF_IO_EXPANDERS]);
 800117c:	4b0b      	ldr	r3, [pc, #44]	; (80011ac <HAL_I2C_MemRxCpltCallback+0x38>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	f003 0203 	and.w	r2, r3, #3
 8001184:	4613      	mov	r3, r2
 8001186:	005b      	lsls	r3, r3, #1
 8001188:	4413      	add	r3, r2
 800118a:	00db      	lsls	r3, r3, #3
 800118c:	4a08      	ldr	r2, [pc, #32]	; (80011b0 <HAL_I2C_MemRxCpltCallback+0x3c>)
 800118e:	4413      	add	r3, r2
 8001190:	4618      	mov	r0, r3
 8001192:	f7ff fe1f 	bl	8000dd4 <MCP23017_ReadPins>
	counter++;
 8001196:	4b05      	ldr	r3, [pc, #20]	; (80011ac <HAL_I2C_MemRxCpltCallback+0x38>)
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	3301      	adds	r3, #1
 800119c:	b2da      	uxtb	r2, r3
 800119e:	4b03      	ldr	r3, [pc, #12]	; (80011ac <HAL_I2C_MemRxCpltCallback+0x38>)
 80011a0:	701a      	strb	r2, [r3, #0]
}
 80011a2:	bf00      	nop
 80011a4:	3708      	adds	r7, #8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	20000014 	.word	0x20000014
 80011b0:	200001a0 	.word	0x200001a0

080011b4 <JoystickInit>:
 *@Params: Init struct with desired user settings, Joystick handle to initialize, Low level IO Driver
 *@Return: None
 *@Precondition: None
 *@Postcondition: Joystick handle and low level hardware will be initialized and ready to use.
 **************************************//**************************************/
void JoystickInit(Joystick_Init_Struct_t Settings, Joystick_Handle_t *Joystick, Joystick_IO_Drv_t IO){
 80011b4:	b084      	sub	sp, #16
 80011b6:	b580      	push	{r7, lr}
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	f107 0c08 	add.w	ip, r7, #8
 80011be:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	Joystick->IO_Driver.init = IO.init;
 80011c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80011c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011c6:	62da      	str	r2, [r3, #44]	; 0x2c
	Joystick->IO_Driver.deinit = IO.deinit;
 80011c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80011ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011cc:	631a      	str	r2, [r3, #48]	; 0x30
	Joystick->IO_Driver.read = IO.read;
 80011ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80011d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011d2:	635a      	str	r2, [r3, #52]	; 0x34
	Joystick->IO_Driver.write = IO.write;
 80011d4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80011d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011d8:	639a      	str	r2, [r3, #56]	; 0x38
	Joystick->IO_Driver.ioctl = IO.ioctl;
 80011da:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80011dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011de:	63da      	str	r2, [r3, #60]	; 0x3c
	Joystick->IO_Driver.init();
 80011e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011e4:	4798      	blx	r3

	Joystick->DeadZone          = Settings.DeadZone;
 80011e6:	893a      	ldrh	r2, [r7, #8]
 80011e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011ea:	80da      	strh	r2, [r3, #6]
	Joystick->UpFunction        = Settings.UpFunction;
 80011ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011ee:	3311      	adds	r3, #17
 80011f0:	f107 0213 	add.w	r2, r7, #19
 80011f4:	6812      	ldr	r2, [r2, #0]
 80011f6:	601a      	str	r2, [r3, #0]
	Joystick->LeftFunction      = Settings.LeftFunction;
 80011f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011fa:	3319      	adds	r3, #25
 80011fc:	f107 021b 	add.w	r2, r7, #27
 8001200:	6812      	ldr	r2, [r2, #0]
 8001202:	601a      	str	r2, [r3, #0]
	Joystick->RightFunction     = Settings.RightFunction;
 8001204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001206:	3309      	adds	r3, #9
 8001208:	f107 020b 	add.w	r2, r7, #11
 800120c:	6812      	ldr	r2, [r2, #0]
 800120e:	601a      	str	r2, [r3, #0]
	Joystick->UpRightFunction   = Settings.UpRightFunction;
 8001210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001212:	330d      	adds	r3, #13
 8001214:	f107 020f 	add.w	r2, r7, #15
 8001218:	6812      	ldr	r2, [r2, #0]
 800121a:	601a      	str	r2, [r3, #0]
	Joystick->UpLeftFunction    = Settings.UpLeftFunction;
 800121c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800121e:	3315      	adds	r3, #21
 8001220:	f107 0217 	add.w	r2, r7, #23
 8001224:	6812      	ldr	r2, [r2, #0]
 8001226:	601a      	str	r2, [r3, #0]
	Joystick->DownFunction      = Settings.DownFunction;
 8001228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800122a:	3321      	adds	r3, #33	; 0x21
 800122c:	f107 0223 	add.w	r2, r7, #35	; 0x23
 8001230:	6812      	ldr	r2, [r2, #0]
 8001232:	601a      	str	r2, [r3, #0]
	Joystick->DownLeftFunction  = Settings.DownLeftFunction;
 8001234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001236:	331d      	adds	r3, #29
 8001238:	f107 021f 	add.w	r2, r7, #31
 800123c:	6812      	ldr	r2, [r2, #0]
 800123e:	601a      	str	r2, [r3, #0]
	Joystick->DownRightFunction = Settings.DownRightFunction;
 8001240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001242:	3325      	adds	r3, #37	; 0x25
 8001244:	f107 0227 	add.w	r2, r7, #39	; 0x27
 8001248:	6812      	ldr	r2, [r2, #0]
 800124a:	601a      	str	r2, [r3, #0]
	Joystick->Mode = Settings.Mode;
 800124c:	7aba      	ldrb	r2, [r7, #10]
 800124e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001250:	721a      	strb	r2, [r3, #8]
	Joystick->Position = JoystickNeutral;
 8001252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001254:	2200      	movs	r2, #0
 8001256:	711a      	strb	r2, [r3, #4]
	Joystick->X_PosRaw = 0;
 8001258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800125a:	2200      	movs	r2, #0
 800125c:	801a      	strh	r2, [r3, #0]
	Joystick->Y_PosRaw = 0;
 800125e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001260:	2200      	movs	r2, #0
 8001262:	805a      	strh	r2, [r3, #2]
}
 8001264:	bf00      	nop
 8001266:	46bd      	mov	sp, r7
 8001268:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800126c:	b004      	add	sp, #16
 800126e:	4770      	bx	lr

08001270 <JoystickRead>:
 *@Params: Joystick Handle
 *@Return: JoystickChanged if previous position != new position. Uses XPosRaw/YPosRaw in analog mode
 *@Precondition: JoystickHandle must be initialized
 *@Postcondition: Joystick XPosRaw/YPosRaw/State will be updated.
 **************************************//**************************************/
JoystickStatus_t JoystickRead(Joystick_Handle_t *Joystick){
 8001270:	b580      	push	{r7, lr}
 8001272:	b084      	sub	sp, #16
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
	JoystickState_t PreviousState = Joystick->Position;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	791b      	ldrb	r3, [r3, #4]
 800127c:	73fb      	strb	r3, [r7, #15]
	int16_t PreviousX = Joystick->X_PosRaw;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	881b      	ldrh	r3, [r3, #0]
 8001282:	81bb      	strh	r3, [r7, #12]
	int16_t PreviousY = Joystick->Y_PosRaw;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	885b      	ldrh	r3, [r3, #2]
 8001288:	817b      	strh	r3, [r7, #10]
	Joystick->Position = Joystick->IO_Driver.read(Joystick->DeadZone, &Joystick->X_PosRaw, &Joystick->Y_PosRaw);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800128e:	687a      	ldr	r2, [r7, #4]
 8001290:	88d0      	ldrh	r0, [r2, #6]
 8001292:	6879      	ldr	r1, [r7, #4]
 8001294:	687a      	ldr	r2, [r7, #4]
 8001296:	3202      	adds	r2, #2
 8001298:	4798      	blx	r3
 800129a:	4603      	mov	r3, r0
 800129c:	461a      	mov	r2, r3
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	711a      	strb	r2, [r3, #4]

	if(Joystick->Mode == Joystick4Way || Joystick->Mode == Joystick8Way){
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	7a1b      	ldrb	r3, [r3, #8]
 80012a6:	2b01      	cmp	r3, #1
 80012a8:	d003      	beq.n	80012b2 <JoystickRead+0x42>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	7a1b      	ldrb	r3, [r3, #8]
 80012ae:	2b02      	cmp	r3, #2
 80012b0:	d108      	bne.n	80012c4 <JoystickRead+0x54>
	    if(Joystick->Position != PreviousState){
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	791b      	ldrb	r3, [r3, #4]
 80012b6:	7bfa      	ldrb	r2, [r7, #15]
 80012b8:	429a      	cmp	r2, r3
 80012ba:	d001      	beq.n	80012c0 <JoystickRead+0x50>
		    return JoystickChanged;
 80012bc:	2300      	movs	r3, #0
 80012be:	e012      	b.n	80012e6 <JoystickRead+0x76>
	    } else {
		    return JoystickUnchanged;
 80012c0:	2301      	movs	r3, #1
 80012c2:	e010      	b.n	80012e6 <JoystickRead+0x76>
	    }
	}

	if(Joystick->X_PosRaw != PreviousX || Joystick->Y_PosRaw != PreviousY){
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012ca:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80012ce:	429a      	cmp	r2, r3
 80012d0:	d106      	bne.n	80012e0 <JoystickRead+0x70>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80012d8:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80012dc:	429a      	cmp	r2, r3
 80012de:	d001      	beq.n	80012e4 <JoystickRead+0x74>
		return JoystickChanged;
 80012e0:	2300      	movs	r3, #0
 80012e2:	e000      	b.n	80012e6 <JoystickRead+0x76>
	} else {
		return JoystickUnchanged;
 80012e4:	2301      	movs	r3, #1
	}
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3710      	adds	r7, #16
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
	...

080012f0 <JoystickIOInit>:
 *@Params: None
 *@Return: None
 *@Precondition: None
 *@Postcondition: Low level hardware will be initialized. (DMA, ADC, GPIO)
 **************************************//**************************************/
static void JoystickIOInit(){
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
	ADC_GPIO_Init();
 80012f4:	f000 fb78 	bl	80019e8 <ADC_GPIO_Init>
	ADC_DMA_Init();
 80012f8:	f000 fad4 	bl	80018a4 <ADC_DMA_Init>
	ADC1_Init();
 80012fc:	f000 fa52 	bl	80017a4 <ADC1_Init>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buffer, 2);
 8001300:	2202      	movs	r2, #2
 8001302:	4903      	ldr	r1, [pc, #12]	; (8001310 <JoystickIOInit+0x20>)
 8001304:	4803      	ldr	r0, [pc, #12]	; (8001314 <JoystickIOInit+0x24>)
 8001306:	f001 fc31 	bl	8002b6c <HAL_ADC_Start_DMA>
}
 800130a:	bf00      	nop
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	20000018 	.word	0x20000018
 8001314:	20000344 	.word	0x20000344

08001318 <JoystickIODeInit>:
 *@Params: None
 *@Return: None
 *@Precondition: None
 *@Postcondition: DMA transfers from Joystick will be stopped.
 **************************************//**************************************/
static void JoystickIODeInit(void){
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
   HAL_ADC_Stop_DMA(&hadc1);
 800131c:	4805      	ldr	r0, [pc, #20]	; (8001334 <JoystickIODeInit+0x1c>)
 800131e:	f001 fd15 	bl	8002d4c <HAL_ADC_Stop_DMA>
   HAL_NVIC_DisableIRQ(DMA2_Stream0_IRQn);
 8001322:	2038      	movs	r0, #56	; 0x38
 8001324:	f002 f981 	bl	800362a <HAL_NVIC_DisableIRQ>
   HAL_NVIC_ClearPendingIRQ(DMA2_Stream0_IRQn);
 8001328:	2038      	movs	r0, #56	; 0x38
 800132a:	f002 f998 	bl	800365e <HAL_NVIC_ClearPendingIRQ>
}
 800132e:	bf00      	nop
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	20000344 	.word	0x20000344

08001338 <JoystickIORead>:
 *@Params: Joystick Deadzone, X Position buffer, Y Position buffer
 *@Return: Position of the joystick
 *@Precondition: Joystick IO should be initialized
 *@Postcondition: X_Pos and Y_Pos will contain raw joystick value.
 **************************************//**************************************/
static JoystickState_t JoystickIORead(uint16_t Deadzone, int16_t *X_Pos, int16_t *Y_Pos){
 8001338:	b480      	push	{r7}
 800133a:	b087      	sub	sp, #28
 800133c:	af00      	add	r7, sp, #0
 800133e:	4603      	mov	r3, r0
 8001340:	60b9      	str	r1, [r7, #8]
 8001342:	607a      	str	r2, [r7, #4]
 8001344:	81fb      	strh	r3, [r7, #14]
	//Handle Deadzone values that are too large.
    if(Deadzone > INT16_MAX - 1){
 8001346:	89fb      	ldrh	r3, [r7, #14]
 8001348:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800134c:	4293      	cmp	r3, r2
 800134e:	d902      	bls.n	8001356 <JoystickIORead+0x1e>
    	Deadzone = INT16_MAX - 1;
 8001350:	f647 73fe 	movw	r3, #32766	; 0x7ffe
 8001354:	81fb      	strh	r3, [r7, #14]
    }

    //Calculate X Position
	int16_t temp = adc_buffer[ADC_X_INDEX] - 2048;
 8001356:	2301      	movs	r3, #1
 8001358:	461a      	mov	r2, r3
 800135a:	4b66      	ldr	r3, [pc, #408]	; (80014f4 <JoystickIORead+0x1bc>)
 800135c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001360:	b21b      	sxth	r3, r3
 8001362:	b29b      	uxth	r3, r3
 8001364:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8001368:	b29b      	uxth	r3, r3
 800136a:	82fb      	strh	r3, [r7, #22]
	if(temp > ADC_UPPER_LIMIT){
 800136c:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001370:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001374:	4293      	cmp	r3, r2
 8001376:	dd03      	ble.n	8001380 <JoystickIORead+0x48>
		temp = ADC_UPPER_LIMIT;
 8001378:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800137c:	82fb      	strh	r3, [r7, #22]
 800137e:	e007      	b.n	8001390 <JoystickIORead+0x58>
	} else if (temp < ADC_LOWER_LIMIT){
 8001380:	4a5d      	ldr	r2, [pc, #372]	; (80014f8 <JoystickIORead+0x1c0>)
 8001382:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001386:	4293      	cmp	r3, r2
 8001388:	da02      	bge.n	8001390 <JoystickIORead+0x58>
		temp = ADC_LOWER_LIMIT;
 800138a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800138e:	82fb      	strh	r3, [r7, #22]
	}
	temp = temp * 16; //convert to 16 bit number
 8001390:	8afb      	ldrh	r3, [r7, #22]
 8001392:	011b      	lsls	r3, r3, #4
 8001394:	b29b      	uxth	r3, r3
 8001396:	82fb      	strh	r3, [r7, #22]
	if(temp > Deadzone || temp < -(int16_t)Deadzone){
 8001398:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800139c:	89fb      	ldrh	r3, [r7, #14]
 800139e:	429a      	cmp	r2, r3
 80013a0:	dc06      	bgt.n	80013b0 <JoystickIORead+0x78>
 80013a2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80013a6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80013aa:	425b      	negs	r3, r3
 80013ac:	429a      	cmp	r2, r3
 80013ae:	da03      	bge.n	80013b8 <JoystickIORead+0x80>
	    *X_Pos = temp;
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	8afa      	ldrh	r2, [r7, #22]
 80013b4:	801a      	strh	r2, [r3, #0]
 80013b6:	e002      	b.n	80013be <JoystickIORead+0x86>
	} else {
        *X_Pos = 0;
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	2200      	movs	r2, #0
 80013bc:	801a      	strh	r2, [r3, #0]
	}

	//Calculate Y Position
	temp = adc_buffer[ADC_Y_INDEX] - 2048;
 80013be:	2300      	movs	r3, #0
 80013c0:	461a      	mov	r2, r3
 80013c2:	4b4c      	ldr	r3, [pc, #304]	; (80014f4 <JoystickIORead+0x1bc>)
 80013c4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80013c8:	b21b      	sxth	r3, r3
 80013ca:	b29b      	uxth	r3, r3
 80013cc:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80013d0:	b29b      	uxth	r3, r3
 80013d2:	82fb      	strh	r3, [r7, #22]
	if(temp > ADC_UPPER_LIMIT){
 80013d4:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80013d8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80013dc:	4293      	cmp	r3, r2
 80013de:	dd03      	ble.n	80013e8 <JoystickIORead+0xb0>
		temp = ADC_UPPER_LIMIT;
 80013e0:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80013e4:	82fb      	strh	r3, [r7, #22]
 80013e6:	e007      	b.n	80013f8 <JoystickIORead+0xc0>
	} else if (temp < ADC_LOWER_LIMIT){
 80013e8:	4a43      	ldr	r2, [pc, #268]	; (80014f8 <JoystickIORead+0x1c0>)
 80013ea:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80013ee:	4293      	cmp	r3, r2
 80013f0:	da02      	bge.n	80013f8 <JoystickIORead+0xc0>
		temp = ADC_LOWER_LIMIT;
 80013f2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80013f6:	82fb      	strh	r3, [r7, #22]
	}
	temp = temp * 16; //convert to 16 bit number
 80013f8:	8afb      	ldrh	r3, [r7, #22]
 80013fa:	011b      	lsls	r3, r3, #4
 80013fc:	b29b      	uxth	r3, r3
 80013fe:	82fb      	strh	r3, [r7, #22]
	if(temp > Deadzone || temp < -(int16_t)Deadzone){
 8001400:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001404:	89fb      	ldrh	r3, [r7, #14]
 8001406:	429a      	cmp	r2, r3
 8001408:	dc06      	bgt.n	8001418 <JoystickIORead+0xe0>
 800140a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800140e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001412:	425b      	negs	r3, r3
 8001414:	429a      	cmp	r2, r3
 8001416:	da03      	bge.n	8001420 <JoystickIORead+0xe8>
	    *Y_Pos = temp;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	8afa      	ldrh	r2, [r7, #22]
 800141c:	801a      	strh	r2, [r3, #0]
 800141e:	e002      	b.n	8001426 <JoystickIORead+0xee>
	} else {
        *Y_Pos = 0;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2200      	movs	r2, #0
 8001424:	801a      	strh	r2, [r3, #0]
	}

	if(*X_Pos == 0 && *Y_Pos == 0){
 8001426:	68bb      	ldr	r3, [r7, #8]
 8001428:	f9b3 3000 	ldrsh.w	r3, [r3]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d106      	bne.n	800143e <JoystickIORead+0x106>
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d101      	bne.n	800143e <JoystickIORead+0x106>
		return JoystickNeutral;
 800143a:	2300      	movs	r3, #0
 800143c:	e054      	b.n	80014e8 <JoystickIORead+0x1b0>
	} else if(*X_Pos > 0 && *Y_Pos == 0){
 800143e:	68bb      	ldr	r3, [r7, #8]
 8001440:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001444:	2b00      	cmp	r3, #0
 8001446:	dd06      	ble.n	8001456 <JoystickIORead+0x11e>
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d101      	bne.n	8001456 <JoystickIORead+0x11e>
		return Joystick_Right;
 8001452:	2301      	movs	r3, #1
 8001454:	e048      	b.n	80014e8 <JoystickIORead+0x1b0>

	} else if(*X_Pos > 0 && *Y_Pos > 0){
 8001456:	68bb      	ldr	r3, [r7, #8]
 8001458:	f9b3 3000 	ldrsh.w	r3, [r3]
 800145c:	2b00      	cmp	r3, #0
 800145e:	dd06      	ble.n	800146e <JoystickIORead+0x136>
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001466:	2b00      	cmp	r3, #0
 8001468:	dd01      	ble.n	800146e <JoystickIORead+0x136>
		return Joystick_UpRight;
 800146a:	2302      	movs	r3, #2
 800146c:	e03c      	b.n	80014e8 <JoystickIORead+0x1b0>

	} else if(*X_Pos == 0 && *Y_Pos > 0){
 800146e:	68bb      	ldr	r3, [r7, #8]
 8001470:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d106      	bne.n	8001486 <JoystickIORead+0x14e>
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800147e:	2b00      	cmp	r3, #0
 8001480:	dd01      	ble.n	8001486 <JoystickIORead+0x14e>
		return Joystick_Up;
 8001482:	2303      	movs	r3, #3
 8001484:	e030      	b.n	80014e8 <JoystickIORead+0x1b0>

	} else if(*X_Pos < 0 && *Y_Pos > 0){
 8001486:	68bb      	ldr	r3, [r7, #8]
 8001488:	f9b3 3000 	ldrsh.w	r3, [r3]
 800148c:	2b00      	cmp	r3, #0
 800148e:	da06      	bge.n	800149e <JoystickIORead+0x166>
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001496:	2b00      	cmp	r3, #0
 8001498:	dd01      	ble.n	800149e <JoystickIORead+0x166>
		return Joystick_UpLeft;
 800149a:	2304      	movs	r3, #4
 800149c:	e024      	b.n	80014e8 <JoystickIORead+0x1b0>

	} else if(*X_Pos < 0 && *Y_Pos == 0){
 800149e:	68bb      	ldr	r3, [r7, #8]
 80014a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	da06      	bge.n	80014b6 <JoystickIORead+0x17e>
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d101      	bne.n	80014b6 <JoystickIORead+0x17e>
		return Joystick_Left;
 80014b2:	2305      	movs	r3, #5
 80014b4:	e018      	b.n	80014e8 <JoystickIORead+0x1b0>

	} else if(*X_Pos < 0 && *Y_Pos < 0){
 80014b6:	68bb      	ldr	r3, [r7, #8]
 80014b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	da06      	bge.n	80014ce <JoystickIORead+0x196>
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	da01      	bge.n	80014ce <JoystickIORead+0x196>
		return Joystick_DownLeft;
 80014ca:	2306      	movs	r3, #6
 80014cc:	e00c      	b.n	80014e8 <JoystickIORead+0x1b0>

	} else if(*X_Pos == 0 && *Y_Pos < 0){
 80014ce:	68bb      	ldr	r3, [r7, #8]
 80014d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d106      	bne.n	80014e6 <JoystickIORead+0x1ae>
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	da01      	bge.n	80014e6 <JoystickIORead+0x1ae>
		return Joystick_Down;
 80014e2:	2307      	movs	r3, #7
 80014e4:	e000      	b.n	80014e8 <JoystickIORead+0x1b0>
	}
	else{
		return Joystick_DownRight;
 80014e6:	2308      	movs	r3, #8
	}

}
 80014e8:	4618      	mov	r0, r3
 80014ea:	371c      	adds	r7, #28
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr
 80014f4:	20000018 	.word	0x20000018
 80014f8:	fffff800 	.word	0xfffff800

080014fc <SerialLEDInit>:
 *  Created on: May 22, 2022
 *      Author: evanl
 */
#include "SerialLED.h"

void SerialLEDInit(SerialLED_InitStruct_t Settings, SerialLED_Handle_t *LED, SerialLED_IO_Drv_t IO){
 80014fc:	b082      	sub	sp, #8
 80014fe:	b5b0      	push	{r4, r5, r7, lr}
 8001500:	b084      	sub	sp, #16
 8001502:	af00      	add	r7, sp, #0
 8001504:	f107 0408 	add.w	r4, r7, #8
 8001508:	e884 0003 	stmia.w	r4, {r0, r1}
 800150c:	607a      	str	r2, [r7, #4]
 800150e:	627b      	str	r3, [r7, #36]	; 0x24
    LED->IO_Driver = IO;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	f103 0408 	add.w	r4, r3, #8
 8001516:	f107 0524 	add.w	r5, r7, #36	; 0x24
 800151a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800151c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800151e:	682b      	ldr	r3, [r5, #0]
 8001520:	6023      	str	r3, [r4, #0]
    LED->Address = Settings.address;
 8001522:	893a      	ldrh	r2, [r7, #8]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	801a      	strh	r2, [r3, #0]
    LED->red = Settings.red;
 8001528:	7afa      	ldrb	r2, [r7, #11]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	70da      	strb	r2, [r3, #3]
    LED->green = Settings.green;
 800152e:	7aba      	ldrb	r2, [r7, #10]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	709a      	strb	r2, [r3, #2]
    LED->blue = Settings.blue;
 8001534:	7b3a      	ldrb	r2, [r7, #12]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	711a      	strb	r2, [r3, #4]
    LED->IO_Driver.init();
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	4798      	blx	r3
    LED->IO_Driver.write(LED->Address, LED->red, LED->green, LED->blue);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	695c      	ldr	r4, [r3, #20]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	8818      	ldrh	r0, [r3, #0]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	78d9      	ldrb	r1, [r3, #3]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	789a      	ldrb	r2, [r3, #2]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	791b      	ldrb	r3, [r3, #4]
 8001554:	47a0      	blx	r4
}
 8001556:	bf00      	nop
 8001558:	3710      	adds	r7, #16
 800155a:	46bd      	mov	sp, r7
 800155c:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001560:	b002      	add	sp, #8
 8001562:	4770      	bx	lr

08001564 <SerialLED_IO_Init>:
//static const uint8_t TIM_PERIOD = 119;     //1.25uS with 96MHz clock
static const uint8_t ZERO_DUTY_CYCLE = 29; //.3uS
static const uint8_t ONE_DUTY_CYCLE = 58;  //.6uS
static const uint8_t RESET_DUTY_CYCLE = 0;

static void SerialLED_IO_Init(void){
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
	//ensure reset signal is 0
	for(uint32_t i = NUMBER_OF_LEDS * BITS_PER_LED; i < LED_DMA_BUFFER_LENGTH; i++){
 800156a:	2360      	movs	r3, #96	; 0x60
 800156c:	607b      	str	r3, [r7, #4]
 800156e:	e008      	b.n	8001582 <SerialLED_IO_Init+0x1e>
		LED_DMA_BUFFER[i] = RESET_DUTY_CYCLE;
 8001570:	2300      	movs	r3, #0
 8001572:	b299      	uxth	r1, r3
 8001574:	4a0d      	ldr	r2, [pc, #52]	; (80015ac <SerialLED_IO_Init+0x48>)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(uint32_t i = NUMBER_OF_LEDS * BITS_PER_LED; i < LED_DMA_BUFFER_LENGTH; i++){
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	3301      	adds	r3, #1
 8001580:	607b      	str	r3, [r7, #4]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2b9f      	cmp	r3, #159	; 0x9f
 8001586:	d9f3      	bls.n	8001570 <SerialLED_IO_Init+0xc>
	}
	TIM3_GPIO_Init();
 8001588:	f000 fa48 	bl	8001a1c <TIM3_GPIO_Init>
	TIM_DMA_Init();
 800158c:	f000 f9a6 	bl	80018dc <TIM_DMA_Init>
    if(initialize_status == LED_uninitialized){
 8001590:	4b07      	ldr	r3, [pc, #28]	; (80015b0 <SerialLED_IO_Init+0x4c>)
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d104      	bne.n	80015a2 <SerialLED_IO_Init+0x3e>
	    TIM3_Init();
 8001598:	f001 f8fc 	bl	8002794 <TIM3_Init>
	    initialize_status = LED_initialized;
 800159c:	4b04      	ldr	r3, [pc, #16]	; (80015b0 <SerialLED_IO_Init+0x4c>)
 800159e:	2201      	movs	r2, #1
 80015a0:	701a      	strb	r2, [r3, #0]
    }

}
 80015a2:	bf00      	nop
 80015a4:	3708      	adds	r7, #8
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	20000200 	.word	0x20000200
 80015b0:	20000340 	.word	0x20000340

080015b4 <SerialLED_IO_DeInit>:

static void SerialLED_IO_DeInit(void){
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop_DMA(&htim3, TIM_CHANNEL_1);
 80015b8:	2100      	movs	r1, #0
 80015ba:	4802      	ldr	r0, [pc, #8]	; (80015c4 <SerialLED_IO_DeInit+0x10>)
 80015bc:	f006 fdbc 	bl	8008138 <HAL_TIM_PWM_Stop_DMA>
}
 80015c0:	bf00      	nop
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	20000cd0 	.word	0x20000cd0

080015c8 <SerialLED_IO_Write>:

static void SerialLED_IO_Write(uint16_t Address, uint8_t red, uint8_t green, uint8_t blue){
 80015c8:	b590      	push	{r4, r7, lr}
 80015ca:	b085      	sub	sp, #20
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	4604      	mov	r4, r0
 80015d0:	4608      	mov	r0, r1
 80015d2:	4611      	mov	r1, r2
 80015d4:	461a      	mov	r2, r3
 80015d6:	4623      	mov	r3, r4
 80015d8:	80fb      	strh	r3, [r7, #6]
 80015da:	4603      	mov	r3, r0
 80015dc:	717b      	strb	r3, [r7, #5]
 80015de:	460b      	mov	r3, r1
 80015e0:	713b      	strb	r3, [r7, #4]
 80015e2:	4613      	mov	r3, r2
 80015e4:	70fb      	strb	r3, [r7, #3]
	//HAL_TIM_PWM_Stop_DMA(&htim3, TIM_CHANNEL_1);
    for(uint16_t i = 0; i < 8; i++){
 80015e6:	2300      	movs	r3, #0
 80015e8:	81fb      	strh	r3, [r7, #14]
 80015ea:	e052      	b.n	8001692 <SerialLED_IO_Write+0xca>
    	LED_DMA_BUFFER[(Address * BITS_PER_LED) + 0  + i] = green & (1 << (7 - i)) ? ONE_DUTY_CYCLE : ZERO_DUTY_CYCLE;
 80015ec:	793a      	ldrb	r2, [r7, #4]
 80015ee:	89fb      	ldrh	r3, [r7, #14]
 80015f0:	f1c3 0307 	rsb	r3, r3, #7
 80015f4:	fa42 f303 	asr.w	r3, r2, r3
 80015f8:	f003 0301 	and.w	r3, r3, #1
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d002      	beq.n	8001606 <SerialLED_IO_Write+0x3e>
 8001600:	233a      	movs	r3, #58	; 0x3a
 8001602:	b29a      	uxth	r2, r3
 8001604:	e001      	b.n	800160a <SerialLED_IO_Write+0x42>
 8001606:	231d      	movs	r3, #29
 8001608:	b29a      	uxth	r2, r3
 800160a:	88f9      	ldrh	r1, [r7, #6]
 800160c:	460b      	mov	r3, r1
 800160e:	005b      	lsls	r3, r3, #1
 8001610:	440b      	add	r3, r1
 8001612:	00db      	lsls	r3, r3, #3
 8001614:	4619      	mov	r1, r3
 8001616:	89fb      	ldrh	r3, [r7, #14]
 8001618:	440b      	add	r3, r1
 800161a:	4924      	ldr	r1, [pc, #144]	; (80016ac <SerialLED_IO_Write+0xe4>)
 800161c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    	LED_DMA_BUFFER[(Address * BITS_PER_LED) + 8  + i] = red   & (1 << (7 - i)) ? ONE_DUTY_CYCLE : ZERO_DUTY_CYCLE;
 8001620:	797a      	ldrb	r2, [r7, #5]
 8001622:	89fb      	ldrh	r3, [r7, #14]
 8001624:	f1c3 0307 	rsb	r3, r3, #7
 8001628:	fa42 f303 	asr.w	r3, r2, r3
 800162c:	f003 0301 	and.w	r3, r3, #1
 8001630:	2b00      	cmp	r3, #0
 8001632:	d002      	beq.n	800163a <SerialLED_IO_Write+0x72>
 8001634:	233a      	movs	r3, #58	; 0x3a
 8001636:	b29a      	uxth	r2, r3
 8001638:	e001      	b.n	800163e <SerialLED_IO_Write+0x76>
 800163a:	231d      	movs	r3, #29
 800163c:	b29a      	uxth	r2, r3
 800163e:	88f9      	ldrh	r1, [r7, #6]
 8001640:	460b      	mov	r3, r1
 8001642:	005b      	lsls	r3, r3, #1
 8001644:	440b      	add	r3, r1
 8001646:	00db      	lsls	r3, r3, #3
 8001648:	4619      	mov	r1, r3
 800164a:	89fb      	ldrh	r3, [r7, #14]
 800164c:	440b      	add	r3, r1
 800164e:	3308      	adds	r3, #8
 8001650:	4916      	ldr	r1, [pc, #88]	; (80016ac <SerialLED_IO_Write+0xe4>)
 8001652:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    	LED_DMA_BUFFER[(Address * BITS_PER_LED) + 16 + i] = blue  & (1 << (7 - i)) ? ONE_DUTY_CYCLE : ZERO_DUTY_CYCLE;
 8001656:	78fa      	ldrb	r2, [r7, #3]
 8001658:	89fb      	ldrh	r3, [r7, #14]
 800165a:	f1c3 0307 	rsb	r3, r3, #7
 800165e:	fa42 f303 	asr.w	r3, r2, r3
 8001662:	f003 0301 	and.w	r3, r3, #1
 8001666:	2b00      	cmp	r3, #0
 8001668:	d002      	beq.n	8001670 <SerialLED_IO_Write+0xa8>
 800166a:	233a      	movs	r3, #58	; 0x3a
 800166c:	b29a      	uxth	r2, r3
 800166e:	e001      	b.n	8001674 <SerialLED_IO_Write+0xac>
 8001670:	231d      	movs	r3, #29
 8001672:	b29a      	uxth	r2, r3
 8001674:	88f9      	ldrh	r1, [r7, #6]
 8001676:	460b      	mov	r3, r1
 8001678:	005b      	lsls	r3, r3, #1
 800167a:	440b      	add	r3, r1
 800167c:	00db      	lsls	r3, r3, #3
 800167e:	4619      	mov	r1, r3
 8001680:	89fb      	ldrh	r3, [r7, #14]
 8001682:	440b      	add	r3, r1
 8001684:	3310      	adds	r3, #16
 8001686:	4909      	ldr	r1, [pc, #36]	; (80016ac <SerialLED_IO_Write+0xe4>)
 8001688:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    for(uint16_t i = 0; i < 8; i++){
 800168c:	89fb      	ldrh	r3, [r7, #14]
 800168e:	3301      	adds	r3, #1
 8001690:	81fb      	strh	r3, [r7, #14]
 8001692:	89fb      	ldrh	r3, [r7, #14]
 8001694:	2b07      	cmp	r3, #7
 8001696:	d9a9      	bls.n	80015ec <SerialLED_IO_Write+0x24>
    }
    HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, (uint32_t*)LED_DMA_BUFFER, LED_DMA_BUFFER_LENGTH);
 8001698:	23a0      	movs	r3, #160	; 0xa0
 800169a:	4a04      	ldr	r2, [pc, #16]	; (80016ac <SerialLED_IO_Write+0xe4>)
 800169c:	2100      	movs	r1, #0
 800169e:	4804      	ldr	r0, [pc, #16]	; (80016b0 <SerialLED_IO_Write+0xe8>)
 80016a0:	f006 fb9a 	bl	8007dd8 <HAL_TIM_PWM_Start_DMA>
}
 80016a4:	bf00      	nop
 80016a6:	3714      	adds	r7, #20
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd90      	pop	{r4, r7, pc}
 80016ac:	20000200 	.word	0x20000200
 80016b0:	20000cd0 	.word	0x20000cd0

080016b4 <HAL_ADC_MspInit>:
  /* USER CODE END ADC1_Init 2 */

}

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b08a      	sub	sp, #40	; 0x28
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016bc:	f107 0314 	add.w	r3, r7, #20
 80016c0:	2200      	movs	r2, #0
 80016c2:	601a      	str	r2, [r3, #0]
 80016c4:	605a      	str	r2, [r3, #4]
 80016c6:	609a      	str	r2, [r3, #8]
 80016c8:	60da      	str	r2, [r3, #12]
 80016ca:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a2f      	ldr	r2, [pc, #188]	; (8001790 <HAL_ADC_MspInit+0xdc>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d157      	bne.n	8001786 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80016d6:	2300      	movs	r3, #0
 80016d8:	613b      	str	r3, [r7, #16]
 80016da:	4b2e      	ldr	r3, [pc, #184]	; (8001794 <HAL_ADC_MspInit+0xe0>)
 80016dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016de:	4a2d      	ldr	r2, [pc, #180]	; (8001794 <HAL_ADC_MspInit+0xe0>)
 80016e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016e4:	6453      	str	r3, [r2, #68]	; 0x44
 80016e6:	4b2b      	ldr	r3, [pc, #172]	; (8001794 <HAL_ADC_MspInit+0xe0>)
 80016e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016ee:	613b      	str	r3, [r7, #16]
 80016f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016f2:	2300      	movs	r3, #0
 80016f4:	60fb      	str	r3, [r7, #12]
 80016f6:	4b27      	ldr	r3, [pc, #156]	; (8001794 <HAL_ADC_MspInit+0xe0>)
 80016f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fa:	4a26      	ldr	r2, [pc, #152]	; (8001794 <HAL_ADC_MspInit+0xe0>)
 80016fc:	f043 0301 	orr.w	r3, r3, #1
 8001700:	6313      	str	r3, [r2, #48]	; 0x30
 8001702:	4b24      	ldr	r3, [pc, #144]	; (8001794 <HAL_ADC_MspInit+0xe0>)
 8001704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001706:	f003 0301 	and.w	r3, r3, #1
 800170a:	60fb      	str	r3, [r7, #12]
 800170c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = ADC_VX_Pin|ADC_VY_Pin;
 800170e:	2318      	movs	r3, #24
 8001710:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001712:	2303      	movs	r3, #3
 8001714:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001716:	2300      	movs	r3, #0
 8001718:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800171a:	f107 0314 	add.w	r3, r7, #20
 800171e:	4619      	mov	r1, r3
 8001720:	481d      	ldr	r0, [pc, #116]	; (8001798 <HAL_ADC_MspInit+0xe4>)
 8001722:	f002 fbb9 	bl	8003e98 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001726:	4b1d      	ldr	r3, [pc, #116]	; (800179c <HAL_ADC_MspInit+0xe8>)
 8001728:	4a1d      	ldr	r2, [pc, #116]	; (80017a0 <HAL_ADC_MspInit+0xec>)
 800172a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800172c:	4b1b      	ldr	r3, [pc, #108]	; (800179c <HAL_ADC_MspInit+0xe8>)
 800172e:	2200      	movs	r2, #0
 8001730:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001732:	4b1a      	ldr	r3, [pc, #104]	; (800179c <HAL_ADC_MspInit+0xe8>)
 8001734:	2200      	movs	r2, #0
 8001736:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001738:	4b18      	ldr	r3, [pc, #96]	; (800179c <HAL_ADC_MspInit+0xe8>)
 800173a:	2200      	movs	r2, #0
 800173c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800173e:	4b17      	ldr	r3, [pc, #92]	; (800179c <HAL_ADC_MspInit+0xe8>)
 8001740:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001744:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001746:	4b15      	ldr	r3, [pc, #84]	; (800179c <HAL_ADC_MspInit+0xe8>)
 8001748:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800174c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800174e:	4b13      	ldr	r3, [pc, #76]	; (800179c <HAL_ADC_MspInit+0xe8>)
 8001750:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001754:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001756:	4b11      	ldr	r3, [pc, #68]	; (800179c <HAL_ADC_MspInit+0xe8>)
 8001758:	f44f 7280 	mov.w	r2, #256	; 0x100
 800175c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800175e:	4b0f      	ldr	r3, [pc, #60]	; (800179c <HAL_ADC_MspInit+0xe8>)
 8001760:	2200      	movs	r2, #0
 8001762:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001764:	4b0d      	ldr	r3, [pc, #52]	; (800179c <HAL_ADC_MspInit+0xe8>)
 8001766:	2200      	movs	r2, #0
 8001768:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800176a:	480c      	ldr	r0, [pc, #48]	; (800179c <HAL_ADC_MspInit+0xe8>)
 800176c:	f001 ff86 	bl	800367c <HAL_DMA_Init>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001776:	f000 fd8f 	bl	8002298 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	4a07      	ldr	r2, [pc, #28]	; (800179c <HAL_ADC_MspInit+0xe8>)
 800177e:	639a      	str	r2, [r3, #56]	; 0x38
 8001780:	4a06      	ldr	r2, [pc, #24]	; (800179c <HAL_ADC_MspInit+0xe8>)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001786:	bf00      	nop
 8001788:	3728      	adds	r7, #40	; 0x28
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	40012000 	.word	0x40012000
 8001794:	40023800 	.word	0x40023800
 8001798:	40020000 	.word	0x40020000
 800179c:	2000038c 	.word	0x2000038c
 80017a0:	40026410 	.word	0x40026410

080017a4 <ADC1_Init>:
  /* USER CODE END ADC1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void ADC1_Init(void){
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b084      	sub	sp, #16
 80017a8:	af00      	add	r7, sp, #0
	  ADC_ChannelConfTypeDef sConfig = {0};
 80017aa:	463b      	mov	r3, r7
 80017ac:	2200      	movs	r2, #0
 80017ae:	601a      	str	r2, [r3, #0]
 80017b0:	605a      	str	r2, [r3, #4]
 80017b2:	609a      	str	r2, [r3, #8]
 80017b4:	60da      	str	r2, [r3, #12]


	  hadc1.Instance = ADC1;
 80017b6:	4b28      	ldr	r3, [pc, #160]	; (8001858 <ADC1_Init+0xb4>)
 80017b8:	4a28      	ldr	r2, [pc, #160]	; (800185c <ADC1_Init+0xb8>)
 80017ba:	601a      	str	r2, [r3, #0]
	  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80017bc:	4b26      	ldr	r3, [pc, #152]	; (8001858 <ADC1_Init+0xb4>)
 80017be:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80017c2:	605a      	str	r2, [r3, #4]
	  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80017c4:	4b24      	ldr	r3, [pc, #144]	; (8001858 <ADC1_Init+0xb4>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	609a      	str	r2, [r3, #8]
	  hadc1.Init.ScanConvMode = ENABLE;
 80017ca:	4b23      	ldr	r3, [pc, #140]	; (8001858 <ADC1_Init+0xb4>)
 80017cc:	2201      	movs	r2, #1
 80017ce:	611a      	str	r2, [r3, #16]
	  hadc1.Init.ContinuousConvMode = ENABLE;
 80017d0:	4b21      	ldr	r3, [pc, #132]	; (8001858 <ADC1_Init+0xb4>)
 80017d2:	2201      	movs	r2, #1
 80017d4:	761a      	strb	r2, [r3, #24]
	  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80017d6:	4b20      	ldr	r3, [pc, #128]	; (8001858 <ADC1_Init+0xb4>)
 80017d8:	2200      	movs	r2, #0
 80017da:	f883 2020 	strb.w	r2, [r3, #32]
	  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80017de:	4b1e      	ldr	r3, [pc, #120]	; (8001858 <ADC1_Init+0xb4>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	62da      	str	r2, [r3, #44]	; 0x2c
	  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80017e4:	4b1c      	ldr	r3, [pc, #112]	; (8001858 <ADC1_Init+0xb4>)
 80017e6:	4a1e      	ldr	r2, [pc, #120]	; (8001860 <ADC1_Init+0xbc>)
 80017e8:	629a      	str	r2, [r3, #40]	; 0x28
	  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80017ea:	4b1b      	ldr	r3, [pc, #108]	; (8001858 <ADC1_Init+0xb4>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	60da      	str	r2, [r3, #12]
	  hadc1.Init.NbrOfConversion = 2;
 80017f0:	4b19      	ldr	r3, [pc, #100]	; (8001858 <ADC1_Init+0xb4>)
 80017f2:	2202      	movs	r2, #2
 80017f4:	61da      	str	r2, [r3, #28]
	  hadc1.Init.DMAContinuousRequests = ENABLE;
 80017f6:	4b18      	ldr	r3, [pc, #96]	; (8001858 <ADC1_Init+0xb4>)
 80017f8:	2201      	movs	r2, #1
 80017fa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80017fe:	4b16      	ldr	r3, [pc, #88]	; (8001858 <ADC1_Init+0xb4>)
 8001800:	2200      	movs	r2, #0
 8001802:	615a      	str	r2, [r3, #20]
	  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001804:	4814      	ldr	r0, [pc, #80]	; (8001858 <ADC1_Init+0xb4>)
 8001806:	f001 f96d 	bl	8002ae4 <HAL_ADC_Init>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d001      	beq.n	8001814 <ADC1_Init+0x70>
	  {
	    Error_Handler();
 8001810:	f000 fd42 	bl	8002298 <Error_Handler>
	  }

	  sConfig.Channel = ADC_CHANNEL_3;
 8001814:	2303      	movs	r3, #3
 8001816:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = 1;
 8001818:	2301      	movs	r3, #1
 800181a:	607b      	str	r3, [r7, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800181c:	2307      	movs	r3, #7
 800181e:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001820:	463b      	mov	r3, r7
 8001822:	4619      	mov	r1, r3
 8001824:	480c      	ldr	r0, [pc, #48]	; (8001858 <ADC1_Init+0xb4>)
 8001826:	f001 fb09 	bl	8002e3c <HAL_ADC_ConfigChannel>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d001      	beq.n	8001834 <ADC1_Init+0x90>
	  {
	    Error_Handler();
 8001830:	f000 fd32 	bl	8002298 <Error_Handler>
	  }

	  sConfig.Channel = ADC_CHANNEL_4;
 8001834:	2304      	movs	r3, #4
 8001836:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = 2;
 8001838:	2302      	movs	r3, #2
 800183a:	607b      	str	r3, [r7, #4]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800183c:	463b      	mov	r3, r7
 800183e:	4619      	mov	r1, r3
 8001840:	4805      	ldr	r0, [pc, #20]	; (8001858 <ADC1_Init+0xb4>)
 8001842:	f001 fafb 	bl	8002e3c <HAL_ADC_ConfigChannel>
 8001846:	4603      	mov	r3, r0
 8001848:	2b00      	cmp	r3, #0
 800184a:	d001      	beq.n	8001850 <ADC1_Init+0xac>
	  {
	    Error_Handler();
 800184c:	f000 fd24 	bl	8002298 <Error_Handler>
	  }

}
 8001850:	bf00      	nop
 8001852:	3710      	adds	r7, #16
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	20000344 	.word	0x20000344
 800185c:	40012000 	.word	0x40012000
 8001860:	0f000001 	.word	0x0f000001

08001864 <I2C_DMA_Init>:
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);

}

/* USER CODE BEGIN 2 */
void I2C_DMA_Init(void){
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
	__HAL_RCC_DMA1_CLK_ENABLE();
 800186a:	2300      	movs	r3, #0
 800186c:	607b      	str	r3, [r7, #4]
 800186e:	4b0c      	ldr	r3, [pc, #48]	; (80018a0 <I2C_DMA_Init+0x3c>)
 8001870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001872:	4a0b      	ldr	r2, [pc, #44]	; (80018a0 <I2C_DMA_Init+0x3c>)
 8001874:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001878:	6313      	str	r3, [r2, #48]	; 0x30
 800187a:	4b09      	ldr	r3, [pc, #36]	; (80018a0 <I2C_DMA_Init+0x3c>)
 800187c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001882:	607b      	str	r3, [r7, #4]
 8001884:	687b      	ldr	r3, [r7, #4]
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001886:	2200      	movs	r2, #0
 8001888:	2100      	movs	r1, #0
 800188a:	200b      	movs	r0, #11
 800188c:	f001 fea3 	bl	80035d6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001890:	200b      	movs	r0, #11
 8001892:	f001 febc 	bl	800360e <HAL_NVIC_EnableIRQ>
}
 8001896:	bf00      	nop
 8001898:	3708      	adds	r7, #8
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	40023800 	.word	0x40023800

080018a4 <ADC_DMA_Init>:
void ADC_DMA_Init(void){
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
	__HAL_RCC_DMA2_CLK_ENABLE();
 80018aa:	2300      	movs	r3, #0
 80018ac:	607b      	str	r3, [r7, #4]
 80018ae:	4b0a      	ldr	r3, [pc, #40]	; (80018d8 <ADC_DMA_Init+0x34>)
 80018b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b2:	4a09      	ldr	r2, [pc, #36]	; (80018d8 <ADC_DMA_Init+0x34>)
 80018b4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80018b8:	6313      	str	r3, [r2, #48]	; 0x30
 80018ba:	4b07      	ldr	r3, [pc, #28]	; (80018d8 <ADC_DMA_Init+0x34>)
 80018bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018c2:	607b      	str	r3, [r7, #4]
 80018c4:	687b      	ldr	r3, [r7, #4]
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80018c6:	2200      	movs	r2, #0
 80018c8:	2100      	movs	r1, #0
 80018ca:	2038      	movs	r0, #56	; 0x38
 80018cc:	f001 fe83 	bl	80035d6 <HAL_NVIC_SetPriority>
	//HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
}
 80018d0:	bf00      	nop
 80018d2:	3708      	adds	r7, #8
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	40023800 	.word	0x40023800

080018dc <TIM_DMA_Init>:

void TIM_DMA_Init(void){
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
	__HAL_RCC_DMA1_CLK_ENABLE();
 80018e2:	2300      	movs	r3, #0
 80018e4:	607b      	str	r3, [r7, #4]
 80018e6:	4b0a      	ldr	r3, [pc, #40]	; (8001910 <TIM_DMA_Init+0x34>)
 80018e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ea:	4a09      	ldr	r2, [pc, #36]	; (8001910 <TIM_DMA_Init+0x34>)
 80018ec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80018f0:	6313      	str	r3, [r2, #48]	; 0x30
 80018f2:	4b07      	ldr	r3, [pc, #28]	; (8001910 <TIM_DMA_Init+0x34>)
 80018f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018fa:	607b      	str	r3, [r7, #4]
 80018fc:	687b      	ldr	r3, [r7, #4]
	HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80018fe:	2200      	movs	r2, #0
 8001900:	2100      	movs	r1, #0
 8001902:	200f      	movs	r0, #15
 8001904:	f001 fe67 	bl	80035d6 <HAL_NVIC_SetPriority>
	//HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
}
 8001908:	bf00      	nop
 800190a:	3708      	adds	r7, #8
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	40023800 	.word	0x40023800

08001914 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b088      	sub	sp, #32
 8001918:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800191a:	f107 030c 	add.w	r3, r7, #12
 800191e:	2200      	movs	r2, #0
 8001920:	601a      	str	r2, [r3, #0]
 8001922:	605a      	str	r2, [r3, #4]
 8001924:	609a      	str	r2, [r3, #8]
 8001926:	60da      	str	r2, [r3, #12]
 8001928:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800192a:	2300      	movs	r3, #0
 800192c:	60bb      	str	r3, [r7, #8]
 800192e:	4b1f      	ldr	r3, [pc, #124]	; (80019ac <MX_GPIO_Init+0x98>)
 8001930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001932:	4a1e      	ldr	r2, [pc, #120]	; (80019ac <MX_GPIO_Init+0x98>)
 8001934:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001938:	6313      	str	r3, [r2, #48]	; 0x30
 800193a:	4b1c      	ldr	r3, [pc, #112]	; (80019ac <MX_GPIO_Init+0x98>)
 800193c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001942:	60bb      	str	r3, [r7, #8]
 8001944:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001946:	2300      	movs	r3, #0
 8001948:	607b      	str	r3, [r7, #4]
 800194a:	4b18      	ldr	r3, [pc, #96]	; (80019ac <MX_GPIO_Init+0x98>)
 800194c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194e:	4a17      	ldr	r2, [pc, #92]	; (80019ac <MX_GPIO_Init+0x98>)
 8001950:	f043 0301 	orr.w	r3, r3, #1
 8001954:	6313      	str	r3, [r2, #48]	; 0x30
 8001956:	4b15      	ldr	r3, [pc, #84]	; (80019ac <MX_GPIO_Init+0x98>)
 8001958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195a:	f003 0301 	and.w	r3, r3, #1
 800195e:	607b      	str	r3, [r7, #4]
 8001960:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001962:	2300      	movs	r3, #0
 8001964:	603b      	str	r3, [r7, #0]
 8001966:	4b11      	ldr	r3, [pc, #68]	; (80019ac <MX_GPIO_Init+0x98>)
 8001968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196a:	4a10      	ldr	r2, [pc, #64]	; (80019ac <MX_GPIO_Init+0x98>)
 800196c:	f043 0302 	orr.w	r3, r3, #2
 8001970:	6313      	str	r3, [r2, #48]	; 0x30
 8001972:	4b0e      	ldr	r3, [pc, #56]	; (80019ac <MX_GPIO_Init+0x98>)
 8001974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001976:	f003 0302 	and.w	r3, r3, #2
 800197a:	603b      	str	r3, [r7, #0]
 800197c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI1_CSN_Pin|DCRS_Pin, GPIO_PIN_SET);
 800197e:	2201      	movs	r2, #1
 8001980:	2103      	movs	r1, #3
 8001982:	480b      	ldr	r0, [pc, #44]	; (80019b0 <MX_GPIO_Init+0x9c>)
 8001984:	f002 fcf0 	bl	8004368 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SPI1_CSN_Pin|DCRS_Pin;
 8001988:	2303      	movs	r3, #3
 800198a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800198c:	2301      	movs	r3, #1
 800198e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001990:	2300      	movs	r3, #0
 8001992:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001994:	2303      	movs	r3, #3
 8001996:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001998:	f107 030c 	add.w	r3, r7, #12
 800199c:	4619      	mov	r1, r3
 800199e:	4804      	ldr	r0, [pc, #16]	; (80019b0 <MX_GPIO_Init+0x9c>)
 80019a0:	f002 fa7a 	bl	8003e98 <HAL_GPIO_Init>

}
 80019a4:	bf00      	nop
 80019a6:	3720      	adds	r7, #32
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	40023800 	.word	0x40023800
 80019b0:	40020400 	.word	0x40020400

080019b4 <I2C_GPIO_Init>:

/* USER CODE BEGIN 2 */
void I2C_GPIO_Init(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ba:	2300      	movs	r3, #0
 80019bc:	607b      	str	r3, [r7, #4]
 80019be:	4b09      	ldr	r3, [pc, #36]	; (80019e4 <I2C_GPIO_Init+0x30>)
 80019c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c2:	4a08      	ldr	r2, [pc, #32]	; (80019e4 <I2C_GPIO_Init+0x30>)
 80019c4:	f043 0302 	orr.w	r3, r3, #2
 80019c8:	6313      	str	r3, [r2, #48]	; 0x30
 80019ca:	4b06      	ldr	r3, [pc, #24]	; (80019e4 <I2C_GPIO_Init+0x30>)
 80019cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ce:	f003 0302 	and.w	r3, r3, #2
 80019d2:	607b      	str	r3, [r7, #4]
 80019d4:	687b      	ldr	r3, [r7, #4]

}
 80019d6:	bf00      	nop
 80019d8:	370c      	adds	r7, #12
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop
 80019e4:	40023800 	.word	0x40023800

080019e8 <ADC_GPIO_Init>:

void ADC_GPIO_Init(void){
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ee:	2300      	movs	r3, #0
 80019f0:	607b      	str	r3, [r7, #4]
 80019f2:	4b09      	ldr	r3, [pc, #36]	; (8001a18 <ADC_GPIO_Init+0x30>)
 80019f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f6:	4a08      	ldr	r2, [pc, #32]	; (8001a18 <ADC_GPIO_Init+0x30>)
 80019f8:	f043 0302 	orr.w	r3, r3, #2
 80019fc:	6313      	str	r3, [r2, #48]	; 0x30
 80019fe:	4b06      	ldr	r3, [pc, #24]	; (8001a18 <ADC_GPIO_Init+0x30>)
 8001a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a02:	f003 0302 	and.w	r3, r3, #2
 8001a06:	607b      	str	r3, [r7, #4]
 8001a08:	687b      	ldr	r3, [r7, #4]

}
 8001a0a:	bf00      	nop
 8001a0c:	370c      	adds	r7, #12
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop
 8001a18:	40023800 	.word	0x40023800

08001a1c <TIM3_GPIO_Init>:

void TIM3_GPIO_Init(void){
 8001a1c:	b480      	push	{r7}
 8001a1e:	b083      	sub	sp, #12
 8001a20:	af00      	add	r7, sp, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a22:	2300      	movs	r3, #0
 8001a24:	607b      	str	r3, [r7, #4]
 8001a26:	4b09      	ldr	r3, [pc, #36]	; (8001a4c <TIM3_GPIO_Init+0x30>)
 8001a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2a:	4a08      	ldr	r2, [pc, #32]	; (8001a4c <TIM3_GPIO_Init+0x30>)
 8001a2c:	f043 0302 	orr.w	r3, r3, #2
 8001a30:	6313      	str	r3, [r2, #48]	; 0x30
 8001a32:	4b06      	ldr	r3, [pc, #24]	; (8001a4c <TIM3_GPIO_Init+0x30>)
 8001a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a36:	f003 0302 	and.w	r3, r3, #2
 8001a3a:	607b      	str	r3, [r7, #4]
 8001a3c:	687b      	ldr	r3, [r7, #4]
}
 8001a3e:	bf00      	nop
 8001a40:	370c      	adds	r7, #12
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr
 8001a4a:	bf00      	nop
 8001a4c:	40023800 	.word	0x40023800

08001a50 <ILI9341_GPIO_Init>:

void ILI9341_GPIO_Init(void){
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b088      	sub	sp, #32
 8001a54:	af00      	add	r7, sp, #0
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a56:	2300      	movs	r3, #0
 8001a58:	60bb      	str	r3, [r7, #8]
 8001a5a:	4b1c      	ldr	r3, [pc, #112]	; (8001acc <ILI9341_GPIO_Init+0x7c>)
 8001a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5e:	4a1b      	ldr	r2, [pc, #108]	; (8001acc <ILI9341_GPIO_Init+0x7c>)
 8001a60:	f043 0301 	orr.w	r3, r3, #1
 8001a64:	6313      	str	r3, [r2, #48]	; 0x30
 8001a66:	4b19      	ldr	r3, [pc, #100]	; (8001acc <ILI9341_GPIO_Init+0x7c>)
 8001a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6a:	f003 0301 	and.w	r3, r3, #1
 8001a6e:	60bb      	str	r3, [r7, #8]
 8001a70:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a72:	2300      	movs	r3, #0
 8001a74:	607b      	str	r3, [r7, #4]
 8001a76:	4b15      	ldr	r3, [pc, #84]	; (8001acc <ILI9341_GPIO_Init+0x7c>)
 8001a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7a:	4a14      	ldr	r2, [pc, #80]	; (8001acc <ILI9341_GPIO_Init+0x7c>)
 8001a7c:	f043 0302 	orr.w	r3, r3, #2
 8001a80:	6313      	str	r3, [r2, #48]	; 0x30
 8001a82:	4b12      	ldr	r3, [pc, #72]	; (8001acc <ILI9341_GPIO_Init+0x7c>)
 8001a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a86:	f003 0302 	and.w	r3, r3, #2
 8001a8a:	607b      	str	r3, [r7, #4]
 8001a8c:	687b      	ldr	r3, [r7, #4]
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a8e:	f107 030c 	add.w	r3, r7, #12
 8001a92:	2200      	movs	r2, #0
 8001a94:	601a      	str	r2, [r3, #0]
 8001a96:	605a      	str	r2, [r3, #4]
 8001a98:	609a      	str	r2, [r3, #8]
 8001a9a:	60da      	str	r2, [r3, #12]
 8001a9c:	611a      	str	r2, [r3, #16]
	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(GPIOB, SPI1_CSN_Pin|DCRS_Pin, GPIO_PIN_SET);
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	2103      	movs	r1, #3
 8001aa2:	480b      	ldr	r0, [pc, #44]	; (8001ad0 <ILI9341_GPIO_Init+0x80>)
 8001aa4:	f002 fc60 	bl	8004368 <HAL_GPIO_WritePin>

	  /*Configure GPIO pins : PBPin PBPin */
	  GPIO_InitStruct.Pin = SPI1_CSN_Pin|DCRS_Pin;
 8001aa8:	2303      	movs	r3, #3
 8001aaa:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aac:	2301      	movs	r3, #1
 8001aae:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ab4:	2303      	movs	r3, #3
 8001ab6:	61bb      	str	r3, [r7, #24]
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ab8:	f107 030c 	add.w	r3, r7, #12
 8001abc:	4619      	mov	r1, r3
 8001abe:	4804      	ldr	r0, [pc, #16]	; (8001ad0 <ILI9341_GPIO_Init+0x80>)
 8001ac0:	f002 f9ea 	bl	8003e98 <HAL_GPIO_Init>

}
 8001ac4:	bf00      	nop
 8001ac6:	3720      	adds	r7, #32
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	40023800 	.word	0x40023800
 8001ad0:	40020400 	.word	0x40020400

08001ad4 <ILI9341_GPIO_DeInit>:

void ILI9341_GPIO_DeInit(void){
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	af00      	add	r7, sp, #0
	HAL_GPIO_DeInit(GPIOB, SPI1_CSN_Pin|DCRS_Pin);
 8001ad8:	2103      	movs	r1, #3
 8001ada:	4802      	ldr	r0, [pc, #8]	; (8001ae4 <ILI9341_GPIO_DeInit+0x10>)
 8001adc:	f002 fb60 	bl	80041a0 <HAL_GPIO_DeInit>
}
 8001ae0:	bf00      	nop
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	40020400 	.word	0x40020400

08001ae8 <HAL_I2C_MspInit>:
  /* USER CODE END I2C1_Init 2 */

}

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b08a      	sub	sp, #40	; 0x28
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af0:	f107 0314 	add.w	r3, r7, #20
 8001af4:	2200      	movs	r2, #0
 8001af6:	601a      	str	r2, [r3, #0]
 8001af8:	605a      	str	r2, [r3, #4]
 8001afa:	609a      	str	r2, [r3, #8]
 8001afc:	60da      	str	r2, [r3, #12]
 8001afe:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a30      	ldr	r2, [pc, #192]	; (8001bc8 <HAL_I2C_MspInit+0xe0>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d159      	bne.n	8001bbe <HAL_I2C_MspInit+0xd6>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	613b      	str	r3, [r7, #16]
 8001b0e:	4b2f      	ldr	r3, [pc, #188]	; (8001bcc <HAL_I2C_MspInit+0xe4>)
 8001b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b12:	4a2e      	ldr	r2, [pc, #184]	; (8001bcc <HAL_I2C_MspInit+0xe4>)
 8001b14:	f043 0302 	orr.w	r3, r3, #2
 8001b18:	6313      	str	r3, [r2, #48]	; 0x30
 8001b1a:	4b2c      	ldr	r3, [pc, #176]	; (8001bcc <HAL_I2C_MspInit+0xe4>)
 8001b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1e:	f003 0302 	and.w	r3, r3, #2
 8001b22:	613b      	str	r3, [r7, #16]
 8001b24:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b26:	23c0      	movs	r3, #192	; 0xc0
 8001b28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b2a:	2312      	movs	r3, #18
 8001b2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b32:	2303      	movs	r3, #3
 8001b34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b36:	2304      	movs	r3, #4
 8001b38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b3a:	f107 0314 	add.w	r3, r7, #20
 8001b3e:	4619      	mov	r1, r3
 8001b40:	4823      	ldr	r0, [pc, #140]	; (8001bd0 <HAL_I2C_MspInit+0xe8>)
 8001b42:	f002 f9a9 	bl	8003e98 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b46:	2300      	movs	r3, #0
 8001b48:	60fb      	str	r3, [r7, #12]
 8001b4a:	4b20      	ldr	r3, [pc, #128]	; (8001bcc <HAL_I2C_MspInit+0xe4>)
 8001b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4e:	4a1f      	ldr	r2, [pc, #124]	; (8001bcc <HAL_I2C_MspInit+0xe4>)
 8001b50:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b54:	6413      	str	r3, [r2, #64]	; 0x40
 8001b56:	4b1d      	ldr	r3, [pc, #116]	; (8001bcc <HAL_I2C_MspInit+0xe4>)
 8001b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b5e:	60fb      	str	r3, [r7, #12]
 8001b60:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8001b62:	4b1c      	ldr	r3, [pc, #112]	; (8001bd4 <HAL_I2C_MspInit+0xec>)
 8001b64:	4a1c      	ldr	r2, [pc, #112]	; (8001bd8 <HAL_I2C_MspInit+0xf0>)
 8001b66:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8001b68:	4b1a      	ldr	r3, [pc, #104]	; (8001bd4 <HAL_I2C_MspInit+0xec>)
 8001b6a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b6e:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b70:	4b18      	ldr	r3, [pc, #96]	; (8001bd4 <HAL_I2C_MspInit+0xec>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b76:	4b17      	ldr	r3, [pc, #92]	; (8001bd4 <HAL_I2C_MspInit+0xec>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001b7c:	4b15      	ldr	r3, [pc, #84]	; (8001bd4 <HAL_I2C_MspInit+0xec>)
 8001b7e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b82:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b84:	4b13      	ldr	r3, [pc, #76]	; (8001bd4 <HAL_I2C_MspInit+0xec>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b8a:	4b12      	ldr	r3, [pc, #72]	; (8001bd4 <HAL_I2C_MspInit+0xec>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001b90:	4b10      	ldr	r3, [pc, #64]	; (8001bd4 <HAL_I2C_MspInit+0xec>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001b96:	4b0f      	ldr	r3, [pc, #60]	; (8001bd4 <HAL_I2C_MspInit+0xec>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b9c:	4b0d      	ldr	r3, [pc, #52]	; (8001bd4 <HAL_I2C_MspInit+0xec>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001ba2:	480c      	ldr	r0, [pc, #48]	; (8001bd4 <HAL_I2C_MspInit+0xec>)
 8001ba4:	f001 fd6a 	bl	800367c <HAL_DMA_Init>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d001      	beq.n	8001bb2 <HAL_I2C_MspInit+0xca>
    {
      Error_Handler();
 8001bae:	f000 fb73 	bl	8002298 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	4a07      	ldr	r2, [pc, #28]	; (8001bd4 <HAL_I2C_MspInit+0xec>)
 8001bb6:	639a      	str	r2, [r3, #56]	; 0x38
 8001bb8:	4a06      	ldr	r2, [pc, #24]	; (8001bd4 <HAL_I2C_MspInit+0xec>)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001bbe:	bf00      	nop
 8001bc0:	3728      	adds	r7, #40	; 0x28
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	40005400 	.word	0x40005400
 8001bcc:	40023800 	.word	0x40023800
 8001bd0:	40020400 	.word	0x40020400
 8001bd4:	20000440 	.word	0x20000440
 8001bd8:	40026010 	.word	0x40026010

08001bdc <I2C1_Init>:
  /* USER CODE END I2C1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void I2C1_Init(void){
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	af00      	add	r7, sp, #0

	  hi2c1.Instance = I2C1;
 8001be0:	4b12      	ldr	r3, [pc, #72]	; (8001c2c <I2C1_Init+0x50>)
 8001be2:	4a13      	ldr	r2, [pc, #76]	; (8001c30 <I2C1_Init+0x54>)
 8001be4:	601a      	str	r2, [r3, #0]
	  hi2c1.Init.ClockSpeed = 400000;
 8001be6:	4b11      	ldr	r3, [pc, #68]	; (8001c2c <I2C1_Init+0x50>)
 8001be8:	4a12      	ldr	r2, [pc, #72]	; (8001c34 <I2C1_Init+0x58>)
 8001bea:	605a      	str	r2, [r3, #4]
	  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001bec:	4b0f      	ldr	r3, [pc, #60]	; (8001c2c <I2C1_Init+0x50>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	609a      	str	r2, [r3, #8]
	  hi2c1.Init.OwnAddress1 = 0;
 8001bf2:	4b0e      	ldr	r3, [pc, #56]	; (8001c2c <I2C1_Init+0x50>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	60da      	str	r2, [r3, #12]
	  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001bf8:	4b0c      	ldr	r3, [pc, #48]	; (8001c2c <I2C1_Init+0x50>)
 8001bfa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001bfe:	611a      	str	r2, [r3, #16]
	  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c00:	4b0a      	ldr	r3, [pc, #40]	; (8001c2c <I2C1_Init+0x50>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	615a      	str	r2, [r3, #20]
	  hi2c1.Init.OwnAddress2 = 0;
 8001c06:	4b09      	ldr	r3, [pc, #36]	; (8001c2c <I2C1_Init+0x50>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	619a      	str	r2, [r3, #24]
	  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c0c:	4b07      	ldr	r3, [pc, #28]	; (8001c2c <I2C1_Init+0x50>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	61da      	str	r2, [r3, #28]
	  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c12:	4b06      	ldr	r3, [pc, #24]	; (8001c2c <I2C1_Init+0x50>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	621a      	str	r2, [r3, #32]
	  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001c18:	4804      	ldr	r0, [pc, #16]	; (8001c2c <I2C1_Init+0x50>)
 8001c1a:	f002 fbbf 	bl	800439c <HAL_I2C_Init>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d001      	beq.n	8001c28 <I2C1_Init+0x4c>
	  {
	    Error_Handler();
 8001c24:	f000 fb38 	bl	8002298 <Error_Handler>
	  }

}
 8001c28:	bf00      	nop
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	200003ec 	.word	0x200003ec
 8001c30:	40005400 	.word	0x40005400
 8001c34:	00061a80 	.word	0x00061a80

08001c38 <__io_putchar>:
#include "stm32f4xx_hal.h"
#include "usart.h"
#include <stdio.h>
#include <stdarg.h>

int __io_putchar(int ch){
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b084      	sub	sp, #16
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
	uint8_t pchar = ch;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	b2db      	uxtb	r3, r3
 8001c44:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart1, &pchar, 1, HAL_MAX_DELAY);
 8001c46:	f107 010f 	add.w	r1, r7, #15
 8001c4a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c4e:	2201      	movs	r2, #1
 8001c50:	4803      	ldr	r0, [pc, #12]	; (8001c60 <__io_putchar+0x28>)
 8001c52:	f007 f936 	bl	8008ec2 <HAL_UART_Transmit>
	return ch;
 8001c56:	687b      	ldr	r3, [r7, #4]
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3710      	adds	r7, #16
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	20000d78 	.word	0x20000d78

08001c64 <_log>:

void _log(Log_Subsystem_t subsystem, const char* msg, ...){
 8001c64:	b40e      	push	{r1, r2, r3}
 8001c66:	b580      	push	{r7, lr}
 8001c68:	b085      	sub	sp, #20
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	71fb      	strb	r3, [r7, #7]
    va_list args;
	va_start(args, msg);
 8001c70:	f107 0320 	add.w	r3, r7, #32
 8001c74:	60fb      	str	r3, [r7, #12]
	switch(subsystem){
 8001c76:	79fb      	ldrb	r3, [r7, #7]
 8001c78:	2b05      	cmp	r3, #5
 8001c7a:	d827      	bhi.n	8001ccc <_log+0x68>
 8001c7c:	a201      	add	r2, pc, #4	; (adr r2, 8001c84 <_log+0x20>)
 8001c7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c82:	bf00      	nop
 8001c84:	08001c9d 	.word	0x08001c9d
 8001c88:	08001ca5 	.word	0x08001ca5
 8001c8c:	08001cad 	.word	0x08001cad
 8001c90:	08001cb5 	.word	0x08001cb5
 8001c94:	08001cbd 	.word	0x08001cbd
 8001c98:	08001cc5 	.word	0x08001cc5
		case(log_i2c):
			printf("Debug Subsystem I2C: ");
 8001c9c:	4816      	ldr	r0, [pc, #88]	; (8001cf8 <_log+0x94>)
 8001c9e:	f00b fee3 	bl	800da68 <iprintf>
				break;
 8001ca2:	e016      	b.n	8001cd2 <_log+0x6e>
		case(log_lps22hh):
			printf("Debug Subsystem LPS22HH: ");
 8001ca4:	4815      	ldr	r0, [pc, #84]	; (8001cfc <_log+0x98>)
 8001ca6:	f00b fedf 	bl	800da68 <iprintf>
				break;
 8001caa:	e012      	b.n	8001cd2 <_log+0x6e>
		case(log_iis2mdc):
			printf("Debug Subsystem IIS2MDC: ");
 8001cac:	4814      	ldr	r0, [pc, #80]	; (8001d00 <_log+0x9c>)
 8001cae:	f00b fedb 	bl	800da68 <iprintf>
				break;
 8001cb2:	e00e      	b.n	8001cd2 <_log+0x6e>
		case(log_hts221):
			printf("Debug Subsystem HTS221: ");
 8001cb4:	4813      	ldr	r0, [pc, #76]	; (8001d04 <_log+0xa0>)
 8001cb6:	f00b fed7 	bl	800da68 <iprintf>
				break;
 8001cba:	e00a      	b.n	8001cd2 <_log+0x6e>
		case(log_ism330dhcx):
			printf("Debug Subsystem ISM330DHCX: ");
 8001cbc:	4812      	ldr	r0, [pc, #72]	; (8001d08 <_log+0xa4>)
 8001cbe:	f00b fed3 	bl	800da68 <iprintf>
				break;
 8001cc2:	e006      	b.n	8001cd2 <_log+0x6e>
		case(log_mcp23017):
			printf("Debug Subsystem MCP23017: ");
 8001cc4:	4811      	ldr	r0, [pc, #68]	; (8001d0c <_log+0xa8>)
 8001cc6:	f00b fecf 	bl	800da68 <iprintf>
		        break;
 8001cca:	e002      	b.n	8001cd2 <_log+0x6e>
		default:
			printf("Unknown Debug Subsystem: ");
 8001ccc:	4810      	ldr	r0, [pc, #64]	; (8001d10 <_log+0xac>)
 8001cce:	f00b fecb 	bl	800da68 <iprintf>
	}
	vfprintf(stdout, msg, args);
 8001cd2:	4b10      	ldr	r3, [pc, #64]	; (8001d14 <_log+0xb0>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	68fa      	ldr	r2, [r7, #12]
 8001cda:	69f9      	ldr	r1, [r7, #28]
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f00b fd25 	bl	800d72c <vfiprintf>
	printf("\n");
 8001ce2:	200a      	movs	r0, #10
 8001ce4:	f00b fed8 	bl	800da98 <putchar>
	va_end(args);
}
 8001ce8:	bf00      	nop
 8001cea:	3714      	adds	r7, #20
 8001cec:	46bd      	mov	sp, r7
 8001cee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001cf2:	b003      	add	sp, #12
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop
 8001cf8:	0800e740 	.word	0x0800e740
 8001cfc:	0800e758 	.word	0x0800e758
 8001d00:	0800e774 	.word	0x0800e774
 8001d04:	0800e790 	.word	0x0800e790
 8001d08:	0800e7ac 	.word	0x0800e7ac
 8001d0c:	0800e7cc 	.word	0x0800e7cc
 8001d10:	0800e7e8 	.word	0x0800e7e8
 8001d14:	2000011c 	.word	0x2000011c

08001d18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d1e:	f000 fe4b 	bl	80029b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d22:	f000 f837 	bl	8001d94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d26:	f7ff fdf5 	bl	8001914 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001d2a:	f000 fda9 	bl	8002880 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 8001d2e:	f00a ff11 	bl	800cb54 <MX_USB_DEVICE_Init>
  MX_SPI1_Init();
 8001d32:	f000 fab7 	bl	80022a4 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  InitButtons();
 8001d36:	f000 f895 	bl	8001e64 <InitButtons>
  InitJoystick();
 8001d3a:	f000 f8c1 	bl	8001ec0 <InitJoystick>
  InitLEDs();
 8001d3e:	f000 f8e9 	bl	8001f14 <InitLEDs>
  InitScreen();
 8001d42:	f000 f91b 	bl	8001f7c <InitScreen>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t counter = 0;
 8001d46:	2300      	movs	r3, #0
 8001d48:	71fb      	strb	r3, [r7, #7]
  while (1)
  {
	 for(uint8_t i = 0; i < PINS_PER_EXPANDER; i++){
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	71bb      	strb	r3, [r7, #6]
 8001d4e:	e012      	b.n	8001d76 <main+0x5e>
		 ButtonRead(&Buttons[((counter + NUMBER_OF_IO_EXPANDERS-1) % NUMBER_OF_IO_EXPANDERS)*PINS_PER_EXPANDER + i]);
 8001d50:	79fb      	ldrb	r3, [r7, #7]
 8001d52:	3303      	adds	r3, #3
 8001d54:	f003 0303 	and.w	r3, r3, #3
 8001d58:	011a      	lsls	r2, r3, #4
 8001d5a:	79bb      	ldrb	r3, [r7, #6]
 8001d5c:	441a      	add	r2, r3
 8001d5e:	4613      	mov	r3, r2
 8001d60:	00db      	lsls	r3, r3, #3
 8001d62:	1a9b      	subs	r3, r3, r2
 8001d64:	009b      	lsls	r3, r3, #2
 8001d66:	4a09      	ldr	r2, [pc, #36]	; (8001d8c <main+0x74>)
 8001d68:	4413      	add	r3, r2
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f7ff f924 	bl	8000fb8 <ButtonRead>
	 for(uint8_t i = 0; i < PINS_PER_EXPANDER; i++){
 8001d70:	79bb      	ldrb	r3, [r7, #6]
 8001d72:	3301      	adds	r3, #1
 8001d74:	71bb      	strb	r3, [r7, #6]
 8001d76:	79bb      	ldrb	r3, [r7, #6]
 8001d78:	2b0f      	cmp	r3, #15
 8001d7a:	d9e9      	bls.n	8001d50 <main+0x38>
	 }
	JoystickRead(&Joystick);
 8001d7c:	4804      	ldr	r0, [pc, #16]	; (8001d90 <main+0x78>)
 8001d7e:	f7ff fa77 	bl	8001270 <JoystickRead>
    counter++;
 8001d82:	79fb      	ldrb	r3, [r7, #7]
 8001d84:	3301      	adds	r3, #1
 8001d86:	71fb      	strb	r3, [r7, #7]
	 for(uint8_t i = 0; i < PINS_PER_EXPANDER; i++){
 8001d88:	e7df      	b.n	8001d4a <main+0x32>
 8001d8a:	bf00      	nop
 8001d8c:	200004a0 	.word	0x200004a0
 8001d90:	20000ba0 	.word	0x20000ba0

08001d94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b094      	sub	sp, #80	; 0x50
 8001d98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d9a:	f107 0320 	add.w	r3, r7, #32
 8001d9e:	2230      	movs	r2, #48	; 0x30
 8001da0:	2100      	movs	r1, #0
 8001da2:	4618      	mov	r0, r3
 8001da4:	f00b fb60 	bl	800d468 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001da8:	f107 030c 	add.w	r3, r7, #12
 8001dac:	2200      	movs	r2, #0
 8001dae:	601a      	str	r2, [r3, #0]
 8001db0:	605a      	str	r2, [r3, #4]
 8001db2:	609a      	str	r2, [r3, #8]
 8001db4:	60da      	str	r2, [r3, #12]
 8001db6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001db8:	2300      	movs	r3, #0
 8001dba:	60bb      	str	r3, [r7, #8]
 8001dbc:	4b27      	ldr	r3, [pc, #156]	; (8001e5c <SystemClock_Config+0xc8>)
 8001dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc0:	4a26      	ldr	r2, [pc, #152]	; (8001e5c <SystemClock_Config+0xc8>)
 8001dc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dc6:	6413      	str	r3, [r2, #64]	; 0x40
 8001dc8:	4b24      	ldr	r3, [pc, #144]	; (8001e5c <SystemClock_Config+0xc8>)
 8001dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dd0:	60bb      	str	r3, [r7, #8]
 8001dd2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	607b      	str	r3, [r7, #4]
 8001dd8:	4b21      	ldr	r3, [pc, #132]	; (8001e60 <SystemClock_Config+0xcc>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a20      	ldr	r2, [pc, #128]	; (8001e60 <SystemClock_Config+0xcc>)
 8001dde:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001de2:	6013      	str	r3, [r2, #0]
 8001de4:	4b1e      	ldr	r3, [pc, #120]	; (8001e60 <SystemClock_Config+0xcc>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001dec:	607b      	str	r3, [r7, #4]
 8001dee:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001df0:	2301      	movs	r3, #1
 8001df2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001df4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001df8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001dfa:	2302      	movs	r3, #2
 8001dfc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001dfe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001e02:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001e04:	2319      	movs	r3, #25
 8001e06:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001e08:	23c0      	movs	r3, #192	; 0xc0
 8001e0a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e0c:	2302      	movs	r3, #2
 8001e0e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001e10:	2304      	movs	r3, #4
 8001e12:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e14:	f107 0320 	add.w	r3, r7, #32
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f004 fd35 	bl	8006888 <HAL_RCC_OscConfig>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d001      	beq.n	8001e28 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001e24:	f000 fa38 	bl	8002298 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e28:	230f      	movs	r3, #15
 8001e2a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e2c:	2302      	movs	r3, #2
 8001e2e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e30:	2300      	movs	r3, #0
 8001e32:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001e34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e38:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001e3e:	f107 030c 	add.w	r3, r7, #12
 8001e42:	2103      	movs	r1, #3
 8001e44:	4618      	mov	r0, r3
 8001e46:	f004 ff97 	bl	8006d78 <HAL_RCC_ClockConfig>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d001      	beq.n	8001e54 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001e50:	f000 fa22 	bl	8002298 <Error_Handler>
  }
}
 8001e54:	bf00      	nop
 8001e56:	3750      	adds	r7, #80	; 0x50
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	40023800 	.word	0x40023800
 8001e60:	40007000 	.word	0x40007000

08001e64 <InitButtons>:

/* USER CODE BEGIN 4 */
void InitButtons(){
 8001e64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e66:	b087      	sub	sp, #28
 8001e68:	af04      	add	r7, sp, #16
	Button_Init_Struct_t Settings = {
 8001e6a:	463b      	mov	r3, r7
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	601a      	str	r2, [r3, #0]
 8001e70:	711a      	strb	r2, [r3, #4]
			.KeyFunction = 0,
			.ModKeyFunction = 0,
			.MouseFunction = 0,
			.WheelFunction = 0,
	};
	for(uint8_t i = 0; i < NUMBER_OF_IO_EXPANDERS*PINS_PER_EXPANDER; i++){
 8001e72:	2300      	movs	r3, #0
 8001e74:	71fb      	strb	r3, [r7, #7]
 8001e76:	e017      	b.n	8001ea8 <InitButtons+0x44>
		Settings.ButtonIDNumber = i;
 8001e78:	79fb      	ldrb	r3, [r7, #7]
 8001e7a:	703b      	strb	r3, [r7, #0]
        ButtonInit(Settings, &Buttons[i], ButtonIO_Driver);
 8001e7c:	79fa      	ldrb	r2, [r7, #7]
 8001e7e:	4613      	mov	r3, r2
 8001e80:	00db      	lsls	r3, r3, #3
 8001e82:	1a9b      	subs	r3, r3, r2
 8001e84:	009b      	lsls	r3, r3, #2
 8001e86:	4a0c      	ldr	r2, [pc, #48]	; (8001eb8 <InitButtons+0x54>)
 8001e88:	189e      	adds	r6, r3, r2
 8001e8a:	4d0c      	ldr	r5, [pc, #48]	; (8001ebc <InitButtons+0x58>)
 8001e8c:	466c      	mov	r4, sp
 8001e8e:	1d2b      	adds	r3, r5, #4
 8001e90:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e92:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001e96:	682b      	ldr	r3, [r5, #0]
 8001e98:	4632      	mov	r2, r6
 8001e9a:	4639      	mov	r1, r7
 8001e9c:	c903      	ldmia	r1, {r0, r1}
 8001e9e:	f7ff f859 	bl	8000f54 <ButtonInit>
	for(uint8_t i = 0; i < NUMBER_OF_IO_EXPANDERS*PINS_PER_EXPANDER; i++){
 8001ea2:	79fb      	ldrb	r3, [r7, #7]
 8001ea4:	3301      	adds	r3, #1
 8001ea6:	71fb      	strb	r3, [r7, #7]
 8001ea8:	79fb      	ldrb	r3, [r7, #7]
 8001eaa:	2b3f      	cmp	r3, #63	; 0x3f
 8001eac:	d9e4      	bls.n	8001e78 <InitButtons+0x14>
	}
}
 8001eae:	bf00      	nop
 8001eb0:	bf00      	nop
 8001eb2:	370c      	adds	r7, #12
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001eb8:	200004a0 	.word	0x200004a0
 8001ebc:	0800e8d8 	.word	0x0800e8d8

08001ec0 <InitJoystick>:

void InitJoystick(){
 8001ec0:	b5b0      	push	{r4, r5, r7, lr}
 8001ec2:	b096      	sub	sp, #88	; 0x58
 8001ec4:	af0c      	add	r7, sp, #48	; 0x30
    Joystick_Init_Struct_t Settings = {
 8001ec6:	1d3b      	adds	r3, r7, #4
 8001ec8:	2224      	movs	r2, #36	; 0x24
 8001eca:	2100      	movs	r1, #0
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f00b facb 	bl	800d468 <memset>
 8001ed2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001ed6:	80bb      	strh	r3, [r7, #4]
 8001ed8:	2301      	movs	r3, #1
 8001eda:	71bb      	strb	r3, [r7, #6]
    		.DeadZone = 2000,
			.Mode = Joystick4Way
    };
    JoystickInit(Settings, &Joystick, JoystickIO_Driver);
 8001edc:	4b0b      	ldr	r3, [pc, #44]	; (8001f0c <InitJoystick+0x4c>)
 8001ede:	ac06      	add	r4, sp, #24
 8001ee0:	461d      	mov	r5, r3
 8001ee2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ee4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ee6:	682b      	ldr	r3, [r5, #0]
 8001ee8:	6023      	str	r3, [r4, #0]
 8001eea:	4b09      	ldr	r3, [pc, #36]	; (8001f10 <InitJoystick+0x50>)
 8001eec:	9305      	str	r3, [sp, #20]
 8001eee:	466d      	mov	r5, sp
 8001ef0:	f107 0414 	add.w	r4, r7, #20
 8001ef4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ef6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ef8:	6823      	ldr	r3, [r4, #0]
 8001efa:	602b      	str	r3, [r5, #0]
 8001efc:	1d3b      	adds	r3, r7, #4
 8001efe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f00:	f7ff f958 	bl	80011b4 <JoystickInit>
}
 8001f04:	bf00      	nop
 8001f06:	3728      	adds	r7, #40	; 0x28
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bdb0      	pop	{r4, r5, r7, pc}
 8001f0c:	0800e8ec 	.word	0x0800e8ec
 8001f10:	20000ba0 	.word	0x20000ba0

08001f14 <InitLEDs>:

void InitLEDs(){
 8001f14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f16:	b087      	sub	sp, #28
 8001f18:	af04      	add	r7, sp, #16
	SerialLED_InitStruct_t LED_Settings = {
 8001f1a:	463b      	mov	r3, r7
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	601a      	str	r2, [r3, #0]
 8001f20:	809a      	strh	r2, [r3, #4]
 8001f22:	23ff      	movs	r3, #255	; 0xff
 8001f24:	70bb      	strb	r3, [r7, #2]
 8001f26:	23ff      	movs	r3, #255	; 0xff
 8001f28:	713b      	strb	r3, [r7, #4]
			.green = 0xFF,
			.red = 0x00,
			.blue = 0xFF
	};
	for(uint8_t i = 0; i < NUMBER_OF_LEDS; i++){
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	71fb      	strb	r3, [r7, #7]
 8001f2e:	e018      	b.n	8001f62 <InitLEDs+0x4e>
		LED_Settings.address = i;
 8001f30:	79fb      	ldrb	r3, [r7, #7]
 8001f32:	b29b      	uxth	r3, r3
 8001f34:	803b      	strh	r3, [r7, #0]
		SerialLEDInit(LED_Settings,&LED[i],LED_Drv);
 8001f36:	79fa      	ldrb	r2, [r7, #7]
 8001f38:	4613      	mov	r3, r2
 8001f3a:	00db      	lsls	r3, r3, #3
 8001f3c:	1a9b      	subs	r3, r3, r2
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	4a0c      	ldr	r2, [pc, #48]	; (8001f74 <InitLEDs+0x60>)
 8001f42:	189e      	adds	r6, r3, r2
 8001f44:	4d0c      	ldr	r5, [pc, #48]	; (8001f78 <InitLEDs+0x64>)
 8001f46:	466c      	mov	r4, sp
 8001f48:	1d2b      	adds	r3, r5, #4
 8001f4a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f4c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001f50:	682b      	ldr	r3, [r5, #0]
 8001f52:	4632      	mov	r2, r6
 8001f54:	4639      	mov	r1, r7
 8001f56:	c903      	ldmia	r1, {r0, r1}
 8001f58:	f7ff fad0 	bl	80014fc <SerialLEDInit>
	for(uint8_t i = 0; i < NUMBER_OF_LEDS; i++){
 8001f5c:	79fb      	ldrb	r3, [r7, #7]
 8001f5e:	3301      	adds	r3, #1
 8001f60:	71fb      	strb	r3, [r7, #7]
 8001f62:	79fb      	ldrb	r3, [r7, #7]
 8001f64:	2b03      	cmp	r3, #3
 8001f66:	d9e3      	bls.n	8001f30 <InitLEDs+0x1c>
	}
}
 8001f68:	bf00      	nop
 8001f6a:	bf00      	nop
 8001f6c:	370c      	adds	r7, #12
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f72:	bf00      	nop
 8001f74:	20000be0 	.word	0x20000be0
 8001f78:	2000001c 	.word	0x2000001c

08001f7c <InitScreen>:

void InitScreen(){
 8001f7c:	b5b0      	push	{r4, r5, r7, lr}
 8001f7e:	b08e      	sub	sp, #56	; 0x38
 8001f80:	af06      	add	r7, sp, #24
	ILI9341_Init_Struct_t Settings = {
 8001f82:	4a9c      	ldr	r2, [pc, #624]	; (80021f4 <InitScreen+0x278>)
 8001f84:	f107 0314 	add.w	r3, r7, #20
 8001f88:	ca07      	ldmia	r2, {r0, r1, r2}
 8001f8a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			.Orientation = XYExchangeXYMirror,
			.ScreenHeight = 240,
			.ScreenWidth = 320
	};
	ILI9341_Init(Settings, &LCD, ILI931_IO);
 8001f8e:	4b9a      	ldr	r3, [pc, #616]	; (80021f8 <InitScreen+0x27c>)
 8001f90:	466c      	mov	r4, sp
 8001f92:	461d      	mov	r5, r3
 8001f94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f98:	682b      	ldr	r3, [r5, #0]
 8001f9a:	6023      	str	r3, [r4, #0]
 8001f9c:	4b97      	ldr	r3, [pc, #604]	; (80021fc <InitScreen+0x280>)
 8001f9e:	f107 0214 	add.w	r2, r7, #20
 8001fa2:	ca07      	ldmia	r2, {r0, r1, r2}
 8001fa4:	f7fe faee 	bl	8000584 <ILI9341_Init>
    ILI9341_Color_t Color = {
 8001fa8:	2300      	movs	r3, #0
 8001faa:	743b      	strb	r3, [r7, #16]
 8001fac:	2300      	movs	r3, #0
 8001fae:	747b      	strb	r3, [r7, #17]
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	74bb      	strb	r3, [r7, #18]
    		.red = 0,
    		.green = 0,
			.blue = 0
    };
    ILI9341_FillSceen(&LCD, Color);
 8001fb4:	6939      	ldr	r1, [r7, #16]
 8001fb6:	4891      	ldr	r0, [pc, #580]	; (80021fc <InitScreen+0x280>)
 8001fb8:	f7fe fc2d 	bl	8000816 <ILI9341_FillSceen>
    ILI9341_Image_t Image = {
 8001fbc:	4b90      	ldr	r3, [pc, #576]	; (8002200 <InitScreen+0x284>)
 8001fbe:	463c      	mov	r4, r7
 8001fc0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001fc2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    		.Height = 62,
			.Width = 62,
			.ImageLength = 62*62*3,
			.ImageData = char_image
    };
    LCD.Cursor.X = 40 - Image.Width / 2;
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	085b      	lsrs	r3, r3, #1
 8001fca:	b29b      	uxth	r3, r3
 8001fcc:	f1c3 0328 	rsb	r3, r3, #40	; 0x28
 8001fd0:	b29b      	uxth	r3, r3
 8001fd2:	b21a      	sxth	r2, r3
 8001fd4:	4b89      	ldr	r3, [pc, #548]	; (80021fc <InitScreen+0x280>)
 8001fd6:	819a      	strh	r2, [r3, #12]
    LCD.Cursor.Y = 40 - Image.Height / 2;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	085b      	lsrs	r3, r3, #1
 8001fdc:	b29b      	uxth	r3, r3
 8001fde:	f1c3 0328 	rsb	r3, r3, #40	; 0x28
 8001fe2:	b29b      	uxth	r3, r3
 8001fe4:	b21a      	sxth	r2, r3
 8001fe6:	4b85      	ldr	r3, [pc, #532]	; (80021fc <InitScreen+0x280>)
 8001fe8:	81da      	strh	r2, [r3, #14]
    ILI9341_DisplayImage(&LCD, Image);
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	9300      	str	r3, [sp, #0]
 8001fee:	463b      	mov	r3, r7
 8001ff0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ff2:	4882      	ldr	r0, [pc, #520]	; (80021fc <InitScreen+0x280>)
 8001ff4:	f7fe fc7c 	bl	80008f0 <ILI9341_DisplayImage>

    Image.ImageData = bag_image;
 8001ff8:	4b82      	ldr	r3, [pc, #520]	; (8002204 <InitScreen+0x288>)
 8001ffa:	60fb      	str	r3, [r7, #12]
    LCD.Cursor.X = 120 - Image.Width / 2;
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	085b      	lsrs	r3, r3, #1
 8002000:	b29b      	uxth	r3, r3
 8002002:	f1c3 0378 	rsb	r3, r3, #120	; 0x78
 8002006:	b29b      	uxth	r3, r3
 8002008:	b21a      	sxth	r2, r3
 800200a:	4b7c      	ldr	r3, [pc, #496]	; (80021fc <InitScreen+0x280>)
 800200c:	819a      	strh	r2, [r3, #12]
    LCD.Cursor.Y = 40 - Image.Height / 2;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	085b      	lsrs	r3, r3, #1
 8002012:	b29b      	uxth	r3, r3
 8002014:	f1c3 0328 	rsb	r3, r3, #40	; 0x28
 8002018:	b29b      	uxth	r3, r3
 800201a:	b21a      	sxth	r2, r3
 800201c:	4b77      	ldr	r3, [pc, #476]	; (80021fc <InitScreen+0x280>)
 800201e:	81da      	strh	r2, [r3, #14]
    ILI9341_DisplayImage(&LCD, Image);
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	9300      	str	r3, [sp, #0]
 8002024:	463b      	mov	r3, r7
 8002026:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002028:	4874      	ldr	r0, [pc, #464]	; (80021fc <InitScreen+0x280>)
 800202a:	f7fe fc61 	bl	80008f0 <ILI9341_DisplayImage>

    Image.ImageData = mounts_image;
 800202e:	4b76      	ldr	r3, [pc, #472]	; (8002208 <InitScreen+0x28c>)
 8002030:	60fb      	str	r3, [r7, #12]
    LCD.Cursor.X = 200 - Image.Width / 2;
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	085b      	lsrs	r3, r3, #1
 8002036:	b29b      	uxth	r3, r3
 8002038:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
 800203c:	b29b      	uxth	r3, r3
 800203e:	b21a      	sxth	r2, r3
 8002040:	4b6e      	ldr	r3, [pc, #440]	; (80021fc <InitScreen+0x280>)
 8002042:	819a      	strh	r2, [r3, #12]
    LCD.Cursor.Y = 40 - Image.Height / 2;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	085b      	lsrs	r3, r3, #1
 8002048:	b29b      	uxth	r3, r3
 800204a:	f1c3 0328 	rsb	r3, r3, #40	; 0x28
 800204e:	b29b      	uxth	r3, r3
 8002050:	b21a      	sxth	r2, r3
 8002052:	4b6a      	ldr	r3, [pc, #424]	; (80021fc <InitScreen+0x280>)
 8002054:	81da      	strh	r2, [r3, #14]
    ILI9341_DisplayImage(&LCD, Image);
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	9300      	str	r3, [sp, #0]
 800205a:	463b      	mov	r3, r7
 800205c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800205e:	4867      	ldr	r0, [pc, #412]	; (80021fc <InitScreen+0x280>)
 8002060:	f7fe fc46 	bl	80008f0 <ILI9341_DisplayImage>

    Image.ImageData = LFD_image;
 8002064:	4b69      	ldr	r3, [pc, #420]	; (800220c <InitScreen+0x290>)
 8002066:	60fb      	str	r3, [r7, #12]
    LCD.Cursor.X = 280 - Image.Width / 2;
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	085b      	lsrs	r3, r3, #1
 800206c:	b29b      	uxth	r3, r3
 800206e:	f5c3 738c 	rsb	r3, r3, #280	; 0x118
 8002072:	b29b      	uxth	r3, r3
 8002074:	b21a      	sxth	r2, r3
 8002076:	4b61      	ldr	r3, [pc, #388]	; (80021fc <InitScreen+0x280>)
 8002078:	819a      	strh	r2, [r3, #12]
    LCD.Cursor.Y = 40 - Image.Height / 2;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	085b      	lsrs	r3, r3, #1
 800207e:	b29b      	uxth	r3, r3
 8002080:	f1c3 0328 	rsb	r3, r3, #40	; 0x28
 8002084:	b29b      	uxth	r3, r3
 8002086:	b21a      	sxth	r2, r3
 8002088:	4b5c      	ldr	r3, [pc, #368]	; (80021fc <InitScreen+0x280>)
 800208a:	81da      	strh	r2, [r3, #14]
    ILI9341_DisplayImage(&LCD, Image);
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	9300      	str	r3, [sp, #0]
 8002090:	463b      	mov	r3, r7
 8002092:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002094:	4859      	ldr	r0, [pc, #356]	; (80021fc <InitScreen+0x280>)
 8002096:	f7fe fc2b 	bl	80008f0 <ILI9341_DisplayImage>

    Image.ImageData = spells_image;
 800209a:	4b5d      	ldr	r3, [pc, #372]	; (8002210 <InitScreen+0x294>)
 800209c:	60fb      	str	r3, [r7, #12]
    LCD.Cursor.X = 40 - Image.Width / 2;
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	085b      	lsrs	r3, r3, #1
 80020a2:	b29b      	uxth	r3, r3
 80020a4:	f1c3 0328 	rsb	r3, r3, #40	; 0x28
 80020a8:	b29b      	uxth	r3, r3
 80020aa:	b21a      	sxth	r2, r3
 80020ac:	4b53      	ldr	r3, [pc, #332]	; (80021fc <InitScreen+0x280>)
 80020ae:	819a      	strh	r2, [r3, #12]
    LCD.Cursor.Y = 120 - Image.Height / 2;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	085b      	lsrs	r3, r3, #1
 80020b4:	b29b      	uxth	r3, r3
 80020b6:	f1c3 0378 	rsb	r3, r3, #120	; 0x78
 80020ba:	b29b      	uxth	r3, r3
 80020bc:	b21a      	sxth	r2, r3
 80020be:	4b4f      	ldr	r3, [pc, #316]	; (80021fc <InitScreen+0x280>)
 80020c0:	81da      	strh	r2, [r3, #14]
    ILI9341_DisplayImage(&LCD, Image);
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	9300      	str	r3, [sp, #0]
 80020c6:	463b      	mov	r3, r7
 80020c8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020ca:	484c      	ldr	r0, [pc, #304]	; (80021fc <InitScreen+0x280>)
 80020cc:	f7fe fc10 	bl	80008f0 <ILI9341_DisplayImage>

    Image.ImageData = talents_image;
 80020d0:	4b50      	ldr	r3, [pc, #320]	; (8002214 <InitScreen+0x298>)
 80020d2:	60fb      	str	r3, [r7, #12]
    LCD.Cursor.X = 120 - Image.Width / 2;
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	085b      	lsrs	r3, r3, #1
 80020d8:	b29b      	uxth	r3, r3
 80020da:	f1c3 0378 	rsb	r3, r3, #120	; 0x78
 80020de:	b29b      	uxth	r3, r3
 80020e0:	b21a      	sxth	r2, r3
 80020e2:	4b46      	ldr	r3, [pc, #280]	; (80021fc <InitScreen+0x280>)
 80020e4:	819a      	strh	r2, [r3, #12]
    LCD.Cursor.Y = 120 - Image.Height / 2;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	085b      	lsrs	r3, r3, #1
 80020ea:	b29b      	uxth	r3, r3
 80020ec:	f1c3 0378 	rsb	r3, r3, #120	; 0x78
 80020f0:	b29b      	uxth	r3, r3
 80020f2:	b21a      	sxth	r2, r3
 80020f4:	4b41      	ldr	r3, [pc, #260]	; (80021fc <InitScreen+0x280>)
 80020f6:	81da      	strh	r2, [r3, #14]
    ILI9341_DisplayImage(&LCD, Image);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	9300      	str	r3, [sp, #0]
 80020fc:	463b      	mov	r3, r7
 80020fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002100:	483e      	ldr	r0, [pc, #248]	; (80021fc <InitScreen+0x280>)
 8002102:	f7fe fbf5 	bl	80008f0 <ILI9341_DisplayImage>

    Image.ImageData = social_image;
 8002106:	4b44      	ldr	r3, [pc, #272]	; (8002218 <InitScreen+0x29c>)
 8002108:	60fb      	str	r3, [r7, #12]
    LCD.Cursor.X = 200 - Image.Width / 2;
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	085b      	lsrs	r3, r3, #1
 800210e:	b29b      	uxth	r3, r3
 8002110:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
 8002114:	b29b      	uxth	r3, r3
 8002116:	b21a      	sxth	r2, r3
 8002118:	4b38      	ldr	r3, [pc, #224]	; (80021fc <InitScreen+0x280>)
 800211a:	819a      	strh	r2, [r3, #12]
    LCD.Cursor.Y = 120 - Image.Height / 2;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	085b      	lsrs	r3, r3, #1
 8002120:	b29b      	uxth	r3, r3
 8002122:	f1c3 0378 	rsb	r3, r3, #120	; 0x78
 8002126:	b29b      	uxth	r3, r3
 8002128:	b21a      	sxth	r2, r3
 800212a:	4b34      	ldr	r3, [pc, #208]	; (80021fc <InitScreen+0x280>)
 800212c:	81da      	strh	r2, [r3, #14]
    ILI9341_DisplayImage(&LCD, Image);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	9300      	str	r3, [sp, #0]
 8002132:	463b      	mov	r3, r7
 8002134:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002136:	4831      	ldr	r0, [pc, #196]	; (80021fc <InitScreen+0x280>)
 8002138:	f7fe fbda 	bl	80008f0 <ILI9341_DisplayImage>

    Image.ImageData = guild_image;
 800213c:	4b37      	ldr	r3, [pc, #220]	; (800221c <InitScreen+0x2a0>)
 800213e:	60fb      	str	r3, [r7, #12]
    LCD.Cursor.X = 280 - Image.Width / 2;
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	085b      	lsrs	r3, r3, #1
 8002144:	b29b      	uxth	r3, r3
 8002146:	f5c3 738c 	rsb	r3, r3, #280	; 0x118
 800214a:	b29b      	uxth	r3, r3
 800214c:	b21a      	sxth	r2, r3
 800214e:	4b2b      	ldr	r3, [pc, #172]	; (80021fc <InitScreen+0x280>)
 8002150:	819a      	strh	r2, [r3, #12]
    LCD.Cursor.Y = 120 - Image.Height / 2;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	085b      	lsrs	r3, r3, #1
 8002156:	b29b      	uxth	r3, r3
 8002158:	f1c3 0378 	rsb	r3, r3, #120	; 0x78
 800215c:	b29b      	uxth	r3, r3
 800215e:	b21a      	sxth	r2, r3
 8002160:	4b26      	ldr	r3, [pc, #152]	; (80021fc <InitScreen+0x280>)
 8002162:	81da      	strh	r2, [r3, #14]
    ILI9341_DisplayImage(&LCD, Image);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	9300      	str	r3, [sp, #0]
 8002168:	463b      	mov	r3, r7
 800216a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800216c:	4823      	ldr	r0, [pc, #140]	; (80021fc <InitScreen+0x280>)
 800216e:	f7fe fbbf 	bl	80008f0 <ILI9341_DisplayImage>

    Image.ImageData = map_image;
 8002172:	4b2b      	ldr	r3, [pc, #172]	; (8002220 <InitScreen+0x2a4>)
 8002174:	60fb      	str	r3, [r7, #12]
    LCD.Cursor.X = 40 - Image.Width / 2;
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	085b      	lsrs	r3, r3, #1
 800217a:	b29b      	uxth	r3, r3
 800217c:	f1c3 0328 	rsb	r3, r3, #40	; 0x28
 8002180:	b29b      	uxth	r3, r3
 8002182:	b21a      	sxth	r2, r3
 8002184:	4b1d      	ldr	r3, [pc, #116]	; (80021fc <InitScreen+0x280>)
 8002186:	819a      	strh	r2, [r3, #12]
    LCD.Cursor.Y = 200 - Image.Height / 2;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	085b      	lsrs	r3, r3, #1
 800218c:	b29b      	uxth	r3, r3
 800218e:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
 8002192:	b29b      	uxth	r3, r3
 8002194:	b21a      	sxth	r2, r3
 8002196:	4b19      	ldr	r3, [pc, #100]	; (80021fc <InitScreen+0x280>)
 8002198:	81da      	strh	r2, [r3, #14]
    ILI9341_DisplayImage(&LCD, Image);
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	9300      	str	r3, [sp, #0]
 800219e:	463b      	mov	r3, r7
 80021a0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021a2:	4816      	ldr	r0, [pc, #88]	; (80021fc <InitScreen+0x280>)
 80021a4:	f7fe fba4 	bl	80008f0 <ILI9341_DisplayImage>

    Image.ImageData = achievements_image;
 80021a8:	4b1e      	ldr	r3, [pc, #120]	; (8002224 <InitScreen+0x2a8>)
 80021aa:	60fb      	str	r3, [r7, #12]
    LCD.Cursor.X = 120 - Image.Width / 2;
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	085b      	lsrs	r3, r3, #1
 80021b0:	b29b      	uxth	r3, r3
 80021b2:	f1c3 0378 	rsb	r3, r3, #120	; 0x78
 80021b6:	b29b      	uxth	r3, r3
 80021b8:	b21a      	sxth	r2, r3
 80021ba:	4b10      	ldr	r3, [pc, #64]	; (80021fc <InitScreen+0x280>)
 80021bc:	819a      	strh	r2, [r3, #12]
    LCD.Cursor.Y = 200 - Image.Height / 2;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	085b      	lsrs	r3, r3, #1
 80021c2:	b29b      	uxth	r3, r3
 80021c4:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
 80021c8:	b29b      	uxth	r3, r3
 80021ca:	b21a      	sxth	r2, r3
 80021cc:	4b0b      	ldr	r3, [pc, #44]	; (80021fc <InitScreen+0x280>)
 80021ce:	81da      	strh	r2, [r3, #14]
    ILI9341_DisplayImage(&LCD, Image);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	9300      	str	r3, [sp, #0]
 80021d4:	463b      	mov	r3, r7
 80021d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021d8:	4808      	ldr	r0, [pc, #32]	; (80021fc <InitScreen+0x280>)
 80021da:	f7fe fb89 	bl	80008f0 <ILI9341_DisplayImage>

    Image.ImageData = adventureguide_image;
 80021de:	4b12      	ldr	r3, [pc, #72]	; (8002228 <InitScreen+0x2ac>)
 80021e0:	60fb      	str	r3, [r7, #12]
    LCD.Cursor.X = 200 - Image.Width / 2;
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	085b      	lsrs	r3, r3, #1
 80021e6:	b29b      	uxth	r3, r3
 80021e8:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
 80021ec:	b29b      	uxth	r3, r3
 80021ee:	b21a      	sxth	r2, r3
 80021f0:	e01c      	b.n	800222c <InitScreen+0x2b0>
 80021f2:	bf00      	nop
 80021f4:	0800e804 	.word	0x0800e804
 80021f8:	20000000 	.word	0x20000000
 80021fc:	20000c50 	.word	0x20000c50
 8002200:	0800e810 	.word	0x0800e810
 8002204:	08011624 	.word	0x08011624
 8002208:	08014330 	.word	0x08014330
 800220c:	0801703c 	.word	0x0801703c
 8002210:	08019d48 	.word	0x08019d48
 8002214:	0801ca54 	.word	0x0801ca54
 8002218:	0801f760 	.word	0x0801f760
 800221c:	0802246c 	.word	0x0802246c
 8002220:	08025178 	.word	0x08025178
 8002224:	08027e84 	.word	0x08027e84
 8002228:	0802ab90 	.word	0x0802ab90
 800222c:	4b18      	ldr	r3, [pc, #96]	; (8002290 <InitScreen+0x314>)
 800222e:	819a      	strh	r2, [r3, #12]
    LCD.Cursor.Y = 200 - Image.Height / 2;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	085b      	lsrs	r3, r3, #1
 8002234:	b29b      	uxth	r3, r3
 8002236:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
 800223a:	b29b      	uxth	r3, r3
 800223c:	b21a      	sxth	r2, r3
 800223e:	4b14      	ldr	r3, [pc, #80]	; (8002290 <InitScreen+0x314>)
 8002240:	81da      	strh	r2, [r3, #14]
    ILI9341_DisplayImage(&LCD, Image);
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	9300      	str	r3, [sp, #0]
 8002246:	463b      	mov	r3, r7
 8002248:	cb0e      	ldmia	r3, {r1, r2, r3}
 800224a:	4811      	ldr	r0, [pc, #68]	; (8002290 <InitScreen+0x314>)
 800224c:	f7fe fb50 	bl	80008f0 <ILI9341_DisplayImage>

    Image.ImageData = menu_image;
 8002250:	4b10      	ldr	r3, [pc, #64]	; (8002294 <InitScreen+0x318>)
 8002252:	60fb      	str	r3, [r7, #12]
    LCD.Cursor.X = 280 - Image.Width / 2;
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	085b      	lsrs	r3, r3, #1
 8002258:	b29b      	uxth	r3, r3
 800225a:	f5c3 738c 	rsb	r3, r3, #280	; 0x118
 800225e:	b29b      	uxth	r3, r3
 8002260:	b21a      	sxth	r2, r3
 8002262:	4b0b      	ldr	r3, [pc, #44]	; (8002290 <InitScreen+0x314>)
 8002264:	819a      	strh	r2, [r3, #12]
    LCD.Cursor.Y = 200 - Image.Height / 2;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	085b      	lsrs	r3, r3, #1
 800226a:	b29b      	uxth	r3, r3
 800226c:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
 8002270:	b29b      	uxth	r3, r3
 8002272:	b21a      	sxth	r2, r3
 8002274:	4b06      	ldr	r3, [pc, #24]	; (8002290 <InitScreen+0x314>)
 8002276:	81da      	strh	r2, [r3, #14]
    ILI9341_DisplayImage(&LCD, Image);
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	9300      	str	r3, [sp, #0]
 800227c:	463b      	mov	r3, r7
 800227e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002280:	4803      	ldr	r0, [pc, #12]	; (8002290 <InitScreen+0x314>)
 8002282:	f7fe fb35 	bl	80008f0 <ILI9341_DisplayImage>
}
 8002286:	bf00      	nop
 8002288:	3720      	adds	r7, #32
 800228a:	46bd      	mov	sp, r7
 800228c:	bdb0      	pop	{r4, r5, r7, pc}
 800228e:	bf00      	nop
 8002290:	20000c50 	.word	0x20000c50
 8002294:	0802d89c 	.word	0x0802d89c

08002298 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002298:	b480      	push	{r7}
 800229a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800229c:	b672      	cpsid	i
}
 800229e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80022a0:	e7fe      	b.n	80022a0 <Error_Handler+0x8>
	...

080022a4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80022a8:	4b17      	ldr	r3, [pc, #92]	; (8002308 <MX_SPI1_Init+0x64>)
 80022aa:	4a18      	ldr	r2, [pc, #96]	; (800230c <MX_SPI1_Init+0x68>)
 80022ac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80022ae:	4b16      	ldr	r3, [pc, #88]	; (8002308 <MX_SPI1_Init+0x64>)
 80022b0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80022b4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80022b6:	4b14      	ldr	r3, [pc, #80]	; (8002308 <MX_SPI1_Init+0x64>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80022bc:	4b12      	ldr	r3, [pc, #72]	; (8002308 <MX_SPI1_Init+0x64>)
 80022be:	2200      	movs	r2, #0
 80022c0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80022c2:	4b11      	ldr	r3, [pc, #68]	; (8002308 <MX_SPI1_Init+0x64>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80022c8:	4b0f      	ldr	r3, [pc, #60]	; (8002308 <MX_SPI1_Init+0x64>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80022ce:	4b0e      	ldr	r3, [pc, #56]	; (8002308 <MX_SPI1_Init+0x64>)
 80022d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022d4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80022d6:	4b0c      	ldr	r3, [pc, #48]	; (8002308 <MX_SPI1_Init+0x64>)
 80022d8:	2200      	movs	r2, #0
 80022da:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80022dc:	4b0a      	ldr	r3, [pc, #40]	; (8002308 <MX_SPI1_Init+0x64>)
 80022de:	2200      	movs	r2, #0
 80022e0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80022e2:	4b09      	ldr	r3, [pc, #36]	; (8002308 <MX_SPI1_Init+0x64>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022e8:	4b07      	ldr	r3, [pc, #28]	; (8002308 <MX_SPI1_Init+0x64>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80022ee:	4b06      	ldr	r3, [pc, #24]	; (8002308 <MX_SPI1_Init+0x64>)
 80022f0:	220a      	movs	r2, #10
 80022f2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80022f4:	4804      	ldr	r0, [pc, #16]	; (8002308 <MX_SPI1_Init+0x64>)
 80022f6:	f004 ff1f 	bl	8007138 <HAL_SPI_Init>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d001      	beq.n	8002304 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002300:	f7ff ffca 	bl	8002298 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002304:	bf00      	nop
 8002306:	bd80      	pop	{r7, pc}
 8002308:	20000c74 	.word	0x20000c74
 800230c:	40013000 	.word	0x40013000

08002310 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b08a      	sub	sp, #40	; 0x28
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002318:	f107 0314 	add.w	r3, r7, #20
 800231c:	2200      	movs	r2, #0
 800231e:	601a      	str	r2, [r3, #0]
 8002320:	605a      	str	r2, [r3, #4]
 8002322:	609a      	str	r2, [r3, #8]
 8002324:	60da      	str	r2, [r3, #12]
 8002326:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a19      	ldr	r2, [pc, #100]	; (8002394 <HAL_SPI_MspInit+0x84>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d12b      	bne.n	800238a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002332:	2300      	movs	r3, #0
 8002334:	613b      	str	r3, [r7, #16]
 8002336:	4b18      	ldr	r3, [pc, #96]	; (8002398 <HAL_SPI_MspInit+0x88>)
 8002338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800233a:	4a17      	ldr	r2, [pc, #92]	; (8002398 <HAL_SPI_MspInit+0x88>)
 800233c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002340:	6453      	str	r3, [r2, #68]	; 0x44
 8002342:	4b15      	ldr	r3, [pc, #84]	; (8002398 <HAL_SPI_MspInit+0x88>)
 8002344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002346:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800234a:	613b      	str	r3, [r7, #16]
 800234c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800234e:	2300      	movs	r3, #0
 8002350:	60fb      	str	r3, [r7, #12]
 8002352:	4b11      	ldr	r3, [pc, #68]	; (8002398 <HAL_SPI_MspInit+0x88>)
 8002354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002356:	4a10      	ldr	r2, [pc, #64]	; (8002398 <HAL_SPI_MspInit+0x88>)
 8002358:	f043 0301 	orr.w	r3, r3, #1
 800235c:	6313      	str	r3, [r2, #48]	; 0x30
 800235e:	4b0e      	ldr	r3, [pc, #56]	; (8002398 <HAL_SPI_MspInit+0x88>)
 8002360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002362:	f003 0301 	and.w	r3, r3, #1
 8002366:	60fb      	str	r3, [r7, #12]
 8002368:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800236a:	23e0      	movs	r3, #224	; 0xe0
 800236c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800236e:	2302      	movs	r3, #2
 8002370:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002372:	2300      	movs	r3, #0
 8002374:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002376:	2303      	movs	r3, #3
 8002378:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800237a:	2305      	movs	r3, #5
 800237c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800237e:	f107 0314 	add.w	r3, r7, #20
 8002382:	4619      	mov	r1, r3
 8002384:	4805      	ldr	r0, [pc, #20]	; (800239c <HAL_SPI_MspInit+0x8c>)
 8002386:	f001 fd87 	bl	8003e98 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800238a:	bf00      	nop
 800238c:	3728      	adds	r7, #40	; 0x28
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	40013000 	.word	0x40013000
 8002398:	40023800 	.word	0x40023800
 800239c:	40020000 	.word	0x40020000

080023a0 <ILI9341_SPI_Init>:
  /* USER CODE END SPI1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void ILI9341_SPI_Init(void){
 80023a0:	b580      	push	{r7, lr}
 80023a2:	af00      	add	r7, sp, #0
	  hspi1.Instance = SPI1;
 80023a4:	4b17      	ldr	r3, [pc, #92]	; (8002404 <ILI9341_SPI_Init+0x64>)
 80023a6:	4a18      	ldr	r2, [pc, #96]	; (8002408 <ILI9341_SPI_Init+0x68>)
 80023a8:	601a      	str	r2, [r3, #0]
	  hspi1.Init.Mode = SPI_MODE_MASTER;
 80023aa:	4b16      	ldr	r3, [pc, #88]	; (8002404 <ILI9341_SPI_Init+0x64>)
 80023ac:	f44f 7282 	mov.w	r2, #260	; 0x104
 80023b0:	605a      	str	r2, [r3, #4]
	  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80023b2:	4b14      	ldr	r3, [pc, #80]	; (8002404 <ILI9341_SPI_Init+0x64>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	609a      	str	r2, [r3, #8]
	  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80023b8:	4b12      	ldr	r3, [pc, #72]	; (8002404 <ILI9341_SPI_Init+0x64>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	60da      	str	r2, [r3, #12]
	  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80023be:	4b11      	ldr	r3, [pc, #68]	; (8002404 <ILI9341_SPI_Init+0x64>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	611a      	str	r2, [r3, #16]
	  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80023c4:	4b0f      	ldr	r3, [pc, #60]	; (8002404 <ILI9341_SPI_Init+0x64>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	615a      	str	r2, [r3, #20]
	  hspi1.Init.NSS = SPI_NSS_SOFT;
 80023ca:	4b0e      	ldr	r3, [pc, #56]	; (8002404 <ILI9341_SPI_Init+0x64>)
 80023cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023d0:	619a      	str	r2, [r3, #24]
	  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80023d2:	4b0c      	ldr	r3, [pc, #48]	; (8002404 <ILI9341_SPI_Init+0x64>)
 80023d4:	2218      	movs	r2, #24
 80023d6:	61da      	str	r2, [r3, #28]
	  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80023d8:	4b0a      	ldr	r3, [pc, #40]	; (8002404 <ILI9341_SPI_Init+0x64>)
 80023da:	2200      	movs	r2, #0
 80023dc:	621a      	str	r2, [r3, #32]
	  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80023de:	4b09      	ldr	r3, [pc, #36]	; (8002404 <ILI9341_SPI_Init+0x64>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	625a      	str	r2, [r3, #36]	; 0x24
	  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023e4:	4b07      	ldr	r3, [pc, #28]	; (8002404 <ILI9341_SPI_Init+0x64>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	629a      	str	r2, [r3, #40]	; 0x28
	  hspi1.Init.CRCPolynomial = 10;
 80023ea:	4b06      	ldr	r3, [pc, #24]	; (8002404 <ILI9341_SPI_Init+0x64>)
 80023ec:	220a      	movs	r2, #10
 80023ee:	62da      	str	r2, [r3, #44]	; 0x2c
	  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80023f0:	4804      	ldr	r0, [pc, #16]	; (8002404 <ILI9341_SPI_Init+0x64>)
 80023f2:	f004 fea1 	bl	8007138 <HAL_SPI_Init>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d001      	beq.n	8002400 <ILI9341_SPI_Init+0x60>
	  {
	    Error_Handler();
 80023fc:	f7ff ff4c 	bl	8002298 <Error_Handler>
	  }
}
 8002400:	bf00      	nop
 8002402:	bd80      	pop	{r7, pc}
 8002404:	20000c74 	.word	0x20000c74
 8002408:	40013000 	.word	0x40013000

0800240c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800240c:	b480      	push	{r7}
 800240e:	b083      	sub	sp, #12
 8002410:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002412:	2300      	movs	r3, #0
 8002414:	607b      	str	r3, [r7, #4]
 8002416:	4b10      	ldr	r3, [pc, #64]	; (8002458 <HAL_MspInit+0x4c>)
 8002418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800241a:	4a0f      	ldr	r2, [pc, #60]	; (8002458 <HAL_MspInit+0x4c>)
 800241c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002420:	6453      	str	r3, [r2, #68]	; 0x44
 8002422:	4b0d      	ldr	r3, [pc, #52]	; (8002458 <HAL_MspInit+0x4c>)
 8002424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002426:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800242a:	607b      	str	r3, [r7, #4]
 800242c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800242e:	2300      	movs	r3, #0
 8002430:	603b      	str	r3, [r7, #0]
 8002432:	4b09      	ldr	r3, [pc, #36]	; (8002458 <HAL_MspInit+0x4c>)
 8002434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002436:	4a08      	ldr	r2, [pc, #32]	; (8002458 <HAL_MspInit+0x4c>)
 8002438:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800243c:	6413      	str	r3, [r2, #64]	; 0x40
 800243e:	4b06      	ldr	r3, [pc, #24]	; (8002458 <HAL_MspInit+0x4c>)
 8002440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002442:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002446:	603b      	str	r3, [r7, #0]
 8002448:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800244a:	bf00      	nop
 800244c:	370c      	adds	r7, #12
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr
 8002456:	bf00      	nop
 8002458:	40023800 	.word	0x40023800

0800245c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800245c:	b480      	push	{r7}
 800245e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002460:	e7fe      	b.n	8002460 <NMI_Handler+0x4>

08002462 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002462:	b480      	push	{r7}
 8002464:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002466:	e7fe      	b.n	8002466 <HardFault_Handler+0x4>

08002468 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002468:	b480      	push	{r7}
 800246a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800246c:	e7fe      	b.n	800246c <MemManage_Handler+0x4>

0800246e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800246e:	b480      	push	{r7}
 8002470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002472:	e7fe      	b.n	8002472 <BusFault_Handler+0x4>

08002474 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002474:	b480      	push	{r7}
 8002476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002478:	e7fe      	b.n	8002478 <UsageFault_Handler+0x4>

0800247a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800247a:	b480      	push	{r7}
 800247c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800247e:	bf00      	nop
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr

08002488 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002488:	b480      	push	{r7}
 800248a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800248c:	bf00      	nop
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr

08002496 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002496:	b480      	push	{r7}
 8002498:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800249a:	bf00      	nop
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr

080024a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024a8:	f000 fad8 	bl	8002a5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024ac:	bf00      	nop
 80024ae:	bd80      	pop	{r7, pc}

080024b0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80024b4:	4802      	ldr	r0, [pc, #8]	; (80024c0 <DMA1_Stream0_IRQHandler+0x10>)
 80024b6:	f001 fa79 	bl	80039ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80024ba:	bf00      	nop
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	20000440 	.word	0x20000440

080024c4 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 80024c8:	4802      	ldr	r0, [pc, #8]	; (80024d4 <DMA1_Stream4_IRQHandler+0x10>)
 80024ca:	f001 fa6f 	bl	80039ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80024ce:	bf00      	nop
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	20000d18 	.word	0x20000d18

080024d8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80024dc:	4802      	ldr	r0, [pc, #8]	; (80024e8 <DMA2_Stream0_IRQHandler+0x10>)
 80024de:	f001 fa65 	bl	80039ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80024e2:	bf00      	nop
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	2000038c 	.word	0x2000038c

080024ec <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80024f0:	4802      	ldr	r0, [pc, #8]	; (80024fc <OTG_FS_IRQHandler+0x10>)
 80024f2:	f003 f8b4 	bl	800565e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80024f6:	bf00      	nop
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	200012a0 	.word	0x200012a0

08002500 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b086      	sub	sp, #24
 8002504:	af00      	add	r7, sp, #0
 8002506:	60f8      	str	r0, [r7, #12]
 8002508:	60b9      	str	r1, [r7, #8]
 800250a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800250c:	2300      	movs	r3, #0
 800250e:	617b      	str	r3, [r7, #20]
 8002510:	e00a      	b.n	8002528 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002512:	f3af 8000 	nop.w
 8002516:	4601      	mov	r1, r0
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	1c5a      	adds	r2, r3, #1
 800251c:	60ba      	str	r2, [r7, #8]
 800251e:	b2ca      	uxtb	r2, r1
 8002520:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	3301      	adds	r3, #1
 8002526:	617b      	str	r3, [r7, #20]
 8002528:	697a      	ldr	r2, [r7, #20]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	429a      	cmp	r2, r3
 800252e:	dbf0      	blt.n	8002512 <_read+0x12>
	}

return len;
 8002530:	687b      	ldr	r3, [r7, #4]
}
 8002532:	4618      	mov	r0, r3
 8002534:	3718      	adds	r7, #24
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}

0800253a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800253a:	b580      	push	{r7, lr}
 800253c:	b086      	sub	sp, #24
 800253e:	af00      	add	r7, sp, #0
 8002540:	60f8      	str	r0, [r7, #12]
 8002542:	60b9      	str	r1, [r7, #8]
 8002544:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002546:	2300      	movs	r3, #0
 8002548:	617b      	str	r3, [r7, #20]
 800254a:	e009      	b.n	8002560 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	1c5a      	adds	r2, r3, #1
 8002550:	60ba      	str	r2, [r7, #8]
 8002552:	781b      	ldrb	r3, [r3, #0]
 8002554:	4618      	mov	r0, r3
 8002556:	f7ff fb6f 	bl	8001c38 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	3301      	adds	r3, #1
 800255e:	617b      	str	r3, [r7, #20]
 8002560:	697a      	ldr	r2, [r7, #20]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	429a      	cmp	r2, r3
 8002566:	dbf1      	blt.n	800254c <_write+0x12>
	}
	return len;
 8002568:	687b      	ldr	r3, [r7, #4]
}
 800256a:	4618      	mov	r0, r3
 800256c:	3718      	adds	r7, #24
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}

08002572 <_close>:

int _close(int file)
{
 8002572:	b480      	push	{r7}
 8002574:	b083      	sub	sp, #12
 8002576:	af00      	add	r7, sp, #0
 8002578:	6078      	str	r0, [r7, #4]
	return -1;
 800257a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800257e:	4618      	mov	r0, r3
 8002580:	370c      	adds	r7, #12
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr

0800258a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800258a:	b480      	push	{r7}
 800258c:	b083      	sub	sp, #12
 800258e:	af00      	add	r7, sp, #0
 8002590:	6078      	str	r0, [r7, #4]
 8002592:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800259a:	605a      	str	r2, [r3, #4]
	return 0;
 800259c:	2300      	movs	r3, #0
}
 800259e:	4618      	mov	r0, r3
 80025a0:	370c      	adds	r7, #12
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr

080025aa <_isatty>:

int _isatty(int file)
{
 80025aa:	b480      	push	{r7}
 80025ac:	b083      	sub	sp, #12
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	6078      	str	r0, [r7, #4]
	return 1;
 80025b2:	2301      	movs	r3, #1
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	370c      	adds	r7, #12
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr

080025c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b085      	sub	sp, #20
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	60f8      	str	r0, [r7, #12]
 80025c8:	60b9      	str	r1, [r7, #8]
 80025ca:	607a      	str	r2, [r7, #4]
	return 0;
 80025cc:	2300      	movs	r3, #0
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3714      	adds	r7, #20
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr
	...

080025dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b086      	sub	sp, #24
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025e4:	4a14      	ldr	r2, [pc, #80]	; (8002638 <_sbrk+0x5c>)
 80025e6:	4b15      	ldr	r3, [pc, #84]	; (800263c <_sbrk+0x60>)
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025f0:	4b13      	ldr	r3, [pc, #76]	; (8002640 <_sbrk+0x64>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d102      	bne.n	80025fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025f8:	4b11      	ldr	r3, [pc, #68]	; (8002640 <_sbrk+0x64>)
 80025fa:	4a12      	ldr	r2, [pc, #72]	; (8002644 <_sbrk+0x68>)
 80025fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025fe:	4b10      	ldr	r3, [pc, #64]	; (8002640 <_sbrk+0x64>)
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	4413      	add	r3, r2
 8002606:	693a      	ldr	r2, [r7, #16]
 8002608:	429a      	cmp	r2, r3
 800260a:	d207      	bcs.n	800261c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800260c:	f00a ff02 	bl	800d414 <__errno>
 8002610:	4603      	mov	r3, r0
 8002612:	220c      	movs	r2, #12
 8002614:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002616:	f04f 33ff 	mov.w	r3, #4294967295
 800261a:	e009      	b.n	8002630 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800261c:	4b08      	ldr	r3, [pc, #32]	; (8002640 <_sbrk+0x64>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002622:	4b07      	ldr	r3, [pc, #28]	; (8002640 <_sbrk+0x64>)
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4413      	add	r3, r2
 800262a:	4a05      	ldr	r2, [pc, #20]	; (8002640 <_sbrk+0x64>)
 800262c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800262e:	68fb      	ldr	r3, [r7, #12]
}
 8002630:	4618      	mov	r0, r3
 8002632:	3718      	adds	r7, #24
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}
 8002638:	20020000 	.word	0x20020000
 800263c:	00000400 	.word	0x00000400
 8002640:	20000ccc 	.word	0x20000ccc
 8002644:	200017d8 	.word	0x200017d8

08002648 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002648:	b480      	push	{r7}
 800264a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800264c:	4b06      	ldr	r3, [pc, #24]	; (8002668 <SystemInit+0x20>)
 800264e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002652:	4a05      	ldr	r2, [pc, #20]	; (8002668 <SystemInit+0x20>)
 8002654:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002658:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800265c:	bf00      	nop
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr
 8002666:	bf00      	nop
 8002668:	e000ed00 	.word	0xe000ed00

0800266c <HAL_TIM_Base_MspInit>:
  HAL_TIM_MspPostInit(&htim3);

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b084      	sub	sp, #16
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a25      	ldr	r2, [pc, #148]	; (8002710 <HAL_TIM_Base_MspInit+0xa4>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d144      	bne.n	8002708 <HAL_TIM_Base_MspInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800267e:	2300      	movs	r3, #0
 8002680:	60fb      	str	r3, [r7, #12]
 8002682:	4b24      	ldr	r3, [pc, #144]	; (8002714 <HAL_TIM_Base_MspInit+0xa8>)
 8002684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002686:	4a23      	ldr	r2, [pc, #140]	; (8002714 <HAL_TIM_Base_MspInit+0xa8>)
 8002688:	f043 0302 	orr.w	r3, r3, #2
 800268c:	6413      	str	r3, [r2, #64]	; 0x40
 800268e:	4b21      	ldr	r3, [pc, #132]	; (8002714 <HAL_TIM_Base_MspInit+0xa8>)
 8002690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002692:	f003 0302 	and.w	r3, r3, #2
 8002696:	60fb      	str	r3, [r7, #12]
 8002698:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH1_TRIG Init */
    hdma_tim3_ch1_trig.Instance = DMA1_Stream4;
 800269a:	4b1f      	ldr	r3, [pc, #124]	; (8002718 <HAL_TIM_Base_MspInit+0xac>)
 800269c:	4a1f      	ldr	r2, [pc, #124]	; (800271c <HAL_TIM_Base_MspInit+0xb0>)
 800269e:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Channel = DMA_CHANNEL_5;
 80026a0:	4b1d      	ldr	r3, [pc, #116]	; (8002718 <HAL_TIM_Base_MspInit+0xac>)
 80026a2:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80026a6:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80026a8:	4b1b      	ldr	r3, [pc, #108]	; (8002718 <HAL_TIM_Base_MspInit+0xac>)
 80026aa:	2240      	movs	r2, #64	; 0x40
 80026ac:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 80026ae:	4b1a      	ldr	r3, [pc, #104]	; (8002718 <HAL_TIM_Base_MspInit+0xac>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 80026b4:	4b18      	ldr	r3, [pc, #96]	; (8002718 <HAL_TIM_Base_MspInit+0xac>)
 80026b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80026ba:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80026bc:	4b16      	ldr	r3, [pc, #88]	; (8002718 <HAL_TIM_Base_MspInit+0xac>)
 80026be:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80026c2:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80026c4:	4b14      	ldr	r3, [pc, #80]	; (8002718 <HAL_TIM_Base_MspInit+0xac>)
 80026c6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80026ca:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Mode = DMA_CIRCULAR;
 80026cc:	4b12      	ldr	r3, [pc, #72]	; (8002718 <HAL_TIM_Base_MspInit+0xac>)
 80026ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80026d2:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_LOW;
 80026d4:	4b10      	ldr	r3, [pc, #64]	; (8002718 <HAL_TIM_Base_MspInit+0xac>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1_trig.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80026da:	4b0f      	ldr	r3, [pc, #60]	; (8002718 <HAL_TIM_Base_MspInit+0xac>)
 80026dc:	2200      	movs	r2, #0
 80026de:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 80026e0:	480d      	ldr	r0, [pc, #52]	; (8002718 <HAL_TIM_Base_MspInit+0xac>)
 80026e2:	f000 ffcb 	bl	800367c <HAL_DMA_Init>
 80026e6:	4603      	mov	r3, r0
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d001      	beq.n	80026f0 <HAL_TIM_Base_MspInit+0x84>
    {
      Error_Handler();
 80026ec:	f7ff fdd4 	bl	8002298 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	4a09      	ldr	r2, [pc, #36]	; (8002718 <HAL_TIM_Base_MspInit+0xac>)
 80026f4:	625a      	str	r2, [r3, #36]	; 0x24
 80026f6:	4a08      	ldr	r2, [pc, #32]	; (8002718 <HAL_TIM_Base_MspInit+0xac>)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	4a06      	ldr	r2, [pc, #24]	; (8002718 <HAL_TIM_Base_MspInit+0xac>)
 8002700:	639a      	str	r2, [r3, #56]	; 0x38
 8002702:	4a05      	ldr	r2, [pc, #20]	; (8002718 <HAL_TIM_Base_MspInit+0xac>)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002708:	bf00      	nop
 800270a:	3710      	adds	r7, #16
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}
 8002710:	40000400 	.word	0x40000400
 8002714:	40023800 	.word	0x40023800
 8002718:	20000d18 	.word	0x20000d18
 800271c:	40026070 	.word	0x40026070

08002720 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b088      	sub	sp, #32
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002728:	f107 030c 	add.w	r3, r7, #12
 800272c:	2200      	movs	r2, #0
 800272e:	601a      	str	r2, [r3, #0]
 8002730:	605a      	str	r2, [r3, #4]
 8002732:	609a      	str	r2, [r3, #8]
 8002734:	60da      	str	r2, [r3, #12]
 8002736:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a12      	ldr	r2, [pc, #72]	; (8002788 <HAL_TIM_MspPostInit+0x68>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d11d      	bne.n	800277e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002742:	2300      	movs	r3, #0
 8002744:	60bb      	str	r3, [r7, #8]
 8002746:	4b11      	ldr	r3, [pc, #68]	; (800278c <HAL_TIM_MspPostInit+0x6c>)
 8002748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274a:	4a10      	ldr	r2, [pc, #64]	; (800278c <HAL_TIM_MspPostInit+0x6c>)
 800274c:	f043 0302 	orr.w	r3, r3, #2
 8002750:	6313      	str	r3, [r2, #48]	; 0x30
 8002752:	4b0e      	ldr	r3, [pc, #56]	; (800278c <HAL_TIM_MspPostInit+0x6c>)
 8002754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002756:	f003 0302 	and.w	r3, r3, #2
 800275a:	60bb      	str	r3, [r7, #8]
 800275c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800275e:	2310      	movs	r3, #16
 8002760:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002762:	2302      	movs	r3, #2
 8002764:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002766:	2300      	movs	r3, #0
 8002768:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800276a:	2300      	movs	r3, #0
 800276c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800276e:	2302      	movs	r3, #2
 8002770:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002772:	f107 030c 	add.w	r3, r7, #12
 8002776:	4619      	mov	r1, r3
 8002778:	4805      	ldr	r0, [pc, #20]	; (8002790 <HAL_TIM_MspPostInit+0x70>)
 800277a:	f001 fb8d 	bl	8003e98 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800277e:	bf00      	nop
 8002780:	3720      	adds	r7, #32
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	40000400 	.word	0x40000400
 800278c:	40023800 	.word	0x40023800
 8002790:	40020400 	.word	0x40020400

08002794 <TIM3_Init>:
  /* USER CODE END TIM3_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void TIM3_Init(void){
 8002794:	b580      	push	{r7, lr}
 8002796:	b08e      	sub	sp, #56	; 0x38
 8002798:	af00      	add	r7, sp, #0

	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800279a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800279e:	2200      	movs	r2, #0
 80027a0:	601a      	str	r2, [r3, #0]
 80027a2:	605a      	str	r2, [r3, #4]
 80027a4:	609a      	str	r2, [r3, #8]
 80027a6:	60da      	str	r2, [r3, #12]
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027a8:	f107 0320 	add.w	r3, r7, #32
 80027ac:	2200      	movs	r2, #0
 80027ae:	601a      	str	r2, [r3, #0]
 80027b0:	605a      	str	r2, [r3, #4]
	  TIM_OC_InitTypeDef sConfigOC = {0};
 80027b2:	1d3b      	adds	r3, r7, #4
 80027b4:	2200      	movs	r2, #0
 80027b6:	601a      	str	r2, [r3, #0]
 80027b8:	605a      	str	r2, [r3, #4]
 80027ba:	609a      	str	r2, [r3, #8]
 80027bc:	60da      	str	r2, [r3, #12]
 80027be:	611a      	str	r2, [r3, #16]
 80027c0:	615a      	str	r2, [r3, #20]
 80027c2:	619a      	str	r2, [r3, #24]


	  htim3.Instance = TIM3;
 80027c4:	4b2c      	ldr	r3, [pc, #176]	; (8002878 <TIM3_Init+0xe4>)
 80027c6:	4a2d      	ldr	r2, [pc, #180]	; (800287c <TIM3_Init+0xe8>)
 80027c8:	601a      	str	r2, [r3, #0]
	  htim3.Init.Prescaler = 0;
 80027ca:	4b2b      	ldr	r3, [pc, #172]	; (8002878 <TIM3_Init+0xe4>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	605a      	str	r2, [r3, #4]
	  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027d0:	4b29      	ldr	r3, [pc, #164]	; (8002878 <TIM3_Init+0xe4>)
 80027d2:	2200      	movs	r2, #0
 80027d4:	609a      	str	r2, [r3, #8]
	  htim3.Init.Period = 120 - 1;
 80027d6:	4b28      	ldr	r3, [pc, #160]	; (8002878 <TIM3_Init+0xe4>)
 80027d8:	2277      	movs	r2, #119	; 0x77
 80027da:	60da      	str	r2, [r3, #12]
	  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027dc:	4b26      	ldr	r3, [pc, #152]	; (8002878 <TIM3_Init+0xe4>)
 80027de:	2200      	movs	r2, #0
 80027e0:	611a      	str	r2, [r3, #16]
	  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027e2:	4b25      	ldr	r3, [pc, #148]	; (8002878 <TIM3_Init+0xe4>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	619a      	str	r2, [r3, #24]
	  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80027e8:	4823      	ldr	r0, [pc, #140]	; (8002878 <TIM3_Init+0xe4>)
 80027ea:	f005 fa4d 	bl	8007c88 <HAL_TIM_Base_Init>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d001      	beq.n	80027f8 <TIM3_Init+0x64>
	  {
	    Error_Handler();
 80027f4:	f7ff fd50 	bl	8002298 <Error_Handler>
	  }
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027fc:	62bb      	str	r3, [r7, #40]	; 0x28
	  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80027fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002802:	4619      	mov	r1, r3
 8002804:	481c      	ldr	r0, [pc, #112]	; (8002878 <TIM3_Init+0xe4>)
 8002806:	f005 fe1f 	bl	8008448 <HAL_TIM_ConfigClockSource>
 800280a:	4603      	mov	r3, r0
 800280c:	2b00      	cmp	r3, #0
 800280e:	d001      	beq.n	8002814 <TIM3_Init+0x80>
	  {
	    Error_Handler();
 8002810:	f7ff fd42 	bl	8002298 <Error_Handler>
	  }
	  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002814:	4818      	ldr	r0, [pc, #96]	; (8002878 <TIM3_Init+0xe4>)
 8002816:	f005 fa86 	bl	8007d26 <HAL_TIM_PWM_Init>
 800281a:	4603      	mov	r3, r0
 800281c:	2b00      	cmp	r3, #0
 800281e:	d001      	beq.n	8002824 <TIM3_Init+0x90>
	  {
	    Error_Handler();
 8002820:	f7ff fd3a 	bl	8002298 <Error_Handler>
	  }
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002824:	2300      	movs	r3, #0
 8002826:	623b      	str	r3, [r7, #32]
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002828:	2300      	movs	r3, #0
 800282a:	627b      	str	r3, [r7, #36]	; 0x24
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800282c:	f107 0320 	add.w	r3, r7, #32
 8002830:	4619      	mov	r1, r3
 8002832:	4811      	ldr	r0, [pc, #68]	; (8002878 <TIM3_Init+0xe4>)
 8002834:	f006 fa8a 	bl	8008d4c <HAL_TIMEx_MasterConfigSynchronization>
 8002838:	4603      	mov	r3, r0
 800283a:	2b00      	cmp	r3, #0
 800283c:	d001      	beq.n	8002842 <TIM3_Init+0xae>
	  {
	    Error_Handler();
 800283e:	f7ff fd2b 	bl	8002298 <Error_Handler>
	  }
	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002842:	2360      	movs	r3, #96	; 0x60
 8002844:	607b      	str	r3, [r7, #4]
	  sConfigOC.Pulse = 0;
 8002846:	2300      	movs	r3, #0
 8002848:	60bb      	str	r3, [r7, #8]
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800284a:	2300      	movs	r3, #0
 800284c:	60fb      	str	r3, [r7, #12]
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800284e:	2300      	movs	r3, #0
 8002850:	617b      	str	r3, [r7, #20]
	  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002852:	1d3b      	adds	r3, r7, #4
 8002854:	2200      	movs	r2, #0
 8002856:	4619      	mov	r1, r3
 8002858:	4807      	ldr	r0, [pc, #28]	; (8002878 <TIM3_Init+0xe4>)
 800285a:	f005 fd33 	bl	80082c4 <HAL_TIM_PWM_ConfigChannel>
 800285e:	4603      	mov	r3, r0
 8002860:	2b00      	cmp	r3, #0
 8002862:	d001      	beq.n	8002868 <TIM3_Init+0xd4>
	  {
	    Error_Handler();
 8002864:	f7ff fd18 	bl	8002298 <Error_Handler>
	  }

	  HAL_TIM_MspPostInit(&htim3);
 8002868:	4803      	ldr	r0, [pc, #12]	; (8002878 <TIM3_Init+0xe4>)
 800286a:	f7ff ff59 	bl	8002720 <HAL_TIM_MspPostInit>
}
 800286e:	bf00      	nop
 8002870:	3738      	adds	r7, #56	; 0x38
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	20000cd0 	.word	0x20000cd0
 800287c:	40000400 	.word	0x40000400

08002880 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002884:	4b11      	ldr	r3, [pc, #68]	; (80028cc <MX_USART1_UART_Init+0x4c>)
 8002886:	4a12      	ldr	r2, [pc, #72]	; (80028d0 <MX_USART1_UART_Init+0x50>)
 8002888:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800288a:	4b10      	ldr	r3, [pc, #64]	; (80028cc <MX_USART1_UART_Init+0x4c>)
 800288c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002890:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002892:	4b0e      	ldr	r3, [pc, #56]	; (80028cc <MX_USART1_UART_Init+0x4c>)
 8002894:	2200      	movs	r2, #0
 8002896:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002898:	4b0c      	ldr	r3, [pc, #48]	; (80028cc <MX_USART1_UART_Init+0x4c>)
 800289a:	2200      	movs	r2, #0
 800289c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800289e:	4b0b      	ldr	r3, [pc, #44]	; (80028cc <MX_USART1_UART_Init+0x4c>)
 80028a0:	2200      	movs	r2, #0
 80028a2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80028a4:	4b09      	ldr	r3, [pc, #36]	; (80028cc <MX_USART1_UART_Init+0x4c>)
 80028a6:	220c      	movs	r2, #12
 80028a8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028aa:	4b08      	ldr	r3, [pc, #32]	; (80028cc <MX_USART1_UART_Init+0x4c>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80028b0:	4b06      	ldr	r3, [pc, #24]	; (80028cc <MX_USART1_UART_Init+0x4c>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80028b6:	4805      	ldr	r0, [pc, #20]	; (80028cc <MX_USART1_UART_Init+0x4c>)
 80028b8:	f006 fab6 	bl	8008e28 <HAL_UART_Init>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d001      	beq.n	80028c6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80028c2:	f7ff fce9 	bl	8002298 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80028c6:	bf00      	nop
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	20000d78 	.word	0x20000d78
 80028d0:	40011000 	.word	0x40011000

080028d4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b08a      	sub	sp, #40	; 0x28
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028dc:	f107 0314 	add.w	r3, r7, #20
 80028e0:	2200      	movs	r2, #0
 80028e2:	601a      	str	r2, [r3, #0]
 80028e4:	605a      	str	r2, [r3, #4]
 80028e6:	609a      	str	r2, [r3, #8]
 80028e8:	60da      	str	r2, [r3, #12]
 80028ea:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a19      	ldr	r2, [pc, #100]	; (8002958 <HAL_UART_MspInit+0x84>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d12c      	bne.n	8002950 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80028f6:	2300      	movs	r3, #0
 80028f8:	613b      	str	r3, [r7, #16]
 80028fa:	4b18      	ldr	r3, [pc, #96]	; (800295c <HAL_UART_MspInit+0x88>)
 80028fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028fe:	4a17      	ldr	r2, [pc, #92]	; (800295c <HAL_UART_MspInit+0x88>)
 8002900:	f043 0310 	orr.w	r3, r3, #16
 8002904:	6453      	str	r3, [r2, #68]	; 0x44
 8002906:	4b15      	ldr	r3, [pc, #84]	; (800295c <HAL_UART_MspInit+0x88>)
 8002908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800290a:	f003 0310 	and.w	r3, r3, #16
 800290e:	613b      	str	r3, [r7, #16]
 8002910:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002912:	2300      	movs	r3, #0
 8002914:	60fb      	str	r3, [r7, #12]
 8002916:	4b11      	ldr	r3, [pc, #68]	; (800295c <HAL_UART_MspInit+0x88>)
 8002918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800291a:	4a10      	ldr	r2, [pc, #64]	; (800295c <HAL_UART_MspInit+0x88>)
 800291c:	f043 0301 	orr.w	r3, r3, #1
 8002920:	6313      	str	r3, [r2, #48]	; 0x30
 8002922:	4b0e      	ldr	r3, [pc, #56]	; (800295c <HAL_UART_MspInit+0x88>)
 8002924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002926:	f003 0301 	and.w	r3, r3, #1
 800292a:	60fb      	str	r3, [r7, #12]
 800292c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800292e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002932:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002934:	2302      	movs	r3, #2
 8002936:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002938:	2300      	movs	r3, #0
 800293a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800293c:	2303      	movs	r3, #3
 800293e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002940:	2307      	movs	r3, #7
 8002942:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002944:	f107 0314 	add.w	r3, r7, #20
 8002948:	4619      	mov	r1, r3
 800294a:	4805      	ldr	r0, [pc, #20]	; (8002960 <HAL_UART_MspInit+0x8c>)
 800294c:	f001 faa4 	bl	8003e98 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002950:	bf00      	nop
 8002952:	3728      	adds	r7, #40	; 0x28
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}
 8002958:	40011000 	.word	0x40011000
 800295c:	40023800 	.word	0x40023800
 8002960:	40020000 	.word	0x40020000

08002964 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002964:	f8df d034 	ldr.w	sp, [pc, #52]	; 800299c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002968:	480d      	ldr	r0, [pc, #52]	; (80029a0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800296a:	490e      	ldr	r1, [pc, #56]	; (80029a4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800296c:	4a0e      	ldr	r2, [pc, #56]	; (80029a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800296e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002970:	e002      	b.n	8002978 <LoopCopyDataInit>

08002972 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002972:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002974:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002976:	3304      	adds	r3, #4

08002978 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002978:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800297a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800297c:	d3f9      	bcc.n	8002972 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800297e:	4a0b      	ldr	r2, [pc, #44]	; (80029ac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002980:	4c0b      	ldr	r4, [pc, #44]	; (80029b0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002982:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002984:	e001      	b.n	800298a <LoopFillZerobss>

08002986 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002986:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002988:	3204      	adds	r2, #4

0800298a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800298a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800298c:	d3fb      	bcc.n	8002986 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800298e:	f7ff fe5b 	bl	8002648 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002992:	f00a fd45 	bl	800d420 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002996:	f7ff f9bf 	bl	8001d18 <main>
  bx  lr    
 800299a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800299c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80029a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029a4:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 80029a8:	08030658 	.word	0x08030658
  ldr r2, =_sbss
 80029ac:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 80029b0:	200017d8 	.word	0x200017d8

080029b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80029b4:	e7fe      	b.n	80029b4 <ADC_IRQHandler>
	...

080029b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80029bc:	4b0e      	ldr	r3, [pc, #56]	; (80029f8 <HAL_Init+0x40>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a0d      	ldr	r2, [pc, #52]	; (80029f8 <HAL_Init+0x40>)
 80029c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80029c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80029c8:	4b0b      	ldr	r3, [pc, #44]	; (80029f8 <HAL_Init+0x40>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a0a      	ldr	r2, [pc, #40]	; (80029f8 <HAL_Init+0x40>)
 80029ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80029d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80029d4:	4b08      	ldr	r3, [pc, #32]	; (80029f8 <HAL_Init+0x40>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a07      	ldr	r2, [pc, #28]	; (80029f8 <HAL_Init+0x40>)
 80029da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029e0:	2003      	movs	r0, #3
 80029e2:	f000 fded 	bl	80035c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80029e6:	200f      	movs	r0, #15
 80029e8:	f000 f808 	bl	80029fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80029ec:	f7ff fd0e 	bl	800240c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029f0:	2300      	movs	r3, #0
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	40023c00 	.word	0x40023c00

080029fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b082      	sub	sp, #8
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a04:	4b12      	ldr	r3, [pc, #72]	; (8002a50 <HAL_InitTick+0x54>)
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	4b12      	ldr	r3, [pc, #72]	; (8002a54 <HAL_InitTick+0x58>)
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	4619      	mov	r1, r3
 8002a0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a12:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a16:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f000 fe13 	bl	8003646 <HAL_SYSTICK_Config>
 8002a20:	4603      	mov	r3, r0
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d001      	beq.n	8002a2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e00e      	b.n	8002a48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2b0f      	cmp	r3, #15
 8002a2e:	d80a      	bhi.n	8002a46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a30:	2200      	movs	r2, #0
 8002a32:	6879      	ldr	r1, [r7, #4]
 8002a34:	f04f 30ff 	mov.w	r0, #4294967295
 8002a38:	f000 fdcd 	bl	80035d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a3c:	4a06      	ldr	r2, [pc, #24]	; (8002a58 <HAL_InitTick+0x5c>)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a42:	2300      	movs	r3, #0
 8002a44:	e000      	b.n	8002a48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3708      	adds	r7, #8
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	20000030 	.word	0x20000030
 8002a54:	20000038 	.word	0x20000038
 8002a58:	20000034 	.word	0x20000034

08002a5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a60:	4b06      	ldr	r3, [pc, #24]	; (8002a7c <HAL_IncTick+0x20>)
 8002a62:	781b      	ldrb	r3, [r3, #0]
 8002a64:	461a      	mov	r2, r3
 8002a66:	4b06      	ldr	r3, [pc, #24]	; (8002a80 <HAL_IncTick+0x24>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4413      	add	r3, r2
 8002a6c:	4a04      	ldr	r2, [pc, #16]	; (8002a80 <HAL_IncTick+0x24>)
 8002a6e:	6013      	str	r3, [r2, #0]
}
 8002a70:	bf00      	nop
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr
 8002a7a:	bf00      	nop
 8002a7c:	20000038 	.word	0x20000038
 8002a80:	20000dbc 	.word	0x20000dbc

08002a84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a84:	b480      	push	{r7}
 8002a86:	af00      	add	r7, sp, #0
  return uwTick;
 8002a88:	4b03      	ldr	r3, [pc, #12]	; (8002a98 <HAL_GetTick+0x14>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr
 8002a96:	bf00      	nop
 8002a98:	20000dbc 	.word	0x20000dbc

08002a9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b084      	sub	sp, #16
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002aa4:	f7ff ffee 	bl	8002a84 <HAL_GetTick>
 8002aa8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ab4:	d005      	beq.n	8002ac2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ab6:	4b0a      	ldr	r3, [pc, #40]	; (8002ae0 <HAL_Delay+0x44>)
 8002ab8:	781b      	ldrb	r3, [r3, #0]
 8002aba:	461a      	mov	r2, r3
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	4413      	add	r3, r2
 8002ac0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002ac2:	bf00      	nop
 8002ac4:	f7ff ffde 	bl	8002a84 <HAL_GetTick>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	68fa      	ldr	r2, [r7, #12]
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d8f7      	bhi.n	8002ac4 <HAL_Delay+0x28>
  {
  }
}
 8002ad4:	bf00      	nop
 8002ad6:	bf00      	nop
 8002ad8:	3710      	adds	r7, #16
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	20000038 	.word	0x20000038

08002ae4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b084      	sub	sp, #16
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002aec:	2300      	movs	r3, #0
 8002aee:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d101      	bne.n	8002afa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e033      	b.n	8002b62 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d109      	bne.n	8002b16 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f7fe fdd6 	bl	80016b4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2200      	movs	r2, #0
 8002b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1a:	f003 0310 	and.w	r3, r3, #16
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d118      	bne.n	8002b54 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b26:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002b2a:	f023 0302 	bic.w	r3, r3, #2
 8002b2e:	f043 0202 	orr.w	r2, r3, #2
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	f000 fab2 	bl	80030a0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b46:	f023 0303 	bic.w	r3, r3, #3
 8002b4a:	f043 0201 	orr.w	r2, r3, #1
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	641a      	str	r2, [r3, #64]	; 0x40
 8002b52:	e001      	b.n	8002b58 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002b60:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	3710      	adds	r7, #16
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}
	...

08002b6c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b086      	sub	sp, #24
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	60f8      	str	r0, [r7, #12]
 8002b74:	60b9      	str	r1, [r7, #8]
 8002b76:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d101      	bne.n	8002b8a <HAL_ADC_Start_DMA+0x1e>
 8002b86:	2302      	movs	r3, #2
 8002b88:	e0ce      	b.n	8002d28 <HAL_ADC_Start_DMA+0x1bc>
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	f003 0301 	and.w	r3, r3, #1
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d018      	beq.n	8002bd2 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	689a      	ldr	r2, [r3, #8]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f042 0201 	orr.w	r2, r2, #1
 8002bae:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002bb0:	4b5f      	ldr	r3, [pc, #380]	; (8002d30 <HAL_ADC_Start_DMA+0x1c4>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a5f      	ldr	r2, [pc, #380]	; (8002d34 <HAL_ADC_Start_DMA+0x1c8>)
 8002bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8002bba:	0c9a      	lsrs	r2, r3, #18
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	005b      	lsls	r3, r3, #1
 8002bc0:	4413      	add	r3, r2
 8002bc2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002bc4:	e002      	b.n	8002bcc <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	3b01      	subs	r3, #1
 8002bca:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d1f9      	bne.n	8002bc6 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bdc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002be0:	d107      	bne.n	8002bf2 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	689a      	ldr	r2, [r3, #8]
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002bf0:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	f003 0301 	and.w	r3, r3, #1
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	f040 8086 	bne.w	8002d0e <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c06:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002c0a:	f023 0301 	bic.w	r3, r3, #1
 8002c0e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d007      	beq.n	8002c34 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c28:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002c2c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c38:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c40:	d106      	bne.n	8002c50 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c46:	f023 0206 	bic.w	r2, r3, #6
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	645a      	str	r2, [r3, #68]	; 0x44
 8002c4e:	e002      	b.n	8002c56 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2200      	movs	r2, #0
 8002c54:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c5e:	4b36      	ldr	r3, [pc, #216]	; (8002d38 <HAL_ADC_Start_DMA+0x1cc>)
 8002c60:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c66:	4a35      	ldr	r2, [pc, #212]	; (8002d3c <HAL_ADC_Start_DMA+0x1d0>)
 8002c68:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c6e:	4a34      	ldr	r2, [pc, #208]	; (8002d40 <HAL_ADC_Start_DMA+0x1d4>)
 8002c70:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c76:	4a33      	ldr	r2, [pc, #204]	; (8002d44 <HAL_ADC_Start_DMA+0x1d8>)
 8002c78:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002c82:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	685a      	ldr	r2, [r3, #4]
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002c92:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	689a      	ldr	r2, [r3, #8]
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ca2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	334c      	adds	r3, #76	; 0x4c
 8002cae:	4619      	mov	r1, r3
 8002cb0:	68ba      	ldr	r2, [r7, #8]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	f000 fd90 	bl	80037d8 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	f003 031f 	and.w	r3, r3, #31
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d10f      	bne.n	8002ce4 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d129      	bne.n	8002d26 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	689a      	ldr	r2, [r3, #8]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002ce0:	609a      	str	r2, [r3, #8]
 8002ce2:	e020      	b.n	8002d26 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a17      	ldr	r2, [pc, #92]	; (8002d48 <HAL_ADC_Start_DMA+0x1dc>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d11b      	bne.n	8002d26 <HAL_ADC_Start_DMA+0x1ba>
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d114      	bne.n	8002d26 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	689a      	ldr	r2, [r3, #8]
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002d0a:	609a      	str	r2, [r3, #8]
 8002d0c:	e00b      	b.n	8002d26 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d12:	f043 0210 	orr.w	r2, r3, #16
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d1e:	f043 0201 	orr.w	r2, r3, #1
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002d26:	2300      	movs	r3, #0
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3718      	adds	r7, #24
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}
 8002d30:	20000030 	.word	0x20000030
 8002d34:	431bde83 	.word	0x431bde83
 8002d38:	40012300 	.word	0x40012300
 8002d3c:	08003299 	.word	0x08003299
 8002d40:	08003353 	.word	0x08003353
 8002d44:	0800336f 	.word	0x0800336f
 8002d48:	40012000 	.word	0x40012000

08002d4c <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b084      	sub	sp, #16
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d54:	2300      	movs	r3, #0
 8002d56:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d101      	bne.n	8002d66 <HAL_ADC_Stop_DMA+0x1a>
 8002d62:	2302      	movs	r3, #2
 8002d64:	e048      	b.n	8002df8 <HAL_ADC_Stop_DMA+0xac>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2201      	movs	r2, #1
 8002d6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	689a      	ldr	r2, [r3, #8]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f022 0201 	bic.w	r2, r2, #1
 8002d7c:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	f003 0301 	and.w	r3, r3, #1
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d130      	bne.n	8002dee <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	689a      	ldr	r2, [r3, #8]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d9a:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002da0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	2b02      	cmp	r3, #2
 8002da8:	d10f      	bne.n	8002dca <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dae:	4618      	mov	r0, r3
 8002db0:	f000 fd6a 	bl	8003888 <HAL_DMA_Abort>
 8002db4:	4603      	mov	r3, r0
 8002db6:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8002db8:	7bfb      	ldrb	r3, [r7, #15]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d005      	beq.n	8002dca <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	685a      	ldr	r2, [r3, #4]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8002dd8:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dde:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002de2:	f023 0301 	bic.w	r3, r3, #1
 8002de6:	f043 0201 	orr.w	r2, r3, #1
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2200      	movs	r2, #0
 8002df2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002df6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	3710      	adds	r7, #16
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}

08002e00 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b083      	sub	sp, #12
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002e08:	bf00      	nop
 8002e0a:	370c      	adds	r7, #12
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr

08002e14 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b083      	sub	sp, #12
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002e1c:	bf00      	nop
 8002e1e:	370c      	adds	r7, #12
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr

08002e28 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b083      	sub	sp, #12
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002e30:	bf00      	nop
 8002e32:	370c      	adds	r7, #12
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr

08002e3c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b085      	sub	sp, #20
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
 8002e44:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002e46:	2300      	movs	r3, #0
 8002e48:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d101      	bne.n	8002e58 <HAL_ADC_ConfigChannel+0x1c>
 8002e54:	2302      	movs	r3, #2
 8002e56:	e113      	b.n	8003080 <HAL_ADC_ConfigChannel+0x244>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	2b09      	cmp	r3, #9
 8002e66:	d925      	bls.n	8002eb4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	68d9      	ldr	r1, [r3, #12]
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	b29b      	uxth	r3, r3
 8002e74:	461a      	mov	r2, r3
 8002e76:	4613      	mov	r3, r2
 8002e78:	005b      	lsls	r3, r3, #1
 8002e7a:	4413      	add	r3, r2
 8002e7c:	3b1e      	subs	r3, #30
 8002e7e:	2207      	movs	r2, #7
 8002e80:	fa02 f303 	lsl.w	r3, r2, r3
 8002e84:	43da      	mvns	r2, r3
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	400a      	ands	r2, r1
 8002e8c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	68d9      	ldr	r1, [r3, #12]
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	689a      	ldr	r2, [r3, #8]
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	b29b      	uxth	r3, r3
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	005b      	lsls	r3, r3, #1
 8002ea4:	4403      	add	r3, r0
 8002ea6:	3b1e      	subs	r3, #30
 8002ea8:	409a      	lsls	r2, r3
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	430a      	orrs	r2, r1
 8002eb0:	60da      	str	r2, [r3, #12]
 8002eb2:	e022      	b.n	8002efa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	6919      	ldr	r1, [r3, #16]
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	b29b      	uxth	r3, r3
 8002ec0:	461a      	mov	r2, r3
 8002ec2:	4613      	mov	r3, r2
 8002ec4:	005b      	lsls	r3, r3, #1
 8002ec6:	4413      	add	r3, r2
 8002ec8:	2207      	movs	r2, #7
 8002eca:	fa02 f303 	lsl.w	r3, r2, r3
 8002ece:	43da      	mvns	r2, r3
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	400a      	ands	r2, r1
 8002ed6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	6919      	ldr	r1, [r3, #16]
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	689a      	ldr	r2, [r3, #8]
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	b29b      	uxth	r3, r3
 8002ee8:	4618      	mov	r0, r3
 8002eea:	4603      	mov	r3, r0
 8002eec:	005b      	lsls	r3, r3, #1
 8002eee:	4403      	add	r3, r0
 8002ef0:	409a      	lsls	r2, r3
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	430a      	orrs	r2, r1
 8002ef8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	2b06      	cmp	r3, #6
 8002f00:	d824      	bhi.n	8002f4c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	685a      	ldr	r2, [r3, #4]
 8002f0c:	4613      	mov	r3, r2
 8002f0e:	009b      	lsls	r3, r3, #2
 8002f10:	4413      	add	r3, r2
 8002f12:	3b05      	subs	r3, #5
 8002f14:	221f      	movs	r2, #31
 8002f16:	fa02 f303 	lsl.w	r3, r2, r3
 8002f1a:	43da      	mvns	r2, r3
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	400a      	ands	r2, r1
 8002f22:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	b29b      	uxth	r3, r3
 8002f30:	4618      	mov	r0, r3
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	685a      	ldr	r2, [r3, #4]
 8002f36:	4613      	mov	r3, r2
 8002f38:	009b      	lsls	r3, r3, #2
 8002f3a:	4413      	add	r3, r2
 8002f3c:	3b05      	subs	r3, #5
 8002f3e:	fa00 f203 	lsl.w	r2, r0, r3
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	430a      	orrs	r2, r1
 8002f48:	635a      	str	r2, [r3, #52]	; 0x34
 8002f4a:	e04c      	b.n	8002fe6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	2b0c      	cmp	r3, #12
 8002f52:	d824      	bhi.n	8002f9e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	685a      	ldr	r2, [r3, #4]
 8002f5e:	4613      	mov	r3, r2
 8002f60:	009b      	lsls	r3, r3, #2
 8002f62:	4413      	add	r3, r2
 8002f64:	3b23      	subs	r3, #35	; 0x23
 8002f66:	221f      	movs	r2, #31
 8002f68:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6c:	43da      	mvns	r2, r3
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	400a      	ands	r2, r1
 8002f74:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	b29b      	uxth	r3, r3
 8002f82:	4618      	mov	r0, r3
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	685a      	ldr	r2, [r3, #4]
 8002f88:	4613      	mov	r3, r2
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	4413      	add	r3, r2
 8002f8e:	3b23      	subs	r3, #35	; 0x23
 8002f90:	fa00 f203 	lsl.w	r2, r0, r3
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	430a      	orrs	r2, r1
 8002f9a:	631a      	str	r2, [r3, #48]	; 0x30
 8002f9c:	e023      	b.n	8002fe6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	685a      	ldr	r2, [r3, #4]
 8002fa8:	4613      	mov	r3, r2
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	4413      	add	r3, r2
 8002fae:	3b41      	subs	r3, #65	; 0x41
 8002fb0:	221f      	movs	r2, #31
 8002fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb6:	43da      	mvns	r2, r3
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	400a      	ands	r2, r1
 8002fbe:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	b29b      	uxth	r3, r3
 8002fcc:	4618      	mov	r0, r3
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	685a      	ldr	r2, [r3, #4]
 8002fd2:	4613      	mov	r3, r2
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	4413      	add	r3, r2
 8002fd8:	3b41      	subs	r3, #65	; 0x41
 8002fda:	fa00 f203 	lsl.w	r2, r0, r3
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	430a      	orrs	r2, r1
 8002fe4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002fe6:	4b29      	ldr	r3, [pc, #164]	; (800308c <HAL_ADC_ConfigChannel+0x250>)
 8002fe8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a28      	ldr	r2, [pc, #160]	; (8003090 <HAL_ADC_ConfigChannel+0x254>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d10f      	bne.n	8003014 <HAL_ADC_ConfigChannel+0x1d8>
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	2b12      	cmp	r3, #18
 8002ffa:	d10b      	bne.n	8003014 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a1d      	ldr	r2, [pc, #116]	; (8003090 <HAL_ADC_ConfigChannel+0x254>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d12b      	bne.n	8003076 <HAL_ADC_ConfigChannel+0x23a>
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a1c      	ldr	r2, [pc, #112]	; (8003094 <HAL_ADC_ConfigChannel+0x258>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d003      	beq.n	8003030 <HAL_ADC_ConfigChannel+0x1f4>
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	2b11      	cmp	r3, #17
 800302e:	d122      	bne.n	8003076 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a11      	ldr	r2, [pc, #68]	; (8003094 <HAL_ADC_ConfigChannel+0x258>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d111      	bne.n	8003076 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003052:	4b11      	ldr	r3, [pc, #68]	; (8003098 <HAL_ADC_ConfigChannel+0x25c>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a11      	ldr	r2, [pc, #68]	; (800309c <HAL_ADC_ConfigChannel+0x260>)
 8003058:	fba2 2303 	umull	r2, r3, r2, r3
 800305c:	0c9a      	lsrs	r2, r3, #18
 800305e:	4613      	mov	r3, r2
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	4413      	add	r3, r2
 8003064:	005b      	lsls	r3, r3, #1
 8003066:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003068:	e002      	b.n	8003070 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	3b01      	subs	r3, #1
 800306e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d1f9      	bne.n	800306a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2200      	movs	r2, #0
 800307a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800307e:	2300      	movs	r3, #0
}
 8003080:	4618      	mov	r0, r3
 8003082:	3714      	adds	r7, #20
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr
 800308c:	40012300 	.word	0x40012300
 8003090:	40012000 	.word	0x40012000
 8003094:	10000012 	.word	0x10000012
 8003098:	20000030 	.word	0x20000030
 800309c:	431bde83 	.word	0x431bde83

080030a0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b085      	sub	sp, #20
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80030a8:	4b79      	ldr	r3, [pc, #484]	; (8003290 <ADC_Init+0x1f0>)
 80030aa:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	685a      	ldr	r2, [r3, #4]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	431a      	orrs	r2, r3
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	685a      	ldr	r2, [r3, #4]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80030d4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	6859      	ldr	r1, [r3, #4]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	691b      	ldr	r3, [r3, #16]
 80030e0:	021a      	lsls	r2, r3, #8
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	430a      	orrs	r2, r1
 80030e8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	685a      	ldr	r2, [r3, #4]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80030f8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	6859      	ldr	r1, [r3, #4]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	689a      	ldr	r2, [r3, #8]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	430a      	orrs	r2, r1
 800310a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	689a      	ldr	r2, [r3, #8]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800311a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	6899      	ldr	r1, [r3, #8]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	68da      	ldr	r2, [r3, #12]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	430a      	orrs	r2, r1
 800312c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003132:	4a58      	ldr	r2, [pc, #352]	; (8003294 <ADC_Init+0x1f4>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d022      	beq.n	800317e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	689a      	ldr	r2, [r3, #8]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003146:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	6899      	ldr	r1, [r3, #8]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	430a      	orrs	r2, r1
 8003158:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	689a      	ldr	r2, [r3, #8]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003168:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	6899      	ldr	r1, [r3, #8]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	430a      	orrs	r2, r1
 800317a:	609a      	str	r2, [r3, #8]
 800317c:	e00f      	b.n	800319e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	689a      	ldr	r2, [r3, #8]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800318c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	689a      	ldr	r2, [r3, #8]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800319c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	689a      	ldr	r2, [r3, #8]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f022 0202 	bic.w	r2, r2, #2
 80031ac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	6899      	ldr	r1, [r3, #8]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	7e1b      	ldrb	r3, [r3, #24]
 80031b8:	005a      	lsls	r2, r3, #1
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	430a      	orrs	r2, r1
 80031c0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d01b      	beq.n	8003204 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	685a      	ldr	r2, [r3, #4]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031da:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	685a      	ldr	r2, [r3, #4]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80031ea:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	6859      	ldr	r1, [r3, #4]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f6:	3b01      	subs	r3, #1
 80031f8:	035a      	lsls	r2, r3, #13
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	430a      	orrs	r2, r1
 8003200:	605a      	str	r2, [r3, #4]
 8003202:	e007      	b.n	8003214 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	685a      	ldr	r2, [r3, #4]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003212:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003222:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	69db      	ldr	r3, [r3, #28]
 800322e:	3b01      	subs	r3, #1
 8003230:	051a      	lsls	r2, r3, #20
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	430a      	orrs	r2, r1
 8003238:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	689a      	ldr	r2, [r3, #8]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003248:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	6899      	ldr	r1, [r3, #8]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003256:	025a      	lsls	r2, r3, #9
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	430a      	orrs	r2, r1
 800325e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	689a      	ldr	r2, [r3, #8]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800326e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	6899      	ldr	r1, [r3, #8]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	695b      	ldr	r3, [r3, #20]
 800327a:	029a      	lsls	r2, r3, #10
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	430a      	orrs	r2, r1
 8003282:	609a      	str	r2, [r3, #8]
}
 8003284:	bf00      	nop
 8003286:	3714      	adds	r7, #20
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr
 8003290:	40012300 	.word	0x40012300
 8003294:	0f000001 	.word	0x0f000001

08003298 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b084      	sub	sp, #16
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032a4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032aa:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d13c      	bne.n	800332c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d12b      	bne.n	8003324 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d127      	bne.n	8003324 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032da:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d006      	beq.n	80032f0 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d119      	bne.n	8003324 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	685a      	ldr	r2, [r3, #4]
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f022 0220 	bic.w	r2, r2, #32
 80032fe:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003304:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003310:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003314:	2b00      	cmp	r3, #0
 8003316:	d105      	bne.n	8003324 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331c:	f043 0201 	orr.w	r2, r3, #1
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003324:	68f8      	ldr	r0, [r7, #12]
 8003326:	f7ff fd6b 	bl	8002e00 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800332a:	e00e      	b.n	800334a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003330:	f003 0310 	and.w	r3, r3, #16
 8003334:	2b00      	cmp	r3, #0
 8003336:	d003      	beq.n	8003340 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003338:	68f8      	ldr	r0, [r7, #12]
 800333a:	f7ff fd75 	bl	8002e28 <HAL_ADC_ErrorCallback>
}
 800333e:	e004      	b.n	800334a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	4798      	blx	r3
}
 800334a:	bf00      	nop
 800334c:	3710      	adds	r7, #16
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}

08003352 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003352:	b580      	push	{r7, lr}
 8003354:	b084      	sub	sp, #16
 8003356:	af00      	add	r7, sp, #0
 8003358:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800335e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003360:	68f8      	ldr	r0, [r7, #12]
 8003362:	f7ff fd57 	bl	8002e14 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003366:	bf00      	nop
 8003368:	3710      	adds	r7, #16
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}

0800336e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800336e:	b580      	push	{r7, lr}
 8003370:	b084      	sub	sp, #16
 8003372:	af00      	add	r7, sp, #0
 8003374:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800337a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2240      	movs	r2, #64	; 0x40
 8003380:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003386:	f043 0204 	orr.w	r2, r3, #4
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800338e:	68f8      	ldr	r0, [r7, #12]
 8003390:	f7ff fd4a 	bl	8002e28 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003394:	bf00      	nop
 8003396:	3710      	adds	r7, #16
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}

0800339c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800339c:	b480      	push	{r7}
 800339e:	b085      	sub	sp, #20
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	f003 0307 	and.w	r3, r3, #7
 80033aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033ac:	4b0c      	ldr	r3, [pc, #48]	; (80033e0 <__NVIC_SetPriorityGrouping+0x44>)
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033b2:	68ba      	ldr	r2, [r7, #8]
 80033b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80033b8:	4013      	ands	r3, r2
 80033ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80033c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80033c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033ce:	4a04      	ldr	r2, [pc, #16]	; (80033e0 <__NVIC_SetPriorityGrouping+0x44>)
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	60d3      	str	r3, [r2, #12]
}
 80033d4:	bf00      	nop
 80033d6:	3714      	adds	r7, #20
 80033d8:	46bd      	mov	sp, r7
 80033da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033de:	4770      	bx	lr
 80033e0:	e000ed00 	.word	0xe000ed00

080033e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80033e4:	b480      	push	{r7}
 80033e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033e8:	4b04      	ldr	r3, [pc, #16]	; (80033fc <__NVIC_GetPriorityGrouping+0x18>)
 80033ea:	68db      	ldr	r3, [r3, #12]
 80033ec:	0a1b      	lsrs	r3, r3, #8
 80033ee:	f003 0307 	and.w	r3, r3, #7
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	46bd      	mov	sp, r7
 80033f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fa:	4770      	bx	lr
 80033fc:	e000ed00 	.word	0xe000ed00

08003400 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003400:	b480      	push	{r7}
 8003402:	b083      	sub	sp, #12
 8003404:	af00      	add	r7, sp, #0
 8003406:	4603      	mov	r3, r0
 8003408:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800340a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800340e:	2b00      	cmp	r3, #0
 8003410:	db0b      	blt.n	800342a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003412:	79fb      	ldrb	r3, [r7, #7]
 8003414:	f003 021f 	and.w	r2, r3, #31
 8003418:	4907      	ldr	r1, [pc, #28]	; (8003438 <__NVIC_EnableIRQ+0x38>)
 800341a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800341e:	095b      	lsrs	r3, r3, #5
 8003420:	2001      	movs	r0, #1
 8003422:	fa00 f202 	lsl.w	r2, r0, r2
 8003426:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800342a:	bf00      	nop
 800342c:	370c      	adds	r7, #12
 800342e:	46bd      	mov	sp, r7
 8003430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003434:	4770      	bx	lr
 8003436:	bf00      	nop
 8003438:	e000e100 	.word	0xe000e100

0800343c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800343c:	b480      	push	{r7}
 800343e:	b083      	sub	sp, #12
 8003440:	af00      	add	r7, sp, #0
 8003442:	4603      	mov	r3, r0
 8003444:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800344a:	2b00      	cmp	r3, #0
 800344c:	db12      	blt.n	8003474 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800344e:	79fb      	ldrb	r3, [r7, #7]
 8003450:	f003 021f 	and.w	r2, r3, #31
 8003454:	490a      	ldr	r1, [pc, #40]	; (8003480 <__NVIC_DisableIRQ+0x44>)
 8003456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800345a:	095b      	lsrs	r3, r3, #5
 800345c:	2001      	movs	r0, #1
 800345e:	fa00 f202 	lsl.w	r2, r0, r2
 8003462:	3320      	adds	r3, #32
 8003464:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003468:	f3bf 8f4f 	dsb	sy
}
 800346c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800346e:	f3bf 8f6f 	isb	sy
}
 8003472:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003474:	bf00      	nop
 8003476:	370c      	adds	r7, #12
 8003478:	46bd      	mov	sp, r7
 800347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347e:	4770      	bx	lr
 8003480:	e000e100 	.word	0xe000e100

08003484 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003484:	b480      	push	{r7}
 8003486:	b083      	sub	sp, #12
 8003488:	af00      	add	r7, sp, #0
 800348a:	4603      	mov	r3, r0
 800348c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800348e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003492:	2b00      	cmp	r3, #0
 8003494:	db0c      	blt.n	80034b0 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003496:	79fb      	ldrb	r3, [r7, #7]
 8003498:	f003 021f 	and.w	r2, r3, #31
 800349c:	4907      	ldr	r1, [pc, #28]	; (80034bc <__NVIC_ClearPendingIRQ+0x38>)
 800349e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034a2:	095b      	lsrs	r3, r3, #5
 80034a4:	2001      	movs	r0, #1
 80034a6:	fa00 f202 	lsl.w	r2, r0, r2
 80034aa:	3360      	adds	r3, #96	; 0x60
 80034ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80034b0:	bf00      	nop
 80034b2:	370c      	adds	r7, #12
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr
 80034bc:	e000e100 	.word	0xe000e100

080034c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b083      	sub	sp, #12
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	4603      	mov	r3, r0
 80034c8:	6039      	str	r1, [r7, #0]
 80034ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	db0a      	blt.n	80034ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	b2da      	uxtb	r2, r3
 80034d8:	490c      	ldr	r1, [pc, #48]	; (800350c <__NVIC_SetPriority+0x4c>)
 80034da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034de:	0112      	lsls	r2, r2, #4
 80034e0:	b2d2      	uxtb	r2, r2
 80034e2:	440b      	add	r3, r1
 80034e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80034e8:	e00a      	b.n	8003500 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	b2da      	uxtb	r2, r3
 80034ee:	4908      	ldr	r1, [pc, #32]	; (8003510 <__NVIC_SetPriority+0x50>)
 80034f0:	79fb      	ldrb	r3, [r7, #7]
 80034f2:	f003 030f 	and.w	r3, r3, #15
 80034f6:	3b04      	subs	r3, #4
 80034f8:	0112      	lsls	r2, r2, #4
 80034fa:	b2d2      	uxtb	r2, r2
 80034fc:	440b      	add	r3, r1
 80034fe:	761a      	strb	r2, [r3, #24]
}
 8003500:	bf00      	nop
 8003502:	370c      	adds	r7, #12
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr
 800350c:	e000e100 	.word	0xe000e100
 8003510:	e000ed00 	.word	0xe000ed00

08003514 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003514:	b480      	push	{r7}
 8003516:	b089      	sub	sp, #36	; 0x24
 8003518:	af00      	add	r7, sp, #0
 800351a:	60f8      	str	r0, [r7, #12]
 800351c:	60b9      	str	r1, [r7, #8]
 800351e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	f003 0307 	and.w	r3, r3, #7
 8003526:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003528:	69fb      	ldr	r3, [r7, #28]
 800352a:	f1c3 0307 	rsb	r3, r3, #7
 800352e:	2b04      	cmp	r3, #4
 8003530:	bf28      	it	cs
 8003532:	2304      	movcs	r3, #4
 8003534:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	3304      	adds	r3, #4
 800353a:	2b06      	cmp	r3, #6
 800353c:	d902      	bls.n	8003544 <NVIC_EncodePriority+0x30>
 800353e:	69fb      	ldr	r3, [r7, #28]
 8003540:	3b03      	subs	r3, #3
 8003542:	e000      	b.n	8003546 <NVIC_EncodePriority+0x32>
 8003544:	2300      	movs	r3, #0
 8003546:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003548:	f04f 32ff 	mov.w	r2, #4294967295
 800354c:	69bb      	ldr	r3, [r7, #24]
 800354e:	fa02 f303 	lsl.w	r3, r2, r3
 8003552:	43da      	mvns	r2, r3
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	401a      	ands	r2, r3
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800355c:	f04f 31ff 	mov.w	r1, #4294967295
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	fa01 f303 	lsl.w	r3, r1, r3
 8003566:	43d9      	mvns	r1, r3
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800356c:	4313      	orrs	r3, r2
         );
}
 800356e:	4618      	mov	r0, r3
 8003570:	3724      	adds	r7, #36	; 0x24
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr
	...

0800357c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b082      	sub	sp, #8
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	3b01      	subs	r3, #1
 8003588:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800358c:	d301      	bcc.n	8003592 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800358e:	2301      	movs	r3, #1
 8003590:	e00f      	b.n	80035b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003592:	4a0a      	ldr	r2, [pc, #40]	; (80035bc <SysTick_Config+0x40>)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	3b01      	subs	r3, #1
 8003598:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800359a:	210f      	movs	r1, #15
 800359c:	f04f 30ff 	mov.w	r0, #4294967295
 80035a0:	f7ff ff8e 	bl	80034c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80035a4:	4b05      	ldr	r3, [pc, #20]	; (80035bc <SysTick_Config+0x40>)
 80035a6:	2200      	movs	r2, #0
 80035a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80035aa:	4b04      	ldr	r3, [pc, #16]	; (80035bc <SysTick_Config+0x40>)
 80035ac:	2207      	movs	r2, #7
 80035ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80035b0:	2300      	movs	r3, #0
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	3708      	adds	r7, #8
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}
 80035ba:	bf00      	nop
 80035bc:	e000e010 	.word	0xe000e010

080035c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b082      	sub	sp, #8
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f7ff fee7 	bl	800339c <__NVIC_SetPriorityGrouping>
}
 80035ce:	bf00      	nop
 80035d0:	3708      	adds	r7, #8
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}

080035d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80035d6:	b580      	push	{r7, lr}
 80035d8:	b086      	sub	sp, #24
 80035da:	af00      	add	r7, sp, #0
 80035dc:	4603      	mov	r3, r0
 80035de:	60b9      	str	r1, [r7, #8]
 80035e0:	607a      	str	r2, [r7, #4]
 80035e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80035e4:	2300      	movs	r3, #0
 80035e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80035e8:	f7ff fefc 	bl	80033e4 <__NVIC_GetPriorityGrouping>
 80035ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	68b9      	ldr	r1, [r7, #8]
 80035f2:	6978      	ldr	r0, [r7, #20]
 80035f4:	f7ff ff8e 	bl	8003514 <NVIC_EncodePriority>
 80035f8:	4602      	mov	r2, r0
 80035fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035fe:	4611      	mov	r1, r2
 8003600:	4618      	mov	r0, r3
 8003602:	f7ff ff5d 	bl	80034c0 <__NVIC_SetPriority>
}
 8003606:	bf00      	nop
 8003608:	3718      	adds	r7, #24
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}

0800360e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800360e:	b580      	push	{r7, lr}
 8003610:	b082      	sub	sp, #8
 8003612:	af00      	add	r7, sp, #0
 8003614:	4603      	mov	r3, r0
 8003616:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003618:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800361c:	4618      	mov	r0, r3
 800361e:	f7ff feef 	bl	8003400 <__NVIC_EnableIRQ>
}
 8003622:	bf00      	nop
 8003624:	3708      	adds	r7, #8
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}

0800362a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800362a:	b580      	push	{r7, lr}
 800362c:	b082      	sub	sp, #8
 800362e:	af00      	add	r7, sp, #0
 8003630:	4603      	mov	r3, r0
 8003632:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003634:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003638:	4618      	mov	r0, r3
 800363a:	f7ff feff 	bl	800343c <__NVIC_DisableIRQ>
}
 800363e:	bf00      	nop
 8003640:	3708      	adds	r7, #8
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}

08003646 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003646:	b580      	push	{r7, lr}
 8003648:	b082      	sub	sp, #8
 800364a:	af00      	add	r7, sp, #0
 800364c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f7ff ff94 	bl	800357c <SysTick_Config>
 8003654:	4603      	mov	r3, r0
}
 8003656:	4618      	mov	r0, r3
 8003658:	3708      	adds	r7, #8
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}

0800365e <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800365e:	b580      	push	{r7, lr}
 8003660:	b082      	sub	sp, #8
 8003662:	af00      	add	r7, sp, #0
 8003664:	4603      	mov	r3, r0
 8003666:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8003668:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800366c:	4618      	mov	r0, r3
 800366e:	f7ff ff09 	bl	8003484 <__NVIC_ClearPendingIRQ>
}
 8003672:	bf00      	nop
 8003674:	3708      	adds	r7, #8
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}
	...

0800367c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b086      	sub	sp, #24
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003684:	2300      	movs	r3, #0
 8003686:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003688:	f7ff f9fc 	bl	8002a84 <HAL_GetTick>
 800368c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d101      	bne.n	8003698 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	e099      	b.n	80037cc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2202      	movs	r2, #2
 800369c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2200      	movs	r2, #0
 80036a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f022 0201 	bic.w	r2, r2, #1
 80036b6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80036b8:	e00f      	b.n	80036da <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80036ba:	f7ff f9e3 	bl	8002a84 <HAL_GetTick>
 80036be:	4602      	mov	r2, r0
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	1ad3      	subs	r3, r2, r3
 80036c4:	2b05      	cmp	r3, #5
 80036c6:	d908      	bls.n	80036da <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2220      	movs	r2, #32
 80036cc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2203      	movs	r2, #3
 80036d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80036d6:	2303      	movs	r3, #3
 80036d8:	e078      	b.n	80037cc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f003 0301 	and.w	r3, r3, #1
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d1e8      	bne.n	80036ba <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80036f0:	697a      	ldr	r2, [r7, #20]
 80036f2:	4b38      	ldr	r3, [pc, #224]	; (80037d4 <HAL_DMA_Init+0x158>)
 80036f4:	4013      	ands	r3, r2
 80036f6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	685a      	ldr	r2, [r3, #4]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003706:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	691b      	ldr	r3, [r3, #16]
 800370c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003712:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	699b      	ldr	r3, [r3, #24]
 8003718:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800371e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6a1b      	ldr	r3, [r3, #32]
 8003724:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003726:	697a      	ldr	r2, [r7, #20]
 8003728:	4313      	orrs	r3, r2
 800372a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003730:	2b04      	cmp	r3, #4
 8003732:	d107      	bne.n	8003744 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800373c:	4313      	orrs	r3, r2
 800373e:	697a      	ldr	r2, [r7, #20]
 8003740:	4313      	orrs	r3, r2
 8003742:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	697a      	ldr	r2, [r7, #20]
 800374a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	695b      	ldr	r3, [r3, #20]
 8003752:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	f023 0307 	bic.w	r3, r3, #7
 800375a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003760:	697a      	ldr	r2, [r7, #20]
 8003762:	4313      	orrs	r3, r2
 8003764:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800376a:	2b04      	cmp	r3, #4
 800376c:	d117      	bne.n	800379e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003772:	697a      	ldr	r2, [r7, #20]
 8003774:	4313      	orrs	r3, r2
 8003776:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800377c:	2b00      	cmp	r3, #0
 800377e:	d00e      	beq.n	800379e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003780:	6878      	ldr	r0, [r7, #4]
 8003782:	f000 fb0d 	bl	8003da0 <DMA_CheckFifoParam>
 8003786:	4603      	mov	r3, r0
 8003788:	2b00      	cmp	r3, #0
 800378a:	d008      	beq.n	800379e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2240      	movs	r2, #64	; 0x40
 8003790:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2201      	movs	r2, #1
 8003796:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800379a:	2301      	movs	r3, #1
 800379c:	e016      	b.n	80037cc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	697a      	ldr	r2, [r7, #20]
 80037a4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f000 fac4 	bl	8003d34 <DMA_CalcBaseAndBitshift>
 80037ac:	4603      	mov	r3, r0
 80037ae:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037b4:	223f      	movs	r2, #63	; 0x3f
 80037b6:	409a      	lsls	r2, r3
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2200      	movs	r2, #0
 80037c0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2201      	movs	r2, #1
 80037c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80037ca:	2300      	movs	r3, #0
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	3718      	adds	r7, #24
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}
 80037d4:	f010803f 	.word	0xf010803f

080037d8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b086      	sub	sp, #24
 80037dc:	af00      	add	r7, sp, #0
 80037de:	60f8      	str	r0, [r7, #12]
 80037e0:	60b9      	str	r1, [r7, #8]
 80037e2:	607a      	str	r2, [r7, #4]
 80037e4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037e6:	2300      	movs	r3, #0
 80037e8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037ee:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d101      	bne.n	80037fe <HAL_DMA_Start_IT+0x26>
 80037fa:	2302      	movs	r3, #2
 80037fc:	e040      	b.n	8003880 <HAL_DMA_Start_IT+0xa8>
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2201      	movs	r2, #1
 8003802:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800380c:	b2db      	uxtb	r3, r3
 800380e:	2b01      	cmp	r3, #1
 8003810:	d12f      	bne.n	8003872 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2202      	movs	r2, #2
 8003816:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2200      	movs	r2, #0
 800381e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	687a      	ldr	r2, [r7, #4]
 8003824:	68b9      	ldr	r1, [r7, #8]
 8003826:	68f8      	ldr	r0, [r7, #12]
 8003828:	f000 fa56 	bl	8003cd8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003830:	223f      	movs	r2, #63	; 0x3f
 8003832:	409a      	lsls	r2, r3
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f042 0216 	orr.w	r2, r2, #22
 8003846:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800384c:	2b00      	cmp	r3, #0
 800384e:	d007      	beq.n	8003860 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f042 0208 	orr.w	r2, r2, #8
 800385e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f042 0201 	orr.w	r2, r2, #1
 800386e:	601a      	str	r2, [r3, #0]
 8003870:	e005      	b.n	800387e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2200      	movs	r2, #0
 8003876:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800387a:	2302      	movs	r3, #2
 800387c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800387e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003880:	4618      	mov	r0, r3
 8003882:	3718      	adds	r7, #24
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}

08003888 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b084      	sub	sp, #16
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003894:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003896:	f7ff f8f5 	bl	8002a84 <HAL_GetTick>
 800389a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80038a2:	b2db      	uxtb	r3, r3
 80038a4:	2b02      	cmp	r3, #2
 80038a6:	d008      	beq.n	80038ba <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2280      	movs	r2, #128	; 0x80
 80038ac:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2200      	movs	r2, #0
 80038b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e052      	b.n	8003960 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	681a      	ldr	r2, [r3, #0]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f022 0216 	bic.w	r2, r2, #22
 80038c8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	695a      	ldr	r2, [r3, #20]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80038d8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d103      	bne.n	80038ea <HAL_DMA_Abort+0x62>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d007      	beq.n	80038fa <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f022 0208 	bic.w	r2, r2, #8
 80038f8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f022 0201 	bic.w	r2, r2, #1
 8003908:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800390a:	e013      	b.n	8003934 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800390c:	f7ff f8ba 	bl	8002a84 <HAL_GetTick>
 8003910:	4602      	mov	r2, r0
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	1ad3      	subs	r3, r2, r3
 8003916:	2b05      	cmp	r3, #5
 8003918:	d90c      	bls.n	8003934 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2220      	movs	r2, #32
 800391e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2203      	movs	r2, #3
 8003924:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2200      	movs	r2, #0
 800392c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003930:	2303      	movs	r3, #3
 8003932:	e015      	b.n	8003960 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 0301 	and.w	r3, r3, #1
 800393e:	2b00      	cmp	r3, #0
 8003940:	d1e4      	bne.n	800390c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003946:	223f      	movs	r2, #63	; 0x3f
 8003948:	409a      	lsls	r2, r3
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2201      	movs	r2, #1
 8003952:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2200      	movs	r2, #0
 800395a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800395e:	2300      	movs	r3, #0
}
 8003960:	4618      	mov	r0, r3
 8003962:	3710      	adds	r7, #16
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}

08003968 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003968:	b480      	push	{r7}
 800396a:	b083      	sub	sp, #12
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003976:	b2db      	uxtb	r3, r3
 8003978:	2b02      	cmp	r3, #2
 800397a:	d004      	beq.n	8003986 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2280      	movs	r2, #128	; 0x80
 8003980:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e00c      	b.n	80039a0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2205      	movs	r2, #5
 800398a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f022 0201 	bic.w	r2, r2, #1
 800399c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800399e:	2300      	movs	r3, #0
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	370c      	adds	r7, #12
 80039a4:	46bd      	mov	sp, r7
 80039a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039aa:	4770      	bx	lr

080039ac <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b086      	sub	sp, #24
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80039b4:	2300      	movs	r3, #0
 80039b6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80039b8:	4b8e      	ldr	r3, [pc, #568]	; (8003bf4 <HAL_DMA_IRQHandler+0x248>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a8e      	ldr	r2, [pc, #568]	; (8003bf8 <HAL_DMA_IRQHandler+0x24c>)
 80039be:	fba2 2303 	umull	r2, r3, r2, r3
 80039c2:	0a9b      	lsrs	r3, r3, #10
 80039c4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039ca:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039d6:	2208      	movs	r2, #8
 80039d8:	409a      	lsls	r2, r3
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	4013      	ands	r3, r2
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d01a      	beq.n	8003a18 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f003 0304 	and.w	r3, r3, #4
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d013      	beq.n	8003a18 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f022 0204 	bic.w	r2, r2, #4
 80039fe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a04:	2208      	movs	r2, #8
 8003a06:	409a      	lsls	r2, r3
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a10:	f043 0201 	orr.w	r2, r3, #1
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	409a      	lsls	r2, r3
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	4013      	ands	r3, r2
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d012      	beq.n	8003a4e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	695b      	ldr	r3, [r3, #20]
 8003a2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d00b      	beq.n	8003a4e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	409a      	lsls	r2, r3
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a46:	f043 0202 	orr.w	r2, r3, #2
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a52:	2204      	movs	r2, #4
 8003a54:	409a      	lsls	r2, r3
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	4013      	ands	r3, r2
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d012      	beq.n	8003a84 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f003 0302 	and.w	r3, r3, #2
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d00b      	beq.n	8003a84 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a70:	2204      	movs	r2, #4
 8003a72:	409a      	lsls	r2, r3
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a7c:	f043 0204 	orr.w	r2, r3, #4
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a88:	2210      	movs	r2, #16
 8003a8a:	409a      	lsls	r2, r3
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	4013      	ands	r3, r2
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d043      	beq.n	8003b1c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 0308 	and.w	r3, r3, #8
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d03c      	beq.n	8003b1c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aa6:	2210      	movs	r2, #16
 8003aa8:	409a      	lsls	r2, r3
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d018      	beq.n	8003aee <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d108      	bne.n	8003adc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d024      	beq.n	8003b1c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	4798      	blx	r3
 8003ada:	e01f      	b.n	8003b1c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d01b      	beq.n	8003b1c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ae8:	6878      	ldr	r0, [r7, #4]
 8003aea:	4798      	blx	r3
 8003aec:	e016      	b.n	8003b1c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d107      	bne.n	8003b0c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f022 0208 	bic.w	r2, r2, #8
 8003b0a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d003      	beq.n	8003b1c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b20:	2220      	movs	r2, #32
 8003b22:	409a      	lsls	r2, r3
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	4013      	ands	r3, r2
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	f000 808f 	beq.w	8003c4c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 0310 	and.w	r3, r3, #16
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	f000 8087 	beq.w	8003c4c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b42:	2220      	movs	r2, #32
 8003b44:	409a      	lsls	r2, r3
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b50:	b2db      	uxtb	r3, r3
 8003b52:	2b05      	cmp	r3, #5
 8003b54:	d136      	bne.n	8003bc4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	681a      	ldr	r2, [r3, #0]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f022 0216 	bic.w	r2, r2, #22
 8003b64:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	695a      	ldr	r2, [r3, #20]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b74:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d103      	bne.n	8003b86 <HAL_DMA_IRQHandler+0x1da>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d007      	beq.n	8003b96 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	681a      	ldr	r2, [r3, #0]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f022 0208 	bic.w	r2, r2, #8
 8003b94:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b9a:	223f      	movs	r2, #63	; 0x3f
 8003b9c:	409a      	lsls	r2, r3
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2200      	movs	r2, #0
 8003bae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d07e      	beq.n	8003cb8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	4798      	blx	r3
        }
        return;
 8003bc2:	e079      	b.n	8003cb8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d01d      	beq.n	8003c0e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d10d      	bne.n	8003bfc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d031      	beq.n	8003c4c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	4798      	blx	r3
 8003bf0:	e02c      	b.n	8003c4c <HAL_DMA_IRQHandler+0x2a0>
 8003bf2:	bf00      	nop
 8003bf4:	20000030 	.word	0x20000030
 8003bf8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d023      	beq.n	8003c4c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c08:	6878      	ldr	r0, [r7, #4]
 8003c0a:	4798      	blx	r3
 8003c0c:	e01e      	b.n	8003c4c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d10f      	bne.n	8003c3c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f022 0210 	bic.w	r2, r2, #16
 8003c2a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2201      	movs	r2, #1
 8003c30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2200      	movs	r2, #0
 8003c38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d003      	beq.n	8003c4c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c48:	6878      	ldr	r0, [r7, #4]
 8003c4a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d032      	beq.n	8003cba <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c58:	f003 0301 	and.w	r3, r3, #1
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d022      	beq.n	8003ca6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2205      	movs	r2, #5
 8003c64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f022 0201 	bic.w	r2, r2, #1
 8003c76:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	3301      	adds	r3, #1
 8003c7c:	60bb      	str	r3, [r7, #8]
 8003c7e:	697a      	ldr	r2, [r7, #20]
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d307      	bcc.n	8003c94 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 0301 	and.w	r3, r3, #1
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d1f2      	bne.n	8003c78 <HAL_DMA_IRQHandler+0x2cc>
 8003c92:	e000      	b.n	8003c96 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003c94:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2201      	movs	r2, #1
 8003c9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d005      	beq.n	8003cba <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	4798      	blx	r3
 8003cb6:	e000      	b.n	8003cba <HAL_DMA_IRQHandler+0x30e>
        return;
 8003cb8:	bf00      	nop
    }
  }
}
 8003cba:	3718      	adds	r7, #24
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}

08003cc0 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b083      	sub	sp, #12
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	370c      	adds	r7, #12
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd6:	4770      	bx	lr

08003cd8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b085      	sub	sp, #20
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	60f8      	str	r0, [r7, #12]
 8003ce0:	60b9      	str	r1, [r7, #8]
 8003ce2:	607a      	str	r2, [r7, #4]
 8003ce4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	681a      	ldr	r2, [r3, #0]
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003cf4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	683a      	ldr	r2, [r7, #0]
 8003cfc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	2b40      	cmp	r3, #64	; 0x40
 8003d04:	d108      	bne.n	8003d18 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	687a      	ldr	r2, [r7, #4]
 8003d0c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	68ba      	ldr	r2, [r7, #8]
 8003d14:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003d16:	e007      	b.n	8003d28 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	68ba      	ldr	r2, [r7, #8]
 8003d1e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	687a      	ldr	r2, [r7, #4]
 8003d26:	60da      	str	r2, [r3, #12]
}
 8003d28:	bf00      	nop
 8003d2a:	3714      	adds	r7, #20
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr

08003d34 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b085      	sub	sp, #20
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	3b10      	subs	r3, #16
 8003d44:	4a14      	ldr	r2, [pc, #80]	; (8003d98 <DMA_CalcBaseAndBitshift+0x64>)
 8003d46:	fba2 2303 	umull	r2, r3, r2, r3
 8003d4a:	091b      	lsrs	r3, r3, #4
 8003d4c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003d4e:	4a13      	ldr	r2, [pc, #76]	; (8003d9c <DMA_CalcBaseAndBitshift+0x68>)
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	4413      	add	r3, r2
 8003d54:	781b      	ldrb	r3, [r3, #0]
 8003d56:	461a      	mov	r2, r3
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2b03      	cmp	r3, #3
 8003d60:	d909      	bls.n	8003d76 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003d6a:	f023 0303 	bic.w	r3, r3, #3
 8003d6e:	1d1a      	adds	r2, r3, #4
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	659a      	str	r2, [r3, #88]	; 0x58
 8003d74:	e007      	b.n	8003d86 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003d7e:	f023 0303 	bic.w	r3, r3, #3
 8003d82:	687a      	ldr	r2, [r7, #4]
 8003d84:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3714      	adds	r7, #20
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d94:	4770      	bx	lr
 8003d96:	bf00      	nop
 8003d98:	aaaaaaab 	.word	0xaaaaaaab
 8003d9c:	080305a8 	.word	0x080305a8

08003da0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b085      	sub	sp, #20
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003da8:	2300      	movs	r3, #0
 8003daa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003db0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	699b      	ldr	r3, [r3, #24]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d11f      	bne.n	8003dfa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	2b03      	cmp	r3, #3
 8003dbe:	d856      	bhi.n	8003e6e <DMA_CheckFifoParam+0xce>
 8003dc0:	a201      	add	r2, pc, #4	; (adr r2, 8003dc8 <DMA_CheckFifoParam+0x28>)
 8003dc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dc6:	bf00      	nop
 8003dc8:	08003dd9 	.word	0x08003dd9
 8003dcc:	08003deb 	.word	0x08003deb
 8003dd0:	08003dd9 	.word	0x08003dd9
 8003dd4:	08003e6f 	.word	0x08003e6f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ddc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d046      	beq.n	8003e72 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003de8:	e043      	b.n	8003e72 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dee:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003df2:	d140      	bne.n	8003e76 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003df8:	e03d      	b.n	8003e76 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	699b      	ldr	r3, [r3, #24]
 8003dfe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e02:	d121      	bne.n	8003e48 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	2b03      	cmp	r3, #3
 8003e08:	d837      	bhi.n	8003e7a <DMA_CheckFifoParam+0xda>
 8003e0a:	a201      	add	r2, pc, #4	; (adr r2, 8003e10 <DMA_CheckFifoParam+0x70>)
 8003e0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e10:	08003e21 	.word	0x08003e21
 8003e14:	08003e27 	.word	0x08003e27
 8003e18:	08003e21 	.word	0x08003e21
 8003e1c:	08003e39 	.word	0x08003e39
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003e20:	2301      	movs	r3, #1
 8003e22:	73fb      	strb	r3, [r7, #15]
      break;
 8003e24:	e030      	b.n	8003e88 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e2a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d025      	beq.n	8003e7e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e36:	e022      	b.n	8003e7e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e3c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003e40:	d11f      	bne.n	8003e82 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003e46:	e01c      	b.n	8003e82 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	2b02      	cmp	r3, #2
 8003e4c:	d903      	bls.n	8003e56 <DMA_CheckFifoParam+0xb6>
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	2b03      	cmp	r3, #3
 8003e52:	d003      	beq.n	8003e5c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003e54:	e018      	b.n	8003e88 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	73fb      	strb	r3, [r7, #15]
      break;
 8003e5a:	e015      	b.n	8003e88 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d00e      	beq.n	8003e86 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	73fb      	strb	r3, [r7, #15]
      break;
 8003e6c:	e00b      	b.n	8003e86 <DMA_CheckFifoParam+0xe6>
      break;
 8003e6e:	bf00      	nop
 8003e70:	e00a      	b.n	8003e88 <DMA_CheckFifoParam+0xe8>
      break;
 8003e72:	bf00      	nop
 8003e74:	e008      	b.n	8003e88 <DMA_CheckFifoParam+0xe8>
      break;
 8003e76:	bf00      	nop
 8003e78:	e006      	b.n	8003e88 <DMA_CheckFifoParam+0xe8>
      break;
 8003e7a:	bf00      	nop
 8003e7c:	e004      	b.n	8003e88 <DMA_CheckFifoParam+0xe8>
      break;
 8003e7e:	bf00      	nop
 8003e80:	e002      	b.n	8003e88 <DMA_CheckFifoParam+0xe8>
      break;   
 8003e82:	bf00      	nop
 8003e84:	e000      	b.n	8003e88 <DMA_CheckFifoParam+0xe8>
      break;
 8003e86:	bf00      	nop
    }
  } 
  
  return status; 
 8003e88:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3714      	adds	r7, #20
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e94:	4770      	bx	lr
 8003e96:	bf00      	nop

08003e98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b089      	sub	sp, #36	; 0x24
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
 8003ea0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003eae:	2300      	movs	r3, #0
 8003eb0:	61fb      	str	r3, [r7, #28]
 8003eb2:	e159      	b.n	8004168 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003eb4:	2201      	movs	r2, #1
 8003eb6:	69fb      	ldr	r3, [r7, #28]
 8003eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ebc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	697a      	ldr	r2, [r7, #20]
 8003ec4:	4013      	ands	r3, r2
 8003ec6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003ec8:	693a      	ldr	r2, [r7, #16]
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	429a      	cmp	r2, r3
 8003ece:	f040 8148 	bne.w	8004162 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	f003 0303 	and.w	r3, r3, #3
 8003eda:	2b01      	cmp	r3, #1
 8003edc:	d005      	beq.n	8003eea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003ee6:	2b02      	cmp	r3, #2
 8003ee8:	d130      	bne.n	8003f4c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003ef0:	69fb      	ldr	r3, [r7, #28]
 8003ef2:	005b      	lsls	r3, r3, #1
 8003ef4:	2203      	movs	r2, #3
 8003ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8003efa:	43db      	mvns	r3, r3
 8003efc:	69ba      	ldr	r2, [r7, #24]
 8003efe:	4013      	ands	r3, r2
 8003f00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	68da      	ldr	r2, [r3, #12]
 8003f06:	69fb      	ldr	r3, [r7, #28]
 8003f08:	005b      	lsls	r3, r3, #1
 8003f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f0e:	69ba      	ldr	r2, [r7, #24]
 8003f10:	4313      	orrs	r3, r2
 8003f12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	69ba      	ldr	r2, [r7, #24]
 8003f18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003f20:	2201      	movs	r2, #1
 8003f22:	69fb      	ldr	r3, [r7, #28]
 8003f24:	fa02 f303 	lsl.w	r3, r2, r3
 8003f28:	43db      	mvns	r3, r3
 8003f2a:	69ba      	ldr	r2, [r7, #24]
 8003f2c:	4013      	ands	r3, r2
 8003f2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	091b      	lsrs	r3, r3, #4
 8003f36:	f003 0201 	and.w	r2, r3, #1
 8003f3a:	69fb      	ldr	r3, [r7, #28]
 8003f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f40:	69ba      	ldr	r2, [r7, #24]
 8003f42:	4313      	orrs	r3, r2
 8003f44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	69ba      	ldr	r2, [r7, #24]
 8003f4a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	f003 0303 	and.w	r3, r3, #3
 8003f54:	2b03      	cmp	r3, #3
 8003f56:	d017      	beq.n	8003f88 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	68db      	ldr	r3, [r3, #12]
 8003f5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003f5e:	69fb      	ldr	r3, [r7, #28]
 8003f60:	005b      	lsls	r3, r3, #1
 8003f62:	2203      	movs	r2, #3
 8003f64:	fa02 f303 	lsl.w	r3, r2, r3
 8003f68:	43db      	mvns	r3, r3
 8003f6a:	69ba      	ldr	r2, [r7, #24]
 8003f6c:	4013      	ands	r3, r2
 8003f6e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	689a      	ldr	r2, [r3, #8]
 8003f74:	69fb      	ldr	r3, [r7, #28]
 8003f76:	005b      	lsls	r3, r3, #1
 8003f78:	fa02 f303 	lsl.w	r3, r2, r3
 8003f7c:	69ba      	ldr	r2, [r7, #24]
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	69ba      	ldr	r2, [r7, #24]
 8003f86:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	f003 0303 	and.w	r3, r3, #3
 8003f90:	2b02      	cmp	r3, #2
 8003f92:	d123      	bne.n	8003fdc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003f94:	69fb      	ldr	r3, [r7, #28]
 8003f96:	08da      	lsrs	r2, r3, #3
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	3208      	adds	r2, #8
 8003f9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fa0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003fa2:	69fb      	ldr	r3, [r7, #28]
 8003fa4:	f003 0307 	and.w	r3, r3, #7
 8003fa8:	009b      	lsls	r3, r3, #2
 8003faa:	220f      	movs	r2, #15
 8003fac:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb0:	43db      	mvns	r3, r3
 8003fb2:	69ba      	ldr	r2, [r7, #24]
 8003fb4:	4013      	ands	r3, r2
 8003fb6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	691a      	ldr	r2, [r3, #16]
 8003fbc:	69fb      	ldr	r3, [r7, #28]
 8003fbe:	f003 0307 	and.w	r3, r3, #7
 8003fc2:	009b      	lsls	r3, r3, #2
 8003fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc8:	69ba      	ldr	r2, [r7, #24]
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003fce:	69fb      	ldr	r3, [r7, #28]
 8003fd0:	08da      	lsrs	r2, r3, #3
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	3208      	adds	r2, #8
 8003fd6:	69b9      	ldr	r1, [r7, #24]
 8003fd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003fe2:	69fb      	ldr	r3, [r7, #28]
 8003fe4:	005b      	lsls	r3, r3, #1
 8003fe6:	2203      	movs	r2, #3
 8003fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fec:	43db      	mvns	r3, r3
 8003fee:	69ba      	ldr	r2, [r7, #24]
 8003ff0:	4013      	ands	r3, r2
 8003ff2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	f003 0203 	and.w	r2, r3, #3
 8003ffc:	69fb      	ldr	r3, [r7, #28]
 8003ffe:	005b      	lsls	r3, r3, #1
 8004000:	fa02 f303 	lsl.w	r3, r2, r3
 8004004:	69ba      	ldr	r2, [r7, #24]
 8004006:	4313      	orrs	r3, r2
 8004008:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	69ba      	ldr	r2, [r7, #24]
 800400e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004018:	2b00      	cmp	r3, #0
 800401a:	f000 80a2 	beq.w	8004162 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800401e:	2300      	movs	r3, #0
 8004020:	60fb      	str	r3, [r7, #12]
 8004022:	4b57      	ldr	r3, [pc, #348]	; (8004180 <HAL_GPIO_Init+0x2e8>)
 8004024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004026:	4a56      	ldr	r2, [pc, #344]	; (8004180 <HAL_GPIO_Init+0x2e8>)
 8004028:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800402c:	6453      	str	r3, [r2, #68]	; 0x44
 800402e:	4b54      	ldr	r3, [pc, #336]	; (8004180 <HAL_GPIO_Init+0x2e8>)
 8004030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004032:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004036:	60fb      	str	r3, [r7, #12]
 8004038:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800403a:	4a52      	ldr	r2, [pc, #328]	; (8004184 <HAL_GPIO_Init+0x2ec>)
 800403c:	69fb      	ldr	r3, [r7, #28]
 800403e:	089b      	lsrs	r3, r3, #2
 8004040:	3302      	adds	r3, #2
 8004042:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004046:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004048:	69fb      	ldr	r3, [r7, #28]
 800404a:	f003 0303 	and.w	r3, r3, #3
 800404e:	009b      	lsls	r3, r3, #2
 8004050:	220f      	movs	r2, #15
 8004052:	fa02 f303 	lsl.w	r3, r2, r3
 8004056:	43db      	mvns	r3, r3
 8004058:	69ba      	ldr	r2, [r7, #24]
 800405a:	4013      	ands	r3, r2
 800405c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	4a49      	ldr	r2, [pc, #292]	; (8004188 <HAL_GPIO_Init+0x2f0>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d019      	beq.n	800409a <HAL_GPIO_Init+0x202>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	4a48      	ldr	r2, [pc, #288]	; (800418c <HAL_GPIO_Init+0x2f4>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d013      	beq.n	8004096 <HAL_GPIO_Init+0x1fe>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	4a47      	ldr	r2, [pc, #284]	; (8004190 <HAL_GPIO_Init+0x2f8>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d00d      	beq.n	8004092 <HAL_GPIO_Init+0x1fa>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	4a46      	ldr	r2, [pc, #280]	; (8004194 <HAL_GPIO_Init+0x2fc>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d007      	beq.n	800408e <HAL_GPIO_Init+0x1f6>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	4a45      	ldr	r2, [pc, #276]	; (8004198 <HAL_GPIO_Init+0x300>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d101      	bne.n	800408a <HAL_GPIO_Init+0x1f2>
 8004086:	2304      	movs	r3, #4
 8004088:	e008      	b.n	800409c <HAL_GPIO_Init+0x204>
 800408a:	2307      	movs	r3, #7
 800408c:	e006      	b.n	800409c <HAL_GPIO_Init+0x204>
 800408e:	2303      	movs	r3, #3
 8004090:	e004      	b.n	800409c <HAL_GPIO_Init+0x204>
 8004092:	2302      	movs	r3, #2
 8004094:	e002      	b.n	800409c <HAL_GPIO_Init+0x204>
 8004096:	2301      	movs	r3, #1
 8004098:	e000      	b.n	800409c <HAL_GPIO_Init+0x204>
 800409a:	2300      	movs	r3, #0
 800409c:	69fa      	ldr	r2, [r7, #28]
 800409e:	f002 0203 	and.w	r2, r2, #3
 80040a2:	0092      	lsls	r2, r2, #2
 80040a4:	4093      	lsls	r3, r2
 80040a6:	69ba      	ldr	r2, [r7, #24]
 80040a8:	4313      	orrs	r3, r2
 80040aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80040ac:	4935      	ldr	r1, [pc, #212]	; (8004184 <HAL_GPIO_Init+0x2ec>)
 80040ae:	69fb      	ldr	r3, [r7, #28]
 80040b0:	089b      	lsrs	r3, r3, #2
 80040b2:	3302      	adds	r3, #2
 80040b4:	69ba      	ldr	r2, [r7, #24]
 80040b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80040ba:	4b38      	ldr	r3, [pc, #224]	; (800419c <HAL_GPIO_Init+0x304>)
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	43db      	mvns	r3, r3
 80040c4:	69ba      	ldr	r2, [r7, #24]
 80040c6:	4013      	ands	r3, r2
 80040c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d003      	beq.n	80040de <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80040d6:	69ba      	ldr	r2, [r7, #24]
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	4313      	orrs	r3, r2
 80040dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80040de:	4a2f      	ldr	r2, [pc, #188]	; (800419c <HAL_GPIO_Init+0x304>)
 80040e0:	69bb      	ldr	r3, [r7, #24]
 80040e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80040e4:	4b2d      	ldr	r3, [pc, #180]	; (800419c <HAL_GPIO_Init+0x304>)
 80040e6:	68db      	ldr	r3, [r3, #12]
 80040e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	43db      	mvns	r3, r3
 80040ee:	69ba      	ldr	r2, [r7, #24]
 80040f0:	4013      	ands	r3, r2
 80040f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d003      	beq.n	8004108 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004100:	69ba      	ldr	r2, [r7, #24]
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	4313      	orrs	r3, r2
 8004106:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004108:	4a24      	ldr	r2, [pc, #144]	; (800419c <HAL_GPIO_Init+0x304>)
 800410a:	69bb      	ldr	r3, [r7, #24]
 800410c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800410e:	4b23      	ldr	r3, [pc, #140]	; (800419c <HAL_GPIO_Init+0x304>)
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	43db      	mvns	r3, r3
 8004118:	69ba      	ldr	r2, [r7, #24]
 800411a:	4013      	ands	r3, r2
 800411c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004126:	2b00      	cmp	r3, #0
 8004128:	d003      	beq.n	8004132 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800412a:	69ba      	ldr	r2, [r7, #24]
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	4313      	orrs	r3, r2
 8004130:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004132:	4a1a      	ldr	r2, [pc, #104]	; (800419c <HAL_GPIO_Init+0x304>)
 8004134:	69bb      	ldr	r3, [r7, #24]
 8004136:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004138:	4b18      	ldr	r3, [pc, #96]	; (800419c <HAL_GPIO_Init+0x304>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	43db      	mvns	r3, r3
 8004142:	69ba      	ldr	r2, [r7, #24]
 8004144:	4013      	ands	r3, r2
 8004146:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004150:	2b00      	cmp	r3, #0
 8004152:	d003      	beq.n	800415c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004154:	69ba      	ldr	r2, [r7, #24]
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	4313      	orrs	r3, r2
 800415a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800415c:	4a0f      	ldr	r2, [pc, #60]	; (800419c <HAL_GPIO_Init+0x304>)
 800415e:	69bb      	ldr	r3, [r7, #24]
 8004160:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004162:	69fb      	ldr	r3, [r7, #28]
 8004164:	3301      	adds	r3, #1
 8004166:	61fb      	str	r3, [r7, #28]
 8004168:	69fb      	ldr	r3, [r7, #28]
 800416a:	2b0f      	cmp	r3, #15
 800416c:	f67f aea2 	bls.w	8003eb4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004170:	bf00      	nop
 8004172:	bf00      	nop
 8004174:	3724      	adds	r7, #36	; 0x24
 8004176:	46bd      	mov	sp, r7
 8004178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417c:	4770      	bx	lr
 800417e:	bf00      	nop
 8004180:	40023800 	.word	0x40023800
 8004184:	40013800 	.word	0x40013800
 8004188:	40020000 	.word	0x40020000
 800418c:	40020400 	.word	0x40020400
 8004190:	40020800 	.word	0x40020800
 8004194:	40020c00 	.word	0x40020c00
 8004198:	40021000 	.word	0x40021000
 800419c:	40013c00 	.word	0x40013c00

080041a0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b087      	sub	sp, #28
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
 80041a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80041aa:	2300      	movs	r3, #0
 80041ac:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80041ae:	2300      	movs	r3, #0
 80041b0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80041b2:	2300      	movs	r3, #0
 80041b4:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80041b6:	2300      	movs	r3, #0
 80041b8:	617b      	str	r3, [r7, #20]
 80041ba:	e0bb      	b.n	8004334 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80041bc:	2201      	movs	r2, #1
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	fa02 f303 	lsl.w	r3, r2, r3
 80041c4:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80041c6:	683a      	ldr	r2, [r7, #0]
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	4013      	ands	r3, r2
 80041cc:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80041ce:	68fa      	ldr	r2, [r7, #12]
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	429a      	cmp	r2, r3
 80041d4:	f040 80ab 	bne.w	800432e <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80041d8:	4a5c      	ldr	r2, [pc, #368]	; (800434c <HAL_GPIO_DeInit+0x1ac>)
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	089b      	lsrs	r3, r3, #2
 80041de:	3302      	adds	r3, #2
 80041e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041e4:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	f003 0303 	and.w	r3, r3, #3
 80041ec:	009b      	lsls	r3, r3, #2
 80041ee:	220f      	movs	r2, #15
 80041f0:	fa02 f303 	lsl.w	r3, r2, r3
 80041f4:	68ba      	ldr	r2, [r7, #8]
 80041f6:	4013      	ands	r3, r2
 80041f8:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	4a54      	ldr	r2, [pc, #336]	; (8004350 <HAL_GPIO_DeInit+0x1b0>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d019      	beq.n	8004236 <HAL_GPIO_DeInit+0x96>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	4a53      	ldr	r2, [pc, #332]	; (8004354 <HAL_GPIO_DeInit+0x1b4>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d013      	beq.n	8004232 <HAL_GPIO_DeInit+0x92>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	4a52      	ldr	r2, [pc, #328]	; (8004358 <HAL_GPIO_DeInit+0x1b8>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d00d      	beq.n	800422e <HAL_GPIO_DeInit+0x8e>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	4a51      	ldr	r2, [pc, #324]	; (800435c <HAL_GPIO_DeInit+0x1bc>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d007      	beq.n	800422a <HAL_GPIO_DeInit+0x8a>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	4a50      	ldr	r2, [pc, #320]	; (8004360 <HAL_GPIO_DeInit+0x1c0>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d101      	bne.n	8004226 <HAL_GPIO_DeInit+0x86>
 8004222:	2304      	movs	r3, #4
 8004224:	e008      	b.n	8004238 <HAL_GPIO_DeInit+0x98>
 8004226:	2307      	movs	r3, #7
 8004228:	e006      	b.n	8004238 <HAL_GPIO_DeInit+0x98>
 800422a:	2303      	movs	r3, #3
 800422c:	e004      	b.n	8004238 <HAL_GPIO_DeInit+0x98>
 800422e:	2302      	movs	r3, #2
 8004230:	e002      	b.n	8004238 <HAL_GPIO_DeInit+0x98>
 8004232:	2301      	movs	r3, #1
 8004234:	e000      	b.n	8004238 <HAL_GPIO_DeInit+0x98>
 8004236:	2300      	movs	r3, #0
 8004238:	697a      	ldr	r2, [r7, #20]
 800423a:	f002 0203 	and.w	r2, r2, #3
 800423e:	0092      	lsls	r2, r2, #2
 8004240:	4093      	lsls	r3, r2
 8004242:	68ba      	ldr	r2, [r7, #8]
 8004244:	429a      	cmp	r2, r3
 8004246:	d132      	bne.n	80042ae <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004248:	4b46      	ldr	r3, [pc, #280]	; (8004364 <HAL_GPIO_DeInit+0x1c4>)
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	43db      	mvns	r3, r3
 8004250:	4944      	ldr	r1, [pc, #272]	; (8004364 <HAL_GPIO_DeInit+0x1c4>)
 8004252:	4013      	ands	r3, r2
 8004254:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8004256:	4b43      	ldr	r3, [pc, #268]	; (8004364 <HAL_GPIO_DeInit+0x1c4>)
 8004258:	685a      	ldr	r2, [r3, #4]
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	43db      	mvns	r3, r3
 800425e:	4941      	ldr	r1, [pc, #260]	; (8004364 <HAL_GPIO_DeInit+0x1c4>)
 8004260:	4013      	ands	r3, r2
 8004262:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004264:	4b3f      	ldr	r3, [pc, #252]	; (8004364 <HAL_GPIO_DeInit+0x1c4>)
 8004266:	68da      	ldr	r2, [r3, #12]
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	43db      	mvns	r3, r3
 800426c:	493d      	ldr	r1, [pc, #244]	; (8004364 <HAL_GPIO_DeInit+0x1c4>)
 800426e:	4013      	ands	r3, r2
 8004270:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8004272:	4b3c      	ldr	r3, [pc, #240]	; (8004364 <HAL_GPIO_DeInit+0x1c4>)
 8004274:	689a      	ldr	r2, [r3, #8]
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	43db      	mvns	r3, r3
 800427a:	493a      	ldr	r1, [pc, #232]	; (8004364 <HAL_GPIO_DeInit+0x1c4>)
 800427c:	4013      	ands	r3, r2
 800427e:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	f003 0303 	and.w	r3, r3, #3
 8004286:	009b      	lsls	r3, r3, #2
 8004288:	220f      	movs	r2, #15
 800428a:	fa02 f303 	lsl.w	r3, r2, r3
 800428e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8004290:	4a2e      	ldr	r2, [pc, #184]	; (800434c <HAL_GPIO_DeInit+0x1ac>)
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	089b      	lsrs	r3, r3, #2
 8004296:	3302      	adds	r3, #2
 8004298:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	43da      	mvns	r2, r3
 80042a0:	482a      	ldr	r0, [pc, #168]	; (800434c <HAL_GPIO_DeInit+0x1ac>)
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	089b      	lsrs	r3, r3, #2
 80042a6:	400a      	ands	r2, r1
 80042a8:	3302      	adds	r3, #2
 80042aa:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681a      	ldr	r2, [r3, #0]
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	005b      	lsls	r3, r3, #1
 80042b6:	2103      	movs	r1, #3
 80042b8:	fa01 f303 	lsl.w	r3, r1, r3
 80042bc:	43db      	mvns	r3, r3
 80042be:	401a      	ands	r2, r3
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	08da      	lsrs	r2, r3, #3
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	3208      	adds	r2, #8
 80042cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	f003 0307 	and.w	r3, r3, #7
 80042d6:	009b      	lsls	r3, r3, #2
 80042d8:	220f      	movs	r2, #15
 80042da:	fa02 f303 	lsl.w	r3, r2, r3
 80042de:	43db      	mvns	r3, r3
 80042e0:	697a      	ldr	r2, [r7, #20]
 80042e2:	08d2      	lsrs	r2, r2, #3
 80042e4:	4019      	ands	r1, r3
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	3208      	adds	r2, #8
 80042ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	68da      	ldr	r2, [r3, #12]
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	005b      	lsls	r3, r3, #1
 80042f6:	2103      	movs	r1, #3
 80042f8:	fa01 f303 	lsl.w	r3, r1, r3
 80042fc:	43db      	mvns	r3, r3
 80042fe:	401a      	ands	r2, r3
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	685a      	ldr	r2, [r3, #4]
 8004308:	2101      	movs	r1, #1
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	fa01 f303 	lsl.w	r3, r1, r3
 8004310:	43db      	mvns	r3, r3
 8004312:	401a      	ands	r2, r3
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	689a      	ldr	r2, [r3, #8]
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	005b      	lsls	r3, r3, #1
 8004320:	2103      	movs	r1, #3
 8004322:	fa01 f303 	lsl.w	r3, r1, r3
 8004326:	43db      	mvns	r3, r3
 8004328:	401a      	ands	r2, r3
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	3301      	adds	r3, #1
 8004332:	617b      	str	r3, [r7, #20]
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	2b0f      	cmp	r3, #15
 8004338:	f67f af40 	bls.w	80041bc <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800433c:	bf00      	nop
 800433e:	bf00      	nop
 8004340:	371c      	adds	r7, #28
 8004342:	46bd      	mov	sp, r7
 8004344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004348:	4770      	bx	lr
 800434a:	bf00      	nop
 800434c:	40013800 	.word	0x40013800
 8004350:	40020000 	.word	0x40020000
 8004354:	40020400 	.word	0x40020400
 8004358:	40020800 	.word	0x40020800
 800435c:	40020c00 	.word	0x40020c00
 8004360:	40021000 	.word	0x40021000
 8004364:	40013c00 	.word	0x40013c00

08004368 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004368:	b480      	push	{r7}
 800436a:	b083      	sub	sp, #12
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
 8004370:	460b      	mov	r3, r1
 8004372:	807b      	strh	r3, [r7, #2]
 8004374:	4613      	mov	r3, r2
 8004376:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004378:	787b      	ldrb	r3, [r7, #1]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d003      	beq.n	8004386 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800437e:	887a      	ldrh	r2, [r7, #2]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004384:	e003      	b.n	800438e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004386:	887b      	ldrh	r3, [r7, #2]
 8004388:	041a      	lsls	r2, r3, #16
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	619a      	str	r2, [r3, #24]
}
 800438e:	bf00      	nop
 8004390:	370c      	adds	r7, #12
 8004392:	46bd      	mov	sp, r7
 8004394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004398:	4770      	bx	lr
	...

0800439c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b084      	sub	sp, #16
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d101      	bne.n	80043ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	e12b      	b.n	8004606 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d106      	bne.n	80043c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2200      	movs	r2, #0
 80043be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f7fd fb90 	bl	8001ae8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2224      	movs	r2, #36	; 0x24
 80043cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	681a      	ldr	r2, [r3, #0]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f022 0201 	bic.w	r2, r2, #1
 80043de:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	681a      	ldr	r2, [r3, #0]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80043ee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	681a      	ldr	r2, [r3, #0]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80043fe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004400:	f002 fe72 	bl	80070e8 <HAL_RCC_GetPCLK1Freq>
 8004404:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	4a81      	ldr	r2, [pc, #516]	; (8004610 <HAL_I2C_Init+0x274>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d807      	bhi.n	8004420 <HAL_I2C_Init+0x84>
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	4a80      	ldr	r2, [pc, #512]	; (8004614 <HAL_I2C_Init+0x278>)
 8004414:	4293      	cmp	r3, r2
 8004416:	bf94      	ite	ls
 8004418:	2301      	movls	r3, #1
 800441a:	2300      	movhi	r3, #0
 800441c:	b2db      	uxtb	r3, r3
 800441e:	e006      	b.n	800442e <HAL_I2C_Init+0x92>
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	4a7d      	ldr	r2, [pc, #500]	; (8004618 <HAL_I2C_Init+0x27c>)
 8004424:	4293      	cmp	r3, r2
 8004426:	bf94      	ite	ls
 8004428:	2301      	movls	r3, #1
 800442a:	2300      	movhi	r3, #0
 800442c:	b2db      	uxtb	r3, r3
 800442e:	2b00      	cmp	r3, #0
 8004430:	d001      	beq.n	8004436 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	e0e7      	b.n	8004606 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	4a78      	ldr	r2, [pc, #480]	; (800461c <HAL_I2C_Init+0x280>)
 800443a:	fba2 2303 	umull	r2, r3, r2, r3
 800443e:	0c9b      	lsrs	r3, r3, #18
 8004440:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	68ba      	ldr	r2, [r7, #8]
 8004452:	430a      	orrs	r2, r1
 8004454:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	6a1b      	ldr	r3, [r3, #32]
 800445c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	4a6a      	ldr	r2, [pc, #424]	; (8004610 <HAL_I2C_Init+0x274>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d802      	bhi.n	8004470 <HAL_I2C_Init+0xd4>
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	3301      	adds	r3, #1
 800446e:	e009      	b.n	8004484 <HAL_I2C_Init+0xe8>
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004476:	fb02 f303 	mul.w	r3, r2, r3
 800447a:	4a69      	ldr	r2, [pc, #420]	; (8004620 <HAL_I2C_Init+0x284>)
 800447c:	fba2 2303 	umull	r2, r3, r2, r3
 8004480:	099b      	lsrs	r3, r3, #6
 8004482:	3301      	adds	r3, #1
 8004484:	687a      	ldr	r2, [r7, #4]
 8004486:	6812      	ldr	r2, [r2, #0]
 8004488:	430b      	orrs	r3, r1
 800448a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	69db      	ldr	r3, [r3, #28]
 8004492:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004496:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	495c      	ldr	r1, [pc, #368]	; (8004610 <HAL_I2C_Init+0x274>)
 80044a0:	428b      	cmp	r3, r1
 80044a2:	d819      	bhi.n	80044d8 <HAL_I2C_Init+0x13c>
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	1e59      	subs	r1, r3, #1
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	005b      	lsls	r3, r3, #1
 80044ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80044b2:	1c59      	adds	r1, r3, #1
 80044b4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80044b8:	400b      	ands	r3, r1
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d00a      	beq.n	80044d4 <HAL_I2C_Init+0x138>
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	1e59      	subs	r1, r3, #1
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	005b      	lsls	r3, r3, #1
 80044c8:	fbb1 f3f3 	udiv	r3, r1, r3
 80044cc:	3301      	adds	r3, #1
 80044ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044d2:	e051      	b.n	8004578 <HAL_I2C_Init+0x1dc>
 80044d4:	2304      	movs	r3, #4
 80044d6:	e04f      	b.n	8004578 <HAL_I2C_Init+0x1dc>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d111      	bne.n	8004504 <HAL_I2C_Init+0x168>
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	1e58      	subs	r0, r3, #1
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6859      	ldr	r1, [r3, #4]
 80044e8:	460b      	mov	r3, r1
 80044ea:	005b      	lsls	r3, r3, #1
 80044ec:	440b      	add	r3, r1
 80044ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80044f2:	3301      	adds	r3, #1
 80044f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	bf0c      	ite	eq
 80044fc:	2301      	moveq	r3, #1
 80044fe:	2300      	movne	r3, #0
 8004500:	b2db      	uxtb	r3, r3
 8004502:	e012      	b.n	800452a <HAL_I2C_Init+0x18e>
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	1e58      	subs	r0, r3, #1
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6859      	ldr	r1, [r3, #4]
 800450c:	460b      	mov	r3, r1
 800450e:	009b      	lsls	r3, r3, #2
 8004510:	440b      	add	r3, r1
 8004512:	0099      	lsls	r1, r3, #2
 8004514:	440b      	add	r3, r1
 8004516:	fbb0 f3f3 	udiv	r3, r0, r3
 800451a:	3301      	adds	r3, #1
 800451c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004520:	2b00      	cmp	r3, #0
 8004522:	bf0c      	ite	eq
 8004524:	2301      	moveq	r3, #1
 8004526:	2300      	movne	r3, #0
 8004528:	b2db      	uxtb	r3, r3
 800452a:	2b00      	cmp	r3, #0
 800452c:	d001      	beq.n	8004532 <HAL_I2C_Init+0x196>
 800452e:	2301      	movs	r3, #1
 8004530:	e022      	b.n	8004578 <HAL_I2C_Init+0x1dc>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d10e      	bne.n	8004558 <HAL_I2C_Init+0x1bc>
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	1e58      	subs	r0, r3, #1
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6859      	ldr	r1, [r3, #4]
 8004542:	460b      	mov	r3, r1
 8004544:	005b      	lsls	r3, r3, #1
 8004546:	440b      	add	r3, r1
 8004548:	fbb0 f3f3 	udiv	r3, r0, r3
 800454c:	3301      	adds	r3, #1
 800454e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004552:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004556:	e00f      	b.n	8004578 <HAL_I2C_Init+0x1dc>
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	1e58      	subs	r0, r3, #1
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6859      	ldr	r1, [r3, #4]
 8004560:	460b      	mov	r3, r1
 8004562:	009b      	lsls	r3, r3, #2
 8004564:	440b      	add	r3, r1
 8004566:	0099      	lsls	r1, r3, #2
 8004568:	440b      	add	r3, r1
 800456a:	fbb0 f3f3 	udiv	r3, r0, r3
 800456e:	3301      	adds	r3, #1
 8004570:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004574:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004578:	6879      	ldr	r1, [r7, #4]
 800457a:	6809      	ldr	r1, [r1, #0]
 800457c:	4313      	orrs	r3, r2
 800457e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	69da      	ldr	r2, [r3, #28]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6a1b      	ldr	r3, [r3, #32]
 8004592:	431a      	orrs	r2, r3
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	430a      	orrs	r2, r1
 800459a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80045a6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80045aa:	687a      	ldr	r2, [r7, #4]
 80045ac:	6911      	ldr	r1, [r2, #16]
 80045ae:	687a      	ldr	r2, [r7, #4]
 80045b0:	68d2      	ldr	r2, [r2, #12]
 80045b2:	4311      	orrs	r1, r2
 80045b4:	687a      	ldr	r2, [r7, #4]
 80045b6:	6812      	ldr	r2, [r2, #0]
 80045b8:	430b      	orrs	r3, r1
 80045ba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	68db      	ldr	r3, [r3, #12]
 80045c2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	695a      	ldr	r2, [r3, #20]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	699b      	ldr	r3, [r3, #24]
 80045ce:	431a      	orrs	r2, r3
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	430a      	orrs	r2, r1
 80045d6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	681a      	ldr	r2, [r3, #0]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f042 0201 	orr.w	r2, r2, #1
 80045e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2200      	movs	r2, #0
 80045ec:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2220      	movs	r2, #32
 80045f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2200      	movs	r2, #0
 80045fa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2200      	movs	r2, #0
 8004600:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004604:	2300      	movs	r3, #0
}
 8004606:	4618      	mov	r0, r3
 8004608:	3710      	adds	r7, #16
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}
 800460e:	bf00      	nop
 8004610:	000186a0 	.word	0x000186a0
 8004614:	001e847f 	.word	0x001e847f
 8004618:	003d08ff 	.word	0x003d08ff
 800461c:	431bde83 	.word	0x431bde83
 8004620:	10624dd3 	.word	0x10624dd3

08004624 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b088      	sub	sp, #32
 8004628:	af02      	add	r7, sp, #8
 800462a:	60f8      	str	r0, [r7, #12]
 800462c:	4608      	mov	r0, r1
 800462e:	4611      	mov	r1, r2
 8004630:	461a      	mov	r2, r3
 8004632:	4603      	mov	r3, r0
 8004634:	817b      	strh	r3, [r7, #10]
 8004636:	460b      	mov	r3, r1
 8004638:	813b      	strh	r3, [r7, #8]
 800463a:	4613      	mov	r3, r2
 800463c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800463e:	f7fe fa21 	bl	8002a84 <HAL_GetTick>
 8004642:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800464a:	b2db      	uxtb	r3, r3
 800464c:	2b20      	cmp	r3, #32
 800464e:	f040 80d9 	bne.w	8004804 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	9300      	str	r3, [sp, #0]
 8004656:	2319      	movs	r3, #25
 8004658:	2201      	movs	r2, #1
 800465a:	496d      	ldr	r1, [pc, #436]	; (8004810 <HAL_I2C_Mem_Write+0x1ec>)
 800465c:	68f8      	ldr	r0, [r7, #12]
 800465e:	f000 fd27 	bl	80050b0 <I2C_WaitOnFlagUntilTimeout>
 8004662:	4603      	mov	r3, r0
 8004664:	2b00      	cmp	r3, #0
 8004666:	d001      	beq.n	800466c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004668:	2302      	movs	r3, #2
 800466a:	e0cc      	b.n	8004806 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004672:	2b01      	cmp	r3, #1
 8004674:	d101      	bne.n	800467a <HAL_I2C_Mem_Write+0x56>
 8004676:	2302      	movs	r3, #2
 8004678:	e0c5      	b.n	8004806 <HAL_I2C_Mem_Write+0x1e2>
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2201      	movs	r2, #1
 800467e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f003 0301 	and.w	r3, r3, #1
 800468c:	2b01      	cmp	r3, #1
 800468e:	d007      	beq.n	80046a0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f042 0201 	orr.w	r2, r2, #1
 800469e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	681a      	ldr	r2, [r3, #0]
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80046ae:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2221      	movs	r2, #33	; 0x21
 80046b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	2240      	movs	r2, #64	; 0x40
 80046bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	2200      	movs	r2, #0
 80046c4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	6a3a      	ldr	r2, [r7, #32]
 80046ca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80046d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046d6:	b29a      	uxth	r2, r3
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	4a4d      	ldr	r2, [pc, #308]	; (8004814 <HAL_I2C_Mem_Write+0x1f0>)
 80046e0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80046e2:	88f8      	ldrh	r0, [r7, #6]
 80046e4:	893a      	ldrh	r2, [r7, #8]
 80046e6:	8979      	ldrh	r1, [r7, #10]
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	9301      	str	r3, [sp, #4]
 80046ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ee:	9300      	str	r3, [sp, #0]
 80046f0:	4603      	mov	r3, r0
 80046f2:	68f8      	ldr	r0, [r7, #12]
 80046f4:	f000 fa4c 	bl	8004b90 <I2C_RequestMemoryWrite>
 80046f8:	4603      	mov	r3, r0
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d052      	beq.n	80047a4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	e081      	b.n	8004806 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004702:	697a      	ldr	r2, [r7, #20]
 8004704:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004706:	68f8      	ldr	r0, [r7, #12]
 8004708:	f000 fda8 	bl	800525c <I2C_WaitOnTXEFlagUntilTimeout>
 800470c:	4603      	mov	r3, r0
 800470e:	2b00      	cmp	r3, #0
 8004710:	d00d      	beq.n	800472e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004716:	2b04      	cmp	r3, #4
 8004718:	d107      	bne.n	800472a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004728:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800472a:	2301      	movs	r3, #1
 800472c:	e06b      	b.n	8004806 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004732:	781a      	ldrb	r2, [r3, #0]
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800473e:	1c5a      	adds	r2, r3, #1
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004748:	3b01      	subs	r3, #1
 800474a:	b29a      	uxth	r2, r3
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004754:	b29b      	uxth	r3, r3
 8004756:	3b01      	subs	r3, #1
 8004758:	b29a      	uxth	r2, r3
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	695b      	ldr	r3, [r3, #20]
 8004764:	f003 0304 	and.w	r3, r3, #4
 8004768:	2b04      	cmp	r3, #4
 800476a:	d11b      	bne.n	80047a4 <HAL_I2C_Mem_Write+0x180>
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004770:	2b00      	cmp	r3, #0
 8004772:	d017      	beq.n	80047a4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004778:	781a      	ldrb	r2, [r3, #0]
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004784:	1c5a      	adds	r2, r3, #1
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800478e:	3b01      	subs	r3, #1
 8004790:	b29a      	uxth	r2, r3
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800479a:	b29b      	uxth	r3, r3
 800479c:	3b01      	subs	r3, #1
 800479e:	b29a      	uxth	r2, r3
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d1aa      	bne.n	8004702 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047ac:	697a      	ldr	r2, [r7, #20]
 80047ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80047b0:	68f8      	ldr	r0, [r7, #12]
 80047b2:	f000 fd94 	bl	80052de <I2C_WaitOnBTFFlagUntilTimeout>
 80047b6:	4603      	mov	r3, r0
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d00d      	beq.n	80047d8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c0:	2b04      	cmp	r3, #4
 80047c2:	d107      	bne.n	80047d4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047d2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80047d4:	2301      	movs	r3, #1
 80047d6:	e016      	b.n	8004806 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	681a      	ldr	r2, [r3, #0]
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	2220      	movs	r2, #32
 80047ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	2200      	movs	r2, #0
 80047f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2200      	movs	r2, #0
 80047fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004800:	2300      	movs	r3, #0
 8004802:	e000      	b.n	8004806 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004804:	2302      	movs	r3, #2
  }
}
 8004806:	4618      	mov	r0, r3
 8004808:	3718      	adds	r7, #24
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}
 800480e:	bf00      	nop
 8004810:	00100002 	.word	0x00100002
 8004814:	ffff0000 	.word	0xffff0000

08004818 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b08c      	sub	sp, #48	; 0x30
 800481c:	af02      	add	r7, sp, #8
 800481e:	60f8      	str	r0, [r7, #12]
 8004820:	4608      	mov	r0, r1
 8004822:	4611      	mov	r1, r2
 8004824:	461a      	mov	r2, r3
 8004826:	4603      	mov	r3, r0
 8004828:	817b      	strh	r3, [r7, #10]
 800482a:	460b      	mov	r3, r1
 800482c:	813b      	strh	r3, [r7, #8]
 800482e:	4613      	mov	r3, r2
 8004830:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004832:	f7fe f927 	bl	8002a84 <HAL_GetTick>
 8004836:	6278      	str	r0, [r7, #36]	; 0x24
  __IO uint32_t count = 0U;
 8004838:	2300      	movs	r3, #0
 800483a:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004842:	b2db      	uxtb	r3, r3
 8004844:	2b20      	cmp	r3, #32
 8004846:	f040 8176 	bne.w	8004b36 <HAL_I2C_Mem_Read_DMA+0x31e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800484a:	4b95      	ldr	r3, [pc, #596]	; (8004aa0 <HAL_I2C_Mem_Read_DMA+0x288>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	08db      	lsrs	r3, r3, #3
 8004850:	4a94      	ldr	r2, [pc, #592]	; (8004aa4 <HAL_I2C_Mem_Read_DMA+0x28c>)
 8004852:	fba2 2303 	umull	r2, r3, r2, r3
 8004856:	0a1a      	lsrs	r2, r3, #8
 8004858:	4613      	mov	r3, r2
 800485a:	009b      	lsls	r3, r3, #2
 800485c:	4413      	add	r3, r2
 800485e:	009a      	lsls	r2, r3, #2
 8004860:	4413      	add	r3, r2
 8004862:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 8004864:	69fb      	ldr	r3, [r7, #28]
 8004866:	3b01      	subs	r3, #1
 8004868:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 800486a:	69fb      	ldr	r3, [r7, #28]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d116      	bne.n	800489e <HAL_I2C_Mem_Read_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	2200      	movs	r2, #0
 8004874:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2220      	movs	r2, #32
 800487a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	2200      	movs	r2, #0
 8004882:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800488a:	f043 0220 	orr.w	r2, r3, #32
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2200      	movs	r2, #0
 8004896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	e14c      	b.n	8004b38 <HAL_I2C_Mem_Read_DMA+0x320>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	699b      	ldr	r3, [r3, #24]
 80048a4:	f003 0302 	and.w	r3, r3, #2
 80048a8:	2b02      	cmp	r3, #2
 80048aa:	d0db      	beq.n	8004864 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048b2:	2b01      	cmp	r3, #1
 80048b4:	d101      	bne.n	80048ba <HAL_I2C_Mem_Read_DMA+0xa2>
 80048b6:	2302      	movs	r3, #2
 80048b8:	e13e      	b.n	8004b38 <HAL_I2C_Mem_Read_DMA+0x320>
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2201      	movs	r2, #1
 80048be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f003 0301 	and.w	r3, r3, #1
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d007      	beq.n	80048e0 <HAL_I2C_Mem_Read_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	681a      	ldr	r2, [r3, #0]
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f042 0201 	orr.w	r2, r2, #1
 80048de:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	681a      	ldr	r2, [r3, #0]
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80048ee:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	2222      	movs	r2, #34	; 0x22
 80048f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2240      	movs	r2, #64	; 0x40
 80048fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2200      	movs	r2, #0
 8004904:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800490a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004910:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004916:	b29a      	uxth	r2, r3
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	4a62      	ldr	r2, [pc, #392]	; (8004aa8 <HAL_I2C_Mem_Read_DMA+0x290>)
 8004920:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8004922:	897a      	ldrh	r2, [r7, #10]
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 8004928:	893a      	ldrh	r2, [r7, #8]
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 800492e:	88fa      	ldrh	r2, [r7, #6]
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	2200      	movs	r2, #0
 8004938:	651a      	str	r2, [r3, #80]	; 0x50

    if (hi2c->XferSize > 0U)
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800493e:	2b00      	cmp	r3, #0
 8004940:	f000 80cc 	beq.w	8004adc <HAL_I2C_Mem_Read_DMA+0x2c4>
    {
      if (hi2c->hdmarx != NULL)
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004948:	2b00      	cmp	r3, #0
 800494a:	d02d      	beq.n	80049a8 <HAL_I2C_Mem_Read_DMA+0x190>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004950:	4a56      	ldr	r2, [pc, #344]	; (8004aac <HAL_I2C_Mem_Read_DMA+0x294>)
 8004952:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004958:	4a55      	ldr	r2, [pc, #340]	; (8004ab0 <HAL_I2C_Mem_Read_DMA+0x298>)
 800495a:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004960:	2200      	movs	r2, #0
 8004962:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004968:	2200      	movs	r2, #0
 800496a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004970:	2200      	movs	r2, #0
 8004972:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004978:	2200      	movs	r2, #0
 800497a:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	3310      	adds	r3, #16
 8004986:	4619      	mov	r1, r3
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800498c:	461a      	mov	r2, r3
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004992:	f7fe ff21 	bl	80037d8 <HAL_DMA_Start_IT>
 8004996:	4603      	mov	r3, r0
 8004998:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800499c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	f040 8087 	bne.w	8004ab4 <HAL_I2C_Mem_Read_DMA+0x29c>
 80049a6:	e013      	b.n	80049d0 <HAL_I2C_Mem_Read_DMA+0x1b8>
        hi2c->State     = HAL_I2C_STATE_READY;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	2220      	movs	r2, #32
 80049ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	2200      	movs	r2, #0
 80049b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049bc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2200      	movs	r2, #0
 80049c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 80049cc:	2301      	movs	r3, #1
 80049ce:	e0b3      	b.n	8004b38 <HAL_I2C_Mem_Read_DMA+0x320>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 80049d0:	88f8      	ldrh	r0, [r7, #6]
 80049d2:	893a      	ldrh	r2, [r7, #8]
 80049d4:	8979      	ldrh	r1, [r7, #10]
 80049d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d8:	9301      	str	r3, [sp, #4]
 80049da:	2323      	movs	r3, #35	; 0x23
 80049dc:	9300      	str	r3, [sp, #0]
 80049de:	4603      	mov	r3, r0
 80049e0:	68f8      	ldr	r0, [r7, #12]
 80049e2:	f000 f96b 	bl	8004cbc <I2C_RequestMemoryRead>
 80049e6:	4603      	mov	r3, r0
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d023      	beq.n	8004a34 <HAL_I2C_Mem_Read_DMA+0x21c>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049f0:	4618      	mov	r0, r3
 80049f2:	f7fe ffb9 	bl	8003968 <HAL_DMA_Abort_IT>
 80049f6:	4603      	mov	r3, r0
 80049f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a00:	2200      	movs	r2, #0
 8004a02:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	681a      	ldr	r2, [r3, #0]
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a12:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2200      	movs	r2, #0
 8004a18:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount = 0U;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	681a      	ldr	r2, [r3, #0]
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f022 0201 	bic.w	r2, r2, #1
 8004a2e:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8004a30:	2301      	movs	r3, #1
 8004a32:	e081      	b.n	8004b38 <HAL_I2C_Mem_Read_DMA+0x320>
        }

        if (hi2c->XferSize == 1U)
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	d108      	bne.n	8004a4e <HAL_I2C_Mem_Read_DMA+0x236>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	681a      	ldr	r2, [r3, #0]
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a4a:	601a      	str	r2, [r3, #0]
 8004a4c:	e007      	b.n	8004a5e <HAL_I2C_Mem_Read_DMA+0x246>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	685a      	ldr	r2, [r3, #4]
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004a5c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a5e:	2300      	movs	r3, #0
 8004a60:	61bb      	str	r3, [r7, #24]
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	695b      	ldr	r3, [r3, #20]
 8004a68:	61bb      	str	r3, [r7, #24]
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	699b      	ldr	r3, [r3, #24]
 8004a70:	61bb      	str	r3, [r7, #24]
 8004a72:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2200      	movs	r2, #0
 8004a78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	685a      	ldr	r2, [r3, #4]
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a8a:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	685a      	ldr	r2, [r3, #4]
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a9a:	605a      	str	r2, [r3, #4]
 8004a9c:	e049      	b.n	8004b32 <HAL_I2C_Mem_Read_DMA+0x31a>
 8004a9e:	bf00      	nop
 8004aa0:	20000030 	.word	0x20000030
 8004aa4:	14f8b589 	.word	0x14f8b589
 8004aa8:	ffff0000 	.word	0xffff0000
 8004aac:	08004e8d 	.word	0x08004e8d
 8004ab0:	08005037 	.word	0x08005037
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2220      	movs	r2, #32
 8004ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac8:	f043 0210 	orr.w	r2, r3, #16
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	e02d      	b.n	8004b38 <HAL_I2C_Mem_Read_DMA+0x320>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8004adc:	88f8      	ldrh	r0, [r7, #6]
 8004ade:	893a      	ldrh	r2, [r7, #8]
 8004ae0:	8979      	ldrh	r1, [r7, #10]
 8004ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae4:	9301      	str	r3, [sp, #4]
 8004ae6:	2323      	movs	r3, #35	; 0x23
 8004ae8:	9300      	str	r3, [sp, #0]
 8004aea:	4603      	mov	r3, r0
 8004aec:	68f8      	ldr	r0, [r7, #12]
 8004aee:	f000 f8e5 	bl	8004cbc <I2C_RequestMemoryRead>
 8004af2:	4603      	mov	r3, r0
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d001      	beq.n	8004afc <HAL_I2C_Mem_Read_DMA+0x2e4>
      {
        return HAL_ERROR;
 8004af8:	2301      	movs	r3, #1
 8004afa:	e01d      	b.n	8004b38 <HAL_I2C_Mem_Read_DMA+0x320>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004afc:	2300      	movs	r3, #0
 8004afe:	617b      	str	r3, [r7, #20]
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	695b      	ldr	r3, [r3, #20]
 8004b06:	617b      	str	r3, [r7, #20]
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	699b      	ldr	r3, [r3, #24]
 8004b0e:	617b      	str	r3, [r7, #20]
 8004b10:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	681a      	ldr	r2, [r3, #0]
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b20:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	2220      	movs	r2, #32
 8004b26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }

    return HAL_OK;
 8004b32:	2300      	movs	r3, #0
 8004b34:	e000      	b.n	8004b38 <HAL_I2C_Mem_Read_DMA+0x320>
  }
  else
  {
    return HAL_BUSY;
 8004b36:	2302      	movs	r3, #2
  }
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	3728      	adds	r7, #40	; 0x28
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}

08004b40 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b083      	sub	sp, #12
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004b48:	bf00      	nop
 8004b4a:	370c      	adds	r7, #12
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b52:	4770      	bx	lr

08004b54 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b083      	sub	sp, #12
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004b5c:	bf00      	nop
 8004b5e:	370c      	adds	r7, #12
 8004b60:	46bd      	mov	sp, r7
 8004b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b66:	4770      	bx	lr

08004b68 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b083      	sub	sp, #12
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004b70:	bf00      	nop
 8004b72:	370c      	adds	r7, #12
 8004b74:	46bd      	mov	sp, r7
 8004b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7a:	4770      	bx	lr

08004b7c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b083      	sub	sp, #12
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004b84:	bf00      	nop
 8004b86:	370c      	adds	r7, #12
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8e:	4770      	bx	lr

08004b90 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b088      	sub	sp, #32
 8004b94:	af02      	add	r7, sp, #8
 8004b96:	60f8      	str	r0, [r7, #12]
 8004b98:	4608      	mov	r0, r1
 8004b9a:	4611      	mov	r1, r2
 8004b9c:	461a      	mov	r2, r3
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	817b      	strh	r3, [r7, #10]
 8004ba2:	460b      	mov	r3, r1
 8004ba4:	813b      	strh	r3, [r7, #8]
 8004ba6:	4613      	mov	r3, r2
 8004ba8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	681a      	ldr	r2, [r3, #0]
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004bb8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bbc:	9300      	str	r3, [sp, #0]
 8004bbe:	6a3b      	ldr	r3, [r7, #32]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004bc6:	68f8      	ldr	r0, [r7, #12]
 8004bc8:	f000 fa72 	bl	80050b0 <I2C_WaitOnFlagUntilTimeout>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d00d      	beq.n	8004bee <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bdc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004be0:	d103      	bne.n	8004bea <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004be8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004bea:	2303      	movs	r3, #3
 8004bec:	e05f      	b.n	8004cae <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004bee:	897b      	ldrh	r3, [r7, #10]
 8004bf0:	b2db      	uxtb	r3, r3
 8004bf2:	461a      	mov	r2, r3
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004bfc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c00:	6a3a      	ldr	r2, [r7, #32]
 8004c02:	492d      	ldr	r1, [pc, #180]	; (8004cb8 <I2C_RequestMemoryWrite+0x128>)
 8004c04:	68f8      	ldr	r0, [r7, #12]
 8004c06:	f000 faaa 	bl	800515e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d001      	beq.n	8004c14 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004c10:	2301      	movs	r3, #1
 8004c12:	e04c      	b.n	8004cae <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c14:	2300      	movs	r3, #0
 8004c16:	617b      	str	r3, [r7, #20]
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	695b      	ldr	r3, [r3, #20]
 8004c1e:	617b      	str	r3, [r7, #20]
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	699b      	ldr	r3, [r3, #24]
 8004c26:	617b      	str	r3, [r7, #20]
 8004c28:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c2c:	6a39      	ldr	r1, [r7, #32]
 8004c2e:	68f8      	ldr	r0, [r7, #12]
 8004c30:	f000 fb14 	bl	800525c <I2C_WaitOnTXEFlagUntilTimeout>
 8004c34:	4603      	mov	r3, r0
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d00d      	beq.n	8004c56 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c3e:	2b04      	cmp	r3, #4
 8004c40:	d107      	bne.n	8004c52 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	681a      	ldr	r2, [r3, #0]
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c50:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	e02b      	b.n	8004cae <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004c56:	88fb      	ldrh	r3, [r7, #6]
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	d105      	bne.n	8004c68 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004c5c:	893b      	ldrh	r3, [r7, #8]
 8004c5e:	b2da      	uxtb	r2, r3
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	611a      	str	r2, [r3, #16]
 8004c66:	e021      	b.n	8004cac <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004c68:	893b      	ldrh	r3, [r7, #8]
 8004c6a:	0a1b      	lsrs	r3, r3, #8
 8004c6c:	b29b      	uxth	r3, r3
 8004c6e:	b2da      	uxtb	r2, r3
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c78:	6a39      	ldr	r1, [r7, #32]
 8004c7a:	68f8      	ldr	r0, [r7, #12]
 8004c7c:	f000 faee 	bl	800525c <I2C_WaitOnTXEFlagUntilTimeout>
 8004c80:	4603      	mov	r3, r0
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d00d      	beq.n	8004ca2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c8a:	2b04      	cmp	r3, #4
 8004c8c:	d107      	bne.n	8004c9e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	681a      	ldr	r2, [r3, #0]
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c9c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	e005      	b.n	8004cae <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004ca2:	893b      	ldrh	r3, [r7, #8]
 8004ca4:	b2da      	uxtb	r2, r3
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004cac:	2300      	movs	r3, #0
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	3718      	adds	r7, #24
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd80      	pop	{r7, pc}
 8004cb6:	bf00      	nop
 8004cb8:	00010002 	.word	0x00010002

08004cbc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b088      	sub	sp, #32
 8004cc0:	af02      	add	r7, sp, #8
 8004cc2:	60f8      	str	r0, [r7, #12]
 8004cc4:	4608      	mov	r0, r1
 8004cc6:	4611      	mov	r1, r2
 8004cc8:	461a      	mov	r2, r3
 8004cca:	4603      	mov	r3, r0
 8004ccc:	817b      	strh	r3, [r7, #10]
 8004cce:	460b      	mov	r3, r1
 8004cd0:	813b      	strh	r3, [r7, #8]
 8004cd2:	4613      	mov	r3, r2
 8004cd4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	681a      	ldr	r2, [r3, #0]
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004ce4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004cf4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf8:	9300      	str	r3, [sp, #0]
 8004cfa:	6a3b      	ldr	r3, [r7, #32]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004d02:	68f8      	ldr	r0, [r7, #12]
 8004d04:	f000 f9d4 	bl	80050b0 <I2C_WaitOnFlagUntilTimeout>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d00d      	beq.n	8004d2a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d1c:	d103      	bne.n	8004d26 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d24:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004d26:	2303      	movs	r3, #3
 8004d28:	e0aa      	b.n	8004e80 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004d2a:	897b      	ldrh	r3, [r7, #10]
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	461a      	mov	r2, r3
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004d38:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d3c:	6a3a      	ldr	r2, [r7, #32]
 8004d3e:	4952      	ldr	r1, [pc, #328]	; (8004e88 <I2C_RequestMemoryRead+0x1cc>)
 8004d40:	68f8      	ldr	r0, [r7, #12]
 8004d42:	f000 fa0c 	bl	800515e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d46:	4603      	mov	r3, r0
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d001      	beq.n	8004d50 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	e097      	b.n	8004e80 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d50:	2300      	movs	r3, #0
 8004d52:	617b      	str	r3, [r7, #20]
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	695b      	ldr	r3, [r3, #20]
 8004d5a:	617b      	str	r3, [r7, #20]
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	699b      	ldr	r3, [r3, #24]
 8004d62:	617b      	str	r3, [r7, #20]
 8004d64:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d68:	6a39      	ldr	r1, [r7, #32]
 8004d6a:	68f8      	ldr	r0, [r7, #12]
 8004d6c:	f000 fa76 	bl	800525c <I2C_WaitOnTXEFlagUntilTimeout>
 8004d70:	4603      	mov	r3, r0
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d00d      	beq.n	8004d92 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d7a:	2b04      	cmp	r3, #4
 8004d7c:	d107      	bne.n	8004d8e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	681a      	ldr	r2, [r3, #0]
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d8c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	e076      	b.n	8004e80 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004d92:	88fb      	ldrh	r3, [r7, #6]
 8004d94:	2b01      	cmp	r3, #1
 8004d96:	d105      	bne.n	8004da4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004d98:	893b      	ldrh	r3, [r7, #8]
 8004d9a:	b2da      	uxtb	r2, r3
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	611a      	str	r2, [r3, #16]
 8004da2:	e021      	b.n	8004de8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004da4:	893b      	ldrh	r3, [r7, #8]
 8004da6:	0a1b      	lsrs	r3, r3, #8
 8004da8:	b29b      	uxth	r3, r3
 8004daa:	b2da      	uxtb	r2, r3
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004db2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004db4:	6a39      	ldr	r1, [r7, #32]
 8004db6:	68f8      	ldr	r0, [r7, #12]
 8004db8:	f000 fa50 	bl	800525c <I2C_WaitOnTXEFlagUntilTimeout>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d00d      	beq.n	8004dde <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dc6:	2b04      	cmp	r3, #4
 8004dc8:	d107      	bne.n	8004dda <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	681a      	ldr	r2, [r3, #0]
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004dd8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	e050      	b.n	8004e80 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004dde:	893b      	ldrh	r3, [r7, #8]
 8004de0:	b2da      	uxtb	r2, r3
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004de8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dea:	6a39      	ldr	r1, [r7, #32]
 8004dec:	68f8      	ldr	r0, [r7, #12]
 8004dee:	f000 fa35 	bl	800525c <I2C_WaitOnTXEFlagUntilTimeout>
 8004df2:	4603      	mov	r3, r0
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d00d      	beq.n	8004e14 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dfc:	2b04      	cmp	r3, #4
 8004dfe:	d107      	bne.n	8004e10 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	681a      	ldr	r2, [r3, #0]
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e0e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004e10:	2301      	movs	r3, #1
 8004e12:	e035      	b.n	8004e80 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	681a      	ldr	r2, [r3, #0]
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e22:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e26:	9300      	str	r3, [sp, #0]
 8004e28:	6a3b      	ldr	r3, [r7, #32]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004e30:	68f8      	ldr	r0, [r7, #12]
 8004e32:	f000 f93d 	bl	80050b0 <I2C_WaitOnFlagUntilTimeout>
 8004e36:	4603      	mov	r3, r0
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d00d      	beq.n	8004e58 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e4a:	d103      	bne.n	8004e54 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e52:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004e54:	2303      	movs	r3, #3
 8004e56:	e013      	b.n	8004e80 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004e58:	897b      	ldrh	r3, [r7, #10]
 8004e5a:	b2db      	uxtb	r3, r3
 8004e5c:	f043 0301 	orr.w	r3, r3, #1
 8004e60:	b2da      	uxtb	r2, r3
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e6a:	6a3a      	ldr	r2, [r7, #32]
 8004e6c:	4906      	ldr	r1, [pc, #24]	; (8004e88 <I2C_RequestMemoryRead+0x1cc>)
 8004e6e:	68f8      	ldr	r0, [r7, #12]
 8004e70:	f000 f975 	bl	800515e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e74:	4603      	mov	r3, r0
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d001      	beq.n	8004e7e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e000      	b.n	8004e80 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004e7e:	2300      	movs	r3, #0
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	3718      	adds	r7, #24
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bd80      	pop	{r7, pc}
 8004e88:	00010002 	.word	0x00010002

08004e8c <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b086      	sub	sp, #24
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e98:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ea0:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ea8:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eae:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	685a      	ldr	r2, [r3, #4]
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004ebe:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d003      	beq.n	8004ed0 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ecc:	2200      	movs	r2, #0
 8004ece:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d003      	beq.n	8004ee0 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004edc:	2200      	movs	r2, #0
 8004ede:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8004ee0:	7cfb      	ldrb	r3, [r7, #19]
 8004ee2:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8004ee6:	2b21      	cmp	r3, #33	; 0x21
 8004ee8:	d007      	beq.n	8004efa <I2C_DMAXferCplt+0x6e>
 8004eea:	7cfb      	ldrb	r3, [r7, #19]
 8004eec:	f003 0322 	and.w	r3, r3, #34	; 0x22
 8004ef0:	2b22      	cmp	r3, #34	; 0x22
 8004ef2:	d131      	bne.n	8004f58 <I2C_DMAXferCplt+0xcc>
 8004ef4:	7cbb      	ldrb	r3, [r7, #18]
 8004ef6:	2b20      	cmp	r3, #32
 8004ef8:	d12e      	bne.n	8004f58 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	685a      	ldr	r2, [r3, #4]
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f08:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004f10:	7cfb      	ldrb	r3, [r7, #19]
 8004f12:	2b29      	cmp	r3, #41	; 0x29
 8004f14:	d10a      	bne.n	8004f2c <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	2221      	movs	r2, #33	; 0x21
 8004f1a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	2228      	movs	r2, #40	; 0x28
 8004f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004f24:	6978      	ldr	r0, [r7, #20]
 8004f26:	f7ff fe15 	bl	8004b54 <HAL_I2C_SlaveTxCpltCallback>
 8004f2a:	e00c      	b.n	8004f46 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004f2c:	7cfb      	ldrb	r3, [r7, #19]
 8004f2e:	2b2a      	cmp	r3, #42	; 0x2a
 8004f30:	d109      	bne.n	8004f46 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	2222      	movs	r2, #34	; 0x22
 8004f36:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	2228      	movs	r2, #40	; 0x28
 8004f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004f40:	6978      	ldr	r0, [r7, #20]
 8004f42:	f7ff fe11 	bl	8004b68 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	685a      	ldr	r2, [r3, #4]
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004f54:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004f56:	e06a      	b.n	800502e <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8004f58:	697b      	ldr	r3, [r7, #20]
 8004f5a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f5e:	b2db      	uxtb	r3, r3
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d064      	beq.n	800502e <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f68:	b29b      	uxth	r3, r3
 8004f6a:	2b01      	cmp	r3, #1
 8004f6c:	d107      	bne.n	8004f7e <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	681a      	ldr	r2, [r3, #0]
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f7c:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	685a      	ldr	r2, [r3, #4]
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004f8c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004f94:	d009      	beq.n	8004faa <I2C_DMAXferCplt+0x11e>
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	2b08      	cmp	r3, #8
 8004f9a:	d006      	beq.n	8004faa <I2C_DMAXferCplt+0x11e>
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004fa2:	d002      	beq.n	8004faa <I2C_DMAXferCplt+0x11e>
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	2b20      	cmp	r3, #32
 8004fa8:	d107      	bne.n	8004fba <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	681a      	ldr	r2, [r3, #0]
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fb8:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	685a      	ldr	r2, [r3, #4]
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004fc8:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	685a      	ldr	r2, [r3, #4]
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004fd8:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d003      	beq.n	8004ff0 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8004fe8:	6978      	ldr	r0, [r7, #20]
 8004fea:	f7ff fdc7 	bl	8004b7c <HAL_I2C_ErrorCallback>
}
 8004fee:	e01e      	b.n	800502e <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	2220      	movs	r2, #32
 8004ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ffe:	b2db      	uxtb	r3, r3
 8005000:	2b40      	cmp	r3, #64	; 0x40
 8005002:	d10a      	bne.n	800501a <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	2200      	movs	r2, #0
 8005008:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	2200      	movs	r2, #0
 8005010:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8005012:	6978      	ldr	r0, [r7, #20]
 8005014:	f7fc f8ae 	bl	8001174 <HAL_I2C_MemRxCpltCallback>
}
 8005018:	e009      	b.n	800502e <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	2200      	movs	r2, #0
 800501e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	2212      	movs	r2, #18
 8005026:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8005028:	6978      	ldr	r0, [r7, #20]
 800502a:	f7ff fd89 	bl	8004b40 <HAL_I2C_MasterRxCpltCallback>
}
 800502e:	bf00      	nop
 8005030:	3718      	adds	r7, #24
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}

08005036 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8005036:	b580      	push	{r7, lr}
 8005038:	b084      	sub	sp, #16
 800503a:	af00      	add	r7, sp, #0
 800503c:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005042:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005048:	2b00      	cmp	r3, #0
 800504a:	d003      	beq.n	8005054 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005050:	2200      	movs	r2, #0
 8005052:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005058:	2b00      	cmp	r3, #0
 800505a:	d003      	beq.n	8005064 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005060:	2200      	movs	r2, #0
 8005062:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8005064:	6878      	ldr	r0, [r7, #4]
 8005066:	f7fe fe2b 	bl	8003cc0 <HAL_DMA_GetError>
 800506a:	4603      	mov	r3, r0
 800506c:	2b02      	cmp	r3, #2
 800506e:	d01b      	beq.n	80050a8 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	681a      	ldr	r2, [r3, #0]
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800507e:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	2200      	movs	r2, #0
 8005084:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	2220      	movs	r2, #32
 800508a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	2200      	movs	r2, #0
 8005092:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800509a:	f043 0210 	orr.w	r2, r3, #16
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80050a2:	68f8      	ldr	r0, [r7, #12]
 80050a4:	f7ff fd6a 	bl	8004b7c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80050a8:	bf00      	nop
 80050aa:	3710      	adds	r7, #16
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bd80      	pop	{r7, pc}

080050b0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b084      	sub	sp, #16
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	60f8      	str	r0, [r7, #12]
 80050b8:	60b9      	str	r1, [r7, #8]
 80050ba:	603b      	str	r3, [r7, #0]
 80050bc:	4613      	mov	r3, r2
 80050be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80050c0:	e025      	b.n	800510e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050c8:	d021      	beq.n	800510e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050ca:	f7fd fcdb 	bl	8002a84 <HAL_GetTick>
 80050ce:	4602      	mov	r2, r0
 80050d0:	69bb      	ldr	r3, [r7, #24]
 80050d2:	1ad3      	subs	r3, r2, r3
 80050d4:	683a      	ldr	r2, [r7, #0]
 80050d6:	429a      	cmp	r2, r3
 80050d8:	d302      	bcc.n	80050e0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d116      	bne.n	800510e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	2200      	movs	r2, #0
 80050e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2220      	movs	r2, #32
 80050ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2200      	movs	r2, #0
 80050f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050fa:	f043 0220 	orr.w	r2, r3, #32
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	2200      	movs	r2, #0
 8005106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800510a:	2301      	movs	r3, #1
 800510c:	e023      	b.n	8005156 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	0c1b      	lsrs	r3, r3, #16
 8005112:	b2db      	uxtb	r3, r3
 8005114:	2b01      	cmp	r3, #1
 8005116:	d10d      	bne.n	8005134 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	695b      	ldr	r3, [r3, #20]
 800511e:	43da      	mvns	r2, r3
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	4013      	ands	r3, r2
 8005124:	b29b      	uxth	r3, r3
 8005126:	2b00      	cmp	r3, #0
 8005128:	bf0c      	ite	eq
 800512a:	2301      	moveq	r3, #1
 800512c:	2300      	movne	r3, #0
 800512e:	b2db      	uxtb	r3, r3
 8005130:	461a      	mov	r2, r3
 8005132:	e00c      	b.n	800514e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	699b      	ldr	r3, [r3, #24]
 800513a:	43da      	mvns	r2, r3
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	4013      	ands	r3, r2
 8005140:	b29b      	uxth	r3, r3
 8005142:	2b00      	cmp	r3, #0
 8005144:	bf0c      	ite	eq
 8005146:	2301      	moveq	r3, #1
 8005148:	2300      	movne	r3, #0
 800514a:	b2db      	uxtb	r3, r3
 800514c:	461a      	mov	r2, r3
 800514e:	79fb      	ldrb	r3, [r7, #7]
 8005150:	429a      	cmp	r2, r3
 8005152:	d0b6      	beq.n	80050c2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005154:	2300      	movs	r3, #0
}
 8005156:	4618      	mov	r0, r3
 8005158:	3710      	adds	r7, #16
 800515a:	46bd      	mov	sp, r7
 800515c:	bd80      	pop	{r7, pc}

0800515e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800515e:	b580      	push	{r7, lr}
 8005160:	b084      	sub	sp, #16
 8005162:	af00      	add	r7, sp, #0
 8005164:	60f8      	str	r0, [r7, #12]
 8005166:	60b9      	str	r1, [r7, #8]
 8005168:	607a      	str	r2, [r7, #4]
 800516a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800516c:	e051      	b.n	8005212 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	695b      	ldr	r3, [r3, #20]
 8005174:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005178:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800517c:	d123      	bne.n	80051c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	681a      	ldr	r2, [r3, #0]
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800518c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005196:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	2200      	movs	r2, #0
 800519c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	2220      	movs	r2, #32
 80051a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	2200      	movs	r2, #0
 80051aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051b2:	f043 0204 	orr.w	r2, r3, #4
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	2200      	movs	r2, #0
 80051be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80051c2:	2301      	movs	r3, #1
 80051c4:	e046      	b.n	8005254 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051cc:	d021      	beq.n	8005212 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051ce:	f7fd fc59 	bl	8002a84 <HAL_GetTick>
 80051d2:	4602      	mov	r2, r0
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	1ad3      	subs	r3, r2, r3
 80051d8:	687a      	ldr	r2, [r7, #4]
 80051da:	429a      	cmp	r2, r3
 80051dc:	d302      	bcc.n	80051e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d116      	bne.n	8005212 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	2200      	movs	r2, #0
 80051e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	2220      	movs	r2, #32
 80051ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	2200      	movs	r2, #0
 80051f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051fe:	f043 0220 	orr.w	r2, r3, #32
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	2200      	movs	r2, #0
 800520a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800520e:	2301      	movs	r3, #1
 8005210:	e020      	b.n	8005254 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	0c1b      	lsrs	r3, r3, #16
 8005216:	b2db      	uxtb	r3, r3
 8005218:	2b01      	cmp	r3, #1
 800521a:	d10c      	bne.n	8005236 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	695b      	ldr	r3, [r3, #20]
 8005222:	43da      	mvns	r2, r3
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	4013      	ands	r3, r2
 8005228:	b29b      	uxth	r3, r3
 800522a:	2b00      	cmp	r3, #0
 800522c:	bf14      	ite	ne
 800522e:	2301      	movne	r3, #1
 8005230:	2300      	moveq	r3, #0
 8005232:	b2db      	uxtb	r3, r3
 8005234:	e00b      	b.n	800524e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	699b      	ldr	r3, [r3, #24]
 800523c:	43da      	mvns	r2, r3
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	4013      	ands	r3, r2
 8005242:	b29b      	uxth	r3, r3
 8005244:	2b00      	cmp	r3, #0
 8005246:	bf14      	ite	ne
 8005248:	2301      	movne	r3, #1
 800524a:	2300      	moveq	r3, #0
 800524c:	b2db      	uxtb	r3, r3
 800524e:	2b00      	cmp	r3, #0
 8005250:	d18d      	bne.n	800516e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005252:	2300      	movs	r3, #0
}
 8005254:	4618      	mov	r0, r3
 8005256:	3710      	adds	r7, #16
 8005258:	46bd      	mov	sp, r7
 800525a:	bd80      	pop	{r7, pc}

0800525c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b084      	sub	sp, #16
 8005260:	af00      	add	r7, sp, #0
 8005262:	60f8      	str	r0, [r7, #12]
 8005264:	60b9      	str	r1, [r7, #8]
 8005266:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005268:	e02d      	b.n	80052c6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800526a:	68f8      	ldr	r0, [r7, #12]
 800526c:	f000 f878 	bl	8005360 <I2C_IsAcknowledgeFailed>
 8005270:	4603      	mov	r3, r0
 8005272:	2b00      	cmp	r3, #0
 8005274:	d001      	beq.n	800527a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005276:	2301      	movs	r3, #1
 8005278:	e02d      	b.n	80052d6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005280:	d021      	beq.n	80052c6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005282:	f7fd fbff 	bl	8002a84 <HAL_GetTick>
 8005286:	4602      	mov	r2, r0
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	1ad3      	subs	r3, r2, r3
 800528c:	68ba      	ldr	r2, [r7, #8]
 800528e:	429a      	cmp	r2, r3
 8005290:	d302      	bcc.n	8005298 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d116      	bne.n	80052c6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	2200      	movs	r2, #0
 800529c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	2220      	movs	r2, #32
 80052a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	2200      	movs	r2, #0
 80052aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052b2:	f043 0220 	orr.w	r2, r3, #32
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	2200      	movs	r2, #0
 80052be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80052c2:	2301      	movs	r3, #1
 80052c4:	e007      	b.n	80052d6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	695b      	ldr	r3, [r3, #20]
 80052cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052d0:	2b80      	cmp	r3, #128	; 0x80
 80052d2:	d1ca      	bne.n	800526a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80052d4:	2300      	movs	r3, #0
}
 80052d6:	4618      	mov	r0, r3
 80052d8:	3710      	adds	r7, #16
 80052da:	46bd      	mov	sp, r7
 80052dc:	bd80      	pop	{r7, pc}

080052de <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80052de:	b580      	push	{r7, lr}
 80052e0:	b084      	sub	sp, #16
 80052e2:	af00      	add	r7, sp, #0
 80052e4:	60f8      	str	r0, [r7, #12]
 80052e6:	60b9      	str	r1, [r7, #8]
 80052e8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80052ea:	e02d      	b.n	8005348 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80052ec:	68f8      	ldr	r0, [r7, #12]
 80052ee:	f000 f837 	bl	8005360 <I2C_IsAcknowledgeFailed>
 80052f2:	4603      	mov	r3, r0
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d001      	beq.n	80052fc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80052f8:	2301      	movs	r3, #1
 80052fa:	e02d      	b.n	8005358 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005302:	d021      	beq.n	8005348 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005304:	f7fd fbbe 	bl	8002a84 <HAL_GetTick>
 8005308:	4602      	mov	r2, r0
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	1ad3      	subs	r3, r2, r3
 800530e:	68ba      	ldr	r2, [r7, #8]
 8005310:	429a      	cmp	r2, r3
 8005312:	d302      	bcc.n	800531a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d116      	bne.n	8005348 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2200      	movs	r2, #0
 800531e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	2220      	movs	r2, #32
 8005324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	2200      	movs	r2, #0
 800532c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005334:	f043 0220 	orr.w	r2, r3, #32
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	2200      	movs	r2, #0
 8005340:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005344:	2301      	movs	r3, #1
 8005346:	e007      	b.n	8005358 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	695b      	ldr	r3, [r3, #20]
 800534e:	f003 0304 	and.w	r3, r3, #4
 8005352:	2b04      	cmp	r3, #4
 8005354:	d1ca      	bne.n	80052ec <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005356:	2300      	movs	r3, #0
}
 8005358:	4618      	mov	r0, r3
 800535a:	3710      	adds	r7, #16
 800535c:	46bd      	mov	sp, r7
 800535e:	bd80      	pop	{r7, pc}

08005360 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005360:	b480      	push	{r7}
 8005362:	b083      	sub	sp, #12
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	695b      	ldr	r3, [r3, #20]
 800536e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005372:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005376:	d11b      	bne.n	80053b0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005380:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2200      	movs	r2, #0
 8005386:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2220      	movs	r2, #32
 800538c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2200      	movs	r2, #0
 8005394:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800539c:	f043 0204 	orr.w	r2, r3, #4
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2200      	movs	r2, #0
 80053a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80053ac:	2301      	movs	r3, #1
 80053ae:	e000      	b.n	80053b2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80053b0:	2300      	movs	r3, #0
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	370c      	adds	r7, #12
 80053b6:	46bd      	mov	sp, r7
 80053b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053bc:	4770      	bx	lr

080053be <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80053be:	b5f0      	push	{r4, r5, r6, r7, lr}
 80053c0:	b08f      	sub	sp, #60	; 0x3c
 80053c2:	af0a      	add	r7, sp, #40	; 0x28
 80053c4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d101      	bne.n	80053d0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80053cc:	2301      	movs	r3, #1
 80053ce:	e10f      	b.n	80055f0 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80053dc:	b2db      	uxtb	r3, r3
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d106      	bne.n	80053f0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2200      	movs	r2, #0
 80053e6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f007 fd1a 	bl	800ce24 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2203      	movs	r2, #3
 80053f4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005400:	2b00      	cmp	r3, #0
 8005402:	d102      	bne.n	800540a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2200      	movs	r2, #0
 8005408:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4618      	mov	r0, r3
 8005410:	f004 f9e1 	bl	80097d6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	603b      	str	r3, [r7, #0]
 800541a:	687e      	ldr	r6, [r7, #4]
 800541c:	466d      	mov	r5, sp
 800541e:	f106 0410 	add.w	r4, r6, #16
 8005422:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005424:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005426:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005428:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800542a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800542e:	e885 0003 	stmia.w	r5, {r0, r1}
 8005432:	1d33      	adds	r3, r6, #4
 8005434:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005436:	6838      	ldr	r0, [r7, #0]
 8005438:	f004 f8b8 	bl	80095ac <USB_CoreInit>
 800543c:	4603      	mov	r3, r0
 800543e:	2b00      	cmp	r3, #0
 8005440:	d005      	beq.n	800544e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2202      	movs	r2, #2
 8005446:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800544a:	2301      	movs	r3, #1
 800544c:	e0d0      	b.n	80055f0 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	2100      	movs	r1, #0
 8005454:	4618      	mov	r0, r3
 8005456:	f004 f9cf 	bl	80097f8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800545a:	2300      	movs	r3, #0
 800545c:	73fb      	strb	r3, [r7, #15]
 800545e:	e04a      	b.n	80054f6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005460:	7bfa      	ldrb	r2, [r7, #15]
 8005462:	6879      	ldr	r1, [r7, #4]
 8005464:	4613      	mov	r3, r2
 8005466:	00db      	lsls	r3, r3, #3
 8005468:	4413      	add	r3, r2
 800546a:	009b      	lsls	r3, r3, #2
 800546c:	440b      	add	r3, r1
 800546e:	333d      	adds	r3, #61	; 0x3d
 8005470:	2201      	movs	r2, #1
 8005472:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005474:	7bfa      	ldrb	r2, [r7, #15]
 8005476:	6879      	ldr	r1, [r7, #4]
 8005478:	4613      	mov	r3, r2
 800547a:	00db      	lsls	r3, r3, #3
 800547c:	4413      	add	r3, r2
 800547e:	009b      	lsls	r3, r3, #2
 8005480:	440b      	add	r3, r1
 8005482:	333c      	adds	r3, #60	; 0x3c
 8005484:	7bfa      	ldrb	r2, [r7, #15]
 8005486:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005488:	7bfa      	ldrb	r2, [r7, #15]
 800548a:	7bfb      	ldrb	r3, [r7, #15]
 800548c:	b298      	uxth	r0, r3
 800548e:	6879      	ldr	r1, [r7, #4]
 8005490:	4613      	mov	r3, r2
 8005492:	00db      	lsls	r3, r3, #3
 8005494:	4413      	add	r3, r2
 8005496:	009b      	lsls	r3, r3, #2
 8005498:	440b      	add	r3, r1
 800549a:	3344      	adds	r3, #68	; 0x44
 800549c:	4602      	mov	r2, r0
 800549e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80054a0:	7bfa      	ldrb	r2, [r7, #15]
 80054a2:	6879      	ldr	r1, [r7, #4]
 80054a4:	4613      	mov	r3, r2
 80054a6:	00db      	lsls	r3, r3, #3
 80054a8:	4413      	add	r3, r2
 80054aa:	009b      	lsls	r3, r3, #2
 80054ac:	440b      	add	r3, r1
 80054ae:	3340      	adds	r3, #64	; 0x40
 80054b0:	2200      	movs	r2, #0
 80054b2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80054b4:	7bfa      	ldrb	r2, [r7, #15]
 80054b6:	6879      	ldr	r1, [r7, #4]
 80054b8:	4613      	mov	r3, r2
 80054ba:	00db      	lsls	r3, r3, #3
 80054bc:	4413      	add	r3, r2
 80054be:	009b      	lsls	r3, r3, #2
 80054c0:	440b      	add	r3, r1
 80054c2:	3348      	adds	r3, #72	; 0x48
 80054c4:	2200      	movs	r2, #0
 80054c6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80054c8:	7bfa      	ldrb	r2, [r7, #15]
 80054ca:	6879      	ldr	r1, [r7, #4]
 80054cc:	4613      	mov	r3, r2
 80054ce:	00db      	lsls	r3, r3, #3
 80054d0:	4413      	add	r3, r2
 80054d2:	009b      	lsls	r3, r3, #2
 80054d4:	440b      	add	r3, r1
 80054d6:	334c      	adds	r3, #76	; 0x4c
 80054d8:	2200      	movs	r2, #0
 80054da:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80054dc:	7bfa      	ldrb	r2, [r7, #15]
 80054de:	6879      	ldr	r1, [r7, #4]
 80054e0:	4613      	mov	r3, r2
 80054e2:	00db      	lsls	r3, r3, #3
 80054e4:	4413      	add	r3, r2
 80054e6:	009b      	lsls	r3, r3, #2
 80054e8:	440b      	add	r3, r1
 80054ea:	3354      	adds	r3, #84	; 0x54
 80054ec:	2200      	movs	r2, #0
 80054ee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80054f0:	7bfb      	ldrb	r3, [r7, #15]
 80054f2:	3301      	adds	r3, #1
 80054f4:	73fb      	strb	r3, [r7, #15]
 80054f6:	7bfa      	ldrb	r2, [r7, #15]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	429a      	cmp	r2, r3
 80054fe:	d3af      	bcc.n	8005460 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005500:	2300      	movs	r3, #0
 8005502:	73fb      	strb	r3, [r7, #15]
 8005504:	e044      	b.n	8005590 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005506:	7bfa      	ldrb	r2, [r7, #15]
 8005508:	6879      	ldr	r1, [r7, #4]
 800550a:	4613      	mov	r3, r2
 800550c:	00db      	lsls	r3, r3, #3
 800550e:	4413      	add	r3, r2
 8005510:	009b      	lsls	r3, r3, #2
 8005512:	440b      	add	r3, r1
 8005514:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8005518:	2200      	movs	r2, #0
 800551a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800551c:	7bfa      	ldrb	r2, [r7, #15]
 800551e:	6879      	ldr	r1, [r7, #4]
 8005520:	4613      	mov	r3, r2
 8005522:	00db      	lsls	r3, r3, #3
 8005524:	4413      	add	r3, r2
 8005526:	009b      	lsls	r3, r3, #2
 8005528:	440b      	add	r3, r1
 800552a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800552e:	7bfa      	ldrb	r2, [r7, #15]
 8005530:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005532:	7bfa      	ldrb	r2, [r7, #15]
 8005534:	6879      	ldr	r1, [r7, #4]
 8005536:	4613      	mov	r3, r2
 8005538:	00db      	lsls	r3, r3, #3
 800553a:	4413      	add	r3, r2
 800553c:	009b      	lsls	r3, r3, #2
 800553e:	440b      	add	r3, r1
 8005540:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005544:	2200      	movs	r2, #0
 8005546:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005548:	7bfa      	ldrb	r2, [r7, #15]
 800554a:	6879      	ldr	r1, [r7, #4]
 800554c:	4613      	mov	r3, r2
 800554e:	00db      	lsls	r3, r3, #3
 8005550:	4413      	add	r3, r2
 8005552:	009b      	lsls	r3, r3, #2
 8005554:	440b      	add	r3, r1
 8005556:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800555a:	2200      	movs	r2, #0
 800555c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800555e:	7bfa      	ldrb	r2, [r7, #15]
 8005560:	6879      	ldr	r1, [r7, #4]
 8005562:	4613      	mov	r3, r2
 8005564:	00db      	lsls	r3, r3, #3
 8005566:	4413      	add	r3, r2
 8005568:	009b      	lsls	r3, r3, #2
 800556a:	440b      	add	r3, r1
 800556c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8005570:	2200      	movs	r2, #0
 8005572:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005574:	7bfa      	ldrb	r2, [r7, #15]
 8005576:	6879      	ldr	r1, [r7, #4]
 8005578:	4613      	mov	r3, r2
 800557a:	00db      	lsls	r3, r3, #3
 800557c:	4413      	add	r3, r2
 800557e:	009b      	lsls	r3, r3, #2
 8005580:	440b      	add	r3, r1
 8005582:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005586:	2200      	movs	r2, #0
 8005588:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800558a:	7bfb      	ldrb	r3, [r7, #15]
 800558c:	3301      	adds	r3, #1
 800558e:	73fb      	strb	r3, [r7, #15]
 8005590:	7bfa      	ldrb	r2, [r7, #15]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	685b      	ldr	r3, [r3, #4]
 8005596:	429a      	cmp	r2, r3
 8005598:	d3b5      	bcc.n	8005506 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	603b      	str	r3, [r7, #0]
 80055a0:	687e      	ldr	r6, [r7, #4]
 80055a2:	466d      	mov	r5, sp
 80055a4:	f106 0410 	add.w	r4, r6, #16
 80055a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80055aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80055ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80055ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80055b0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80055b4:	e885 0003 	stmia.w	r5, {r0, r1}
 80055b8:	1d33      	adds	r3, r6, #4
 80055ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80055bc:	6838      	ldr	r0, [r7, #0]
 80055be:	f004 f967 	bl	8009890 <USB_DevInit>
 80055c2:	4603      	mov	r3, r0
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d005      	beq.n	80055d4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2202      	movs	r2, #2
 80055cc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80055d0:	2301      	movs	r3, #1
 80055d2:	e00d      	b.n	80055f0 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2200      	movs	r2, #0
 80055d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2201      	movs	r2, #1
 80055e0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4618      	mov	r0, r3
 80055ea:	f005 fab6 	bl	800ab5a <USB_DevDisconnect>

  return HAL_OK;
 80055ee:	2300      	movs	r3, #0
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	3714      	adds	r7, #20
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080055f8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b084      	sub	sp, #16
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800560c:	2b01      	cmp	r3, #1
 800560e:	d101      	bne.n	8005614 <HAL_PCD_Start+0x1c>
 8005610:	2302      	movs	r3, #2
 8005612:	e020      	b.n	8005656 <HAL_PCD_Start+0x5e>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2201      	movs	r2, #1
 8005618:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005620:	2b01      	cmp	r3, #1
 8005622:	d109      	bne.n	8005638 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005628:	2b01      	cmp	r3, #1
 800562a:	d005      	beq.n	8005638 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005630:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4618      	mov	r0, r3
 800563e:	f004 f8b9 	bl	80097b4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4618      	mov	r0, r3
 8005648:	f005 fa66 	bl	800ab18 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2200      	movs	r2, #0
 8005650:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005654:	2300      	movs	r3, #0
}
 8005656:	4618      	mov	r0, r3
 8005658:	3710      	adds	r7, #16
 800565a:	46bd      	mov	sp, r7
 800565c:	bd80      	pop	{r7, pc}

0800565e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800565e:	b590      	push	{r4, r7, lr}
 8005660:	b08d      	sub	sp, #52	; 0x34
 8005662:	af00      	add	r7, sp, #0
 8005664:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800566c:	6a3b      	ldr	r3, [r7, #32]
 800566e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4618      	mov	r0, r3
 8005676:	f005 fb24 	bl	800acc2 <USB_GetMode>
 800567a:	4603      	mov	r3, r0
 800567c:	2b00      	cmp	r3, #0
 800567e:	f040 848a 	bne.w	8005f96 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4618      	mov	r0, r3
 8005688:	f005 fa88 	bl	800ab9c <USB_ReadInterrupts>
 800568c:	4603      	mov	r3, r0
 800568e:	2b00      	cmp	r3, #0
 8005690:	f000 8480 	beq.w	8005f94 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8005694:	69fb      	ldr	r3, [r7, #28]
 8005696:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800569a:	689b      	ldr	r3, [r3, #8]
 800569c:	0a1b      	lsrs	r3, r3, #8
 800569e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4618      	mov	r0, r3
 80056ae:	f005 fa75 	bl	800ab9c <USB_ReadInterrupts>
 80056b2:	4603      	mov	r3, r0
 80056b4:	f003 0302 	and.w	r3, r3, #2
 80056b8:	2b02      	cmp	r3, #2
 80056ba:	d107      	bne.n	80056cc <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	695a      	ldr	r2, [r3, #20]
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f002 0202 	and.w	r2, r2, #2
 80056ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4618      	mov	r0, r3
 80056d2:	f005 fa63 	bl	800ab9c <USB_ReadInterrupts>
 80056d6:	4603      	mov	r3, r0
 80056d8:	f003 0310 	and.w	r3, r3, #16
 80056dc:	2b10      	cmp	r3, #16
 80056de:	d161      	bne.n	80057a4 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	699a      	ldr	r2, [r3, #24]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f022 0210 	bic.w	r2, r2, #16
 80056ee:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80056f0:	6a3b      	ldr	r3, [r7, #32]
 80056f2:	6a1b      	ldr	r3, [r3, #32]
 80056f4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80056f6:	69bb      	ldr	r3, [r7, #24]
 80056f8:	f003 020f 	and.w	r2, r3, #15
 80056fc:	4613      	mov	r3, r2
 80056fe:	00db      	lsls	r3, r3, #3
 8005700:	4413      	add	r3, r2
 8005702:	009b      	lsls	r3, r3, #2
 8005704:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005708:	687a      	ldr	r2, [r7, #4]
 800570a:	4413      	add	r3, r2
 800570c:	3304      	adds	r3, #4
 800570e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005710:	69bb      	ldr	r3, [r7, #24]
 8005712:	0c5b      	lsrs	r3, r3, #17
 8005714:	f003 030f 	and.w	r3, r3, #15
 8005718:	2b02      	cmp	r3, #2
 800571a:	d124      	bne.n	8005766 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800571c:	69ba      	ldr	r2, [r7, #24]
 800571e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8005722:	4013      	ands	r3, r2
 8005724:	2b00      	cmp	r3, #0
 8005726:	d035      	beq.n	8005794 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800572c:	69bb      	ldr	r3, [r7, #24]
 800572e:	091b      	lsrs	r3, r3, #4
 8005730:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005732:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005736:	b29b      	uxth	r3, r3
 8005738:	461a      	mov	r2, r3
 800573a:	6a38      	ldr	r0, [r7, #32]
 800573c:	f005 f89a 	bl	800a874 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005740:	697b      	ldr	r3, [r7, #20]
 8005742:	691a      	ldr	r2, [r3, #16]
 8005744:	69bb      	ldr	r3, [r7, #24]
 8005746:	091b      	lsrs	r3, r3, #4
 8005748:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800574c:	441a      	add	r2, r3
 800574e:	697b      	ldr	r3, [r7, #20]
 8005750:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	6a1a      	ldr	r2, [r3, #32]
 8005756:	69bb      	ldr	r3, [r7, #24]
 8005758:	091b      	lsrs	r3, r3, #4
 800575a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800575e:	441a      	add	r2, r3
 8005760:	697b      	ldr	r3, [r7, #20]
 8005762:	621a      	str	r2, [r3, #32]
 8005764:	e016      	b.n	8005794 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8005766:	69bb      	ldr	r3, [r7, #24]
 8005768:	0c5b      	lsrs	r3, r3, #17
 800576a:	f003 030f 	and.w	r3, r3, #15
 800576e:	2b06      	cmp	r3, #6
 8005770:	d110      	bne.n	8005794 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005778:	2208      	movs	r2, #8
 800577a:	4619      	mov	r1, r3
 800577c:	6a38      	ldr	r0, [r7, #32]
 800577e:	f005 f879 	bl	800a874 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	6a1a      	ldr	r2, [r3, #32]
 8005786:	69bb      	ldr	r3, [r7, #24]
 8005788:	091b      	lsrs	r3, r3, #4
 800578a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800578e:	441a      	add	r2, r3
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	699a      	ldr	r2, [r3, #24]
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f042 0210 	orr.w	r2, r2, #16
 80057a2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4618      	mov	r0, r3
 80057aa:	f005 f9f7 	bl	800ab9c <USB_ReadInterrupts>
 80057ae:	4603      	mov	r3, r0
 80057b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80057b4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80057b8:	f040 80a7 	bne.w	800590a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80057bc:	2300      	movs	r3, #0
 80057be:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4618      	mov	r0, r3
 80057c6:	f005 f9fc 	bl	800abc2 <USB_ReadDevAllOutEpInterrupt>
 80057ca:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80057cc:	e099      	b.n	8005902 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80057ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057d0:	f003 0301 	and.w	r3, r3, #1
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	f000 808e 	beq.w	80058f6 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057e0:	b2d2      	uxtb	r2, r2
 80057e2:	4611      	mov	r1, r2
 80057e4:	4618      	mov	r0, r3
 80057e6:	f005 fa20 	bl	800ac2a <USB_ReadDevOutEPInterrupt>
 80057ea:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	f003 0301 	and.w	r3, r3, #1
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d00c      	beq.n	8005810 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80057f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f8:	015a      	lsls	r2, r3, #5
 80057fa:	69fb      	ldr	r3, [r7, #28]
 80057fc:	4413      	add	r3, r2
 80057fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005802:	461a      	mov	r2, r3
 8005804:	2301      	movs	r3, #1
 8005806:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005808:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f000 feaa 	bl	8006564 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	f003 0308 	and.w	r3, r3, #8
 8005816:	2b00      	cmp	r3, #0
 8005818:	d00c      	beq.n	8005834 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800581a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800581c:	015a      	lsls	r2, r3, #5
 800581e:	69fb      	ldr	r3, [r7, #28]
 8005820:	4413      	add	r3, r2
 8005822:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005826:	461a      	mov	r2, r3
 8005828:	2308      	movs	r3, #8
 800582a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800582c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f000 ff80 	bl	8006734 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	f003 0310 	and.w	r3, r3, #16
 800583a:	2b00      	cmp	r3, #0
 800583c:	d008      	beq.n	8005850 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800583e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005840:	015a      	lsls	r2, r3, #5
 8005842:	69fb      	ldr	r3, [r7, #28]
 8005844:	4413      	add	r3, r2
 8005846:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800584a:	461a      	mov	r2, r3
 800584c:	2310      	movs	r3, #16
 800584e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8005850:	693b      	ldr	r3, [r7, #16]
 8005852:	f003 0302 	and.w	r3, r3, #2
 8005856:	2b00      	cmp	r3, #0
 8005858:	d030      	beq.n	80058bc <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800585a:	6a3b      	ldr	r3, [r7, #32]
 800585c:	695b      	ldr	r3, [r3, #20]
 800585e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005862:	2b80      	cmp	r3, #128	; 0x80
 8005864:	d109      	bne.n	800587a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8005866:	69fb      	ldr	r3, [r7, #28]
 8005868:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	69fa      	ldr	r2, [r7, #28]
 8005870:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005874:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005878:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800587a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800587c:	4613      	mov	r3, r2
 800587e:	00db      	lsls	r3, r3, #3
 8005880:	4413      	add	r3, r2
 8005882:	009b      	lsls	r3, r3, #2
 8005884:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005888:	687a      	ldr	r2, [r7, #4]
 800588a:	4413      	add	r3, r2
 800588c:	3304      	adds	r3, #4
 800588e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	78db      	ldrb	r3, [r3, #3]
 8005894:	2b01      	cmp	r3, #1
 8005896:	d108      	bne.n	80058aa <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	2200      	movs	r2, #0
 800589c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800589e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a0:	b2db      	uxtb	r3, r3
 80058a2:	4619      	mov	r1, r3
 80058a4:	6878      	ldr	r0, [r7, #4]
 80058a6:	f007 fbb9 	bl	800d01c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80058aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ac:	015a      	lsls	r2, r3, #5
 80058ae:	69fb      	ldr	r3, [r7, #28]
 80058b0:	4413      	add	r3, r2
 80058b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058b6:	461a      	mov	r2, r3
 80058b8:	2302      	movs	r3, #2
 80058ba:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	f003 0320 	and.w	r3, r3, #32
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d008      	beq.n	80058d8 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80058c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c8:	015a      	lsls	r2, r3, #5
 80058ca:	69fb      	ldr	r3, [r7, #28]
 80058cc:	4413      	add	r3, r2
 80058ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058d2:	461a      	mov	r2, r3
 80058d4:	2320      	movs	r3, #32
 80058d6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d009      	beq.n	80058f6 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80058e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e4:	015a      	lsls	r2, r3, #5
 80058e6:	69fb      	ldr	r3, [r7, #28]
 80058e8:	4413      	add	r3, r2
 80058ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058ee:	461a      	mov	r2, r3
 80058f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80058f4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80058f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f8:	3301      	adds	r3, #1
 80058fa:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80058fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058fe:	085b      	lsrs	r3, r3, #1
 8005900:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005904:	2b00      	cmp	r3, #0
 8005906:	f47f af62 	bne.w	80057ce <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4618      	mov	r0, r3
 8005910:	f005 f944 	bl	800ab9c <USB_ReadInterrupts>
 8005914:	4603      	mov	r3, r0
 8005916:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800591a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800591e:	f040 80db 	bne.w	8005ad8 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4618      	mov	r0, r3
 8005928:	f005 f965 	bl	800abf6 <USB_ReadDevAllInEpInterrupt>
 800592c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800592e:	2300      	movs	r3, #0
 8005930:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8005932:	e0cd      	b.n	8005ad0 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005936:	f003 0301 	and.w	r3, r3, #1
 800593a:	2b00      	cmp	r3, #0
 800593c:	f000 80c2 	beq.w	8005ac4 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005946:	b2d2      	uxtb	r2, r2
 8005948:	4611      	mov	r1, r2
 800594a:	4618      	mov	r0, r3
 800594c:	f005 f98b 	bl	800ac66 <USB_ReadDevInEPInterrupt>
 8005950:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005952:	693b      	ldr	r3, [r7, #16]
 8005954:	f003 0301 	and.w	r3, r3, #1
 8005958:	2b00      	cmp	r3, #0
 800595a:	d057      	beq.n	8005a0c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800595c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800595e:	f003 030f 	and.w	r3, r3, #15
 8005962:	2201      	movs	r2, #1
 8005964:	fa02 f303 	lsl.w	r3, r2, r3
 8005968:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800596a:	69fb      	ldr	r3, [r7, #28]
 800596c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005970:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	43db      	mvns	r3, r3
 8005976:	69f9      	ldr	r1, [r7, #28]
 8005978:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800597c:	4013      	ands	r3, r2
 800597e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005982:	015a      	lsls	r2, r3, #5
 8005984:	69fb      	ldr	r3, [r7, #28]
 8005986:	4413      	add	r3, r2
 8005988:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800598c:	461a      	mov	r2, r3
 800598e:	2301      	movs	r3, #1
 8005990:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	691b      	ldr	r3, [r3, #16]
 8005996:	2b01      	cmp	r3, #1
 8005998:	d132      	bne.n	8005a00 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800599a:	6879      	ldr	r1, [r7, #4]
 800599c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800599e:	4613      	mov	r3, r2
 80059a0:	00db      	lsls	r3, r3, #3
 80059a2:	4413      	add	r3, r2
 80059a4:	009b      	lsls	r3, r3, #2
 80059a6:	440b      	add	r3, r1
 80059a8:	334c      	adds	r3, #76	; 0x4c
 80059aa:	6819      	ldr	r1, [r3, #0]
 80059ac:	6878      	ldr	r0, [r7, #4]
 80059ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059b0:	4613      	mov	r3, r2
 80059b2:	00db      	lsls	r3, r3, #3
 80059b4:	4413      	add	r3, r2
 80059b6:	009b      	lsls	r3, r3, #2
 80059b8:	4403      	add	r3, r0
 80059ba:	3348      	adds	r3, #72	; 0x48
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4419      	add	r1, r3
 80059c0:	6878      	ldr	r0, [r7, #4]
 80059c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059c4:	4613      	mov	r3, r2
 80059c6:	00db      	lsls	r3, r3, #3
 80059c8:	4413      	add	r3, r2
 80059ca:	009b      	lsls	r3, r3, #2
 80059cc:	4403      	add	r3, r0
 80059ce:	334c      	adds	r3, #76	; 0x4c
 80059d0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80059d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d113      	bne.n	8005a00 <HAL_PCD_IRQHandler+0x3a2>
 80059d8:	6879      	ldr	r1, [r7, #4]
 80059da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059dc:	4613      	mov	r3, r2
 80059de:	00db      	lsls	r3, r3, #3
 80059e0:	4413      	add	r3, r2
 80059e2:	009b      	lsls	r3, r3, #2
 80059e4:	440b      	add	r3, r1
 80059e6:	3354      	adds	r3, #84	; 0x54
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d108      	bne.n	8005a00 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6818      	ldr	r0, [r3, #0]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80059f8:	461a      	mov	r2, r3
 80059fa:	2101      	movs	r1, #1
 80059fc:	f005 f992 	bl	800ad24 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a02:	b2db      	uxtb	r3, r3
 8005a04:	4619      	mov	r1, r3
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f007 fa8d 	bl	800cf26 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005a0c:	693b      	ldr	r3, [r7, #16]
 8005a0e:	f003 0308 	and.w	r3, r3, #8
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d008      	beq.n	8005a28 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a18:	015a      	lsls	r2, r3, #5
 8005a1a:	69fb      	ldr	r3, [r7, #28]
 8005a1c:	4413      	add	r3, r2
 8005a1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a22:	461a      	mov	r2, r3
 8005a24:	2308      	movs	r3, #8
 8005a26:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005a28:	693b      	ldr	r3, [r7, #16]
 8005a2a:	f003 0310 	and.w	r3, r3, #16
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d008      	beq.n	8005a44 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a34:	015a      	lsls	r2, r3, #5
 8005a36:	69fb      	ldr	r3, [r7, #28]
 8005a38:	4413      	add	r3, r2
 8005a3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a3e:	461a      	mov	r2, r3
 8005a40:	2310      	movs	r3, #16
 8005a42:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005a44:	693b      	ldr	r3, [r7, #16]
 8005a46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d008      	beq.n	8005a60 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a50:	015a      	lsls	r2, r3, #5
 8005a52:	69fb      	ldr	r3, [r7, #28]
 8005a54:	4413      	add	r3, r2
 8005a56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a5a:	461a      	mov	r2, r3
 8005a5c:	2340      	movs	r3, #64	; 0x40
 8005a5e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	f003 0302 	and.w	r3, r3, #2
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d023      	beq.n	8005ab2 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8005a6a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005a6c:	6a38      	ldr	r0, [r7, #32]
 8005a6e:	f004 f873 	bl	8009b58 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8005a72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a74:	4613      	mov	r3, r2
 8005a76:	00db      	lsls	r3, r3, #3
 8005a78:	4413      	add	r3, r2
 8005a7a:	009b      	lsls	r3, r3, #2
 8005a7c:	3338      	adds	r3, #56	; 0x38
 8005a7e:	687a      	ldr	r2, [r7, #4]
 8005a80:	4413      	add	r3, r2
 8005a82:	3304      	adds	r3, #4
 8005a84:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005a86:	697b      	ldr	r3, [r7, #20]
 8005a88:	78db      	ldrb	r3, [r3, #3]
 8005a8a:	2b01      	cmp	r3, #1
 8005a8c:	d108      	bne.n	8005aa0 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	2200      	movs	r2, #0
 8005a92:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a96:	b2db      	uxtb	r3, r3
 8005a98:	4619      	mov	r1, r3
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f007 fad0 	bl	800d040 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa2:	015a      	lsls	r2, r3, #5
 8005aa4:	69fb      	ldr	r3, [r7, #28]
 8005aa6:	4413      	add	r3, r2
 8005aa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005aac:	461a      	mov	r2, r3
 8005aae:	2302      	movs	r3, #2
 8005ab0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d003      	beq.n	8005ac4 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005abc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f000 fcc3 	bl	800644a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac6:	3301      	adds	r3, #1
 8005ac8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005acc:	085b      	lsrs	r3, r3, #1
 8005ace:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	f47f af2e 	bne.w	8005934 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4618      	mov	r0, r3
 8005ade:	f005 f85d 	bl	800ab9c <USB_ReadInterrupts>
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ae8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005aec:	d122      	bne.n	8005b34 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005aee:	69fb      	ldr	r3, [r7, #28]
 8005af0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	69fa      	ldr	r2, [r7, #28]
 8005af8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005afc:	f023 0301 	bic.w	r3, r3, #1
 8005b00:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8005b08:	2b01      	cmp	r3, #1
 8005b0a:	d108      	bne.n	8005b1e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005b14:	2100      	movs	r1, #0
 8005b16:	6878      	ldr	r0, [r7, #4]
 8005b18:	f000 feaa 	bl	8006870 <HAL_PCDEx_LPM_Callback>
 8005b1c:	e002      	b.n	8005b24 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f007 fa6e 	bl	800d000 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	695a      	ldr	r2, [r3, #20]
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005b32:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4618      	mov	r0, r3
 8005b3a:	f005 f82f 	bl	800ab9c <USB_ReadInterrupts>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b48:	d112      	bne.n	8005b70 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005b4a:	69fb      	ldr	r3, [r7, #28]
 8005b4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b50:	689b      	ldr	r3, [r3, #8]
 8005b52:	f003 0301 	and.w	r3, r3, #1
 8005b56:	2b01      	cmp	r3, #1
 8005b58:	d102      	bne.n	8005b60 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f007 fa2a 	bl	800cfb4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	695a      	ldr	r2, [r3, #20]
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8005b6e:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4618      	mov	r0, r3
 8005b76:	f005 f811 	bl	800ab9c <USB_ReadInterrupts>
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b84:	f040 80b7 	bne.w	8005cf6 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005b88:	69fb      	ldr	r3, [r7, #28]
 8005b8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b8e:	685b      	ldr	r3, [r3, #4]
 8005b90:	69fa      	ldr	r2, [r7, #28]
 8005b92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b96:	f023 0301 	bic.w	r3, r3, #1
 8005b9a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	2110      	movs	r1, #16
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	f003 ffd8 	bl	8009b58 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005ba8:	2300      	movs	r3, #0
 8005baa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005bac:	e046      	b.n	8005c3c <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bb0:	015a      	lsls	r2, r3, #5
 8005bb2:	69fb      	ldr	r3, [r7, #28]
 8005bb4:	4413      	add	r3, r2
 8005bb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bba:	461a      	mov	r2, r3
 8005bbc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005bc0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005bc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bc4:	015a      	lsls	r2, r3, #5
 8005bc6:	69fb      	ldr	r3, [r7, #28]
 8005bc8:	4413      	add	r3, r2
 8005bca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005bd2:	0151      	lsls	r1, r2, #5
 8005bd4:	69fa      	ldr	r2, [r7, #28]
 8005bd6:	440a      	add	r2, r1
 8005bd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bdc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005be0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005be4:	015a      	lsls	r2, r3, #5
 8005be6:	69fb      	ldr	r3, [r7, #28]
 8005be8:	4413      	add	r3, r2
 8005bea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bee:	461a      	mov	r2, r3
 8005bf0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005bf4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bf8:	015a      	lsls	r2, r3, #5
 8005bfa:	69fb      	ldr	r3, [r7, #28]
 8005bfc:	4413      	add	r3, r2
 8005bfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c06:	0151      	lsls	r1, r2, #5
 8005c08:	69fa      	ldr	r2, [r7, #28]
 8005c0a:	440a      	add	r2, r1
 8005c0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c10:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005c14:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c18:	015a      	lsls	r2, r3, #5
 8005c1a:	69fb      	ldr	r3, [r7, #28]
 8005c1c:	4413      	add	r3, r2
 8005c1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c26:	0151      	lsls	r1, r2, #5
 8005c28:	69fa      	ldr	r2, [r7, #28]
 8005c2a:	440a      	add	r2, r1
 8005c2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c30:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005c34:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c38:	3301      	adds	r3, #1
 8005c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	685b      	ldr	r3, [r3, #4]
 8005c40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c42:	429a      	cmp	r2, r3
 8005c44:	d3b3      	bcc.n	8005bae <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005c46:	69fb      	ldr	r3, [r7, #28]
 8005c48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c4c:	69db      	ldr	r3, [r3, #28]
 8005c4e:	69fa      	ldr	r2, [r7, #28]
 8005c50:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c54:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8005c58:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d016      	beq.n	8005c90 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005c62:	69fb      	ldr	r3, [r7, #28]
 8005c64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c6c:	69fa      	ldr	r2, [r7, #28]
 8005c6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c72:	f043 030b 	orr.w	r3, r3, #11
 8005c76:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005c7a:	69fb      	ldr	r3, [r7, #28]
 8005c7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c82:	69fa      	ldr	r2, [r7, #28]
 8005c84:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c88:	f043 030b 	orr.w	r3, r3, #11
 8005c8c:	6453      	str	r3, [r2, #68]	; 0x44
 8005c8e:	e015      	b.n	8005cbc <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005c90:	69fb      	ldr	r3, [r7, #28]
 8005c92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c96:	695b      	ldr	r3, [r3, #20]
 8005c98:	69fa      	ldr	r2, [r7, #28]
 8005c9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c9e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005ca2:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8005ca6:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005ca8:	69fb      	ldr	r3, [r7, #28]
 8005caa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cae:	691b      	ldr	r3, [r3, #16]
 8005cb0:	69fa      	ldr	r2, [r7, #28]
 8005cb2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005cb6:	f043 030b 	orr.w	r3, r3, #11
 8005cba:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005cbc:	69fb      	ldr	r3, [r7, #28]
 8005cbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	69fa      	ldr	r2, [r7, #28]
 8005cc6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005cca:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005cce:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6818      	ldr	r0, [r3, #0]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	691b      	ldr	r3, [r3, #16]
 8005cd8:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005ce0:	461a      	mov	r2, r3
 8005ce2:	f005 f81f 	bl	800ad24 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	695a      	ldr	r2, [r3, #20]
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005cf4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	f004 ff4e 	bl	800ab9c <USB_ReadInterrupts>
 8005d00:	4603      	mov	r3, r0
 8005d02:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005d06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d0a:	d124      	bne.n	8005d56 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4618      	mov	r0, r3
 8005d12:	f004 ffe4 	bl	800acde <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	f003 ff99 	bl	8009c52 <USB_GetDevSpeed>
 8005d20:	4603      	mov	r3, r0
 8005d22:	461a      	mov	r2, r3
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681c      	ldr	r4, [r3, #0]
 8005d2c:	f001 f9d0 	bl	80070d0 <HAL_RCC_GetHCLKFreq>
 8005d30:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005d36:	b2db      	uxtb	r3, r3
 8005d38:	461a      	mov	r2, r3
 8005d3a:	4620      	mov	r0, r4
 8005d3c:	f003 fc98 	bl	8009670 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005d40:	6878      	ldr	r0, [r7, #4]
 8005d42:	f007 f918 	bl	800cf76 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	695a      	ldr	r2, [r3, #20]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005d54:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	f004 ff1e 	bl	800ab9c <USB_ReadInterrupts>
 8005d60:	4603      	mov	r3, r0
 8005d62:	f003 0308 	and.w	r3, r3, #8
 8005d66:	2b08      	cmp	r3, #8
 8005d68:	d10a      	bne.n	8005d80 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	f007 f8f5 	bl	800cf5a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	695a      	ldr	r2, [r3, #20]
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f002 0208 	and.w	r2, r2, #8
 8005d7e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4618      	mov	r0, r3
 8005d86:	f004 ff09 	bl	800ab9c <USB_ReadInterrupts>
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d90:	2b80      	cmp	r3, #128	; 0x80
 8005d92:	d122      	bne.n	8005dda <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8005d94:	6a3b      	ldr	r3, [r7, #32]
 8005d96:	699b      	ldr	r3, [r3, #24]
 8005d98:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005d9c:	6a3b      	ldr	r3, [r7, #32]
 8005d9e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005da0:	2301      	movs	r3, #1
 8005da2:	627b      	str	r3, [r7, #36]	; 0x24
 8005da4:	e014      	b.n	8005dd0 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8005da6:	6879      	ldr	r1, [r7, #4]
 8005da8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005daa:	4613      	mov	r3, r2
 8005dac:	00db      	lsls	r3, r3, #3
 8005dae:	4413      	add	r3, r2
 8005db0:	009b      	lsls	r3, r3, #2
 8005db2:	440b      	add	r3, r1
 8005db4:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8005db8:	781b      	ldrb	r3, [r3, #0]
 8005dba:	2b01      	cmp	r3, #1
 8005dbc:	d105      	bne.n	8005dca <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8005dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc0:	b2db      	uxtb	r3, r3
 8005dc2:	4619      	mov	r1, r3
 8005dc4:	6878      	ldr	r0, [r7, #4]
 8005dc6:	f000 fb0f 	bl	80063e8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dcc:	3301      	adds	r3, #1
 8005dce:	627b      	str	r3, [r7, #36]	; 0x24
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dd6:	429a      	cmp	r2, r3
 8005dd8:	d3e5      	bcc.n	8005da6 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4618      	mov	r0, r3
 8005de0:	f004 fedc 	bl	800ab9c <USB_ReadInterrupts>
 8005de4:	4603      	mov	r3, r0
 8005de6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005dea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005dee:	d13b      	bne.n	8005e68 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005df0:	2301      	movs	r3, #1
 8005df2:	627b      	str	r3, [r7, #36]	; 0x24
 8005df4:	e02b      	b.n	8005e4e <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8005df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df8:	015a      	lsls	r2, r3, #5
 8005dfa:	69fb      	ldr	r3, [r7, #28]
 8005dfc:	4413      	add	r3, r2
 8005dfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005e06:	6879      	ldr	r1, [r7, #4]
 8005e08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e0a:	4613      	mov	r3, r2
 8005e0c:	00db      	lsls	r3, r3, #3
 8005e0e:	4413      	add	r3, r2
 8005e10:	009b      	lsls	r3, r3, #2
 8005e12:	440b      	add	r3, r1
 8005e14:	3340      	adds	r3, #64	; 0x40
 8005e16:	781b      	ldrb	r3, [r3, #0]
 8005e18:	2b01      	cmp	r3, #1
 8005e1a:	d115      	bne.n	8005e48 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8005e1c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	da12      	bge.n	8005e48 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005e22:	6879      	ldr	r1, [r7, #4]
 8005e24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e26:	4613      	mov	r3, r2
 8005e28:	00db      	lsls	r3, r3, #3
 8005e2a:	4413      	add	r3, r2
 8005e2c:	009b      	lsls	r3, r3, #2
 8005e2e:	440b      	add	r3, r1
 8005e30:	333f      	adds	r3, #63	; 0x3f
 8005e32:	2201      	movs	r2, #1
 8005e34:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8005e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e38:	b2db      	uxtb	r3, r3
 8005e3a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005e3e:	b2db      	uxtb	r3, r3
 8005e40:	4619      	mov	r1, r3
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f000 fad0 	bl	80063e8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e4a:	3301      	adds	r3, #1
 8005e4c:	627b      	str	r3, [r7, #36]	; 0x24
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e54:	429a      	cmp	r2, r3
 8005e56:	d3ce      	bcc.n	8005df6 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	695a      	ldr	r2, [r3, #20]
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8005e66:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	f004 fe95 	bl	800ab9c <USB_ReadInterrupts>
 8005e72:	4603      	mov	r3, r0
 8005e74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005e78:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005e7c:	d155      	bne.n	8005f2a <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005e7e:	2301      	movs	r3, #1
 8005e80:	627b      	str	r3, [r7, #36]	; 0x24
 8005e82:	e045      	b.n	8005f10 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8005e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e86:	015a      	lsls	r2, r3, #5
 8005e88:	69fb      	ldr	r3, [r7, #28]
 8005e8a:	4413      	add	r3, r2
 8005e8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005e94:	6879      	ldr	r1, [r7, #4]
 8005e96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e98:	4613      	mov	r3, r2
 8005e9a:	00db      	lsls	r3, r3, #3
 8005e9c:	4413      	add	r3, r2
 8005e9e:	009b      	lsls	r3, r3, #2
 8005ea0:	440b      	add	r3, r1
 8005ea2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005ea6:	781b      	ldrb	r3, [r3, #0]
 8005ea8:	2b01      	cmp	r3, #1
 8005eaa:	d12e      	bne.n	8005f0a <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005eac:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	da2b      	bge.n	8005f0a <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8005eb2:	69bb      	ldr	r3, [r7, #24]
 8005eb4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8005ebe:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005ec2:	429a      	cmp	r2, r3
 8005ec4:	d121      	bne.n	8005f0a <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8005ec6:	6879      	ldr	r1, [r7, #4]
 8005ec8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005eca:	4613      	mov	r3, r2
 8005ecc:	00db      	lsls	r3, r3, #3
 8005ece:	4413      	add	r3, r2
 8005ed0:	009b      	lsls	r3, r3, #2
 8005ed2:	440b      	add	r3, r1
 8005ed4:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8005ed8:	2201      	movs	r2, #1
 8005eda:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005edc:	6a3b      	ldr	r3, [r7, #32]
 8005ede:	699b      	ldr	r3, [r3, #24]
 8005ee0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005ee4:	6a3b      	ldr	r3, [r7, #32]
 8005ee6:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8005ee8:	6a3b      	ldr	r3, [r7, #32]
 8005eea:	695b      	ldr	r3, [r3, #20]
 8005eec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d10a      	bne.n	8005f0a <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8005ef4:	69fb      	ldr	r3, [r7, #28]
 8005ef6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005efa:	685b      	ldr	r3, [r3, #4]
 8005efc:	69fa      	ldr	r2, [r7, #28]
 8005efe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005f06:	6053      	str	r3, [r2, #4]
            break;
 8005f08:	e007      	b.n	8005f1a <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f0c:	3301      	adds	r3, #1
 8005f0e:	627b      	str	r3, [r7, #36]	; 0x24
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f16:	429a      	cmp	r2, r3
 8005f18:	d3b4      	bcc.n	8005e84 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	695a      	ldr	r2, [r3, #20]
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8005f28:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4618      	mov	r0, r3
 8005f30:	f004 fe34 	bl	800ab9c <USB_ReadInterrupts>
 8005f34:	4603      	mov	r3, r0
 8005f36:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005f3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f3e:	d10a      	bne.n	8005f56 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005f40:	6878      	ldr	r0, [r7, #4]
 8005f42:	f007 f88f 	bl	800d064 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	695a      	ldr	r2, [r3, #20]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005f54:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	f004 fe1e 	bl	800ab9c <USB_ReadInterrupts>
 8005f60:	4603      	mov	r3, r0
 8005f62:	f003 0304 	and.w	r3, r3, #4
 8005f66:	2b04      	cmp	r3, #4
 8005f68:	d115      	bne.n	8005f96 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	685b      	ldr	r3, [r3, #4]
 8005f70:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005f72:	69bb      	ldr	r3, [r7, #24]
 8005f74:	f003 0304 	and.w	r3, r3, #4
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d002      	beq.n	8005f82 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005f7c:	6878      	ldr	r0, [r7, #4]
 8005f7e:	f007 f87f 	bl	800d080 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	6859      	ldr	r1, [r3, #4]
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	69ba      	ldr	r2, [r7, #24]
 8005f8e:	430a      	orrs	r2, r1
 8005f90:	605a      	str	r2, [r3, #4]
 8005f92:	e000      	b.n	8005f96 <HAL_PCD_IRQHandler+0x938>
      return;
 8005f94:	bf00      	nop
    }
  }
}
 8005f96:	3734      	adds	r7, #52	; 0x34
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bd90      	pop	{r4, r7, pc}

08005f9c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b082      	sub	sp, #8
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
 8005fa4:	460b      	mov	r3, r1
 8005fa6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005fae:	2b01      	cmp	r3, #1
 8005fb0:	d101      	bne.n	8005fb6 <HAL_PCD_SetAddress+0x1a>
 8005fb2:	2302      	movs	r3, #2
 8005fb4:	e013      	b.n	8005fde <HAL_PCD_SetAddress+0x42>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2201      	movs	r2, #1
 8005fba:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	78fa      	ldrb	r2, [r7, #3]
 8005fc2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	78fa      	ldrb	r2, [r7, #3]
 8005fcc:	4611      	mov	r1, r2
 8005fce:	4618      	mov	r0, r3
 8005fd0:	f004 fd7c 	bl	800aacc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005fdc:	2300      	movs	r3, #0
}
 8005fde:	4618      	mov	r0, r3
 8005fe0:	3708      	adds	r7, #8
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bd80      	pop	{r7, pc}

08005fe6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005fe6:	b580      	push	{r7, lr}
 8005fe8:	b084      	sub	sp, #16
 8005fea:	af00      	add	r7, sp, #0
 8005fec:	6078      	str	r0, [r7, #4]
 8005fee:	4608      	mov	r0, r1
 8005ff0:	4611      	mov	r1, r2
 8005ff2:	461a      	mov	r2, r3
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	70fb      	strb	r3, [r7, #3]
 8005ff8:	460b      	mov	r3, r1
 8005ffa:	803b      	strh	r3, [r7, #0]
 8005ffc:	4613      	mov	r3, r2
 8005ffe:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8006000:	2300      	movs	r3, #0
 8006002:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006004:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006008:	2b00      	cmp	r3, #0
 800600a:	da0f      	bge.n	800602c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800600c:	78fb      	ldrb	r3, [r7, #3]
 800600e:	f003 020f 	and.w	r2, r3, #15
 8006012:	4613      	mov	r3, r2
 8006014:	00db      	lsls	r3, r3, #3
 8006016:	4413      	add	r3, r2
 8006018:	009b      	lsls	r3, r3, #2
 800601a:	3338      	adds	r3, #56	; 0x38
 800601c:	687a      	ldr	r2, [r7, #4]
 800601e:	4413      	add	r3, r2
 8006020:	3304      	adds	r3, #4
 8006022:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	2201      	movs	r2, #1
 8006028:	705a      	strb	r2, [r3, #1]
 800602a:	e00f      	b.n	800604c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800602c:	78fb      	ldrb	r3, [r7, #3]
 800602e:	f003 020f 	and.w	r2, r3, #15
 8006032:	4613      	mov	r3, r2
 8006034:	00db      	lsls	r3, r3, #3
 8006036:	4413      	add	r3, r2
 8006038:	009b      	lsls	r3, r3, #2
 800603a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800603e:	687a      	ldr	r2, [r7, #4]
 8006040:	4413      	add	r3, r2
 8006042:	3304      	adds	r3, #4
 8006044:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	2200      	movs	r2, #0
 800604a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800604c:	78fb      	ldrb	r3, [r7, #3]
 800604e:	f003 030f 	and.w	r3, r3, #15
 8006052:	b2da      	uxtb	r2, r3
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8006058:	883a      	ldrh	r2, [r7, #0]
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	78ba      	ldrb	r2, [r7, #2]
 8006062:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	785b      	ldrb	r3, [r3, #1]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d004      	beq.n	8006076 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	781b      	ldrb	r3, [r3, #0]
 8006070:	b29a      	uxth	r2, r3
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006076:	78bb      	ldrb	r3, [r7, #2]
 8006078:	2b02      	cmp	r3, #2
 800607a:	d102      	bne.n	8006082 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	2200      	movs	r2, #0
 8006080:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006088:	2b01      	cmp	r3, #1
 800608a:	d101      	bne.n	8006090 <HAL_PCD_EP_Open+0xaa>
 800608c:	2302      	movs	r3, #2
 800608e:	e00e      	b.n	80060ae <HAL_PCD_EP_Open+0xc8>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2201      	movs	r2, #1
 8006094:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	68f9      	ldr	r1, [r7, #12]
 800609e:	4618      	mov	r0, r3
 80060a0:	f003 fdfc 	bl	8009c9c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2200      	movs	r2, #0
 80060a8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80060ac:	7afb      	ldrb	r3, [r7, #11]
}
 80060ae:	4618      	mov	r0, r3
 80060b0:	3710      	adds	r7, #16
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bd80      	pop	{r7, pc}

080060b6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80060b6:	b580      	push	{r7, lr}
 80060b8:	b084      	sub	sp, #16
 80060ba:	af00      	add	r7, sp, #0
 80060bc:	6078      	str	r0, [r7, #4]
 80060be:	460b      	mov	r3, r1
 80060c0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80060c2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	da0f      	bge.n	80060ea <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80060ca:	78fb      	ldrb	r3, [r7, #3]
 80060cc:	f003 020f 	and.w	r2, r3, #15
 80060d0:	4613      	mov	r3, r2
 80060d2:	00db      	lsls	r3, r3, #3
 80060d4:	4413      	add	r3, r2
 80060d6:	009b      	lsls	r3, r3, #2
 80060d8:	3338      	adds	r3, #56	; 0x38
 80060da:	687a      	ldr	r2, [r7, #4]
 80060dc:	4413      	add	r3, r2
 80060de:	3304      	adds	r3, #4
 80060e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	2201      	movs	r2, #1
 80060e6:	705a      	strb	r2, [r3, #1]
 80060e8:	e00f      	b.n	800610a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80060ea:	78fb      	ldrb	r3, [r7, #3]
 80060ec:	f003 020f 	and.w	r2, r3, #15
 80060f0:	4613      	mov	r3, r2
 80060f2:	00db      	lsls	r3, r3, #3
 80060f4:	4413      	add	r3, r2
 80060f6:	009b      	lsls	r3, r3, #2
 80060f8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80060fc:	687a      	ldr	r2, [r7, #4]
 80060fe:	4413      	add	r3, r2
 8006100:	3304      	adds	r3, #4
 8006102:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	2200      	movs	r2, #0
 8006108:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800610a:	78fb      	ldrb	r3, [r7, #3]
 800610c:	f003 030f 	and.w	r3, r3, #15
 8006110:	b2da      	uxtb	r2, r3
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800611c:	2b01      	cmp	r3, #1
 800611e:	d101      	bne.n	8006124 <HAL_PCD_EP_Close+0x6e>
 8006120:	2302      	movs	r3, #2
 8006122:	e00e      	b.n	8006142 <HAL_PCD_EP_Close+0x8c>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2201      	movs	r2, #1
 8006128:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	68f9      	ldr	r1, [r7, #12]
 8006132:	4618      	mov	r0, r3
 8006134:	f003 fe3a 	bl	8009dac <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2200      	movs	r2, #0
 800613c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8006140:	2300      	movs	r3, #0
}
 8006142:	4618      	mov	r0, r3
 8006144:	3710      	adds	r7, #16
 8006146:	46bd      	mov	sp, r7
 8006148:	bd80      	pop	{r7, pc}

0800614a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800614a:	b580      	push	{r7, lr}
 800614c:	b086      	sub	sp, #24
 800614e:	af00      	add	r7, sp, #0
 8006150:	60f8      	str	r0, [r7, #12]
 8006152:	607a      	str	r2, [r7, #4]
 8006154:	603b      	str	r3, [r7, #0]
 8006156:	460b      	mov	r3, r1
 8006158:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800615a:	7afb      	ldrb	r3, [r7, #11]
 800615c:	f003 020f 	and.w	r2, r3, #15
 8006160:	4613      	mov	r3, r2
 8006162:	00db      	lsls	r3, r3, #3
 8006164:	4413      	add	r3, r2
 8006166:	009b      	lsls	r3, r3, #2
 8006168:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800616c:	68fa      	ldr	r2, [r7, #12]
 800616e:	4413      	add	r3, r2
 8006170:	3304      	adds	r3, #4
 8006172:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	687a      	ldr	r2, [r7, #4]
 8006178:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	683a      	ldr	r2, [r7, #0]
 800617e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	2200      	movs	r2, #0
 8006184:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8006186:	697b      	ldr	r3, [r7, #20]
 8006188:	2200      	movs	r2, #0
 800618a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800618c:	7afb      	ldrb	r3, [r7, #11]
 800618e:	f003 030f 	and.w	r3, r3, #15
 8006192:	b2da      	uxtb	r2, r3
 8006194:	697b      	ldr	r3, [r7, #20]
 8006196:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	691b      	ldr	r3, [r3, #16]
 800619c:	2b01      	cmp	r3, #1
 800619e:	d102      	bne.n	80061a6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80061a0:	687a      	ldr	r2, [r7, #4]
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80061a6:	7afb      	ldrb	r3, [r7, #11]
 80061a8:	f003 030f 	and.w	r3, r3, #15
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d109      	bne.n	80061c4 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	6818      	ldr	r0, [r3, #0]
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	691b      	ldr	r3, [r3, #16]
 80061b8:	b2db      	uxtb	r3, r3
 80061ba:	461a      	mov	r2, r3
 80061bc:	6979      	ldr	r1, [r7, #20]
 80061be:	f004 f919 	bl	800a3f4 <USB_EP0StartXfer>
 80061c2:	e008      	b.n	80061d6 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	6818      	ldr	r0, [r3, #0]
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	691b      	ldr	r3, [r3, #16]
 80061cc:	b2db      	uxtb	r3, r3
 80061ce:	461a      	mov	r2, r3
 80061d0:	6979      	ldr	r1, [r7, #20]
 80061d2:	f003 fec7 	bl	8009f64 <USB_EPStartXfer>
  }

  return HAL_OK;
 80061d6:	2300      	movs	r3, #0
}
 80061d8:	4618      	mov	r0, r3
 80061da:	3718      	adds	r7, #24
 80061dc:	46bd      	mov	sp, r7
 80061de:	bd80      	pop	{r7, pc}

080061e0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b086      	sub	sp, #24
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	60f8      	str	r0, [r7, #12]
 80061e8:	607a      	str	r2, [r7, #4]
 80061ea:	603b      	str	r3, [r7, #0]
 80061ec:	460b      	mov	r3, r1
 80061ee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80061f0:	7afb      	ldrb	r3, [r7, #11]
 80061f2:	f003 020f 	and.w	r2, r3, #15
 80061f6:	4613      	mov	r3, r2
 80061f8:	00db      	lsls	r3, r3, #3
 80061fa:	4413      	add	r3, r2
 80061fc:	009b      	lsls	r3, r3, #2
 80061fe:	3338      	adds	r3, #56	; 0x38
 8006200:	68fa      	ldr	r2, [r7, #12]
 8006202:	4413      	add	r3, r2
 8006204:	3304      	adds	r3, #4
 8006206:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006208:	697b      	ldr	r3, [r7, #20]
 800620a:	687a      	ldr	r2, [r7, #4]
 800620c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800620e:	697b      	ldr	r3, [r7, #20]
 8006210:	683a      	ldr	r2, [r7, #0]
 8006212:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8006214:	697b      	ldr	r3, [r7, #20]
 8006216:	2200      	movs	r2, #0
 8006218:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800621a:	697b      	ldr	r3, [r7, #20]
 800621c:	2201      	movs	r2, #1
 800621e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006220:	7afb      	ldrb	r3, [r7, #11]
 8006222:	f003 030f 	and.w	r3, r3, #15
 8006226:	b2da      	uxtb	r2, r3
 8006228:	697b      	ldr	r3, [r7, #20]
 800622a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	691b      	ldr	r3, [r3, #16]
 8006230:	2b01      	cmp	r3, #1
 8006232:	d102      	bne.n	800623a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006234:	687a      	ldr	r2, [r7, #4]
 8006236:	697b      	ldr	r3, [r7, #20]
 8006238:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800623a:	7afb      	ldrb	r3, [r7, #11]
 800623c:	f003 030f 	and.w	r3, r3, #15
 8006240:	2b00      	cmp	r3, #0
 8006242:	d109      	bne.n	8006258 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	6818      	ldr	r0, [r3, #0]
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	691b      	ldr	r3, [r3, #16]
 800624c:	b2db      	uxtb	r3, r3
 800624e:	461a      	mov	r2, r3
 8006250:	6979      	ldr	r1, [r7, #20]
 8006252:	f004 f8cf 	bl	800a3f4 <USB_EP0StartXfer>
 8006256:	e008      	b.n	800626a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	6818      	ldr	r0, [r3, #0]
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	691b      	ldr	r3, [r3, #16]
 8006260:	b2db      	uxtb	r3, r3
 8006262:	461a      	mov	r2, r3
 8006264:	6979      	ldr	r1, [r7, #20]
 8006266:	f003 fe7d 	bl	8009f64 <USB_EPStartXfer>
  }

  return HAL_OK;
 800626a:	2300      	movs	r3, #0
}
 800626c:	4618      	mov	r0, r3
 800626e:	3718      	adds	r7, #24
 8006270:	46bd      	mov	sp, r7
 8006272:	bd80      	pop	{r7, pc}

08006274 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b084      	sub	sp, #16
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
 800627c:	460b      	mov	r3, r1
 800627e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006280:	78fb      	ldrb	r3, [r7, #3]
 8006282:	f003 020f 	and.w	r2, r3, #15
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	685b      	ldr	r3, [r3, #4]
 800628a:	429a      	cmp	r2, r3
 800628c:	d901      	bls.n	8006292 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800628e:	2301      	movs	r3, #1
 8006290:	e050      	b.n	8006334 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006292:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006296:	2b00      	cmp	r3, #0
 8006298:	da0f      	bge.n	80062ba <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800629a:	78fb      	ldrb	r3, [r7, #3]
 800629c:	f003 020f 	and.w	r2, r3, #15
 80062a0:	4613      	mov	r3, r2
 80062a2:	00db      	lsls	r3, r3, #3
 80062a4:	4413      	add	r3, r2
 80062a6:	009b      	lsls	r3, r3, #2
 80062a8:	3338      	adds	r3, #56	; 0x38
 80062aa:	687a      	ldr	r2, [r7, #4]
 80062ac:	4413      	add	r3, r2
 80062ae:	3304      	adds	r3, #4
 80062b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2201      	movs	r2, #1
 80062b6:	705a      	strb	r2, [r3, #1]
 80062b8:	e00d      	b.n	80062d6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80062ba:	78fa      	ldrb	r2, [r7, #3]
 80062bc:	4613      	mov	r3, r2
 80062be:	00db      	lsls	r3, r3, #3
 80062c0:	4413      	add	r3, r2
 80062c2:	009b      	lsls	r3, r3, #2
 80062c4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80062c8:	687a      	ldr	r2, [r7, #4]
 80062ca:	4413      	add	r3, r2
 80062cc:	3304      	adds	r3, #4
 80062ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	2200      	movs	r2, #0
 80062d4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	2201      	movs	r2, #1
 80062da:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80062dc:	78fb      	ldrb	r3, [r7, #3]
 80062de:	f003 030f 	and.w	r3, r3, #15
 80062e2:	b2da      	uxtb	r2, r3
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80062ee:	2b01      	cmp	r3, #1
 80062f0:	d101      	bne.n	80062f6 <HAL_PCD_EP_SetStall+0x82>
 80062f2:	2302      	movs	r3, #2
 80062f4:	e01e      	b.n	8006334 <HAL_PCD_EP_SetStall+0xc0>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2201      	movs	r2, #1
 80062fa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	68f9      	ldr	r1, [r7, #12]
 8006304:	4618      	mov	r0, r3
 8006306:	f004 fb0d 	bl	800a924 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800630a:	78fb      	ldrb	r3, [r7, #3]
 800630c:	f003 030f 	and.w	r3, r3, #15
 8006310:	2b00      	cmp	r3, #0
 8006312:	d10a      	bne.n	800632a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6818      	ldr	r0, [r3, #0]
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	691b      	ldr	r3, [r3, #16]
 800631c:	b2d9      	uxtb	r1, r3
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006324:	461a      	mov	r2, r3
 8006326:	f004 fcfd 	bl	800ad24 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2200      	movs	r2, #0
 800632e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006332:	2300      	movs	r3, #0
}
 8006334:	4618      	mov	r0, r3
 8006336:	3710      	adds	r7, #16
 8006338:	46bd      	mov	sp, r7
 800633a:	bd80      	pop	{r7, pc}

0800633c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b084      	sub	sp, #16
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
 8006344:	460b      	mov	r3, r1
 8006346:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006348:	78fb      	ldrb	r3, [r7, #3]
 800634a:	f003 020f 	and.w	r2, r3, #15
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	685b      	ldr	r3, [r3, #4]
 8006352:	429a      	cmp	r2, r3
 8006354:	d901      	bls.n	800635a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006356:	2301      	movs	r3, #1
 8006358:	e042      	b.n	80063e0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800635a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800635e:	2b00      	cmp	r3, #0
 8006360:	da0f      	bge.n	8006382 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006362:	78fb      	ldrb	r3, [r7, #3]
 8006364:	f003 020f 	and.w	r2, r3, #15
 8006368:	4613      	mov	r3, r2
 800636a:	00db      	lsls	r3, r3, #3
 800636c:	4413      	add	r3, r2
 800636e:	009b      	lsls	r3, r3, #2
 8006370:	3338      	adds	r3, #56	; 0x38
 8006372:	687a      	ldr	r2, [r7, #4]
 8006374:	4413      	add	r3, r2
 8006376:	3304      	adds	r3, #4
 8006378:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	2201      	movs	r2, #1
 800637e:	705a      	strb	r2, [r3, #1]
 8006380:	e00f      	b.n	80063a2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006382:	78fb      	ldrb	r3, [r7, #3]
 8006384:	f003 020f 	and.w	r2, r3, #15
 8006388:	4613      	mov	r3, r2
 800638a:	00db      	lsls	r3, r3, #3
 800638c:	4413      	add	r3, r2
 800638e:	009b      	lsls	r3, r3, #2
 8006390:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006394:	687a      	ldr	r2, [r7, #4]
 8006396:	4413      	add	r3, r2
 8006398:	3304      	adds	r3, #4
 800639a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	2200      	movs	r2, #0
 80063a0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	2200      	movs	r2, #0
 80063a6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80063a8:	78fb      	ldrb	r3, [r7, #3]
 80063aa:	f003 030f 	and.w	r3, r3, #15
 80063ae:	b2da      	uxtb	r2, r3
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80063ba:	2b01      	cmp	r3, #1
 80063bc:	d101      	bne.n	80063c2 <HAL_PCD_EP_ClrStall+0x86>
 80063be:	2302      	movs	r3, #2
 80063c0:	e00e      	b.n	80063e0 <HAL_PCD_EP_ClrStall+0xa4>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2201      	movs	r2, #1
 80063c6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	68f9      	ldr	r1, [r7, #12]
 80063d0:	4618      	mov	r0, r3
 80063d2:	f004 fb15 	bl	800aa00 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2200      	movs	r2, #0
 80063da:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80063de:	2300      	movs	r3, #0
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	3710      	adds	r7, #16
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}

080063e8 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b084      	sub	sp, #16
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
 80063f0:	460b      	mov	r3, r1
 80063f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80063f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	da0c      	bge.n	8006416 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80063fc:	78fb      	ldrb	r3, [r7, #3]
 80063fe:	f003 020f 	and.w	r2, r3, #15
 8006402:	4613      	mov	r3, r2
 8006404:	00db      	lsls	r3, r3, #3
 8006406:	4413      	add	r3, r2
 8006408:	009b      	lsls	r3, r3, #2
 800640a:	3338      	adds	r3, #56	; 0x38
 800640c:	687a      	ldr	r2, [r7, #4]
 800640e:	4413      	add	r3, r2
 8006410:	3304      	adds	r3, #4
 8006412:	60fb      	str	r3, [r7, #12]
 8006414:	e00c      	b.n	8006430 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006416:	78fb      	ldrb	r3, [r7, #3]
 8006418:	f003 020f 	and.w	r2, r3, #15
 800641c:	4613      	mov	r3, r2
 800641e:	00db      	lsls	r3, r3, #3
 8006420:	4413      	add	r3, r2
 8006422:	009b      	lsls	r3, r3, #2
 8006424:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006428:	687a      	ldr	r2, [r7, #4]
 800642a:	4413      	add	r3, r2
 800642c:	3304      	adds	r3, #4
 800642e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	68f9      	ldr	r1, [r7, #12]
 8006436:	4618      	mov	r0, r3
 8006438:	f004 f934 	bl	800a6a4 <USB_EPStopXfer>
 800643c:	4603      	mov	r3, r0
 800643e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8006440:	7afb      	ldrb	r3, [r7, #11]
}
 8006442:	4618      	mov	r0, r3
 8006444:	3710      	adds	r7, #16
 8006446:	46bd      	mov	sp, r7
 8006448:	bd80      	pop	{r7, pc}

0800644a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800644a:	b580      	push	{r7, lr}
 800644c:	b08a      	sub	sp, #40	; 0x28
 800644e:	af02      	add	r7, sp, #8
 8006450:	6078      	str	r0, [r7, #4]
 8006452:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800645a:	697b      	ldr	r3, [r7, #20]
 800645c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800645e:	683a      	ldr	r2, [r7, #0]
 8006460:	4613      	mov	r3, r2
 8006462:	00db      	lsls	r3, r3, #3
 8006464:	4413      	add	r3, r2
 8006466:	009b      	lsls	r3, r3, #2
 8006468:	3338      	adds	r3, #56	; 0x38
 800646a:	687a      	ldr	r2, [r7, #4]
 800646c:	4413      	add	r3, r2
 800646e:	3304      	adds	r3, #4
 8006470:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	6a1a      	ldr	r2, [r3, #32]
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	699b      	ldr	r3, [r3, #24]
 800647a:	429a      	cmp	r2, r3
 800647c:	d901      	bls.n	8006482 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800647e:	2301      	movs	r3, #1
 8006480:	e06c      	b.n	800655c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	699a      	ldr	r2, [r3, #24]
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	6a1b      	ldr	r3, [r3, #32]
 800648a:	1ad3      	subs	r3, r2, r3
 800648c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	68db      	ldr	r3, [r3, #12]
 8006492:	69fa      	ldr	r2, [r7, #28]
 8006494:	429a      	cmp	r2, r3
 8006496:	d902      	bls.n	800649e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	68db      	ldr	r3, [r3, #12]
 800649c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800649e:	69fb      	ldr	r3, [r7, #28]
 80064a0:	3303      	adds	r3, #3
 80064a2:	089b      	lsrs	r3, r3, #2
 80064a4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80064a6:	e02b      	b.n	8006500 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	699a      	ldr	r2, [r3, #24]
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	6a1b      	ldr	r3, [r3, #32]
 80064b0:	1ad3      	subs	r3, r2, r3
 80064b2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	68db      	ldr	r3, [r3, #12]
 80064b8:	69fa      	ldr	r2, [r7, #28]
 80064ba:	429a      	cmp	r2, r3
 80064bc:	d902      	bls.n	80064c4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	68db      	ldr	r3, [r3, #12]
 80064c2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80064c4:	69fb      	ldr	r3, [r7, #28]
 80064c6:	3303      	adds	r3, #3
 80064c8:	089b      	lsrs	r3, r3, #2
 80064ca:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	6919      	ldr	r1, [r3, #16]
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	b2da      	uxtb	r2, r3
 80064d4:	69fb      	ldr	r3, [r7, #28]
 80064d6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80064dc:	b2db      	uxtb	r3, r3
 80064de:	9300      	str	r3, [sp, #0]
 80064e0:	4603      	mov	r3, r0
 80064e2:	6978      	ldr	r0, [r7, #20]
 80064e4:	f004 f988 	bl	800a7f8 <USB_WritePacket>

    ep->xfer_buff  += len;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	691a      	ldr	r2, [r3, #16]
 80064ec:	69fb      	ldr	r3, [r7, #28]
 80064ee:	441a      	add	r2, r3
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	6a1a      	ldr	r2, [r3, #32]
 80064f8:	69fb      	ldr	r3, [r7, #28]
 80064fa:	441a      	add	r2, r3
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	015a      	lsls	r2, r3, #5
 8006504:	693b      	ldr	r3, [r7, #16]
 8006506:	4413      	add	r3, r2
 8006508:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800650c:	699b      	ldr	r3, [r3, #24]
 800650e:	b29b      	uxth	r3, r3
 8006510:	69ba      	ldr	r2, [r7, #24]
 8006512:	429a      	cmp	r2, r3
 8006514:	d809      	bhi.n	800652a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	6a1a      	ldr	r2, [r3, #32]
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800651e:	429a      	cmp	r2, r3
 8006520:	d203      	bcs.n	800652a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	699b      	ldr	r3, [r3, #24]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d1be      	bne.n	80064a8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	699a      	ldr	r2, [r3, #24]
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	6a1b      	ldr	r3, [r3, #32]
 8006532:	429a      	cmp	r2, r3
 8006534:	d811      	bhi.n	800655a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	f003 030f 	and.w	r3, r3, #15
 800653c:	2201      	movs	r2, #1
 800653e:	fa02 f303 	lsl.w	r3, r2, r3
 8006542:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006544:	693b      	ldr	r3, [r7, #16]
 8006546:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800654a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	43db      	mvns	r3, r3
 8006550:	6939      	ldr	r1, [r7, #16]
 8006552:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006556:	4013      	ands	r3, r2
 8006558:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800655a:	2300      	movs	r3, #0
}
 800655c:	4618      	mov	r0, r3
 800655e:	3720      	adds	r7, #32
 8006560:	46bd      	mov	sp, r7
 8006562:	bd80      	pop	{r7, pc}

08006564 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b088      	sub	sp, #32
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
 800656c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006574:	69fb      	ldr	r3, [r7, #28]
 8006576:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006578:	69fb      	ldr	r3, [r7, #28]
 800657a:	333c      	adds	r3, #60	; 0x3c
 800657c:	3304      	adds	r3, #4
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	015a      	lsls	r2, r3, #5
 8006586:	69bb      	ldr	r3, [r7, #24]
 8006588:	4413      	add	r3, r2
 800658a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800658e:	689b      	ldr	r3, [r3, #8]
 8006590:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	691b      	ldr	r3, [r3, #16]
 8006596:	2b01      	cmp	r3, #1
 8006598:	d17b      	bne.n	8006692 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800659a:	693b      	ldr	r3, [r7, #16]
 800659c:	f003 0308 	and.w	r3, r3, #8
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d015      	beq.n	80065d0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80065a4:	697b      	ldr	r3, [r7, #20]
 80065a6:	4a61      	ldr	r2, [pc, #388]	; (800672c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	f240 80b9 	bls.w	8006720 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80065ae:	693b      	ldr	r3, [r7, #16]
 80065b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	f000 80b3 	beq.w	8006720 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	015a      	lsls	r2, r3, #5
 80065be:	69bb      	ldr	r3, [r7, #24]
 80065c0:	4413      	add	r3, r2
 80065c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065c6:	461a      	mov	r2, r3
 80065c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065cc:	6093      	str	r3, [r2, #8]
 80065ce:	e0a7      	b.n	8006720 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80065d0:	693b      	ldr	r3, [r7, #16]
 80065d2:	f003 0320 	and.w	r3, r3, #32
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d009      	beq.n	80065ee <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	015a      	lsls	r2, r3, #5
 80065de:	69bb      	ldr	r3, [r7, #24]
 80065e0:	4413      	add	r3, r2
 80065e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065e6:	461a      	mov	r2, r3
 80065e8:	2320      	movs	r3, #32
 80065ea:	6093      	str	r3, [r2, #8]
 80065ec:	e098      	b.n	8006720 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80065ee:	693b      	ldr	r3, [r7, #16]
 80065f0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	f040 8093 	bne.w	8006720 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	4a4b      	ldr	r2, [pc, #300]	; (800672c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d90f      	bls.n	8006622 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006602:	693b      	ldr	r3, [r7, #16]
 8006604:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006608:	2b00      	cmp	r3, #0
 800660a:	d00a      	beq.n	8006622 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	015a      	lsls	r2, r3, #5
 8006610:	69bb      	ldr	r3, [r7, #24]
 8006612:	4413      	add	r3, r2
 8006614:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006618:	461a      	mov	r2, r3
 800661a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800661e:	6093      	str	r3, [r2, #8]
 8006620:	e07e      	b.n	8006720 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8006622:	683a      	ldr	r2, [r7, #0]
 8006624:	4613      	mov	r3, r2
 8006626:	00db      	lsls	r3, r3, #3
 8006628:	4413      	add	r3, r2
 800662a:	009b      	lsls	r3, r3, #2
 800662c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006630:	687a      	ldr	r2, [r7, #4]
 8006632:	4413      	add	r3, r2
 8006634:	3304      	adds	r3, #4
 8006636:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	69da      	ldr	r2, [r3, #28]
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	0159      	lsls	r1, r3, #5
 8006640:	69bb      	ldr	r3, [r7, #24]
 8006642:	440b      	add	r3, r1
 8006644:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006648:	691b      	ldr	r3, [r3, #16]
 800664a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800664e:	1ad2      	subs	r2, r2, r3
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d114      	bne.n	8006684 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	699b      	ldr	r3, [r3, #24]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d109      	bne.n	8006676 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6818      	ldr	r0, [r3, #0]
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800666c:	461a      	mov	r2, r3
 800666e:	2101      	movs	r1, #1
 8006670:	f004 fb58 	bl	800ad24 <USB_EP0_OutStart>
 8006674:	e006      	b.n	8006684 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	691a      	ldr	r2, [r3, #16]
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	6a1b      	ldr	r3, [r3, #32]
 800667e:	441a      	add	r2, r3
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	b2db      	uxtb	r3, r3
 8006688:	4619      	mov	r1, r3
 800668a:	6878      	ldr	r0, [r7, #4]
 800668c:	f006 fc30 	bl	800cef0 <HAL_PCD_DataOutStageCallback>
 8006690:	e046      	b.n	8006720 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006692:	697b      	ldr	r3, [r7, #20]
 8006694:	4a26      	ldr	r2, [pc, #152]	; (8006730 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d124      	bne.n	80066e4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800669a:	693b      	ldr	r3, [r7, #16]
 800669c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d00a      	beq.n	80066ba <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	015a      	lsls	r2, r3, #5
 80066a8:	69bb      	ldr	r3, [r7, #24]
 80066aa:	4413      	add	r3, r2
 80066ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066b0:	461a      	mov	r2, r3
 80066b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80066b6:	6093      	str	r3, [r2, #8]
 80066b8:	e032      	b.n	8006720 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80066ba:	693b      	ldr	r3, [r7, #16]
 80066bc:	f003 0320 	and.w	r3, r3, #32
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d008      	beq.n	80066d6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	015a      	lsls	r2, r3, #5
 80066c8:	69bb      	ldr	r3, [r7, #24]
 80066ca:	4413      	add	r3, r2
 80066cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066d0:	461a      	mov	r2, r3
 80066d2:	2320      	movs	r3, #32
 80066d4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	b2db      	uxtb	r3, r3
 80066da:	4619      	mov	r1, r3
 80066dc:	6878      	ldr	r0, [r7, #4]
 80066de:	f006 fc07 	bl	800cef0 <HAL_PCD_DataOutStageCallback>
 80066e2:	e01d      	b.n	8006720 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d114      	bne.n	8006714 <PCD_EP_OutXfrComplete_int+0x1b0>
 80066ea:	6879      	ldr	r1, [r7, #4]
 80066ec:	683a      	ldr	r2, [r7, #0]
 80066ee:	4613      	mov	r3, r2
 80066f0:	00db      	lsls	r3, r3, #3
 80066f2:	4413      	add	r3, r2
 80066f4:	009b      	lsls	r3, r3, #2
 80066f6:	440b      	add	r3, r1
 80066f8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d108      	bne.n	8006714 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6818      	ldr	r0, [r3, #0]
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800670c:	461a      	mov	r2, r3
 800670e:	2100      	movs	r1, #0
 8006710:	f004 fb08 	bl	800ad24 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	b2db      	uxtb	r3, r3
 8006718:	4619      	mov	r1, r3
 800671a:	6878      	ldr	r0, [r7, #4]
 800671c:	f006 fbe8 	bl	800cef0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006720:	2300      	movs	r3, #0
}
 8006722:	4618      	mov	r0, r3
 8006724:	3720      	adds	r7, #32
 8006726:	46bd      	mov	sp, r7
 8006728:	bd80      	pop	{r7, pc}
 800672a:	bf00      	nop
 800672c:	4f54300a 	.word	0x4f54300a
 8006730:	4f54310a 	.word	0x4f54310a

08006734 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b086      	sub	sp, #24
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
 800673c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006744:	697b      	ldr	r3, [r7, #20]
 8006746:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006748:	697b      	ldr	r3, [r7, #20]
 800674a:	333c      	adds	r3, #60	; 0x3c
 800674c:	3304      	adds	r3, #4
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	015a      	lsls	r2, r3, #5
 8006756:	693b      	ldr	r3, [r7, #16]
 8006758:	4413      	add	r3, r2
 800675a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800675e:	689b      	ldr	r3, [r3, #8]
 8006760:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	4a15      	ldr	r2, [pc, #84]	; (80067bc <PCD_EP_OutSetupPacket_int+0x88>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d90e      	bls.n	8006788 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800676a:	68bb      	ldr	r3, [r7, #8]
 800676c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006770:	2b00      	cmp	r3, #0
 8006772:	d009      	beq.n	8006788 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	015a      	lsls	r2, r3, #5
 8006778:	693b      	ldr	r3, [r7, #16]
 800677a:	4413      	add	r3, r2
 800677c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006780:	461a      	mov	r2, r3
 8006782:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006786:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006788:	6878      	ldr	r0, [r7, #4]
 800678a:	f006 fb9f 	bl	800cecc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	4a0a      	ldr	r2, [pc, #40]	; (80067bc <PCD_EP_OutSetupPacket_int+0x88>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d90c      	bls.n	80067b0 <PCD_EP_OutSetupPacket_int+0x7c>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	691b      	ldr	r3, [r3, #16]
 800679a:	2b01      	cmp	r3, #1
 800679c:	d108      	bne.n	80067b0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6818      	ldr	r0, [r3, #0]
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80067a8:	461a      	mov	r2, r3
 80067aa:	2101      	movs	r1, #1
 80067ac:	f004 faba 	bl	800ad24 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80067b0:	2300      	movs	r3, #0
}
 80067b2:	4618      	mov	r0, r3
 80067b4:	3718      	adds	r7, #24
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bd80      	pop	{r7, pc}
 80067ba:	bf00      	nop
 80067bc:	4f54300a 	.word	0x4f54300a

080067c0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80067c0:	b480      	push	{r7}
 80067c2:	b085      	sub	sp, #20
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
 80067c8:	460b      	mov	r3, r1
 80067ca:	70fb      	strb	r3, [r7, #3]
 80067cc:	4613      	mov	r3, r2
 80067ce:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067d6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80067d8:	78fb      	ldrb	r3, [r7, #3]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d107      	bne.n	80067ee <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80067de:	883b      	ldrh	r3, [r7, #0]
 80067e0:	0419      	lsls	r1, r3, #16
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	68ba      	ldr	r2, [r7, #8]
 80067e8:	430a      	orrs	r2, r1
 80067ea:	629a      	str	r2, [r3, #40]	; 0x28
 80067ec:	e028      	b.n	8006840 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067f4:	0c1b      	lsrs	r3, r3, #16
 80067f6:	68ba      	ldr	r2, [r7, #8]
 80067f8:	4413      	add	r3, r2
 80067fa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80067fc:	2300      	movs	r3, #0
 80067fe:	73fb      	strb	r3, [r7, #15]
 8006800:	e00d      	b.n	800681e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681a      	ldr	r2, [r3, #0]
 8006806:	7bfb      	ldrb	r3, [r7, #15]
 8006808:	3340      	adds	r3, #64	; 0x40
 800680a:	009b      	lsls	r3, r3, #2
 800680c:	4413      	add	r3, r2
 800680e:	685b      	ldr	r3, [r3, #4]
 8006810:	0c1b      	lsrs	r3, r3, #16
 8006812:	68ba      	ldr	r2, [r7, #8]
 8006814:	4413      	add	r3, r2
 8006816:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006818:	7bfb      	ldrb	r3, [r7, #15]
 800681a:	3301      	adds	r3, #1
 800681c:	73fb      	strb	r3, [r7, #15]
 800681e:	7bfa      	ldrb	r2, [r7, #15]
 8006820:	78fb      	ldrb	r3, [r7, #3]
 8006822:	3b01      	subs	r3, #1
 8006824:	429a      	cmp	r2, r3
 8006826:	d3ec      	bcc.n	8006802 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006828:	883b      	ldrh	r3, [r7, #0]
 800682a:	0418      	lsls	r0, r3, #16
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6819      	ldr	r1, [r3, #0]
 8006830:	78fb      	ldrb	r3, [r7, #3]
 8006832:	3b01      	subs	r3, #1
 8006834:	68ba      	ldr	r2, [r7, #8]
 8006836:	4302      	orrs	r2, r0
 8006838:	3340      	adds	r3, #64	; 0x40
 800683a:	009b      	lsls	r3, r3, #2
 800683c:	440b      	add	r3, r1
 800683e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006840:	2300      	movs	r3, #0
}
 8006842:	4618      	mov	r0, r3
 8006844:	3714      	adds	r7, #20
 8006846:	46bd      	mov	sp, r7
 8006848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684c:	4770      	bx	lr

0800684e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800684e:	b480      	push	{r7}
 8006850:	b083      	sub	sp, #12
 8006852:	af00      	add	r7, sp, #0
 8006854:	6078      	str	r0, [r7, #4]
 8006856:	460b      	mov	r3, r1
 8006858:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	887a      	ldrh	r2, [r7, #2]
 8006860:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006862:	2300      	movs	r3, #0
}
 8006864:	4618      	mov	r0, r3
 8006866:	370c      	adds	r7, #12
 8006868:	46bd      	mov	sp, r7
 800686a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686e:	4770      	bx	lr

08006870 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006870:	b480      	push	{r7}
 8006872:	b083      	sub	sp, #12
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
 8006878:	460b      	mov	r3, r1
 800687a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800687c:	bf00      	nop
 800687e:	370c      	adds	r7, #12
 8006880:	46bd      	mov	sp, r7
 8006882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006886:	4770      	bx	lr

08006888 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b086      	sub	sp, #24
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d101      	bne.n	800689a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006896:	2301      	movs	r3, #1
 8006898:	e267      	b.n	8006d6a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f003 0301 	and.w	r3, r3, #1
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d075      	beq.n	8006992 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80068a6:	4b88      	ldr	r3, [pc, #544]	; (8006ac8 <HAL_RCC_OscConfig+0x240>)
 80068a8:	689b      	ldr	r3, [r3, #8]
 80068aa:	f003 030c 	and.w	r3, r3, #12
 80068ae:	2b04      	cmp	r3, #4
 80068b0:	d00c      	beq.n	80068cc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80068b2:	4b85      	ldr	r3, [pc, #532]	; (8006ac8 <HAL_RCC_OscConfig+0x240>)
 80068b4:	689b      	ldr	r3, [r3, #8]
 80068b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80068ba:	2b08      	cmp	r3, #8
 80068bc:	d112      	bne.n	80068e4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80068be:	4b82      	ldr	r3, [pc, #520]	; (8006ac8 <HAL_RCC_OscConfig+0x240>)
 80068c0:	685b      	ldr	r3, [r3, #4]
 80068c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80068c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80068ca:	d10b      	bne.n	80068e4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80068cc:	4b7e      	ldr	r3, [pc, #504]	; (8006ac8 <HAL_RCC_OscConfig+0x240>)
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d05b      	beq.n	8006990 <HAL_RCC_OscConfig+0x108>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	685b      	ldr	r3, [r3, #4]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d157      	bne.n	8006990 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80068e0:	2301      	movs	r3, #1
 80068e2:	e242      	b.n	8006d6a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	685b      	ldr	r3, [r3, #4]
 80068e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068ec:	d106      	bne.n	80068fc <HAL_RCC_OscConfig+0x74>
 80068ee:	4b76      	ldr	r3, [pc, #472]	; (8006ac8 <HAL_RCC_OscConfig+0x240>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	4a75      	ldr	r2, [pc, #468]	; (8006ac8 <HAL_RCC_OscConfig+0x240>)
 80068f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80068f8:	6013      	str	r3, [r2, #0]
 80068fa:	e01d      	b.n	8006938 <HAL_RCC_OscConfig+0xb0>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	685b      	ldr	r3, [r3, #4]
 8006900:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006904:	d10c      	bne.n	8006920 <HAL_RCC_OscConfig+0x98>
 8006906:	4b70      	ldr	r3, [pc, #448]	; (8006ac8 <HAL_RCC_OscConfig+0x240>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	4a6f      	ldr	r2, [pc, #444]	; (8006ac8 <HAL_RCC_OscConfig+0x240>)
 800690c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006910:	6013      	str	r3, [r2, #0]
 8006912:	4b6d      	ldr	r3, [pc, #436]	; (8006ac8 <HAL_RCC_OscConfig+0x240>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	4a6c      	ldr	r2, [pc, #432]	; (8006ac8 <HAL_RCC_OscConfig+0x240>)
 8006918:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800691c:	6013      	str	r3, [r2, #0]
 800691e:	e00b      	b.n	8006938 <HAL_RCC_OscConfig+0xb0>
 8006920:	4b69      	ldr	r3, [pc, #420]	; (8006ac8 <HAL_RCC_OscConfig+0x240>)
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	4a68      	ldr	r2, [pc, #416]	; (8006ac8 <HAL_RCC_OscConfig+0x240>)
 8006926:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800692a:	6013      	str	r3, [r2, #0]
 800692c:	4b66      	ldr	r3, [pc, #408]	; (8006ac8 <HAL_RCC_OscConfig+0x240>)
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4a65      	ldr	r2, [pc, #404]	; (8006ac8 <HAL_RCC_OscConfig+0x240>)
 8006932:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006936:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	685b      	ldr	r3, [r3, #4]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d013      	beq.n	8006968 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006940:	f7fc f8a0 	bl	8002a84 <HAL_GetTick>
 8006944:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006946:	e008      	b.n	800695a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006948:	f7fc f89c 	bl	8002a84 <HAL_GetTick>
 800694c:	4602      	mov	r2, r0
 800694e:	693b      	ldr	r3, [r7, #16]
 8006950:	1ad3      	subs	r3, r2, r3
 8006952:	2b64      	cmp	r3, #100	; 0x64
 8006954:	d901      	bls.n	800695a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006956:	2303      	movs	r3, #3
 8006958:	e207      	b.n	8006d6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800695a:	4b5b      	ldr	r3, [pc, #364]	; (8006ac8 <HAL_RCC_OscConfig+0x240>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006962:	2b00      	cmp	r3, #0
 8006964:	d0f0      	beq.n	8006948 <HAL_RCC_OscConfig+0xc0>
 8006966:	e014      	b.n	8006992 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006968:	f7fc f88c 	bl	8002a84 <HAL_GetTick>
 800696c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800696e:	e008      	b.n	8006982 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006970:	f7fc f888 	bl	8002a84 <HAL_GetTick>
 8006974:	4602      	mov	r2, r0
 8006976:	693b      	ldr	r3, [r7, #16]
 8006978:	1ad3      	subs	r3, r2, r3
 800697a:	2b64      	cmp	r3, #100	; 0x64
 800697c:	d901      	bls.n	8006982 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800697e:	2303      	movs	r3, #3
 8006980:	e1f3      	b.n	8006d6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006982:	4b51      	ldr	r3, [pc, #324]	; (8006ac8 <HAL_RCC_OscConfig+0x240>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800698a:	2b00      	cmp	r3, #0
 800698c:	d1f0      	bne.n	8006970 <HAL_RCC_OscConfig+0xe8>
 800698e:	e000      	b.n	8006992 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006990:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f003 0302 	and.w	r3, r3, #2
 800699a:	2b00      	cmp	r3, #0
 800699c:	d063      	beq.n	8006a66 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800699e:	4b4a      	ldr	r3, [pc, #296]	; (8006ac8 <HAL_RCC_OscConfig+0x240>)
 80069a0:	689b      	ldr	r3, [r3, #8]
 80069a2:	f003 030c 	and.w	r3, r3, #12
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d00b      	beq.n	80069c2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80069aa:	4b47      	ldr	r3, [pc, #284]	; (8006ac8 <HAL_RCC_OscConfig+0x240>)
 80069ac:	689b      	ldr	r3, [r3, #8]
 80069ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80069b2:	2b08      	cmp	r3, #8
 80069b4:	d11c      	bne.n	80069f0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80069b6:	4b44      	ldr	r3, [pc, #272]	; (8006ac8 <HAL_RCC_OscConfig+0x240>)
 80069b8:	685b      	ldr	r3, [r3, #4]
 80069ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d116      	bne.n	80069f0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80069c2:	4b41      	ldr	r3, [pc, #260]	; (8006ac8 <HAL_RCC_OscConfig+0x240>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f003 0302 	and.w	r3, r3, #2
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d005      	beq.n	80069da <HAL_RCC_OscConfig+0x152>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	68db      	ldr	r3, [r3, #12]
 80069d2:	2b01      	cmp	r3, #1
 80069d4:	d001      	beq.n	80069da <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80069d6:	2301      	movs	r3, #1
 80069d8:	e1c7      	b.n	8006d6a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80069da:	4b3b      	ldr	r3, [pc, #236]	; (8006ac8 <HAL_RCC_OscConfig+0x240>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	691b      	ldr	r3, [r3, #16]
 80069e6:	00db      	lsls	r3, r3, #3
 80069e8:	4937      	ldr	r1, [pc, #220]	; (8006ac8 <HAL_RCC_OscConfig+0x240>)
 80069ea:	4313      	orrs	r3, r2
 80069ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80069ee:	e03a      	b.n	8006a66 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	68db      	ldr	r3, [r3, #12]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d020      	beq.n	8006a3a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80069f8:	4b34      	ldr	r3, [pc, #208]	; (8006acc <HAL_RCC_OscConfig+0x244>)
 80069fa:	2201      	movs	r2, #1
 80069fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069fe:	f7fc f841 	bl	8002a84 <HAL_GetTick>
 8006a02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a04:	e008      	b.n	8006a18 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006a06:	f7fc f83d 	bl	8002a84 <HAL_GetTick>
 8006a0a:	4602      	mov	r2, r0
 8006a0c:	693b      	ldr	r3, [r7, #16]
 8006a0e:	1ad3      	subs	r3, r2, r3
 8006a10:	2b02      	cmp	r3, #2
 8006a12:	d901      	bls.n	8006a18 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006a14:	2303      	movs	r3, #3
 8006a16:	e1a8      	b.n	8006d6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a18:	4b2b      	ldr	r3, [pc, #172]	; (8006ac8 <HAL_RCC_OscConfig+0x240>)
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f003 0302 	and.w	r3, r3, #2
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d0f0      	beq.n	8006a06 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a24:	4b28      	ldr	r3, [pc, #160]	; (8006ac8 <HAL_RCC_OscConfig+0x240>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	691b      	ldr	r3, [r3, #16]
 8006a30:	00db      	lsls	r3, r3, #3
 8006a32:	4925      	ldr	r1, [pc, #148]	; (8006ac8 <HAL_RCC_OscConfig+0x240>)
 8006a34:	4313      	orrs	r3, r2
 8006a36:	600b      	str	r3, [r1, #0]
 8006a38:	e015      	b.n	8006a66 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006a3a:	4b24      	ldr	r3, [pc, #144]	; (8006acc <HAL_RCC_OscConfig+0x244>)
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a40:	f7fc f820 	bl	8002a84 <HAL_GetTick>
 8006a44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006a46:	e008      	b.n	8006a5a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006a48:	f7fc f81c 	bl	8002a84 <HAL_GetTick>
 8006a4c:	4602      	mov	r2, r0
 8006a4e:	693b      	ldr	r3, [r7, #16]
 8006a50:	1ad3      	subs	r3, r2, r3
 8006a52:	2b02      	cmp	r3, #2
 8006a54:	d901      	bls.n	8006a5a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006a56:	2303      	movs	r3, #3
 8006a58:	e187      	b.n	8006d6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006a5a:	4b1b      	ldr	r3, [pc, #108]	; (8006ac8 <HAL_RCC_OscConfig+0x240>)
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f003 0302 	and.w	r3, r3, #2
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d1f0      	bne.n	8006a48 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f003 0308 	and.w	r3, r3, #8
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d036      	beq.n	8006ae0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	695b      	ldr	r3, [r3, #20]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d016      	beq.n	8006aa8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006a7a:	4b15      	ldr	r3, [pc, #84]	; (8006ad0 <HAL_RCC_OscConfig+0x248>)
 8006a7c:	2201      	movs	r2, #1
 8006a7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a80:	f7fc f800 	bl	8002a84 <HAL_GetTick>
 8006a84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006a86:	e008      	b.n	8006a9a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006a88:	f7fb fffc 	bl	8002a84 <HAL_GetTick>
 8006a8c:	4602      	mov	r2, r0
 8006a8e:	693b      	ldr	r3, [r7, #16]
 8006a90:	1ad3      	subs	r3, r2, r3
 8006a92:	2b02      	cmp	r3, #2
 8006a94:	d901      	bls.n	8006a9a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006a96:	2303      	movs	r3, #3
 8006a98:	e167      	b.n	8006d6a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006a9a:	4b0b      	ldr	r3, [pc, #44]	; (8006ac8 <HAL_RCC_OscConfig+0x240>)
 8006a9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a9e:	f003 0302 	and.w	r3, r3, #2
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d0f0      	beq.n	8006a88 <HAL_RCC_OscConfig+0x200>
 8006aa6:	e01b      	b.n	8006ae0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006aa8:	4b09      	ldr	r3, [pc, #36]	; (8006ad0 <HAL_RCC_OscConfig+0x248>)
 8006aaa:	2200      	movs	r2, #0
 8006aac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006aae:	f7fb ffe9 	bl	8002a84 <HAL_GetTick>
 8006ab2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006ab4:	e00e      	b.n	8006ad4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006ab6:	f7fb ffe5 	bl	8002a84 <HAL_GetTick>
 8006aba:	4602      	mov	r2, r0
 8006abc:	693b      	ldr	r3, [r7, #16]
 8006abe:	1ad3      	subs	r3, r2, r3
 8006ac0:	2b02      	cmp	r3, #2
 8006ac2:	d907      	bls.n	8006ad4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006ac4:	2303      	movs	r3, #3
 8006ac6:	e150      	b.n	8006d6a <HAL_RCC_OscConfig+0x4e2>
 8006ac8:	40023800 	.word	0x40023800
 8006acc:	42470000 	.word	0x42470000
 8006ad0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006ad4:	4b88      	ldr	r3, [pc, #544]	; (8006cf8 <HAL_RCC_OscConfig+0x470>)
 8006ad6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ad8:	f003 0302 	and.w	r3, r3, #2
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d1ea      	bne.n	8006ab6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f003 0304 	and.w	r3, r3, #4
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	f000 8097 	beq.w	8006c1c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006aee:	2300      	movs	r3, #0
 8006af0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006af2:	4b81      	ldr	r3, [pc, #516]	; (8006cf8 <HAL_RCC_OscConfig+0x470>)
 8006af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006af6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d10f      	bne.n	8006b1e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006afe:	2300      	movs	r3, #0
 8006b00:	60bb      	str	r3, [r7, #8]
 8006b02:	4b7d      	ldr	r3, [pc, #500]	; (8006cf8 <HAL_RCC_OscConfig+0x470>)
 8006b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b06:	4a7c      	ldr	r2, [pc, #496]	; (8006cf8 <HAL_RCC_OscConfig+0x470>)
 8006b08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b0c:	6413      	str	r3, [r2, #64]	; 0x40
 8006b0e:	4b7a      	ldr	r3, [pc, #488]	; (8006cf8 <HAL_RCC_OscConfig+0x470>)
 8006b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b16:	60bb      	str	r3, [r7, #8]
 8006b18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006b1a:	2301      	movs	r3, #1
 8006b1c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b1e:	4b77      	ldr	r3, [pc, #476]	; (8006cfc <HAL_RCC_OscConfig+0x474>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d118      	bne.n	8006b5c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006b2a:	4b74      	ldr	r3, [pc, #464]	; (8006cfc <HAL_RCC_OscConfig+0x474>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	4a73      	ldr	r2, [pc, #460]	; (8006cfc <HAL_RCC_OscConfig+0x474>)
 8006b30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006b36:	f7fb ffa5 	bl	8002a84 <HAL_GetTick>
 8006b3a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b3c:	e008      	b.n	8006b50 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b3e:	f7fb ffa1 	bl	8002a84 <HAL_GetTick>
 8006b42:	4602      	mov	r2, r0
 8006b44:	693b      	ldr	r3, [r7, #16]
 8006b46:	1ad3      	subs	r3, r2, r3
 8006b48:	2b02      	cmp	r3, #2
 8006b4a:	d901      	bls.n	8006b50 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006b4c:	2303      	movs	r3, #3
 8006b4e:	e10c      	b.n	8006d6a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b50:	4b6a      	ldr	r3, [pc, #424]	; (8006cfc <HAL_RCC_OscConfig+0x474>)
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d0f0      	beq.n	8006b3e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	689b      	ldr	r3, [r3, #8]
 8006b60:	2b01      	cmp	r3, #1
 8006b62:	d106      	bne.n	8006b72 <HAL_RCC_OscConfig+0x2ea>
 8006b64:	4b64      	ldr	r3, [pc, #400]	; (8006cf8 <HAL_RCC_OscConfig+0x470>)
 8006b66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b68:	4a63      	ldr	r2, [pc, #396]	; (8006cf8 <HAL_RCC_OscConfig+0x470>)
 8006b6a:	f043 0301 	orr.w	r3, r3, #1
 8006b6e:	6713      	str	r3, [r2, #112]	; 0x70
 8006b70:	e01c      	b.n	8006bac <HAL_RCC_OscConfig+0x324>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	689b      	ldr	r3, [r3, #8]
 8006b76:	2b05      	cmp	r3, #5
 8006b78:	d10c      	bne.n	8006b94 <HAL_RCC_OscConfig+0x30c>
 8006b7a:	4b5f      	ldr	r3, [pc, #380]	; (8006cf8 <HAL_RCC_OscConfig+0x470>)
 8006b7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b7e:	4a5e      	ldr	r2, [pc, #376]	; (8006cf8 <HAL_RCC_OscConfig+0x470>)
 8006b80:	f043 0304 	orr.w	r3, r3, #4
 8006b84:	6713      	str	r3, [r2, #112]	; 0x70
 8006b86:	4b5c      	ldr	r3, [pc, #368]	; (8006cf8 <HAL_RCC_OscConfig+0x470>)
 8006b88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b8a:	4a5b      	ldr	r2, [pc, #364]	; (8006cf8 <HAL_RCC_OscConfig+0x470>)
 8006b8c:	f043 0301 	orr.w	r3, r3, #1
 8006b90:	6713      	str	r3, [r2, #112]	; 0x70
 8006b92:	e00b      	b.n	8006bac <HAL_RCC_OscConfig+0x324>
 8006b94:	4b58      	ldr	r3, [pc, #352]	; (8006cf8 <HAL_RCC_OscConfig+0x470>)
 8006b96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b98:	4a57      	ldr	r2, [pc, #348]	; (8006cf8 <HAL_RCC_OscConfig+0x470>)
 8006b9a:	f023 0301 	bic.w	r3, r3, #1
 8006b9e:	6713      	str	r3, [r2, #112]	; 0x70
 8006ba0:	4b55      	ldr	r3, [pc, #340]	; (8006cf8 <HAL_RCC_OscConfig+0x470>)
 8006ba2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ba4:	4a54      	ldr	r2, [pc, #336]	; (8006cf8 <HAL_RCC_OscConfig+0x470>)
 8006ba6:	f023 0304 	bic.w	r3, r3, #4
 8006baa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	689b      	ldr	r3, [r3, #8]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d015      	beq.n	8006be0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bb4:	f7fb ff66 	bl	8002a84 <HAL_GetTick>
 8006bb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006bba:	e00a      	b.n	8006bd2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006bbc:	f7fb ff62 	bl	8002a84 <HAL_GetTick>
 8006bc0:	4602      	mov	r2, r0
 8006bc2:	693b      	ldr	r3, [r7, #16]
 8006bc4:	1ad3      	subs	r3, r2, r3
 8006bc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d901      	bls.n	8006bd2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006bce:	2303      	movs	r3, #3
 8006bd0:	e0cb      	b.n	8006d6a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006bd2:	4b49      	ldr	r3, [pc, #292]	; (8006cf8 <HAL_RCC_OscConfig+0x470>)
 8006bd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bd6:	f003 0302 	and.w	r3, r3, #2
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d0ee      	beq.n	8006bbc <HAL_RCC_OscConfig+0x334>
 8006bde:	e014      	b.n	8006c0a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006be0:	f7fb ff50 	bl	8002a84 <HAL_GetTick>
 8006be4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006be6:	e00a      	b.n	8006bfe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006be8:	f7fb ff4c 	bl	8002a84 <HAL_GetTick>
 8006bec:	4602      	mov	r2, r0
 8006bee:	693b      	ldr	r3, [r7, #16]
 8006bf0:	1ad3      	subs	r3, r2, r3
 8006bf2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d901      	bls.n	8006bfe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006bfa:	2303      	movs	r3, #3
 8006bfc:	e0b5      	b.n	8006d6a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006bfe:	4b3e      	ldr	r3, [pc, #248]	; (8006cf8 <HAL_RCC_OscConfig+0x470>)
 8006c00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c02:	f003 0302 	and.w	r3, r3, #2
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d1ee      	bne.n	8006be8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006c0a:	7dfb      	ldrb	r3, [r7, #23]
 8006c0c:	2b01      	cmp	r3, #1
 8006c0e:	d105      	bne.n	8006c1c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006c10:	4b39      	ldr	r3, [pc, #228]	; (8006cf8 <HAL_RCC_OscConfig+0x470>)
 8006c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c14:	4a38      	ldr	r2, [pc, #224]	; (8006cf8 <HAL_RCC_OscConfig+0x470>)
 8006c16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006c1a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	699b      	ldr	r3, [r3, #24]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	f000 80a1 	beq.w	8006d68 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006c26:	4b34      	ldr	r3, [pc, #208]	; (8006cf8 <HAL_RCC_OscConfig+0x470>)
 8006c28:	689b      	ldr	r3, [r3, #8]
 8006c2a:	f003 030c 	and.w	r3, r3, #12
 8006c2e:	2b08      	cmp	r3, #8
 8006c30:	d05c      	beq.n	8006cec <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	699b      	ldr	r3, [r3, #24]
 8006c36:	2b02      	cmp	r3, #2
 8006c38:	d141      	bne.n	8006cbe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c3a:	4b31      	ldr	r3, [pc, #196]	; (8006d00 <HAL_RCC_OscConfig+0x478>)
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c40:	f7fb ff20 	bl	8002a84 <HAL_GetTick>
 8006c44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c46:	e008      	b.n	8006c5a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c48:	f7fb ff1c 	bl	8002a84 <HAL_GetTick>
 8006c4c:	4602      	mov	r2, r0
 8006c4e:	693b      	ldr	r3, [r7, #16]
 8006c50:	1ad3      	subs	r3, r2, r3
 8006c52:	2b02      	cmp	r3, #2
 8006c54:	d901      	bls.n	8006c5a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006c56:	2303      	movs	r3, #3
 8006c58:	e087      	b.n	8006d6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c5a:	4b27      	ldr	r3, [pc, #156]	; (8006cf8 <HAL_RCC_OscConfig+0x470>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d1f0      	bne.n	8006c48 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	69da      	ldr	r2, [r3, #28]
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6a1b      	ldr	r3, [r3, #32]
 8006c6e:	431a      	orrs	r2, r3
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c74:	019b      	lsls	r3, r3, #6
 8006c76:	431a      	orrs	r2, r3
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c7c:	085b      	lsrs	r3, r3, #1
 8006c7e:	3b01      	subs	r3, #1
 8006c80:	041b      	lsls	r3, r3, #16
 8006c82:	431a      	orrs	r2, r3
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c88:	061b      	lsls	r3, r3, #24
 8006c8a:	491b      	ldr	r1, [pc, #108]	; (8006cf8 <HAL_RCC_OscConfig+0x470>)
 8006c8c:	4313      	orrs	r3, r2
 8006c8e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006c90:	4b1b      	ldr	r3, [pc, #108]	; (8006d00 <HAL_RCC_OscConfig+0x478>)
 8006c92:	2201      	movs	r2, #1
 8006c94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c96:	f7fb fef5 	bl	8002a84 <HAL_GetTick>
 8006c9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c9c:	e008      	b.n	8006cb0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c9e:	f7fb fef1 	bl	8002a84 <HAL_GetTick>
 8006ca2:	4602      	mov	r2, r0
 8006ca4:	693b      	ldr	r3, [r7, #16]
 8006ca6:	1ad3      	subs	r3, r2, r3
 8006ca8:	2b02      	cmp	r3, #2
 8006caa:	d901      	bls.n	8006cb0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006cac:	2303      	movs	r3, #3
 8006cae:	e05c      	b.n	8006d6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006cb0:	4b11      	ldr	r3, [pc, #68]	; (8006cf8 <HAL_RCC_OscConfig+0x470>)
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d0f0      	beq.n	8006c9e <HAL_RCC_OscConfig+0x416>
 8006cbc:	e054      	b.n	8006d68 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006cbe:	4b10      	ldr	r3, [pc, #64]	; (8006d00 <HAL_RCC_OscConfig+0x478>)
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006cc4:	f7fb fede 	bl	8002a84 <HAL_GetTick>
 8006cc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006cca:	e008      	b.n	8006cde <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ccc:	f7fb feda 	bl	8002a84 <HAL_GetTick>
 8006cd0:	4602      	mov	r2, r0
 8006cd2:	693b      	ldr	r3, [r7, #16]
 8006cd4:	1ad3      	subs	r3, r2, r3
 8006cd6:	2b02      	cmp	r3, #2
 8006cd8:	d901      	bls.n	8006cde <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006cda:	2303      	movs	r3, #3
 8006cdc:	e045      	b.n	8006d6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006cde:	4b06      	ldr	r3, [pc, #24]	; (8006cf8 <HAL_RCC_OscConfig+0x470>)
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d1f0      	bne.n	8006ccc <HAL_RCC_OscConfig+0x444>
 8006cea:	e03d      	b.n	8006d68 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	699b      	ldr	r3, [r3, #24]
 8006cf0:	2b01      	cmp	r3, #1
 8006cf2:	d107      	bne.n	8006d04 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006cf4:	2301      	movs	r3, #1
 8006cf6:	e038      	b.n	8006d6a <HAL_RCC_OscConfig+0x4e2>
 8006cf8:	40023800 	.word	0x40023800
 8006cfc:	40007000 	.word	0x40007000
 8006d00:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006d04:	4b1b      	ldr	r3, [pc, #108]	; (8006d74 <HAL_RCC_OscConfig+0x4ec>)
 8006d06:	685b      	ldr	r3, [r3, #4]
 8006d08:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	699b      	ldr	r3, [r3, #24]
 8006d0e:	2b01      	cmp	r3, #1
 8006d10:	d028      	beq.n	8006d64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006d1c:	429a      	cmp	r2, r3
 8006d1e:	d121      	bne.n	8006d64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d2a:	429a      	cmp	r2, r3
 8006d2c:	d11a      	bne.n	8006d64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006d2e:	68fa      	ldr	r2, [r7, #12]
 8006d30:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006d34:	4013      	ands	r3, r2
 8006d36:	687a      	ldr	r2, [r7, #4]
 8006d38:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006d3a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d111      	bne.n	8006d64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d4a:	085b      	lsrs	r3, r3, #1
 8006d4c:	3b01      	subs	r3, #1
 8006d4e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006d50:	429a      	cmp	r2, r3
 8006d52:	d107      	bne.n	8006d64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d5e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006d60:	429a      	cmp	r2, r3
 8006d62:	d001      	beq.n	8006d68 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006d64:	2301      	movs	r3, #1
 8006d66:	e000      	b.n	8006d6a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006d68:	2300      	movs	r3, #0
}
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	3718      	adds	r7, #24
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}
 8006d72:	bf00      	nop
 8006d74:	40023800 	.word	0x40023800

08006d78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b084      	sub	sp, #16
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
 8006d80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d101      	bne.n	8006d8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006d88:	2301      	movs	r3, #1
 8006d8a:	e0cc      	b.n	8006f26 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006d8c:	4b68      	ldr	r3, [pc, #416]	; (8006f30 <HAL_RCC_ClockConfig+0x1b8>)
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f003 0307 	and.w	r3, r3, #7
 8006d94:	683a      	ldr	r2, [r7, #0]
 8006d96:	429a      	cmp	r2, r3
 8006d98:	d90c      	bls.n	8006db4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d9a:	4b65      	ldr	r3, [pc, #404]	; (8006f30 <HAL_RCC_ClockConfig+0x1b8>)
 8006d9c:	683a      	ldr	r2, [r7, #0]
 8006d9e:	b2d2      	uxtb	r2, r2
 8006da0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006da2:	4b63      	ldr	r3, [pc, #396]	; (8006f30 <HAL_RCC_ClockConfig+0x1b8>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f003 0307 	and.w	r3, r3, #7
 8006daa:	683a      	ldr	r2, [r7, #0]
 8006dac:	429a      	cmp	r2, r3
 8006dae:	d001      	beq.n	8006db4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006db0:	2301      	movs	r3, #1
 8006db2:	e0b8      	b.n	8006f26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f003 0302 	and.w	r3, r3, #2
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d020      	beq.n	8006e02 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f003 0304 	and.w	r3, r3, #4
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d005      	beq.n	8006dd8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006dcc:	4b59      	ldr	r3, [pc, #356]	; (8006f34 <HAL_RCC_ClockConfig+0x1bc>)
 8006dce:	689b      	ldr	r3, [r3, #8]
 8006dd0:	4a58      	ldr	r2, [pc, #352]	; (8006f34 <HAL_RCC_ClockConfig+0x1bc>)
 8006dd2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006dd6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f003 0308 	and.w	r3, r3, #8
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d005      	beq.n	8006df0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006de4:	4b53      	ldr	r3, [pc, #332]	; (8006f34 <HAL_RCC_ClockConfig+0x1bc>)
 8006de6:	689b      	ldr	r3, [r3, #8]
 8006de8:	4a52      	ldr	r2, [pc, #328]	; (8006f34 <HAL_RCC_ClockConfig+0x1bc>)
 8006dea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006dee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006df0:	4b50      	ldr	r3, [pc, #320]	; (8006f34 <HAL_RCC_ClockConfig+0x1bc>)
 8006df2:	689b      	ldr	r3, [r3, #8]
 8006df4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	689b      	ldr	r3, [r3, #8]
 8006dfc:	494d      	ldr	r1, [pc, #308]	; (8006f34 <HAL_RCC_ClockConfig+0x1bc>)
 8006dfe:	4313      	orrs	r3, r2
 8006e00:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f003 0301 	and.w	r3, r3, #1
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d044      	beq.n	8006e98 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	685b      	ldr	r3, [r3, #4]
 8006e12:	2b01      	cmp	r3, #1
 8006e14:	d107      	bne.n	8006e26 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e16:	4b47      	ldr	r3, [pc, #284]	; (8006f34 <HAL_RCC_ClockConfig+0x1bc>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d119      	bne.n	8006e56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006e22:	2301      	movs	r3, #1
 8006e24:	e07f      	b.n	8006f26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	685b      	ldr	r3, [r3, #4]
 8006e2a:	2b02      	cmp	r3, #2
 8006e2c:	d003      	beq.n	8006e36 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006e32:	2b03      	cmp	r3, #3
 8006e34:	d107      	bne.n	8006e46 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e36:	4b3f      	ldr	r3, [pc, #252]	; (8006f34 <HAL_RCC_ClockConfig+0x1bc>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d109      	bne.n	8006e56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006e42:	2301      	movs	r3, #1
 8006e44:	e06f      	b.n	8006f26 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e46:	4b3b      	ldr	r3, [pc, #236]	; (8006f34 <HAL_RCC_ClockConfig+0x1bc>)
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f003 0302 	and.w	r3, r3, #2
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d101      	bne.n	8006e56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006e52:	2301      	movs	r3, #1
 8006e54:	e067      	b.n	8006f26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006e56:	4b37      	ldr	r3, [pc, #220]	; (8006f34 <HAL_RCC_ClockConfig+0x1bc>)
 8006e58:	689b      	ldr	r3, [r3, #8]
 8006e5a:	f023 0203 	bic.w	r2, r3, #3
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	685b      	ldr	r3, [r3, #4]
 8006e62:	4934      	ldr	r1, [pc, #208]	; (8006f34 <HAL_RCC_ClockConfig+0x1bc>)
 8006e64:	4313      	orrs	r3, r2
 8006e66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006e68:	f7fb fe0c 	bl	8002a84 <HAL_GetTick>
 8006e6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e6e:	e00a      	b.n	8006e86 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e70:	f7fb fe08 	bl	8002a84 <HAL_GetTick>
 8006e74:	4602      	mov	r2, r0
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	1ad3      	subs	r3, r2, r3
 8006e7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d901      	bls.n	8006e86 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006e82:	2303      	movs	r3, #3
 8006e84:	e04f      	b.n	8006f26 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e86:	4b2b      	ldr	r3, [pc, #172]	; (8006f34 <HAL_RCC_ClockConfig+0x1bc>)
 8006e88:	689b      	ldr	r3, [r3, #8]
 8006e8a:	f003 020c 	and.w	r2, r3, #12
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	685b      	ldr	r3, [r3, #4]
 8006e92:	009b      	lsls	r3, r3, #2
 8006e94:	429a      	cmp	r2, r3
 8006e96:	d1eb      	bne.n	8006e70 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006e98:	4b25      	ldr	r3, [pc, #148]	; (8006f30 <HAL_RCC_ClockConfig+0x1b8>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f003 0307 	and.w	r3, r3, #7
 8006ea0:	683a      	ldr	r2, [r7, #0]
 8006ea2:	429a      	cmp	r2, r3
 8006ea4:	d20c      	bcs.n	8006ec0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ea6:	4b22      	ldr	r3, [pc, #136]	; (8006f30 <HAL_RCC_ClockConfig+0x1b8>)
 8006ea8:	683a      	ldr	r2, [r7, #0]
 8006eaa:	b2d2      	uxtb	r2, r2
 8006eac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006eae:	4b20      	ldr	r3, [pc, #128]	; (8006f30 <HAL_RCC_ClockConfig+0x1b8>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f003 0307 	and.w	r3, r3, #7
 8006eb6:	683a      	ldr	r2, [r7, #0]
 8006eb8:	429a      	cmp	r2, r3
 8006eba:	d001      	beq.n	8006ec0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	e032      	b.n	8006f26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f003 0304 	and.w	r3, r3, #4
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d008      	beq.n	8006ede <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006ecc:	4b19      	ldr	r3, [pc, #100]	; (8006f34 <HAL_RCC_ClockConfig+0x1bc>)
 8006ece:	689b      	ldr	r3, [r3, #8]
 8006ed0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	68db      	ldr	r3, [r3, #12]
 8006ed8:	4916      	ldr	r1, [pc, #88]	; (8006f34 <HAL_RCC_ClockConfig+0x1bc>)
 8006eda:	4313      	orrs	r3, r2
 8006edc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f003 0308 	and.w	r3, r3, #8
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d009      	beq.n	8006efe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006eea:	4b12      	ldr	r3, [pc, #72]	; (8006f34 <HAL_RCC_ClockConfig+0x1bc>)
 8006eec:	689b      	ldr	r3, [r3, #8]
 8006eee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	691b      	ldr	r3, [r3, #16]
 8006ef6:	00db      	lsls	r3, r3, #3
 8006ef8:	490e      	ldr	r1, [pc, #56]	; (8006f34 <HAL_RCC_ClockConfig+0x1bc>)
 8006efa:	4313      	orrs	r3, r2
 8006efc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006efe:	f000 f821 	bl	8006f44 <HAL_RCC_GetSysClockFreq>
 8006f02:	4602      	mov	r2, r0
 8006f04:	4b0b      	ldr	r3, [pc, #44]	; (8006f34 <HAL_RCC_ClockConfig+0x1bc>)
 8006f06:	689b      	ldr	r3, [r3, #8]
 8006f08:	091b      	lsrs	r3, r3, #4
 8006f0a:	f003 030f 	and.w	r3, r3, #15
 8006f0e:	490a      	ldr	r1, [pc, #40]	; (8006f38 <HAL_RCC_ClockConfig+0x1c0>)
 8006f10:	5ccb      	ldrb	r3, [r1, r3]
 8006f12:	fa22 f303 	lsr.w	r3, r2, r3
 8006f16:	4a09      	ldr	r2, [pc, #36]	; (8006f3c <HAL_RCC_ClockConfig+0x1c4>)
 8006f18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006f1a:	4b09      	ldr	r3, [pc, #36]	; (8006f40 <HAL_RCC_ClockConfig+0x1c8>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	4618      	mov	r0, r3
 8006f20:	f7fb fd6c 	bl	80029fc <HAL_InitTick>

  return HAL_OK;
 8006f24:	2300      	movs	r3, #0
}
 8006f26:	4618      	mov	r0, r3
 8006f28:	3710      	adds	r7, #16
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bd80      	pop	{r7, pc}
 8006f2e:	bf00      	nop
 8006f30:	40023c00 	.word	0x40023c00
 8006f34:	40023800 	.word	0x40023800
 8006f38:	0800e900 	.word	0x0800e900
 8006f3c:	20000030 	.word	0x20000030
 8006f40:	20000034 	.word	0x20000034

08006f44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006f44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006f48:	b090      	sub	sp, #64	; 0x40
 8006f4a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	637b      	str	r3, [r7, #52]	; 0x34
 8006f50:	2300      	movs	r3, #0
 8006f52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f54:	2300      	movs	r3, #0
 8006f56:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8006f58:	2300      	movs	r3, #0
 8006f5a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006f5c:	4b59      	ldr	r3, [pc, #356]	; (80070c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8006f5e:	689b      	ldr	r3, [r3, #8]
 8006f60:	f003 030c 	and.w	r3, r3, #12
 8006f64:	2b08      	cmp	r3, #8
 8006f66:	d00d      	beq.n	8006f84 <HAL_RCC_GetSysClockFreq+0x40>
 8006f68:	2b08      	cmp	r3, #8
 8006f6a:	f200 80a1 	bhi.w	80070b0 <HAL_RCC_GetSysClockFreq+0x16c>
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d002      	beq.n	8006f78 <HAL_RCC_GetSysClockFreq+0x34>
 8006f72:	2b04      	cmp	r3, #4
 8006f74:	d003      	beq.n	8006f7e <HAL_RCC_GetSysClockFreq+0x3a>
 8006f76:	e09b      	b.n	80070b0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006f78:	4b53      	ldr	r3, [pc, #332]	; (80070c8 <HAL_RCC_GetSysClockFreq+0x184>)
 8006f7a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8006f7c:	e09b      	b.n	80070b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006f7e:	4b53      	ldr	r3, [pc, #332]	; (80070cc <HAL_RCC_GetSysClockFreq+0x188>)
 8006f80:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006f82:	e098      	b.n	80070b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006f84:	4b4f      	ldr	r3, [pc, #316]	; (80070c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8006f86:	685b      	ldr	r3, [r3, #4]
 8006f88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006f8c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006f8e:	4b4d      	ldr	r3, [pc, #308]	; (80070c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8006f90:	685b      	ldr	r3, [r3, #4]
 8006f92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d028      	beq.n	8006fec <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006f9a:	4b4a      	ldr	r3, [pc, #296]	; (80070c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8006f9c:	685b      	ldr	r3, [r3, #4]
 8006f9e:	099b      	lsrs	r3, r3, #6
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	623b      	str	r3, [r7, #32]
 8006fa4:	627a      	str	r2, [r7, #36]	; 0x24
 8006fa6:	6a3b      	ldr	r3, [r7, #32]
 8006fa8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006fac:	2100      	movs	r1, #0
 8006fae:	4b47      	ldr	r3, [pc, #284]	; (80070cc <HAL_RCC_GetSysClockFreq+0x188>)
 8006fb0:	fb03 f201 	mul.w	r2, r3, r1
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	fb00 f303 	mul.w	r3, r0, r3
 8006fba:	4413      	add	r3, r2
 8006fbc:	4a43      	ldr	r2, [pc, #268]	; (80070cc <HAL_RCC_GetSysClockFreq+0x188>)
 8006fbe:	fba0 1202 	umull	r1, r2, r0, r2
 8006fc2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006fc4:	460a      	mov	r2, r1
 8006fc6:	62ba      	str	r2, [r7, #40]	; 0x28
 8006fc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006fca:	4413      	add	r3, r2
 8006fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006fce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	61bb      	str	r3, [r7, #24]
 8006fd4:	61fa      	str	r2, [r7, #28]
 8006fd6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006fda:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006fde:	f7f9 f94f 	bl	8000280 <__aeabi_uldivmod>
 8006fe2:	4602      	mov	r2, r0
 8006fe4:	460b      	mov	r3, r1
 8006fe6:	4613      	mov	r3, r2
 8006fe8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006fea:	e053      	b.n	8007094 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006fec:	4b35      	ldr	r3, [pc, #212]	; (80070c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8006fee:	685b      	ldr	r3, [r3, #4]
 8006ff0:	099b      	lsrs	r3, r3, #6
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	613b      	str	r3, [r7, #16]
 8006ff6:	617a      	str	r2, [r7, #20]
 8006ff8:	693b      	ldr	r3, [r7, #16]
 8006ffa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006ffe:	f04f 0b00 	mov.w	fp, #0
 8007002:	4652      	mov	r2, sl
 8007004:	465b      	mov	r3, fp
 8007006:	f04f 0000 	mov.w	r0, #0
 800700a:	f04f 0100 	mov.w	r1, #0
 800700e:	0159      	lsls	r1, r3, #5
 8007010:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007014:	0150      	lsls	r0, r2, #5
 8007016:	4602      	mov	r2, r0
 8007018:	460b      	mov	r3, r1
 800701a:	ebb2 080a 	subs.w	r8, r2, sl
 800701e:	eb63 090b 	sbc.w	r9, r3, fp
 8007022:	f04f 0200 	mov.w	r2, #0
 8007026:	f04f 0300 	mov.w	r3, #0
 800702a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800702e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8007032:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8007036:	ebb2 0408 	subs.w	r4, r2, r8
 800703a:	eb63 0509 	sbc.w	r5, r3, r9
 800703e:	f04f 0200 	mov.w	r2, #0
 8007042:	f04f 0300 	mov.w	r3, #0
 8007046:	00eb      	lsls	r3, r5, #3
 8007048:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800704c:	00e2      	lsls	r2, r4, #3
 800704e:	4614      	mov	r4, r2
 8007050:	461d      	mov	r5, r3
 8007052:	eb14 030a 	adds.w	r3, r4, sl
 8007056:	603b      	str	r3, [r7, #0]
 8007058:	eb45 030b 	adc.w	r3, r5, fp
 800705c:	607b      	str	r3, [r7, #4]
 800705e:	f04f 0200 	mov.w	r2, #0
 8007062:	f04f 0300 	mov.w	r3, #0
 8007066:	e9d7 4500 	ldrd	r4, r5, [r7]
 800706a:	4629      	mov	r1, r5
 800706c:	028b      	lsls	r3, r1, #10
 800706e:	4621      	mov	r1, r4
 8007070:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007074:	4621      	mov	r1, r4
 8007076:	028a      	lsls	r2, r1, #10
 8007078:	4610      	mov	r0, r2
 800707a:	4619      	mov	r1, r3
 800707c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800707e:	2200      	movs	r2, #0
 8007080:	60bb      	str	r3, [r7, #8]
 8007082:	60fa      	str	r2, [r7, #12]
 8007084:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007088:	f7f9 f8fa 	bl	8000280 <__aeabi_uldivmod>
 800708c:	4602      	mov	r2, r0
 800708e:	460b      	mov	r3, r1
 8007090:	4613      	mov	r3, r2
 8007092:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007094:	4b0b      	ldr	r3, [pc, #44]	; (80070c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8007096:	685b      	ldr	r3, [r3, #4]
 8007098:	0c1b      	lsrs	r3, r3, #16
 800709a:	f003 0303 	and.w	r3, r3, #3
 800709e:	3301      	adds	r3, #1
 80070a0:	005b      	lsls	r3, r3, #1
 80070a2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80070a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80070a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80070ac:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80070ae:	e002      	b.n	80070b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80070b0:	4b05      	ldr	r3, [pc, #20]	; (80070c8 <HAL_RCC_GetSysClockFreq+0x184>)
 80070b2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80070b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80070b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80070b8:	4618      	mov	r0, r3
 80070ba:	3740      	adds	r7, #64	; 0x40
 80070bc:	46bd      	mov	sp, r7
 80070be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80070c2:	bf00      	nop
 80070c4:	40023800 	.word	0x40023800
 80070c8:	00f42400 	.word	0x00f42400
 80070cc:	017d7840 	.word	0x017d7840

080070d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80070d0:	b480      	push	{r7}
 80070d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80070d4:	4b03      	ldr	r3, [pc, #12]	; (80070e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80070d6:	681b      	ldr	r3, [r3, #0]
}
 80070d8:	4618      	mov	r0, r3
 80070da:	46bd      	mov	sp, r7
 80070dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e0:	4770      	bx	lr
 80070e2:	bf00      	nop
 80070e4:	20000030 	.word	0x20000030

080070e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80070ec:	f7ff fff0 	bl	80070d0 <HAL_RCC_GetHCLKFreq>
 80070f0:	4602      	mov	r2, r0
 80070f2:	4b05      	ldr	r3, [pc, #20]	; (8007108 <HAL_RCC_GetPCLK1Freq+0x20>)
 80070f4:	689b      	ldr	r3, [r3, #8]
 80070f6:	0a9b      	lsrs	r3, r3, #10
 80070f8:	f003 0307 	and.w	r3, r3, #7
 80070fc:	4903      	ldr	r1, [pc, #12]	; (800710c <HAL_RCC_GetPCLK1Freq+0x24>)
 80070fe:	5ccb      	ldrb	r3, [r1, r3]
 8007100:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007104:	4618      	mov	r0, r3
 8007106:	bd80      	pop	{r7, pc}
 8007108:	40023800 	.word	0x40023800
 800710c:	0800e910 	.word	0x0800e910

08007110 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007114:	f7ff ffdc 	bl	80070d0 <HAL_RCC_GetHCLKFreq>
 8007118:	4602      	mov	r2, r0
 800711a:	4b05      	ldr	r3, [pc, #20]	; (8007130 <HAL_RCC_GetPCLK2Freq+0x20>)
 800711c:	689b      	ldr	r3, [r3, #8]
 800711e:	0b5b      	lsrs	r3, r3, #13
 8007120:	f003 0307 	and.w	r3, r3, #7
 8007124:	4903      	ldr	r1, [pc, #12]	; (8007134 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007126:	5ccb      	ldrb	r3, [r1, r3]
 8007128:	fa22 f303 	lsr.w	r3, r2, r3
}
 800712c:	4618      	mov	r0, r3
 800712e:	bd80      	pop	{r7, pc}
 8007130:	40023800 	.word	0x40023800
 8007134:	0800e910 	.word	0x0800e910

08007138 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b082      	sub	sp, #8
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d101      	bne.n	800714a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007146:	2301      	movs	r3, #1
 8007148:	e07b      	b.n	8007242 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800714e:	2b00      	cmp	r3, #0
 8007150:	d108      	bne.n	8007164 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	685b      	ldr	r3, [r3, #4]
 8007156:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800715a:	d009      	beq.n	8007170 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2200      	movs	r2, #0
 8007160:	61da      	str	r2, [r3, #28]
 8007162:	e005      	b.n	8007170 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2200      	movs	r2, #0
 8007168:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2200      	movs	r2, #0
 800716e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2200      	movs	r2, #0
 8007174:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800717c:	b2db      	uxtb	r3, r3
 800717e:	2b00      	cmp	r3, #0
 8007180:	d106      	bne.n	8007190 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2200      	movs	r2, #0
 8007186:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800718a:	6878      	ldr	r0, [r7, #4]
 800718c:	f7fb f8c0 	bl	8002310 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2202      	movs	r2, #2
 8007194:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	681a      	ldr	r2, [r3, #0]
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80071a6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	685b      	ldr	r3, [r3, #4]
 80071ac:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	689b      	ldr	r3, [r3, #8]
 80071b4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80071b8:	431a      	orrs	r2, r3
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	68db      	ldr	r3, [r3, #12]
 80071be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80071c2:	431a      	orrs	r2, r3
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	691b      	ldr	r3, [r3, #16]
 80071c8:	f003 0302 	and.w	r3, r3, #2
 80071cc:	431a      	orrs	r2, r3
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	695b      	ldr	r3, [r3, #20]
 80071d2:	f003 0301 	and.w	r3, r3, #1
 80071d6:	431a      	orrs	r2, r3
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	699b      	ldr	r3, [r3, #24]
 80071dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80071e0:	431a      	orrs	r2, r3
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	69db      	ldr	r3, [r3, #28]
 80071e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80071ea:	431a      	orrs	r2, r3
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	6a1b      	ldr	r3, [r3, #32]
 80071f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071f4:	ea42 0103 	orr.w	r1, r2, r3
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071fc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	430a      	orrs	r2, r1
 8007206:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	699b      	ldr	r3, [r3, #24]
 800720c:	0c1b      	lsrs	r3, r3, #16
 800720e:	f003 0104 	and.w	r1, r3, #4
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007216:	f003 0210 	and.w	r2, r3, #16
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	430a      	orrs	r2, r1
 8007220:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	69da      	ldr	r2, [r3, #28]
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007230:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2200      	movs	r2, #0
 8007236:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2201      	movs	r2, #1
 800723c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007240:	2300      	movs	r3, #0
}
 8007242:	4618      	mov	r0, r3
 8007244:	3708      	adds	r7, #8
 8007246:	46bd      	mov	sp, r7
 8007248:	bd80      	pop	{r7, pc}

0800724a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800724a:	b580      	push	{r7, lr}
 800724c:	b088      	sub	sp, #32
 800724e:	af00      	add	r7, sp, #0
 8007250:	60f8      	str	r0, [r7, #12]
 8007252:	60b9      	str	r1, [r7, #8]
 8007254:	603b      	str	r3, [r7, #0]
 8007256:	4613      	mov	r3, r2
 8007258:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800725a:	2300      	movs	r3, #0
 800725c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007264:	2b01      	cmp	r3, #1
 8007266:	d101      	bne.n	800726c <HAL_SPI_Transmit+0x22>
 8007268:	2302      	movs	r3, #2
 800726a:	e126      	b.n	80074ba <HAL_SPI_Transmit+0x270>
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	2201      	movs	r2, #1
 8007270:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007274:	f7fb fc06 	bl	8002a84 <HAL_GetTick>
 8007278:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800727a:	88fb      	ldrh	r3, [r7, #6]
 800727c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007284:	b2db      	uxtb	r3, r3
 8007286:	2b01      	cmp	r3, #1
 8007288:	d002      	beq.n	8007290 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800728a:	2302      	movs	r3, #2
 800728c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800728e:	e10b      	b.n	80074a8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007290:	68bb      	ldr	r3, [r7, #8]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d002      	beq.n	800729c <HAL_SPI_Transmit+0x52>
 8007296:	88fb      	ldrh	r3, [r7, #6]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d102      	bne.n	80072a2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800729c:	2301      	movs	r3, #1
 800729e:	77fb      	strb	r3, [r7, #31]
    goto error;
 80072a0:	e102      	b.n	80074a8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	2203      	movs	r2, #3
 80072a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	2200      	movs	r2, #0
 80072ae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	68ba      	ldr	r2, [r7, #8]
 80072b4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	88fa      	ldrh	r2, [r7, #6]
 80072ba:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	88fa      	ldrh	r2, [r7, #6]
 80072c0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	2200      	movs	r2, #0
 80072c6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	2200      	movs	r2, #0
 80072cc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	2200      	movs	r2, #0
 80072d2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	2200      	movs	r2, #0
 80072d8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	2200      	movs	r2, #0
 80072de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	689b      	ldr	r3, [r3, #8]
 80072e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80072e8:	d10f      	bne.n	800730a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	681a      	ldr	r2, [r3, #0]
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80072f8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	681a      	ldr	r2, [r3, #0]
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007308:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007314:	2b40      	cmp	r3, #64	; 0x40
 8007316:	d007      	beq.n	8007328 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	681a      	ldr	r2, [r3, #0]
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007326:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	68db      	ldr	r3, [r3, #12]
 800732c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007330:	d14b      	bne.n	80073ca <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	685b      	ldr	r3, [r3, #4]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d002      	beq.n	8007340 <HAL_SPI_Transmit+0xf6>
 800733a:	8afb      	ldrh	r3, [r7, #22]
 800733c:	2b01      	cmp	r3, #1
 800733e:	d13e      	bne.n	80073be <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007344:	881a      	ldrh	r2, [r3, #0]
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007350:	1c9a      	adds	r2, r3, #2
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800735a:	b29b      	uxth	r3, r3
 800735c:	3b01      	subs	r3, #1
 800735e:	b29a      	uxth	r2, r3
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007364:	e02b      	b.n	80073be <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	689b      	ldr	r3, [r3, #8]
 800736c:	f003 0302 	and.w	r3, r3, #2
 8007370:	2b02      	cmp	r3, #2
 8007372:	d112      	bne.n	800739a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007378:	881a      	ldrh	r2, [r3, #0]
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007384:	1c9a      	adds	r2, r3, #2
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800738e:	b29b      	uxth	r3, r3
 8007390:	3b01      	subs	r3, #1
 8007392:	b29a      	uxth	r2, r3
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	86da      	strh	r2, [r3, #54]	; 0x36
 8007398:	e011      	b.n	80073be <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800739a:	f7fb fb73 	bl	8002a84 <HAL_GetTick>
 800739e:	4602      	mov	r2, r0
 80073a0:	69bb      	ldr	r3, [r7, #24]
 80073a2:	1ad3      	subs	r3, r2, r3
 80073a4:	683a      	ldr	r2, [r7, #0]
 80073a6:	429a      	cmp	r2, r3
 80073a8:	d803      	bhi.n	80073b2 <HAL_SPI_Transmit+0x168>
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073b0:	d102      	bne.n	80073b8 <HAL_SPI_Transmit+0x16e>
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d102      	bne.n	80073be <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80073b8:	2303      	movs	r3, #3
 80073ba:	77fb      	strb	r3, [r7, #31]
          goto error;
 80073bc:	e074      	b.n	80074a8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80073c2:	b29b      	uxth	r3, r3
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d1ce      	bne.n	8007366 <HAL_SPI_Transmit+0x11c>
 80073c8:	e04c      	b.n	8007464 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	685b      	ldr	r3, [r3, #4]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d002      	beq.n	80073d8 <HAL_SPI_Transmit+0x18e>
 80073d2:	8afb      	ldrh	r3, [r7, #22]
 80073d4:	2b01      	cmp	r3, #1
 80073d6:	d140      	bne.n	800745a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	330c      	adds	r3, #12
 80073e2:	7812      	ldrb	r2, [r2, #0]
 80073e4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073ea:	1c5a      	adds	r2, r3, #1
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80073f4:	b29b      	uxth	r3, r3
 80073f6:	3b01      	subs	r3, #1
 80073f8:	b29a      	uxth	r2, r3
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80073fe:	e02c      	b.n	800745a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	689b      	ldr	r3, [r3, #8]
 8007406:	f003 0302 	and.w	r3, r3, #2
 800740a:	2b02      	cmp	r3, #2
 800740c:	d113      	bne.n	8007436 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	330c      	adds	r3, #12
 8007418:	7812      	ldrb	r2, [r2, #0]
 800741a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007420:	1c5a      	adds	r2, r3, #1
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800742a:	b29b      	uxth	r3, r3
 800742c:	3b01      	subs	r3, #1
 800742e:	b29a      	uxth	r2, r3
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	86da      	strh	r2, [r3, #54]	; 0x36
 8007434:	e011      	b.n	800745a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007436:	f7fb fb25 	bl	8002a84 <HAL_GetTick>
 800743a:	4602      	mov	r2, r0
 800743c:	69bb      	ldr	r3, [r7, #24]
 800743e:	1ad3      	subs	r3, r2, r3
 8007440:	683a      	ldr	r2, [r7, #0]
 8007442:	429a      	cmp	r2, r3
 8007444:	d803      	bhi.n	800744e <HAL_SPI_Transmit+0x204>
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800744c:	d102      	bne.n	8007454 <HAL_SPI_Transmit+0x20a>
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d102      	bne.n	800745a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8007454:	2303      	movs	r3, #3
 8007456:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007458:	e026      	b.n	80074a8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800745e:	b29b      	uxth	r3, r3
 8007460:	2b00      	cmp	r3, #0
 8007462:	d1cd      	bne.n	8007400 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007464:	69ba      	ldr	r2, [r7, #24]
 8007466:	6839      	ldr	r1, [r7, #0]
 8007468:	68f8      	ldr	r0, [r7, #12]
 800746a:	f000 fbcb 	bl	8007c04 <SPI_EndRxTxTransaction>
 800746e:	4603      	mov	r3, r0
 8007470:	2b00      	cmp	r3, #0
 8007472:	d002      	beq.n	800747a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	2220      	movs	r2, #32
 8007478:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	689b      	ldr	r3, [r3, #8]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d10a      	bne.n	8007498 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007482:	2300      	movs	r3, #0
 8007484:	613b      	str	r3, [r7, #16]
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	68db      	ldr	r3, [r3, #12]
 800748c:	613b      	str	r3, [r7, #16]
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	689b      	ldr	r3, [r3, #8]
 8007494:	613b      	str	r3, [r7, #16]
 8007496:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800749c:	2b00      	cmp	r3, #0
 800749e:	d002      	beq.n	80074a6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80074a0:	2301      	movs	r3, #1
 80074a2:	77fb      	strb	r3, [r7, #31]
 80074a4:	e000      	b.n	80074a8 <HAL_SPI_Transmit+0x25e>
  }

error:
 80074a6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	2201      	movs	r2, #1
 80074ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	2200      	movs	r2, #0
 80074b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80074b8:	7ffb      	ldrb	r3, [r7, #31]
}
 80074ba:	4618      	mov	r0, r3
 80074bc:	3720      	adds	r7, #32
 80074be:	46bd      	mov	sp, r7
 80074c0:	bd80      	pop	{r7, pc}

080074c2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80074c2:	b580      	push	{r7, lr}
 80074c4:	b088      	sub	sp, #32
 80074c6:	af02      	add	r7, sp, #8
 80074c8:	60f8      	str	r0, [r7, #12]
 80074ca:	60b9      	str	r1, [r7, #8]
 80074cc:	603b      	str	r3, [r7, #0]
 80074ce:	4613      	mov	r3, r2
 80074d0:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80074d2:	2300      	movs	r3, #0
 80074d4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	685b      	ldr	r3, [r3, #4]
 80074da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80074de:	d112      	bne.n	8007506 <HAL_SPI_Receive+0x44>
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	689b      	ldr	r3, [r3, #8]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d10e      	bne.n	8007506 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	2204      	movs	r2, #4
 80074ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80074f0:	88fa      	ldrh	r2, [r7, #6]
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	9300      	str	r3, [sp, #0]
 80074f6:	4613      	mov	r3, r2
 80074f8:	68ba      	ldr	r2, [r7, #8]
 80074fa:	68b9      	ldr	r1, [r7, #8]
 80074fc:	68f8      	ldr	r0, [r7, #12]
 80074fe:	f000 f8f1 	bl	80076e4 <HAL_SPI_TransmitReceive>
 8007502:	4603      	mov	r3, r0
 8007504:	e0ea      	b.n	80076dc <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800750c:	2b01      	cmp	r3, #1
 800750e:	d101      	bne.n	8007514 <HAL_SPI_Receive+0x52>
 8007510:	2302      	movs	r3, #2
 8007512:	e0e3      	b.n	80076dc <HAL_SPI_Receive+0x21a>
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	2201      	movs	r2, #1
 8007518:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800751c:	f7fb fab2 	bl	8002a84 <HAL_GetTick>
 8007520:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007528:	b2db      	uxtb	r3, r3
 800752a:	2b01      	cmp	r3, #1
 800752c:	d002      	beq.n	8007534 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800752e:	2302      	movs	r3, #2
 8007530:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007532:	e0ca      	b.n	80076ca <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8007534:	68bb      	ldr	r3, [r7, #8]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d002      	beq.n	8007540 <HAL_SPI_Receive+0x7e>
 800753a:	88fb      	ldrh	r3, [r7, #6]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d102      	bne.n	8007546 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8007540:	2301      	movs	r3, #1
 8007542:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007544:	e0c1      	b.n	80076ca <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	2204      	movs	r2, #4
 800754a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	2200      	movs	r2, #0
 8007552:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	68ba      	ldr	r2, [r7, #8]
 8007558:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	88fa      	ldrh	r2, [r7, #6]
 800755e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	88fa      	ldrh	r2, [r7, #6]
 8007564:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	2200      	movs	r2, #0
 800756a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	2200      	movs	r2, #0
 8007570:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	2200      	movs	r2, #0
 8007576:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	2200      	movs	r2, #0
 800757c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	2200      	movs	r2, #0
 8007582:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	689b      	ldr	r3, [r3, #8]
 8007588:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800758c:	d10f      	bne.n	80075ae <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	681a      	ldr	r2, [r3, #0]
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800759c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	681a      	ldr	r2, [r3, #0]
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80075ac:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075b8:	2b40      	cmp	r3, #64	; 0x40
 80075ba:	d007      	beq.n	80075cc <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	681a      	ldr	r2, [r3, #0]
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80075ca:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	68db      	ldr	r3, [r3, #12]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d162      	bne.n	800769a <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80075d4:	e02e      	b.n	8007634 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	689b      	ldr	r3, [r3, #8]
 80075dc:	f003 0301 	and.w	r3, r3, #1
 80075e0:	2b01      	cmp	r3, #1
 80075e2:	d115      	bne.n	8007610 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f103 020c 	add.w	r2, r3, #12
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075f0:	7812      	ldrb	r2, [r2, #0]
 80075f2:	b2d2      	uxtb	r2, r2
 80075f4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075fa:	1c5a      	adds	r2, r3, #1
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007604:	b29b      	uxth	r3, r3
 8007606:	3b01      	subs	r3, #1
 8007608:	b29a      	uxth	r2, r3
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800760e:	e011      	b.n	8007634 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007610:	f7fb fa38 	bl	8002a84 <HAL_GetTick>
 8007614:	4602      	mov	r2, r0
 8007616:	693b      	ldr	r3, [r7, #16]
 8007618:	1ad3      	subs	r3, r2, r3
 800761a:	683a      	ldr	r2, [r7, #0]
 800761c:	429a      	cmp	r2, r3
 800761e:	d803      	bhi.n	8007628 <HAL_SPI_Receive+0x166>
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007626:	d102      	bne.n	800762e <HAL_SPI_Receive+0x16c>
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d102      	bne.n	8007634 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800762e:	2303      	movs	r3, #3
 8007630:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007632:	e04a      	b.n	80076ca <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007638:	b29b      	uxth	r3, r3
 800763a:	2b00      	cmp	r3, #0
 800763c:	d1cb      	bne.n	80075d6 <HAL_SPI_Receive+0x114>
 800763e:	e031      	b.n	80076a4 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	689b      	ldr	r3, [r3, #8]
 8007646:	f003 0301 	and.w	r3, r3, #1
 800764a:	2b01      	cmp	r3, #1
 800764c:	d113      	bne.n	8007676 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	68da      	ldr	r2, [r3, #12]
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007658:	b292      	uxth	r2, r2
 800765a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007660:	1c9a      	adds	r2, r3, #2
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800766a:	b29b      	uxth	r3, r3
 800766c:	3b01      	subs	r3, #1
 800766e:	b29a      	uxth	r2, r3
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007674:	e011      	b.n	800769a <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007676:	f7fb fa05 	bl	8002a84 <HAL_GetTick>
 800767a:	4602      	mov	r2, r0
 800767c:	693b      	ldr	r3, [r7, #16]
 800767e:	1ad3      	subs	r3, r2, r3
 8007680:	683a      	ldr	r2, [r7, #0]
 8007682:	429a      	cmp	r2, r3
 8007684:	d803      	bhi.n	800768e <HAL_SPI_Receive+0x1cc>
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800768c:	d102      	bne.n	8007694 <HAL_SPI_Receive+0x1d2>
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d102      	bne.n	800769a <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8007694:	2303      	movs	r3, #3
 8007696:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007698:	e017      	b.n	80076ca <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800769e:	b29b      	uxth	r3, r3
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d1cd      	bne.n	8007640 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80076a4:	693a      	ldr	r2, [r7, #16]
 80076a6:	6839      	ldr	r1, [r7, #0]
 80076a8:	68f8      	ldr	r0, [r7, #12]
 80076aa:	f000 fa45 	bl	8007b38 <SPI_EndRxTransaction>
 80076ae:	4603      	mov	r3, r0
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d002      	beq.n	80076ba <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	2220      	movs	r2, #32
 80076b8:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d002      	beq.n	80076c8 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80076c2:	2301      	movs	r3, #1
 80076c4:	75fb      	strb	r3, [r7, #23]
 80076c6:	e000      	b.n	80076ca <HAL_SPI_Receive+0x208>
  }

error :
 80076c8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	2201      	movs	r2, #1
 80076ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	2200      	movs	r2, #0
 80076d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80076da:	7dfb      	ldrb	r3, [r7, #23]
}
 80076dc:	4618      	mov	r0, r3
 80076de:	3718      	adds	r7, #24
 80076e0:	46bd      	mov	sp, r7
 80076e2:	bd80      	pop	{r7, pc}

080076e4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b08c      	sub	sp, #48	; 0x30
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	60f8      	str	r0, [r7, #12]
 80076ec:	60b9      	str	r1, [r7, #8]
 80076ee:	607a      	str	r2, [r7, #4]
 80076f0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80076f2:	2301      	movs	r3, #1
 80076f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80076f6:	2300      	movs	r3, #0
 80076f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007702:	2b01      	cmp	r3, #1
 8007704:	d101      	bne.n	800770a <HAL_SPI_TransmitReceive+0x26>
 8007706:	2302      	movs	r3, #2
 8007708:	e18a      	b.n	8007a20 <HAL_SPI_TransmitReceive+0x33c>
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	2201      	movs	r2, #1
 800770e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007712:	f7fb f9b7 	bl	8002a84 <HAL_GetTick>
 8007716:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800771e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	685b      	ldr	r3, [r3, #4]
 8007726:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007728:	887b      	ldrh	r3, [r7, #2]
 800772a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800772c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007730:	2b01      	cmp	r3, #1
 8007732:	d00f      	beq.n	8007754 <HAL_SPI_TransmitReceive+0x70>
 8007734:	69fb      	ldr	r3, [r7, #28]
 8007736:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800773a:	d107      	bne.n	800774c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	689b      	ldr	r3, [r3, #8]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d103      	bne.n	800774c <HAL_SPI_TransmitReceive+0x68>
 8007744:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007748:	2b04      	cmp	r3, #4
 800774a:	d003      	beq.n	8007754 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800774c:	2302      	movs	r3, #2
 800774e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007752:	e15b      	b.n	8007a0c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007754:	68bb      	ldr	r3, [r7, #8]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d005      	beq.n	8007766 <HAL_SPI_TransmitReceive+0x82>
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d002      	beq.n	8007766 <HAL_SPI_TransmitReceive+0x82>
 8007760:	887b      	ldrh	r3, [r7, #2]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d103      	bne.n	800776e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007766:	2301      	movs	r3, #1
 8007768:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800776c:	e14e      	b.n	8007a0c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007774:	b2db      	uxtb	r3, r3
 8007776:	2b04      	cmp	r3, #4
 8007778:	d003      	beq.n	8007782 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	2205      	movs	r2, #5
 800777e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	2200      	movs	r2, #0
 8007786:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	687a      	ldr	r2, [r7, #4]
 800778c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	887a      	ldrh	r2, [r7, #2]
 8007792:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	887a      	ldrh	r2, [r7, #2]
 8007798:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	68ba      	ldr	r2, [r7, #8]
 800779e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	887a      	ldrh	r2, [r7, #2]
 80077a4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	887a      	ldrh	r2, [r7, #2]
 80077aa:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	2200      	movs	r2, #0
 80077b0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	2200      	movs	r2, #0
 80077b6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077c2:	2b40      	cmp	r3, #64	; 0x40
 80077c4:	d007      	beq.n	80077d6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	681a      	ldr	r2, [r3, #0]
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80077d4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	68db      	ldr	r3, [r3, #12]
 80077da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80077de:	d178      	bne.n	80078d2 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	685b      	ldr	r3, [r3, #4]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d002      	beq.n	80077ee <HAL_SPI_TransmitReceive+0x10a>
 80077e8:	8b7b      	ldrh	r3, [r7, #26]
 80077ea:	2b01      	cmp	r3, #1
 80077ec:	d166      	bne.n	80078bc <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077f2:	881a      	ldrh	r2, [r3, #0]
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077fe:	1c9a      	adds	r2, r3, #2
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007808:	b29b      	uxth	r3, r3
 800780a:	3b01      	subs	r3, #1
 800780c:	b29a      	uxth	r2, r3
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007812:	e053      	b.n	80078bc <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	689b      	ldr	r3, [r3, #8]
 800781a:	f003 0302 	and.w	r3, r3, #2
 800781e:	2b02      	cmp	r3, #2
 8007820:	d11b      	bne.n	800785a <HAL_SPI_TransmitReceive+0x176>
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007826:	b29b      	uxth	r3, r3
 8007828:	2b00      	cmp	r3, #0
 800782a:	d016      	beq.n	800785a <HAL_SPI_TransmitReceive+0x176>
 800782c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800782e:	2b01      	cmp	r3, #1
 8007830:	d113      	bne.n	800785a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007836:	881a      	ldrh	r2, [r3, #0]
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007842:	1c9a      	adds	r2, r3, #2
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800784c:	b29b      	uxth	r3, r3
 800784e:	3b01      	subs	r3, #1
 8007850:	b29a      	uxth	r2, r3
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007856:	2300      	movs	r3, #0
 8007858:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	689b      	ldr	r3, [r3, #8]
 8007860:	f003 0301 	and.w	r3, r3, #1
 8007864:	2b01      	cmp	r3, #1
 8007866:	d119      	bne.n	800789c <HAL_SPI_TransmitReceive+0x1b8>
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800786c:	b29b      	uxth	r3, r3
 800786e:	2b00      	cmp	r3, #0
 8007870:	d014      	beq.n	800789c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	68da      	ldr	r2, [r3, #12]
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800787c:	b292      	uxth	r2, r2
 800787e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007884:	1c9a      	adds	r2, r3, #2
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800788e:	b29b      	uxth	r3, r3
 8007890:	3b01      	subs	r3, #1
 8007892:	b29a      	uxth	r2, r3
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007898:	2301      	movs	r3, #1
 800789a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800789c:	f7fb f8f2 	bl	8002a84 <HAL_GetTick>
 80078a0:	4602      	mov	r2, r0
 80078a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078a4:	1ad3      	subs	r3, r2, r3
 80078a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80078a8:	429a      	cmp	r2, r3
 80078aa:	d807      	bhi.n	80078bc <HAL_SPI_TransmitReceive+0x1d8>
 80078ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078b2:	d003      	beq.n	80078bc <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80078b4:	2303      	movs	r3, #3
 80078b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80078ba:	e0a7      	b.n	8007a0c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80078c0:	b29b      	uxth	r3, r3
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d1a6      	bne.n	8007814 <HAL_SPI_TransmitReceive+0x130>
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80078ca:	b29b      	uxth	r3, r3
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d1a1      	bne.n	8007814 <HAL_SPI_TransmitReceive+0x130>
 80078d0:	e07c      	b.n	80079cc <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	685b      	ldr	r3, [r3, #4]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d002      	beq.n	80078e0 <HAL_SPI_TransmitReceive+0x1fc>
 80078da:	8b7b      	ldrh	r3, [r7, #26]
 80078dc:	2b01      	cmp	r3, #1
 80078de:	d16b      	bne.n	80079b8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	330c      	adds	r3, #12
 80078ea:	7812      	ldrb	r2, [r2, #0]
 80078ec:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078f2:	1c5a      	adds	r2, r3, #1
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80078fc:	b29b      	uxth	r3, r3
 80078fe:	3b01      	subs	r3, #1
 8007900:	b29a      	uxth	r2, r3
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007906:	e057      	b.n	80079b8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	689b      	ldr	r3, [r3, #8]
 800790e:	f003 0302 	and.w	r3, r3, #2
 8007912:	2b02      	cmp	r3, #2
 8007914:	d11c      	bne.n	8007950 <HAL_SPI_TransmitReceive+0x26c>
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800791a:	b29b      	uxth	r3, r3
 800791c:	2b00      	cmp	r3, #0
 800791e:	d017      	beq.n	8007950 <HAL_SPI_TransmitReceive+0x26c>
 8007920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007922:	2b01      	cmp	r3, #1
 8007924:	d114      	bne.n	8007950 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	330c      	adds	r3, #12
 8007930:	7812      	ldrb	r2, [r2, #0]
 8007932:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007938:	1c5a      	adds	r2, r3, #1
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007942:	b29b      	uxth	r3, r3
 8007944:	3b01      	subs	r3, #1
 8007946:	b29a      	uxth	r2, r3
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800794c:	2300      	movs	r3, #0
 800794e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	689b      	ldr	r3, [r3, #8]
 8007956:	f003 0301 	and.w	r3, r3, #1
 800795a:	2b01      	cmp	r3, #1
 800795c:	d119      	bne.n	8007992 <HAL_SPI_TransmitReceive+0x2ae>
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007962:	b29b      	uxth	r3, r3
 8007964:	2b00      	cmp	r3, #0
 8007966:	d014      	beq.n	8007992 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	68da      	ldr	r2, [r3, #12]
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007972:	b2d2      	uxtb	r2, r2
 8007974:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800797a:	1c5a      	adds	r2, r3, #1
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007984:	b29b      	uxth	r3, r3
 8007986:	3b01      	subs	r3, #1
 8007988:	b29a      	uxth	r2, r3
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800798e:	2301      	movs	r3, #1
 8007990:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007992:	f7fb f877 	bl	8002a84 <HAL_GetTick>
 8007996:	4602      	mov	r2, r0
 8007998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800799a:	1ad3      	subs	r3, r2, r3
 800799c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800799e:	429a      	cmp	r2, r3
 80079a0:	d803      	bhi.n	80079aa <HAL_SPI_TransmitReceive+0x2c6>
 80079a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079a8:	d102      	bne.n	80079b0 <HAL_SPI_TransmitReceive+0x2cc>
 80079aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d103      	bne.n	80079b8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80079b0:	2303      	movs	r3, #3
 80079b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80079b6:	e029      	b.n	8007a0c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80079bc:	b29b      	uxth	r3, r3
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d1a2      	bne.n	8007908 <HAL_SPI_TransmitReceive+0x224>
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80079c6:	b29b      	uxth	r3, r3
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d19d      	bne.n	8007908 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80079cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079ce:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80079d0:	68f8      	ldr	r0, [r7, #12]
 80079d2:	f000 f917 	bl	8007c04 <SPI_EndRxTxTransaction>
 80079d6:	4603      	mov	r3, r0
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d006      	beq.n	80079ea <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80079dc:	2301      	movs	r3, #1
 80079de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	2220      	movs	r2, #32
 80079e6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80079e8:	e010      	b.n	8007a0c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	689b      	ldr	r3, [r3, #8]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d10b      	bne.n	8007a0a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80079f2:	2300      	movs	r3, #0
 80079f4:	617b      	str	r3, [r7, #20]
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	68db      	ldr	r3, [r3, #12]
 80079fc:	617b      	str	r3, [r7, #20]
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	689b      	ldr	r3, [r3, #8]
 8007a04:	617b      	str	r3, [r7, #20]
 8007a06:	697b      	ldr	r3, [r7, #20]
 8007a08:	e000      	b.n	8007a0c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007a0a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	2201      	movs	r2, #1
 8007a10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	2200      	movs	r2, #0
 8007a18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007a1c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007a20:	4618      	mov	r0, r3
 8007a22:	3730      	adds	r7, #48	; 0x30
 8007a24:	46bd      	mov	sp, r7
 8007a26:	bd80      	pop	{r7, pc}

08007a28 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b088      	sub	sp, #32
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	60f8      	str	r0, [r7, #12]
 8007a30:	60b9      	str	r1, [r7, #8]
 8007a32:	603b      	str	r3, [r7, #0]
 8007a34:	4613      	mov	r3, r2
 8007a36:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007a38:	f7fb f824 	bl	8002a84 <HAL_GetTick>
 8007a3c:	4602      	mov	r2, r0
 8007a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a40:	1a9b      	subs	r3, r3, r2
 8007a42:	683a      	ldr	r2, [r7, #0]
 8007a44:	4413      	add	r3, r2
 8007a46:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007a48:	f7fb f81c 	bl	8002a84 <HAL_GetTick>
 8007a4c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007a4e:	4b39      	ldr	r3, [pc, #228]	; (8007b34 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	015b      	lsls	r3, r3, #5
 8007a54:	0d1b      	lsrs	r3, r3, #20
 8007a56:	69fa      	ldr	r2, [r7, #28]
 8007a58:	fb02 f303 	mul.w	r3, r2, r3
 8007a5c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007a5e:	e054      	b.n	8007b0a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a66:	d050      	beq.n	8007b0a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007a68:	f7fb f80c 	bl	8002a84 <HAL_GetTick>
 8007a6c:	4602      	mov	r2, r0
 8007a6e:	69bb      	ldr	r3, [r7, #24]
 8007a70:	1ad3      	subs	r3, r2, r3
 8007a72:	69fa      	ldr	r2, [r7, #28]
 8007a74:	429a      	cmp	r2, r3
 8007a76:	d902      	bls.n	8007a7e <SPI_WaitFlagStateUntilTimeout+0x56>
 8007a78:	69fb      	ldr	r3, [r7, #28]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d13d      	bne.n	8007afa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	685a      	ldr	r2, [r3, #4]
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007a8c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	685b      	ldr	r3, [r3, #4]
 8007a92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007a96:	d111      	bne.n	8007abc <SPI_WaitFlagStateUntilTimeout+0x94>
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	689b      	ldr	r3, [r3, #8]
 8007a9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007aa0:	d004      	beq.n	8007aac <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	689b      	ldr	r3, [r3, #8]
 8007aa6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007aaa:	d107      	bne.n	8007abc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	681a      	ldr	r2, [r3, #0]
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007aba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ac0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ac4:	d10f      	bne.n	8007ae6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	681a      	ldr	r2, [r3, #0]
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007ad4:	601a      	str	r2, [r3, #0]
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	681a      	ldr	r2, [r3, #0]
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007ae4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	2201      	movs	r2, #1
 8007aea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	2200      	movs	r2, #0
 8007af2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007af6:	2303      	movs	r3, #3
 8007af8:	e017      	b.n	8007b2a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007afa:	697b      	ldr	r3, [r7, #20]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d101      	bne.n	8007b04 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007b00:	2300      	movs	r3, #0
 8007b02:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007b04:	697b      	ldr	r3, [r7, #20]
 8007b06:	3b01      	subs	r3, #1
 8007b08:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	689a      	ldr	r2, [r3, #8]
 8007b10:	68bb      	ldr	r3, [r7, #8]
 8007b12:	4013      	ands	r3, r2
 8007b14:	68ba      	ldr	r2, [r7, #8]
 8007b16:	429a      	cmp	r2, r3
 8007b18:	bf0c      	ite	eq
 8007b1a:	2301      	moveq	r3, #1
 8007b1c:	2300      	movne	r3, #0
 8007b1e:	b2db      	uxtb	r3, r3
 8007b20:	461a      	mov	r2, r3
 8007b22:	79fb      	ldrb	r3, [r7, #7]
 8007b24:	429a      	cmp	r2, r3
 8007b26:	d19b      	bne.n	8007a60 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007b28:	2300      	movs	r3, #0
}
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	3720      	adds	r7, #32
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	bd80      	pop	{r7, pc}
 8007b32:	bf00      	nop
 8007b34:	20000030 	.word	0x20000030

08007b38 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b086      	sub	sp, #24
 8007b3c:	af02      	add	r7, sp, #8
 8007b3e:	60f8      	str	r0, [r7, #12]
 8007b40:	60b9      	str	r1, [r7, #8]
 8007b42:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	685b      	ldr	r3, [r3, #4]
 8007b48:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007b4c:	d111      	bne.n	8007b72 <SPI_EndRxTransaction+0x3a>
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	689b      	ldr	r3, [r3, #8]
 8007b52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b56:	d004      	beq.n	8007b62 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	689b      	ldr	r3, [r3, #8]
 8007b5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b60:	d107      	bne.n	8007b72 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	681a      	ldr	r2, [r3, #0]
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b70:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	685b      	ldr	r3, [r3, #4]
 8007b76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007b7a:	d12a      	bne.n	8007bd2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	689b      	ldr	r3, [r3, #8]
 8007b80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b84:	d012      	beq.n	8007bac <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	9300      	str	r3, [sp, #0]
 8007b8a:	68bb      	ldr	r3, [r7, #8]
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	2180      	movs	r1, #128	; 0x80
 8007b90:	68f8      	ldr	r0, [r7, #12]
 8007b92:	f7ff ff49 	bl	8007a28 <SPI_WaitFlagStateUntilTimeout>
 8007b96:	4603      	mov	r3, r0
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d02d      	beq.n	8007bf8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ba0:	f043 0220 	orr.w	r2, r3, #32
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007ba8:	2303      	movs	r3, #3
 8007baa:	e026      	b.n	8007bfa <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	9300      	str	r3, [sp, #0]
 8007bb0:	68bb      	ldr	r3, [r7, #8]
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	2101      	movs	r1, #1
 8007bb6:	68f8      	ldr	r0, [r7, #12]
 8007bb8:	f7ff ff36 	bl	8007a28 <SPI_WaitFlagStateUntilTimeout>
 8007bbc:	4603      	mov	r3, r0
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d01a      	beq.n	8007bf8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bc6:	f043 0220 	orr.w	r2, r3, #32
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007bce:	2303      	movs	r3, #3
 8007bd0:	e013      	b.n	8007bfa <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	9300      	str	r3, [sp, #0]
 8007bd6:	68bb      	ldr	r3, [r7, #8]
 8007bd8:	2200      	movs	r2, #0
 8007bda:	2101      	movs	r1, #1
 8007bdc:	68f8      	ldr	r0, [r7, #12]
 8007bde:	f7ff ff23 	bl	8007a28 <SPI_WaitFlagStateUntilTimeout>
 8007be2:	4603      	mov	r3, r0
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d007      	beq.n	8007bf8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bec:	f043 0220 	orr.w	r2, r3, #32
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007bf4:	2303      	movs	r3, #3
 8007bf6:	e000      	b.n	8007bfa <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007bf8:	2300      	movs	r3, #0
}
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	3710      	adds	r7, #16
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	bd80      	pop	{r7, pc}
	...

08007c04 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b088      	sub	sp, #32
 8007c08:	af02      	add	r7, sp, #8
 8007c0a:	60f8      	str	r0, [r7, #12]
 8007c0c:	60b9      	str	r1, [r7, #8]
 8007c0e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007c10:	4b1b      	ldr	r3, [pc, #108]	; (8007c80 <SPI_EndRxTxTransaction+0x7c>)
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	4a1b      	ldr	r2, [pc, #108]	; (8007c84 <SPI_EndRxTxTransaction+0x80>)
 8007c16:	fba2 2303 	umull	r2, r3, r2, r3
 8007c1a:	0d5b      	lsrs	r3, r3, #21
 8007c1c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007c20:	fb02 f303 	mul.w	r3, r2, r3
 8007c24:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	685b      	ldr	r3, [r3, #4]
 8007c2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007c2e:	d112      	bne.n	8007c56 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	9300      	str	r3, [sp, #0]
 8007c34:	68bb      	ldr	r3, [r7, #8]
 8007c36:	2200      	movs	r2, #0
 8007c38:	2180      	movs	r1, #128	; 0x80
 8007c3a:	68f8      	ldr	r0, [r7, #12]
 8007c3c:	f7ff fef4 	bl	8007a28 <SPI_WaitFlagStateUntilTimeout>
 8007c40:	4603      	mov	r3, r0
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d016      	beq.n	8007c74 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c4a:	f043 0220 	orr.w	r2, r3, #32
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007c52:	2303      	movs	r3, #3
 8007c54:	e00f      	b.n	8007c76 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007c56:	697b      	ldr	r3, [r7, #20]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d00a      	beq.n	8007c72 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007c5c:	697b      	ldr	r3, [r7, #20]
 8007c5e:	3b01      	subs	r3, #1
 8007c60:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	689b      	ldr	r3, [r3, #8]
 8007c68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c6c:	2b80      	cmp	r3, #128	; 0x80
 8007c6e:	d0f2      	beq.n	8007c56 <SPI_EndRxTxTransaction+0x52>
 8007c70:	e000      	b.n	8007c74 <SPI_EndRxTxTransaction+0x70>
        break;
 8007c72:	bf00      	nop
  }

  return HAL_OK;
 8007c74:	2300      	movs	r3, #0
}
 8007c76:	4618      	mov	r0, r3
 8007c78:	3718      	adds	r7, #24
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	bd80      	pop	{r7, pc}
 8007c7e:	bf00      	nop
 8007c80:	20000030 	.word	0x20000030
 8007c84:	165e9f81 	.word	0x165e9f81

08007c88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b082      	sub	sp, #8
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d101      	bne.n	8007c9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007c96:	2301      	movs	r3, #1
 8007c98:	e041      	b.n	8007d1e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ca0:	b2db      	uxtb	r3, r3
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d106      	bne.n	8007cb4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	2200      	movs	r2, #0
 8007caa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007cae:	6878      	ldr	r0, [r7, #4]
 8007cb0:	f7fa fcdc 	bl	800266c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2202      	movs	r2, #2
 8007cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681a      	ldr	r2, [r3, #0]
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	3304      	adds	r3, #4
 8007cc4:	4619      	mov	r1, r3
 8007cc6:	4610      	mov	r0, r2
 8007cc8:	f000 fd74 	bl	80087b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2201      	movs	r2, #1
 8007cd0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2201      	movs	r2, #1
 8007cd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2201      	movs	r2, #1
 8007ce0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2201      	movs	r2, #1
 8007ce8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2201      	movs	r2, #1
 8007cf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2201      	movs	r2, #1
 8007cf8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2201      	movs	r2, #1
 8007d00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2201      	movs	r2, #1
 8007d08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2201      	movs	r2, #1
 8007d10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2201      	movs	r2, #1
 8007d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007d1c:	2300      	movs	r3, #0
}
 8007d1e:	4618      	mov	r0, r3
 8007d20:	3708      	adds	r7, #8
 8007d22:	46bd      	mov	sp, r7
 8007d24:	bd80      	pop	{r7, pc}

08007d26 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007d26:	b580      	push	{r7, lr}
 8007d28:	b082      	sub	sp, #8
 8007d2a:	af00      	add	r7, sp, #0
 8007d2c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d101      	bne.n	8007d38 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007d34:	2301      	movs	r3, #1
 8007d36:	e041      	b.n	8007dbc <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d3e:	b2db      	uxtb	r3, r3
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d106      	bne.n	8007d52 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2200      	movs	r2, #0
 8007d48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	f000 f839 	bl	8007dc4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2202      	movs	r2, #2
 8007d56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681a      	ldr	r2, [r3, #0]
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	3304      	adds	r3, #4
 8007d62:	4619      	mov	r1, r3
 8007d64:	4610      	mov	r0, r2
 8007d66:	f000 fd25 	bl	80087b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	2201      	movs	r2, #1
 8007d6e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2201      	movs	r2, #1
 8007d76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	2201      	movs	r2, #1
 8007d7e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2201      	movs	r2, #1
 8007d86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2201      	movs	r2, #1
 8007d8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2201      	movs	r2, #1
 8007d96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2201      	movs	r2, #1
 8007d9e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2201      	movs	r2, #1
 8007da6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2201      	movs	r2, #1
 8007dae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2201      	movs	r2, #1
 8007db6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007dba:	2300      	movs	r3, #0
}
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	3708      	adds	r7, #8
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	bd80      	pop	{r7, pc}

08007dc4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007dc4:	b480      	push	{r7}
 8007dc6:	b083      	sub	sp, #12
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007dcc:	bf00      	nop
 8007dce:	370c      	adds	r7, #12
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd6:	4770      	bx	lr

08007dd8 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b086      	sub	sp, #24
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	60f8      	str	r0, [r7, #12]
 8007de0:	60b9      	str	r1, [r7, #8]
 8007de2:	607a      	str	r2, [r7, #4]
 8007de4:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8007de6:	2300      	movs	r3, #0
 8007de8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8007dea:	68bb      	ldr	r3, [r7, #8]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d109      	bne.n	8007e04 <HAL_TIM_PWM_Start_DMA+0x2c>
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007df6:	b2db      	uxtb	r3, r3
 8007df8:	2b02      	cmp	r3, #2
 8007dfa:	bf0c      	ite	eq
 8007dfc:	2301      	moveq	r3, #1
 8007dfe:	2300      	movne	r3, #0
 8007e00:	b2db      	uxtb	r3, r3
 8007e02:	e022      	b.n	8007e4a <HAL_TIM_PWM_Start_DMA+0x72>
 8007e04:	68bb      	ldr	r3, [r7, #8]
 8007e06:	2b04      	cmp	r3, #4
 8007e08:	d109      	bne.n	8007e1e <HAL_TIM_PWM_Start_DMA+0x46>
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007e10:	b2db      	uxtb	r3, r3
 8007e12:	2b02      	cmp	r3, #2
 8007e14:	bf0c      	ite	eq
 8007e16:	2301      	moveq	r3, #1
 8007e18:	2300      	movne	r3, #0
 8007e1a:	b2db      	uxtb	r3, r3
 8007e1c:	e015      	b.n	8007e4a <HAL_TIM_PWM_Start_DMA+0x72>
 8007e1e:	68bb      	ldr	r3, [r7, #8]
 8007e20:	2b08      	cmp	r3, #8
 8007e22:	d109      	bne.n	8007e38 <HAL_TIM_PWM_Start_DMA+0x60>
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007e2a:	b2db      	uxtb	r3, r3
 8007e2c:	2b02      	cmp	r3, #2
 8007e2e:	bf0c      	ite	eq
 8007e30:	2301      	moveq	r3, #1
 8007e32:	2300      	movne	r3, #0
 8007e34:	b2db      	uxtb	r3, r3
 8007e36:	e008      	b.n	8007e4a <HAL_TIM_PWM_Start_DMA+0x72>
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007e3e:	b2db      	uxtb	r3, r3
 8007e40:	2b02      	cmp	r3, #2
 8007e42:	bf0c      	ite	eq
 8007e44:	2301      	moveq	r3, #1
 8007e46:	2300      	movne	r3, #0
 8007e48:	b2db      	uxtb	r3, r3
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d001      	beq.n	8007e52 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8007e4e:	2302      	movs	r3, #2
 8007e50:	e15d      	b.n	800810e <HAL_TIM_PWM_Start_DMA+0x336>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8007e52:	68bb      	ldr	r3, [r7, #8]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d109      	bne.n	8007e6c <HAL_TIM_PWM_Start_DMA+0x94>
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007e5e:	b2db      	uxtb	r3, r3
 8007e60:	2b01      	cmp	r3, #1
 8007e62:	bf0c      	ite	eq
 8007e64:	2301      	moveq	r3, #1
 8007e66:	2300      	movne	r3, #0
 8007e68:	b2db      	uxtb	r3, r3
 8007e6a:	e022      	b.n	8007eb2 <HAL_TIM_PWM_Start_DMA+0xda>
 8007e6c:	68bb      	ldr	r3, [r7, #8]
 8007e6e:	2b04      	cmp	r3, #4
 8007e70:	d109      	bne.n	8007e86 <HAL_TIM_PWM_Start_DMA+0xae>
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007e78:	b2db      	uxtb	r3, r3
 8007e7a:	2b01      	cmp	r3, #1
 8007e7c:	bf0c      	ite	eq
 8007e7e:	2301      	moveq	r3, #1
 8007e80:	2300      	movne	r3, #0
 8007e82:	b2db      	uxtb	r3, r3
 8007e84:	e015      	b.n	8007eb2 <HAL_TIM_PWM_Start_DMA+0xda>
 8007e86:	68bb      	ldr	r3, [r7, #8]
 8007e88:	2b08      	cmp	r3, #8
 8007e8a:	d109      	bne.n	8007ea0 <HAL_TIM_PWM_Start_DMA+0xc8>
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007e92:	b2db      	uxtb	r3, r3
 8007e94:	2b01      	cmp	r3, #1
 8007e96:	bf0c      	ite	eq
 8007e98:	2301      	moveq	r3, #1
 8007e9a:	2300      	movne	r3, #0
 8007e9c:	b2db      	uxtb	r3, r3
 8007e9e:	e008      	b.n	8007eb2 <HAL_TIM_PWM_Start_DMA+0xda>
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007ea6:	b2db      	uxtb	r3, r3
 8007ea8:	2b01      	cmp	r3, #1
 8007eaa:	bf0c      	ite	eq
 8007eac:	2301      	moveq	r3, #1
 8007eae:	2300      	movne	r3, #0
 8007eb0:	b2db      	uxtb	r3, r3
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d024      	beq.n	8007f00 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d104      	bne.n	8007ec6 <HAL_TIM_PWM_Start_DMA+0xee>
 8007ebc:	887b      	ldrh	r3, [r7, #2]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d001      	beq.n	8007ec6 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8007ec2:	2301      	movs	r3, #1
 8007ec4:	e123      	b.n	800810e <HAL_TIM_PWM_Start_DMA+0x336>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007ec6:	68bb      	ldr	r3, [r7, #8]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d104      	bne.n	8007ed6 <HAL_TIM_PWM_Start_DMA+0xfe>
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	2202      	movs	r2, #2
 8007ed0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007ed4:	e016      	b.n	8007f04 <HAL_TIM_PWM_Start_DMA+0x12c>
 8007ed6:	68bb      	ldr	r3, [r7, #8]
 8007ed8:	2b04      	cmp	r3, #4
 8007eda:	d104      	bne.n	8007ee6 <HAL_TIM_PWM_Start_DMA+0x10e>
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	2202      	movs	r2, #2
 8007ee0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007ee4:	e00e      	b.n	8007f04 <HAL_TIM_PWM_Start_DMA+0x12c>
 8007ee6:	68bb      	ldr	r3, [r7, #8]
 8007ee8:	2b08      	cmp	r3, #8
 8007eea:	d104      	bne.n	8007ef6 <HAL_TIM_PWM_Start_DMA+0x11e>
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	2202      	movs	r2, #2
 8007ef0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007ef4:	e006      	b.n	8007f04 <HAL_TIM_PWM_Start_DMA+0x12c>
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	2202      	movs	r2, #2
 8007efa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007efe:	e001      	b.n	8007f04 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8007f00:	2301      	movs	r3, #1
 8007f02:	e104      	b.n	800810e <HAL_TIM_PWM_Start_DMA+0x336>
  }

  switch (Channel)
 8007f04:	68bb      	ldr	r3, [r7, #8]
 8007f06:	2b0c      	cmp	r3, #12
 8007f08:	f200 80ae 	bhi.w	8008068 <HAL_TIM_PWM_Start_DMA+0x290>
 8007f0c:	a201      	add	r2, pc, #4	; (adr r2, 8007f14 <HAL_TIM_PWM_Start_DMA+0x13c>)
 8007f0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f12:	bf00      	nop
 8007f14:	08007f49 	.word	0x08007f49
 8007f18:	08008069 	.word	0x08008069
 8007f1c:	08008069 	.word	0x08008069
 8007f20:	08008069 	.word	0x08008069
 8007f24:	08007f91 	.word	0x08007f91
 8007f28:	08008069 	.word	0x08008069
 8007f2c:	08008069 	.word	0x08008069
 8007f30:	08008069 	.word	0x08008069
 8007f34:	08007fd9 	.word	0x08007fd9
 8007f38:	08008069 	.word	0x08008069
 8007f3c:	08008069 	.word	0x08008069
 8007f40:	08008069 	.word	0x08008069
 8007f44:	08008021 	.word	0x08008021
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f4c:	4a72      	ldr	r2, [pc, #456]	; (8008118 <HAL_TIM_PWM_Start_DMA+0x340>)
 8007f4e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f54:	4a71      	ldr	r2, [pc, #452]	; (800811c <HAL_TIM_PWM_Start_DMA+0x344>)
 8007f56:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f5c:	4a70      	ldr	r2, [pc, #448]	; (8008120 <HAL_TIM_PWM_Start_DMA+0x348>)
 8007f5e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8007f64:	6879      	ldr	r1, [r7, #4]
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	3334      	adds	r3, #52	; 0x34
 8007f6c:	461a      	mov	r2, r3
 8007f6e:	887b      	ldrh	r3, [r7, #2]
 8007f70:	f7fb fc32 	bl	80037d8 <HAL_DMA_Start_IT>
 8007f74:	4603      	mov	r3, r0
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d001      	beq.n	8007f7e <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007f7a:	2301      	movs	r3, #1
 8007f7c:	e0c7      	b.n	800810e <HAL_TIM_PWM_Start_DMA+0x336>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	68da      	ldr	r2, [r3, #12]
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007f8c:	60da      	str	r2, [r3, #12]
      break;
 8007f8e:	e06e      	b.n	800806e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f94:	4a60      	ldr	r2, [pc, #384]	; (8008118 <HAL_TIM_PWM_Start_DMA+0x340>)
 8007f96:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f9c:	4a5f      	ldr	r2, [pc, #380]	; (800811c <HAL_TIM_PWM_Start_DMA+0x344>)
 8007f9e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fa4:	4a5e      	ldr	r2, [pc, #376]	; (8008120 <HAL_TIM_PWM_Start_DMA+0x348>)
 8007fa6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8007fac:	6879      	ldr	r1, [r7, #4]
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	3338      	adds	r3, #56	; 0x38
 8007fb4:	461a      	mov	r2, r3
 8007fb6:	887b      	ldrh	r3, [r7, #2]
 8007fb8:	f7fb fc0e 	bl	80037d8 <HAL_DMA_Start_IT>
 8007fbc:	4603      	mov	r3, r0
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d001      	beq.n	8007fc6 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007fc2:	2301      	movs	r3, #1
 8007fc4:	e0a3      	b.n	800810e <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	68da      	ldr	r2, [r3, #12]
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007fd4:	60da      	str	r2, [r3, #12]
      break;
 8007fd6:	e04a      	b.n	800806e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fdc:	4a4e      	ldr	r2, [pc, #312]	; (8008118 <HAL_TIM_PWM_Start_DMA+0x340>)
 8007fde:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fe4:	4a4d      	ldr	r2, [pc, #308]	; (800811c <HAL_TIM_PWM_Start_DMA+0x344>)
 8007fe6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fec:	4a4c      	ldr	r2, [pc, #304]	; (8008120 <HAL_TIM_PWM_Start_DMA+0x348>)
 8007fee:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8007ff4:	6879      	ldr	r1, [r7, #4]
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	333c      	adds	r3, #60	; 0x3c
 8007ffc:	461a      	mov	r2, r3
 8007ffe:	887b      	ldrh	r3, [r7, #2]
 8008000:	f7fb fbea 	bl	80037d8 <HAL_DMA_Start_IT>
 8008004:	4603      	mov	r3, r0
 8008006:	2b00      	cmp	r3, #0
 8008008:	d001      	beq.n	800800e <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800800a:	2301      	movs	r3, #1
 800800c:	e07f      	b.n	800810e <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	68da      	ldr	r2, [r3, #12]
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800801c:	60da      	str	r2, [r3, #12]
      break;
 800801e:	e026      	b.n	800806e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008024:	4a3c      	ldr	r2, [pc, #240]	; (8008118 <HAL_TIM_PWM_Start_DMA+0x340>)
 8008026:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800802c:	4a3b      	ldr	r2, [pc, #236]	; (800811c <HAL_TIM_PWM_Start_DMA+0x344>)
 800802e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008034:	4a3a      	ldr	r2, [pc, #232]	; (8008120 <HAL_TIM_PWM_Start_DMA+0x348>)
 8008036:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800803c:	6879      	ldr	r1, [r7, #4]
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	3340      	adds	r3, #64	; 0x40
 8008044:	461a      	mov	r2, r3
 8008046:	887b      	ldrh	r3, [r7, #2]
 8008048:	f7fb fbc6 	bl	80037d8 <HAL_DMA_Start_IT>
 800804c:	4603      	mov	r3, r0
 800804e:	2b00      	cmp	r3, #0
 8008050:	d001      	beq.n	8008056 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008052:	2301      	movs	r3, #1
 8008054:	e05b      	b.n	800810e <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	68da      	ldr	r2, [r3, #12]
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008064:	60da      	str	r2, [r3, #12]
      break;
 8008066:	e002      	b.n	800806e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8008068:	2301      	movs	r3, #1
 800806a:	75fb      	strb	r3, [r7, #23]
      break;
 800806c:	bf00      	nop
  }

  if (status == HAL_OK)
 800806e:	7dfb      	ldrb	r3, [r7, #23]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d14b      	bne.n	800810c <HAL_TIM_PWM_Start_DMA+0x334>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	2201      	movs	r2, #1
 800807a:	68b9      	ldr	r1, [r7, #8]
 800807c:	4618      	mov	r0, r3
 800807e:	f000 fe3f 	bl	8008d00 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	4a27      	ldr	r2, [pc, #156]	; (8008124 <HAL_TIM_PWM_Start_DMA+0x34c>)
 8008088:	4293      	cmp	r3, r2
 800808a:	d107      	bne.n	800809c <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800809a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	4a20      	ldr	r2, [pc, #128]	; (8008124 <HAL_TIM_PWM_Start_DMA+0x34c>)
 80080a2:	4293      	cmp	r3, r2
 80080a4:	d018      	beq.n	80080d8 <HAL_TIM_PWM_Start_DMA+0x300>
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080ae:	d013      	beq.n	80080d8 <HAL_TIM_PWM_Start_DMA+0x300>
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	4a1c      	ldr	r2, [pc, #112]	; (8008128 <HAL_TIM_PWM_Start_DMA+0x350>)
 80080b6:	4293      	cmp	r3, r2
 80080b8:	d00e      	beq.n	80080d8 <HAL_TIM_PWM_Start_DMA+0x300>
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	4a1b      	ldr	r2, [pc, #108]	; (800812c <HAL_TIM_PWM_Start_DMA+0x354>)
 80080c0:	4293      	cmp	r3, r2
 80080c2:	d009      	beq.n	80080d8 <HAL_TIM_PWM_Start_DMA+0x300>
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	4a19      	ldr	r2, [pc, #100]	; (8008130 <HAL_TIM_PWM_Start_DMA+0x358>)
 80080ca:	4293      	cmp	r3, r2
 80080cc:	d004      	beq.n	80080d8 <HAL_TIM_PWM_Start_DMA+0x300>
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	4a18      	ldr	r2, [pc, #96]	; (8008134 <HAL_TIM_PWM_Start_DMA+0x35c>)
 80080d4:	4293      	cmp	r3, r2
 80080d6:	d111      	bne.n	80080fc <HAL_TIM_PWM_Start_DMA+0x324>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	689b      	ldr	r3, [r3, #8]
 80080de:	f003 0307 	and.w	r3, r3, #7
 80080e2:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80080e4:	693b      	ldr	r3, [r7, #16]
 80080e6:	2b06      	cmp	r3, #6
 80080e8:	d010      	beq.n	800810c <HAL_TIM_PWM_Start_DMA+0x334>
      {
        __HAL_TIM_ENABLE(htim);
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	681a      	ldr	r2, [r3, #0]
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	f042 0201 	orr.w	r2, r2, #1
 80080f8:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80080fa:	e007      	b.n	800810c <HAL_TIM_PWM_Start_DMA+0x334>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	681a      	ldr	r2, [r3, #0]
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	f042 0201 	orr.w	r2, r2, #1
 800810a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800810c:	7dfb      	ldrb	r3, [r7, #23]
}
 800810e:	4618      	mov	r0, r3
 8008110:	3718      	adds	r7, #24
 8008112:	46bd      	mov	sp, r7
 8008114:	bd80      	pop	{r7, pc}
 8008116:	bf00      	nop
 8008118:	080086a5 	.word	0x080086a5
 800811c:	0800874d 	.word	0x0800874d
 8008120:	08008613 	.word	0x08008613
 8008124:	40010000 	.word	0x40010000
 8008128:	40000400 	.word	0x40000400
 800812c:	40000800 	.word	0x40000800
 8008130:	40000c00 	.word	0x40000c00
 8008134:	40014000 	.word	0x40014000

08008138 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b084      	sub	sp, #16
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
 8008140:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008142:	2300      	movs	r3, #0
 8008144:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	2b0c      	cmp	r3, #12
 800814a:	d855      	bhi.n	80081f8 <HAL_TIM_PWM_Stop_DMA+0xc0>
 800814c:	a201      	add	r2, pc, #4	; (adr r2, 8008154 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 800814e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008152:	bf00      	nop
 8008154:	08008189 	.word	0x08008189
 8008158:	080081f9 	.word	0x080081f9
 800815c:	080081f9 	.word	0x080081f9
 8008160:	080081f9 	.word	0x080081f9
 8008164:	080081a5 	.word	0x080081a5
 8008168:	080081f9 	.word	0x080081f9
 800816c:	080081f9 	.word	0x080081f9
 8008170:	080081f9 	.word	0x080081f9
 8008174:	080081c1 	.word	0x080081c1
 8008178:	080081f9 	.word	0x080081f9
 800817c:	080081f9 	.word	0x080081f9
 8008180:	080081f9 	.word	0x080081f9
 8008184:	080081dd 	.word	0x080081dd
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	68da      	ldr	r2, [r3, #12]
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008196:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800819c:	4618      	mov	r0, r3
 800819e:	f7fb fbe3 	bl	8003968 <HAL_DMA_Abort_IT>
      break;
 80081a2:	e02c      	b.n	80081fe <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	68da      	ldr	r2, [r3, #12]
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80081b2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081b8:	4618      	mov	r0, r3
 80081ba:	f7fb fbd5 	bl	8003968 <HAL_DMA_Abort_IT>
      break;
 80081be:	e01e      	b.n	80081fe <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	68da      	ldr	r2, [r3, #12]
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80081ce:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081d4:	4618      	mov	r0, r3
 80081d6:	f7fb fbc7 	bl	8003968 <HAL_DMA_Abort_IT>
      break;
 80081da:	e010      	b.n	80081fe <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	68da      	ldr	r2, [r3, #12]
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80081ea:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081f0:	4618      	mov	r0, r3
 80081f2:	f7fb fbb9 	bl	8003968 <HAL_DMA_Abort_IT>
      break;
 80081f6:	e002      	b.n	80081fe <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 80081f8:	2301      	movs	r3, #1
 80081fa:	73fb      	strb	r3, [r7, #15]
      break;
 80081fc:	bf00      	nop
  }

  if (status == HAL_OK)
 80081fe:	7bfb      	ldrb	r3, [r7, #15]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d157      	bne.n	80082b4 <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	2200      	movs	r2, #0
 800820a:	6839      	ldr	r1, [r7, #0]
 800820c:	4618      	mov	r0, r3
 800820e:	f000 fd77 	bl	8008d00 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	4a2a      	ldr	r2, [pc, #168]	; (80082c0 <HAL_TIM_PWM_Stop_DMA+0x188>)
 8008218:	4293      	cmp	r3, r2
 800821a:	d117      	bne.n	800824c <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	6a1a      	ldr	r2, [r3, #32]
 8008222:	f241 1311 	movw	r3, #4369	; 0x1111
 8008226:	4013      	ands	r3, r2
 8008228:	2b00      	cmp	r3, #0
 800822a:	d10f      	bne.n	800824c <HAL_TIM_PWM_Stop_DMA+0x114>
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	6a1a      	ldr	r2, [r3, #32]
 8008232:	f240 4344 	movw	r3, #1092	; 0x444
 8008236:	4013      	ands	r3, r2
 8008238:	2b00      	cmp	r3, #0
 800823a:	d107      	bne.n	800824c <HAL_TIM_PWM_Stop_DMA+0x114>
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800824a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	6a1a      	ldr	r2, [r3, #32]
 8008252:	f241 1311 	movw	r3, #4369	; 0x1111
 8008256:	4013      	ands	r3, r2
 8008258:	2b00      	cmp	r3, #0
 800825a:	d10f      	bne.n	800827c <HAL_TIM_PWM_Stop_DMA+0x144>
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	6a1a      	ldr	r2, [r3, #32]
 8008262:	f240 4344 	movw	r3, #1092	; 0x444
 8008266:	4013      	ands	r3, r2
 8008268:	2b00      	cmp	r3, #0
 800826a:	d107      	bne.n	800827c <HAL_TIM_PWM_Stop_DMA+0x144>
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	681a      	ldr	r2, [r3, #0]
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	f022 0201 	bic.w	r2, r2, #1
 800827a:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d104      	bne.n	800828c <HAL_TIM_PWM_Stop_DMA+0x154>
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	2201      	movs	r2, #1
 8008286:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800828a:	e013      	b.n	80082b4 <HAL_TIM_PWM_Stop_DMA+0x17c>
 800828c:	683b      	ldr	r3, [r7, #0]
 800828e:	2b04      	cmp	r3, #4
 8008290:	d104      	bne.n	800829c <HAL_TIM_PWM_Stop_DMA+0x164>
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	2201      	movs	r2, #1
 8008296:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800829a:	e00b      	b.n	80082b4 <HAL_TIM_PWM_Stop_DMA+0x17c>
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	2b08      	cmp	r3, #8
 80082a0:	d104      	bne.n	80082ac <HAL_TIM_PWM_Stop_DMA+0x174>
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	2201      	movs	r2, #1
 80082a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80082aa:	e003      	b.n	80082b4 <HAL_TIM_PWM_Stop_DMA+0x17c>
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2201      	movs	r2, #1
 80082b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 80082b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80082b6:	4618      	mov	r0, r3
 80082b8:	3710      	adds	r7, #16
 80082ba:	46bd      	mov	sp, r7
 80082bc:	bd80      	pop	{r7, pc}
 80082be:	bf00      	nop
 80082c0:	40010000 	.word	0x40010000

080082c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b086      	sub	sp, #24
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	60f8      	str	r0, [r7, #12]
 80082cc:	60b9      	str	r1, [r7, #8]
 80082ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80082d0:	2300      	movs	r3, #0
 80082d2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80082da:	2b01      	cmp	r3, #1
 80082dc:	d101      	bne.n	80082e2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80082de:	2302      	movs	r3, #2
 80082e0:	e0ae      	b.n	8008440 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	2201      	movs	r2, #1
 80082e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	2b0c      	cmp	r3, #12
 80082ee:	f200 809f 	bhi.w	8008430 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80082f2:	a201      	add	r2, pc, #4	; (adr r2, 80082f8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80082f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082f8:	0800832d 	.word	0x0800832d
 80082fc:	08008431 	.word	0x08008431
 8008300:	08008431 	.word	0x08008431
 8008304:	08008431 	.word	0x08008431
 8008308:	0800836d 	.word	0x0800836d
 800830c:	08008431 	.word	0x08008431
 8008310:	08008431 	.word	0x08008431
 8008314:	08008431 	.word	0x08008431
 8008318:	080083af 	.word	0x080083af
 800831c:	08008431 	.word	0x08008431
 8008320:	08008431 	.word	0x08008431
 8008324:	08008431 	.word	0x08008431
 8008328:	080083ef 	.word	0x080083ef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	68b9      	ldr	r1, [r7, #8]
 8008332:	4618      	mov	r0, r3
 8008334:	f000 fabe 	bl	80088b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	699a      	ldr	r2, [r3, #24]
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	f042 0208 	orr.w	r2, r2, #8
 8008346:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	699a      	ldr	r2, [r3, #24]
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	f022 0204 	bic.w	r2, r2, #4
 8008356:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	6999      	ldr	r1, [r3, #24]
 800835e:	68bb      	ldr	r3, [r7, #8]
 8008360:	691a      	ldr	r2, [r3, #16]
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	430a      	orrs	r2, r1
 8008368:	619a      	str	r2, [r3, #24]
      break;
 800836a:	e064      	b.n	8008436 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	68b9      	ldr	r1, [r7, #8]
 8008372:	4618      	mov	r0, r3
 8008374:	f000 fb04 	bl	8008980 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	699a      	ldr	r2, [r3, #24]
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008386:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	699a      	ldr	r2, [r3, #24]
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008396:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	6999      	ldr	r1, [r3, #24]
 800839e:	68bb      	ldr	r3, [r7, #8]
 80083a0:	691b      	ldr	r3, [r3, #16]
 80083a2:	021a      	lsls	r2, r3, #8
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	430a      	orrs	r2, r1
 80083aa:	619a      	str	r2, [r3, #24]
      break;
 80083ac:	e043      	b.n	8008436 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	68b9      	ldr	r1, [r7, #8]
 80083b4:	4618      	mov	r0, r3
 80083b6:	f000 fb4f 	bl	8008a58 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	69da      	ldr	r2, [r3, #28]
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	f042 0208 	orr.w	r2, r2, #8
 80083c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	69da      	ldr	r2, [r3, #28]
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	f022 0204 	bic.w	r2, r2, #4
 80083d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	69d9      	ldr	r1, [r3, #28]
 80083e0:	68bb      	ldr	r3, [r7, #8]
 80083e2:	691a      	ldr	r2, [r3, #16]
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	430a      	orrs	r2, r1
 80083ea:	61da      	str	r2, [r3, #28]
      break;
 80083ec:	e023      	b.n	8008436 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	68b9      	ldr	r1, [r7, #8]
 80083f4:	4618      	mov	r0, r3
 80083f6:	f000 fb99 	bl	8008b2c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	69da      	ldr	r2, [r3, #28]
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008408:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	69da      	ldr	r2, [r3, #28]
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008418:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	69d9      	ldr	r1, [r3, #28]
 8008420:	68bb      	ldr	r3, [r7, #8]
 8008422:	691b      	ldr	r3, [r3, #16]
 8008424:	021a      	lsls	r2, r3, #8
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	430a      	orrs	r2, r1
 800842c:	61da      	str	r2, [r3, #28]
      break;
 800842e:	e002      	b.n	8008436 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008430:	2301      	movs	r3, #1
 8008432:	75fb      	strb	r3, [r7, #23]
      break;
 8008434:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	2200      	movs	r2, #0
 800843a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800843e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008440:	4618      	mov	r0, r3
 8008442:	3718      	adds	r7, #24
 8008444:	46bd      	mov	sp, r7
 8008446:	bd80      	pop	{r7, pc}

08008448 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008448:	b580      	push	{r7, lr}
 800844a:	b084      	sub	sp, #16
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
 8008450:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008452:	2300      	movs	r3, #0
 8008454:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800845c:	2b01      	cmp	r3, #1
 800845e:	d101      	bne.n	8008464 <HAL_TIM_ConfigClockSource+0x1c>
 8008460:	2302      	movs	r3, #2
 8008462:	e0b4      	b.n	80085ce <HAL_TIM_ConfigClockSource+0x186>
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2201      	movs	r2, #1
 8008468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2202      	movs	r2, #2
 8008470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	689b      	ldr	r3, [r3, #8]
 800847a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800847c:	68bb      	ldr	r3, [r7, #8]
 800847e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008482:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008484:	68bb      	ldr	r3, [r7, #8]
 8008486:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800848a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	68ba      	ldr	r2, [r7, #8]
 8008492:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008494:	683b      	ldr	r3, [r7, #0]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800849c:	d03e      	beq.n	800851c <HAL_TIM_ConfigClockSource+0xd4>
 800849e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80084a2:	f200 8087 	bhi.w	80085b4 <HAL_TIM_ConfigClockSource+0x16c>
 80084a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084aa:	f000 8086 	beq.w	80085ba <HAL_TIM_ConfigClockSource+0x172>
 80084ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084b2:	d87f      	bhi.n	80085b4 <HAL_TIM_ConfigClockSource+0x16c>
 80084b4:	2b70      	cmp	r3, #112	; 0x70
 80084b6:	d01a      	beq.n	80084ee <HAL_TIM_ConfigClockSource+0xa6>
 80084b8:	2b70      	cmp	r3, #112	; 0x70
 80084ba:	d87b      	bhi.n	80085b4 <HAL_TIM_ConfigClockSource+0x16c>
 80084bc:	2b60      	cmp	r3, #96	; 0x60
 80084be:	d050      	beq.n	8008562 <HAL_TIM_ConfigClockSource+0x11a>
 80084c0:	2b60      	cmp	r3, #96	; 0x60
 80084c2:	d877      	bhi.n	80085b4 <HAL_TIM_ConfigClockSource+0x16c>
 80084c4:	2b50      	cmp	r3, #80	; 0x50
 80084c6:	d03c      	beq.n	8008542 <HAL_TIM_ConfigClockSource+0xfa>
 80084c8:	2b50      	cmp	r3, #80	; 0x50
 80084ca:	d873      	bhi.n	80085b4 <HAL_TIM_ConfigClockSource+0x16c>
 80084cc:	2b40      	cmp	r3, #64	; 0x40
 80084ce:	d058      	beq.n	8008582 <HAL_TIM_ConfigClockSource+0x13a>
 80084d0:	2b40      	cmp	r3, #64	; 0x40
 80084d2:	d86f      	bhi.n	80085b4 <HAL_TIM_ConfigClockSource+0x16c>
 80084d4:	2b30      	cmp	r3, #48	; 0x30
 80084d6:	d064      	beq.n	80085a2 <HAL_TIM_ConfigClockSource+0x15a>
 80084d8:	2b30      	cmp	r3, #48	; 0x30
 80084da:	d86b      	bhi.n	80085b4 <HAL_TIM_ConfigClockSource+0x16c>
 80084dc:	2b20      	cmp	r3, #32
 80084de:	d060      	beq.n	80085a2 <HAL_TIM_ConfigClockSource+0x15a>
 80084e0:	2b20      	cmp	r3, #32
 80084e2:	d867      	bhi.n	80085b4 <HAL_TIM_ConfigClockSource+0x16c>
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d05c      	beq.n	80085a2 <HAL_TIM_ConfigClockSource+0x15a>
 80084e8:	2b10      	cmp	r3, #16
 80084ea:	d05a      	beq.n	80085a2 <HAL_TIM_ConfigClockSource+0x15a>
 80084ec:	e062      	b.n	80085b4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	6818      	ldr	r0, [r3, #0]
 80084f2:	683b      	ldr	r3, [r7, #0]
 80084f4:	6899      	ldr	r1, [r3, #8]
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	685a      	ldr	r2, [r3, #4]
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	68db      	ldr	r3, [r3, #12]
 80084fe:	f000 fbdf 	bl	8008cc0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	689b      	ldr	r3, [r3, #8]
 8008508:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800850a:	68bb      	ldr	r3, [r7, #8]
 800850c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008510:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	68ba      	ldr	r2, [r7, #8]
 8008518:	609a      	str	r2, [r3, #8]
      break;
 800851a:	e04f      	b.n	80085bc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	6818      	ldr	r0, [r3, #0]
 8008520:	683b      	ldr	r3, [r7, #0]
 8008522:	6899      	ldr	r1, [r3, #8]
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	685a      	ldr	r2, [r3, #4]
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	68db      	ldr	r3, [r3, #12]
 800852c:	f000 fbc8 	bl	8008cc0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	689a      	ldr	r2, [r3, #8]
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800853e:	609a      	str	r2, [r3, #8]
      break;
 8008540:	e03c      	b.n	80085bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	6818      	ldr	r0, [r3, #0]
 8008546:	683b      	ldr	r3, [r7, #0]
 8008548:	6859      	ldr	r1, [r3, #4]
 800854a:	683b      	ldr	r3, [r7, #0]
 800854c:	68db      	ldr	r3, [r3, #12]
 800854e:	461a      	mov	r2, r3
 8008550:	f000 fb3c 	bl	8008bcc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	2150      	movs	r1, #80	; 0x50
 800855a:	4618      	mov	r0, r3
 800855c:	f000 fb95 	bl	8008c8a <TIM_ITRx_SetConfig>
      break;
 8008560:	e02c      	b.n	80085bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	6818      	ldr	r0, [r3, #0]
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	6859      	ldr	r1, [r3, #4]
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	68db      	ldr	r3, [r3, #12]
 800856e:	461a      	mov	r2, r3
 8008570:	f000 fb5b 	bl	8008c2a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	2160      	movs	r1, #96	; 0x60
 800857a:	4618      	mov	r0, r3
 800857c:	f000 fb85 	bl	8008c8a <TIM_ITRx_SetConfig>
      break;
 8008580:	e01c      	b.n	80085bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	6818      	ldr	r0, [r3, #0]
 8008586:	683b      	ldr	r3, [r7, #0]
 8008588:	6859      	ldr	r1, [r3, #4]
 800858a:	683b      	ldr	r3, [r7, #0]
 800858c:	68db      	ldr	r3, [r3, #12]
 800858e:	461a      	mov	r2, r3
 8008590:	f000 fb1c 	bl	8008bcc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	2140      	movs	r1, #64	; 0x40
 800859a:	4618      	mov	r0, r3
 800859c:	f000 fb75 	bl	8008c8a <TIM_ITRx_SetConfig>
      break;
 80085a0:	e00c      	b.n	80085bc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681a      	ldr	r2, [r3, #0]
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	4619      	mov	r1, r3
 80085ac:	4610      	mov	r0, r2
 80085ae:	f000 fb6c 	bl	8008c8a <TIM_ITRx_SetConfig>
      break;
 80085b2:	e003      	b.n	80085bc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80085b4:	2301      	movs	r3, #1
 80085b6:	73fb      	strb	r3, [r7, #15]
      break;
 80085b8:	e000      	b.n	80085bc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80085ba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	2201      	movs	r2, #1
 80085c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2200      	movs	r2, #0
 80085c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80085cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80085ce:	4618      	mov	r0, r3
 80085d0:	3710      	adds	r7, #16
 80085d2:	46bd      	mov	sp, r7
 80085d4:	bd80      	pop	{r7, pc}

080085d6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80085d6:	b480      	push	{r7}
 80085d8:	b083      	sub	sp, #12
 80085da:	af00      	add	r7, sp, #0
 80085dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80085de:	bf00      	nop
 80085e0:	370c      	adds	r7, #12
 80085e2:	46bd      	mov	sp, r7
 80085e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e8:	4770      	bx	lr

080085ea <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80085ea:	b480      	push	{r7}
 80085ec:	b083      	sub	sp, #12
 80085ee:	af00      	add	r7, sp, #0
 80085f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80085f2:	bf00      	nop
 80085f4:	370c      	adds	r7, #12
 80085f6:	46bd      	mov	sp, r7
 80085f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fc:	4770      	bx	lr

080085fe <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80085fe:	b480      	push	{r7}
 8008600:	b083      	sub	sp, #12
 8008602:	af00      	add	r7, sp, #0
 8008604:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8008606:	bf00      	nop
 8008608:	370c      	adds	r7, #12
 800860a:	46bd      	mov	sp, r7
 800860c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008610:	4770      	bx	lr

08008612 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8008612:	b580      	push	{r7, lr}
 8008614:	b084      	sub	sp, #16
 8008616:	af00      	add	r7, sp, #0
 8008618:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800861e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008624:	687a      	ldr	r2, [r7, #4]
 8008626:	429a      	cmp	r2, r3
 8008628:	d107      	bne.n	800863a <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	2201      	movs	r2, #1
 800862e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	2201      	movs	r2, #1
 8008634:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008638:	e02a      	b.n	8008690 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800863e:	687a      	ldr	r2, [r7, #4]
 8008640:	429a      	cmp	r2, r3
 8008642:	d107      	bne.n	8008654 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	2202      	movs	r2, #2
 8008648:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	2201      	movs	r2, #1
 800864e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008652:	e01d      	b.n	8008690 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008658:	687a      	ldr	r2, [r7, #4]
 800865a:	429a      	cmp	r2, r3
 800865c:	d107      	bne.n	800866e <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	2204      	movs	r2, #4
 8008662:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	2201      	movs	r2, #1
 8008668:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800866c:	e010      	b.n	8008690 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008672:	687a      	ldr	r2, [r7, #4]
 8008674:	429a      	cmp	r2, r3
 8008676:	d107      	bne.n	8008688 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	2208      	movs	r2, #8
 800867c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	2201      	movs	r2, #1
 8008682:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008686:	e003      	b.n	8008690 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	2201      	movs	r2, #1
 800868c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8008690:	68f8      	ldr	r0, [r7, #12]
 8008692:	f7ff ffb4 	bl	80085fe <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	2200      	movs	r2, #0
 800869a:	771a      	strb	r2, [r3, #28]
}
 800869c:	bf00      	nop
 800869e:	3710      	adds	r7, #16
 80086a0:	46bd      	mov	sp, r7
 80086a2:	bd80      	pop	{r7, pc}

080086a4 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b084      	sub	sp, #16
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086b0:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086b6:	687a      	ldr	r2, [r7, #4]
 80086b8:	429a      	cmp	r2, r3
 80086ba:	d10b      	bne.n	80086d4 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	2201      	movs	r2, #1
 80086c0:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	69db      	ldr	r3, [r3, #28]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d136      	bne.n	8008738 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	2201      	movs	r2, #1
 80086ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80086d2:	e031      	b.n	8008738 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086d8:	687a      	ldr	r2, [r7, #4]
 80086da:	429a      	cmp	r2, r3
 80086dc:	d10b      	bne.n	80086f6 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	2202      	movs	r2, #2
 80086e2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	69db      	ldr	r3, [r3, #28]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d125      	bne.n	8008738 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	2201      	movs	r2, #1
 80086f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80086f4:	e020      	b.n	8008738 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086fa:	687a      	ldr	r2, [r7, #4]
 80086fc:	429a      	cmp	r2, r3
 80086fe:	d10b      	bne.n	8008718 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	2204      	movs	r2, #4
 8008704:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	69db      	ldr	r3, [r3, #28]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d114      	bne.n	8008738 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	2201      	movs	r2, #1
 8008712:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008716:	e00f      	b.n	8008738 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800871c:	687a      	ldr	r2, [r7, #4]
 800871e:	429a      	cmp	r2, r3
 8008720:	d10a      	bne.n	8008738 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	2208      	movs	r2, #8
 8008726:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	69db      	ldr	r3, [r3, #28]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d103      	bne.n	8008738 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	2201      	movs	r2, #1
 8008734:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008738:	68f8      	ldr	r0, [r7, #12]
 800873a:	f7ff ff4c 	bl	80085d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	2200      	movs	r2, #0
 8008742:	771a      	strb	r2, [r3, #28]
}
 8008744:	bf00      	nop
 8008746:	3710      	adds	r7, #16
 8008748:	46bd      	mov	sp, r7
 800874a:	bd80      	pop	{r7, pc}

0800874c <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b084      	sub	sp, #16
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008758:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800875e:	687a      	ldr	r2, [r7, #4]
 8008760:	429a      	cmp	r2, r3
 8008762:	d103      	bne.n	800876c <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	2201      	movs	r2, #1
 8008768:	771a      	strb	r2, [r3, #28]
 800876a:	e019      	b.n	80087a0 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008770:	687a      	ldr	r2, [r7, #4]
 8008772:	429a      	cmp	r2, r3
 8008774:	d103      	bne.n	800877e <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	2202      	movs	r2, #2
 800877a:	771a      	strb	r2, [r3, #28]
 800877c:	e010      	b.n	80087a0 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008782:	687a      	ldr	r2, [r7, #4]
 8008784:	429a      	cmp	r2, r3
 8008786:	d103      	bne.n	8008790 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	2204      	movs	r2, #4
 800878c:	771a      	strb	r2, [r3, #28]
 800878e:	e007      	b.n	80087a0 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008794:	687a      	ldr	r2, [r7, #4]
 8008796:	429a      	cmp	r2, r3
 8008798:	d102      	bne.n	80087a0 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	2208      	movs	r2, #8
 800879e:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80087a0:	68f8      	ldr	r0, [r7, #12]
 80087a2:	f7ff ff22 	bl	80085ea <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	2200      	movs	r2, #0
 80087aa:	771a      	strb	r2, [r3, #28]
}
 80087ac:	bf00      	nop
 80087ae:	3710      	adds	r7, #16
 80087b0:	46bd      	mov	sp, r7
 80087b2:	bd80      	pop	{r7, pc}

080087b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80087b4:	b480      	push	{r7}
 80087b6:	b085      	sub	sp, #20
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
 80087bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	4a34      	ldr	r2, [pc, #208]	; (8008898 <TIM_Base_SetConfig+0xe4>)
 80087c8:	4293      	cmp	r3, r2
 80087ca:	d00f      	beq.n	80087ec <TIM_Base_SetConfig+0x38>
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087d2:	d00b      	beq.n	80087ec <TIM_Base_SetConfig+0x38>
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	4a31      	ldr	r2, [pc, #196]	; (800889c <TIM_Base_SetConfig+0xe8>)
 80087d8:	4293      	cmp	r3, r2
 80087da:	d007      	beq.n	80087ec <TIM_Base_SetConfig+0x38>
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	4a30      	ldr	r2, [pc, #192]	; (80088a0 <TIM_Base_SetConfig+0xec>)
 80087e0:	4293      	cmp	r3, r2
 80087e2:	d003      	beq.n	80087ec <TIM_Base_SetConfig+0x38>
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	4a2f      	ldr	r2, [pc, #188]	; (80088a4 <TIM_Base_SetConfig+0xf0>)
 80087e8:	4293      	cmp	r3, r2
 80087ea:	d108      	bne.n	80087fe <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80087f4:	683b      	ldr	r3, [r7, #0]
 80087f6:	685b      	ldr	r3, [r3, #4]
 80087f8:	68fa      	ldr	r2, [r7, #12]
 80087fa:	4313      	orrs	r3, r2
 80087fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	4a25      	ldr	r2, [pc, #148]	; (8008898 <TIM_Base_SetConfig+0xe4>)
 8008802:	4293      	cmp	r3, r2
 8008804:	d01b      	beq.n	800883e <TIM_Base_SetConfig+0x8a>
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800880c:	d017      	beq.n	800883e <TIM_Base_SetConfig+0x8a>
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	4a22      	ldr	r2, [pc, #136]	; (800889c <TIM_Base_SetConfig+0xe8>)
 8008812:	4293      	cmp	r3, r2
 8008814:	d013      	beq.n	800883e <TIM_Base_SetConfig+0x8a>
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	4a21      	ldr	r2, [pc, #132]	; (80088a0 <TIM_Base_SetConfig+0xec>)
 800881a:	4293      	cmp	r3, r2
 800881c:	d00f      	beq.n	800883e <TIM_Base_SetConfig+0x8a>
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	4a20      	ldr	r2, [pc, #128]	; (80088a4 <TIM_Base_SetConfig+0xf0>)
 8008822:	4293      	cmp	r3, r2
 8008824:	d00b      	beq.n	800883e <TIM_Base_SetConfig+0x8a>
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	4a1f      	ldr	r2, [pc, #124]	; (80088a8 <TIM_Base_SetConfig+0xf4>)
 800882a:	4293      	cmp	r3, r2
 800882c:	d007      	beq.n	800883e <TIM_Base_SetConfig+0x8a>
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	4a1e      	ldr	r2, [pc, #120]	; (80088ac <TIM_Base_SetConfig+0xf8>)
 8008832:	4293      	cmp	r3, r2
 8008834:	d003      	beq.n	800883e <TIM_Base_SetConfig+0x8a>
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	4a1d      	ldr	r2, [pc, #116]	; (80088b0 <TIM_Base_SetConfig+0xfc>)
 800883a:	4293      	cmp	r3, r2
 800883c:	d108      	bne.n	8008850 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008844:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	68db      	ldr	r3, [r3, #12]
 800884a:	68fa      	ldr	r2, [r7, #12]
 800884c:	4313      	orrs	r3, r2
 800884e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	695b      	ldr	r3, [r3, #20]
 800885a:	4313      	orrs	r3, r2
 800885c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	68fa      	ldr	r2, [r7, #12]
 8008862:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	689a      	ldr	r2, [r3, #8]
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800886c:	683b      	ldr	r3, [r7, #0]
 800886e:	681a      	ldr	r2, [r3, #0]
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	4a08      	ldr	r2, [pc, #32]	; (8008898 <TIM_Base_SetConfig+0xe4>)
 8008878:	4293      	cmp	r3, r2
 800887a:	d103      	bne.n	8008884 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	691a      	ldr	r2, [r3, #16]
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2201      	movs	r2, #1
 8008888:	615a      	str	r2, [r3, #20]
}
 800888a:	bf00      	nop
 800888c:	3714      	adds	r7, #20
 800888e:	46bd      	mov	sp, r7
 8008890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008894:	4770      	bx	lr
 8008896:	bf00      	nop
 8008898:	40010000 	.word	0x40010000
 800889c:	40000400 	.word	0x40000400
 80088a0:	40000800 	.word	0x40000800
 80088a4:	40000c00 	.word	0x40000c00
 80088a8:	40014000 	.word	0x40014000
 80088ac:	40014400 	.word	0x40014400
 80088b0:	40014800 	.word	0x40014800

080088b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80088b4:	b480      	push	{r7}
 80088b6:	b087      	sub	sp, #28
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
 80088bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	6a1b      	ldr	r3, [r3, #32]
 80088c2:	f023 0201 	bic.w	r2, r3, #1
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	6a1b      	ldr	r3, [r3, #32]
 80088ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	685b      	ldr	r3, [r3, #4]
 80088d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	699b      	ldr	r3, [r3, #24]
 80088da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	f023 0303 	bic.w	r3, r3, #3
 80088ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80088ec:	683b      	ldr	r3, [r7, #0]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	68fa      	ldr	r2, [r7, #12]
 80088f2:	4313      	orrs	r3, r2
 80088f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80088f6:	697b      	ldr	r3, [r7, #20]
 80088f8:	f023 0302 	bic.w	r3, r3, #2
 80088fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80088fe:	683b      	ldr	r3, [r7, #0]
 8008900:	689b      	ldr	r3, [r3, #8]
 8008902:	697a      	ldr	r2, [r7, #20]
 8008904:	4313      	orrs	r3, r2
 8008906:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	4a1c      	ldr	r2, [pc, #112]	; (800897c <TIM_OC1_SetConfig+0xc8>)
 800890c:	4293      	cmp	r3, r2
 800890e:	d10c      	bne.n	800892a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008910:	697b      	ldr	r3, [r7, #20]
 8008912:	f023 0308 	bic.w	r3, r3, #8
 8008916:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	68db      	ldr	r3, [r3, #12]
 800891c:	697a      	ldr	r2, [r7, #20]
 800891e:	4313      	orrs	r3, r2
 8008920:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008922:	697b      	ldr	r3, [r7, #20]
 8008924:	f023 0304 	bic.w	r3, r3, #4
 8008928:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	4a13      	ldr	r2, [pc, #76]	; (800897c <TIM_OC1_SetConfig+0xc8>)
 800892e:	4293      	cmp	r3, r2
 8008930:	d111      	bne.n	8008956 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008932:	693b      	ldr	r3, [r7, #16]
 8008934:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008938:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800893a:	693b      	ldr	r3, [r7, #16]
 800893c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008940:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	695b      	ldr	r3, [r3, #20]
 8008946:	693a      	ldr	r2, [r7, #16]
 8008948:	4313      	orrs	r3, r2
 800894a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	699b      	ldr	r3, [r3, #24]
 8008950:	693a      	ldr	r2, [r7, #16]
 8008952:	4313      	orrs	r3, r2
 8008954:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	693a      	ldr	r2, [r7, #16]
 800895a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	68fa      	ldr	r2, [r7, #12]
 8008960:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008962:	683b      	ldr	r3, [r7, #0]
 8008964:	685a      	ldr	r2, [r3, #4]
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	697a      	ldr	r2, [r7, #20]
 800896e:	621a      	str	r2, [r3, #32]
}
 8008970:	bf00      	nop
 8008972:	371c      	adds	r7, #28
 8008974:	46bd      	mov	sp, r7
 8008976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897a:	4770      	bx	lr
 800897c:	40010000 	.word	0x40010000

08008980 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008980:	b480      	push	{r7}
 8008982:	b087      	sub	sp, #28
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]
 8008988:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	6a1b      	ldr	r3, [r3, #32]
 800898e:	f023 0210 	bic.w	r2, r3, #16
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	6a1b      	ldr	r3, [r3, #32]
 800899a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	685b      	ldr	r3, [r3, #4]
 80089a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	699b      	ldr	r3, [r3, #24]
 80089a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80089ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80089b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80089b8:	683b      	ldr	r3, [r7, #0]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	021b      	lsls	r3, r3, #8
 80089be:	68fa      	ldr	r2, [r7, #12]
 80089c0:	4313      	orrs	r3, r2
 80089c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80089c4:	697b      	ldr	r3, [r7, #20]
 80089c6:	f023 0320 	bic.w	r3, r3, #32
 80089ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	689b      	ldr	r3, [r3, #8]
 80089d0:	011b      	lsls	r3, r3, #4
 80089d2:	697a      	ldr	r2, [r7, #20]
 80089d4:	4313      	orrs	r3, r2
 80089d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	4a1e      	ldr	r2, [pc, #120]	; (8008a54 <TIM_OC2_SetConfig+0xd4>)
 80089dc:	4293      	cmp	r3, r2
 80089de:	d10d      	bne.n	80089fc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80089e0:	697b      	ldr	r3, [r7, #20]
 80089e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80089e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	68db      	ldr	r3, [r3, #12]
 80089ec:	011b      	lsls	r3, r3, #4
 80089ee:	697a      	ldr	r2, [r7, #20]
 80089f0:	4313      	orrs	r3, r2
 80089f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80089f4:	697b      	ldr	r3, [r7, #20]
 80089f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80089fa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	4a15      	ldr	r2, [pc, #84]	; (8008a54 <TIM_OC2_SetConfig+0xd4>)
 8008a00:	4293      	cmp	r3, r2
 8008a02:	d113      	bne.n	8008a2c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008a04:	693b      	ldr	r3, [r7, #16]
 8008a06:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008a0a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008a0c:	693b      	ldr	r3, [r7, #16]
 8008a0e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008a12:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008a14:	683b      	ldr	r3, [r7, #0]
 8008a16:	695b      	ldr	r3, [r3, #20]
 8008a18:	009b      	lsls	r3, r3, #2
 8008a1a:	693a      	ldr	r2, [r7, #16]
 8008a1c:	4313      	orrs	r3, r2
 8008a1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	699b      	ldr	r3, [r3, #24]
 8008a24:	009b      	lsls	r3, r3, #2
 8008a26:	693a      	ldr	r2, [r7, #16]
 8008a28:	4313      	orrs	r3, r2
 8008a2a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	693a      	ldr	r2, [r7, #16]
 8008a30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	68fa      	ldr	r2, [r7, #12]
 8008a36:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	685a      	ldr	r2, [r3, #4]
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	697a      	ldr	r2, [r7, #20]
 8008a44:	621a      	str	r2, [r3, #32]
}
 8008a46:	bf00      	nop
 8008a48:	371c      	adds	r7, #28
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a50:	4770      	bx	lr
 8008a52:	bf00      	nop
 8008a54:	40010000 	.word	0x40010000

08008a58 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008a58:	b480      	push	{r7}
 8008a5a:	b087      	sub	sp, #28
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
 8008a60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	6a1b      	ldr	r3, [r3, #32]
 8008a66:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	6a1b      	ldr	r3, [r3, #32]
 8008a72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	685b      	ldr	r3, [r3, #4]
 8008a78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	69db      	ldr	r3, [r3, #28]
 8008a7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	f023 0303 	bic.w	r3, r3, #3
 8008a8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008a90:	683b      	ldr	r3, [r7, #0]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	68fa      	ldr	r2, [r7, #12]
 8008a96:	4313      	orrs	r3, r2
 8008a98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008a9a:	697b      	ldr	r3, [r7, #20]
 8008a9c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008aa0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008aa2:	683b      	ldr	r3, [r7, #0]
 8008aa4:	689b      	ldr	r3, [r3, #8]
 8008aa6:	021b      	lsls	r3, r3, #8
 8008aa8:	697a      	ldr	r2, [r7, #20]
 8008aaa:	4313      	orrs	r3, r2
 8008aac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	4a1d      	ldr	r2, [pc, #116]	; (8008b28 <TIM_OC3_SetConfig+0xd0>)
 8008ab2:	4293      	cmp	r3, r2
 8008ab4:	d10d      	bne.n	8008ad2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008ab6:	697b      	ldr	r3, [r7, #20]
 8008ab8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008abc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008abe:	683b      	ldr	r3, [r7, #0]
 8008ac0:	68db      	ldr	r3, [r3, #12]
 8008ac2:	021b      	lsls	r3, r3, #8
 8008ac4:	697a      	ldr	r2, [r7, #20]
 8008ac6:	4313      	orrs	r3, r2
 8008ac8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008aca:	697b      	ldr	r3, [r7, #20]
 8008acc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008ad0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	4a14      	ldr	r2, [pc, #80]	; (8008b28 <TIM_OC3_SetConfig+0xd0>)
 8008ad6:	4293      	cmp	r3, r2
 8008ad8:	d113      	bne.n	8008b02 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008ada:	693b      	ldr	r3, [r7, #16]
 8008adc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008ae0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008ae2:	693b      	ldr	r3, [r7, #16]
 8008ae4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008ae8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008aea:	683b      	ldr	r3, [r7, #0]
 8008aec:	695b      	ldr	r3, [r3, #20]
 8008aee:	011b      	lsls	r3, r3, #4
 8008af0:	693a      	ldr	r2, [r7, #16]
 8008af2:	4313      	orrs	r3, r2
 8008af4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008af6:	683b      	ldr	r3, [r7, #0]
 8008af8:	699b      	ldr	r3, [r3, #24]
 8008afa:	011b      	lsls	r3, r3, #4
 8008afc:	693a      	ldr	r2, [r7, #16]
 8008afe:	4313      	orrs	r3, r2
 8008b00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	693a      	ldr	r2, [r7, #16]
 8008b06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	68fa      	ldr	r2, [r7, #12]
 8008b0c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008b0e:	683b      	ldr	r3, [r7, #0]
 8008b10:	685a      	ldr	r2, [r3, #4]
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	697a      	ldr	r2, [r7, #20]
 8008b1a:	621a      	str	r2, [r3, #32]
}
 8008b1c:	bf00      	nop
 8008b1e:	371c      	adds	r7, #28
 8008b20:	46bd      	mov	sp, r7
 8008b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b26:	4770      	bx	lr
 8008b28:	40010000 	.word	0x40010000

08008b2c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008b2c:	b480      	push	{r7}
 8008b2e:	b087      	sub	sp, #28
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
 8008b34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	6a1b      	ldr	r3, [r3, #32]
 8008b3a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	6a1b      	ldr	r3, [r3, #32]
 8008b46:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	685b      	ldr	r3, [r3, #4]
 8008b4c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	69db      	ldr	r3, [r3, #28]
 8008b52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008b62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008b64:	683b      	ldr	r3, [r7, #0]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	021b      	lsls	r3, r3, #8
 8008b6a:	68fa      	ldr	r2, [r7, #12]
 8008b6c:	4313      	orrs	r3, r2
 8008b6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008b70:	693b      	ldr	r3, [r7, #16]
 8008b72:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008b76:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	689b      	ldr	r3, [r3, #8]
 8008b7c:	031b      	lsls	r3, r3, #12
 8008b7e:	693a      	ldr	r2, [r7, #16]
 8008b80:	4313      	orrs	r3, r2
 8008b82:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	4a10      	ldr	r2, [pc, #64]	; (8008bc8 <TIM_OC4_SetConfig+0x9c>)
 8008b88:	4293      	cmp	r3, r2
 8008b8a:	d109      	bne.n	8008ba0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008b8c:	697b      	ldr	r3, [r7, #20]
 8008b8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008b92:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008b94:	683b      	ldr	r3, [r7, #0]
 8008b96:	695b      	ldr	r3, [r3, #20]
 8008b98:	019b      	lsls	r3, r3, #6
 8008b9a:	697a      	ldr	r2, [r7, #20]
 8008b9c:	4313      	orrs	r3, r2
 8008b9e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	697a      	ldr	r2, [r7, #20]
 8008ba4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	68fa      	ldr	r2, [r7, #12]
 8008baa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008bac:	683b      	ldr	r3, [r7, #0]
 8008bae:	685a      	ldr	r2, [r3, #4]
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	693a      	ldr	r2, [r7, #16]
 8008bb8:	621a      	str	r2, [r3, #32]
}
 8008bba:	bf00      	nop
 8008bbc:	371c      	adds	r7, #28
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc4:	4770      	bx	lr
 8008bc6:	bf00      	nop
 8008bc8:	40010000 	.word	0x40010000

08008bcc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008bcc:	b480      	push	{r7}
 8008bce:	b087      	sub	sp, #28
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	60f8      	str	r0, [r7, #12]
 8008bd4:	60b9      	str	r1, [r7, #8]
 8008bd6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	6a1b      	ldr	r3, [r3, #32]
 8008bdc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	6a1b      	ldr	r3, [r3, #32]
 8008be2:	f023 0201 	bic.w	r2, r3, #1
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	699b      	ldr	r3, [r3, #24]
 8008bee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008bf0:	693b      	ldr	r3, [r7, #16]
 8008bf2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008bf6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	011b      	lsls	r3, r3, #4
 8008bfc:	693a      	ldr	r2, [r7, #16]
 8008bfe:	4313      	orrs	r3, r2
 8008c00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008c02:	697b      	ldr	r3, [r7, #20]
 8008c04:	f023 030a 	bic.w	r3, r3, #10
 8008c08:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008c0a:	697a      	ldr	r2, [r7, #20]
 8008c0c:	68bb      	ldr	r3, [r7, #8]
 8008c0e:	4313      	orrs	r3, r2
 8008c10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	693a      	ldr	r2, [r7, #16]
 8008c16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	697a      	ldr	r2, [r7, #20]
 8008c1c:	621a      	str	r2, [r3, #32]
}
 8008c1e:	bf00      	nop
 8008c20:	371c      	adds	r7, #28
 8008c22:	46bd      	mov	sp, r7
 8008c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c28:	4770      	bx	lr

08008c2a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008c2a:	b480      	push	{r7}
 8008c2c:	b087      	sub	sp, #28
 8008c2e:	af00      	add	r7, sp, #0
 8008c30:	60f8      	str	r0, [r7, #12]
 8008c32:	60b9      	str	r1, [r7, #8]
 8008c34:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	6a1b      	ldr	r3, [r3, #32]
 8008c3a:	f023 0210 	bic.w	r2, r3, #16
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	699b      	ldr	r3, [r3, #24]
 8008c46:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	6a1b      	ldr	r3, [r3, #32]
 8008c4c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008c4e:	697b      	ldr	r3, [r7, #20]
 8008c50:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008c54:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	031b      	lsls	r3, r3, #12
 8008c5a:	697a      	ldr	r2, [r7, #20]
 8008c5c:	4313      	orrs	r3, r2
 8008c5e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008c60:	693b      	ldr	r3, [r7, #16]
 8008c62:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008c66:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008c68:	68bb      	ldr	r3, [r7, #8]
 8008c6a:	011b      	lsls	r3, r3, #4
 8008c6c:	693a      	ldr	r2, [r7, #16]
 8008c6e:	4313      	orrs	r3, r2
 8008c70:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	697a      	ldr	r2, [r7, #20]
 8008c76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	693a      	ldr	r2, [r7, #16]
 8008c7c:	621a      	str	r2, [r3, #32]
}
 8008c7e:	bf00      	nop
 8008c80:	371c      	adds	r7, #28
 8008c82:	46bd      	mov	sp, r7
 8008c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c88:	4770      	bx	lr

08008c8a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008c8a:	b480      	push	{r7}
 8008c8c:	b085      	sub	sp, #20
 8008c8e:	af00      	add	r7, sp, #0
 8008c90:	6078      	str	r0, [r7, #4]
 8008c92:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	689b      	ldr	r3, [r3, #8]
 8008c98:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ca0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008ca2:	683a      	ldr	r2, [r7, #0]
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	4313      	orrs	r3, r2
 8008ca8:	f043 0307 	orr.w	r3, r3, #7
 8008cac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	68fa      	ldr	r2, [r7, #12]
 8008cb2:	609a      	str	r2, [r3, #8]
}
 8008cb4:	bf00      	nop
 8008cb6:	3714      	adds	r7, #20
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cbe:	4770      	bx	lr

08008cc0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008cc0:	b480      	push	{r7}
 8008cc2:	b087      	sub	sp, #28
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	60f8      	str	r0, [r7, #12]
 8008cc8:	60b9      	str	r1, [r7, #8]
 8008cca:	607a      	str	r2, [r7, #4]
 8008ccc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	689b      	ldr	r3, [r3, #8]
 8008cd2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008cd4:	697b      	ldr	r3, [r7, #20]
 8008cd6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008cda:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	021a      	lsls	r2, r3, #8
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	431a      	orrs	r2, r3
 8008ce4:	68bb      	ldr	r3, [r7, #8]
 8008ce6:	4313      	orrs	r3, r2
 8008ce8:	697a      	ldr	r2, [r7, #20]
 8008cea:	4313      	orrs	r3, r2
 8008cec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	697a      	ldr	r2, [r7, #20]
 8008cf2:	609a      	str	r2, [r3, #8]
}
 8008cf4:	bf00      	nop
 8008cf6:	371c      	adds	r7, #28
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfe:	4770      	bx	lr

08008d00 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008d00:	b480      	push	{r7}
 8008d02:	b087      	sub	sp, #28
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	60f8      	str	r0, [r7, #12]
 8008d08:	60b9      	str	r1, [r7, #8]
 8008d0a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008d0c:	68bb      	ldr	r3, [r7, #8]
 8008d0e:	f003 031f 	and.w	r3, r3, #31
 8008d12:	2201      	movs	r2, #1
 8008d14:	fa02 f303 	lsl.w	r3, r2, r3
 8008d18:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	6a1a      	ldr	r2, [r3, #32]
 8008d1e:	697b      	ldr	r3, [r7, #20]
 8008d20:	43db      	mvns	r3, r3
 8008d22:	401a      	ands	r2, r3
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	6a1a      	ldr	r2, [r3, #32]
 8008d2c:	68bb      	ldr	r3, [r7, #8]
 8008d2e:	f003 031f 	and.w	r3, r3, #31
 8008d32:	6879      	ldr	r1, [r7, #4]
 8008d34:	fa01 f303 	lsl.w	r3, r1, r3
 8008d38:	431a      	orrs	r2, r3
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	621a      	str	r2, [r3, #32]
}
 8008d3e:	bf00      	nop
 8008d40:	371c      	adds	r7, #28
 8008d42:	46bd      	mov	sp, r7
 8008d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d48:	4770      	bx	lr
	...

08008d4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008d4c:	b480      	push	{r7}
 8008d4e:	b085      	sub	sp, #20
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	6078      	str	r0, [r7, #4]
 8008d54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008d5c:	2b01      	cmp	r3, #1
 8008d5e:	d101      	bne.n	8008d64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008d60:	2302      	movs	r3, #2
 8008d62:	e050      	b.n	8008e06 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	2201      	movs	r2, #1
 8008d68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	2202      	movs	r2, #2
 8008d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	685b      	ldr	r3, [r3, #4]
 8008d7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	689b      	ldr	r3, [r3, #8]
 8008d82:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d8a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	68fa      	ldr	r2, [r7, #12]
 8008d92:	4313      	orrs	r3, r2
 8008d94:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	68fa      	ldr	r2, [r7, #12]
 8008d9c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	4a1c      	ldr	r2, [pc, #112]	; (8008e14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008da4:	4293      	cmp	r3, r2
 8008da6:	d018      	beq.n	8008dda <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008db0:	d013      	beq.n	8008dda <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	4a18      	ldr	r2, [pc, #96]	; (8008e18 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008db8:	4293      	cmp	r3, r2
 8008dba:	d00e      	beq.n	8008dda <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	4a16      	ldr	r2, [pc, #88]	; (8008e1c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008dc2:	4293      	cmp	r3, r2
 8008dc4:	d009      	beq.n	8008dda <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	4a15      	ldr	r2, [pc, #84]	; (8008e20 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8008dcc:	4293      	cmp	r3, r2
 8008dce:	d004      	beq.n	8008dda <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	4a13      	ldr	r2, [pc, #76]	; (8008e24 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8008dd6:	4293      	cmp	r3, r2
 8008dd8:	d10c      	bne.n	8008df4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008dda:	68bb      	ldr	r3, [r7, #8]
 8008ddc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008de0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008de2:	683b      	ldr	r3, [r7, #0]
 8008de4:	685b      	ldr	r3, [r3, #4]
 8008de6:	68ba      	ldr	r2, [r7, #8]
 8008de8:	4313      	orrs	r3, r2
 8008dea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	68ba      	ldr	r2, [r7, #8]
 8008df2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	2201      	movs	r2, #1
 8008df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	2200      	movs	r2, #0
 8008e00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008e04:	2300      	movs	r3, #0
}
 8008e06:	4618      	mov	r0, r3
 8008e08:	3714      	adds	r7, #20
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e10:	4770      	bx	lr
 8008e12:	bf00      	nop
 8008e14:	40010000 	.word	0x40010000
 8008e18:	40000400 	.word	0x40000400
 8008e1c:	40000800 	.word	0x40000800
 8008e20:	40000c00 	.word	0x40000c00
 8008e24:	40014000 	.word	0x40014000

08008e28 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b082      	sub	sp, #8
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d101      	bne.n	8008e3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008e36:	2301      	movs	r3, #1
 8008e38:	e03f      	b.n	8008eba <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e40:	b2db      	uxtb	r3, r3
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d106      	bne.n	8008e54 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	2200      	movs	r2, #0
 8008e4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008e4e:	6878      	ldr	r0, [r7, #4]
 8008e50:	f7f9 fd40 	bl	80028d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	2224      	movs	r2, #36	; 0x24
 8008e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	68da      	ldr	r2, [r3, #12]
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008e6a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008e6c:	6878      	ldr	r0, [r7, #4]
 8008e6e:	f000 f929 	bl	80090c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	691a      	ldr	r2, [r3, #16]
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008e80:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	695a      	ldr	r2, [r3, #20]
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008e90:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	68da      	ldr	r2, [r3, #12]
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008ea0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	2220      	movs	r2, #32
 8008eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	2220      	movs	r2, #32
 8008eb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008eb8:	2300      	movs	r3, #0
}
 8008eba:	4618      	mov	r0, r3
 8008ebc:	3708      	adds	r7, #8
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	bd80      	pop	{r7, pc}

08008ec2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008ec2:	b580      	push	{r7, lr}
 8008ec4:	b08a      	sub	sp, #40	; 0x28
 8008ec6:	af02      	add	r7, sp, #8
 8008ec8:	60f8      	str	r0, [r7, #12]
 8008eca:	60b9      	str	r1, [r7, #8]
 8008ecc:	603b      	str	r3, [r7, #0]
 8008ece:	4613      	mov	r3, r2
 8008ed0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008edc:	b2db      	uxtb	r3, r3
 8008ede:	2b20      	cmp	r3, #32
 8008ee0:	d17c      	bne.n	8008fdc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008ee2:	68bb      	ldr	r3, [r7, #8]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d002      	beq.n	8008eee <HAL_UART_Transmit+0x2c>
 8008ee8:	88fb      	ldrh	r3, [r7, #6]
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d101      	bne.n	8008ef2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008eee:	2301      	movs	r3, #1
 8008ef0:	e075      	b.n	8008fde <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008ef8:	2b01      	cmp	r3, #1
 8008efa:	d101      	bne.n	8008f00 <HAL_UART_Transmit+0x3e>
 8008efc:	2302      	movs	r3, #2
 8008efe:	e06e      	b.n	8008fde <HAL_UART_Transmit+0x11c>
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	2201      	movs	r2, #1
 8008f04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	2221      	movs	r2, #33	; 0x21
 8008f12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008f16:	f7f9 fdb5 	bl	8002a84 <HAL_GetTick>
 8008f1a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	88fa      	ldrh	r2, [r7, #6]
 8008f20:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	88fa      	ldrh	r2, [r7, #6]
 8008f26:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	689b      	ldr	r3, [r3, #8]
 8008f2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f30:	d108      	bne.n	8008f44 <HAL_UART_Transmit+0x82>
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	691b      	ldr	r3, [r3, #16]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d104      	bne.n	8008f44 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008f3e:	68bb      	ldr	r3, [r7, #8]
 8008f40:	61bb      	str	r3, [r7, #24]
 8008f42:	e003      	b.n	8008f4c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008f44:	68bb      	ldr	r3, [r7, #8]
 8008f46:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008f48:	2300      	movs	r3, #0
 8008f4a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	2200      	movs	r2, #0
 8008f50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008f54:	e02a      	b.n	8008fac <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008f56:	683b      	ldr	r3, [r7, #0]
 8008f58:	9300      	str	r3, [sp, #0]
 8008f5a:	697b      	ldr	r3, [r7, #20]
 8008f5c:	2200      	movs	r2, #0
 8008f5e:	2180      	movs	r1, #128	; 0x80
 8008f60:	68f8      	ldr	r0, [r7, #12]
 8008f62:	f000 f840 	bl	8008fe6 <UART_WaitOnFlagUntilTimeout>
 8008f66:	4603      	mov	r3, r0
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d001      	beq.n	8008f70 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008f6c:	2303      	movs	r3, #3
 8008f6e:	e036      	b.n	8008fde <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008f70:	69fb      	ldr	r3, [r7, #28]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d10b      	bne.n	8008f8e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008f76:	69bb      	ldr	r3, [r7, #24]
 8008f78:	881b      	ldrh	r3, [r3, #0]
 8008f7a:	461a      	mov	r2, r3
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008f84:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008f86:	69bb      	ldr	r3, [r7, #24]
 8008f88:	3302      	adds	r3, #2
 8008f8a:	61bb      	str	r3, [r7, #24]
 8008f8c:	e007      	b.n	8008f9e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008f8e:	69fb      	ldr	r3, [r7, #28]
 8008f90:	781a      	ldrb	r2, [r3, #0]
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008f98:	69fb      	ldr	r3, [r7, #28]
 8008f9a:	3301      	adds	r3, #1
 8008f9c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008fa2:	b29b      	uxth	r3, r3
 8008fa4:	3b01      	subs	r3, #1
 8008fa6:	b29a      	uxth	r2, r3
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008fb0:	b29b      	uxth	r3, r3
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d1cf      	bne.n	8008f56 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008fb6:	683b      	ldr	r3, [r7, #0]
 8008fb8:	9300      	str	r3, [sp, #0]
 8008fba:	697b      	ldr	r3, [r7, #20]
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	2140      	movs	r1, #64	; 0x40
 8008fc0:	68f8      	ldr	r0, [r7, #12]
 8008fc2:	f000 f810 	bl	8008fe6 <UART_WaitOnFlagUntilTimeout>
 8008fc6:	4603      	mov	r3, r0
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d001      	beq.n	8008fd0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008fcc:	2303      	movs	r3, #3
 8008fce:	e006      	b.n	8008fde <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	2220      	movs	r2, #32
 8008fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008fd8:	2300      	movs	r3, #0
 8008fda:	e000      	b.n	8008fde <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008fdc:	2302      	movs	r3, #2
  }
}
 8008fde:	4618      	mov	r0, r3
 8008fe0:	3720      	adds	r7, #32
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	bd80      	pop	{r7, pc}

08008fe6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008fe6:	b580      	push	{r7, lr}
 8008fe8:	b090      	sub	sp, #64	; 0x40
 8008fea:	af00      	add	r7, sp, #0
 8008fec:	60f8      	str	r0, [r7, #12]
 8008fee:	60b9      	str	r1, [r7, #8]
 8008ff0:	603b      	str	r3, [r7, #0]
 8008ff2:	4613      	mov	r3, r2
 8008ff4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008ff6:	e050      	b.n	800909a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008ff8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ffa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ffe:	d04c      	beq.n	800909a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009000:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009002:	2b00      	cmp	r3, #0
 8009004:	d007      	beq.n	8009016 <UART_WaitOnFlagUntilTimeout+0x30>
 8009006:	f7f9 fd3d 	bl	8002a84 <HAL_GetTick>
 800900a:	4602      	mov	r2, r0
 800900c:	683b      	ldr	r3, [r7, #0]
 800900e:	1ad3      	subs	r3, r2, r3
 8009010:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009012:	429a      	cmp	r2, r3
 8009014:	d241      	bcs.n	800909a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	330c      	adds	r3, #12
 800901c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800901e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009020:	e853 3f00 	ldrex	r3, [r3]
 8009024:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009028:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800902c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	330c      	adds	r3, #12
 8009034:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009036:	637a      	str	r2, [r7, #52]	; 0x34
 8009038:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800903a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800903c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800903e:	e841 2300 	strex	r3, r2, [r1]
 8009042:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009046:	2b00      	cmp	r3, #0
 8009048:	d1e5      	bne.n	8009016 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	3314      	adds	r3, #20
 8009050:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009052:	697b      	ldr	r3, [r7, #20]
 8009054:	e853 3f00 	ldrex	r3, [r3]
 8009058:	613b      	str	r3, [r7, #16]
   return(result);
 800905a:	693b      	ldr	r3, [r7, #16]
 800905c:	f023 0301 	bic.w	r3, r3, #1
 8009060:	63bb      	str	r3, [r7, #56]	; 0x38
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	3314      	adds	r3, #20
 8009068:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800906a:	623a      	str	r2, [r7, #32]
 800906c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800906e:	69f9      	ldr	r1, [r7, #28]
 8009070:	6a3a      	ldr	r2, [r7, #32]
 8009072:	e841 2300 	strex	r3, r2, [r1]
 8009076:	61bb      	str	r3, [r7, #24]
   return(result);
 8009078:	69bb      	ldr	r3, [r7, #24]
 800907a:	2b00      	cmp	r3, #0
 800907c:	d1e5      	bne.n	800904a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	2220      	movs	r2, #32
 8009082:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	2220      	movs	r2, #32
 800908a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	2200      	movs	r2, #0
 8009092:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8009096:	2303      	movs	r3, #3
 8009098:	e00f      	b.n	80090ba <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	681a      	ldr	r2, [r3, #0]
 80090a0:	68bb      	ldr	r3, [r7, #8]
 80090a2:	4013      	ands	r3, r2
 80090a4:	68ba      	ldr	r2, [r7, #8]
 80090a6:	429a      	cmp	r2, r3
 80090a8:	bf0c      	ite	eq
 80090aa:	2301      	moveq	r3, #1
 80090ac:	2300      	movne	r3, #0
 80090ae:	b2db      	uxtb	r3, r3
 80090b0:	461a      	mov	r2, r3
 80090b2:	79fb      	ldrb	r3, [r7, #7]
 80090b4:	429a      	cmp	r2, r3
 80090b6:	d09f      	beq.n	8008ff8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80090b8:	2300      	movs	r3, #0
}
 80090ba:	4618      	mov	r0, r3
 80090bc:	3740      	adds	r7, #64	; 0x40
 80090be:	46bd      	mov	sp, r7
 80090c0:	bd80      	pop	{r7, pc}
	...

080090c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80090c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80090c8:	b0c0      	sub	sp, #256	; 0x100
 80090ca:	af00      	add	r7, sp, #0
 80090cc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80090d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	691b      	ldr	r3, [r3, #16]
 80090d8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80090dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090e0:	68d9      	ldr	r1, [r3, #12]
 80090e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090e6:	681a      	ldr	r2, [r3, #0]
 80090e8:	ea40 0301 	orr.w	r3, r0, r1
 80090ec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80090ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090f2:	689a      	ldr	r2, [r3, #8]
 80090f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090f8:	691b      	ldr	r3, [r3, #16]
 80090fa:	431a      	orrs	r2, r3
 80090fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009100:	695b      	ldr	r3, [r3, #20]
 8009102:	431a      	orrs	r2, r3
 8009104:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009108:	69db      	ldr	r3, [r3, #28]
 800910a:	4313      	orrs	r3, r2
 800910c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	68db      	ldr	r3, [r3, #12]
 8009118:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800911c:	f021 010c 	bic.w	r1, r1, #12
 8009120:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009124:	681a      	ldr	r2, [r3, #0]
 8009126:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800912a:	430b      	orrs	r3, r1
 800912c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800912e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	695b      	ldr	r3, [r3, #20]
 8009136:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800913a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800913e:	6999      	ldr	r1, [r3, #24]
 8009140:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009144:	681a      	ldr	r2, [r3, #0]
 8009146:	ea40 0301 	orr.w	r3, r0, r1
 800914a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800914c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009150:	681a      	ldr	r2, [r3, #0]
 8009152:	4b8f      	ldr	r3, [pc, #572]	; (8009390 <UART_SetConfig+0x2cc>)
 8009154:	429a      	cmp	r2, r3
 8009156:	d005      	beq.n	8009164 <UART_SetConfig+0xa0>
 8009158:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800915c:	681a      	ldr	r2, [r3, #0]
 800915e:	4b8d      	ldr	r3, [pc, #564]	; (8009394 <UART_SetConfig+0x2d0>)
 8009160:	429a      	cmp	r2, r3
 8009162:	d104      	bne.n	800916e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009164:	f7fd ffd4 	bl	8007110 <HAL_RCC_GetPCLK2Freq>
 8009168:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800916c:	e003      	b.n	8009176 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800916e:	f7fd ffbb 	bl	80070e8 <HAL_RCC_GetPCLK1Freq>
 8009172:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009176:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800917a:	69db      	ldr	r3, [r3, #28]
 800917c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009180:	f040 810c 	bne.w	800939c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009184:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009188:	2200      	movs	r2, #0
 800918a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800918e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8009192:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8009196:	4622      	mov	r2, r4
 8009198:	462b      	mov	r3, r5
 800919a:	1891      	adds	r1, r2, r2
 800919c:	65b9      	str	r1, [r7, #88]	; 0x58
 800919e:	415b      	adcs	r3, r3
 80091a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80091a2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80091a6:	4621      	mov	r1, r4
 80091a8:	eb12 0801 	adds.w	r8, r2, r1
 80091ac:	4629      	mov	r1, r5
 80091ae:	eb43 0901 	adc.w	r9, r3, r1
 80091b2:	f04f 0200 	mov.w	r2, #0
 80091b6:	f04f 0300 	mov.w	r3, #0
 80091ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80091be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80091c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80091c6:	4690      	mov	r8, r2
 80091c8:	4699      	mov	r9, r3
 80091ca:	4623      	mov	r3, r4
 80091cc:	eb18 0303 	adds.w	r3, r8, r3
 80091d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80091d4:	462b      	mov	r3, r5
 80091d6:	eb49 0303 	adc.w	r3, r9, r3
 80091da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80091de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091e2:	685b      	ldr	r3, [r3, #4]
 80091e4:	2200      	movs	r2, #0
 80091e6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80091ea:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80091ee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80091f2:	460b      	mov	r3, r1
 80091f4:	18db      	adds	r3, r3, r3
 80091f6:	653b      	str	r3, [r7, #80]	; 0x50
 80091f8:	4613      	mov	r3, r2
 80091fa:	eb42 0303 	adc.w	r3, r2, r3
 80091fe:	657b      	str	r3, [r7, #84]	; 0x54
 8009200:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009204:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009208:	f7f7 f83a 	bl	8000280 <__aeabi_uldivmod>
 800920c:	4602      	mov	r2, r0
 800920e:	460b      	mov	r3, r1
 8009210:	4b61      	ldr	r3, [pc, #388]	; (8009398 <UART_SetConfig+0x2d4>)
 8009212:	fba3 2302 	umull	r2, r3, r3, r2
 8009216:	095b      	lsrs	r3, r3, #5
 8009218:	011c      	lsls	r4, r3, #4
 800921a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800921e:	2200      	movs	r2, #0
 8009220:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009224:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009228:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800922c:	4642      	mov	r2, r8
 800922e:	464b      	mov	r3, r9
 8009230:	1891      	adds	r1, r2, r2
 8009232:	64b9      	str	r1, [r7, #72]	; 0x48
 8009234:	415b      	adcs	r3, r3
 8009236:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009238:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800923c:	4641      	mov	r1, r8
 800923e:	eb12 0a01 	adds.w	sl, r2, r1
 8009242:	4649      	mov	r1, r9
 8009244:	eb43 0b01 	adc.w	fp, r3, r1
 8009248:	f04f 0200 	mov.w	r2, #0
 800924c:	f04f 0300 	mov.w	r3, #0
 8009250:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009254:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009258:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800925c:	4692      	mov	sl, r2
 800925e:	469b      	mov	fp, r3
 8009260:	4643      	mov	r3, r8
 8009262:	eb1a 0303 	adds.w	r3, sl, r3
 8009266:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800926a:	464b      	mov	r3, r9
 800926c:	eb4b 0303 	adc.w	r3, fp, r3
 8009270:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009274:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009278:	685b      	ldr	r3, [r3, #4]
 800927a:	2200      	movs	r2, #0
 800927c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009280:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8009284:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009288:	460b      	mov	r3, r1
 800928a:	18db      	adds	r3, r3, r3
 800928c:	643b      	str	r3, [r7, #64]	; 0x40
 800928e:	4613      	mov	r3, r2
 8009290:	eb42 0303 	adc.w	r3, r2, r3
 8009294:	647b      	str	r3, [r7, #68]	; 0x44
 8009296:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800929a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800929e:	f7f6 ffef 	bl	8000280 <__aeabi_uldivmod>
 80092a2:	4602      	mov	r2, r0
 80092a4:	460b      	mov	r3, r1
 80092a6:	4611      	mov	r1, r2
 80092a8:	4b3b      	ldr	r3, [pc, #236]	; (8009398 <UART_SetConfig+0x2d4>)
 80092aa:	fba3 2301 	umull	r2, r3, r3, r1
 80092ae:	095b      	lsrs	r3, r3, #5
 80092b0:	2264      	movs	r2, #100	; 0x64
 80092b2:	fb02 f303 	mul.w	r3, r2, r3
 80092b6:	1acb      	subs	r3, r1, r3
 80092b8:	00db      	lsls	r3, r3, #3
 80092ba:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80092be:	4b36      	ldr	r3, [pc, #216]	; (8009398 <UART_SetConfig+0x2d4>)
 80092c0:	fba3 2302 	umull	r2, r3, r3, r2
 80092c4:	095b      	lsrs	r3, r3, #5
 80092c6:	005b      	lsls	r3, r3, #1
 80092c8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80092cc:	441c      	add	r4, r3
 80092ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80092d2:	2200      	movs	r2, #0
 80092d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80092d8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80092dc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80092e0:	4642      	mov	r2, r8
 80092e2:	464b      	mov	r3, r9
 80092e4:	1891      	adds	r1, r2, r2
 80092e6:	63b9      	str	r1, [r7, #56]	; 0x38
 80092e8:	415b      	adcs	r3, r3
 80092ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80092ec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80092f0:	4641      	mov	r1, r8
 80092f2:	1851      	adds	r1, r2, r1
 80092f4:	6339      	str	r1, [r7, #48]	; 0x30
 80092f6:	4649      	mov	r1, r9
 80092f8:	414b      	adcs	r3, r1
 80092fa:	637b      	str	r3, [r7, #52]	; 0x34
 80092fc:	f04f 0200 	mov.w	r2, #0
 8009300:	f04f 0300 	mov.w	r3, #0
 8009304:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009308:	4659      	mov	r1, fp
 800930a:	00cb      	lsls	r3, r1, #3
 800930c:	4651      	mov	r1, sl
 800930e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009312:	4651      	mov	r1, sl
 8009314:	00ca      	lsls	r2, r1, #3
 8009316:	4610      	mov	r0, r2
 8009318:	4619      	mov	r1, r3
 800931a:	4603      	mov	r3, r0
 800931c:	4642      	mov	r2, r8
 800931e:	189b      	adds	r3, r3, r2
 8009320:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009324:	464b      	mov	r3, r9
 8009326:	460a      	mov	r2, r1
 8009328:	eb42 0303 	adc.w	r3, r2, r3
 800932c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009330:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009334:	685b      	ldr	r3, [r3, #4]
 8009336:	2200      	movs	r2, #0
 8009338:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800933c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009340:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009344:	460b      	mov	r3, r1
 8009346:	18db      	adds	r3, r3, r3
 8009348:	62bb      	str	r3, [r7, #40]	; 0x28
 800934a:	4613      	mov	r3, r2
 800934c:	eb42 0303 	adc.w	r3, r2, r3
 8009350:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009352:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009356:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800935a:	f7f6 ff91 	bl	8000280 <__aeabi_uldivmod>
 800935e:	4602      	mov	r2, r0
 8009360:	460b      	mov	r3, r1
 8009362:	4b0d      	ldr	r3, [pc, #52]	; (8009398 <UART_SetConfig+0x2d4>)
 8009364:	fba3 1302 	umull	r1, r3, r3, r2
 8009368:	095b      	lsrs	r3, r3, #5
 800936a:	2164      	movs	r1, #100	; 0x64
 800936c:	fb01 f303 	mul.w	r3, r1, r3
 8009370:	1ad3      	subs	r3, r2, r3
 8009372:	00db      	lsls	r3, r3, #3
 8009374:	3332      	adds	r3, #50	; 0x32
 8009376:	4a08      	ldr	r2, [pc, #32]	; (8009398 <UART_SetConfig+0x2d4>)
 8009378:	fba2 2303 	umull	r2, r3, r2, r3
 800937c:	095b      	lsrs	r3, r3, #5
 800937e:	f003 0207 	and.w	r2, r3, #7
 8009382:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	4422      	add	r2, r4
 800938a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800938c:	e105      	b.n	800959a <UART_SetConfig+0x4d6>
 800938e:	bf00      	nop
 8009390:	40011000 	.word	0x40011000
 8009394:	40011400 	.word	0x40011400
 8009398:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800939c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80093a0:	2200      	movs	r2, #0
 80093a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80093a6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80093aa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80093ae:	4642      	mov	r2, r8
 80093b0:	464b      	mov	r3, r9
 80093b2:	1891      	adds	r1, r2, r2
 80093b4:	6239      	str	r1, [r7, #32]
 80093b6:	415b      	adcs	r3, r3
 80093b8:	627b      	str	r3, [r7, #36]	; 0x24
 80093ba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80093be:	4641      	mov	r1, r8
 80093c0:	1854      	adds	r4, r2, r1
 80093c2:	4649      	mov	r1, r9
 80093c4:	eb43 0501 	adc.w	r5, r3, r1
 80093c8:	f04f 0200 	mov.w	r2, #0
 80093cc:	f04f 0300 	mov.w	r3, #0
 80093d0:	00eb      	lsls	r3, r5, #3
 80093d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80093d6:	00e2      	lsls	r2, r4, #3
 80093d8:	4614      	mov	r4, r2
 80093da:	461d      	mov	r5, r3
 80093dc:	4643      	mov	r3, r8
 80093de:	18e3      	adds	r3, r4, r3
 80093e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80093e4:	464b      	mov	r3, r9
 80093e6:	eb45 0303 	adc.w	r3, r5, r3
 80093ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80093ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093f2:	685b      	ldr	r3, [r3, #4]
 80093f4:	2200      	movs	r2, #0
 80093f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80093fa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80093fe:	f04f 0200 	mov.w	r2, #0
 8009402:	f04f 0300 	mov.w	r3, #0
 8009406:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800940a:	4629      	mov	r1, r5
 800940c:	008b      	lsls	r3, r1, #2
 800940e:	4621      	mov	r1, r4
 8009410:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009414:	4621      	mov	r1, r4
 8009416:	008a      	lsls	r2, r1, #2
 8009418:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800941c:	f7f6 ff30 	bl	8000280 <__aeabi_uldivmod>
 8009420:	4602      	mov	r2, r0
 8009422:	460b      	mov	r3, r1
 8009424:	4b60      	ldr	r3, [pc, #384]	; (80095a8 <UART_SetConfig+0x4e4>)
 8009426:	fba3 2302 	umull	r2, r3, r3, r2
 800942a:	095b      	lsrs	r3, r3, #5
 800942c:	011c      	lsls	r4, r3, #4
 800942e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009432:	2200      	movs	r2, #0
 8009434:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009438:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800943c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009440:	4642      	mov	r2, r8
 8009442:	464b      	mov	r3, r9
 8009444:	1891      	adds	r1, r2, r2
 8009446:	61b9      	str	r1, [r7, #24]
 8009448:	415b      	adcs	r3, r3
 800944a:	61fb      	str	r3, [r7, #28]
 800944c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009450:	4641      	mov	r1, r8
 8009452:	1851      	adds	r1, r2, r1
 8009454:	6139      	str	r1, [r7, #16]
 8009456:	4649      	mov	r1, r9
 8009458:	414b      	adcs	r3, r1
 800945a:	617b      	str	r3, [r7, #20]
 800945c:	f04f 0200 	mov.w	r2, #0
 8009460:	f04f 0300 	mov.w	r3, #0
 8009464:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009468:	4659      	mov	r1, fp
 800946a:	00cb      	lsls	r3, r1, #3
 800946c:	4651      	mov	r1, sl
 800946e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009472:	4651      	mov	r1, sl
 8009474:	00ca      	lsls	r2, r1, #3
 8009476:	4610      	mov	r0, r2
 8009478:	4619      	mov	r1, r3
 800947a:	4603      	mov	r3, r0
 800947c:	4642      	mov	r2, r8
 800947e:	189b      	adds	r3, r3, r2
 8009480:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009484:	464b      	mov	r3, r9
 8009486:	460a      	mov	r2, r1
 8009488:	eb42 0303 	adc.w	r3, r2, r3
 800948c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009490:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009494:	685b      	ldr	r3, [r3, #4]
 8009496:	2200      	movs	r2, #0
 8009498:	67bb      	str	r3, [r7, #120]	; 0x78
 800949a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800949c:	f04f 0200 	mov.w	r2, #0
 80094a0:	f04f 0300 	mov.w	r3, #0
 80094a4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80094a8:	4649      	mov	r1, r9
 80094aa:	008b      	lsls	r3, r1, #2
 80094ac:	4641      	mov	r1, r8
 80094ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80094b2:	4641      	mov	r1, r8
 80094b4:	008a      	lsls	r2, r1, #2
 80094b6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80094ba:	f7f6 fee1 	bl	8000280 <__aeabi_uldivmod>
 80094be:	4602      	mov	r2, r0
 80094c0:	460b      	mov	r3, r1
 80094c2:	4b39      	ldr	r3, [pc, #228]	; (80095a8 <UART_SetConfig+0x4e4>)
 80094c4:	fba3 1302 	umull	r1, r3, r3, r2
 80094c8:	095b      	lsrs	r3, r3, #5
 80094ca:	2164      	movs	r1, #100	; 0x64
 80094cc:	fb01 f303 	mul.w	r3, r1, r3
 80094d0:	1ad3      	subs	r3, r2, r3
 80094d2:	011b      	lsls	r3, r3, #4
 80094d4:	3332      	adds	r3, #50	; 0x32
 80094d6:	4a34      	ldr	r2, [pc, #208]	; (80095a8 <UART_SetConfig+0x4e4>)
 80094d8:	fba2 2303 	umull	r2, r3, r2, r3
 80094dc:	095b      	lsrs	r3, r3, #5
 80094de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80094e2:	441c      	add	r4, r3
 80094e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80094e8:	2200      	movs	r2, #0
 80094ea:	673b      	str	r3, [r7, #112]	; 0x70
 80094ec:	677a      	str	r2, [r7, #116]	; 0x74
 80094ee:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80094f2:	4642      	mov	r2, r8
 80094f4:	464b      	mov	r3, r9
 80094f6:	1891      	adds	r1, r2, r2
 80094f8:	60b9      	str	r1, [r7, #8]
 80094fa:	415b      	adcs	r3, r3
 80094fc:	60fb      	str	r3, [r7, #12]
 80094fe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009502:	4641      	mov	r1, r8
 8009504:	1851      	adds	r1, r2, r1
 8009506:	6039      	str	r1, [r7, #0]
 8009508:	4649      	mov	r1, r9
 800950a:	414b      	adcs	r3, r1
 800950c:	607b      	str	r3, [r7, #4]
 800950e:	f04f 0200 	mov.w	r2, #0
 8009512:	f04f 0300 	mov.w	r3, #0
 8009516:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800951a:	4659      	mov	r1, fp
 800951c:	00cb      	lsls	r3, r1, #3
 800951e:	4651      	mov	r1, sl
 8009520:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009524:	4651      	mov	r1, sl
 8009526:	00ca      	lsls	r2, r1, #3
 8009528:	4610      	mov	r0, r2
 800952a:	4619      	mov	r1, r3
 800952c:	4603      	mov	r3, r0
 800952e:	4642      	mov	r2, r8
 8009530:	189b      	adds	r3, r3, r2
 8009532:	66bb      	str	r3, [r7, #104]	; 0x68
 8009534:	464b      	mov	r3, r9
 8009536:	460a      	mov	r2, r1
 8009538:	eb42 0303 	adc.w	r3, r2, r3
 800953c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800953e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009542:	685b      	ldr	r3, [r3, #4]
 8009544:	2200      	movs	r2, #0
 8009546:	663b      	str	r3, [r7, #96]	; 0x60
 8009548:	667a      	str	r2, [r7, #100]	; 0x64
 800954a:	f04f 0200 	mov.w	r2, #0
 800954e:	f04f 0300 	mov.w	r3, #0
 8009552:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8009556:	4649      	mov	r1, r9
 8009558:	008b      	lsls	r3, r1, #2
 800955a:	4641      	mov	r1, r8
 800955c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009560:	4641      	mov	r1, r8
 8009562:	008a      	lsls	r2, r1, #2
 8009564:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009568:	f7f6 fe8a 	bl	8000280 <__aeabi_uldivmod>
 800956c:	4602      	mov	r2, r0
 800956e:	460b      	mov	r3, r1
 8009570:	4b0d      	ldr	r3, [pc, #52]	; (80095a8 <UART_SetConfig+0x4e4>)
 8009572:	fba3 1302 	umull	r1, r3, r3, r2
 8009576:	095b      	lsrs	r3, r3, #5
 8009578:	2164      	movs	r1, #100	; 0x64
 800957a:	fb01 f303 	mul.w	r3, r1, r3
 800957e:	1ad3      	subs	r3, r2, r3
 8009580:	011b      	lsls	r3, r3, #4
 8009582:	3332      	adds	r3, #50	; 0x32
 8009584:	4a08      	ldr	r2, [pc, #32]	; (80095a8 <UART_SetConfig+0x4e4>)
 8009586:	fba2 2303 	umull	r2, r3, r2, r3
 800958a:	095b      	lsrs	r3, r3, #5
 800958c:	f003 020f 	and.w	r2, r3, #15
 8009590:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	4422      	add	r2, r4
 8009598:	609a      	str	r2, [r3, #8]
}
 800959a:	bf00      	nop
 800959c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80095a0:	46bd      	mov	sp, r7
 80095a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80095a6:	bf00      	nop
 80095a8:	51eb851f 	.word	0x51eb851f

080095ac <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80095ac:	b084      	sub	sp, #16
 80095ae:	b580      	push	{r7, lr}
 80095b0:	b084      	sub	sp, #16
 80095b2:	af00      	add	r7, sp, #0
 80095b4:	6078      	str	r0, [r7, #4]
 80095b6:	f107 001c 	add.w	r0, r7, #28
 80095ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80095be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095c0:	2b01      	cmp	r3, #1
 80095c2:	d122      	bne.n	800960a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095c8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	68db      	ldr	r3, [r3, #12]
 80095d4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80095d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80095dc:	687a      	ldr	r2, [r7, #4]
 80095de:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	68db      	ldr	r3, [r3, #12]
 80095e4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80095ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80095ee:	2b01      	cmp	r3, #1
 80095f0:	d105      	bne.n	80095fe <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	68db      	ldr	r3, [r3, #12]
 80095f6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80095fe:	6878      	ldr	r0, [r7, #4]
 8009600:	f001 fbee 	bl	800ade0 <USB_CoreReset>
 8009604:	4603      	mov	r3, r0
 8009606:	73fb      	strb	r3, [r7, #15]
 8009608:	e01a      	b.n	8009640 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	68db      	ldr	r3, [r3, #12]
 800960e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009616:	6878      	ldr	r0, [r7, #4]
 8009618:	f001 fbe2 	bl	800ade0 <USB_CoreReset>
 800961c:	4603      	mov	r3, r0
 800961e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009620:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009622:	2b00      	cmp	r3, #0
 8009624:	d106      	bne.n	8009634 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800962a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	639a      	str	r2, [r3, #56]	; 0x38
 8009632:	e005      	b.n	8009640 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009638:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009642:	2b01      	cmp	r3, #1
 8009644:	d10b      	bne.n	800965e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	689b      	ldr	r3, [r3, #8]
 800964a:	f043 0206 	orr.w	r2, r3, #6
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	689b      	ldr	r3, [r3, #8]
 8009656:	f043 0220 	orr.w	r2, r3, #32
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800965e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009660:	4618      	mov	r0, r3
 8009662:	3710      	adds	r7, #16
 8009664:	46bd      	mov	sp, r7
 8009666:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800966a:	b004      	add	sp, #16
 800966c:	4770      	bx	lr
	...

08009670 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8009670:	b480      	push	{r7}
 8009672:	b087      	sub	sp, #28
 8009674:	af00      	add	r7, sp, #0
 8009676:	60f8      	str	r0, [r7, #12]
 8009678:	60b9      	str	r1, [r7, #8]
 800967a:	4613      	mov	r3, r2
 800967c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800967e:	79fb      	ldrb	r3, [r7, #7]
 8009680:	2b02      	cmp	r3, #2
 8009682:	d165      	bne.n	8009750 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009684:	68bb      	ldr	r3, [r7, #8]
 8009686:	4a41      	ldr	r2, [pc, #260]	; (800978c <USB_SetTurnaroundTime+0x11c>)
 8009688:	4293      	cmp	r3, r2
 800968a:	d906      	bls.n	800969a <USB_SetTurnaroundTime+0x2a>
 800968c:	68bb      	ldr	r3, [r7, #8]
 800968e:	4a40      	ldr	r2, [pc, #256]	; (8009790 <USB_SetTurnaroundTime+0x120>)
 8009690:	4293      	cmp	r3, r2
 8009692:	d202      	bcs.n	800969a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8009694:	230f      	movs	r3, #15
 8009696:	617b      	str	r3, [r7, #20]
 8009698:	e062      	b.n	8009760 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800969a:	68bb      	ldr	r3, [r7, #8]
 800969c:	4a3c      	ldr	r2, [pc, #240]	; (8009790 <USB_SetTurnaroundTime+0x120>)
 800969e:	4293      	cmp	r3, r2
 80096a0:	d306      	bcc.n	80096b0 <USB_SetTurnaroundTime+0x40>
 80096a2:	68bb      	ldr	r3, [r7, #8]
 80096a4:	4a3b      	ldr	r2, [pc, #236]	; (8009794 <USB_SetTurnaroundTime+0x124>)
 80096a6:	4293      	cmp	r3, r2
 80096a8:	d202      	bcs.n	80096b0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80096aa:	230e      	movs	r3, #14
 80096ac:	617b      	str	r3, [r7, #20]
 80096ae:	e057      	b.n	8009760 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80096b0:	68bb      	ldr	r3, [r7, #8]
 80096b2:	4a38      	ldr	r2, [pc, #224]	; (8009794 <USB_SetTurnaroundTime+0x124>)
 80096b4:	4293      	cmp	r3, r2
 80096b6:	d306      	bcc.n	80096c6 <USB_SetTurnaroundTime+0x56>
 80096b8:	68bb      	ldr	r3, [r7, #8]
 80096ba:	4a37      	ldr	r2, [pc, #220]	; (8009798 <USB_SetTurnaroundTime+0x128>)
 80096bc:	4293      	cmp	r3, r2
 80096be:	d202      	bcs.n	80096c6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80096c0:	230d      	movs	r3, #13
 80096c2:	617b      	str	r3, [r7, #20]
 80096c4:	e04c      	b.n	8009760 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80096c6:	68bb      	ldr	r3, [r7, #8]
 80096c8:	4a33      	ldr	r2, [pc, #204]	; (8009798 <USB_SetTurnaroundTime+0x128>)
 80096ca:	4293      	cmp	r3, r2
 80096cc:	d306      	bcc.n	80096dc <USB_SetTurnaroundTime+0x6c>
 80096ce:	68bb      	ldr	r3, [r7, #8]
 80096d0:	4a32      	ldr	r2, [pc, #200]	; (800979c <USB_SetTurnaroundTime+0x12c>)
 80096d2:	4293      	cmp	r3, r2
 80096d4:	d802      	bhi.n	80096dc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80096d6:	230c      	movs	r3, #12
 80096d8:	617b      	str	r3, [r7, #20]
 80096da:	e041      	b.n	8009760 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80096dc:	68bb      	ldr	r3, [r7, #8]
 80096de:	4a2f      	ldr	r2, [pc, #188]	; (800979c <USB_SetTurnaroundTime+0x12c>)
 80096e0:	4293      	cmp	r3, r2
 80096e2:	d906      	bls.n	80096f2 <USB_SetTurnaroundTime+0x82>
 80096e4:	68bb      	ldr	r3, [r7, #8]
 80096e6:	4a2e      	ldr	r2, [pc, #184]	; (80097a0 <USB_SetTurnaroundTime+0x130>)
 80096e8:	4293      	cmp	r3, r2
 80096ea:	d802      	bhi.n	80096f2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80096ec:	230b      	movs	r3, #11
 80096ee:	617b      	str	r3, [r7, #20]
 80096f0:	e036      	b.n	8009760 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80096f2:	68bb      	ldr	r3, [r7, #8]
 80096f4:	4a2a      	ldr	r2, [pc, #168]	; (80097a0 <USB_SetTurnaroundTime+0x130>)
 80096f6:	4293      	cmp	r3, r2
 80096f8:	d906      	bls.n	8009708 <USB_SetTurnaroundTime+0x98>
 80096fa:	68bb      	ldr	r3, [r7, #8]
 80096fc:	4a29      	ldr	r2, [pc, #164]	; (80097a4 <USB_SetTurnaroundTime+0x134>)
 80096fe:	4293      	cmp	r3, r2
 8009700:	d802      	bhi.n	8009708 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8009702:	230a      	movs	r3, #10
 8009704:	617b      	str	r3, [r7, #20]
 8009706:	e02b      	b.n	8009760 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8009708:	68bb      	ldr	r3, [r7, #8]
 800970a:	4a26      	ldr	r2, [pc, #152]	; (80097a4 <USB_SetTurnaroundTime+0x134>)
 800970c:	4293      	cmp	r3, r2
 800970e:	d906      	bls.n	800971e <USB_SetTurnaroundTime+0xae>
 8009710:	68bb      	ldr	r3, [r7, #8]
 8009712:	4a25      	ldr	r2, [pc, #148]	; (80097a8 <USB_SetTurnaroundTime+0x138>)
 8009714:	4293      	cmp	r3, r2
 8009716:	d202      	bcs.n	800971e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8009718:	2309      	movs	r3, #9
 800971a:	617b      	str	r3, [r7, #20]
 800971c:	e020      	b.n	8009760 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800971e:	68bb      	ldr	r3, [r7, #8]
 8009720:	4a21      	ldr	r2, [pc, #132]	; (80097a8 <USB_SetTurnaroundTime+0x138>)
 8009722:	4293      	cmp	r3, r2
 8009724:	d306      	bcc.n	8009734 <USB_SetTurnaroundTime+0xc4>
 8009726:	68bb      	ldr	r3, [r7, #8]
 8009728:	4a20      	ldr	r2, [pc, #128]	; (80097ac <USB_SetTurnaroundTime+0x13c>)
 800972a:	4293      	cmp	r3, r2
 800972c:	d802      	bhi.n	8009734 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800972e:	2308      	movs	r3, #8
 8009730:	617b      	str	r3, [r7, #20]
 8009732:	e015      	b.n	8009760 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009734:	68bb      	ldr	r3, [r7, #8]
 8009736:	4a1d      	ldr	r2, [pc, #116]	; (80097ac <USB_SetTurnaroundTime+0x13c>)
 8009738:	4293      	cmp	r3, r2
 800973a:	d906      	bls.n	800974a <USB_SetTurnaroundTime+0xda>
 800973c:	68bb      	ldr	r3, [r7, #8]
 800973e:	4a1c      	ldr	r2, [pc, #112]	; (80097b0 <USB_SetTurnaroundTime+0x140>)
 8009740:	4293      	cmp	r3, r2
 8009742:	d202      	bcs.n	800974a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8009744:	2307      	movs	r3, #7
 8009746:	617b      	str	r3, [r7, #20]
 8009748:	e00a      	b.n	8009760 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800974a:	2306      	movs	r3, #6
 800974c:	617b      	str	r3, [r7, #20]
 800974e:	e007      	b.n	8009760 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8009750:	79fb      	ldrb	r3, [r7, #7]
 8009752:	2b00      	cmp	r3, #0
 8009754:	d102      	bne.n	800975c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8009756:	2309      	movs	r3, #9
 8009758:	617b      	str	r3, [r7, #20]
 800975a:	e001      	b.n	8009760 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800975c:	2309      	movs	r3, #9
 800975e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	68db      	ldr	r3, [r3, #12]
 8009764:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	68da      	ldr	r2, [r3, #12]
 8009770:	697b      	ldr	r3, [r7, #20]
 8009772:	029b      	lsls	r3, r3, #10
 8009774:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8009778:	431a      	orrs	r2, r3
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800977e:	2300      	movs	r3, #0
}
 8009780:	4618      	mov	r0, r3
 8009782:	371c      	adds	r7, #28
 8009784:	46bd      	mov	sp, r7
 8009786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978a:	4770      	bx	lr
 800978c:	00d8acbf 	.word	0x00d8acbf
 8009790:	00e4e1c0 	.word	0x00e4e1c0
 8009794:	00f42400 	.word	0x00f42400
 8009798:	01067380 	.word	0x01067380
 800979c:	011a499f 	.word	0x011a499f
 80097a0:	01312cff 	.word	0x01312cff
 80097a4:	014ca43f 	.word	0x014ca43f
 80097a8:	016e3600 	.word	0x016e3600
 80097ac:	01a6ab1f 	.word	0x01a6ab1f
 80097b0:	01e84800 	.word	0x01e84800

080097b4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80097b4:	b480      	push	{r7}
 80097b6:	b083      	sub	sp, #12
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	689b      	ldr	r3, [r3, #8]
 80097c0:	f043 0201 	orr.w	r2, r3, #1
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80097c8:	2300      	movs	r3, #0
}
 80097ca:	4618      	mov	r0, r3
 80097cc:	370c      	adds	r7, #12
 80097ce:	46bd      	mov	sp, r7
 80097d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d4:	4770      	bx	lr

080097d6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80097d6:	b480      	push	{r7}
 80097d8:	b083      	sub	sp, #12
 80097da:	af00      	add	r7, sp, #0
 80097dc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	689b      	ldr	r3, [r3, #8]
 80097e2:	f023 0201 	bic.w	r2, r3, #1
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80097ea:	2300      	movs	r3, #0
}
 80097ec:	4618      	mov	r0, r3
 80097ee:	370c      	adds	r7, #12
 80097f0:	46bd      	mov	sp, r7
 80097f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f6:	4770      	bx	lr

080097f8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80097f8:	b580      	push	{r7, lr}
 80097fa:	b084      	sub	sp, #16
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	6078      	str	r0, [r7, #4]
 8009800:	460b      	mov	r3, r1
 8009802:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009804:	2300      	movs	r3, #0
 8009806:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	68db      	ldr	r3, [r3, #12]
 800980c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009814:	78fb      	ldrb	r3, [r7, #3]
 8009816:	2b01      	cmp	r3, #1
 8009818:	d115      	bne.n	8009846 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	68db      	ldr	r3, [r3, #12]
 800981e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009826:	2001      	movs	r0, #1
 8009828:	f7f9 f938 	bl	8002a9c <HAL_Delay>
      ms++;
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	3301      	adds	r3, #1
 8009830:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8009832:	6878      	ldr	r0, [r7, #4]
 8009834:	f001 fa45 	bl	800acc2 <USB_GetMode>
 8009838:	4603      	mov	r3, r0
 800983a:	2b01      	cmp	r3, #1
 800983c:	d01e      	beq.n	800987c <USB_SetCurrentMode+0x84>
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	2b31      	cmp	r3, #49	; 0x31
 8009842:	d9f0      	bls.n	8009826 <USB_SetCurrentMode+0x2e>
 8009844:	e01a      	b.n	800987c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009846:	78fb      	ldrb	r3, [r7, #3]
 8009848:	2b00      	cmp	r3, #0
 800984a:	d115      	bne.n	8009878 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	68db      	ldr	r3, [r3, #12]
 8009850:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009858:	2001      	movs	r0, #1
 800985a:	f7f9 f91f 	bl	8002a9c <HAL_Delay>
      ms++;
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	3301      	adds	r3, #1
 8009862:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8009864:	6878      	ldr	r0, [r7, #4]
 8009866:	f001 fa2c 	bl	800acc2 <USB_GetMode>
 800986a:	4603      	mov	r3, r0
 800986c:	2b00      	cmp	r3, #0
 800986e:	d005      	beq.n	800987c <USB_SetCurrentMode+0x84>
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	2b31      	cmp	r3, #49	; 0x31
 8009874:	d9f0      	bls.n	8009858 <USB_SetCurrentMode+0x60>
 8009876:	e001      	b.n	800987c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009878:	2301      	movs	r3, #1
 800987a:	e005      	b.n	8009888 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	2b32      	cmp	r3, #50	; 0x32
 8009880:	d101      	bne.n	8009886 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009882:	2301      	movs	r3, #1
 8009884:	e000      	b.n	8009888 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009886:	2300      	movs	r3, #0
}
 8009888:	4618      	mov	r0, r3
 800988a:	3710      	adds	r7, #16
 800988c:	46bd      	mov	sp, r7
 800988e:	bd80      	pop	{r7, pc}

08009890 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009890:	b084      	sub	sp, #16
 8009892:	b580      	push	{r7, lr}
 8009894:	b086      	sub	sp, #24
 8009896:	af00      	add	r7, sp, #0
 8009898:	6078      	str	r0, [r7, #4]
 800989a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800989e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80098a2:	2300      	movs	r3, #0
 80098a4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80098aa:	2300      	movs	r3, #0
 80098ac:	613b      	str	r3, [r7, #16]
 80098ae:	e009      	b.n	80098c4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80098b0:	687a      	ldr	r2, [r7, #4]
 80098b2:	693b      	ldr	r3, [r7, #16]
 80098b4:	3340      	adds	r3, #64	; 0x40
 80098b6:	009b      	lsls	r3, r3, #2
 80098b8:	4413      	add	r3, r2
 80098ba:	2200      	movs	r2, #0
 80098bc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80098be:	693b      	ldr	r3, [r7, #16]
 80098c0:	3301      	adds	r3, #1
 80098c2:	613b      	str	r3, [r7, #16]
 80098c4:	693b      	ldr	r3, [r7, #16]
 80098c6:	2b0e      	cmp	r3, #14
 80098c8:	d9f2      	bls.n	80098b0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80098ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d11c      	bne.n	800990a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098d6:	685b      	ldr	r3, [r3, #4]
 80098d8:	68fa      	ldr	r2, [r7, #12]
 80098da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80098de:	f043 0302 	orr.w	r3, r3, #2
 80098e2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098e8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098f4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009900:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	639a      	str	r2, [r3, #56]	; 0x38
 8009908:	e00b      	b.n	8009922 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800990e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800991a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009928:	461a      	mov	r2, r3
 800992a:	2300      	movs	r3, #0
 800992c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009934:	4619      	mov	r1, r3
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800993c:	461a      	mov	r2, r3
 800993e:	680b      	ldr	r3, [r1, #0]
 8009940:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009944:	2b01      	cmp	r3, #1
 8009946:	d10c      	bne.n	8009962 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800994a:	2b00      	cmp	r3, #0
 800994c:	d104      	bne.n	8009958 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800994e:	2100      	movs	r1, #0
 8009950:	6878      	ldr	r0, [r7, #4]
 8009952:	f000 f965 	bl	8009c20 <USB_SetDevSpeed>
 8009956:	e008      	b.n	800996a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009958:	2101      	movs	r1, #1
 800995a:	6878      	ldr	r0, [r7, #4]
 800995c:	f000 f960 	bl	8009c20 <USB_SetDevSpeed>
 8009960:	e003      	b.n	800996a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009962:	2103      	movs	r1, #3
 8009964:	6878      	ldr	r0, [r7, #4]
 8009966:	f000 f95b 	bl	8009c20 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800996a:	2110      	movs	r1, #16
 800996c:	6878      	ldr	r0, [r7, #4]
 800996e:	f000 f8f3 	bl	8009b58 <USB_FlushTxFifo>
 8009972:	4603      	mov	r3, r0
 8009974:	2b00      	cmp	r3, #0
 8009976:	d001      	beq.n	800997c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8009978:	2301      	movs	r3, #1
 800997a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800997c:	6878      	ldr	r0, [r7, #4]
 800997e:	f000 f91f 	bl	8009bc0 <USB_FlushRxFifo>
 8009982:	4603      	mov	r3, r0
 8009984:	2b00      	cmp	r3, #0
 8009986:	d001      	beq.n	800998c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8009988:	2301      	movs	r3, #1
 800998a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009992:	461a      	mov	r2, r3
 8009994:	2300      	movs	r3, #0
 8009996:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800999e:	461a      	mov	r2, r3
 80099a0:	2300      	movs	r3, #0
 80099a2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099aa:	461a      	mov	r2, r3
 80099ac:	2300      	movs	r3, #0
 80099ae:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80099b0:	2300      	movs	r3, #0
 80099b2:	613b      	str	r3, [r7, #16]
 80099b4:	e043      	b.n	8009a3e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80099b6:	693b      	ldr	r3, [r7, #16]
 80099b8:	015a      	lsls	r2, r3, #5
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	4413      	add	r3, r2
 80099be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80099c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80099cc:	d118      	bne.n	8009a00 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80099ce:	693b      	ldr	r3, [r7, #16]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d10a      	bne.n	80099ea <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80099d4:	693b      	ldr	r3, [r7, #16]
 80099d6:	015a      	lsls	r2, r3, #5
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	4413      	add	r3, r2
 80099dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099e0:	461a      	mov	r2, r3
 80099e2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80099e6:	6013      	str	r3, [r2, #0]
 80099e8:	e013      	b.n	8009a12 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80099ea:	693b      	ldr	r3, [r7, #16]
 80099ec:	015a      	lsls	r2, r3, #5
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	4413      	add	r3, r2
 80099f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099f6:	461a      	mov	r2, r3
 80099f8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80099fc:	6013      	str	r3, [r2, #0]
 80099fe:	e008      	b.n	8009a12 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009a00:	693b      	ldr	r3, [r7, #16]
 8009a02:	015a      	lsls	r2, r3, #5
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	4413      	add	r3, r2
 8009a08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a0c:	461a      	mov	r2, r3
 8009a0e:	2300      	movs	r3, #0
 8009a10:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009a12:	693b      	ldr	r3, [r7, #16]
 8009a14:	015a      	lsls	r2, r3, #5
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	4413      	add	r3, r2
 8009a1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a1e:	461a      	mov	r2, r3
 8009a20:	2300      	movs	r3, #0
 8009a22:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009a24:	693b      	ldr	r3, [r7, #16]
 8009a26:	015a      	lsls	r2, r3, #5
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	4413      	add	r3, r2
 8009a2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a30:	461a      	mov	r2, r3
 8009a32:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009a36:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009a38:	693b      	ldr	r3, [r7, #16]
 8009a3a:	3301      	adds	r3, #1
 8009a3c:	613b      	str	r3, [r7, #16]
 8009a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a40:	693a      	ldr	r2, [r7, #16]
 8009a42:	429a      	cmp	r2, r3
 8009a44:	d3b7      	bcc.n	80099b6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009a46:	2300      	movs	r3, #0
 8009a48:	613b      	str	r3, [r7, #16]
 8009a4a:	e043      	b.n	8009ad4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009a4c:	693b      	ldr	r3, [r7, #16]
 8009a4e:	015a      	lsls	r2, r3, #5
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	4413      	add	r3, r2
 8009a54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009a5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009a62:	d118      	bne.n	8009a96 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8009a64:	693b      	ldr	r3, [r7, #16]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d10a      	bne.n	8009a80 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009a6a:	693b      	ldr	r3, [r7, #16]
 8009a6c:	015a      	lsls	r2, r3, #5
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	4413      	add	r3, r2
 8009a72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a76:	461a      	mov	r2, r3
 8009a78:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009a7c:	6013      	str	r3, [r2, #0]
 8009a7e:	e013      	b.n	8009aa8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009a80:	693b      	ldr	r3, [r7, #16]
 8009a82:	015a      	lsls	r2, r3, #5
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	4413      	add	r3, r2
 8009a88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a8c:	461a      	mov	r2, r3
 8009a8e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009a92:	6013      	str	r3, [r2, #0]
 8009a94:	e008      	b.n	8009aa8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009a96:	693b      	ldr	r3, [r7, #16]
 8009a98:	015a      	lsls	r2, r3, #5
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	4413      	add	r3, r2
 8009a9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009aa2:	461a      	mov	r2, r3
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009aa8:	693b      	ldr	r3, [r7, #16]
 8009aaa:	015a      	lsls	r2, r3, #5
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	4413      	add	r3, r2
 8009ab0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ab4:	461a      	mov	r2, r3
 8009ab6:	2300      	movs	r3, #0
 8009ab8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009aba:	693b      	ldr	r3, [r7, #16]
 8009abc:	015a      	lsls	r2, r3, #5
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	4413      	add	r3, r2
 8009ac2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ac6:	461a      	mov	r2, r3
 8009ac8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009acc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009ace:	693b      	ldr	r3, [r7, #16]
 8009ad0:	3301      	adds	r3, #1
 8009ad2:	613b      	str	r3, [r7, #16]
 8009ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ad6:	693a      	ldr	r2, [r7, #16]
 8009ad8:	429a      	cmp	r2, r3
 8009ada:	d3b7      	bcc.n	8009a4c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ae2:	691b      	ldr	r3, [r3, #16]
 8009ae4:	68fa      	ldr	r2, [r7, #12]
 8009ae6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009aea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009aee:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	2200      	movs	r2, #0
 8009af4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009afc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d105      	bne.n	8009b10 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	699b      	ldr	r3, [r3, #24]
 8009b08:	f043 0210 	orr.w	r2, r3, #16
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	699a      	ldr	r2, [r3, #24]
 8009b14:	4b0f      	ldr	r3, [pc, #60]	; (8009b54 <USB_DevInit+0x2c4>)
 8009b16:	4313      	orrs	r3, r2
 8009b18:	687a      	ldr	r2, [r7, #4]
 8009b1a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009b1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d005      	beq.n	8009b2e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	699b      	ldr	r3, [r3, #24]
 8009b26:	f043 0208 	orr.w	r2, r3, #8
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009b2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b30:	2b01      	cmp	r3, #1
 8009b32:	d107      	bne.n	8009b44 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	699b      	ldr	r3, [r3, #24]
 8009b38:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009b3c:	f043 0304 	orr.w	r3, r3, #4
 8009b40:	687a      	ldr	r2, [r7, #4]
 8009b42:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009b44:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b46:	4618      	mov	r0, r3
 8009b48:	3718      	adds	r7, #24
 8009b4a:	46bd      	mov	sp, r7
 8009b4c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009b50:	b004      	add	sp, #16
 8009b52:	4770      	bx	lr
 8009b54:	803c3800 	.word	0x803c3800

08009b58 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009b58:	b480      	push	{r7}
 8009b5a:	b085      	sub	sp, #20
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
 8009b60:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009b62:	2300      	movs	r3, #0
 8009b64:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	3301      	adds	r3, #1
 8009b6a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	4a13      	ldr	r2, [pc, #76]	; (8009bbc <USB_FlushTxFifo+0x64>)
 8009b70:	4293      	cmp	r3, r2
 8009b72:	d901      	bls.n	8009b78 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009b74:	2303      	movs	r3, #3
 8009b76:	e01b      	b.n	8009bb0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	691b      	ldr	r3, [r3, #16]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	daf2      	bge.n	8009b66 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009b80:	2300      	movs	r3, #0
 8009b82:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009b84:	683b      	ldr	r3, [r7, #0]
 8009b86:	019b      	lsls	r3, r3, #6
 8009b88:	f043 0220 	orr.w	r2, r3, #32
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	3301      	adds	r3, #1
 8009b94:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	4a08      	ldr	r2, [pc, #32]	; (8009bbc <USB_FlushTxFifo+0x64>)
 8009b9a:	4293      	cmp	r3, r2
 8009b9c:	d901      	bls.n	8009ba2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009b9e:	2303      	movs	r3, #3
 8009ba0:	e006      	b.n	8009bb0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	691b      	ldr	r3, [r3, #16]
 8009ba6:	f003 0320 	and.w	r3, r3, #32
 8009baa:	2b20      	cmp	r3, #32
 8009bac:	d0f0      	beq.n	8009b90 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009bae:	2300      	movs	r3, #0
}
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	3714      	adds	r7, #20
 8009bb4:	46bd      	mov	sp, r7
 8009bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bba:	4770      	bx	lr
 8009bbc:	00030d40 	.word	0x00030d40

08009bc0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009bc0:	b480      	push	{r7}
 8009bc2:	b085      	sub	sp, #20
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009bc8:	2300      	movs	r3, #0
 8009bca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	3301      	adds	r3, #1
 8009bd0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	4a11      	ldr	r2, [pc, #68]	; (8009c1c <USB_FlushRxFifo+0x5c>)
 8009bd6:	4293      	cmp	r3, r2
 8009bd8:	d901      	bls.n	8009bde <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009bda:	2303      	movs	r3, #3
 8009bdc:	e018      	b.n	8009c10 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	691b      	ldr	r3, [r3, #16]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	daf2      	bge.n	8009bcc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009be6:	2300      	movs	r3, #0
 8009be8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	2210      	movs	r2, #16
 8009bee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	3301      	adds	r3, #1
 8009bf4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	4a08      	ldr	r2, [pc, #32]	; (8009c1c <USB_FlushRxFifo+0x5c>)
 8009bfa:	4293      	cmp	r3, r2
 8009bfc:	d901      	bls.n	8009c02 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009bfe:	2303      	movs	r3, #3
 8009c00:	e006      	b.n	8009c10 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	691b      	ldr	r3, [r3, #16]
 8009c06:	f003 0310 	and.w	r3, r3, #16
 8009c0a:	2b10      	cmp	r3, #16
 8009c0c:	d0f0      	beq.n	8009bf0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009c0e:	2300      	movs	r3, #0
}
 8009c10:	4618      	mov	r0, r3
 8009c12:	3714      	adds	r7, #20
 8009c14:	46bd      	mov	sp, r7
 8009c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c1a:	4770      	bx	lr
 8009c1c:	00030d40 	.word	0x00030d40

08009c20 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009c20:	b480      	push	{r7}
 8009c22:	b085      	sub	sp, #20
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]
 8009c28:	460b      	mov	r3, r1
 8009c2a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c36:	681a      	ldr	r2, [r3, #0]
 8009c38:	78fb      	ldrb	r3, [r7, #3]
 8009c3a:	68f9      	ldr	r1, [r7, #12]
 8009c3c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009c40:	4313      	orrs	r3, r2
 8009c42:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009c44:	2300      	movs	r3, #0
}
 8009c46:	4618      	mov	r0, r3
 8009c48:	3714      	adds	r7, #20
 8009c4a:	46bd      	mov	sp, r7
 8009c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c50:	4770      	bx	lr

08009c52 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8009c52:	b480      	push	{r7}
 8009c54:	b087      	sub	sp, #28
 8009c56:	af00      	add	r7, sp, #0
 8009c58:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009c5e:	693b      	ldr	r3, [r7, #16]
 8009c60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c64:	689b      	ldr	r3, [r3, #8]
 8009c66:	f003 0306 	and.w	r3, r3, #6
 8009c6a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d102      	bne.n	8009c78 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8009c72:	2300      	movs	r3, #0
 8009c74:	75fb      	strb	r3, [r7, #23]
 8009c76:	e00a      	b.n	8009c8e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	2b02      	cmp	r3, #2
 8009c7c:	d002      	beq.n	8009c84 <USB_GetDevSpeed+0x32>
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	2b06      	cmp	r3, #6
 8009c82:	d102      	bne.n	8009c8a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009c84:	2302      	movs	r3, #2
 8009c86:	75fb      	strb	r3, [r7, #23]
 8009c88:	e001      	b.n	8009c8e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8009c8a:	230f      	movs	r3, #15
 8009c8c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8009c8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c90:	4618      	mov	r0, r3
 8009c92:	371c      	adds	r7, #28
 8009c94:	46bd      	mov	sp, r7
 8009c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9a:	4770      	bx	lr

08009c9c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009c9c:	b480      	push	{r7}
 8009c9e:	b085      	sub	sp, #20
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	6078      	str	r0, [r7, #4]
 8009ca4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009caa:	683b      	ldr	r3, [r7, #0]
 8009cac:	781b      	ldrb	r3, [r3, #0]
 8009cae:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009cb0:	683b      	ldr	r3, [r7, #0]
 8009cb2:	785b      	ldrb	r3, [r3, #1]
 8009cb4:	2b01      	cmp	r3, #1
 8009cb6:	d13a      	bne.n	8009d2e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009cbe:	69da      	ldr	r2, [r3, #28]
 8009cc0:	683b      	ldr	r3, [r7, #0]
 8009cc2:	781b      	ldrb	r3, [r3, #0]
 8009cc4:	f003 030f 	and.w	r3, r3, #15
 8009cc8:	2101      	movs	r1, #1
 8009cca:	fa01 f303 	lsl.w	r3, r1, r3
 8009cce:	b29b      	uxth	r3, r3
 8009cd0:	68f9      	ldr	r1, [r7, #12]
 8009cd2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009cd6:	4313      	orrs	r3, r2
 8009cd8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009cda:	68bb      	ldr	r3, [r7, #8]
 8009cdc:	015a      	lsls	r2, r3, #5
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	4413      	add	r3, r2
 8009ce2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d155      	bne.n	8009d9c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009cf0:	68bb      	ldr	r3, [r7, #8]
 8009cf2:	015a      	lsls	r2, r3, #5
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	4413      	add	r3, r2
 8009cf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009cfc:	681a      	ldr	r2, [r3, #0]
 8009cfe:	683b      	ldr	r3, [r7, #0]
 8009d00:	68db      	ldr	r3, [r3, #12]
 8009d02:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009d06:	683b      	ldr	r3, [r7, #0]
 8009d08:	791b      	ldrb	r3, [r3, #4]
 8009d0a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009d0c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009d0e:	68bb      	ldr	r3, [r7, #8]
 8009d10:	059b      	lsls	r3, r3, #22
 8009d12:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009d14:	4313      	orrs	r3, r2
 8009d16:	68ba      	ldr	r2, [r7, #8]
 8009d18:	0151      	lsls	r1, r2, #5
 8009d1a:	68fa      	ldr	r2, [r7, #12]
 8009d1c:	440a      	add	r2, r1
 8009d1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009d22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009d26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009d2a:	6013      	str	r3, [r2, #0]
 8009d2c:	e036      	b.n	8009d9c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d34:	69da      	ldr	r2, [r3, #28]
 8009d36:	683b      	ldr	r3, [r7, #0]
 8009d38:	781b      	ldrb	r3, [r3, #0]
 8009d3a:	f003 030f 	and.w	r3, r3, #15
 8009d3e:	2101      	movs	r1, #1
 8009d40:	fa01 f303 	lsl.w	r3, r1, r3
 8009d44:	041b      	lsls	r3, r3, #16
 8009d46:	68f9      	ldr	r1, [r7, #12]
 8009d48:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009d4c:	4313      	orrs	r3, r2
 8009d4e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009d50:	68bb      	ldr	r3, [r7, #8]
 8009d52:	015a      	lsls	r2, r3, #5
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	4413      	add	r3, r2
 8009d58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d11a      	bne.n	8009d9c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009d66:	68bb      	ldr	r3, [r7, #8]
 8009d68:	015a      	lsls	r2, r3, #5
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	4413      	add	r3, r2
 8009d6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d72:	681a      	ldr	r2, [r3, #0]
 8009d74:	683b      	ldr	r3, [r7, #0]
 8009d76:	68db      	ldr	r3, [r3, #12]
 8009d78:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009d7c:	683b      	ldr	r3, [r7, #0]
 8009d7e:	791b      	ldrb	r3, [r3, #4]
 8009d80:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009d82:	430b      	orrs	r3, r1
 8009d84:	4313      	orrs	r3, r2
 8009d86:	68ba      	ldr	r2, [r7, #8]
 8009d88:	0151      	lsls	r1, r2, #5
 8009d8a:	68fa      	ldr	r2, [r7, #12]
 8009d8c:	440a      	add	r2, r1
 8009d8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009d92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009d96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009d9a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009d9c:	2300      	movs	r3, #0
}
 8009d9e:	4618      	mov	r0, r3
 8009da0:	3714      	adds	r7, #20
 8009da2:	46bd      	mov	sp, r7
 8009da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da8:	4770      	bx	lr
	...

08009dac <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009dac:	b480      	push	{r7}
 8009dae:	b085      	sub	sp, #20
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	6078      	str	r0, [r7, #4]
 8009db4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009dba:	683b      	ldr	r3, [r7, #0]
 8009dbc:	781b      	ldrb	r3, [r3, #0]
 8009dbe:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009dc0:	683b      	ldr	r3, [r7, #0]
 8009dc2:	785b      	ldrb	r3, [r3, #1]
 8009dc4:	2b01      	cmp	r3, #1
 8009dc6:	d161      	bne.n	8009e8c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009dc8:	68bb      	ldr	r3, [r7, #8]
 8009dca:	015a      	lsls	r2, r3, #5
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	4413      	add	r3, r2
 8009dd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009dde:	d11f      	bne.n	8009e20 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009de0:	68bb      	ldr	r3, [r7, #8]
 8009de2:	015a      	lsls	r2, r3, #5
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	4413      	add	r3, r2
 8009de8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	68ba      	ldr	r2, [r7, #8]
 8009df0:	0151      	lsls	r1, r2, #5
 8009df2:	68fa      	ldr	r2, [r7, #12]
 8009df4:	440a      	add	r2, r1
 8009df6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009dfa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009dfe:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009e00:	68bb      	ldr	r3, [r7, #8]
 8009e02:	015a      	lsls	r2, r3, #5
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	4413      	add	r3, r2
 8009e08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	68ba      	ldr	r2, [r7, #8]
 8009e10:	0151      	lsls	r1, r2, #5
 8009e12:	68fa      	ldr	r2, [r7, #12]
 8009e14:	440a      	add	r2, r1
 8009e16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e1a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009e1e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e26:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009e28:	683b      	ldr	r3, [r7, #0]
 8009e2a:	781b      	ldrb	r3, [r3, #0]
 8009e2c:	f003 030f 	and.w	r3, r3, #15
 8009e30:	2101      	movs	r1, #1
 8009e32:	fa01 f303 	lsl.w	r3, r1, r3
 8009e36:	b29b      	uxth	r3, r3
 8009e38:	43db      	mvns	r3, r3
 8009e3a:	68f9      	ldr	r1, [r7, #12]
 8009e3c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009e40:	4013      	ands	r3, r2
 8009e42:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e4a:	69da      	ldr	r2, [r3, #28]
 8009e4c:	683b      	ldr	r3, [r7, #0]
 8009e4e:	781b      	ldrb	r3, [r3, #0]
 8009e50:	f003 030f 	and.w	r3, r3, #15
 8009e54:	2101      	movs	r1, #1
 8009e56:	fa01 f303 	lsl.w	r3, r1, r3
 8009e5a:	b29b      	uxth	r3, r3
 8009e5c:	43db      	mvns	r3, r3
 8009e5e:	68f9      	ldr	r1, [r7, #12]
 8009e60:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009e64:	4013      	ands	r3, r2
 8009e66:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009e68:	68bb      	ldr	r3, [r7, #8]
 8009e6a:	015a      	lsls	r2, r3, #5
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	4413      	add	r3, r2
 8009e70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e74:	681a      	ldr	r2, [r3, #0]
 8009e76:	68bb      	ldr	r3, [r7, #8]
 8009e78:	0159      	lsls	r1, r3, #5
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	440b      	add	r3, r1
 8009e7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e82:	4619      	mov	r1, r3
 8009e84:	4b35      	ldr	r3, [pc, #212]	; (8009f5c <USB_DeactivateEndpoint+0x1b0>)
 8009e86:	4013      	ands	r3, r2
 8009e88:	600b      	str	r3, [r1, #0]
 8009e8a:	e060      	b.n	8009f4e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009e8c:	68bb      	ldr	r3, [r7, #8]
 8009e8e:	015a      	lsls	r2, r3, #5
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	4413      	add	r3, r2
 8009e94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009e9e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009ea2:	d11f      	bne.n	8009ee4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009ea4:	68bb      	ldr	r3, [r7, #8]
 8009ea6:	015a      	lsls	r2, r3, #5
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	4413      	add	r3, r2
 8009eac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	68ba      	ldr	r2, [r7, #8]
 8009eb4:	0151      	lsls	r1, r2, #5
 8009eb6:	68fa      	ldr	r2, [r7, #12]
 8009eb8:	440a      	add	r2, r1
 8009eba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ebe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009ec2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009ec4:	68bb      	ldr	r3, [r7, #8]
 8009ec6:	015a      	lsls	r2, r3, #5
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	4413      	add	r3, r2
 8009ecc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	68ba      	ldr	r2, [r7, #8]
 8009ed4:	0151      	lsls	r1, r2, #5
 8009ed6:	68fa      	ldr	r2, [r7, #12]
 8009ed8:	440a      	add	r2, r1
 8009eda:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ede:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009ee2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009eea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009eec:	683b      	ldr	r3, [r7, #0]
 8009eee:	781b      	ldrb	r3, [r3, #0]
 8009ef0:	f003 030f 	and.w	r3, r3, #15
 8009ef4:	2101      	movs	r1, #1
 8009ef6:	fa01 f303 	lsl.w	r3, r1, r3
 8009efa:	041b      	lsls	r3, r3, #16
 8009efc:	43db      	mvns	r3, r3
 8009efe:	68f9      	ldr	r1, [r7, #12]
 8009f00:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009f04:	4013      	ands	r3, r2
 8009f06:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f0e:	69da      	ldr	r2, [r3, #28]
 8009f10:	683b      	ldr	r3, [r7, #0]
 8009f12:	781b      	ldrb	r3, [r3, #0]
 8009f14:	f003 030f 	and.w	r3, r3, #15
 8009f18:	2101      	movs	r1, #1
 8009f1a:	fa01 f303 	lsl.w	r3, r1, r3
 8009f1e:	041b      	lsls	r3, r3, #16
 8009f20:	43db      	mvns	r3, r3
 8009f22:	68f9      	ldr	r1, [r7, #12]
 8009f24:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009f28:	4013      	ands	r3, r2
 8009f2a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009f2c:	68bb      	ldr	r3, [r7, #8]
 8009f2e:	015a      	lsls	r2, r3, #5
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	4413      	add	r3, r2
 8009f34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f38:	681a      	ldr	r2, [r3, #0]
 8009f3a:	68bb      	ldr	r3, [r7, #8]
 8009f3c:	0159      	lsls	r1, r3, #5
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	440b      	add	r3, r1
 8009f42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f46:	4619      	mov	r1, r3
 8009f48:	4b05      	ldr	r3, [pc, #20]	; (8009f60 <USB_DeactivateEndpoint+0x1b4>)
 8009f4a:	4013      	ands	r3, r2
 8009f4c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8009f4e:	2300      	movs	r3, #0
}
 8009f50:	4618      	mov	r0, r3
 8009f52:	3714      	adds	r7, #20
 8009f54:	46bd      	mov	sp, r7
 8009f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5a:	4770      	bx	lr
 8009f5c:	ec337800 	.word	0xec337800
 8009f60:	eff37800 	.word	0xeff37800

08009f64 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009f64:	b580      	push	{r7, lr}
 8009f66:	b08a      	sub	sp, #40	; 0x28
 8009f68:	af02      	add	r7, sp, #8
 8009f6a:	60f8      	str	r0, [r7, #12]
 8009f6c:	60b9      	str	r1, [r7, #8]
 8009f6e:	4613      	mov	r3, r2
 8009f70:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8009f76:	68bb      	ldr	r3, [r7, #8]
 8009f78:	781b      	ldrb	r3, [r3, #0]
 8009f7a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009f7c:	68bb      	ldr	r3, [r7, #8]
 8009f7e:	785b      	ldrb	r3, [r3, #1]
 8009f80:	2b01      	cmp	r3, #1
 8009f82:	f040 815c 	bne.w	800a23e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009f86:	68bb      	ldr	r3, [r7, #8]
 8009f88:	699b      	ldr	r3, [r3, #24]
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d132      	bne.n	8009ff4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009f8e:	69bb      	ldr	r3, [r7, #24]
 8009f90:	015a      	lsls	r2, r3, #5
 8009f92:	69fb      	ldr	r3, [r7, #28]
 8009f94:	4413      	add	r3, r2
 8009f96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f9a:	691b      	ldr	r3, [r3, #16]
 8009f9c:	69ba      	ldr	r2, [r7, #24]
 8009f9e:	0151      	lsls	r1, r2, #5
 8009fa0:	69fa      	ldr	r2, [r7, #28]
 8009fa2:	440a      	add	r2, r1
 8009fa4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009fa8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009fac:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009fb0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009fb2:	69bb      	ldr	r3, [r7, #24]
 8009fb4:	015a      	lsls	r2, r3, #5
 8009fb6:	69fb      	ldr	r3, [r7, #28]
 8009fb8:	4413      	add	r3, r2
 8009fba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fbe:	691b      	ldr	r3, [r3, #16]
 8009fc0:	69ba      	ldr	r2, [r7, #24]
 8009fc2:	0151      	lsls	r1, r2, #5
 8009fc4:	69fa      	ldr	r2, [r7, #28]
 8009fc6:	440a      	add	r2, r1
 8009fc8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009fcc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009fd0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009fd2:	69bb      	ldr	r3, [r7, #24]
 8009fd4:	015a      	lsls	r2, r3, #5
 8009fd6:	69fb      	ldr	r3, [r7, #28]
 8009fd8:	4413      	add	r3, r2
 8009fda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fde:	691b      	ldr	r3, [r3, #16]
 8009fe0:	69ba      	ldr	r2, [r7, #24]
 8009fe2:	0151      	lsls	r1, r2, #5
 8009fe4:	69fa      	ldr	r2, [r7, #28]
 8009fe6:	440a      	add	r2, r1
 8009fe8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009fec:	0cdb      	lsrs	r3, r3, #19
 8009fee:	04db      	lsls	r3, r3, #19
 8009ff0:	6113      	str	r3, [r2, #16]
 8009ff2:	e074      	b.n	800a0de <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009ff4:	69bb      	ldr	r3, [r7, #24]
 8009ff6:	015a      	lsls	r2, r3, #5
 8009ff8:	69fb      	ldr	r3, [r7, #28]
 8009ffa:	4413      	add	r3, r2
 8009ffc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a000:	691b      	ldr	r3, [r3, #16]
 800a002:	69ba      	ldr	r2, [r7, #24]
 800a004:	0151      	lsls	r1, r2, #5
 800a006:	69fa      	ldr	r2, [r7, #28]
 800a008:	440a      	add	r2, r1
 800a00a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a00e:	0cdb      	lsrs	r3, r3, #19
 800a010:	04db      	lsls	r3, r3, #19
 800a012:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a014:	69bb      	ldr	r3, [r7, #24]
 800a016:	015a      	lsls	r2, r3, #5
 800a018:	69fb      	ldr	r3, [r7, #28]
 800a01a:	4413      	add	r3, r2
 800a01c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a020:	691b      	ldr	r3, [r3, #16]
 800a022:	69ba      	ldr	r2, [r7, #24]
 800a024:	0151      	lsls	r1, r2, #5
 800a026:	69fa      	ldr	r2, [r7, #28]
 800a028:	440a      	add	r2, r1
 800a02a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a02e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a032:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a036:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800a038:	69bb      	ldr	r3, [r7, #24]
 800a03a:	015a      	lsls	r2, r3, #5
 800a03c:	69fb      	ldr	r3, [r7, #28]
 800a03e:	4413      	add	r3, r2
 800a040:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a044:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800a046:	68bb      	ldr	r3, [r7, #8]
 800a048:	6999      	ldr	r1, [r3, #24]
 800a04a:	68bb      	ldr	r3, [r7, #8]
 800a04c:	68db      	ldr	r3, [r3, #12]
 800a04e:	440b      	add	r3, r1
 800a050:	1e59      	subs	r1, r3, #1
 800a052:	68bb      	ldr	r3, [r7, #8]
 800a054:	68db      	ldr	r3, [r3, #12]
 800a056:	fbb1 f3f3 	udiv	r3, r1, r3
 800a05a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800a05c:	4b9d      	ldr	r3, [pc, #628]	; (800a2d4 <USB_EPStartXfer+0x370>)
 800a05e:	400b      	ands	r3, r1
 800a060:	69b9      	ldr	r1, [r7, #24]
 800a062:	0148      	lsls	r0, r1, #5
 800a064:	69f9      	ldr	r1, [r7, #28]
 800a066:	4401      	add	r1, r0
 800a068:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a06c:	4313      	orrs	r3, r2
 800a06e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a070:	69bb      	ldr	r3, [r7, #24]
 800a072:	015a      	lsls	r2, r3, #5
 800a074:	69fb      	ldr	r3, [r7, #28]
 800a076:	4413      	add	r3, r2
 800a078:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a07c:	691a      	ldr	r2, [r3, #16]
 800a07e:	68bb      	ldr	r3, [r7, #8]
 800a080:	699b      	ldr	r3, [r3, #24]
 800a082:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a086:	69b9      	ldr	r1, [r7, #24]
 800a088:	0148      	lsls	r0, r1, #5
 800a08a:	69f9      	ldr	r1, [r7, #28]
 800a08c:	4401      	add	r1, r0
 800a08e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a092:	4313      	orrs	r3, r2
 800a094:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800a096:	68bb      	ldr	r3, [r7, #8]
 800a098:	791b      	ldrb	r3, [r3, #4]
 800a09a:	2b01      	cmp	r3, #1
 800a09c:	d11f      	bne.n	800a0de <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800a09e:	69bb      	ldr	r3, [r7, #24]
 800a0a0:	015a      	lsls	r2, r3, #5
 800a0a2:	69fb      	ldr	r3, [r7, #28]
 800a0a4:	4413      	add	r3, r2
 800a0a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0aa:	691b      	ldr	r3, [r3, #16]
 800a0ac:	69ba      	ldr	r2, [r7, #24]
 800a0ae:	0151      	lsls	r1, r2, #5
 800a0b0:	69fa      	ldr	r2, [r7, #28]
 800a0b2:	440a      	add	r2, r1
 800a0b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a0b8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800a0bc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800a0be:	69bb      	ldr	r3, [r7, #24]
 800a0c0:	015a      	lsls	r2, r3, #5
 800a0c2:	69fb      	ldr	r3, [r7, #28]
 800a0c4:	4413      	add	r3, r2
 800a0c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0ca:	691b      	ldr	r3, [r3, #16]
 800a0cc:	69ba      	ldr	r2, [r7, #24]
 800a0ce:	0151      	lsls	r1, r2, #5
 800a0d0:	69fa      	ldr	r2, [r7, #28]
 800a0d2:	440a      	add	r2, r1
 800a0d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a0d8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a0dc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800a0de:	79fb      	ldrb	r3, [r7, #7]
 800a0e0:	2b01      	cmp	r3, #1
 800a0e2:	d14b      	bne.n	800a17c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a0e4:	68bb      	ldr	r3, [r7, #8]
 800a0e6:	695b      	ldr	r3, [r3, #20]
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d009      	beq.n	800a100 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a0ec:	69bb      	ldr	r3, [r7, #24]
 800a0ee:	015a      	lsls	r2, r3, #5
 800a0f0:	69fb      	ldr	r3, [r7, #28]
 800a0f2:	4413      	add	r3, r2
 800a0f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0f8:	461a      	mov	r2, r3
 800a0fa:	68bb      	ldr	r3, [r7, #8]
 800a0fc:	695b      	ldr	r3, [r3, #20]
 800a0fe:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800a100:	68bb      	ldr	r3, [r7, #8]
 800a102:	791b      	ldrb	r3, [r3, #4]
 800a104:	2b01      	cmp	r3, #1
 800a106:	d128      	bne.n	800a15a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a108:	69fb      	ldr	r3, [r7, #28]
 800a10a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a10e:	689b      	ldr	r3, [r3, #8]
 800a110:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a114:	2b00      	cmp	r3, #0
 800a116:	d110      	bne.n	800a13a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a118:	69bb      	ldr	r3, [r7, #24]
 800a11a:	015a      	lsls	r2, r3, #5
 800a11c:	69fb      	ldr	r3, [r7, #28]
 800a11e:	4413      	add	r3, r2
 800a120:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	69ba      	ldr	r2, [r7, #24]
 800a128:	0151      	lsls	r1, r2, #5
 800a12a:	69fa      	ldr	r2, [r7, #28]
 800a12c:	440a      	add	r2, r1
 800a12e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a132:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a136:	6013      	str	r3, [r2, #0]
 800a138:	e00f      	b.n	800a15a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a13a:	69bb      	ldr	r3, [r7, #24]
 800a13c:	015a      	lsls	r2, r3, #5
 800a13e:	69fb      	ldr	r3, [r7, #28]
 800a140:	4413      	add	r3, r2
 800a142:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	69ba      	ldr	r2, [r7, #24]
 800a14a:	0151      	lsls	r1, r2, #5
 800a14c:	69fa      	ldr	r2, [r7, #28]
 800a14e:	440a      	add	r2, r1
 800a150:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a154:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a158:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a15a:	69bb      	ldr	r3, [r7, #24]
 800a15c:	015a      	lsls	r2, r3, #5
 800a15e:	69fb      	ldr	r3, [r7, #28]
 800a160:	4413      	add	r3, r2
 800a162:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	69ba      	ldr	r2, [r7, #24]
 800a16a:	0151      	lsls	r1, r2, #5
 800a16c:	69fa      	ldr	r2, [r7, #28]
 800a16e:	440a      	add	r2, r1
 800a170:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a174:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a178:	6013      	str	r3, [r2, #0]
 800a17a:	e133      	b.n	800a3e4 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a17c:	69bb      	ldr	r3, [r7, #24]
 800a17e:	015a      	lsls	r2, r3, #5
 800a180:	69fb      	ldr	r3, [r7, #28]
 800a182:	4413      	add	r3, r2
 800a184:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	69ba      	ldr	r2, [r7, #24]
 800a18c:	0151      	lsls	r1, r2, #5
 800a18e:	69fa      	ldr	r2, [r7, #28]
 800a190:	440a      	add	r2, r1
 800a192:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a196:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a19a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a19c:	68bb      	ldr	r3, [r7, #8]
 800a19e:	791b      	ldrb	r3, [r3, #4]
 800a1a0:	2b01      	cmp	r3, #1
 800a1a2:	d015      	beq.n	800a1d0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800a1a4:	68bb      	ldr	r3, [r7, #8]
 800a1a6:	699b      	ldr	r3, [r3, #24]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	f000 811b 	beq.w	800a3e4 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a1ae:	69fb      	ldr	r3, [r7, #28]
 800a1b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a1b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a1b6:	68bb      	ldr	r3, [r7, #8]
 800a1b8:	781b      	ldrb	r3, [r3, #0]
 800a1ba:	f003 030f 	and.w	r3, r3, #15
 800a1be:	2101      	movs	r1, #1
 800a1c0:	fa01 f303 	lsl.w	r3, r1, r3
 800a1c4:	69f9      	ldr	r1, [r7, #28]
 800a1c6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a1ca:	4313      	orrs	r3, r2
 800a1cc:	634b      	str	r3, [r1, #52]	; 0x34
 800a1ce:	e109      	b.n	800a3e4 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a1d0:	69fb      	ldr	r3, [r7, #28]
 800a1d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a1d6:	689b      	ldr	r3, [r3, #8]
 800a1d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d110      	bne.n	800a202 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a1e0:	69bb      	ldr	r3, [r7, #24]
 800a1e2:	015a      	lsls	r2, r3, #5
 800a1e4:	69fb      	ldr	r3, [r7, #28]
 800a1e6:	4413      	add	r3, r2
 800a1e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	69ba      	ldr	r2, [r7, #24]
 800a1f0:	0151      	lsls	r1, r2, #5
 800a1f2:	69fa      	ldr	r2, [r7, #28]
 800a1f4:	440a      	add	r2, r1
 800a1f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a1fa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a1fe:	6013      	str	r3, [r2, #0]
 800a200:	e00f      	b.n	800a222 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a202:	69bb      	ldr	r3, [r7, #24]
 800a204:	015a      	lsls	r2, r3, #5
 800a206:	69fb      	ldr	r3, [r7, #28]
 800a208:	4413      	add	r3, r2
 800a20a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	69ba      	ldr	r2, [r7, #24]
 800a212:	0151      	lsls	r1, r2, #5
 800a214:	69fa      	ldr	r2, [r7, #28]
 800a216:	440a      	add	r2, r1
 800a218:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a21c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a220:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800a222:	68bb      	ldr	r3, [r7, #8]
 800a224:	6919      	ldr	r1, [r3, #16]
 800a226:	68bb      	ldr	r3, [r7, #8]
 800a228:	781a      	ldrb	r2, [r3, #0]
 800a22a:	68bb      	ldr	r3, [r7, #8]
 800a22c:	699b      	ldr	r3, [r3, #24]
 800a22e:	b298      	uxth	r0, r3
 800a230:	79fb      	ldrb	r3, [r7, #7]
 800a232:	9300      	str	r3, [sp, #0]
 800a234:	4603      	mov	r3, r0
 800a236:	68f8      	ldr	r0, [r7, #12]
 800a238:	f000 fade 	bl	800a7f8 <USB_WritePacket>
 800a23c:	e0d2      	b.n	800a3e4 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a23e:	69bb      	ldr	r3, [r7, #24]
 800a240:	015a      	lsls	r2, r3, #5
 800a242:	69fb      	ldr	r3, [r7, #28]
 800a244:	4413      	add	r3, r2
 800a246:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a24a:	691b      	ldr	r3, [r3, #16]
 800a24c:	69ba      	ldr	r2, [r7, #24]
 800a24e:	0151      	lsls	r1, r2, #5
 800a250:	69fa      	ldr	r2, [r7, #28]
 800a252:	440a      	add	r2, r1
 800a254:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a258:	0cdb      	lsrs	r3, r3, #19
 800a25a:	04db      	lsls	r3, r3, #19
 800a25c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a25e:	69bb      	ldr	r3, [r7, #24]
 800a260:	015a      	lsls	r2, r3, #5
 800a262:	69fb      	ldr	r3, [r7, #28]
 800a264:	4413      	add	r3, r2
 800a266:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a26a:	691b      	ldr	r3, [r3, #16]
 800a26c:	69ba      	ldr	r2, [r7, #24]
 800a26e:	0151      	lsls	r1, r2, #5
 800a270:	69fa      	ldr	r2, [r7, #28]
 800a272:	440a      	add	r2, r1
 800a274:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a278:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a27c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a280:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800a282:	68bb      	ldr	r3, [r7, #8]
 800a284:	699b      	ldr	r3, [r3, #24]
 800a286:	2b00      	cmp	r3, #0
 800a288:	d126      	bne.n	800a2d8 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a28a:	69bb      	ldr	r3, [r7, #24]
 800a28c:	015a      	lsls	r2, r3, #5
 800a28e:	69fb      	ldr	r3, [r7, #28]
 800a290:	4413      	add	r3, r2
 800a292:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a296:	691a      	ldr	r2, [r3, #16]
 800a298:	68bb      	ldr	r3, [r7, #8]
 800a29a:	68db      	ldr	r3, [r3, #12]
 800a29c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a2a0:	69b9      	ldr	r1, [r7, #24]
 800a2a2:	0148      	lsls	r0, r1, #5
 800a2a4:	69f9      	ldr	r1, [r7, #28]
 800a2a6:	4401      	add	r1, r0
 800a2a8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a2ac:	4313      	orrs	r3, r2
 800a2ae:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a2b0:	69bb      	ldr	r3, [r7, #24]
 800a2b2:	015a      	lsls	r2, r3, #5
 800a2b4:	69fb      	ldr	r3, [r7, #28]
 800a2b6:	4413      	add	r3, r2
 800a2b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a2bc:	691b      	ldr	r3, [r3, #16]
 800a2be:	69ba      	ldr	r2, [r7, #24]
 800a2c0:	0151      	lsls	r1, r2, #5
 800a2c2:	69fa      	ldr	r2, [r7, #28]
 800a2c4:	440a      	add	r2, r1
 800a2c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a2ca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a2ce:	6113      	str	r3, [r2, #16]
 800a2d0:	e03a      	b.n	800a348 <USB_EPStartXfer+0x3e4>
 800a2d2:	bf00      	nop
 800a2d4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a2d8:	68bb      	ldr	r3, [r7, #8]
 800a2da:	699a      	ldr	r2, [r3, #24]
 800a2dc:	68bb      	ldr	r3, [r7, #8]
 800a2de:	68db      	ldr	r3, [r3, #12]
 800a2e0:	4413      	add	r3, r2
 800a2e2:	1e5a      	subs	r2, r3, #1
 800a2e4:	68bb      	ldr	r3, [r7, #8]
 800a2e6:	68db      	ldr	r3, [r3, #12]
 800a2e8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a2ec:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800a2ee:	68bb      	ldr	r3, [r7, #8]
 800a2f0:	68db      	ldr	r3, [r3, #12]
 800a2f2:	8afa      	ldrh	r2, [r7, #22]
 800a2f4:	fb03 f202 	mul.w	r2, r3, r2
 800a2f8:	68bb      	ldr	r3, [r7, #8]
 800a2fa:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a2fc:	69bb      	ldr	r3, [r7, #24]
 800a2fe:	015a      	lsls	r2, r3, #5
 800a300:	69fb      	ldr	r3, [r7, #28]
 800a302:	4413      	add	r3, r2
 800a304:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a308:	691a      	ldr	r2, [r3, #16]
 800a30a:	8afb      	ldrh	r3, [r7, #22]
 800a30c:	04d9      	lsls	r1, r3, #19
 800a30e:	4b38      	ldr	r3, [pc, #224]	; (800a3f0 <USB_EPStartXfer+0x48c>)
 800a310:	400b      	ands	r3, r1
 800a312:	69b9      	ldr	r1, [r7, #24]
 800a314:	0148      	lsls	r0, r1, #5
 800a316:	69f9      	ldr	r1, [r7, #28]
 800a318:	4401      	add	r1, r0
 800a31a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a31e:	4313      	orrs	r3, r2
 800a320:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800a322:	69bb      	ldr	r3, [r7, #24]
 800a324:	015a      	lsls	r2, r3, #5
 800a326:	69fb      	ldr	r3, [r7, #28]
 800a328:	4413      	add	r3, r2
 800a32a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a32e:	691a      	ldr	r2, [r3, #16]
 800a330:	68bb      	ldr	r3, [r7, #8]
 800a332:	69db      	ldr	r3, [r3, #28]
 800a334:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a338:	69b9      	ldr	r1, [r7, #24]
 800a33a:	0148      	lsls	r0, r1, #5
 800a33c:	69f9      	ldr	r1, [r7, #28]
 800a33e:	4401      	add	r1, r0
 800a340:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a344:	4313      	orrs	r3, r2
 800a346:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a348:	79fb      	ldrb	r3, [r7, #7]
 800a34a:	2b01      	cmp	r3, #1
 800a34c:	d10d      	bne.n	800a36a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a34e:	68bb      	ldr	r3, [r7, #8]
 800a350:	691b      	ldr	r3, [r3, #16]
 800a352:	2b00      	cmp	r3, #0
 800a354:	d009      	beq.n	800a36a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a356:	68bb      	ldr	r3, [r7, #8]
 800a358:	6919      	ldr	r1, [r3, #16]
 800a35a:	69bb      	ldr	r3, [r7, #24]
 800a35c:	015a      	lsls	r2, r3, #5
 800a35e:	69fb      	ldr	r3, [r7, #28]
 800a360:	4413      	add	r3, r2
 800a362:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a366:	460a      	mov	r2, r1
 800a368:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800a36a:	68bb      	ldr	r3, [r7, #8]
 800a36c:	791b      	ldrb	r3, [r3, #4]
 800a36e:	2b01      	cmp	r3, #1
 800a370:	d128      	bne.n	800a3c4 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a372:	69fb      	ldr	r3, [r7, #28]
 800a374:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a378:	689b      	ldr	r3, [r3, #8]
 800a37a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d110      	bne.n	800a3a4 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a382:	69bb      	ldr	r3, [r7, #24]
 800a384:	015a      	lsls	r2, r3, #5
 800a386:	69fb      	ldr	r3, [r7, #28]
 800a388:	4413      	add	r3, r2
 800a38a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	69ba      	ldr	r2, [r7, #24]
 800a392:	0151      	lsls	r1, r2, #5
 800a394:	69fa      	ldr	r2, [r7, #28]
 800a396:	440a      	add	r2, r1
 800a398:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a39c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a3a0:	6013      	str	r3, [r2, #0]
 800a3a2:	e00f      	b.n	800a3c4 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a3a4:	69bb      	ldr	r3, [r7, #24]
 800a3a6:	015a      	lsls	r2, r3, #5
 800a3a8:	69fb      	ldr	r3, [r7, #28]
 800a3aa:	4413      	add	r3, r2
 800a3ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	69ba      	ldr	r2, [r7, #24]
 800a3b4:	0151      	lsls	r1, r2, #5
 800a3b6:	69fa      	ldr	r2, [r7, #28]
 800a3b8:	440a      	add	r2, r1
 800a3ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a3be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a3c2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a3c4:	69bb      	ldr	r3, [r7, #24]
 800a3c6:	015a      	lsls	r2, r3, #5
 800a3c8:	69fb      	ldr	r3, [r7, #28]
 800a3ca:	4413      	add	r3, r2
 800a3cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	69ba      	ldr	r2, [r7, #24]
 800a3d4:	0151      	lsls	r1, r2, #5
 800a3d6:	69fa      	ldr	r2, [r7, #28]
 800a3d8:	440a      	add	r2, r1
 800a3da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a3de:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a3e2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a3e4:	2300      	movs	r3, #0
}
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	3720      	adds	r7, #32
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	bd80      	pop	{r7, pc}
 800a3ee:	bf00      	nop
 800a3f0:	1ff80000 	.word	0x1ff80000

0800a3f4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a3f4:	b480      	push	{r7}
 800a3f6:	b087      	sub	sp, #28
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	60f8      	str	r0, [r7, #12]
 800a3fc:	60b9      	str	r1, [r7, #8]
 800a3fe:	4613      	mov	r3, r2
 800a400:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800a406:	68bb      	ldr	r3, [r7, #8]
 800a408:	781b      	ldrb	r3, [r3, #0]
 800a40a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a40c:	68bb      	ldr	r3, [r7, #8]
 800a40e:	785b      	ldrb	r3, [r3, #1]
 800a410:	2b01      	cmp	r3, #1
 800a412:	f040 80ce 	bne.w	800a5b2 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a416:	68bb      	ldr	r3, [r7, #8]
 800a418:	699b      	ldr	r3, [r3, #24]
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d132      	bne.n	800a484 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a41e:	693b      	ldr	r3, [r7, #16]
 800a420:	015a      	lsls	r2, r3, #5
 800a422:	697b      	ldr	r3, [r7, #20]
 800a424:	4413      	add	r3, r2
 800a426:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a42a:	691b      	ldr	r3, [r3, #16]
 800a42c:	693a      	ldr	r2, [r7, #16]
 800a42e:	0151      	lsls	r1, r2, #5
 800a430:	697a      	ldr	r2, [r7, #20]
 800a432:	440a      	add	r2, r1
 800a434:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a438:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a43c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a440:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a442:	693b      	ldr	r3, [r7, #16]
 800a444:	015a      	lsls	r2, r3, #5
 800a446:	697b      	ldr	r3, [r7, #20]
 800a448:	4413      	add	r3, r2
 800a44a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a44e:	691b      	ldr	r3, [r3, #16]
 800a450:	693a      	ldr	r2, [r7, #16]
 800a452:	0151      	lsls	r1, r2, #5
 800a454:	697a      	ldr	r2, [r7, #20]
 800a456:	440a      	add	r2, r1
 800a458:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a45c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a460:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a462:	693b      	ldr	r3, [r7, #16]
 800a464:	015a      	lsls	r2, r3, #5
 800a466:	697b      	ldr	r3, [r7, #20]
 800a468:	4413      	add	r3, r2
 800a46a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a46e:	691b      	ldr	r3, [r3, #16]
 800a470:	693a      	ldr	r2, [r7, #16]
 800a472:	0151      	lsls	r1, r2, #5
 800a474:	697a      	ldr	r2, [r7, #20]
 800a476:	440a      	add	r2, r1
 800a478:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a47c:	0cdb      	lsrs	r3, r3, #19
 800a47e:	04db      	lsls	r3, r3, #19
 800a480:	6113      	str	r3, [r2, #16]
 800a482:	e04e      	b.n	800a522 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a484:	693b      	ldr	r3, [r7, #16]
 800a486:	015a      	lsls	r2, r3, #5
 800a488:	697b      	ldr	r3, [r7, #20]
 800a48a:	4413      	add	r3, r2
 800a48c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a490:	691b      	ldr	r3, [r3, #16]
 800a492:	693a      	ldr	r2, [r7, #16]
 800a494:	0151      	lsls	r1, r2, #5
 800a496:	697a      	ldr	r2, [r7, #20]
 800a498:	440a      	add	r2, r1
 800a49a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a49e:	0cdb      	lsrs	r3, r3, #19
 800a4a0:	04db      	lsls	r3, r3, #19
 800a4a2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a4a4:	693b      	ldr	r3, [r7, #16]
 800a4a6:	015a      	lsls	r2, r3, #5
 800a4a8:	697b      	ldr	r3, [r7, #20]
 800a4aa:	4413      	add	r3, r2
 800a4ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4b0:	691b      	ldr	r3, [r3, #16]
 800a4b2:	693a      	ldr	r2, [r7, #16]
 800a4b4:	0151      	lsls	r1, r2, #5
 800a4b6:	697a      	ldr	r2, [r7, #20]
 800a4b8:	440a      	add	r2, r1
 800a4ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a4be:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a4c2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a4c6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800a4c8:	68bb      	ldr	r3, [r7, #8]
 800a4ca:	699a      	ldr	r2, [r3, #24]
 800a4cc:	68bb      	ldr	r3, [r7, #8]
 800a4ce:	68db      	ldr	r3, [r3, #12]
 800a4d0:	429a      	cmp	r2, r3
 800a4d2:	d903      	bls.n	800a4dc <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800a4d4:	68bb      	ldr	r3, [r7, #8]
 800a4d6:	68da      	ldr	r2, [r3, #12]
 800a4d8:	68bb      	ldr	r3, [r7, #8]
 800a4da:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a4dc:	693b      	ldr	r3, [r7, #16]
 800a4de:	015a      	lsls	r2, r3, #5
 800a4e0:	697b      	ldr	r3, [r7, #20]
 800a4e2:	4413      	add	r3, r2
 800a4e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4e8:	691b      	ldr	r3, [r3, #16]
 800a4ea:	693a      	ldr	r2, [r7, #16]
 800a4ec:	0151      	lsls	r1, r2, #5
 800a4ee:	697a      	ldr	r2, [r7, #20]
 800a4f0:	440a      	add	r2, r1
 800a4f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a4f6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a4fa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a4fc:	693b      	ldr	r3, [r7, #16]
 800a4fe:	015a      	lsls	r2, r3, #5
 800a500:	697b      	ldr	r3, [r7, #20]
 800a502:	4413      	add	r3, r2
 800a504:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a508:	691a      	ldr	r2, [r3, #16]
 800a50a:	68bb      	ldr	r3, [r7, #8]
 800a50c:	699b      	ldr	r3, [r3, #24]
 800a50e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a512:	6939      	ldr	r1, [r7, #16]
 800a514:	0148      	lsls	r0, r1, #5
 800a516:	6979      	ldr	r1, [r7, #20]
 800a518:	4401      	add	r1, r0
 800a51a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a51e:	4313      	orrs	r3, r2
 800a520:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a522:	79fb      	ldrb	r3, [r7, #7]
 800a524:	2b01      	cmp	r3, #1
 800a526:	d11e      	bne.n	800a566 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a528:	68bb      	ldr	r3, [r7, #8]
 800a52a:	695b      	ldr	r3, [r3, #20]
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d009      	beq.n	800a544 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a530:	693b      	ldr	r3, [r7, #16]
 800a532:	015a      	lsls	r2, r3, #5
 800a534:	697b      	ldr	r3, [r7, #20]
 800a536:	4413      	add	r3, r2
 800a538:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a53c:	461a      	mov	r2, r3
 800a53e:	68bb      	ldr	r3, [r7, #8]
 800a540:	695b      	ldr	r3, [r3, #20]
 800a542:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a544:	693b      	ldr	r3, [r7, #16]
 800a546:	015a      	lsls	r2, r3, #5
 800a548:	697b      	ldr	r3, [r7, #20]
 800a54a:	4413      	add	r3, r2
 800a54c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	693a      	ldr	r2, [r7, #16]
 800a554:	0151      	lsls	r1, r2, #5
 800a556:	697a      	ldr	r2, [r7, #20]
 800a558:	440a      	add	r2, r1
 800a55a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a55e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a562:	6013      	str	r3, [r2, #0]
 800a564:	e097      	b.n	800a696 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a566:	693b      	ldr	r3, [r7, #16]
 800a568:	015a      	lsls	r2, r3, #5
 800a56a:	697b      	ldr	r3, [r7, #20]
 800a56c:	4413      	add	r3, r2
 800a56e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	693a      	ldr	r2, [r7, #16]
 800a576:	0151      	lsls	r1, r2, #5
 800a578:	697a      	ldr	r2, [r7, #20]
 800a57a:	440a      	add	r2, r1
 800a57c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a580:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a584:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800a586:	68bb      	ldr	r3, [r7, #8]
 800a588:	699b      	ldr	r3, [r3, #24]
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	f000 8083 	beq.w	800a696 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a590:	697b      	ldr	r3, [r7, #20]
 800a592:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a596:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a598:	68bb      	ldr	r3, [r7, #8]
 800a59a:	781b      	ldrb	r3, [r3, #0]
 800a59c:	f003 030f 	and.w	r3, r3, #15
 800a5a0:	2101      	movs	r1, #1
 800a5a2:	fa01 f303 	lsl.w	r3, r1, r3
 800a5a6:	6979      	ldr	r1, [r7, #20]
 800a5a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a5ac:	4313      	orrs	r3, r2
 800a5ae:	634b      	str	r3, [r1, #52]	; 0x34
 800a5b0:	e071      	b.n	800a696 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a5b2:	693b      	ldr	r3, [r7, #16]
 800a5b4:	015a      	lsls	r2, r3, #5
 800a5b6:	697b      	ldr	r3, [r7, #20]
 800a5b8:	4413      	add	r3, r2
 800a5ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a5be:	691b      	ldr	r3, [r3, #16]
 800a5c0:	693a      	ldr	r2, [r7, #16]
 800a5c2:	0151      	lsls	r1, r2, #5
 800a5c4:	697a      	ldr	r2, [r7, #20]
 800a5c6:	440a      	add	r2, r1
 800a5c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a5cc:	0cdb      	lsrs	r3, r3, #19
 800a5ce:	04db      	lsls	r3, r3, #19
 800a5d0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a5d2:	693b      	ldr	r3, [r7, #16]
 800a5d4:	015a      	lsls	r2, r3, #5
 800a5d6:	697b      	ldr	r3, [r7, #20]
 800a5d8:	4413      	add	r3, r2
 800a5da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a5de:	691b      	ldr	r3, [r3, #16]
 800a5e0:	693a      	ldr	r2, [r7, #16]
 800a5e2:	0151      	lsls	r1, r2, #5
 800a5e4:	697a      	ldr	r2, [r7, #20]
 800a5e6:	440a      	add	r2, r1
 800a5e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a5ec:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a5f0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a5f4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800a5f6:	68bb      	ldr	r3, [r7, #8]
 800a5f8:	699b      	ldr	r3, [r3, #24]
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d003      	beq.n	800a606 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800a5fe:	68bb      	ldr	r3, [r7, #8]
 800a600:	68da      	ldr	r2, [r3, #12]
 800a602:	68bb      	ldr	r3, [r7, #8]
 800a604:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800a606:	68bb      	ldr	r3, [r7, #8]
 800a608:	68da      	ldr	r2, [r3, #12]
 800a60a:	68bb      	ldr	r3, [r7, #8]
 800a60c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a60e:	693b      	ldr	r3, [r7, #16]
 800a610:	015a      	lsls	r2, r3, #5
 800a612:	697b      	ldr	r3, [r7, #20]
 800a614:	4413      	add	r3, r2
 800a616:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a61a:	691b      	ldr	r3, [r3, #16]
 800a61c:	693a      	ldr	r2, [r7, #16]
 800a61e:	0151      	lsls	r1, r2, #5
 800a620:	697a      	ldr	r2, [r7, #20]
 800a622:	440a      	add	r2, r1
 800a624:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a628:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a62c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800a62e:	693b      	ldr	r3, [r7, #16]
 800a630:	015a      	lsls	r2, r3, #5
 800a632:	697b      	ldr	r3, [r7, #20]
 800a634:	4413      	add	r3, r2
 800a636:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a63a:	691a      	ldr	r2, [r3, #16]
 800a63c:	68bb      	ldr	r3, [r7, #8]
 800a63e:	69db      	ldr	r3, [r3, #28]
 800a640:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a644:	6939      	ldr	r1, [r7, #16]
 800a646:	0148      	lsls	r0, r1, #5
 800a648:	6979      	ldr	r1, [r7, #20]
 800a64a:	4401      	add	r1, r0
 800a64c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a650:	4313      	orrs	r3, r2
 800a652:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800a654:	79fb      	ldrb	r3, [r7, #7]
 800a656:	2b01      	cmp	r3, #1
 800a658:	d10d      	bne.n	800a676 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a65a:	68bb      	ldr	r3, [r7, #8]
 800a65c:	691b      	ldr	r3, [r3, #16]
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d009      	beq.n	800a676 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a662:	68bb      	ldr	r3, [r7, #8]
 800a664:	6919      	ldr	r1, [r3, #16]
 800a666:	693b      	ldr	r3, [r7, #16]
 800a668:	015a      	lsls	r2, r3, #5
 800a66a:	697b      	ldr	r3, [r7, #20]
 800a66c:	4413      	add	r3, r2
 800a66e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a672:	460a      	mov	r2, r1
 800a674:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a676:	693b      	ldr	r3, [r7, #16]
 800a678:	015a      	lsls	r2, r3, #5
 800a67a:	697b      	ldr	r3, [r7, #20]
 800a67c:	4413      	add	r3, r2
 800a67e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	693a      	ldr	r2, [r7, #16]
 800a686:	0151      	lsls	r1, r2, #5
 800a688:	697a      	ldr	r2, [r7, #20]
 800a68a:	440a      	add	r2, r1
 800a68c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a690:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a694:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a696:	2300      	movs	r3, #0
}
 800a698:	4618      	mov	r0, r3
 800a69a:	371c      	adds	r7, #28
 800a69c:	46bd      	mov	sp, r7
 800a69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a2:	4770      	bx	lr

0800a6a4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a6a4:	b480      	push	{r7}
 800a6a6:	b087      	sub	sp, #28
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	6078      	str	r0, [r7, #4]
 800a6ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a6ba:	683b      	ldr	r3, [r7, #0]
 800a6bc:	785b      	ldrb	r3, [r3, #1]
 800a6be:	2b01      	cmp	r3, #1
 800a6c0:	d14a      	bne.n	800a758 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a6c2:	683b      	ldr	r3, [r7, #0]
 800a6c4:	781b      	ldrb	r3, [r3, #0]
 800a6c6:	015a      	lsls	r2, r3, #5
 800a6c8:	693b      	ldr	r3, [r7, #16]
 800a6ca:	4413      	add	r3, r2
 800a6cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a6d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a6da:	f040 8086 	bne.w	800a7ea <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800a6de:	683b      	ldr	r3, [r7, #0]
 800a6e0:	781b      	ldrb	r3, [r3, #0]
 800a6e2:	015a      	lsls	r2, r3, #5
 800a6e4:	693b      	ldr	r3, [r7, #16]
 800a6e6:	4413      	add	r3, r2
 800a6e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	683a      	ldr	r2, [r7, #0]
 800a6f0:	7812      	ldrb	r2, [r2, #0]
 800a6f2:	0151      	lsls	r1, r2, #5
 800a6f4:	693a      	ldr	r2, [r7, #16]
 800a6f6:	440a      	add	r2, r1
 800a6f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a6fc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a700:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800a702:	683b      	ldr	r3, [r7, #0]
 800a704:	781b      	ldrb	r3, [r3, #0]
 800a706:	015a      	lsls	r2, r3, #5
 800a708:	693b      	ldr	r3, [r7, #16]
 800a70a:	4413      	add	r3, r2
 800a70c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	683a      	ldr	r2, [r7, #0]
 800a714:	7812      	ldrb	r2, [r2, #0]
 800a716:	0151      	lsls	r1, r2, #5
 800a718:	693a      	ldr	r2, [r7, #16]
 800a71a:	440a      	add	r2, r1
 800a71c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a720:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a724:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	3301      	adds	r3, #1
 800a72a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	f242 7210 	movw	r2, #10000	; 0x2710
 800a732:	4293      	cmp	r3, r2
 800a734:	d902      	bls.n	800a73c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800a736:	2301      	movs	r3, #1
 800a738:	75fb      	strb	r3, [r7, #23]
          break;
 800a73a:	e056      	b.n	800a7ea <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800a73c:	683b      	ldr	r3, [r7, #0]
 800a73e:	781b      	ldrb	r3, [r3, #0]
 800a740:	015a      	lsls	r2, r3, #5
 800a742:	693b      	ldr	r3, [r7, #16]
 800a744:	4413      	add	r3, r2
 800a746:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a750:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a754:	d0e7      	beq.n	800a726 <USB_EPStopXfer+0x82>
 800a756:	e048      	b.n	800a7ea <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a758:	683b      	ldr	r3, [r7, #0]
 800a75a:	781b      	ldrb	r3, [r3, #0]
 800a75c:	015a      	lsls	r2, r3, #5
 800a75e:	693b      	ldr	r3, [r7, #16]
 800a760:	4413      	add	r3, r2
 800a762:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a76c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a770:	d13b      	bne.n	800a7ea <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800a772:	683b      	ldr	r3, [r7, #0]
 800a774:	781b      	ldrb	r3, [r3, #0]
 800a776:	015a      	lsls	r2, r3, #5
 800a778:	693b      	ldr	r3, [r7, #16]
 800a77a:	4413      	add	r3, r2
 800a77c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	683a      	ldr	r2, [r7, #0]
 800a784:	7812      	ldrb	r2, [r2, #0]
 800a786:	0151      	lsls	r1, r2, #5
 800a788:	693a      	ldr	r2, [r7, #16]
 800a78a:	440a      	add	r2, r1
 800a78c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a790:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a794:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800a796:	683b      	ldr	r3, [r7, #0]
 800a798:	781b      	ldrb	r3, [r3, #0]
 800a79a:	015a      	lsls	r2, r3, #5
 800a79c:	693b      	ldr	r3, [r7, #16]
 800a79e:	4413      	add	r3, r2
 800a7a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	683a      	ldr	r2, [r7, #0]
 800a7a8:	7812      	ldrb	r2, [r2, #0]
 800a7aa:	0151      	lsls	r1, r2, #5
 800a7ac:	693a      	ldr	r2, [r7, #16]
 800a7ae:	440a      	add	r2, r1
 800a7b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a7b4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a7b8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	3301      	adds	r3, #1
 800a7be:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	f242 7210 	movw	r2, #10000	; 0x2710
 800a7c6:	4293      	cmp	r3, r2
 800a7c8:	d902      	bls.n	800a7d0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800a7ca:	2301      	movs	r3, #1
 800a7cc:	75fb      	strb	r3, [r7, #23]
          break;
 800a7ce:	e00c      	b.n	800a7ea <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800a7d0:	683b      	ldr	r3, [r7, #0]
 800a7d2:	781b      	ldrb	r3, [r3, #0]
 800a7d4:	015a      	lsls	r2, r3, #5
 800a7d6:	693b      	ldr	r3, [r7, #16]
 800a7d8:	4413      	add	r3, r2
 800a7da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a7e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a7e8:	d0e7      	beq.n	800a7ba <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800a7ea:	7dfb      	ldrb	r3, [r7, #23]
}
 800a7ec:	4618      	mov	r0, r3
 800a7ee:	371c      	adds	r7, #28
 800a7f0:	46bd      	mov	sp, r7
 800a7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f6:	4770      	bx	lr

0800a7f8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a7f8:	b480      	push	{r7}
 800a7fa:	b089      	sub	sp, #36	; 0x24
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	60f8      	str	r0, [r7, #12]
 800a800:	60b9      	str	r1, [r7, #8]
 800a802:	4611      	mov	r1, r2
 800a804:	461a      	mov	r2, r3
 800a806:	460b      	mov	r3, r1
 800a808:	71fb      	strb	r3, [r7, #7]
 800a80a:	4613      	mov	r3, r2
 800a80c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a812:	68bb      	ldr	r3, [r7, #8]
 800a814:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a816:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d123      	bne.n	800a866 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a81e:	88bb      	ldrh	r3, [r7, #4]
 800a820:	3303      	adds	r3, #3
 800a822:	089b      	lsrs	r3, r3, #2
 800a824:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a826:	2300      	movs	r3, #0
 800a828:	61bb      	str	r3, [r7, #24]
 800a82a:	e018      	b.n	800a85e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a82c:	79fb      	ldrb	r3, [r7, #7]
 800a82e:	031a      	lsls	r2, r3, #12
 800a830:	697b      	ldr	r3, [r7, #20]
 800a832:	4413      	add	r3, r2
 800a834:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a838:	461a      	mov	r2, r3
 800a83a:	69fb      	ldr	r3, [r7, #28]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a840:	69fb      	ldr	r3, [r7, #28]
 800a842:	3301      	adds	r3, #1
 800a844:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a846:	69fb      	ldr	r3, [r7, #28]
 800a848:	3301      	adds	r3, #1
 800a84a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a84c:	69fb      	ldr	r3, [r7, #28]
 800a84e:	3301      	adds	r3, #1
 800a850:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a852:	69fb      	ldr	r3, [r7, #28]
 800a854:	3301      	adds	r3, #1
 800a856:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a858:	69bb      	ldr	r3, [r7, #24]
 800a85a:	3301      	adds	r3, #1
 800a85c:	61bb      	str	r3, [r7, #24]
 800a85e:	69ba      	ldr	r2, [r7, #24]
 800a860:	693b      	ldr	r3, [r7, #16]
 800a862:	429a      	cmp	r2, r3
 800a864:	d3e2      	bcc.n	800a82c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a866:	2300      	movs	r3, #0
}
 800a868:	4618      	mov	r0, r3
 800a86a:	3724      	adds	r7, #36	; 0x24
 800a86c:	46bd      	mov	sp, r7
 800a86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a872:	4770      	bx	lr

0800a874 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a874:	b480      	push	{r7}
 800a876:	b08b      	sub	sp, #44	; 0x2c
 800a878:	af00      	add	r7, sp, #0
 800a87a:	60f8      	str	r0, [r7, #12]
 800a87c:	60b9      	str	r1, [r7, #8]
 800a87e:	4613      	mov	r3, r2
 800a880:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a886:	68bb      	ldr	r3, [r7, #8]
 800a888:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a88a:	88fb      	ldrh	r3, [r7, #6]
 800a88c:	089b      	lsrs	r3, r3, #2
 800a88e:	b29b      	uxth	r3, r3
 800a890:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a892:	88fb      	ldrh	r3, [r7, #6]
 800a894:	f003 0303 	and.w	r3, r3, #3
 800a898:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a89a:	2300      	movs	r3, #0
 800a89c:	623b      	str	r3, [r7, #32]
 800a89e:	e014      	b.n	800a8ca <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a8a0:	69bb      	ldr	r3, [r7, #24]
 800a8a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a8a6:	681a      	ldr	r2, [r3, #0]
 800a8a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8aa:	601a      	str	r2, [r3, #0]
    pDest++;
 800a8ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8ae:	3301      	adds	r3, #1
 800a8b0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a8b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8b4:	3301      	adds	r3, #1
 800a8b6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a8b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8ba:	3301      	adds	r3, #1
 800a8bc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a8be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8c0:	3301      	adds	r3, #1
 800a8c2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800a8c4:	6a3b      	ldr	r3, [r7, #32]
 800a8c6:	3301      	adds	r3, #1
 800a8c8:	623b      	str	r3, [r7, #32]
 800a8ca:	6a3a      	ldr	r2, [r7, #32]
 800a8cc:	697b      	ldr	r3, [r7, #20]
 800a8ce:	429a      	cmp	r2, r3
 800a8d0:	d3e6      	bcc.n	800a8a0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a8d2:	8bfb      	ldrh	r3, [r7, #30]
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d01e      	beq.n	800a916 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a8d8:	2300      	movs	r3, #0
 800a8da:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a8dc:	69bb      	ldr	r3, [r7, #24]
 800a8de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a8e2:	461a      	mov	r2, r3
 800a8e4:	f107 0310 	add.w	r3, r7, #16
 800a8e8:	6812      	ldr	r2, [r2, #0]
 800a8ea:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a8ec:	693a      	ldr	r2, [r7, #16]
 800a8ee:	6a3b      	ldr	r3, [r7, #32]
 800a8f0:	b2db      	uxtb	r3, r3
 800a8f2:	00db      	lsls	r3, r3, #3
 800a8f4:	fa22 f303 	lsr.w	r3, r2, r3
 800a8f8:	b2da      	uxtb	r2, r3
 800a8fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8fc:	701a      	strb	r2, [r3, #0]
      i++;
 800a8fe:	6a3b      	ldr	r3, [r7, #32]
 800a900:	3301      	adds	r3, #1
 800a902:	623b      	str	r3, [r7, #32]
      pDest++;
 800a904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a906:	3301      	adds	r3, #1
 800a908:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800a90a:	8bfb      	ldrh	r3, [r7, #30]
 800a90c:	3b01      	subs	r3, #1
 800a90e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a910:	8bfb      	ldrh	r3, [r7, #30]
 800a912:	2b00      	cmp	r3, #0
 800a914:	d1ea      	bne.n	800a8ec <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a918:	4618      	mov	r0, r3
 800a91a:	372c      	adds	r7, #44	; 0x2c
 800a91c:	46bd      	mov	sp, r7
 800a91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a922:	4770      	bx	lr

0800a924 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a924:	b480      	push	{r7}
 800a926:	b085      	sub	sp, #20
 800a928:	af00      	add	r7, sp, #0
 800a92a:	6078      	str	r0, [r7, #4]
 800a92c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a932:	683b      	ldr	r3, [r7, #0]
 800a934:	781b      	ldrb	r3, [r3, #0]
 800a936:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a938:	683b      	ldr	r3, [r7, #0]
 800a93a:	785b      	ldrb	r3, [r3, #1]
 800a93c:	2b01      	cmp	r3, #1
 800a93e:	d12c      	bne.n	800a99a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a940:	68bb      	ldr	r3, [r7, #8]
 800a942:	015a      	lsls	r2, r3, #5
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	4413      	add	r3, r2
 800a948:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	2b00      	cmp	r3, #0
 800a950:	db12      	blt.n	800a978 <USB_EPSetStall+0x54>
 800a952:	68bb      	ldr	r3, [r7, #8]
 800a954:	2b00      	cmp	r3, #0
 800a956:	d00f      	beq.n	800a978 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a958:	68bb      	ldr	r3, [r7, #8]
 800a95a:	015a      	lsls	r2, r3, #5
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	4413      	add	r3, r2
 800a960:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	68ba      	ldr	r2, [r7, #8]
 800a968:	0151      	lsls	r1, r2, #5
 800a96a:	68fa      	ldr	r2, [r7, #12]
 800a96c:	440a      	add	r2, r1
 800a96e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a972:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a976:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a978:	68bb      	ldr	r3, [r7, #8]
 800a97a:	015a      	lsls	r2, r3, #5
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	4413      	add	r3, r2
 800a980:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	68ba      	ldr	r2, [r7, #8]
 800a988:	0151      	lsls	r1, r2, #5
 800a98a:	68fa      	ldr	r2, [r7, #12]
 800a98c:	440a      	add	r2, r1
 800a98e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a992:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a996:	6013      	str	r3, [r2, #0]
 800a998:	e02b      	b.n	800a9f2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a99a:	68bb      	ldr	r3, [r7, #8]
 800a99c:	015a      	lsls	r2, r3, #5
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	4413      	add	r3, r2
 800a9a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	db12      	blt.n	800a9d2 <USB_EPSetStall+0xae>
 800a9ac:	68bb      	ldr	r3, [r7, #8]
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d00f      	beq.n	800a9d2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a9b2:	68bb      	ldr	r3, [r7, #8]
 800a9b4:	015a      	lsls	r2, r3, #5
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	4413      	add	r3, r2
 800a9ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	68ba      	ldr	r2, [r7, #8]
 800a9c2:	0151      	lsls	r1, r2, #5
 800a9c4:	68fa      	ldr	r2, [r7, #12]
 800a9c6:	440a      	add	r2, r1
 800a9c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a9cc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a9d0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a9d2:	68bb      	ldr	r3, [r7, #8]
 800a9d4:	015a      	lsls	r2, r3, #5
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	4413      	add	r3, r2
 800a9da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	68ba      	ldr	r2, [r7, #8]
 800a9e2:	0151      	lsls	r1, r2, #5
 800a9e4:	68fa      	ldr	r2, [r7, #12]
 800a9e6:	440a      	add	r2, r1
 800a9e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a9ec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a9f0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a9f2:	2300      	movs	r3, #0
}
 800a9f4:	4618      	mov	r0, r3
 800a9f6:	3714      	adds	r7, #20
 800a9f8:	46bd      	mov	sp, r7
 800a9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9fe:	4770      	bx	lr

0800aa00 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800aa00:	b480      	push	{r7}
 800aa02:	b085      	sub	sp, #20
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	6078      	str	r0, [r7, #4]
 800aa08:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800aa0e:	683b      	ldr	r3, [r7, #0]
 800aa10:	781b      	ldrb	r3, [r3, #0]
 800aa12:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800aa14:	683b      	ldr	r3, [r7, #0]
 800aa16:	785b      	ldrb	r3, [r3, #1]
 800aa18:	2b01      	cmp	r3, #1
 800aa1a:	d128      	bne.n	800aa6e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800aa1c:	68bb      	ldr	r3, [r7, #8]
 800aa1e:	015a      	lsls	r2, r3, #5
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	4413      	add	r3, r2
 800aa24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	68ba      	ldr	r2, [r7, #8]
 800aa2c:	0151      	lsls	r1, r2, #5
 800aa2e:	68fa      	ldr	r2, [r7, #12]
 800aa30:	440a      	add	r2, r1
 800aa32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aa36:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800aa3a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800aa3c:	683b      	ldr	r3, [r7, #0]
 800aa3e:	791b      	ldrb	r3, [r3, #4]
 800aa40:	2b03      	cmp	r3, #3
 800aa42:	d003      	beq.n	800aa4c <USB_EPClearStall+0x4c>
 800aa44:	683b      	ldr	r3, [r7, #0]
 800aa46:	791b      	ldrb	r3, [r3, #4]
 800aa48:	2b02      	cmp	r3, #2
 800aa4a:	d138      	bne.n	800aabe <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800aa4c:	68bb      	ldr	r3, [r7, #8]
 800aa4e:	015a      	lsls	r2, r3, #5
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	4413      	add	r3, r2
 800aa54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	68ba      	ldr	r2, [r7, #8]
 800aa5c:	0151      	lsls	r1, r2, #5
 800aa5e:	68fa      	ldr	r2, [r7, #12]
 800aa60:	440a      	add	r2, r1
 800aa62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aa66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aa6a:	6013      	str	r3, [r2, #0]
 800aa6c:	e027      	b.n	800aabe <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800aa6e:	68bb      	ldr	r3, [r7, #8]
 800aa70:	015a      	lsls	r2, r3, #5
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	4413      	add	r3, r2
 800aa76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	68ba      	ldr	r2, [r7, #8]
 800aa7e:	0151      	lsls	r1, r2, #5
 800aa80:	68fa      	ldr	r2, [r7, #12]
 800aa82:	440a      	add	r2, r1
 800aa84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aa88:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800aa8c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800aa8e:	683b      	ldr	r3, [r7, #0]
 800aa90:	791b      	ldrb	r3, [r3, #4]
 800aa92:	2b03      	cmp	r3, #3
 800aa94:	d003      	beq.n	800aa9e <USB_EPClearStall+0x9e>
 800aa96:	683b      	ldr	r3, [r7, #0]
 800aa98:	791b      	ldrb	r3, [r3, #4]
 800aa9a:	2b02      	cmp	r3, #2
 800aa9c:	d10f      	bne.n	800aabe <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800aa9e:	68bb      	ldr	r3, [r7, #8]
 800aaa0:	015a      	lsls	r2, r3, #5
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	4413      	add	r3, r2
 800aaa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	68ba      	ldr	r2, [r7, #8]
 800aaae:	0151      	lsls	r1, r2, #5
 800aab0:	68fa      	ldr	r2, [r7, #12]
 800aab2:	440a      	add	r2, r1
 800aab4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aab8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aabc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800aabe:	2300      	movs	r3, #0
}
 800aac0:	4618      	mov	r0, r3
 800aac2:	3714      	adds	r7, #20
 800aac4:	46bd      	mov	sp, r7
 800aac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaca:	4770      	bx	lr

0800aacc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800aacc:	b480      	push	{r7}
 800aace:	b085      	sub	sp, #20
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	6078      	str	r0, [r7, #4]
 800aad4:	460b      	mov	r3, r1
 800aad6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	68fa      	ldr	r2, [r7, #12]
 800aae6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800aaea:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800aaee:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aaf6:	681a      	ldr	r2, [r3, #0]
 800aaf8:	78fb      	ldrb	r3, [r7, #3]
 800aafa:	011b      	lsls	r3, r3, #4
 800aafc:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800ab00:	68f9      	ldr	r1, [r7, #12]
 800ab02:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ab06:	4313      	orrs	r3, r2
 800ab08:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800ab0a:	2300      	movs	r3, #0
}
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	3714      	adds	r7, #20
 800ab10:	46bd      	mov	sp, r7
 800ab12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab16:	4770      	bx	lr

0800ab18 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800ab18:	b480      	push	{r7}
 800ab1a:	b085      	sub	sp, #20
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	68fa      	ldr	r2, [r7, #12]
 800ab2e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ab32:	f023 0303 	bic.w	r3, r3, #3
 800ab36:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab3e:	685b      	ldr	r3, [r3, #4]
 800ab40:	68fa      	ldr	r2, [r7, #12]
 800ab42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ab46:	f023 0302 	bic.w	r3, r3, #2
 800ab4a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ab4c:	2300      	movs	r3, #0
}
 800ab4e:	4618      	mov	r0, r3
 800ab50:	3714      	adds	r7, #20
 800ab52:	46bd      	mov	sp, r7
 800ab54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab58:	4770      	bx	lr

0800ab5a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800ab5a:	b480      	push	{r7}
 800ab5c:	b085      	sub	sp, #20
 800ab5e:	af00      	add	r7, sp, #0
 800ab60:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	68fa      	ldr	r2, [r7, #12]
 800ab70:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ab74:	f023 0303 	bic.w	r3, r3, #3
 800ab78:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab80:	685b      	ldr	r3, [r3, #4]
 800ab82:	68fa      	ldr	r2, [r7, #12]
 800ab84:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ab88:	f043 0302 	orr.w	r3, r3, #2
 800ab8c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ab8e:	2300      	movs	r3, #0
}
 800ab90:	4618      	mov	r0, r3
 800ab92:	3714      	adds	r7, #20
 800ab94:	46bd      	mov	sp, r7
 800ab96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab9a:	4770      	bx	lr

0800ab9c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800ab9c:	b480      	push	{r7}
 800ab9e:	b085      	sub	sp, #20
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	695b      	ldr	r3, [r3, #20]
 800aba8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	699b      	ldr	r3, [r3, #24]
 800abae:	68fa      	ldr	r2, [r7, #12]
 800abb0:	4013      	ands	r3, r2
 800abb2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800abb4:	68fb      	ldr	r3, [r7, #12]
}
 800abb6:	4618      	mov	r0, r3
 800abb8:	3714      	adds	r7, #20
 800abba:	46bd      	mov	sp, r7
 800abbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc0:	4770      	bx	lr

0800abc2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800abc2:	b480      	push	{r7}
 800abc4:	b085      	sub	sp, #20
 800abc6:	af00      	add	r7, sp, #0
 800abc8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800abd4:	699b      	ldr	r3, [r3, #24]
 800abd6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800abde:	69db      	ldr	r3, [r3, #28]
 800abe0:	68ba      	ldr	r2, [r7, #8]
 800abe2:	4013      	ands	r3, r2
 800abe4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800abe6:	68bb      	ldr	r3, [r7, #8]
 800abe8:	0c1b      	lsrs	r3, r3, #16
}
 800abea:	4618      	mov	r0, r3
 800abec:	3714      	adds	r7, #20
 800abee:	46bd      	mov	sp, r7
 800abf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf4:	4770      	bx	lr

0800abf6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800abf6:	b480      	push	{r7}
 800abf8:	b085      	sub	sp, #20
 800abfa:	af00      	add	r7, sp, #0
 800abfc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac08:	699b      	ldr	r3, [r3, #24]
 800ac0a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac12:	69db      	ldr	r3, [r3, #28]
 800ac14:	68ba      	ldr	r2, [r7, #8]
 800ac16:	4013      	ands	r3, r2
 800ac18:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800ac1a:	68bb      	ldr	r3, [r7, #8]
 800ac1c:	b29b      	uxth	r3, r3
}
 800ac1e:	4618      	mov	r0, r3
 800ac20:	3714      	adds	r7, #20
 800ac22:	46bd      	mov	sp, r7
 800ac24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac28:	4770      	bx	lr

0800ac2a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ac2a:	b480      	push	{r7}
 800ac2c:	b085      	sub	sp, #20
 800ac2e:	af00      	add	r7, sp, #0
 800ac30:	6078      	str	r0, [r7, #4]
 800ac32:	460b      	mov	r3, r1
 800ac34:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800ac3a:	78fb      	ldrb	r3, [r7, #3]
 800ac3c:	015a      	lsls	r2, r3, #5
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	4413      	add	r3, r2
 800ac42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac46:	689b      	ldr	r3, [r3, #8]
 800ac48:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac50:	695b      	ldr	r3, [r3, #20]
 800ac52:	68ba      	ldr	r2, [r7, #8]
 800ac54:	4013      	ands	r3, r2
 800ac56:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ac58:	68bb      	ldr	r3, [r7, #8]
}
 800ac5a:	4618      	mov	r0, r3
 800ac5c:	3714      	adds	r7, #20
 800ac5e:	46bd      	mov	sp, r7
 800ac60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac64:	4770      	bx	lr

0800ac66 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ac66:	b480      	push	{r7}
 800ac68:	b087      	sub	sp, #28
 800ac6a:	af00      	add	r7, sp, #0
 800ac6c:	6078      	str	r0, [r7, #4]
 800ac6e:	460b      	mov	r3, r1
 800ac70:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800ac76:	697b      	ldr	r3, [r7, #20]
 800ac78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac7c:	691b      	ldr	r3, [r3, #16]
 800ac7e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800ac80:	697b      	ldr	r3, [r7, #20]
 800ac82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac88:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800ac8a:	78fb      	ldrb	r3, [r7, #3]
 800ac8c:	f003 030f 	and.w	r3, r3, #15
 800ac90:	68fa      	ldr	r2, [r7, #12]
 800ac92:	fa22 f303 	lsr.w	r3, r2, r3
 800ac96:	01db      	lsls	r3, r3, #7
 800ac98:	b2db      	uxtb	r3, r3
 800ac9a:	693a      	ldr	r2, [r7, #16]
 800ac9c:	4313      	orrs	r3, r2
 800ac9e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800aca0:	78fb      	ldrb	r3, [r7, #3]
 800aca2:	015a      	lsls	r2, r3, #5
 800aca4:	697b      	ldr	r3, [r7, #20]
 800aca6:	4413      	add	r3, r2
 800aca8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800acac:	689b      	ldr	r3, [r3, #8]
 800acae:	693a      	ldr	r2, [r7, #16]
 800acb0:	4013      	ands	r3, r2
 800acb2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800acb4:	68bb      	ldr	r3, [r7, #8]
}
 800acb6:	4618      	mov	r0, r3
 800acb8:	371c      	adds	r7, #28
 800acba:	46bd      	mov	sp, r7
 800acbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc0:	4770      	bx	lr

0800acc2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800acc2:	b480      	push	{r7}
 800acc4:	b083      	sub	sp, #12
 800acc6:	af00      	add	r7, sp, #0
 800acc8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	695b      	ldr	r3, [r3, #20]
 800acce:	f003 0301 	and.w	r3, r3, #1
}
 800acd2:	4618      	mov	r0, r3
 800acd4:	370c      	adds	r7, #12
 800acd6:	46bd      	mov	sp, r7
 800acd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acdc:	4770      	bx	lr

0800acde <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800acde:	b480      	push	{r7}
 800ace0:	b085      	sub	sp, #20
 800ace2:	af00      	add	r7, sp, #0
 800ace4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	68fa      	ldr	r2, [r7, #12]
 800acf4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800acf8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800acfc:	f023 0307 	bic.w	r3, r3, #7
 800ad00:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad08:	685b      	ldr	r3, [r3, #4]
 800ad0a:	68fa      	ldr	r2, [r7, #12]
 800ad0c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ad10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ad14:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ad16:	2300      	movs	r3, #0
}
 800ad18:	4618      	mov	r0, r3
 800ad1a:	3714      	adds	r7, #20
 800ad1c:	46bd      	mov	sp, r7
 800ad1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad22:	4770      	bx	lr

0800ad24 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800ad24:	b480      	push	{r7}
 800ad26:	b087      	sub	sp, #28
 800ad28:	af00      	add	r7, sp, #0
 800ad2a:	60f8      	str	r0, [r7, #12]
 800ad2c:	460b      	mov	r3, r1
 800ad2e:	607a      	str	r2, [r7, #4]
 800ad30:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	333c      	adds	r3, #60	; 0x3c
 800ad3a:	3304      	adds	r3, #4
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800ad40:	693b      	ldr	r3, [r7, #16]
 800ad42:	4a26      	ldr	r2, [pc, #152]	; (800addc <USB_EP0_OutStart+0xb8>)
 800ad44:	4293      	cmp	r3, r2
 800ad46:	d90a      	bls.n	800ad5e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ad48:	697b      	ldr	r3, [r7, #20]
 800ad4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ad54:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ad58:	d101      	bne.n	800ad5e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800ad5a:	2300      	movs	r3, #0
 800ad5c:	e037      	b.n	800adce <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800ad5e:	697b      	ldr	r3, [r7, #20]
 800ad60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad64:	461a      	mov	r2, r3
 800ad66:	2300      	movs	r3, #0
 800ad68:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ad6a:	697b      	ldr	r3, [r7, #20]
 800ad6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad70:	691b      	ldr	r3, [r3, #16]
 800ad72:	697a      	ldr	r2, [r7, #20]
 800ad74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ad78:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ad7c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800ad7e:	697b      	ldr	r3, [r7, #20]
 800ad80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad84:	691b      	ldr	r3, [r3, #16]
 800ad86:	697a      	ldr	r2, [r7, #20]
 800ad88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ad8c:	f043 0318 	orr.w	r3, r3, #24
 800ad90:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800ad92:	697b      	ldr	r3, [r7, #20]
 800ad94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad98:	691b      	ldr	r3, [r3, #16]
 800ad9a:	697a      	ldr	r2, [r7, #20]
 800ad9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ada0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800ada4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800ada6:	7afb      	ldrb	r3, [r7, #11]
 800ada8:	2b01      	cmp	r3, #1
 800adaa:	d10f      	bne.n	800adcc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800adac:	697b      	ldr	r3, [r7, #20]
 800adae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800adb2:	461a      	mov	r2, r3
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800adb8:	697b      	ldr	r3, [r7, #20]
 800adba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	697a      	ldr	r2, [r7, #20]
 800adc2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800adc6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800adca:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800adcc:	2300      	movs	r3, #0
}
 800adce:	4618      	mov	r0, r3
 800add0:	371c      	adds	r7, #28
 800add2:	46bd      	mov	sp, r7
 800add4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add8:	4770      	bx	lr
 800adda:	bf00      	nop
 800addc:	4f54300a 	.word	0x4f54300a

0800ade0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ade0:	b480      	push	{r7}
 800ade2:	b085      	sub	sp, #20
 800ade4:	af00      	add	r7, sp, #0
 800ade6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ade8:	2300      	movs	r3, #0
 800adea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	3301      	adds	r3, #1
 800adf0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	4a13      	ldr	r2, [pc, #76]	; (800ae44 <USB_CoreReset+0x64>)
 800adf6:	4293      	cmp	r3, r2
 800adf8:	d901      	bls.n	800adfe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800adfa:	2303      	movs	r3, #3
 800adfc:	e01b      	b.n	800ae36 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	691b      	ldr	r3, [r3, #16]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	daf2      	bge.n	800adec <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800ae06:	2300      	movs	r3, #0
 800ae08:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	691b      	ldr	r3, [r3, #16]
 800ae0e:	f043 0201 	orr.w	r2, r3, #1
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	3301      	adds	r3, #1
 800ae1a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	4a09      	ldr	r2, [pc, #36]	; (800ae44 <USB_CoreReset+0x64>)
 800ae20:	4293      	cmp	r3, r2
 800ae22:	d901      	bls.n	800ae28 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800ae24:	2303      	movs	r3, #3
 800ae26:	e006      	b.n	800ae36 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	691b      	ldr	r3, [r3, #16]
 800ae2c:	f003 0301 	and.w	r3, r3, #1
 800ae30:	2b01      	cmp	r3, #1
 800ae32:	d0f0      	beq.n	800ae16 <USB_CoreReset+0x36>

  return HAL_OK;
 800ae34:	2300      	movs	r3, #0
}
 800ae36:	4618      	mov	r0, r3
 800ae38:	3714      	adds	r7, #20
 800ae3a:	46bd      	mov	sp, r7
 800ae3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae40:	4770      	bx	lr
 800ae42:	bf00      	nop
 800ae44:	00030d40 	.word	0x00030d40

0800ae48 <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ae48:	b580      	push	{r7, lr}
 800ae4a:	b084      	sub	sp, #16
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	6078      	str	r0, [r7, #4]
 800ae50:	460b      	mov	r3, r1
 800ae52:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 800ae54:	2018      	movs	r0, #24
 800ae56:	f002 fa99 	bl	800d38c <USBD_static_malloc>
 800ae5a:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d109      	bne.n	800ae76 <USBD_CUSTOM_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	32b0      	adds	r2, #176	; 0xb0
 800ae6c:	2100      	movs	r1, #0
 800ae6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800ae72:	2302      	movs	r3, #2
 800ae74:	e08a      	b.n	800af8c <USBD_CUSTOM_HID_Init+0x144>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	32b0      	adds	r2, #176	; 0xb0
 800ae80:	68f9      	ldr	r1, [r7, #12]
 800ae82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	32b0      	adds	r2, #176	; 0xb0
 800ae90:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	7c1b      	ldrb	r3, [r3, #16]
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d11b      	bne.n	800aeda <USBD_CUSTOM_HID_Init+0x92>
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 800aea2:	4b3c      	ldr	r3, [pc, #240]	; (800af94 <USBD_CUSTOM_HID_Init+0x14c>)
 800aea4:	781b      	ldrb	r3, [r3, #0]
 800aea6:	f003 020f 	and.w	r2, r3, #15
 800aeaa:	6879      	ldr	r1, [r7, #4]
 800aeac:	4613      	mov	r3, r2
 800aeae:	009b      	lsls	r3, r3, #2
 800aeb0:	4413      	add	r3, r2
 800aeb2:	009b      	lsls	r3, r3, #2
 800aeb4:	440b      	add	r3, r1
 800aeb6:	3326      	adds	r3, #38	; 0x26
 800aeb8:	2205      	movs	r2, #5
 800aeba:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 800aebc:	4b36      	ldr	r3, [pc, #216]	; (800af98 <USBD_CUSTOM_HID_Init+0x150>)
 800aebe:	781b      	ldrb	r3, [r3, #0]
 800aec0:	f003 020f 	and.w	r2, r3, #15
 800aec4:	6879      	ldr	r1, [r7, #4]
 800aec6:	4613      	mov	r3, r2
 800aec8:	009b      	lsls	r3, r3, #2
 800aeca:	4413      	add	r3, r2
 800aecc:	009b      	lsls	r3, r3, #2
 800aece:	440b      	add	r3, r1
 800aed0:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 800aed4:	2205      	movs	r2, #5
 800aed6:	801a      	strh	r2, [r3, #0]
 800aed8:	e01a      	b.n	800af10 <USBD_CUSTOM_HID_Init+0xc8>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 800aeda:	4b2e      	ldr	r3, [pc, #184]	; (800af94 <USBD_CUSTOM_HID_Init+0x14c>)
 800aedc:	781b      	ldrb	r3, [r3, #0]
 800aede:	f003 020f 	and.w	r2, r3, #15
 800aee2:	6879      	ldr	r1, [r7, #4]
 800aee4:	4613      	mov	r3, r2
 800aee6:	009b      	lsls	r3, r3, #2
 800aee8:	4413      	add	r3, r2
 800aeea:	009b      	lsls	r3, r3, #2
 800aeec:	440b      	add	r3, r1
 800aeee:	3326      	adds	r3, #38	; 0x26
 800aef0:	2205      	movs	r2, #5
 800aef2:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 800aef4:	4b28      	ldr	r3, [pc, #160]	; (800af98 <USBD_CUSTOM_HID_Init+0x150>)
 800aef6:	781b      	ldrb	r3, [r3, #0]
 800aef8:	f003 020f 	and.w	r2, r3, #15
 800aefc:	6879      	ldr	r1, [r7, #4]
 800aefe:	4613      	mov	r3, r2
 800af00:	009b      	lsls	r3, r3, #2
 800af02:	4413      	add	r3, r2
 800af04:	009b      	lsls	r3, r3, #2
 800af06:	440b      	add	r3, r1
 800af08:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 800af0c:	2205      	movs	r2, #5
 800af0e:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDInEpAdd, USBD_EP_TYPE_INTR,
 800af10:	4b20      	ldr	r3, [pc, #128]	; (800af94 <USBD_CUSTOM_HID_Init+0x14c>)
 800af12:	7819      	ldrb	r1, [r3, #0]
 800af14:	2302      	movs	r3, #2
 800af16:	2203      	movs	r2, #3
 800af18:	6878      	ldr	r0, [r7, #4]
 800af1a:	f002 f926 	bl	800d16a <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 1U;
 800af1e:	4b1d      	ldr	r3, [pc, #116]	; (800af94 <USBD_CUSTOM_HID_Init+0x14c>)
 800af20:	781b      	ldrb	r3, [r3, #0]
 800af22:	f003 020f 	and.w	r2, r3, #15
 800af26:	6879      	ldr	r1, [r7, #4]
 800af28:	4613      	mov	r3, r2
 800af2a:	009b      	lsls	r3, r3, #2
 800af2c:	4413      	add	r3, r2
 800af2e:	009b      	lsls	r3, r3, #2
 800af30:	440b      	add	r3, r1
 800af32:	3324      	adds	r3, #36	; 0x24
 800af34:	2201      	movs	r2, #1
 800af36:	801a      	strh	r2, [r3, #0]

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDOutEpAdd, USBD_EP_TYPE_INTR,
 800af38:	4b17      	ldr	r3, [pc, #92]	; (800af98 <USBD_CUSTOM_HID_Init+0x150>)
 800af3a:	7819      	ldrb	r1, [r3, #0]
 800af3c:	2302      	movs	r3, #2
 800af3e:	2203      	movs	r2, #3
 800af40:	6878      	ldr	r0, [r7, #4]
 800af42:	f002 f912 	bl	800d16a <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 1U;
 800af46:	4b14      	ldr	r3, [pc, #80]	; (800af98 <USBD_CUSTOM_HID_Init+0x150>)
 800af48:	781b      	ldrb	r3, [r3, #0]
 800af4a:	f003 020f 	and.w	r2, r3, #15
 800af4e:	6879      	ldr	r1, [r7, #4]
 800af50:	4613      	mov	r3, r2
 800af52:	009b      	lsls	r3, r3, #2
 800af54:	4413      	add	r3, r2
 800af56:	009b      	lsls	r3, r3, #2
 800af58:	440b      	add	r3, r1
 800af5a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800af5e:	2201      	movs	r2, #1
 800af60:	801a      	strh	r2, [r3, #0]

  hhid->state = CUSTOM_HID_IDLE;
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	2200      	movs	r2, #0
 800af66:	751a      	strb	r2, [r3, #20]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800af6e:	687a      	ldr	r2, [r7, #4]
 800af70:	33b0      	adds	r3, #176	; 0xb0
 800af72:	009b      	lsls	r3, r3, #2
 800af74:	4413      	add	r3, r2
 800af76:	685b      	ldr	r3, [r3, #4]
 800af78:	685b      	ldr	r3, [r3, #4]
 800af7a:	4798      	blx	r3

  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 800af7c:	4b06      	ldr	r3, [pc, #24]	; (800af98 <USBD_CUSTOM_HID_Init+0x150>)
 800af7e:	7819      	ldrb	r1, [r3, #0]
 800af80:	68fa      	ldr	r2, [r7, #12]
 800af82:	2302      	movs	r3, #2
 800af84:	6878      	ldr	r0, [r7, #4]
 800af86:	f002 f9df 	bl	800d348 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 800af8a:	2300      	movs	r3, #0
}
 800af8c:	4618      	mov	r0, r3
 800af8e:	3710      	adds	r7, #16
 800af90:	46bd      	mov	sp, r7
 800af92:	bd80      	pop	{r7, pc}
 800af94:	200000b6 	.word	0x200000b6
 800af98:	200000b7 	.word	0x200000b7

0800af9c <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800af9c:	b580      	push	{r7, lr}
 800af9e:	b082      	sub	sp, #8
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	6078      	str	r0, [r7, #4]
 800afa4:	460b      	mov	r3, r1
 800afa6:	70fb      	strb	r3, [r7, #3]
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDInEpAdd);
 800afa8:	4b37      	ldr	r3, [pc, #220]	; (800b088 <USBD_CUSTOM_HID_DeInit+0xec>)
 800afaa:	781b      	ldrb	r3, [r3, #0]
 800afac:	4619      	mov	r1, r3
 800afae:	6878      	ldr	r0, [r7, #4]
 800afb0:	f002 f901 	bl	800d1b6 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 0U;
 800afb4:	4b34      	ldr	r3, [pc, #208]	; (800b088 <USBD_CUSTOM_HID_DeInit+0xec>)
 800afb6:	781b      	ldrb	r3, [r3, #0]
 800afb8:	f003 020f 	and.w	r2, r3, #15
 800afbc:	6879      	ldr	r1, [r7, #4]
 800afbe:	4613      	mov	r3, r2
 800afc0:	009b      	lsls	r3, r3, #2
 800afc2:	4413      	add	r3, r2
 800afc4:	009b      	lsls	r3, r3, #2
 800afc6:	440b      	add	r3, r1
 800afc8:	3324      	adds	r3, #36	; 0x24
 800afca:	2200      	movs	r2, #0
 800afcc:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = 0U;
 800afce:	4b2e      	ldr	r3, [pc, #184]	; (800b088 <USBD_CUSTOM_HID_DeInit+0xec>)
 800afd0:	781b      	ldrb	r3, [r3, #0]
 800afd2:	f003 020f 	and.w	r2, r3, #15
 800afd6:	6879      	ldr	r1, [r7, #4]
 800afd8:	4613      	mov	r3, r2
 800afda:	009b      	lsls	r3, r3, #2
 800afdc:	4413      	add	r3, r2
 800afde:	009b      	lsls	r3, r3, #2
 800afe0:	440b      	add	r3, r1
 800afe2:	3326      	adds	r3, #38	; 0x26
 800afe4:	2200      	movs	r2, #0
 800afe6:	801a      	strh	r2, [r3, #0]

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDOutEpAdd);
 800afe8:	4b28      	ldr	r3, [pc, #160]	; (800b08c <USBD_CUSTOM_HID_DeInit+0xf0>)
 800afea:	781b      	ldrb	r3, [r3, #0]
 800afec:	4619      	mov	r1, r3
 800afee:	6878      	ldr	r0, [r7, #4]
 800aff0:	f002 f8e1 	bl	800d1b6 <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 0U;
 800aff4:	4b25      	ldr	r3, [pc, #148]	; (800b08c <USBD_CUSTOM_HID_DeInit+0xf0>)
 800aff6:	781b      	ldrb	r3, [r3, #0]
 800aff8:	f003 020f 	and.w	r2, r3, #15
 800affc:	6879      	ldr	r1, [r7, #4]
 800affe:	4613      	mov	r3, r2
 800b000:	009b      	lsls	r3, r3, #2
 800b002:	4413      	add	r3, r2
 800b004:	009b      	lsls	r3, r3, #2
 800b006:	440b      	add	r3, r1
 800b008:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b00c:	2200      	movs	r2, #0
 800b00e:	801a      	strh	r2, [r3, #0]
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = 0U;
 800b010:	4b1e      	ldr	r3, [pc, #120]	; (800b08c <USBD_CUSTOM_HID_DeInit+0xf0>)
 800b012:	781b      	ldrb	r3, [r3, #0]
 800b014:	f003 020f 	and.w	r2, r3, #15
 800b018:	6879      	ldr	r1, [r7, #4]
 800b01a:	4613      	mov	r3, r2
 800b01c:	009b      	lsls	r3, r3, #2
 800b01e:	4413      	add	r3, r2
 800b020:	009b      	lsls	r3, r3, #2
 800b022:	440b      	add	r3, r1
 800b024:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 800b028:	2200      	movs	r2, #0
 800b02a:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	32b0      	adds	r2, #176	; 0xb0
 800b036:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d01f      	beq.n	800b07e <USBD_CUSTOM_HID_DeInit+0xe2>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b044:	687a      	ldr	r2, [r7, #4]
 800b046:	33b0      	adds	r3, #176	; 0xb0
 800b048:	009b      	lsls	r3, r3, #2
 800b04a:	4413      	add	r3, r2
 800b04c:	685b      	ldr	r3, [r3, #4]
 800b04e:	689b      	ldr	r3, [r3, #8]
 800b050:	4798      	blx	r3
    USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	32b0      	adds	r2, #176	; 0xb0
 800b05c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b060:	4618      	mov	r0, r3
 800b062:	f002 f9a1 	bl	800d3a8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	32b0      	adds	r2, #176	; 0xb0
 800b070:	2100      	movs	r1, #0
 800b072:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	2200      	movs	r2, #0
 800b07a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800b07e:	2300      	movs	r3, #0
}
 800b080:	4618      	mov	r0, r3
 800b082:	3708      	adds	r7, #8
 800b084:	46bd      	mov	sp, r7
 800b086:	bd80      	pop	{r7, pc}
 800b088:	200000b6 	.word	0x200000b6
 800b08c:	200000b7 	.word	0x200000b7

0800b090 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 800b090:	b580      	push	{r7, lr}
 800b092:	b088      	sub	sp, #32
 800b094:	af00      	add	r7, sp, #0
 800b096:	6078      	str	r0, [r7, #4]
 800b098:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	32b0      	adds	r2, #176	; 0xb0
 800b0a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0a8:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 800b0aa:	2300      	movs	r3, #0
 800b0ac:	83fb      	strh	r3, [r7, #30]
  uint8_t  *pbuf = NULL;
 800b0ae:	2300      	movs	r3, #0
 800b0b0:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 800b0b2:	2300      	movs	r3, #0
 800b0b4:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 800b0b6:	2300      	movs	r3, #0
 800b0b8:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
 800b0ba:	693b      	ldr	r3, [r7, #16]
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d101      	bne.n	800b0c4 <USBD_CUSTOM_HID_Setup+0x34>
  {
    return (uint8_t)USBD_FAIL;
 800b0c0:	2303      	movs	r3, #3
 800b0c2:	e0f8      	b.n	800b2b6 <USBD_CUSTOM_HID_Setup+0x226>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b0c4:	683b      	ldr	r3, [r7, #0]
 800b0c6:	781b      	ldrb	r3, [r3, #0]
 800b0c8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d056      	beq.n	800b17e <USBD_CUSTOM_HID_Setup+0xee>
 800b0d0:	2b20      	cmp	r3, #32
 800b0d2:	f040 80e8 	bne.w	800b2a6 <USBD_CUSTOM_HID_Setup+0x216>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 800b0d6:	683b      	ldr	r3, [r7, #0]
 800b0d8:	785b      	ldrb	r3, [r3, #1]
 800b0da:	3b02      	subs	r3, #2
 800b0dc:	2b09      	cmp	r3, #9
 800b0de:	d846      	bhi.n	800b16e <USBD_CUSTOM_HID_Setup+0xde>
 800b0e0:	a201      	add	r2, pc, #4	; (adr r2, 800b0e8 <USBD_CUSTOM_HID_Setup+0x58>)
 800b0e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0e6:	bf00      	nop
 800b0e8:	0800b141 	.word	0x0800b141
 800b0ec:	0800b11f 	.word	0x0800b11f
 800b0f0:	0800b16f 	.word	0x0800b16f
 800b0f4:	0800b16f 	.word	0x0800b16f
 800b0f8:	0800b16f 	.word	0x0800b16f
 800b0fc:	0800b16f 	.word	0x0800b16f
 800b100:	0800b16f 	.word	0x0800b16f
 800b104:	0800b151 	.word	0x0800b151
 800b108:	0800b12f 	.word	0x0800b12f
 800b10c:	0800b111 	.word	0x0800b111
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 800b110:	683b      	ldr	r3, [r7, #0]
 800b112:	885b      	ldrh	r3, [r3, #2]
 800b114:	b2db      	uxtb	r3, r3
 800b116:	461a      	mov	r2, r3
 800b118:	693b      	ldr	r3, [r7, #16]
 800b11a:	605a      	str	r2, [r3, #4]
          break;
 800b11c:	e02e      	b.n	800b17c <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 800b11e:	693b      	ldr	r3, [r7, #16]
 800b120:	3304      	adds	r3, #4
 800b122:	2201      	movs	r2, #1
 800b124:	4619      	mov	r1, r3
 800b126:	6878      	ldr	r0, [r7, #4]
 800b128:	f001 fc94 	bl	800ca54 <USBD_CtlSendData>
          break;
 800b12c:	e026      	b.n	800b17c <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800b12e:	683b      	ldr	r3, [r7, #0]
 800b130:	885b      	ldrh	r3, [r3, #2]
 800b132:	0a1b      	lsrs	r3, r3, #8
 800b134:	b29b      	uxth	r3, r3
 800b136:	b2db      	uxtb	r3, r3
 800b138:	461a      	mov	r2, r3
 800b13a:	693b      	ldr	r3, [r7, #16]
 800b13c:	609a      	str	r2, [r3, #8]
          break;
 800b13e:	e01d      	b.n	800b17c <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 800b140:	693b      	ldr	r3, [r7, #16]
 800b142:	3308      	adds	r3, #8
 800b144:	2201      	movs	r2, #1
 800b146:	4619      	mov	r1, r3
 800b148:	6878      	ldr	r0, [r7, #4]
 800b14a:	f001 fc83 	bl	800ca54 <USBD_CtlSendData>
          break;
 800b14e:	e015      	b.n	800b17c <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_SET_REPORT:
          hhid->IsReportAvailable = 1U;
 800b150:	693b      	ldr	r3, [r7, #16]
 800b152:	2201      	movs	r2, #1
 800b154:	611a      	str	r2, [r3, #16]
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 800b156:	6939      	ldr	r1, [r7, #16]
                                  MIN(req->wLength, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE));
 800b158:	683b      	ldr	r3, [r7, #0]
 800b15a:	88db      	ldrh	r3, [r3, #6]
 800b15c:	2b02      	cmp	r3, #2
 800b15e:	bf28      	it	cs
 800b160:	2302      	movcs	r3, #2
 800b162:	b29b      	uxth	r3, r3
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 800b164:	461a      	mov	r2, r3
 800b166:	6878      	ldr	r0, [r7, #4]
 800b168:	f001 fca0 	bl	800caac <USBD_CtlPrepareRx>
          break;
 800b16c:	e006      	b.n	800b17c <USBD_CUSTOM_HID_Setup+0xec>

        default:
          USBD_CtlError(pdev, req);
 800b16e:	6839      	ldr	r1, [r7, #0]
 800b170:	6878      	ldr	r0, [r7, #4]
 800b172:	f001 fbfe 	bl	800c972 <USBD_CtlError>
          ret = USBD_FAIL;
 800b176:	2303      	movs	r3, #3
 800b178:	75fb      	strb	r3, [r7, #23]
          break;
 800b17a:	bf00      	nop
      }
      break;
 800b17c:	e09a      	b.n	800b2b4 <USBD_CUSTOM_HID_Setup+0x224>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b17e:	683b      	ldr	r3, [r7, #0]
 800b180:	785b      	ldrb	r3, [r3, #1]
 800b182:	2b0b      	cmp	r3, #11
 800b184:	f200 8086 	bhi.w	800b294 <USBD_CUSTOM_HID_Setup+0x204>
 800b188:	a201      	add	r2, pc, #4	; (adr r2, 800b190 <USBD_CUSTOM_HID_Setup+0x100>)
 800b18a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b18e:	bf00      	nop
 800b190:	0800b1c1 	.word	0x0800b1c1
 800b194:	0800b2a3 	.word	0x0800b2a3
 800b198:	0800b295 	.word	0x0800b295
 800b19c:	0800b295 	.word	0x0800b295
 800b1a0:	0800b295 	.word	0x0800b295
 800b1a4:	0800b295 	.word	0x0800b295
 800b1a8:	0800b1eb 	.word	0x0800b1eb
 800b1ac:	0800b295 	.word	0x0800b295
 800b1b0:	0800b295 	.word	0x0800b295
 800b1b4:	0800b295 	.word	0x0800b295
 800b1b8:	0800b243 	.word	0x0800b243
 800b1bc:	0800b26d 	.word	0x0800b26d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b1c6:	b2db      	uxtb	r3, r3
 800b1c8:	2b03      	cmp	r3, #3
 800b1ca:	d107      	bne.n	800b1dc <USBD_CUSTOM_HID_Setup+0x14c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b1cc:	f107 030e 	add.w	r3, r7, #14
 800b1d0:	2202      	movs	r2, #2
 800b1d2:	4619      	mov	r1, r3
 800b1d4:	6878      	ldr	r0, [r7, #4]
 800b1d6:	f001 fc3d 	bl	800ca54 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b1da:	e063      	b.n	800b2a4 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 800b1dc:	6839      	ldr	r1, [r7, #0]
 800b1de:	6878      	ldr	r0, [r7, #4]
 800b1e0:	f001 fbc7 	bl	800c972 <USBD_CtlError>
            ret = USBD_FAIL;
 800b1e4:	2303      	movs	r3, #3
 800b1e6:	75fb      	strb	r3, [r7, #23]
          break;
 800b1e8:	e05c      	b.n	800b2a4 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 800b1ea:	683b      	ldr	r3, [r7, #0]
 800b1ec:	885b      	ldrh	r3, [r3, #2]
 800b1ee:	0a1b      	lsrs	r3, r3, #8
 800b1f0:	b29b      	uxth	r3, r3
 800b1f2:	2b22      	cmp	r3, #34	; 0x22
 800b1f4:	d110      	bne.n	800b218 <USBD_CUSTOM_HID_Setup+0x188>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 800b1f6:	683b      	ldr	r3, [r7, #0]
 800b1f8:	88db      	ldrh	r3, [r3, #6]
 800b1fa:	2b02      	cmp	r3, #2
 800b1fc:	bf28      	it	cs
 800b1fe:	2302      	movcs	r3, #2
 800b200:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->pReport;
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b208:	687a      	ldr	r2, [r7, #4]
 800b20a:	33b0      	adds	r3, #176	; 0xb0
 800b20c:	009b      	lsls	r3, r3, #2
 800b20e:	4413      	add	r3, r2
 800b210:	685b      	ldr	r3, [r3, #4]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	61bb      	str	r3, [r7, #24]
 800b216:	e00d      	b.n	800b234 <USBD_CUSTOM_HID_Setup+0x1a4>
          }
          else
          {
            if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 800b218:	683b      	ldr	r3, [r7, #0]
 800b21a:	885b      	ldrh	r3, [r3, #2]
 800b21c:	0a1b      	lsrs	r3, r3, #8
 800b21e:	b29b      	uxth	r3, r3
 800b220:	2b21      	cmp	r3, #33	; 0x21
 800b222:	d107      	bne.n	800b234 <USBD_CUSTOM_HID_Setup+0x1a4>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 800b224:	4b26      	ldr	r3, [pc, #152]	; (800b2c0 <USBD_CUSTOM_HID_Setup+0x230>)
 800b226:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 800b228:	683b      	ldr	r3, [r7, #0]
 800b22a:	88db      	ldrh	r3, [r3, #6]
 800b22c:	2b09      	cmp	r3, #9
 800b22e:	bf28      	it	cs
 800b230:	2309      	movcs	r3, #9
 800b232:	83fb      	strh	r3, [r7, #30]
            }
          }

          (void)USBD_CtlSendData(pdev, pbuf, len);
 800b234:	8bfb      	ldrh	r3, [r7, #30]
 800b236:	461a      	mov	r2, r3
 800b238:	69b9      	ldr	r1, [r7, #24]
 800b23a:	6878      	ldr	r0, [r7, #4]
 800b23c:	f001 fc0a 	bl	800ca54 <USBD_CtlSendData>
          break;
 800b240:	e030      	b.n	800b2a4 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b248:	b2db      	uxtb	r3, r3
 800b24a:	2b03      	cmp	r3, #3
 800b24c:	d107      	bne.n	800b25e <USBD_CUSTOM_HID_Setup+0x1ce>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 800b24e:	693b      	ldr	r3, [r7, #16]
 800b250:	330c      	adds	r3, #12
 800b252:	2201      	movs	r2, #1
 800b254:	4619      	mov	r1, r3
 800b256:	6878      	ldr	r0, [r7, #4]
 800b258:	f001 fbfc 	bl	800ca54 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b25c:	e022      	b.n	800b2a4 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 800b25e:	6839      	ldr	r1, [r7, #0]
 800b260:	6878      	ldr	r0, [r7, #4]
 800b262:	f001 fb86 	bl	800c972 <USBD_CtlError>
            ret = USBD_FAIL;
 800b266:	2303      	movs	r3, #3
 800b268:	75fb      	strb	r3, [r7, #23]
          break;
 800b26a:	e01b      	b.n	800b2a4 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b272:	b2db      	uxtb	r3, r3
 800b274:	2b03      	cmp	r3, #3
 800b276:	d106      	bne.n	800b286 <USBD_CUSTOM_HID_Setup+0x1f6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 800b278:	683b      	ldr	r3, [r7, #0]
 800b27a:	885b      	ldrh	r3, [r3, #2]
 800b27c:	b2db      	uxtb	r3, r3
 800b27e:	461a      	mov	r2, r3
 800b280:	693b      	ldr	r3, [r7, #16]
 800b282:	60da      	str	r2, [r3, #12]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b284:	e00e      	b.n	800b2a4 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 800b286:	6839      	ldr	r1, [r7, #0]
 800b288:	6878      	ldr	r0, [r7, #4]
 800b28a:	f001 fb72 	bl	800c972 <USBD_CtlError>
            ret = USBD_FAIL;
 800b28e:	2303      	movs	r3, #3
 800b290:	75fb      	strb	r3, [r7, #23]
          break;
 800b292:	e007      	b.n	800b2a4 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800b294:	6839      	ldr	r1, [r7, #0]
 800b296:	6878      	ldr	r0, [r7, #4]
 800b298:	f001 fb6b 	bl	800c972 <USBD_CtlError>
          ret = USBD_FAIL;
 800b29c:	2303      	movs	r3, #3
 800b29e:	75fb      	strb	r3, [r7, #23]
          break;
 800b2a0:	e000      	b.n	800b2a4 <USBD_CUSTOM_HID_Setup+0x214>
          break;
 800b2a2:	bf00      	nop
      }
      break;
 800b2a4:	e006      	b.n	800b2b4 <USBD_CUSTOM_HID_Setup+0x224>

    default:
      USBD_CtlError(pdev, req);
 800b2a6:	6839      	ldr	r1, [r7, #0]
 800b2a8:	6878      	ldr	r0, [r7, #4]
 800b2aa:	f001 fb62 	bl	800c972 <USBD_CtlError>
      ret = USBD_FAIL;
 800b2ae:	2303      	movs	r3, #3
 800b2b0:	75fb      	strb	r3, [r7, #23]
      break;
 800b2b2:	bf00      	nop
  }
  return (uint8_t)ret;
 800b2b4:	7dfb      	ldrb	r3, [r7, #23]
}
 800b2b6:	4618      	mov	r0, r3
 800b2b8:	3720      	adds	r7, #32
 800b2ba:	46bd      	mov	sp, r7
 800b2bc:	bd80      	pop	{r7, pc}
 800b2be:	bf00      	nop
 800b2c0:	200000a0 	.word	0x200000a0

0800b2c4 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 800b2c4:	b580      	push	{r7, lr}
 800b2c6:	b084      	sub	sp, #16
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 800b2cc:	2181      	movs	r1, #129	; 0x81
 800b2ce:	4815      	ldr	r0, [pc, #84]	; (800b324 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 800b2d0:	f000 fd17 	bl	800bd02 <USBD_GetEpDesc>
 800b2d4:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 800b2d6:	2101      	movs	r1, #1
 800b2d8:	4812      	ldr	r0, [pc, #72]	; (800b324 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 800b2da:	f000 fd12 	bl	800bd02 <USBD_GetEpDesc>
 800b2de:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d009      	beq.n	800b2fa <USBD_CUSTOM_HID_GetFSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	2200      	movs	r2, #0
 800b2ea:	f042 0202 	orr.w	r2, r2, #2
 800b2ee:	711a      	strb	r2, [r3, #4]
 800b2f0:	2200      	movs	r2, #0
 800b2f2:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	2205      	movs	r2, #5
 800b2f8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b2fa:	68bb      	ldr	r3, [r7, #8]
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d009      	beq.n	800b314 <USBD_CUSTOM_HID_GetFSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 800b300:	68bb      	ldr	r3, [r7, #8]
 800b302:	2200      	movs	r2, #0
 800b304:	f042 0202 	orr.w	r2, r2, #2
 800b308:	711a      	strb	r2, [r3, #4]
 800b30a:	2200      	movs	r2, #0
 800b30c:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 800b30e:	68bb      	ldr	r3, [r7, #8]
 800b310:	2205      	movs	r2, #5
 800b312:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	2229      	movs	r2, #41	; 0x29
 800b318:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 800b31a:	4b02      	ldr	r3, [pc, #8]	; (800b324 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
}
 800b31c:	4618      	mov	r0, r3
 800b31e:	3710      	adds	r7, #16
 800b320:	46bd      	mov	sp, r7
 800b322:	bd80      	pop	{r7, pc}
 800b324:	20000074 	.word	0x20000074

0800b328 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 800b328:	b580      	push	{r7, lr}
 800b32a:	b084      	sub	sp, #16
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 800b330:	2181      	movs	r1, #129	; 0x81
 800b332:	4815      	ldr	r0, [pc, #84]	; (800b388 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 800b334:	f000 fce5 	bl	800bd02 <USBD_GetEpDesc>
 800b338:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 800b33a:	2101      	movs	r1, #1
 800b33c:	4812      	ldr	r0, [pc, #72]	; (800b388 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 800b33e:	f000 fce0 	bl	800bd02 <USBD_GetEpDesc>
 800b342:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	2b00      	cmp	r3, #0
 800b348:	d009      	beq.n	800b35e <USBD_CUSTOM_HID_GetHSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	2200      	movs	r2, #0
 800b34e:	f042 0202 	orr.w	r2, r2, #2
 800b352:	711a      	strb	r2, [r3, #4]
 800b354:	2200      	movs	r2, #0
 800b356:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	2205      	movs	r2, #5
 800b35c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b35e:	68bb      	ldr	r3, [r7, #8]
 800b360:	2b00      	cmp	r3, #0
 800b362:	d009      	beq.n	800b378 <USBD_CUSTOM_HID_GetHSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 800b364:	68bb      	ldr	r3, [r7, #8]
 800b366:	2200      	movs	r2, #0
 800b368:	f042 0202 	orr.w	r2, r2, #2
 800b36c:	711a      	strb	r2, [r3, #4]
 800b36e:	2200      	movs	r2, #0
 800b370:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 800b372:	68bb      	ldr	r3, [r7, #8]
 800b374:	2205      	movs	r2, #5
 800b376:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	2229      	movs	r2, #41	; 0x29
 800b37c:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 800b37e:	4b02      	ldr	r3, [pc, #8]	; (800b388 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
}
 800b380:	4618      	mov	r0, r3
 800b382:	3710      	adds	r7, #16
 800b384:	46bd      	mov	sp, r7
 800b386:	bd80      	pop	{r7, pc}
 800b388:	20000074 	.word	0x20000074

0800b38c <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b38c:	b580      	push	{r7, lr}
 800b38e:	b084      	sub	sp, #16
 800b390:	af00      	add	r7, sp, #0
 800b392:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 800b394:	2181      	movs	r1, #129	; 0x81
 800b396:	4815      	ldr	r0, [pc, #84]	; (800b3ec <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 800b398:	f000 fcb3 	bl	800bd02 <USBD_GetEpDesc>
 800b39c:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 800b39e:	2101      	movs	r1, #1
 800b3a0:	4812      	ldr	r0, [pc, #72]	; (800b3ec <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 800b3a2:	f000 fcae 	bl	800bd02 <USBD_GetEpDesc>
 800b3a6:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d009      	beq.n	800b3c2 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	2200      	movs	r2, #0
 800b3b2:	f042 0202 	orr.w	r2, r2, #2
 800b3b6:	711a      	strb	r2, [r3, #4]
 800b3b8:	2200      	movs	r2, #0
 800b3ba:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	2205      	movs	r2, #5
 800b3c0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b3c2:	68bb      	ldr	r3, [r7, #8]
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d009      	beq.n	800b3dc <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 800b3c8:	68bb      	ldr	r3, [r7, #8]
 800b3ca:	2200      	movs	r2, #0
 800b3cc:	f042 0202 	orr.w	r2, r2, #2
 800b3d0:	711a      	strb	r2, [r3, #4]
 800b3d2:	2200      	movs	r2, #0
 800b3d4:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 800b3d6:	68bb      	ldr	r3, [r7, #8]
 800b3d8:	2205      	movs	r2, #5
 800b3da:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	2229      	movs	r2, #41	; 0x29
 800b3e0:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 800b3e2:	4b02      	ldr	r3, [pc, #8]	; (800b3ec <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
}
 800b3e4:	4618      	mov	r0, r3
 800b3e6:	3710      	adds	r7, #16
 800b3e8:	46bd      	mov	sp, r7
 800b3ea:	bd80      	pop	{r7, pc}
 800b3ec:	20000074 	.word	0x20000074

0800b3f0 <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b3f0:	b480      	push	{r7}
 800b3f2:	b083      	sub	sp, #12
 800b3f4:	af00      	add	r7, sp, #0
 800b3f6:	6078      	str	r0, [r7, #4]
 800b3f8:	460b      	mov	r3, r1
 800b3fa:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = CUSTOM_HID_IDLE;
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	32b0      	adds	r2, #176	; 0xb0
 800b406:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b40a:	2200      	movs	r2, #0
 800b40c:	751a      	strb	r2, [r3, #20]

  return (uint8_t)USBD_OK;
 800b40e:	2300      	movs	r3, #0
}
 800b410:	4618      	mov	r0, r3
 800b412:	370c      	adds	r7, #12
 800b414:	46bd      	mov	sp, r7
 800b416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b41a:	4770      	bx	lr

0800b41c <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b41c:	b580      	push	{r7, lr}
 800b41e:	b084      	sub	sp, #16
 800b420:	af00      	add	r7, sp, #0
 800b422:	6078      	str	r0, [r7, #4]
 800b424:	460b      	mov	r3, r1
 800b426:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	32b0      	adds	r2, #176	; 0xb0
 800b432:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b436:	2b00      	cmp	r3, #0
 800b438:	d101      	bne.n	800b43e <USBD_CUSTOM_HID_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b43a:	2303      	movs	r3, #3
 800b43c:	e017      	b.n	800b46e <USBD_CUSTOM_HID_DataOut+0x52>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	32b0      	adds	r2, #176	; 0xb0
 800b448:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b44c:	60fb      	str	r3, [r7, #12]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b454:	687a      	ldr	r2, [r7, #4]
 800b456:	33b0      	adds	r3, #176	; 0xb0
 800b458:	009b      	lsls	r3, r3, #2
 800b45a:	4413      	add	r3, r2
 800b45c:	685b      	ldr	r3, [r3, #4]
 800b45e:	68db      	ldr	r3, [r3, #12]
 800b460:	68fa      	ldr	r2, [r7, #12]
 800b462:	7810      	ldrb	r0, [r2, #0]
 800b464:	68fa      	ldr	r2, [r7, #12]
 800b466:	7852      	ldrb	r2, [r2, #1]
 800b468:	4611      	mov	r1, r2
 800b46a:	4798      	blx	r3
                                                                           hhid->Report_buf[1]);

  return (uint8_t)USBD_OK;
 800b46c:	2300      	movs	r3, #0
}
 800b46e:	4618      	mov	r0, r3
 800b470:	3710      	adds	r7, #16
 800b472:	46bd      	mov	sp, r7
 800b474:	bd80      	pop	{r7, pc}
	...

0800b478 <USBD_CUSTOM_HID_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b478:	b580      	push	{r7, lr}
 800b47a:	b084      	sub	sp, #16
 800b47c:	af00      	add	r7, sp, #0
 800b47e:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	32b0      	adds	r2, #176	; 0xb0
 800b48a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d101      	bne.n	800b496 <USBD_CUSTOM_HID_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800b492:	2303      	movs	r3, #3
 800b494:	e00f      	b.n	800b4b6 <USBD_CUSTOM_HID_ReceivePacket+0x3e>
#ifdef USE_USBD_COMPOSITE
  /* Get OUT Endpoint address allocated for this class instance */
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	32b0      	adds	r2, #176	; 0xb0
 800b4a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4a4:	60fb      	str	r3, [r7, #12]

  /* Resume USB Out process */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 800b4a6:	4b06      	ldr	r3, [pc, #24]	; (800b4c0 <USBD_CUSTOM_HID_ReceivePacket+0x48>)
 800b4a8:	7819      	ldrb	r1, [r3, #0]
 800b4aa:	68fa      	ldr	r2, [r7, #12]
 800b4ac:	2302      	movs	r3, #2
 800b4ae:	6878      	ldr	r0, [r7, #4]
 800b4b0:	f001 ff4a 	bl	800d348 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 800b4b4:	2300      	movs	r3, #0
}
 800b4b6:	4618      	mov	r0, r3
 800b4b8:	3710      	adds	r7, #16
 800b4ba:	46bd      	mov	sp, r7
 800b4bc:	bd80      	pop	{r7, pc}
 800b4be:	bf00      	nop
 800b4c0:	200000b7 	.word	0x200000b7

0800b4c4 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b4c4:	b580      	push	{r7, lr}
 800b4c6:	b084      	sub	sp, #16
 800b4c8:	af00      	add	r7, sp, #0
 800b4ca:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	32b0      	adds	r2, #176	; 0xb0
 800b4d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4da:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d101      	bne.n	800b4e6 <USBD_CUSTOM_HID_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b4e2:	2303      	movs	r3, #3
 800b4e4:	e016      	b.n	800b514 <USBD_CUSTOM_HID_EP0_RxReady+0x50>
  }

  if (hhid->IsReportAvailable == 1U)
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	691b      	ldr	r3, [r3, #16]
 800b4ea:	2b01      	cmp	r3, #1
 800b4ec:	d111      	bne.n	800b512 <USBD_CUSTOM_HID_EP0_RxReady+0x4e>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b4f4:	687a      	ldr	r2, [r7, #4]
 800b4f6:	33b0      	adds	r3, #176	; 0xb0
 800b4f8:	009b      	lsls	r3, r3, #2
 800b4fa:	4413      	add	r3, r2
 800b4fc:	685b      	ldr	r3, [r3, #4]
 800b4fe:	68db      	ldr	r3, [r3, #12]
 800b500:	68fa      	ldr	r2, [r7, #12]
 800b502:	7810      	ldrb	r0, [r2, #0]
 800b504:	68fa      	ldr	r2, [r7, #12]
 800b506:	7852      	ldrb	r2, [r2, #1]
 800b508:	4611      	mov	r1, r2
 800b50a:	4798      	blx	r3
                                                                             hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	2200      	movs	r2, #0
 800b510:	611a      	str	r2, [r3, #16]
  }

  return (uint8_t)USBD_OK;
 800b512:	2300      	movs	r3, #0
}
 800b514:	4618      	mov	r0, r3
 800b516:	3710      	adds	r7, #16
 800b518:	46bd      	mov	sp, r7
 800b51a:	bd80      	pop	{r7, pc}

0800b51c <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 800b51c:	b480      	push	{r7}
 800b51e:	b083      	sub	sp, #12
 800b520:	af00      	add	r7, sp, #0
 800b522:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	220a      	movs	r2, #10
 800b528:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 800b52a:	4b03      	ldr	r3, [pc, #12]	; (800b538 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 800b52c:	4618      	mov	r0, r3
 800b52e:	370c      	adds	r7, #12
 800b530:	46bd      	mov	sp, r7
 800b532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b536:	4770      	bx	lr
 800b538:	200000ac 	.word	0x200000ac

0800b53c <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 800b53c:	b480      	push	{r7}
 800b53e:	b083      	sub	sp, #12
 800b540:	af00      	add	r7, sp, #0
 800b542:	6078      	str	r0, [r7, #4]
 800b544:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b546:	683b      	ldr	r3, [r7, #0]
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d101      	bne.n	800b550 <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b54c:	2303      	movs	r3, #3
 800b54e:	e009      	b.n	800b564 <USBD_CUSTOM_HID_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b556:	687a      	ldr	r2, [r7, #4]
 800b558:	33b0      	adds	r3, #176	; 0xb0
 800b55a:	009b      	lsls	r3, r3, #2
 800b55c:	4413      	add	r3, r2
 800b55e:	683a      	ldr	r2, [r7, #0]
 800b560:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800b562:	2300      	movs	r3, #0
}
 800b564:	4618      	mov	r0, r3
 800b566:	370c      	adds	r7, #12
 800b568:	46bd      	mov	sp, r7
 800b56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b56e:	4770      	bx	lr

0800b570 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b570:	b580      	push	{r7, lr}
 800b572:	b086      	sub	sp, #24
 800b574:	af00      	add	r7, sp, #0
 800b576:	60f8      	str	r0, [r7, #12]
 800b578:	60b9      	str	r1, [r7, #8]
 800b57a:	4613      	mov	r3, r2
 800b57c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	2b00      	cmp	r3, #0
 800b582:	d101      	bne.n	800b588 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b584:	2303      	movs	r3, #3
 800b586:	e01f      	b.n	800b5c8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	2200      	movs	r2, #0
 800b58c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	2200      	movs	r2, #0
 800b594:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	2200      	movs	r2, #0
 800b59c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b5a0:	68bb      	ldr	r3, [r7, #8]
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d003      	beq.n	800b5ae <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	68ba      	ldr	r2, [r7, #8]
 800b5aa:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	2201      	movs	r2, #1
 800b5b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	79fa      	ldrb	r2, [r7, #7]
 800b5ba:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b5bc:	68f8      	ldr	r0, [r7, #12]
 800b5be:	f001 fd6d 	bl	800d09c <USBD_LL_Init>
 800b5c2:	4603      	mov	r3, r0
 800b5c4:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b5c6:	7dfb      	ldrb	r3, [r7, #23]
}
 800b5c8:	4618      	mov	r0, r3
 800b5ca:	3718      	adds	r7, #24
 800b5cc:	46bd      	mov	sp, r7
 800b5ce:	bd80      	pop	{r7, pc}

0800b5d0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b5d0:	b580      	push	{r7, lr}
 800b5d2:	b084      	sub	sp, #16
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	6078      	str	r0, [r7, #4]
 800b5d8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b5da:	2300      	movs	r3, #0
 800b5dc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b5de:	683b      	ldr	r3, [r7, #0]
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d101      	bne.n	800b5e8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b5e4:	2303      	movs	r3, #3
 800b5e6:	e025      	b.n	800b634 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	683a      	ldr	r2, [r7, #0]
 800b5ec:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	32ae      	adds	r2, #174	; 0xae
 800b5fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b600:	2b00      	cmp	r3, #0
 800b602:	d00f      	beq.n	800b624 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	32ae      	adds	r2, #174	; 0xae
 800b60e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b614:	f107 020e 	add.w	r2, r7, #14
 800b618:	4610      	mov	r0, r2
 800b61a:	4798      	blx	r3
 800b61c:	4602      	mov	r2, r0
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800b62a:	1c5a      	adds	r2, r3, #1
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800b632:	2300      	movs	r3, #0
}
 800b634:	4618      	mov	r0, r3
 800b636:	3710      	adds	r7, #16
 800b638:	46bd      	mov	sp, r7
 800b63a:	bd80      	pop	{r7, pc}

0800b63c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b63c:	b580      	push	{r7, lr}
 800b63e:	b082      	sub	sp, #8
 800b640:	af00      	add	r7, sp, #0
 800b642:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b644:	6878      	ldr	r0, [r7, #4]
 800b646:	f001 fd75 	bl	800d134 <USBD_LL_Start>
 800b64a:	4603      	mov	r3, r0
}
 800b64c:	4618      	mov	r0, r3
 800b64e:	3708      	adds	r7, #8
 800b650:	46bd      	mov	sp, r7
 800b652:	bd80      	pop	{r7, pc}

0800b654 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800b654:	b480      	push	{r7}
 800b656:	b083      	sub	sp, #12
 800b658:	af00      	add	r7, sp, #0
 800b65a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b65c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800b65e:	4618      	mov	r0, r3
 800b660:	370c      	adds	r7, #12
 800b662:	46bd      	mov	sp, r7
 800b664:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b668:	4770      	bx	lr

0800b66a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b66a:	b580      	push	{r7, lr}
 800b66c:	b084      	sub	sp, #16
 800b66e:	af00      	add	r7, sp, #0
 800b670:	6078      	str	r0, [r7, #4]
 800b672:	460b      	mov	r3, r1
 800b674:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b676:	2300      	movs	r3, #0
 800b678:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b680:	2b00      	cmp	r3, #0
 800b682:	d009      	beq.n	800b698 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	78fa      	ldrb	r2, [r7, #3]
 800b68e:	4611      	mov	r1, r2
 800b690:	6878      	ldr	r0, [r7, #4]
 800b692:	4798      	blx	r3
 800b694:	4603      	mov	r3, r0
 800b696:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b698:	7bfb      	ldrb	r3, [r7, #15]
}
 800b69a:	4618      	mov	r0, r3
 800b69c:	3710      	adds	r7, #16
 800b69e:	46bd      	mov	sp, r7
 800b6a0:	bd80      	pop	{r7, pc}

0800b6a2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b6a2:	b580      	push	{r7, lr}
 800b6a4:	b084      	sub	sp, #16
 800b6a6:	af00      	add	r7, sp, #0
 800b6a8:	6078      	str	r0, [r7, #4]
 800b6aa:	460b      	mov	r3, r1
 800b6ac:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b6ae:	2300      	movs	r3, #0
 800b6b0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b6b8:	685b      	ldr	r3, [r3, #4]
 800b6ba:	78fa      	ldrb	r2, [r7, #3]
 800b6bc:	4611      	mov	r1, r2
 800b6be:	6878      	ldr	r0, [r7, #4]
 800b6c0:	4798      	blx	r3
 800b6c2:	4603      	mov	r3, r0
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d001      	beq.n	800b6cc <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800b6c8:	2303      	movs	r3, #3
 800b6ca:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b6cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6ce:	4618      	mov	r0, r3
 800b6d0:	3710      	adds	r7, #16
 800b6d2:	46bd      	mov	sp, r7
 800b6d4:	bd80      	pop	{r7, pc}

0800b6d6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b6d6:	b580      	push	{r7, lr}
 800b6d8:	b084      	sub	sp, #16
 800b6da:	af00      	add	r7, sp, #0
 800b6dc:	6078      	str	r0, [r7, #4]
 800b6de:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b6e6:	6839      	ldr	r1, [r7, #0]
 800b6e8:	4618      	mov	r0, r3
 800b6ea:	f001 f908 	bl	800c8fe <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	2201      	movs	r2, #1
 800b6f2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800b6fc:	461a      	mov	r2, r3
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b70a:	f003 031f 	and.w	r3, r3, #31
 800b70e:	2b02      	cmp	r3, #2
 800b710:	d01a      	beq.n	800b748 <USBD_LL_SetupStage+0x72>
 800b712:	2b02      	cmp	r3, #2
 800b714:	d822      	bhi.n	800b75c <USBD_LL_SetupStage+0x86>
 800b716:	2b00      	cmp	r3, #0
 800b718:	d002      	beq.n	800b720 <USBD_LL_SetupStage+0x4a>
 800b71a:	2b01      	cmp	r3, #1
 800b71c:	d00a      	beq.n	800b734 <USBD_LL_SetupStage+0x5e>
 800b71e:	e01d      	b.n	800b75c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b726:	4619      	mov	r1, r3
 800b728:	6878      	ldr	r0, [r7, #4]
 800b72a:	f000 fb5f 	bl	800bdec <USBD_StdDevReq>
 800b72e:	4603      	mov	r3, r0
 800b730:	73fb      	strb	r3, [r7, #15]
      break;
 800b732:	e020      	b.n	800b776 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b73a:	4619      	mov	r1, r3
 800b73c:	6878      	ldr	r0, [r7, #4]
 800b73e:	f000 fbc7 	bl	800bed0 <USBD_StdItfReq>
 800b742:	4603      	mov	r3, r0
 800b744:	73fb      	strb	r3, [r7, #15]
      break;
 800b746:	e016      	b.n	800b776 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b74e:	4619      	mov	r1, r3
 800b750:	6878      	ldr	r0, [r7, #4]
 800b752:	f000 fc29 	bl	800bfa8 <USBD_StdEPReq>
 800b756:	4603      	mov	r3, r0
 800b758:	73fb      	strb	r3, [r7, #15]
      break;
 800b75a:	e00c      	b.n	800b776 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b762:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b766:	b2db      	uxtb	r3, r3
 800b768:	4619      	mov	r1, r3
 800b76a:	6878      	ldr	r0, [r7, #4]
 800b76c:	f001 fd42 	bl	800d1f4 <USBD_LL_StallEP>
 800b770:	4603      	mov	r3, r0
 800b772:	73fb      	strb	r3, [r7, #15]
      break;
 800b774:	bf00      	nop
  }

  return ret;
 800b776:	7bfb      	ldrb	r3, [r7, #15]
}
 800b778:	4618      	mov	r0, r3
 800b77a:	3710      	adds	r7, #16
 800b77c:	46bd      	mov	sp, r7
 800b77e:	bd80      	pop	{r7, pc}

0800b780 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b780:	b580      	push	{r7, lr}
 800b782:	b086      	sub	sp, #24
 800b784:	af00      	add	r7, sp, #0
 800b786:	60f8      	str	r0, [r7, #12]
 800b788:	460b      	mov	r3, r1
 800b78a:	607a      	str	r2, [r7, #4]
 800b78c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800b78e:	2300      	movs	r3, #0
 800b790:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800b792:	7afb      	ldrb	r3, [r7, #11]
 800b794:	2b00      	cmp	r3, #0
 800b796:	d16e      	bne.n	800b876 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b79e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b7a6:	2b03      	cmp	r3, #3
 800b7a8:	f040 8098 	bne.w	800b8dc <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800b7ac:	693b      	ldr	r3, [r7, #16]
 800b7ae:	689a      	ldr	r2, [r3, #8]
 800b7b0:	693b      	ldr	r3, [r7, #16]
 800b7b2:	68db      	ldr	r3, [r3, #12]
 800b7b4:	429a      	cmp	r2, r3
 800b7b6:	d913      	bls.n	800b7e0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800b7b8:	693b      	ldr	r3, [r7, #16]
 800b7ba:	689a      	ldr	r2, [r3, #8]
 800b7bc:	693b      	ldr	r3, [r7, #16]
 800b7be:	68db      	ldr	r3, [r3, #12]
 800b7c0:	1ad2      	subs	r2, r2, r3
 800b7c2:	693b      	ldr	r3, [r7, #16]
 800b7c4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b7c6:	693b      	ldr	r3, [r7, #16]
 800b7c8:	68da      	ldr	r2, [r3, #12]
 800b7ca:	693b      	ldr	r3, [r7, #16]
 800b7cc:	689b      	ldr	r3, [r3, #8]
 800b7ce:	4293      	cmp	r3, r2
 800b7d0:	bf28      	it	cs
 800b7d2:	4613      	movcs	r3, r2
 800b7d4:	461a      	mov	r2, r3
 800b7d6:	6879      	ldr	r1, [r7, #4]
 800b7d8:	68f8      	ldr	r0, [r7, #12]
 800b7da:	f001 f984 	bl	800cae6 <USBD_CtlContinueRx>
 800b7de:	e07d      	b.n	800b8dc <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b7e6:	f003 031f 	and.w	r3, r3, #31
 800b7ea:	2b02      	cmp	r3, #2
 800b7ec:	d014      	beq.n	800b818 <USBD_LL_DataOutStage+0x98>
 800b7ee:	2b02      	cmp	r3, #2
 800b7f0:	d81d      	bhi.n	800b82e <USBD_LL_DataOutStage+0xae>
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d002      	beq.n	800b7fc <USBD_LL_DataOutStage+0x7c>
 800b7f6:	2b01      	cmp	r3, #1
 800b7f8:	d003      	beq.n	800b802 <USBD_LL_DataOutStage+0x82>
 800b7fa:	e018      	b.n	800b82e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800b7fc:	2300      	movs	r3, #0
 800b7fe:	75bb      	strb	r3, [r7, #22]
            break;
 800b800:	e018      	b.n	800b834 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b808:	b2db      	uxtb	r3, r3
 800b80a:	4619      	mov	r1, r3
 800b80c:	68f8      	ldr	r0, [r7, #12]
 800b80e:	f000 fa5e 	bl	800bcce <USBD_CoreFindIF>
 800b812:	4603      	mov	r3, r0
 800b814:	75bb      	strb	r3, [r7, #22]
            break;
 800b816:	e00d      	b.n	800b834 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b81e:	b2db      	uxtb	r3, r3
 800b820:	4619      	mov	r1, r3
 800b822:	68f8      	ldr	r0, [r7, #12]
 800b824:	f000 fa60 	bl	800bce8 <USBD_CoreFindEP>
 800b828:	4603      	mov	r3, r0
 800b82a:	75bb      	strb	r3, [r7, #22]
            break;
 800b82c:	e002      	b.n	800b834 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800b82e:	2300      	movs	r3, #0
 800b830:	75bb      	strb	r3, [r7, #22]
            break;
 800b832:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800b834:	7dbb      	ldrb	r3, [r7, #22]
 800b836:	2b00      	cmp	r3, #0
 800b838:	d119      	bne.n	800b86e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b840:	b2db      	uxtb	r3, r3
 800b842:	2b03      	cmp	r3, #3
 800b844:	d113      	bne.n	800b86e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800b846:	7dba      	ldrb	r2, [r7, #22]
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	32ae      	adds	r2, #174	; 0xae
 800b84c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b850:	691b      	ldr	r3, [r3, #16]
 800b852:	2b00      	cmp	r3, #0
 800b854:	d00b      	beq.n	800b86e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800b856:	7dba      	ldrb	r2, [r7, #22]
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800b85e:	7dba      	ldrb	r2, [r7, #22]
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	32ae      	adds	r2, #174	; 0xae
 800b864:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b868:	691b      	ldr	r3, [r3, #16]
 800b86a:	68f8      	ldr	r0, [r7, #12]
 800b86c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b86e:	68f8      	ldr	r0, [r7, #12]
 800b870:	f001 f94a 	bl	800cb08 <USBD_CtlSendStatus>
 800b874:	e032      	b.n	800b8dc <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800b876:	7afb      	ldrb	r3, [r7, #11]
 800b878:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b87c:	b2db      	uxtb	r3, r3
 800b87e:	4619      	mov	r1, r3
 800b880:	68f8      	ldr	r0, [r7, #12]
 800b882:	f000 fa31 	bl	800bce8 <USBD_CoreFindEP>
 800b886:	4603      	mov	r3, r0
 800b888:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b88a:	7dbb      	ldrb	r3, [r7, #22]
 800b88c:	2bff      	cmp	r3, #255	; 0xff
 800b88e:	d025      	beq.n	800b8dc <USBD_LL_DataOutStage+0x15c>
 800b890:	7dbb      	ldrb	r3, [r7, #22]
 800b892:	2b00      	cmp	r3, #0
 800b894:	d122      	bne.n	800b8dc <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b89c:	b2db      	uxtb	r3, r3
 800b89e:	2b03      	cmp	r3, #3
 800b8a0:	d117      	bne.n	800b8d2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800b8a2:	7dba      	ldrb	r2, [r7, #22]
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	32ae      	adds	r2, #174	; 0xae
 800b8a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8ac:	699b      	ldr	r3, [r3, #24]
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d00f      	beq.n	800b8d2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800b8b2:	7dba      	ldrb	r2, [r7, #22]
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800b8ba:	7dba      	ldrb	r2, [r7, #22]
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	32ae      	adds	r2, #174	; 0xae
 800b8c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8c4:	699b      	ldr	r3, [r3, #24]
 800b8c6:	7afa      	ldrb	r2, [r7, #11]
 800b8c8:	4611      	mov	r1, r2
 800b8ca:	68f8      	ldr	r0, [r7, #12]
 800b8cc:	4798      	blx	r3
 800b8ce:	4603      	mov	r3, r0
 800b8d0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800b8d2:	7dfb      	ldrb	r3, [r7, #23]
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d001      	beq.n	800b8dc <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800b8d8:	7dfb      	ldrb	r3, [r7, #23]
 800b8da:	e000      	b.n	800b8de <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800b8dc:	2300      	movs	r3, #0
}
 800b8de:	4618      	mov	r0, r3
 800b8e0:	3718      	adds	r7, #24
 800b8e2:	46bd      	mov	sp, r7
 800b8e4:	bd80      	pop	{r7, pc}

0800b8e6 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b8e6:	b580      	push	{r7, lr}
 800b8e8:	b086      	sub	sp, #24
 800b8ea:	af00      	add	r7, sp, #0
 800b8ec:	60f8      	str	r0, [r7, #12]
 800b8ee:	460b      	mov	r3, r1
 800b8f0:	607a      	str	r2, [r7, #4]
 800b8f2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800b8f4:	7afb      	ldrb	r3, [r7, #11]
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d16f      	bne.n	800b9da <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	3314      	adds	r3, #20
 800b8fe:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b906:	2b02      	cmp	r3, #2
 800b908:	d15a      	bne.n	800b9c0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800b90a:	693b      	ldr	r3, [r7, #16]
 800b90c:	689a      	ldr	r2, [r3, #8]
 800b90e:	693b      	ldr	r3, [r7, #16]
 800b910:	68db      	ldr	r3, [r3, #12]
 800b912:	429a      	cmp	r2, r3
 800b914:	d914      	bls.n	800b940 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b916:	693b      	ldr	r3, [r7, #16]
 800b918:	689a      	ldr	r2, [r3, #8]
 800b91a:	693b      	ldr	r3, [r7, #16]
 800b91c:	68db      	ldr	r3, [r3, #12]
 800b91e:	1ad2      	subs	r2, r2, r3
 800b920:	693b      	ldr	r3, [r7, #16]
 800b922:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b924:	693b      	ldr	r3, [r7, #16]
 800b926:	689b      	ldr	r3, [r3, #8]
 800b928:	461a      	mov	r2, r3
 800b92a:	6879      	ldr	r1, [r7, #4]
 800b92c:	68f8      	ldr	r0, [r7, #12]
 800b92e:	f001 f8ac 	bl	800ca8a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b932:	2300      	movs	r3, #0
 800b934:	2200      	movs	r2, #0
 800b936:	2100      	movs	r1, #0
 800b938:	68f8      	ldr	r0, [r7, #12]
 800b93a:	f001 fd05 	bl	800d348 <USBD_LL_PrepareReceive>
 800b93e:	e03f      	b.n	800b9c0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b940:	693b      	ldr	r3, [r7, #16]
 800b942:	68da      	ldr	r2, [r3, #12]
 800b944:	693b      	ldr	r3, [r7, #16]
 800b946:	689b      	ldr	r3, [r3, #8]
 800b948:	429a      	cmp	r2, r3
 800b94a:	d11c      	bne.n	800b986 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b94c:	693b      	ldr	r3, [r7, #16]
 800b94e:	685a      	ldr	r2, [r3, #4]
 800b950:	693b      	ldr	r3, [r7, #16]
 800b952:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b954:	429a      	cmp	r2, r3
 800b956:	d316      	bcc.n	800b986 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b958:	693b      	ldr	r3, [r7, #16]
 800b95a:	685a      	ldr	r2, [r3, #4]
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b962:	429a      	cmp	r2, r3
 800b964:	d20f      	bcs.n	800b986 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b966:	2200      	movs	r2, #0
 800b968:	2100      	movs	r1, #0
 800b96a:	68f8      	ldr	r0, [r7, #12]
 800b96c:	f001 f88d 	bl	800ca8a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	2200      	movs	r2, #0
 800b974:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b978:	2300      	movs	r3, #0
 800b97a:	2200      	movs	r2, #0
 800b97c:	2100      	movs	r1, #0
 800b97e:	68f8      	ldr	r0, [r7, #12]
 800b980:	f001 fce2 	bl	800d348 <USBD_LL_PrepareReceive>
 800b984:	e01c      	b.n	800b9c0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b98c:	b2db      	uxtb	r3, r3
 800b98e:	2b03      	cmp	r3, #3
 800b990:	d10f      	bne.n	800b9b2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b998:	68db      	ldr	r3, [r3, #12]
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d009      	beq.n	800b9b2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	2200      	movs	r2, #0
 800b9a2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b9ac:	68db      	ldr	r3, [r3, #12]
 800b9ae:	68f8      	ldr	r0, [r7, #12]
 800b9b0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b9b2:	2180      	movs	r1, #128	; 0x80
 800b9b4:	68f8      	ldr	r0, [r7, #12]
 800b9b6:	f001 fc1d 	bl	800d1f4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b9ba:	68f8      	ldr	r0, [r7, #12]
 800b9bc:	f001 f8b7 	bl	800cb2e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d03a      	beq.n	800ba40 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800b9ca:	68f8      	ldr	r0, [r7, #12]
 800b9cc:	f7ff fe42 	bl	800b654 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	2200      	movs	r2, #0
 800b9d4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800b9d8:	e032      	b.n	800ba40 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800b9da:	7afb      	ldrb	r3, [r7, #11]
 800b9dc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b9e0:	b2db      	uxtb	r3, r3
 800b9e2:	4619      	mov	r1, r3
 800b9e4:	68f8      	ldr	r0, [r7, #12]
 800b9e6:	f000 f97f 	bl	800bce8 <USBD_CoreFindEP>
 800b9ea:	4603      	mov	r3, r0
 800b9ec:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b9ee:	7dfb      	ldrb	r3, [r7, #23]
 800b9f0:	2bff      	cmp	r3, #255	; 0xff
 800b9f2:	d025      	beq.n	800ba40 <USBD_LL_DataInStage+0x15a>
 800b9f4:	7dfb      	ldrb	r3, [r7, #23]
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d122      	bne.n	800ba40 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba00:	b2db      	uxtb	r3, r3
 800ba02:	2b03      	cmp	r3, #3
 800ba04:	d11c      	bne.n	800ba40 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800ba06:	7dfa      	ldrb	r2, [r7, #23]
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	32ae      	adds	r2, #174	; 0xae
 800ba0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba10:	695b      	ldr	r3, [r3, #20]
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d014      	beq.n	800ba40 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800ba16:	7dfa      	ldrb	r2, [r7, #23]
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800ba1e:	7dfa      	ldrb	r2, [r7, #23]
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	32ae      	adds	r2, #174	; 0xae
 800ba24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba28:	695b      	ldr	r3, [r3, #20]
 800ba2a:	7afa      	ldrb	r2, [r7, #11]
 800ba2c:	4611      	mov	r1, r2
 800ba2e:	68f8      	ldr	r0, [r7, #12]
 800ba30:	4798      	blx	r3
 800ba32:	4603      	mov	r3, r0
 800ba34:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800ba36:	7dbb      	ldrb	r3, [r7, #22]
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d001      	beq.n	800ba40 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800ba3c:	7dbb      	ldrb	r3, [r7, #22]
 800ba3e:	e000      	b.n	800ba42 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800ba40:	2300      	movs	r3, #0
}
 800ba42:	4618      	mov	r0, r3
 800ba44:	3718      	adds	r7, #24
 800ba46:	46bd      	mov	sp, r7
 800ba48:	bd80      	pop	{r7, pc}

0800ba4a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ba4a:	b580      	push	{r7, lr}
 800ba4c:	b084      	sub	sp, #16
 800ba4e:	af00      	add	r7, sp, #0
 800ba50:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800ba52:	2300      	movs	r3, #0
 800ba54:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	2201      	movs	r2, #1
 800ba5a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	2200      	movs	r2, #0
 800ba62:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	2200      	movs	r2, #0
 800ba6a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	2200      	movs	r2, #0
 800ba70:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	2200      	movs	r2, #0
 800ba78:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d014      	beq.n	800bab0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba8c:	685b      	ldr	r3, [r3, #4]
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d00e      	beq.n	800bab0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba98:	685b      	ldr	r3, [r3, #4]
 800ba9a:	687a      	ldr	r2, [r7, #4]
 800ba9c:	6852      	ldr	r2, [r2, #4]
 800ba9e:	b2d2      	uxtb	r2, r2
 800baa0:	4611      	mov	r1, r2
 800baa2:	6878      	ldr	r0, [r7, #4]
 800baa4:	4798      	blx	r3
 800baa6:	4603      	mov	r3, r0
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d001      	beq.n	800bab0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800baac:	2303      	movs	r3, #3
 800baae:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bab0:	2340      	movs	r3, #64	; 0x40
 800bab2:	2200      	movs	r2, #0
 800bab4:	2100      	movs	r1, #0
 800bab6:	6878      	ldr	r0, [r7, #4]
 800bab8:	f001 fb57 	bl	800d16a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	2201      	movs	r2, #1
 800bac0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	2240      	movs	r2, #64	; 0x40
 800bac8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bacc:	2340      	movs	r3, #64	; 0x40
 800bace:	2200      	movs	r2, #0
 800bad0:	2180      	movs	r1, #128	; 0x80
 800bad2:	6878      	ldr	r0, [r7, #4]
 800bad4:	f001 fb49 	bl	800d16a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	2201      	movs	r2, #1
 800badc:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	2240      	movs	r2, #64	; 0x40
 800bae2:	621a      	str	r2, [r3, #32]

  return ret;
 800bae4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bae6:	4618      	mov	r0, r3
 800bae8:	3710      	adds	r7, #16
 800baea:	46bd      	mov	sp, r7
 800baec:	bd80      	pop	{r7, pc}

0800baee <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800baee:	b480      	push	{r7}
 800baf0:	b083      	sub	sp, #12
 800baf2:	af00      	add	r7, sp, #0
 800baf4:	6078      	str	r0, [r7, #4]
 800baf6:	460b      	mov	r3, r1
 800baf8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	78fa      	ldrb	r2, [r7, #3]
 800bafe:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800bb00:	2300      	movs	r3, #0
}
 800bb02:	4618      	mov	r0, r3
 800bb04:	370c      	adds	r7, #12
 800bb06:	46bd      	mov	sp, r7
 800bb08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb0c:	4770      	bx	lr

0800bb0e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800bb0e:	b480      	push	{r7}
 800bb10:	b083      	sub	sp, #12
 800bb12:	af00      	add	r7, sp, #0
 800bb14:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb1c:	b2da      	uxtb	r2, r3
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	2204      	movs	r2, #4
 800bb28:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800bb2c:	2300      	movs	r3, #0
}
 800bb2e:	4618      	mov	r0, r3
 800bb30:	370c      	adds	r7, #12
 800bb32:	46bd      	mov	sp, r7
 800bb34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb38:	4770      	bx	lr

0800bb3a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800bb3a:	b480      	push	{r7}
 800bb3c:	b083      	sub	sp, #12
 800bb3e:	af00      	add	r7, sp, #0
 800bb40:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb48:	b2db      	uxtb	r3, r3
 800bb4a:	2b04      	cmp	r3, #4
 800bb4c:	d106      	bne.n	800bb5c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800bb54:	b2da      	uxtb	r2, r3
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800bb5c:	2300      	movs	r3, #0
}
 800bb5e:	4618      	mov	r0, r3
 800bb60:	370c      	adds	r7, #12
 800bb62:	46bd      	mov	sp, r7
 800bb64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb68:	4770      	bx	lr

0800bb6a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800bb6a:	b580      	push	{r7, lr}
 800bb6c:	b082      	sub	sp, #8
 800bb6e:	af00      	add	r7, sp, #0
 800bb70:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb78:	b2db      	uxtb	r3, r3
 800bb7a:	2b03      	cmp	r3, #3
 800bb7c:	d110      	bne.n	800bba0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d00b      	beq.n	800bba0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb8e:	69db      	ldr	r3, [r3, #28]
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d005      	beq.n	800bba0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb9a:	69db      	ldr	r3, [r3, #28]
 800bb9c:	6878      	ldr	r0, [r7, #4]
 800bb9e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800bba0:	2300      	movs	r3, #0
}
 800bba2:	4618      	mov	r0, r3
 800bba4:	3708      	adds	r7, #8
 800bba6:	46bd      	mov	sp, r7
 800bba8:	bd80      	pop	{r7, pc}

0800bbaa <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800bbaa:	b580      	push	{r7, lr}
 800bbac:	b082      	sub	sp, #8
 800bbae:	af00      	add	r7, sp, #0
 800bbb0:	6078      	str	r0, [r7, #4]
 800bbb2:	460b      	mov	r3, r1
 800bbb4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	32ae      	adds	r2, #174	; 0xae
 800bbc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d101      	bne.n	800bbcc <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800bbc8:	2303      	movs	r3, #3
 800bbca:	e01c      	b.n	800bc06 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bbd2:	b2db      	uxtb	r3, r3
 800bbd4:	2b03      	cmp	r3, #3
 800bbd6:	d115      	bne.n	800bc04 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	32ae      	adds	r2, #174	; 0xae
 800bbe2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbe6:	6a1b      	ldr	r3, [r3, #32]
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d00b      	beq.n	800bc04 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	32ae      	adds	r2, #174	; 0xae
 800bbf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbfa:	6a1b      	ldr	r3, [r3, #32]
 800bbfc:	78fa      	ldrb	r2, [r7, #3]
 800bbfe:	4611      	mov	r1, r2
 800bc00:	6878      	ldr	r0, [r7, #4]
 800bc02:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bc04:	2300      	movs	r3, #0
}
 800bc06:	4618      	mov	r0, r3
 800bc08:	3708      	adds	r7, #8
 800bc0a:	46bd      	mov	sp, r7
 800bc0c:	bd80      	pop	{r7, pc}

0800bc0e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800bc0e:	b580      	push	{r7, lr}
 800bc10:	b082      	sub	sp, #8
 800bc12:	af00      	add	r7, sp, #0
 800bc14:	6078      	str	r0, [r7, #4]
 800bc16:	460b      	mov	r3, r1
 800bc18:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	32ae      	adds	r2, #174	; 0xae
 800bc24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d101      	bne.n	800bc30 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800bc2c:	2303      	movs	r3, #3
 800bc2e:	e01c      	b.n	800bc6a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc36:	b2db      	uxtb	r3, r3
 800bc38:	2b03      	cmp	r3, #3
 800bc3a:	d115      	bne.n	800bc68 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	32ae      	adds	r2, #174	; 0xae
 800bc46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d00b      	beq.n	800bc68 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	32ae      	adds	r2, #174	; 0xae
 800bc5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc60:	78fa      	ldrb	r2, [r7, #3]
 800bc62:	4611      	mov	r1, r2
 800bc64:	6878      	ldr	r0, [r7, #4]
 800bc66:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bc68:	2300      	movs	r3, #0
}
 800bc6a:	4618      	mov	r0, r3
 800bc6c:	3708      	adds	r7, #8
 800bc6e:	46bd      	mov	sp, r7
 800bc70:	bd80      	pop	{r7, pc}

0800bc72 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800bc72:	b480      	push	{r7}
 800bc74:	b083      	sub	sp, #12
 800bc76:	af00      	add	r7, sp, #0
 800bc78:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bc7a:	2300      	movs	r3, #0
}
 800bc7c:	4618      	mov	r0, r3
 800bc7e:	370c      	adds	r7, #12
 800bc80:	46bd      	mov	sp, r7
 800bc82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc86:	4770      	bx	lr

0800bc88 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800bc88:	b580      	push	{r7, lr}
 800bc8a:	b084      	sub	sp, #16
 800bc8c:	af00      	add	r7, sp, #0
 800bc8e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800bc90:	2300      	movs	r3, #0
 800bc92:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	2201      	movs	r2, #1
 800bc98:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d00e      	beq.n	800bcc4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bcac:	685b      	ldr	r3, [r3, #4]
 800bcae:	687a      	ldr	r2, [r7, #4]
 800bcb0:	6852      	ldr	r2, [r2, #4]
 800bcb2:	b2d2      	uxtb	r2, r2
 800bcb4:	4611      	mov	r1, r2
 800bcb6:	6878      	ldr	r0, [r7, #4]
 800bcb8:	4798      	blx	r3
 800bcba:	4603      	mov	r3, r0
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d001      	beq.n	800bcc4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800bcc0:	2303      	movs	r3, #3
 800bcc2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800bcc4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcc6:	4618      	mov	r0, r3
 800bcc8:	3710      	adds	r7, #16
 800bcca:	46bd      	mov	sp, r7
 800bccc:	bd80      	pop	{r7, pc}

0800bcce <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800bcce:	b480      	push	{r7}
 800bcd0:	b083      	sub	sp, #12
 800bcd2:	af00      	add	r7, sp, #0
 800bcd4:	6078      	str	r0, [r7, #4]
 800bcd6:	460b      	mov	r3, r1
 800bcd8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800bcda:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800bcdc:	4618      	mov	r0, r3
 800bcde:	370c      	adds	r7, #12
 800bce0:	46bd      	mov	sp, r7
 800bce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce6:	4770      	bx	lr

0800bce8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800bce8:	b480      	push	{r7}
 800bcea:	b083      	sub	sp, #12
 800bcec:	af00      	add	r7, sp, #0
 800bcee:	6078      	str	r0, [r7, #4]
 800bcf0:	460b      	mov	r3, r1
 800bcf2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800bcf4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800bcf6:	4618      	mov	r0, r3
 800bcf8:	370c      	adds	r7, #12
 800bcfa:	46bd      	mov	sp, r7
 800bcfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd00:	4770      	bx	lr

0800bd02 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800bd02:	b580      	push	{r7, lr}
 800bd04:	b086      	sub	sp, #24
 800bd06:	af00      	add	r7, sp, #0
 800bd08:	6078      	str	r0, [r7, #4]
 800bd0a:	460b      	mov	r3, r1
 800bd0c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800bd16:	2300      	movs	r3, #0
 800bd18:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	885b      	ldrh	r3, [r3, #2]
 800bd1e:	b29a      	uxth	r2, r3
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	781b      	ldrb	r3, [r3, #0]
 800bd24:	b29b      	uxth	r3, r3
 800bd26:	429a      	cmp	r2, r3
 800bd28:	d920      	bls.n	800bd6c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	781b      	ldrb	r3, [r3, #0]
 800bd2e:	b29b      	uxth	r3, r3
 800bd30:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800bd32:	e013      	b.n	800bd5c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800bd34:	f107 030a 	add.w	r3, r7, #10
 800bd38:	4619      	mov	r1, r3
 800bd3a:	6978      	ldr	r0, [r7, #20]
 800bd3c:	f000 f81b 	bl	800bd76 <USBD_GetNextDesc>
 800bd40:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800bd42:	697b      	ldr	r3, [r7, #20]
 800bd44:	785b      	ldrb	r3, [r3, #1]
 800bd46:	2b05      	cmp	r3, #5
 800bd48:	d108      	bne.n	800bd5c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800bd4a:	697b      	ldr	r3, [r7, #20]
 800bd4c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800bd4e:	693b      	ldr	r3, [r7, #16]
 800bd50:	789b      	ldrb	r3, [r3, #2]
 800bd52:	78fa      	ldrb	r2, [r7, #3]
 800bd54:	429a      	cmp	r2, r3
 800bd56:	d008      	beq.n	800bd6a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800bd58:	2300      	movs	r3, #0
 800bd5a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	885b      	ldrh	r3, [r3, #2]
 800bd60:	b29a      	uxth	r2, r3
 800bd62:	897b      	ldrh	r3, [r7, #10]
 800bd64:	429a      	cmp	r2, r3
 800bd66:	d8e5      	bhi.n	800bd34 <USBD_GetEpDesc+0x32>
 800bd68:	e000      	b.n	800bd6c <USBD_GetEpDesc+0x6a>
          break;
 800bd6a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800bd6c:	693b      	ldr	r3, [r7, #16]
}
 800bd6e:	4618      	mov	r0, r3
 800bd70:	3718      	adds	r7, #24
 800bd72:	46bd      	mov	sp, r7
 800bd74:	bd80      	pop	{r7, pc}

0800bd76 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800bd76:	b480      	push	{r7}
 800bd78:	b085      	sub	sp, #20
 800bd7a:	af00      	add	r7, sp, #0
 800bd7c:	6078      	str	r0, [r7, #4]
 800bd7e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800bd84:	683b      	ldr	r3, [r7, #0]
 800bd86:	881a      	ldrh	r2, [r3, #0]
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	781b      	ldrb	r3, [r3, #0]
 800bd8c:	b29b      	uxth	r3, r3
 800bd8e:	4413      	add	r3, r2
 800bd90:	b29a      	uxth	r2, r3
 800bd92:	683b      	ldr	r3, [r7, #0]
 800bd94:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	781b      	ldrb	r3, [r3, #0]
 800bd9a:	461a      	mov	r2, r3
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	4413      	add	r3, r2
 800bda0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800bda2:	68fb      	ldr	r3, [r7, #12]
}
 800bda4:	4618      	mov	r0, r3
 800bda6:	3714      	adds	r7, #20
 800bda8:	46bd      	mov	sp, r7
 800bdaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdae:	4770      	bx	lr

0800bdb0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800bdb0:	b480      	push	{r7}
 800bdb2:	b087      	sub	sp, #28
 800bdb4:	af00      	add	r7, sp, #0
 800bdb6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800bdbc:	697b      	ldr	r3, [r7, #20]
 800bdbe:	781b      	ldrb	r3, [r3, #0]
 800bdc0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800bdc2:	697b      	ldr	r3, [r7, #20]
 800bdc4:	3301      	adds	r3, #1
 800bdc6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800bdc8:	697b      	ldr	r3, [r7, #20]
 800bdca:	781b      	ldrb	r3, [r3, #0]
 800bdcc:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800bdce:	8a3b      	ldrh	r3, [r7, #16]
 800bdd0:	021b      	lsls	r3, r3, #8
 800bdd2:	b21a      	sxth	r2, r3
 800bdd4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800bdd8:	4313      	orrs	r3, r2
 800bdda:	b21b      	sxth	r3, r3
 800bddc:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800bdde:	89fb      	ldrh	r3, [r7, #14]
}
 800bde0:	4618      	mov	r0, r3
 800bde2:	371c      	adds	r7, #28
 800bde4:	46bd      	mov	sp, r7
 800bde6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdea:	4770      	bx	lr

0800bdec <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bdec:	b580      	push	{r7, lr}
 800bdee:	b084      	sub	sp, #16
 800bdf0:	af00      	add	r7, sp, #0
 800bdf2:	6078      	str	r0, [r7, #4]
 800bdf4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bdf6:	2300      	movs	r3, #0
 800bdf8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bdfa:	683b      	ldr	r3, [r7, #0]
 800bdfc:	781b      	ldrb	r3, [r3, #0]
 800bdfe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800be02:	2b40      	cmp	r3, #64	; 0x40
 800be04:	d005      	beq.n	800be12 <USBD_StdDevReq+0x26>
 800be06:	2b40      	cmp	r3, #64	; 0x40
 800be08:	d857      	bhi.n	800beba <USBD_StdDevReq+0xce>
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d00f      	beq.n	800be2e <USBD_StdDevReq+0x42>
 800be0e:	2b20      	cmp	r3, #32
 800be10:	d153      	bne.n	800beba <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	32ae      	adds	r2, #174	; 0xae
 800be1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be20:	689b      	ldr	r3, [r3, #8]
 800be22:	6839      	ldr	r1, [r7, #0]
 800be24:	6878      	ldr	r0, [r7, #4]
 800be26:	4798      	blx	r3
 800be28:	4603      	mov	r3, r0
 800be2a:	73fb      	strb	r3, [r7, #15]
      break;
 800be2c:	e04a      	b.n	800bec4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800be2e:	683b      	ldr	r3, [r7, #0]
 800be30:	785b      	ldrb	r3, [r3, #1]
 800be32:	2b09      	cmp	r3, #9
 800be34:	d83b      	bhi.n	800beae <USBD_StdDevReq+0xc2>
 800be36:	a201      	add	r2, pc, #4	; (adr r2, 800be3c <USBD_StdDevReq+0x50>)
 800be38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be3c:	0800be91 	.word	0x0800be91
 800be40:	0800bea5 	.word	0x0800bea5
 800be44:	0800beaf 	.word	0x0800beaf
 800be48:	0800be9b 	.word	0x0800be9b
 800be4c:	0800beaf 	.word	0x0800beaf
 800be50:	0800be6f 	.word	0x0800be6f
 800be54:	0800be65 	.word	0x0800be65
 800be58:	0800beaf 	.word	0x0800beaf
 800be5c:	0800be87 	.word	0x0800be87
 800be60:	0800be79 	.word	0x0800be79
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800be64:	6839      	ldr	r1, [r7, #0]
 800be66:	6878      	ldr	r0, [r7, #4]
 800be68:	f000 fa3c 	bl	800c2e4 <USBD_GetDescriptor>
          break;
 800be6c:	e024      	b.n	800beb8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800be6e:	6839      	ldr	r1, [r7, #0]
 800be70:	6878      	ldr	r0, [r7, #4]
 800be72:	f000 fba1 	bl	800c5b8 <USBD_SetAddress>
          break;
 800be76:	e01f      	b.n	800beb8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800be78:	6839      	ldr	r1, [r7, #0]
 800be7a:	6878      	ldr	r0, [r7, #4]
 800be7c:	f000 fbe0 	bl	800c640 <USBD_SetConfig>
 800be80:	4603      	mov	r3, r0
 800be82:	73fb      	strb	r3, [r7, #15]
          break;
 800be84:	e018      	b.n	800beb8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800be86:	6839      	ldr	r1, [r7, #0]
 800be88:	6878      	ldr	r0, [r7, #4]
 800be8a:	f000 fc83 	bl	800c794 <USBD_GetConfig>
          break;
 800be8e:	e013      	b.n	800beb8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800be90:	6839      	ldr	r1, [r7, #0]
 800be92:	6878      	ldr	r0, [r7, #4]
 800be94:	f000 fcb4 	bl	800c800 <USBD_GetStatus>
          break;
 800be98:	e00e      	b.n	800beb8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800be9a:	6839      	ldr	r1, [r7, #0]
 800be9c:	6878      	ldr	r0, [r7, #4]
 800be9e:	f000 fce3 	bl	800c868 <USBD_SetFeature>
          break;
 800bea2:	e009      	b.n	800beb8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800bea4:	6839      	ldr	r1, [r7, #0]
 800bea6:	6878      	ldr	r0, [r7, #4]
 800bea8:	f000 fd07 	bl	800c8ba <USBD_ClrFeature>
          break;
 800beac:	e004      	b.n	800beb8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800beae:	6839      	ldr	r1, [r7, #0]
 800beb0:	6878      	ldr	r0, [r7, #4]
 800beb2:	f000 fd5e 	bl	800c972 <USBD_CtlError>
          break;
 800beb6:	bf00      	nop
      }
      break;
 800beb8:	e004      	b.n	800bec4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800beba:	6839      	ldr	r1, [r7, #0]
 800bebc:	6878      	ldr	r0, [r7, #4]
 800bebe:	f000 fd58 	bl	800c972 <USBD_CtlError>
      break;
 800bec2:	bf00      	nop
  }

  return ret;
 800bec4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bec6:	4618      	mov	r0, r3
 800bec8:	3710      	adds	r7, #16
 800beca:	46bd      	mov	sp, r7
 800becc:	bd80      	pop	{r7, pc}
 800bece:	bf00      	nop

0800bed0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bed0:	b580      	push	{r7, lr}
 800bed2:	b084      	sub	sp, #16
 800bed4:	af00      	add	r7, sp, #0
 800bed6:	6078      	str	r0, [r7, #4]
 800bed8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800beda:	2300      	movs	r3, #0
 800bedc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bede:	683b      	ldr	r3, [r7, #0]
 800bee0:	781b      	ldrb	r3, [r3, #0]
 800bee2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bee6:	2b40      	cmp	r3, #64	; 0x40
 800bee8:	d005      	beq.n	800bef6 <USBD_StdItfReq+0x26>
 800beea:	2b40      	cmp	r3, #64	; 0x40
 800beec:	d852      	bhi.n	800bf94 <USBD_StdItfReq+0xc4>
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d001      	beq.n	800bef6 <USBD_StdItfReq+0x26>
 800bef2:	2b20      	cmp	r3, #32
 800bef4:	d14e      	bne.n	800bf94 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800befc:	b2db      	uxtb	r3, r3
 800befe:	3b01      	subs	r3, #1
 800bf00:	2b02      	cmp	r3, #2
 800bf02:	d840      	bhi.n	800bf86 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800bf04:	683b      	ldr	r3, [r7, #0]
 800bf06:	889b      	ldrh	r3, [r3, #4]
 800bf08:	b2db      	uxtb	r3, r3
 800bf0a:	2b01      	cmp	r3, #1
 800bf0c:	d836      	bhi.n	800bf7c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800bf0e:	683b      	ldr	r3, [r7, #0]
 800bf10:	889b      	ldrh	r3, [r3, #4]
 800bf12:	b2db      	uxtb	r3, r3
 800bf14:	4619      	mov	r1, r3
 800bf16:	6878      	ldr	r0, [r7, #4]
 800bf18:	f7ff fed9 	bl	800bcce <USBD_CoreFindIF>
 800bf1c:	4603      	mov	r3, r0
 800bf1e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bf20:	7bbb      	ldrb	r3, [r7, #14]
 800bf22:	2bff      	cmp	r3, #255	; 0xff
 800bf24:	d01d      	beq.n	800bf62 <USBD_StdItfReq+0x92>
 800bf26:	7bbb      	ldrb	r3, [r7, #14]
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d11a      	bne.n	800bf62 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800bf2c:	7bba      	ldrb	r2, [r7, #14]
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	32ae      	adds	r2, #174	; 0xae
 800bf32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf36:	689b      	ldr	r3, [r3, #8]
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d00f      	beq.n	800bf5c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800bf3c:	7bba      	ldrb	r2, [r7, #14]
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800bf44:	7bba      	ldrb	r2, [r7, #14]
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	32ae      	adds	r2, #174	; 0xae
 800bf4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf4e:	689b      	ldr	r3, [r3, #8]
 800bf50:	6839      	ldr	r1, [r7, #0]
 800bf52:	6878      	ldr	r0, [r7, #4]
 800bf54:	4798      	blx	r3
 800bf56:	4603      	mov	r3, r0
 800bf58:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800bf5a:	e004      	b.n	800bf66 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800bf5c:	2303      	movs	r3, #3
 800bf5e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800bf60:	e001      	b.n	800bf66 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800bf62:	2303      	movs	r3, #3
 800bf64:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800bf66:	683b      	ldr	r3, [r7, #0]
 800bf68:	88db      	ldrh	r3, [r3, #6]
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d110      	bne.n	800bf90 <USBD_StdItfReq+0xc0>
 800bf6e:	7bfb      	ldrb	r3, [r7, #15]
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d10d      	bne.n	800bf90 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800bf74:	6878      	ldr	r0, [r7, #4]
 800bf76:	f000 fdc7 	bl	800cb08 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800bf7a:	e009      	b.n	800bf90 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800bf7c:	6839      	ldr	r1, [r7, #0]
 800bf7e:	6878      	ldr	r0, [r7, #4]
 800bf80:	f000 fcf7 	bl	800c972 <USBD_CtlError>
          break;
 800bf84:	e004      	b.n	800bf90 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800bf86:	6839      	ldr	r1, [r7, #0]
 800bf88:	6878      	ldr	r0, [r7, #4]
 800bf8a:	f000 fcf2 	bl	800c972 <USBD_CtlError>
          break;
 800bf8e:	e000      	b.n	800bf92 <USBD_StdItfReq+0xc2>
          break;
 800bf90:	bf00      	nop
      }
      break;
 800bf92:	e004      	b.n	800bf9e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800bf94:	6839      	ldr	r1, [r7, #0]
 800bf96:	6878      	ldr	r0, [r7, #4]
 800bf98:	f000 fceb 	bl	800c972 <USBD_CtlError>
      break;
 800bf9c:	bf00      	nop
  }

  return ret;
 800bf9e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfa0:	4618      	mov	r0, r3
 800bfa2:	3710      	adds	r7, #16
 800bfa4:	46bd      	mov	sp, r7
 800bfa6:	bd80      	pop	{r7, pc}

0800bfa8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bfa8:	b580      	push	{r7, lr}
 800bfaa:	b084      	sub	sp, #16
 800bfac:	af00      	add	r7, sp, #0
 800bfae:	6078      	str	r0, [r7, #4]
 800bfb0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800bfb2:	2300      	movs	r3, #0
 800bfb4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800bfb6:	683b      	ldr	r3, [r7, #0]
 800bfb8:	889b      	ldrh	r3, [r3, #4]
 800bfba:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bfbc:	683b      	ldr	r3, [r7, #0]
 800bfbe:	781b      	ldrb	r3, [r3, #0]
 800bfc0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bfc4:	2b40      	cmp	r3, #64	; 0x40
 800bfc6:	d007      	beq.n	800bfd8 <USBD_StdEPReq+0x30>
 800bfc8:	2b40      	cmp	r3, #64	; 0x40
 800bfca:	f200 817f 	bhi.w	800c2cc <USBD_StdEPReq+0x324>
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d02a      	beq.n	800c028 <USBD_StdEPReq+0x80>
 800bfd2:	2b20      	cmp	r3, #32
 800bfd4:	f040 817a 	bne.w	800c2cc <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800bfd8:	7bbb      	ldrb	r3, [r7, #14]
 800bfda:	4619      	mov	r1, r3
 800bfdc:	6878      	ldr	r0, [r7, #4]
 800bfde:	f7ff fe83 	bl	800bce8 <USBD_CoreFindEP>
 800bfe2:	4603      	mov	r3, r0
 800bfe4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bfe6:	7b7b      	ldrb	r3, [r7, #13]
 800bfe8:	2bff      	cmp	r3, #255	; 0xff
 800bfea:	f000 8174 	beq.w	800c2d6 <USBD_StdEPReq+0x32e>
 800bfee:	7b7b      	ldrb	r3, [r7, #13]
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	f040 8170 	bne.w	800c2d6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800bff6:	7b7a      	ldrb	r2, [r7, #13]
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800bffe:	7b7a      	ldrb	r2, [r7, #13]
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	32ae      	adds	r2, #174	; 0xae
 800c004:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c008:	689b      	ldr	r3, [r3, #8]
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	f000 8163 	beq.w	800c2d6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800c010:	7b7a      	ldrb	r2, [r7, #13]
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	32ae      	adds	r2, #174	; 0xae
 800c016:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c01a:	689b      	ldr	r3, [r3, #8]
 800c01c:	6839      	ldr	r1, [r7, #0]
 800c01e:	6878      	ldr	r0, [r7, #4]
 800c020:	4798      	blx	r3
 800c022:	4603      	mov	r3, r0
 800c024:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800c026:	e156      	b.n	800c2d6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c028:	683b      	ldr	r3, [r7, #0]
 800c02a:	785b      	ldrb	r3, [r3, #1]
 800c02c:	2b03      	cmp	r3, #3
 800c02e:	d008      	beq.n	800c042 <USBD_StdEPReq+0x9a>
 800c030:	2b03      	cmp	r3, #3
 800c032:	f300 8145 	bgt.w	800c2c0 <USBD_StdEPReq+0x318>
 800c036:	2b00      	cmp	r3, #0
 800c038:	f000 809b 	beq.w	800c172 <USBD_StdEPReq+0x1ca>
 800c03c:	2b01      	cmp	r3, #1
 800c03e:	d03c      	beq.n	800c0ba <USBD_StdEPReq+0x112>
 800c040:	e13e      	b.n	800c2c0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c048:	b2db      	uxtb	r3, r3
 800c04a:	2b02      	cmp	r3, #2
 800c04c:	d002      	beq.n	800c054 <USBD_StdEPReq+0xac>
 800c04e:	2b03      	cmp	r3, #3
 800c050:	d016      	beq.n	800c080 <USBD_StdEPReq+0xd8>
 800c052:	e02c      	b.n	800c0ae <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c054:	7bbb      	ldrb	r3, [r7, #14]
 800c056:	2b00      	cmp	r3, #0
 800c058:	d00d      	beq.n	800c076 <USBD_StdEPReq+0xce>
 800c05a:	7bbb      	ldrb	r3, [r7, #14]
 800c05c:	2b80      	cmp	r3, #128	; 0x80
 800c05e:	d00a      	beq.n	800c076 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c060:	7bbb      	ldrb	r3, [r7, #14]
 800c062:	4619      	mov	r1, r3
 800c064:	6878      	ldr	r0, [r7, #4]
 800c066:	f001 f8c5 	bl	800d1f4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c06a:	2180      	movs	r1, #128	; 0x80
 800c06c:	6878      	ldr	r0, [r7, #4]
 800c06e:	f001 f8c1 	bl	800d1f4 <USBD_LL_StallEP>
 800c072:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c074:	e020      	b.n	800c0b8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800c076:	6839      	ldr	r1, [r7, #0]
 800c078:	6878      	ldr	r0, [r7, #4]
 800c07a:	f000 fc7a 	bl	800c972 <USBD_CtlError>
              break;
 800c07e:	e01b      	b.n	800c0b8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c080:	683b      	ldr	r3, [r7, #0]
 800c082:	885b      	ldrh	r3, [r3, #2]
 800c084:	2b00      	cmp	r3, #0
 800c086:	d10e      	bne.n	800c0a6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c088:	7bbb      	ldrb	r3, [r7, #14]
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d00b      	beq.n	800c0a6 <USBD_StdEPReq+0xfe>
 800c08e:	7bbb      	ldrb	r3, [r7, #14]
 800c090:	2b80      	cmp	r3, #128	; 0x80
 800c092:	d008      	beq.n	800c0a6 <USBD_StdEPReq+0xfe>
 800c094:	683b      	ldr	r3, [r7, #0]
 800c096:	88db      	ldrh	r3, [r3, #6]
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d104      	bne.n	800c0a6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c09c:	7bbb      	ldrb	r3, [r7, #14]
 800c09e:	4619      	mov	r1, r3
 800c0a0:	6878      	ldr	r0, [r7, #4]
 800c0a2:	f001 f8a7 	bl	800d1f4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c0a6:	6878      	ldr	r0, [r7, #4]
 800c0a8:	f000 fd2e 	bl	800cb08 <USBD_CtlSendStatus>

              break;
 800c0ac:	e004      	b.n	800c0b8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800c0ae:	6839      	ldr	r1, [r7, #0]
 800c0b0:	6878      	ldr	r0, [r7, #4]
 800c0b2:	f000 fc5e 	bl	800c972 <USBD_CtlError>
              break;
 800c0b6:	bf00      	nop
          }
          break;
 800c0b8:	e107      	b.n	800c2ca <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c0c0:	b2db      	uxtb	r3, r3
 800c0c2:	2b02      	cmp	r3, #2
 800c0c4:	d002      	beq.n	800c0cc <USBD_StdEPReq+0x124>
 800c0c6:	2b03      	cmp	r3, #3
 800c0c8:	d016      	beq.n	800c0f8 <USBD_StdEPReq+0x150>
 800c0ca:	e04b      	b.n	800c164 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c0cc:	7bbb      	ldrb	r3, [r7, #14]
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d00d      	beq.n	800c0ee <USBD_StdEPReq+0x146>
 800c0d2:	7bbb      	ldrb	r3, [r7, #14]
 800c0d4:	2b80      	cmp	r3, #128	; 0x80
 800c0d6:	d00a      	beq.n	800c0ee <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c0d8:	7bbb      	ldrb	r3, [r7, #14]
 800c0da:	4619      	mov	r1, r3
 800c0dc:	6878      	ldr	r0, [r7, #4]
 800c0de:	f001 f889 	bl	800d1f4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c0e2:	2180      	movs	r1, #128	; 0x80
 800c0e4:	6878      	ldr	r0, [r7, #4]
 800c0e6:	f001 f885 	bl	800d1f4 <USBD_LL_StallEP>
 800c0ea:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c0ec:	e040      	b.n	800c170 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800c0ee:	6839      	ldr	r1, [r7, #0]
 800c0f0:	6878      	ldr	r0, [r7, #4]
 800c0f2:	f000 fc3e 	bl	800c972 <USBD_CtlError>
              break;
 800c0f6:	e03b      	b.n	800c170 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c0f8:	683b      	ldr	r3, [r7, #0]
 800c0fa:	885b      	ldrh	r3, [r3, #2]
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d136      	bne.n	800c16e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c100:	7bbb      	ldrb	r3, [r7, #14]
 800c102:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c106:	2b00      	cmp	r3, #0
 800c108:	d004      	beq.n	800c114 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c10a:	7bbb      	ldrb	r3, [r7, #14]
 800c10c:	4619      	mov	r1, r3
 800c10e:	6878      	ldr	r0, [r7, #4]
 800c110:	f001 f88f 	bl	800d232 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c114:	6878      	ldr	r0, [r7, #4]
 800c116:	f000 fcf7 	bl	800cb08 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800c11a:	7bbb      	ldrb	r3, [r7, #14]
 800c11c:	4619      	mov	r1, r3
 800c11e:	6878      	ldr	r0, [r7, #4]
 800c120:	f7ff fde2 	bl	800bce8 <USBD_CoreFindEP>
 800c124:	4603      	mov	r3, r0
 800c126:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c128:	7b7b      	ldrb	r3, [r7, #13]
 800c12a:	2bff      	cmp	r3, #255	; 0xff
 800c12c:	d01f      	beq.n	800c16e <USBD_StdEPReq+0x1c6>
 800c12e:	7b7b      	ldrb	r3, [r7, #13]
 800c130:	2b00      	cmp	r3, #0
 800c132:	d11c      	bne.n	800c16e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800c134:	7b7a      	ldrb	r2, [r7, #13]
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800c13c:	7b7a      	ldrb	r2, [r7, #13]
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	32ae      	adds	r2, #174	; 0xae
 800c142:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c146:	689b      	ldr	r3, [r3, #8]
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d010      	beq.n	800c16e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c14c:	7b7a      	ldrb	r2, [r7, #13]
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	32ae      	adds	r2, #174	; 0xae
 800c152:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c156:	689b      	ldr	r3, [r3, #8]
 800c158:	6839      	ldr	r1, [r7, #0]
 800c15a:	6878      	ldr	r0, [r7, #4]
 800c15c:	4798      	blx	r3
 800c15e:	4603      	mov	r3, r0
 800c160:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800c162:	e004      	b.n	800c16e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800c164:	6839      	ldr	r1, [r7, #0]
 800c166:	6878      	ldr	r0, [r7, #4]
 800c168:	f000 fc03 	bl	800c972 <USBD_CtlError>
              break;
 800c16c:	e000      	b.n	800c170 <USBD_StdEPReq+0x1c8>
              break;
 800c16e:	bf00      	nop
          }
          break;
 800c170:	e0ab      	b.n	800c2ca <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c178:	b2db      	uxtb	r3, r3
 800c17a:	2b02      	cmp	r3, #2
 800c17c:	d002      	beq.n	800c184 <USBD_StdEPReq+0x1dc>
 800c17e:	2b03      	cmp	r3, #3
 800c180:	d032      	beq.n	800c1e8 <USBD_StdEPReq+0x240>
 800c182:	e097      	b.n	800c2b4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c184:	7bbb      	ldrb	r3, [r7, #14]
 800c186:	2b00      	cmp	r3, #0
 800c188:	d007      	beq.n	800c19a <USBD_StdEPReq+0x1f2>
 800c18a:	7bbb      	ldrb	r3, [r7, #14]
 800c18c:	2b80      	cmp	r3, #128	; 0x80
 800c18e:	d004      	beq.n	800c19a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800c190:	6839      	ldr	r1, [r7, #0]
 800c192:	6878      	ldr	r0, [r7, #4]
 800c194:	f000 fbed 	bl	800c972 <USBD_CtlError>
                break;
 800c198:	e091      	b.n	800c2be <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c19a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	da0b      	bge.n	800c1ba <USBD_StdEPReq+0x212>
 800c1a2:	7bbb      	ldrb	r3, [r7, #14]
 800c1a4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c1a8:	4613      	mov	r3, r2
 800c1aa:	009b      	lsls	r3, r3, #2
 800c1ac:	4413      	add	r3, r2
 800c1ae:	009b      	lsls	r3, r3, #2
 800c1b0:	3310      	adds	r3, #16
 800c1b2:	687a      	ldr	r2, [r7, #4]
 800c1b4:	4413      	add	r3, r2
 800c1b6:	3304      	adds	r3, #4
 800c1b8:	e00b      	b.n	800c1d2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c1ba:	7bbb      	ldrb	r3, [r7, #14]
 800c1bc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c1c0:	4613      	mov	r3, r2
 800c1c2:	009b      	lsls	r3, r3, #2
 800c1c4:	4413      	add	r3, r2
 800c1c6:	009b      	lsls	r3, r3, #2
 800c1c8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c1cc:	687a      	ldr	r2, [r7, #4]
 800c1ce:	4413      	add	r3, r2
 800c1d0:	3304      	adds	r3, #4
 800c1d2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c1d4:	68bb      	ldr	r3, [r7, #8]
 800c1d6:	2200      	movs	r2, #0
 800c1d8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c1da:	68bb      	ldr	r3, [r7, #8]
 800c1dc:	2202      	movs	r2, #2
 800c1de:	4619      	mov	r1, r3
 800c1e0:	6878      	ldr	r0, [r7, #4]
 800c1e2:	f000 fc37 	bl	800ca54 <USBD_CtlSendData>
              break;
 800c1e6:	e06a      	b.n	800c2be <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c1e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	da11      	bge.n	800c214 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c1f0:	7bbb      	ldrb	r3, [r7, #14]
 800c1f2:	f003 020f 	and.w	r2, r3, #15
 800c1f6:	6879      	ldr	r1, [r7, #4]
 800c1f8:	4613      	mov	r3, r2
 800c1fa:	009b      	lsls	r3, r3, #2
 800c1fc:	4413      	add	r3, r2
 800c1fe:	009b      	lsls	r3, r3, #2
 800c200:	440b      	add	r3, r1
 800c202:	3324      	adds	r3, #36	; 0x24
 800c204:	881b      	ldrh	r3, [r3, #0]
 800c206:	2b00      	cmp	r3, #0
 800c208:	d117      	bne.n	800c23a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c20a:	6839      	ldr	r1, [r7, #0]
 800c20c:	6878      	ldr	r0, [r7, #4]
 800c20e:	f000 fbb0 	bl	800c972 <USBD_CtlError>
                  break;
 800c212:	e054      	b.n	800c2be <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c214:	7bbb      	ldrb	r3, [r7, #14]
 800c216:	f003 020f 	and.w	r2, r3, #15
 800c21a:	6879      	ldr	r1, [r7, #4]
 800c21c:	4613      	mov	r3, r2
 800c21e:	009b      	lsls	r3, r3, #2
 800c220:	4413      	add	r3, r2
 800c222:	009b      	lsls	r3, r3, #2
 800c224:	440b      	add	r3, r1
 800c226:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c22a:	881b      	ldrh	r3, [r3, #0]
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d104      	bne.n	800c23a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c230:	6839      	ldr	r1, [r7, #0]
 800c232:	6878      	ldr	r0, [r7, #4]
 800c234:	f000 fb9d 	bl	800c972 <USBD_CtlError>
                  break;
 800c238:	e041      	b.n	800c2be <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c23a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c23e:	2b00      	cmp	r3, #0
 800c240:	da0b      	bge.n	800c25a <USBD_StdEPReq+0x2b2>
 800c242:	7bbb      	ldrb	r3, [r7, #14]
 800c244:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c248:	4613      	mov	r3, r2
 800c24a:	009b      	lsls	r3, r3, #2
 800c24c:	4413      	add	r3, r2
 800c24e:	009b      	lsls	r3, r3, #2
 800c250:	3310      	adds	r3, #16
 800c252:	687a      	ldr	r2, [r7, #4]
 800c254:	4413      	add	r3, r2
 800c256:	3304      	adds	r3, #4
 800c258:	e00b      	b.n	800c272 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c25a:	7bbb      	ldrb	r3, [r7, #14]
 800c25c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c260:	4613      	mov	r3, r2
 800c262:	009b      	lsls	r3, r3, #2
 800c264:	4413      	add	r3, r2
 800c266:	009b      	lsls	r3, r3, #2
 800c268:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c26c:	687a      	ldr	r2, [r7, #4]
 800c26e:	4413      	add	r3, r2
 800c270:	3304      	adds	r3, #4
 800c272:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c274:	7bbb      	ldrb	r3, [r7, #14]
 800c276:	2b00      	cmp	r3, #0
 800c278:	d002      	beq.n	800c280 <USBD_StdEPReq+0x2d8>
 800c27a:	7bbb      	ldrb	r3, [r7, #14]
 800c27c:	2b80      	cmp	r3, #128	; 0x80
 800c27e:	d103      	bne.n	800c288 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800c280:	68bb      	ldr	r3, [r7, #8]
 800c282:	2200      	movs	r2, #0
 800c284:	601a      	str	r2, [r3, #0]
 800c286:	e00e      	b.n	800c2a6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c288:	7bbb      	ldrb	r3, [r7, #14]
 800c28a:	4619      	mov	r1, r3
 800c28c:	6878      	ldr	r0, [r7, #4]
 800c28e:	f000 ffef 	bl	800d270 <USBD_LL_IsStallEP>
 800c292:	4603      	mov	r3, r0
 800c294:	2b00      	cmp	r3, #0
 800c296:	d003      	beq.n	800c2a0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800c298:	68bb      	ldr	r3, [r7, #8]
 800c29a:	2201      	movs	r2, #1
 800c29c:	601a      	str	r2, [r3, #0]
 800c29e:	e002      	b.n	800c2a6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800c2a0:	68bb      	ldr	r3, [r7, #8]
 800c2a2:	2200      	movs	r2, #0
 800c2a4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c2a6:	68bb      	ldr	r3, [r7, #8]
 800c2a8:	2202      	movs	r2, #2
 800c2aa:	4619      	mov	r1, r3
 800c2ac:	6878      	ldr	r0, [r7, #4]
 800c2ae:	f000 fbd1 	bl	800ca54 <USBD_CtlSendData>
              break;
 800c2b2:	e004      	b.n	800c2be <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800c2b4:	6839      	ldr	r1, [r7, #0]
 800c2b6:	6878      	ldr	r0, [r7, #4]
 800c2b8:	f000 fb5b 	bl	800c972 <USBD_CtlError>
              break;
 800c2bc:	bf00      	nop
          }
          break;
 800c2be:	e004      	b.n	800c2ca <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800c2c0:	6839      	ldr	r1, [r7, #0]
 800c2c2:	6878      	ldr	r0, [r7, #4]
 800c2c4:	f000 fb55 	bl	800c972 <USBD_CtlError>
          break;
 800c2c8:	bf00      	nop
      }
      break;
 800c2ca:	e005      	b.n	800c2d8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800c2cc:	6839      	ldr	r1, [r7, #0]
 800c2ce:	6878      	ldr	r0, [r7, #4]
 800c2d0:	f000 fb4f 	bl	800c972 <USBD_CtlError>
      break;
 800c2d4:	e000      	b.n	800c2d8 <USBD_StdEPReq+0x330>
      break;
 800c2d6:	bf00      	nop
  }

  return ret;
 800c2d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2da:	4618      	mov	r0, r3
 800c2dc:	3710      	adds	r7, #16
 800c2de:	46bd      	mov	sp, r7
 800c2e0:	bd80      	pop	{r7, pc}
	...

0800c2e4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c2e4:	b580      	push	{r7, lr}
 800c2e6:	b084      	sub	sp, #16
 800c2e8:	af00      	add	r7, sp, #0
 800c2ea:	6078      	str	r0, [r7, #4]
 800c2ec:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c2ee:	2300      	movs	r3, #0
 800c2f0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c2f2:	2300      	movs	r3, #0
 800c2f4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c2f6:	2300      	movs	r3, #0
 800c2f8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c2fa:	683b      	ldr	r3, [r7, #0]
 800c2fc:	885b      	ldrh	r3, [r3, #2]
 800c2fe:	0a1b      	lsrs	r3, r3, #8
 800c300:	b29b      	uxth	r3, r3
 800c302:	3b01      	subs	r3, #1
 800c304:	2b06      	cmp	r3, #6
 800c306:	f200 8128 	bhi.w	800c55a <USBD_GetDescriptor+0x276>
 800c30a:	a201      	add	r2, pc, #4	; (adr r2, 800c310 <USBD_GetDescriptor+0x2c>)
 800c30c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c310:	0800c32d 	.word	0x0800c32d
 800c314:	0800c345 	.word	0x0800c345
 800c318:	0800c385 	.word	0x0800c385
 800c31c:	0800c55b 	.word	0x0800c55b
 800c320:	0800c55b 	.word	0x0800c55b
 800c324:	0800c4fb 	.word	0x0800c4fb
 800c328:	0800c527 	.word	0x0800c527
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	687a      	ldr	r2, [r7, #4]
 800c336:	7c12      	ldrb	r2, [r2, #16]
 800c338:	f107 0108 	add.w	r1, r7, #8
 800c33c:	4610      	mov	r0, r2
 800c33e:	4798      	blx	r3
 800c340:	60f8      	str	r0, [r7, #12]
      break;
 800c342:	e112      	b.n	800c56a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	7c1b      	ldrb	r3, [r3, #16]
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d10d      	bne.n	800c368 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c354:	f107 0208 	add.w	r2, r7, #8
 800c358:	4610      	mov	r0, r2
 800c35a:	4798      	blx	r3
 800c35c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	3301      	adds	r3, #1
 800c362:	2202      	movs	r2, #2
 800c364:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c366:	e100      	b.n	800c56a <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c36e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c370:	f107 0208 	add.w	r2, r7, #8
 800c374:	4610      	mov	r0, r2
 800c376:	4798      	blx	r3
 800c378:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	3301      	adds	r3, #1
 800c37e:	2202      	movs	r2, #2
 800c380:	701a      	strb	r2, [r3, #0]
      break;
 800c382:	e0f2      	b.n	800c56a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c384:	683b      	ldr	r3, [r7, #0]
 800c386:	885b      	ldrh	r3, [r3, #2]
 800c388:	b2db      	uxtb	r3, r3
 800c38a:	2b05      	cmp	r3, #5
 800c38c:	f200 80ac 	bhi.w	800c4e8 <USBD_GetDescriptor+0x204>
 800c390:	a201      	add	r2, pc, #4	; (adr r2, 800c398 <USBD_GetDescriptor+0xb4>)
 800c392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c396:	bf00      	nop
 800c398:	0800c3b1 	.word	0x0800c3b1
 800c39c:	0800c3e5 	.word	0x0800c3e5
 800c3a0:	0800c419 	.word	0x0800c419
 800c3a4:	0800c44d 	.word	0x0800c44d
 800c3a8:	0800c481 	.word	0x0800c481
 800c3ac:	0800c4b5 	.word	0x0800c4b5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c3b6:	685b      	ldr	r3, [r3, #4]
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d00b      	beq.n	800c3d4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c3c2:	685b      	ldr	r3, [r3, #4]
 800c3c4:	687a      	ldr	r2, [r7, #4]
 800c3c6:	7c12      	ldrb	r2, [r2, #16]
 800c3c8:	f107 0108 	add.w	r1, r7, #8
 800c3cc:	4610      	mov	r0, r2
 800c3ce:	4798      	blx	r3
 800c3d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c3d2:	e091      	b.n	800c4f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c3d4:	6839      	ldr	r1, [r7, #0]
 800c3d6:	6878      	ldr	r0, [r7, #4]
 800c3d8:	f000 facb 	bl	800c972 <USBD_CtlError>
            err++;
 800c3dc:	7afb      	ldrb	r3, [r7, #11]
 800c3de:	3301      	adds	r3, #1
 800c3e0:	72fb      	strb	r3, [r7, #11]
          break;
 800c3e2:	e089      	b.n	800c4f8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c3ea:	689b      	ldr	r3, [r3, #8]
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d00b      	beq.n	800c408 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c3f6:	689b      	ldr	r3, [r3, #8]
 800c3f8:	687a      	ldr	r2, [r7, #4]
 800c3fa:	7c12      	ldrb	r2, [r2, #16]
 800c3fc:	f107 0108 	add.w	r1, r7, #8
 800c400:	4610      	mov	r0, r2
 800c402:	4798      	blx	r3
 800c404:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c406:	e077      	b.n	800c4f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c408:	6839      	ldr	r1, [r7, #0]
 800c40a:	6878      	ldr	r0, [r7, #4]
 800c40c:	f000 fab1 	bl	800c972 <USBD_CtlError>
            err++;
 800c410:	7afb      	ldrb	r3, [r7, #11]
 800c412:	3301      	adds	r3, #1
 800c414:	72fb      	strb	r3, [r7, #11]
          break;
 800c416:	e06f      	b.n	800c4f8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c41e:	68db      	ldr	r3, [r3, #12]
 800c420:	2b00      	cmp	r3, #0
 800c422:	d00b      	beq.n	800c43c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c42a:	68db      	ldr	r3, [r3, #12]
 800c42c:	687a      	ldr	r2, [r7, #4]
 800c42e:	7c12      	ldrb	r2, [r2, #16]
 800c430:	f107 0108 	add.w	r1, r7, #8
 800c434:	4610      	mov	r0, r2
 800c436:	4798      	blx	r3
 800c438:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c43a:	e05d      	b.n	800c4f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c43c:	6839      	ldr	r1, [r7, #0]
 800c43e:	6878      	ldr	r0, [r7, #4]
 800c440:	f000 fa97 	bl	800c972 <USBD_CtlError>
            err++;
 800c444:	7afb      	ldrb	r3, [r7, #11]
 800c446:	3301      	adds	r3, #1
 800c448:	72fb      	strb	r3, [r7, #11]
          break;
 800c44a:	e055      	b.n	800c4f8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c452:	691b      	ldr	r3, [r3, #16]
 800c454:	2b00      	cmp	r3, #0
 800c456:	d00b      	beq.n	800c470 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c45e:	691b      	ldr	r3, [r3, #16]
 800c460:	687a      	ldr	r2, [r7, #4]
 800c462:	7c12      	ldrb	r2, [r2, #16]
 800c464:	f107 0108 	add.w	r1, r7, #8
 800c468:	4610      	mov	r0, r2
 800c46a:	4798      	blx	r3
 800c46c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c46e:	e043      	b.n	800c4f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c470:	6839      	ldr	r1, [r7, #0]
 800c472:	6878      	ldr	r0, [r7, #4]
 800c474:	f000 fa7d 	bl	800c972 <USBD_CtlError>
            err++;
 800c478:	7afb      	ldrb	r3, [r7, #11]
 800c47a:	3301      	adds	r3, #1
 800c47c:	72fb      	strb	r3, [r7, #11]
          break;
 800c47e:	e03b      	b.n	800c4f8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c486:	695b      	ldr	r3, [r3, #20]
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d00b      	beq.n	800c4a4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c492:	695b      	ldr	r3, [r3, #20]
 800c494:	687a      	ldr	r2, [r7, #4]
 800c496:	7c12      	ldrb	r2, [r2, #16]
 800c498:	f107 0108 	add.w	r1, r7, #8
 800c49c:	4610      	mov	r0, r2
 800c49e:	4798      	blx	r3
 800c4a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c4a2:	e029      	b.n	800c4f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c4a4:	6839      	ldr	r1, [r7, #0]
 800c4a6:	6878      	ldr	r0, [r7, #4]
 800c4a8:	f000 fa63 	bl	800c972 <USBD_CtlError>
            err++;
 800c4ac:	7afb      	ldrb	r3, [r7, #11]
 800c4ae:	3301      	adds	r3, #1
 800c4b0:	72fb      	strb	r3, [r7, #11]
          break;
 800c4b2:	e021      	b.n	800c4f8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c4ba:	699b      	ldr	r3, [r3, #24]
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d00b      	beq.n	800c4d8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c4c6:	699b      	ldr	r3, [r3, #24]
 800c4c8:	687a      	ldr	r2, [r7, #4]
 800c4ca:	7c12      	ldrb	r2, [r2, #16]
 800c4cc:	f107 0108 	add.w	r1, r7, #8
 800c4d0:	4610      	mov	r0, r2
 800c4d2:	4798      	blx	r3
 800c4d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c4d6:	e00f      	b.n	800c4f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c4d8:	6839      	ldr	r1, [r7, #0]
 800c4da:	6878      	ldr	r0, [r7, #4]
 800c4dc:	f000 fa49 	bl	800c972 <USBD_CtlError>
            err++;
 800c4e0:	7afb      	ldrb	r3, [r7, #11]
 800c4e2:	3301      	adds	r3, #1
 800c4e4:	72fb      	strb	r3, [r7, #11]
          break;
 800c4e6:	e007      	b.n	800c4f8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c4e8:	6839      	ldr	r1, [r7, #0]
 800c4ea:	6878      	ldr	r0, [r7, #4]
 800c4ec:	f000 fa41 	bl	800c972 <USBD_CtlError>
          err++;
 800c4f0:	7afb      	ldrb	r3, [r7, #11]
 800c4f2:	3301      	adds	r3, #1
 800c4f4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800c4f6:	bf00      	nop
      }
      break;
 800c4f8:	e037      	b.n	800c56a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	7c1b      	ldrb	r3, [r3, #16]
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d109      	bne.n	800c516 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c508:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c50a:	f107 0208 	add.w	r2, r7, #8
 800c50e:	4610      	mov	r0, r2
 800c510:	4798      	blx	r3
 800c512:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c514:	e029      	b.n	800c56a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c516:	6839      	ldr	r1, [r7, #0]
 800c518:	6878      	ldr	r0, [r7, #4]
 800c51a:	f000 fa2a 	bl	800c972 <USBD_CtlError>
        err++;
 800c51e:	7afb      	ldrb	r3, [r7, #11]
 800c520:	3301      	adds	r3, #1
 800c522:	72fb      	strb	r3, [r7, #11]
      break;
 800c524:	e021      	b.n	800c56a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	7c1b      	ldrb	r3, [r3, #16]
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d10d      	bne.n	800c54a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c536:	f107 0208 	add.w	r2, r7, #8
 800c53a:	4610      	mov	r0, r2
 800c53c:	4798      	blx	r3
 800c53e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	3301      	adds	r3, #1
 800c544:	2207      	movs	r2, #7
 800c546:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c548:	e00f      	b.n	800c56a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c54a:	6839      	ldr	r1, [r7, #0]
 800c54c:	6878      	ldr	r0, [r7, #4]
 800c54e:	f000 fa10 	bl	800c972 <USBD_CtlError>
        err++;
 800c552:	7afb      	ldrb	r3, [r7, #11]
 800c554:	3301      	adds	r3, #1
 800c556:	72fb      	strb	r3, [r7, #11]
      break;
 800c558:	e007      	b.n	800c56a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800c55a:	6839      	ldr	r1, [r7, #0]
 800c55c:	6878      	ldr	r0, [r7, #4]
 800c55e:	f000 fa08 	bl	800c972 <USBD_CtlError>
      err++;
 800c562:	7afb      	ldrb	r3, [r7, #11]
 800c564:	3301      	adds	r3, #1
 800c566:	72fb      	strb	r3, [r7, #11]
      break;
 800c568:	bf00      	nop
  }

  if (err != 0U)
 800c56a:	7afb      	ldrb	r3, [r7, #11]
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d11e      	bne.n	800c5ae <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800c570:	683b      	ldr	r3, [r7, #0]
 800c572:	88db      	ldrh	r3, [r3, #6]
 800c574:	2b00      	cmp	r3, #0
 800c576:	d016      	beq.n	800c5a6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800c578:	893b      	ldrh	r3, [r7, #8]
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d00e      	beq.n	800c59c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800c57e:	683b      	ldr	r3, [r7, #0]
 800c580:	88da      	ldrh	r2, [r3, #6]
 800c582:	893b      	ldrh	r3, [r7, #8]
 800c584:	4293      	cmp	r3, r2
 800c586:	bf28      	it	cs
 800c588:	4613      	movcs	r3, r2
 800c58a:	b29b      	uxth	r3, r3
 800c58c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c58e:	893b      	ldrh	r3, [r7, #8]
 800c590:	461a      	mov	r2, r3
 800c592:	68f9      	ldr	r1, [r7, #12]
 800c594:	6878      	ldr	r0, [r7, #4]
 800c596:	f000 fa5d 	bl	800ca54 <USBD_CtlSendData>
 800c59a:	e009      	b.n	800c5b0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c59c:	6839      	ldr	r1, [r7, #0]
 800c59e:	6878      	ldr	r0, [r7, #4]
 800c5a0:	f000 f9e7 	bl	800c972 <USBD_CtlError>
 800c5a4:	e004      	b.n	800c5b0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c5a6:	6878      	ldr	r0, [r7, #4]
 800c5a8:	f000 faae 	bl	800cb08 <USBD_CtlSendStatus>
 800c5ac:	e000      	b.n	800c5b0 <USBD_GetDescriptor+0x2cc>
    return;
 800c5ae:	bf00      	nop
  }
}
 800c5b0:	3710      	adds	r7, #16
 800c5b2:	46bd      	mov	sp, r7
 800c5b4:	bd80      	pop	{r7, pc}
 800c5b6:	bf00      	nop

0800c5b8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c5b8:	b580      	push	{r7, lr}
 800c5ba:	b084      	sub	sp, #16
 800c5bc:	af00      	add	r7, sp, #0
 800c5be:	6078      	str	r0, [r7, #4]
 800c5c0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c5c2:	683b      	ldr	r3, [r7, #0]
 800c5c4:	889b      	ldrh	r3, [r3, #4]
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d131      	bne.n	800c62e <USBD_SetAddress+0x76>
 800c5ca:	683b      	ldr	r3, [r7, #0]
 800c5cc:	88db      	ldrh	r3, [r3, #6]
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d12d      	bne.n	800c62e <USBD_SetAddress+0x76>
 800c5d2:	683b      	ldr	r3, [r7, #0]
 800c5d4:	885b      	ldrh	r3, [r3, #2]
 800c5d6:	2b7f      	cmp	r3, #127	; 0x7f
 800c5d8:	d829      	bhi.n	800c62e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c5da:	683b      	ldr	r3, [r7, #0]
 800c5dc:	885b      	ldrh	r3, [r3, #2]
 800c5de:	b2db      	uxtb	r3, r3
 800c5e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c5e4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c5ec:	b2db      	uxtb	r3, r3
 800c5ee:	2b03      	cmp	r3, #3
 800c5f0:	d104      	bne.n	800c5fc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c5f2:	6839      	ldr	r1, [r7, #0]
 800c5f4:	6878      	ldr	r0, [r7, #4]
 800c5f6:	f000 f9bc 	bl	800c972 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c5fa:	e01d      	b.n	800c638 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	7bfa      	ldrb	r2, [r7, #15]
 800c600:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c604:	7bfb      	ldrb	r3, [r7, #15]
 800c606:	4619      	mov	r1, r3
 800c608:	6878      	ldr	r0, [r7, #4]
 800c60a:	f000 fe5d 	bl	800d2c8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c60e:	6878      	ldr	r0, [r7, #4]
 800c610:	f000 fa7a 	bl	800cb08 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c614:	7bfb      	ldrb	r3, [r7, #15]
 800c616:	2b00      	cmp	r3, #0
 800c618:	d004      	beq.n	800c624 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	2202      	movs	r2, #2
 800c61e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c622:	e009      	b.n	800c638 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	2201      	movs	r2, #1
 800c628:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c62c:	e004      	b.n	800c638 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c62e:	6839      	ldr	r1, [r7, #0]
 800c630:	6878      	ldr	r0, [r7, #4]
 800c632:	f000 f99e 	bl	800c972 <USBD_CtlError>
  }
}
 800c636:	bf00      	nop
 800c638:	bf00      	nop
 800c63a:	3710      	adds	r7, #16
 800c63c:	46bd      	mov	sp, r7
 800c63e:	bd80      	pop	{r7, pc}

0800c640 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c640:	b580      	push	{r7, lr}
 800c642:	b084      	sub	sp, #16
 800c644:	af00      	add	r7, sp, #0
 800c646:	6078      	str	r0, [r7, #4]
 800c648:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c64a:	2300      	movs	r3, #0
 800c64c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c64e:	683b      	ldr	r3, [r7, #0]
 800c650:	885b      	ldrh	r3, [r3, #2]
 800c652:	b2da      	uxtb	r2, r3
 800c654:	4b4e      	ldr	r3, [pc, #312]	; (800c790 <USBD_SetConfig+0x150>)
 800c656:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c658:	4b4d      	ldr	r3, [pc, #308]	; (800c790 <USBD_SetConfig+0x150>)
 800c65a:	781b      	ldrb	r3, [r3, #0]
 800c65c:	2b01      	cmp	r3, #1
 800c65e:	d905      	bls.n	800c66c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c660:	6839      	ldr	r1, [r7, #0]
 800c662:	6878      	ldr	r0, [r7, #4]
 800c664:	f000 f985 	bl	800c972 <USBD_CtlError>
    return USBD_FAIL;
 800c668:	2303      	movs	r3, #3
 800c66a:	e08c      	b.n	800c786 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c672:	b2db      	uxtb	r3, r3
 800c674:	2b02      	cmp	r3, #2
 800c676:	d002      	beq.n	800c67e <USBD_SetConfig+0x3e>
 800c678:	2b03      	cmp	r3, #3
 800c67a:	d029      	beq.n	800c6d0 <USBD_SetConfig+0x90>
 800c67c:	e075      	b.n	800c76a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c67e:	4b44      	ldr	r3, [pc, #272]	; (800c790 <USBD_SetConfig+0x150>)
 800c680:	781b      	ldrb	r3, [r3, #0]
 800c682:	2b00      	cmp	r3, #0
 800c684:	d020      	beq.n	800c6c8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800c686:	4b42      	ldr	r3, [pc, #264]	; (800c790 <USBD_SetConfig+0x150>)
 800c688:	781b      	ldrb	r3, [r3, #0]
 800c68a:	461a      	mov	r2, r3
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c690:	4b3f      	ldr	r3, [pc, #252]	; (800c790 <USBD_SetConfig+0x150>)
 800c692:	781b      	ldrb	r3, [r3, #0]
 800c694:	4619      	mov	r1, r3
 800c696:	6878      	ldr	r0, [r7, #4]
 800c698:	f7fe ffe7 	bl	800b66a <USBD_SetClassConfig>
 800c69c:	4603      	mov	r3, r0
 800c69e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c6a0:	7bfb      	ldrb	r3, [r7, #15]
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d008      	beq.n	800c6b8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800c6a6:	6839      	ldr	r1, [r7, #0]
 800c6a8:	6878      	ldr	r0, [r7, #4]
 800c6aa:	f000 f962 	bl	800c972 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	2202      	movs	r2, #2
 800c6b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c6b6:	e065      	b.n	800c784 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c6b8:	6878      	ldr	r0, [r7, #4]
 800c6ba:	f000 fa25 	bl	800cb08 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	2203      	movs	r2, #3
 800c6c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c6c6:	e05d      	b.n	800c784 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c6c8:	6878      	ldr	r0, [r7, #4]
 800c6ca:	f000 fa1d 	bl	800cb08 <USBD_CtlSendStatus>
      break;
 800c6ce:	e059      	b.n	800c784 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c6d0:	4b2f      	ldr	r3, [pc, #188]	; (800c790 <USBD_SetConfig+0x150>)
 800c6d2:	781b      	ldrb	r3, [r3, #0]
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d112      	bne.n	800c6fe <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	2202      	movs	r2, #2
 800c6dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800c6e0:	4b2b      	ldr	r3, [pc, #172]	; (800c790 <USBD_SetConfig+0x150>)
 800c6e2:	781b      	ldrb	r3, [r3, #0]
 800c6e4:	461a      	mov	r2, r3
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c6ea:	4b29      	ldr	r3, [pc, #164]	; (800c790 <USBD_SetConfig+0x150>)
 800c6ec:	781b      	ldrb	r3, [r3, #0]
 800c6ee:	4619      	mov	r1, r3
 800c6f0:	6878      	ldr	r0, [r7, #4]
 800c6f2:	f7fe ffd6 	bl	800b6a2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c6f6:	6878      	ldr	r0, [r7, #4]
 800c6f8:	f000 fa06 	bl	800cb08 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c6fc:	e042      	b.n	800c784 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800c6fe:	4b24      	ldr	r3, [pc, #144]	; (800c790 <USBD_SetConfig+0x150>)
 800c700:	781b      	ldrb	r3, [r3, #0]
 800c702:	461a      	mov	r2, r3
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	685b      	ldr	r3, [r3, #4]
 800c708:	429a      	cmp	r2, r3
 800c70a:	d02a      	beq.n	800c762 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	685b      	ldr	r3, [r3, #4]
 800c710:	b2db      	uxtb	r3, r3
 800c712:	4619      	mov	r1, r3
 800c714:	6878      	ldr	r0, [r7, #4]
 800c716:	f7fe ffc4 	bl	800b6a2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c71a:	4b1d      	ldr	r3, [pc, #116]	; (800c790 <USBD_SetConfig+0x150>)
 800c71c:	781b      	ldrb	r3, [r3, #0]
 800c71e:	461a      	mov	r2, r3
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c724:	4b1a      	ldr	r3, [pc, #104]	; (800c790 <USBD_SetConfig+0x150>)
 800c726:	781b      	ldrb	r3, [r3, #0]
 800c728:	4619      	mov	r1, r3
 800c72a:	6878      	ldr	r0, [r7, #4]
 800c72c:	f7fe ff9d 	bl	800b66a <USBD_SetClassConfig>
 800c730:	4603      	mov	r3, r0
 800c732:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c734:	7bfb      	ldrb	r3, [r7, #15]
 800c736:	2b00      	cmp	r3, #0
 800c738:	d00f      	beq.n	800c75a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800c73a:	6839      	ldr	r1, [r7, #0]
 800c73c:	6878      	ldr	r0, [r7, #4]
 800c73e:	f000 f918 	bl	800c972 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	685b      	ldr	r3, [r3, #4]
 800c746:	b2db      	uxtb	r3, r3
 800c748:	4619      	mov	r1, r3
 800c74a:	6878      	ldr	r0, [r7, #4]
 800c74c:	f7fe ffa9 	bl	800b6a2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	2202      	movs	r2, #2
 800c754:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c758:	e014      	b.n	800c784 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c75a:	6878      	ldr	r0, [r7, #4]
 800c75c:	f000 f9d4 	bl	800cb08 <USBD_CtlSendStatus>
      break;
 800c760:	e010      	b.n	800c784 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c762:	6878      	ldr	r0, [r7, #4]
 800c764:	f000 f9d0 	bl	800cb08 <USBD_CtlSendStatus>
      break;
 800c768:	e00c      	b.n	800c784 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800c76a:	6839      	ldr	r1, [r7, #0]
 800c76c:	6878      	ldr	r0, [r7, #4]
 800c76e:	f000 f900 	bl	800c972 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c772:	4b07      	ldr	r3, [pc, #28]	; (800c790 <USBD_SetConfig+0x150>)
 800c774:	781b      	ldrb	r3, [r3, #0]
 800c776:	4619      	mov	r1, r3
 800c778:	6878      	ldr	r0, [r7, #4]
 800c77a:	f7fe ff92 	bl	800b6a2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c77e:	2303      	movs	r3, #3
 800c780:	73fb      	strb	r3, [r7, #15]
      break;
 800c782:	bf00      	nop
  }

  return ret;
 800c784:	7bfb      	ldrb	r3, [r7, #15]
}
 800c786:	4618      	mov	r0, r3
 800c788:	3710      	adds	r7, #16
 800c78a:	46bd      	mov	sp, r7
 800c78c:	bd80      	pop	{r7, pc}
 800c78e:	bf00      	nop
 800c790:	20000dc0 	.word	0x20000dc0

0800c794 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c794:	b580      	push	{r7, lr}
 800c796:	b082      	sub	sp, #8
 800c798:	af00      	add	r7, sp, #0
 800c79a:	6078      	str	r0, [r7, #4]
 800c79c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c79e:	683b      	ldr	r3, [r7, #0]
 800c7a0:	88db      	ldrh	r3, [r3, #6]
 800c7a2:	2b01      	cmp	r3, #1
 800c7a4:	d004      	beq.n	800c7b0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c7a6:	6839      	ldr	r1, [r7, #0]
 800c7a8:	6878      	ldr	r0, [r7, #4]
 800c7aa:	f000 f8e2 	bl	800c972 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c7ae:	e023      	b.n	800c7f8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c7b6:	b2db      	uxtb	r3, r3
 800c7b8:	2b02      	cmp	r3, #2
 800c7ba:	dc02      	bgt.n	800c7c2 <USBD_GetConfig+0x2e>
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	dc03      	bgt.n	800c7c8 <USBD_GetConfig+0x34>
 800c7c0:	e015      	b.n	800c7ee <USBD_GetConfig+0x5a>
 800c7c2:	2b03      	cmp	r3, #3
 800c7c4:	d00b      	beq.n	800c7de <USBD_GetConfig+0x4a>
 800c7c6:	e012      	b.n	800c7ee <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	2200      	movs	r2, #0
 800c7cc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	3308      	adds	r3, #8
 800c7d2:	2201      	movs	r2, #1
 800c7d4:	4619      	mov	r1, r3
 800c7d6:	6878      	ldr	r0, [r7, #4]
 800c7d8:	f000 f93c 	bl	800ca54 <USBD_CtlSendData>
        break;
 800c7dc:	e00c      	b.n	800c7f8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	3304      	adds	r3, #4
 800c7e2:	2201      	movs	r2, #1
 800c7e4:	4619      	mov	r1, r3
 800c7e6:	6878      	ldr	r0, [r7, #4]
 800c7e8:	f000 f934 	bl	800ca54 <USBD_CtlSendData>
        break;
 800c7ec:	e004      	b.n	800c7f8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c7ee:	6839      	ldr	r1, [r7, #0]
 800c7f0:	6878      	ldr	r0, [r7, #4]
 800c7f2:	f000 f8be 	bl	800c972 <USBD_CtlError>
        break;
 800c7f6:	bf00      	nop
}
 800c7f8:	bf00      	nop
 800c7fa:	3708      	adds	r7, #8
 800c7fc:	46bd      	mov	sp, r7
 800c7fe:	bd80      	pop	{r7, pc}

0800c800 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c800:	b580      	push	{r7, lr}
 800c802:	b082      	sub	sp, #8
 800c804:	af00      	add	r7, sp, #0
 800c806:	6078      	str	r0, [r7, #4]
 800c808:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c810:	b2db      	uxtb	r3, r3
 800c812:	3b01      	subs	r3, #1
 800c814:	2b02      	cmp	r3, #2
 800c816:	d81e      	bhi.n	800c856 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c818:	683b      	ldr	r3, [r7, #0]
 800c81a:	88db      	ldrh	r3, [r3, #6]
 800c81c:	2b02      	cmp	r3, #2
 800c81e:	d004      	beq.n	800c82a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c820:	6839      	ldr	r1, [r7, #0]
 800c822:	6878      	ldr	r0, [r7, #4]
 800c824:	f000 f8a5 	bl	800c972 <USBD_CtlError>
        break;
 800c828:	e01a      	b.n	800c860 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	2201      	movs	r2, #1
 800c82e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c836:	2b00      	cmp	r3, #0
 800c838:	d005      	beq.n	800c846 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	68db      	ldr	r3, [r3, #12]
 800c83e:	f043 0202 	orr.w	r2, r3, #2
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	330c      	adds	r3, #12
 800c84a:	2202      	movs	r2, #2
 800c84c:	4619      	mov	r1, r3
 800c84e:	6878      	ldr	r0, [r7, #4]
 800c850:	f000 f900 	bl	800ca54 <USBD_CtlSendData>
      break;
 800c854:	e004      	b.n	800c860 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c856:	6839      	ldr	r1, [r7, #0]
 800c858:	6878      	ldr	r0, [r7, #4]
 800c85a:	f000 f88a 	bl	800c972 <USBD_CtlError>
      break;
 800c85e:	bf00      	nop
  }
}
 800c860:	bf00      	nop
 800c862:	3708      	adds	r7, #8
 800c864:	46bd      	mov	sp, r7
 800c866:	bd80      	pop	{r7, pc}

0800c868 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c868:	b580      	push	{r7, lr}
 800c86a:	b082      	sub	sp, #8
 800c86c:	af00      	add	r7, sp, #0
 800c86e:	6078      	str	r0, [r7, #4]
 800c870:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c872:	683b      	ldr	r3, [r7, #0]
 800c874:	885b      	ldrh	r3, [r3, #2]
 800c876:	2b01      	cmp	r3, #1
 800c878:	d107      	bne.n	800c88a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	2201      	movs	r2, #1
 800c87e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c882:	6878      	ldr	r0, [r7, #4]
 800c884:	f000 f940 	bl	800cb08 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800c888:	e013      	b.n	800c8b2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800c88a:	683b      	ldr	r3, [r7, #0]
 800c88c:	885b      	ldrh	r3, [r3, #2]
 800c88e:	2b02      	cmp	r3, #2
 800c890:	d10b      	bne.n	800c8aa <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800c892:	683b      	ldr	r3, [r7, #0]
 800c894:	889b      	ldrh	r3, [r3, #4]
 800c896:	0a1b      	lsrs	r3, r3, #8
 800c898:	b29b      	uxth	r3, r3
 800c89a:	b2da      	uxtb	r2, r3
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800c8a2:	6878      	ldr	r0, [r7, #4]
 800c8a4:	f000 f930 	bl	800cb08 <USBD_CtlSendStatus>
}
 800c8a8:	e003      	b.n	800c8b2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800c8aa:	6839      	ldr	r1, [r7, #0]
 800c8ac:	6878      	ldr	r0, [r7, #4]
 800c8ae:	f000 f860 	bl	800c972 <USBD_CtlError>
}
 800c8b2:	bf00      	nop
 800c8b4:	3708      	adds	r7, #8
 800c8b6:	46bd      	mov	sp, r7
 800c8b8:	bd80      	pop	{r7, pc}

0800c8ba <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c8ba:	b580      	push	{r7, lr}
 800c8bc:	b082      	sub	sp, #8
 800c8be:	af00      	add	r7, sp, #0
 800c8c0:	6078      	str	r0, [r7, #4]
 800c8c2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c8ca:	b2db      	uxtb	r3, r3
 800c8cc:	3b01      	subs	r3, #1
 800c8ce:	2b02      	cmp	r3, #2
 800c8d0:	d80b      	bhi.n	800c8ea <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c8d2:	683b      	ldr	r3, [r7, #0]
 800c8d4:	885b      	ldrh	r3, [r3, #2]
 800c8d6:	2b01      	cmp	r3, #1
 800c8d8:	d10c      	bne.n	800c8f4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	2200      	movs	r2, #0
 800c8de:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c8e2:	6878      	ldr	r0, [r7, #4]
 800c8e4:	f000 f910 	bl	800cb08 <USBD_CtlSendStatus>
      }
      break;
 800c8e8:	e004      	b.n	800c8f4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c8ea:	6839      	ldr	r1, [r7, #0]
 800c8ec:	6878      	ldr	r0, [r7, #4]
 800c8ee:	f000 f840 	bl	800c972 <USBD_CtlError>
      break;
 800c8f2:	e000      	b.n	800c8f6 <USBD_ClrFeature+0x3c>
      break;
 800c8f4:	bf00      	nop
  }
}
 800c8f6:	bf00      	nop
 800c8f8:	3708      	adds	r7, #8
 800c8fa:	46bd      	mov	sp, r7
 800c8fc:	bd80      	pop	{r7, pc}

0800c8fe <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c8fe:	b580      	push	{r7, lr}
 800c900:	b084      	sub	sp, #16
 800c902:	af00      	add	r7, sp, #0
 800c904:	6078      	str	r0, [r7, #4]
 800c906:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c908:	683b      	ldr	r3, [r7, #0]
 800c90a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	781a      	ldrb	r2, [r3, #0]
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	3301      	adds	r3, #1
 800c918:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	781a      	ldrb	r2, [r3, #0]
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	3301      	adds	r3, #1
 800c926:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c928:	68f8      	ldr	r0, [r7, #12]
 800c92a:	f7ff fa41 	bl	800bdb0 <SWAPBYTE>
 800c92e:	4603      	mov	r3, r0
 800c930:	461a      	mov	r2, r3
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	3301      	adds	r3, #1
 800c93a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	3301      	adds	r3, #1
 800c940:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c942:	68f8      	ldr	r0, [r7, #12]
 800c944:	f7ff fa34 	bl	800bdb0 <SWAPBYTE>
 800c948:	4603      	mov	r3, r0
 800c94a:	461a      	mov	r2, r3
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	3301      	adds	r3, #1
 800c954:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	3301      	adds	r3, #1
 800c95a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c95c:	68f8      	ldr	r0, [r7, #12]
 800c95e:	f7ff fa27 	bl	800bdb0 <SWAPBYTE>
 800c962:	4603      	mov	r3, r0
 800c964:	461a      	mov	r2, r3
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	80da      	strh	r2, [r3, #6]
}
 800c96a:	bf00      	nop
 800c96c:	3710      	adds	r7, #16
 800c96e:	46bd      	mov	sp, r7
 800c970:	bd80      	pop	{r7, pc}

0800c972 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c972:	b580      	push	{r7, lr}
 800c974:	b082      	sub	sp, #8
 800c976:	af00      	add	r7, sp, #0
 800c978:	6078      	str	r0, [r7, #4]
 800c97a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c97c:	2180      	movs	r1, #128	; 0x80
 800c97e:	6878      	ldr	r0, [r7, #4]
 800c980:	f000 fc38 	bl	800d1f4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c984:	2100      	movs	r1, #0
 800c986:	6878      	ldr	r0, [r7, #4]
 800c988:	f000 fc34 	bl	800d1f4 <USBD_LL_StallEP>
}
 800c98c:	bf00      	nop
 800c98e:	3708      	adds	r7, #8
 800c990:	46bd      	mov	sp, r7
 800c992:	bd80      	pop	{r7, pc}

0800c994 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c994:	b580      	push	{r7, lr}
 800c996:	b086      	sub	sp, #24
 800c998:	af00      	add	r7, sp, #0
 800c99a:	60f8      	str	r0, [r7, #12]
 800c99c:	60b9      	str	r1, [r7, #8]
 800c99e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c9a0:	2300      	movs	r3, #0
 800c9a2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d036      	beq.n	800ca18 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c9ae:	6938      	ldr	r0, [r7, #16]
 800c9b0:	f000 f836 	bl	800ca20 <USBD_GetLen>
 800c9b4:	4603      	mov	r3, r0
 800c9b6:	3301      	adds	r3, #1
 800c9b8:	b29b      	uxth	r3, r3
 800c9ba:	005b      	lsls	r3, r3, #1
 800c9bc:	b29a      	uxth	r2, r3
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c9c2:	7dfb      	ldrb	r3, [r7, #23]
 800c9c4:	68ba      	ldr	r2, [r7, #8]
 800c9c6:	4413      	add	r3, r2
 800c9c8:	687a      	ldr	r2, [r7, #4]
 800c9ca:	7812      	ldrb	r2, [r2, #0]
 800c9cc:	701a      	strb	r2, [r3, #0]
  idx++;
 800c9ce:	7dfb      	ldrb	r3, [r7, #23]
 800c9d0:	3301      	adds	r3, #1
 800c9d2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c9d4:	7dfb      	ldrb	r3, [r7, #23]
 800c9d6:	68ba      	ldr	r2, [r7, #8]
 800c9d8:	4413      	add	r3, r2
 800c9da:	2203      	movs	r2, #3
 800c9dc:	701a      	strb	r2, [r3, #0]
  idx++;
 800c9de:	7dfb      	ldrb	r3, [r7, #23]
 800c9e0:	3301      	adds	r3, #1
 800c9e2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c9e4:	e013      	b.n	800ca0e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800c9e6:	7dfb      	ldrb	r3, [r7, #23]
 800c9e8:	68ba      	ldr	r2, [r7, #8]
 800c9ea:	4413      	add	r3, r2
 800c9ec:	693a      	ldr	r2, [r7, #16]
 800c9ee:	7812      	ldrb	r2, [r2, #0]
 800c9f0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c9f2:	693b      	ldr	r3, [r7, #16]
 800c9f4:	3301      	adds	r3, #1
 800c9f6:	613b      	str	r3, [r7, #16]
    idx++;
 800c9f8:	7dfb      	ldrb	r3, [r7, #23]
 800c9fa:	3301      	adds	r3, #1
 800c9fc:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c9fe:	7dfb      	ldrb	r3, [r7, #23]
 800ca00:	68ba      	ldr	r2, [r7, #8]
 800ca02:	4413      	add	r3, r2
 800ca04:	2200      	movs	r2, #0
 800ca06:	701a      	strb	r2, [r3, #0]
    idx++;
 800ca08:	7dfb      	ldrb	r3, [r7, #23]
 800ca0a:	3301      	adds	r3, #1
 800ca0c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ca0e:	693b      	ldr	r3, [r7, #16]
 800ca10:	781b      	ldrb	r3, [r3, #0]
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d1e7      	bne.n	800c9e6 <USBD_GetString+0x52>
 800ca16:	e000      	b.n	800ca1a <USBD_GetString+0x86>
    return;
 800ca18:	bf00      	nop
  }
}
 800ca1a:	3718      	adds	r7, #24
 800ca1c:	46bd      	mov	sp, r7
 800ca1e:	bd80      	pop	{r7, pc}

0800ca20 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ca20:	b480      	push	{r7}
 800ca22:	b085      	sub	sp, #20
 800ca24:	af00      	add	r7, sp, #0
 800ca26:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ca28:	2300      	movs	r3, #0
 800ca2a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ca30:	e005      	b.n	800ca3e <USBD_GetLen+0x1e>
  {
    len++;
 800ca32:	7bfb      	ldrb	r3, [r7, #15]
 800ca34:	3301      	adds	r3, #1
 800ca36:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ca38:	68bb      	ldr	r3, [r7, #8]
 800ca3a:	3301      	adds	r3, #1
 800ca3c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ca3e:	68bb      	ldr	r3, [r7, #8]
 800ca40:	781b      	ldrb	r3, [r3, #0]
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d1f5      	bne.n	800ca32 <USBD_GetLen+0x12>
  }

  return len;
 800ca46:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca48:	4618      	mov	r0, r3
 800ca4a:	3714      	adds	r7, #20
 800ca4c:	46bd      	mov	sp, r7
 800ca4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca52:	4770      	bx	lr

0800ca54 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ca54:	b580      	push	{r7, lr}
 800ca56:	b084      	sub	sp, #16
 800ca58:	af00      	add	r7, sp, #0
 800ca5a:	60f8      	str	r0, [r7, #12]
 800ca5c:	60b9      	str	r1, [r7, #8]
 800ca5e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	2202      	movs	r2, #2
 800ca64:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	687a      	ldr	r2, [r7, #4]
 800ca6c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	687a      	ldr	r2, [r7, #4]
 800ca72:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	68ba      	ldr	r2, [r7, #8]
 800ca78:	2100      	movs	r1, #0
 800ca7a:	68f8      	ldr	r0, [r7, #12]
 800ca7c:	f000 fc43 	bl	800d306 <USBD_LL_Transmit>

  return USBD_OK;
 800ca80:	2300      	movs	r3, #0
}
 800ca82:	4618      	mov	r0, r3
 800ca84:	3710      	adds	r7, #16
 800ca86:	46bd      	mov	sp, r7
 800ca88:	bd80      	pop	{r7, pc}

0800ca8a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ca8a:	b580      	push	{r7, lr}
 800ca8c:	b084      	sub	sp, #16
 800ca8e:	af00      	add	r7, sp, #0
 800ca90:	60f8      	str	r0, [r7, #12]
 800ca92:	60b9      	str	r1, [r7, #8]
 800ca94:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	68ba      	ldr	r2, [r7, #8]
 800ca9a:	2100      	movs	r1, #0
 800ca9c:	68f8      	ldr	r0, [r7, #12]
 800ca9e:	f000 fc32 	bl	800d306 <USBD_LL_Transmit>

  return USBD_OK;
 800caa2:	2300      	movs	r3, #0
}
 800caa4:	4618      	mov	r0, r3
 800caa6:	3710      	adds	r7, #16
 800caa8:	46bd      	mov	sp, r7
 800caaa:	bd80      	pop	{r7, pc}

0800caac <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800caac:	b580      	push	{r7, lr}
 800caae:	b084      	sub	sp, #16
 800cab0:	af00      	add	r7, sp, #0
 800cab2:	60f8      	str	r0, [r7, #12]
 800cab4:	60b9      	str	r1, [r7, #8]
 800cab6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	2203      	movs	r2, #3
 800cabc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	687a      	ldr	r2, [r7, #4]
 800cac4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	687a      	ldr	r2, [r7, #4]
 800cacc:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	68ba      	ldr	r2, [r7, #8]
 800cad4:	2100      	movs	r1, #0
 800cad6:	68f8      	ldr	r0, [r7, #12]
 800cad8:	f000 fc36 	bl	800d348 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cadc:	2300      	movs	r3, #0
}
 800cade:	4618      	mov	r0, r3
 800cae0:	3710      	adds	r7, #16
 800cae2:	46bd      	mov	sp, r7
 800cae4:	bd80      	pop	{r7, pc}

0800cae6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800cae6:	b580      	push	{r7, lr}
 800cae8:	b084      	sub	sp, #16
 800caea:	af00      	add	r7, sp, #0
 800caec:	60f8      	str	r0, [r7, #12]
 800caee:	60b9      	str	r1, [r7, #8]
 800caf0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	68ba      	ldr	r2, [r7, #8]
 800caf6:	2100      	movs	r1, #0
 800caf8:	68f8      	ldr	r0, [r7, #12]
 800cafa:	f000 fc25 	bl	800d348 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cafe:	2300      	movs	r3, #0
}
 800cb00:	4618      	mov	r0, r3
 800cb02:	3710      	adds	r7, #16
 800cb04:	46bd      	mov	sp, r7
 800cb06:	bd80      	pop	{r7, pc}

0800cb08 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800cb08:	b580      	push	{r7, lr}
 800cb0a:	b082      	sub	sp, #8
 800cb0c:	af00      	add	r7, sp, #0
 800cb0e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	2204      	movs	r2, #4
 800cb14:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800cb18:	2300      	movs	r3, #0
 800cb1a:	2200      	movs	r2, #0
 800cb1c:	2100      	movs	r1, #0
 800cb1e:	6878      	ldr	r0, [r7, #4]
 800cb20:	f000 fbf1 	bl	800d306 <USBD_LL_Transmit>

  return USBD_OK;
 800cb24:	2300      	movs	r3, #0
}
 800cb26:	4618      	mov	r0, r3
 800cb28:	3708      	adds	r7, #8
 800cb2a:	46bd      	mov	sp, r7
 800cb2c:	bd80      	pop	{r7, pc}

0800cb2e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800cb2e:	b580      	push	{r7, lr}
 800cb30:	b082      	sub	sp, #8
 800cb32:	af00      	add	r7, sp, #0
 800cb34:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	2205      	movs	r2, #5
 800cb3a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cb3e:	2300      	movs	r3, #0
 800cb40:	2200      	movs	r2, #0
 800cb42:	2100      	movs	r1, #0
 800cb44:	6878      	ldr	r0, [r7, #4]
 800cb46:	f000 fbff 	bl	800d348 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cb4a:	2300      	movs	r3, #0
}
 800cb4c:	4618      	mov	r0, r3
 800cb4e:	3708      	adds	r7, #8
 800cb50:	46bd      	mov	sp, r7
 800cb52:	bd80      	pop	{r7, pc}

0800cb54 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800cb54:	b580      	push	{r7, lr}
 800cb56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800cb58:	2200      	movs	r2, #0
 800cb5a:	4912      	ldr	r1, [pc, #72]	; (800cba4 <MX_USB_DEVICE_Init+0x50>)
 800cb5c:	4812      	ldr	r0, [pc, #72]	; (800cba8 <MX_USB_DEVICE_Init+0x54>)
 800cb5e:	f7fe fd07 	bl	800b570 <USBD_Init>
 800cb62:	4603      	mov	r3, r0
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d001      	beq.n	800cb6c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800cb68:	f7f5 fb96 	bl	8002298 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 800cb6c:	490f      	ldr	r1, [pc, #60]	; (800cbac <MX_USB_DEVICE_Init+0x58>)
 800cb6e:	480e      	ldr	r0, [pc, #56]	; (800cba8 <MX_USB_DEVICE_Init+0x54>)
 800cb70:	f7fe fd2e 	bl	800b5d0 <USBD_RegisterClass>
 800cb74:	4603      	mov	r3, r0
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d001      	beq.n	800cb7e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800cb7a:	f7f5 fb8d 	bl	8002298 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 800cb7e:	490c      	ldr	r1, [pc, #48]	; (800cbb0 <MX_USB_DEVICE_Init+0x5c>)
 800cb80:	4809      	ldr	r0, [pc, #36]	; (800cba8 <MX_USB_DEVICE_Init+0x54>)
 800cb82:	f7fe fcdb 	bl	800b53c <USBD_CUSTOM_HID_RegisterInterface>
 800cb86:	4603      	mov	r3, r0
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d001      	beq.n	800cb90 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800cb8c:	f7f5 fb84 	bl	8002298 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800cb90:	4805      	ldr	r0, [pc, #20]	; (800cba8 <MX_USB_DEVICE_Init+0x54>)
 800cb92:	f7fe fd53 	bl	800b63c <USBD_Start>
 800cb96:	4603      	mov	r3, r0
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d001      	beq.n	800cba0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800cb9c:	f7f5 fb7c 	bl	8002298 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800cba0:	bf00      	nop
 800cba2:	bd80      	pop	{r7, pc}
 800cba4:	200000cc 	.word	0x200000cc
 800cba8:	20000dc4 	.word	0x20000dc4
 800cbac:	2000003c 	.word	0x2000003c
 800cbb0:	200000bc 	.word	0x200000bc

0800cbb4 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 800cbb4:	b480      	push	{r7}
 800cbb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800cbb8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800cbba:	4618      	mov	r0, r3
 800cbbc:	46bd      	mov	sp, r7
 800cbbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbc2:	4770      	bx	lr

0800cbc4 <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 800cbc4:	b480      	push	{r7}
 800cbc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 800cbc8:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800cbca:	4618      	mov	r0, r3
 800cbcc:	46bd      	mov	sp, r7
 800cbce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbd2:	4770      	bx	lr

0800cbd4 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 800cbd4:	b580      	push	{r7, lr}
 800cbd6:	b082      	sub	sp, #8
 800cbd8:	af00      	add	r7, sp, #0
 800cbda:	4603      	mov	r3, r0
 800cbdc:	460a      	mov	r2, r1
 800cbde:	71fb      	strb	r3, [r7, #7]
 800cbe0:	4613      	mov	r3, r2
 800cbe2:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  UNUSED(event_idx);
  UNUSED(state);

  /* Start next USB packet transfer once data processing is completed */
  if (USBD_CUSTOM_HID_ReceivePacket(&hUsbDeviceFS) != (uint8_t)USBD_OK)
 800cbe4:	4806      	ldr	r0, [pc, #24]	; (800cc00 <CUSTOM_HID_OutEvent_FS+0x2c>)
 800cbe6:	f7fe fc47 	bl	800b478 <USBD_CUSTOM_HID_ReceivePacket>
 800cbea:	4603      	mov	r3, r0
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d002      	beq.n	800cbf6 <CUSTOM_HID_OutEvent_FS+0x22>
  {
    return -1;
 800cbf0:	f04f 33ff 	mov.w	r3, #4294967295
 800cbf4:	e000      	b.n	800cbf8 <CUSTOM_HID_OutEvent_FS+0x24>
  }

  return (USBD_OK);
 800cbf6:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800cbf8:	4618      	mov	r0, r3
 800cbfa:	3708      	adds	r7, #8
 800cbfc:	46bd      	mov	sp, r7
 800cbfe:	bd80      	pop	{r7, pc}
 800cc00:	20000dc4 	.word	0x20000dc4

0800cc04 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cc04:	b480      	push	{r7}
 800cc06:	b083      	sub	sp, #12
 800cc08:	af00      	add	r7, sp, #0
 800cc0a:	4603      	mov	r3, r0
 800cc0c:	6039      	str	r1, [r7, #0]
 800cc0e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800cc10:	683b      	ldr	r3, [r7, #0]
 800cc12:	2212      	movs	r2, #18
 800cc14:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800cc16:	4b03      	ldr	r3, [pc, #12]	; (800cc24 <USBD_FS_DeviceDescriptor+0x20>)
}
 800cc18:	4618      	mov	r0, r3
 800cc1a:	370c      	adds	r7, #12
 800cc1c:	46bd      	mov	sp, r7
 800cc1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc22:	4770      	bx	lr
 800cc24:	200000e8 	.word	0x200000e8

0800cc28 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cc28:	b480      	push	{r7}
 800cc2a:	b083      	sub	sp, #12
 800cc2c:	af00      	add	r7, sp, #0
 800cc2e:	4603      	mov	r3, r0
 800cc30:	6039      	str	r1, [r7, #0]
 800cc32:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800cc34:	683b      	ldr	r3, [r7, #0]
 800cc36:	2204      	movs	r2, #4
 800cc38:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800cc3a:	4b03      	ldr	r3, [pc, #12]	; (800cc48 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800cc3c:	4618      	mov	r0, r3
 800cc3e:	370c      	adds	r7, #12
 800cc40:	46bd      	mov	sp, r7
 800cc42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc46:	4770      	bx	lr
 800cc48:	200000fc 	.word	0x200000fc

0800cc4c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cc4c:	b580      	push	{r7, lr}
 800cc4e:	b082      	sub	sp, #8
 800cc50:	af00      	add	r7, sp, #0
 800cc52:	4603      	mov	r3, r0
 800cc54:	6039      	str	r1, [r7, #0]
 800cc56:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cc58:	79fb      	ldrb	r3, [r7, #7]
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d105      	bne.n	800cc6a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cc5e:	683a      	ldr	r2, [r7, #0]
 800cc60:	4907      	ldr	r1, [pc, #28]	; (800cc80 <USBD_FS_ProductStrDescriptor+0x34>)
 800cc62:	4808      	ldr	r0, [pc, #32]	; (800cc84 <USBD_FS_ProductStrDescriptor+0x38>)
 800cc64:	f7ff fe96 	bl	800c994 <USBD_GetString>
 800cc68:	e004      	b.n	800cc74 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cc6a:	683a      	ldr	r2, [r7, #0]
 800cc6c:	4904      	ldr	r1, [pc, #16]	; (800cc80 <USBD_FS_ProductStrDescriptor+0x34>)
 800cc6e:	4805      	ldr	r0, [pc, #20]	; (800cc84 <USBD_FS_ProductStrDescriptor+0x38>)
 800cc70:	f7ff fe90 	bl	800c994 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cc74:	4b02      	ldr	r3, [pc, #8]	; (800cc80 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800cc76:	4618      	mov	r0, r3
 800cc78:	3708      	adds	r7, #8
 800cc7a:	46bd      	mov	sp, r7
 800cc7c:	bd80      	pop	{r7, pc}
 800cc7e:	bf00      	nop
 800cc80:	200010a0 	.word	0x200010a0
 800cc84:	0800e820 	.word	0x0800e820

0800cc88 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cc88:	b580      	push	{r7, lr}
 800cc8a:	b082      	sub	sp, #8
 800cc8c:	af00      	add	r7, sp, #0
 800cc8e:	4603      	mov	r3, r0
 800cc90:	6039      	str	r1, [r7, #0]
 800cc92:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800cc94:	683a      	ldr	r2, [r7, #0]
 800cc96:	4904      	ldr	r1, [pc, #16]	; (800cca8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800cc98:	4804      	ldr	r0, [pc, #16]	; (800ccac <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800cc9a:	f7ff fe7b 	bl	800c994 <USBD_GetString>
  return USBD_StrDesc;
 800cc9e:	4b02      	ldr	r3, [pc, #8]	; (800cca8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800cca0:	4618      	mov	r0, r3
 800cca2:	3708      	adds	r7, #8
 800cca4:	46bd      	mov	sp, r7
 800cca6:	bd80      	pop	{r7, pc}
 800cca8:	200010a0 	.word	0x200010a0
 800ccac:	0800e840 	.word	0x0800e840

0800ccb0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ccb0:	b580      	push	{r7, lr}
 800ccb2:	b082      	sub	sp, #8
 800ccb4:	af00      	add	r7, sp, #0
 800ccb6:	4603      	mov	r3, r0
 800ccb8:	6039      	str	r1, [r7, #0]
 800ccba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ccbc:	683b      	ldr	r3, [r7, #0]
 800ccbe:	221a      	movs	r2, #26
 800ccc0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ccc2:	f000 f843 	bl	800cd4c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800ccc6:	4b02      	ldr	r3, [pc, #8]	; (800ccd0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800ccc8:	4618      	mov	r0, r3
 800ccca:	3708      	adds	r7, #8
 800cccc:	46bd      	mov	sp, r7
 800ccce:	bd80      	pop	{r7, pc}
 800ccd0:	20000100 	.word	0x20000100

0800ccd4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ccd4:	b580      	push	{r7, lr}
 800ccd6:	b082      	sub	sp, #8
 800ccd8:	af00      	add	r7, sp, #0
 800ccda:	4603      	mov	r3, r0
 800ccdc:	6039      	str	r1, [r7, #0]
 800ccde:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800cce0:	79fb      	ldrb	r3, [r7, #7]
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d105      	bne.n	800ccf2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cce6:	683a      	ldr	r2, [r7, #0]
 800cce8:	4907      	ldr	r1, [pc, #28]	; (800cd08 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ccea:	4808      	ldr	r0, [pc, #32]	; (800cd0c <USBD_FS_ConfigStrDescriptor+0x38>)
 800ccec:	f7ff fe52 	bl	800c994 <USBD_GetString>
 800ccf0:	e004      	b.n	800ccfc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ccf2:	683a      	ldr	r2, [r7, #0]
 800ccf4:	4904      	ldr	r1, [pc, #16]	; (800cd08 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ccf6:	4805      	ldr	r0, [pc, #20]	; (800cd0c <USBD_FS_ConfigStrDescriptor+0x38>)
 800ccf8:	f7ff fe4c 	bl	800c994 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ccfc:	4b02      	ldr	r3, [pc, #8]	; (800cd08 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800ccfe:	4618      	mov	r0, r3
 800cd00:	3708      	adds	r7, #8
 800cd02:	46bd      	mov	sp, r7
 800cd04:	bd80      	pop	{r7, pc}
 800cd06:	bf00      	nop
 800cd08:	200010a0 	.word	0x200010a0
 800cd0c:	0800e854 	.word	0x0800e854

0800cd10 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cd10:	b580      	push	{r7, lr}
 800cd12:	b082      	sub	sp, #8
 800cd14:	af00      	add	r7, sp, #0
 800cd16:	4603      	mov	r3, r0
 800cd18:	6039      	str	r1, [r7, #0]
 800cd1a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cd1c:	79fb      	ldrb	r3, [r7, #7]
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d105      	bne.n	800cd2e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cd22:	683a      	ldr	r2, [r7, #0]
 800cd24:	4907      	ldr	r1, [pc, #28]	; (800cd44 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cd26:	4808      	ldr	r0, [pc, #32]	; (800cd48 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cd28:	f7ff fe34 	bl	800c994 <USBD_GetString>
 800cd2c:	e004      	b.n	800cd38 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cd2e:	683a      	ldr	r2, [r7, #0]
 800cd30:	4904      	ldr	r1, [pc, #16]	; (800cd44 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cd32:	4805      	ldr	r0, [pc, #20]	; (800cd48 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cd34:	f7ff fe2e 	bl	800c994 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cd38:	4b02      	ldr	r3, [pc, #8]	; (800cd44 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800cd3a:	4618      	mov	r0, r3
 800cd3c:	3708      	adds	r7, #8
 800cd3e:	46bd      	mov	sp, r7
 800cd40:	bd80      	pop	{r7, pc}
 800cd42:	bf00      	nop
 800cd44:	200010a0 	.word	0x200010a0
 800cd48:	0800e868 	.word	0x0800e868

0800cd4c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800cd4c:	b580      	push	{r7, lr}
 800cd4e:	b084      	sub	sp, #16
 800cd50:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800cd52:	4b0f      	ldr	r3, [pc, #60]	; (800cd90 <Get_SerialNum+0x44>)
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800cd58:	4b0e      	ldr	r3, [pc, #56]	; (800cd94 <Get_SerialNum+0x48>)
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800cd5e:	4b0e      	ldr	r3, [pc, #56]	; (800cd98 <Get_SerialNum+0x4c>)
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800cd64:	68fa      	ldr	r2, [r7, #12]
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	4413      	add	r3, r2
 800cd6a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d009      	beq.n	800cd86 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800cd72:	2208      	movs	r2, #8
 800cd74:	4909      	ldr	r1, [pc, #36]	; (800cd9c <Get_SerialNum+0x50>)
 800cd76:	68f8      	ldr	r0, [r7, #12]
 800cd78:	f000 f814 	bl	800cda4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800cd7c:	2204      	movs	r2, #4
 800cd7e:	4908      	ldr	r1, [pc, #32]	; (800cda0 <Get_SerialNum+0x54>)
 800cd80:	68b8      	ldr	r0, [r7, #8]
 800cd82:	f000 f80f 	bl	800cda4 <IntToUnicode>
  }
}
 800cd86:	bf00      	nop
 800cd88:	3710      	adds	r7, #16
 800cd8a:	46bd      	mov	sp, r7
 800cd8c:	bd80      	pop	{r7, pc}
 800cd8e:	bf00      	nop
 800cd90:	1fff7a10 	.word	0x1fff7a10
 800cd94:	1fff7a14 	.word	0x1fff7a14
 800cd98:	1fff7a18 	.word	0x1fff7a18
 800cd9c:	20000102 	.word	0x20000102
 800cda0:	20000112 	.word	0x20000112

0800cda4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800cda4:	b480      	push	{r7}
 800cda6:	b087      	sub	sp, #28
 800cda8:	af00      	add	r7, sp, #0
 800cdaa:	60f8      	str	r0, [r7, #12]
 800cdac:	60b9      	str	r1, [r7, #8]
 800cdae:	4613      	mov	r3, r2
 800cdb0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800cdb2:	2300      	movs	r3, #0
 800cdb4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800cdb6:	2300      	movs	r3, #0
 800cdb8:	75fb      	strb	r3, [r7, #23]
 800cdba:	e027      	b.n	800ce0c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	0f1b      	lsrs	r3, r3, #28
 800cdc0:	2b09      	cmp	r3, #9
 800cdc2:	d80b      	bhi.n	800cddc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	0f1b      	lsrs	r3, r3, #28
 800cdc8:	b2da      	uxtb	r2, r3
 800cdca:	7dfb      	ldrb	r3, [r7, #23]
 800cdcc:	005b      	lsls	r3, r3, #1
 800cdce:	4619      	mov	r1, r3
 800cdd0:	68bb      	ldr	r3, [r7, #8]
 800cdd2:	440b      	add	r3, r1
 800cdd4:	3230      	adds	r2, #48	; 0x30
 800cdd6:	b2d2      	uxtb	r2, r2
 800cdd8:	701a      	strb	r2, [r3, #0]
 800cdda:	e00a      	b.n	800cdf2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800cddc:	68fb      	ldr	r3, [r7, #12]
 800cdde:	0f1b      	lsrs	r3, r3, #28
 800cde0:	b2da      	uxtb	r2, r3
 800cde2:	7dfb      	ldrb	r3, [r7, #23]
 800cde4:	005b      	lsls	r3, r3, #1
 800cde6:	4619      	mov	r1, r3
 800cde8:	68bb      	ldr	r3, [r7, #8]
 800cdea:	440b      	add	r3, r1
 800cdec:	3237      	adds	r2, #55	; 0x37
 800cdee:	b2d2      	uxtb	r2, r2
 800cdf0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	011b      	lsls	r3, r3, #4
 800cdf6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800cdf8:	7dfb      	ldrb	r3, [r7, #23]
 800cdfa:	005b      	lsls	r3, r3, #1
 800cdfc:	3301      	adds	r3, #1
 800cdfe:	68ba      	ldr	r2, [r7, #8]
 800ce00:	4413      	add	r3, r2
 800ce02:	2200      	movs	r2, #0
 800ce04:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ce06:	7dfb      	ldrb	r3, [r7, #23]
 800ce08:	3301      	adds	r3, #1
 800ce0a:	75fb      	strb	r3, [r7, #23]
 800ce0c:	7dfa      	ldrb	r2, [r7, #23]
 800ce0e:	79fb      	ldrb	r3, [r7, #7]
 800ce10:	429a      	cmp	r2, r3
 800ce12:	d3d3      	bcc.n	800cdbc <IntToUnicode+0x18>
  }
}
 800ce14:	bf00      	nop
 800ce16:	bf00      	nop
 800ce18:	371c      	adds	r7, #28
 800ce1a:	46bd      	mov	sp, r7
 800ce1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce20:	4770      	bx	lr
	...

0800ce24 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ce24:	b580      	push	{r7, lr}
 800ce26:	b08a      	sub	sp, #40	; 0x28
 800ce28:	af00      	add	r7, sp, #0
 800ce2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ce2c:	f107 0314 	add.w	r3, r7, #20
 800ce30:	2200      	movs	r2, #0
 800ce32:	601a      	str	r2, [r3, #0]
 800ce34:	605a      	str	r2, [r3, #4]
 800ce36:	609a      	str	r2, [r3, #8]
 800ce38:	60da      	str	r2, [r3, #12]
 800ce3a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ce44:	d13a      	bne.n	800cebc <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ce46:	2300      	movs	r3, #0
 800ce48:	613b      	str	r3, [r7, #16]
 800ce4a:	4b1e      	ldr	r3, [pc, #120]	; (800cec4 <HAL_PCD_MspInit+0xa0>)
 800ce4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce4e:	4a1d      	ldr	r2, [pc, #116]	; (800cec4 <HAL_PCD_MspInit+0xa0>)
 800ce50:	f043 0301 	orr.w	r3, r3, #1
 800ce54:	6313      	str	r3, [r2, #48]	; 0x30
 800ce56:	4b1b      	ldr	r3, [pc, #108]	; (800cec4 <HAL_PCD_MspInit+0xa0>)
 800ce58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce5a:	f003 0301 	and.w	r3, r3, #1
 800ce5e:	613b      	str	r3, [r7, #16]
 800ce60:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800ce62:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800ce66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ce68:	2302      	movs	r3, #2
 800ce6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ce6c:	2300      	movs	r3, #0
 800ce6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ce70:	2303      	movs	r3, #3
 800ce72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ce74:	230a      	movs	r3, #10
 800ce76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ce78:	f107 0314 	add.w	r3, r7, #20
 800ce7c:	4619      	mov	r1, r3
 800ce7e:	4812      	ldr	r0, [pc, #72]	; (800cec8 <HAL_PCD_MspInit+0xa4>)
 800ce80:	f7f7 f80a 	bl	8003e98 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ce84:	4b0f      	ldr	r3, [pc, #60]	; (800cec4 <HAL_PCD_MspInit+0xa0>)
 800ce86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce88:	4a0e      	ldr	r2, [pc, #56]	; (800cec4 <HAL_PCD_MspInit+0xa0>)
 800ce8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ce8e:	6353      	str	r3, [r2, #52]	; 0x34
 800ce90:	2300      	movs	r3, #0
 800ce92:	60fb      	str	r3, [r7, #12]
 800ce94:	4b0b      	ldr	r3, [pc, #44]	; (800cec4 <HAL_PCD_MspInit+0xa0>)
 800ce96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ce98:	4a0a      	ldr	r2, [pc, #40]	; (800cec4 <HAL_PCD_MspInit+0xa0>)
 800ce9a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ce9e:	6453      	str	r3, [r2, #68]	; 0x44
 800cea0:	4b08      	ldr	r3, [pc, #32]	; (800cec4 <HAL_PCD_MspInit+0xa0>)
 800cea2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cea4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cea8:	60fb      	str	r3, [r7, #12]
 800ceaa:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800ceac:	2200      	movs	r2, #0
 800ceae:	2100      	movs	r1, #0
 800ceb0:	2043      	movs	r0, #67	; 0x43
 800ceb2:	f7f6 fb90 	bl	80035d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ceb6:	2043      	movs	r0, #67	; 0x43
 800ceb8:	f7f6 fba9 	bl	800360e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800cebc:	bf00      	nop
 800cebe:	3728      	adds	r7, #40	; 0x28
 800cec0:	46bd      	mov	sp, r7
 800cec2:	bd80      	pop	{r7, pc}
 800cec4:	40023800 	.word	0x40023800
 800cec8:	40020000 	.word	0x40020000

0800cecc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cecc:	b580      	push	{r7, lr}
 800cece:	b082      	sub	sp, #8
 800ced0:	af00      	add	r7, sp, #0
 800ced2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800cee0:	4619      	mov	r1, r3
 800cee2:	4610      	mov	r0, r2
 800cee4:	f7fe fbf7 	bl	800b6d6 <USBD_LL_SetupStage>
}
 800cee8:	bf00      	nop
 800ceea:	3708      	adds	r7, #8
 800ceec:	46bd      	mov	sp, r7
 800ceee:	bd80      	pop	{r7, pc}

0800cef0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cef0:	b580      	push	{r7, lr}
 800cef2:	b082      	sub	sp, #8
 800cef4:	af00      	add	r7, sp, #0
 800cef6:	6078      	str	r0, [r7, #4]
 800cef8:	460b      	mov	r3, r1
 800cefa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800cf02:	78fa      	ldrb	r2, [r7, #3]
 800cf04:	6879      	ldr	r1, [r7, #4]
 800cf06:	4613      	mov	r3, r2
 800cf08:	00db      	lsls	r3, r3, #3
 800cf0a:	4413      	add	r3, r2
 800cf0c:	009b      	lsls	r3, r3, #2
 800cf0e:	440b      	add	r3, r1
 800cf10:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800cf14:	681a      	ldr	r2, [r3, #0]
 800cf16:	78fb      	ldrb	r3, [r7, #3]
 800cf18:	4619      	mov	r1, r3
 800cf1a:	f7fe fc31 	bl	800b780 <USBD_LL_DataOutStage>
}
 800cf1e:	bf00      	nop
 800cf20:	3708      	adds	r7, #8
 800cf22:	46bd      	mov	sp, r7
 800cf24:	bd80      	pop	{r7, pc}

0800cf26 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf26:	b580      	push	{r7, lr}
 800cf28:	b082      	sub	sp, #8
 800cf2a:	af00      	add	r7, sp, #0
 800cf2c:	6078      	str	r0, [r7, #4]
 800cf2e:	460b      	mov	r3, r1
 800cf30:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800cf38:	78fa      	ldrb	r2, [r7, #3]
 800cf3a:	6879      	ldr	r1, [r7, #4]
 800cf3c:	4613      	mov	r3, r2
 800cf3e:	00db      	lsls	r3, r3, #3
 800cf40:	4413      	add	r3, r2
 800cf42:	009b      	lsls	r3, r3, #2
 800cf44:	440b      	add	r3, r1
 800cf46:	334c      	adds	r3, #76	; 0x4c
 800cf48:	681a      	ldr	r2, [r3, #0]
 800cf4a:	78fb      	ldrb	r3, [r7, #3]
 800cf4c:	4619      	mov	r1, r3
 800cf4e:	f7fe fcca 	bl	800b8e6 <USBD_LL_DataInStage>
}
 800cf52:	bf00      	nop
 800cf54:	3708      	adds	r7, #8
 800cf56:	46bd      	mov	sp, r7
 800cf58:	bd80      	pop	{r7, pc}

0800cf5a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf5a:	b580      	push	{r7, lr}
 800cf5c:	b082      	sub	sp, #8
 800cf5e:	af00      	add	r7, sp, #0
 800cf60:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800cf68:	4618      	mov	r0, r3
 800cf6a:	f7fe fdfe 	bl	800bb6a <USBD_LL_SOF>
}
 800cf6e:	bf00      	nop
 800cf70:	3708      	adds	r7, #8
 800cf72:	46bd      	mov	sp, r7
 800cf74:	bd80      	pop	{r7, pc}

0800cf76 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf76:	b580      	push	{r7, lr}
 800cf78:	b084      	sub	sp, #16
 800cf7a:	af00      	add	r7, sp, #0
 800cf7c:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800cf7e:	2301      	movs	r3, #1
 800cf80:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	68db      	ldr	r3, [r3, #12]
 800cf86:	2b02      	cmp	r3, #2
 800cf88:	d001      	beq.n	800cf8e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800cf8a:	f7f5 f985 	bl	8002298 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800cf94:	7bfa      	ldrb	r2, [r7, #15]
 800cf96:	4611      	mov	r1, r2
 800cf98:	4618      	mov	r0, r3
 800cf9a:	f7fe fda8 	bl	800baee <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800cfa4:	4618      	mov	r0, r3
 800cfa6:	f7fe fd50 	bl	800ba4a <USBD_LL_Reset>
}
 800cfaa:	bf00      	nop
 800cfac:	3710      	adds	r7, #16
 800cfae:	46bd      	mov	sp, r7
 800cfb0:	bd80      	pop	{r7, pc}
	...

0800cfb4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cfb4:	b580      	push	{r7, lr}
 800cfb6:	b082      	sub	sp, #8
 800cfb8:	af00      	add	r7, sp, #0
 800cfba:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800cfc2:	4618      	mov	r0, r3
 800cfc4:	f7fe fda3 	bl	800bb0e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	687a      	ldr	r2, [r7, #4]
 800cfd4:	6812      	ldr	r2, [r2, #0]
 800cfd6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800cfda:	f043 0301 	orr.w	r3, r3, #1
 800cfde:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	6a1b      	ldr	r3, [r3, #32]
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d005      	beq.n	800cff4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cfe8:	4b04      	ldr	r3, [pc, #16]	; (800cffc <HAL_PCD_SuspendCallback+0x48>)
 800cfea:	691b      	ldr	r3, [r3, #16]
 800cfec:	4a03      	ldr	r2, [pc, #12]	; (800cffc <HAL_PCD_SuspendCallback+0x48>)
 800cfee:	f043 0306 	orr.w	r3, r3, #6
 800cff2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800cff4:	bf00      	nop
 800cff6:	3708      	adds	r7, #8
 800cff8:	46bd      	mov	sp, r7
 800cffa:	bd80      	pop	{r7, pc}
 800cffc:	e000ed00 	.word	0xe000ed00

0800d000 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d000:	b580      	push	{r7, lr}
 800d002:	b082      	sub	sp, #8
 800d004:	af00      	add	r7, sp, #0
 800d006:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d00e:	4618      	mov	r0, r3
 800d010:	f7fe fd93 	bl	800bb3a <USBD_LL_Resume>
}
 800d014:	bf00      	nop
 800d016:	3708      	adds	r7, #8
 800d018:	46bd      	mov	sp, r7
 800d01a:	bd80      	pop	{r7, pc}

0800d01c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d01c:	b580      	push	{r7, lr}
 800d01e:	b082      	sub	sp, #8
 800d020:	af00      	add	r7, sp, #0
 800d022:	6078      	str	r0, [r7, #4]
 800d024:	460b      	mov	r3, r1
 800d026:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d02e:	78fa      	ldrb	r2, [r7, #3]
 800d030:	4611      	mov	r1, r2
 800d032:	4618      	mov	r0, r3
 800d034:	f7fe fdeb 	bl	800bc0e <USBD_LL_IsoOUTIncomplete>
}
 800d038:	bf00      	nop
 800d03a:	3708      	adds	r7, #8
 800d03c:	46bd      	mov	sp, r7
 800d03e:	bd80      	pop	{r7, pc}

0800d040 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d040:	b580      	push	{r7, lr}
 800d042:	b082      	sub	sp, #8
 800d044:	af00      	add	r7, sp, #0
 800d046:	6078      	str	r0, [r7, #4]
 800d048:	460b      	mov	r3, r1
 800d04a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d052:	78fa      	ldrb	r2, [r7, #3]
 800d054:	4611      	mov	r1, r2
 800d056:	4618      	mov	r0, r3
 800d058:	f7fe fda7 	bl	800bbaa <USBD_LL_IsoINIncomplete>
}
 800d05c:	bf00      	nop
 800d05e:	3708      	adds	r7, #8
 800d060:	46bd      	mov	sp, r7
 800d062:	bd80      	pop	{r7, pc}

0800d064 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d064:	b580      	push	{r7, lr}
 800d066:	b082      	sub	sp, #8
 800d068:	af00      	add	r7, sp, #0
 800d06a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d072:	4618      	mov	r0, r3
 800d074:	f7fe fdfd 	bl	800bc72 <USBD_LL_DevConnected>
}
 800d078:	bf00      	nop
 800d07a:	3708      	adds	r7, #8
 800d07c:	46bd      	mov	sp, r7
 800d07e:	bd80      	pop	{r7, pc}

0800d080 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d080:	b580      	push	{r7, lr}
 800d082:	b082      	sub	sp, #8
 800d084:	af00      	add	r7, sp, #0
 800d086:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d08e:	4618      	mov	r0, r3
 800d090:	f7fe fdfa 	bl	800bc88 <USBD_LL_DevDisconnected>
}
 800d094:	bf00      	nop
 800d096:	3708      	adds	r7, #8
 800d098:	46bd      	mov	sp, r7
 800d09a:	bd80      	pop	{r7, pc}

0800d09c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d09c:	b580      	push	{r7, lr}
 800d09e:	b082      	sub	sp, #8
 800d0a0:	af00      	add	r7, sp, #0
 800d0a2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	781b      	ldrb	r3, [r3, #0]
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d13c      	bne.n	800d126 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800d0ac:	4a20      	ldr	r2, [pc, #128]	; (800d130 <USBD_LL_Init+0x94>)
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	4a1e      	ldr	r2, [pc, #120]	; (800d130 <USBD_LL_Init+0x94>)
 800d0b8:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d0bc:	4b1c      	ldr	r3, [pc, #112]	; (800d130 <USBD_LL_Init+0x94>)
 800d0be:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800d0c2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800d0c4:	4b1a      	ldr	r3, [pc, #104]	; (800d130 <USBD_LL_Init+0x94>)
 800d0c6:	2204      	movs	r2, #4
 800d0c8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800d0ca:	4b19      	ldr	r3, [pc, #100]	; (800d130 <USBD_LL_Init+0x94>)
 800d0cc:	2202      	movs	r2, #2
 800d0ce:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d0d0:	4b17      	ldr	r3, [pc, #92]	; (800d130 <USBD_LL_Init+0x94>)
 800d0d2:	2200      	movs	r2, #0
 800d0d4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d0d6:	4b16      	ldr	r3, [pc, #88]	; (800d130 <USBD_LL_Init+0x94>)
 800d0d8:	2202      	movs	r2, #2
 800d0da:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d0dc:	4b14      	ldr	r3, [pc, #80]	; (800d130 <USBD_LL_Init+0x94>)
 800d0de:	2200      	movs	r2, #0
 800d0e0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800d0e2:	4b13      	ldr	r3, [pc, #76]	; (800d130 <USBD_LL_Init+0x94>)
 800d0e4:	2200      	movs	r2, #0
 800d0e6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800d0e8:	4b11      	ldr	r3, [pc, #68]	; (800d130 <USBD_LL_Init+0x94>)
 800d0ea:	2200      	movs	r2, #0
 800d0ec:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800d0ee:	4b10      	ldr	r3, [pc, #64]	; (800d130 <USBD_LL_Init+0x94>)
 800d0f0:	2200      	movs	r2, #0
 800d0f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800d0f4:	4b0e      	ldr	r3, [pc, #56]	; (800d130 <USBD_LL_Init+0x94>)
 800d0f6:	2200      	movs	r2, #0
 800d0f8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800d0fa:	480d      	ldr	r0, [pc, #52]	; (800d130 <USBD_LL_Init+0x94>)
 800d0fc:	f7f8 f95f 	bl	80053be <HAL_PCD_Init>
 800d100:	4603      	mov	r3, r0
 800d102:	2b00      	cmp	r3, #0
 800d104:	d001      	beq.n	800d10a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800d106:	f7f5 f8c7 	bl	8002298 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800d10a:	2180      	movs	r1, #128	; 0x80
 800d10c:	4808      	ldr	r0, [pc, #32]	; (800d130 <USBD_LL_Init+0x94>)
 800d10e:	f7f9 fb9e 	bl	800684e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800d112:	2240      	movs	r2, #64	; 0x40
 800d114:	2100      	movs	r1, #0
 800d116:	4806      	ldr	r0, [pc, #24]	; (800d130 <USBD_LL_Init+0x94>)
 800d118:	f7f9 fb52 	bl	80067c0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800d11c:	2280      	movs	r2, #128	; 0x80
 800d11e:	2101      	movs	r1, #1
 800d120:	4803      	ldr	r0, [pc, #12]	; (800d130 <USBD_LL_Init+0x94>)
 800d122:	f7f9 fb4d 	bl	80067c0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800d126:	2300      	movs	r3, #0
}
 800d128:	4618      	mov	r0, r3
 800d12a:	3708      	adds	r7, #8
 800d12c:	46bd      	mov	sp, r7
 800d12e:	bd80      	pop	{r7, pc}
 800d130:	200012a0 	.word	0x200012a0

0800d134 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d134:	b580      	push	{r7, lr}
 800d136:	b084      	sub	sp, #16
 800d138:	af00      	add	r7, sp, #0
 800d13a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d13c:	2300      	movs	r3, #0
 800d13e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d140:	2300      	movs	r3, #0
 800d142:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d14a:	4618      	mov	r0, r3
 800d14c:	f7f8 fa54 	bl	80055f8 <HAL_PCD_Start>
 800d150:	4603      	mov	r3, r0
 800d152:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d154:	7bfb      	ldrb	r3, [r7, #15]
 800d156:	4618      	mov	r0, r3
 800d158:	f000 f930 	bl	800d3bc <USBD_Get_USB_Status>
 800d15c:	4603      	mov	r3, r0
 800d15e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d160:	7bbb      	ldrb	r3, [r7, #14]
}
 800d162:	4618      	mov	r0, r3
 800d164:	3710      	adds	r7, #16
 800d166:	46bd      	mov	sp, r7
 800d168:	bd80      	pop	{r7, pc}

0800d16a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d16a:	b580      	push	{r7, lr}
 800d16c:	b084      	sub	sp, #16
 800d16e:	af00      	add	r7, sp, #0
 800d170:	6078      	str	r0, [r7, #4]
 800d172:	4608      	mov	r0, r1
 800d174:	4611      	mov	r1, r2
 800d176:	461a      	mov	r2, r3
 800d178:	4603      	mov	r3, r0
 800d17a:	70fb      	strb	r3, [r7, #3]
 800d17c:	460b      	mov	r3, r1
 800d17e:	70bb      	strb	r3, [r7, #2]
 800d180:	4613      	mov	r3, r2
 800d182:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d184:	2300      	movs	r3, #0
 800d186:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d188:	2300      	movs	r3, #0
 800d18a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800d192:	78bb      	ldrb	r3, [r7, #2]
 800d194:	883a      	ldrh	r2, [r7, #0]
 800d196:	78f9      	ldrb	r1, [r7, #3]
 800d198:	f7f8 ff25 	bl	8005fe6 <HAL_PCD_EP_Open>
 800d19c:	4603      	mov	r3, r0
 800d19e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d1a0:	7bfb      	ldrb	r3, [r7, #15]
 800d1a2:	4618      	mov	r0, r3
 800d1a4:	f000 f90a 	bl	800d3bc <USBD_Get_USB_Status>
 800d1a8:	4603      	mov	r3, r0
 800d1aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d1ac:	7bbb      	ldrb	r3, [r7, #14]
}
 800d1ae:	4618      	mov	r0, r3
 800d1b0:	3710      	adds	r7, #16
 800d1b2:	46bd      	mov	sp, r7
 800d1b4:	bd80      	pop	{r7, pc}

0800d1b6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d1b6:	b580      	push	{r7, lr}
 800d1b8:	b084      	sub	sp, #16
 800d1ba:	af00      	add	r7, sp, #0
 800d1bc:	6078      	str	r0, [r7, #4]
 800d1be:	460b      	mov	r3, r1
 800d1c0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d1c2:	2300      	movs	r3, #0
 800d1c4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d1c6:	2300      	movs	r3, #0
 800d1c8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d1d0:	78fa      	ldrb	r2, [r7, #3]
 800d1d2:	4611      	mov	r1, r2
 800d1d4:	4618      	mov	r0, r3
 800d1d6:	f7f8 ff6e 	bl	80060b6 <HAL_PCD_EP_Close>
 800d1da:	4603      	mov	r3, r0
 800d1dc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d1de:	7bfb      	ldrb	r3, [r7, #15]
 800d1e0:	4618      	mov	r0, r3
 800d1e2:	f000 f8eb 	bl	800d3bc <USBD_Get_USB_Status>
 800d1e6:	4603      	mov	r3, r0
 800d1e8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d1ea:	7bbb      	ldrb	r3, [r7, #14]
}
 800d1ec:	4618      	mov	r0, r3
 800d1ee:	3710      	adds	r7, #16
 800d1f0:	46bd      	mov	sp, r7
 800d1f2:	bd80      	pop	{r7, pc}

0800d1f4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d1f4:	b580      	push	{r7, lr}
 800d1f6:	b084      	sub	sp, #16
 800d1f8:	af00      	add	r7, sp, #0
 800d1fa:	6078      	str	r0, [r7, #4]
 800d1fc:	460b      	mov	r3, r1
 800d1fe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d200:	2300      	movs	r3, #0
 800d202:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d204:	2300      	movs	r3, #0
 800d206:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d20e:	78fa      	ldrb	r2, [r7, #3]
 800d210:	4611      	mov	r1, r2
 800d212:	4618      	mov	r0, r3
 800d214:	f7f9 f82e 	bl	8006274 <HAL_PCD_EP_SetStall>
 800d218:	4603      	mov	r3, r0
 800d21a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d21c:	7bfb      	ldrb	r3, [r7, #15]
 800d21e:	4618      	mov	r0, r3
 800d220:	f000 f8cc 	bl	800d3bc <USBD_Get_USB_Status>
 800d224:	4603      	mov	r3, r0
 800d226:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d228:	7bbb      	ldrb	r3, [r7, #14]
}
 800d22a:	4618      	mov	r0, r3
 800d22c:	3710      	adds	r7, #16
 800d22e:	46bd      	mov	sp, r7
 800d230:	bd80      	pop	{r7, pc}

0800d232 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d232:	b580      	push	{r7, lr}
 800d234:	b084      	sub	sp, #16
 800d236:	af00      	add	r7, sp, #0
 800d238:	6078      	str	r0, [r7, #4]
 800d23a:	460b      	mov	r3, r1
 800d23c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d23e:	2300      	movs	r3, #0
 800d240:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d242:	2300      	movs	r3, #0
 800d244:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d24c:	78fa      	ldrb	r2, [r7, #3]
 800d24e:	4611      	mov	r1, r2
 800d250:	4618      	mov	r0, r3
 800d252:	f7f9 f873 	bl	800633c <HAL_PCD_EP_ClrStall>
 800d256:	4603      	mov	r3, r0
 800d258:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d25a:	7bfb      	ldrb	r3, [r7, #15]
 800d25c:	4618      	mov	r0, r3
 800d25e:	f000 f8ad 	bl	800d3bc <USBD_Get_USB_Status>
 800d262:	4603      	mov	r3, r0
 800d264:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d266:	7bbb      	ldrb	r3, [r7, #14]
}
 800d268:	4618      	mov	r0, r3
 800d26a:	3710      	adds	r7, #16
 800d26c:	46bd      	mov	sp, r7
 800d26e:	bd80      	pop	{r7, pc}

0800d270 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d270:	b480      	push	{r7}
 800d272:	b085      	sub	sp, #20
 800d274:	af00      	add	r7, sp, #0
 800d276:	6078      	str	r0, [r7, #4]
 800d278:	460b      	mov	r3, r1
 800d27a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d282:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d284:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d288:	2b00      	cmp	r3, #0
 800d28a:	da0b      	bge.n	800d2a4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d28c:	78fb      	ldrb	r3, [r7, #3]
 800d28e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d292:	68f9      	ldr	r1, [r7, #12]
 800d294:	4613      	mov	r3, r2
 800d296:	00db      	lsls	r3, r3, #3
 800d298:	4413      	add	r3, r2
 800d29a:	009b      	lsls	r3, r3, #2
 800d29c:	440b      	add	r3, r1
 800d29e:	333e      	adds	r3, #62	; 0x3e
 800d2a0:	781b      	ldrb	r3, [r3, #0]
 800d2a2:	e00b      	b.n	800d2bc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d2a4:	78fb      	ldrb	r3, [r7, #3]
 800d2a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d2aa:	68f9      	ldr	r1, [r7, #12]
 800d2ac:	4613      	mov	r3, r2
 800d2ae:	00db      	lsls	r3, r3, #3
 800d2b0:	4413      	add	r3, r2
 800d2b2:	009b      	lsls	r3, r3, #2
 800d2b4:	440b      	add	r3, r1
 800d2b6:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800d2ba:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d2bc:	4618      	mov	r0, r3
 800d2be:	3714      	adds	r7, #20
 800d2c0:	46bd      	mov	sp, r7
 800d2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2c6:	4770      	bx	lr

0800d2c8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d2c8:	b580      	push	{r7, lr}
 800d2ca:	b084      	sub	sp, #16
 800d2cc:	af00      	add	r7, sp, #0
 800d2ce:	6078      	str	r0, [r7, #4]
 800d2d0:	460b      	mov	r3, r1
 800d2d2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d2d4:	2300      	movs	r3, #0
 800d2d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d2d8:	2300      	movs	r3, #0
 800d2da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d2e2:	78fa      	ldrb	r2, [r7, #3]
 800d2e4:	4611      	mov	r1, r2
 800d2e6:	4618      	mov	r0, r3
 800d2e8:	f7f8 fe58 	bl	8005f9c <HAL_PCD_SetAddress>
 800d2ec:	4603      	mov	r3, r0
 800d2ee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d2f0:	7bfb      	ldrb	r3, [r7, #15]
 800d2f2:	4618      	mov	r0, r3
 800d2f4:	f000 f862 	bl	800d3bc <USBD_Get_USB_Status>
 800d2f8:	4603      	mov	r3, r0
 800d2fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d2fc:	7bbb      	ldrb	r3, [r7, #14]
}
 800d2fe:	4618      	mov	r0, r3
 800d300:	3710      	adds	r7, #16
 800d302:	46bd      	mov	sp, r7
 800d304:	bd80      	pop	{r7, pc}

0800d306 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d306:	b580      	push	{r7, lr}
 800d308:	b086      	sub	sp, #24
 800d30a:	af00      	add	r7, sp, #0
 800d30c:	60f8      	str	r0, [r7, #12]
 800d30e:	607a      	str	r2, [r7, #4]
 800d310:	603b      	str	r3, [r7, #0]
 800d312:	460b      	mov	r3, r1
 800d314:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d316:	2300      	movs	r3, #0
 800d318:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d31a:	2300      	movs	r3, #0
 800d31c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d31e:	68fb      	ldr	r3, [r7, #12]
 800d320:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800d324:	7af9      	ldrb	r1, [r7, #11]
 800d326:	683b      	ldr	r3, [r7, #0]
 800d328:	687a      	ldr	r2, [r7, #4]
 800d32a:	f7f8 ff59 	bl	80061e0 <HAL_PCD_EP_Transmit>
 800d32e:	4603      	mov	r3, r0
 800d330:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d332:	7dfb      	ldrb	r3, [r7, #23]
 800d334:	4618      	mov	r0, r3
 800d336:	f000 f841 	bl	800d3bc <USBD_Get_USB_Status>
 800d33a:	4603      	mov	r3, r0
 800d33c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d33e:	7dbb      	ldrb	r3, [r7, #22]
}
 800d340:	4618      	mov	r0, r3
 800d342:	3718      	adds	r7, #24
 800d344:	46bd      	mov	sp, r7
 800d346:	bd80      	pop	{r7, pc}

0800d348 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d348:	b580      	push	{r7, lr}
 800d34a:	b086      	sub	sp, #24
 800d34c:	af00      	add	r7, sp, #0
 800d34e:	60f8      	str	r0, [r7, #12]
 800d350:	607a      	str	r2, [r7, #4]
 800d352:	603b      	str	r3, [r7, #0]
 800d354:	460b      	mov	r3, r1
 800d356:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d358:	2300      	movs	r3, #0
 800d35a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d35c:	2300      	movs	r3, #0
 800d35e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800d366:	7af9      	ldrb	r1, [r7, #11]
 800d368:	683b      	ldr	r3, [r7, #0]
 800d36a:	687a      	ldr	r2, [r7, #4]
 800d36c:	f7f8 feed 	bl	800614a <HAL_PCD_EP_Receive>
 800d370:	4603      	mov	r3, r0
 800d372:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d374:	7dfb      	ldrb	r3, [r7, #23]
 800d376:	4618      	mov	r0, r3
 800d378:	f000 f820 	bl	800d3bc <USBD_Get_USB_Status>
 800d37c:	4603      	mov	r3, r0
 800d37e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d380:	7dbb      	ldrb	r3, [r7, #22]
}
 800d382:	4618      	mov	r0, r3
 800d384:	3718      	adds	r7, #24
 800d386:	46bd      	mov	sp, r7
 800d388:	bd80      	pop	{r7, pc}
	...

0800d38c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d38c:	b480      	push	{r7}
 800d38e:	b083      	sub	sp, #12
 800d390:	af00      	add	r7, sp, #0
 800d392:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 800d394:	4b03      	ldr	r3, [pc, #12]	; (800d3a4 <USBD_static_malloc+0x18>)
}
 800d396:	4618      	mov	r0, r3
 800d398:	370c      	adds	r7, #12
 800d39a:	46bd      	mov	sp, r7
 800d39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3a0:	4770      	bx	lr
 800d3a2:	bf00      	nop
 800d3a4:	200017ac 	.word	0x200017ac

0800d3a8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d3a8:	b480      	push	{r7}
 800d3aa:	b083      	sub	sp, #12
 800d3ac:	af00      	add	r7, sp, #0
 800d3ae:	6078      	str	r0, [r7, #4]

}
 800d3b0:	bf00      	nop
 800d3b2:	370c      	adds	r7, #12
 800d3b4:	46bd      	mov	sp, r7
 800d3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ba:	4770      	bx	lr

0800d3bc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d3bc:	b480      	push	{r7}
 800d3be:	b085      	sub	sp, #20
 800d3c0:	af00      	add	r7, sp, #0
 800d3c2:	4603      	mov	r3, r0
 800d3c4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d3c6:	2300      	movs	r3, #0
 800d3c8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d3ca:	79fb      	ldrb	r3, [r7, #7]
 800d3cc:	2b03      	cmp	r3, #3
 800d3ce:	d817      	bhi.n	800d400 <USBD_Get_USB_Status+0x44>
 800d3d0:	a201      	add	r2, pc, #4	; (adr r2, 800d3d8 <USBD_Get_USB_Status+0x1c>)
 800d3d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3d6:	bf00      	nop
 800d3d8:	0800d3e9 	.word	0x0800d3e9
 800d3dc:	0800d3ef 	.word	0x0800d3ef
 800d3e0:	0800d3f5 	.word	0x0800d3f5
 800d3e4:	0800d3fb 	.word	0x0800d3fb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d3e8:	2300      	movs	r3, #0
 800d3ea:	73fb      	strb	r3, [r7, #15]
    break;
 800d3ec:	e00b      	b.n	800d406 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d3ee:	2303      	movs	r3, #3
 800d3f0:	73fb      	strb	r3, [r7, #15]
    break;
 800d3f2:	e008      	b.n	800d406 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d3f4:	2301      	movs	r3, #1
 800d3f6:	73fb      	strb	r3, [r7, #15]
    break;
 800d3f8:	e005      	b.n	800d406 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d3fa:	2303      	movs	r3, #3
 800d3fc:	73fb      	strb	r3, [r7, #15]
    break;
 800d3fe:	e002      	b.n	800d406 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d400:	2303      	movs	r3, #3
 800d402:	73fb      	strb	r3, [r7, #15]
    break;
 800d404:	bf00      	nop
  }
  return usb_status;
 800d406:	7bfb      	ldrb	r3, [r7, #15]
}
 800d408:	4618      	mov	r0, r3
 800d40a:	3714      	adds	r7, #20
 800d40c:	46bd      	mov	sp, r7
 800d40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d412:	4770      	bx	lr

0800d414 <__errno>:
 800d414:	4b01      	ldr	r3, [pc, #4]	; (800d41c <__errno+0x8>)
 800d416:	6818      	ldr	r0, [r3, #0]
 800d418:	4770      	bx	lr
 800d41a:	bf00      	nop
 800d41c:	2000011c 	.word	0x2000011c

0800d420 <__libc_init_array>:
 800d420:	b570      	push	{r4, r5, r6, lr}
 800d422:	4d0d      	ldr	r5, [pc, #52]	; (800d458 <__libc_init_array+0x38>)
 800d424:	4c0d      	ldr	r4, [pc, #52]	; (800d45c <__libc_init_array+0x3c>)
 800d426:	1b64      	subs	r4, r4, r5
 800d428:	10a4      	asrs	r4, r4, #2
 800d42a:	2600      	movs	r6, #0
 800d42c:	42a6      	cmp	r6, r4
 800d42e:	d109      	bne.n	800d444 <__libc_init_array+0x24>
 800d430:	4d0b      	ldr	r5, [pc, #44]	; (800d460 <__libc_init_array+0x40>)
 800d432:	4c0c      	ldr	r4, [pc, #48]	; (800d464 <__libc_init_array+0x44>)
 800d434:	f001 f816 	bl	800e464 <_init>
 800d438:	1b64      	subs	r4, r4, r5
 800d43a:	10a4      	asrs	r4, r4, #2
 800d43c:	2600      	movs	r6, #0
 800d43e:	42a6      	cmp	r6, r4
 800d440:	d105      	bne.n	800d44e <__libc_init_array+0x2e>
 800d442:	bd70      	pop	{r4, r5, r6, pc}
 800d444:	f855 3b04 	ldr.w	r3, [r5], #4
 800d448:	4798      	blx	r3
 800d44a:	3601      	adds	r6, #1
 800d44c:	e7ee      	b.n	800d42c <__libc_init_array+0xc>
 800d44e:	f855 3b04 	ldr.w	r3, [r5], #4
 800d452:	4798      	blx	r3
 800d454:	3601      	adds	r6, #1
 800d456:	e7f2      	b.n	800d43e <__libc_init_array+0x1e>
 800d458:	08030650 	.word	0x08030650
 800d45c:	08030650 	.word	0x08030650
 800d460:	08030650 	.word	0x08030650
 800d464:	08030654 	.word	0x08030654

0800d468 <memset>:
 800d468:	4402      	add	r2, r0
 800d46a:	4603      	mov	r3, r0
 800d46c:	4293      	cmp	r3, r2
 800d46e:	d100      	bne.n	800d472 <memset+0xa>
 800d470:	4770      	bx	lr
 800d472:	f803 1b01 	strb.w	r1, [r3], #1
 800d476:	e7f9      	b.n	800d46c <memset+0x4>

0800d478 <__sfputc_r>:
 800d478:	6893      	ldr	r3, [r2, #8]
 800d47a:	3b01      	subs	r3, #1
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	b410      	push	{r4}
 800d480:	6093      	str	r3, [r2, #8]
 800d482:	da08      	bge.n	800d496 <__sfputc_r+0x1e>
 800d484:	6994      	ldr	r4, [r2, #24]
 800d486:	42a3      	cmp	r3, r4
 800d488:	db01      	blt.n	800d48e <__sfputc_r+0x16>
 800d48a:	290a      	cmp	r1, #10
 800d48c:	d103      	bne.n	800d496 <__sfputc_r+0x1e>
 800d48e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d492:	f000 bb17 	b.w	800dac4 <__swbuf_r>
 800d496:	6813      	ldr	r3, [r2, #0]
 800d498:	1c58      	adds	r0, r3, #1
 800d49a:	6010      	str	r0, [r2, #0]
 800d49c:	7019      	strb	r1, [r3, #0]
 800d49e:	4608      	mov	r0, r1
 800d4a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d4a4:	4770      	bx	lr

0800d4a6 <__sfputs_r>:
 800d4a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4a8:	4606      	mov	r6, r0
 800d4aa:	460f      	mov	r7, r1
 800d4ac:	4614      	mov	r4, r2
 800d4ae:	18d5      	adds	r5, r2, r3
 800d4b0:	42ac      	cmp	r4, r5
 800d4b2:	d101      	bne.n	800d4b8 <__sfputs_r+0x12>
 800d4b4:	2000      	movs	r0, #0
 800d4b6:	e007      	b.n	800d4c8 <__sfputs_r+0x22>
 800d4b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d4bc:	463a      	mov	r2, r7
 800d4be:	4630      	mov	r0, r6
 800d4c0:	f7ff ffda 	bl	800d478 <__sfputc_r>
 800d4c4:	1c43      	adds	r3, r0, #1
 800d4c6:	d1f3      	bne.n	800d4b0 <__sfputs_r+0xa>
 800d4c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d4cc <_vfiprintf_r>:
 800d4cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4d0:	460d      	mov	r5, r1
 800d4d2:	b09d      	sub	sp, #116	; 0x74
 800d4d4:	4614      	mov	r4, r2
 800d4d6:	4698      	mov	r8, r3
 800d4d8:	4606      	mov	r6, r0
 800d4da:	b118      	cbz	r0, 800d4e4 <_vfiprintf_r+0x18>
 800d4dc:	6983      	ldr	r3, [r0, #24]
 800d4de:	b90b      	cbnz	r3, 800d4e4 <_vfiprintf_r+0x18>
 800d4e0:	f000 fcca 	bl	800de78 <__sinit>
 800d4e4:	4b89      	ldr	r3, [pc, #548]	; (800d70c <_vfiprintf_r+0x240>)
 800d4e6:	429d      	cmp	r5, r3
 800d4e8:	d11b      	bne.n	800d522 <_vfiprintf_r+0x56>
 800d4ea:	6875      	ldr	r5, [r6, #4]
 800d4ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d4ee:	07d9      	lsls	r1, r3, #31
 800d4f0:	d405      	bmi.n	800d4fe <_vfiprintf_r+0x32>
 800d4f2:	89ab      	ldrh	r3, [r5, #12]
 800d4f4:	059a      	lsls	r2, r3, #22
 800d4f6:	d402      	bmi.n	800d4fe <_vfiprintf_r+0x32>
 800d4f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d4fa:	f000 fd5b 	bl	800dfb4 <__retarget_lock_acquire_recursive>
 800d4fe:	89ab      	ldrh	r3, [r5, #12]
 800d500:	071b      	lsls	r3, r3, #28
 800d502:	d501      	bpl.n	800d508 <_vfiprintf_r+0x3c>
 800d504:	692b      	ldr	r3, [r5, #16]
 800d506:	b9eb      	cbnz	r3, 800d544 <_vfiprintf_r+0x78>
 800d508:	4629      	mov	r1, r5
 800d50a:	4630      	mov	r0, r6
 800d50c:	f000 fb2c 	bl	800db68 <__swsetup_r>
 800d510:	b1c0      	cbz	r0, 800d544 <_vfiprintf_r+0x78>
 800d512:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d514:	07dc      	lsls	r4, r3, #31
 800d516:	d50e      	bpl.n	800d536 <_vfiprintf_r+0x6a>
 800d518:	f04f 30ff 	mov.w	r0, #4294967295
 800d51c:	b01d      	add	sp, #116	; 0x74
 800d51e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d522:	4b7b      	ldr	r3, [pc, #492]	; (800d710 <_vfiprintf_r+0x244>)
 800d524:	429d      	cmp	r5, r3
 800d526:	d101      	bne.n	800d52c <_vfiprintf_r+0x60>
 800d528:	68b5      	ldr	r5, [r6, #8]
 800d52a:	e7df      	b.n	800d4ec <_vfiprintf_r+0x20>
 800d52c:	4b79      	ldr	r3, [pc, #484]	; (800d714 <_vfiprintf_r+0x248>)
 800d52e:	429d      	cmp	r5, r3
 800d530:	bf08      	it	eq
 800d532:	68f5      	ldreq	r5, [r6, #12]
 800d534:	e7da      	b.n	800d4ec <_vfiprintf_r+0x20>
 800d536:	89ab      	ldrh	r3, [r5, #12]
 800d538:	0598      	lsls	r0, r3, #22
 800d53a:	d4ed      	bmi.n	800d518 <_vfiprintf_r+0x4c>
 800d53c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d53e:	f000 fd3a 	bl	800dfb6 <__retarget_lock_release_recursive>
 800d542:	e7e9      	b.n	800d518 <_vfiprintf_r+0x4c>
 800d544:	2300      	movs	r3, #0
 800d546:	9309      	str	r3, [sp, #36]	; 0x24
 800d548:	2320      	movs	r3, #32
 800d54a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d54e:	f8cd 800c 	str.w	r8, [sp, #12]
 800d552:	2330      	movs	r3, #48	; 0x30
 800d554:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d718 <_vfiprintf_r+0x24c>
 800d558:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d55c:	f04f 0901 	mov.w	r9, #1
 800d560:	4623      	mov	r3, r4
 800d562:	469a      	mov	sl, r3
 800d564:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d568:	b10a      	cbz	r2, 800d56e <_vfiprintf_r+0xa2>
 800d56a:	2a25      	cmp	r2, #37	; 0x25
 800d56c:	d1f9      	bne.n	800d562 <_vfiprintf_r+0x96>
 800d56e:	ebba 0b04 	subs.w	fp, sl, r4
 800d572:	d00b      	beq.n	800d58c <_vfiprintf_r+0xc0>
 800d574:	465b      	mov	r3, fp
 800d576:	4622      	mov	r2, r4
 800d578:	4629      	mov	r1, r5
 800d57a:	4630      	mov	r0, r6
 800d57c:	f7ff ff93 	bl	800d4a6 <__sfputs_r>
 800d580:	3001      	adds	r0, #1
 800d582:	f000 80aa 	beq.w	800d6da <_vfiprintf_r+0x20e>
 800d586:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d588:	445a      	add	r2, fp
 800d58a:	9209      	str	r2, [sp, #36]	; 0x24
 800d58c:	f89a 3000 	ldrb.w	r3, [sl]
 800d590:	2b00      	cmp	r3, #0
 800d592:	f000 80a2 	beq.w	800d6da <_vfiprintf_r+0x20e>
 800d596:	2300      	movs	r3, #0
 800d598:	f04f 32ff 	mov.w	r2, #4294967295
 800d59c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d5a0:	f10a 0a01 	add.w	sl, sl, #1
 800d5a4:	9304      	str	r3, [sp, #16]
 800d5a6:	9307      	str	r3, [sp, #28]
 800d5a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d5ac:	931a      	str	r3, [sp, #104]	; 0x68
 800d5ae:	4654      	mov	r4, sl
 800d5b0:	2205      	movs	r2, #5
 800d5b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d5b6:	4858      	ldr	r0, [pc, #352]	; (800d718 <_vfiprintf_r+0x24c>)
 800d5b8:	f7f2 fe12 	bl	80001e0 <memchr>
 800d5bc:	9a04      	ldr	r2, [sp, #16]
 800d5be:	b9d8      	cbnz	r0, 800d5f8 <_vfiprintf_r+0x12c>
 800d5c0:	06d1      	lsls	r1, r2, #27
 800d5c2:	bf44      	itt	mi
 800d5c4:	2320      	movmi	r3, #32
 800d5c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d5ca:	0713      	lsls	r3, r2, #28
 800d5cc:	bf44      	itt	mi
 800d5ce:	232b      	movmi	r3, #43	; 0x2b
 800d5d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d5d4:	f89a 3000 	ldrb.w	r3, [sl]
 800d5d8:	2b2a      	cmp	r3, #42	; 0x2a
 800d5da:	d015      	beq.n	800d608 <_vfiprintf_r+0x13c>
 800d5dc:	9a07      	ldr	r2, [sp, #28]
 800d5de:	4654      	mov	r4, sl
 800d5e0:	2000      	movs	r0, #0
 800d5e2:	f04f 0c0a 	mov.w	ip, #10
 800d5e6:	4621      	mov	r1, r4
 800d5e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d5ec:	3b30      	subs	r3, #48	; 0x30
 800d5ee:	2b09      	cmp	r3, #9
 800d5f0:	d94e      	bls.n	800d690 <_vfiprintf_r+0x1c4>
 800d5f2:	b1b0      	cbz	r0, 800d622 <_vfiprintf_r+0x156>
 800d5f4:	9207      	str	r2, [sp, #28]
 800d5f6:	e014      	b.n	800d622 <_vfiprintf_r+0x156>
 800d5f8:	eba0 0308 	sub.w	r3, r0, r8
 800d5fc:	fa09 f303 	lsl.w	r3, r9, r3
 800d600:	4313      	orrs	r3, r2
 800d602:	9304      	str	r3, [sp, #16]
 800d604:	46a2      	mov	sl, r4
 800d606:	e7d2      	b.n	800d5ae <_vfiprintf_r+0xe2>
 800d608:	9b03      	ldr	r3, [sp, #12]
 800d60a:	1d19      	adds	r1, r3, #4
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	9103      	str	r1, [sp, #12]
 800d610:	2b00      	cmp	r3, #0
 800d612:	bfbb      	ittet	lt
 800d614:	425b      	neglt	r3, r3
 800d616:	f042 0202 	orrlt.w	r2, r2, #2
 800d61a:	9307      	strge	r3, [sp, #28]
 800d61c:	9307      	strlt	r3, [sp, #28]
 800d61e:	bfb8      	it	lt
 800d620:	9204      	strlt	r2, [sp, #16]
 800d622:	7823      	ldrb	r3, [r4, #0]
 800d624:	2b2e      	cmp	r3, #46	; 0x2e
 800d626:	d10c      	bne.n	800d642 <_vfiprintf_r+0x176>
 800d628:	7863      	ldrb	r3, [r4, #1]
 800d62a:	2b2a      	cmp	r3, #42	; 0x2a
 800d62c:	d135      	bne.n	800d69a <_vfiprintf_r+0x1ce>
 800d62e:	9b03      	ldr	r3, [sp, #12]
 800d630:	1d1a      	adds	r2, r3, #4
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	9203      	str	r2, [sp, #12]
 800d636:	2b00      	cmp	r3, #0
 800d638:	bfb8      	it	lt
 800d63a:	f04f 33ff 	movlt.w	r3, #4294967295
 800d63e:	3402      	adds	r4, #2
 800d640:	9305      	str	r3, [sp, #20]
 800d642:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d728 <_vfiprintf_r+0x25c>
 800d646:	7821      	ldrb	r1, [r4, #0]
 800d648:	2203      	movs	r2, #3
 800d64a:	4650      	mov	r0, sl
 800d64c:	f7f2 fdc8 	bl	80001e0 <memchr>
 800d650:	b140      	cbz	r0, 800d664 <_vfiprintf_r+0x198>
 800d652:	2340      	movs	r3, #64	; 0x40
 800d654:	eba0 000a 	sub.w	r0, r0, sl
 800d658:	fa03 f000 	lsl.w	r0, r3, r0
 800d65c:	9b04      	ldr	r3, [sp, #16]
 800d65e:	4303      	orrs	r3, r0
 800d660:	3401      	adds	r4, #1
 800d662:	9304      	str	r3, [sp, #16]
 800d664:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d668:	482c      	ldr	r0, [pc, #176]	; (800d71c <_vfiprintf_r+0x250>)
 800d66a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d66e:	2206      	movs	r2, #6
 800d670:	f7f2 fdb6 	bl	80001e0 <memchr>
 800d674:	2800      	cmp	r0, #0
 800d676:	d03f      	beq.n	800d6f8 <_vfiprintf_r+0x22c>
 800d678:	4b29      	ldr	r3, [pc, #164]	; (800d720 <_vfiprintf_r+0x254>)
 800d67a:	bb1b      	cbnz	r3, 800d6c4 <_vfiprintf_r+0x1f8>
 800d67c:	9b03      	ldr	r3, [sp, #12]
 800d67e:	3307      	adds	r3, #7
 800d680:	f023 0307 	bic.w	r3, r3, #7
 800d684:	3308      	adds	r3, #8
 800d686:	9303      	str	r3, [sp, #12]
 800d688:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d68a:	443b      	add	r3, r7
 800d68c:	9309      	str	r3, [sp, #36]	; 0x24
 800d68e:	e767      	b.n	800d560 <_vfiprintf_r+0x94>
 800d690:	fb0c 3202 	mla	r2, ip, r2, r3
 800d694:	460c      	mov	r4, r1
 800d696:	2001      	movs	r0, #1
 800d698:	e7a5      	b.n	800d5e6 <_vfiprintf_r+0x11a>
 800d69a:	2300      	movs	r3, #0
 800d69c:	3401      	adds	r4, #1
 800d69e:	9305      	str	r3, [sp, #20]
 800d6a0:	4619      	mov	r1, r3
 800d6a2:	f04f 0c0a 	mov.w	ip, #10
 800d6a6:	4620      	mov	r0, r4
 800d6a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d6ac:	3a30      	subs	r2, #48	; 0x30
 800d6ae:	2a09      	cmp	r2, #9
 800d6b0:	d903      	bls.n	800d6ba <_vfiprintf_r+0x1ee>
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d0c5      	beq.n	800d642 <_vfiprintf_r+0x176>
 800d6b6:	9105      	str	r1, [sp, #20]
 800d6b8:	e7c3      	b.n	800d642 <_vfiprintf_r+0x176>
 800d6ba:	fb0c 2101 	mla	r1, ip, r1, r2
 800d6be:	4604      	mov	r4, r0
 800d6c0:	2301      	movs	r3, #1
 800d6c2:	e7f0      	b.n	800d6a6 <_vfiprintf_r+0x1da>
 800d6c4:	ab03      	add	r3, sp, #12
 800d6c6:	9300      	str	r3, [sp, #0]
 800d6c8:	462a      	mov	r2, r5
 800d6ca:	4b16      	ldr	r3, [pc, #88]	; (800d724 <_vfiprintf_r+0x258>)
 800d6cc:	a904      	add	r1, sp, #16
 800d6ce:	4630      	mov	r0, r6
 800d6d0:	f3af 8000 	nop.w
 800d6d4:	4607      	mov	r7, r0
 800d6d6:	1c78      	adds	r0, r7, #1
 800d6d8:	d1d6      	bne.n	800d688 <_vfiprintf_r+0x1bc>
 800d6da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d6dc:	07d9      	lsls	r1, r3, #31
 800d6de:	d405      	bmi.n	800d6ec <_vfiprintf_r+0x220>
 800d6e0:	89ab      	ldrh	r3, [r5, #12]
 800d6e2:	059a      	lsls	r2, r3, #22
 800d6e4:	d402      	bmi.n	800d6ec <_vfiprintf_r+0x220>
 800d6e6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d6e8:	f000 fc65 	bl	800dfb6 <__retarget_lock_release_recursive>
 800d6ec:	89ab      	ldrh	r3, [r5, #12]
 800d6ee:	065b      	lsls	r3, r3, #25
 800d6f0:	f53f af12 	bmi.w	800d518 <_vfiprintf_r+0x4c>
 800d6f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d6f6:	e711      	b.n	800d51c <_vfiprintf_r+0x50>
 800d6f8:	ab03      	add	r3, sp, #12
 800d6fa:	9300      	str	r3, [sp, #0]
 800d6fc:	462a      	mov	r2, r5
 800d6fe:	4b09      	ldr	r3, [pc, #36]	; (800d724 <_vfiprintf_r+0x258>)
 800d700:	a904      	add	r1, sp, #16
 800d702:	4630      	mov	r0, r6
 800d704:	f000 f88a 	bl	800d81c <_printf_i>
 800d708:	e7e4      	b.n	800d6d4 <_vfiprintf_r+0x208>
 800d70a:	bf00      	nop
 800d70c:	08030608 	.word	0x08030608
 800d710:	08030628 	.word	0x08030628
 800d714:	080305e8 	.word	0x080305e8
 800d718:	080305b4 	.word	0x080305b4
 800d71c:	080305be 	.word	0x080305be
 800d720:	00000000 	.word	0x00000000
 800d724:	0800d4a7 	.word	0x0800d4a7
 800d728:	080305ba 	.word	0x080305ba

0800d72c <vfiprintf>:
 800d72c:	4613      	mov	r3, r2
 800d72e:	460a      	mov	r2, r1
 800d730:	4601      	mov	r1, r0
 800d732:	4802      	ldr	r0, [pc, #8]	; (800d73c <vfiprintf+0x10>)
 800d734:	6800      	ldr	r0, [r0, #0]
 800d736:	f7ff bec9 	b.w	800d4cc <_vfiprintf_r>
 800d73a:	bf00      	nop
 800d73c:	2000011c 	.word	0x2000011c

0800d740 <_printf_common>:
 800d740:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d744:	4616      	mov	r6, r2
 800d746:	4699      	mov	r9, r3
 800d748:	688a      	ldr	r2, [r1, #8]
 800d74a:	690b      	ldr	r3, [r1, #16]
 800d74c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d750:	4293      	cmp	r3, r2
 800d752:	bfb8      	it	lt
 800d754:	4613      	movlt	r3, r2
 800d756:	6033      	str	r3, [r6, #0]
 800d758:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d75c:	4607      	mov	r7, r0
 800d75e:	460c      	mov	r4, r1
 800d760:	b10a      	cbz	r2, 800d766 <_printf_common+0x26>
 800d762:	3301      	adds	r3, #1
 800d764:	6033      	str	r3, [r6, #0]
 800d766:	6823      	ldr	r3, [r4, #0]
 800d768:	0699      	lsls	r1, r3, #26
 800d76a:	bf42      	ittt	mi
 800d76c:	6833      	ldrmi	r3, [r6, #0]
 800d76e:	3302      	addmi	r3, #2
 800d770:	6033      	strmi	r3, [r6, #0]
 800d772:	6825      	ldr	r5, [r4, #0]
 800d774:	f015 0506 	ands.w	r5, r5, #6
 800d778:	d106      	bne.n	800d788 <_printf_common+0x48>
 800d77a:	f104 0a19 	add.w	sl, r4, #25
 800d77e:	68e3      	ldr	r3, [r4, #12]
 800d780:	6832      	ldr	r2, [r6, #0]
 800d782:	1a9b      	subs	r3, r3, r2
 800d784:	42ab      	cmp	r3, r5
 800d786:	dc26      	bgt.n	800d7d6 <_printf_common+0x96>
 800d788:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d78c:	1e13      	subs	r3, r2, #0
 800d78e:	6822      	ldr	r2, [r4, #0]
 800d790:	bf18      	it	ne
 800d792:	2301      	movne	r3, #1
 800d794:	0692      	lsls	r2, r2, #26
 800d796:	d42b      	bmi.n	800d7f0 <_printf_common+0xb0>
 800d798:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d79c:	4649      	mov	r1, r9
 800d79e:	4638      	mov	r0, r7
 800d7a0:	47c0      	blx	r8
 800d7a2:	3001      	adds	r0, #1
 800d7a4:	d01e      	beq.n	800d7e4 <_printf_common+0xa4>
 800d7a6:	6823      	ldr	r3, [r4, #0]
 800d7a8:	68e5      	ldr	r5, [r4, #12]
 800d7aa:	6832      	ldr	r2, [r6, #0]
 800d7ac:	f003 0306 	and.w	r3, r3, #6
 800d7b0:	2b04      	cmp	r3, #4
 800d7b2:	bf08      	it	eq
 800d7b4:	1aad      	subeq	r5, r5, r2
 800d7b6:	68a3      	ldr	r3, [r4, #8]
 800d7b8:	6922      	ldr	r2, [r4, #16]
 800d7ba:	bf0c      	ite	eq
 800d7bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d7c0:	2500      	movne	r5, #0
 800d7c2:	4293      	cmp	r3, r2
 800d7c4:	bfc4      	itt	gt
 800d7c6:	1a9b      	subgt	r3, r3, r2
 800d7c8:	18ed      	addgt	r5, r5, r3
 800d7ca:	2600      	movs	r6, #0
 800d7cc:	341a      	adds	r4, #26
 800d7ce:	42b5      	cmp	r5, r6
 800d7d0:	d11a      	bne.n	800d808 <_printf_common+0xc8>
 800d7d2:	2000      	movs	r0, #0
 800d7d4:	e008      	b.n	800d7e8 <_printf_common+0xa8>
 800d7d6:	2301      	movs	r3, #1
 800d7d8:	4652      	mov	r2, sl
 800d7da:	4649      	mov	r1, r9
 800d7dc:	4638      	mov	r0, r7
 800d7de:	47c0      	blx	r8
 800d7e0:	3001      	adds	r0, #1
 800d7e2:	d103      	bne.n	800d7ec <_printf_common+0xac>
 800d7e4:	f04f 30ff 	mov.w	r0, #4294967295
 800d7e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d7ec:	3501      	adds	r5, #1
 800d7ee:	e7c6      	b.n	800d77e <_printf_common+0x3e>
 800d7f0:	18e1      	adds	r1, r4, r3
 800d7f2:	1c5a      	adds	r2, r3, #1
 800d7f4:	2030      	movs	r0, #48	; 0x30
 800d7f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d7fa:	4422      	add	r2, r4
 800d7fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d800:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d804:	3302      	adds	r3, #2
 800d806:	e7c7      	b.n	800d798 <_printf_common+0x58>
 800d808:	2301      	movs	r3, #1
 800d80a:	4622      	mov	r2, r4
 800d80c:	4649      	mov	r1, r9
 800d80e:	4638      	mov	r0, r7
 800d810:	47c0      	blx	r8
 800d812:	3001      	adds	r0, #1
 800d814:	d0e6      	beq.n	800d7e4 <_printf_common+0xa4>
 800d816:	3601      	adds	r6, #1
 800d818:	e7d9      	b.n	800d7ce <_printf_common+0x8e>
	...

0800d81c <_printf_i>:
 800d81c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d820:	7e0f      	ldrb	r7, [r1, #24]
 800d822:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d824:	2f78      	cmp	r7, #120	; 0x78
 800d826:	4691      	mov	r9, r2
 800d828:	4680      	mov	r8, r0
 800d82a:	460c      	mov	r4, r1
 800d82c:	469a      	mov	sl, r3
 800d82e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d832:	d807      	bhi.n	800d844 <_printf_i+0x28>
 800d834:	2f62      	cmp	r7, #98	; 0x62
 800d836:	d80a      	bhi.n	800d84e <_printf_i+0x32>
 800d838:	2f00      	cmp	r7, #0
 800d83a:	f000 80d8 	beq.w	800d9ee <_printf_i+0x1d2>
 800d83e:	2f58      	cmp	r7, #88	; 0x58
 800d840:	f000 80a3 	beq.w	800d98a <_printf_i+0x16e>
 800d844:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d848:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d84c:	e03a      	b.n	800d8c4 <_printf_i+0xa8>
 800d84e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d852:	2b15      	cmp	r3, #21
 800d854:	d8f6      	bhi.n	800d844 <_printf_i+0x28>
 800d856:	a101      	add	r1, pc, #4	; (adr r1, 800d85c <_printf_i+0x40>)
 800d858:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d85c:	0800d8b5 	.word	0x0800d8b5
 800d860:	0800d8c9 	.word	0x0800d8c9
 800d864:	0800d845 	.word	0x0800d845
 800d868:	0800d845 	.word	0x0800d845
 800d86c:	0800d845 	.word	0x0800d845
 800d870:	0800d845 	.word	0x0800d845
 800d874:	0800d8c9 	.word	0x0800d8c9
 800d878:	0800d845 	.word	0x0800d845
 800d87c:	0800d845 	.word	0x0800d845
 800d880:	0800d845 	.word	0x0800d845
 800d884:	0800d845 	.word	0x0800d845
 800d888:	0800d9d5 	.word	0x0800d9d5
 800d88c:	0800d8f9 	.word	0x0800d8f9
 800d890:	0800d9b7 	.word	0x0800d9b7
 800d894:	0800d845 	.word	0x0800d845
 800d898:	0800d845 	.word	0x0800d845
 800d89c:	0800d9f7 	.word	0x0800d9f7
 800d8a0:	0800d845 	.word	0x0800d845
 800d8a4:	0800d8f9 	.word	0x0800d8f9
 800d8a8:	0800d845 	.word	0x0800d845
 800d8ac:	0800d845 	.word	0x0800d845
 800d8b0:	0800d9bf 	.word	0x0800d9bf
 800d8b4:	682b      	ldr	r3, [r5, #0]
 800d8b6:	1d1a      	adds	r2, r3, #4
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	602a      	str	r2, [r5, #0]
 800d8bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d8c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d8c4:	2301      	movs	r3, #1
 800d8c6:	e0a3      	b.n	800da10 <_printf_i+0x1f4>
 800d8c8:	6820      	ldr	r0, [r4, #0]
 800d8ca:	6829      	ldr	r1, [r5, #0]
 800d8cc:	0606      	lsls	r6, r0, #24
 800d8ce:	f101 0304 	add.w	r3, r1, #4
 800d8d2:	d50a      	bpl.n	800d8ea <_printf_i+0xce>
 800d8d4:	680e      	ldr	r6, [r1, #0]
 800d8d6:	602b      	str	r3, [r5, #0]
 800d8d8:	2e00      	cmp	r6, #0
 800d8da:	da03      	bge.n	800d8e4 <_printf_i+0xc8>
 800d8dc:	232d      	movs	r3, #45	; 0x2d
 800d8de:	4276      	negs	r6, r6
 800d8e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d8e4:	485e      	ldr	r0, [pc, #376]	; (800da60 <_printf_i+0x244>)
 800d8e6:	230a      	movs	r3, #10
 800d8e8:	e019      	b.n	800d91e <_printf_i+0x102>
 800d8ea:	680e      	ldr	r6, [r1, #0]
 800d8ec:	602b      	str	r3, [r5, #0]
 800d8ee:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d8f2:	bf18      	it	ne
 800d8f4:	b236      	sxthne	r6, r6
 800d8f6:	e7ef      	b.n	800d8d8 <_printf_i+0xbc>
 800d8f8:	682b      	ldr	r3, [r5, #0]
 800d8fa:	6820      	ldr	r0, [r4, #0]
 800d8fc:	1d19      	adds	r1, r3, #4
 800d8fe:	6029      	str	r1, [r5, #0]
 800d900:	0601      	lsls	r1, r0, #24
 800d902:	d501      	bpl.n	800d908 <_printf_i+0xec>
 800d904:	681e      	ldr	r6, [r3, #0]
 800d906:	e002      	b.n	800d90e <_printf_i+0xf2>
 800d908:	0646      	lsls	r6, r0, #25
 800d90a:	d5fb      	bpl.n	800d904 <_printf_i+0xe8>
 800d90c:	881e      	ldrh	r6, [r3, #0]
 800d90e:	4854      	ldr	r0, [pc, #336]	; (800da60 <_printf_i+0x244>)
 800d910:	2f6f      	cmp	r7, #111	; 0x6f
 800d912:	bf0c      	ite	eq
 800d914:	2308      	moveq	r3, #8
 800d916:	230a      	movne	r3, #10
 800d918:	2100      	movs	r1, #0
 800d91a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d91e:	6865      	ldr	r5, [r4, #4]
 800d920:	60a5      	str	r5, [r4, #8]
 800d922:	2d00      	cmp	r5, #0
 800d924:	bfa2      	ittt	ge
 800d926:	6821      	ldrge	r1, [r4, #0]
 800d928:	f021 0104 	bicge.w	r1, r1, #4
 800d92c:	6021      	strge	r1, [r4, #0]
 800d92e:	b90e      	cbnz	r6, 800d934 <_printf_i+0x118>
 800d930:	2d00      	cmp	r5, #0
 800d932:	d04d      	beq.n	800d9d0 <_printf_i+0x1b4>
 800d934:	4615      	mov	r5, r2
 800d936:	fbb6 f1f3 	udiv	r1, r6, r3
 800d93a:	fb03 6711 	mls	r7, r3, r1, r6
 800d93e:	5dc7      	ldrb	r7, [r0, r7]
 800d940:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d944:	4637      	mov	r7, r6
 800d946:	42bb      	cmp	r3, r7
 800d948:	460e      	mov	r6, r1
 800d94a:	d9f4      	bls.n	800d936 <_printf_i+0x11a>
 800d94c:	2b08      	cmp	r3, #8
 800d94e:	d10b      	bne.n	800d968 <_printf_i+0x14c>
 800d950:	6823      	ldr	r3, [r4, #0]
 800d952:	07de      	lsls	r6, r3, #31
 800d954:	d508      	bpl.n	800d968 <_printf_i+0x14c>
 800d956:	6923      	ldr	r3, [r4, #16]
 800d958:	6861      	ldr	r1, [r4, #4]
 800d95a:	4299      	cmp	r1, r3
 800d95c:	bfde      	ittt	le
 800d95e:	2330      	movle	r3, #48	; 0x30
 800d960:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d964:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d968:	1b52      	subs	r2, r2, r5
 800d96a:	6122      	str	r2, [r4, #16]
 800d96c:	f8cd a000 	str.w	sl, [sp]
 800d970:	464b      	mov	r3, r9
 800d972:	aa03      	add	r2, sp, #12
 800d974:	4621      	mov	r1, r4
 800d976:	4640      	mov	r0, r8
 800d978:	f7ff fee2 	bl	800d740 <_printf_common>
 800d97c:	3001      	adds	r0, #1
 800d97e:	d14c      	bne.n	800da1a <_printf_i+0x1fe>
 800d980:	f04f 30ff 	mov.w	r0, #4294967295
 800d984:	b004      	add	sp, #16
 800d986:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d98a:	4835      	ldr	r0, [pc, #212]	; (800da60 <_printf_i+0x244>)
 800d98c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d990:	6829      	ldr	r1, [r5, #0]
 800d992:	6823      	ldr	r3, [r4, #0]
 800d994:	f851 6b04 	ldr.w	r6, [r1], #4
 800d998:	6029      	str	r1, [r5, #0]
 800d99a:	061d      	lsls	r5, r3, #24
 800d99c:	d514      	bpl.n	800d9c8 <_printf_i+0x1ac>
 800d99e:	07df      	lsls	r7, r3, #31
 800d9a0:	bf44      	itt	mi
 800d9a2:	f043 0320 	orrmi.w	r3, r3, #32
 800d9a6:	6023      	strmi	r3, [r4, #0]
 800d9a8:	b91e      	cbnz	r6, 800d9b2 <_printf_i+0x196>
 800d9aa:	6823      	ldr	r3, [r4, #0]
 800d9ac:	f023 0320 	bic.w	r3, r3, #32
 800d9b0:	6023      	str	r3, [r4, #0]
 800d9b2:	2310      	movs	r3, #16
 800d9b4:	e7b0      	b.n	800d918 <_printf_i+0xfc>
 800d9b6:	6823      	ldr	r3, [r4, #0]
 800d9b8:	f043 0320 	orr.w	r3, r3, #32
 800d9bc:	6023      	str	r3, [r4, #0]
 800d9be:	2378      	movs	r3, #120	; 0x78
 800d9c0:	4828      	ldr	r0, [pc, #160]	; (800da64 <_printf_i+0x248>)
 800d9c2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d9c6:	e7e3      	b.n	800d990 <_printf_i+0x174>
 800d9c8:	0659      	lsls	r1, r3, #25
 800d9ca:	bf48      	it	mi
 800d9cc:	b2b6      	uxthmi	r6, r6
 800d9ce:	e7e6      	b.n	800d99e <_printf_i+0x182>
 800d9d0:	4615      	mov	r5, r2
 800d9d2:	e7bb      	b.n	800d94c <_printf_i+0x130>
 800d9d4:	682b      	ldr	r3, [r5, #0]
 800d9d6:	6826      	ldr	r6, [r4, #0]
 800d9d8:	6961      	ldr	r1, [r4, #20]
 800d9da:	1d18      	adds	r0, r3, #4
 800d9dc:	6028      	str	r0, [r5, #0]
 800d9de:	0635      	lsls	r5, r6, #24
 800d9e0:	681b      	ldr	r3, [r3, #0]
 800d9e2:	d501      	bpl.n	800d9e8 <_printf_i+0x1cc>
 800d9e4:	6019      	str	r1, [r3, #0]
 800d9e6:	e002      	b.n	800d9ee <_printf_i+0x1d2>
 800d9e8:	0670      	lsls	r0, r6, #25
 800d9ea:	d5fb      	bpl.n	800d9e4 <_printf_i+0x1c8>
 800d9ec:	8019      	strh	r1, [r3, #0]
 800d9ee:	2300      	movs	r3, #0
 800d9f0:	6123      	str	r3, [r4, #16]
 800d9f2:	4615      	mov	r5, r2
 800d9f4:	e7ba      	b.n	800d96c <_printf_i+0x150>
 800d9f6:	682b      	ldr	r3, [r5, #0]
 800d9f8:	1d1a      	adds	r2, r3, #4
 800d9fa:	602a      	str	r2, [r5, #0]
 800d9fc:	681d      	ldr	r5, [r3, #0]
 800d9fe:	6862      	ldr	r2, [r4, #4]
 800da00:	2100      	movs	r1, #0
 800da02:	4628      	mov	r0, r5
 800da04:	f7f2 fbec 	bl	80001e0 <memchr>
 800da08:	b108      	cbz	r0, 800da0e <_printf_i+0x1f2>
 800da0a:	1b40      	subs	r0, r0, r5
 800da0c:	6060      	str	r0, [r4, #4]
 800da0e:	6863      	ldr	r3, [r4, #4]
 800da10:	6123      	str	r3, [r4, #16]
 800da12:	2300      	movs	r3, #0
 800da14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800da18:	e7a8      	b.n	800d96c <_printf_i+0x150>
 800da1a:	6923      	ldr	r3, [r4, #16]
 800da1c:	462a      	mov	r2, r5
 800da1e:	4649      	mov	r1, r9
 800da20:	4640      	mov	r0, r8
 800da22:	47d0      	blx	sl
 800da24:	3001      	adds	r0, #1
 800da26:	d0ab      	beq.n	800d980 <_printf_i+0x164>
 800da28:	6823      	ldr	r3, [r4, #0]
 800da2a:	079b      	lsls	r3, r3, #30
 800da2c:	d413      	bmi.n	800da56 <_printf_i+0x23a>
 800da2e:	68e0      	ldr	r0, [r4, #12]
 800da30:	9b03      	ldr	r3, [sp, #12]
 800da32:	4298      	cmp	r0, r3
 800da34:	bfb8      	it	lt
 800da36:	4618      	movlt	r0, r3
 800da38:	e7a4      	b.n	800d984 <_printf_i+0x168>
 800da3a:	2301      	movs	r3, #1
 800da3c:	4632      	mov	r2, r6
 800da3e:	4649      	mov	r1, r9
 800da40:	4640      	mov	r0, r8
 800da42:	47d0      	blx	sl
 800da44:	3001      	adds	r0, #1
 800da46:	d09b      	beq.n	800d980 <_printf_i+0x164>
 800da48:	3501      	adds	r5, #1
 800da4a:	68e3      	ldr	r3, [r4, #12]
 800da4c:	9903      	ldr	r1, [sp, #12]
 800da4e:	1a5b      	subs	r3, r3, r1
 800da50:	42ab      	cmp	r3, r5
 800da52:	dcf2      	bgt.n	800da3a <_printf_i+0x21e>
 800da54:	e7eb      	b.n	800da2e <_printf_i+0x212>
 800da56:	2500      	movs	r5, #0
 800da58:	f104 0619 	add.w	r6, r4, #25
 800da5c:	e7f5      	b.n	800da4a <_printf_i+0x22e>
 800da5e:	bf00      	nop
 800da60:	080305c5 	.word	0x080305c5
 800da64:	080305d6 	.word	0x080305d6

0800da68 <iprintf>:
 800da68:	b40f      	push	{r0, r1, r2, r3}
 800da6a:	4b0a      	ldr	r3, [pc, #40]	; (800da94 <iprintf+0x2c>)
 800da6c:	b513      	push	{r0, r1, r4, lr}
 800da6e:	681c      	ldr	r4, [r3, #0]
 800da70:	b124      	cbz	r4, 800da7c <iprintf+0x14>
 800da72:	69a3      	ldr	r3, [r4, #24]
 800da74:	b913      	cbnz	r3, 800da7c <iprintf+0x14>
 800da76:	4620      	mov	r0, r4
 800da78:	f000 f9fe 	bl	800de78 <__sinit>
 800da7c:	ab05      	add	r3, sp, #20
 800da7e:	9a04      	ldr	r2, [sp, #16]
 800da80:	68a1      	ldr	r1, [r4, #8]
 800da82:	9301      	str	r3, [sp, #4]
 800da84:	4620      	mov	r0, r4
 800da86:	f7ff fd21 	bl	800d4cc <_vfiprintf_r>
 800da8a:	b002      	add	sp, #8
 800da8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800da90:	b004      	add	sp, #16
 800da92:	4770      	bx	lr
 800da94:	2000011c 	.word	0x2000011c

0800da98 <putchar>:
 800da98:	4b09      	ldr	r3, [pc, #36]	; (800dac0 <putchar+0x28>)
 800da9a:	b513      	push	{r0, r1, r4, lr}
 800da9c:	681c      	ldr	r4, [r3, #0]
 800da9e:	4601      	mov	r1, r0
 800daa0:	b134      	cbz	r4, 800dab0 <putchar+0x18>
 800daa2:	69a3      	ldr	r3, [r4, #24]
 800daa4:	b923      	cbnz	r3, 800dab0 <putchar+0x18>
 800daa6:	9001      	str	r0, [sp, #4]
 800daa8:	4620      	mov	r0, r4
 800daaa:	f000 f9e5 	bl	800de78 <__sinit>
 800daae:	9901      	ldr	r1, [sp, #4]
 800dab0:	68a2      	ldr	r2, [r4, #8]
 800dab2:	4620      	mov	r0, r4
 800dab4:	b002      	add	sp, #8
 800dab6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800daba:	f000 bbc3 	b.w	800e244 <_putc_r>
 800dabe:	bf00      	nop
 800dac0:	2000011c 	.word	0x2000011c

0800dac4 <__swbuf_r>:
 800dac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dac6:	460e      	mov	r6, r1
 800dac8:	4614      	mov	r4, r2
 800daca:	4605      	mov	r5, r0
 800dacc:	b118      	cbz	r0, 800dad6 <__swbuf_r+0x12>
 800dace:	6983      	ldr	r3, [r0, #24]
 800dad0:	b90b      	cbnz	r3, 800dad6 <__swbuf_r+0x12>
 800dad2:	f000 f9d1 	bl	800de78 <__sinit>
 800dad6:	4b21      	ldr	r3, [pc, #132]	; (800db5c <__swbuf_r+0x98>)
 800dad8:	429c      	cmp	r4, r3
 800dada:	d12b      	bne.n	800db34 <__swbuf_r+0x70>
 800dadc:	686c      	ldr	r4, [r5, #4]
 800dade:	69a3      	ldr	r3, [r4, #24]
 800dae0:	60a3      	str	r3, [r4, #8]
 800dae2:	89a3      	ldrh	r3, [r4, #12]
 800dae4:	071a      	lsls	r2, r3, #28
 800dae6:	d52f      	bpl.n	800db48 <__swbuf_r+0x84>
 800dae8:	6923      	ldr	r3, [r4, #16]
 800daea:	b36b      	cbz	r3, 800db48 <__swbuf_r+0x84>
 800daec:	6923      	ldr	r3, [r4, #16]
 800daee:	6820      	ldr	r0, [r4, #0]
 800daf0:	1ac0      	subs	r0, r0, r3
 800daf2:	6963      	ldr	r3, [r4, #20]
 800daf4:	b2f6      	uxtb	r6, r6
 800daf6:	4283      	cmp	r3, r0
 800daf8:	4637      	mov	r7, r6
 800dafa:	dc04      	bgt.n	800db06 <__swbuf_r+0x42>
 800dafc:	4621      	mov	r1, r4
 800dafe:	4628      	mov	r0, r5
 800db00:	f000 f926 	bl	800dd50 <_fflush_r>
 800db04:	bb30      	cbnz	r0, 800db54 <__swbuf_r+0x90>
 800db06:	68a3      	ldr	r3, [r4, #8]
 800db08:	3b01      	subs	r3, #1
 800db0a:	60a3      	str	r3, [r4, #8]
 800db0c:	6823      	ldr	r3, [r4, #0]
 800db0e:	1c5a      	adds	r2, r3, #1
 800db10:	6022      	str	r2, [r4, #0]
 800db12:	701e      	strb	r6, [r3, #0]
 800db14:	6963      	ldr	r3, [r4, #20]
 800db16:	3001      	adds	r0, #1
 800db18:	4283      	cmp	r3, r0
 800db1a:	d004      	beq.n	800db26 <__swbuf_r+0x62>
 800db1c:	89a3      	ldrh	r3, [r4, #12]
 800db1e:	07db      	lsls	r3, r3, #31
 800db20:	d506      	bpl.n	800db30 <__swbuf_r+0x6c>
 800db22:	2e0a      	cmp	r6, #10
 800db24:	d104      	bne.n	800db30 <__swbuf_r+0x6c>
 800db26:	4621      	mov	r1, r4
 800db28:	4628      	mov	r0, r5
 800db2a:	f000 f911 	bl	800dd50 <_fflush_r>
 800db2e:	b988      	cbnz	r0, 800db54 <__swbuf_r+0x90>
 800db30:	4638      	mov	r0, r7
 800db32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800db34:	4b0a      	ldr	r3, [pc, #40]	; (800db60 <__swbuf_r+0x9c>)
 800db36:	429c      	cmp	r4, r3
 800db38:	d101      	bne.n	800db3e <__swbuf_r+0x7a>
 800db3a:	68ac      	ldr	r4, [r5, #8]
 800db3c:	e7cf      	b.n	800dade <__swbuf_r+0x1a>
 800db3e:	4b09      	ldr	r3, [pc, #36]	; (800db64 <__swbuf_r+0xa0>)
 800db40:	429c      	cmp	r4, r3
 800db42:	bf08      	it	eq
 800db44:	68ec      	ldreq	r4, [r5, #12]
 800db46:	e7ca      	b.n	800dade <__swbuf_r+0x1a>
 800db48:	4621      	mov	r1, r4
 800db4a:	4628      	mov	r0, r5
 800db4c:	f000 f80c 	bl	800db68 <__swsetup_r>
 800db50:	2800      	cmp	r0, #0
 800db52:	d0cb      	beq.n	800daec <__swbuf_r+0x28>
 800db54:	f04f 37ff 	mov.w	r7, #4294967295
 800db58:	e7ea      	b.n	800db30 <__swbuf_r+0x6c>
 800db5a:	bf00      	nop
 800db5c:	08030608 	.word	0x08030608
 800db60:	08030628 	.word	0x08030628
 800db64:	080305e8 	.word	0x080305e8

0800db68 <__swsetup_r>:
 800db68:	4b32      	ldr	r3, [pc, #200]	; (800dc34 <__swsetup_r+0xcc>)
 800db6a:	b570      	push	{r4, r5, r6, lr}
 800db6c:	681d      	ldr	r5, [r3, #0]
 800db6e:	4606      	mov	r6, r0
 800db70:	460c      	mov	r4, r1
 800db72:	b125      	cbz	r5, 800db7e <__swsetup_r+0x16>
 800db74:	69ab      	ldr	r3, [r5, #24]
 800db76:	b913      	cbnz	r3, 800db7e <__swsetup_r+0x16>
 800db78:	4628      	mov	r0, r5
 800db7a:	f000 f97d 	bl	800de78 <__sinit>
 800db7e:	4b2e      	ldr	r3, [pc, #184]	; (800dc38 <__swsetup_r+0xd0>)
 800db80:	429c      	cmp	r4, r3
 800db82:	d10f      	bne.n	800dba4 <__swsetup_r+0x3c>
 800db84:	686c      	ldr	r4, [r5, #4]
 800db86:	89a3      	ldrh	r3, [r4, #12]
 800db88:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800db8c:	0719      	lsls	r1, r3, #28
 800db8e:	d42c      	bmi.n	800dbea <__swsetup_r+0x82>
 800db90:	06dd      	lsls	r5, r3, #27
 800db92:	d411      	bmi.n	800dbb8 <__swsetup_r+0x50>
 800db94:	2309      	movs	r3, #9
 800db96:	6033      	str	r3, [r6, #0]
 800db98:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800db9c:	81a3      	strh	r3, [r4, #12]
 800db9e:	f04f 30ff 	mov.w	r0, #4294967295
 800dba2:	e03e      	b.n	800dc22 <__swsetup_r+0xba>
 800dba4:	4b25      	ldr	r3, [pc, #148]	; (800dc3c <__swsetup_r+0xd4>)
 800dba6:	429c      	cmp	r4, r3
 800dba8:	d101      	bne.n	800dbae <__swsetup_r+0x46>
 800dbaa:	68ac      	ldr	r4, [r5, #8]
 800dbac:	e7eb      	b.n	800db86 <__swsetup_r+0x1e>
 800dbae:	4b24      	ldr	r3, [pc, #144]	; (800dc40 <__swsetup_r+0xd8>)
 800dbb0:	429c      	cmp	r4, r3
 800dbb2:	bf08      	it	eq
 800dbb4:	68ec      	ldreq	r4, [r5, #12]
 800dbb6:	e7e6      	b.n	800db86 <__swsetup_r+0x1e>
 800dbb8:	0758      	lsls	r0, r3, #29
 800dbba:	d512      	bpl.n	800dbe2 <__swsetup_r+0x7a>
 800dbbc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dbbe:	b141      	cbz	r1, 800dbd2 <__swsetup_r+0x6a>
 800dbc0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dbc4:	4299      	cmp	r1, r3
 800dbc6:	d002      	beq.n	800dbce <__swsetup_r+0x66>
 800dbc8:	4630      	mov	r0, r6
 800dbca:	f000 fa5b 	bl	800e084 <_free_r>
 800dbce:	2300      	movs	r3, #0
 800dbd0:	6363      	str	r3, [r4, #52]	; 0x34
 800dbd2:	89a3      	ldrh	r3, [r4, #12]
 800dbd4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800dbd8:	81a3      	strh	r3, [r4, #12]
 800dbda:	2300      	movs	r3, #0
 800dbdc:	6063      	str	r3, [r4, #4]
 800dbde:	6923      	ldr	r3, [r4, #16]
 800dbe0:	6023      	str	r3, [r4, #0]
 800dbe2:	89a3      	ldrh	r3, [r4, #12]
 800dbe4:	f043 0308 	orr.w	r3, r3, #8
 800dbe8:	81a3      	strh	r3, [r4, #12]
 800dbea:	6923      	ldr	r3, [r4, #16]
 800dbec:	b94b      	cbnz	r3, 800dc02 <__swsetup_r+0x9a>
 800dbee:	89a3      	ldrh	r3, [r4, #12]
 800dbf0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800dbf4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dbf8:	d003      	beq.n	800dc02 <__swsetup_r+0x9a>
 800dbfa:	4621      	mov	r1, r4
 800dbfc:	4630      	mov	r0, r6
 800dbfe:	f000 fa01 	bl	800e004 <__smakebuf_r>
 800dc02:	89a0      	ldrh	r0, [r4, #12]
 800dc04:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dc08:	f010 0301 	ands.w	r3, r0, #1
 800dc0c:	d00a      	beq.n	800dc24 <__swsetup_r+0xbc>
 800dc0e:	2300      	movs	r3, #0
 800dc10:	60a3      	str	r3, [r4, #8]
 800dc12:	6963      	ldr	r3, [r4, #20]
 800dc14:	425b      	negs	r3, r3
 800dc16:	61a3      	str	r3, [r4, #24]
 800dc18:	6923      	ldr	r3, [r4, #16]
 800dc1a:	b943      	cbnz	r3, 800dc2e <__swsetup_r+0xc6>
 800dc1c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800dc20:	d1ba      	bne.n	800db98 <__swsetup_r+0x30>
 800dc22:	bd70      	pop	{r4, r5, r6, pc}
 800dc24:	0781      	lsls	r1, r0, #30
 800dc26:	bf58      	it	pl
 800dc28:	6963      	ldrpl	r3, [r4, #20]
 800dc2a:	60a3      	str	r3, [r4, #8]
 800dc2c:	e7f4      	b.n	800dc18 <__swsetup_r+0xb0>
 800dc2e:	2000      	movs	r0, #0
 800dc30:	e7f7      	b.n	800dc22 <__swsetup_r+0xba>
 800dc32:	bf00      	nop
 800dc34:	2000011c 	.word	0x2000011c
 800dc38:	08030608 	.word	0x08030608
 800dc3c:	08030628 	.word	0x08030628
 800dc40:	080305e8 	.word	0x080305e8

0800dc44 <__sflush_r>:
 800dc44:	898a      	ldrh	r2, [r1, #12]
 800dc46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc4a:	4605      	mov	r5, r0
 800dc4c:	0710      	lsls	r0, r2, #28
 800dc4e:	460c      	mov	r4, r1
 800dc50:	d458      	bmi.n	800dd04 <__sflush_r+0xc0>
 800dc52:	684b      	ldr	r3, [r1, #4]
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	dc05      	bgt.n	800dc64 <__sflush_r+0x20>
 800dc58:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	dc02      	bgt.n	800dc64 <__sflush_r+0x20>
 800dc5e:	2000      	movs	r0, #0
 800dc60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc64:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dc66:	2e00      	cmp	r6, #0
 800dc68:	d0f9      	beq.n	800dc5e <__sflush_r+0x1a>
 800dc6a:	2300      	movs	r3, #0
 800dc6c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800dc70:	682f      	ldr	r7, [r5, #0]
 800dc72:	602b      	str	r3, [r5, #0]
 800dc74:	d032      	beq.n	800dcdc <__sflush_r+0x98>
 800dc76:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800dc78:	89a3      	ldrh	r3, [r4, #12]
 800dc7a:	075a      	lsls	r2, r3, #29
 800dc7c:	d505      	bpl.n	800dc8a <__sflush_r+0x46>
 800dc7e:	6863      	ldr	r3, [r4, #4]
 800dc80:	1ac0      	subs	r0, r0, r3
 800dc82:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800dc84:	b10b      	cbz	r3, 800dc8a <__sflush_r+0x46>
 800dc86:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800dc88:	1ac0      	subs	r0, r0, r3
 800dc8a:	2300      	movs	r3, #0
 800dc8c:	4602      	mov	r2, r0
 800dc8e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dc90:	6a21      	ldr	r1, [r4, #32]
 800dc92:	4628      	mov	r0, r5
 800dc94:	47b0      	blx	r6
 800dc96:	1c43      	adds	r3, r0, #1
 800dc98:	89a3      	ldrh	r3, [r4, #12]
 800dc9a:	d106      	bne.n	800dcaa <__sflush_r+0x66>
 800dc9c:	6829      	ldr	r1, [r5, #0]
 800dc9e:	291d      	cmp	r1, #29
 800dca0:	d82c      	bhi.n	800dcfc <__sflush_r+0xb8>
 800dca2:	4a2a      	ldr	r2, [pc, #168]	; (800dd4c <__sflush_r+0x108>)
 800dca4:	40ca      	lsrs	r2, r1
 800dca6:	07d6      	lsls	r6, r2, #31
 800dca8:	d528      	bpl.n	800dcfc <__sflush_r+0xb8>
 800dcaa:	2200      	movs	r2, #0
 800dcac:	6062      	str	r2, [r4, #4]
 800dcae:	04d9      	lsls	r1, r3, #19
 800dcb0:	6922      	ldr	r2, [r4, #16]
 800dcb2:	6022      	str	r2, [r4, #0]
 800dcb4:	d504      	bpl.n	800dcc0 <__sflush_r+0x7c>
 800dcb6:	1c42      	adds	r2, r0, #1
 800dcb8:	d101      	bne.n	800dcbe <__sflush_r+0x7a>
 800dcba:	682b      	ldr	r3, [r5, #0]
 800dcbc:	b903      	cbnz	r3, 800dcc0 <__sflush_r+0x7c>
 800dcbe:	6560      	str	r0, [r4, #84]	; 0x54
 800dcc0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dcc2:	602f      	str	r7, [r5, #0]
 800dcc4:	2900      	cmp	r1, #0
 800dcc6:	d0ca      	beq.n	800dc5e <__sflush_r+0x1a>
 800dcc8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dccc:	4299      	cmp	r1, r3
 800dcce:	d002      	beq.n	800dcd6 <__sflush_r+0x92>
 800dcd0:	4628      	mov	r0, r5
 800dcd2:	f000 f9d7 	bl	800e084 <_free_r>
 800dcd6:	2000      	movs	r0, #0
 800dcd8:	6360      	str	r0, [r4, #52]	; 0x34
 800dcda:	e7c1      	b.n	800dc60 <__sflush_r+0x1c>
 800dcdc:	6a21      	ldr	r1, [r4, #32]
 800dcde:	2301      	movs	r3, #1
 800dce0:	4628      	mov	r0, r5
 800dce2:	47b0      	blx	r6
 800dce4:	1c41      	adds	r1, r0, #1
 800dce6:	d1c7      	bne.n	800dc78 <__sflush_r+0x34>
 800dce8:	682b      	ldr	r3, [r5, #0]
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d0c4      	beq.n	800dc78 <__sflush_r+0x34>
 800dcee:	2b1d      	cmp	r3, #29
 800dcf0:	d001      	beq.n	800dcf6 <__sflush_r+0xb2>
 800dcf2:	2b16      	cmp	r3, #22
 800dcf4:	d101      	bne.n	800dcfa <__sflush_r+0xb6>
 800dcf6:	602f      	str	r7, [r5, #0]
 800dcf8:	e7b1      	b.n	800dc5e <__sflush_r+0x1a>
 800dcfa:	89a3      	ldrh	r3, [r4, #12]
 800dcfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dd00:	81a3      	strh	r3, [r4, #12]
 800dd02:	e7ad      	b.n	800dc60 <__sflush_r+0x1c>
 800dd04:	690f      	ldr	r7, [r1, #16]
 800dd06:	2f00      	cmp	r7, #0
 800dd08:	d0a9      	beq.n	800dc5e <__sflush_r+0x1a>
 800dd0a:	0793      	lsls	r3, r2, #30
 800dd0c:	680e      	ldr	r6, [r1, #0]
 800dd0e:	bf08      	it	eq
 800dd10:	694b      	ldreq	r3, [r1, #20]
 800dd12:	600f      	str	r7, [r1, #0]
 800dd14:	bf18      	it	ne
 800dd16:	2300      	movne	r3, #0
 800dd18:	eba6 0807 	sub.w	r8, r6, r7
 800dd1c:	608b      	str	r3, [r1, #8]
 800dd1e:	f1b8 0f00 	cmp.w	r8, #0
 800dd22:	dd9c      	ble.n	800dc5e <__sflush_r+0x1a>
 800dd24:	6a21      	ldr	r1, [r4, #32]
 800dd26:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800dd28:	4643      	mov	r3, r8
 800dd2a:	463a      	mov	r2, r7
 800dd2c:	4628      	mov	r0, r5
 800dd2e:	47b0      	blx	r6
 800dd30:	2800      	cmp	r0, #0
 800dd32:	dc06      	bgt.n	800dd42 <__sflush_r+0xfe>
 800dd34:	89a3      	ldrh	r3, [r4, #12]
 800dd36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dd3a:	81a3      	strh	r3, [r4, #12]
 800dd3c:	f04f 30ff 	mov.w	r0, #4294967295
 800dd40:	e78e      	b.n	800dc60 <__sflush_r+0x1c>
 800dd42:	4407      	add	r7, r0
 800dd44:	eba8 0800 	sub.w	r8, r8, r0
 800dd48:	e7e9      	b.n	800dd1e <__sflush_r+0xda>
 800dd4a:	bf00      	nop
 800dd4c:	20400001 	.word	0x20400001

0800dd50 <_fflush_r>:
 800dd50:	b538      	push	{r3, r4, r5, lr}
 800dd52:	690b      	ldr	r3, [r1, #16]
 800dd54:	4605      	mov	r5, r0
 800dd56:	460c      	mov	r4, r1
 800dd58:	b913      	cbnz	r3, 800dd60 <_fflush_r+0x10>
 800dd5a:	2500      	movs	r5, #0
 800dd5c:	4628      	mov	r0, r5
 800dd5e:	bd38      	pop	{r3, r4, r5, pc}
 800dd60:	b118      	cbz	r0, 800dd6a <_fflush_r+0x1a>
 800dd62:	6983      	ldr	r3, [r0, #24]
 800dd64:	b90b      	cbnz	r3, 800dd6a <_fflush_r+0x1a>
 800dd66:	f000 f887 	bl	800de78 <__sinit>
 800dd6a:	4b14      	ldr	r3, [pc, #80]	; (800ddbc <_fflush_r+0x6c>)
 800dd6c:	429c      	cmp	r4, r3
 800dd6e:	d11b      	bne.n	800dda8 <_fflush_r+0x58>
 800dd70:	686c      	ldr	r4, [r5, #4]
 800dd72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	d0ef      	beq.n	800dd5a <_fflush_r+0xa>
 800dd7a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800dd7c:	07d0      	lsls	r0, r2, #31
 800dd7e:	d404      	bmi.n	800dd8a <_fflush_r+0x3a>
 800dd80:	0599      	lsls	r1, r3, #22
 800dd82:	d402      	bmi.n	800dd8a <_fflush_r+0x3a>
 800dd84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dd86:	f000 f915 	bl	800dfb4 <__retarget_lock_acquire_recursive>
 800dd8a:	4628      	mov	r0, r5
 800dd8c:	4621      	mov	r1, r4
 800dd8e:	f7ff ff59 	bl	800dc44 <__sflush_r>
 800dd92:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dd94:	07da      	lsls	r2, r3, #31
 800dd96:	4605      	mov	r5, r0
 800dd98:	d4e0      	bmi.n	800dd5c <_fflush_r+0xc>
 800dd9a:	89a3      	ldrh	r3, [r4, #12]
 800dd9c:	059b      	lsls	r3, r3, #22
 800dd9e:	d4dd      	bmi.n	800dd5c <_fflush_r+0xc>
 800dda0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dda2:	f000 f908 	bl	800dfb6 <__retarget_lock_release_recursive>
 800dda6:	e7d9      	b.n	800dd5c <_fflush_r+0xc>
 800dda8:	4b05      	ldr	r3, [pc, #20]	; (800ddc0 <_fflush_r+0x70>)
 800ddaa:	429c      	cmp	r4, r3
 800ddac:	d101      	bne.n	800ddb2 <_fflush_r+0x62>
 800ddae:	68ac      	ldr	r4, [r5, #8]
 800ddb0:	e7df      	b.n	800dd72 <_fflush_r+0x22>
 800ddb2:	4b04      	ldr	r3, [pc, #16]	; (800ddc4 <_fflush_r+0x74>)
 800ddb4:	429c      	cmp	r4, r3
 800ddb6:	bf08      	it	eq
 800ddb8:	68ec      	ldreq	r4, [r5, #12]
 800ddba:	e7da      	b.n	800dd72 <_fflush_r+0x22>
 800ddbc:	08030608 	.word	0x08030608
 800ddc0:	08030628 	.word	0x08030628
 800ddc4:	080305e8 	.word	0x080305e8

0800ddc8 <std>:
 800ddc8:	2300      	movs	r3, #0
 800ddca:	b510      	push	{r4, lr}
 800ddcc:	4604      	mov	r4, r0
 800ddce:	e9c0 3300 	strd	r3, r3, [r0]
 800ddd2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ddd6:	6083      	str	r3, [r0, #8]
 800ddd8:	8181      	strh	r1, [r0, #12]
 800ddda:	6643      	str	r3, [r0, #100]	; 0x64
 800dddc:	81c2      	strh	r2, [r0, #14]
 800ddde:	6183      	str	r3, [r0, #24]
 800dde0:	4619      	mov	r1, r3
 800dde2:	2208      	movs	r2, #8
 800dde4:	305c      	adds	r0, #92	; 0x5c
 800dde6:	f7ff fb3f 	bl	800d468 <memset>
 800ddea:	4b05      	ldr	r3, [pc, #20]	; (800de00 <std+0x38>)
 800ddec:	6263      	str	r3, [r4, #36]	; 0x24
 800ddee:	4b05      	ldr	r3, [pc, #20]	; (800de04 <std+0x3c>)
 800ddf0:	62a3      	str	r3, [r4, #40]	; 0x28
 800ddf2:	4b05      	ldr	r3, [pc, #20]	; (800de08 <std+0x40>)
 800ddf4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ddf6:	4b05      	ldr	r3, [pc, #20]	; (800de0c <std+0x44>)
 800ddf8:	6224      	str	r4, [r4, #32]
 800ddfa:	6323      	str	r3, [r4, #48]	; 0x30
 800ddfc:	bd10      	pop	{r4, pc}
 800ddfe:	bf00      	nop
 800de00:	0800e2f5 	.word	0x0800e2f5
 800de04:	0800e317 	.word	0x0800e317
 800de08:	0800e34f 	.word	0x0800e34f
 800de0c:	0800e373 	.word	0x0800e373

0800de10 <_cleanup_r>:
 800de10:	4901      	ldr	r1, [pc, #4]	; (800de18 <_cleanup_r+0x8>)
 800de12:	f000 b8af 	b.w	800df74 <_fwalk_reent>
 800de16:	bf00      	nop
 800de18:	0800dd51 	.word	0x0800dd51

0800de1c <__sfmoreglue>:
 800de1c:	b570      	push	{r4, r5, r6, lr}
 800de1e:	2268      	movs	r2, #104	; 0x68
 800de20:	1e4d      	subs	r5, r1, #1
 800de22:	4355      	muls	r5, r2
 800de24:	460e      	mov	r6, r1
 800de26:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800de2a:	f000 f997 	bl	800e15c <_malloc_r>
 800de2e:	4604      	mov	r4, r0
 800de30:	b140      	cbz	r0, 800de44 <__sfmoreglue+0x28>
 800de32:	2100      	movs	r1, #0
 800de34:	e9c0 1600 	strd	r1, r6, [r0]
 800de38:	300c      	adds	r0, #12
 800de3a:	60a0      	str	r0, [r4, #8]
 800de3c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800de40:	f7ff fb12 	bl	800d468 <memset>
 800de44:	4620      	mov	r0, r4
 800de46:	bd70      	pop	{r4, r5, r6, pc}

0800de48 <__sfp_lock_acquire>:
 800de48:	4801      	ldr	r0, [pc, #4]	; (800de50 <__sfp_lock_acquire+0x8>)
 800de4a:	f000 b8b3 	b.w	800dfb4 <__retarget_lock_acquire_recursive>
 800de4e:	bf00      	nop
 800de50:	200017c9 	.word	0x200017c9

0800de54 <__sfp_lock_release>:
 800de54:	4801      	ldr	r0, [pc, #4]	; (800de5c <__sfp_lock_release+0x8>)
 800de56:	f000 b8ae 	b.w	800dfb6 <__retarget_lock_release_recursive>
 800de5a:	bf00      	nop
 800de5c:	200017c9 	.word	0x200017c9

0800de60 <__sinit_lock_acquire>:
 800de60:	4801      	ldr	r0, [pc, #4]	; (800de68 <__sinit_lock_acquire+0x8>)
 800de62:	f000 b8a7 	b.w	800dfb4 <__retarget_lock_acquire_recursive>
 800de66:	bf00      	nop
 800de68:	200017ca 	.word	0x200017ca

0800de6c <__sinit_lock_release>:
 800de6c:	4801      	ldr	r0, [pc, #4]	; (800de74 <__sinit_lock_release+0x8>)
 800de6e:	f000 b8a2 	b.w	800dfb6 <__retarget_lock_release_recursive>
 800de72:	bf00      	nop
 800de74:	200017ca 	.word	0x200017ca

0800de78 <__sinit>:
 800de78:	b510      	push	{r4, lr}
 800de7a:	4604      	mov	r4, r0
 800de7c:	f7ff fff0 	bl	800de60 <__sinit_lock_acquire>
 800de80:	69a3      	ldr	r3, [r4, #24]
 800de82:	b11b      	cbz	r3, 800de8c <__sinit+0x14>
 800de84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800de88:	f7ff bff0 	b.w	800de6c <__sinit_lock_release>
 800de8c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800de90:	6523      	str	r3, [r4, #80]	; 0x50
 800de92:	4b13      	ldr	r3, [pc, #76]	; (800dee0 <__sinit+0x68>)
 800de94:	4a13      	ldr	r2, [pc, #76]	; (800dee4 <__sinit+0x6c>)
 800de96:	681b      	ldr	r3, [r3, #0]
 800de98:	62a2      	str	r2, [r4, #40]	; 0x28
 800de9a:	42a3      	cmp	r3, r4
 800de9c:	bf04      	itt	eq
 800de9e:	2301      	moveq	r3, #1
 800dea0:	61a3      	streq	r3, [r4, #24]
 800dea2:	4620      	mov	r0, r4
 800dea4:	f000 f820 	bl	800dee8 <__sfp>
 800dea8:	6060      	str	r0, [r4, #4]
 800deaa:	4620      	mov	r0, r4
 800deac:	f000 f81c 	bl	800dee8 <__sfp>
 800deb0:	60a0      	str	r0, [r4, #8]
 800deb2:	4620      	mov	r0, r4
 800deb4:	f000 f818 	bl	800dee8 <__sfp>
 800deb8:	2200      	movs	r2, #0
 800deba:	60e0      	str	r0, [r4, #12]
 800debc:	2104      	movs	r1, #4
 800debe:	6860      	ldr	r0, [r4, #4]
 800dec0:	f7ff ff82 	bl	800ddc8 <std>
 800dec4:	68a0      	ldr	r0, [r4, #8]
 800dec6:	2201      	movs	r2, #1
 800dec8:	2109      	movs	r1, #9
 800deca:	f7ff ff7d 	bl	800ddc8 <std>
 800dece:	68e0      	ldr	r0, [r4, #12]
 800ded0:	2202      	movs	r2, #2
 800ded2:	2112      	movs	r1, #18
 800ded4:	f7ff ff78 	bl	800ddc8 <std>
 800ded8:	2301      	movs	r3, #1
 800deda:	61a3      	str	r3, [r4, #24]
 800dedc:	e7d2      	b.n	800de84 <__sinit+0xc>
 800dede:	bf00      	nop
 800dee0:	080305b0 	.word	0x080305b0
 800dee4:	0800de11 	.word	0x0800de11

0800dee8 <__sfp>:
 800dee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800deea:	4607      	mov	r7, r0
 800deec:	f7ff ffac 	bl	800de48 <__sfp_lock_acquire>
 800def0:	4b1e      	ldr	r3, [pc, #120]	; (800df6c <__sfp+0x84>)
 800def2:	681e      	ldr	r6, [r3, #0]
 800def4:	69b3      	ldr	r3, [r6, #24]
 800def6:	b913      	cbnz	r3, 800defe <__sfp+0x16>
 800def8:	4630      	mov	r0, r6
 800defa:	f7ff ffbd 	bl	800de78 <__sinit>
 800defe:	3648      	adds	r6, #72	; 0x48
 800df00:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800df04:	3b01      	subs	r3, #1
 800df06:	d503      	bpl.n	800df10 <__sfp+0x28>
 800df08:	6833      	ldr	r3, [r6, #0]
 800df0a:	b30b      	cbz	r3, 800df50 <__sfp+0x68>
 800df0c:	6836      	ldr	r6, [r6, #0]
 800df0e:	e7f7      	b.n	800df00 <__sfp+0x18>
 800df10:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800df14:	b9d5      	cbnz	r5, 800df4c <__sfp+0x64>
 800df16:	4b16      	ldr	r3, [pc, #88]	; (800df70 <__sfp+0x88>)
 800df18:	60e3      	str	r3, [r4, #12]
 800df1a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800df1e:	6665      	str	r5, [r4, #100]	; 0x64
 800df20:	f000 f847 	bl	800dfb2 <__retarget_lock_init_recursive>
 800df24:	f7ff ff96 	bl	800de54 <__sfp_lock_release>
 800df28:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800df2c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800df30:	6025      	str	r5, [r4, #0]
 800df32:	61a5      	str	r5, [r4, #24]
 800df34:	2208      	movs	r2, #8
 800df36:	4629      	mov	r1, r5
 800df38:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800df3c:	f7ff fa94 	bl	800d468 <memset>
 800df40:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800df44:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800df48:	4620      	mov	r0, r4
 800df4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800df4c:	3468      	adds	r4, #104	; 0x68
 800df4e:	e7d9      	b.n	800df04 <__sfp+0x1c>
 800df50:	2104      	movs	r1, #4
 800df52:	4638      	mov	r0, r7
 800df54:	f7ff ff62 	bl	800de1c <__sfmoreglue>
 800df58:	4604      	mov	r4, r0
 800df5a:	6030      	str	r0, [r6, #0]
 800df5c:	2800      	cmp	r0, #0
 800df5e:	d1d5      	bne.n	800df0c <__sfp+0x24>
 800df60:	f7ff ff78 	bl	800de54 <__sfp_lock_release>
 800df64:	230c      	movs	r3, #12
 800df66:	603b      	str	r3, [r7, #0]
 800df68:	e7ee      	b.n	800df48 <__sfp+0x60>
 800df6a:	bf00      	nop
 800df6c:	080305b0 	.word	0x080305b0
 800df70:	ffff0001 	.word	0xffff0001

0800df74 <_fwalk_reent>:
 800df74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800df78:	4606      	mov	r6, r0
 800df7a:	4688      	mov	r8, r1
 800df7c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800df80:	2700      	movs	r7, #0
 800df82:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800df86:	f1b9 0901 	subs.w	r9, r9, #1
 800df8a:	d505      	bpl.n	800df98 <_fwalk_reent+0x24>
 800df8c:	6824      	ldr	r4, [r4, #0]
 800df8e:	2c00      	cmp	r4, #0
 800df90:	d1f7      	bne.n	800df82 <_fwalk_reent+0xe>
 800df92:	4638      	mov	r0, r7
 800df94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800df98:	89ab      	ldrh	r3, [r5, #12]
 800df9a:	2b01      	cmp	r3, #1
 800df9c:	d907      	bls.n	800dfae <_fwalk_reent+0x3a>
 800df9e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800dfa2:	3301      	adds	r3, #1
 800dfa4:	d003      	beq.n	800dfae <_fwalk_reent+0x3a>
 800dfa6:	4629      	mov	r1, r5
 800dfa8:	4630      	mov	r0, r6
 800dfaa:	47c0      	blx	r8
 800dfac:	4307      	orrs	r7, r0
 800dfae:	3568      	adds	r5, #104	; 0x68
 800dfb0:	e7e9      	b.n	800df86 <_fwalk_reent+0x12>

0800dfb2 <__retarget_lock_init_recursive>:
 800dfb2:	4770      	bx	lr

0800dfb4 <__retarget_lock_acquire_recursive>:
 800dfb4:	4770      	bx	lr

0800dfb6 <__retarget_lock_release_recursive>:
 800dfb6:	4770      	bx	lr

0800dfb8 <__swhatbuf_r>:
 800dfb8:	b570      	push	{r4, r5, r6, lr}
 800dfba:	460e      	mov	r6, r1
 800dfbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dfc0:	2900      	cmp	r1, #0
 800dfc2:	b096      	sub	sp, #88	; 0x58
 800dfc4:	4614      	mov	r4, r2
 800dfc6:	461d      	mov	r5, r3
 800dfc8:	da08      	bge.n	800dfdc <__swhatbuf_r+0x24>
 800dfca:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800dfce:	2200      	movs	r2, #0
 800dfd0:	602a      	str	r2, [r5, #0]
 800dfd2:	061a      	lsls	r2, r3, #24
 800dfd4:	d410      	bmi.n	800dff8 <__swhatbuf_r+0x40>
 800dfd6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dfda:	e00e      	b.n	800dffa <__swhatbuf_r+0x42>
 800dfdc:	466a      	mov	r2, sp
 800dfde:	f000 f9ef 	bl	800e3c0 <_fstat_r>
 800dfe2:	2800      	cmp	r0, #0
 800dfe4:	dbf1      	blt.n	800dfca <__swhatbuf_r+0x12>
 800dfe6:	9a01      	ldr	r2, [sp, #4]
 800dfe8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800dfec:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800dff0:	425a      	negs	r2, r3
 800dff2:	415a      	adcs	r2, r3
 800dff4:	602a      	str	r2, [r5, #0]
 800dff6:	e7ee      	b.n	800dfd6 <__swhatbuf_r+0x1e>
 800dff8:	2340      	movs	r3, #64	; 0x40
 800dffa:	2000      	movs	r0, #0
 800dffc:	6023      	str	r3, [r4, #0]
 800dffe:	b016      	add	sp, #88	; 0x58
 800e000:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e004 <__smakebuf_r>:
 800e004:	898b      	ldrh	r3, [r1, #12]
 800e006:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e008:	079d      	lsls	r5, r3, #30
 800e00a:	4606      	mov	r6, r0
 800e00c:	460c      	mov	r4, r1
 800e00e:	d507      	bpl.n	800e020 <__smakebuf_r+0x1c>
 800e010:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e014:	6023      	str	r3, [r4, #0]
 800e016:	6123      	str	r3, [r4, #16]
 800e018:	2301      	movs	r3, #1
 800e01a:	6163      	str	r3, [r4, #20]
 800e01c:	b002      	add	sp, #8
 800e01e:	bd70      	pop	{r4, r5, r6, pc}
 800e020:	ab01      	add	r3, sp, #4
 800e022:	466a      	mov	r2, sp
 800e024:	f7ff ffc8 	bl	800dfb8 <__swhatbuf_r>
 800e028:	9900      	ldr	r1, [sp, #0]
 800e02a:	4605      	mov	r5, r0
 800e02c:	4630      	mov	r0, r6
 800e02e:	f000 f895 	bl	800e15c <_malloc_r>
 800e032:	b948      	cbnz	r0, 800e048 <__smakebuf_r+0x44>
 800e034:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e038:	059a      	lsls	r2, r3, #22
 800e03a:	d4ef      	bmi.n	800e01c <__smakebuf_r+0x18>
 800e03c:	f023 0303 	bic.w	r3, r3, #3
 800e040:	f043 0302 	orr.w	r3, r3, #2
 800e044:	81a3      	strh	r3, [r4, #12]
 800e046:	e7e3      	b.n	800e010 <__smakebuf_r+0xc>
 800e048:	4b0d      	ldr	r3, [pc, #52]	; (800e080 <__smakebuf_r+0x7c>)
 800e04a:	62b3      	str	r3, [r6, #40]	; 0x28
 800e04c:	89a3      	ldrh	r3, [r4, #12]
 800e04e:	6020      	str	r0, [r4, #0]
 800e050:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e054:	81a3      	strh	r3, [r4, #12]
 800e056:	9b00      	ldr	r3, [sp, #0]
 800e058:	6163      	str	r3, [r4, #20]
 800e05a:	9b01      	ldr	r3, [sp, #4]
 800e05c:	6120      	str	r0, [r4, #16]
 800e05e:	b15b      	cbz	r3, 800e078 <__smakebuf_r+0x74>
 800e060:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e064:	4630      	mov	r0, r6
 800e066:	f000 f9bd 	bl	800e3e4 <_isatty_r>
 800e06a:	b128      	cbz	r0, 800e078 <__smakebuf_r+0x74>
 800e06c:	89a3      	ldrh	r3, [r4, #12]
 800e06e:	f023 0303 	bic.w	r3, r3, #3
 800e072:	f043 0301 	orr.w	r3, r3, #1
 800e076:	81a3      	strh	r3, [r4, #12]
 800e078:	89a0      	ldrh	r0, [r4, #12]
 800e07a:	4305      	orrs	r5, r0
 800e07c:	81a5      	strh	r5, [r4, #12]
 800e07e:	e7cd      	b.n	800e01c <__smakebuf_r+0x18>
 800e080:	0800de11 	.word	0x0800de11

0800e084 <_free_r>:
 800e084:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e086:	2900      	cmp	r1, #0
 800e088:	d044      	beq.n	800e114 <_free_r+0x90>
 800e08a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e08e:	9001      	str	r0, [sp, #4]
 800e090:	2b00      	cmp	r3, #0
 800e092:	f1a1 0404 	sub.w	r4, r1, #4
 800e096:	bfb8      	it	lt
 800e098:	18e4      	addlt	r4, r4, r3
 800e09a:	f000 f9c5 	bl	800e428 <__malloc_lock>
 800e09e:	4a1e      	ldr	r2, [pc, #120]	; (800e118 <_free_r+0x94>)
 800e0a0:	9801      	ldr	r0, [sp, #4]
 800e0a2:	6813      	ldr	r3, [r2, #0]
 800e0a4:	b933      	cbnz	r3, 800e0b4 <_free_r+0x30>
 800e0a6:	6063      	str	r3, [r4, #4]
 800e0a8:	6014      	str	r4, [r2, #0]
 800e0aa:	b003      	add	sp, #12
 800e0ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e0b0:	f000 b9c0 	b.w	800e434 <__malloc_unlock>
 800e0b4:	42a3      	cmp	r3, r4
 800e0b6:	d908      	bls.n	800e0ca <_free_r+0x46>
 800e0b8:	6825      	ldr	r5, [r4, #0]
 800e0ba:	1961      	adds	r1, r4, r5
 800e0bc:	428b      	cmp	r3, r1
 800e0be:	bf01      	itttt	eq
 800e0c0:	6819      	ldreq	r1, [r3, #0]
 800e0c2:	685b      	ldreq	r3, [r3, #4]
 800e0c4:	1949      	addeq	r1, r1, r5
 800e0c6:	6021      	streq	r1, [r4, #0]
 800e0c8:	e7ed      	b.n	800e0a6 <_free_r+0x22>
 800e0ca:	461a      	mov	r2, r3
 800e0cc:	685b      	ldr	r3, [r3, #4]
 800e0ce:	b10b      	cbz	r3, 800e0d4 <_free_r+0x50>
 800e0d0:	42a3      	cmp	r3, r4
 800e0d2:	d9fa      	bls.n	800e0ca <_free_r+0x46>
 800e0d4:	6811      	ldr	r1, [r2, #0]
 800e0d6:	1855      	adds	r5, r2, r1
 800e0d8:	42a5      	cmp	r5, r4
 800e0da:	d10b      	bne.n	800e0f4 <_free_r+0x70>
 800e0dc:	6824      	ldr	r4, [r4, #0]
 800e0de:	4421      	add	r1, r4
 800e0e0:	1854      	adds	r4, r2, r1
 800e0e2:	42a3      	cmp	r3, r4
 800e0e4:	6011      	str	r1, [r2, #0]
 800e0e6:	d1e0      	bne.n	800e0aa <_free_r+0x26>
 800e0e8:	681c      	ldr	r4, [r3, #0]
 800e0ea:	685b      	ldr	r3, [r3, #4]
 800e0ec:	6053      	str	r3, [r2, #4]
 800e0ee:	4421      	add	r1, r4
 800e0f0:	6011      	str	r1, [r2, #0]
 800e0f2:	e7da      	b.n	800e0aa <_free_r+0x26>
 800e0f4:	d902      	bls.n	800e0fc <_free_r+0x78>
 800e0f6:	230c      	movs	r3, #12
 800e0f8:	6003      	str	r3, [r0, #0]
 800e0fa:	e7d6      	b.n	800e0aa <_free_r+0x26>
 800e0fc:	6825      	ldr	r5, [r4, #0]
 800e0fe:	1961      	adds	r1, r4, r5
 800e100:	428b      	cmp	r3, r1
 800e102:	bf04      	itt	eq
 800e104:	6819      	ldreq	r1, [r3, #0]
 800e106:	685b      	ldreq	r3, [r3, #4]
 800e108:	6063      	str	r3, [r4, #4]
 800e10a:	bf04      	itt	eq
 800e10c:	1949      	addeq	r1, r1, r5
 800e10e:	6021      	streq	r1, [r4, #0]
 800e110:	6054      	str	r4, [r2, #4]
 800e112:	e7ca      	b.n	800e0aa <_free_r+0x26>
 800e114:	b003      	add	sp, #12
 800e116:	bd30      	pop	{r4, r5, pc}
 800e118:	200017cc 	.word	0x200017cc

0800e11c <sbrk_aligned>:
 800e11c:	b570      	push	{r4, r5, r6, lr}
 800e11e:	4e0e      	ldr	r6, [pc, #56]	; (800e158 <sbrk_aligned+0x3c>)
 800e120:	460c      	mov	r4, r1
 800e122:	6831      	ldr	r1, [r6, #0]
 800e124:	4605      	mov	r5, r0
 800e126:	b911      	cbnz	r1, 800e12e <sbrk_aligned+0x12>
 800e128:	f000 f8d4 	bl	800e2d4 <_sbrk_r>
 800e12c:	6030      	str	r0, [r6, #0]
 800e12e:	4621      	mov	r1, r4
 800e130:	4628      	mov	r0, r5
 800e132:	f000 f8cf 	bl	800e2d4 <_sbrk_r>
 800e136:	1c43      	adds	r3, r0, #1
 800e138:	d00a      	beq.n	800e150 <sbrk_aligned+0x34>
 800e13a:	1cc4      	adds	r4, r0, #3
 800e13c:	f024 0403 	bic.w	r4, r4, #3
 800e140:	42a0      	cmp	r0, r4
 800e142:	d007      	beq.n	800e154 <sbrk_aligned+0x38>
 800e144:	1a21      	subs	r1, r4, r0
 800e146:	4628      	mov	r0, r5
 800e148:	f000 f8c4 	bl	800e2d4 <_sbrk_r>
 800e14c:	3001      	adds	r0, #1
 800e14e:	d101      	bne.n	800e154 <sbrk_aligned+0x38>
 800e150:	f04f 34ff 	mov.w	r4, #4294967295
 800e154:	4620      	mov	r0, r4
 800e156:	bd70      	pop	{r4, r5, r6, pc}
 800e158:	200017d0 	.word	0x200017d0

0800e15c <_malloc_r>:
 800e15c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e160:	1ccd      	adds	r5, r1, #3
 800e162:	f025 0503 	bic.w	r5, r5, #3
 800e166:	3508      	adds	r5, #8
 800e168:	2d0c      	cmp	r5, #12
 800e16a:	bf38      	it	cc
 800e16c:	250c      	movcc	r5, #12
 800e16e:	2d00      	cmp	r5, #0
 800e170:	4607      	mov	r7, r0
 800e172:	db01      	blt.n	800e178 <_malloc_r+0x1c>
 800e174:	42a9      	cmp	r1, r5
 800e176:	d905      	bls.n	800e184 <_malloc_r+0x28>
 800e178:	230c      	movs	r3, #12
 800e17a:	603b      	str	r3, [r7, #0]
 800e17c:	2600      	movs	r6, #0
 800e17e:	4630      	mov	r0, r6
 800e180:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e184:	4e2e      	ldr	r6, [pc, #184]	; (800e240 <_malloc_r+0xe4>)
 800e186:	f000 f94f 	bl	800e428 <__malloc_lock>
 800e18a:	6833      	ldr	r3, [r6, #0]
 800e18c:	461c      	mov	r4, r3
 800e18e:	bb34      	cbnz	r4, 800e1de <_malloc_r+0x82>
 800e190:	4629      	mov	r1, r5
 800e192:	4638      	mov	r0, r7
 800e194:	f7ff ffc2 	bl	800e11c <sbrk_aligned>
 800e198:	1c43      	adds	r3, r0, #1
 800e19a:	4604      	mov	r4, r0
 800e19c:	d14d      	bne.n	800e23a <_malloc_r+0xde>
 800e19e:	6834      	ldr	r4, [r6, #0]
 800e1a0:	4626      	mov	r6, r4
 800e1a2:	2e00      	cmp	r6, #0
 800e1a4:	d140      	bne.n	800e228 <_malloc_r+0xcc>
 800e1a6:	6823      	ldr	r3, [r4, #0]
 800e1a8:	4631      	mov	r1, r6
 800e1aa:	4638      	mov	r0, r7
 800e1ac:	eb04 0803 	add.w	r8, r4, r3
 800e1b0:	f000 f890 	bl	800e2d4 <_sbrk_r>
 800e1b4:	4580      	cmp	r8, r0
 800e1b6:	d13a      	bne.n	800e22e <_malloc_r+0xd2>
 800e1b8:	6821      	ldr	r1, [r4, #0]
 800e1ba:	3503      	adds	r5, #3
 800e1bc:	1a6d      	subs	r5, r5, r1
 800e1be:	f025 0503 	bic.w	r5, r5, #3
 800e1c2:	3508      	adds	r5, #8
 800e1c4:	2d0c      	cmp	r5, #12
 800e1c6:	bf38      	it	cc
 800e1c8:	250c      	movcc	r5, #12
 800e1ca:	4629      	mov	r1, r5
 800e1cc:	4638      	mov	r0, r7
 800e1ce:	f7ff ffa5 	bl	800e11c <sbrk_aligned>
 800e1d2:	3001      	adds	r0, #1
 800e1d4:	d02b      	beq.n	800e22e <_malloc_r+0xd2>
 800e1d6:	6823      	ldr	r3, [r4, #0]
 800e1d8:	442b      	add	r3, r5
 800e1da:	6023      	str	r3, [r4, #0]
 800e1dc:	e00e      	b.n	800e1fc <_malloc_r+0xa0>
 800e1de:	6822      	ldr	r2, [r4, #0]
 800e1e0:	1b52      	subs	r2, r2, r5
 800e1e2:	d41e      	bmi.n	800e222 <_malloc_r+0xc6>
 800e1e4:	2a0b      	cmp	r2, #11
 800e1e6:	d916      	bls.n	800e216 <_malloc_r+0xba>
 800e1e8:	1961      	adds	r1, r4, r5
 800e1ea:	42a3      	cmp	r3, r4
 800e1ec:	6025      	str	r5, [r4, #0]
 800e1ee:	bf18      	it	ne
 800e1f0:	6059      	strne	r1, [r3, #4]
 800e1f2:	6863      	ldr	r3, [r4, #4]
 800e1f4:	bf08      	it	eq
 800e1f6:	6031      	streq	r1, [r6, #0]
 800e1f8:	5162      	str	r2, [r4, r5]
 800e1fa:	604b      	str	r3, [r1, #4]
 800e1fc:	4638      	mov	r0, r7
 800e1fe:	f104 060b 	add.w	r6, r4, #11
 800e202:	f000 f917 	bl	800e434 <__malloc_unlock>
 800e206:	f026 0607 	bic.w	r6, r6, #7
 800e20a:	1d23      	adds	r3, r4, #4
 800e20c:	1af2      	subs	r2, r6, r3
 800e20e:	d0b6      	beq.n	800e17e <_malloc_r+0x22>
 800e210:	1b9b      	subs	r3, r3, r6
 800e212:	50a3      	str	r3, [r4, r2]
 800e214:	e7b3      	b.n	800e17e <_malloc_r+0x22>
 800e216:	6862      	ldr	r2, [r4, #4]
 800e218:	42a3      	cmp	r3, r4
 800e21a:	bf0c      	ite	eq
 800e21c:	6032      	streq	r2, [r6, #0]
 800e21e:	605a      	strne	r2, [r3, #4]
 800e220:	e7ec      	b.n	800e1fc <_malloc_r+0xa0>
 800e222:	4623      	mov	r3, r4
 800e224:	6864      	ldr	r4, [r4, #4]
 800e226:	e7b2      	b.n	800e18e <_malloc_r+0x32>
 800e228:	4634      	mov	r4, r6
 800e22a:	6876      	ldr	r6, [r6, #4]
 800e22c:	e7b9      	b.n	800e1a2 <_malloc_r+0x46>
 800e22e:	230c      	movs	r3, #12
 800e230:	603b      	str	r3, [r7, #0]
 800e232:	4638      	mov	r0, r7
 800e234:	f000 f8fe 	bl	800e434 <__malloc_unlock>
 800e238:	e7a1      	b.n	800e17e <_malloc_r+0x22>
 800e23a:	6025      	str	r5, [r4, #0]
 800e23c:	e7de      	b.n	800e1fc <_malloc_r+0xa0>
 800e23e:	bf00      	nop
 800e240:	200017cc 	.word	0x200017cc

0800e244 <_putc_r>:
 800e244:	b570      	push	{r4, r5, r6, lr}
 800e246:	460d      	mov	r5, r1
 800e248:	4614      	mov	r4, r2
 800e24a:	4606      	mov	r6, r0
 800e24c:	b118      	cbz	r0, 800e256 <_putc_r+0x12>
 800e24e:	6983      	ldr	r3, [r0, #24]
 800e250:	b90b      	cbnz	r3, 800e256 <_putc_r+0x12>
 800e252:	f7ff fe11 	bl	800de78 <__sinit>
 800e256:	4b1c      	ldr	r3, [pc, #112]	; (800e2c8 <_putc_r+0x84>)
 800e258:	429c      	cmp	r4, r3
 800e25a:	d124      	bne.n	800e2a6 <_putc_r+0x62>
 800e25c:	6874      	ldr	r4, [r6, #4]
 800e25e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e260:	07d8      	lsls	r0, r3, #31
 800e262:	d405      	bmi.n	800e270 <_putc_r+0x2c>
 800e264:	89a3      	ldrh	r3, [r4, #12]
 800e266:	0599      	lsls	r1, r3, #22
 800e268:	d402      	bmi.n	800e270 <_putc_r+0x2c>
 800e26a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e26c:	f7ff fea2 	bl	800dfb4 <__retarget_lock_acquire_recursive>
 800e270:	68a3      	ldr	r3, [r4, #8]
 800e272:	3b01      	subs	r3, #1
 800e274:	2b00      	cmp	r3, #0
 800e276:	60a3      	str	r3, [r4, #8]
 800e278:	da05      	bge.n	800e286 <_putc_r+0x42>
 800e27a:	69a2      	ldr	r2, [r4, #24]
 800e27c:	4293      	cmp	r3, r2
 800e27e:	db1c      	blt.n	800e2ba <_putc_r+0x76>
 800e280:	b2eb      	uxtb	r3, r5
 800e282:	2b0a      	cmp	r3, #10
 800e284:	d019      	beq.n	800e2ba <_putc_r+0x76>
 800e286:	6823      	ldr	r3, [r4, #0]
 800e288:	1c5a      	adds	r2, r3, #1
 800e28a:	6022      	str	r2, [r4, #0]
 800e28c:	701d      	strb	r5, [r3, #0]
 800e28e:	b2ed      	uxtb	r5, r5
 800e290:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e292:	07da      	lsls	r2, r3, #31
 800e294:	d405      	bmi.n	800e2a2 <_putc_r+0x5e>
 800e296:	89a3      	ldrh	r3, [r4, #12]
 800e298:	059b      	lsls	r3, r3, #22
 800e29a:	d402      	bmi.n	800e2a2 <_putc_r+0x5e>
 800e29c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e29e:	f7ff fe8a 	bl	800dfb6 <__retarget_lock_release_recursive>
 800e2a2:	4628      	mov	r0, r5
 800e2a4:	bd70      	pop	{r4, r5, r6, pc}
 800e2a6:	4b09      	ldr	r3, [pc, #36]	; (800e2cc <_putc_r+0x88>)
 800e2a8:	429c      	cmp	r4, r3
 800e2aa:	d101      	bne.n	800e2b0 <_putc_r+0x6c>
 800e2ac:	68b4      	ldr	r4, [r6, #8]
 800e2ae:	e7d6      	b.n	800e25e <_putc_r+0x1a>
 800e2b0:	4b07      	ldr	r3, [pc, #28]	; (800e2d0 <_putc_r+0x8c>)
 800e2b2:	429c      	cmp	r4, r3
 800e2b4:	bf08      	it	eq
 800e2b6:	68f4      	ldreq	r4, [r6, #12]
 800e2b8:	e7d1      	b.n	800e25e <_putc_r+0x1a>
 800e2ba:	4629      	mov	r1, r5
 800e2bc:	4622      	mov	r2, r4
 800e2be:	4630      	mov	r0, r6
 800e2c0:	f7ff fc00 	bl	800dac4 <__swbuf_r>
 800e2c4:	4605      	mov	r5, r0
 800e2c6:	e7e3      	b.n	800e290 <_putc_r+0x4c>
 800e2c8:	08030608 	.word	0x08030608
 800e2cc:	08030628 	.word	0x08030628
 800e2d0:	080305e8 	.word	0x080305e8

0800e2d4 <_sbrk_r>:
 800e2d4:	b538      	push	{r3, r4, r5, lr}
 800e2d6:	4d06      	ldr	r5, [pc, #24]	; (800e2f0 <_sbrk_r+0x1c>)
 800e2d8:	2300      	movs	r3, #0
 800e2da:	4604      	mov	r4, r0
 800e2dc:	4608      	mov	r0, r1
 800e2de:	602b      	str	r3, [r5, #0]
 800e2e0:	f7f4 f97c 	bl	80025dc <_sbrk>
 800e2e4:	1c43      	adds	r3, r0, #1
 800e2e6:	d102      	bne.n	800e2ee <_sbrk_r+0x1a>
 800e2e8:	682b      	ldr	r3, [r5, #0]
 800e2ea:	b103      	cbz	r3, 800e2ee <_sbrk_r+0x1a>
 800e2ec:	6023      	str	r3, [r4, #0]
 800e2ee:	bd38      	pop	{r3, r4, r5, pc}
 800e2f0:	200017d4 	.word	0x200017d4

0800e2f4 <__sread>:
 800e2f4:	b510      	push	{r4, lr}
 800e2f6:	460c      	mov	r4, r1
 800e2f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e2fc:	f000 f8a0 	bl	800e440 <_read_r>
 800e300:	2800      	cmp	r0, #0
 800e302:	bfab      	itete	ge
 800e304:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e306:	89a3      	ldrhlt	r3, [r4, #12]
 800e308:	181b      	addge	r3, r3, r0
 800e30a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e30e:	bfac      	ite	ge
 800e310:	6563      	strge	r3, [r4, #84]	; 0x54
 800e312:	81a3      	strhlt	r3, [r4, #12]
 800e314:	bd10      	pop	{r4, pc}

0800e316 <__swrite>:
 800e316:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e31a:	461f      	mov	r7, r3
 800e31c:	898b      	ldrh	r3, [r1, #12]
 800e31e:	05db      	lsls	r3, r3, #23
 800e320:	4605      	mov	r5, r0
 800e322:	460c      	mov	r4, r1
 800e324:	4616      	mov	r6, r2
 800e326:	d505      	bpl.n	800e334 <__swrite+0x1e>
 800e328:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e32c:	2302      	movs	r3, #2
 800e32e:	2200      	movs	r2, #0
 800e330:	f000 f868 	bl	800e404 <_lseek_r>
 800e334:	89a3      	ldrh	r3, [r4, #12]
 800e336:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e33a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e33e:	81a3      	strh	r3, [r4, #12]
 800e340:	4632      	mov	r2, r6
 800e342:	463b      	mov	r3, r7
 800e344:	4628      	mov	r0, r5
 800e346:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e34a:	f000 b817 	b.w	800e37c <_write_r>

0800e34e <__sseek>:
 800e34e:	b510      	push	{r4, lr}
 800e350:	460c      	mov	r4, r1
 800e352:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e356:	f000 f855 	bl	800e404 <_lseek_r>
 800e35a:	1c43      	adds	r3, r0, #1
 800e35c:	89a3      	ldrh	r3, [r4, #12]
 800e35e:	bf15      	itete	ne
 800e360:	6560      	strne	r0, [r4, #84]	; 0x54
 800e362:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e366:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e36a:	81a3      	strheq	r3, [r4, #12]
 800e36c:	bf18      	it	ne
 800e36e:	81a3      	strhne	r3, [r4, #12]
 800e370:	bd10      	pop	{r4, pc}

0800e372 <__sclose>:
 800e372:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e376:	f000 b813 	b.w	800e3a0 <_close_r>
	...

0800e37c <_write_r>:
 800e37c:	b538      	push	{r3, r4, r5, lr}
 800e37e:	4d07      	ldr	r5, [pc, #28]	; (800e39c <_write_r+0x20>)
 800e380:	4604      	mov	r4, r0
 800e382:	4608      	mov	r0, r1
 800e384:	4611      	mov	r1, r2
 800e386:	2200      	movs	r2, #0
 800e388:	602a      	str	r2, [r5, #0]
 800e38a:	461a      	mov	r2, r3
 800e38c:	f7f4 f8d5 	bl	800253a <_write>
 800e390:	1c43      	adds	r3, r0, #1
 800e392:	d102      	bne.n	800e39a <_write_r+0x1e>
 800e394:	682b      	ldr	r3, [r5, #0]
 800e396:	b103      	cbz	r3, 800e39a <_write_r+0x1e>
 800e398:	6023      	str	r3, [r4, #0]
 800e39a:	bd38      	pop	{r3, r4, r5, pc}
 800e39c:	200017d4 	.word	0x200017d4

0800e3a0 <_close_r>:
 800e3a0:	b538      	push	{r3, r4, r5, lr}
 800e3a2:	4d06      	ldr	r5, [pc, #24]	; (800e3bc <_close_r+0x1c>)
 800e3a4:	2300      	movs	r3, #0
 800e3a6:	4604      	mov	r4, r0
 800e3a8:	4608      	mov	r0, r1
 800e3aa:	602b      	str	r3, [r5, #0]
 800e3ac:	f7f4 f8e1 	bl	8002572 <_close>
 800e3b0:	1c43      	adds	r3, r0, #1
 800e3b2:	d102      	bne.n	800e3ba <_close_r+0x1a>
 800e3b4:	682b      	ldr	r3, [r5, #0]
 800e3b6:	b103      	cbz	r3, 800e3ba <_close_r+0x1a>
 800e3b8:	6023      	str	r3, [r4, #0]
 800e3ba:	bd38      	pop	{r3, r4, r5, pc}
 800e3bc:	200017d4 	.word	0x200017d4

0800e3c0 <_fstat_r>:
 800e3c0:	b538      	push	{r3, r4, r5, lr}
 800e3c2:	4d07      	ldr	r5, [pc, #28]	; (800e3e0 <_fstat_r+0x20>)
 800e3c4:	2300      	movs	r3, #0
 800e3c6:	4604      	mov	r4, r0
 800e3c8:	4608      	mov	r0, r1
 800e3ca:	4611      	mov	r1, r2
 800e3cc:	602b      	str	r3, [r5, #0]
 800e3ce:	f7f4 f8dc 	bl	800258a <_fstat>
 800e3d2:	1c43      	adds	r3, r0, #1
 800e3d4:	d102      	bne.n	800e3dc <_fstat_r+0x1c>
 800e3d6:	682b      	ldr	r3, [r5, #0]
 800e3d8:	b103      	cbz	r3, 800e3dc <_fstat_r+0x1c>
 800e3da:	6023      	str	r3, [r4, #0]
 800e3dc:	bd38      	pop	{r3, r4, r5, pc}
 800e3de:	bf00      	nop
 800e3e0:	200017d4 	.word	0x200017d4

0800e3e4 <_isatty_r>:
 800e3e4:	b538      	push	{r3, r4, r5, lr}
 800e3e6:	4d06      	ldr	r5, [pc, #24]	; (800e400 <_isatty_r+0x1c>)
 800e3e8:	2300      	movs	r3, #0
 800e3ea:	4604      	mov	r4, r0
 800e3ec:	4608      	mov	r0, r1
 800e3ee:	602b      	str	r3, [r5, #0]
 800e3f0:	f7f4 f8db 	bl	80025aa <_isatty>
 800e3f4:	1c43      	adds	r3, r0, #1
 800e3f6:	d102      	bne.n	800e3fe <_isatty_r+0x1a>
 800e3f8:	682b      	ldr	r3, [r5, #0]
 800e3fa:	b103      	cbz	r3, 800e3fe <_isatty_r+0x1a>
 800e3fc:	6023      	str	r3, [r4, #0]
 800e3fe:	bd38      	pop	{r3, r4, r5, pc}
 800e400:	200017d4 	.word	0x200017d4

0800e404 <_lseek_r>:
 800e404:	b538      	push	{r3, r4, r5, lr}
 800e406:	4d07      	ldr	r5, [pc, #28]	; (800e424 <_lseek_r+0x20>)
 800e408:	4604      	mov	r4, r0
 800e40a:	4608      	mov	r0, r1
 800e40c:	4611      	mov	r1, r2
 800e40e:	2200      	movs	r2, #0
 800e410:	602a      	str	r2, [r5, #0]
 800e412:	461a      	mov	r2, r3
 800e414:	f7f4 f8d4 	bl	80025c0 <_lseek>
 800e418:	1c43      	adds	r3, r0, #1
 800e41a:	d102      	bne.n	800e422 <_lseek_r+0x1e>
 800e41c:	682b      	ldr	r3, [r5, #0]
 800e41e:	b103      	cbz	r3, 800e422 <_lseek_r+0x1e>
 800e420:	6023      	str	r3, [r4, #0]
 800e422:	bd38      	pop	{r3, r4, r5, pc}
 800e424:	200017d4 	.word	0x200017d4

0800e428 <__malloc_lock>:
 800e428:	4801      	ldr	r0, [pc, #4]	; (800e430 <__malloc_lock+0x8>)
 800e42a:	f7ff bdc3 	b.w	800dfb4 <__retarget_lock_acquire_recursive>
 800e42e:	bf00      	nop
 800e430:	200017c8 	.word	0x200017c8

0800e434 <__malloc_unlock>:
 800e434:	4801      	ldr	r0, [pc, #4]	; (800e43c <__malloc_unlock+0x8>)
 800e436:	f7ff bdbe 	b.w	800dfb6 <__retarget_lock_release_recursive>
 800e43a:	bf00      	nop
 800e43c:	200017c8 	.word	0x200017c8

0800e440 <_read_r>:
 800e440:	b538      	push	{r3, r4, r5, lr}
 800e442:	4d07      	ldr	r5, [pc, #28]	; (800e460 <_read_r+0x20>)
 800e444:	4604      	mov	r4, r0
 800e446:	4608      	mov	r0, r1
 800e448:	4611      	mov	r1, r2
 800e44a:	2200      	movs	r2, #0
 800e44c:	602a      	str	r2, [r5, #0]
 800e44e:	461a      	mov	r2, r3
 800e450:	f7f4 f856 	bl	8002500 <_read>
 800e454:	1c43      	adds	r3, r0, #1
 800e456:	d102      	bne.n	800e45e <_read_r+0x1e>
 800e458:	682b      	ldr	r3, [r5, #0]
 800e45a:	b103      	cbz	r3, 800e45e <_read_r+0x1e>
 800e45c:	6023      	str	r3, [r4, #0]
 800e45e:	bd38      	pop	{r3, r4, r5, pc}
 800e460:	200017d4 	.word	0x200017d4

0800e464 <_init>:
 800e464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e466:	bf00      	nop
 800e468:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e46a:	bc08      	pop	{r3}
 800e46c:	469e      	mov	lr, r3
 800e46e:	4770      	bx	lr

0800e470 <_fini>:
 800e470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e472:	bf00      	nop
 800e474:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e476:	bc08      	pop	{r3}
 800e478:	469e      	mov	lr, r3
 800e47a:	4770      	bx	lr
